
STM32_act.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00004138  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004244  08004244  00005244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004270  08004270  00006078  2**0
                  CONTENTS
  4 .ARM          00000000  08004270  08004270  00006078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004270  08004270  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004270  08004270  00005270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004274  08004274  00005274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004278  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000078  080042f0  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080042f0  00006364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eedd  00000000  00000000  000060a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002814  00000000  00000000  00014f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00017798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acc  00000000  00000000  00018588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001795b  00000000  00000000  00019054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b63  00000000  00000000  000309af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a13f  00000000  00000000  00041512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  000cb694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000cef00  2**0
=======
  1 .text         00004d78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004e84  08004e84  00005e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fac  08004fac  000060c4  2**0
                  CONTENTS
  4 .ARM          00000000  08004fac  08004fac  000060c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fac  08004fac  000060c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fac  08004fac  00005fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fb0  08004fb0  00005fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08004fb4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200000c4  08005078  000060c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08005078  000064fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b0  00000000  00000000  000060ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e0  00000000  00000000  0001519d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00017a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae4  00000000  00000000  00018898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c9c  00000000  00000000  0001937c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011109  00000000  00000000  00031018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a67a  00000000  00000000  00042121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc79b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e08  00000000  00000000  000cc7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d05e8  2**0
>>>>>>> develop
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800422c 	.word	0x0800422c
=======
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e6c 	.word	0x08004e6c
>>>>>>> develop

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800422c 	.word	0x0800422c
=======
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08004e6c 	.word	0x08004e6c
>>>>>>> develop

0800014c <initBuzzer>:
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
 8000150:	2100      	movs	r1, #0
 8000152:	4802      	ldr	r0, [pc, #8]	@ (800015c <initBuzzer+0x10>)
<<<<<<< HEAD
 8000154:	f002 fc02 	bl	800295c <HAL_TIM_PWM_Start>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	20000124 	.word	0x20000124
=======
 8000154:	f002 fcb2 	bl	8002abc <HAL_TIM_PWM_Start>
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	20000170 	.word	0x20000170
>>>>>>> develop

08000160 <setVolumeBuzzer>:
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
 800016a:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <setVolumeBuzzer+0x30>)
 800016c:	68db      	ldr	r3, [r3, #12]
 800016e:	79fa      	ldrb	r2, [r7, #7]
 8000170:	fb02 f303 	mul.w	r3, r2, r3
 8000174:	4a07      	ldr	r2, [pc, #28]	@ (8000194 <setVolumeBuzzer+0x34>)
 8000176:	fba2 2303 	umull	r2, r3, r2, r3
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	60fb      	str	r3, [r7, #12]
 800017e:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <setVolumeBuzzer+0x30>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	68fa      	ldr	r2, [r7, #12]
 8000184:	635a      	str	r2, [r3, #52]	@ 0x34
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
<<<<<<< HEAD
 8000190:	20000124 	.word	0x20000124
=======
 8000190:	20000170 	.word	0x20000170
>>>>>>> develop
 8000194:	51eb851f 	.word	0x51eb851f

08000198 <setFrequencyBuzzer>:
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	4b0e      	ldr	r3, [pc, #56]	@ (80001dc <setFrequencyBuzzer+0x44>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	4b0e      	ldr	r3, [pc, #56]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	3301      	adds	r3, #1
 80001aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001b4:	60fb      	str	r3, [r7, #12]
 80001b6:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	68fa      	ldr	r2, [r7, #12]
 80001bc:	3a01      	subs	r2, #1
 80001be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	3b01      	subs	r3, #1
 80001c4:	4a06      	ldr	r2, [pc, #24]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001c6:	60d3      	str	r3, [r2, #12]
 80001c8:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	68fa      	ldr	r2, [r7, #12]
 80001ce:	0852      	lsrs	r2, r2, #1
 80001d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
<<<<<<< HEAD
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	20000124 	.word	0x20000124
=======
 80001dc:	20000068 	.word	0x20000068
 80001e0:	20000170 	.word	0x20000170
>>>>>>> develop

080001e4 <onBuzzer>:
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80001ec:	f7ff ffd4 	bl	8000198 <setFrequencyBuzzer>
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <offBuzzer>:
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	2000      	movs	r0, #0
 80001fa:	f7ff ffb1 	bl	8000160 <setVolumeBuzzer>
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <initFan>:
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
 8000208:	2108      	movs	r1, #8
 800020a:	4802      	ldr	r0, [pc, #8]	@ (8000214 <initFan+0x10>)
<<<<<<< HEAD
 800020c:	f002 fba6 	bl	800295c <HAL_TIM_PWM_Start>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000016c 	.word	0x2000016c
=======
 800020c:	f002 fc56 	bl	8002abc <HAL_TIM_PWM_Start>
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200001b8 	.word	0x200001b8
>>>>>>> develop

08000218 <setInternalFan>:
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000222:	4805      	ldr	r0, [pc, #20]	@ (8000238 <setInternalFan+0x20>)
<<<<<<< HEAD
 8000224:	f001 fe5e 	bl	8001ee4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800022e:	4802      	ldr	r0, [pc, #8]	@ (8000238 <setInternalFan+0x20>)
 8000230:	f001 fe58 	bl	8001ee4 <HAL_GPIO_WritePin>
}
=======
 8000224:	f001 ff0e 	bl	8002044 <HAL_GPIO_WritePin>
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800022e:	4802      	ldr	r0, [pc, #8]	@ (8000238 <setInternalFan+0x20>)
 8000230:	f001 ff08 	bl	8002044 <HAL_GPIO_WritePin>
>>>>>>> develop
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40011000 	.word	0x40011000

0800023c <stopFan>:
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000246:	4802      	ldr	r0, [pc, #8]	@ (8000250 <stopFan+0x14>)
<<<<<<< HEAD
 8000248:	f001 fe4c 	bl	8001ee4 <HAL_GPIO_WritePin>
}
=======
 8000248:	f001 fefc 	bl	8002044 <HAL_GPIO_WritePin>
>>>>>>> develop
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40011000 	.word	0x40011000

08000254 <setSpeedFan>:
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	80fb      	strh	r3, [r7, #6]
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000264:	d302      	bcc.n	800026c <setSpeedFan+0x18>
 8000266:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800026a:	80fb      	strh	r3, [r7, #6]
 800026c:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <setSpeedFan+0x2c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
<<<<<<< HEAD
 8000280:	2000016c 	.word	0x2000016c
=======
 8000280:	200001b8 	.word	0x200001b8
>>>>>>> develop

08000284 <setLevelFan>:
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b03      	cmp	r3, #3
 8000292:	d826      	bhi.n	80002e2 <setLevelFan+0x5e>
 8000294:	a201      	add	r2, pc, #4	@ (adr r2, 800029c <setLevelFan+0x18>)
 8000296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029a:	bf00      	nop
 800029c:	080002ad 	.word	0x080002ad
 80002a0:	080002b9 	.word	0x080002b9
 80002a4:	080002c7 	.word	0x080002c7
 80002a8:	080002d5 	.word	0x080002d5
 80002ac:	f7ff ffc6 	bl	800023c <stopFan>
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffcf 	bl	8000254 <setSpeedFan>
 80002b6:	e01a      	b.n	80002ee <setLevelFan+0x6a>
 80002b8:	f7ff ffae 	bl	8000218 <setInternalFan>
 80002bc:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80002c0:	f7ff ffc8 	bl	8000254 <setSpeedFan>
 80002c4:	e013      	b.n	80002ee <setLevelFan+0x6a>
 80002c6:	f7ff ffa7 	bl	8000218 <setInternalFan>
 80002ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ce:	f7ff ffc1 	bl	8000254 <setSpeedFan>
 80002d2:	e00c      	b.n	80002ee <setLevelFan+0x6a>
 80002d4:	f7ff ffa0 	bl	8000218 <setInternalFan>
 80002d8:	f240 30e7 	movw	r0, #999	@ 0x3e7
 80002dc:	f7ff ffba 	bl	8000254 <setSpeedFan>
 80002e0:	e005      	b.n	80002ee <setLevelFan+0x6a>
 80002e2:	f7ff ffab 	bl	800023c <stopFan>
 80002e6:	2000      	movs	r0, #0
 80002e8:	f7ff ffb4 	bl	8000254 <setSpeedFan>
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop

080002f8 <onHeadLight>:
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	2201      	movs	r2, #1
 80002fe:	2180      	movs	r1, #128	@ 0x80
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <onHeadLight+0x14>)
<<<<<<< HEAD
 8000302:	f001 fdef 	bl	8001ee4 <HAL_GPIO_WritePin>
}
=======
 8000302:	f001 fe9f 	bl	8002044 <HAL_GPIO_WritePin>
>>>>>>> develop
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40010800 	.word	0x40010800

08000310 <offHeadLight>:
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
 8000314:	2200      	movs	r2, #0
 8000316:	2180      	movs	r1, #128	@ 0x80
 8000318:	4802      	ldr	r0, [pc, #8]	@ (8000324 <offHeadLight+0x14>)
<<<<<<< HEAD
 800031a:	f001 fde3 	bl	8001ee4 <HAL_GPIO_WritePin>
}
=======
 800031a:	f001 fe93 	bl	8002044 <HAL_GPIO_WritePin>
>>>>>>> develop
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010800 	.word	0x40010800

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800032c:	f001 fa34 	bl	8001798 <HAL_Init>
=======
 800032c:	f001 fae4 	bl	80018f8 <HAL_Init>
>>>>>>> develop
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000330:	f000 f840 	bl	80003b4 <SystemClock_Config>
=======
 8000330:	f000 f838 	bl	80003a4 <SystemClock_Config>
>>>>>>> develop
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000334:	f000 fab8 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000338:	f000 f876 	bl	8000428 <MX_TIM1_Init>
  MX_TIM3_Init();
 800033c:	f000 f97a 	bl	8000634 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000340:	f000 f914 	bl	800056c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000344:	f000 f9f8 	bl	8000738 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000348:	f000 fa5a 	bl	8000800 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800034c:	f000 fa82 	bl	8000854 <MX_USART2_UART_Init>
=======
 8000334:	f000 fab0 	bl	8000898 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000338:	f000 f86e 	bl	8000418 <MX_TIM1_Init>
  MX_TIM3_Init();
 800033c:	f000 f972 	bl	8000624 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000340:	f000 f90c 	bl	800055c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000344:	f000 f9f0 	bl	8000728 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000348:	f000 fa52 	bl	80007f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800034c:	f000 fa7a 	bl	8000844 <MX_USART2_UART_Init>
>>>>>>> develop
  /* USER CODE BEGIN 2 */
  initBuzzer();
 8000350:	f7ff fefc 	bl	800014c <initBuzzer>
  initFan();
 8000354:	f7ff ff56 	bl	8000204 <initFan>
  initRgb();
<<<<<<< HEAD
 8000358:	f000 fd66 	bl	8000e28 <initRgb>
  initServo();
 800035c:	f000 fe80 	bl	8001060 <initServo>
  initControlValue();
 8000360:	f000 fbb2 	bl	8000ac8 <initControlValue>
  initScheduler();
 8000364:	f000 fe40 	bl	8000fe8 <initScheduler>

  if(HAL_UART_Receive_IT(&huart1,rx_buffer,1) != HAL_OK){
 8000368:	2201      	movs	r2, #1
 800036a:	490e      	ldr	r1, [pc, #56]	@ (80003a4 <main+0x7c>)
 800036c:	480e      	ldr	r0, [pc, #56]	@ (80003a8 <main+0x80>)
 800036e:	f003 f9f6 	bl	800375e <HAL_UART_Receive_IT>
=======
 8000358:	f000 fde0 	bl	8000f1c <initRgb>
  initServo();
 800035c:	f000 fefa 	bl	8001154 <initServo>
  initControlValue();
 8000360:	f000 fc1a 	bl	8000b98 <initControlValue>

  initScheduler();
 8000364:	f000 feba 	bl	80010dc <initScheduler>


//  if(HAL_UART_Receive_IT(&huart1,rx_buffer + rxPtr,ACTUATOR_PACKET_SIZE) != HAL_OK){
//	  Error_Handler();
//  }
  if(HAL_UART_Receive_IT(&huart1,rx_buffer_1,ACTUATOR_PACKET_SIZE) != HAL_OK){
 8000368:	220b      	movs	r2, #11
 800036a:	490b      	ldr	r1, [pc, #44]	@ (8000398 <main+0x70>)
 800036c:	480b      	ldr	r0, [pc, #44]	@ (800039c <main+0x74>)
 800036e:	f003 fb31 	bl	80039d4 <HAL_UART_Receive_IT>
>>>>>>> develop
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <main+0x54>
  	  Error_Handler();
<<<<<<< HEAD
 8000378:	f000 fd50 	bl	8000e1c <Error_Handler>
=======
 8000378:	f000 fdca 	bl	8000f10 <Error_Handler>
>>>>>>> develop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(packetReceived == 1)
<<<<<<< HEAD
 800037c:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <main+0x84>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10c      	bne.n	800039e <main+0x76>
    {
      packetReceived = 0;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <main+0x84>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
      handlePacket();
 800038a:	f000 fb11 	bl	80009b0 <handlePacket>
      //printActuatorPacket();
      RxStage = START;
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <main+0x88>)
 8000390:	2201      	movs	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart1,rx_buffer,1);
 8000394:	2201      	movs	r2, #1
 8000396:	4903      	ldr	r1, [pc, #12]	@ (80003a4 <main+0x7c>)
 8000398:	4803      	ldr	r0, [pc, #12]	@ (80003a8 <main+0x80>)
 800039a:	f003 f9e0 	bl	800375e <HAL_UART_Receive_IT>
    }
    scheduler();
 800039e:	f000 fe2d 	bl	8000ffc <scheduler>
    if(packetReceived == 1)
 80003a2:	e7eb      	b.n	800037c <main+0x54>
 80003a4:	20000244 	.word	0x20000244
 80003a8:	200001b4 	.word	0x200001b4
 80003ac:	2000034f 	.word	0x2000034f
 80003b0:	20000048 	.word	0x20000048

080003b4 <SystemClock_Config>:
=======
 800037c:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <main+0x78>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d106      	bne.n	8000392 <main+0x6a>
    {
      packetReceived = 0;
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <main+0x78>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
      handlePacket();
 800038a:	f000 fbb5 	bl	8000af8 <handlePacket>
      printActuatorPacket();
 800038e:	f000 fb07 	bl	80009a0 <printActuatorPacket>
    }
    scheduler();
 8000392:	f000 fead 	bl	80010f0 <scheduler>
    if(packetReceived == 1)
 8000396:	e7f1      	b.n	800037c <main+0x54>
 8000398:	20000290 	.word	0x20000290
 800039c:	20000200 	.word	0x20000200
 80003a0:	2000039b 	.word	0x2000039b

080003a4 <SystemClock_Config>:
>>>>>>> develop
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b090      	sub	sp, #64	@ 0x40
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 0318 	add.w	r3, r7, #24
 80003be:	2228      	movs	r2, #40	@ 0x28
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 fef8 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
=======
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	@ 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	@ 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f004 f8ca 	bl	800454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
>>>>>>> develop

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80003d6:	2301      	movs	r3, #1
 80003d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003da:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80003de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fdb5 	bl	8001f58 <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80003f4:	f000 fd12 	bl	8000e1c <Error_Handler>
=======
 80003c6:	2301      	movs	r3, #1
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003ca:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80003ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fe6d 	bl	80020b8 <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80003e4:	f000 fd94 	bl	8000f10 <Error_Handler>
>>>>>>> develop
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80003f8:	230f      	movs	r3, #15
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003fc:	2301      	movs	r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f002 f823 	bl	800245c <HAL_RCC_ClockConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800041c:	f000 fcfe 	bl	8000e1c <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	3740      	adds	r7, #64	@ 0x40
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <MX_TIM1_Init>:
=======
 80003e8:	230f      	movs	r3, #15
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80003ec:	2301      	movs	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f002 f8db 	bl	80025bc <HAL_RCC_ClockConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800040c:	f000 fd80 	bl	8000f10 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3740      	adds	r7, #64	@ 0x40
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_TIM1_Init>:
>>>>>>> develop
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	@ 0x58
 800042c:	af00      	add	r7, sp, #0
=======
 8000418:	b580      	push	{r7, lr}
 800041a:	b096      	sub	sp, #88	@ 0x58
 800041c:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800042e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2220      	movs	r2, #32
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f003 fea9 	bl	80041b8 <memset>
=======
 800041e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2220      	movs	r2, #32
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f004 f87b 	bl	800454c <memset>
>>>>>>> develop

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8000466:	4b3f      	ldr	r3, [pc, #252]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000468:	4a3f      	ldr	r2, [pc, #252]	@ (8000568 <MX_TIM1_Init+0x140>)
 800046a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800046c:	4b3d      	ldr	r3, [pc, #244]	@ (8000564 <MX_TIM1_Init+0x13c>)
 800046e:	220f      	movs	r2, #15
 8000470:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b3c      	ldr	r3, [pc, #240]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000478:	4b3a      	ldr	r3, [pc, #232]	@ (8000564 <MX_TIM1_Init+0x13c>)
 800047a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800047e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b38      	ldr	r3, [pc, #224]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000486:	4b37      	ldr	r3, [pc, #220]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048c:	4b35      	ldr	r3, [pc, #212]	@ (8000564 <MX_TIM1_Init+0x13c>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000492:	4834      	ldr	r0, [pc, #208]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000494:	f002 f970 	bl	8002778 <HAL_TIM_Base_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800049e:	f000 fcbd 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004ac:	4619      	mov	r1, r3
 80004ae:	482d      	ldr	r0, [pc, #180]	@ (8000564 <MX_TIM1_Init+0x13c>)
 80004b0:	f002 fca8 	bl	8002e04 <HAL_TIM_ConfigClockSource>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004ba:	f000 fcaf 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004be:	4829      	ldr	r0, [pc, #164]	@ (8000564 <MX_TIM1_Init+0x13c>)
 80004c0:	f002 f9fc 	bl	80028bc <HAL_TIM_PWM_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004ca:	f000 fca7 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004da:	4619      	mov	r1, r3
 80004dc:	4821      	ldr	r0, [pc, #132]	@ (8000564 <MX_TIM1_Init+0x13c>)
 80004de:	f003 f82d 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004e8:	f000 fc98 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	2360      	movs	r3, #96	@ 0x60
 80004ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 850;
 80004f0:	f240 3352 	movw	r3, #850	@ 0x352
 80004f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f6:	2300      	movs	r3, #0
 80004f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004fa:	2300      	movs	r3, #0
 80004fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fe:	2300      	movs	r3, #0
 8000500:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800050e:	2200      	movs	r2, #0
 8000510:	4619      	mov	r1, r3
 8000512:	4814      	ldr	r0, [pc, #80]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000514:	f002 fbb4 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800051e:	f000 fc7d 	bl	8000e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800053a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4807      	ldr	r0, [pc, #28]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000546:	f003 f857 	bl	80035f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000550:	f000 fc64 	bl	8000e1c <Error_Handler>
=======
 8000456:	4b3f      	ldr	r3, [pc, #252]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000458:	4a3f      	ldr	r2, [pc, #252]	@ (8000558 <MX_TIM1_Init+0x140>)
 800045a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800045c:	4b3d      	ldr	r3, [pc, #244]	@ (8000554 <MX_TIM1_Init+0x13c>)
 800045e:	220f      	movs	r2, #15
 8000460:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000462:	4b3c      	ldr	r3, [pc, #240]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000468:	4b3a      	ldr	r3, [pc, #232]	@ (8000554 <MX_TIM1_Init+0x13c>)
 800046a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800046e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000470:	4b38      	ldr	r3, [pc, #224]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000476:	4b37      	ldr	r3, [pc, #220]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047c:	4b35      	ldr	r3, [pc, #212]	@ (8000554 <MX_TIM1_Init+0x13c>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000482:	4834      	ldr	r0, [pc, #208]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000484:	f002 fa28 	bl	80028d8 <HAL_TIM_Base_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800048e:	f000 fd3f 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000496:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000498:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800049c:	4619      	mov	r1, r3
 800049e:	482d      	ldr	r0, [pc, #180]	@ (8000554 <MX_TIM1_Init+0x13c>)
 80004a0:	f002 fd60 	bl	8002f64 <HAL_TIM_ConfigClockSource>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004aa:	f000 fd31 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004ae:	4829      	ldr	r0, [pc, #164]	@ (8000554 <MX_TIM1_Init+0x13c>)
 80004b0:	f002 fab4 	bl	8002a1c <HAL_TIM_PWM_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004ba:	f000 fd29 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004be:	2300      	movs	r3, #0
 80004c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004ca:	4619      	mov	r1, r3
 80004cc:	4821      	ldr	r0, [pc, #132]	@ (8000554 <MX_TIM1_Init+0x13c>)
 80004ce:	f003 f8e5 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004d8:	f000 fd1a 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004dc:	2360      	movs	r3, #96	@ 0x60
 80004de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 850;
 80004e0:	f240 3352 	movw	r3, #850	@ 0x352
 80004e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e6:	2300      	movs	r3, #0
 80004e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ea:	2300      	movs	r3, #0
 80004ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004f6:	2300      	movs	r3, #0
 80004f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	4814      	ldr	r0, [pc, #80]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000504:	f002 fc6c 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800050e:	f000 fcff 	bl	8000f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800052a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4619      	mov	r1, r3
 8000534:	4807      	ldr	r0, [pc, #28]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000536:	f003 f90f 	bl	8003758 <HAL_TIMEx_ConfigBreakDeadTime>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000540:	f000 fce6 	bl	8000f10 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <MX_TIM1_Init+0x13c>)
 8000556:	f000 ff37 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 800055a:	bf00      	nop
 800055c:	3758      	adds	r7, #88	@ 0x58
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000094 	.word	0x20000094
 8000568:	40012c00 	.word	0x40012c00

0800056c <MX_TIM2_Init>:
=======
 8000544:	4803      	ldr	r0, [pc, #12]	@ (8000554 <MX_TIM1_Init+0x13c>)
 8000546:	f000 ffb9 	bl	80014bc <HAL_TIM_MspPostInit>

}
 800054a:	bf00      	nop
 800054c:	3758      	adds	r7, #88	@ 0x58
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000e0 	.word	0x200000e0
 8000558:	40012c00 	.word	0x40012c00

0800055c <MX_TIM2_Init>:
>>>>>>> develop
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
=======
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	619a      	str	r2, [r3, #24]
=======
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	619a      	str	r2, [r3, #24]
>>>>>>> develop

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 800058e:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <MX_TIM2_Init+0xc4>)
 8000590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000596:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_TIM2_Init+0xc4>)
 8000598:	2207      	movs	r2, #7
 800059a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <MX_TIM2_Init+0xc4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80005a2:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <MX_TIM2_Init+0xc4>)
 80005a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005aa:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <MX_TIM2_Init+0xc4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_TIM2_Init+0xc4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005b6:	481e      	ldr	r0, [pc, #120]	@ (8000630 <MX_TIM2_Init+0xc4>)
 80005b8:	f002 f980 	bl	80028bc <HAL_TIM_PWM_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80005c2:	f000 fc2b 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c6:	2300      	movs	r3, #0
 80005c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4619      	mov	r1, r3
 80005d4:	4816      	ldr	r0, [pc, #88]	@ (8000630 <MX_TIM2_Init+0xc4>)
 80005d6:	f002 ffb1 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005e0:	f000 fc1c 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e4:	2360      	movs	r3, #96	@ 0x60
 80005e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2204      	movs	r2, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_TIM2_Init+0xc4>)
 80005fc:	f002 fb40 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000606:	f000 fc09 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2208      	movs	r2, #8
 800060e:	4619      	mov	r1, r3
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <MX_TIM2_Init+0xc4>)
 8000612:	f002 fb35 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800061c:	f000 fbfe 	bl	8000e1c <Error_Handler>
=======
 800057e:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <MX_TIM2_Init+0xc4>)
 8000580:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000584:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000586:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <MX_TIM2_Init+0xc4>)
 8000588:	2207      	movs	r2, #7
 800058a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <MX_TIM2_Init+0xc4>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000592:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <MX_TIM2_Init+0xc4>)
 8000594:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000598:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059a:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <MX_TIM2_Init+0xc4>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <MX_TIM2_Init+0xc4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005a6:	481e      	ldr	r0, [pc, #120]	@ (8000620 <MX_TIM2_Init+0xc4>)
 80005a8:	f002 fa38 	bl	8002a1c <HAL_TIM_PWM_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80005b2:	f000 fcad 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4619      	mov	r1, r3
 80005c4:	4816      	ldr	r0, [pc, #88]	@ (8000620 <MX_TIM2_Init+0xc4>)
 80005c6:	f003 f869 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005d0:	f000 fc9e 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d4:	2360      	movs	r3, #96	@ 0x60
 80005d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2204      	movs	r2, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	480d      	ldr	r0, [pc, #52]	@ (8000620 <MX_TIM2_Init+0xc4>)
 80005ec:	f002 fbf8 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80005f6:	f000 fc8b 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2208      	movs	r2, #8
 80005fe:	4619      	mov	r1, r3
 8000600:	4807      	ldr	r0, [pc, #28]	@ (8000620 <MX_TIM2_Init+0xc4>)
 8000602:	f002 fbed 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800060c:	f000 fc80 	bl	8000f10 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <MX_TIM2_Init+0xc4>)
 8000622:	f000 fed1 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	@ 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000dc 	.word	0x200000dc

08000634 <MX_TIM3_Init>:
=======
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <MX_TIM2_Init+0xc4>)
 8000612:	f000 ff53 	bl	80014bc <HAL_TIM_MspPostInit>

}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000128 	.word	0x20000128

08000624 <MX_TIM3_Init>:
>>>>>>> develop
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	@ 0x38
 8000638:	af00      	add	r7, sp, #0
=======
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	@ 0x38
 8000628:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 800063a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]
=======
 800062a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	619a      	str	r2, [r3, #24]
>>>>>>> develop

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8000664:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <MX_TIM3_Init+0xfc>)
 8000666:	4a33      	ldr	r2, [pc, #204]	@ (8000734 <MX_TIM3_Init+0x100>)
 8000668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <MX_TIM3_Init+0xfc>)
 800066c:	220f      	movs	r2, #15
 800066e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b2f      	ldr	r3, [pc, #188]	@ (8000730 <MX_TIM3_Init+0xfc>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000676:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_TIM3_Init+0xfc>)
 8000678:	f242 720f 	movw	r2, #9999	@ 0x270f
 800067c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <MX_TIM3_Init+0xfc>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <MX_TIM3_Init+0xfc>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800068a:	4829      	ldr	r0, [pc, #164]	@ (8000730 <MX_TIM3_Init+0xfc>)
 800068c:	f002 f874 	bl	8002778 <HAL_TIM_Base_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000696:	f000 fbc1 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4822      	ldr	r0, [pc, #136]	@ (8000730 <MX_TIM3_Init+0xfc>)
 80006a8:	f002 fbac 	bl	8002e04 <HAL_TIM_ConfigClockSource>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006b2:	f000 fbb3 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006b6:	481e      	ldr	r0, [pc, #120]	@ (8000730 <MX_TIM3_Init+0xfc>)
 80006b8:	f002 f900 	bl	80028bc <HAL_TIM_PWM_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006c2:	f000 fbab 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4619      	mov	r1, r3
 80006d4:	4816      	ldr	r0, [pc, #88]	@ (8000730 <MX_TIM3_Init+0xfc>)
 80006d6:	f002 ff31 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006e0:	f000 fb9c 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e4:	2360      	movs	r3, #96	@ 0x60
 80006e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_TIM3_Init+0xfc>)
 80006fc:	f002 fac0 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000706:	f000 fb89 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	220c      	movs	r2, #12
 800070e:	4619      	mov	r1, r3
 8000710:	4807      	ldr	r0, [pc, #28]	@ (8000730 <MX_TIM3_Init+0xfc>)
 8000712:	f002 fab5 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800071c:	f000 fb7e 	bl	8000e1c <Error_Handler>
=======
 8000654:	4b32      	ldr	r3, [pc, #200]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000656:	4a33      	ldr	r2, [pc, #204]	@ (8000724 <MX_TIM3_Init+0x100>)
 8000658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800065a:	4b31      	ldr	r3, [pc, #196]	@ (8000720 <MX_TIM3_Init+0xfc>)
 800065c:	220f      	movs	r2, #15
 800065e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000666:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000668:	f242 720f 	movw	r2, #9999	@ 0x270f
 800066c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066e:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800067a:	4829      	ldr	r0, [pc, #164]	@ (8000720 <MX_TIM3_Init+0xfc>)
 800067c:	f002 f92c 	bl	80028d8 <HAL_TIM_Base_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000686:	f000 fc43 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000690:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000694:	4619      	mov	r1, r3
 8000696:	4822      	ldr	r0, [pc, #136]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000698:	f002 fc64 	bl	8002f64 <HAL_TIM_ConfigClockSource>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006a2:	f000 fc35 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006a6:	481e      	ldr	r0, [pc, #120]	@ (8000720 <MX_TIM3_Init+0xfc>)
 80006a8:	f002 f9b8 	bl	8002a1c <HAL_TIM_PWM_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006b2:	f000 fc2d 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4619      	mov	r1, r3
 80006c4:	4816      	ldr	r0, [pc, #88]	@ (8000720 <MX_TIM3_Init+0xfc>)
 80006c6:	f002 ffe9 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006d0:	f000 fc1e 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d4:	2360      	movs	r3, #96	@ 0x60
 80006d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	@ (8000720 <MX_TIM3_Init+0xfc>)
 80006ec:	f002 fb78 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006f6:	f000 fc0b 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	220c      	movs	r2, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000702:	f002 fb6d 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800070c:	f000 fc00 	bl	8000f10 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <MX_TIM3_Init+0xfc>)
 8000722:	f000 fe51 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000726:	bf00      	nop
 8000728:	3738      	adds	r7, #56	@ 0x38
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000124 	.word	0x20000124
 8000734:	40000400 	.word	0x40000400

08000738 <MX_TIM4_Init>:
=======
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <MX_TIM3_Init+0xfc>)
 8000712:	f000 fed3 	bl	80014bc <HAL_TIM_MspPostInit>

}
 8000716:	bf00      	nop
 8000718:	3738      	adds	r7, #56	@ 0x38
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000170 	.word	0x20000170
 8000724:	40000400 	.word	0x40000400

08000728 <MX_TIM4_Init>:
>>>>>>> develop
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
=======
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	@ 0x28
 800072c:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	619a      	str	r2, [r3, #24]
=======
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]
>>>>>>> develop

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 800075a:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 800075c:	4a27      	ldr	r2, [pc, #156]	@ (80007fc <MX_TIM4_Init+0xc4>)
 800075e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 8000762:	2207      	movs	r2, #7
 8000764:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 800076e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000772:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000780:	481d      	ldr	r0, [pc, #116]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 8000782:	f002 f89b 	bl	80028bc <HAL_TIM_PWM_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800078c:	f000 fb46 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4619      	mov	r1, r3
 800079e:	4816      	ldr	r0, [pc, #88]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 80007a0:	f002 fecc 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007aa:	f000 fb37 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ae:	2360      	movs	r3, #96	@ 0x60
 80007b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 80007c6:	f002 fa5b 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80007d0:	f000 fb24 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2208      	movs	r2, #8
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 80007dc:	f002 fa50 	bl	8002c80 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007e6:	f000 fb19 	bl	8000e1c <Error_Handler>
=======
 800074a:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 800074c:	4a27      	ldr	r2, [pc, #156]	@ (80007ec <MX_TIM4_Init+0xc4>)
 800074e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8000750:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 8000752:	2207      	movs	r2, #7
 8000754:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 800075e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000762:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000770:	481d      	ldr	r0, [pc, #116]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 8000772:	f002 f953 	bl	8002a1c <HAL_TIM_PWM_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 fbc8 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4619      	mov	r1, r3
 800078e:	4816      	ldr	r0, [pc, #88]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 8000790:	f002 ff84 	bl	800369c <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800079a:	f000 fbb9 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079e:	2360      	movs	r3, #96	@ 0x60
 80007a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 80007b6:	f002 fb13 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80007c0:	f000 fba6 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2208      	movs	r2, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 80007cc:	f002 fb08 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007d6:	f000 fb9b 	bl	8000f10 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< HEAD
 80007ea:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <MX_TIM4_Init+0xc0>)
 80007ec:	f000 fdec 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000016c 	.word	0x2000016c
 80007fc:	40000800 	.word	0x40000800

08000800 <MX_USART1_UART_Init>:
=======
 80007da:	4803      	ldr	r0, [pc, #12]	@ (80007e8 <MX_TIM4_Init+0xc0>)
 80007dc:	f000 fe6e 	bl	80014bc <HAL_TIM_MspPostInit>

}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	@ 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200001b8 	.word	0x200001b8
 80007ec:	40000800 	.word	0x40000800

080007f0 <MX_USART1_UART_Init>:
>>>>>>> develop
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
=======
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_USART1_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 800080c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART1_UART_Init+0x4c>)
 8000838:	f002 ff41 	bl	80036be <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f000 faeb 	bl	8000e1c <Error_Handler>
=======
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART1_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 80007fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART1_UART_Init+0x4c>)
 8000828:	f002 fff9 	bl	800381e <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 fb6d 	bl	8000f10 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200001b4 	.word	0x200001b4
 8000850:	40013800 	.word	0x40013800

08000854 <MX_USART2_UART_Init>:
=======
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000200 	.word	0x20000200
 8000840:	40013800 	.word	0x40013800

08000844 <MX_USART2_UART_Init>:
>>>>>>> develop
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
=======
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f002 ff17 	bl	80036be <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 fac1 	bl	8000e1c <Error_Handler>
=======
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800084a:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <MX_USART2_UART_Init+0x50>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000850:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_USART2_UART_Init+0x4c>)
 800087c:	f002 ffcf 	bl	800381e <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000886:	f000 fb43 	bl	8000f10 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200001fc 	.word	0x200001fc
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
=======
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000248 	.word	0x20000248
 8000894:	40004400 	.word	0x40004400

08000898 <MX_GPIO_Init>:
>>>>>>> develop
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
=======
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
>>>>>>> develop
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 80008bc:	4b38      	ldr	r3, [pc, #224]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a37      	ldr	r2, [pc, #220]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b35      	ldr	r3, [pc, #212]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d4:	4b32      	ldr	r3, [pc, #200]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a31      	ldr	r2, [pc, #196]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b2f      	ldr	r3, [pc, #188]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a2b      	ldr	r2, [pc, #172]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a25      	ldr	r2, [pc, #148]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_GPIO_Init+0xf8>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(head_light_GPIO_Port, head_light_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2180      	movs	r1, #128	@ 0x80
 8000920:	4820      	ldr	r0, [pc, #128]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 8000922:	f001 fadf 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800092c:	481e      	ldr	r0, [pc, #120]	@ (80009a8 <MX_GPIO_Init+0x100>)
 800092e:	f001 fad9 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000932:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <MX_GPIO_Init+0x104>)
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	4818      	ldr	r0, [pc, #96]	@ (80009a8 <MX_GPIO_Init+0x100>)
 8000948:	f001 f948 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : head_light_Pin */
  GPIO_InitStruct.Pin = head_light_Pin;
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(head_light_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4810      	ldr	r0, [pc, #64]	@ (80009a4 <MX_GPIO_Init+0xfc>)
 8000964:	f001 f93a 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000968:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800096c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2302      	movs	r3, #2
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <MX_GPIO_Init+0x100>)
 8000982:	f001 f92b 	bl	8001bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2028      	movs	r0, #40	@ 0x28
 800098c:	f001 f83d 	bl	8001a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000990:	2028      	movs	r0, #40	@ 0x28
 8000992:	f001 f856 	bl	8001a42 <HAL_NVIC_EnableIRQ>
=======
 80008ac:	4b38      	ldr	r3, [pc, #224]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a37      	ldr	r2, [pc, #220]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0310 	and.w	r3, r3, #16
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c4:	4b32      	ldr	r3, [pc, #200]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a31      	ldr	r2, [pc, #196]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0320 	and.w	r3, r3, #32
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b29      	ldr	r3, [pc, #164]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a25      	ldr	r2, [pc, #148]	@ (8000990 <MX_GPIO_Init+0xf8>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_GPIO_Init+0xf8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(head_light_GPIO_Port, head_light_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2180      	movs	r1, #128	@ 0x80
 8000910:	4820      	ldr	r0, [pc, #128]	@ (8000994 <MX_GPIO_Init+0xfc>)
 8000912:	f001 fb97 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800091c:	481e      	ldr	r0, [pc, #120]	@ (8000998 <MX_GPIO_Init+0x100>)
 800091e:	f001 fb91 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_GPIO_Init+0x104>)
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	4818      	ldr	r0, [pc, #96]	@ (8000998 <MX_GPIO_Init+0x100>)
 8000938:	f001 fa00 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : head_light_Pin */
  GPIO_InitStruct.Pin = head_light_Pin;
 800093c:	2380      	movs	r3, #128	@ 0x80
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2302      	movs	r3, #2
 800094a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(head_light_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	4810      	ldr	r0, [pc, #64]	@ (8000994 <MX_GPIO_Init+0xfc>)
 8000954:	f001 f9f2 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000958:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2302      	movs	r3, #2
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x100>)
 8000972:	f001 f9e3 	bl	8001d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2028      	movs	r0, #40	@ 0x28
 800097c:	f001 f8f5 	bl	8001b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000980:	2028      	movs	r0, #40	@ 0x28
 8000982:	f001 f90e 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
>>>>>>> develop

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800
 80009a8:	40011000 	.word	0x40011000
 80009ac:	10110000 	.word	0x10110000

080009b0 <handlePacket>:
    // 6. crc
    len = snprintf(msg, sizeof(msg), "crc: 0x%02X\r\n\r\n", controlPacket.crc);
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
}
void handlePacket(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	uint8_t _crc = calculate_checksum(rx_buffer,ACTUATOR_PACKET_SIZE-1);
 80009b6:	210a      	movs	r1, #10
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <handlePacket+0x2c>)
 80009ba:	f000 fe9b 	bl	80016f4 <calculate_checksum>
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]

	if(_crc == rx_buffer[ACTUATOR_PACKET_SIZE-1])
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <handlePacket+0x2c>)
 80009c4:	7a9b      	ldrb	r3, [r3, #10]
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d103      	bne.n	80009d4 <handlePacket+0x24>
	{
		deserialize_actuator_packet(rx_buffer, &controlPacket);
 80009cc:	4904      	ldr	r1, [pc, #16]	@ (80009e0 <handlePacket+0x30>)
 80009ce:	4803      	ldr	r0, [pc, #12]	@ (80009dc <handlePacket+0x2c>)
 80009d0:	f000 feae 	bl	8001730 <deserialize_actuator_packet>
	else
	{
		//do nothing
	}

}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000244 	.word	0x20000244
 80009e0:	20000344 	.word	0x20000344

080009e4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <HAL_UART_RxCpltCallback+0x94>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d139      	bne.n	8000a6c <HAL_UART_RxCpltCallback+0x88>
    {
      switch(RxStage)
 80009f8:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <HAL_UART_RxCpltCallback+0x98>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d031      	beq.n	8000a64 <HAL_UART_RxCpltCallback+0x80>
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	dc34      	bgt.n	8000a6e <HAL_UART_RxCpltCallback+0x8a>
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d002      	beq.n	8000a0e <HAL_UART_RxCpltCallback+0x2a>
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d014      	beq.n	8000a36 <HAL_UART_RxCpltCallback+0x52>
          packetReceived = 1;
          break;
        default:
      };
    }
  }
 8000a0c:	e02f      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x8a>
          if(rx_buffer[0] == UART_START_BYTE)
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <HAL_UART_RxCpltCallback+0x9c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2baa      	cmp	r3, #170	@ 0xaa
 8000a14:	d109      	bne.n	8000a2a <HAL_UART_RxCpltCallback+0x46>
            RxStage = ID;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_UART_RxCpltCallback+0x98>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_buffer + 1, 1);
 8000a1c:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_UART_RxCpltCallback+0xa0>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4815      	ldr	r0, [pc, #84]	@ (8000a78 <HAL_UART_RxCpltCallback+0x94>)
 8000a24:	f002 fe9b 	bl	800375e <HAL_UART_Receive_IT>
          break;
 8000a28:	e021      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x8a>
            HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4914      	ldr	r1, [pc, #80]	@ (8000a80 <HAL_UART_RxCpltCallback+0x9c>)
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <HAL_UART_RxCpltCallback+0x94>)
 8000a30:	f002 fe95 	bl	800375e <HAL_UART_Receive_IT>
          break;
 8000a34:	e01b      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x8a>
          if(rx_buffer[1] == ACTUATOR_PACKET_ID)
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_UART_RxCpltCallback+0x9c>)
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d109      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0x6e>
            RxStage = PAYLOAD;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <HAL_UART_RxCpltCallback+0x98>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_buffer+2, ACTUATOR_PACKET_SIZE-2);
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_UART_RxCpltCallback+0xa4>)
 8000a46:	2209      	movs	r2, #9
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <HAL_UART_RxCpltCallback+0x94>)
 8000a4c:	f002 fe87 	bl	800375e <HAL_UART_Receive_IT>
          break;
 8000a50:	e00d      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x8a>
            RxStage = START;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_UART_RxCpltCallback+0x98>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4909      	ldr	r1, [pc, #36]	@ (8000a80 <HAL_UART_RxCpltCallback+0x9c>)
 8000a5c:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <HAL_UART_RxCpltCallback+0x94>)
 8000a5e:	f002 fe7e 	bl	800375e <HAL_UART_Receive_IT>
          break;
 8000a62:	e004      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x8a>
          packetReceived = 1;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_UART_RxCpltCallback+0xa8>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
          break;
 8000a6a:	e000      	b.n	8000a6e <HAL_UART_RxCpltCallback+0x8a>
        default:
 8000a6c:	bf00      	nop
  }
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200001b4 	.word	0x200001b4
 8000a7c:	20000048 	.word	0x20000048
 8000a80:	20000244 	.word	0x20000244
 8000a84:	20000245 	.word	0x20000245
 8000a88:	20000246 	.word	0x20000246
 8000a8c:	2000034f 	.word	0x2000034f

08000a90 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <HAL_UART_ErrorCallback+0x2c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d107      	bne.n	8000ab4 <HAL_UART_ErrorCallback+0x24>
  {
	  RxStage = START;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_UART_ErrorCallback+0x30>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4905      	ldr	r1, [pc, #20]	@ (8000ac4 <HAL_UART_ErrorCallback+0x34>)
 8000aae:	4803      	ldr	r0, [pc, #12]	@ (8000abc <HAL_UART_ErrorCallback+0x2c>)
 8000ab0:	f002 fe55 	bl	800375e <HAL_UART_Receive_IT>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200001b4 	.word	0x200001b4
 8000ac0:	20000048 	.word	0x20000048
 8000ac4:	20000244 	.word	0x20000244

08000ac8 <initControlValue>:
void initControlValue(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	controlPacket.servo_chair = arrayServo[SERVO_SEAT].initialPulse;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <initControlValue+0x44>)
 8000ace:	89da      	ldrh	r2, [r3, #14]
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <initControlValue+0x48>)
 8000ad2:	809a      	strh	r2, [r3, #4]
	controlPacket.servo_window = arrayServo[SERVO_WINDOW].initialPulse;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <initControlValue+0x44>)
 8000ad6:	8bda      	ldrh	r2, [r3, #30]
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <initControlValue+0x48>)
 8000ada:	80da      	strh	r2, [r3, #6]
	controlPacket.led = 0;
 8000adc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b10 <initControlValue+0x48>)
 8000ade:	78d3      	ldrb	r3, [r2, #3]
 8000ae0:	f36f 0382 	bfc	r3, #2, #1
 8000ae4:	70d3      	strb	r3, [r2, #3]
	controlPacket.buzzer = 0;
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <initControlValue+0x48>)
 8000ae8:	78d3      	ldrb	r3, [r2, #3]
 8000aea:	f36f 03c3 	bfc	r3, #3, #1
 8000aee:	70d3      	strb	r3, [r2, #3]
	controlPacket.fan = 0;
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <initControlValue+0x48>)
 8000af2:	78d3      	ldrb	r3, [r2, #3]
 8000af4:	f36f 0301 	bfc	r3, #0, #2
 8000af8:	70d3      	strb	r3, [r2, #3]
	controlPacket.led_rgb = 0;
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <initControlValue+0x48>)
 8000afc:	7893      	ldrb	r3, [r2, #2]
 8000afe:	f36f 0303 	bfc	r3, #0, #4
 8000b02:	7093      	strb	r3, [r2, #2]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	2000004c 	.word	0x2000004c
 8000b10:	20000344 	.word	0x20000344

08000b14 <seatTask>:
//		  Error_Handler();
//		}
//	}
//}
void seatTask(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_SEAT);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 fb5c 	bl	80011d8 <getUnitPulse>
 8000b20:	4603      	mov	r3, r0
 8000b22:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_SEAT);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 fb0f 	bl	8001148 <getPulse>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80bb      	strh	r3, [r7, #4]
	if(controlPacket.servo_chair > currentPulse)
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <seatTask+0x78>)
 8000b30:	889b      	ldrh	r3, [r3, #4]
 8000b32:	88ba      	ldrh	r2, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d210      	bcs.n	8000b5a <seatTask+0x46>
	{
		if((controlPacket.servo_chair) - currentPulse > unitPulse)
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <seatTask+0x78>)
 8000b3a:	889b      	ldrh	r3, [r3, #4]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dd1c      	ble.n	8000b82 <seatTask+0x6e>
		{
			setPulse(SERVO_SEAT,(currentPulse+unitPulse));
 8000b48:	88ba      	ldrh	r2, [r7, #4]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4619      	mov	r1, r3
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 fb52 	bl	80011fc <setPulse>
=======
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40010800 	.word	0x40010800
 8000998:	40011000 	.word	0x40011000
 800099c:	10110000 	.word	0x10110000

080009a0 <printActuatorPacket>:

/* USER CODE BEGIN 4 */
void printActuatorPacket(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b097      	sub	sp, #92	@ 0x5c
 80009a4:	af04      	add	r7, sp, #16
    char msg[64];
    int len;

    // 1. start_byte
    len = snprintf(msg, sizeof(msg), "start_byte: 0x%02X\r\n", controlPacket.start_byte);
 80009a6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ad8 <printActuatorPacket+0x138>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	1d38      	adds	r0, r7, #4
 80009ac:	4a4b      	ldr	r2, [pc, #300]	@ (8000adc <printActuatorPacket+0x13c>)
 80009ae:	2140      	movs	r1, #64	@ 0x40
 80009b0:	f003 fd98 	bl	80044e4 <sniprintf>
 80009b4:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80009b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	1d39      	adds	r1, r7, #4
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	4847      	ldr	r0, [pc, #284]	@ (8000ae0 <printActuatorPacket+0x140>)
 80009c2:	f002 ff7c 	bl	80038be <HAL_UART_Transmit>

    // 2. packet_id
    len = snprintf(msg, sizeof(msg), "packet_id:  0x%02X\r\n", controlPacket.packet_id);
 80009c6:	4b44      	ldr	r3, [pc, #272]	@ (8000ad8 <printActuatorPacket+0x138>)
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	1d38      	adds	r0, r7, #4
 80009cc:	4a45      	ldr	r2, [pc, #276]	@ (8000ae4 <printActuatorPacket+0x144>)
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	f003 fd88 	bl	80044e4 <sniprintf>
 80009d4:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80009d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009d8:	b29a      	uxth	r2, r3
 80009da:	1d39      	adds	r1, r7, #4
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	483f      	ldr	r0, [pc, #252]	@ (8000ae0 <printActuatorPacket+0x140>)
 80009e2:	f002 ff6c 	bl	80038be <HAL_UART_Transmit>

    // 3. RGB bits
    len = snprintf(msg, sizeof(msg),
        "LED RGB:    R=%u G=%u B=%u\r\n",
		controlPacket.R, controlPacket.G, controlPacket.B);
 80009e6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ad8 <printActuatorPacket+0x138>)
 80009e8:	789b      	ldrb	r3, [r3, #2]
 80009ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009ee:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 80009f0:	4619      	mov	r1, r3
		controlPacket.R, controlPacket.G, controlPacket.B);
 80009f2:	4b39      	ldr	r3, [pc, #228]	@ (8000ad8 <printActuatorPacket+0x138>)
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009fa:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 80009fc:	461a      	mov	r2, r3
		controlPacket.R, controlPacket.G, controlPacket.B);
 80009fe:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a06:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a08:	1d38      	adds	r0, r7, #4
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	9200      	str	r2, [sp, #0]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	4a35      	ldr	r2, [pc, #212]	@ (8000ae8 <printActuatorPacket+0x148>)
 8000a12:	2140      	movs	r1, #64	@ 0x40
 8000a14:	f003 fd66 	bl	80044e4 <sniprintf>
 8000a18:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	1d39      	adds	r1, r7, #4
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	482e      	ldr	r0, [pc, #184]	@ (8000ae0 <printActuatorPacket+0x140>)
 8000a26:	f002 ff4a 	bl	80038be <HAL_UART_Transmit>

    // 4. fan, led, buzzer, driving_mode
    len = snprintf(msg, sizeof(msg),
        "fan: %u  led: %u  buzzer: %u  mode: %u\r\n",
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a2c:	78db      	ldrb	r3, [r3, #3]
 8000a2e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000a32:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a34:	461c      	mov	r4, r3
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a38:	78db      	ldrb	r3, [r3, #3]
 8000a3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a3e:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a40:	461a      	mov	r2, r3
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a44:	78db      	ldrb	r3, [r3, #3]
 8000a46:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a4a:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a4c:	4619      	mov	r1, r3
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a50:	78db      	ldrb	r3, [r3, #3]
 8000a52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a56:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a58:	1d38      	adds	r0, r7, #4
 8000a5a:	9302      	str	r3, [sp, #8]
 8000a5c:	9101      	str	r1, [sp, #4]
 8000a5e:	9200      	str	r2, [sp, #0]
 8000a60:	4623      	mov	r3, r4
 8000a62:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <printActuatorPacket+0x14c>)
 8000a64:	2140      	movs	r1, #64	@ 0x40
 8000a66:	f003 fd3d 	bl	80044e4 <sniprintf>
 8000a6a:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	1d39      	adds	r1, r7, #4
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	481a      	ldr	r0, [pc, #104]	@ (8000ae0 <printActuatorPacket+0x140>)
 8000a78:	f002 ff21 	bl	80038be <HAL_UART_Transmit>
    // 5. servo angles
    len = snprintf(msg, sizeof(msg),
        "servo_chair:  %u\r\n"
        "servo_window: %u\r\n"
        "front_distance: %u\r\n",
        controlPacket.servo_chair,
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a7e:	889b      	ldrh	r3, [r3, #4]
    len = snprintf(msg, sizeof(msg),
 8000a80:	4619      	mov	r1, r3
        controlPacket.servo_window,
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a84:	88db      	ldrh	r3, [r3, #6]
    len = snprintf(msg, sizeof(msg),
 8000a86:	461a      	mov	r2, r3
        controlPacket.front_distance);
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000a8a:	891b      	ldrh	r3, [r3, #8]
    len = snprintf(msg, sizeof(msg),
 8000a8c:	1d38      	adds	r0, r7, #4
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	460b      	mov	r3, r1
 8000a94:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <printActuatorPacket+0x150>)
 8000a96:	2140      	movs	r1, #64	@ 0x40
 8000a98:	f003 fd24 	bl	80044e4 <sniprintf>
 8000a9c:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	1d39      	adds	r1, r7, #4
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <printActuatorPacket+0x140>)
 8000aaa:	f002 ff08 	bl	80038be <HAL_UART_Transmit>

    // 6. crc
    len = snprintf(msg, sizeof(msg), "crc: 0x%02X\r\n\r\n", controlPacket.crc);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <printActuatorPacket+0x138>)
 8000ab0:	7a9b      	ldrb	r3, [r3, #10]
 8000ab2:	1d38      	adds	r0, r7, #4
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <printActuatorPacket+0x154>)
 8000ab6:	2140      	movs	r1, #64	@ 0x40
 8000ab8:	f003 fd14 	bl	80044e4 <sniprintf>
 8000abc:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	1d39      	adds	r1, r7, #4
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <printActuatorPacket+0x140>)
 8000aca:	f002 fef8 	bl	80038be <HAL_UART_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	374c      	adds	r7, #76	@ 0x4c
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000390 	.word	0x20000390
 8000adc:	08004e84 	.word	0x08004e84
 8000ae0:	20000248 	.word	0x20000248
 8000ae4:	08004e9c 	.word	0x08004e9c
 8000ae8:	08004eb4 	.word	0x08004eb4
 8000aec:	08004ed4 	.word	0x08004ed4
 8000af0:	08004f00 	.word	0x08004f00
 8000af4:	08004f3c 	.word	0x08004f3c

08000af8 <handlePacket>:
void handlePacket(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
//  {
//    rxPtr += ACTUATOR_PACKET_SIZE;
//  }
//  HAL_UART_Receive_IT(&huart1,rx_buffer+rxPtr,ACTUATOR_PACKET_SIZE);

  uint8_t _crc = calculate_checksum(rx_buffer_1,ACTUATOR_PACKET_SIZE-1);
 8000afe:	210a      	movs	r1, #10
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <handlePacket+0x38>)
 8000b02:	f000 fea7 	bl	8001854 <calculate_checksum>
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  	if(_crc == rx_buffer_1[ACTUATOR_PACKET_SIZE-1])
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <handlePacket+0x38>)
 8000b0c:	7a9b      	ldrb	r3, [r3, #10]
 8000b0e:	79fa      	ldrb	r2, [r7, #7]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d103      	bne.n	8000b1c <handlePacket+0x24>
  	{
      deserialize_actuator_packet(rx_buffer_1, &controlPacket);
 8000b14:	4907      	ldr	r1, [pc, #28]	@ (8000b34 <handlePacket+0x3c>)
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <handlePacket+0x38>)
 8000b18:	f000 feba 	bl	8001890 <deserialize_actuator_packet>
    {
      //do nothing
    }


    HAL_UART_Receive_IT(&huart1,rx_buffer_1,ACTUATOR_PACKET_SIZE);
 8000b1c:	220b      	movs	r2, #11
 8000b1e:	4904      	ldr	r1, [pc, #16]	@ (8000b30 <handlePacket+0x38>)
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <handlePacket+0x40>)
 8000b22:	f002 ff57 	bl	80039d4 <HAL_UART_Receive_IT>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000290 	.word	0x20000290
 8000b34:	20000390 	.word	0x20000390
 8000b38:	20000200 	.word	0x20000200

08000b3c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_UART_RxCpltCallback+0x24>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d102      	bne.n	8000b56 <HAL_UART_RxCpltCallback+0x1a>
  {
    packetReceived = 1;
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <HAL_UART_RxCpltCallback+0x28>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000200 	.word	0x20000200
 8000b64:	2000039b 	.word	0x2000039b

08000b68 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_UART_ErrorCallback+0x28>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d104      	bne.n	8000b86 <HAL_UART_ErrorCallback+0x1e>
  {
    //HAL_UART_Receive_IT(&huart1, rx_buffer + rxPtr, ACTUATOR_PACKET_SIZE);
    HAL_UART_Receive_IT(&huart1, rx_buffer_1, ACTUATOR_PACKET_SIZE);
 8000b7c:	220b      	movs	r2, #11
 8000b7e:	4905      	ldr	r1, [pc, #20]	@ (8000b94 <HAL_UART_ErrorCallback+0x2c>)
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <HAL_UART_ErrorCallback+0x28>)
 8000b82:	f002 ff27 	bl	80039d4 <HAL_UART_Receive_IT>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000200 	.word	0x20000200
 8000b94:	20000290 	.word	0x20000290

08000b98 <initControlValue>:
void initControlValue(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  controlPacket.driving_mode = DRIVING_NORMAL;
 8000b9c:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <initControlValue+0x50>)
 8000b9e:	78d3      	ldrb	r3, [r2, #3]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	f361 1307 	bfi	r3, r1, #4, #4
 8000ba6:	70d3      	strb	r3, [r2, #3]
	controlPacket.servo_chair = arrayServo[SERVO_SEAT].initialPulse;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <initControlValue+0x54>)
 8000baa:	89da      	ldrh	r2, [r3, #14]
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <initControlValue+0x50>)
 8000bae:	809a      	strh	r2, [r3, #4]
	controlPacket.servo_window = arrayServo[SERVO_WINDOW].initialPulse;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <initControlValue+0x54>)
 8000bb2:	8bda      	ldrh	r2, [r3, #30]
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <initControlValue+0x50>)
 8000bb6:	80da      	strh	r2, [r3, #6]
	controlPacket.led = 0;
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000be8 <initControlValue+0x50>)
 8000bba:	78d3      	ldrb	r3, [r2, #3]
 8000bbc:	f36f 0382 	bfc	r3, #2, #1
 8000bc0:	70d3      	strb	r3, [r2, #3]
	controlPacket.buzzer = 0;
 8000bc2:	4a09      	ldr	r2, [pc, #36]	@ (8000be8 <initControlValue+0x50>)
 8000bc4:	78d3      	ldrb	r3, [r2, #3]
 8000bc6:	f36f 03c3 	bfc	r3, #3, #1
 8000bca:	70d3      	strb	r3, [r2, #3]
	controlPacket.fan = 0;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <initControlValue+0x50>)
 8000bce:	78d3      	ldrb	r3, [r2, #3]
 8000bd0:	f36f 0301 	bfc	r3, #0, #2
 8000bd4:	70d3      	strb	r3, [r2, #3]
	controlPacket.led_rgb = 0;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <initControlValue+0x50>)
 8000bd8:	7893      	ldrb	r3, [r2, #2]
 8000bda:	f36f 0302 	bfc	r3, #0, #3
 8000bde:	7093      	strb	r3, [r2, #2]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000390 	.word	0x20000390
 8000bec:	20000048 	.word	0x20000048

08000bf0 <seatTask>:
		  Error_Handler();
		}
	}
}
void seatTask(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_SEAT);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 fb68 	bl	80012cc <getUnitPulse>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_SEAT);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 fb1b 	bl	800123c <getPulse>
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
	if(controlPacket.servo_chair > currentPulse)
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <seatTask+0x78>)
 8000c0c:	889b      	ldrh	r3, [r3, #4]
 8000c0e:	88ba      	ldrh	r2, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d210      	bcs.n	8000c36 <seatTask+0x46>
	{
		if((controlPacket.servo_chair) - currentPulse > unitPulse)
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <seatTask+0x78>)
 8000c16:	889b      	ldrh	r3, [r3, #4]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	88bb      	ldrh	r3, [r7, #4]
 8000c1c:	1ad2      	subs	r2, r2, r3
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dd1c      	ble.n	8000c5e <seatTask+0x6e>
		{
			setPulse(SERVO_SEAT,(currentPulse+unitPulse));
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 fb5e 	bl	80012f0 <setPulse>
>>>>>>> develop
		else
		{
			//do nothing
		}
	}
}
<<<<<<< HEAD
 8000b58:	e013      	b.n	8000b82 <seatTask+0x6e>
	else if(controlPacket.servo_chair < currentPulse)
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <seatTask+0x78>)
 8000b5c:	889b      	ldrh	r3, [r3, #4]
 8000b5e:	88ba      	ldrh	r2, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d90e      	bls.n	8000b82 <seatTask+0x6e>
		if((currentPulse - controlPacket.servo_chair) > unitPulse)
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <seatTask+0x78>)
 8000b68:	8892      	ldrh	r2, [r2, #4]
 8000b6a:	1a9a      	subs	r2, r3, r2
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dd07      	ble.n	8000b82 <seatTask+0x6e>
			setPulse(SERVO_SEAT,(currentPulse-unitPulse));
 8000b72:	88ba      	ldrh	r2, [r7, #4]
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 fb3d 	bl	80011fc <setPulse>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000344 	.word	0x20000344

08000b90 <windowTask>:
void windowTask(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_WINDOW);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f000 fb1e 	bl	80011d8 <getUnitPulse>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_WINDOW);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 fad1 	bl	8001148 <getPulse>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80bb      	strh	r3, [r7, #4]
	if(controlPacket.servo_window > currentPulse)
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <windowTask+0x78>)
 8000bac:	88db      	ldrh	r3, [r3, #6]
 8000bae:	88ba      	ldrh	r2, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d210      	bcs.n	8000bd6 <windowTask+0x46>
	{
		if((controlPacket.servo_window) - currentPulse > unitPulse)
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <windowTask+0x78>)
 8000bb6:	88db      	ldrh	r3, [r3, #6]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	1ad2      	subs	r2, r2, r3
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dd1c      	ble.n	8000bfe <windowTask+0x6e>
		{
			setPulse(SERVO_WINDOW,(currentPulse+unitPulse));
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fb14 	bl	80011fc <setPulse>
=======
 8000c34:	e013      	b.n	8000c5e <seatTask+0x6e>
	else if(controlPacket.servo_chair < currentPulse)
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <seatTask+0x78>)
 8000c38:	889b      	ldrh	r3, [r3, #4]
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d90e      	bls.n	8000c5e <seatTask+0x6e>
		if((currentPulse - controlPacket.servo_chair) > unitPulse)
 8000c40:	88bb      	ldrh	r3, [r7, #4]
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <seatTask+0x78>)
 8000c44:	8892      	ldrh	r2, [r2, #4]
 8000c46:	1a9a      	subs	r2, r3, r2
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dd07      	ble.n	8000c5e <seatTask+0x6e>
			setPulse(SERVO_SEAT,(currentPulse-unitPulse));
 8000c4e:	88ba      	ldrh	r2, [r7, #4]
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fb49 	bl	80012f0 <setPulse>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000390 	.word	0x20000390

08000c6c <windowTask>:
void windowTask(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_WINDOW);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 fb2a 	bl	80012cc <getUnitPulse>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_WINDOW);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 fadd 	bl	800123c <getPulse>
 8000c82:	4603      	mov	r3, r0
 8000c84:	80bb      	strh	r3, [r7, #4]
	if(controlPacket.servo_window > currentPulse)
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <windowTask+0x78>)
 8000c88:	88db      	ldrh	r3, [r3, #6]
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d210      	bcs.n	8000cb2 <windowTask+0x46>
	{
		if((controlPacket.servo_window) - currentPulse > unitPulse)
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <windowTask+0x78>)
 8000c92:	88db      	ldrh	r3, [r3, #6]
 8000c94:	461a      	mov	r2, r3
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	1ad2      	subs	r2, r2, r3
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dd1c      	ble.n	8000cda <windowTask+0x6e>
		{
			setPulse(SERVO_WINDOW,(currentPulse+unitPulse));
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 fb20 	bl	80012f0 <setPulse>
>>>>>>> develop
		else
		{
			//do nothing
		}
	}
}
<<<<<<< HEAD
 8000bd4:	e013      	b.n	8000bfe <windowTask+0x6e>
	else if(controlPacket.servo_window < currentPulse)
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <windowTask+0x78>)
 8000bd8:	88db      	ldrh	r3, [r3, #6]
 8000bda:	88ba      	ldrh	r2, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d90e      	bls.n	8000bfe <windowTask+0x6e>
		if((currentPulse - controlPacket.servo_window) > unitPulse)
 8000be0:	88bb      	ldrh	r3, [r7, #4]
 8000be2:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <windowTask+0x78>)
 8000be4:	88d2      	ldrh	r2, [r2, #6]
 8000be6:	1a9a      	subs	r2, r3, r2
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dd07      	ble.n	8000bfe <windowTask+0x6e>
			setPulse(SERVO_WINDOW,(currentPulse-unitPulse));
 8000bee:	88ba      	ldrh	r2, [r7, #4]
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 faff 	bl	80011fc <setPulse>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000344 	.word	0x20000344

08000c0c <fanTask>:
void fanTask(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	setLevelFan(controlPacket.fan);
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <fanTask+0x18>)
 8000c12:	78db      	ldrb	r3, [r3, #3]
 8000c14:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb32 	bl	8000284 <setLevelFan>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000344 	.word	0x20000344

08000c28 <ledTask>:
void ledTask(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if(controlPacket.led == 0)
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <ledTask+0x20>)
 8000c2e:	78db      	ldrb	r3, [r3, #3]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <ledTask+0x18>
	{
		offHeadLight();
 8000c3a:	f7ff fb69 	bl	8000310 <offHeadLight>
=======
 8000cb0:	e013      	b.n	8000cda <windowTask+0x6e>
	else if(controlPacket.servo_window < currentPulse)
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <windowTask+0x78>)
 8000cb4:	88db      	ldrh	r3, [r3, #6]
 8000cb6:	88ba      	ldrh	r2, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d90e      	bls.n	8000cda <windowTask+0x6e>
		if((currentPulse - controlPacket.servo_window) > unitPulse)
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	4a09      	ldr	r2, [pc, #36]	@ (8000ce4 <windowTask+0x78>)
 8000cc0:	88d2      	ldrh	r2, [r2, #6]
 8000cc2:	1a9a      	subs	r2, r3, r2
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dd07      	ble.n	8000cda <windowTask+0x6e>
			setPulse(SERVO_WINDOW,(currentPulse-unitPulse));
 8000cca:	88ba      	ldrh	r2, [r7, #4]
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fb0b 	bl	80012f0 <setPulse>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000390 	.word	0x20000390

08000ce8 <fanTask>:
void fanTask(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	if(controlPacket.fan == 0)
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <fanTask+0x2c>)
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <fanTask+0x18>
	{
		stopFan();
 8000cfa:	f7ff fa9f 	bl	800023c <stopFan>
	}
	else
	{
		setLevelFan(controlPacket.fan);
	}
}
 8000cfe:	e007      	b.n	8000d10 <fanTask+0x28>
		setLevelFan(controlPacket.fan);
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <fanTask+0x2c>)
 8000d02:	78db      	ldrb	r3, [r3, #3]
 8000d04:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff faba 	bl	8000284 <setLevelFan>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000390 	.word	0x20000390

08000d18 <ledTask>:
void ledTask(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	if(controlPacket.led == 0)
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <ledTask+0x20>)
 8000d1e:	78db      	ldrb	r3, [r3, #3]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <ledTask+0x18>
	{
		offHeadLight();
 8000d2a:	f7ff faf1 	bl	8000310 <offHeadLight>
>>>>>>> develop
	}
	else
	{
		onHeadLight();
	}
}
<<<<<<< HEAD
 8000c3e:	e001      	b.n	8000c44 <ledTask+0x1c>
		onHeadLight();
 8000c40:	f7ff fb5a 	bl	80002f8 <onHeadLight>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000344 	.word	0x20000344

08000c4c <rgbTask>:
void rgbTask(void)
{
 8000c4c:	b598      	push	{r3, r4, r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
=======
 8000d2e:	e001      	b.n	8000d34 <ledTask+0x1c>
		onHeadLight();
 8000d30:	f7ff fae2 	bl	80002f8 <onHeadLight>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000390 	.word	0x20000390

08000d3c <rgbTask>:
void rgbTask(void)
{
 8000d3c:	b598      	push	{r3, r4, r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
>>>>>>> develop
	static uint8_t rgb_red =0;
	static uint8_t rgb_green =0;
	static uint8_t rgb_blue =0;
	static uint8_t rgb_mode =0;
	rgb_red = 0x1 & controlPacket.led_rgb ;
<<<<<<< HEAD
 8000c50:	4b37      	ldr	r3, [pc, #220]	@ (8000d30 <rgbTask+0xe4>)
 8000c52:	789b      	ldrb	r3, [r3, #2]
 8000c54:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <rgbTask+0xe8>)
 8000c62:	701a      	strb	r2, [r3, #0]
	rgb_green = 0x2 & controlPacket.led_rgb ;
 8000c64:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <rgbTask+0xe4>)
 8000c66:	789b      	ldrb	r3, [r3, #2]
 8000c68:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <rgbTask+0xec>)
 8000c76:	701a      	strb	r2, [r3, #0]
	rgb_blue = 0x4 & controlPacket.led_rgb ;
 8000c78:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <rgbTask+0xe4>)
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <rgbTask+0xf0>)
 8000c8a:	701a      	strb	r2, [r3, #0]
	rgb_mode = controlPacket.MODE; //led_rgb의 4번쨰 비트가 0이면 일반 모드, 1이면 터널모드(밝기 30퍼)
 8000c8c:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <rgbTask+0xe4>)
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <rgbTask+0xf4>)
 8000c9a:	701a      	strb	r2, [r3, #0]

	if(rgb_mode)
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <rgbTask+0xf4>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d018      	beq.n	8000cd6 <rgbTask+0x8a>
	{
		setColorRgb(30*rgb_red, 30*rgb_green, 30*rgb_blue);
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <rgbTask+0xe8>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	b298      	uxth	r0, r3
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <rgbTask+0xec>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <rgbTask+0xf0>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f000 f8be 	bl	8000e50 <setColorRgb>
	}
=======
 8000d40:	4b38      	ldr	r3, [pc, #224]	@ (8000e24 <rgbTask+0xe8>)
 8000d42:	789b      	ldrb	r3, [r3, #2]
 8000d44:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <rgbTask+0xec>)
 8000d52:	701a      	strb	r2, [r3, #0]
	rgb_green = 0x2 & controlPacket.led_rgb ;
 8000d54:	4b33      	ldr	r3, [pc, #204]	@ (8000e24 <rgbTask+0xe8>)
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b31      	ldr	r3, [pc, #196]	@ (8000e2c <rgbTask+0xf0>)
 8000d66:	701a      	strb	r2, [r3, #0]
	rgb_blue = 0x4 & controlPacket.led_rgb ;
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <rgbTask+0xe8>)
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b2d      	ldr	r3, [pc, #180]	@ (8000e30 <rgbTask+0xf4>)
 8000d7a:	701a      	strb	r2, [r3, #0]
	rgb_mode = 0x8 & controlPacket.led_rgb; //led_rgb의 4번쨰 비트가 0이면 일반 모드, 1이면 터널모드(밝기 30퍼)
 8000d7c:	4b29      	ldr	r3, [pc, #164]	@ (8000e24 <rgbTask+0xe8>)
 8000d7e:	789b      	ldrb	r3, [r3, #2]
 8000d80:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b29      	ldr	r3, [pc, #164]	@ (8000e34 <rgbTask+0xf8>)
 8000d8e:	701a      	strb	r2, [r3, #0]

	if(rgb_mode)
 8000d90:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <rgbTask+0xf8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d018      	beq.n	8000dca <rgbTask+0x8e>
  {
    setColorRgb(30*rgb_red, 30*rgb_green, 30*rgb_blue);
 8000d98:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <rgbTask+0xec>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	b298      	uxth	r0, r3
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <rgbTask+0xf0>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	b299      	uxth	r1, r3
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <rgbTask+0xf4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f000 f8be 	bl	8000f44 <setColorRgb>
  }
>>>>>>> develop
	else
	{
		setColorRgb(999*rgb_red, 999*rgb_green, 999*rgb_blue);
	}
}
<<<<<<< HEAD
 8000cd4:	e029      	b.n	8000d2a <rgbTask+0xde>
		setColorRgb(999*rgb_red, 999*rgb_green, 999*rgb_blue);
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <rgbTask+0xe8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	00d2      	lsls	r2, r2, #3
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	00d1      	lsls	r1, r2, #3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	460b      	mov	r3, r1
 8000cec:	4413      	add	r3, r2
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <rgbTask+0xec>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	00d2      	lsls	r2, r2, #3
 8000cf8:	1ad2      	subs	r2, r2, r3
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	461a      	mov	r2, r3
 8000d00:	00d1      	lsls	r1, r2, #3
 8000d02:	461a      	mov	r2, r3
 8000d04:	460b      	mov	r3, r1
 8000d06:	4413      	add	r3, r2
 8000d08:	b299      	uxth	r1, r3
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <rgbTask+0xf0>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	00d4      	lsls	r4, r2, #3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4623      	mov	r3, r4
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	f000 f893 	bl	8000e50 <setColorRgb>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd98      	pop	{r3, r4, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000344 	.word	0x20000344
 8000d34:	20000350 	.word	0x20000350
 8000d38:	20000351 	.word	0x20000351
 8000d3c:	20000352 	.word	0x20000352
 8000d40:	20000353 	.word	0x20000353

08000d44 <buzzerTask>:
void buzzerTask(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
=======
 8000dc8:	e029      	b.n	8000e1e <rgbTask+0xe2>
		setColorRgb(999*rgb_red, 999*rgb_green, 999*rgb_blue);
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <rgbTask+0xec>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	00d2      	lsls	r2, r2, #3
 8000dd2:	1ad2      	subs	r2, r2, r3
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	00d1      	lsls	r1, r2, #3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	460b      	mov	r3, r1
 8000de0:	4413      	add	r3, r2
 8000de2:	b298      	uxth	r0, r3
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <rgbTask+0xf0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	00d2      	lsls	r2, r2, #3
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	461a      	mov	r2, r3
 8000df4:	00d1      	lsls	r1, r2, #3
 8000df6:	461a      	mov	r2, r3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <rgbTask+0xf4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	1ad2      	subs	r2, r2, r3
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	00d4      	lsls	r4, r2, #3
 8000e10:	461a      	mov	r2, r3
 8000e12:	4623      	mov	r3, r4
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f000 f893 	bl	8000f44 <setColorRgb>
}
 8000e1e:	bf00      	nop
 8000e20:	bd98      	pop	{r3, r4, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000390 	.word	0x20000390
 8000e28:	2000039c 	.word	0x2000039c
 8000e2c:	2000039d 	.word	0x2000039d
 8000e30:	2000039e 	.word	0x2000039e
 8000e34:	2000039f 	.word	0x2000039f

08000e38 <buzzerTask>:
void buzzerTask(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
>>>>>>> develop
    static uint32_t last_tick = 0;
    static uint8_t buzzer_state = 0;
    static uint8_t step_count = 0;
    static uint8_t buzzer_on = 0;

    uint32_t now = HAL_GetTick();
<<<<<<< HEAD
 8000d4a:	f000 fd7d 	bl	8001848 <HAL_GetTick>
 8000d4e:	6078      	str	r0, [r7, #4]

    if(controlPacket.buzzer != 0 && buzzer_on == 0)
 8000d50:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <buzzerTask+0xc4>)
 8000d52:	78db      	ldrb	r3, [r3, #3]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d006      	beq.n	8000d6c <buzzerTask+0x28>
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e0c <buzzerTask+0xc8>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <buzzerTask+0x28>
    {
      buzzer_on = 1;
 8000d66:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <buzzerTask+0xc8>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
    }

    if(buzzer_on)
 8000d6c:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <buzzerTask+0xc8>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d044      	beq.n	8000dfe <buzzerTask+0xba>
    {
      switch (buzzer_state) {
 8000d74:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <buzzerTask+0xcc>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d01f      	beq.n	8000dbc <buzzerTask+0x78>
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	dc3e      	bgt.n	8000dfe <buzzerTask+0xba>
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <buzzerTask+0x46>
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d009      	beq.n	8000d9c <buzzerTask+0x58>
=======
 8000e3e:	f000 fdb3 	bl	80019a8 <HAL_GetTick>
 8000e42:	6078      	str	r0, [r7, #4]

    if(controlPacket.buzzer != 0 && buzzer_on == 0)
 8000e44:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <buzzerTask+0xc4>)
 8000e46:	78db      	ldrb	r3, [r3, #3]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <buzzerTask+0x28>
 8000e52:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <buzzerTask+0xc8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <buzzerTask+0x28>
    {
      buzzer_on = 1;
 8000e5a:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <buzzerTask+0xc8>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
    }

    if(buzzer_on)
 8000e60:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <buzzerTask+0xc8>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d044      	beq.n	8000ef2 <buzzerTask+0xba>
    {
      switch (buzzer_state) {
 8000e68:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <buzzerTask+0xcc>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d01f      	beq.n	8000eb0 <buzzerTask+0x78>
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	dc3e      	bgt.n	8000ef2 <buzzerTask+0xba>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <buzzerTask+0x46>
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d009      	beq.n	8000e90 <buzzerTask+0x58>
>>>>>>> develop
            }
            break;
      }
    }
   
   return; 
<<<<<<< HEAD
 8000d88:	e039      	b.n	8000dfe <buzzerTask+0xba>
            onBuzzer();
 8000d8a:	f7ff fa2b 	bl	80001e4 <onBuzzer>
            last_tick = now;
 8000d8e:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <buzzerTask+0xd0>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]
            buzzer_state = 1;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <buzzerTask+0xcc>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
            break;
 8000d9a:	e02f      	b.n	8000dfc <buzzerTask+0xb8>
            if (now - last_tick >= 300) {
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <buzzerTask+0xd0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000da8:	d325      	bcc.n	8000df6 <buzzerTask+0xb2>
                offBuzzer();
 8000daa:	f7ff fa23 	bl	80001f4 <offBuzzer>
                last_tick = now;
 8000dae:	4a19      	ldr	r2, [pc, #100]	@ (8000e14 <buzzerTask+0xd0>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
                buzzer_state = 2;
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <buzzerTask+0xcc>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	701a      	strb	r2, [r3, #0]
            break;
 8000dba:	e01c      	b.n	8000df6 <buzzerTask+0xb2>
            if (now - last_tick >= 100) {
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <buzzerTask+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b63      	cmp	r3, #99	@ 0x63
 8000dc6:	d918      	bls.n	8000dfa <buzzerTask+0xb6>
                step_count++;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <buzzerTask+0xd4>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <buzzerTask+0xd4>)
 8000dd2:	701a      	strb	r2, [r3, #0]
                if (step_count >= 3) {
 8000dd4:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <buzzerTask+0xd4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d903      	bls.n	8000de4 <buzzerTask+0xa0>
                    buzzer_on = 0;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <buzzerTask+0xc8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
            break;
 8000de2:	e00a      	b.n	8000dfa <buzzerTask+0xb6>
                    onBuzzer();
 8000de4:	f7ff f9fe 	bl	80001e4 <onBuzzer>
                    last_tick = now;
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <buzzerTask+0xd0>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
                    buzzer_state = 1;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <buzzerTask+0xcc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
            break;
 8000df4:	e001      	b.n	8000dfa <buzzerTask+0xb6>
            break;
 8000df6:	bf00      	nop
 8000df8:	e000      	b.n	8000dfc <buzzerTask+0xb8>
            break;
 8000dfa:	bf00      	nop
   return; 
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
}
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000344 	.word	0x20000344
 8000e0c:	20000354 	.word	0x20000354
 8000e10:	20000355 	.word	0x20000355
 8000e14:	20000358 	.word	0x20000358
 8000e18:	2000035c 	.word	0x2000035c

08000e1c <Error_Handler>:
=======
 8000e7c:	e039      	b.n	8000ef2 <buzzerTask+0xba>
            onBuzzer();
 8000e7e:	f7ff f9b1 	bl	80001e4 <onBuzzer>
            last_tick = now;
 8000e82:	4a21      	ldr	r2, [pc, #132]	@ (8000f08 <buzzerTask+0xd0>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6013      	str	r3, [r2, #0]
            buzzer_state = 1;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <buzzerTask+0xcc>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
            break;
 8000e8e:	e02f      	b.n	8000ef0 <buzzerTask+0xb8>
            if (now - last_tick >= 300) {
 8000e90:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <buzzerTask+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e9c:	d325      	bcc.n	8000eea <buzzerTask+0xb2>
                offBuzzer();
 8000e9e:	f7ff f9a9 	bl	80001f4 <offBuzzer>
                last_tick = now;
 8000ea2:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <buzzerTask+0xd0>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6013      	str	r3, [r2, #0]
                buzzer_state = 2;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <buzzerTask+0xcc>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
            break;
 8000eae:	e01c      	b.n	8000eea <buzzerTask+0xb2>
            if (now - last_tick >= 100) {
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <buzzerTask+0xd0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b63      	cmp	r3, #99	@ 0x63
 8000eba:	d918      	bls.n	8000eee <buzzerTask+0xb6>
                step_count++;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <buzzerTask+0xd4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <buzzerTask+0xd4>)
 8000ec6:	701a      	strb	r2, [r3, #0]
                if (step_count >= 3) {
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <buzzerTask+0xd4>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d903      	bls.n	8000ed8 <buzzerTask+0xa0>
                    buzzer_on = 0;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <buzzerTask+0xc8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
            break;
 8000ed6:	e00a      	b.n	8000eee <buzzerTask+0xb6>
                    onBuzzer();
 8000ed8:	f7ff f984 	bl	80001e4 <onBuzzer>
                    last_tick = now;
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <buzzerTask+0xd0>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
                    buzzer_state = 1;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <buzzerTask+0xcc>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
            break;
 8000ee8:	e001      	b.n	8000eee <buzzerTask+0xb6>
            break;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <buzzerTask+0xb8>
            break;
 8000eee:	bf00      	nop
   return; 
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
}
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000390 	.word	0x20000390
 8000f00:	200003a0 	.word	0x200003a0
 8000f04:	200003a1 	.word	0x200003a1
 8000f08:	200003a4 	.word	0x200003a4
 8000f0c:	200003a8 	.word	0x200003a8

08000f10 <Error_Handler>:
>>>>>>> develop
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
=======
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
>>>>>>> develop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
=======
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
>>>>>>> develop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <initRgb>:
=======
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <Error_Handler+0x8>

08000f1c <initRgb>:
>>>>>>> develop
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void initRgb(void)
{
<<<<<<< HEAD
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <initRgb+0x20>)
 8000e30:	f001 fd94 	bl	800295c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e34:	2100      	movs	r1, #0
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <initRgb+0x24>)
 8000e38:	f001 fd90 	bl	800295c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <initRgb+0x20>)
 8000e40:	f001 fd8c 	bl	800295c <HAL_TIM_PWM_Start>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000dc 	.word	0x200000dc
 8000e4c:	2000016c 	.word	0x2000016c

08000e50 <setColorRgb>:

void setColorRgb(uint16_t red, uint16_t green, uint16_t blue)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	80bb      	strh	r3, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	807b      	strh	r3, [r7, #2]
    if (red > 999) red = 999;
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e68:	d302      	bcc.n	8000e70 <setColorRgb+0x20>
 8000e6a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000e6e:	80fb      	strh	r3, [r7, #6]
    if (green > 999) green = 999;
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e76:	d302      	bcc.n	8000e7e <setColorRgb+0x2e>
 8000e78:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000e7c:	80bb      	strh	r3, [r7, #4]
    if (blue > 999) blue = 999;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e84:	d302      	bcc.n	8000e8c <setColorRgb+0x3c>
 8000e86:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000e8a:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, red);
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <setColorRgb+0x60>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, green);
 8000e94:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <setColorRgb+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	88ba      	ldrh	r2, [r7, #4]
 8000e9a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, blue);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <setColorRgb+0x60>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	887a      	ldrh	r2, [r7, #2]
 8000ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200000dc 	.word	0x200000dc
 8000eb4:	2000016c 	.word	0x2000016c

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f20:	2104      	movs	r1, #4
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <initRgb+0x20>)
 8000f24:	f001 fdca 	bl	8002abc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <initRgb+0x24>)
 8000f2c:	f001 fdc6 	bl	8002abc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f30:	2108      	movs	r1, #8
 8000f32:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <initRgb+0x20>)
 8000f34:	f001 fdc2 	bl	8002abc <HAL_TIM_PWM_Start>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000128 	.word	0x20000128
 8000f40:	200001b8 	.word	0x200001b8

08000f44 <setColorRgb>:

void setColorRgb(uint16_t red, uint16_t green, uint16_t blue)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	807b      	strh	r3, [r7, #2]
    if (red > 999) red = 999;
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f5c:	d302      	bcc.n	8000f64 <setColorRgb+0x20>
 8000f5e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000f62:	80fb      	strh	r3, [r7, #6]
    if (green > 999) green = 999;
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f6a:	d302      	bcc.n	8000f72 <setColorRgb+0x2e>
 8000f6c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000f70:	80bb      	strh	r3, [r7, #4]
    if (blue > 999) blue = 999;
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f78:	d302      	bcc.n	8000f80 <setColorRgb+0x3c>
 8000f7a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000f7e:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, red);
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <setColorRgb+0x60>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	88fa      	ldrh	r2, [r7, #6]
 8000f86:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, green);
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <setColorRgb+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	88ba      	ldrh	r2, [r7, #4]
 8000f8e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, blue);
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <setColorRgb+0x60>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	887a      	ldrh	r2, [r7, #2]
 8000f96:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000128 	.word	0x20000128
 8000fa8:	200001b8 	.word	0x200001b8

08000fac <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> develop
extern TIM_HandleTypeDef htim2;
extern task_t taskTable[NUM_TASK]; //메인에 정의

/*1ms 주기로 발생하는 tim2 인터럽트 처리 루틴*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	if((htim->Instance) == htim2.Instance)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d101      	bne.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		taskManager();
 8000ecc:	f000 f806 	bl	8000edc <taskManager>
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000dc 	.word	0x200000dc

08000edc <taskManager>:

/*타이머 카운트 기반으로 태스크 활성화 여부 결정*/
void taskManager(void){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	e073      	b.n	8000fd0 <taskManager+0xf4>
		if(taskTable[i].offsetTime > 0)
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	493e      	ldr	r1, [pc, #248]	@ (8000fe4 <taskManager+0x108>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d029      	beq.n	8000f52 <taskManager+0x76>
		{
			taskTable[i].offsetTime--;
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4938      	ldr	r1, [pc, #224]	@ (8000fe4 <taskManager+0x108>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b298      	uxth	r0, r3
 8000f14:	4933      	ldr	r1, [pc, #204]	@ (8000fe4 <taskManager+0x108>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3304      	adds	r3, #4
 8000f22:	4602      	mov	r2, r0
 8000f24:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].offsetTime == 0)
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	492e      	ldr	r1, [pc, #184]	@ (8000fe4 <taskManager+0x108>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	3304      	adds	r3, #4
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d146      	bne.n	8000fca <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	4929      	ldr	r1, [pc, #164]	@ (8000fe4 <taskManager+0x108>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	330a      	adds	r3, #10
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e03b      	b.n	8000fca <taskManager+0xee>
=======
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if((htim->Instance) == htim2.Instance)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d101      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		taskManager();
 8000fc0:	f000 f806 	bl	8000fd0 <taskManager>
	}
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000128 	.word	0x20000128

08000fd0 <taskManager>:

/*타이머 카운트 기반으로 태스크 활성화 여부 결정*/
void taskManager(void){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e073      	b.n	80010c4 <taskManager+0xf4>
		if(taskTable[i].offsetTime > 0)
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	493e      	ldr	r1, [pc, #248]	@ (80010d8 <taskManager+0x108>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3304      	adds	r3, #4
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d029      	beq.n	8001046 <taskManager+0x76>
		{
			taskTable[i].offsetTime--;
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	4938      	ldr	r1, [pc, #224]	@ (80010d8 <taskManager+0x108>)
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	3304      	adds	r3, #4
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	3b01      	subs	r3, #1
 8001006:	b298      	uxth	r0, r3
 8001008:	4933      	ldr	r1, [pc, #204]	@ (80010d8 <taskManager+0x108>)
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	3304      	adds	r3, #4
 8001016:	4602      	mov	r2, r0
 8001018:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].offsetTime == 0)
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	492e      	ldr	r1, [pc, #184]	@ (80010d8 <taskManager+0x108>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3304      	adds	r3, #4
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d146      	bne.n	80010be <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	4929      	ldr	r1, [pc, #164]	@ (80010d8 <taskManager+0x108>)
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	330a      	adds	r3, #10
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e03b      	b.n	80010be <taskManager+0xee>
>>>>>>> develop
			}
		}
		else
		{
			taskTable[i].waitedTime++;
<<<<<<< HEAD
 8000f52:	79fa      	ldrb	r2, [r7, #7]
 8000f54:	4923      	ldr	r1, [pc, #140]	@ (8000fe4 <taskManager+0x108>)
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	3308      	adds	r3, #8
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	b298      	uxth	r0, r3
 8000f68:	491e      	ldr	r1, [pc, #120]	@ (8000fe4 <taskManager+0x108>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3308      	adds	r3, #8
 8000f76:	4602      	mov	r2, r0
 8000f78:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].waitedTime == taskTable[i].period)
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	4919      	ldr	r1, [pc, #100]	@ (8000fe4 <taskManager+0x108>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3308      	adds	r3, #8
 8000f8a:	8819      	ldrh	r1, [r3, #0]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	4815      	ldr	r0, [pc, #84]	@ (8000fe4 <taskManager+0x108>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4403      	add	r3, r0
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	4299      	cmp	r1, r3
 8000fa0:	d113      	bne.n	8000fca <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	490f      	ldr	r1, [pc, #60]	@ (8000fe4 <taskManager+0x108>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	330a      	adds	r3, #10
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
				taskTable[i].waitedTime = 0;
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	490a      	ldr	r1, [pc, #40]	@ (8000fe4 <taskManager+0x108>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < NUM_TASK; i++){
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d988      	bls.n	8000ee8 <taskManager+0xc>
=======
 8001046:	79fa      	ldrb	r2, [r7, #7]
 8001048:	4923      	ldr	r1, [pc, #140]	@ (80010d8 <taskManager+0x108>)
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	3308      	adds	r3, #8
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b298      	uxth	r0, r3
 800105c:	491e      	ldr	r1, [pc, #120]	@ (80010d8 <taskManager+0x108>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	3308      	adds	r3, #8
 800106a:	4602      	mov	r2, r0
 800106c:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].waitedTime == taskTable[i].period)
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	4919      	ldr	r1, [pc, #100]	@ (80010d8 <taskManager+0x108>)
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3308      	adds	r3, #8
 800107e:	8819      	ldrh	r1, [r3, #0]
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	4815      	ldr	r0, [pc, #84]	@ (80010d8 <taskManager+0x108>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4403      	add	r3, r0
 800108e:	3306      	adds	r3, #6
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	4299      	cmp	r1, r3
 8001094:	d113      	bne.n	80010be <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	490f      	ldr	r1, [pc, #60]	@ (80010d8 <taskManager+0x108>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	330a      	adds	r3, #10
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
				taskTable[i].waitedTime = 0;
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	490a      	ldr	r1, [pc, #40]	@ (80010d8 <taskManager+0x108>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	3308      	adds	r3, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < NUM_TASK; i++){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3301      	adds	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d988      	bls.n	8000fdc <taskManager+0xc>
>>>>>>> develop
			{
				//do nothing
			}
		}
	}
}
<<<<<<< HEAD
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <initScheduler>:

void initScheduler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <initScheduler+0x10>)
 8000fee:	f001 fc13 	bl	8002818 <HAL_TIM_Base_Start_IT>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000dc 	.word	0x200000dc

08000ffc <scheduler>:
=======
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000

080010dc <initScheduler>:

void initScheduler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <initScheduler+0x10>)
 80010e2:	f001 fc49 	bl	8002978 <HAL_TIM_Base_Start_IT>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000128 	.word	0x20000128

080010f0 <scheduler>:
>>>>>>> develop

/*메인 루프에서 호출하여 사용*/
void scheduler(void)
{
<<<<<<< HEAD
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e020      	b.n	800104a <scheduler+0x4e>
	{
		if(taskTable[i].status == ACTIVATED)
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	4914      	ldr	r1, [pc, #80]	@ (800105c <scheduler+0x60>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	330a      	adds	r3, #10
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d112      	bne.n	8001044 <scheduler+0x48>
		{
			taskTable[i].status = DEACTIVATED;
 800101e:	79fa      	ldrb	r2, [r7, #7]
 8001020:	490e      	ldr	r1, [pc, #56]	@ (800105c <scheduler+0x60>)
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	330a      	adds	r3, #10
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
			taskTable[i].task();
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	4909      	ldr	r1, [pc, #36]	@ (800105c <scheduler+0x60>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4798      	blx	r3
	for(i = 0; i < NUM_TASK; i++)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3301      	adds	r3, #1
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d9db      	bls.n	8001008 <scheduler+0xc>
		}
	}
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000

08001060 <initServo>:
};
//1 시트
//2. 창문

void initServo(void)
 {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_SERVO; i++){
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e064      	b.n	8001136 <initServo+0xd6>
		__HAL_TIM_SetCompare(arrayServo[i].htim,arrayServo[i].channel, arrayServo[i].initialPulse);
 800106c:	4a35      	ldr	r2, [pc, #212]	@ (8001144 <initServo+0xe4>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4413      	add	r3, r2
 8001074:	3304      	adds	r3, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10e      	bne.n	800109a <initServo+0x3a>
 800107c:	4a31      	ldr	r2, [pc, #196]	@ (8001144 <initServo+0xe4>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4413      	add	r3, r2
 8001084:	330e      	adds	r3, #14
 8001086:	8819      	ldrh	r1, [r3, #0]
 8001088:	4a2e      	ldr	r2, [pc, #184]	@ (8001144 <initServo+0xe4>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	460a      	mov	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
 8001098:	e03b      	b.n	8001112 <initServo+0xb2>
 800109a:	4a2a      	ldr	r2, [pc, #168]	@ (8001144 <initServo+0xe4>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d10e      	bne.n	80010c8 <initServo+0x68>
 80010aa:	4a26      	ldr	r2, [pc, #152]	@ (8001144 <initServo+0xe4>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	330e      	adds	r3, #14
 80010b4:	8819      	ldrh	r1, [r3, #0]
 80010b6:	4a23      	ldr	r2, [pc, #140]	@ (8001144 <initServo+0xe4>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	460b      	mov	r3, r1
 80010c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80010c6:	e024      	b.n	8001112 <initServo+0xb2>
 80010c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001144 <initServo+0xe4>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	4413      	add	r3, r2
 80010d0:	3304      	adds	r3, #4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d10e      	bne.n	80010f6 <initServo+0x96>
 80010d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <initServo+0xe4>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	4413      	add	r3, r2
 80010e0:	330e      	adds	r3, #14
 80010e2:	8819      	ldrh	r1, [r3, #0]
 80010e4:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <initServo+0xe4>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	460b      	mov	r3, r1
 80010f2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010f4:	e00d      	b.n	8001112 <initServo+0xb2>
 80010f6:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <initServo+0xe4>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	4413      	add	r3, r2
 80010fe:	330e      	adds	r3, #14
 8001100:	8819      	ldrh	r1, [r3, #0]
 8001102:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <initServo+0xe4>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	460b      	mov	r3, r1
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_TIM_PWM_Start(arrayServo[i].htim,arrayServo[i].channel);
 8001112:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <initServo+0xe4>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4909      	ldr	r1, [pc, #36]	@ (8001144 <initServo+0xe4>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	440b      	add	r3, r1
 8001124:	3304      	adds	r3, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f001 fc16 	bl	800295c <HAL_TIM_PWM_Start>
	for(int i = 0; i < NUM_SERVO; i++){
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b01      	cmp	r3, #1
 800113a:	dd97      	ble.n	800106c <initServo+0xc>
	}

	return;
 800113c:	bf00      	nop
 }
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000004c 	.word	0x2000004c

08001148 <getPulse>:

uint16_t getPulse(uint8_t servoIndex)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	return (__HAL_TIM_GetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4a1f      	ldr	r2, [pc, #124]	@ (80011d4 <getPulse+0x8c>)
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	3304      	adds	r3, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d108      	bne.n	8001174 <getPulse+0x2c>
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4a1b      	ldr	r2, [pc, #108]	@ (80011d4 <getPulse+0x8c>)
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001170:	b29b      	uxth	r3, r3
 8001172:	e029      	b.n	80011c8 <getPulse+0x80>
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <getPulse+0x8c>)
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	3304      	adds	r3, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d108      	bne.n	8001196 <getPulse+0x4e>
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <getPulse+0x8c>)
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001192:	b29b      	uxth	r3, r3
 8001194:	e018      	b.n	80011c8 <getPulse+0x80>
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4a0e      	ldr	r2, [pc, #56]	@ (80011d4 <getPulse+0x8c>)
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	4413      	add	r3, r2
 800119e:	3304      	adds	r3, #4
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d108      	bne.n	80011b8 <getPulse+0x70>
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <getPulse+0x8c>)
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	e007      	b.n	80011c8 <getPulse+0x80>
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <getPulse+0x8c>)
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4413      	add	r3, r2
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	b29b      	uxth	r3, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000004c 	.word	0x2000004c

080011d8 <getUnitPulse>:
uint16_t getUnitPulse(uint8_t servoIndex)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	return arrayServo[servoIndex].unitPulse;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <getUnitPulse+0x20>)
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	330c      	adds	r3, #12
 80011ec:	881b      	ldrh	r3, [r3, #0]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	2000004c 	.word	0x2000004c

080011fc <setPulse>:

void setPulse(uint8_t servoIndex, uint16_t pulse)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4a1f      	ldr	r2, [pc, #124]	@ (800128c <setPulse+0x90>)
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	3304      	adds	r3, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d108      	bne.n	800122e <setPulse+0x32>
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <setPulse+0x90>)
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	88ba      	ldrh	r2, [r7, #4]
 800122a:	635a      	str	r2, [r3, #52]	@ 0x34
	return;
 800122c:	e02a      	b.n	8001284 <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a16      	ldr	r2, [pc, #88]	@ (800128c <setPulse+0x90>)
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	3304      	adds	r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d108      	bne.n	8001250 <setPulse+0x54>
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <setPulse+0x90>)
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	6393      	str	r3, [r2, #56]	@ 0x38
	return;
 800124e:	e019      	b.n	8001284 <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <setPulse+0x90>)
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	3304      	adds	r3, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b08      	cmp	r3, #8
 800125e:	d108      	bne.n	8001272 <setPulse+0x76>
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <setPulse+0x90>)
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4413      	add	r3, r2
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 8001270:	e008      	b.n	8001284 <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4a05      	ldr	r2, [pc, #20]	@ (800128c <setPulse+0x90>)
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	88bb      	ldrh	r3, [r7, #4]
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
	return;
 8001282:	bf00      	nop
}
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	2000004c 	.word	0x2000004c

08001290 <HAL_MspInit>:
=======
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	e020      	b.n	800113e <scheduler+0x4e>
	{
		if(taskTable[i].status == ACTIVATED)
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	4914      	ldr	r1, [pc, #80]	@ (8001150 <scheduler+0x60>)
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	330a      	adds	r3, #10
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d112      	bne.n	8001138 <scheduler+0x48>
		{
			taskTable[i].status = DEACTIVATED;
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	490e      	ldr	r1, [pc, #56]	@ (8001150 <scheduler+0x60>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	330a      	adds	r3, #10
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
			taskTable[i].task();
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	4909      	ldr	r1, [pc, #36]	@ (8001150 <scheduler+0x60>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4798      	blx	r3
	for(i = 0; i < NUM_TASK; i++)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d9db      	bls.n	80010fc <scheduler+0xc>
		}
	}
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <initServo>:
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	e064      	b.n	800122a <initServo+0xd6>
 8001160:	4a35      	ldr	r2, [pc, #212]	@ (8001238 <initServo+0xe4>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	4413      	add	r3, r2
 8001168:	3304      	adds	r3, #4
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10e      	bne.n	800118e <initServo+0x3a>
 8001170:	4a31      	ldr	r2, [pc, #196]	@ (8001238 <initServo+0xe4>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	330e      	adds	r3, #14
 800117a:	8819      	ldrh	r1, [r3, #0]
 800117c:	4a2e      	ldr	r2, [pc, #184]	@ (8001238 <initServo+0xe4>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	4413      	add	r3, r2
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	460a      	mov	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	@ 0x34
 800118c:	e03b      	b.n	8001206 <initServo+0xb2>
 800118e:	4a2a      	ldr	r2, [pc, #168]	@ (8001238 <initServo+0xe4>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	3304      	adds	r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b04      	cmp	r3, #4
 800119c:	d10e      	bne.n	80011bc <initServo+0x68>
 800119e:	4a26      	ldr	r2, [pc, #152]	@ (8001238 <initServo+0xe4>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	330e      	adds	r3, #14
 80011a8:	8819      	ldrh	r1, [r3, #0]
 80011aa:	4a23      	ldr	r2, [pc, #140]	@ (8001238 <initServo+0xe4>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	460b      	mov	r3, r1
 80011b8:	6393      	str	r3, [r2, #56]	@ 0x38
 80011ba:	e024      	b.n	8001206 <initServo+0xb2>
 80011bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <initServo+0xe4>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3304      	adds	r3, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d10e      	bne.n	80011ea <initServo+0x96>
 80011cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001238 <initServo+0xe4>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	330e      	adds	r3, #14
 80011d6:	8819      	ldrh	r1, [r3, #0]
 80011d8:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <initServo+0xe4>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	460b      	mov	r3, r1
 80011e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011e8:	e00d      	b.n	8001206 <initServo+0xb2>
 80011ea:	4a13      	ldr	r2, [pc, #76]	@ (8001238 <initServo+0xe4>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4413      	add	r3, r2
 80011f2:	330e      	adds	r3, #14
 80011f4:	8819      	ldrh	r1, [r3, #0]
 80011f6:	4a10      	ldr	r2, [pc, #64]	@ (8001238 <initServo+0xe4>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	460b      	mov	r3, r1
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4a0c      	ldr	r2, [pc, #48]	@ (8001238 <initServo+0xe4>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4909      	ldr	r1, [pc, #36]	@ (8001238 <initServo+0xe4>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	440b      	add	r3, r1
 8001218:	3304      	adds	r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4610      	mov	r0, r2
 8001220:	f001 fc4c 	bl	8002abc <HAL_TIM_PWM_Start>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3301      	adds	r3, #1
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	dd97      	ble.n	8001160 <initServo+0xc>
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000048 	.word	0x20000048

0800123c <getPulse>:
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <getPulse+0x8c>)
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	3304      	adds	r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d108      	bne.n	8001268 <getPulse+0x2c>
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <getPulse+0x8c>)
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001264:	b29b      	uxth	r3, r3
 8001266:	e029      	b.n	80012bc <getPulse+0x80>
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <getPulse+0x8c>)
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	3304      	adds	r3, #4
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d108      	bne.n	800128a <getPulse+0x4e>
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <getPulse+0x8c>)
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001286:	b29b      	uxth	r3, r3
 8001288:	e018      	b.n	80012bc <getPulse+0x80>
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <getPulse+0x8c>)
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	4413      	add	r3, r2
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b08      	cmp	r3, #8
 8001298:	d108      	bne.n	80012ac <getPulse+0x70>
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <getPulse+0x8c>)
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	e007      	b.n	80012bc <getPulse+0x80>
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <getPulse+0x8c>)
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000048 	.word	0x20000048

080012cc <getUnitPulse>:
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <getUnitPulse+0x20>)
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	330c      	adds	r3, #12
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000048 	.word	0x20000048

080012f0 <setPulse>:
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80bb      	strh	r3, [r7, #4]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <setPulse+0x90>)
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	3304      	adds	r3, #4
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d108      	bne.n	8001322 <setPulse+0x32>
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <setPulse+0x90>)
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	88ba      	ldrh	r2, [r7, #4]
 800131e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001320:	e02a      	b.n	8001378 <setPulse+0x88>
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <setPulse+0x90>)
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	3304      	adds	r3, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d108      	bne.n	8001344 <setPulse+0x54>
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <setPulse+0x90>)
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	6393      	str	r3, [r2, #56]	@ 0x38
 8001342:	e019      	b.n	8001378 <setPulse+0x88>
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <setPulse+0x90>)
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	3304      	adds	r3, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d108      	bne.n	8001366 <setPulse+0x76>
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <setPulse+0x90>)
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	88bb      	ldrh	r3, [r7, #4]
 8001362:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001364:	e008      	b.n	8001378 <setPulse+0x88>
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <setPulse+0x90>)
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000048 	.word	0x20000048

08001384 <HAL_MspInit>:
>>>>>>> develop
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
=======
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <HAL_MspInit+0x5c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_MspInit+0x5c>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <HAL_MspInit+0x5c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_MspInit+0x5c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
=======
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <HAL_MspInit+0x5c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_MspInit+0x5c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_MspInit+0x5c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
>>>>>>> develop

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_MspInit+0x60>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_MspInit+0x60>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6053      	str	r3, [r2, #4]
=======
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_MspInit+0x60>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <HAL_MspInit+0x60>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6053      	str	r3, [r2, #4]
>>>>>>> develop

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000

080012f4 <HAL_TIM_Base_MspInit>:
=======
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000

080013e8 <HAL_TIM_Base_MspInit>:
>>>>>>> develop
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a12      	ldr	r2, [pc, #72]	@ (800134c <HAL_TIM_Base_MspInit+0x58>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10c      	bne.n	8001320 <HAL_TIM_Base_MspInit+0x2c>
=======
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <HAL_TIM_Base_MspInit+0x58>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10c      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x2c>
>>>>>>> develop
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_TIM_Base_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a11      	ldr	r2, [pc, #68]	@ (8001350 <HAL_TIM_Base_MspInit+0x5c>)
 800130c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_TIM_Base_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
=======
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_TIM_Base_MspInit+0x5c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <HAL_TIM_Base_MspInit+0x5c>)
 8001400:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001404:	6193      	str	r3, [r2, #24]
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <HAL_TIM_Base_MspInit+0x5c>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
>>>>>>> develop
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
<<<<<<< HEAD
 800131e:	e010      	b.n	8001342 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_TIM_Base_MspInit+0x60>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_TIM_Base_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_TIM_Base_MspInit+0x5c>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_TIM_Base_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40012c00 	.word	0x40012c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40000400 	.word	0x40000400

08001358 <HAL_TIM_PWM_MspInit>:
=======
 8001412:	e010      	b.n	8001436 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <HAL_TIM_Base_MspInit+0x60>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10b      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <HAL_TIM_Base_MspInit+0x5c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <HAL_TIM_Base_MspInit+0x5c>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_TIM_Base_MspInit+0x5c>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40012c00 	.word	0x40012c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40000400 	.word	0x40000400

0800144c <HAL_TIM_PWM_MspInit>:
>>>>>>> develop
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
<<<<<<< HEAD
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d114      	bne.n	8001394 <HAL_TIM_PWM_MspInit+0x3c>
=======
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800145c:	d114      	bne.n	8001488 <HAL_TIM_PWM_MspInit+0x3c>
>>>>>>> develop
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_TIM_PWM_MspInit+0x68>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <HAL_TIM_PWM_MspInit+0x68>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_TIM_PWM_MspInit+0x68>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	201c      	movs	r0, #28
 8001388:	f000 fb3f 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138c:	201c      	movs	r0, #28
 800138e:	f000 fb58 	bl	8001a42 <HAL_NVIC_EnableIRQ>
=======
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x68>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x68>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x68>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	201c      	movs	r0, #28
 800147c:	f000 fb75 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001480:	201c      	movs	r0, #28
 8001482:	f000 fb8e 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
>>>>>>> develop
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001392:	e010      	b.n	80013b6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_TIM_PWM_MspInit+0x6c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10b      	bne.n	80013b6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_TIM_PWM_MspInit+0x68>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <HAL_TIM_PWM_MspInit+0x68>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_TIM_PWM_MspInit+0x68>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40000800 	.word	0x40000800

080013c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	@ 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a50      	ldr	r2, [pc, #320]	@ (8001524 <HAL_TIM_MspPostInit+0x15c>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d119      	bne.n	800141c <HAL_TIM_MspPostInit+0x54>
=======
 8001486:	e010      	b.n	80014aa <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_TIM_PWM_MspInit+0x6c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10b      	bne.n	80014aa <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x68>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x68>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x68>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40000800 	.word	0x40000800

080014bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	@ 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a50      	ldr	r2, [pc, #320]	@ (8001618 <HAL_TIM_MspPostInit+0x15c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d119      	bne.n	8001510 <HAL_TIM_MspPostInit+0x54>
>>>>>>> develop
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80013e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
=======
 80014dc:	4b4f      	ldr	r3, [pc, #316]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b4c      	ldr	r3, [pc, #304]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697b      	ldr	r3, [r7, #20]
>>>>>>> develop
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
<<<<<<< HEAD
 8001400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2302      	movs	r3, #2
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	4619      	mov	r1, r3
 8001414:	4845      	ldr	r0, [pc, #276]	@ (800152c <HAL_TIM_MspPostInit+0x164>)
 8001416:	f000 fbe1 	bl	8001bdc <HAL_GPIO_Init>
=======
 80014f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2302      	movs	r3, #2
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	4619      	mov	r1, r3
 8001508:	4845      	ldr	r0, [pc, #276]	@ (8001620 <HAL_TIM_MspPostInit+0x164>)
 800150a:	f000 fc17 	bl	8001d3c <HAL_GPIO_Init>
>>>>>>> develop
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 800141a:	e07e      	b.n	800151a <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001424:	d12b      	bne.n	800147e <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b40      	ldr	r3, [pc, #256]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a3f      	ldr	r2, [pc, #252]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800143e:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2302      	movs	r3, #2
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4619      	mov	r1, r3
 8001452:	4837      	ldr	r0, [pc, #220]	@ (8001530 <HAL_TIM_MspPostInit+0x168>)
 8001454:	f000 fbc2 	bl	8001bdc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001458:	4b36      	ldr	r3, [pc, #216]	@ (8001534 <HAL_TIM_MspPostInit+0x16c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800145e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001468:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800146e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001470:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001476:	4a2f      	ldr	r2, [pc, #188]	@ (8001534 <HAL_TIM_MspPostInit+0x16c>)
 8001478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147a:	6053      	str	r3, [r2, #4]
}
 800147c:	e04d      	b.n	800151a <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM3)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a2d      	ldr	r2, [pc, #180]	@ (8001538 <HAL_TIM_MspPostInit+0x170>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d12a      	bne.n	80014de <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a26      	ldr	r2, [pc, #152]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80014a0:	2312      	movs	r3, #18
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4619      	mov	r1, r3
 80014b2:	481f      	ldr	r0, [pc, #124]	@ (8001530 <HAL_TIM_MspPostInit+0x168>)
 80014b4:	f000 fb92 	bl	8001bdc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80014b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <HAL_TIM_MspPostInit+0x16c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HAL_TIM_MspPostInit+0x16c>)
 80014d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014da:	6053      	str	r3, [r2, #4]
}
 80014dc:	e01d      	b.n	800151a <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM4)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a16      	ldr	r2, [pc, #88]	@ (800153c <HAL_TIM_MspPostInit+0x174>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d118      	bne.n	800151a <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_TIM_MspPostInit+0x160>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001500:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2302      	movs	r3, #2
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	4619      	mov	r1, r3
 8001514:	4806      	ldr	r0, [pc, #24]	@ (8001530 <HAL_TIM_MspPostInit+0x168>)
 8001516:	f000 fb61 	bl	8001bdc <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	@ 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40012c00 	.word	0x40012c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40010000 	.word	0x40010000
 8001538:	40000400 	.word	0x40000400
 800153c:	40000800 	.word	0x40000800

08001540 <HAL_UART_MspInit>:
=======
 800150e:	e07e      	b.n	800160e <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001518:	d12b      	bne.n	8001572 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b40      	ldr	r3, [pc, #256]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a3f      	ldr	r2, [pc, #252]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001532:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2302      	movs	r3, #2
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4619      	mov	r1, r3
 8001546:	4837      	ldr	r0, [pc, #220]	@ (8001624 <HAL_TIM_MspPostInit+0x168>)
 8001548:	f000 fbf8 	bl	8001d3c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 800154c:	4b36      	ldr	r3, [pc, #216]	@ (8001628 <HAL_TIM_MspPostInit+0x16c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800156a:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <HAL_TIM_MspPostInit+0x16c>)
 800156c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156e:	6053      	str	r3, [r2, #4]
}
 8001570:	e04d      	b.n	800160e <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM3)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <HAL_TIM_MspPostInit+0x170>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d12a      	bne.n	80015d2 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a26      	ldr	r2, [pc, #152]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b24      	ldr	r3, [pc, #144]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001594:	2312      	movs	r3, #18
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2302      	movs	r3, #2
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4619      	mov	r1, r3
 80015a6:	481f      	ldr	r0, [pc, #124]	@ (8001624 <HAL_TIM_MspPostInit+0x168>)
 80015a8:	f000 fbc8 	bl	8001d3c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_TIM_MspPostInit+0x16c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_TIM_MspPostInit+0x16c>)
 80015cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ce:	6053      	str	r3, [r2, #4]
}
 80015d0:	e01d      	b.n	800160e <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM4)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a16      	ldr	r2, [pc, #88]	@ (8001630 <HAL_TIM_MspPostInit+0x174>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d118      	bne.n	800160e <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_TIM_MspPostInit+0x160>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80015f4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2302      	movs	r3, #2
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	@ (8001624 <HAL_TIM_MspPostInit+0x168>)
 800160a:	f000 fb97 	bl	8001d3c <HAL_GPIO_Init>
}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	@ 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40012c00 	.word	0x40012c00
 800161c:	40021000 	.word	0x40021000
 8001620:	40010800 	.word	0x40010800
 8001624:	40010c00 	.word	0x40010c00
 8001628:	40010000 	.word	0x40010000
 800162c:	40000400 	.word	0x40000400
 8001630:	40000800 	.word	0x40000800

08001634 <HAL_UART_MspInit>:
>>>>>>> develop
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0318 	add.w	r3, r7, #24
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a3b      	ldr	r2, [pc, #236]	@ (8001648 <HAL_UART_MspInit+0x108>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d13a      	bne.n	80015d6 <HAL_UART_MspInit+0x96>
=======
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a3b      	ldr	r2, [pc, #236]	@ (800173c <HAL_UART_MspInit+0x108>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d13a      	bne.n	80016ca <HAL_UART_MspInit+0x96>
>>>>>>> develop
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8001560:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_UART_MspInit+0x10c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a39      	ldr	r2, [pc, #228]	@ (800164c <HAL_UART_MspInit+0x10c>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b37      	ldr	r3, [pc, #220]	@ (800164c <HAL_UART_MspInit+0x10c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_UART_MspInit+0x10c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a33      	ldr	r2, [pc, #204]	@ (800164c <HAL_UART_MspInit+0x10c>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_UART_MspInit+0x10c>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
=======
 8001654:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a39      	ldr	r2, [pc, #228]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b37      	ldr	r3, [pc, #220]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a33      	ldr	r2, [pc, #204]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b31      	ldr	r3, [pc, #196]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
>>>>>>> develop
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 8001590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	4619      	mov	r1, r3
 80015a4:	482a      	ldr	r0, [pc, #168]	@ (8001650 <HAL_UART_MspInit+0x110>)
 80015a6:	f000 fb19 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4619      	mov	r1, r3
 80015be:	4824      	ldr	r0, [pc, #144]	@ (8001650 <HAL_UART_MspInit+0x110>)
 80015c0:	f000 fb0c 	bl	8001bdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2025      	movs	r0, #37	@ 0x25
 80015ca:	f000 fa1e 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ce:	2025      	movs	r0, #37	@ 0x25
 80015d0:	f000 fa37 	bl	8001a42 <HAL_NVIC_EnableIRQ>
=======
 8001684:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4619      	mov	r1, r3
 8001698:	482a      	ldr	r0, [pc, #168]	@ (8001744 <HAL_UART_MspInit+0x110>)
 800169a:	f000 fb4f 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800169e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4824      	ldr	r0, [pc, #144]	@ (8001744 <HAL_UART_MspInit+0x110>)
 80016b4:	f000 fb42 	bl	8001d3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2025      	movs	r0, #37	@ 0x25
 80016be:	f000 fa54 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c2:	2025      	movs	r0, #37	@ 0x25
 80016c4:	f000 fa6d 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
>>>>>>> develop
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80015d4:	e034      	b.n	8001640 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <HAL_UART_MspInit+0x114>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12f      	bne.n	8001640 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_UART_MspInit+0x10c>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a19      	ldr	r2, [pc, #100]	@ (800164c <HAL_UART_MspInit+0x10c>)
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ea:	61d3      	str	r3, [r2, #28]
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_UART_MspInit+0x10c>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <HAL_UART_MspInit+0x10c>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a13      	ldr	r2, [pc, #76]	@ (800164c <HAL_UART_MspInit+0x10c>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_UART_MspInit+0x10c>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001610:	2304      	movs	r3, #4
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	4619      	mov	r1, r3
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <HAL_UART_MspInit+0x110>)
 8001624:	f000 fada 	bl	8001bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001628:	2308      	movs	r3, #8
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <HAL_UART_MspInit+0x110>)
 800163c:	f000 face 	bl	8001bdc <HAL_GPIO_Init>
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	@ 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013800 	.word	0x40013800
 800164c:	40021000 	.word	0x40021000
 8001650:	40010800 	.word	0x40010800
 8001654:	40004400 	.word	0x40004400

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <NMI_Handler+0x4>

08001660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <MemManage_Handler+0x4>

08001670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <UsageFault_Handler+0x4>

08001680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
=======
 80016c8:	e034      	b.n	8001734 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001748 <HAL_UART_MspInit+0x114>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d12f      	bne.n	8001734 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 80016da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016de:	61d3      	str	r3, [r2, #28]
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a13      	ldr	r2, [pc, #76]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_UART_MspInit+0x10c>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001704:	2304      	movs	r3, #4
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	@ (8001744 <HAL_UART_MspInit+0x110>)
 8001718:	f000 fb10 	bl	8001d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800171c:	2308      	movs	r3, #8
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	4619      	mov	r1, r3
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <HAL_UART_MspInit+0x110>)
 8001730:	f000 fb04 	bl	8001d3c <HAL_GPIO_Init>
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40013800 	.word	0x40013800
 8001740:	40021000 	.word	0x40021000
 8001744:	40010800 	.word	0x40010800
 8001748:	40004400 	.word	0x40004400

0800174c <NMI_Handler>:
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <NMI_Handler+0x4>

08001754 <HardFault_Handler>:
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <HardFault_Handler+0x4>
>>>>>>> develop

0800175c <MemManage_Handler>:
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <MemManage_Handler+0x4>

<<<<<<< HEAD
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
=======
08001764 <BusFault_Handler>:
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <UsageFault_Handler+0x4>

08001774 <SVC_Handler>:
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
>>>>>>> develop

08001780 <DebugMon_Handler>:
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

<<<<<<< HEAD
  /* USER CODE END PendSV_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8bc 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <TIM2_IRQHandler+0x10>)
 80016b6:	f001 f9f3 	bl	8002aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000dc 	.word	0x200000dc

080016c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <USART1_IRQHandler+0x10>)
 80016ca:	f002 f86d 	bl	80037a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001b4 	.word	0x200001b4

080016d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016e0:	f000 fc18 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <calculate_checksum>:
=======
0800178c <PendSV_Handler>:
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
 800179c:	f000 f8f2 	bl	8001984 <HAL_IncTick>
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <TIM2_IRQHandler>:
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM2_IRQHandler+0x10>)
 80017aa:	f001 fa29 	bl	8002c00 <HAL_TIM_IRQHandler>
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000128 	.word	0x20000128

080017b8 <USART1_IRQHandler>:
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <USART1_IRQHandler+0x10>)
 80017be:	f002 f92f 	bl	8003a20 <HAL_UART_IRQHandler>
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000200 	.word	0x20000200

080017cc <EXTI15_10_IRQHandler>:
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017d4:	f000 fc4e 	bl	8002074 <HAL_GPIO_EXTI_IRQHandler>
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <_sbrk>:
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
 800180c:	f002 fea6 	bl	800455c <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20005000 	.word	0x20005000
 800183c:	00000400 	.word	0x00000400
 8001840:	200003ac 	.word	0x200003ac
 8001844:	20000500 	.word	0x20000500

08001848 <SystemInit>:
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <calculate_checksum>:
>>>>>>> develop
 */
#include "uart_packet.h"
#include <string.h>

/* Calculate 8-bit XOR checksum */
uint8_t calculate_checksum(const uint8_t* data, size_t length) {
<<<<<<< HEAD
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	e009      	b.n	800171c <calculate_checksum+0x28>
        sum ^= data[i];
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	4053      	eors	r3, r2
 8001714:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d3f1      	bcc.n	8001708 <calculate_checksum+0x14>
    }
    return sum;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <deserialize_actuator_packet>:
=======
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	e009      	b.n	800187c <calculate_checksum+0x28>
        sum ^= data[i];
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	4053      	eors	r3, r2
 8001874:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3301      	adds	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3f1      	bcc.n	8001868 <calculate_checksum+0x14>
    }
    return sum;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <deserialize_actuator_packet>:
>>>>>>> develop
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
}

/* Deserialize buffer into ActuatorPacket */
void deserialize_actuator_packet(const uint8_t* buffer, struct ActuatorPacket* packet) {
<<<<<<< HEAD
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
 800173a:	220b      	movs	r2, #11
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f002 fd66 	bl	8004210 <memcpy>
=======
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
 800189a:	220b      	movs	r2, #11
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f002 fe88 	bl	80045b4 <memcpy>
>>>>>>> develop
    /* Optional CRC validation */
    /* if (calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1) != packet->crc) {
         // handle CRC mismatch
       } */
}
<<<<<<< HEAD
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800174c:	f7ff ffcc 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480b      	ldr	r0, [pc, #44]	@ (8001780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001752:	490c      	ldr	r1, [pc, #48]	@ (8001784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001754:	4a0c      	ldr	r2, [pc, #48]	@ (8001788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001768:	4c09      	ldr	r4, [pc, #36]	@ (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f002 fd27 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177a:	f7fe fdd5 	bl	8000328 <main>
  bx lr
 800177e:	4770      	bx	lr
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001788:	08004278 	.word	0x08004278
  ldr r2, =_sbss
 800178c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001790:	20000364 	.word	0x20000364

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_Init+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_Init+0x28>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f923 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fd6c 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f93b 	bl	8001a5e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f903 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000006c 	.word	0x2000006c
 800181c:	20000074 	.word	0x20000074
 8001820:	20000070 	.word	0x20000070

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_IncTick+0x1c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_IncTick+0x20>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a03      	ldr	r2, [pc, #12]	@ (8001844 <HAL_IncTick+0x20>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000074 	.word	0x20000074
 8001844:	20000360 	.word	0x20000360

08001848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b02      	ldr	r3, [pc, #8]	@ (8001858 <HAL_GetTick+0x10>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000360 	.word	0x20000360

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4906      	ldr	r1, [pc, #24]	@ (80018f4 <__NVIC_EnableIRQ+0x34>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	@ (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	@ 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff90 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff2d 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff42 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff90 	bl	800194c <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5f 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff35 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d008      	beq.n	8001aa0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2204      	movs	r2, #4
 8001a92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e020      	b.n	8001ae2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 020e 	bic.w	r2, r2, #14
 8001aae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ace:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d005      	beq.n	8001b10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2204      	movs	r2, #4
 8001b08:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	e051      	b.n	8001bb4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 020e 	bic.w	r2, r2, #14
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_DMA_Abort_IT+0xd4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d029      	beq.n	8001b8e <HAL_DMA_Abort_IT+0xa2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a21      	ldr	r2, [pc, #132]	@ (8001bc4 <HAL_DMA_Abort_IT+0xd8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d022      	beq.n	8001b8a <HAL_DMA_Abort_IT+0x9e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc8 <HAL_DMA_Abort_IT+0xdc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d01a      	beq.n	8001b84 <HAL_DMA_Abort_IT+0x98>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	@ (8001bcc <HAL_DMA_Abort_IT+0xe0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d012      	beq.n	8001b7e <HAL_DMA_Abort_IT+0x92>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd0 <HAL_DMA_Abort_IT+0xe4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00a      	beq.n	8001b78 <HAL_DMA_Abort_IT+0x8c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd4 <HAL_DMA_Abort_IT+0xe8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d102      	bne.n	8001b72 <HAL_DMA_Abort_IT+0x86>
 8001b6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b70:	e00e      	b.n	8001b90 <HAL_DMA_Abort_IT+0xa4>
 8001b72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b76:	e00b      	b.n	8001b90 <HAL_DMA_Abort_IT+0xa4>
 8001b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b7c:	e008      	b.n	8001b90 <HAL_DMA_Abort_IT+0xa4>
 8001b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b82:	e005      	b.n	8001b90 <HAL_DMA_Abort_IT+0xa4>
 8001b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b88:	e002      	b.n	8001b90 <HAL_DMA_Abort_IT+0xa4>
 8001b8a:	2310      	movs	r3, #16
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_Abort_IT+0xa4>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <HAL_DMA_Abort_IT+0xec>)
 8001b92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
    } 
  }
  return status;
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020008 	.word	0x40020008
 8001bc4:	4002001c 	.word	0x4002001c
 8001bc8:	40020030 	.word	0x40020030
 8001bcc:	40020044 	.word	0x40020044
 8001bd0:	40020058 	.word	0x40020058
 8001bd4:	4002006c 	.word	0x4002006c
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b08b      	sub	sp, #44	@ 0x2c
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	e169      	b.n	8001ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8158 	bne.w	8001ebe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a9a      	ldr	r2, [pc, #616]	@ (8001e7c <HAL_GPIO_Init+0x2a0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d05e      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c18:	4a98      	ldr	r2, [pc, #608]	@ (8001e7c <HAL_GPIO_Init+0x2a0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d875      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c1e:	4a98      	ldr	r2, [pc, #608]	@ (8001e80 <HAL_GPIO_Init+0x2a4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d058      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c24:	4a96      	ldr	r2, [pc, #600]	@ (8001e80 <HAL_GPIO_Init+0x2a4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d86f      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c2a:	4a96      	ldr	r2, [pc, #600]	@ (8001e84 <HAL_GPIO_Init+0x2a8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d052      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c30:	4a94      	ldr	r2, [pc, #592]	@ (8001e84 <HAL_GPIO_Init+0x2a8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d869      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c36:	4a94      	ldr	r2, [pc, #592]	@ (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d04c      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a92      	ldr	r2, [pc, #584]	@ (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d863      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c42:	4a92      	ldr	r2, [pc, #584]	@ (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d046      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c48:	4a90      	ldr	r2, [pc, #576]	@ (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d85d      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c4e:	2b12      	cmp	r3, #18
 8001c50:	d82a      	bhi.n	8001ca8 <HAL_GPIO_Init+0xcc>
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d859      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c56:	a201      	add	r2, pc, #4	@ (adr r2, 8001c5c <HAL_GPIO_Init+0x80>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cb1 	.word	0x08001cb1
 8001c64:	08001cc3 	.word	0x08001cc3
 8001c68:	08001d05 	.word	0x08001d05
 8001c6c:	08001d0b 	.word	0x08001d0b
 8001c70:	08001d0b 	.word	0x08001d0b
 8001c74:	08001d0b 	.word	0x08001d0b
 8001c78:	08001d0b 	.word	0x08001d0b
 8001c7c:	08001d0b 	.word	0x08001d0b
 8001c80:	08001d0b 	.word	0x08001d0b
 8001c84:	08001d0b 	.word	0x08001d0b
 8001c88:	08001d0b 	.word	0x08001d0b
 8001c8c:	08001d0b 	.word	0x08001d0b
 8001c90:	08001d0b 	.word	0x08001d0b
 8001c94:	08001d0b 	.word	0x08001d0b
 8001c98:	08001d0b 	.word	0x08001d0b
 8001c9c:	08001d0b 	.word	0x08001d0b
 8001ca0:	08001cb9 	.word	0x08001cb9
 8001ca4:	08001ccd 	.word	0x08001ccd
 8001ca8:	4a79      	ldr	r2, [pc, #484]	@ (8001e90 <HAL_GPIO_Init+0x2b4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cae:	e02c      	b.n	8001d0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e029      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e024      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	623b      	str	r3, [r7, #32]
          break;
 8001cca:	e01f      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e01a      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	623b      	str	r3, [r7, #32]
          break;
 8001ce2:	e013      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cec:	2308      	movs	r3, #8
 8001cee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	611a      	str	r2, [r3, #16]
          break;
 8001cf6:	e009      	b.n	8001d0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	615a      	str	r2, [r3, #20]
          break;
 8001d02:	e003      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          break;
 8001d0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2bff      	cmp	r3, #255	@ 0xff
 8001d10:	d801      	bhi.n	8001d16 <HAL_GPIO_Init+0x13a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	e001      	b.n	8001d1a <HAL_GPIO_Init+0x13e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	@ 0xff
 8001d20:	d802      	bhi.n	8001d28 <HAL_GPIO_Init+0x14c>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	e002      	b.n	8001d2e <HAL_GPIO_Init+0x152>
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	3b08      	subs	r3, #8
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	210f      	movs	r1, #15
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	6a39      	ldr	r1, [r7, #32]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80b1 	beq.w	8001ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a4c      	ldr	r2, [pc, #304]	@ (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b4a      	ldr	r3, [pc, #296]	@ (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d74:	4a48      	ldr	r2, [pc, #288]	@ (8001e98 <HAL_GPIO_Init+0x2bc>)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a40      	ldr	r2, [pc, #256]	@ (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_GPIO_Init+0x1ec>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea0 <HAL_GPIO_Init+0x2c4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00d      	beq.n	8001dc4 <HAL_GPIO_Init+0x1e8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea4 <HAL_GPIO_Init+0x2c8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <HAL_GPIO_Init+0x1e4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ea8 <HAL_GPIO_Init+0x2cc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d101      	bne.n	8001dbc <HAL_GPIO_Init+0x1e0>
 8001db8:	2303      	movs	r3, #3
 8001dba:	e006      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	e004      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e002      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_GPIO_Init+0x1ee>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dcc:	f002 0203 	and.w	r2, r2, #3
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dda:	492f      	ldr	r1, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x2bc>)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df4:	4b2d      	ldr	r3, [pc, #180]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	492c      	ldr	r1, [pc, #176]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e02:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4928      	ldr	r1, [pc, #160]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4922      	ldr	r1, [pc, #136]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60cb      	str	r3, [r1, #12]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	491e      	ldr	r1, [pc, #120]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4918      	ldr	r1, [pc, #96]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4914      	ldr	r1, [pc, #80]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d021      	beq.n	8001eb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	490e      	ldr	r1, [pc, #56]	@ (8001eac <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e021      	b.n	8001ebe <HAL_GPIO_Init+0x2e2>
 8001e7a:	bf00      	nop
 8001e7c:	10320000 	.word	0x10320000
 8001e80:	10310000 	.word	0x10310000
 8001e84:	10220000 	.word	0x10220000
 8001e88:	10210000 	.word	0x10210000
 8001e8c:	10120000 	.word	0x10120000
 8001e90:	10110000 	.word	0x10110000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40010c00 	.word	0x40010c00
 8001ea4:	40011000 	.word	0x40011000
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	4909      	ldr	r1, [pc, #36]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f47f ae8e 	bne.w	8001bf0 <HAL_GPIO_Init+0x14>
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	372c      	adds	r7, #44	@ 0x2c
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2a:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f806 	bl	8001f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e272      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8087 	beq.w	8002086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f78:	4b92      	ldr	r3, [pc, #584]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d00c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f84:	4b8f      	ldr	r3, [pc, #572]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x5e>
 8001f90:	4b8c      	ldr	r3, [pc, #560]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9e:	4b89      	ldr	r3, [pc, #548]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d06c      	beq.n	8002084 <HAL_RCC_OscConfig+0x12c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d168      	bne.n	8002084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e24c      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x76>
 8001fc0:	4b80      	ldr	r3, [pc, #512]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a7f      	ldr	r2, [pc, #508]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e02e      	b.n	800202c <HAL_RCC_OscConfig+0xd4>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x98>
 8001fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7a      	ldr	r2, [pc, #488]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b78      	ldr	r3, [pc, #480]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a77      	ldr	r2, [pc, #476]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0xd4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0xbc>
 8001ffa:	4b72      	ldr	r3, [pc, #456]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a71      	ldr	r2, [pc, #452]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b6f      	ldr	r3, [pc, #444]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6e      	ldr	r2, [pc, #440]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xd4>
 8002014:	4b6b      	ldr	r3, [pc, #428]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6a      	ldr	r2, [pc, #424]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b68      	ldr	r3, [pc, #416]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a67      	ldr	r2, [pc, #412]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800202a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fc08 	bl	8001848 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fc04 	bl	8001848 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	@ 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e200      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b5d      	ldr	r3, [pc, #372]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xe4>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fbf4 	bl	8001848 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fbf0 	bl	8001848 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	@ 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1ec      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x10c>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d063      	beq.n	800215a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002092:	4b4c      	ldr	r3, [pc, #304]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800209e:	4b49      	ldr	r3, [pc, #292]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x18c>
 80020aa:	4b46      	ldr	r3, [pc, #280]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b43      	ldr	r3, [pc, #268]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x176>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1c0      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b3d      	ldr	r3, [pc, #244]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4939      	ldr	r1, [pc, #228]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e03a      	b.n	800215a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <HAL_RCC_OscConfig+0x270>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff fba9 	bl	8001848 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fa:	f7ff fba5 	bl	8001848 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1a1      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4927      	ldr	r1, [pc, #156]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fb88 	bl	8001848 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff fb84 	bl	8001848 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e180      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03a      	beq.n	80021dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d019      	beq.n	80021a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <HAL_RCC_OscConfig+0x274>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7ff fb68 	bl	8001848 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff fb64 	bl	8001848 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e160      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f000 face 	bl	800273c <RCC_Delay>
 80021a0:	e01c      	b.n	80021dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_RCC_OscConfig+0x274>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff fb4e 	bl	8001848 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ae:	e00f      	b.n	80021d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff fb4a 	bl	8001848 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d908      	bls.n	80021d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e146      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	42420000 	.word	0x42420000
 80021cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	4b92      	ldr	r3, [pc, #584]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e9      	bne.n	80021b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a6 	beq.w	8002336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	4b8b      	ldr	r3, [pc, #556]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b88      	ldr	r3, [pc, #544]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a87      	ldr	r2, [pc, #540]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b85      	ldr	r3, [pc, #532]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	4b82      	ldr	r3, [pc, #520]	@ (8002420 <HAL_RCC_OscConfig+0x4c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d118      	bne.n	8002254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <HAL_RCC_OscConfig+0x4c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7e      	ldr	r2, [pc, #504]	@ (8002420 <HAL_RCC_OscConfig+0x4c8>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7ff fb0b 	bl	8001848 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7ff fb07 	bl	8001848 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	@ 0x64
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e103      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	4b75      	ldr	r3, [pc, #468]	@ (8002420 <HAL_RCC_OscConfig+0x4c8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x312>
 800225c:	4b6f      	ldr	r3, [pc, #444]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a6e      	ldr	r2, [pc, #440]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	e02d      	b.n	80022c6 <HAL_RCC_OscConfig+0x36e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x334>
 8002272:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a69      	ldr	r2, [pc, #420]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6213      	str	r3, [r2, #32]
 800227e:	4b67      	ldr	r3, [pc, #412]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a66      	ldr	r2, [pc, #408]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	e01c      	b.n	80022c6 <HAL_RCC_OscConfig+0x36e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x356>
 8002294:	4b61      	ldr	r3, [pc, #388]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a60      	ldr	r2, [pc, #384]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	4b5e      	ldr	r3, [pc, #376]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a5d      	ldr	r2, [pc, #372]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	e00b      	b.n	80022c6 <HAL_RCC_OscConfig+0x36e>
 80022ae:	4b5b      	ldr	r3, [pc, #364]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a5a      	ldr	r2, [pc, #360]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	4b58      	ldr	r3, [pc, #352]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a57      	ldr	r2, [pc, #348]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d015      	beq.n	80022fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fabb 	bl	8001848 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7ff fab7 	bl	8001848 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0b1      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ec:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ee      	beq.n	80022d6 <HAL_RCC_OscConfig+0x37e>
 80022f8:	e014      	b.n	8002324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff faa5 	bl	8001848 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff faa1 	bl	8001848 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e09b      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	4b40      	ldr	r3, [pc, #256]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ee      	bne.n	8002302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a3b      	ldr	r2, [pc, #236]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8087 	beq.w	800244e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	d061      	beq.n	8002410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d146      	bne.n	80023e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b33      	ldr	r3, [pc, #204]	@ (8002424 <HAL_RCC_OscConfig+0x4cc>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff fa75 	bl	8001848 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff fa71 	bl	8001848 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e06d      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002388:	d108      	bne.n	800239c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4921      	ldr	r1, [pc, #132]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a19      	ldr	r1, [r3, #32]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	430b      	orrs	r3, r1
 80023ae:	491b      	ldr	r1, [pc, #108]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_RCC_OscConfig+0x4cc>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fa45 	bl	8001848 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff fa41 	bl	8001848 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e03d      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x46a>
 80023e0:	e035      	b.n	800244e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_RCC_OscConfig+0x4cc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fa2e 	bl	8001848 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff fa2a 	bl	8001848 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e026      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCC_OscConfig+0x4c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x498>
 800240e:	e01e      	b.n	800244e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e019      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_RCC_OscConfig+0x500>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d0      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b6a      	ldr	r3, [pc, #424]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d910      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b67      	ldr	r3, [pc, #412]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4965      	ldr	r1, [pc, #404]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a58      	ldr	r2, [pc, #352]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4b53      	ldr	r3, [pc, #332]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a52      	ldr	r2, [pc, #328]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b50      	ldr	r3, [pc, #320]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494d      	ldr	r1, [pc, #308]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d040      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e073      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3d      	ldr	r3, [pc, #244]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06b      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4936      	ldr	r1, [pc, #216]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7ff f97c 	bl	8001848 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7ff f978 	bl	8001848 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e053      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2d      	ldr	r3, [pc, #180]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d210      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4922      	ldr	r1, [pc, #136]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	@ (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4916      	ldr	r1, [pc, #88]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490e      	ldr	r1, [pc, #56]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490a      	ldr	r1, [pc, #40]	@ (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	@ (8002628 <HAL_RCC_ClockConfig+0x1cc>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_RCC_ClockConfig+0x1d0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f8da 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40022000 	.word	0x40022000
 8002620:	40021000 	.word	0x40021000
 8002624:	08004244 	.word	0x08004244
 8002628:	2000006c 	.word	0x2000006c
 800262c:	20000070 	.word	0x20000070

08002630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800264a:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b04      	cmp	r3, #4
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x30>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x36>
 800265e:	e027      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002662:	613b      	str	r3, [r7, #16]
      break;
 8002664:	e027      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0c9b      	lsrs	r3, r3, #18
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002670:	5cd3      	ldrb	r3, [r2, r3]
 8002672:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0c5b      	lsrs	r3, r3, #17
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	4a11      	ldr	r2, [pc, #68]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a0d      	ldr	r2, [pc, #52]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e004      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026a4:	fb02 f303 	mul.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	613b      	str	r3, [r7, #16]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026b2:	613b      	str	r3, [r7, #16]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	693b      	ldr	r3, [r7, #16]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	007a1200 	.word	0x007a1200
 80026cc:	0800425c 	.word	0x0800425c
 80026d0:	0800426c 	.word	0x0800426c
 80026d4:	003d0900 	.word	0x003d0900

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b02      	ldr	r3, [pc, #8]	@ (80026e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	2000006c 	.word	0x2000006c

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff2 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08004254 	.word	0x08004254

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffde 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0adb      	lsrs	r3, r3, #11
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	08004254 	.word	0x08004254

0800273c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002744:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <RCC_Delay+0x34>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <RCC_Delay+0x38>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002758:	bf00      	nop
  }
  while (Delay --);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	60fa      	str	r2, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f9      	bne.n	8002758 <RCC_Delay+0x1c>
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	2000006c 	.word	0x2000006c
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fda8 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 fc10 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e03a      	b.n	80028a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a18      	ldr	r2, [pc, #96]	@ (80028b0 <HAL_TIM_Base_Start_IT+0x98>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285a:	d009      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x58>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a13      	ldr	r2, [pc, #76]	@ (80028b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d010      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	e007      	b.n	80028a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e041      	b.n	8002952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fd38 	bl	8001358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fb6e 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_TIM_PWM_Start+0x24>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e022      	b.n	80029c6 <HAL_TIM_PWM_Start+0x6a>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b04      	cmp	r3, #4
 8002984:	d109      	bne.n	800299a <HAL_TIM_PWM_Start+0x3e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e015      	b.n	80029c6 <HAL_TIM_PWM_Start+0x6a>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d109      	bne.n	80029b4 <HAL_TIM_PWM_Start+0x58>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e008      	b.n	80029c6 <HAL_TIM_PWM_Start+0x6a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e05e      	b.n	8002a8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <HAL_TIM_PWM_Start+0x82>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029dc:	e013      	b.n	8002a06 <HAL_TIM_PWM_Start+0xaa>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d104      	bne.n	80029ee <HAL_TIM_PWM_Start+0x92>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ec:	e00b      	b.n	8002a06 <HAL_TIM_PWM_Start+0xaa>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_PWM_Start+0xa2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029fc:	e003      	b.n	8002a06 <HAL_TIM_PWM_Start+0xaa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fd70 	bl	80034f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_TIM_PWM_Start+0x138>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d107      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a18      	ldr	r2, [pc, #96]	@ (8002a94 <HAL_TIM_PWM_Start+0x138>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_TIM_PWM_Start+0xfa>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a40:	d009      	beq.n	8002a56 <HAL_TIM_PWM_Start+0xfa>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <HAL_TIM_PWM_Start+0x13c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_TIM_PWM_Start+0xfa>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <HAL_TIM_PWM_Start+0x140>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d111      	bne.n	8002a7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b06      	cmp	r3, #6
 8002a66:	d010      	beq.n	8002a8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	e007      	b.n	8002a8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800

08002aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0202 	mvn.w	r2, #2
 8002ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa5a 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa4d 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fa5c 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d020      	beq.n	8002b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01b      	beq.n	8002b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0204 	mvn.w	r2, #4
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa34 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fa27 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fa36 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d020      	beq.n	8002b9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01b      	beq.n	8002b9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fa0e 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa01 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa10 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d020      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f9e8 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f9db 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f9ea 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0201 	mvn.w	r2, #1
 8002c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fe f956 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00c      	beq.n	8002c30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fd3e 	bl	80036ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00c      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9ba 	bl	8002fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0220 	mvn.w	r2, #32
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fd11 	bl	800369a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0ae      	b.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	f200 809f 	bhi.w	8002dec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002ded 	.word	0x08002ded
 8002cbc:	08002ded 	.word	0x08002ded
 8002cc0:	08002ded 	.word	0x08002ded
 8002cc4:	08002d29 	.word	0x08002d29
 8002cc8:	08002ded 	.word	0x08002ded
 8002ccc:	08002ded 	.word	0x08002ded
 8002cd0:	08002ded 	.word	0x08002ded
 8002cd4:	08002d6b 	.word	0x08002d6b
 8002cd8:	08002ded 	.word	0x08002ded
 8002cdc:	08002ded 	.word	0x08002ded
 8002ce0:	08002ded 	.word	0x08002ded
 8002ce4:	08002dab 	.word	0x08002dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f9e2 	bl	80030b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0208 	orr.w	r2, r2, #8
 8002d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0204 	bic.w	r2, r2, #4
 8002d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6999      	ldr	r1, [r3, #24]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	619a      	str	r2, [r3, #24]
      break;
 8002d26:	e064      	b.n	8002df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fa28 	bl	8003184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6999      	ldr	r1, [r3, #24]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	021a      	lsls	r2, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]
      break;
 8002d68:	e043      	b.n	8002df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fa71 	bl	8003258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0208 	orr.w	r2, r2, #8
 8002d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0204 	bic.w	r2, r2, #4
 8002d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69d9      	ldr	r1, [r3, #28]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
      break;
 8002da8:	e023      	b.n	8002df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fabb 	bl	800332c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69d9      	ldr	r1, [r3, #28]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	021a      	lsls	r2, r3, #8
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	61da      	str	r2, [r3, #28]
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
      break;
 8002df0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIM_ConfigClockSource+0x1c>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e0b4      	b.n	8002f8a <HAL_TIM_ConfigClockSource+0x186>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e58:	d03e      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5e:	f200 8087 	bhi.w	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e66:	f000 8086 	beq.w	8002f76 <HAL_TIM_ConfigClockSource+0x172>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6e:	d87f      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b70      	cmp	r3, #112	@ 0x70
 8002e72:	d01a      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0xa6>
 8002e74:	2b70      	cmp	r3, #112	@ 0x70
 8002e76:	d87b      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b60      	cmp	r3, #96	@ 0x60
 8002e7a:	d050      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x11a>
 8002e7c:	2b60      	cmp	r3, #96	@ 0x60
 8002e7e:	d877      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b50      	cmp	r3, #80	@ 0x50
 8002e82:	d03c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0xfa>
 8002e84:	2b50      	cmp	r3, #80	@ 0x50
 8002e86:	d873      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d058      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x13a>
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d86f      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b30      	cmp	r3, #48	@ 0x30
 8002e92:	d064      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d86b      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d060      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d867      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05c      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d05a      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	e062      	b.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	f000 fafc 	bl	80034b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
      break;
 8002ed6:	e04f      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	f000 fae5 	bl	80034b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002efa:	609a      	str	r2, [r3, #8]
      break;
 8002efc:	e03c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 fa5c 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2150      	movs	r1, #80	@ 0x50
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fab3 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e02c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f000 fa7a 	bl	8003424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2160      	movs	r1, #96	@ 0x60
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 faa3 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002f3c:	e01c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f000 fa3c 	bl	80033c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2140      	movs	r1, #64	@ 0x40
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa93 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002f5c:	e00c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f000 fa8a 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 8002f6e:	e003      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e000      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
	...

08002fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a2f      	ldr	r2, [pc, #188]	@ (80030ac <TIM_Base_SetConfig+0xd0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00b      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffa:	d007      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80030b0 <TIM_Base_SetConfig+0xd4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a2b      	ldr	r2, [pc, #172]	@ (80030b4 <TIM_Base_SetConfig+0xd8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a22      	ldr	r2, [pc, #136]	@ (80030ac <TIM_Base_SetConfig+0xd0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1f      	ldr	r2, [pc, #124]	@ (80030b0 <TIM_Base_SetConfig+0xd4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <TIM_Base_SetConfig+0xd8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <TIM_Base_SetConfig+0xd0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800

080030b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 0201 	bic.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 0302 	bic.w	r3, r3, #2
 8003100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1c      	ldr	r2, [pc, #112]	@ (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10c      	bne.n	800312e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0308 	bic.w	r3, r3, #8
 800311a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a13      	ldr	r2, [pc, #76]	@ (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00

08003184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f023 0210 	bic.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0320 	bic.w	r3, r3, #32
 80031ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1d      	ldr	r2, [pc, #116]	@ (8003254 <TIM_OC2_SetConfig+0xd0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10d      	bne.n	8003200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a14      	ldr	r2, [pc, #80]	@ (8003254 <TIM_OC2_SetConfig+0xd0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d113      	bne.n	8003230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800320e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00

08003258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <TIM_OC3_SetConfig+0xd0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10d      	bne.n	80032d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a14      	ldr	r2, [pc, #80]	@ (8003328 <TIM_OC3_SetConfig+0xd0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40012c00 	.word	0x40012c00

0800332c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	031b      	lsls	r3, r3, #12
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0f      	ldr	r2, [pc, #60]	@ (80033c4 <TIM_OC4_SetConfig+0x98>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d109      	bne.n	80033a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00

080033c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 030a 	bic.w	r3, r3, #10
 8003404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0210 	bic.w	r2, r3, #16
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800344e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	031b      	lsls	r3, r3, #12
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	f043 0307 	orr.w	r3, r3, #7
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b087      	sub	sp, #28
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	431a      	orrs	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4313      	orrs	r3, r2
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	609a      	str	r2, [r3, #8]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e046      	b.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a0:	d009      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a12      	ldr	r2, [pc, #72]	@ (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a10      	ldr	r2, [pc, #64]	@ (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10c      	bne.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800

080035f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003610:	2302      	movs	r3, #2
 8003612:	e03d      	b.n	8003690 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e042      	b.n	8003756 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7fd ff2b 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2224      	movs	r2, #36	@ 0x24
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fcca 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003716:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003726:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003736:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	4613      	mov	r3, r2
 800376a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	d112      	bne.n	800379e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Receive_IT+0x26>
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e00b      	b.n	80037a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	461a      	mov	r2, r3
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 faad 	bl	8003cf4 <UART_Start_Receive_IT>
 800379a:	4603      	mov	r3, r0
 800379c:	e000      	b.n	80037a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b0ba      	sub	sp, #232	@ 0xe8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_UART_IRQHandler+0x66>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fb8a 	bl	8003f20 <UART_Receive_IT>
      return;
 800380c:	e25b      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800380e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80de 	beq.w	80039d4 <HAL_UART_IRQHandler+0x22c>
 8003818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003828:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80d1 	beq.w	80039d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_UART_IRQHandler+0xae>
 800383e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_UART_IRQHandler+0xd2>
 8003862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_UART_IRQHandler+0xf6>
 8003886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d011      	beq.n	80038ce <HAL_UART_IRQHandler+0x126>
 80038aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	f043 0208 	orr.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 81f2 	beq.w	8003cbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_UART_IRQHandler+0x14e>
 80038e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fb15 	bl	8003f20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_UART_IRQHandler+0x17a>
 800391a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d04f      	beq.n	80039c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa1f 	bl	8003d66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d041      	beq.n	80039ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800394c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003954:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003962:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800396e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800397a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1d9      	bne.n	8003936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d013      	beq.n	80039b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b88 <HAL_UART_IRQHandler+0x3e0>)
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe f8a8 	bl	8001aec <HAL_DMA_Abort_IT>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039ac:	4610      	mov	r0, r2
 80039ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e00e      	b.n	80039d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd f86c 	bl	8000a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e00a      	b.n	80039d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd f868 	bl	8000a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e006      	b.n	80039d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd f864 	bl	8000a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039ce:	e175      	b.n	8003cbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	bf00      	nop
    return;
 80039d2:	e173      	b.n	8003cbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	2b01      	cmp	r3, #1
 80039da:	f040 814f 	bne.w	8003c7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8148 	beq.w	8003c7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8141 	beq.w	8003c7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80b6 	beq.w	8003b8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8145 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	f080 813e 	bcs.w	8003cc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	f000 8088 	beq.w	8003b68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a84:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1d9      	bne.n	8003a58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ab4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ac8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003acc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ad0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e1      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003af6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b04:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e3      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b38:	f023 0310 	bic.w	r3, r3, #16
 8003b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd ff87 	bl	8001a76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8ad 	bl	8003cde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b84:	e09c      	b.n	8003cc0 <HAL_UART_IRQHandler+0x518>
 8003b86:	bf00      	nop
 8003b88:	08003e2b 	.word	0x08003e2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 808e 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8089 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e3      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e3      	bne.n	8003bea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0310 	bic.w	r3, r3, #16
 8003c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c54:	61fa      	str	r2, [r7, #28]
 8003c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	69b9      	ldr	r1, [r7, #24]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	617b      	str	r3, [r7, #20]
   return(result);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e3      	bne.n	8003c30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f832 	bl	8003cde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c7a:	e023      	b.n	8003cc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_UART_IRQHandler+0x4f4>
 8003c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f8dc 	bl	8003e52 <UART_Transmit_IT>
    return;
 8003c9a:	e014      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f91b 	bl	8003ef0 <UART_EndTransmit_IT>
    return;
 8003cba:	e004      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003cbc:	bf00      	nop
 8003cbe:	e002      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cc4:	bf00      	nop
  }
}
 8003cc6:	37e8      	adds	r7, #232	@ 0xe8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2222      	movs	r2, #34	@ 0x22
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0220 	orr.w	r2, r2, #32
 8003d58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr

08003d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b095      	sub	sp, #84	@ 0x54
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e5      	bne.n	8003da2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d119      	bne.n	8003e12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0310 	bic.w	r3, r3, #16
 8003df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfe:	61ba      	str	r2, [r7, #24]
 8003e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6979      	ldr	r1, [r7, #20]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e20:	bf00      	nop
 8003e22:	3754      	adds	r7, #84	@ 0x54
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7fc fe23 	bl	8000a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b21      	cmp	r3, #33	@ 0x21
 8003e64:	d13e      	bne.n	8003ee4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6e:	d114      	bne.n	8003e9a <UART_Transmit_IT+0x48>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d110      	bne.n	8003e9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]
 8003e98:	e008      	b.n	8003eac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6211      	str	r1, [r2, #32]
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ece:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ede:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fedb 	bl	8003ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08c      	sub	sp, #48	@ 0x30
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b22      	cmp	r3, #34	@ 0x22
 8003f32:	f040 80ae 	bne.w	8004092 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	d117      	bne.n	8003f70 <UART_Receive_IT+0x50>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f6e:	e026      	b.n	8003fbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d007      	beq.n	8003f94 <UART_Receive_IT+0x74>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <UART_Receive_IT+0x82>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	e008      	b.n	8003fb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d15d      	bne.n	800408e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0220 	bic.w	r2, r2, #32
 8003fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d135      	bne.n	8004084 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f023 0310 	bic.w	r3, r3, #16
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	623a      	str	r2, [r7, #32]
 8004040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	69f9      	ldr	r1, [r7, #28]
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	61bb      	str	r3, [r7, #24]
   return(result);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b10      	cmp	r3, #16
 800405e:	d10a      	bne.n	8004076 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fe2e 	bl	8003cde <HAL_UARTEx_RxEventCallback>
 8004082:	e002      	b.n	800408a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fc fcad 	bl	80009e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e002      	b.n	8004094 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3730      	adds	r7, #48	@ 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040d6:	f023 030c 	bic.w	r3, r3, #12
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2c      	ldr	r2, [pc, #176]	@ (80041b0 <UART_SetConfig+0x114>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d103      	bne.n	800410c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004104:	f7fe fb06 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	e002      	b.n	8004112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800410c:	f7fe faee 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8004110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009a      	lsls	r2, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	4a22      	ldr	r2, [pc, #136]	@ (80041b4 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	0119      	lsls	r1, r3, #4
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f2f3 	udiv	r2, r2, r3
 8004148:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <UART_SetConfig+0x118>)
 800414a:	fba3 0302 	umull	r0, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2064      	movs	r0, #100	@ 0x64
 8004152:	fb00 f303 	mul.w	r3, r0, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	@ 0x32
 800415c:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <UART_SetConfig+0x118>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004168:	4419      	add	r1, r3
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <UART_SetConfig+0x118>)
 8004182:	fba3 0302 	umull	r0, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2064      	movs	r0, #100	@ 0x64
 800418a:	fb00 f303 	mul.w	r3, r0, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	@ 0x32
 8004194:	4a07      	ldr	r2, [pc, #28]	@ (80041b4 <UART_SetConfig+0x118>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	440a      	add	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40013800 	.word	0x40013800
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <memset>:
 80041b8:	4603      	mov	r3, r0
 80041ba:	4402      	add	r2, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	f803 1b01 	strb.w	r1, [r3], #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	2600      	movs	r6, #0
 80041cc:	4d0c      	ldr	r5, [pc, #48]	@ (8004200 <__libc_init_array+0x38>)
 80041ce:	4c0d      	ldr	r4, [pc, #52]	@ (8004204 <__libc_init_array+0x3c>)
 80041d0:	1b64      	subs	r4, r4, r5
 80041d2:	10a4      	asrs	r4, r4, #2
 80041d4:	42a6      	cmp	r6, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	f000 f828 	bl	800422c <_init>
 80041dc:	2600      	movs	r6, #0
 80041de:	4d0a      	ldr	r5, [pc, #40]	@ (8004208 <__libc_init_array+0x40>)
 80041e0:	4c0a      	ldr	r4, [pc, #40]	@ (800420c <__libc_init_array+0x44>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	42a6      	cmp	r6, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f0:	4798      	blx	r3
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fa:	4798      	blx	r3
 80041fc:	3601      	adds	r6, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08004270 	.word	0x08004270
 8004204:	08004270 	.word	0x08004270
 8004208:	08004270 	.word	0x08004270
 800420c:	08004274 	.word	0x08004274

08004210 <memcpy>:
 8004210:	440a      	add	r2, r1
 8004212:	4291      	cmp	r1, r2
 8004214:	f100 33ff 	add.w	r3, r0, #4294967295
 8004218:	d100      	bne.n	800421c <memcpy+0xc>
 800421a:	4770      	bx	lr
 800421c:	b510      	push	{r4, lr}
 800421e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004222:	4291      	cmp	r1, r2
 8004224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004228:	d1f9      	bne.n	800421e <memcpy+0xe>
 800422a:	bd10      	pop	{r4, pc}

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
=======
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <Reset_Handler>:
 80018ac:	f7ff ffcc 	bl	8001848 <SystemInit>
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <LoopFillZerobss+0xe>)
 80018b2:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x12>)
 80018b4:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <LoopFillZerobss+0x16>)
 80018b6:	2300      	movs	r3, #0
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:
 80018ba:	58d4      	ldr	r4, [r2, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:
 80018c0:	18c4      	adds	r4, r0, r3
 80018c2:	428c      	cmp	r4, r1
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <LoopFillZerobss+0x1a>)
 80018c8:	4c09      	ldr	r4, [pc, #36]	@ (80018f0 <LoopFillZerobss+0x1e>)
 80018ca:	2300      	movs	r3, #0
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:
 80018d2:	42a2      	cmp	r2, r4
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>
 80018d6:	f002 fe47 	bl	8004568 <__libc_init_array>
 80018da:	f7fe fd25 	bl	8000328 <main>
 80018de:	4770      	bx	lr
 80018e0:	20000000 	.word	0x20000000
 80018e4:	200000c4 	.word	0x200000c4
 80018e8:	08004fb4 	.word	0x08004fb4
 80018ec:	200000c4 	.word	0x200000c4
 80018f0:	200004fc 	.word	0x200004fc

080018f4 <ADC1_2_IRQHandler>:
 80018f4:	e7fe      	b.n	80018f4 <ADC1_2_IRQHandler>
	...

080018f8 <HAL_Init>:
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_Init+0x28>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <HAL_Init+0x28>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f923 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>
 8001914:	f7ff fd36 	bl	8001384 <HAL_MspInit>
 8001918:	2300      	movs	r3, #0
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_InitTick>:
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f93b 	bl	8001bbe <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 f903 	bl	8001b6a <HAL_NVIC_SetPriority>
 8001964:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
 800196e:	2301      	movs	r3, #1
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000068 	.word	0x20000068
 800197c:	20000070 	.word	0x20000070
 8001980:	2000006c 	.word	0x2000006c

08001984 <HAL_IncTick>:
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x1c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_IncTick+0x20>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a03      	ldr	r2, [pc, #12]	@ (80019a4 <HAL_IncTick+0x20>)
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000070 	.word	0x20000070
 80019a4:	200003b0 	.word	0x200003b0

080019a8 <HAL_GetTick>:
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4b02      	ldr	r3, [pc, #8]	@ (80019b8 <HAL_GetTick+0x10>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	200003b0 	.word	0x200003b0

080019bc <__NVIC_SetPriorityGrouping>:
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4906      	ldr	r1, [pc, #24]	@ (8001a54 <__NVIC_EnableIRQ+0x34>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	@ (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	@ (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	@ 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
 8001b04:	4313      	orrs	r3, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	@ 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <SysTick_Config>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f7ff ff90 	bl	8001a58 <__NVIC_SetPriority>
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	2300      	movs	r3, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff2d 	bl	80019bc <__NVIC_SetPriorityGrouping>
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	f7ff ff42 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff90 	bl	8001aac <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5f 	bl	8001a58 <__NVIC_SetPriority>
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff35 	bl	8001a20 <__NVIC_EnableIRQ>
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort>:
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d008      	beq.n	8001c00 <HAL_DMA_Abort+0x2a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e020      	b.n	8001c42 <HAL_DMA_Abort+0x6c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020e 	bic.w	r2, r2, #14
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_DMA_Abort_IT>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d005      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x24>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2204      	movs	r2, #4
 8001c68:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e051      	b.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020e 	bic.w	r2, r2, #14
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a22      	ldr	r2, [pc, #136]	@ (8001d20 <HAL_DMA_Abort_IT+0xd4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d029      	beq.n	8001cee <HAL_DMA_Abort_IT+0xa2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	@ (8001d24 <HAL_DMA_Abort_IT+0xd8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_DMA_Abort_IT+0x9e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d28 <HAL_DMA_Abort_IT+0xdc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01a      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x98>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d2c <HAL_DMA_Abort_IT+0xe0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d012      	beq.n	8001cde <HAL_DMA_Abort_IT+0x92>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <HAL_DMA_Abort_IT+0xe4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_DMA_Abort_IT+0x8c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <HAL_DMA_Abort_IT+0xe8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d102      	bne.n	8001cd2 <HAL_DMA_Abort_IT+0x86>
 8001ccc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cd0:	e00e      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xa4>
 8001cd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cd6:	e00b      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xa4>
 8001cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cdc:	e008      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xa4>
 8001cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce2:	e005      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xa4>
 8001ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce8:	e002      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xa4>
 8001cea:	2310      	movs	r3, #16
 8001cec:	e000      	b.n	8001cf0 <HAL_DMA_Abort_IT+0xa4>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	4a11      	ldr	r2, [pc, #68]	@ (8001d38 <HAL_DMA_Abort_IT+0xec>)
 8001cf2:	6053      	str	r3, [r2, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2020 	strb.w	r2, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40020008 	.word	0x40020008
 8001d24:	4002001c 	.word	0x4002001c
 8001d28:	40020030 	.word	0x40020030
 8001d2c:	40020044 	.word	0x40020044
 8001d30:	40020058 	.word	0x40020058
 8001d34:	4002006c 	.word	0x4002006c
 8001d38:	40020000 	.word	0x40020000

08001d3c <HAL_GPIO_Init>:
 8001d3c:	b480      	push	{r7}
 8001d3e:	b08b      	sub	sp, #44	@ 0x2c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	e169      	b.n	8002024 <HAL_GPIO_Init+0x2e8>
 8001d50:	2201      	movs	r2, #1
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	f040 8158 	bne.w	800201e <HAL_GPIO_Init+0x2e2>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a9a      	ldr	r2, [pc, #616]	@ (8001fdc <HAL_GPIO_Init+0x2a0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d05e      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d78:	4a98      	ldr	r2, [pc, #608]	@ (8001fdc <HAL_GPIO_Init+0x2a0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d875      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001d7e:	4a98      	ldr	r2, [pc, #608]	@ (8001fe0 <HAL_GPIO_Init+0x2a4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d058      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d84:	4a96      	ldr	r2, [pc, #600]	@ (8001fe0 <HAL_GPIO_Init+0x2a4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d86f      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001d8a:	4a96      	ldr	r2, [pc, #600]	@ (8001fe4 <HAL_GPIO_Init+0x2a8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d052      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d90:	4a94      	ldr	r2, [pc, #592]	@ (8001fe4 <HAL_GPIO_Init+0x2a8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d869      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001d96:	4a94      	ldr	r2, [pc, #592]	@ (8001fe8 <HAL_GPIO_Init+0x2ac>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d04c      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d9c:	4a92      	ldr	r2, [pc, #584]	@ (8001fe8 <HAL_GPIO_Init+0x2ac>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d863      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001da2:	4a92      	ldr	r2, [pc, #584]	@ (8001fec <HAL_GPIO_Init+0x2b0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d046      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001da8:	4a90      	ldr	r2, [pc, #576]	@ (8001fec <HAL_GPIO_Init+0x2b0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d85d      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d82a      	bhi.n	8001e08 <HAL_GPIO_Init+0xcc>
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d859      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001db6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <HAL_GPIO_Init+0x80>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e11 	.word	0x08001e11
 8001dc4:	08001e23 	.word	0x08001e23
 8001dc8:	08001e65 	.word	0x08001e65
 8001dcc:	08001e6b 	.word	0x08001e6b
 8001dd0:	08001e6b 	.word	0x08001e6b
 8001dd4:	08001e6b 	.word	0x08001e6b
 8001dd8:	08001e6b 	.word	0x08001e6b
 8001ddc:	08001e6b 	.word	0x08001e6b
 8001de0:	08001e6b 	.word	0x08001e6b
 8001de4:	08001e6b 	.word	0x08001e6b
 8001de8:	08001e6b 	.word	0x08001e6b
 8001dec:	08001e6b 	.word	0x08001e6b
 8001df0:	08001e6b 	.word	0x08001e6b
 8001df4:	08001e6b 	.word	0x08001e6b
 8001df8:	08001e6b 	.word	0x08001e6b
 8001dfc:	08001e6b 	.word	0x08001e6b
 8001e00:	08001e19 	.word	0x08001e19
 8001e04:	08001e2d 	.word	0x08001e2d
 8001e08:	4a79      	ldr	r2, [pc, #484]	@ (8001ff0 <HAL_GPIO_Init+0x2b4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001e0e:	e02c      	b.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	623b      	str	r3, [r7, #32]
 8001e16:	e029      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	e024      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	3308      	adds	r3, #8
 8001e28:	623b      	str	r3, [r7, #32]
 8001e2a:	e01f      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	330c      	adds	r3, #12
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	e01a      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_GPIO_Init+0x108>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	623b      	str	r3, [r7, #32]
 8001e42:	e013      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_GPIO_Init+0x11c>
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	611a      	str	r2, [r3, #16]
 8001e56:	e009      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e58:	2308      	movs	r3, #8
 8001e5a:	623b      	str	r3, [r7, #32]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	e003      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x130>
 8001e6a:	bf00      	nop
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2bff      	cmp	r3, #255	@ 0xff
 8001e70:	d801      	bhi.n	8001e76 <HAL_GPIO_Init+0x13a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	e001      	b.n	8001e7a <HAL_GPIO_Init+0x13e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2bff      	cmp	r3, #255	@ 0xff
 8001e80:	d802      	bhi.n	8001e88 <HAL_GPIO_Init+0x14c>
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x152>
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	3b08      	subs	r3, #8
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	210f      	movs	r1, #15
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	6a39      	ldr	r1, [r7, #32]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80b1 	beq.w	800201e <HAL_GPIO_Init+0x2e2>
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4a48      	ldr	r2, [pc, #288]	@ (8001ff8 <HAL_GPIO_Init+0x2bc>)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	3302      	adds	r3, #2
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a40      	ldr	r2, [pc, #256]	@ (8001ffc <HAL_GPIO_Init+0x2c0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3f      	ldr	r2, [pc, #252]	@ (8002000 <HAL_GPIO_Init+0x2c4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00d      	beq.n	8001f24 <HAL_GPIO_Init+0x1e8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002004 <HAL_GPIO_Init+0x2c8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x1e4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3d      	ldr	r2, [pc, #244]	@ (8002008 <HAL_GPIO_Init+0x2cc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_GPIO_Init+0x1e0>
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	492f      	ldr	r1, [pc, #188]	@ (8001ff8 <HAL_GPIO_Init+0x2bc>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x226>
 8001f54:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	492c      	ldr	r1, [pc, #176]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x234>
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4928      	ldr	r1, [pc, #160]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x24e>
 8001f7c:	4b23      	ldr	r3, [pc, #140]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4922      	ldr	r1, [pc, #136]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x25c>
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	491e      	ldr	r1, [pc, #120]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x276>
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4918      	ldr	r1, [pc, #96]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x284>
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4914      	ldr	r1, [pc, #80]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d021      	beq.n	8002010 <HAL_GPIO_Init+0x2d4>
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	490e      	ldr	r1, [pc, #56]	@ (800200c <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e021      	b.n	800201e <HAL_GPIO_Init+0x2e2>
 8001fda:	bf00      	nop
 8001fdc:	10320000 	.word	0x10320000
 8001fe0:	10310000 	.word	0x10310000
 8001fe4:	10220000 	.word	0x10220000
 8001fe8:	10210000 	.word	0x10210000
 8001fec:	10120000 	.word	0x10120000
 8001ff0:	10110000 	.word	0x10110000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40010800 	.word	0x40010800
 8002000:	40010c00 	.word	0x40010c00
 8002004:	40011000 	.word	0x40011000
 8002008:	40011400 	.word	0x40011400
 800200c:	40010400 	.word	0x40010400
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_GPIO_Init+0x304>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	43db      	mvns	r3, r3
 8002018:	4909      	ldr	r1, [pc, #36]	@ (8002040 <HAL_GPIO_Init+0x304>)
 800201a:	4013      	ands	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	f47f ae8e 	bne.w	8001d50 <HAL_GPIO_Init+0x14>
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	372c      	adds	r7, #44	@ 0x2c
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_GPIO_WritePin>:
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_GPIO_EXTI_IRQHandler>:
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	6153      	str	r3, [r2, #20]
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f806 	bl	80020a4 <HAL_GPIO_EXTI_Callback>
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_EXTI_Callback>:
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_RCC_OscConfig>:
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e272      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8087 	beq.w	80021e6 <HAL_RCC_OscConfig+0x12e>
 80020d8:	4b92      	ldr	r3, [pc, #584]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00c      	beq.n	80020fe <HAL_RCC_OscConfig+0x46>
 80020e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d112      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
 80020f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
 80020fe:	4b89      	ldr	r3, [pc, #548]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d06c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x12c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d168      	bne.n	80021e4 <HAL_RCC_OscConfig+0x12c>
 8002112:	2301      	movs	r3, #1
 8002114:	e24c      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x76>
 8002120:	4b80      	ldr	r3, [pc, #512]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a7f      	ldr	r2, [pc, #508]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e02e      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b7b      	ldr	r3, [pc, #492]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7a      	ldr	r2, [pc, #488]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b78      	ldr	r3, [pc, #480]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a77      	ldr	r2, [pc, #476]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e01d      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0xbc>
 800215a:	4b72      	ldr	r3, [pc, #456]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a71      	ldr	r2, [pc, #452]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b6f      	ldr	r3, [pc, #444]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6e      	ldr	r2, [pc, #440]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0xd4>
 8002174:	4b6b      	ldr	r3, [pc, #428]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6a      	ldr	r2, [pc, #424]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b68      	ldr	r3, [pc, #416]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a67      	ldr	r2, [pc, #412]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0x104>
 8002194:	f7ff fc08 	bl	80019a8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xf6>
 800219c:	f7ff fc04 	bl	80019a8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xf6>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e200      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0xe4>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
 80021bc:	f7ff fbf4 	bl	80019a8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x11e>
 80021c4:	f7ff fbf0 	bl	80019a8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	@ 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x11e>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1ec      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80021d6:	4b53      	ldr	r3, [pc, #332]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x10c>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x12e>
 80021e4:	bf00      	nop
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x202>
 80021f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_RCC_OscConfig+0x15e>
 80021fe:	4b49      	ldr	r3, [pc, #292]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
 800220a:	4b46      	ldr	r3, [pc, #280]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d116      	bne.n	8002244 <HAL_RCC_OscConfig+0x18c>
 8002216:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
 800222a:	2301      	movs	r3, #1
 800222c:	e1c0      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 800222e:	4b3d      	ldr	r3, [pc, #244]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4939      	ldr	r1, [pc, #228]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
 8002242:	e03a      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_OscConfig+0x1d6>
 800224c:	4b36      	ldr	r3, [pc, #216]	@ (8002328 <HAL_RCC_OscConfig+0x270>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f7ff fba9 	bl	80019a8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x1b4>
 800225a:	f7ff fba5 	bl	80019a8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x1b4>
 8002268:	2303      	movs	r3, #3
 800226a:	e1a1      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 800226c:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x1a2>
 8002278:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4927      	ldr	r1, [pc, #156]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
 800228e:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <HAL_RCC_OscConfig+0x270>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f7ff fb88 	bl	80019a8 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1f6>
 800229c:	f7ff fb84 	bl	80019a8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1f6>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e180      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80022ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1e4>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03a      	beq.n	800233c <HAL_RCC_OscConfig+0x284>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d019      	beq.n	8002302 <HAL_RCC_OscConfig+0x24a>
 80022ce:	4b17      	ldr	r3, [pc, #92]	@ (800232c <HAL_RCC_OscConfig+0x274>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f7ff fb68 	bl	80019a8 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x236>
 80022dc:	f7ff fb64 	bl	80019a8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x236>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e160      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x224>
 80022fa:	2001      	movs	r0, #1
 80022fc:	f000 face 	bl	800289c <RCC_Delay>
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x284>
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_RCC_OscConfig+0x274>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f7ff fb4e 	bl	80019a8 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]
 800230e:	e00f      	b.n	8002330 <HAL_RCC_OscConfig+0x278>
 8002310:	f7ff fb4a 	bl	80019a8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d908      	bls.n	8002330 <HAL_RCC_OscConfig+0x278>
 800231e:	2303      	movs	r3, #3
 8002320:	e146      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	42420000 	.word	0x42420000
 800232c:	42420480 	.word	0x42420480
 8002330:	4b92      	ldr	r3, [pc, #584]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e9      	bne.n	8002310 <HAL_RCC_OscConfig+0x258>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a6 	beq.w	8002496 <HAL_RCC_OscConfig+0x3de>
 800234a:	2300      	movs	r3, #0
 800234c:	75fb      	strb	r3, [r7, #23]
 800234e:	4b8b      	ldr	r3, [pc, #556]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x2be>
 800235a:	4b88      	ldr	r3, [pc, #544]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a87      	ldr	r2, [pc, #540]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b85      	ldr	r3, [pc, #532]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
 8002376:	4b82      	ldr	r3, [pc, #520]	@ (8002580 <HAL_RCC_OscConfig+0x4c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2fc>
 8002382:	4b7f      	ldr	r3, [pc, #508]	@ (8002580 <HAL_RCC_OscConfig+0x4c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7e      	ldr	r2, [pc, #504]	@ (8002580 <HAL_RCC_OscConfig+0x4c8>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	f7ff fb0b 	bl	80019a8 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
 8002396:	f7ff fb07 	bl	80019a8 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	@ 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
 80023a4:	2303      	movs	r3, #3
 80023a6:	e103      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80023a8:	4b75      	ldr	r3, [pc, #468]	@ (8002580 <HAL_RCC_OscConfig+0x4c8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2de>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x312>
 80023bc:	4b6f      	ldr	r3, [pc, #444]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a6e      	ldr	r2, [pc, #440]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	e02d      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x334>
 80023d2:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a69      	ldr	r2, [pc, #420]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b67      	ldr	r3, [pc, #412]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a66      	ldr	r2, [pc, #408]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	e01c      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0x356>
 80023f4:	4b61      	ldr	r3, [pc, #388]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a60      	ldr	r2, [pc, #384]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4b5e      	ldr	r3, [pc, #376]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a5d      	ldr	r2, [pc, #372]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e00b      	b.n	8002426 <HAL_RCC_OscConfig+0x36e>
 800240e:	4b5b      	ldr	r3, [pc, #364]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a5a      	ldr	r2, [pc, #360]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b58      	ldr	r3, [pc, #352]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a57      	ldr	r2, [pc, #348]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x3a2>
 800242e:	f7ff fabb 	bl	80019a8 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x394>
 8002436:	f7ff fab7 	bl	80019a8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x394>
 8002448:	2303      	movs	r3, #3
 800244a:	e0b1      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 800244c:	4b4b      	ldr	r3, [pc, #300]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x37e>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x3cc>
 800245a:	f7ff faa5 	bl	80019a8 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x3c0>
 8002462:	f7ff faa1 	bl	80019a8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x3c0>
 8002474:	2303      	movs	r3, #3
 8002476:	e09b      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 8002478:	4b40      	ldr	r3, [pc, #256]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x3aa>
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCC_OscConfig+0x3de>
 800248a:	4b3c      	ldr	r3, [pc, #240]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a3b      	ldr	r2, [pc, #236]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002494:	61d3      	str	r3, [r2, #28]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x4f6>
 80024a0:	4b36      	ldr	r3, [pc, #216]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d061      	beq.n	8002570 <HAL_RCC_OscConfig+0x4b8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d146      	bne.n	8002542 <HAL_RCC_OscConfig+0x48a>
 80024b4:	4b33      	ldr	r3, [pc, #204]	@ (8002584 <HAL_RCC_OscConfig+0x4cc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f7ff fa75 	bl	80019a8 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x41c>
 80024c2:	f7ff fa71 	bl	80019a8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x41c>
 80024d0:	2303      	movs	r3, #3
 80024d2:	e06d      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80024d4:	4b29      	ldr	r3, [pc, #164]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x40a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4921      	ldr	r1, [pc, #132]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
 80024fc:	4b1f      	ldr	r3, [pc, #124]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a19      	ldr	r1, [r3, #32]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	430b      	orrs	r3, r1
 800250e:	491b      	ldr	r1, [pc, #108]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <HAL_RCC_OscConfig+0x4cc>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f7ff fa45 	bl	80019a8 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x47c>
 8002522:	f7ff fa41 	bl	80019a8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x47c>
 8002530:	2303      	movs	r3, #3
 8002532:	e03d      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x46a>
 8002540:	e035      	b.n	80025ae <HAL_RCC_OscConfig+0x4f6>
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <HAL_RCC_OscConfig+0x4cc>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f7ff fa2e 	bl	80019a8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4aa>
 8002550:	f7ff fa2a 	bl	80019a8 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4aa>
 800255e:	2303      	movs	r3, #3
 8002560:	e026      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_OscConfig+0x4c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x498>
 800256e:	e01e      	b.n	80025ae <HAL_RCC_OscConfig+0x4f6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x4d0>
 8002578:	2301      	movs	r3, #1
 800257a:	e019      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
 8002584:	42420060 	.word	0x42420060
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_RCC_OscConfig+0x500>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x4f2>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x4f6>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCC_OscConfig+0x4f8>
 80025ae:	2300      	movs	r3, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_RCC_ClockConfig>:
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0d0      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
 80025d0:	4b6a      	ldr	r3, [pc, #424]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x44>
 80025de:	4b67      	ldr	r3, [pc, #412]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4965      	ldr	r1, [pc, #404]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
 80025ee:	4b63      	ldr	r3, [pc, #396]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x44>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0b8      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_ClockConfig+0x92>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x68>
 8002618:	4b59      	ldr	r3, [pc, #356]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a58      	ldr	r2, [pc, #352]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002622:	6053      	str	r3, [r2, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_ClockConfig+0x80>
 8002630:	4b53      	ldr	r3, [pc, #332]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a52      	ldr	r2, [pc, #328]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800263a:	6053      	str	r3, [r2, #4]
 800263c:	4b50      	ldr	r3, [pc, #320]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	494d      	ldr	r1, [pc, #308]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d040      	beq.n	80026dc <HAL_RCC_ClockConfig+0x120>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xb6>
 8002662:	4b47      	ldr	r3, [pc, #284]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d115      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
 800266e:	2301      	movs	r3, #1
 8002670:	e07f      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xce>
 800267a:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
 8002686:	2301      	movs	r3, #1
 8002688:	e073      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
 800268a:	4b3d      	ldr	r3, [pc, #244]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
 8002696:	2301      	movs	r3, #1
 8002698:	e06b      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
 800269a:	4b39      	ldr	r3, [pc, #228]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4936      	ldr	r1, [pc, #216]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	f7ff f97c 	bl	80019a8 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x10e>
 80026b4:	f7ff f978 	bl	80019a8 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x10e>
 80026c6:	2303      	movs	r3, #3
 80026c8:	e053      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
 80026ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
 80026dc:	4b27      	ldr	r3, [pc, #156]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d210      	bcs.n	800270c <HAL_RCC_ClockConfig+0x150>
 80026ea:	4b24      	ldr	r3, [pc, #144]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4922      	ldr	r1, [pc, #136]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x150>
 8002708:	2301      	movs	r3, #1
 800270a:	e032      	b.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x16e>
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4916      	ldr	r1, [pc, #88]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x18e>
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	490e      	ldr	r1, [pc, #56]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
 800274a:	f000 f821 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	490a      	ldr	r1, [pc, #40]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	5ccb      	ldrb	r3, [r1, r3]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <HAL_RCC_ClockConfig+0x1cc>)
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_RCC_ClockConfig+0x1d0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f8da 	bl	8001924 <HAL_InitTick>
 8002770:	2300      	movs	r3, #0
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40022000 	.word	0x40022000
 8002780:	40021000 	.word	0x40021000
 8002784:	08004f4c 	.word	0x08004f4c
 8002788:	20000068 	.word	0x20000068
 800278c:	2000006c 	.word	0x2000006c

08002790 <HAL_RCC_GetSysClockFreq>:
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x36>
 80027be:	e027      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x80>
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	e027      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x86>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	0c9b      	lsrs	r3, r3, #18
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	4a17      	ldr	r2, [pc, #92]	@ (800282c <HAL_RCC_GetSysClockFreq+0x9c>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d010      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x70>
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0c5b      	lsrs	r3, r3, #17
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x98>)
 80027f2:	fb03 f202 	mul.w	r2, r3, r2
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e004      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x7a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a0c      	ldr	r2, [pc, #48]	@ (8002834 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x86>
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x98>)
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	bf00      	nop
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4618      	mov	r0, r3
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	007a1200 	.word	0x007a1200
 800282c:	08004f64 	.word	0x08004f64
 8002830:	08004f74 	.word	0x08004f74
 8002834:	003d0900 	.word	0x003d0900

08002838 <HAL_RCC_GetHCLKFreq>:
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
 800283c:	4b02      	ldr	r3, [pc, #8]	@ (8002848 <HAL_RCC_GetHCLKFreq+0x10>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20000068 	.word	0x20000068

0800284c <HAL_RCC_GetPCLK1Freq>:
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
 8002850:	f7ff fff2 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	@ (8002870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08004f5c 	.word	0x08004f5c

08002874 <HAL_RCC_GetPCLK2Freq>:
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
 8002878:	f7ff ffde 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	0adb      	lsrs	r3, r3, #11
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4903      	ldr	r1, [pc, #12]	@ (8002898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	08004f5c 	.word	0x08004f5c

0800289c <RCC_Delay>:
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <RCC_Delay+0x34>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <RCC_Delay+0x38>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0a5b      	lsrs	r3, r3, #9
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	bf00      	nop
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	60fa      	str	r2, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f9      	bne.n	80028b8 <RCC_Delay+0x1c>
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20000068 	.word	0x20000068
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_TIM_Base_Init>:
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_Base_Init+0x12>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e041      	b.n	800296e <HAL_TIM_Base_Init+0x96>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_TIM_Base_Init+0x2c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fd72 	bl	80013e8 <HAL_TIM_Base_MspInit>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f000 fc10 	bl	800313c <TIM_Base_SetConfig>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800296c:	2300      	movs	r3, #0
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_TIM_Base_Start_IT>:
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d001      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x18>
 800298c:	2301      	movs	r3, #1
 800298e:	e03a      	b.n	8002a06 <HAL_TIM_Base_Start_IT+0x8e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_TIM_Base_Start_IT+0x98>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00e      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x58>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ba:	d009      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x58>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <HAL_TIM_Base_Start_IT+0x9c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x58>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a13      	ldr	r2, [pc, #76]	@ (8002a18 <HAL_TIM_Base_Start_IT+0xa0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d111      	bne.n	80029f4 <HAL_TIM_Base_Start_IT+0x7c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d010      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x8c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e007      	b.n	8002a04 <HAL_TIM_Base_Start_IT+0x8c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	2300      	movs	r3, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800

08002a1c <HAL_TIM_PWM_Init>:
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PWM_Init+0x12>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e041      	b.n	8002ab2 <HAL_TIM_PWM_Init+0x96>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_TIM_PWM_Init+0x2c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fd02 	bl	800144c <HAL_TIM_PWM_MspInit>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fb6e 	bl	800313c <TIM_Base_SetConfig>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_TIM_PWM_Start>:
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_TIM_PWM_Start+0x24>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e022      	b.n	8002b26 <HAL_TIM_PWM_Start+0x6a>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d109      	bne.n	8002afa <HAL_TIM_PWM_Start+0x3e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	e015      	b.n	8002b26 <HAL_TIM_PWM_Start+0x6a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d109      	bne.n	8002b14 <HAL_TIM_PWM_Start+0x58>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e008      	b.n	8002b26 <HAL_TIM_PWM_Start+0x6a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x72>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e05e      	b.n	8002bec <HAL_TIM_PWM_Start+0x130>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_TIM_PWM_Start+0x82>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b3c:	e013      	b.n	8002b66 <HAL_TIM_PWM_Start+0xaa>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x92>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b4c:	e00b      	b.n	8002b66 <HAL_TIM_PWM_Start+0xaa>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Start+0xa2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b5c:	e003      	b.n	8002b66 <HAL_TIM_PWM_Start+0xaa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fd70 	bl	8003654 <TIM_CCxChannelCmd>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf4 <HAL_TIM_PWM_Start+0x138>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d107      	bne.n	8002b8e <HAL_TIM_PWM_Start+0xd2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <HAL_TIM_PWM_Start+0x138>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0xfa>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0xfa>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <HAL_TIM_PWM_Start+0x13c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0xfa>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <HAL_TIM_PWM_Start+0x140>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d111      	bne.n	8002bda <HAL_TIM_PWM_Start+0x11e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d010      	beq.n	8002bea <HAL_TIM_PWM_Start+0x12e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_TIM_PWM_Start+0x12e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800

08002c00 <HAL_TIM_IRQHandler>:
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d020      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x64>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01b      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x64>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0202 	mvn.w	r2, #2
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	771a      	strb	r2, [r3, #28]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x52>
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa5a 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0x5e>
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa4d 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fa5c 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d020      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0xb0>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01b      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0xb0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0204 	mvn.w	r2, #4
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	771a      	strb	r2, [r3, #28]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x9e>
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa34 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0xaa>
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa27 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fa36 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d020      	beq.n	8002cfc <HAL_TIM_IRQHandler+0xfc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01b      	beq.n	8002cfc <HAL_TIM_IRQHandler+0xfc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0208 	mvn.w	r2, #8
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	771a      	strb	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0xea>
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa0e 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0xf6>
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa01 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fa10 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d020      	beq.n	8002d48 <HAL_TIM_IRQHandler+0x148>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01b      	beq.n	8002d48 <HAL_TIM_IRQHandler+0x148>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0210 	mvn.w	r2, #16
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	771a      	strb	r2, [r3, #28]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x136>
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9e8 	bl	8003104 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0x142>
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f9db 	bl	80030f2 <HAL_TIM_OC_DelayElapsedCallback>
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f9ea 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00c      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x16c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x16c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0201 	mvn.w	r2, #1
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe f920 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x190>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x190>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d88:	611a      	str	r2, [r3, #16]
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fd3e 	bl	800380c <HAL_TIMEx_BreakCallback>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x1b4>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x1b4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dac:	611a      	str	r2, [r3, #16]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9ba 	bl	8003128 <HAL_TIM_TriggerCallback>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x1d8>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x1d8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0220 	mvn.w	r2, #32
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fd11 	bl	80037fa <HAL_TIMEx_CommutCallback>
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_PWM_ConfigChannel>:
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	2300      	movs	r3, #0
 8002dee:	75fb      	strb	r3, [r7, #23]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0ae      	b.n	8002f5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	f200 809f 	bhi.w	8002f4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002f4d 	.word	0x08002f4d
 8002e1c:	08002f4d 	.word	0x08002f4d
 8002e20:	08002f4d 	.word	0x08002f4d
 8002e24:	08002e89 	.word	0x08002e89
 8002e28:	08002f4d 	.word	0x08002f4d
 8002e2c:	08002f4d 	.word	0x08002f4d
 8002e30:	08002f4d 	.word	0x08002f4d
 8002e34:	08002ecb 	.word	0x08002ecb
 8002e38:	08002f4d 	.word	0x08002f4d
 8002e3c:	08002f4d 	.word	0x08002f4d
 8002e40:	08002f4d 	.word	0x08002f4d
 8002e44:	08002f0b 	.word	0x08002f0b
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f9e2 	bl	8003218 <TIM_OC1_SetConfig>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	619a      	str	r2, [r3, #24]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	619a      	str	r2, [r3, #24]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	619a      	str	r2, [r3, #24]
 8002e86:	e064      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fa28 	bl	80032e4 <TIM_OC2_SetConfig>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea2:	619a      	str	r2, [r3, #24]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb2:	619a      	str	r2, [r3, #24]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6999      	ldr	r1, [r3, #24]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	619a      	str	r2, [r3, #24]
 8002ec8:	e043      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fa71 	bl	80033b8 <TIM_OC3_SetConfig>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0208 	orr.w	r2, r2, #8
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0204 	bic.w	r2, r2, #4
 8002ef4:	61da      	str	r2, [r3, #28]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	61da      	str	r2, [r3, #28]
 8002f08:	e023      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fabb 	bl	800348c <TIM_OC4_SetConfig>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f24:	61da      	str	r2, [r3, #28]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f34:	61da      	str	r2, [r3, #28]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	61da      	str	r2, [r3, #28]
 8002f4a:	e002      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	75fb      	strb	r3, [r7, #23]
 8002f50:	bf00      	nop
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_ConfigClockSource>:
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x1c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0b4      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x186>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb8:	d03e      	beq.n	8003038 <HAL_TIM_ConfigClockSource+0xd4>
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbe:	f200 8087 	bhi.w	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc6:	f000 8086 	beq.w	80030d6 <HAL_TIM_ConfigClockSource+0x172>
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fce:	d87f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b70      	cmp	r3, #112	@ 0x70
 8002fd2:	d01a      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xa6>
 8002fd4:	2b70      	cmp	r3, #112	@ 0x70
 8002fd6:	d87b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b60      	cmp	r3, #96	@ 0x60
 8002fda:	d050      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x11a>
 8002fdc:	2b60      	cmp	r3, #96	@ 0x60
 8002fde:	d877      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b50      	cmp	r3, #80	@ 0x50
 8002fe2:	d03c      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xfa>
 8002fe4:	2b50      	cmp	r3, #80	@ 0x50
 8002fe6:	d873      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d058      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x13a>
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d86f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b30      	cmp	r3, #48	@ 0x30
 8002ff2:	d064      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	2b30      	cmp	r3, #48	@ 0x30
 8002ff6:	d86b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d060      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d867      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003004:	2b10      	cmp	r3, #16
 8003006:	d05a      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	e062      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f000 fafc 	bl	8003616 <TIM_ETR_SetConfig>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	e04f      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f000 fae5 	bl	8003616 <TIM_ETR_SetConfig>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e03c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	461a      	mov	r2, r3
 800306c:	f000 fa5c 	bl	8003528 <TIM_TI1_ConfigInputStage>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2150      	movs	r1, #80	@ 0x50
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fab3 	bl	80035e2 <TIM_ITRx_SetConfig>
 800307c:	e02c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	461a      	mov	r2, r3
 800308c:	f000 fa7a 	bl	8003584 <TIM_TI2_ConfigInputStage>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2160      	movs	r1, #96	@ 0x60
 8003096:	4618      	mov	r0, r3
 8003098:	f000 faa3 	bl	80035e2 <TIM_ITRx_SetConfig>
 800309c:	e01c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 fa3c 	bl	8003528 <TIM_TI1_ConfigInputStage>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2140      	movs	r1, #64	@ 0x40
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fa93 	bl	80035e2 <TIM_ITRx_SetConfig>
 80030bc:	e00c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fa8a 	bl	80035e2 <TIM_ITRx_SetConfig>
 80030ce:	e003      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e000      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
 80030d6:	bf00      	nop
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_TIM_OC_DelayElapsedCallback>:
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_IC_CaptureCallback>:
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_TriggerCallback>:
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <TIM_Base_SetConfig>:
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a2f      	ldr	r2, [pc, #188]	@ (800320c <TIM_Base_SetConfig+0xd0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a2c      	ldr	r2, [pc, #176]	@ (8003210 <TIM_Base_SetConfig+0xd4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x30>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a2b      	ldr	r2, [pc, #172]	@ (8003214 <TIM_Base_SetConfig+0xd8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x42>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a22      	ldr	r2, [pc, #136]	@ (800320c <TIM_Base_SetConfig+0xd0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00b      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800318c:	d007      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1f      	ldr	r2, [pc, #124]	@ (8003210 <TIM_Base_SetConfig+0xd4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <TIM_Base_SetConfig+0x62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <TIM_Base_SetConfig+0xd8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d108      	bne.n	80031b0 <TIM_Base_SetConfig+0x74>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0d      	ldr	r2, [pc, #52]	@ (800320c <TIM_Base_SetConfig+0xd0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <TIM_Base_SetConfig+0xa8>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <TIM_Base_SetConfig+0xc6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f023 0201 	bic.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	611a      	str	r2, [r3, #16]
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40000400 	.word	0x40000400
 8003214:	40000800 	.word	0x40000800

08003218 <TIM_OC1_SetConfig>:
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f023 0201 	bic.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	621a      	str	r2, [r3, #32]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 0302 	bic.w	r3, r3, #2
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <TIM_OC1_SetConfig+0xc8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d10c      	bne.n	800328e <TIM_OC1_SetConfig+0x76>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f023 0308 	bic.w	r3, r3, #8
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a13      	ldr	r2, [pc, #76]	@ (80032e0 <TIM_OC1_SetConfig+0xc8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <TIM_OC1_SetConfig+0xa2>
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	619a      	str	r2, [r3, #24]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40012c00 	.word	0x40012c00

080032e4 <TIM_OC2_SetConfig>:
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f023 0210 	bic.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	621a      	str	r2, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0320 	bic.w	r3, r3, #32
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a1d      	ldr	r2, [pc, #116]	@ (80033b4 <TIM_OC2_SetConfig+0xd0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10d      	bne.n	8003360 <TIM_OC2_SetConfig+0x7c>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a14      	ldr	r2, [pc, #80]	@ (80033b4 <TIM_OC2_SetConfig+0xd0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d113      	bne.n	8003390 <TIM_OC2_SetConfig+0xac>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	619a      	str	r2, [r3, #24]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	621a      	str	r2, [r3, #32]
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00

080033b8 <TIM_OC3_SetConfig>:
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	621a      	str	r2, [r3, #32]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <TIM_OC3_SetConfig+0xd0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10d      	bne.n	8003432 <TIM_OC3_SetConfig+0x7a>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <TIM_OC3_SetConfig+0xd0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d113      	bne.n	8003462 <TIM_OC3_SetConfig+0xaa>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	61da      	str	r2, [r3, #28]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00

0800348c <TIM_OC4_SetConfig>:
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	621a      	str	r2, [r3, #32]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	031b      	lsls	r3, r3, #12
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003524 <TIM_OC4_SetConfig+0x98>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d109      	bne.n	8003500 <TIM_OC4_SetConfig+0x74>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	019b      	lsls	r3, r3, #6
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	61da      	str	r2, [r3, #28]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	@ 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	621a      	str	r2, [r3, #32]
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	40012c00 	.word	0x40012c00

08003528 <TIM_TI1_ConfigInputStage>:
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0201 	bic.w	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	621a      	str	r2, [r3, #32]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 030a 	bic.w	r3, r3, #10
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	619a      	str	r2, [r3, #24]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	621a      	str	r2, [r3, #32]
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <TIM_TI2_ConfigInputStage>:
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0210 	bic.w	r2, r3, #16
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	031b      	lsls	r3, r3, #12
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	619a      	str	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <TIM_ITRx_SetConfig>:
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	f043 0307 	orr.w	r3, r3, #7
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <TIM_ETR_SetConfig>:
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	021a      	lsls	r2, r3, #8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	431a      	orrs	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4313      	orrs	r3, r2
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <TIM_CCxChannelCmd>:
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2201      	movs	r2, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	43db      	mvns	r3, r3
 8003676:	401a      	ands	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	621a      	str	r2, [r3, #32]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	431a      	orrs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_MasterConfigSynchronization>:
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e046      	b.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a16      	ldr	r2, [pc, #88]	@ (800374c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003700:	d009      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a12      	ldr	r2, [pc, #72]	@ (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a10      	ldr	r2, [pc, #64]	@ (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10c      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4313      	orrs	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003740:	2300      	movs	r3, #0
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800

08003758 <HAL_TIMEx_ConfigBreakDeadTime>:
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003770:	2302      	movs	r3, #2
 8003772:	e03d      	b.n	80037f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80037ee:	2300      	movs	r3, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <HAL_TIMEx_CommutCallback>:
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_BreakCallback>:
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <HAL_UART_Init>:
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Init+0x12>
 800382c:	2301      	movs	r3, #1
 800382e:	e042      	b.n	80038b6 <HAL_UART_Init+0x98>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_UART_Init+0x2c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd fef5 	bl	8001634 <HAL_UART_MspInit>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2224      	movs	r2, #36	@ 0x24
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fdb0 	bl	80043c8 <UART_SetConfig>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003876:	611a      	str	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003886:	615a      	str	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	645a      	str	r2, [r3, #68]	@ 0x44
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80038b4:	2300      	movs	r3, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_UART_Transmit>:
 80038be:	b580      	push	{r7, lr}
 80038c0:	b08a      	sub	sp, #40	@ 0x28
 80038c2:	af02      	add	r7, sp, #8
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d175      	bne.n	80039ca <HAL_UART_Transmit+0x10c>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_UART_Transmit+0x2c>
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Transmit+0x30>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e06e      	b.n	80039cc <HAL_UART_Transmit+0x10e>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2221      	movs	r2, #33	@ 0x21
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038fc:	f7fe f854 	bl	80019a8 <HAL_GetTick>
 8003900:	6178      	str	r0, [r7, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	849a      	strh	r2, [r3, #36]	@ 0x24
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	84da      	strh	r2, [r3, #38]	@ 0x26
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003916:	d108      	bne.n	800392a <HAL_UART_Transmit+0x6c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_UART_Transmit+0x6c>
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e003      	b.n	8003932 <HAL_UART_Transmit+0x74>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e02e      	b.n	8003992 <HAL_UART_Transmit+0xd4>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2200      	movs	r2, #0
 800393c:	2180      	movs	r1, #128	@ 0x80
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fb14 	bl	8003f6c <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_UART_Transmit+0x98>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003952:	2303      	movs	r3, #3
 8003954:	e03a      	b.n	80039cc <HAL_UART_Transmit+0x10e>
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <HAL_UART_Transmit+0xb6>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	3302      	adds	r3, #2
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	e007      	b.n	8003984 <HAL_UART_Transmit+0xc6>
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3301      	adds	r3, #1
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1cb      	bne.n	8003934 <HAL_UART_Transmit+0x76>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2200      	movs	r2, #0
 80039a4:	2140      	movs	r1, #64	@ 0x40
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fae0 	bl	8003f6c <UART_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_UART_Transmit+0x100>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039ba:	2303      	movs	r3, #3
 80039bc:	e006      	b.n	80039cc <HAL_UART_Transmit+0x10e>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c6:	2300      	movs	r3, #0
 80039c8:	e000      	b.n	80039cc <HAL_UART_Transmit+0x10e>
 80039ca:	2302      	movs	r3, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_Receive_IT>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d112      	bne.n	8003a14 <HAL_UART_Receive_IT+0x40>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_UART_Receive_IT+0x26>
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Receive_IT+0x2a>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00b      	b.n	8003a16 <HAL_UART_Receive_IT+0x42>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fb07 	bl	800401e <UART_Start_Receive_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	e000      	b.n	8003a16 <HAL_UART_Receive_IT+0x42>
 8003a14:	2302      	movs	r3, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_UART_IRQHandler>:
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b0ba      	sub	sp, #232	@ 0xe8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_UART_IRQHandler+0x66>
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fbe3 	bl	800424a <UART_Receive_IT>
 8003a84:	e25b      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80de 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
 8003a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_UART_IRQHandler+0x8a>
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80d1 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d011      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
 8003b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_UART_IRQHandler+0x11a>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 81f2 	beq.w	8003f34 <HAL_UART_IRQHandler+0x514>
 8003b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
 8003b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb6e 	bl	800424a <UART_Receive_IT>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_UART_IRQHandler+0x17a>
 8003b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04f      	beq.n	8003c3a <HAL_UART_IRQHandler+0x21a>
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa78 	bl	8004090 <UART_EndRxTransfer>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d041      	beq.n	8003c32 <HAL_UART_IRQHandler+0x212>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1d9      	bne.n	8003bae <HAL_UART_IRQHandler+0x18e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <HAL_UART_IRQHandler+0x20a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	4a7e      	ldr	r2, [pc, #504]	@ (8003e00 <HAL_UART_IRQHandler+0x3e0>)
 8003c08:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe f81c 	bl	8001c4c <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_UART_IRQHandler+0x228>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
 8003c28:	e00e      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fc ff9c 	bl	8000b68 <HAL_UART_ErrorCallback>
 8003c30:	e00a      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc ff98 	bl	8000b68 <HAL_UART_ErrorCallback>
 8003c38:	e006      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fc ff94 	bl	8000b68 <HAL_UART_ErrorCallback>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c46:	e175      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
 8003c48:	bf00      	nop
 8003c4a:	e173      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 814f 	bne.w	8003ef4 <HAL_UART_IRQHandler+0x4d4>
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8148 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x4d4>
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8141 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x4d4>
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80b6 	beq.w	8003e04 <HAL_UART_IRQHandler+0x3e4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8003ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8145 	beq.w	8003f38 <HAL_UART_IRQHandler+0x518>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f080 813e 	bcs.w	8003f38 <HAL_UART_IRQHandler+0x518>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cc2:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	f000 8088 	beq.w	8003de0 <HAL_UART_IRQHandler+0x3c0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003cfc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d04:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d08:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1d9      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x2b0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d40:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d46:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e1      	bne.n	8003d1c <HAL_UART_IRQHandler+0x2fc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d7c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e3      	bne.n	8003d58 <HAL_UART_IRQHandler+0x338>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003dc2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x37e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd fefb 	bl	8001bd6 <HAL_DMA_Abort>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8ad 	bl	8003f56 <HAL_UARTEx_RxEventCallback>
 8003dfc:	e09c      	b.n	8003f38 <HAL_UART_IRQHandler+0x518>
 8003dfe:	bf00      	nop
 8003e00:	08004155 	.word	0x08004155
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 808e 	beq.w	8003f3c <HAL_UART_IRQHandler+0x51c>
 8003e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8089 	beq.w	8003f3c <HAL_UART_IRQHandler+0x51c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e3      	bne.n	8003e2a <HAL_UART_IRQHandler+0x40a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e3      	bne.n	8003e62 <HAL_UART_IRQHandler+0x442>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0310 	bic.w	r3, r3, #16
 8003ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ecc:	61fa      	str	r2, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e3      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x488>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eea:	4619      	mov	r1, r3
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f832 	bl	8003f56 <HAL_UARTEx_RxEventCallback>
 8003ef2:	e023      	b.n	8003f3c <HAL_UART_IRQHandler+0x51c>
 8003ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <HAL_UART_IRQHandler+0x4f4>
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_UART_IRQHandler+0x4f4>
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f935 	bl	800417c <UART_Transmit_IT>
 8003f12:	e014      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f974 	bl	800421a <UART_EndTransmit_IT>
 8003f32:	e004      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003f34:	bf00      	nop
 8003f36:	e002      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003f3c:	bf00      	nop
 8003f3e:	37e8      	adds	r7, #232	@ 0xe8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_UART_TxCpltCallback>:
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <HAL_UARTEx_RxEventCallback>:
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	807b      	strh	r3, [r7, #2]
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <UART_WaitOnFlagUntilTimeout>:
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	71fb      	strb	r3, [r7, #7]
 8003f7c:	e03b      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d037      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f86:	f7fd fd0f 	bl	80019a8 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x34>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e03a      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xaa>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d023      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b80      	cmp	r3, #128	@ 0x80
 8003fb2:	d020      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b40      	cmp	r3, #64	@ 0x40
 8003fb8:	d01d      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d116      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f856 	bl	8004090 <UART_EndRxTransfer>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00f      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0xaa>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d0b4      	beq.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x12>
 8004014:	2300      	movs	r3, #0
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <UART_Start_Receive_IT>:
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	629a      	str	r2, [r3, #40]	@ 0x28
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	645a      	str	r2, [r3, #68]	@ 0x44
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2222      	movs	r2, #34	@ 0x22
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <UART_Start_Receive_IT+0x46>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	615a      	str	r2, [r3, #20]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0220 	orr.w	r2, r2, #32
 8004082:	60da      	str	r2, [r3, #12]
 8004084:	2300      	movs	r3, #0
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <UART_EndRxTransfer>:
 8004090:	b480      	push	{r7}
 8004092:	b095      	sub	sp, #84	@ 0x54
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
 80040a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80040ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_EndRxTransfer+0x8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3314      	adds	r3, #20
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e5      	bne.n	80040cc <UART_EndRxTransfer+0x3c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	2b01      	cmp	r3, #1
 8004106:	d119      	bne.n	800413c <UART_EndRxTransfer+0xac>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f023 0310 	bic.w	r3, r3, #16
 800411e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004128:	61ba      	str	r2, [r7, #24]
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	6979      	ldr	r1, [r7, #20]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_EndRxTransfer+0x78>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	@ 0x30
 800414a:	bf00      	nop
 800414c:	3754      	adds	r7, #84	@ 0x54
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <UART_DMAAbortOnError>:
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	84da      	strh	r2, [r3, #38]	@ 0x26
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7fc fcfa 	bl	8000b68 <HAL_UART_ErrorCallback>
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_Transmit_IT>:
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b21      	cmp	r3, #33	@ 0x21
 800418e:	d13e      	bne.n	800420e <UART_Transmit_IT+0x92>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004198:	d114      	bne.n	80041c4 <UART_Transmit_IT+0x48>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <UART_Transmit_IT+0x48>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]
 80041c2:	e008      	b.n	80041d6 <UART_Transmit_IT+0x5a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6211      	str	r1, [r2, #32]
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4619      	mov	r1, r3
 80041e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <UART_Transmit_IT+0x8e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <UART_Transmit_IT+0x94>
 800420e:	2302      	movs	r3, #2
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <UART_EndTransmit_IT>:
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fe82 	bl	8003f44 <HAL_UART_TxCpltCallback>
 8004240:	2300      	movs	r3, #0
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_Receive_IT>:
 800424a:	b580      	push	{r7, lr}
 800424c:	b08c      	sub	sp, #48	@ 0x30
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b22      	cmp	r3, #34	@ 0x22
 800425c:	f040 80ae 	bne.w	80043bc <UART_Receive_IT+0x172>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004268:	d117      	bne.n	800429a <UART_Receive_IT+0x50>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d113      	bne.n	800429a <UART_Receive_IT+0x50>
 8004272:	2300      	movs	r3, #0
 8004274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004288:	b29a      	uxth	r2, r3
 800428a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	@ 0x28
 8004298:	e026      	b.n	80042e8 <UART_Receive_IT+0x9e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042a0:	2300      	movs	r3, #0
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ac:	d007      	beq.n	80042be <UART_Receive_IT+0x74>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <UART_Receive_IT+0x82>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <UART_Receive_IT+0x82>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e008      	b.n	80042de <UART_Receive_IT+0x94>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4619      	mov	r1, r3
 80042f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d15d      	bne.n	80043b8 <UART_Receive_IT+0x16e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0220 	bic.w	r2, r2, #32
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800431a:	60da      	str	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	615a      	str	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	635a      	str	r2, [r3, #52]	@ 0x34
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	2b01      	cmp	r3, #1
 8004340:	d135      	bne.n	80043ae <UART_Receive_IT+0x164>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	@ 0x30
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 0310 	bic.w	r3, r3, #16
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004368:	623a      	str	r2, [r7, #32]
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_Receive_IT+0xfe>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b10      	cmp	r3, #16
 8004388:	d10a      	bne.n	80043a0 <UART_Receive_IT+0x156>
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fdd5 	bl	8003f56 <HAL_UARTEx_RxEventCallback>
 80043ac:	e002      	b.n	80043b4 <UART_Receive_IT+0x16a>
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fbc4 	bl	8000b3c <HAL_UART_RxCpltCallback>
 80043b4:	2300      	movs	r3, #0
 80043b6:	e002      	b.n	80043be <UART_Receive_IT+0x174>
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <UART_Receive_IT+0x174>
 80043bc:	2302      	movs	r3, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	3730      	adds	r7, #48	@ 0x30
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <UART_SetConfig>:
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004402:	f023 030c 	bic.w	r3, r3, #12
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	430b      	orrs	r3, r1
 800440e:	60d3      	str	r3, [r2, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	615a      	str	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2c      	ldr	r2, [pc, #176]	@ (80044dc <UART_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <UART_SetConfig+0x70>
 8004430:	f7fe fa20 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	e002      	b.n	800443e <UART_SetConfig+0x76>
 8004438:	f7fe fa08 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	4a22      	ldr	r2, [pc, #136]	@ (80044e0 <UART_SetConfig+0x118>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	0119      	lsls	r1, r3, #4
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fbb2 f2f3 	udiv	r2, r2, r3
 8004474:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <UART_SetConfig+0x118>)
 8004476:	fba3 0302 	umull	r0, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2064      	movs	r0, #100	@ 0x64
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	@ 0x32
 8004488:	4a15      	ldr	r2, [pc, #84]	@ (80044e0 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004494:	4419      	add	r1, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <UART_SetConfig+0x118>)
 80044ae:	fba3 0302 	umull	r0, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	2064      	movs	r0, #100	@ 0x64
 80044b6:	fb00 f303 	mul.w	r3, r0, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	3332      	adds	r3, #50	@ 0x32
 80044c0:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <UART_SetConfig+0x118>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	440a      	add	r2, r1
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40013800 	.word	0x40013800
 80044e0:	51eb851f 	.word	0x51eb851f

080044e4 <sniprintf>:
 80044e4:	b40c      	push	{r2, r3}
 80044e6:	b530      	push	{r4, r5, lr}
 80044e8:	4b17      	ldr	r3, [pc, #92]	@ (8004548 <sniprintf+0x64>)
 80044ea:	1e0c      	subs	r4, r1, #0
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	b09d      	sub	sp, #116	@ 0x74
 80044f0:	da08      	bge.n	8004504 <sniprintf+0x20>
 80044f2:	238b      	movs	r3, #139	@ 0x8b
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	b01d      	add	sp, #116	@ 0x74
 80044fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004500:	b002      	add	sp, #8
 8004502:	4770      	bx	lr
 8004504:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004508:	f8ad 3014 	strh.w	r3, [sp, #20]
 800450c:	bf0c      	ite	eq
 800450e:	4623      	moveq	r3, r4
 8004510:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004514:	9304      	str	r3, [sp, #16]
 8004516:	9307      	str	r3, [sp, #28]
 8004518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800451c:	9002      	str	r0, [sp, #8]
 800451e:	9006      	str	r0, [sp, #24]
 8004520:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004524:	4628      	mov	r0, r5
 8004526:	ab21      	add	r3, sp, #132	@ 0x84
 8004528:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800452a:	a902      	add	r1, sp, #8
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	f000 f9a1 	bl	8004874 <_svfiprintf_r>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	bfbc      	itt	lt
 8004536:	238b      	movlt	r3, #139	@ 0x8b
 8004538:	602b      	strlt	r3, [r5, #0]
 800453a:	2c00      	cmp	r4, #0
 800453c:	d0dd      	beq.n	80044fa <sniprintf+0x16>
 800453e:	2200      	movs	r2, #0
 8004540:	9b02      	ldr	r3, [sp, #8]
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e7d9      	b.n	80044fa <sniprintf+0x16>
 8004546:	bf00      	nop
 8004548:	20000074 	.word	0x20000074

0800454c <memset>:
 800454c:	4603      	mov	r3, r0
 800454e:	4402      	add	r2, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <memset+0xa>
 8004554:	4770      	bx	lr
 8004556:	f803 1b01 	strb.w	r1, [r3], #1
 800455a:	e7f9      	b.n	8004550 <memset+0x4>

0800455c <__errno>:
 800455c:	4b01      	ldr	r3, [pc, #4]	@ (8004564 <__errno+0x8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000074 	.word	0x20000074

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	2600      	movs	r6, #0
 800456c:	4d0c      	ldr	r5, [pc, #48]	@ (80045a0 <__libc_init_array+0x38>)
 800456e:	4c0d      	ldr	r4, [pc, #52]	@ (80045a4 <__libc_init_array+0x3c>)
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	f000 fc78 	bl	8004e6c <_init>
 800457c:	2600      	movs	r6, #0
 800457e:	4d0a      	ldr	r5, [pc, #40]	@ (80045a8 <__libc_init_array+0x40>)
 8004580:	4c0a      	ldr	r4, [pc, #40]	@ (80045ac <__libc_init_array+0x44>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	08004fac 	.word	0x08004fac
 80045a4:	08004fac 	.word	0x08004fac
 80045a8:	08004fac 	.word	0x08004fac
 80045ac:	08004fb0 	.word	0x08004fb0

080045b0 <__retarget_lock_acquire_recursive>:
 80045b0:	4770      	bx	lr

080045b2 <__retarget_lock_release_recursive>:
 80045b2:	4770      	bx	lr

080045b4 <memcpy>:
 80045b4:	440a      	add	r2, r1
 80045b6:	4291      	cmp	r1, r2
 80045b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045bc:	d100      	bne.n	80045c0 <memcpy+0xc>
 80045be:	4770      	bx	lr
 80045c0:	b510      	push	{r4, lr}
 80045c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c6:	4291      	cmp	r1, r2
 80045c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045cc:	d1f9      	bne.n	80045c2 <memcpy+0xe>
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <_free_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4605      	mov	r5, r0
 80045d4:	2900      	cmp	r1, #0
 80045d6:	d040      	beq.n	800465a <_free_r+0x8a>
 80045d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045dc:	1f0c      	subs	r4, r1, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfb8      	it	lt
 80045e2:	18e4      	addlt	r4, r4, r3
 80045e4:	f000 f8de 	bl	80047a4 <__malloc_lock>
 80045e8:	4a1c      	ldr	r2, [pc, #112]	@ (800465c <_free_r+0x8c>)
 80045ea:	6813      	ldr	r3, [r2, #0]
 80045ec:	b933      	cbnz	r3, 80045fc <_free_r+0x2c>
 80045ee:	6063      	str	r3, [r4, #4]
 80045f0:	6014      	str	r4, [r2, #0]
 80045f2:	4628      	mov	r0, r5
 80045f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f8:	f000 b8da 	b.w	80047b0 <__malloc_unlock>
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d908      	bls.n	8004612 <_free_r+0x42>
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	1821      	adds	r1, r4, r0
 8004604:	428b      	cmp	r3, r1
 8004606:	bf01      	itttt	eq
 8004608:	6819      	ldreq	r1, [r3, #0]
 800460a:	685b      	ldreq	r3, [r3, #4]
 800460c:	1809      	addeq	r1, r1, r0
 800460e:	6021      	streq	r1, [r4, #0]
 8004610:	e7ed      	b.n	80045ee <_free_r+0x1e>
 8004612:	461a      	mov	r2, r3
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	b10b      	cbz	r3, 800461c <_free_r+0x4c>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d9fa      	bls.n	8004612 <_free_r+0x42>
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	1850      	adds	r0, r2, r1
 8004620:	42a0      	cmp	r0, r4
 8004622:	d10b      	bne.n	800463c <_free_r+0x6c>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	4401      	add	r1, r0
 8004628:	1850      	adds	r0, r2, r1
 800462a:	4283      	cmp	r3, r0
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	d1e0      	bne.n	80045f2 <_free_r+0x22>
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4408      	add	r0, r1
 8004636:	6010      	str	r0, [r2, #0]
 8004638:	6053      	str	r3, [r2, #4]
 800463a:	e7da      	b.n	80045f2 <_free_r+0x22>
 800463c:	d902      	bls.n	8004644 <_free_r+0x74>
 800463e:	230c      	movs	r3, #12
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	e7d6      	b.n	80045f2 <_free_r+0x22>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	1821      	adds	r1, r4, r0
 8004648:	428b      	cmp	r3, r1
 800464a:	bf01      	itttt	eq
 800464c:	6819      	ldreq	r1, [r3, #0]
 800464e:	685b      	ldreq	r3, [r3, #4]
 8004650:	1809      	addeq	r1, r1, r0
 8004652:	6021      	streq	r1, [r4, #0]
 8004654:	6063      	str	r3, [r4, #4]
 8004656:	6054      	str	r4, [r2, #4]
 8004658:	e7cb      	b.n	80045f2 <_free_r+0x22>
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	200004f8 	.word	0x200004f8

08004660 <sbrk_aligned>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4e0f      	ldr	r6, [pc, #60]	@ (80046a0 <sbrk_aligned+0x40>)
 8004664:	460c      	mov	r4, r1
 8004666:	6831      	ldr	r1, [r6, #0]
 8004668:	4605      	mov	r5, r0
 800466a:	b911      	cbnz	r1, 8004672 <sbrk_aligned+0x12>
 800466c:	f000 fbaa 	bl	8004dc4 <_sbrk_r>
 8004670:	6030      	str	r0, [r6, #0]
 8004672:	4621      	mov	r1, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fba5 	bl	8004dc4 <_sbrk_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	d103      	bne.n	8004686 <sbrk_aligned+0x26>
 800467e:	f04f 34ff 	mov.w	r4, #4294967295
 8004682:	4620      	mov	r0, r4
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	1cc4      	adds	r4, r0, #3
 8004688:	f024 0403 	bic.w	r4, r4, #3
 800468c:	42a0      	cmp	r0, r4
 800468e:	d0f8      	beq.n	8004682 <sbrk_aligned+0x22>
 8004690:	1a21      	subs	r1, r4, r0
 8004692:	4628      	mov	r0, r5
 8004694:	f000 fb96 	bl	8004dc4 <_sbrk_r>
 8004698:	3001      	adds	r0, #1
 800469a:	d1f2      	bne.n	8004682 <sbrk_aligned+0x22>
 800469c:	e7ef      	b.n	800467e <sbrk_aligned+0x1e>
 800469e:	bf00      	nop
 80046a0:	200004f4 	.word	0x200004f4

080046a4 <_malloc_r>:
 80046a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a8:	1ccd      	adds	r5, r1, #3
 80046aa:	f025 0503 	bic.w	r5, r5, #3
 80046ae:	3508      	adds	r5, #8
 80046b0:	2d0c      	cmp	r5, #12
 80046b2:	bf38      	it	cc
 80046b4:	250c      	movcc	r5, #12
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	4606      	mov	r6, r0
 80046ba:	db01      	blt.n	80046c0 <_malloc_r+0x1c>
 80046bc:	42a9      	cmp	r1, r5
 80046be:	d904      	bls.n	80046ca <_malloc_r+0x26>
 80046c0:	230c      	movs	r3, #12
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	2000      	movs	r0, #0
 80046c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047a0 <_malloc_r+0xfc>
 80046ce:	f000 f869 	bl	80047a4 <__malloc_lock>
 80046d2:	f8d8 3000 	ldr.w	r3, [r8]
 80046d6:	461c      	mov	r4, r3
 80046d8:	bb44      	cbnz	r4, 800472c <_malloc_r+0x88>
 80046da:	4629      	mov	r1, r5
 80046dc:	4630      	mov	r0, r6
 80046de:	f7ff ffbf 	bl	8004660 <sbrk_aligned>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	4604      	mov	r4, r0
 80046e6:	d158      	bne.n	800479a <_malloc_r+0xf6>
 80046e8:	f8d8 4000 	ldr.w	r4, [r8]
 80046ec:	4627      	mov	r7, r4
 80046ee:	2f00      	cmp	r7, #0
 80046f0:	d143      	bne.n	800477a <_malloc_r+0xd6>
 80046f2:	2c00      	cmp	r4, #0
 80046f4:	d04b      	beq.n	800478e <_malloc_r+0xea>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	4639      	mov	r1, r7
 80046fa:	4630      	mov	r0, r6
 80046fc:	eb04 0903 	add.w	r9, r4, r3
 8004700:	f000 fb60 	bl	8004dc4 <_sbrk_r>
 8004704:	4581      	cmp	r9, r0
 8004706:	d142      	bne.n	800478e <_malloc_r+0xea>
 8004708:	6821      	ldr	r1, [r4, #0]
 800470a:	4630      	mov	r0, r6
 800470c:	1a6d      	subs	r5, r5, r1
 800470e:	4629      	mov	r1, r5
 8004710:	f7ff ffa6 	bl	8004660 <sbrk_aligned>
 8004714:	3001      	adds	r0, #1
 8004716:	d03a      	beq.n	800478e <_malloc_r+0xea>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	442b      	add	r3, r5
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	f8d8 3000 	ldr.w	r3, [r8]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	bb62      	cbnz	r2, 8004780 <_malloc_r+0xdc>
 8004726:	f8c8 7000 	str.w	r7, [r8]
 800472a:	e00f      	b.n	800474c <_malloc_r+0xa8>
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	1b52      	subs	r2, r2, r5
 8004730:	d420      	bmi.n	8004774 <_malloc_r+0xd0>
 8004732:	2a0b      	cmp	r2, #11
 8004734:	d917      	bls.n	8004766 <_malloc_r+0xc2>
 8004736:	1961      	adds	r1, r4, r5
 8004738:	42a3      	cmp	r3, r4
 800473a:	6025      	str	r5, [r4, #0]
 800473c:	bf18      	it	ne
 800473e:	6059      	strne	r1, [r3, #4]
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	bf08      	it	eq
 8004744:	f8c8 1000 	streq.w	r1, [r8]
 8004748:	5162      	str	r2, [r4, r5]
 800474a:	604b      	str	r3, [r1, #4]
 800474c:	4630      	mov	r0, r6
 800474e:	f000 f82f 	bl	80047b0 <__malloc_unlock>
 8004752:	f104 000b 	add.w	r0, r4, #11
 8004756:	1d23      	adds	r3, r4, #4
 8004758:	f020 0007 	bic.w	r0, r0, #7
 800475c:	1ac2      	subs	r2, r0, r3
 800475e:	bf1c      	itt	ne
 8004760:	1a1b      	subne	r3, r3, r0
 8004762:	50a3      	strne	r3, [r4, r2]
 8004764:	e7af      	b.n	80046c6 <_malloc_r+0x22>
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	42a3      	cmp	r3, r4
 800476a:	bf0c      	ite	eq
 800476c:	f8c8 2000 	streq.w	r2, [r8]
 8004770:	605a      	strne	r2, [r3, #4]
 8004772:	e7eb      	b.n	800474c <_malloc_r+0xa8>
 8004774:	4623      	mov	r3, r4
 8004776:	6864      	ldr	r4, [r4, #4]
 8004778:	e7ae      	b.n	80046d8 <_malloc_r+0x34>
 800477a:	463c      	mov	r4, r7
 800477c:	687f      	ldr	r7, [r7, #4]
 800477e:	e7b6      	b.n	80046ee <_malloc_r+0x4a>
 8004780:	461a      	mov	r2, r3
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	d1fb      	bne.n	8004780 <_malloc_r+0xdc>
 8004788:	2300      	movs	r3, #0
 800478a:	6053      	str	r3, [r2, #4]
 800478c:	e7de      	b.n	800474c <_malloc_r+0xa8>
 800478e:	230c      	movs	r3, #12
 8004790:	4630      	mov	r0, r6
 8004792:	6033      	str	r3, [r6, #0]
 8004794:	f000 f80c 	bl	80047b0 <__malloc_unlock>
 8004798:	e794      	b.n	80046c4 <_malloc_r+0x20>
 800479a:	6005      	str	r5, [r0, #0]
 800479c:	e7d6      	b.n	800474c <_malloc_r+0xa8>
 800479e:	bf00      	nop
 80047a0:	200004f8 	.word	0x200004f8

080047a4 <__malloc_lock>:
 80047a4:	4801      	ldr	r0, [pc, #4]	@ (80047ac <__malloc_lock+0x8>)
 80047a6:	f7ff bf03 	b.w	80045b0 <__retarget_lock_acquire_recursive>
 80047aa:	bf00      	nop
 80047ac:	200004f0 	.word	0x200004f0

080047b0 <__malloc_unlock>:
 80047b0:	4801      	ldr	r0, [pc, #4]	@ (80047b8 <__malloc_unlock+0x8>)
 80047b2:	f7ff befe 	b.w	80045b2 <__retarget_lock_release_recursive>
 80047b6:	bf00      	nop
 80047b8:	200004f0 	.word	0x200004f0

080047bc <__ssputs_r>:
 80047bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	461f      	mov	r7, r3
 80047c2:	688e      	ldr	r6, [r1, #8]
 80047c4:	4682      	mov	sl, r0
 80047c6:	42be      	cmp	r6, r7
 80047c8:	460c      	mov	r4, r1
 80047ca:	4690      	mov	r8, r2
 80047cc:	680b      	ldr	r3, [r1, #0]
 80047ce:	d82d      	bhi.n	800482c <__ssputs_r+0x70>
 80047d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047d8:	d026      	beq.n	8004828 <__ssputs_r+0x6c>
 80047da:	6965      	ldr	r5, [r4, #20]
 80047dc:	6909      	ldr	r1, [r1, #16]
 80047de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047e2:	eba3 0901 	sub.w	r9, r3, r1
 80047e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047ea:	1c7b      	adds	r3, r7, #1
 80047ec:	444b      	add	r3, r9
 80047ee:	106d      	asrs	r5, r5, #1
 80047f0:	429d      	cmp	r5, r3
 80047f2:	bf38      	it	cc
 80047f4:	461d      	movcc	r5, r3
 80047f6:	0553      	lsls	r3, r2, #21
 80047f8:	d527      	bpl.n	800484a <__ssputs_r+0x8e>
 80047fa:	4629      	mov	r1, r5
 80047fc:	f7ff ff52 	bl	80046a4 <_malloc_r>
 8004800:	4606      	mov	r6, r0
 8004802:	b360      	cbz	r0, 800485e <__ssputs_r+0xa2>
 8004804:	464a      	mov	r2, r9
 8004806:	6921      	ldr	r1, [r4, #16]
 8004808:	f7ff fed4 	bl	80045b4 <memcpy>
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	6126      	str	r6, [r4, #16]
 800481a:	444e      	add	r6, r9
 800481c:	6026      	str	r6, [r4, #0]
 800481e:	463e      	mov	r6, r7
 8004820:	6165      	str	r5, [r4, #20]
 8004822:	eba5 0509 	sub.w	r5, r5, r9
 8004826:	60a5      	str	r5, [r4, #8]
 8004828:	42be      	cmp	r6, r7
 800482a:	d900      	bls.n	800482e <__ssputs_r+0x72>
 800482c:	463e      	mov	r6, r7
 800482e:	4632      	mov	r2, r6
 8004830:	4641      	mov	r1, r8
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	f000 faac 	bl	8004d90 <memmove>
 8004838:	2000      	movs	r0, #0
 800483a:	68a3      	ldr	r3, [r4, #8]
 800483c:	1b9b      	subs	r3, r3, r6
 800483e:	60a3      	str	r3, [r4, #8]
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	4433      	add	r3, r6
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484a:	462a      	mov	r2, r5
 800484c:	f000 fad8 	bl	8004e00 <_realloc_r>
 8004850:	4606      	mov	r6, r0
 8004852:	2800      	cmp	r0, #0
 8004854:	d1e0      	bne.n	8004818 <__ssputs_r+0x5c>
 8004856:	4650      	mov	r0, sl
 8004858:	6921      	ldr	r1, [r4, #16]
 800485a:	f7ff feb9 	bl	80045d0 <_free_r>
 800485e:	230c      	movs	r3, #12
 8004860:	f8ca 3000 	str.w	r3, [sl]
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	f04f 30ff 	mov.w	r0, #4294967295
 800486a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800486e:	81a3      	strh	r3, [r4, #12]
 8004870:	e7e9      	b.n	8004846 <__ssputs_r+0x8a>
	...

08004874 <_svfiprintf_r>:
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004878:	4698      	mov	r8, r3
 800487a:	898b      	ldrh	r3, [r1, #12]
 800487c:	4607      	mov	r7, r0
 800487e:	061b      	lsls	r3, r3, #24
 8004880:	460d      	mov	r5, r1
 8004882:	4614      	mov	r4, r2
 8004884:	b09d      	sub	sp, #116	@ 0x74
 8004886:	d510      	bpl.n	80048aa <_svfiprintf_r+0x36>
 8004888:	690b      	ldr	r3, [r1, #16]
 800488a:	b973      	cbnz	r3, 80048aa <_svfiprintf_r+0x36>
 800488c:	2140      	movs	r1, #64	@ 0x40
 800488e:	f7ff ff09 	bl	80046a4 <_malloc_r>
 8004892:	6028      	str	r0, [r5, #0]
 8004894:	6128      	str	r0, [r5, #16]
 8004896:	b930      	cbnz	r0, 80048a6 <_svfiprintf_r+0x32>
 8004898:	230c      	movs	r3, #12
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	b01d      	add	sp, #116	@ 0x74
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a6:	2340      	movs	r3, #64	@ 0x40
 80048a8:	616b      	str	r3, [r5, #20]
 80048aa:	2300      	movs	r3, #0
 80048ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ae:	2320      	movs	r3, #32
 80048b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048b4:	2330      	movs	r3, #48	@ 0x30
 80048b6:	f04f 0901 	mov.w	r9, #1
 80048ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80048be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004a58 <_svfiprintf_r+0x1e4>
 80048c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048c6:	4623      	mov	r3, r4
 80048c8:	469a      	mov	sl, r3
 80048ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ce:	b10a      	cbz	r2, 80048d4 <_svfiprintf_r+0x60>
 80048d0:	2a25      	cmp	r2, #37	@ 0x25
 80048d2:	d1f9      	bne.n	80048c8 <_svfiprintf_r+0x54>
 80048d4:	ebba 0b04 	subs.w	fp, sl, r4
 80048d8:	d00b      	beq.n	80048f2 <_svfiprintf_r+0x7e>
 80048da:	465b      	mov	r3, fp
 80048dc:	4622      	mov	r2, r4
 80048de:	4629      	mov	r1, r5
 80048e0:	4638      	mov	r0, r7
 80048e2:	f7ff ff6b 	bl	80047bc <__ssputs_r>
 80048e6:	3001      	adds	r0, #1
 80048e8:	f000 80a7 	beq.w	8004a3a <_svfiprintf_r+0x1c6>
 80048ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048ee:	445a      	add	r2, fp
 80048f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80048f2:	f89a 3000 	ldrb.w	r3, [sl]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 809f 	beq.w	8004a3a <_svfiprintf_r+0x1c6>
 80048fc:	2300      	movs	r3, #0
 80048fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004906:	f10a 0a01 	add.w	sl, sl, #1
 800490a:	9304      	str	r3, [sp, #16]
 800490c:	9307      	str	r3, [sp, #28]
 800490e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004912:	931a      	str	r3, [sp, #104]	@ 0x68
 8004914:	4654      	mov	r4, sl
 8004916:	2205      	movs	r2, #5
 8004918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491c:	484e      	ldr	r0, [pc, #312]	@ (8004a58 <_svfiprintf_r+0x1e4>)
 800491e:	f000 fa61 	bl	8004de4 <memchr>
 8004922:	9a04      	ldr	r2, [sp, #16]
 8004924:	b9d8      	cbnz	r0, 800495e <_svfiprintf_r+0xea>
 8004926:	06d0      	lsls	r0, r2, #27
 8004928:	bf44      	itt	mi
 800492a:	2320      	movmi	r3, #32
 800492c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004930:	0711      	lsls	r1, r2, #28
 8004932:	bf44      	itt	mi
 8004934:	232b      	movmi	r3, #43	@ 0x2b
 8004936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800493a:	f89a 3000 	ldrb.w	r3, [sl]
 800493e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004940:	d015      	beq.n	800496e <_svfiprintf_r+0xfa>
 8004942:	4654      	mov	r4, sl
 8004944:	2000      	movs	r0, #0
 8004946:	f04f 0c0a 	mov.w	ip, #10
 800494a:	9a07      	ldr	r2, [sp, #28]
 800494c:	4621      	mov	r1, r4
 800494e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004952:	3b30      	subs	r3, #48	@ 0x30
 8004954:	2b09      	cmp	r3, #9
 8004956:	d94b      	bls.n	80049f0 <_svfiprintf_r+0x17c>
 8004958:	b1b0      	cbz	r0, 8004988 <_svfiprintf_r+0x114>
 800495a:	9207      	str	r2, [sp, #28]
 800495c:	e014      	b.n	8004988 <_svfiprintf_r+0x114>
 800495e:	eba0 0308 	sub.w	r3, r0, r8
 8004962:	fa09 f303 	lsl.w	r3, r9, r3
 8004966:	4313      	orrs	r3, r2
 8004968:	46a2      	mov	sl, r4
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	e7d2      	b.n	8004914 <_svfiprintf_r+0xa0>
 800496e:	9b03      	ldr	r3, [sp, #12]
 8004970:	1d19      	adds	r1, r3, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	9103      	str	r1, [sp, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	bfbb      	ittet	lt
 800497a:	425b      	neglt	r3, r3
 800497c:	f042 0202 	orrlt.w	r2, r2, #2
 8004980:	9307      	strge	r3, [sp, #28]
 8004982:	9307      	strlt	r3, [sp, #28]
 8004984:	bfb8      	it	lt
 8004986:	9204      	strlt	r2, [sp, #16]
 8004988:	7823      	ldrb	r3, [r4, #0]
 800498a:	2b2e      	cmp	r3, #46	@ 0x2e
 800498c:	d10a      	bne.n	80049a4 <_svfiprintf_r+0x130>
 800498e:	7863      	ldrb	r3, [r4, #1]
 8004990:	2b2a      	cmp	r3, #42	@ 0x2a
 8004992:	d132      	bne.n	80049fa <_svfiprintf_r+0x186>
 8004994:	9b03      	ldr	r3, [sp, #12]
 8004996:	3402      	adds	r4, #2
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	9203      	str	r2, [sp, #12]
 800499e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049a2:	9305      	str	r3, [sp, #20]
 80049a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004a5c <_svfiprintf_r+0x1e8>
 80049a8:	2203      	movs	r2, #3
 80049aa:	4650      	mov	r0, sl
 80049ac:	7821      	ldrb	r1, [r4, #0]
 80049ae:	f000 fa19 	bl	8004de4 <memchr>
 80049b2:	b138      	cbz	r0, 80049c4 <_svfiprintf_r+0x150>
 80049b4:	2240      	movs	r2, #64	@ 0x40
 80049b6:	9b04      	ldr	r3, [sp, #16]
 80049b8:	eba0 000a 	sub.w	r0, r0, sl
 80049bc:	4082      	lsls	r2, r0
 80049be:	4313      	orrs	r3, r2
 80049c0:	3401      	adds	r4, #1
 80049c2:	9304      	str	r3, [sp, #16]
 80049c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c8:	2206      	movs	r2, #6
 80049ca:	4825      	ldr	r0, [pc, #148]	@ (8004a60 <_svfiprintf_r+0x1ec>)
 80049cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049d0:	f000 fa08 	bl	8004de4 <memchr>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d036      	beq.n	8004a46 <_svfiprintf_r+0x1d2>
 80049d8:	4b22      	ldr	r3, [pc, #136]	@ (8004a64 <_svfiprintf_r+0x1f0>)
 80049da:	bb1b      	cbnz	r3, 8004a24 <_svfiprintf_r+0x1b0>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	3307      	adds	r3, #7
 80049e0:	f023 0307 	bic.w	r3, r3, #7
 80049e4:	3308      	adds	r3, #8
 80049e6:	9303      	str	r3, [sp, #12]
 80049e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ea:	4433      	add	r3, r6
 80049ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ee:	e76a      	b.n	80048c6 <_svfiprintf_r+0x52>
 80049f0:	460c      	mov	r4, r1
 80049f2:	2001      	movs	r0, #1
 80049f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f8:	e7a8      	b.n	800494c <_svfiprintf_r+0xd8>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f04f 0c0a 	mov.w	ip, #10
 8004a00:	4619      	mov	r1, r3
 8004a02:	3401      	adds	r4, #1
 8004a04:	9305      	str	r3, [sp, #20]
 8004a06:	4620      	mov	r0, r4
 8004a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a0c:	3a30      	subs	r2, #48	@ 0x30
 8004a0e:	2a09      	cmp	r2, #9
 8004a10:	d903      	bls.n	8004a1a <_svfiprintf_r+0x1a6>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0c6      	beq.n	80049a4 <_svfiprintf_r+0x130>
 8004a16:	9105      	str	r1, [sp, #20]
 8004a18:	e7c4      	b.n	80049a4 <_svfiprintf_r+0x130>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a22:	e7f0      	b.n	8004a06 <_svfiprintf_r+0x192>
 8004a24:	ab03      	add	r3, sp, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <_svfiprintf_r+0x1f4>)
 8004a2e:	a904      	add	r1, sp, #16
 8004a30:	f3af 8000 	nop.w
 8004a34:	1c42      	adds	r2, r0, #1
 8004a36:	4606      	mov	r6, r0
 8004a38:	d1d6      	bne.n	80049e8 <_svfiprintf_r+0x174>
 8004a3a:	89ab      	ldrh	r3, [r5, #12]
 8004a3c:	065b      	lsls	r3, r3, #25
 8004a3e:	f53f af2d 	bmi.w	800489c <_svfiprintf_r+0x28>
 8004a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a44:	e72c      	b.n	80048a0 <_svfiprintf_r+0x2c>
 8004a46:	ab03      	add	r3, sp, #12
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	462a      	mov	r2, r5
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <_svfiprintf_r+0x1f4>)
 8004a50:	a904      	add	r1, sp, #16
 8004a52:	f000 f87d 	bl	8004b50 <_printf_i>
 8004a56:	e7ed      	b.n	8004a34 <_svfiprintf_r+0x1c0>
 8004a58:	08004f76 	.word	0x08004f76
 8004a5c:	08004f7c 	.word	0x08004f7c
 8004a60:	08004f80 	.word	0x08004f80
 8004a64:	00000000 	.word	0x00000000
 8004a68:	080047bd 	.word	0x080047bd

08004a6c <_printf_common>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	4616      	mov	r6, r2
 8004a72:	4698      	mov	r8, r3
 8004a74:	688a      	ldr	r2, [r1, #8]
 8004a76:	690b      	ldr	r3, [r1, #16]
 8004a78:	4607      	mov	r7, r0
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	bfb8      	it	lt
 8004a7e:	4613      	movlt	r3, r2
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a86:	460c      	mov	r4, r1
 8004a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a8c:	b10a      	cbz	r2, 8004a92 <_printf_common+0x26>
 8004a8e:	3301      	adds	r3, #1
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	0699      	lsls	r1, r3, #26
 8004a96:	bf42      	ittt	mi
 8004a98:	6833      	ldrmi	r3, [r6, #0]
 8004a9a:	3302      	addmi	r3, #2
 8004a9c:	6033      	strmi	r3, [r6, #0]
 8004a9e:	6825      	ldr	r5, [r4, #0]
 8004aa0:	f015 0506 	ands.w	r5, r5, #6
 8004aa4:	d106      	bne.n	8004ab4 <_printf_common+0x48>
 8004aa6:	f104 0a19 	add.w	sl, r4, #25
 8004aaa:	68e3      	ldr	r3, [r4, #12]
 8004aac:	6832      	ldr	r2, [r6, #0]
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	42ab      	cmp	r3, r5
 8004ab2:	dc2b      	bgt.n	8004b0c <_printf_common+0xa0>
 8004ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ab8:	6822      	ldr	r2, [r4, #0]
 8004aba:	3b00      	subs	r3, #0
 8004abc:	bf18      	it	ne
 8004abe:	2301      	movne	r3, #1
 8004ac0:	0692      	lsls	r2, r2, #26
 8004ac2:	d430      	bmi.n	8004b26 <_printf_common+0xba>
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004acc:	47c8      	blx	r9
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d023      	beq.n	8004b1a <_printf_common+0xae>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	6922      	ldr	r2, [r4, #16]
 8004ad6:	f003 0306 	and.w	r3, r3, #6
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	bf14      	ite	ne
 8004ade:	2500      	movne	r5, #0
 8004ae0:	6833      	ldreq	r3, [r6, #0]
 8004ae2:	f04f 0600 	mov.w	r6, #0
 8004ae6:	bf08      	it	eq
 8004ae8:	68e5      	ldreq	r5, [r4, #12]
 8004aea:	f104 041a 	add.w	r4, r4, #26
 8004aee:	bf08      	it	eq
 8004af0:	1aed      	subeq	r5, r5, r3
 8004af2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004af6:	bf08      	it	eq
 8004af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bfc4      	itt	gt
 8004b00:	1a9b      	subgt	r3, r3, r2
 8004b02:	18ed      	addgt	r5, r5, r3
 8004b04:	42b5      	cmp	r5, r6
 8004b06:	d11a      	bne.n	8004b3e <_printf_common+0xd2>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e008      	b.n	8004b1e <_printf_common+0xb2>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4652      	mov	r2, sl
 8004b10:	4641      	mov	r1, r8
 8004b12:	4638      	mov	r0, r7
 8004b14:	47c8      	blx	r9
 8004b16:	3001      	adds	r0, #1
 8004b18:	d103      	bne.n	8004b22 <_printf_common+0xb6>
 8004b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b22:	3501      	adds	r5, #1
 8004b24:	e7c1      	b.n	8004aaa <_printf_common+0x3e>
 8004b26:	2030      	movs	r0, #48	@ 0x30
 8004b28:	18e1      	adds	r1, r4, r3
 8004b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b34:	4422      	add	r2, r4
 8004b36:	3302      	adds	r3, #2
 8004b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b3c:	e7c2      	b.n	8004ac4 <_printf_common+0x58>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4622      	mov	r2, r4
 8004b42:	4641      	mov	r1, r8
 8004b44:	4638      	mov	r0, r7
 8004b46:	47c8      	blx	r9
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d0e6      	beq.n	8004b1a <_printf_common+0xae>
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7d9      	b.n	8004b04 <_printf_common+0x98>

08004b50 <_printf_i>:
 8004b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	7e0f      	ldrb	r7, [r1, #24]
 8004b56:	4691      	mov	r9, r2
 8004b58:	2f78      	cmp	r7, #120	@ 0x78
 8004b5a:	4680      	mov	r8, r0
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	469a      	mov	sl, r3
 8004b60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b66:	d807      	bhi.n	8004b78 <_printf_i+0x28>
 8004b68:	2f62      	cmp	r7, #98	@ 0x62
 8004b6a:	d80a      	bhi.n	8004b82 <_printf_i+0x32>
 8004b6c:	2f00      	cmp	r7, #0
 8004b6e:	f000 80d3 	beq.w	8004d18 <_printf_i+0x1c8>
 8004b72:	2f58      	cmp	r7, #88	@ 0x58
 8004b74:	f000 80ba 	beq.w	8004cec <_printf_i+0x19c>
 8004b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b80:	e03a      	b.n	8004bf8 <_printf_i+0xa8>
 8004b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b86:	2b15      	cmp	r3, #21
 8004b88:	d8f6      	bhi.n	8004b78 <_printf_i+0x28>
 8004b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b90 <_printf_i+0x40>)
 8004b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b90:	08004be9 	.word	0x08004be9
 8004b94:	08004bfd 	.word	0x08004bfd
 8004b98:	08004b79 	.word	0x08004b79
 8004b9c:	08004b79 	.word	0x08004b79
 8004ba0:	08004b79 	.word	0x08004b79
 8004ba4:	08004b79 	.word	0x08004b79
 8004ba8:	08004bfd 	.word	0x08004bfd
 8004bac:	08004b79 	.word	0x08004b79
 8004bb0:	08004b79 	.word	0x08004b79
 8004bb4:	08004b79 	.word	0x08004b79
 8004bb8:	08004b79 	.word	0x08004b79
 8004bbc:	08004cff 	.word	0x08004cff
 8004bc0:	08004c27 	.word	0x08004c27
 8004bc4:	08004cb9 	.word	0x08004cb9
 8004bc8:	08004b79 	.word	0x08004b79
 8004bcc:	08004b79 	.word	0x08004b79
 8004bd0:	08004d21 	.word	0x08004d21
 8004bd4:	08004b79 	.word	0x08004b79
 8004bd8:	08004c27 	.word	0x08004c27
 8004bdc:	08004b79 	.word	0x08004b79
 8004be0:	08004b79 	.word	0x08004b79
 8004be4:	08004cc1 	.word	0x08004cc1
 8004be8:	6833      	ldr	r3, [r6, #0]
 8004bea:	1d1a      	adds	r2, r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6032      	str	r2, [r6, #0]
 8004bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e09e      	b.n	8004d3a <_printf_i+0x1ea>
 8004bfc:	6833      	ldr	r3, [r6, #0]
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	1d19      	adds	r1, r3, #4
 8004c02:	6031      	str	r1, [r6, #0]
 8004c04:	0606      	lsls	r6, r0, #24
 8004c06:	d501      	bpl.n	8004c0c <_printf_i+0xbc>
 8004c08:	681d      	ldr	r5, [r3, #0]
 8004c0a:	e003      	b.n	8004c14 <_printf_i+0xc4>
 8004c0c:	0645      	lsls	r5, r0, #25
 8004c0e:	d5fb      	bpl.n	8004c08 <_printf_i+0xb8>
 8004c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	da03      	bge.n	8004c20 <_printf_i+0xd0>
 8004c18:	232d      	movs	r3, #45	@ 0x2d
 8004c1a:	426d      	negs	r5, r5
 8004c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c20:	230a      	movs	r3, #10
 8004c22:	4859      	ldr	r0, [pc, #356]	@ (8004d88 <_printf_i+0x238>)
 8004c24:	e011      	b.n	8004c4a <_printf_i+0xfa>
 8004c26:	6821      	ldr	r1, [r4, #0]
 8004c28:	6833      	ldr	r3, [r6, #0]
 8004c2a:	0608      	lsls	r0, r1, #24
 8004c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c30:	d402      	bmi.n	8004c38 <_printf_i+0xe8>
 8004c32:	0649      	lsls	r1, r1, #25
 8004c34:	bf48      	it	mi
 8004c36:	b2ad      	uxthmi	r5, r5
 8004c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c3a:	6033      	str	r3, [r6, #0]
 8004c3c:	bf14      	ite	ne
 8004c3e:	230a      	movne	r3, #10
 8004c40:	2308      	moveq	r3, #8
 8004c42:	4851      	ldr	r0, [pc, #324]	@ (8004d88 <_printf_i+0x238>)
 8004c44:	2100      	movs	r1, #0
 8004c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c4a:	6866      	ldr	r6, [r4, #4]
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	bfa8      	it	ge
 8004c50:	6821      	ldrge	r1, [r4, #0]
 8004c52:	60a6      	str	r6, [r4, #8]
 8004c54:	bfa4      	itt	ge
 8004c56:	f021 0104 	bicge.w	r1, r1, #4
 8004c5a:	6021      	strge	r1, [r4, #0]
 8004c5c:	b90d      	cbnz	r5, 8004c62 <_printf_i+0x112>
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	d04b      	beq.n	8004cfa <_printf_i+0x1aa>
 8004c62:	4616      	mov	r6, r2
 8004c64:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c68:	fb03 5711 	mls	r7, r3, r1, r5
 8004c6c:	5dc7      	ldrb	r7, [r0, r7]
 8004c6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c72:	462f      	mov	r7, r5
 8004c74:	42bb      	cmp	r3, r7
 8004c76:	460d      	mov	r5, r1
 8004c78:	d9f4      	bls.n	8004c64 <_printf_i+0x114>
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d10b      	bne.n	8004c96 <_printf_i+0x146>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	07df      	lsls	r7, r3, #31
 8004c82:	d508      	bpl.n	8004c96 <_printf_i+0x146>
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	6861      	ldr	r1, [r4, #4]
 8004c88:	4299      	cmp	r1, r3
 8004c8a:	bfde      	ittt	le
 8004c8c:	2330      	movle	r3, #48	@ 0x30
 8004c8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c96:	1b92      	subs	r2, r2, r6
 8004c98:	6122      	str	r2, [r4, #16]
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	f8cd a000 	str.w	sl, [sp]
 8004ca4:	aa03      	add	r2, sp, #12
 8004ca6:	f7ff fee1 	bl	8004a6c <_printf_common>
 8004caa:	3001      	adds	r0, #1
 8004cac:	d14a      	bne.n	8004d44 <_printf_i+0x1f4>
 8004cae:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb2:	b004      	add	sp, #16
 8004cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	f043 0320 	orr.w	r3, r3, #32
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	2778      	movs	r7, #120	@ 0x78
 8004cc2:	4832      	ldr	r0, [pc, #200]	@ (8004d8c <_printf_i+0x23c>)
 8004cc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	6831      	ldr	r1, [r6, #0]
 8004ccc:	061f      	lsls	r7, r3, #24
 8004cce:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cd2:	d402      	bmi.n	8004cda <_printf_i+0x18a>
 8004cd4:	065f      	lsls	r7, r3, #25
 8004cd6:	bf48      	it	mi
 8004cd8:	b2ad      	uxthmi	r5, r5
 8004cda:	6031      	str	r1, [r6, #0]
 8004cdc:	07d9      	lsls	r1, r3, #31
 8004cde:	bf44      	itt	mi
 8004ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ce4:	6023      	strmi	r3, [r4, #0]
 8004ce6:	b11d      	cbz	r5, 8004cf0 <_printf_i+0x1a0>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	e7ab      	b.n	8004c44 <_printf_i+0xf4>
 8004cec:	4826      	ldr	r0, [pc, #152]	@ (8004d88 <_printf_i+0x238>)
 8004cee:	e7e9      	b.n	8004cc4 <_printf_i+0x174>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f023 0320 	bic.w	r3, r3, #32
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	e7f6      	b.n	8004ce8 <_printf_i+0x198>
 8004cfa:	4616      	mov	r6, r2
 8004cfc:	e7bd      	b.n	8004c7a <_printf_i+0x12a>
 8004cfe:	6833      	ldr	r3, [r6, #0]
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	1d18      	adds	r0, r3, #4
 8004d04:	6961      	ldr	r1, [r4, #20]
 8004d06:	6030      	str	r0, [r6, #0]
 8004d08:	062e      	lsls	r6, r5, #24
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	d501      	bpl.n	8004d12 <_printf_i+0x1c2>
 8004d0e:	6019      	str	r1, [r3, #0]
 8004d10:	e002      	b.n	8004d18 <_printf_i+0x1c8>
 8004d12:	0668      	lsls	r0, r5, #25
 8004d14:	d5fb      	bpl.n	8004d0e <_printf_i+0x1be>
 8004d16:	8019      	strh	r1, [r3, #0]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4616      	mov	r6, r2
 8004d1c:	6123      	str	r3, [r4, #16]
 8004d1e:	e7bc      	b.n	8004c9a <_printf_i+0x14a>
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	2100      	movs	r1, #0
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	6032      	str	r2, [r6, #0]
 8004d28:	681e      	ldr	r6, [r3, #0]
 8004d2a:	6862      	ldr	r2, [r4, #4]
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	f000 f859 	bl	8004de4 <memchr>
 8004d32:	b108      	cbz	r0, 8004d38 <_printf_i+0x1e8>
 8004d34:	1b80      	subs	r0, r0, r6
 8004d36:	6060      	str	r0, [r4, #4]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d42:	e7aa      	b.n	8004c9a <_printf_i+0x14a>
 8004d44:	4632      	mov	r2, r6
 8004d46:	4649      	mov	r1, r9
 8004d48:	4640      	mov	r0, r8
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	47d0      	blx	sl
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d0ad      	beq.n	8004cae <_printf_i+0x15e>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	079b      	lsls	r3, r3, #30
 8004d56:	d413      	bmi.n	8004d80 <_printf_i+0x230>
 8004d58:	68e0      	ldr	r0, [r4, #12]
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	4298      	cmp	r0, r3
 8004d5e:	bfb8      	it	lt
 8004d60:	4618      	movlt	r0, r3
 8004d62:	e7a6      	b.n	8004cb2 <_printf_i+0x162>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4632      	mov	r2, r6
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	47d0      	blx	sl
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d09d      	beq.n	8004cae <_printf_i+0x15e>
 8004d72:	3501      	adds	r5, #1
 8004d74:	68e3      	ldr	r3, [r4, #12]
 8004d76:	9903      	ldr	r1, [sp, #12]
 8004d78:	1a5b      	subs	r3, r3, r1
 8004d7a:	42ab      	cmp	r3, r5
 8004d7c:	dcf2      	bgt.n	8004d64 <_printf_i+0x214>
 8004d7e:	e7eb      	b.n	8004d58 <_printf_i+0x208>
 8004d80:	2500      	movs	r5, #0
 8004d82:	f104 0619 	add.w	r6, r4, #25
 8004d86:	e7f5      	b.n	8004d74 <_printf_i+0x224>
 8004d88:	08004f87 	.word	0x08004f87
 8004d8c:	08004f98 	.word	0x08004f98

08004d90 <memmove>:
 8004d90:	4288      	cmp	r0, r1
 8004d92:	b510      	push	{r4, lr}
 8004d94:	eb01 0402 	add.w	r4, r1, r2
 8004d98:	d902      	bls.n	8004da0 <memmove+0x10>
 8004d9a:	4284      	cmp	r4, r0
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	d807      	bhi.n	8004db0 <memmove+0x20>
 8004da0:	1e43      	subs	r3, r0, #1
 8004da2:	42a1      	cmp	r1, r4
 8004da4:	d008      	beq.n	8004db8 <memmove+0x28>
 8004da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dae:	e7f8      	b.n	8004da2 <memmove+0x12>
 8004db0:	4601      	mov	r1, r0
 8004db2:	4402      	add	r2, r0
 8004db4:	428a      	cmp	r2, r1
 8004db6:	d100      	bne.n	8004dba <memmove+0x2a>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dc2:	e7f7      	b.n	8004db4 <memmove+0x24>

08004dc4 <_sbrk_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4d05      	ldr	r5, [pc, #20]	@ (8004de0 <_sbrk_r+0x1c>)
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc fd04 	bl	80017dc <_sbrk>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_sbrk_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_sbrk_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200004ec 	.word	0x200004ec

08004de4 <memchr>:
 8004de4:	4603      	mov	r3, r0
 8004de6:	b510      	push	{r4, lr}
 8004de8:	b2c9      	uxtb	r1, r1
 8004dea:	4402      	add	r2, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	4618      	mov	r0, r3
 8004df0:	d101      	bne.n	8004df6 <memchr+0x12>
 8004df2:	2000      	movs	r0, #0
 8004df4:	e003      	b.n	8004dfe <memchr+0x1a>
 8004df6:	7804      	ldrb	r4, [r0, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	428c      	cmp	r4, r1
 8004dfc:	d1f6      	bne.n	8004dec <memchr+0x8>
 8004dfe:	bd10      	pop	{r4, pc}

08004e00 <_realloc_r>:
 8004e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	4680      	mov	r8, r0
 8004e06:	4615      	mov	r5, r2
 8004e08:	460c      	mov	r4, r1
 8004e0a:	b921      	cbnz	r1, 8004e16 <_realloc_r+0x16>
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e12:	f7ff bc47 	b.w	80046a4 <_malloc_r>
 8004e16:	b92a      	cbnz	r2, 8004e24 <_realloc_r+0x24>
 8004e18:	f7ff fbda 	bl	80045d0 <_free_r>
 8004e1c:	2400      	movs	r4, #0
 8004e1e:	4620      	mov	r0, r4
 8004e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e24:	f000 f81a 	bl	8004e5c <_malloc_usable_size_r>
 8004e28:	4285      	cmp	r5, r0
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	d802      	bhi.n	8004e34 <_realloc_r+0x34>
 8004e2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e32:	d8f4      	bhi.n	8004e1e <_realloc_r+0x1e>
 8004e34:	4629      	mov	r1, r5
 8004e36:	4640      	mov	r0, r8
 8004e38:	f7ff fc34 	bl	80046a4 <_malloc_r>
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d0ec      	beq.n	8004e1c <_realloc_r+0x1c>
 8004e42:	42b5      	cmp	r5, r6
 8004e44:	462a      	mov	r2, r5
 8004e46:	4621      	mov	r1, r4
 8004e48:	bf28      	it	cs
 8004e4a:	4632      	movcs	r2, r6
 8004e4c:	f7ff fbb2 	bl	80045b4 <memcpy>
 8004e50:	4621      	mov	r1, r4
 8004e52:	4640      	mov	r0, r8
 8004e54:	f7ff fbbc 	bl	80045d0 <_free_r>
 8004e58:	463c      	mov	r4, r7
 8004e5a:	e7e0      	b.n	8004e1e <_realloc_r+0x1e>

08004e5c <_malloc_usable_size_r>:
 8004e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e60:	1f18      	subs	r0, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bfbc      	itt	lt
 8004e66:	580b      	ldrlt	r3, [r1, r0]
 8004e68:	18c0      	addlt	r0, r0, r3
 8004e6a:	4770      	bx	lr

08004e6c <_init>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	bf00      	nop
 8004e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e72:	bc08      	pop	{r3}
 8004e74:	469e      	mov	lr, r3
 8004e76:	4770      	bx	lr

08004e78 <_fini>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr
>>>>>>> develop
