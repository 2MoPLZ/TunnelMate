
STM32_act.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004f08  08004f08  00005f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005030  08005030  000070c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005030  08005030  000070c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005030  08005030  000070c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005034  08005034  00006034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08005038  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200000c8  08005100  000070c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08005100  00007500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0ed  00000000  00000000  000070f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ea  00000000  00000000  000161de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00018ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae6  00000000  00000000  000198e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c9c  00000000  00000000  0001a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011145  00000000  00000000  00032062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a674  00000000  00000000  000431a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd81b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e04  00000000  00000000  000cd860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d1664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ef0 	.word	0x08004ef0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08004ef0 	.word	0x08004ef0

0800014c <initBuzzer>:
#define C5_FREQ  523
#define WARNING1_FREQ  500
#define WARNING2_FREQ  800

void initBuzzer(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000150:	2100      	movs	r1, #0
 8000152:	4802      	ldr	r0, [pc, #8]	@ (800015c <initBuzzer+0x10>)
 8000154:	f002 fcf4 	bl	8002b40 <HAL_TIM_PWM_Start>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	20000174 	.word	0x20000174

08000160 <setVolumeBuzzer>:


void setVolumeBuzzer(uint8_t volume)
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse = (htim3.Init.Period * volume) / 100;
 800016a:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <setVolumeBuzzer+0x30>)
 800016c:	68db      	ldr	r3, [r3, #12]
 800016e:	79fa      	ldrb	r2, [r7, #7]
 8000170:	fb02 f303 	mul.w	r3, r2, r3
 8000174:	4a07      	ldr	r2, [pc, #28]	@ (8000194 <setVolumeBuzzer+0x34>)
 8000176:	fba2 2303 	umull	r2, r3, r2, r3
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 800017e:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <setVolumeBuzzer+0x30>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	68fa      	ldr	r2, [r7, #12]
 8000184:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000174 	.word	0x20000174
 8000194:	51eb851f 	.word	0x51eb851f

08000198 <setFrequencyBuzzer>:

void setFrequencyBuzzer(uint32_t frequency)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    uint32_t period = (SystemCoreClock / (htim3.Init.Prescaler + 1)) / frequency;
 80001a0:	4b0e      	ldr	r3, [pc, #56]	@ (80001dc <setFrequencyBuzzer+0x44>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	4b0e      	ldr	r3, [pc, #56]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	3301      	adds	r3, #1
 80001aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001b4:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim3, period - 1);
 80001b6:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	68fa      	ldr	r2, [r7, #12]
 80001bc:	3a01      	subs	r2, #1
 80001be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	3b01      	subs	r3, #1
 80001c4:	4a06      	ldr	r2, [pc, #24]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001c6:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, period / 2);
 80001c8:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	68fa      	ldr	r2, [r7, #12]
 80001ce:	0852      	lsrs	r2, r2, #1
 80001d0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	20000174 	.word	0x20000174

080001e4 <onBuzzer>:

void onBuzzer(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    setFrequencyBuzzer(WARNING2_FREQ);
 80001e8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80001ec:	f7ff ffd4 	bl	8000198 <setFrequencyBuzzer>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <offBuzzer>:


void offBuzzer(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	setVolumeBuzzer(0);
 80001f8:	2000      	movs	r0, #0
 80001fa:	f7ff ffb1 	bl	8000160 <setVolumeBuzzer>
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <initFan>:
#include "fan_driver.h"

extern TIM_HandleTypeDef htim4;

void initFan(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000208:	2108      	movs	r1, #8
 800020a:	4802      	ldr	r0, [pc, #8]	@ (8000214 <initFan+0x10>)
 800020c:	f002 fc98 	bl	8002b40 <HAL_TIM_PWM_Start>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200001bc 	.word	0x200001bc

08000218 <setInternalFan>:


void setInternalFan(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000222:	4805      	ldr	r0, [pc, #20]	@ (8000238 <setInternalFan+0x20>)
 8000224:	f001 ff50 	bl	80020c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800022e:	4802      	ldr	r0, [pc, #8]	@ (8000238 <setInternalFan+0x20>)
 8000230:	f001 ff4a 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40011000 	.word	0x40011000

0800023c <stopFan>:


void stopFan(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000246:	4802      	ldr	r0, [pc, #8]	@ (8000250 <stopFan+0x14>)
 8000248:	f001 ff3e 	bl	80020c8 <HAL_GPIO_WritePin>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40011000 	.word	0x40011000

08000254 <setSpeedFan>:

void setSpeedFan(uint16_t speed)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	80fb      	strh	r3, [r7, #6]
	  if (speed > 999) speed = 999;
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000264:	d302      	bcc.n	800026c <setSpeedFan+0x18>
 8000266:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800026a:	80fb      	strh	r3, [r7, #6]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, speed);
 800026c:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <setSpeedFan+0x2c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	200001bc 	.word	0x200001bc

08000284 <setLevelFan>:

void setLevelFan(uint8_t level)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
    switch (level)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b03      	cmp	r3, #3
 8000292:	d826      	bhi.n	80002e2 <setLevelFan+0x5e>
 8000294:	a201      	add	r2, pc, #4	@ (adr r2, 800029c <setLevelFan+0x18>)
 8000296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029a:	bf00      	nop
 800029c:	080002ad 	.word	0x080002ad
 80002a0:	080002b9 	.word	0x080002b9
 80002a4:	080002c7 	.word	0x080002c7
 80002a8:	080002d5 	.word	0x080002d5
    {
        case 0:
        	stopFan();
 80002ac:	f7ff ffc6 	bl	800023c <stopFan>
            setSpeedFan(0);
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffcf 	bl	8000254 <setSpeedFan>
            break;
 80002b6:	e01a      	b.n	80002ee <setLevelFan+0x6a>
        case 1:
        	setInternalFan();
 80002b8:	f7ff ffae 	bl	8000218 <setInternalFan>
            setSpeedFan(350);
 80002bc:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80002c0:	f7ff ffc8 	bl	8000254 <setSpeedFan>
            break;
 80002c4:	e013      	b.n	80002ee <setLevelFan+0x6a>
        case 2:
        	setInternalFan();
 80002c6:	f7ff ffa7 	bl	8000218 <setInternalFan>
            setSpeedFan(500);
 80002ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ce:	f7ff ffc1 	bl	8000254 <setSpeedFan>
            break;
 80002d2:	e00c      	b.n	80002ee <setLevelFan+0x6a>
        case 3:
        	setInternalFan();
 80002d4:	f7ff ffa0 	bl	8000218 <setInternalFan>
            setSpeedFan(999);
 80002d8:	f240 30e7 	movw	r0, #999	@ 0x3e7
 80002dc:	f7ff ffba 	bl	8000254 <setSpeedFan>
            break;
 80002e0:	e005      	b.n	80002ee <setLevelFan+0x6a>
        default:
        	stopFan();
 80002e2:	f7ff ffab 	bl	800023c <stopFan>
            setSpeedFan(0);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f7ff ffb4 	bl	8000254 <setSpeedFan>
            break;
 80002ec:	bf00      	nop
    }
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop

080002f8 <onHeadLight>:

#include "led_driver.h"

//단색 LED
void onHeadLight(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEAD_LIGHT_PORT,HEAD_LIGHT_PIN,GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2180      	movs	r1, #128	@ 0x80
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <onHeadLight+0x14>)
 8000302:	f001 fee1 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40010800 	.word	0x40010800

08000310 <offHeadLight>:

void offHeadLight(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEAD_LIGHT_PORT,HEAD_LIGHT_PIN,GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2180      	movs	r1, #128	@ 0x80
 8000318:	4802      	ldr	r0, [pc, #8]	@ (8000324 <offHeadLight+0x14>)
 800031a:	f001 fed5 	bl	80020c8 <HAL_GPIO_WritePin>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40010800 	.word	0x40010800

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032c:	f001 fb26 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000330:	f000 f842 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000334:	f000 faba 	bl	80008ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000338:	f000 f878 	bl	800042c <MX_TIM1_Init>
  MX_TIM3_Init();
 800033c:	f000 f97c 	bl	8000638 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000340:	f000 f916 	bl	8000570 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000344:	f000 f9fa 	bl	800073c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000348:	f000 fa5c 	bl	8000804 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800034c:	f000 fa84 	bl	8000858 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initBuzzer();
 8000350:	f7ff fefc 	bl	800014c <initBuzzer>
  initFan();
 8000354:	f7ff ff56 	bl	8000204 <initFan>
  initRgb();
 8000358:	f000 fe22 	bl	8000fa0 <initRgb>
  initServo();
 800035c:	f000 ff3c 	bl	80011d8 <initServo>
  initControlValue();
 8000360:	f000 fc5c 	bl	8000c1c <initControlValue>


  initScheduler();
 8000364:	f000 fefc 	bl	8001160 <initScheduler>
  //HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE);
  if(HAL_UART_Receive_IT(&huart1,rx_buffer_1,1) != HAL_OK){
 8000368:	2201      	movs	r2, #1
 800036a:	490f      	ldr	r1, [pc, #60]	@ (80003a8 <main+0x80>)
 800036c:	480f      	ldr	r0, [pc, #60]	@ (80003ac <main+0x84>)
 800036e:	f003 fb73 	bl	8003a58 <HAL_UART_Receive_IT>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <main+0x54>
  	  Error_Handler();
 8000378:	f000 fe0c 	bl	8000f94 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(packetReceived == 1)
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <main+0x88>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10e      	bne.n	80003a2 <main+0x7a>
    {
      packetReceived = 0;
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <main+0x88>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
      handlePacket();
 800038a:	f000 fbbf 	bl	8000b0c <handlePacket>
      printActuatorPacket();
 800038e:	f000 fb11 	bl	80009b4 <printActuatorPacket>
      RxStage = START;
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <main+0x8c>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart1,rx_buffer_1,1);
 8000398:	2201      	movs	r2, #1
 800039a:	4903      	ldr	r1, [pc, #12]	@ (80003a8 <main+0x80>)
 800039c:	4803      	ldr	r0, [pc, #12]	@ (80003ac <main+0x84>)
 800039e:	f003 fb5b 	bl	8003a58 <HAL_UART_Receive_IT>
    }
    scheduler();
 80003a2:	f000 fee7 	bl	8001174 <scheduler>
    if(packetReceived == 1)
 80003a6:	e7e9      	b.n	800037c <main+0x54>
 80003a8:	20000294 	.word	0x20000294
 80003ac:	20000204 	.word	0x20000204
 80003b0:	2000039f 	.word	0x2000039f
 80003b4:	20000048 	.word	0x20000048

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	@ 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	@ 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 f902 	bl	80045d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003de:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fea5 	bl	800213c <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x44>
  {
    Error_Handler();
 80003f8:	f000 fdcc 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	230f      	movs	r3, #15
 80003fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000400:	2301      	movs	r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f002 f913 	bl	8002640 <HAL_RCC_ClockConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000420:	f000 fdb8 	bl	8000f94 <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	3740      	adds	r7, #64	@ 0x40
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b096      	sub	sp, #88	@ 0x58
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000432:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000440:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800044a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2220      	movs	r2, #32
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f004 f8b3 	bl	80045d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800046a:	4b3f      	ldr	r3, [pc, #252]	@ (8000568 <MX_TIM1_Init+0x13c>)
 800046c:	4a3f      	ldr	r2, [pc, #252]	@ (800056c <MX_TIM1_Init+0x140>)
 800046e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000470:	4b3d      	ldr	r3, [pc, #244]	@ (8000568 <MX_TIM1_Init+0x13c>)
 8000472:	220f      	movs	r2, #15
 8000474:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000476:	4b3c      	ldr	r3, [pc, #240]	@ (8000568 <MX_TIM1_Init+0x13c>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800047c:	4b3a      	ldr	r3, [pc, #232]	@ (8000568 <MX_TIM1_Init+0x13c>)
 800047e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000482:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b38      	ldr	r3, [pc, #224]	@ (8000568 <MX_TIM1_Init+0x13c>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800048a:	4b37      	ldr	r3, [pc, #220]	@ (8000568 <MX_TIM1_Init+0x13c>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b35      	ldr	r3, [pc, #212]	@ (8000568 <MX_TIM1_Init+0x13c>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000496:	4834      	ldr	r0, [pc, #208]	@ (8000568 <MX_TIM1_Init+0x13c>)
 8000498:	f002 fa60 	bl	800295c <HAL_TIM_Base_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80004a2:	f000 fd77 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004b0:	4619      	mov	r1, r3
 80004b2:	482d      	ldr	r0, [pc, #180]	@ (8000568 <MX_TIM1_Init+0x13c>)
 80004b4:	f002 fd98 	bl	8002fe8 <HAL_TIM_ConfigClockSource>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004be:	f000 fd69 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004c2:	4829      	ldr	r0, [pc, #164]	@ (8000568 <MX_TIM1_Init+0x13c>)
 80004c4:	f002 faec 	bl	8002aa0 <HAL_TIM_PWM_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004ce:	f000 fd61 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d2:	2300      	movs	r3, #0
 80004d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004de:	4619      	mov	r1, r3
 80004e0:	4821      	ldr	r0, [pc, #132]	@ (8000568 <MX_TIM1_Init+0x13c>)
 80004e2:	f003 f91d 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004ec:	f000 fd52 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f0:	2360      	movs	r3, #96	@ 0x60
 80004f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 850;
 80004f4:	f240 3352 	movw	r3, #850	@ 0x352
 80004f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fa:	2300      	movs	r3, #0
 80004fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004fe:	2300      	movs	r3, #0
 8000500:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000502:	2300      	movs	r3, #0
 8000504:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800050a:	2300      	movs	r3, #0
 800050c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	4619      	mov	r1, r3
 8000516:	4814      	ldr	r0, [pc, #80]	@ (8000568 <MX_TIM1_Init+0x13c>)
 8000518:	f002 fca4 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000522:	f000 fd37 	bl	8000f94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800053a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800053e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	4807      	ldr	r0, [pc, #28]	@ (8000568 <MX_TIM1_Init+0x13c>)
 800054a:	f003 f947 	bl	80037dc <HAL_TIMEx_ConfigBreakDeadTime>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000554:	f000 fd1e 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <MX_TIM1_Init+0x13c>)
 800055a:	f000 fff1 	bl	8001540 <HAL_TIM_MspPostInit>

}
 800055e:	bf00      	nop
 8000560:	3758      	adds	r7, #88	@ 0x58
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000e4 	.word	0x200000e4
 800056c:	40012c00 	.word	0x40012c00

08000570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000592:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <MX_TIM2_Init+0xc4>)
 8000594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000598:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_TIM2_Init+0xc4>)
 800059c:	2207      	movs	r2, #7
 800059e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <MX_TIM2_Init+0xc4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_TIM2_Init+0xc4>)
 80005a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_TIM2_Init+0xc4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_TIM2_Init+0xc4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005ba:	481e      	ldr	r0, [pc, #120]	@ (8000634 <MX_TIM2_Init+0xc4>)
 80005bc:	f002 fa70 	bl	8002aa0 <HAL_TIM_PWM_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80005c6:	f000 fce5 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4619      	mov	r1, r3
 80005d8:	4816      	ldr	r0, [pc, #88]	@ (8000634 <MX_TIM2_Init+0xc4>)
 80005da:	f003 f8a1 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80005e4:	f000 fcd6 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e8:	2360      	movs	r3, #96	@ 0x60
 80005ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2204      	movs	r2, #4
 80005fc:	4619      	mov	r1, r3
 80005fe:	480d      	ldr	r0, [pc, #52]	@ (8000634 <MX_TIM2_Init+0xc4>)
 8000600:	f002 fc30 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800060a:	f000 fcc3 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2208      	movs	r2, #8
 8000612:	4619      	mov	r1, r3
 8000614:	4807      	ldr	r0, [pc, #28]	@ (8000634 <MX_TIM2_Init+0xc4>)
 8000616:	f002 fc25 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000620:	f000 fcb8 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000624:	4803      	ldr	r0, [pc, #12]	@ (8000634 <MX_TIM2_Init+0xc4>)
 8000626:	f000 ff8b 	bl	8001540 <HAL_TIM_MspPostInit>

}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	@ 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000012c 	.word	0x2000012c

08000638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08e      	sub	sp, #56	@ 0x38
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]
 8000666:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000668:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <MX_TIM3_Init+0xfc>)
 800066a:	4a33      	ldr	r2, [pc, #204]	@ (8000738 <MX_TIM3_Init+0x100>)
 800066c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800066e:	4b31      	ldr	r3, [pc, #196]	@ (8000734 <MX_TIM3_Init+0xfc>)
 8000670:	220f      	movs	r2, #15
 8000672:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <MX_TIM3_Init+0xfc>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800067a:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <MX_TIM3_Init+0xfc>)
 800067c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000680:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <MX_TIM3_Init+0xfc>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <MX_TIM3_Init+0xfc>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800068e:	4829      	ldr	r0, [pc, #164]	@ (8000734 <MX_TIM3_Init+0xfc>)
 8000690:	f002 f964 	bl	800295c <HAL_TIM_Base_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800069a:	f000 fc7b 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4822      	ldr	r0, [pc, #136]	@ (8000734 <MX_TIM3_Init+0xfc>)
 80006ac:	f002 fc9c 	bl	8002fe8 <HAL_TIM_ConfigClockSource>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006b6:	f000 fc6d 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ba:	481e      	ldr	r0, [pc, #120]	@ (8000734 <MX_TIM3_Init+0xfc>)
 80006bc:	f002 f9f0 	bl	8002aa0 <HAL_TIM_PWM_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006c6:	f000 fc65 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4619      	mov	r1, r3
 80006d8:	4816      	ldr	r0, [pc, #88]	@ (8000734 <MX_TIM3_Init+0xfc>)
 80006da:	f003 f821 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006e4:	f000 fc56 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e8:	2360      	movs	r3, #96	@ 0x60
 80006ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_TIM3_Init+0xfc>)
 8000700:	f002 fbb0 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800070a:	f000 fc43 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	220c      	movs	r2, #12
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <MX_TIM3_Init+0xfc>)
 8000716:	f002 fba5 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000720:	f000 fc38 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000724:	4803      	ldr	r0, [pc, #12]	@ (8000734 <MX_TIM3_Init+0xfc>)
 8000726:	f000 ff0b 	bl	8001540 <HAL_TIM_MspPostInit>

}
 800072a:	bf00      	nop
 800072c:	3738      	adds	r7, #56	@ 0x38
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000174 	.word	0x20000174
 8000738:	40000400 	.word	0x40000400

0800073c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800075e:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <MX_TIM4_Init+0xc0>)
 8000760:	4a27      	ldr	r2, [pc, #156]	@ (8000800 <MX_TIM4_Init+0xc4>)
 8000762:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <MX_TIM4_Init+0xc0>)
 8000766:	2207      	movs	r2, #7
 8000768:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <MX_TIM4_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_TIM4_Init+0xc0>)
 8000772:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000776:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b20      	ldr	r3, [pc, #128]	@ (80007fc <MX_TIM4_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_TIM4_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000784:	481d      	ldr	r0, [pc, #116]	@ (80007fc <MX_TIM4_Init+0xc0>)
 8000786:	f002 f98b 	bl	8002aa0 <HAL_TIM_PWM_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 fc00 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4619      	mov	r1, r3
 80007a2:	4816      	ldr	r0, [pc, #88]	@ (80007fc <MX_TIM4_Init+0xc0>)
 80007a4:	f002 ffbc 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007ae:	f000 fbf1 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b2:	2360      	movs	r3, #96	@ 0x60
 80007b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <MX_TIM4_Init+0xc0>)
 80007ca:	f002 fb4b 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80007d4:	f000 fbde 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2208      	movs	r2, #8
 80007dc:	4619      	mov	r1, r3
 80007de:	4807      	ldr	r0, [pc, #28]	@ (80007fc <MX_TIM4_Init+0xc0>)
 80007e0:	f002 fb40 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80007ea:	f000 fbd3 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007ee:	4803      	ldr	r0, [pc, #12]	@ (80007fc <MX_TIM4_Init+0xc0>)
 80007f0:	f000 fea6 	bl	8001540 <HAL_TIM_MspPostInit>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001bc 	.word	0x200001bc
 8000800:	40000800 	.word	0x40000800

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_USART1_UART_Init+0x4c>)
 800083c:	f003 f831 	bl	80038a2 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 fba5 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000204 	.word	0x20000204
 8000854:	40013800 	.word	0x40013800

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <MX_USART2_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000864:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000890:	f003 f807 	bl	80038a2 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f000 fb7b 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000024c 	.word	0x2000024c
 80008a8:	40004400 	.word	0x40004400

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c0:	4b38      	ldr	r3, [pc, #224]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a37      	ldr	r2, [pc, #220]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b35      	ldr	r3, [pc, #212]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	4b32      	ldr	r3, [pc, #200]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a31      	ldr	r2, [pc, #196]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a2b      	ldr	r2, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b29      	ldr	r3, [pc, #164]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a25      	ldr	r2, [pc, #148]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <MX_GPIO_Init+0xf8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(head_light_GPIO_Port, head_light_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	4820      	ldr	r0, [pc, #128]	@ (80009a8 <MX_GPIO_Init+0xfc>)
 8000926:	f001 fbcf 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000930:	481e      	ldr	r0, [pc, #120]	@ (80009ac <MX_GPIO_Init+0x100>)
 8000932:	f001 fbc9 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_GPIO_Init+0x104>)
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	4818      	ldr	r0, [pc, #96]	@ (80009ac <MX_GPIO_Init+0x100>)
 800094c:	f001 fa38 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : head_light_Pin */
  GPIO_InitStruct.Pin = head_light_Pin;
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(head_light_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	4810      	ldr	r0, [pc, #64]	@ (80009a8 <MX_GPIO_Init+0xfc>)
 8000968:	f001 fa2a 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800096c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	4809      	ldr	r0, [pc, #36]	@ (80009ac <MX_GPIO_Init+0x100>)
 8000986:	f001 fa1b 	bl	8001dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2028      	movs	r0, #40	@ 0x28
 8000990:	f001 f92d 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000994:	2028      	movs	r0, #40	@ 0x28
 8000996:	f001 f946 	bl	8001c26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800
 80009ac:	40011000 	.word	0x40011000
 80009b0:	10110000 	.word	0x10110000

080009b4 <printActuatorPacket>:

/* USER CODE BEGIN 4 */
void printActuatorPacket(void)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b097      	sub	sp, #92	@ 0x5c
 80009b8:	af04      	add	r7, sp, #16
    char msg[64];
    int len;

    // 1. start_byte
    len = snprintf(msg, sizeof(msg), "start_byte: 0x%02X\r\n", controlPacket.start_byte);
 80009ba:	4b4c      	ldr	r3, [pc, #304]	@ (8000aec <printActuatorPacket+0x138>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	1d38      	adds	r0, r7, #4
 80009c0:	4a4b      	ldr	r2, [pc, #300]	@ (8000af0 <printActuatorPacket+0x13c>)
 80009c2:	2140      	movs	r1, #64	@ 0x40
 80009c4:	f003 fdd0 	bl	8004568 <sniprintf>
 80009c8:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80009ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	1d39      	adds	r1, r7, #4
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	4847      	ldr	r0, [pc, #284]	@ (8000af4 <printActuatorPacket+0x140>)
 80009d6:	f002 ffb4 	bl	8003942 <HAL_UART_Transmit>

    // 2. packet_id
    len = snprintf(msg, sizeof(msg), "packet_id:  0x%02X\r\n", controlPacket.packet_id);
 80009da:	4b44      	ldr	r3, [pc, #272]	@ (8000aec <printActuatorPacket+0x138>)
 80009dc:	785b      	ldrb	r3, [r3, #1]
 80009de:	1d38      	adds	r0, r7, #4
 80009e0:	4a45      	ldr	r2, [pc, #276]	@ (8000af8 <printActuatorPacket+0x144>)
 80009e2:	2140      	movs	r1, #64	@ 0x40
 80009e4:	f003 fdc0 	bl	8004568 <sniprintf>
 80009e8:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 80009ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	1d39      	adds	r1, r7, #4
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	483f      	ldr	r0, [pc, #252]	@ (8000af4 <printActuatorPacket+0x140>)
 80009f6:	f002 ffa4 	bl	8003942 <HAL_UART_Transmit>

    // 3. RGB bits
    len = snprintf(msg, sizeof(msg),
        "LED RGB:    R=%u G=%u B=%u\r\n",
		controlPacket.R, controlPacket.G, controlPacket.B);
 80009fa:	4b3c      	ldr	r3, [pc, #240]	@ (8000aec <printActuatorPacket+0x138>)
 80009fc:	789b      	ldrb	r3, [r3, #2]
 80009fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a02:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a04:	4619      	mov	r1, r3
		controlPacket.R, controlPacket.G, controlPacket.B);
 8000a06:	4b39      	ldr	r3, [pc, #228]	@ (8000aec <printActuatorPacket+0x138>)
 8000a08:	789b      	ldrb	r3, [r3, #2]
 8000a0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a0e:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a10:	461a      	mov	r2, r3
		controlPacket.R, controlPacket.G, controlPacket.B);
 8000a12:	4b36      	ldr	r3, [pc, #216]	@ (8000aec <printActuatorPacket+0x138>)
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a1a:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a1c:	1d38      	adds	r0, r7, #4
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	460b      	mov	r3, r1
 8000a24:	4a35      	ldr	r2, [pc, #212]	@ (8000afc <printActuatorPacket+0x148>)
 8000a26:	2140      	movs	r1, #64	@ 0x40
 8000a28:	f003 fd9e 	bl	8004568 <sniprintf>
 8000a2c:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	1d39      	adds	r1, r7, #4
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	482e      	ldr	r0, [pc, #184]	@ (8000af4 <printActuatorPacket+0x140>)
 8000a3a:	f002 ff82 	bl	8003942 <HAL_UART_Transmit>

    // 4. fan, led, buzzer, driving_mode
    len = snprintf(msg, sizeof(msg),
        "fan: %u  led: %u  buzzer: %u  mode: %u\r\n",
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000aec <printActuatorPacket+0x138>)
 8000a40:	78db      	ldrb	r3, [r3, #3]
 8000a42:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000a46:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a48:	461c      	mov	r4, r3
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a4a:	4b28      	ldr	r3, [pc, #160]	@ (8000aec <printActuatorPacket+0x138>)
 8000a4c:	78db      	ldrb	r3, [r3, #3]
 8000a4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a52:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a54:	461a      	mov	r2, r3
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a56:	4b25      	ldr	r3, [pc, #148]	@ (8000aec <printActuatorPacket+0x138>)
 8000a58:	78db      	ldrb	r3, [r3, #3]
 8000a5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a5e:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a60:	4619      	mov	r1, r3
        controlPacket.fan, controlPacket.led, controlPacket.buzzer, controlPacket.driving_mode);
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <printActuatorPacket+0x138>)
 8000a64:	78db      	ldrb	r3, [r3, #3]
 8000a66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a6a:	b2db      	uxtb	r3, r3
    len = snprintf(msg, sizeof(msg),
 8000a6c:	1d38      	adds	r0, r7, #4
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	9101      	str	r1, [sp, #4]
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	4623      	mov	r3, r4
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <printActuatorPacket+0x14c>)
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	f003 fd75 	bl	8004568 <sniprintf>
 8000a7e:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	481a      	ldr	r0, [pc, #104]	@ (8000af4 <printActuatorPacket+0x140>)
 8000a8c:	f002 ff59 	bl	8003942 <HAL_UART_Transmit>
    // 5. servo angles
    len = snprintf(msg, sizeof(msg),
        "servo_chair:  %u\r\n"
        "servo_window: %u\r\n"
        "front_distance: %u\r\n",
        controlPacket.servo_chair,
 8000a90:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <printActuatorPacket+0x138>)
 8000a92:	889b      	ldrh	r3, [r3, #4]
    len = snprintf(msg, sizeof(msg),
 8000a94:	4619      	mov	r1, r3
        controlPacket.servo_window,
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <printActuatorPacket+0x138>)
 8000a98:	88db      	ldrh	r3, [r3, #6]
    len = snprintf(msg, sizeof(msg),
 8000a9a:	461a      	mov	r2, r3
        controlPacket.front_distance);
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <printActuatorPacket+0x138>)
 8000a9e:	891b      	ldrh	r3, [r3, #8]
    len = snprintf(msg, sizeof(msg),
 8000aa0:	1d38      	adds	r0, r7, #4
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	9200      	str	r2, [sp, #0]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <printActuatorPacket+0x150>)
 8000aaa:	2140      	movs	r1, #64	@ 0x40
 8000aac:	f003 fd5c 	bl	8004568 <sniprintf>
 8000ab0:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	1d39      	adds	r1, r7, #4
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <printActuatorPacket+0x140>)
 8000abe:	f002 ff40 	bl	8003942 <HAL_UART_Transmit>

    // 6. crc
    len = snprintf(msg, sizeof(msg), "crc: 0x%02X\r\n\r\n", controlPacket.crc);
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <printActuatorPacket+0x138>)
 8000ac4:	7a9b      	ldrb	r3, [r3, #10]
 8000ac6:	1d38      	adds	r0, r7, #4
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <printActuatorPacket+0x154>)
 8000aca:	2140      	movs	r1, #64	@ 0x40
 8000acc:	f003 fd4c 	bl	8004568 <sniprintf>
 8000ad0:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
 8000ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	1d39      	adds	r1, r7, #4
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <printActuatorPacket+0x140>)
 8000ade:	f002 ff30 	bl	8003942 <HAL_UART_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	374c      	adds	r7, #76	@ 0x4c
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000394 	.word	0x20000394
 8000af0:	08004f08 	.word	0x08004f08
 8000af4:	2000024c 	.word	0x2000024c
 8000af8:	08004f20 	.word	0x08004f20
 8000afc:	08004f38 	.word	0x08004f38
 8000b00:	08004f58 	.word	0x08004f58
 8000b04:	08004f84 	.word	0x08004f84
 8000b08:	08004fc0 	.word	0x08004fc0

08000b0c <handlePacket>:
void handlePacket(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  uint8_t _crc = calculate_checksum(rx_buffer_1,ACTUATOR_PACKET_SIZE-1);
 8000b12:	210a      	movs	r1, #10
 8000b14:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <handlePacket+0x24>)
 8000b16:	f000 fedf 	bl	80018d8 <calculate_checksum>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

  //for debug
  deserialize_actuator_packet(rx_buffer_1, &controlPacket);
 8000b1e:	4905      	ldr	r1, [pc, #20]	@ (8000b34 <handlePacket+0x28>)
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <handlePacket+0x24>)
 8000b22:	f000 fef7 	bl	8001914 <deserialize_actuator_packet>
//    else
//    {
//      //do nothing
//    }

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000294 	.word	0x20000294
 8000b34:	20000394 	.word	0x20000394

08000b38 <HAL_UART_RxCpltCallback>:
//  {
//    packetReceived = 1;
//  }
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart1.Instance)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <HAL_UART_RxCpltCallback+0x94>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d139      	bne.n	8000bc0 <HAL_UART_RxCpltCallback+0x88>
    {
      switch(RxStage)
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x98>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d031      	beq.n	8000bb8 <HAL_UART_RxCpltCallback+0x80>
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	dc34      	bgt.n	8000bc2 <HAL_UART_RxCpltCallback+0x8a>
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d002      	beq.n	8000b62 <HAL_UART_RxCpltCallback+0x2a>
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d014      	beq.n	8000b8a <HAL_UART_RxCpltCallback+0x52>
          packetReceived=1;
          break;
        default:
      };
    }
  }
 8000b60:	e02f      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x8a>
          if(rx_buffer_1[0] == UART_START_BYTE)
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x9c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2baa      	cmp	r3, #170	@ 0xaa
 8000b68:	d109      	bne.n	8000b7e <HAL_UART_RxCpltCallback+0x46>
            RxStage = ID;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x98>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_buffer_1 + 1, 1);
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	4815      	ldr	r0, [pc, #84]	@ (8000bcc <HAL_UART_RxCpltCallback+0x94>)
 8000b78:	f002 ff6e 	bl	8003a58 <HAL_UART_Receive_IT>
          break;
 8000b7c:	e021      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x8a>
            HAL_UART_Receive_IT(&huart1, rx_buffer_1, 1);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4914      	ldr	r1, [pc, #80]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x9c>)
 8000b82:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <HAL_UART_RxCpltCallback+0x94>)
 8000b84:	f002 ff68 	bl	8003a58 <HAL_UART_Receive_IT>
          break;
 8000b88:	e01b      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x8a>
          if(rx_buffer_1[1] == ACTUATOR_PACKET_ID)
 8000b8a:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x9c>)
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d109      	bne.n	8000ba6 <HAL_UART_RxCpltCallback+0x6e>
            RxStage = PAYLOAD;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x98>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_buffer_1+2, ACTUATOR_PACKET_SIZE-2);
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_UART_RxCpltCallback+0xa4>)
 8000b9a:	2209      	movs	r2, #9
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <HAL_UART_RxCpltCallback+0x94>)
 8000ba0:	f002 ff5a 	bl	8003a58 <HAL_UART_Receive_IT>
          break;
 8000ba4:	e00d      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x8a>
            RxStage = START;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x98>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, rx_buffer_1, 1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x9c>)
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <HAL_UART_RxCpltCallback+0x94>)
 8000bb2:	f002 ff51 	bl	8003a58 <HAL_UART_Receive_IT>
          break;
 8000bb6:	e004      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x8a>
          packetReceived=1;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_UART_RxCpltCallback+0xa8>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
          break;
 8000bbe:	e000      	b.n	8000bc2 <HAL_UART_RxCpltCallback+0x8a>
        default:
 8000bc0:	bf00      	nop
  }
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000204 	.word	0x20000204
 8000bd0:	20000048 	.word	0x20000048
 8000bd4:	20000294 	.word	0x20000294
 8000bd8:	20000295 	.word	0x20000295
 8000bdc:	20000296 	.word	0x20000296
 8000be0:	2000039f 	.word	0x2000039f

08000be4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <HAL_UART_ErrorCallback+0x2c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d107      	bne.n	8000c08 <HAL_UART_ErrorCallback+0x24>
  {
    //HAL_UART_Receive_IT(&huart1, rx_buffer + rxPtr, ACTUATOR_PACKET_SIZE);
	  RxStage = START;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_UART_ErrorCallback+0x30>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, rx_buffer_1, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4905      	ldr	r1, [pc, #20]	@ (8000c18 <HAL_UART_ErrorCallback+0x34>)
 8000c02:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <HAL_UART_ErrorCallback+0x2c>)
 8000c04:	f002 ff28 	bl	8003a58 <HAL_UART_Receive_IT>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000204 	.word	0x20000204
 8000c14:	20000048 	.word	0x20000048
 8000c18:	20000294 	.word	0x20000294

08000c1c <initControlValue>:
void initControlValue(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  controlPacket.driving_mode = DRIVING_NORMAL;
 8000c20:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <initControlValue+0x50>)
 8000c22:	78d3      	ldrb	r3, [r2, #3]
 8000c24:	2101      	movs	r1, #1
 8000c26:	f361 1307 	bfi	r3, r1, #4, #4
 8000c2a:	70d3      	strb	r3, [r2, #3]
	controlPacket.servo_chair = arrayServo[SERVO_SEAT].initialPulse;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <initControlValue+0x54>)
 8000c2e:	89da      	ldrh	r2, [r3, #14]
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <initControlValue+0x50>)
 8000c32:	809a      	strh	r2, [r3, #4]
	controlPacket.servo_window = arrayServo[SERVO_WINDOW].initialPulse;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <initControlValue+0x54>)
 8000c36:	8bda      	ldrh	r2, [r3, #30]
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <initControlValue+0x50>)
 8000c3a:	80da      	strh	r2, [r3, #6]
	controlPacket.led = 0;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c6c <initControlValue+0x50>)
 8000c3e:	78d3      	ldrb	r3, [r2, #3]
 8000c40:	f36f 0382 	bfc	r3, #2, #1
 8000c44:	70d3      	strb	r3, [r2, #3]
	controlPacket.buzzer = 0;
 8000c46:	4a09      	ldr	r2, [pc, #36]	@ (8000c6c <initControlValue+0x50>)
 8000c48:	78d3      	ldrb	r3, [r2, #3]
 8000c4a:	f36f 03c3 	bfc	r3, #3, #1
 8000c4e:	70d3      	strb	r3, [r2, #3]
	controlPacket.fan = 0;
 8000c50:	4a06      	ldr	r2, [pc, #24]	@ (8000c6c <initControlValue+0x50>)
 8000c52:	78d3      	ldrb	r3, [r2, #3]
 8000c54:	f36f 0301 	bfc	r3, #0, #2
 8000c58:	70d3      	strb	r3, [r2, #3]
	controlPacket.led_rgb = 0;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <initControlValue+0x50>)
 8000c5c:	7893      	ldrb	r3, [r2, #2]
 8000c5e:	f36f 0302 	bfc	r3, #0, #3
 8000c62:	7093      	strb	r3, [r2, #2]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000394 	.word	0x20000394
 8000c70:	2000004c 	.word	0x2000004c

08000c74 <seatTask>:
		  Error_Handler();
		}
	}
}
void seatTask(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_SEAT);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 fb68 	bl	8001350 <getUnitPulse>
 8000c80:	4603      	mov	r3, r0
 8000c82:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_SEAT);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fb1b 	bl	80012c0 <getPulse>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80bb      	strh	r3, [r7, #4]
	if(controlPacket.servo_chair > currentPulse)
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <seatTask+0x78>)
 8000c90:	889b      	ldrh	r3, [r3, #4]
 8000c92:	88ba      	ldrh	r2, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d210      	bcs.n	8000cba <seatTask+0x46>
	{
		if((controlPacket.servo_chair) - currentPulse > unitPulse)
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <seatTask+0x78>)
 8000c9a:	889b      	ldrh	r3, [r3, #4]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	88bb      	ldrh	r3, [r7, #4]
 8000ca0:	1ad2      	subs	r2, r2, r3
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dd1c      	ble.n	8000ce2 <seatTask+0x6e>
		{
			setPulse(SERVO_SEAT,(currentPulse+unitPulse));
 8000ca8:	88ba      	ldrh	r2, [r7, #4]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	4413      	add	r3, r2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 fb5e 	bl	8001374 <setPulse>
		else
		{
			//do nothing
		}
	}
}
 8000cb8:	e013      	b.n	8000ce2 <seatTask+0x6e>
	else if(controlPacket.servo_chair < currentPulse)
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <seatTask+0x78>)
 8000cbc:	889b      	ldrh	r3, [r3, #4]
 8000cbe:	88ba      	ldrh	r2, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d90e      	bls.n	8000ce2 <seatTask+0x6e>
		if((currentPulse - controlPacket.servo_chair) > unitPulse)
 8000cc4:	88bb      	ldrh	r3, [r7, #4]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <seatTask+0x78>)
 8000cc8:	8892      	ldrh	r2, [r2, #4]
 8000cca:	1a9a      	subs	r2, r3, r2
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dd07      	ble.n	8000ce2 <seatTask+0x6e>
			setPulse(SERVO_SEAT,(currentPulse-unitPulse));
 8000cd2:	88ba      	ldrh	r2, [r7, #4]
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 fb49 	bl	8001374 <setPulse>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000394 	.word	0x20000394

08000cf0 <windowTask>:
void windowTask(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_WINDOW);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 fb2a 	bl	8001350 <getUnitPulse>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_WINDOW);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fadd 	bl	80012c0 <getPulse>
 8000d06:	4603      	mov	r3, r0
 8000d08:	80bb      	strh	r3, [r7, #4]
	if(controlPacket.servo_window > currentPulse)
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <windowTask+0x78>)
 8000d0c:	88db      	ldrh	r3, [r3, #6]
 8000d0e:	88ba      	ldrh	r2, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d210      	bcs.n	8000d36 <windowTask+0x46>
	{
		if((controlPacket.servo_window) - currentPulse > unitPulse)
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <windowTask+0x78>)
 8000d16:	88db      	ldrh	r3, [r3, #6]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	1ad2      	subs	r2, r2, r3
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dd1c      	ble.n	8000d5e <windowTask+0x6e>
		{
			setPulse(SERVO_WINDOW,(currentPulse+unitPulse));
 8000d24:	88ba      	ldrh	r2, [r7, #4]
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f000 fb20 	bl	8001374 <setPulse>
		else
		{
			//do nothing
		}
	}
}
 8000d34:	e013      	b.n	8000d5e <windowTask+0x6e>
	else if(controlPacket.servo_window < currentPulse)
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <windowTask+0x78>)
 8000d38:	88db      	ldrh	r3, [r3, #6]
 8000d3a:	88ba      	ldrh	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d90e      	bls.n	8000d5e <windowTask+0x6e>
		if((currentPulse - controlPacket.servo_window) > unitPulse)
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <windowTask+0x78>)
 8000d44:	88d2      	ldrh	r2, [r2, #6]
 8000d46:	1a9a      	subs	r2, r3, r2
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	dd07      	ble.n	8000d5e <windowTask+0x6e>
			setPulse(SERVO_WINDOW,(currentPulse-unitPulse));
 8000d4e:	88ba      	ldrh	r2, [r7, #4]
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f000 fb0b 	bl	8001374 <setPulse>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000394 	.word	0x20000394

08000d6c <fanTask>:
void fanTask(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	if(controlPacket.fan == 0)
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <fanTask+0x2c>)
 8000d72:	78db      	ldrb	r3, [r3, #3]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <fanTask+0x18>
	{
		stopFan();
 8000d7e:	f7ff fa5d 	bl	800023c <stopFan>
	}
	else
	{
		setLevelFan(controlPacket.fan);
	}
}
 8000d82:	e007      	b.n	8000d94 <fanTask+0x28>
		setLevelFan(controlPacket.fan);
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <fanTask+0x2c>)
 8000d86:	78db      	ldrb	r3, [r3, #3]
 8000d88:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa78 	bl	8000284 <setLevelFan>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000394 	.word	0x20000394

08000d9c <ledTask>:
void ledTask(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	if(controlPacket.led == 0)
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <ledTask+0x20>)
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <ledTask+0x18>
	{
		offHeadLight();
 8000dae:	f7ff faaf 	bl	8000310 <offHeadLight>
	}
	else
	{
		onHeadLight();
	}
}
 8000db2:	e001      	b.n	8000db8 <ledTask+0x1c>
		onHeadLight();
 8000db4:	f7ff faa0 	bl	80002f8 <onHeadLight>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000394 	.word	0x20000394

08000dc0 <rgbTask>:
void rgbTask(void)
{
 8000dc0:	b598      	push	{r3, r4, r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	static uint8_t rgb_red =0;
	static uint8_t rgb_green =0;
	static uint8_t rgb_blue =0;
	static uint8_t rgb_mode =0;
	rgb_red = 0x1 & controlPacket.led_rgb ;
 8000dc4:	4b38      	ldr	r3, [pc, #224]	@ (8000ea8 <rgbTask+0xe8>)
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b35      	ldr	r3, [pc, #212]	@ (8000eac <rgbTask+0xec>)
 8000dd6:	701a      	strb	r2, [r3, #0]
	rgb_green = 0x2 & controlPacket.led_rgb ;
 8000dd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ea8 <rgbTask+0xe8>)
 8000dda:	789b      	ldrb	r3, [r3, #2]
 8000ddc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <rgbTask+0xf0>)
 8000dea:	701a      	strb	r2, [r3, #0]
	rgb_blue = 0x4 & controlPacket.led_rgb ;
 8000dec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea8 <rgbTask+0xe8>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <rgbTask+0xf4>)
 8000dfe:	701a      	strb	r2, [r3, #0]
	rgb_mode = 0x8 & controlPacket.led_rgb; //led_rgb의 4번쨰 비트가 0이면 일반 모드, 1이면 터널모드(밝기 30퍼)
 8000e00:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <rgbTask+0xe8>)
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <rgbTask+0xf8>)
 8000e12:	701a      	strb	r2, [r3, #0]

	if(rgb_mode)
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <rgbTask+0xf8>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d018      	beq.n	8000e4e <rgbTask+0x8e>
  {
    setColorRgb(30*rgb_red, 30*rgb_green, 30*rgb_blue);
 8000e1c:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <rgbTask+0xec>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	b298      	uxth	r0, r3
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <rgbTask+0xf0>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	b299      	uxth	r1, r3
 8000e38:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <rgbTask+0xf4>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	f000 f8be 	bl	8000fc8 <setColorRgb>
  }
	else
  {
		setColorRgb(999*rgb_red, 999*rgb_green, 999*rgb_blue);
	}
}
 8000e4c:	e029      	b.n	8000ea2 <rgbTask+0xe2>
		setColorRgb(999*rgb_red, 999*rgb_green, 999*rgb_blue);
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <rgbTask+0xec>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	1ad2      	subs	r2, r2, r3
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	00d1      	lsls	r1, r2, #3
 8000e60:	461a      	mov	r2, r3
 8000e62:	460b      	mov	r3, r1
 8000e64:	4413      	add	r3, r2
 8000e66:	b298      	uxth	r0, r3
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <rgbTask+0xf0>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	00d2      	lsls	r2, r2, #3
 8000e70:	1ad2      	subs	r2, r2, r3
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	00d1      	lsls	r1, r2, #3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4413      	add	r3, r2
 8000e80:	b299      	uxth	r1, r3
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <rgbTask+0xf4>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	00d2      	lsls	r2, r2, #3
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	00d4      	lsls	r4, r2, #3
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f000 f893 	bl	8000fc8 <setColorRgb>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd98      	pop	{r3, r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000394 	.word	0x20000394
 8000eac:	200003a0 	.word	0x200003a0
 8000eb0:	200003a1 	.word	0x200003a1
 8000eb4:	200003a2 	.word	0x200003a2
 8000eb8:	200003a3 	.word	0x200003a3

08000ebc <buzzerTask>:
void buzzerTask(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t buzzer_state = 0;
    static uint8_t step_count = 0;
    static uint8_t buzzer_on = 0;

    uint32_t now = HAL_GetTick();
 8000ec2:	f000 fdb3 	bl	8001a2c <HAL_GetTick>
 8000ec6:	6078      	str	r0, [r7, #4]

    if(controlPacket.buzzer != 0 && buzzer_on == 0)
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <buzzerTask+0xc4>)
 8000eca:	78db      	ldrb	r3, [r3, #3]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <buzzerTask+0x28>
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f84 <buzzerTask+0xc8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <buzzerTask+0x28>
    {
      buzzer_on = 1;
 8000ede:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <buzzerTask+0xc8>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
    }

    if(buzzer_on)
 8000ee4:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <buzzerTask+0xc8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d044      	beq.n	8000f76 <buzzerTask+0xba>
    {
      switch (buzzer_state) {
 8000eec:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <buzzerTask+0xcc>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d01f      	beq.n	8000f34 <buzzerTask+0x78>
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	dc3e      	bgt.n	8000f76 <buzzerTask+0xba>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <buzzerTask+0x46>
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d009      	beq.n	8000f14 <buzzerTask+0x58>
            }
            break;
      }
    }
   
   return; 
 8000f00:	e039      	b.n	8000f76 <buzzerTask+0xba>
            onBuzzer();
 8000f02:	f7ff f96f 	bl	80001e4 <onBuzzer>
            last_tick = now;
 8000f06:	4a21      	ldr	r2, [pc, #132]	@ (8000f8c <buzzerTask+0xd0>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6013      	str	r3, [r2, #0]
            buzzer_state = 1;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <buzzerTask+0xcc>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
            break;
 8000f12:	e02f      	b.n	8000f74 <buzzerTask+0xb8>
            if (now - last_tick >= 300) {
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <buzzerTask+0xd0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000f20:	d325      	bcc.n	8000f6e <buzzerTask+0xb2>
                offBuzzer();
 8000f22:	f7ff f967 	bl	80001f4 <offBuzzer>
                last_tick = now;
 8000f26:	4a19      	ldr	r2, [pc, #100]	@ (8000f8c <buzzerTask+0xd0>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
                buzzer_state = 2;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <buzzerTask+0xcc>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]
            break;
 8000f32:	e01c      	b.n	8000f6e <buzzerTask+0xb2>
            if (now - last_tick >= 100) {
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <buzzerTask+0xd0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b63      	cmp	r3, #99	@ 0x63
 8000f3e:	d918      	bls.n	8000f72 <buzzerTask+0xb6>
                step_count++;
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <buzzerTask+0xd4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <buzzerTask+0xd4>)
 8000f4a:	701a      	strb	r2, [r3, #0]
                if (step_count >= 3) {
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <buzzerTask+0xd4>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d903      	bls.n	8000f5c <buzzerTask+0xa0>
                    buzzer_on = 0;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <buzzerTask+0xc8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
            break;
 8000f5a:	e00a      	b.n	8000f72 <buzzerTask+0xb6>
                    onBuzzer();
 8000f5c:	f7ff f942 	bl	80001e4 <onBuzzer>
                    last_tick = now;
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <buzzerTask+0xd0>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
                    buzzer_state = 1;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <buzzerTask+0xcc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
            break;
 8000f6c:	e001      	b.n	8000f72 <buzzerTask+0xb6>
            break;
 8000f6e:	bf00      	nop
 8000f70:	e000      	b.n	8000f74 <buzzerTask+0xb8>
            break;
 8000f72:	bf00      	nop
   return; 
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
}
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000394 	.word	0x20000394
 8000f84:	200003a4 	.word	0x200003a4
 8000f88:	200003a5 	.word	0x200003a5
 8000f8c:	200003a8 	.word	0x200003a8
 8000f90:	200003ac 	.word	0x200003ac

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <initRgb>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void initRgb(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <initRgb+0x20>)
 8000fa8:	f001 fdca 	bl	8002b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fac:	2100      	movs	r1, #0
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <initRgb+0x24>)
 8000fb0:	f001 fdc6 	bl	8002b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <initRgb+0x20>)
 8000fb8:	f001 fdc2 	bl	8002b40 <HAL_TIM_PWM_Start>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000012c 	.word	0x2000012c
 8000fc4:	200001bc 	.word	0x200001bc

08000fc8 <setColorRgb>:

void setColorRgb(uint16_t red, uint16_t green, uint16_t blue)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	80bb      	strh	r3, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	807b      	strh	r3, [r7, #2]
    if (red > 999) red = 999;
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fe0:	d302      	bcc.n	8000fe8 <setColorRgb+0x20>
 8000fe2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000fe6:	80fb      	strh	r3, [r7, #6]
    if (green > 999) green = 999;
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fee:	d302      	bcc.n	8000ff6 <setColorRgb+0x2e>
 8000ff0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000ff4:	80bb      	strh	r3, [r7, #4]
    if (blue > 999) blue = 999;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ffc:	d302      	bcc.n	8001004 <setColorRgb+0x3c>
 8000ffe:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001002:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, red);
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <setColorRgb+0x60>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, green);
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <setColorRgb+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	88ba      	ldrh	r2, [r7, #4]
 8001012:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, blue);
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <setColorRgb+0x60>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	887a      	ldrh	r2, [r7, #2]
 800101a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2000012c 	.word	0x2000012c
 800102c:	200001bc 	.word	0x200001bc

08001030 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim2;
extern task_t taskTable[NUM_TASK]; //메인에 정의

/*1ms 주기로 발생하는 tim2 인터럽트 처리 루틴*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if((htim->Instance) == htim2.Instance)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d101      	bne.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		taskManager();
 8001044:	f000 f806 	bl	8001054 <taskManager>
	}
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000012c 	.word	0x2000012c

08001054 <taskManager>:

/*타이머 카운트 기반으로 태스크 활성화 여부 결정*/
void taskManager(void){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++){
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	e073      	b.n	8001148 <taskManager+0xf4>
		if(taskTable[i].offsetTime > 0)
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	493e      	ldr	r1, [pc, #248]	@ (800115c <taskManager+0x108>)
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3304      	adds	r3, #4
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d029      	beq.n	80010ca <taskManager+0x76>
		{
			taskTable[i].offsetTime--;
 8001076:	79fa      	ldrb	r2, [r7, #7]
 8001078:	4938      	ldr	r1, [pc, #224]	@ (800115c <taskManager+0x108>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	3304      	adds	r3, #4
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	3b01      	subs	r3, #1
 800108a:	b298      	uxth	r0, r3
 800108c:	4933      	ldr	r1, [pc, #204]	@ (800115c <taskManager+0x108>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3304      	adds	r3, #4
 800109a:	4602      	mov	r2, r0
 800109c:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].offsetTime == 0)
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	492e      	ldr	r1, [pc, #184]	@ (800115c <taskManager+0x108>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3304      	adds	r3, #4
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d146      	bne.n	8001142 <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4929      	ldr	r1, [pc, #164]	@ (800115c <taskManager+0x108>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	330a      	adds	r3, #10
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e03b      	b.n	8001142 <taskManager+0xee>
			}
		}
		else
		{
			taskTable[i].waitedTime++;
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4923      	ldr	r1, [pc, #140]	@ (800115c <taskManager+0x108>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3308      	adds	r3, #8
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b298      	uxth	r0, r3
 80010e0:	491e      	ldr	r1, [pc, #120]	@ (800115c <taskManager+0x108>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	4602      	mov	r2, r0
 80010f0:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].waitedTime == taskTable[i].period)
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	4919      	ldr	r1, [pc, #100]	@ (800115c <taskManager+0x108>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	3308      	adds	r3, #8
 8001102:	8819      	ldrh	r1, [r3, #0]
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	4815      	ldr	r0, [pc, #84]	@ (800115c <taskManager+0x108>)
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4403      	add	r3, r0
 8001112:	3306      	adds	r3, #6
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4299      	cmp	r1, r3
 8001118:	d113      	bne.n	8001142 <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	490f      	ldr	r1, [pc, #60]	@ (800115c <taskManager+0x108>)
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	330a      	adds	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
				taskTable[i].waitedTime = 0;
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	490a      	ldr	r1, [pc, #40]	@ (800115c <taskManager+0x108>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3308      	adds	r3, #8
 800113e:	2200      	movs	r2, #0
 8001140:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < NUM_TASK; i++){
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	3301      	adds	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d988      	bls.n	8001060 <taskManager+0xc>
			{
				//do nothing
			}
		}
	}
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000

08001160 <initScheduler>:

void initScheduler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <initScheduler+0x10>)
 8001166:	f001 fc49 	bl	80029fc <HAL_TIM_Base_Start_IT>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000012c 	.word	0x2000012c

08001174 <scheduler>:

/*메인 루프에서 호출하여 사용*/
void scheduler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	e020      	b.n	80011c2 <scheduler+0x4e>
	{
		if(taskTable[i].status == ACTIVATED)
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	4914      	ldr	r1, [pc, #80]	@ (80011d4 <scheduler+0x60>)
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	330a      	adds	r3, #10
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d112      	bne.n	80011bc <scheduler+0x48>
		{
			taskTable[i].status = DEACTIVATED;
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	490e      	ldr	r1, [pc, #56]	@ (80011d4 <scheduler+0x60>)
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	330a      	adds	r3, #10
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
			taskTable[i].task();
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	4909      	ldr	r1, [pc, #36]	@ (80011d4 <scheduler+0x60>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4798      	blx	r3
	for(i = 0; i < NUM_TASK; i++)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	3301      	adds	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d9db      	bls.n	8001180 <scheduler+0xc>
		}
	}
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000000 	.word	0x20000000

080011d8 <initServo>:
   {&htim1, TIM_CHANNEL_1, 1300, 450, (uint16_t)((1300.0 - 450.0)/160.0), (uint16_t)((1300.0 + 450.0)/2.0)},
   {&htim3, TIM_CHANNEL_4, 1300, 450, (uint16_t)((1300.0 - 450.0)/160.0), (uint16_t)((1300.0 + 450.0)/2.0)}
};

void initServo(void)
 {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_SERVO; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	e064      	b.n	80012ae <initServo+0xd6>
		__HAL_TIM_SetCompare(arrayServo[i].htim,arrayServo[i].channel, arrayServo[i].initialPulse);
 80011e4:	4a35      	ldr	r2, [pc, #212]	@ (80012bc <initServo+0xe4>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	3304      	adds	r3, #4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10e      	bne.n	8001212 <initServo+0x3a>
 80011f4:	4a31      	ldr	r2, [pc, #196]	@ (80012bc <initServo+0xe4>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	330e      	adds	r3, #14
 80011fe:	8819      	ldrh	r1, [r3, #0]
 8001200:	4a2e      	ldr	r2, [pc, #184]	@ (80012bc <initServo+0xe4>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	460a      	mov	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001210:	e03b      	b.n	800128a <initServo+0xb2>
 8001212:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <initServo+0xe4>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d10e      	bne.n	8001240 <initServo+0x68>
 8001222:	4a26      	ldr	r2, [pc, #152]	@ (80012bc <initServo+0xe4>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	330e      	adds	r3, #14
 800122c:	8819      	ldrh	r1, [r3, #0]
 800122e:	4a23      	ldr	r2, [pc, #140]	@ (80012bc <initServo+0xe4>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	460b      	mov	r3, r1
 800123c:	6393      	str	r3, [r2, #56]	@ 0x38
 800123e:	e024      	b.n	800128a <initServo+0xb2>
 8001240:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <initServo+0xe4>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	3304      	adds	r3, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d10e      	bne.n	800126e <initServo+0x96>
 8001250:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <initServo+0xe4>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	330e      	adds	r3, #14
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	4a17      	ldr	r2, [pc, #92]	@ (80012bc <initServo+0xe4>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	460b      	mov	r3, r1
 800126a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800126c:	e00d      	b.n	800128a <initServo+0xb2>
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <initServo+0xe4>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	330e      	adds	r3, #14
 8001278:	8819      	ldrh	r1, [r3, #0]
 800127a:	4a10      	ldr	r2, [pc, #64]	@ (80012bc <initServo+0xe4>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_TIM_PWM_Start(arrayServo[i].htim,arrayServo[i].channel);
 800128a:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <initServo+0xe4>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	4413      	add	r3, r2
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4909      	ldr	r1, [pc, #36]	@ (80012bc <initServo+0xe4>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	440b      	add	r3, r1
 800129c:	3304      	adds	r3, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f001 fc4c 	bl	8002b40 <HAL_TIM_PWM_Start>
	for(int i = 0; i < NUM_SERVO; i++){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	dd97      	ble.n	80011e4 <initServo+0xc>
	}

	return;
 80012b4:	bf00      	nop
 }
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000004c 	.word	0x2000004c

080012c0 <getPulse>:

uint16_t getPulse(uint8_t servoIndex)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	return (__HAL_TIM_GetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4a1f      	ldr	r2, [pc, #124]	@ (800134c <getPulse+0x8c>)
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d108      	bne.n	80012ec <getPulse+0x2c>
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <getPulse+0x8c>)
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	e029      	b.n	8001340 <getPulse+0x80>
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4a17      	ldr	r2, [pc, #92]	@ (800134c <getPulse+0x8c>)
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	4413      	add	r3, r2
 80012f4:	3304      	adds	r3, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d108      	bne.n	800130e <getPulse+0x4e>
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <getPulse+0x8c>)
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130a:	b29b      	uxth	r3, r3
 800130c:	e018      	b.n	8001340 <getPulse+0x80>
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <getPulse+0x8c>)
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	3304      	adds	r3, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b08      	cmp	r3, #8
 800131c:	d108      	bne.n	8001330 <getPulse+0x70>
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <getPulse+0x8c>)
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	4413      	add	r3, r2
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800132c:	b29b      	uxth	r3, r3
 800132e:	e007      	b.n	8001340 <getPulse+0x80>
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4a06      	ldr	r2, [pc, #24]	@ (800134c <getPulse+0x8c>)
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4413      	add	r3, r2
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	b29b      	uxth	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000004c 	.word	0x2000004c

08001350 <getUnitPulse>:
uint16_t getUnitPulse(uint8_t servoIndex)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	return arrayServo[servoIndex].unitPulse;
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <getUnitPulse+0x20>)
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	330c      	adds	r3, #12
 8001364:	881b      	ldrh	r3, [r3, #0]
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	2000004c 	.word	0x2000004c

08001374 <setPulse>:

void setPulse(uint8_t servoIndex, uint16_t pulse)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4a1f      	ldr	r2, [pc, #124]	@ (8001404 <setPulse+0x90>)
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d108      	bne.n	80013a6 <setPulse+0x32>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <setPulse+0x90>)
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	88ba      	ldrh	r2, [r7, #4]
 80013a2:	635a      	str	r2, [r3, #52]	@ 0x34
	return;
 80013a4:	e02a      	b.n	80013fc <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a16      	ldr	r2, [pc, #88]	@ (8001404 <setPulse+0x90>)
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	3304      	adds	r3, #4
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d108      	bne.n	80013c8 <setPulse+0x54>
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <setPulse+0x90>)
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	6393      	str	r3, [r2, #56]	@ 0x38
	return;
 80013c6:	e019      	b.n	80013fc <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <setPulse+0x90>)
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	3304      	adds	r3, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d108      	bne.n	80013ea <setPulse+0x76>
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <setPulse+0x90>)
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 80013e8:	e008      	b.n	80013fc <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <setPulse+0x90>)
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	4413      	add	r3, r2
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	88bb      	ldrh	r3, [r7, #4]
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
	return;
 80013fa:	bf00      	nop
}
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	2000004c 	.word	0x2000004c

08001408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_MspInit+0x5c>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <HAL_MspInit+0x5c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_MspInit+0x5c>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_MspInit+0x5c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <HAL_MspInit+0x5c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_MspInit+0x5c>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <HAL_MspInit+0x60>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_MspInit+0x60>)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <HAL_TIM_Base_MspInit+0x58>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10c      	bne.n	8001498 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_TIM_Base_MspInit+0x5c>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <HAL_TIM_Base_MspInit+0x5c>)
 8001484:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_TIM_Base_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001496:	e010      	b.n	80014ba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0b      	ldr	r2, [pc, #44]	@ (80014cc <HAL_TIM_Base_MspInit+0x60>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10b      	bne.n	80014ba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_TIM_Base_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_TIM_Base_MspInit+0x5c>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_TIM_Base_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40012c00 	.word	0x40012c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40000400 	.word	0x40000400

080014d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e0:	d114      	bne.n	800150c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_TIM_PWM_MspInit+0x68>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_TIM_PWM_MspInit+0x68>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_TIM_PWM_MspInit+0x68>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	201c      	movs	r0, #28
 8001500:	f000 fb75 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001504:	201c      	movs	r0, #28
 8001506:	f000 fb8e 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800150a:	e010      	b.n	800152e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_TIM_PWM_MspInit+0x6c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10b      	bne.n	800152e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <HAL_TIM_PWM_MspInit+0x68>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <HAL_TIM_PWM_MspInit+0x68>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_TIM_PWM_MspInit+0x68>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	40000800 	.word	0x40000800

08001540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	@ 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0318 	add.w	r3, r7, #24
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a50      	ldr	r2, [pc, #320]	@ (800169c <HAL_TIM_MspPostInit+0x15c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d119      	bne.n	8001594 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b4f      	ldr	r3, [pc, #316]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a4e      	ldr	r2, [pc, #312]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2302      	movs	r3, #2
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4619      	mov	r1, r3
 800158c:	4845      	ldr	r0, [pc, #276]	@ (80016a4 <HAL_TIM_MspPostInit+0x164>)
 800158e:	f000 fc17 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001592:	e07e      	b.n	8001692 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800159c:	d12b      	bne.n	80015f6 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b40      	ldr	r3, [pc, #256]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a3f      	ldr	r2, [pc, #252]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6193      	str	r3, [r2, #24]
 80015aa:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80015b6:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2302      	movs	r3, #2
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4837      	ldr	r0, [pc, #220]	@ (80016a8 <HAL_TIM_MspPostInit+0x168>)
 80015cc:	f000 fbf8 	bl	8001dc0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80015d0:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <HAL_TIM_MspPostInit+0x16c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015ee:	4a2f      	ldr	r2, [pc, #188]	@ (80016ac <HAL_TIM_MspPostInit+0x16c>)
 80015f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f2:	6053      	str	r3, [r2, #4]
}
 80015f4:	e04d      	b.n	8001692 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM3)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2d      	ldr	r2, [pc, #180]	@ (80016b0 <HAL_TIM_MspPostInit+0x170>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d12a      	bne.n	8001656 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a26      	ldr	r2, [pc, #152]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001618:	2312      	movs	r3, #18
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2302      	movs	r3, #2
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	4619      	mov	r1, r3
 800162a:	481f      	ldr	r0, [pc, #124]	@ (80016a8 <HAL_TIM_MspPostInit+0x168>)
 800162c:	f000 fbc8 	bl	8001dc0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001630:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <HAL_TIM_MspPostInit+0x16c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001638:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001648:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164e:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <HAL_TIM_MspPostInit+0x16c>)
 8001650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001652:	6053      	str	r3, [r2, #4]
}
 8001654:	e01d      	b.n	8001692 <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM4)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a16      	ldr	r2, [pc, #88]	@ (80016b4 <HAL_TIM_MspPostInit+0x174>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d118      	bne.n	8001692 <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <HAL_TIM_MspPostInit+0x160>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001678:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2302      	movs	r3, #2
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	4619      	mov	r1, r3
 800168c:	4806      	ldr	r0, [pc, #24]	@ (80016a8 <HAL_TIM_MspPostInit+0x168>)
 800168e:	f000 fb97 	bl	8001dc0 <HAL_GPIO_Init>
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	@ 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40000800 	.word	0x40000800

080016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a3b      	ldr	r2, [pc, #236]	@ (80017c0 <HAL_UART_MspInit+0x108>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d13a      	bne.n	800174e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d8:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a39      	ldr	r2, [pc, #228]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 80016de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a33      	ldr	r2, [pc, #204]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	4619      	mov	r1, r3
 800171c:	482a      	ldr	r0, [pc, #168]	@ (80017c8 <HAL_UART_MspInit+0x110>)
 800171e:	f000 fb4f 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	4619      	mov	r1, r3
 8001736:	4824      	ldr	r0, [pc, #144]	@ (80017c8 <HAL_UART_MspInit+0x110>)
 8001738:	f000 fb42 	bl	8001dc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2025      	movs	r0, #37	@ 0x25
 8001742:	f000 fa54 	bl	8001bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001746:	2025      	movs	r0, #37	@ 0x25
 8001748:	f000 fa6d 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800174c:	e034      	b.n	80017b8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <HAL_UART_MspInit+0x114>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d12f      	bne.n	80017b8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4a19      	ldr	r2, [pc, #100]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 800175e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001762:	61d3      	str	r3, [r2, #28]
 8001764:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a13      	ldr	r2, [pc, #76]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_UART_MspInit+0x10c>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001788:	2304      	movs	r3, #4
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <HAL_UART_MspInit+0x110>)
 800179c:	f000 fb10 	bl	8001dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a0:	2308      	movs	r3, #8
 80017a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <HAL_UART_MspInit+0x110>)
 80017b4:	f000 fb04 	bl	8001dc0 <HAL_GPIO_Init>
}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	@ 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	40004400 	.word	0x40004400

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 f8f2 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM2_IRQHandler+0x10>)
 800182e:	f001 fa29 	bl	8002c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000012c 	.word	0x2000012c

0800183c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <USART1_IRQHandler+0x10>)
 8001842:	f002 f92f 	bl	8003aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000204 	.word	0x20000204

08001850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001854:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001858:	f000 fc4e 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f002 fea6 	bl	80045e0 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20005000 	.word	0x20005000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	200003b0 	.word	0x200003b0
 80018c8:	20000500 	.word	0x20000500

080018cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <calculate_checksum>:
 */
#include "uart_packet.h"
#include <string.h>

/* Calculate 8-bit XOR checksum */
uint8_t calculate_checksum(const uint8_t* data, size_t length) {
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	e009      	b.n	8001900 <calculate_checksum+0x28>
        sum ^= data[i];
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	4413      	add	r3, r2
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	4053      	eors	r3, r2
 80018f8:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3f1      	bcc.n	80018ec <calculate_checksum+0x14>
    }
    return sum;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <deserialize_actuator_packet>:
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
}

/* Deserialize buffer into ActuatorPacket */
void deserialize_actuator_packet(const uint8_t* buffer, struct ActuatorPacket* packet) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
 800191e:	220b      	movs	r2, #11
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f002 fe88 	bl	8004638 <memcpy>
    /* Optional CRC validation */
    /* if (calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1) != packet->crc) {
         // handle CRC mismatch
       } */
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001930:	f7ff ffcc 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001934:	480b      	ldr	r0, [pc, #44]	@ (8001964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001936:	490c      	ldr	r1, [pc, #48]	@ (8001968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001938:	4a0c      	ldr	r2, [pc, #48]	@ (800196c <LoopFillZerobss+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800194c:	4c09      	ldr	r4, [pc, #36]	@ (8001974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195a:	f002 fe47 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195e:	f7fe fce3 	bl	8000328 <main>
  bx lr
 8001962:	4770      	bx	lr
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800196c:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8001970:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001974:	20000500 	.word	0x20000500

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_Init+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	@ (80019a4 <HAL_Init+0x28>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 f923 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f808 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fd36 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f93b 	bl	8001c42 <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 f903 	bl	8001bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000006c 	.word	0x2000006c
 8001a00:	20000074 	.word	0x20000074
 8001a04:	20000070 	.word	0x20000070

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_IncTick+0x20>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a03      	ldr	r2, [pc, #12]	@ (8001a28 <HAL_IncTick+0x20>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	20000074 	.word	0x20000074
 8001a28:	200003b4 	.word	0x200003b4

08001a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <HAL_GetTick+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	200003b4 	.word	0x200003b4

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4906      	ldr	r1, [pc, #24]	@ (8001ad8 <__NVIC_EnableIRQ+0x34>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff90 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff2d 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff42 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff90 	bl	8001b30 <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5f 	bl	8001adc <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff35 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa2 	bl	8001b94 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d008      	beq.n	8001c84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2204      	movs	r2, #4
 8001c76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e020      	b.n	8001cc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 020e 	bic.w	r2, r2, #14
 8001c92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d005      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2204      	movs	r2, #4
 8001cec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	e051      	b.n	8001d98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 020e 	bic.w	r2, r2, #14
 8001d02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a22      	ldr	r2, [pc, #136]	@ (8001da4 <HAL_DMA_Abort_IT+0xd4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d029      	beq.n	8001d72 <HAL_DMA_Abort_IT+0xa2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a21      	ldr	r2, [pc, #132]	@ (8001da8 <HAL_DMA_Abort_IT+0xd8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <HAL_DMA_Abort_IT+0x9e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dac <HAL_DMA_Abort_IT+0xdc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d01a      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x98>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1e      	ldr	r2, [pc, #120]	@ (8001db0 <HAL_DMA_Abort_IT+0xe0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d012      	beq.n	8001d62 <HAL_DMA_Abort_IT+0x92>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1c      	ldr	r2, [pc, #112]	@ (8001db4 <HAL_DMA_Abort_IT+0xe4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00a      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x8c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001db8 <HAL_DMA_Abort_IT+0xe8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d102      	bne.n	8001d56 <HAL_DMA_Abort_IT+0x86>
 8001d50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d54:	e00e      	b.n	8001d74 <HAL_DMA_Abort_IT+0xa4>
 8001d56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d5a:	e00b      	b.n	8001d74 <HAL_DMA_Abort_IT+0xa4>
 8001d5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d60:	e008      	b.n	8001d74 <HAL_DMA_Abort_IT+0xa4>
 8001d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d66:	e005      	b.n	8001d74 <HAL_DMA_Abort_IT+0xa4>
 8001d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6c:	e002      	b.n	8001d74 <HAL_DMA_Abort_IT+0xa4>
 8001d6e:	2310      	movs	r3, #16
 8001d70:	e000      	b.n	8001d74 <HAL_DMA_Abort_IT+0xa4>
 8001d72:	2301      	movs	r3, #1
 8001d74:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_DMA_Abort_IT+0xec>)
 8001d76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
    } 
  }
  return status;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020008 	.word	0x40020008
 8001da8:	4002001c 	.word	0x4002001c
 8001dac:	40020030 	.word	0x40020030
 8001db0:	40020044 	.word	0x40020044
 8001db4:	40020058 	.word	0x40020058
 8001db8:	4002006c 	.word	0x4002006c
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b08b      	sub	sp, #44	@ 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	e169      	b.n	80020a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 8158 	bne.w	80020a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a9a      	ldr	r2, [pc, #616]	@ (8002060 <HAL_GPIO_Init+0x2a0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d05e      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001dfc:	4a98      	ldr	r2, [pc, #608]	@ (8002060 <HAL_GPIO_Init+0x2a0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d875      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e02:	4a98      	ldr	r2, [pc, #608]	@ (8002064 <HAL_GPIO_Init+0x2a4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d058      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e08:	4a96      	ldr	r2, [pc, #600]	@ (8002064 <HAL_GPIO_Init+0x2a4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d86f      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e0e:	4a96      	ldr	r2, [pc, #600]	@ (8002068 <HAL_GPIO_Init+0x2a8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d052      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e14:	4a94      	ldr	r2, [pc, #592]	@ (8002068 <HAL_GPIO_Init+0x2a8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d869      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e1a:	4a94      	ldr	r2, [pc, #592]	@ (800206c <HAL_GPIO_Init+0x2ac>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d04c      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e20:	4a92      	ldr	r2, [pc, #584]	@ (800206c <HAL_GPIO_Init+0x2ac>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d863      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e26:	4a92      	ldr	r2, [pc, #584]	@ (8002070 <HAL_GPIO_Init+0x2b0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d046      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e2c:	4a90      	ldr	r2, [pc, #576]	@ (8002070 <HAL_GPIO_Init+0x2b0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d85d      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d82a      	bhi.n	8001e8c <HAL_GPIO_Init+0xcc>
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d859      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e40 <HAL_GPIO_Init+0x80>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001ebb 	.word	0x08001ebb
 8001e44:	08001e95 	.word	0x08001e95
 8001e48:	08001ea7 	.word	0x08001ea7
 8001e4c:	08001ee9 	.word	0x08001ee9
 8001e50:	08001eef 	.word	0x08001eef
 8001e54:	08001eef 	.word	0x08001eef
 8001e58:	08001eef 	.word	0x08001eef
 8001e5c:	08001eef 	.word	0x08001eef
 8001e60:	08001eef 	.word	0x08001eef
 8001e64:	08001eef 	.word	0x08001eef
 8001e68:	08001eef 	.word	0x08001eef
 8001e6c:	08001eef 	.word	0x08001eef
 8001e70:	08001eef 	.word	0x08001eef
 8001e74:	08001eef 	.word	0x08001eef
 8001e78:	08001eef 	.word	0x08001eef
 8001e7c:	08001eef 	.word	0x08001eef
 8001e80:	08001eef 	.word	0x08001eef
 8001e84:	08001e9d 	.word	0x08001e9d
 8001e88:	08001eb1 	.word	0x08001eb1
 8001e8c:	4a79      	ldr	r2, [pc, #484]	@ (8002074 <HAL_GPIO_Init+0x2b4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e92:	e02c      	b.n	8001eee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e029      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e024      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	3308      	adds	r3, #8
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e01f      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e01a      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e013      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	611a      	str	r2, [r3, #16]
          break;
 8001eda:	e009      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001edc:	2308      	movs	r3, #8
 8001ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	615a      	str	r2, [r3, #20]
          break;
 8001ee6:	e003      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          break;
 8001eee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	@ 0xff
 8001ef4:	d801      	bhi.n	8001efa <HAL_GPIO_Init+0x13a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_Init+0x13e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2bff      	cmp	r3, #255	@ 0xff
 8001f04:	d802      	bhi.n	8001f0c <HAL_GPIO_Init+0x14c>
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x152>
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0e:	3b08      	subs	r3, #8
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	210f      	movs	r1, #15
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	6a39      	ldr	r1, [r7, #32]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80b1 	beq.w	80020a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f40:	4b4d      	ldr	r3, [pc, #308]	@ (8002078 <HAL_GPIO_Init+0x2b8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a4c      	ldr	r2, [pc, #304]	@ (8002078 <HAL_GPIO_Init+0x2b8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8002078 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f58:	4a48      	ldr	r2, [pc, #288]	@ (800207c <HAL_GPIO_Init+0x2bc>)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a40      	ldr	r2, [pc, #256]	@ (8002080 <HAL_GPIO_Init+0x2c0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <HAL_GPIO_Init+0x1ec>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3f      	ldr	r2, [pc, #252]	@ (8002084 <HAL_GPIO_Init+0x2c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3e      	ldr	r2, [pc, #248]	@ (8002088 <HAL_GPIO_Init+0x2c8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3d      	ldr	r2, [pc, #244]	@ (800208c <HAL_GPIO_Init+0x2cc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_GPIO_Init+0x1e0>
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e006      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e004      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fac:	2300      	movs	r3, #0
 8001fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb0:	f002 0203 	and.w	r2, r2, #3
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	4093      	lsls	r3, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fbe:	492f      	ldr	r1, [pc, #188]	@ (800207c <HAL_GPIO_Init+0x2bc>)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	492c      	ldr	r1, [pc, #176]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4928      	ldr	r1, [pc, #160]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002000:	4b23      	ldr	r3, [pc, #140]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4922      	ldr	r1, [pc, #136]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	491e      	ldr	r1, [pc, #120]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4918      	ldr	r1, [pc, #96]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	4914      	ldr	r1, [pc, #80]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d021      	beq.n	8002094 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002050:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	490e      	ldr	r1, [pc, #56]	@ (8002090 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e021      	b.n	80020a2 <HAL_GPIO_Init+0x2e2>
 800205e:	bf00      	nop
 8002060:	10320000 	.word	0x10320000
 8002064:	10310000 	.word	0x10310000
 8002068:	10220000 	.word	0x10220000
 800206c:	10210000 	.word	0x10210000
 8002070:	10120000 	.word	0x10120000
 8002074:	10110000 	.word	0x10110000
 8002078:	40021000 	.word	0x40021000
 800207c:	40010000 	.word	0x40010000
 8002080:	40010800 	.word	0x40010800
 8002084:	40010c00 	.word	0x40010c00
 8002088:	40011000 	.word	0x40011000
 800208c:	40011400 	.word	0x40011400
 8002090:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_GPIO_Init+0x304>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	43db      	mvns	r3, r3
 800209c:	4909      	ldr	r1, [pc, #36]	@ (80020c4 <HAL_GPIO_Init+0x304>)
 800209e:	4013      	ands	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	3301      	adds	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f47f ae8e 	bne.w	8001dd4 <HAL_GPIO_Init+0x14>
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	372c      	adds	r7, #44	@ 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e4:	e003      	b.n	80020ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f806 	bl	8002128 <HAL_GPIO_EXTI_Callback>
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e272      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8087 	beq.w	800226a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800215c:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b04      	cmp	r3, #4
 8002166:	d00c      	beq.n	8002182 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002168:	4b8f      	ldr	r3, [pc, #572]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d112      	bne.n	800219a <HAL_RCC_OscConfig+0x5e>
 8002174:	4b8c      	ldr	r3, [pc, #560]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002180:	d10b      	bne.n	800219a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002182:	4b89      	ldr	r3, [pc, #548]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06c      	beq.n	8002268 <HAL_RCC_OscConfig+0x12c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d168      	bne.n	8002268 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e24c      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x76>
 80021a4:	4b80      	ldr	r3, [pc, #512]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a7f      	ldr	r2, [pc, #508]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e02e      	b.n	8002210 <HAL_RCC_OscConfig+0xd4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x98>
 80021ba:	4b7b      	ldr	r3, [pc, #492]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7a      	ldr	r2, [pc, #488]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b78      	ldr	r3, [pc, #480]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a77      	ldr	r2, [pc, #476]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xd4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0xbc>
 80021de:	4b72      	ldr	r3, [pc, #456]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a71      	ldr	r2, [pc, #452]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6e      	ldr	r2, [pc, #440]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xd4>
 80021f8:	4b6b      	ldr	r3, [pc, #428]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a6a      	ldr	r2, [pc, #424]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a67      	ldr	r2, [pc, #412]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fc08 	bl	8001a2c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fc04 	bl	8001a2c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e200      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b5d      	ldr	r3, [pc, #372]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xe4>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fbf4 	bl	8001a2c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff fbf0 	bl	8001a2c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1ec      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x10c>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002276:	4b4c      	ldr	r3, [pc, #304]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002282:	4b49      	ldr	r3, [pc, #292]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x18c>
 800228e:	4b46      	ldr	r3, [pc, #280]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b43      	ldr	r3, [pc, #268]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x176>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1c0      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4939      	ldr	r1, [pc, #228]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b36      	ldr	r3, [pc, #216]	@ (80023ac <HAL_RCC_OscConfig+0x270>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff fba9 	bl	8001a2c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff fba5 	bl	8001a2c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1a1      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4927      	ldr	r1, [pc, #156]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <HAL_RCC_OscConfig+0x270>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7ff fb88 	bl	8001a2c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7ff fb84 	bl	8001a2c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e180      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d03a      	beq.n	80023c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d019      	beq.n	8002386 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <HAL_RCC_OscConfig+0x274>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7ff fb68 	bl	8001a2c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7ff fb64 	bl	8001a2c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e160      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800237e:	2001      	movs	r0, #1
 8002380:	f000 face 	bl	8002920 <RCC_Delay>
 8002384:	e01c      	b.n	80023c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_RCC_OscConfig+0x274>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7ff fb4e 	bl	8001a2c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002392:	e00f      	b.n	80023b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fb4a 	bl	8001a2c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d908      	bls.n	80023b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e146      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	42420000 	.word	0x42420000
 80023b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	4b92      	ldr	r3, [pc, #584]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e9      	bne.n	8002394 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a6 	beq.w	800251a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b88      	ldr	r3, [pc, #544]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4a87      	ldr	r2, [pc, #540]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	61d3      	str	r3, [r2, #28]
 80023ea:	4b85      	ldr	r3, [pc, #532]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b82      	ldr	r3, [pc, #520]	@ (8002604 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002406:	4b7f      	ldr	r3, [pc, #508]	@ (8002604 <HAL_RCC_OscConfig+0x4c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7e      	ldr	r2, [pc, #504]	@ (8002604 <HAL_RCC_OscConfig+0x4c8>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002412:	f7ff fb0b 	bl	8001a2c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241a:	f7ff fb07 	bl	8001a2c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b64      	cmp	r3, #100	@ 0x64
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e103      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	4b75      	ldr	r3, [pc, #468]	@ (8002604 <HAL_RCC_OscConfig+0x4c8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x312>
 8002440:	4b6f      	ldr	r3, [pc, #444]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a6e      	ldr	r2, [pc, #440]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	e02d      	b.n	80024aa <HAL_RCC_OscConfig+0x36e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x334>
 8002456:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a69      	ldr	r2, [pc, #420]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b67      	ldr	r3, [pc, #412]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a66      	ldr	r2, [pc, #408]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	e01c      	b.n	80024aa <HAL_RCC_OscConfig+0x36e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_OscConfig+0x356>
 8002478:	4b61      	ldr	r3, [pc, #388]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a60      	ldr	r2, [pc, #384]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	4b5e      	ldr	r3, [pc, #376]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a5d      	ldr	r2, [pc, #372]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	e00b      	b.n	80024aa <HAL_RCC_OscConfig+0x36e>
 8002492:	4b5b      	ldr	r3, [pc, #364]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a5a      	ldr	r2, [pc, #360]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	4b58      	ldr	r3, [pc, #352]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a57      	ldr	r2, [pc, #348]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d015      	beq.n	80024de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b2:	f7ff fabb 	bl	8001a2c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7ff fab7 	bl	8001a2c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e0b1      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ee      	beq.n	80024ba <HAL_RCC_OscConfig+0x37e>
 80024dc:	e014      	b.n	8002508 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7ff faa5 	bl	8001a2c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7ff faa1 	bl	8001a2c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e09b      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	4b40      	ldr	r3, [pc, #256]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ee      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b3c      	ldr	r3, [pc, #240]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a3b      	ldr	r2, [pc, #236]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8087 	beq.w	8002632 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d061      	beq.n	80025f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d146      	bne.n	80025c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7ff fa75 	bl	8001a2c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7ff fa71 	bl	8001a2c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e06d      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	4b29      	ldr	r3, [pc, #164]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256c:	d108      	bne.n	8002580 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800256e:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4921      	ldr	r1, [pc, #132]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002580:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a19      	ldr	r1, [r3, #32]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	430b      	orrs	r3, r1
 8002592:	491b      	ldr	r1, [pc, #108]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff fa45 	bl	8001a2c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff fa41 	bl	8001a2c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e03d      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b8:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x46a>
 80025c4:	e035      	b.n	8002632 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fa2e 	bl	8001a2c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7ff fa2a 	bl	8001a2c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e026      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x498>
 80025f2:	e01e      	b.n	8002632 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e019      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
 8002608:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_OscConfig+0x500>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	429a      	cmp	r2, r3
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0d0      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d910      	bls.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b67      	ldr	r3, [pc, #412]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 0207 	bic.w	r2, r3, #7
 800266a:	4965      	ldr	r1, [pc, #404]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b63      	ldr	r3, [pc, #396]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b8      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800269c:	4b59      	ldr	r3, [pc, #356]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a58      	ldr	r2, [pc, #352]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b4:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a52      	ldr	r2, [pc, #328]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b50      	ldr	r3, [pc, #320]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	494d      	ldr	r1, [pc, #308]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d040      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b47      	ldr	r3, [pc, #284]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d115      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b41      	ldr	r3, [pc, #260]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e073      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06b      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4936      	ldr	r1, [pc, #216]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7ff f97c 	bl	8001a2c <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7ff f978 	bl	8001a2c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e053      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2d      	ldr	r3, [pc, #180]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d210      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4922      	ldr	r1, [pc, #136]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e032      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4916      	ldr	r1, [pc, #88]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	490e      	ldr	r1, [pc, #56]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ce:	f000 f821 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	490a      	ldr	r1, [pc, #40]	@ (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	5ccb      	ldrb	r3, [r1, r3]
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a09      	ldr	r2, [pc, #36]	@ (800280c <HAL_RCC_ClockConfig+0x1cc>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ea:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <HAL_RCC_ClockConfig+0x1d0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8da 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40022000 	.word	0x40022000
 8002804:	40021000 	.word	0x40021000
 8002808:	08004fd0 	.word	0x08004fd0
 800280c:	2000006c 	.word	0x2000006c
 8002810:	20000070 	.word	0x20000070

08002814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800282e:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x30>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x36>
 8002842:	e027      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002846:	613b      	str	r3, [r7, #16]
      break;
 8002848:	e027      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	0c9b      	lsrs	r3, r3, #18
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a17      	ldr	r2, [pc, #92]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	0c5b      	lsrs	r3, r3, #17
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002876:	fb03 f202 	mul.w	r2, r3, r2
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e004      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0c      	ldr	r2, [pc, #48]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	613b      	str	r3, [r7, #16]
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002896:	613b      	str	r3, [r7, #16]
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	693b      	ldr	r3, [r7, #16]
}
 800289c:	4618      	mov	r0, r3
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
 80028ac:	007a1200 	.word	0x007a1200
 80028b0:	08004fe8 	.word	0x08004fe8
 80028b4:	08004ff8 	.word	0x08004ff8
 80028b8:	003d0900 	.word	0x003d0900

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b02      	ldr	r3, [pc, #8]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x10>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	2000006c 	.word	0x2000006c

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d4:	f7ff fff2 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	@ (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004fe0 	.word	0x08004fe0

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028fc:	f7ff ffde 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0adb      	lsrs	r3, r3, #11
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	@ (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08004fe0 	.word	0x08004fe0

08002920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002928:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <RCC_Delay+0x34>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <RCC_Delay+0x38>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0a5b      	lsrs	r3, r3, #9
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800293c:	bf00      	nop
  }
  while (Delay --);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	60fa      	str	r2, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f9      	bne.n	800293c <RCC_Delay+0x1c>
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	2000006c 	.word	0x2000006c
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e041      	b.n	80029f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fd72 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f000 fc10 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e03a      	b.n	8002a8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a18      	ldr	r2, [pc, #96]	@ (8002a94 <HAL_TIM_Base_Start_IT+0x98>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x58>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3e:	d009      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x58>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a14      	ldr	r2, [pc, #80]	@ (8002a98 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x58>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a13      	ldr	r2, [pc, #76]	@ (8002a9c <HAL_TIM_Base_Start_IT+0xa0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d010      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	e007      	b.n	8002a88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800

08002aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e041      	b.n	8002b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fd02 	bl	80014d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f000 fb6e 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x24>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e022      	b.n	8002baa <HAL_TIM_PWM_Start+0x6a>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d109      	bne.n	8002b7e <HAL_TIM_PWM_Start+0x3e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e015      	b.n	8002baa <HAL_TIM_PWM_Start+0x6a>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d109      	bne.n	8002b98 <HAL_TIM_PWM_Start+0x58>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e008      	b.n	8002baa <HAL_TIM_PWM_Start+0x6a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e05e      	b.n	8002c70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0x82>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc0:	e013      	b.n	8002bea <HAL_TIM_PWM_Start+0xaa>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0x92>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bd0:	e00b      	b.n	8002bea <HAL_TIM_PWM_Start+0xaa>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0xa2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be0:	e003      	b.n	8002bea <HAL_TIM_PWM_Start+0xaa>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fd70 	bl	80036d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c78 <HAL_TIM_PWM_Start+0x138>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d107      	bne.n	8002c12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <HAL_TIM_PWM_Start+0x138>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00e      	beq.n	8002c3a <HAL_TIM_PWM_Start+0xfa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c24:	d009      	beq.n	8002c3a <HAL_TIM_PWM_Start+0xfa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <HAL_TIM_PWM_Start+0x13c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIM_PWM_Start+0xfa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <HAL_TIM_PWM_Start+0x140>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d010      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5c:	e007      	b.n	8002c6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800

08002c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d020      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0202 	mvn.w	r2, #2
 8002cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa5a 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 8002cd4:	e005      	b.n	8002ce2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa4d 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fa5c 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d020      	beq.n	8002d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01b      	beq.n	8002d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0204 	mvn.w	r2, #4
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa34 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa27 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa36 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d020      	beq.n	8002d80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01b      	beq.n	8002d80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0208 	mvn.w	r2, #8
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2204      	movs	r2, #4
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa0e 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa01 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa10 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d020      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0210 	mvn.w	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2208      	movs	r2, #8
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9e8 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9db 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f9ea 	bl	800319a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00c      	beq.n	8002df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0201 	mvn.w	r2, #1
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe f920 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00c      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fd3e 	bl	8003890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9ba 	bl	80031ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00c      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0220 	mvn.w	r2, #32
 8002e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fd11 	bl	800387e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0ae      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	f200 809f 	bhi.w	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e92:	a201      	add	r2, pc, #4	@ (adr r2, 8002e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	08002fd1 	.word	0x08002fd1
 8002ea0:	08002fd1 	.word	0x08002fd1
 8002ea4:	08002fd1 	.word	0x08002fd1
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	08002fd1 	.word	0x08002fd1
 8002eb0:	08002fd1 	.word	0x08002fd1
 8002eb4:	08002fd1 	.word	0x08002fd1
 8002eb8:	08002f4f 	.word	0x08002f4f
 8002ebc:	08002fd1 	.word	0x08002fd1
 8002ec0:	08002fd1 	.word	0x08002fd1
 8002ec4:	08002fd1 	.word	0x08002fd1
 8002ec8:	08002f8f 	.word	0x08002f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f9e2 	bl	800329c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
      break;
 8002f0a:	e064      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa28 	bl	8003368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
      break;
 8002f4c:	e043      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fa71 	bl	800343c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0208 	orr.w	r2, r2, #8
 8002f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0204 	bic.w	r2, r2, #4
 8002f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
      break;
 8002f8c:	e023      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fabb 	bl	8003510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	61da      	str	r2, [r3, #28]
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIM_ConfigClockSource+0x1c>
 8003000:	2302      	movs	r3, #2
 8003002:	e0b4      	b.n	800316e <HAL_TIM_ConfigClockSource+0x186>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800302a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800303c:	d03e      	beq.n	80030bc <HAL_TIM_ConfigClockSource+0xd4>
 800303e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003042:	f200 8087 	bhi.w	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800304a:	f000 8086 	beq.w	800315a <HAL_TIM_ConfigClockSource+0x172>
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003052:	d87f      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b70      	cmp	r3, #112	@ 0x70
 8003056:	d01a      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xa6>
 8003058:	2b70      	cmp	r3, #112	@ 0x70
 800305a:	d87b      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b60      	cmp	r3, #96	@ 0x60
 800305e:	d050      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x11a>
 8003060:	2b60      	cmp	r3, #96	@ 0x60
 8003062:	d877      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b50      	cmp	r3, #80	@ 0x50
 8003066:	d03c      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003068:	2b50      	cmp	r3, #80	@ 0x50
 800306a:	d873      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d058      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x13a>
 8003070:	2b40      	cmp	r3, #64	@ 0x40
 8003072:	d86f      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b30      	cmp	r3, #48	@ 0x30
 8003076:	d064      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 8003078:	2b30      	cmp	r3, #48	@ 0x30
 800307a:	d86b      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d060      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	2b20      	cmp	r3, #32
 8003082:	d867      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05c      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	2b10      	cmp	r3, #16
 800308a:	d05a      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 800308c:	e062      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	f000 fafc 	bl	800369a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	609a      	str	r2, [r3, #8]
      break;
 80030ba:	e04f      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	f000 fae5 	bl	800369a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030de:	609a      	str	r2, [r3, #8]
      break;
 80030e0:	e03c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ee:	461a      	mov	r2, r3
 80030f0:	f000 fa5c 	bl	80035ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2150      	movs	r1, #80	@ 0x50
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fab3 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003100:	e02c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800310e:	461a      	mov	r2, r3
 8003110:	f000 fa7a 	bl	8003608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2160      	movs	r1, #96	@ 0x60
 800311a:	4618      	mov	r0, r3
 800311c:	f000 faa3 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003120:	e01c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	461a      	mov	r2, r3
 8003130:	f000 fa3c 	bl	80035ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2140      	movs	r1, #64	@ 0x40
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa93 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003140:	e00c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f000 fa8a 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003152:	e003      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      break;
 8003158:	e000      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800315a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
	...

080031c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003290 <TIM_Base_SetConfig+0xd0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <TIM_Base_SetConfig+0x30>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031de:	d007      	beq.n	80031f0 <TIM_Base_SetConfig+0x30>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003294 <TIM_Base_SetConfig+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_Base_SetConfig+0x30>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <TIM_Base_SetConfig+0xd8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d108      	bne.n	8003202 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a22      	ldr	r2, [pc, #136]	@ (8003290 <TIM_Base_SetConfig+0xd0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0x62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1f      	ldr	r2, [pc, #124]	@ (8003294 <TIM_Base_SetConfig+0xd4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0x62>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1e      	ldr	r2, [pc, #120]	@ (8003298 <TIM_Base_SetConfig+0xd8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0d      	ldr	r2, [pc, #52]	@ (8003290 <TIM_Base_SetConfig+0xd0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d103      	bne.n	8003268 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	611a      	str	r2, [r3, #16]
  }
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800

0800329c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 0201 	bic.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0302 	bic.w	r3, r3, #2
 80032e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <TIM_OC1_SetConfig+0xc8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10c      	bne.n	8003312 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0308 	bic.w	r3, r3, #8
 80032fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <TIM_OC1_SetConfig+0xc8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d111      	bne.n	800333e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00

08003368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 0210 	bic.w	r2, r3, #16
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <TIM_OC2_SetConfig+0xd0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10d      	bne.n	80033e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <TIM_OC2_SetConfig+0xd0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d113      	bne.n	8003414 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00

0800343c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a1d      	ldr	r2, [pc, #116]	@ (800350c <TIM_OC3_SetConfig+0xd0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10d      	bne.n	80034b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a14      	ldr	r2, [pc, #80]	@ (800350c <TIM_OC3_SetConfig+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d113      	bne.n	80034e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	621a      	str	r2, [r3, #32]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00

08003510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800355a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	031b      	lsls	r3, r3, #12
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0f      	ldr	r2, [pc, #60]	@ (80035a8 <TIM_OC4_SetConfig+0x98>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d109      	bne.n	8003584 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00

080035ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 030a 	bic.w	r3, r3, #10
 80035e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0210 	bic.w	r2, r3, #16
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	031b      	lsls	r3, r3, #12
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	f043 0307 	orr.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	609a      	str	r2, [r3, #8]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	021a      	lsls	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	431a      	orrs	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	609a      	str	r2, [r3, #8]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2201      	movs	r2, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003734:	2302      	movs	r3, #2
 8003736:	e046      	b.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003784:	d009      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a12      	ldr	r2, [pc, #72]	@ (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a10      	ldr	r2, [pc, #64]	@ (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10c      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800

080037dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e03d      	b.n	8003874 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e042      	b.n	800393a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd fef5 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2224      	movs	r2, #36	@ 0x24
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fdb0 	bl	800444c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800390a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800391a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b08a      	sub	sp, #40	@ 0x28
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	d175      	bne.n	8003a4e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_UART_Transmit+0x2c>
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06e      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2221      	movs	r2, #33	@ 0x21
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003980:	f7fe f854 	bl	8001a2c <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800399a:	d108      	bne.n	80039ae <HAL_UART_Transmit+0x6c>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	e003      	b.n	80039b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b6:	e02e      	b.n	8003a16 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	2180      	movs	r1, #128	@ 0x80
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fb14 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e03a      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	3302      	adds	r3, #2
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e007      	b.n	8003a08 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1cb      	bne.n	80039b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2140      	movs	r1, #64	@ 0x40
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fae0 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e006      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d112      	bne.n	8003a98 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_Receive_IT+0x26>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00b      	b.n	8003a9a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb07 	bl	80040a2 <UART_Start_Receive_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	e000      	b.n	8003a9a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b0ba      	sub	sp, #232	@ 0xe8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fbe3 	bl	80042ce <UART_Receive_IT>
      return;
 8003b08:	e25b      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80de 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
 8003b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80d1 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d011      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 81f2 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb6e 	bl	80042ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_UART_IRQHandler+0x17a>
 8003c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa78 	bl	8004114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d041      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e84 <HAL_UART_IRQHandler+0x3e0>)
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f81c 	bl	8001cd0 <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00e      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fc ff98 	bl	8000be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00a      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fc ff94 	bl	8000be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e006      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fc ff90 	bl	8000be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cca:	e175      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	bf00      	nop
    return;
 8003cce:	e173      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 814f 	bne.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8148 	beq.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8141 	beq.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80b6 	beq.w	8003e88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8145 	beq.w	8003fbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f080 813e 	bcs.w	8003fbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f000 8088 	beq.w	8003e64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d80:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1d9      	bne.n	8003d54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003db0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dc4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e1      	bne.n	8003da0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e3      	bne.n	8003ddc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e48:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd fefb 	bl	8001c5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8ad 	bl	8003fda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e80:	e09c      	b.n	8003fbc <HAL_UART_IRQHandler+0x518>
 8003e82:	bf00      	nop
 8003e84:	080041d9 	.word	0x080041d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 808e 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8089 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ed2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f832 	bl	8003fda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f76:	e023      	b.n	8003fc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_UART_IRQHandler+0x4f4>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f935 	bl	8004200 <UART_Transmit_IT>
    return;
 8003f96:	e014      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f974 	bl	800429e <UART_EndTransmit_IT>
    return;
 8003fb6:	e004      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fb8:	bf00      	nop
 8003fba:	e002      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fc0:	bf00      	nop
  }
}
 8003fc2:	37e8      	adds	r7, #232	@ 0xe8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	e03b      	b.n	800407a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d037      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fd fd0f 	bl	8001a2c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6a3a      	ldr	r2, [r7, #32]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <UART_WaitOnFlagUntilTimeout+0x30>
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e03a      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d023      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b80      	cmp	r3, #128	@ 0x80
 8004036:	d020      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	d01d      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b08      	cmp	r3, #8
 800404a:	d116      	bne.n	800407a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f856 	bl	8004114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2208      	movs	r2, #8
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e00f      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4013      	ands	r3, r2
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	bf0c      	ite	eq
 800408a:	2301      	moveq	r3, #1
 800408c:	2300      	movne	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	429a      	cmp	r2, r3
 8004096:	d0b4      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	88fa      	ldrh	r2, [r7, #6]
 80040ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2222      	movs	r2, #34	@ 0x22
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0220 	orr.w	r2, r2, #32
 8004106:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b095      	sub	sp, #84	@ 0x54
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800413c:	643a      	str	r2, [r7, #64]	@ 0x40
 800413e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e5      	bne.n	800411c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	2b01      	cmp	r3, #1
 800418a:	d119      	bne.n	80041c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	60bb      	str	r3, [r7, #8]
   return(result);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f023 0310 	bic.w	r3, r3, #16
 80041a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ac:	61ba      	str	r2, [r7, #24]
 80041ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6979      	ldr	r1, [r7, #20]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041ce:	bf00      	nop
 80041d0:	3754      	adds	r7, #84	@ 0x54
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7fc fcf6 	bl	8000be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b21      	cmp	r3, #33	@ 0x21
 8004212:	d13e      	bne.n	8004292 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421c:	d114      	bne.n	8004248 <UART_Transmit_IT+0x48>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d110      	bne.n	8004248 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	621a      	str	r2, [r3, #32]
 8004246:	e008      	b.n	800425a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	1c59      	adds	r1, r3, #1
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6211      	str	r1, [r2, #32]
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29b      	uxth	r3, r3
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4619      	mov	r1, r3
 8004268:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800427c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800428c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fe82 	bl	8003fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b08c      	sub	sp, #48	@ 0x30
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b22      	cmp	r3, #34	@ 0x22
 80042e0:	f040 80ae 	bne.w	8004440 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ec:	d117      	bne.n	800431e <UART_Receive_IT+0x50>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d113      	bne.n	800431e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430c:	b29a      	uxth	r2, r3
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	1c9a      	adds	r2, r3, #2
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	629a      	str	r2, [r3, #40]	@ 0x28
 800431c:	e026      	b.n	800436c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004330:	d007      	beq.n	8004342 <UART_Receive_IT+0x74>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <UART_Receive_IT+0x82>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e008      	b.n	8004362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800435c:	b2da      	uxtb	r2, r3
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29b      	uxth	r3, r3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4619      	mov	r1, r3
 800437a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800437c:	2b00      	cmp	r3, #0
 800437e:	d15d      	bne.n	800443c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0220 	bic.w	r2, r2, #32
 800438e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800439e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d135      	bne.n	8004432 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	613b      	str	r3, [r7, #16]
   return(result);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 0310 	bic.w	r3, r3, #16
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	330c      	adds	r3, #12
 80043ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ec:	623a      	str	r2, [r7, #32]
 80043ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69f9      	ldr	r1, [r7, #28]
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b10      	cmp	r3, #16
 800440c:	d10a      	bne.n	8004424 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fdd5 	bl	8003fda <HAL_UARTEx_RxEventCallback>
 8004430:	e002      	b.n	8004438 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fb80 	bl	8000b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e002      	b.n	8004442 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3730      	adds	r7, #48	@ 0x30
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004486:	f023 030c 	bic.w	r3, r3, #12
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	430b      	orrs	r3, r1
 8004492:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004560 <UART_SetConfig+0x114>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d103      	bne.n	80044bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe fa20 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	e002      	b.n	80044c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044bc:	f7fe fa08 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 80044c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009a      	lsls	r2, r3, #2
 80044cc:	441a      	add	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	4a22      	ldr	r2, [pc, #136]	@ (8004564 <UART_SetConfig+0x118>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	0119      	lsls	r1, r3, #4
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <UART_SetConfig+0x118>)
 80044fa:	fba3 0302 	umull	r0, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2064      	movs	r0, #100	@ 0x64
 8004502:	fb00 f303 	mul.w	r3, r0, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	@ 0x32
 800450c:	4a15      	ldr	r2, [pc, #84]	@ (8004564 <UART_SetConfig+0x118>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004518:	4419      	add	r1, r3
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004530:	4b0c      	ldr	r3, [pc, #48]	@ (8004564 <UART_SetConfig+0x118>)
 8004532:	fba3 0302 	umull	r0, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2064      	movs	r0, #100	@ 0x64
 800453a:	fb00 f303 	mul.w	r3, r0, r3
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	3332      	adds	r3, #50	@ 0x32
 8004544:	4a07      	ldr	r2, [pc, #28]	@ (8004564 <UART_SetConfig+0x118>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	f003 020f 	and.w	r2, r3, #15
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	440a      	add	r2, r1
 8004556:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40013800 	.word	0x40013800
 8004564:	51eb851f 	.word	0x51eb851f

08004568 <sniprintf>:
 8004568:	b40c      	push	{r2, r3}
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	4b17      	ldr	r3, [pc, #92]	@ (80045cc <sniprintf+0x64>)
 800456e:	1e0c      	subs	r4, r1, #0
 8004570:	681d      	ldr	r5, [r3, #0]
 8004572:	b09d      	sub	sp, #116	@ 0x74
 8004574:	da08      	bge.n	8004588 <sniprintf+0x20>
 8004576:	238b      	movs	r3, #139	@ 0x8b
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	602b      	str	r3, [r5, #0]
 800457e:	b01d      	add	sp, #116	@ 0x74
 8004580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004584:	b002      	add	sp, #8
 8004586:	4770      	bx	lr
 8004588:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800458c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004590:	bf0c      	ite	eq
 8004592:	4623      	moveq	r3, r4
 8004594:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	9307      	str	r3, [sp, #28]
 800459c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045a0:	9002      	str	r0, [sp, #8]
 80045a2:	9006      	str	r0, [sp, #24]
 80045a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045a8:	4628      	mov	r0, r5
 80045aa:	ab21      	add	r3, sp, #132	@ 0x84
 80045ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80045ae:	a902      	add	r1, sp, #8
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	f000 f9a1 	bl	80048f8 <_svfiprintf_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	bfbc      	itt	lt
 80045ba:	238b      	movlt	r3, #139	@ 0x8b
 80045bc:	602b      	strlt	r3, [r5, #0]
 80045be:	2c00      	cmp	r4, #0
 80045c0:	d0dd      	beq.n	800457e <sniprintf+0x16>
 80045c2:	2200      	movs	r2, #0
 80045c4:	9b02      	ldr	r3, [sp, #8]
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e7d9      	b.n	800457e <sniprintf+0x16>
 80045ca:	bf00      	nop
 80045cc:	20000078 	.word	0x20000078

080045d0 <memset>:
 80045d0:	4603      	mov	r3, r0
 80045d2:	4402      	add	r2, r0
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d100      	bne.n	80045da <memset+0xa>
 80045d8:	4770      	bx	lr
 80045da:	f803 1b01 	strb.w	r1, [r3], #1
 80045de:	e7f9      	b.n	80045d4 <memset+0x4>

080045e0 <__errno>:
 80045e0:	4b01      	ldr	r3, [pc, #4]	@ (80045e8 <__errno+0x8>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000078 	.word	0x20000078

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2600      	movs	r6, #0
 80045f0:	4d0c      	ldr	r5, [pc, #48]	@ (8004624 <__libc_init_array+0x38>)
 80045f2:	4c0d      	ldr	r4, [pc, #52]	@ (8004628 <__libc_init_array+0x3c>)
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	f000 fc78 	bl	8004ef0 <_init>
 8004600:	2600      	movs	r6, #0
 8004602:	4d0a      	ldr	r5, [pc, #40]	@ (800462c <__libc_init_array+0x40>)
 8004604:	4c0a      	ldr	r4, [pc, #40]	@ (8004630 <__libc_init_array+0x44>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08005030 	.word	0x08005030
 8004628:	08005030 	.word	0x08005030
 800462c:	08005030 	.word	0x08005030
 8004630:	08005034 	.word	0x08005034

08004634 <__retarget_lock_acquire_recursive>:
 8004634:	4770      	bx	lr

08004636 <__retarget_lock_release_recursive>:
 8004636:	4770      	bx	lr

08004638 <memcpy>:
 8004638:	440a      	add	r2, r1
 800463a:	4291      	cmp	r1, r2
 800463c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004640:	d100      	bne.n	8004644 <memcpy+0xc>
 8004642:	4770      	bx	lr
 8004644:	b510      	push	{r4, lr}
 8004646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800464a:	4291      	cmp	r1, r2
 800464c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004650:	d1f9      	bne.n	8004646 <memcpy+0xe>
 8004652:	bd10      	pop	{r4, pc}

08004654 <_free_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4605      	mov	r5, r0
 8004658:	2900      	cmp	r1, #0
 800465a:	d040      	beq.n	80046de <_free_r+0x8a>
 800465c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004660:	1f0c      	subs	r4, r1, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfb8      	it	lt
 8004666:	18e4      	addlt	r4, r4, r3
 8004668:	f000 f8de 	bl	8004828 <__malloc_lock>
 800466c:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <_free_r+0x8c>)
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	b933      	cbnz	r3, 8004680 <_free_r+0x2c>
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	6014      	str	r4, [r2, #0]
 8004676:	4628      	mov	r0, r5
 8004678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800467c:	f000 b8da 	b.w	8004834 <__malloc_unlock>
 8004680:	42a3      	cmp	r3, r4
 8004682:	d908      	bls.n	8004696 <_free_r+0x42>
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	1821      	adds	r1, r4, r0
 8004688:	428b      	cmp	r3, r1
 800468a:	bf01      	itttt	eq
 800468c:	6819      	ldreq	r1, [r3, #0]
 800468e:	685b      	ldreq	r3, [r3, #4]
 8004690:	1809      	addeq	r1, r1, r0
 8004692:	6021      	streq	r1, [r4, #0]
 8004694:	e7ed      	b.n	8004672 <_free_r+0x1e>
 8004696:	461a      	mov	r2, r3
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b10b      	cbz	r3, 80046a0 <_free_r+0x4c>
 800469c:	42a3      	cmp	r3, r4
 800469e:	d9fa      	bls.n	8004696 <_free_r+0x42>
 80046a0:	6811      	ldr	r1, [r2, #0]
 80046a2:	1850      	adds	r0, r2, r1
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d10b      	bne.n	80046c0 <_free_r+0x6c>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	4401      	add	r1, r0
 80046ac:	1850      	adds	r0, r2, r1
 80046ae:	4283      	cmp	r3, r0
 80046b0:	6011      	str	r1, [r2, #0]
 80046b2:	d1e0      	bne.n	8004676 <_free_r+0x22>
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4408      	add	r0, r1
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	6053      	str	r3, [r2, #4]
 80046be:	e7da      	b.n	8004676 <_free_r+0x22>
 80046c0:	d902      	bls.n	80046c8 <_free_r+0x74>
 80046c2:	230c      	movs	r3, #12
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	e7d6      	b.n	8004676 <_free_r+0x22>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	1821      	adds	r1, r4, r0
 80046cc:	428b      	cmp	r3, r1
 80046ce:	bf01      	itttt	eq
 80046d0:	6819      	ldreq	r1, [r3, #0]
 80046d2:	685b      	ldreq	r3, [r3, #4]
 80046d4:	1809      	addeq	r1, r1, r0
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	6054      	str	r4, [r2, #4]
 80046dc:	e7cb      	b.n	8004676 <_free_r+0x22>
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	200004fc 	.word	0x200004fc

080046e4 <sbrk_aligned>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004724 <sbrk_aligned+0x40>)
 80046e8:	460c      	mov	r4, r1
 80046ea:	6831      	ldr	r1, [r6, #0]
 80046ec:	4605      	mov	r5, r0
 80046ee:	b911      	cbnz	r1, 80046f6 <sbrk_aligned+0x12>
 80046f0:	f000 fbaa 	bl	8004e48 <_sbrk_r>
 80046f4:	6030      	str	r0, [r6, #0]
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fba5 	bl	8004e48 <_sbrk_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d103      	bne.n	800470a <sbrk_aligned+0x26>
 8004702:	f04f 34ff 	mov.w	r4, #4294967295
 8004706:	4620      	mov	r0, r4
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d0f8      	beq.n	8004706 <sbrk_aligned+0x22>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4628      	mov	r0, r5
 8004718:	f000 fb96 	bl	8004e48 <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d1f2      	bne.n	8004706 <sbrk_aligned+0x22>
 8004720:	e7ef      	b.n	8004702 <sbrk_aligned+0x1e>
 8004722:	bf00      	nop
 8004724:	200004f8 	.word	0x200004f8

08004728 <_malloc_r>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	1ccd      	adds	r5, r1, #3
 800472e:	f025 0503 	bic.w	r5, r5, #3
 8004732:	3508      	adds	r5, #8
 8004734:	2d0c      	cmp	r5, #12
 8004736:	bf38      	it	cc
 8004738:	250c      	movcc	r5, #12
 800473a:	2d00      	cmp	r5, #0
 800473c:	4606      	mov	r6, r0
 800473e:	db01      	blt.n	8004744 <_malloc_r+0x1c>
 8004740:	42a9      	cmp	r1, r5
 8004742:	d904      	bls.n	800474e <_malloc_r+0x26>
 8004744:	230c      	movs	r3, #12
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	2000      	movs	r0, #0
 800474a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004824 <_malloc_r+0xfc>
 8004752:	f000 f869 	bl	8004828 <__malloc_lock>
 8004756:	f8d8 3000 	ldr.w	r3, [r8]
 800475a:	461c      	mov	r4, r3
 800475c:	bb44      	cbnz	r4, 80047b0 <_malloc_r+0x88>
 800475e:	4629      	mov	r1, r5
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff ffbf 	bl	80046e4 <sbrk_aligned>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	4604      	mov	r4, r0
 800476a:	d158      	bne.n	800481e <_malloc_r+0xf6>
 800476c:	f8d8 4000 	ldr.w	r4, [r8]
 8004770:	4627      	mov	r7, r4
 8004772:	2f00      	cmp	r7, #0
 8004774:	d143      	bne.n	80047fe <_malloc_r+0xd6>
 8004776:	2c00      	cmp	r4, #0
 8004778:	d04b      	beq.n	8004812 <_malloc_r+0xea>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4639      	mov	r1, r7
 800477e:	4630      	mov	r0, r6
 8004780:	eb04 0903 	add.w	r9, r4, r3
 8004784:	f000 fb60 	bl	8004e48 <_sbrk_r>
 8004788:	4581      	cmp	r9, r0
 800478a:	d142      	bne.n	8004812 <_malloc_r+0xea>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	4630      	mov	r0, r6
 8004790:	1a6d      	subs	r5, r5, r1
 8004792:	4629      	mov	r1, r5
 8004794:	f7ff ffa6 	bl	80046e4 <sbrk_aligned>
 8004798:	3001      	adds	r0, #1
 800479a:	d03a      	beq.n	8004812 <_malloc_r+0xea>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	442b      	add	r3, r5
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	f8d8 3000 	ldr.w	r3, [r8]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	bb62      	cbnz	r2, 8004804 <_malloc_r+0xdc>
 80047aa:	f8c8 7000 	str.w	r7, [r8]
 80047ae:	e00f      	b.n	80047d0 <_malloc_r+0xa8>
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	1b52      	subs	r2, r2, r5
 80047b4:	d420      	bmi.n	80047f8 <_malloc_r+0xd0>
 80047b6:	2a0b      	cmp	r2, #11
 80047b8:	d917      	bls.n	80047ea <_malloc_r+0xc2>
 80047ba:	1961      	adds	r1, r4, r5
 80047bc:	42a3      	cmp	r3, r4
 80047be:	6025      	str	r5, [r4, #0]
 80047c0:	bf18      	it	ne
 80047c2:	6059      	strne	r1, [r3, #4]
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	bf08      	it	eq
 80047c8:	f8c8 1000 	streq.w	r1, [r8]
 80047cc:	5162      	str	r2, [r4, r5]
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f82f 	bl	8004834 <__malloc_unlock>
 80047d6:	f104 000b 	add.w	r0, r4, #11
 80047da:	1d23      	adds	r3, r4, #4
 80047dc:	f020 0007 	bic.w	r0, r0, #7
 80047e0:	1ac2      	subs	r2, r0, r3
 80047e2:	bf1c      	itt	ne
 80047e4:	1a1b      	subne	r3, r3, r0
 80047e6:	50a3      	strne	r3, [r4, r2]
 80047e8:	e7af      	b.n	800474a <_malloc_r+0x22>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	bf0c      	ite	eq
 80047f0:	f8c8 2000 	streq.w	r2, [r8]
 80047f4:	605a      	strne	r2, [r3, #4]
 80047f6:	e7eb      	b.n	80047d0 <_malloc_r+0xa8>
 80047f8:	4623      	mov	r3, r4
 80047fa:	6864      	ldr	r4, [r4, #4]
 80047fc:	e7ae      	b.n	800475c <_malloc_r+0x34>
 80047fe:	463c      	mov	r4, r7
 8004800:	687f      	ldr	r7, [r7, #4]
 8004802:	e7b6      	b.n	8004772 <_malloc_r+0x4a>
 8004804:	461a      	mov	r2, r3
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	42a3      	cmp	r3, r4
 800480a:	d1fb      	bne.n	8004804 <_malloc_r+0xdc>
 800480c:	2300      	movs	r3, #0
 800480e:	6053      	str	r3, [r2, #4]
 8004810:	e7de      	b.n	80047d0 <_malloc_r+0xa8>
 8004812:	230c      	movs	r3, #12
 8004814:	4630      	mov	r0, r6
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	f000 f80c 	bl	8004834 <__malloc_unlock>
 800481c:	e794      	b.n	8004748 <_malloc_r+0x20>
 800481e:	6005      	str	r5, [r0, #0]
 8004820:	e7d6      	b.n	80047d0 <_malloc_r+0xa8>
 8004822:	bf00      	nop
 8004824:	200004fc 	.word	0x200004fc

08004828 <__malloc_lock>:
 8004828:	4801      	ldr	r0, [pc, #4]	@ (8004830 <__malloc_lock+0x8>)
 800482a:	f7ff bf03 	b.w	8004634 <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	200004f4 	.word	0x200004f4

08004834 <__malloc_unlock>:
 8004834:	4801      	ldr	r0, [pc, #4]	@ (800483c <__malloc_unlock+0x8>)
 8004836:	f7ff befe 	b.w	8004636 <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	200004f4 	.word	0x200004f4

08004840 <__ssputs_r>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	461f      	mov	r7, r3
 8004846:	688e      	ldr	r6, [r1, #8]
 8004848:	4682      	mov	sl, r0
 800484a:	42be      	cmp	r6, r7
 800484c:	460c      	mov	r4, r1
 800484e:	4690      	mov	r8, r2
 8004850:	680b      	ldr	r3, [r1, #0]
 8004852:	d82d      	bhi.n	80048b0 <__ssputs_r+0x70>
 8004854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800485c:	d026      	beq.n	80048ac <__ssputs_r+0x6c>
 800485e:	6965      	ldr	r5, [r4, #20]
 8004860:	6909      	ldr	r1, [r1, #16]
 8004862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004866:	eba3 0901 	sub.w	r9, r3, r1
 800486a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800486e:	1c7b      	adds	r3, r7, #1
 8004870:	444b      	add	r3, r9
 8004872:	106d      	asrs	r5, r5, #1
 8004874:	429d      	cmp	r5, r3
 8004876:	bf38      	it	cc
 8004878:	461d      	movcc	r5, r3
 800487a:	0553      	lsls	r3, r2, #21
 800487c:	d527      	bpl.n	80048ce <__ssputs_r+0x8e>
 800487e:	4629      	mov	r1, r5
 8004880:	f7ff ff52 	bl	8004728 <_malloc_r>
 8004884:	4606      	mov	r6, r0
 8004886:	b360      	cbz	r0, 80048e2 <__ssputs_r+0xa2>
 8004888:	464a      	mov	r2, r9
 800488a:	6921      	ldr	r1, [r4, #16]
 800488c:	f7ff fed4 	bl	8004638 <memcpy>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	6126      	str	r6, [r4, #16]
 800489e:	444e      	add	r6, r9
 80048a0:	6026      	str	r6, [r4, #0]
 80048a2:	463e      	mov	r6, r7
 80048a4:	6165      	str	r5, [r4, #20]
 80048a6:	eba5 0509 	sub.w	r5, r5, r9
 80048aa:	60a5      	str	r5, [r4, #8]
 80048ac:	42be      	cmp	r6, r7
 80048ae:	d900      	bls.n	80048b2 <__ssputs_r+0x72>
 80048b0:	463e      	mov	r6, r7
 80048b2:	4632      	mov	r2, r6
 80048b4:	4641      	mov	r1, r8
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	f000 faac 	bl	8004e14 <memmove>
 80048bc:	2000      	movs	r0, #0
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	1b9b      	subs	r3, r3, r6
 80048c2:	60a3      	str	r3, [r4, #8]
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	4433      	add	r3, r6
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ce:	462a      	mov	r2, r5
 80048d0:	f000 fad8 	bl	8004e84 <_realloc_r>
 80048d4:	4606      	mov	r6, r0
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d1e0      	bne.n	800489c <__ssputs_r+0x5c>
 80048da:	4650      	mov	r0, sl
 80048dc:	6921      	ldr	r1, [r4, #16]
 80048de:	f7ff feb9 	bl	8004654 <_free_r>
 80048e2:	230c      	movs	r3, #12
 80048e4:	f8ca 3000 	str.w	r3, [sl]
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295
 80048ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	e7e9      	b.n	80048ca <__ssputs_r+0x8a>
	...

080048f8 <_svfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	4698      	mov	r8, r3
 80048fe:	898b      	ldrh	r3, [r1, #12]
 8004900:	4607      	mov	r7, r0
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	460d      	mov	r5, r1
 8004906:	4614      	mov	r4, r2
 8004908:	b09d      	sub	sp, #116	@ 0x74
 800490a:	d510      	bpl.n	800492e <_svfiprintf_r+0x36>
 800490c:	690b      	ldr	r3, [r1, #16]
 800490e:	b973      	cbnz	r3, 800492e <_svfiprintf_r+0x36>
 8004910:	2140      	movs	r1, #64	@ 0x40
 8004912:	f7ff ff09 	bl	8004728 <_malloc_r>
 8004916:	6028      	str	r0, [r5, #0]
 8004918:	6128      	str	r0, [r5, #16]
 800491a:	b930      	cbnz	r0, 800492a <_svfiprintf_r+0x32>
 800491c:	230c      	movs	r3, #12
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	b01d      	add	sp, #116	@ 0x74
 8004926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	2340      	movs	r3, #64	@ 0x40
 800492c:	616b      	str	r3, [r5, #20]
 800492e:	2300      	movs	r3, #0
 8004930:	9309      	str	r3, [sp, #36]	@ 0x24
 8004932:	2320      	movs	r3, #32
 8004934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004938:	2330      	movs	r3, #48	@ 0x30
 800493a:	f04f 0901 	mov.w	r9, #1
 800493e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004942:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004adc <_svfiprintf_r+0x1e4>
 8004946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800494a:	4623      	mov	r3, r4
 800494c:	469a      	mov	sl, r3
 800494e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004952:	b10a      	cbz	r2, 8004958 <_svfiprintf_r+0x60>
 8004954:	2a25      	cmp	r2, #37	@ 0x25
 8004956:	d1f9      	bne.n	800494c <_svfiprintf_r+0x54>
 8004958:	ebba 0b04 	subs.w	fp, sl, r4
 800495c:	d00b      	beq.n	8004976 <_svfiprintf_r+0x7e>
 800495e:	465b      	mov	r3, fp
 8004960:	4622      	mov	r2, r4
 8004962:	4629      	mov	r1, r5
 8004964:	4638      	mov	r0, r7
 8004966:	f7ff ff6b 	bl	8004840 <__ssputs_r>
 800496a:	3001      	adds	r0, #1
 800496c:	f000 80a7 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004972:	445a      	add	r2, fp
 8004974:	9209      	str	r2, [sp, #36]	@ 0x24
 8004976:	f89a 3000 	ldrb.w	r3, [sl]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 809f 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004980:	2300      	movs	r3, #0
 8004982:	f04f 32ff 	mov.w	r2, #4294967295
 8004986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800498a:	f10a 0a01 	add.w	sl, sl, #1
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	9307      	str	r3, [sp, #28]
 8004992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004996:	931a      	str	r3, [sp, #104]	@ 0x68
 8004998:	4654      	mov	r4, sl
 800499a:	2205      	movs	r2, #5
 800499c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a0:	484e      	ldr	r0, [pc, #312]	@ (8004adc <_svfiprintf_r+0x1e4>)
 80049a2:	f000 fa61 	bl	8004e68 <memchr>
 80049a6:	9a04      	ldr	r2, [sp, #16]
 80049a8:	b9d8      	cbnz	r0, 80049e2 <_svfiprintf_r+0xea>
 80049aa:	06d0      	lsls	r0, r2, #27
 80049ac:	bf44      	itt	mi
 80049ae:	2320      	movmi	r3, #32
 80049b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049b4:	0711      	lsls	r1, r2, #28
 80049b6:	bf44      	itt	mi
 80049b8:	232b      	movmi	r3, #43	@ 0x2b
 80049ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049be:	f89a 3000 	ldrb.w	r3, [sl]
 80049c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c4:	d015      	beq.n	80049f2 <_svfiprintf_r+0xfa>
 80049c6:	4654      	mov	r4, sl
 80049c8:	2000      	movs	r0, #0
 80049ca:	f04f 0c0a 	mov.w	ip, #10
 80049ce:	9a07      	ldr	r2, [sp, #28]
 80049d0:	4621      	mov	r1, r4
 80049d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d6:	3b30      	subs	r3, #48	@ 0x30
 80049d8:	2b09      	cmp	r3, #9
 80049da:	d94b      	bls.n	8004a74 <_svfiprintf_r+0x17c>
 80049dc:	b1b0      	cbz	r0, 8004a0c <_svfiprintf_r+0x114>
 80049de:	9207      	str	r2, [sp, #28]
 80049e0:	e014      	b.n	8004a0c <_svfiprintf_r+0x114>
 80049e2:	eba0 0308 	sub.w	r3, r0, r8
 80049e6:	fa09 f303 	lsl.w	r3, r9, r3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	46a2      	mov	sl, r4
 80049ee:	9304      	str	r3, [sp, #16]
 80049f0:	e7d2      	b.n	8004998 <_svfiprintf_r+0xa0>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	1d19      	adds	r1, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	9103      	str	r1, [sp, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bfbb      	ittet	lt
 80049fe:	425b      	neglt	r3, r3
 8004a00:	f042 0202 	orrlt.w	r2, r2, #2
 8004a04:	9307      	strge	r3, [sp, #28]
 8004a06:	9307      	strlt	r3, [sp, #28]
 8004a08:	bfb8      	it	lt
 8004a0a:	9204      	strlt	r2, [sp, #16]
 8004a0c:	7823      	ldrb	r3, [r4, #0]
 8004a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a10:	d10a      	bne.n	8004a28 <_svfiprintf_r+0x130>
 8004a12:	7863      	ldrb	r3, [r4, #1]
 8004a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a16:	d132      	bne.n	8004a7e <_svfiprintf_r+0x186>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	3402      	adds	r4, #2
 8004a1c:	1d1a      	adds	r2, r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	9203      	str	r2, [sp, #12]
 8004a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004ae0 <_svfiprintf_r+0x1e8>
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4650      	mov	r0, sl
 8004a30:	7821      	ldrb	r1, [r4, #0]
 8004a32:	f000 fa19 	bl	8004e68 <memchr>
 8004a36:	b138      	cbz	r0, 8004a48 <_svfiprintf_r+0x150>
 8004a38:	2240      	movs	r2, #64	@ 0x40
 8004a3a:	9b04      	ldr	r3, [sp, #16]
 8004a3c:	eba0 000a 	sub.w	r0, r0, sl
 8004a40:	4082      	lsls	r2, r0
 8004a42:	4313      	orrs	r3, r2
 8004a44:	3401      	adds	r4, #1
 8004a46:	9304      	str	r3, [sp, #16]
 8004a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4c:	2206      	movs	r2, #6
 8004a4e:	4825      	ldr	r0, [pc, #148]	@ (8004ae4 <_svfiprintf_r+0x1ec>)
 8004a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a54:	f000 fa08 	bl	8004e68 <memchr>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d036      	beq.n	8004aca <_svfiprintf_r+0x1d2>
 8004a5c:	4b22      	ldr	r3, [pc, #136]	@ (8004ae8 <_svfiprintf_r+0x1f0>)
 8004a5e:	bb1b      	cbnz	r3, 8004aa8 <_svfiprintf_r+0x1b0>
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	3307      	adds	r3, #7
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	3308      	adds	r3, #8
 8004a6a:	9303      	str	r3, [sp, #12]
 8004a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6e:	4433      	add	r3, r6
 8004a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a72:	e76a      	b.n	800494a <_svfiprintf_r+0x52>
 8004a74:	460c      	mov	r4, r1
 8004a76:	2001      	movs	r0, #1
 8004a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a7c:	e7a8      	b.n	80049d0 <_svfiprintf_r+0xd8>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f04f 0c0a 	mov.w	ip, #10
 8004a84:	4619      	mov	r1, r3
 8004a86:	3401      	adds	r4, #1
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a90:	3a30      	subs	r2, #48	@ 0x30
 8004a92:	2a09      	cmp	r2, #9
 8004a94:	d903      	bls.n	8004a9e <_svfiprintf_r+0x1a6>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0c6      	beq.n	8004a28 <_svfiprintf_r+0x130>
 8004a9a:	9105      	str	r1, [sp, #20]
 8004a9c:	e7c4      	b.n	8004a28 <_svfiprintf_r+0x130>
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa6:	e7f0      	b.n	8004a8a <_svfiprintf_r+0x192>
 8004aa8:	ab03      	add	r3, sp, #12
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	462a      	mov	r2, r5
 8004aae:	4638      	mov	r0, r7
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <_svfiprintf_r+0x1f4>)
 8004ab2:	a904      	add	r1, sp, #16
 8004ab4:	f3af 8000 	nop.w
 8004ab8:	1c42      	adds	r2, r0, #1
 8004aba:	4606      	mov	r6, r0
 8004abc:	d1d6      	bne.n	8004a6c <_svfiprintf_r+0x174>
 8004abe:	89ab      	ldrh	r3, [r5, #12]
 8004ac0:	065b      	lsls	r3, r3, #25
 8004ac2:	f53f af2d 	bmi.w	8004920 <_svfiprintf_r+0x28>
 8004ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac8:	e72c      	b.n	8004924 <_svfiprintf_r+0x2c>
 8004aca:	ab03      	add	r3, sp, #12
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	462a      	mov	r2, r5
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <_svfiprintf_r+0x1f4>)
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	f000 f87d 	bl	8004bd4 <_printf_i>
 8004ada:	e7ed      	b.n	8004ab8 <_svfiprintf_r+0x1c0>
 8004adc:	08004ffa 	.word	0x08004ffa
 8004ae0:	08005000 	.word	0x08005000
 8004ae4:	08005004 	.word	0x08005004
 8004ae8:	00000000 	.word	0x00000000
 8004aec:	08004841 	.word	0x08004841

08004af0 <_printf_common>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	4616      	mov	r6, r2
 8004af6:	4698      	mov	r8, r3
 8004af8:	688a      	ldr	r2, [r1, #8]
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	4607      	mov	r7, r0
 8004afe:	4293      	cmp	r3, r2
 8004b00:	bfb8      	it	lt
 8004b02:	4613      	movlt	r3, r2
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b10:	b10a      	cbz	r2, 8004b16 <_printf_common+0x26>
 8004b12:	3301      	adds	r3, #1
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	6833      	ldrmi	r3, [r6, #0]
 8004b1e:	3302      	addmi	r3, #2
 8004b20:	6033      	strmi	r3, [r6, #0]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f015 0506 	ands.w	r5, r5, #6
 8004b28:	d106      	bne.n	8004b38 <_printf_common+0x48>
 8004b2a:	f104 0a19 	add.w	sl, r4, #25
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	6832      	ldr	r2, [r6, #0]
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dc2b      	bgt.n	8004b90 <_printf_common+0xa0>
 8004b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	3b00      	subs	r3, #0
 8004b40:	bf18      	it	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	0692      	lsls	r2, r2, #26
 8004b46:	d430      	bmi.n	8004baa <_printf_common+0xba>
 8004b48:	4641      	mov	r1, r8
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b50:	47c8      	blx	r9
 8004b52:	3001      	adds	r0, #1
 8004b54:	d023      	beq.n	8004b9e <_printf_common+0xae>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	6922      	ldr	r2, [r4, #16]
 8004b5a:	f003 0306 	and.w	r3, r3, #6
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf14      	ite	ne
 8004b62:	2500      	movne	r5, #0
 8004b64:	6833      	ldreq	r3, [r6, #0]
 8004b66:	f04f 0600 	mov.w	r6, #0
 8004b6a:	bf08      	it	eq
 8004b6c:	68e5      	ldreq	r5, [r4, #12]
 8004b6e:	f104 041a 	add.w	r4, r4, #26
 8004b72:	bf08      	it	eq
 8004b74:	1aed      	subeq	r5, r5, r3
 8004b76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b7a:	bf08      	it	eq
 8004b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b80:	4293      	cmp	r3, r2
 8004b82:	bfc4      	itt	gt
 8004b84:	1a9b      	subgt	r3, r3, r2
 8004b86:	18ed      	addgt	r5, r5, r3
 8004b88:	42b5      	cmp	r5, r6
 8004b8a:	d11a      	bne.n	8004bc2 <_printf_common+0xd2>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e008      	b.n	8004ba2 <_printf_common+0xb2>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4652      	mov	r2, sl
 8004b94:	4641      	mov	r1, r8
 8004b96:	4638      	mov	r0, r7
 8004b98:	47c8      	blx	r9
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d103      	bne.n	8004ba6 <_printf_common+0xb6>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7c1      	b.n	8004b2e <_printf_common+0x3e>
 8004baa:	2030      	movs	r0, #48	@ 0x30
 8004bac:	18e1      	adds	r1, r4, r3
 8004bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bb8:	4422      	add	r2, r4
 8004bba:	3302      	adds	r3, #2
 8004bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bc0:	e7c2      	b.n	8004b48 <_printf_common+0x58>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c8      	blx	r9
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0e6      	beq.n	8004b9e <_printf_common+0xae>
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7d9      	b.n	8004b88 <_printf_common+0x98>

08004bd4 <_printf_i>:
 8004bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	7e0f      	ldrb	r7, [r1, #24]
 8004bda:	4691      	mov	r9, r2
 8004bdc:	2f78      	cmp	r7, #120	@ 0x78
 8004bde:	4680      	mov	r8, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	469a      	mov	sl, r3
 8004be4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bea:	d807      	bhi.n	8004bfc <_printf_i+0x28>
 8004bec:	2f62      	cmp	r7, #98	@ 0x62
 8004bee:	d80a      	bhi.n	8004c06 <_printf_i+0x32>
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	f000 80d3 	beq.w	8004d9c <_printf_i+0x1c8>
 8004bf6:	2f58      	cmp	r7, #88	@ 0x58
 8004bf8:	f000 80ba 	beq.w	8004d70 <_printf_i+0x19c>
 8004bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c04:	e03a      	b.n	8004c7c <_printf_i+0xa8>
 8004c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c0a:	2b15      	cmp	r3, #21
 8004c0c:	d8f6      	bhi.n	8004bfc <_printf_i+0x28>
 8004c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c14 <_printf_i+0x40>)
 8004c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004bfd 	.word	0x08004bfd
 8004c20:	08004bfd 	.word	0x08004bfd
 8004c24:	08004bfd 	.word	0x08004bfd
 8004c28:	08004bfd 	.word	0x08004bfd
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004bfd 	.word	0x08004bfd
 8004c34:	08004bfd 	.word	0x08004bfd
 8004c38:	08004bfd 	.word	0x08004bfd
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	08004d83 	.word	0x08004d83
 8004c44:	08004cab 	.word	0x08004cab
 8004c48:	08004d3d 	.word	0x08004d3d
 8004c4c:	08004bfd 	.word	0x08004bfd
 8004c50:	08004bfd 	.word	0x08004bfd
 8004c54:	08004da5 	.word	0x08004da5
 8004c58:	08004bfd 	.word	0x08004bfd
 8004c5c:	08004cab 	.word	0x08004cab
 8004c60:	08004bfd 	.word	0x08004bfd
 8004c64:	08004bfd 	.word	0x08004bfd
 8004c68:	08004d45 	.word	0x08004d45
 8004c6c:	6833      	ldr	r3, [r6, #0]
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6032      	str	r2, [r6, #0]
 8004c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e09e      	b.n	8004dbe <_printf_i+0x1ea>
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	0606      	lsls	r6, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xbc>
 8004c8c:	681d      	ldr	r5, [r3, #0]
 8004c8e:	e003      	b.n	8004c98 <_printf_i+0xc4>
 8004c90:	0645      	lsls	r5, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xb8>
 8004c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c98:	2d00      	cmp	r5, #0
 8004c9a:	da03      	bge.n	8004ca4 <_printf_i+0xd0>
 8004c9c:	232d      	movs	r3, #45	@ 0x2d
 8004c9e:	426d      	negs	r5, r5
 8004ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca4:	230a      	movs	r3, #10
 8004ca6:	4859      	ldr	r0, [pc, #356]	@ (8004e0c <_printf_i+0x238>)
 8004ca8:	e011      	b.n	8004cce <_printf_i+0xfa>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	0608      	lsls	r0, r1, #24
 8004cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb4:	d402      	bmi.n	8004cbc <_printf_i+0xe8>
 8004cb6:	0649      	lsls	r1, r1, #25
 8004cb8:	bf48      	it	mi
 8004cba:	b2ad      	uxthmi	r5, r5
 8004cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cbe:	6033      	str	r3, [r6, #0]
 8004cc0:	bf14      	ite	ne
 8004cc2:	230a      	movne	r3, #10
 8004cc4:	2308      	moveq	r3, #8
 8004cc6:	4851      	ldr	r0, [pc, #324]	@ (8004e0c <_printf_i+0x238>)
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cce:	6866      	ldr	r6, [r4, #4]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	bfa8      	it	ge
 8004cd4:	6821      	ldrge	r1, [r4, #0]
 8004cd6:	60a6      	str	r6, [r4, #8]
 8004cd8:	bfa4      	itt	ge
 8004cda:	f021 0104 	bicge.w	r1, r1, #4
 8004cde:	6021      	strge	r1, [r4, #0]
 8004ce0:	b90d      	cbnz	r5, 8004ce6 <_printf_i+0x112>
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	d04b      	beq.n	8004d7e <_printf_i+0x1aa>
 8004ce6:	4616      	mov	r6, r2
 8004ce8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cec:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf0:	5dc7      	ldrb	r7, [r0, r7]
 8004cf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf6:	462f      	mov	r7, r5
 8004cf8:	42bb      	cmp	r3, r7
 8004cfa:	460d      	mov	r5, r1
 8004cfc:	d9f4      	bls.n	8004ce8 <_printf_i+0x114>
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d10b      	bne.n	8004d1a <_printf_i+0x146>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	07df      	lsls	r7, r3, #31
 8004d06:	d508      	bpl.n	8004d1a <_printf_i+0x146>
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	6861      	ldr	r1, [r4, #4]
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	bfde      	ittt	le
 8004d10:	2330      	movle	r3, #48	@ 0x30
 8004d12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d1a:	1b92      	subs	r2, r2, r6
 8004d1c:	6122      	str	r2, [r4, #16]
 8004d1e:	464b      	mov	r3, r9
 8004d20:	4621      	mov	r1, r4
 8004d22:	4640      	mov	r0, r8
 8004d24:	f8cd a000 	str.w	sl, [sp]
 8004d28:	aa03      	add	r2, sp, #12
 8004d2a:	f7ff fee1 	bl	8004af0 <_printf_common>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d14a      	bne.n	8004dc8 <_printf_i+0x1f4>
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	b004      	add	sp, #16
 8004d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	f043 0320 	orr.w	r3, r3, #32
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	2778      	movs	r7, #120	@ 0x78
 8004d46:	4832      	ldr	r0, [pc, #200]	@ (8004e10 <_printf_i+0x23c>)
 8004d48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	6831      	ldr	r1, [r6, #0]
 8004d50:	061f      	lsls	r7, r3, #24
 8004d52:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d56:	d402      	bmi.n	8004d5e <_printf_i+0x18a>
 8004d58:	065f      	lsls	r7, r3, #25
 8004d5a:	bf48      	it	mi
 8004d5c:	b2ad      	uxthmi	r5, r5
 8004d5e:	6031      	str	r1, [r6, #0]
 8004d60:	07d9      	lsls	r1, r3, #31
 8004d62:	bf44      	itt	mi
 8004d64:	f043 0320 	orrmi.w	r3, r3, #32
 8004d68:	6023      	strmi	r3, [r4, #0]
 8004d6a:	b11d      	cbz	r5, 8004d74 <_printf_i+0x1a0>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	e7ab      	b.n	8004cc8 <_printf_i+0xf4>
 8004d70:	4826      	ldr	r0, [pc, #152]	@ (8004e0c <_printf_i+0x238>)
 8004d72:	e7e9      	b.n	8004d48 <_printf_i+0x174>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f023 0320 	bic.w	r3, r3, #32
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	e7f6      	b.n	8004d6c <_printf_i+0x198>
 8004d7e:	4616      	mov	r6, r2
 8004d80:	e7bd      	b.n	8004cfe <_printf_i+0x12a>
 8004d82:	6833      	ldr	r3, [r6, #0]
 8004d84:	6825      	ldr	r5, [r4, #0]
 8004d86:	1d18      	adds	r0, r3, #4
 8004d88:	6961      	ldr	r1, [r4, #20]
 8004d8a:	6030      	str	r0, [r6, #0]
 8004d8c:	062e      	lsls	r6, r5, #24
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	d501      	bpl.n	8004d96 <_printf_i+0x1c2>
 8004d92:	6019      	str	r1, [r3, #0]
 8004d94:	e002      	b.n	8004d9c <_printf_i+0x1c8>
 8004d96:	0668      	lsls	r0, r5, #25
 8004d98:	d5fb      	bpl.n	8004d92 <_printf_i+0x1be>
 8004d9a:	8019      	strh	r1, [r3, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4616      	mov	r6, r2
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	e7bc      	b.n	8004d1e <_printf_i+0x14a>
 8004da4:	6833      	ldr	r3, [r6, #0]
 8004da6:	2100      	movs	r1, #0
 8004da8:	1d1a      	adds	r2, r3, #4
 8004daa:	6032      	str	r2, [r6, #0]
 8004dac:	681e      	ldr	r6, [r3, #0]
 8004dae:	6862      	ldr	r2, [r4, #4]
 8004db0:	4630      	mov	r0, r6
 8004db2:	f000 f859 	bl	8004e68 <memchr>
 8004db6:	b108      	cbz	r0, 8004dbc <_printf_i+0x1e8>
 8004db8:	1b80      	subs	r0, r0, r6
 8004dba:	6060      	str	r0, [r4, #4]
 8004dbc:	6863      	ldr	r3, [r4, #4]
 8004dbe:	6123      	str	r3, [r4, #16]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc6:	e7aa      	b.n	8004d1e <_printf_i+0x14a>
 8004dc8:	4632      	mov	r2, r6
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4640      	mov	r0, r8
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	47d0      	blx	sl
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d0ad      	beq.n	8004d32 <_printf_i+0x15e>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	079b      	lsls	r3, r3, #30
 8004dda:	d413      	bmi.n	8004e04 <_printf_i+0x230>
 8004ddc:	68e0      	ldr	r0, [r4, #12]
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	4298      	cmp	r0, r3
 8004de2:	bfb8      	it	lt
 8004de4:	4618      	movlt	r0, r3
 8004de6:	e7a6      	b.n	8004d36 <_printf_i+0x162>
 8004de8:	2301      	movs	r3, #1
 8004dea:	4632      	mov	r2, r6
 8004dec:	4649      	mov	r1, r9
 8004dee:	4640      	mov	r0, r8
 8004df0:	47d0      	blx	sl
 8004df2:	3001      	adds	r0, #1
 8004df4:	d09d      	beq.n	8004d32 <_printf_i+0x15e>
 8004df6:	3501      	adds	r5, #1
 8004df8:	68e3      	ldr	r3, [r4, #12]
 8004dfa:	9903      	ldr	r1, [sp, #12]
 8004dfc:	1a5b      	subs	r3, r3, r1
 8004dfe:	42ab      	cmp	r3, r5
 8004e00:	dcf2      	bgt.n	8004de8 <_printf_i+0x214>
 8004e02:	e7eb      	b.n	8004ddc <_printf_i+0x208>
 8004e04:	2500      	movs	r5, #0
 8004e06:	f104 0619 	add.w	r6, r4, #25
 8004e0a:	e7f5      	b.n	8004df8 <_printf_i+0x224>
 8004e0c:	0800500b 	.word	0x0800500b
 8004e10:	0800501c 	.word	0x0800501c

08004e14 <memmove>:
 8004e14:	4288      	cmp	r0, r1
 8004e16:	b510      	push	{r4, lr}
 8004e18:	eb01 0402 	add.w	r4, r1, r2
 8004e1c:	d902      	bls.n	8004e24 <memmove+0x10>
 8004e1e:	4284      	cmp	r4, r0
 8004e20:	4623      	mov	r3, r4
 8004e22:	d807      	bhi.n	8004e34 <memmove+0x20>
 8004e24:	1e43      	subs	r3, r0, #1
 8004e26:	42a1      	cmp	r1, r4
 8004e28:	d008      	beq.n	8004e3c <memmove+0x28>
 8004e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e32:	e7f8      	b.n	8004e26 <memmove+0x12>
 8004e34:	4601      	mov	r1, r0
 8004e36:	4402      	add	r2, r0
 8004e38:	428a      	cmp	r2, r1
 8004e3a:	d100      	bne.n	8004e3e <memmove+0x2a>
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e46:	e7f7      	b.n	8004e38 <memmove+0x24>

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4d05      	ldr	r5, [pc, #20]	@ (8004e64 <_sbrk_r+0x1c>)
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fc fd04 	bl	8001860 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200004f0 	.word	0x200004f0

08004e68 <memchr>:
 8004e68:	4603      	mov	r3, r0
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	b2c9      	uxtb	r1, r1
 8004e6e:	4402      	add	r2, r0
 8004e70:	4293      	cmp	r3, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	d101      	bne.n	8004e7a <memchr+0x12>
 8004e76:	2000      	movs	r0, #0
 8004e78:	e003      	b.n	8004e82 <memchr+0x1a>
 8004e7a:	7804      	ldrb	r4, [r0, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	428c      	cmp	r4, r1
 8004e80:	d1f6      	bne.n	8004e70 <memchr+0x8>
 8004e82:	bd10      	pop	{r4, pc}

08004e84 <_realloc_r>:
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4680      	mov	r8, r0
 8004e8a:	4615      	mov	r5, r2
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	b921      	cbnz	r1, 8004e9a <_realloc_r+0x16>
 8004e90:	4611      	mov	r1, r2
 8004e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e96:	f7ff bc47 	b.w	8004728 <_malloc_r>
 8004e9a:	b92a      	cbnz	r2, 8004ea8 <_realloc_r+0x24>
 8004e9c:	f7ff fbda 	bl	8004654 <_free_r>
 8004ea0:	2400      	movs	r4, #0
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	f000 f81a 	bl	8004ee0 <_malloc_usable_size_r>
 8004eac:	4285      	cmp	r5, r0
 8004eae:	4606      	mov	r6, r0
 8004eb0:	d802      	bhi.n	8004eb8 <_realloc_r+0x34>
 8004eb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004eb6:	d8f4      	bhi.n	8004ea2 <_realloc_r+0x1e>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fc34 	bl	8004728 <_malloc_r>
 8004ec0:	4607      	mov	r7, r0
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d0ec      	beq.n	8004ea0 <_realloc_r+0x1c>
 8004ec6:	42b5      	cmp	r5, r6
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4621      	mov	r1, r4
 8004ecc:	bf28      	it	cs
 8004ece:	4632      	movcs	r2, r6
 8004ed0:	f7ff fbb2 	bl	8004638 <memcpy>
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7ff fbbc 	bl	8004654 <_free_r>
 8004edc:	463c      	mov	r4, r7
 8004ede:	e7e0      	b.n	8004ea2 <_realloc_r+0x1e>

08004ee0 <_malloc_usable_size_r>:
 8004ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee4:	1f18      	subs	r0, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bfbc      	itt	lt
 8004eea:	580b      	ldrlt	r3, [r1, r0]
 8004eec:	18c0      	addlt	r0, r0, r3
 8004eee:	4770      	bx	lr

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
