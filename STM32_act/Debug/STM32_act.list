
STM32_act.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000424c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004358  08004358  00005358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  00006080  2**0
                  CONTENTS
  4 .ARM          00000000  08004384  08004384  00006080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004384  08004384  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00005384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800438c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000080  0800440c  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800440c  00006438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee74  00000000  00000000  000060a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  00014f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00017718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abf  00000000  00000000  000184f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017955  00000000  00000000  00018fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a81  00000000  00000000  0003090c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a11b  00000000  00000000  0004138d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb4a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  000cb4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ced0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004340 	.word	0x08004340

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004340 	.word	0x08004340

0800014c <initBuzzer>:
#define C5_FREQ  523
#define WARNING1_FREQ  500
#define WARNING2_FREQ  800

void initBuzzer(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000150:	2100      	movs	r1, #0
 8000152:	4802      	ldr	r0, [pc, #8]	@ (800015c <initBuzzer+0x10>)
 8000154:	f002 fb94 	bl	8002880 <HAL_TIM_PWM_Start>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}
 800015c:	2000012c 	.word	0x2000012c

08000160 <setVolumeBuzzer>:


void setVolumeBuzzer(uint8_t volume)
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse = (htim3.Init.Period * volume) / 100;
 800016a:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <setVolumeBuzzer+0x30>)
 800016c:	68db      	ldr	r3, [r3, #12]
 800016e:	79fa      	ldrb	r2, [r7, #7]
 8000170:	fb02 f303 	mul.w	r3, r2, r3
 8000174:	4a07      	ldr	r2, [pc, #28]	@ (8000194 <setVolumeBuzzer+0x34>)
 8000176:	fba2 2303 	umull	r2, r3, r2, r3
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 800017e:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <setVolumeBuzzer+0x30>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	68fa      	ldr	r2, [r7, #12]
 8000184:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000012c 	.word	0x2000012c
 8000194:	51eb851f 	.word	0x51eb851f

08000198 <setFrequencyBuzzer>:

void setFrequencyBuzzer(uint32_t frequency)
{
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    uint32_t period = (SystemCoreClock / (htim3.Init.Prescaler + 1)) / frequency;
 80001a0:	4b0e      	ldr	r3, [pc, #56]	@ (80001dc <setFrequencyBuzzer+0x44>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	4b0e      	ldr	r3, [pc, #56]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	3301      	adds	r3, #1
 80001aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001b4:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim3, period - 1);
 80001b6:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	68fa      	ldr	r2, [r7, #12]
 80001bc:	3a01      	subs	r2, #1
 80001be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	3b01      	subs	r3, #1
 80001c4:	4a06      	ldr	r2, [pc, #24]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001c6:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, period / 2);
 80001c8:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <setFrequencyBuzzer+0x48>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	68fa      	ldr	r2, [r7, #12]
 80001ce:	0852      	lsrs	r2, r2, #1
 80001d0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000074 	.word	0x20000074
 80001e0:	2000012c 	.word	0x2000012c

080001e4 <onBuzzer>:

void onBuzzer(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    setFrequencyBuzzer(WARNING2_FREQ);
 80001e8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80001ec:	f7ff ffd4 	bl	8000198 <setFrequencyBuzzer>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <offBuzzer>:


void offBuzzer(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	setVolumeBuzzer(0);
 80001f8:	2000      	movs	r0, #0
 80001fa:	f7ff ffb1 	bl	8000160 <setVolumeBuzzer>
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <initFan>:
#include "fan_driver.h"

extern TIM_HandleTypeDef htim4;

void initFan(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000208:	2108      	movs	r1, #8
 800020a:	4802      	ldr	r0, [pc, #8]	@ (8000214 <initFan+0x10>)
 800020c:	f002 fb38 	bl	8002880 <HAL_TIM_PWM_Start>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000174 	.word	0x20000174

08000218 <stopFan>:
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
}


void stopFan(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000222:	4802      	ldr	r0, [pc, #8]	@ (800022c <stopFan+0x14>)
 8000224:	f001 fdf0 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40011000 	.word	0x40011000

08000230 <setSpeedFan>:

void setSpeedFan(uint16_t speed)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	80fb      	strh	r3, [r7, #6]
	  if (speed > 999) speed = 999;
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000240:	d302      	bcc.n	8000248 <setSpeedFan+0x18>
 8000242:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000246:	80fb      	strh	r3, [r7, #6]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, speed);
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <setSpeedFan+0x2c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	88fa      	ldrh	r2, [r7, #6]
 800024e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	20000174 	.word	0x20000174

08000260 <onHeadLight>:

#include "led_driver.h"

//단색 LED
void onHeadLight(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEAD_LIGHT_PORT,HEAD_LIGHT_PIN,GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2180      	movs	r1, #128	@ 0x80
 8000268:	4802      	ldr	r0, [pc, #8]	@ (8000274 <onHeadLight+0x14>)
 800026a:	f001 fdcd 	bl	8001e08 <HAL_GPIO_WritePin>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <offHeadLight>:

void offHeadLight(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HEAD_LIGHT_PORT,HEAD_LIGHT_PIN,GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2180      	movs	r1, #128	@ 0x80
 8000280:	4802      	ldr	r0, [pc, #8]	@ (800028c <offHeadLight+0x14>)
 8000282:	f001 fdc1 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40010800 	.word	0x40010800

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f001 fa12 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f82a 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 fa78 	bl	8000790 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002a0:	f000 f860 	bl	8000364 <MX_TIM1_Init>
  MX_TIM3_Init();
 80002a4:	f000 f964 	bl	8000570 <MX_TIM3_Init>
  MX_TIM2_Init();
 80002a8:	f000 f8fe 	bl	80004a8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80002ac:	f000 f9e2 	bl	8000674 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80002b0:	f000 fa44 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initBuzzer();
 80002b4:	f7ff ff4a 	bl	800014c <initBuzzer>
  initFan();
 80002b8:	f7ff ffa4 	bl	8000204 <initFan>
  initRgb();
 80002bc:	f000 fd66 	bl	8000d8c <initRgb>
  initServo();
 80002c0:	f000 fe80 	bl	8000fc4 <initServo>
  initControlValue();
 80002c4:	f000 fb60 	bl	8000988 <initControlValue>

  initScheduler();
 80002c8:	f000 fe40 	bl	8000f4c <initScheduler>

  //for test
  if(HAL_UART_Receive_IT(&huart1,rx_buffer,ACTUATOR_PACKET_SIZE) != HAL_OK){
 80002cc:	220a      	movs	r2, #10
 80002ce:	4906      	ldr	r1, [pc, #24]	@ (80002e8 <main+0x58>)
 80002d0:	4806      	ldr	r0, [pc, #24]	@ (80002ec <main+0x5c>)
 80002d2:	f003 facd 	bl	8003870 <HAL_UART_Receive_IT>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <main+0x50>
	  Error_Handler();
 80002dc:	f000 fd50 	bl	8000d80 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    scheduler();
 80002e0:	f000 fe3e 	bl	8000f60 <scheduler>
 80002e4:	e7fc      	b.n	80002e0 <main+0x50>
 80002e6:	bf00      	nop
 80002e8:	2000020c 	.word	0x2000020c
 80002ec:	200001bc 	.word	0x200001bc

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b090      	sub	sp, #64	@ 0x40
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2228      	movs	r2, #40	@ 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 ffe4 	bl	80042cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000316:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800031a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031c:	2300      	movs	r3, #0
 800031e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fda9 	bl	8001e7c <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000330:	f000 fd26 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000338:	2301      	movs	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f002 f817 	bl	8002380 <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000358:	f000 fd12 	bl	8000d80 <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3740      	adds	r7, #64	@ 0x40
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b096      	sub	sp, #88	@ 0x58
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000378:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2220      	movs	r2, #32
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f003 ff95 	bl	80042cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a2:	4b3f      	ldr	r3, [pc, #252]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003a4:	4a3f      	ldr	r2, [pc, #252]	@ (80004a4 <MX_TIM1_Init+0x140>)
 80003a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80003a8:	4b3d      	ldr	r3, [pc, #244]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003aa:	220f      	movs	r2, #15
 80003ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ae:	4b3c      	ldr	r3, [pc, #240]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80003b4:	4b3a      	ldr	r3, [pc, #232]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003b6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b38      	ldr	r3, [pc, #224]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c2:	4b37      	ldr	r3, [pc, #220]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c8:	4b35      	ldr	r3, [pc, #212]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ce:	4834      	ldr	r0, [pc, #208]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003d0:	f002 f964 	bl	800269c <HAL_TIM_Base_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80003da:	f000 fcd1 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003e8:	4619      	mov	r1, r3
 80003ea:	482d      	ldr	r0, [pc, #180]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003ec:	f002 fc9c 	bl	8002d28 <HAL_TIM_ConfigClockSource>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003f6:	f000 fcc3 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003fa:	4829      	ldr	r0, [pc, #164]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 80003fc:	f002 f9f0 	bl	80027e0 <HAL_TIM_PWM_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000406:	f000 fcbb 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040a:	2300      	movs	r3, #0
 800040c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040e:	2300      	movs	r3, #0
 8000410:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000412:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000416:	4619      	mov	r1, r3
 8000418:	4821      	ldr	r0, [pc, #132]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 800041a:	f003 f8bf 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000424:	f000 fcac 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000428:	2360      	movs	r3, #96	@ 0x60
 800042a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 850;
 800042c:	f240 3352 	movw	r3, #850	@ 0x352
 8000430:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000432:	2300      	movs	r3, #0
 8000434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000436:	2300      	movs	r3, #0
 8000438:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800043e:	2300      	movs	r3, #0
 8000440:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000442:	2300      	movs	r3, #0
 8000444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800044a:	2200      	movs	r2, #0
 800044c:	4619      	mov	r1, r3
 800044e:	4814      	ldr	r0, [pc, #80]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 8000450:	f002 fba8 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800045a:	f000 fc91 	bl	8000d80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000476:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4807      	ldr	r0, [pc, #28]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 8000482:	f003 f8e9 	bl	8003658 <HAL_TIMEx_ConfigBreakDeadTime>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800048c:	f000 fc78 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000490:	4803      	ldr	r0, [pc, #12]	@ (80004a0 <MX_TIM1_Init+0x13c>)
 8000492:	f000 ff4b 	bl	800132c <HAL_TIM_MspPostInit>

}
 8000496:	bf00      	nop
 8000498:	3758      	adds	r7, #88	@ 0x58
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000009c 	.word	0x2000009c
 80004a4:	40012c00 	.word	0x40012c00

080004a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	@ 0x28
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ae:	f107 0320 	add.w	r3, r7, #32
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ca:	4b28      	ldr	r3, [pc, #160]	@ (800056c <MX_TIM2_Init+0xc4>)
 80004cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80004d2:	4b26      	ldr	r3, [pc, #152]	@ (800056c <MX_TIM2_Init+0xc4>)
 80004d4:	2207      	movs	r2, #7
 80004d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d8:	4b24      	ldr	r3, [pc, #144]	@ (800056c <MX_TIM2_Init+0xc4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80004de:	4b23      	ldr	r3, [pc, #140]	@ (800056c <MX_TIM2_Init+0xc4>)
 80004e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e6:	4b21      	ldr	r3, [pc, #132]	@ (800056c <MX_TIM2_Init+0xc4>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_TIM2_Init+0xc4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004f2:	481e      	ldr	r0, [pc, #120]	@ (800056c <MX_TIM2_Init+0xc4>)
 80004f4:	f002 f974 	bl	80027e0 <HAL_TIM_PWM_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80004fe:	f000 fc3f 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000506:	2300      	movs	r3, #0
 8000508:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	4619      	mov	r1, r3
 8000510:	4816      	ldr	r0, [pc, #88]	@ (800056c <MX_TIM2_Init+0xc4>)
 8000512:	f003 f843 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800051c:	f000 fc30 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000520:	2360      	movs	r3, #96	@ 0x60
 8000522:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2204      	movs	r2, #4
 8000534:	4619      	mov	r1, r3
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <MX_TIM2_Init+0xc4>)
 8000538:	f002 fb34 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000542:	f000 fc1d 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2208      	movs	r2, #8
 800054a:	4619      	mov	r1, r3
 800054c:	4807      	ldr	r0, [pc, #28]	@ (800056c <MX_TIM2_Init+0xc4>)
 800054e:	f002 fb29 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000558:	f000 fc12 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <MX_TIM2_Init+0xc4>)
 800055e:	f000 fee5 	bl	800132c <HAL_TIM_MspPostInit>

}
 8000562:	bf00      	nop
 8000564:	3728      	adds	r7, #40	@ 0x28
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000e4 	.word	0x200000e4

08000570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	@ 0x38
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000576:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]
 800059e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005a0:	4b32      	ldr	r3, [pc, #200]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005a2:	4a33      	ldr	r2, [pc, #204]	@ (8000670 <MX_TIM3_Init+0x100>)
 80005a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80005a6:	4b31      	ldr	r3, [pc, #196]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005a8:	220f      	movs	r2, #15
 80005aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b2f      	ldr	r3, [pc, #188]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80005b2:	4b2e      	ldr	r3, [pc, #184]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80005b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	4b2c      	ldr	r3, [pc, #176]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c0:	4b2a      	ldr	r3, [pc, #168]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005c6:	4829      	ldr	r0, [pc, #164]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005c8:	f002 f868 	bl	800269c <HAL_TIM_Base_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80005d2:	f000 fbd5 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4822      	ldr	r0, [pc, #136]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005e4:	f002 fba0 	bl	8002d28 <HAL_TIM_ConfigClockSource>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80005ee:	f000 fbc7 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005f2:	481e      	ldr	r0, [pc, #120]	@ (800066c <MX_TIM3_Init+0xfc>)
 80005f4:	f002 f8f4 	bl	80027e0 <HAL_TIM_PWM_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80005fe:	f000 fbbf 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	4619      	mov	r1, r3
 8000610:	4816      	ldr	r0, [pc, #88]	@ (800066c <MX_TIM3_Init+0xfc>)
 8000612:	f002 ffc3 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800061c:	f000 fbb0 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000620:	2360      	movs	r3, #96	@ 0x60
 8000622:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	480d      	ldr	r0, [pc, #52]	@ (800066c <MX_TIM3_Init+0xfc>)
 8000638:	f002 fab4 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000642:	f000 fb9d 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	220c      	movs	r2, #12
 800064a:	4619      	mov	r1, r3
 800064c:	4807      	ldr	r0, [pc, #28]	@ (800066c <MX_TIM3_Init+0xfc>)
 800064e:	f002 faa9 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000658:	f000 fb92 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800065c:	4803      	ldr	r0, [pc, #12]	@ (800066c <MX_TIM3_Init+0xfc>)
 800065e:	f000 fe65 	bl	800132c <HAL_TIM_MspPostInit>

}
 8000662:	bf00      	nop
 8000664:	3738      	adds	r7, #56	@ 0x38
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000012c 	.word	0x2000012c
 8000670:	40000400 	.word	0x40000400

08000674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000696:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <MX_TIM4_Init+0xc0>)
 8000698:	4a27      	ldr	r2, [pc, #156]	@ (8000738 <MX_TIM4_Init+0xc4>)
 800069a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8-1;
 800069c:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <MX_TIM4_Init+0xc0>)
 800069e:	2207      	movs	r2, #7
 80006a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_TIM4_Init+0xc0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_TIM4_Init+0xc0>)
 80006aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <MX_TIM4_Init+0xc0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_TIM4_Init+0xc0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006bc:	481d      	ldr	r0, [pc, #116]	@ (8000734 <MX_TIM4_Init+0xc0>)
 80006be:	f002 f88f 	bl	80027e0 <HAL_TIM_PWM_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80006c8:	f000 fb5a 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4619      	mov	r1, r3
 80006da:	4816      	ldr	r0, [pc, #88]	@ (8000734 <MX_TIM4_Init+0xc0>)
 80006dc:	f002 ff5e 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80006e6:	f000 fb4b 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ea:	2360      	movs	r3, #96	@ 0x60
 80006ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <MX_TIM4_Init+0xc0>)
 8000702:	f002 fa4f 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800070c:	f000 fb38 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2208      	movs	r2, #8
 8000714:	4619      	mov	r1, r3
 8000716:	4807      	ldr	r0, [pc, #28]	@ (8000734 <MX_TIM4_Init+0xc0>)
 8000718:	f002 fa44 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000722:	f000 fb2d 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000726:	4803      	ldr	r0, [pc, #12]	@ (8000734 <MX_TIM4_Init+0xc0>)
 8000728:	f000 fe00 	bl	800132c <HAL_TIM_MspPostInit>

}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000174 	.word	0x20000174
 8000738:	40000800 	.word	0x40000800

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f002 fff7 	bl	8003766 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 faff 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200001bc 	.word	0x200001bc
 800078c:	40013800 	.word	0x40013800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a4:	4b38      	ldr	r3, [pc, #224]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a37      	ldr	r2, [pc, #220]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0310 	and.w	r3, r3, #16
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007bc:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a31      	ldr	r2, [pc, #196]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007c2:	f043 0320 	orr.w	r3, r3, #32
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0320 	and.w	r3, r3, #32
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_GPIO_Init+0xf8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(head_light_GPIO_Port, head_light_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2180      	movs	r1, #128	@ 0x80
 8000808:	4820      	ldr	r0, [pc, #128]	@ (800088c <MX_GPIO_Init+0xfc>)
 800080a:	f001 fafd 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000814:	481e      	ldr	r0, [pc, #120]	@ (8000890 <MX_GPIO_Init+0x100>)
 8000816:	f001 faf7 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_GPIO_Init+0x104>)
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4818      	ldr	r0, [pc, #96]	@ (8000890 <MX_GPIO_Init+0x100>)
 8000830:	f001 f966 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : head_light_Pin */
  GPIO_InitStruct.Pin = head_light_Pin;
 8000834:	2380      	movs	r3, #128	@ 0x80
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(head_light_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4810      	ldr	r0, [pc, #64]	@ (800088c <MX_GPIO_Init+0xfc>)
 800084c:	f001 f958 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000850:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <MX_GPIO_Init+0x100>)
 800086a:	f001 f949 	bl	8001b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2028      	movs	r0, #40	@ 0x28
 8000874:	f001 f85b 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000878:	2028      	movs	r0, #40	@ 0x28
 800087a:	f001 f874 	bl	8001966 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	40010800 	.word	0x40010800
 8000890:	40011000 	.word	0x40011000
 8000894:	10110000 	.word	0x10110000

08000898 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <HAL_UART_RxCpltCallback+0xac>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d146      	bne.n	800093a <HAL_UART_RxCpltCallback+0xa2>
  {
	  //packetReceived = 1;
	  g_crc = calculate_checksum(rx_buffer,ACTUATOR_PACKET_SIZE-1);
 80008ac:	2109      	movs	r1, #9
 80008ae:	4826      	ldr	r0, [pc, #152]	@ (8000948 <HAL_UART_RxCpltCallback+0xb0>)
 80008b0:	f000 fe9a 	bl	80015e8 <calculate_checksum>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <HAL_UART_RxCpltCallback+0xb4>)
 80008ba:	701a      	strb	r2, [r3, #0]
		if(g_crc == rx_buffer[ACTUATOR_PACKET_SIZE-1])
 80008bc:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <HAL_UART_RxCpltCallback+0xb0>)
 80008be:	7a5a      	ldrb	r2, [r3, #9]
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <HAL_UART_RxCpltCallback+0xb4>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d133      	bne.n	8000930 <HAL_UART_RxCpltCallback+0x98>
		{
		  deserialize_actuator_packet(rx_buffer, &controlPacket);
 80008c8:	4921      	ldr	r1, [pc, #132]	@ (8000950 <HAL_UART_RxCpltCallback+0xb8>)
 80008ca:	481f      	ldr	r0, [pc, #124]	@ (8000948 <HAL_UART_RxCpltCallback+0xb0>)
 80008cc:	f000 fec1 	bl	8001652 <deserialize_actuator_packet>
		  controlValue.buzzerEnable = controlPacket.buzzer;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <HAL_UART_RxCpltCallback+0xb8>)
 80008d2:	78db      	ldrb	r3, [r3, #3]
 80008d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <HAL_UART_RxCpltCallback+0xbc>)
 80008de:	70da      	strb	r2, [r3, #3]
		  controlValue.rgbMode = controlPacket.led_rgb;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <HAL_UART_RxCpltCallback+0xb8>)
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <HAL_UART_RxCpltCallback+0xbc>)
 80008ee:	701a      	strb	r2, [r3, #0]
		  controlValue.fanSpeed = controlPacket.fan;
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <HAL_UART_RxCpltCallback+0xb8>)
 80008f2:	78db      	ldrb	r3, [r3, #3]
 80008f4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_UART_RxCpltCallback+0xbc>)
 80008fe:	705a      	strb	r2, [r3, #1]
		  controlValue.seatPulse = controlPacket.servo_chair;
 8000900:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <HAL_UART_RxCpltCallback+0xb8>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f3c3 230b 	ubfx	r3, r3, #8, #12
 8000908:	b29b      	uxth	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_UART_RxCpltCallback+0xbc>)
 800090e:	809a      	strh	r2, [r3, #4]
		  controlValue.windowPulse = controlPacket.servo_window;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <HAL_UART_RxCpltCallback+0xb8>)
 8000912:	88db      	ldrh	r3, [r3, #6]
 8000914:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8000918:	b29b      	uxth	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_UART_RxCpltCallback+0xbc>)
 800091e:	80da      	strh	r2, [r3, #6]
		  controlValue.ledEnable = controlPacket.led;
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HAL_UART_RxCpltCallback+0xb8>)
 8000922:	78db      	ldrb	r3, [r3, #3]
 8000924:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_UART_RxCpltCallback+0xbc>)
 800092e:	709a      	strb	r2, [r3, #2]
		}
		HAL_UART_Receive_IT(&huart1,rx_buffer,ACTUATOR_PACKET_SIZE);
 8000930:	220a      	movs	r2, #10
 8000932:	4905      	ldr	r1, [pc, #20]	@ (8000948 <HAL_UART_RxCpltCallback+0xb0>)
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <HAL_UART_RxCpltCallback+0xac>)
 8000936:	f002 ff9b 	bl	8003870 <HAL_UART_Receive_IT>
  }
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200001bc 	.word	0x200001bc
 8000948:	2000020c 	.word	0x2000020c
 800094c:	20000421 	.word	0x20000421
 8000950:	20000418 	.word	0x20000418
 8000954:	20000204 	.word	0x20000204

08000958 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == huart1.Instance)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_UART_ErrorCallback+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d104      	bne.n	8000976 <HAL_UART_ErrorCallback+0x1e>
  {
    HAL_UART_Receive_IT(&huart1, rx_buffer, ACTUATOR_PACKET_SIZE);
 800096c:	220a      	movs	r2, #10
 800096e:	4905      	ldr	r1, [pc, #20]	@ (8000984 <HAL_UART_ErrorCallback+0x2c>)
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <HAL_UART_ErrorCallback+0x28>)
 8000972:	f002 ff7d 	bl	8003870 <HAL_UART_Receive_IT>
  }
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001bc 	.word	0x200001bc
 8000984:	2000020c 	.word	0x2000020c

08000988 <initControlValue>:
void initControlValue(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	controlValue.seatPulse = arrayServo[SERVO_SEAT].initialPulse;
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <initControlValue+0x34>)
 800098e:	89da      	ldrh	r2, [r3, #14]
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <initControlValue+0x38>)
 8000992:	809a      	strh	r2, [r3, #4]
	controlValue.windowPulse = arrayServo[SERVO_WINDOW].initialPulse;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <initControlValue+0x34>)
 8000996:	8bda      	ldrh	r2, [r3, #30]
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <initControlValue+0x38>)
 800099a:	80da      	strh	r2, [r3, #6]
	controlValue.ledEnable = 0;
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <initControlValue+0x38>)
 800099e:	2200      	movs	r2, #0
 80009a0:	709a      	strb	r2, [r3, #2]
	controlValue.buzzerEnable = 0;
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <initControlValue+0x38>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	70da      	strb	r2, [r3, #3]
	controlValue.fanSpeed = 0;
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <initControlValue+0x38>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	705a      	strb	r2, [r3, #1]
	controlValue.rgbMode = 0;
 80009ae:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <initControlValue+0x38>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	20000054 	.word	0x20000054
 80009c0:	20000204 	.word	0x20000204

080009c4 <testTask>:
void testTask(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	static int a = 0;

	if(a == 0)
 80009c8:	4b38      	ldr	r3, [pc, #224]	@ (8000aac <testTask+0xe8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d137      	bne.n	8000a40 <testTask+0x7c>
	{
		a = 1;
 80009d0:	4b36      	ldr	r3, [pc, #216]	@ (8000aac <testTask+0xe8>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
		testpacket.servo_chair = 1200;
 80009d6:	4b36      	ldr	r3, [pc, #216]	@ (8000ab0 <testTask+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f062 024f 	orn	r2, r2, #79	@ 0x4f
 80009de:	715a      	strb	r2, [r3, #5]
 80009e0:	799a      	ldrb	r2, [r3, #6]
 80009e2:	f022 020f 	bic.w	r2, r2, #15
 80009e6:	f042 0204 	orr.w	r2, r2, #4
 80009ea:	719a      	strb	r2, [r3, #6]
		testpacket.servo_window = 450;
 80009ec:	4b30      	ldr	r3, [pc, #192]	@ (8000ab0 <testTask+0xec>)
 80009ee:	799a      	ldrb	r2, [r3, #6]
 80009f0:	f002 020f 	and.w	r2, r2, #15
 80009f4:	f042 0220 	orr.w	r2, r2, #32
 80009f8:	719a      	strb	r2, [r3, #6]
 80009fa:	2200      	movs	r2, #0
 80009fc:	f042 021c 	orr.w	r2, r2, #28
 8000a00:	71da      	strb	r2, [r3, #7]
		testpacket.led = 1;
 8000a02:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab0 <testTask+0xec>)
 8000a04:	78d3      	ldrb	r3, [r2, #3]
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	70d3      	strb	r3, [r2, #3]
		testpacket.led_rgb = 4;
 8000a0c:	4a28      	ldr	r2, [pc, #160]	@ (8000ab0 <testTask+0xec>)
 8000a0e:	7893      	ldrb	r3, [r2, #2]
 8000a10:	2104      	movs	r1, #4
 8000a12:	f361 0302 	bfi	r3, r1, #0, #3
 8000a16:	7093      	strb	r3, [r2, #2]
		testpacket.fan = 3;
 8000a18:	4a25      	ldr	r2, [pc, #148]	@ (8000ab0 <testTask+0xec>)
 8000a1a:	78d3      	ldrb	r3, [r2, #3]
 8000a1c:	f043 0303 	orr.w	r3, r3, #3
 8000a20:	70d3      	strb	r3, [r2, #3]
		serialize_actuator_packet(&testpacket,tx_buffer);
 8000a22:	4924      	ldr	r1, [pc, #144]	@ (8000ab4 <testTask+0xf0>)
 8000a24:	4822      	ldr	r0, [pc, #136]	@ (8000ab0 <testTask+0xec>)
 8000a26:	f000 fdfd 	bl	8001624 <serialize_actuator_packet>
		if(HAL_UART_Transmit_IT(&huart1,tx_buffer , ACTUATOR_PACKET_SIZE) != HAL_OK)
 8000a2a:	220a      	movs	r2, #10
 8000a2c:	4921      	ldr	r1, [pc, #132]	@ (8000ab4 <testTask+0xf0>)
 8000a2e:	4822      	ldr	r0, [pc, #136]	@ (8000ab8 <testTask+0xf4>)
 8000a30:	f002 fee9 	bl	8003806 <HAL_UART_Transmit_IT>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d036      	beq.n	8000aa8 <testTask+0xe4>
		{
		  Error_Handler();
 8000a3a:	f000 f9a1 	bl	8000d80 <Error_Handler>
		if(HAL_UART_Transmit_IT(&huart1,tx_buffer , ACTUATOR_PACKET_SIZE) != HAL_OK)
		{
		  Error_Handler();
		}
	}
}
 8000a3e:	e033      	b.n	8000aa8 <testTask+0xe4>
		a = 0;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <testTask+0xe8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
		testpacket.servo_chair = 450;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <testTask+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f062 023d 	orn	r2, r2, #61	@ 0x3d
 8000a4e:	715a      	strb	r2, [r3, #5]
 8000a50:	799a      	ldrb	r2, [r3, #6]
 8000a52:	f022 020f 	bic.w	r2, r2, #15
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	719a      	strb	r2, [r3, #6]
		testpacket.servo_window = 1200;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <testTask+0xec>)
 8000a5e:	799a      	ldrb	r2, [r3, #6]
 8000a60:	f002 020f 	and.w	r2, r2, #15
 8000a64:	719a      	strb	r2, [r3, #6]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f042 024b 	orr.w	r2, r2, #75	@ 0x4b
 8000a6c:	71da      	strb	r2, [r3, #7]
		testpacket.led = 0;
 8000a6e:	4a10      	ldr	r2, [pc, #64]	@ (8000ab0 <testTask+0xec>)
 8000a70:	78d3      	ldrb	r3, [r2, #3]
 8000a72:	f36f 0382 	bfc	r3, #2, #1
 8000a76:	70d3      	strb	r3, [r2, #3]
		testpacket.led_rgb = 0x000;
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <testTask+0xec>)
 8000a7a:	7893      	ldrb	r3, [r2, #2]
 8000a7c:	f36f 0302 	bfc	r3, #0, #3
 8000a80:	7093      	strb	r3, [r2, #2]
		testpacket.fan = 0;
 8000a82:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab0 <testTask+0xec>)
 8000a84:	78d3      	ldrb	r3, [r2, #3]
 8000a86:	f36f 0301 	bfc	r3, #0, #2
 8000a8a:	70d3      	strb	r3, [r2, #3]
		serialize_actuator_packet(&testpacket,tx_buffer);
 8000a8c:	4909      	ldr	r1, [pc, #36]	@ (8000ab4 <testTask+0xf0>)
 8000a8e:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <testTask+0xec>)
 8000a90:	f000 fdc8 	bl	8001624 <serialize_actuator_packet>
		if(HAL_UART_Transmit_IT(&huart1,tx_buffer , ACTUATOR_PACKET_SIZE) != HAL_OK)
 8000a94:	220a      	movs	r2, #10
 8000a96:	4907      	ldr	r1, [pc, #28]	@ (8000ab4 <testTask+0xf0>)
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <testTask+0xf4>)
 8000a9a:	f002 feb4 	bl	8003806 <HAL_UART_Transmit_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <testTask+0xe4>
		  Error_Handler();
 8000aa4:	f000 f96c 	bl	8000d80 <Error_Handler>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000424 	.word	0x20000424
 8000ab0:	2000040c 	.word	0x2000040c
 8000ab4:	2000030c 	.word	0x2000030c
 8000ab8:	200001bc 	.word	0x200001bc

08000abc <seatTask>:
void seatTask(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_SEAT);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 fb3a 	bl	800113c <getUnitPulse>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_SEAT);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 faed 	bl	80010ac <getPulse>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80bb      	strh	r3, [r7, #4]
	if(controlValue.seatPulse > currentPulse)
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <seatTask+0x78>)
 8000ad8:	889b      	ldrh	r3, [r3, #4]
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d210      	bcs.n	8000b02 <seatTask+0x46>
	{
		if((controlValue.seatPulse) - currentPulse > unitPulse)
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <seatTask+0x78>)
 8000ae2:	889b      	ldrh	r3, [r3, #4]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	1ad2      	subs	r2, r2, r3
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dd1c      	ble.n	8000b2a <seatTask+0x6e>
		{
			setPulse(SERVO_SEAT,(currentPulse+unitPulse));
 8000af0:	88ba      	ldrh	r2, [r7, #4]
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	4413      	add	r3, r2
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4619      	mov	r1, r3
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 fb30 	bl	8001160 <setPulse>
		else
		{
			//do nothing
		}
	}
}
 8000b00:	e013      	b.n	8000b2a <seatTask+0x6e>
	else if(controlValue.seatPulse < currentPulse)
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <seatTask+0x78>)
 8000b04:	889b      	ldrh	r3, [r3, #4]
 8000b06:	88ba      	ldrh	r2, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d90e      	bls.n	8000b2a <seatTask+0x6e>
		if((currentPulse - controlValue.seatPulse) > unitPulse)
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	4a09      	ldr	r2, [pc, #36]	@ (8000b34 <seatTask+0x78>)
 8000b10:	8892      	ldrh	r2, [r2, #4]
 8000b12:	1a9a      	subs	r2, r3, r2
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dd07      	ble.n	8000b2a <seatTask+0x6e>
			setPulse(SERVO_SEAT,(currentPulse-unitPulse));
 8000b1a:	88ba      	ldrh	r2, [r7, #4]
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 fb1b 	bl	8001160 <setPulse>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000204 	.word	0x20000204

08000b38 <windowTask>:
void windowTask(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	uint16_t unitPulse = getUnitPulse(SERVO_WINDOW);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fafc 	bl	800113c <getUnitPulse>
 8000b44:	4603      	mov	r3, r0
 8000b46:	80fb      	strh	r3, [r7, #6]
	uint16_t currentPulse = getPulse(SERVO_WINDOW);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 faaf 	bl	80010ac <getPulse>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80bb      	strh	r3, [r7, #4]
	if(controlValue.windowPulse > currentPulse)
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <windowTask+0x78>)
 8000b54:	88db      	ldrh	r3, [r3, #6]
 8000b56:	88ba      	ldrh	r2, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d210      	bcs.n	8000b7e <windowTask+0x46>
	{
		if((controlValue.windowPulse) - currentPulse > unitPulse)
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <windowTask+0x78>)
 8000b5e:	88db      	ldrh	r3, [r3, #6]
 8000b60:	461a      	mov	r2, r3
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dd1c      	ble.n	8000ba6 <windowTask+0x6e>
		{
			setPulse(SERVO_WINDOW,(currentPulse+unitPulse));
 8000b6c:	88ba      	ldrh	r2, [r7, #4]
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	4413      	add	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 faf2 	bl	8001160 <setPulse>
		else
		{
			//do nothing
		}
	}
}
 8000b7c:	e013      	b.n	8000ba6 <windowTask+0x6e>
	else if(controlValue.windowPulse < currentPulse)
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <windowTask+0x78>)
 8000b80:	88db      	ldrh	r3, [r3, #6]
 8000b82:	88ba      	ldrh	r2, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d90e      	bls.n	8000ba6 <windowTask+0x6e>
		if((currentPulse - controlValue.windowPulse) > unitPulse)
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <windowTask+0x78>)
 8000b8c:	88d2      	ldrh	r2, [r2, #6]
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	dd07      	ble.n	8000ba6 <windowTask+0x6e>
			setPulse(SERVO_WINDOW,(currentPulse-unitPulse));
 8000b96:	88ba      	ldrh	r2, [r7, #4]
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 fadd 	bl	8001160 <setPulse>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000204 	.word	0x20000204

08000bb4 <fanTask>:
void fanTask(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	if(controlValue.fanSpeed == 0)
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <fanTask+0x20>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <fanTask+0x12>
	{
		stopFan();
 8000bc0:	f7ff fb2a 	bl	8000218 <stopFan>
	}
	else
	{
		setSpeedFan(controlValue.fanSpeed);
	}
}
 8000bc4:	e004      	b.n	8000bd0 <fanTask+0x1c>
		setSpeedFan(controlValue.fanSpeed);
 8000bc6:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <fanTask+0x20>)
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fb30 	bl	8000230 <setSpeedFan>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000204 	.word	0x20000204

08000bd8 <ledTask>:
void ledTask(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	if(controlValue.ledEnable == 0)
 8000bdc:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <ledTask+0x1c>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <ledTask+0x12>
	{
		offHeadLight();
 8000be4:	f7ff fb48 	bl	8000278 <offHeadLight>
	}
	else
	{
		onHeadLight();
	}
}
 8000be8:	e001      	b.n	8000bee <ledTask+0x16>
		onHeadLight();
 8000bea:	f7ff fb39 	bl	8000260 <onHeadLight>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000204 	.word	0x20000204

08000bf8 <rgbTask>:
void rgbTask(void)
{
 8000bf8:	b598      	push	{r3, r4, r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	static uint8_t rgb_red =0;
	static uint8_t rgb_green =0;
	static uint8_t rgb_blue =0;
	rgb_red = 0x4 & controlValue.rgbMode;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <rgbTask+0x9c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <rgbTask+0xa0>)
 8000c08:	701a      	strb	r2, [r3, #0]
	rgb_green = 0x2 & controlValue.rgbMode;
 8000c0a:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <rgbTask+0x9c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <rgbTask+0xa4>)
 8000c16:	701a      	strb	r2, [r3, #0]
	rgb_blue = 0x1 & controlValue.rgbMode;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <rgbTask+0x9c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <rgbTask+0xa8>)
 8000c24:	701a      	strb	r2, [r3, #0]

	if(controlValue.rgbMode == 0)
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <rgbTask+0x9c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d105      	bne.n	8000c3a <rgbTask+0x42>
	{
		setColorRgb(0, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f8be 	bl	8000db4 <setColorRgb>
	}
	else{
		setColorRgb(999*rgb_red, 999*rgb_green, 999*rgb_blue);
	}
}
 8000c38:	e029      	b.n	8000c8e <rgbTask+0x96>
		setColorRgb(999*rgb_red, 999*rgb_green, 999*rgb_blue);
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <rgbTask+0xa0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	1ad2      	subs	r2, r2, r3
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	00d1      	lsls	r1, r2, #3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4413      	add	r3, r2
 8000c52:	b298      	uxth	r0, r3
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <rgbTask+0xa4>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	00d2      	lsls	r2, r2, #3
 8000c5c:	1ad2      	subs	r2, r2, r3
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	00d1      	lsls	r1, r2, #3
 8000c66:	461a      	mov	r2, r3
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b299      	uxth	r1, r3
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <rgbTask+0xa8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	1ad2      	subs	r2, r2, r3
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	00d4      	lsls	r4, r2, #3
 8000c80:	461a      	mov	r2, r3
 8000c82:	4623      	mov	r3, r4
 8000c84:	4413      	add	r3, r2
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f000 f893 	bl	8000db4 <setColorRgb>
}
 8000c8e:	bf00      	nop
 8000c90:	bd98      	pop	{r3, r4, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000204 	.word	0x20000204
 8000c98:	20000428 	.word	0x20000428
 8000c9c:	20000429 	.word	0x20000429
 8000ca0:	2000042a 	.word	0x2000042a

08000ca4 <buzzerTask>:
void buzzerTask(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint8_t buzzer_state = 0;
    static uint8_t step_count = 0;
    static uint8_t buzzer_done = 0;

    uint32_t now = HAL_GetTick();
 8000caa:	f000 fd5f 	bl	800176c <HAL_GetTick>
 8000cae:	6078      	str	r0, [r7, #4]

    if (controlValue.buzzerEnable == 0) {
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <buzzerTask+0xc8>)
 8000cb2:	78db      	ldrb	r3, [r3, #3]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10b      	bne.n	8000cd0 <buzzerTask+0x2c>

        offBuzzer();
 8000cb8:	f7ff fa9c 	bl	80001f4 <offBuzzer>
        buzzer_state = 0;
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <buzzerTask+0xcc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
        step_count = 0;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <buzzerTask+0xd0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
        buzzer_done = 0;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <buzzerTask+0xd4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
        return;
 8000cce:	e049      	b.n	8000d64 <buzzerTask+0xc0>
    }

    if (buzzer_done) {
 8000cd0:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <buzzerTask+0xd4>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d140      	bne.n	8000d5a <buzzerTask+0xb6>
        return;
    }

    switch (buzzer_state) {
 8000cd8:	4b25      	ldr	r3, [pc, #148]	@ (8000d70 <buzzerTask+0xcc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d01f      	beq.n	8000d20 <buzzerTask+0x7c>
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	dc3f      	bgt.n	8000d64 <buzzerTask+0xc0>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <buzzerTask+0x4a>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d009      	beq.n	8000d00 <buzzerTask+0x5c>
 8000cec:	e03a      	b.n	8000d64 <buzzerTask+0xc0>
        case 0:
            onBuzzer();
 8000cee:	f7ff fa79 	bl	80001e4 <onBuzzer>
            last_tick = now;
 8000cf2:	4a22      	ldr	r2, [pc, #136]	@ (8000d7c <buzzerTask+0xd8>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6013      	str	r3, [r2, #0]
            buzzer_state = 1;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <buzzerTask+0xcc>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
            break;
 8000cfe:	e031      	b.n	8000d64 <buzzerTask+0xc0>

        case 1:
            if (now - last_tick >= 300) {
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <buzzerTask+0xd8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d0c:	d327      	bcc.n	8000d5e <buzzerTask+0xba>
                offBuzzer();
 8000d0e:	f7ff fa71 	bl	80001f4 <offBuzzer>
                last_tick = now;
 8000d12:	4a1a      	ldr	r2, [pc, #104]	@ (8000d7c <buzzerTask+0xd8>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6013      	str	r3, [r2, #0]
                buzzer_state = 2;
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <buzzerTask+0xcc>)
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000d1e:	e01e      	b.n	8000d5e <buzzerTask+0xba>

        case 2:
            if (now - last_tick >= 100) {
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <buzzerTask+0xd8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b63      	cmp	r3, #99	@ 0x63
 8000d2a:	d91a      	bls.n	8000d62 <buzzerTask+0xbe>
                step_count++;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <buzzerTask+0xd0>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <buzzerTask+0xd0>)
 8000d36:	701a      	strb	r2, [r3, #0]
                if (step_count >= 3) {
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <buzzerTask+0xd0>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d903      	bls.n	8000d48 <buzzerTask+0xa4>
                    buzzer_done = 1;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <buzzerTask+0xd4>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
                    onBuzzer();
                    last_tick = now;
                    buzzer_state = 1;
                }
            }
            break;
 8000d46:	e00c      	b.n	8000d62 <buzzerTask+0xbe>
                    onBuzzer();
 8000d48:	f7ff fa4c 	bl	80001e4 <onBuzzer>
                    last_tick = now;
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <buzzerTask+0xd8>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
                    buzzer_state = 1;
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <buzzerTask+0xcc>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
            break;
 8000d58:	e003      	b.n	8000d62 <buzzerTask+0xbe>
        return;
 8000d5a:	bf00      	nop
 8000d5c:	e002      	b.n	8000d64 <buzzerTask+0xc0>
            break;
 8000d5e:	bf00      	nop
 8000d60:	e000      	b.n	8000d64 <buzzerTask+0xc0>
            break;
 8000d62:	bf00      	nop
    }
}
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000204 	.word	0x20000204
 8000d70:	2000042b 	.word	0x2000042b
 8000d74:	2000042c 	.word	0x2000042c
 8000d78:	2000042d 	.word	0x2000042d
 8000d7c:	20000430 	.word	0x20000430

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <initRgb>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;


void initRgb(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d90:	2104      	movs	r1, #4
 8000d92:	4806      	ldr	r0, [pc, #24]	@ (8000dac <initRgb+0x20>)
 8000d94:	f001 fd74 	bl	8002880 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <initRgb+0x24>)
 8000d9c:	f001 fd70 	bl	8002880 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_3);
 8000da0:	2108      	movs	r1, #8
 8000da2:	4802      	ldr	r0, [pc, #8]	@ (8000dac <initRgb+0x20>)
 8000da4:	f002 fb5c 	bl	8003460 <HAL_TIMEx_PWMN_Start>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000e4 	.word	0x200000e4
 8000db0:	20000174 	.word	0x20000174

08000db4 <setColorRgb>:

void setColorRgb(uint16_t red, uint16_t green, uint16_t blue)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	80bb      	strh	r3, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	807b      	strh	r3, [r7, #2]
    if (red > 999) red = 999;
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dcc:	d302      	bcc.n	8000dd4 <setColorRgb+0x20>
 8000dce:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000dd2:	80fb      	strh	r3, [r7, #6]
    if (green > 999) green = 999;
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dda:	d302      	bcc.n	8000de2 <setColorRgb+0x2e>
 8000ddc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000de0:	80bb      	strh	r3, [r7, #4]
    if (blue > 999) blue = 999;
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000de8:	d302      	bcc.n	8000df0 <setColorRgb+0x3c>
 8000dea:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000dee:	807b      	strh	r3, [r7, #2]

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, red);
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <setColorRgb+0x60>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	88fa      	ldrh	r2, [r7, #6]
 8000df6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, green);
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <setColorRgb+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, blue);
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <setColorRgb+0x60>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200000e4 	.word	0x200000e4
 8000e18:	20000174 	.word	0x20000174

08000e1c <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim2;
extern task_t taskTable[NUM_TASK]; //메인에 정의

/*1ms 주기로 발생하는 tim2 인터럽트 처리 루틴*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	if((htim->Instance) == htim2.Instance)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d101      	bne.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		taskManager();
 8000e30:	f000 f806 	bl	8000e40 <taskManager>
	}
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000e4 	.word	0x200000e4

08000e40 <taskManager>:

/*타이머 카운트 기반으로 태스크 활성화 여부 결정*/
void taskManager(void){
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++){
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	e073      	b.n	8000f34 <taskManager+0xf4>
		if(taskTable[i].offsetTime > 0)
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	493e      	ldr	r1, [pc, #248]	@ (8000f48 <taskManager+0x108>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d029      	beq.n	8000eb6 <taskManager+0x76>
		{
			taskTable[i].offsetTime--;
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4938      	ldr	r1, [pc, #224]	@ (8000f48 <taskManager+0x108>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	3304      	adds	r3, #4
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	b298      	uxth	r0, r3
 8000e78:	4933      	ldr	r1, [pc, #204]	@ (8000f48 <taskManager+0x108>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	3304      	adds	r3, #4
 8000e86:	4602      	mov	r2, r0
 8000e88:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].offsetTime == 0)
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	492e      	ldr	r1, [pc, #184]	@ (8000f48 <taskManager+0x108>)
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	3304      	adds	r3, #4
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d146      	bne.n	8000f2e <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	4929      	ldr	r1, [pc, #164]	@ (8000f48 <taskManager+0x108>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	330a      	adds	r3, #10
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e03b      	b.n	8000f2e <taskManager+0xee>
			}
		}
		else
		{
			taskTable[i].waitedTime++;
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	4923      	ldr	r1, [pc, #140]	@ (8000f48 <taskManager+0x108>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b298      	uxth	r0, r3
 8000ecc:	491e      	ldr	r1, [pc, #120]	@ (8000f48 <taskManager+0x108>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3308      	adds	r3, #8
 8000eda:	4602      	mov	r2, r0
 8000edc:	801a      	strh	r2, [r3, #0]
			if(taskTable[i].waitedTime == taskTable[i].period)
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	4919      	ldr	r1, [pc, #100]	@ (8000f48 <taskManager+0x108>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3308      	adds	r3, #8
 8000eee:	8819      	ldrh	r1, [r3, #0]
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	4815      	ldr	r0, [pc, #84]	@ (8000f48 <taskManager+0x108>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4403      	add	r3, r0
 8000efe:	3306      	adds	r3, #6
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	4299      	cmp	r1, r3
 8000f04:	d113      	bne.n	8000f2e <taskManager+0xee>
			{
				taskTable[i].status = ACTIVATED;
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	490f      	ldr	r1, [pc, #60]	@ (8000f48 <taskManager+0x108>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	330a      	adds	r3, #10
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
				taskTable[i].waitedTime = 0;
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	490a      	ldr	r1, [pc, #40]	@ (8000f48 <taskManager+0x108>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	3308      	adds	r3, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < NUM_TASK; i++){
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	3301      	adds	r3, #1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d988      	bls.n	8000e4c <taskManager+0xc>
			{
				//do nothing
			}
		}
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000000 	.word	0x20000000

08000f4c <initScheduler>:

void initScheduler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <initScheduler+0x10>)
 8000f52:	f001 fbf3 	bl	800273c <HAL_TIM_Base_Start_IT>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000e4 	.word	0x200000e4

08000f60 <scheduler>:

/*메인 루프에서 호출하여 사용*/
void scheduler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i = 0; i < NUM_TASK; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	e020      	b.n	8000fae <scheduler+0x4e>
	{
		if(taskTable[i].status == ACTIVATED)
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	4914      	ldr	r1, [pc, #80]	@ (8000fc0 <scheduler+0x60>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	330a      	adds	r3, #10
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d112      	bne.n	8000fa8 <scheduler+0x48>
		{
			taskTable[i].status = DEACTIVATED;
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	490e      	ldr	r1, [pc, #56]	@ (8000fc0 <scheduler+0x60>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	330a      	adds	r3, #10
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
			taskTable[i].task();
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	4909      	ldr	r1, [pc, #36]	@ (8000fc0 <scheduler+0x60>)
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4798      	blx	r3
	for(i = 0; i < NUM_TASK; i++)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	3301      	adds	r3, #1
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b06      	cmp	r3, #6
 8000fb2:	d9db      	bls.n	8000f6c <scheduler+0xc>
		}
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <initServo>:
   {&htim1, TIM_CHANNEL_1, 1300, 450, (uint16_t)((1300.0 - 450.0)/160.0), (uint16_t)((1300.0 + 450.0)/2.0)},
   {&htim3, TIM_CHANNEL_4, 1300, 450, (uint16_t)((1300.0 - 450.0)/160.0), (uint16_t)((1300.0 + 450.0)/2.0)}
};

void initServo(void)
 {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_SERVO; i++){
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	e064      	b.n	800109a <initServo+0xd6>
		__HAL_TIM_SetCompare(arrayServo[i].htim,arrayServo[i].channel, arrayServo[i].initialPulse);
 8000fd0:	4a35      	ldr	r2, [pc, #212]	@ (80010a8 <initServo+0xe4>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3304      	adds	r3, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <initServo+0x3a>
 8000fe0:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <initServo+0xe4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	330e      	adds	r3, #14
 8000fea:	8819      	ldrh	r1, [r3, #0]
 8000fec:	4a2e      	ldr	r2, [pc, #184]	@ (80010a8 <initServo+0xe4>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	4413      	add	r3, r2
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffc:	e03b      	b.n	8001076 <initServo+0xb2>
 8000ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80010a8 <initServo+0xe4>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	3304      	adds	r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d10e      	bne.n	800102c <initServo+0x68>
 800100e:	4a26      	ldr	r2, [pc, #152]	@ (80010a8 <initServo+0xe4>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	4413      	add	r3, r2
 8001016:	330e      	adds	r3, #14
 8001018:	8819      	ldrh	r1, [r3, #0]
 800101a:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <initServo+0xe4>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	460b      	mov	r3, r1
 8001028:	6393      	str	r3, [r2, #56]	@ 0x38
 800102a:	e024      	b.n	8001076 <initServo+0xb2>
 800102c:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <initServo+0xe4>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	3304      	adds	r3, #4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b08      	cmp	r3, #8
 800103a:	d10e      	bne.n	800105a <initServo+0x96>
 800103c:	4a1a      	ldr	r2, [pc, #104]	@ (80010a8 <initServo+0xe4>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4413      	add	r3, r2
 8001044:	330e      	adds	r3, #14
 8001046:	8819      	ldrh	r1, [r3, #0]
 8001048:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <initServo+0xe4>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4413      	add	r3, r2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	460b      	mov	r3, r1
 8001056:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001058:	e00d      	b.n	8001076 <initServo+0xb2>
 800105a:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <initServo+0xe4>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	4413      	add	r3, r2
 8001062:	330e      	adds	r3, #14
 8001064:	8819      	ldrh	r1, [r3, #0]
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <initServo+0xe4>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	460b      	mov	r3, r1
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_TIM_PWM_Start(arrayServo[i].htim,arrayServo[i].channel);
 8001076:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <initServo+0xe4>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4909      	ldr	r1, [pc, #36]	@ (80010a8 <initServo+0xe4>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	440b      	add	r3, r1
 8001088:	3304      	adds	r3, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	4610      	mov	r0, r2
 8001090:	f001 fbf6 	bl	8002880 <HAL_TIM_PWM_Start>
	for(int i = 0; i < NUM_SERVO; i++){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	dd97      	ble.n	8000fd0 <initServo+0xc>
	}

	return;
 80010a0:	bf00      	nop
 }
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000054 	.word	0x20000054

080010ac <getPulse>:

uint16_t getPulse(uint8_t servoIndex)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	return (__HAL_TIM_GetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001138 <getPulse+0x8c>)
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <getPulse+0x2c>
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <getPulse+0x8c>)
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	e029      	b.n	800112c <getPulse+0x80>
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <getPulse+0x8c>)
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	4413      	add	r3, r2
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d108      	bne.n	80010fa <getPulse+0x4e>
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <getPulse+0x8c>)
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	e018      	b.n	800112c <getPulse+0x80>
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <getPulse+0x8c>)
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b08      	cmp	r3, #8
 8001108:	d108      	bne.n	800111c <getPulse+0x70>
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <getPulse+0x8c>)
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001118:	b29b      	uxth	r3, r3
 800111a:	e007      	b.n	800112c <getPulse+0x80>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <getPulse+0x8c>)
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	b29b      	uxth	r3, r3
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000054 	.word	0x20000054

0800113c <getUnitPulse>:
uint16_t getUnitPulse(uint8_t servoIndex)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	return arrayServo[servoIndex].unitPulse;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <getUnitPulse+0x20>)
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4413      	add	r3, r2
 800114e:	330c      	adds	r3, #12
 8001150:	881b      	ldrh	r3, [r3, #0]
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	20000054 	.word	0x20000054

08001160 <setPulse>:

void setPulse(uint8_t servoIndex, uint16_t pulse)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4a1f      	ldr	r2, [pc, #124]	@ (80011f0 <setPulse+0x90>)
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d108      	bne.n	8001192 <setPulse+0x32>
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <setPulse+0x90>)
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	88ba      	ldrh	r2, [r7, #4]
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34
	return;
 8001190:	e02a      	b.n	80011e8 <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4a16      	ldr	r2, [pc, #88]	@ (80011f0 <setPulse+0x90>)
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d108      	bne.n	80011b4 <setPulse+0x54>
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <setPulse+0x90>)
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	88bb      	ldrh	r3, [r7, #4]
 80011b0:	6393      	str	r3, [r2, #56]	@ 0x38
	return;
 80011b2:	e019      	b.n	80011e8 <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <setPulse+0x90>)
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	3304      	adds	r3, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d108      	bne.n	80011d6 <setPulse+0x76>
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <setPulse+0x90>)
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
	return;
 80011d4:	e008      	b.n	80011e8 <setPulse+0x88>
	__HAL_TIM_SetCompare(arrayServo[servoIndex].htim,arrayServo[servoIndex].channel, pulse);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <setPulse+0x90>)
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	6413      	str	r3, [r2, #64]	@ 0x40
	return;
 80011e6:	bf00      	nop
}
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000054 	.word	0x20000054

080011f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_MspInit+0x5c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <HAL_MspInit+0x5c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_MspInit+0x5c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <HAL_MspInit+0x5c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_MspInit+0x60>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_MspInit+0x60>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000

08001258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <HAL_TIM_Base_MspInit+0x58>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10c      	bne.n	8001284 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_TIM_Base_MspInit+0x5c>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <HAL_TIM_Base_MspInit+0x5c>)
 8001270:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001274:	6193      	str	r3, [r2, #24]
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <HAL_TIM_Base_MspInit+0x5c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001282:	e010      	b.n	80012a6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <HAL_TIM_Base_MspInit+0x60>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10b      	bne.n	80012a6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_TIM_Base_MspInit+0x5c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_TIM_Base_MspInit+0x5c>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_TIM_Base_MspInit+0x5c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40000400 	.word	0x40000400

080012bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012cc:	d114      	bne.n	80012f8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_TIM_PWM_MspInit+0x68>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <HAL_TIM_PWM_MspInit+0x68>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_TIM_PWM_MspInit+0x68>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	201c      	movs	r0, #28
 80012ec:	f000 fb1f 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f0:	201c      	movs	r0, #28
 80012f2:	f000 fb38 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012f6:	e010      	b.n	800131a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM4)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <HAL_TIM_PWM_MspInit+0x6c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10b      	bne.n	800131a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_TIM_PWM_MspInit+0x68>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <HAL_TIM_PWM_MspInit+0x68>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_TIM_PWM_MspInit+0x68>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	40000800 	.word	0x40000800

0800132c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	@ 0x30
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_TIM_MspPostInit+0x15c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d119      	bne.n	8001380 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b4f      	ldr	r3, [pc, #316]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a4e      	ldr	r2, [pc, #312]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b4c      	ldr	r3, [pc, #304]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2302      	movs	r3, #2
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4619      	mov	r1, r3
 8001378:	4845      	ldr	r0, [pc, #276]	@ (8001490 <HAL_TIM_MspPostInit+0x164>)
 800137a:	f000 fbc1 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800137e:	e07e      	b.n	800147e <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001388:	d12b      	bne.n	80013e2 <HAL_TIM_MspPostInit+0xb6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b40      	ldr	r3, [pc, #256]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a3f      	ldr	r2, [pc, #252]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b3d      	ldr	r3, [pc, #244]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80013a2:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2302      	movs	r3, #2
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4837      	ldr	r0, [pc, #220]	@ (8001494 <HAL_TIM_MspPostInit+0x168>)
 80013b8:	f000 fba2 	bl	8001b00 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80013bc:	4b36      	ldr	r3, [pc, #216]	@ (8001498 <HAL_TIM_MspPostInit+0x16c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013cc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013da:	4a2f      	ldr	r2, [pc, #188]	@ (8001498 <HAL_TIM_MspPostInit+0x16c>)
 80013dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013de:	6053      	str	r3, [r2, #4]
}
 80013e0:	e04d      	b.n	800147e <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2d      	ldr	r2, [pc, #180]	@ (800149c <HAL_TIM_MspPostInit+0x170>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d12a      	bne.n	8001442 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a26      	ldr	r2, [pc, #152]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001404:	2312      	movs	r3, #18
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2302      	movs	r3, #2
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4619      	mov	r1, r3
 8001416:	481f      	ldr	r0, [pc, #124]	@ (8001494 <HAL_TIM_MspPostInit+0x168>)
 8001418:	f000 fb72 	bl	8001b00 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_TIM_MspPostInit+0x16c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001424:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800142a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001434:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800143a:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_TIM_MspPostInit+0x16c>)
 800143c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143e:	6053      	str	r3, [r2, #4]
}
 8001440:	e01d      	b.n	800147e <HAL_TIM_MspPostInit+0x152>
  else if(htim->Instance==TIM4)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a16      	ldr	r2, [pc, #88]	@ (80014a0 <HAL_TIM_MspPostInit+0x174>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d118      	bne.n	800147e <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_TIM_MspPostInit+0x160>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001464:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	4619      	mov	r1, r3
 8001478:	4806      	ldr	r0, [pc, #24]	@ (8001494 <HAL_TIM_MspPostInit+0x168>)
 800147a:	f000 fb41 	bl	8001b00 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3730      	adds	r7, #48	@ 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40012c00 	.word	0x40012c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40010800 	.word	0x40010800
 8001494:	40010c00 	.word	0x40010c00
 8001498:	40010000 	.word	0x40010000
 800149c:	40000400 	.word	0x40000400
 80014a0:	40000800 	.word	0x40000800

080014a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a20      	ldr	r2, [pc, #128]	@ (8001540 <HAL_UART_MspInit+0x9c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d139      	bne.n	8001538 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_UART_MspInit+0xa0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <HAL_UART_MspInit+0xa0>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <HAL_UART_MspInit+0xa0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_UART_MspInit+0xa0>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <HAL_UART_MspInit+0xa0>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_UART_MspInit+0xa0>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4619      	mov	r1, r3
 8001508:	480f      	ldr	r0, [pc, #60]	@ (8001548 <HAL_UART_MspInit+0xa4>)
 800150a:	f000 faf9 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800150e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	4809      	ldr	r0, [pc, #36]	@ (8001548 <HAL_UART_MspInit+0xa4>)
 8001524:	f000 faec 	bl	8001b00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2025      	movs	r0, #37	@ 0x25
 800152e:	f000 f9fe 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001532:	2025      	movs	r0, #37	@ 0x25
 8001534:	f000 fa17 	bl	8001966 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40013800 	.word	0x40013800
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <NMI_Handler+0x4>

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 f8d4 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f001 fa0b 	bl	80029c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000e4 	.word	0x200000e4

080015b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <USART1_IRQHandler+0x10>)
 80015be:	f002 f97d 	bl	80038bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200001bc 	.word	0x200001bc

080015cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015d4:	f000 fc30 	bl	8001e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <calculate_checksum>:
 */
#include "uart_packet.h"
#include <string.h>

/* Calculate 8-bit XOR checksum */
uint8_t calculate_checksum(const uint8_t* data, size_t length) {
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	e009      	b.n	8001610 <calculate_checksum+0x28>
        sum ^= data[i];
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	4413      	add	r3, r2
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	4053      	eors	r3, r2
 8001608:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; ++i) {
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3f1      	bcc.n	80015fc <calculate_checksum+0x14>
    }
    return sum;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <serialize_actuator_packet>:

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8_t* buffer) {
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
 800162e:	2209      	movs	r2, #9
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f002 fe76 	bl	8004324 <memcpy>
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f103 0409 	add.w	r4, r3, #9
 800163e:	2109      	movs	r1, #9
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f7ff ffd1 	bl	80015e8 <calculate_checksum>
 8001646:	4603      	mov	r3, r0
 8001648:	7023      	strb	r3, [r4, #0]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}

08001652 <deserialize_actuator_packet>:

/* Deserialize buffer into ActuatorPacket */
void deserialize_actuator_packet(const uint8_t* buffer, struct ActuatorPacket* packet) {
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
 800165c:	220a      	movs	r2, #10
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f002 fe5f 	bl	8004324 <memcpy>
    /* Optional CRC validation */
    /* if (calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1) != packet->crc) {
         // handle CRC mismatch
       } */
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ffb4 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001676:	490c      	ldr	r1, [pc, #48]	@ (80016a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001678:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a09      	ldr	r2, [pc, #36]	@ (80016b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800168c:	4c09      	ldr	r4, [pc, #36]	@ (80016b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f002 fe1f 	bl	80042dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7fe fdf7 	bl	8000290 <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80016ac:	0800438c 	.word	0x0800438c
  ldr r2, =_sbss
 80016b0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80016b4:	20000438 	.word	0x20000438

080016b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_2_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_Init+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <HAL_Init+0x28>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f923 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fd8c 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f93b 	bl	8001982 <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f903 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	@ (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000074 	.word	0x20000074
 8001740:	2000007c 	.word	0x2000007c
 8001744:	20000078 	.word	0x20000078

08001748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_IncTick+0x1c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <HAL_IncTick+0x20>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a03      	ldr	r2, [pc, #12]	@ (8001768 <HAL_IncTick+0x20>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	2000007c 	.word	0x2000007c
 8001768:	20000434 	.word	0x20000434

0800176c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b02      	ldr	r3, [pc, #8]	@ (800177c <HAL_GetTick+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000434 	.word	0x20000434

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4906      	ldr	r1, [pc, #24]	@ (8001818 <__NVIC_EnableIRQ+0x34>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	@ (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	@ 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff90 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff2d 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff42 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff35 	bl	80017e4 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d008      	beq.n	80019c4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2204      	movs	r2, #4
 80019b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e020      	b.n	8001a06 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020e 	bic.w	r2, r2, #14
 80019d2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f202 	lsl.w	r2, r1, r2
 80019f2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d005      	beq.n	8001a34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	e051      	b.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020e 	bic.w	r2, r2, #14
 8001a42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_DMA_Abort_IT+0xd4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d029      	beq.n	8001ab2 <HAL_DMA_Abort_IT+0xa2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <HAL_DMA_Abort_IT+0xd8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_Abort_IT+0x9e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001aec <HAL_DMA_Abort_IT+0xdc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0x98>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_DMA_Abort_IT+0xe0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_Abort_IT+0x92>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <HAL_DMA_Abort_IT+0xe4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00a      	beq.n	8001a9c <HAL_DMA_Abort_IT+0x8c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <HAL_DMA_Abort_IT+0xe8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d102      	bne.n	8001a96 <HAL_DMA_Abort_IT+0x86>
 8001a90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a94:	e00e      	b.n	8001ab4 <HAL_DMA_Abort_IT+0xa4>
 8001a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a9a:	e00b      	b.n	8001ab4 <HAL_DMA_Abort_IT+0xa4>
 8001a9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aa0:	e008      	b.n	8001ab4 <HAL_DMA_Abort_IT+0xa4>
 8001aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa6:	e005      	b.n	8001ab4 <HAL_DMA_Abort_IT+0xa4>
 8001aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aac:	e002      	b.n	8001ab4 <HAL_DMA_Abort_IT+0xa4>
 8001aae:	2310      	movs	r3, #16
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_Abort_IT+0xa4>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	4a11      	ldr	r2, [pc, #68]	@ (8001afc <HAL_DMA_Abort_IT+0xec>)
 8001ab6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
    } 
  }
  return status;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40020008 	.word	0x40020008
 8001ae8:	4002001c 	.word	0x4002001c
 8001aec:	40020030 	.word	0x40020030
 8001af0:	40020044 	.word	0x40020044
 8001af4:	40020058 	.word	0x40020058
 8001af8:	4002006c 	.word	0x4002006c
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	@ 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e169      	b.n	8001de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8158 	bne.w	8001de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a9a      	ldr	r2, [pc, #616]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a98      	ldr	r2, [pc, #608]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a98      	ldr	r2, [pc, #608]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a96      	ldr	r2, [pc, #600]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a96      	ldr	r2, [pc, #600]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a94      	ldr	r2, [pc, #592]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a94      	ldr	r2, [pc, #592]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a92      	ldr	r2, [pc, #584]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a92      	ldr	r2, [pc, #584]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a90      	ldr	r2, [pc, #576]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a79      	ldr	r2, [pc, #484]	@ (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	@ 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	@ 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80b1 	beq.w	8001de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a48      	ldr	r2, [pc, #288]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a40      	ldr	r2, [pc, #256]	@ (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc8 <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfe:	492f      	ldr	r1, [pc, #188]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	492c      	ldr	r1, [pc, #176]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4928      	ldr	r1, [pc, #160]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4922      	ldr	r1, [pc, #136]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	491e      	ldr	r1, [pc, #120]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4918      	ldr	r1, [pc, #96]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4914      	ldr	r1, [pc, #80]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	e021      	b.n	8001de2 <HAL_GPIO_Init+0x2e2>
 8001d9e:	bf00      	nop
 8001da0:	10320000 	.word	0x10320000
 8001da4:	10310000 	.word	0x10310000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae8e 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	@ 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f806 	bl	8001e68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e272      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9c:	4b92      	ldr	r3, [pc, #584]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d00c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea8:	4b8f      	ldr	r3, [pc, #572]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d112      	bne.n	8001eda <HAL_RCC_OscConfig+0x5e>
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec0:	d10b      	bne.n	8001eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec2:	4b89      	ldr	r3, [pc, #548]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d06c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d168      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e24c      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x76>
 8001ee4:	4b80      	ldr	r3, [pc, #512]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a7f      	ldr	r2, [pc, #508]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e02e      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x98>
 8001efa:	4b7b      	ldr	r3, [pc, #492]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a7a      	ldr	r2, [pc, #488]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b78      	ldr	r3, [pc, #480]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a77      	ldr	r2, [pc, #476]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0xbc>
 8001f1e:	4b72      	ldr	r3, [pc, #456]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a71      	ldr	r2, [pc, #452]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6f      	ldr	r3, [pc, #444]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6e      	ldr	r2, [pc, #440]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001f38:	4b6b      	ldr	r3, [pc, #428]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6a      	ldr	r2, [pc, #424]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b68      	ldr	r3, [pc, #416]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a67      	ldr	r2, [pc, #412]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc08 	bl	800176c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fc04 	bl	800176c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	@ 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e200      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b5d      	ldr	r3, [pc, #372]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe4>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fbf4 	bl	800176c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff fbf0 	bl	800176c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	@ 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1ec      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x10c>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d063      	beq.n	800207e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fc2:	4b49      	ldr	r3, [pc, #292]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d11c      	bne.n	8002008 <HAL_RCC_OscConfig+0x18c>
 8001fce:	4b46      	ldr	r3, [pc, #280]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	4b43      	ldr	r3, [pc, #268]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x176>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1c0      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4939      	ldr	r1, [pc, #228]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	e03a      	b.n	800207e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <HAL_RCC_OscConfig+0x270>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fba9 	bl	800176c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201e:	f7ff fba5 	bl	800176c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1a1      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4927      	ldr	r1, [pc, #156]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b26      	ldr	r3, [pc, #152]	@ (80020ec <HAL_RCC_OscConfig+0x270>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fb88 	bl	800176c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fb84 	bl	800176c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e180      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d03a      	beq.n	8002100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d019      	beq.n	80020c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <HAL_RCC_OscConfig+0x274>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff fb68 	bl	800176c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff fb64 	bl	800176c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e160      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020be:	2001      	movs	r0, #1
 80020c0:	f000 face 	bl	8002660 <RCC_Delay>
 80020c4:	e01c      	b.n	8002100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_RCC_OscConfig+0x274>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7ff fb4e 	bl	800176c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d2:	e00f      	b.n	80020f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff fb4a 	bl	800176c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d908      	bls.n	80020f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e146      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	42420000 	.word	0x42420000
 80020f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b92      	ldr	r3, [pc, #584]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e9      	bne.n	80020d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a6 	beq.w	800225a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b8b      	ldr	r3, [pc, #556]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4a87      	ldr	r2, [pc, #540]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002128:	61d3      	str	r3, [r2, #28]
 800212a:	4b85      	ldr	r3, [pc, #532]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b82      	ldr	r3, [pc, #520]	@ (8002344 <HAL_RCC_OscConfig+0x4c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b7f      	ldr	r3, [pc, #508]	@ (8002344 <HAL_RCC_OscConfig+0x4c8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7e      	ldr	r2, [pc, #504]	@ (8002344 <HAL_RCC_OscConfig+0x4c8>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff fb0b 	bl	800176c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7ff fb07 	bl	800176c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	@ 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e103      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	4b75      	ldr	r3, [pc, #468]	@ (8002344 <HAL_RCC_OscConfig+0x4c8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x312>
 8002180:	4b6f      	ldr	r3, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a6e      	ldr	r2, [pc, #440]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	e02d      	b.n	80021ea <HAL_RCC_OscConfig+0x36e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x334>
 8002196:	4b6a      	ldr	r3, [pc, #424]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a69      	ldr	r2, [pc, #420]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	4b67      	ldr	r3, [pc, #412]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a66      	ldr	r2, [pc, #408]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	e01c      	b.n	80021ea <HAL_RCC_OscConfig+0x36e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x356>
 80021b8:	4b61      	ldr	r3, [pc, #388]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a60      	ldr	r2, [pc, #384]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	e00b      	b.n	80021ea <HAL_RCC_OscConfig+0x36e>
 80021d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b58      	ldr	r3, [pc, #352]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a57      	ldr	r2, [pc, #348]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d015      	beq.n	800221e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7ff fabb 	bl	800176c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff fab7 	bl	800176c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0b1      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	4b4b      	ldr	r3, [pc, #300]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ee      	beq.n	80021fa <HAL_RCC_OscConfig+0x37e>
 800221c:	e014      	b.n	8002248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff faa5 	bl	800176c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7ff faa1 	bl	800176c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e09b      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	4b40      	ldr	r3, [pc, #256]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ee      	bne.n	8002226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b3c      	ldr	r3, [pc, #240]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4a3b      	ldr	r2, [pc, #236]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8087 	beq.w	8002372 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d061      	beq.n	8002334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d146      	bne.n	8002306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b33      	ldr	r3, [pc, #204]	@ (8002348 <HAL_RCC_OscConfig+0x4cc>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff fa75 	bl	800176c <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7ff fa71 	bl	800176c <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e06d      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002298:	4b29      	ldr	r3, [pc, #164]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4921      	ldr	r1, [pc, #132]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a19      	ldr	r1, [r3, #32]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	430b      	orrs	r3, r1
 80022d2:	491b      	ldr	r1, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_RCC_OscConfig+0x4cc>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff fa45 	bl	800176c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff fa41 	bl	800176c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e03d      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x46a>
 8002304:	e035      	b.n	8002372 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_RCC_OscConfig+0x4cc>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fa2e 	bl	800176c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff fa2a 	bl	800176c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e026      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x498>
 8002332:	e01e      	b.n	8002372 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e019      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
 8002340:	40021000 	.word	0x40021000
 8002344:	40007000 	.word	0x40007000
 8002348:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_OscConfig+0x500>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	429a      	cmp	r2, r3
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000

08002380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0d0      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d910      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0207 	bic.w	r2, r3, #7
 80023aa:	4965      	ldr	r1, [pc, #404]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a58      	ldr	r2, [pc, #352]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a52      	ldr	r2, [pc, #328]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d040      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d115      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b41      	ldr	r3, [pc, #260]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e073      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b3d      	ldr	r3, [pc, #244]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06b      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b39      	ldr	r3, [pc, #228]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4936      	ldr	r1, [pc, #216]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002470:	f7ff f97c 	bl	800176c <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7ff f978 	bl	800176c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e053      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b2d      	ldr	r3, [pc, #180]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a0:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d210      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4922      	ldr	r1, [pc, #136]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_RCC_ClockConfig+0x1cc>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_ClockConfig+0x1d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f8da 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	08004358 	.word	0x08004358
 800254c:	20000074 	.word	0x20000074
 8002550:	20000078 	.word	0x20000078

08002554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d002      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x30>
 800257e:	2b08      	cmp	r3, #8
 8002580:	d003      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x36>
 8002582:	e027      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002584:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	613b      	str	r3, [r7, #16]
      break;
 8002588:	e027      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0c9b      	lsrs	r3, r3, #18
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0c5b      	lsrs	r3, r3, #17
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	4a11      	ldr	r2, [pc, #68]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 80025b6:	fb03 f202 	mul.w	r2, r3, r2
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e004      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0c      	ldr	r2, [pc, #48]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	613b      	str	r3, [r7, #16]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x98>)
 80025d6:	613b      	str	r3, [r7, #16]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	693b      	ldr	r3, [r7, #16]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	08004370 	.word	0x08004370
 80025f4:	08004380 	.word	0x08004380
 80025f8:	003d0900 	.word	0x003d0900

080025fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b02      	ldr	r3, [pc, #8]	@ (800260c <HAL_RCC_GetHCLKFreq+0x10>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	20000074 	.word	0x20000074

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002614:	f7ff fff2 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4903      	ldr	r1, [pc, #12]	@ (8002634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	08004368 	.word	0x08004368

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800263c:	f7ff ffde 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	0adb      	lsrs	r3, r3, #11
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	@ (800265c <HAL_RCC_GetPCLK2Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	08004368 	.word	0x08004368

08002660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <RCC_Delay+0x34>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <RCC_Delay+0x38>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800267c:	bf00      	nop
  }
  while (Delay --);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	60fa      	str	r2, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f9      	bne.n	800267c <RCC_Delay+0x1c>
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	20000074 	.word	0x20000074
 8002698:	10624dd3 	.word	0x10624dd3

0800269c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e041      	b.n	8002732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fdc8 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f000 fc10 	bl	8002f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d001      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e03a      	b.n	80027ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00e      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x58>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277e:	d009      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x58>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x58>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a13      	ldr	r2, [pc, #76]	@ (80027dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d111      	bne.n	80027b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d010      	beq.n	80027c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	e007      	b.n	80027c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800

080027e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e041      	b.n	8002876 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fd58 	bl	80012bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f000 fb6e 	bl	8002f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <HAL_TIM_PWM_Start+0x24>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e022      	b.n	80028ea <HAL_TIM_PWM_Start+0x6a>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d109      	bne.n	80028be <HAL_TIM_PWM_Start+0x3e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	e015      	b.n	80028ea <HAL_TIM_PWM_Start+0x6a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d109      	bne.n	80028d8 <HAL_TIM_PWM_Start+0x58>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e008      	b.n	80028ea <HAL_TIM_PWM_Start+0x6a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e05e      	b.n	80029b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d104      	bne.n	8002902 <HAL_TIM_PWM_Start+0x82>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002900:	e013      	b.n	800292a <HAL_TIM_PWM_Start+0xaa>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d104      	bne.n	8002912 <HAL_TIM_PWM_Start+0x92>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002910:	e00b      	b.n	800292a <HAL_TIM_PWM_Start+0xaa>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d104      	bne.n	8002922 <HAL_TIM_PWM_Start+0xa2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002920:	e003      	b.n	800292a <HAL_TIM_PWM_Start+0xaa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2201      	movs	r2, #1
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fd70 	bl	8003418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1e      	ldr	r2, [pc, #120]	@ (80029b8 <HAL_TIM_PWM_Start+0x138>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d107      	bne.n	8002952 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002950:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <HAL_TIM_PWM_Start+0x138>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_TIM_PWM_Start+0xfa>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002964:	d009      	beq.n	800297a <HAL_TIM_PWM_Start+0xfa>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <HAL_TIM_PWM_Start+0x13c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_TIM_PWM_Start+0xfa>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_TIM_PWM_Start+0x140>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d111      	bne.n	800299e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d010      	beq.n	80029ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299c:	e007      	b.n	80029ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800

080029c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d020      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01b      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0202 	mvn.w	r2, #2
 80029f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa5a 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002a14:	e005      	b.n	8002a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa4d 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fa5c 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d020      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0204 	mvn.w	r2, #4
 8002a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa34 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa27 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fa36 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01b      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0208 	mvn.w	r2, #8
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa0e 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa01 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fa10 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d020      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01b      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9e8 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9db 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f9ea 	bl	8002eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0201 	mvn.w	r2, #1
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe f976 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fddc 	bl	800370c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f9ba 	bl	8002eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0220 	mvn.w	r2, #32
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fdaf 	bl	80036fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0ae      	b.n	8002d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	f200 809f 	bhi.w	8002d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002c0d 	.word	0x08002c0d
 8002bdc:	08002d11 	.word	0x08002d11
 8002be0:	08002d11 	.word	0x08002d11
 8002be4:	08002d11 	.word	0x08002d11
 8002be8:	08002c4d 	.word	0x08002c4d
 8002bec:	08002d11 	.word	0x08002d11
 8002bf0:	08002d11 	.word	0x08002d11
 8002bf4:	08002d11 	.word	0x08002d11
 8002bf8:	08002c8f 	.word	0x08002c8f
 8002bfc:	08002d11 	.word	0x08002d11
 8002c00:	08002d11 	.word	0x08002d11
 8002c04:	08002d11 	.word	0x08002d11
 8002c08:	08002ccf 	.word	0x08002ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f9e2 	bl	8002fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0208 	orr.w	r2, r2, #8
 8002c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6999      	ldr	r1, [r3, #24]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	619a      	str	r2, [r3, #24]
      break;
 8002c4a:	e064      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fa28 	bl	80030a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6999      	ldr	r1, [r3, #24]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	619a      	str	r2, [r3, #24]
      break;
 8002c8c:	e043      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fa71 	bl	800317c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0208 	orr.w	r2, r2, #8
 8002ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0204 	bic.w	r2, r2, #4
 8002cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69d9      	ldr	r1, [r3, #28]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	61da      	str	r2, [r3, #28]
      break;
 8002ccc:	e023      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fabb 	bl	8003250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69d9      	ldr	r1, [r3, #28]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	61da      	str	r2, [r3, #28]
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
      break;
 8002d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_ConfigClockSource+0x1c>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0b4      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x186>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7c:	d03e      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0xd4>
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	f200 8087 	bhi.w	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8a:	f000 8086 	beq.w	8002e9a <HAL_TIM_ConfigClockSource+0x172>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d92:	d87f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b70      	cmp	r3, #112	@ 0x70
 8002d96:	d01a      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0xa6>
 8002d98:	2b70      	cmp	r3, #112	@ 0x70
 8002d9a:	d87b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b60      	cmp	r3, #96	@ 0x60
 8002d9e:	d050      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x11a>
 8002da0:	2b60      	cmp	r3, #96	@ 0x60
 8002da2:	d877      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b50      	cmp	r3, #80	@ 0x50
 8002da6:	d03c      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0xfa>
 8002da8:	2b50      	cmp	r3, #80	@ 0x50
 8002daa:	d873      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d058      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x13a>
 8002db0:	2b40      	cmp	r3, #64	@ 0x40
 8002db2:	d86f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b30      	cmp	r3, #48	@ 0x30
 8002db6:	d064      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	2b30      	cmp	r3, #48	@ 0x30
 8002dba:	d86b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d060      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d867      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05c      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d05a      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dcc:	e062      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dde:	f000 fafc 	bl	80033da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	609a      	str	r2, [r3, #8]
      break;
 8002dfa:	e04f      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e0c:	f000 fae5 	bl	80033da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e1e:	609a      	str	r2, [r3, #8]
      break;
 8002e20:	e03c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 fa5c 	bl	80032ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2150      	movs	r1, #80	@ 0x50
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fab3 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e40:	e02c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 fa7a 	bl	8003348 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2160      	movs	r1, #96	@ 0x60
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 faa3 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e60:	e01c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 fa3c 	bl	80032ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2140      	movs	r1, #64	@ 0x40
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fa93 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e80:	e00c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f000 fa8a 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e92:	e003      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      break;
 8002e98:	e000      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
	...

08002f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd0 <TIM_Base_SetConfig+0xd0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <TIM_Base_SetConfig+0x30>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1e:	d007      	beq.n	8002f30 <TIM_Base_SetConfig+0x30>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd4 <TIM_Base_SetConfig+0xd4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_Base_SetConfig+0x30>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd8 <TIM_Base_SetConfig+0xd8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d108      	bne.n	8002f42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <TIM_Base_SetConfig+0xd0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00b      	beq.n	8002f62 <TIM_Base_SetConfig+0x62>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f50:	d007      	beq.n	8002f62 <TIM_Base_SetConfig+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd4 <TIM_Base_SetConfig+0xd4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <TIM_Base_SetConfig+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd8 <TIM_Base_SetConfig+0xd8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d108      	bne.n	8002f74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <TIM_Base_SetConfig+0xd0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d103      	bne.n	8002fa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f023 0201 	bic.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800

08002fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f023 0201 	bic.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800300a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 0302 	bic.w	r3, r3, #2
 8003024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a1c      	ldr	r2, [pc, #112]	@ (80030a4 <TIM_OC1_SetConfig+0xc8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d10c      	bne.n	8003052 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0308 	bic.w	r3, r3, #8
 800303e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a13      	ldr	r2, [pc, #76]	@ (80030a4 <TIM_OC1_SetConfig+0xc8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d111      	bne.n	800307e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	621a      	str	r2, [r3, #32]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40012c00 	.word	0x40012c00

080030a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 0210 	bic.w	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0320 	bic.w	r3, r3, #32
 80030f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <TIM_OC2_SetConfig+0xd0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d10d      	bne.n	8003124 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800310e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a14      	ldr	r2, [pc, #80]	@ (8003178 <TIM_OC2_SetConfig+0xd0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d113      	bne.n	8003154 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800313a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	40012c00 	.word	0x40012c00

0800317c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0303 	bic.w	r3, r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	@ (800324c <TIM_OC3_SetConfig+0xd0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10d      	bne.n	80031f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a14      	ldr	r2, [pc, #80]	@ (800324c <TIM_OC3_SetConfig+0xd0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d113      	bne.n	8003226 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00

08003250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800329a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	031b      	lsls	r3, r3, #12
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0f      	ldr	r2, [pc, #60]	@ (80032e8 <TIM_OC4_SetConfig+0x98>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d109      	bne.n	80032c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00

080032ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f023 0201 	bic.w	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 030a 	bic.w	r3, r3, #10
 8003328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0210 	bic.w	r2, r3, #16
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	031b      	lsls	r3, r3, #12
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003384:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f043 0307 	orr.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033da:	b480      	push	{r7}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	021a      	lsls	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4313      	orrs	r3, r2
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	609a      	str	r2, [r3, #8]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_TIMEx_PWMN_Start+0x24>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e022      	b.n	80034ca <HAL_TIMEx_PWMN_Start+0x6a>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d109      	bne.n	800349e <HAL_TIMEx_PWMN_Start+0x3e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	bf14      	ite	ne
 8003496:	2301      	movne	r3, #1
 8003498:	2300      	moveq	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e015      	b.n	80034ca <HAL_TIMEx_PWMN_Start+0x6a>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d109      	bne.n	80034b8 <HAL_TIMEx_PWMN_Start+0x58>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e008      	b.n	80034ca <HAL_TIMEx_PWMN_Start+0x6a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e059      	b.n	8003586 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_TIMEx_PWMN_Start+0x82>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e0:	e013      	b.n	800350a <HAL_TIMEx_PWMN_Start+0xaa>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d104      	bne.n	80034f2 <HAL_TIMEx_PWMN_Start+0x92>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034f0:	e00b      	b.n	800350a <HAL_TIMEx_PWMN_Start+0xaa>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d104      	bne.n	8003502 <HAL_TIMEx_PWMN_Start+0xa2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003500:	e003      	b.n	800350a <HAL_TIMEx_PWMN_Start+0xaa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f903 	bl	800371e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003526:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_TIMEx_PWMN_Start+0x130>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_TIMEx_PWMN_Start+0xf0>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353a:	d009      	beq.n	8003550 <HAL_TIMEx_PWMN_Start+0xf0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <HAL_TIMEx_PWMN_Start+0x134>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIMEx_PWMN_Start+0xf0>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a13      	ldr	r2, [pc, #76]	@ (8003598 <HAL_TIMEx_PWMN_Start+0x138>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b06      	cmp	r3, #6
 8003560:	d010      	beq.n	8003584 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e007      	b.n	8003584 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800

0800359c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e046      	b.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a16      	ldr	r2, [pc, #88]	@ (800364c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00e      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003600:	d009      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a12      	ldr	r2, [pc, #72]	@ (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d004      	beq.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a10      	ldr	r2, [pc, #64]	@ (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10c      	bne.n	8003630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800361c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4313      	orrs	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800

08003658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003670:	2302      	movs	r3, #2
 8003672:	e03d      	b.n	80036f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800371e:	b480      	push	{r7}
 8003720:	b087      	sub	sp, #28
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	2204      	movs	r2, #4
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	43db      	mvns	r3, r3
 8003740:	401a      	ands	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	621a      	str	r2, [r3, #32]
}
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e042      	b.n	80037fe <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fd fe89 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2224      	movs	r2, #36	@ 0x24
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fd00 	bl	80041b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b20      	cmp	r3, #32
 800381e:	d121      	bne.n	8003864 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Transmit_IT+0x26>
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e01a      	b.n	8003866 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2221      	movs	r2, #33	@ 0x21
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800385e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	d112      	bne.n	80038b0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_UART_Receive_IT+0x26>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e00b      	b.n	80038b2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 faae 	bl	8003e08 <UART_Start_Receive_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	e000      	b.n	80038b2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b0ba      	sub	sp, #232	@ 0xe8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_UART_IRQHandler+0x66>
 800390e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fb8a 	bl	8004034 <UART_Receive_IT>
      return;
 8003920:	e25b      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80de 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x22c>
 800392c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800393c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80d1 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_UART_IRQHandler+0xae>
 8003952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_UART_IRQHandler+0xd2>
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
 800399a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f043 0204 	orr.w	r2, r3, #4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d011      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f043 0208 	orr.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 81f2 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_UART_IRQHandler+0x14e>
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fb15 	bl	8004034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_UART_IRQHandler+0x17a>
 8003a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04f      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa1f 	bl	8003e7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d041      	beq.n	8003ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3314      	adds	r3, #20
 8003a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1d9      	bne.n	8003a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d013      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8003c9c <HAL_UART_IRQHandler+0x3e0>)
 8003aa4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd ffb0 	bl	8001a10 <HAL_DMA_Abort_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	e00e      	b.n	8003ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fc ff46 	bl	8000958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	e00a      	b.n	8003ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc ff42 	bl	8000958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e006      	b.n	8003ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc ff3e 	bl	8000958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ae2:	e175      	b.n	8003dd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	bf00      	nop
    return;
 8003ae6:	e173      	b.n	8003dd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 814f 	bne.w	8003d90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8148 	beq.w	8003d90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8141 	beq.w	8003d90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80b6 	beq.w	8003ca0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8145 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b52:	429a      	cmp	r2, r3
 8003b54:	f080 813e 	bcs.w	8003dd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f000 8088 	beq.w	8003c7c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b98:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1d9      	bne.n	8003b6c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3314      	adds	r3, #20
 8003bbe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bdc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003be0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003be4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e1      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c18:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e3      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c5e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c60:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e3      	bne.n	8003c3a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd fe8f 	bl	800199a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f8ad 	bl	8003df2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c98:	e09c      	b.n	8003dd4 <HAL_UART_IRQHandler+0x518>
 8003c9a:	bf00      	nop
 8003c9c:	08003f3f 	.word	0x08003f3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 808e 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8089 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003cea:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e3      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d22:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0310 	bic.w	r3, r3, #16
 8003d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d68:	61fa      	str	r2, [r7, #28]
 8003d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	69b9      	ldr	r1, [r7, #24]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	617b      	str	r3, [r7, #20]
   return(result);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e3      	bne.n	8003d44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f832 	bl	8003df2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d8e:	e023      	b.n	8003dd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_UART_IRQHandler+0x4f4>
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8dc 	bl	8003f66 <UART_Transmit_IT>
    return;
 8003dae:	e014      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <HAL_UART_IRQHandler+0x51e>
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f91b 	bl	8004004 <UART_EndTransmit_IT>
    return;
 8003dce:	e004      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
    return;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
      return;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_UART_IRQHandler+0x51e>
      return;
 8003dd8:	bf00      	nop
  }
}
 8003dda:	37e8      	adds	r7, #232	@ 0xe8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2222      	movs	r2, #34	@ 0x22
 8003e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0220 	orr.w	r2, r2, #32
 8003e6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b095      	sub	sp, #84	@ 0x54
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ea8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3314      	adds	r3, #20
 8003ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e5      	bne.n	8003eb6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d119      	bne.n	8003f26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f12:	61ba      	str	r2, [r7, #24]
 8003f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6979      	ldr	r1, [r7, #20]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e5      	bne.n	8003ef2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f34:	bf00      	nop
 8003f36:	3754      	adds	r7, #84	@ 0x54
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr

08003f3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7fc fcfd 	bl	8000958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b21      	cmp	r3, #33	@ 0x21
 8003f78:	d13e      	bne.n	8003ff8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d114      	bne.n	8003fae <UART_Transmit_IT+0x48>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d110      	bne.n	8003fae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	1c9a      	adds	r2, r3, #2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	621a      	str	r2, [r3, #32]
 8003fac:	e008      	b.n	8003fc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6211      	str	r1, [r2, #32]
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10f      	bne.n	8003ff4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fe2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ff2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800401a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fedb 	bl	8003de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	@ 0x30
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b22      	cmp	r3, #34	@ 0x22
 8004046:	f040 80ae 	bne.w	80041a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004052:	d117      	bne.n	8004084 <UART_Receive_IT+0x50>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d113      	bne.n	8004084 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004072:	b29a      	uxth	r2, r3
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	629a      	str	r2, [r3, #40]	@ 0x28
 8004082:	e026      	b.n	80040d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004096:	d007      	beq.n	80040a8 <UART_Receive_IT+0x74>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <UART_Receive_IT+0x82>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e008      	b.n	80040c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29b      	uxth	r3, r3
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4619      	mov	r1, r3
 80040e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d15d      	bne.n	80041a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0220 	bic.w	r2, r2, #32
 80040f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004128:	2b01      	cmp	r3, #1
 800412a:	d135      	bne.n	8004198 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	613b      	str	r3, [r7, #16]
   return(result);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f023 0310 	bic.w	r3, r3, #16
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004152:	623a      	str	r2, [r7, #32]
 8004154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	69f9      	ldr	r1, [r7, #28]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d10a      	bne.n	800418a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fe2e 	bl	8003df2 <HAL_UARTEx_RxEventCallback>
 8004196:	e002      	b.n	800419e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fc fb7d 	bl	8000898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e002      	b.n	80041a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3730      	adds	r7, #48	@ 0x30
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80041ea:	f023 030c 	bic.w	r3, r3, #12
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	430b      	orrs	r3, r1
 80041f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2c      	ldr	r2, [pc, #176]	@ (80042c4 <UART_SetConfig+0x114>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d103      	bne.n	8004220 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004218:	f7fe fa0e 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	e002      	b.n	8004226 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7fe f9f6 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004224:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009a      	lsls	r2, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	4a22      	ldr	r2, [pc, #136]	@ (80042c8 <UART_SetConfig+0x118>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	0119      	lsls	r1, r3, #4
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009a      	lsls	r2, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	fbb2 f2f3 	udiv	r2, r2, r3
 800425c:	4b1a      	ldr	r3, [pc, #104]	@ (80042c8 <UART_SetConfig+0x118>)
 800425e:	fba3 0302 	umull	r0, r3, r3, r2
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2064      	movs	r0, #100	@ 0x64
 8004266:	fb00 f303 	mul.w	r3, r0, r3
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	3332      	adds	r3, #50	@ 0x32
 8004270:	4a15      	ldr	r2, [pc, #84]	@ (80042c8 <UART_SetConfig+0x118>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800427c:	4419      	add	r1, r3
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009a      	lsls	r2, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	fbb2 f2f3 	udiv	r2, r2, r3
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <UART_SetConfig+0x118>)
 8004296:	fba3 0302 	umull	r0, r3, r3, r2
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2064      	movs	r0, #100	@ 0x64
 800429e:	fb00 f303 	mul.w	r3, r0, r3
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	3332      	adds	r3, #50	@ 0x32
 80042a8:	4a07      	ldr	r2, [pc, #28]	@ (80042c8 <UART_SetConfig+0x118>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	440a      	add	r2, r1
 80042ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40013800 	.word	0x40013800
 80042c8:	51eb851f 	.word	0x51eb851f

080042cc <memset>:
 80042cc:	4603      	mov	r3, r0
 80042ce:	4402      	add	r2, r0
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d100      	bne.n	80042d6 <memset+0xa>
 80042d4:	4770      	bx	lr
 80042d6:	f803 1b01 	strb.w	r1, [r3], #1
 80042da:	e7f9      	b.n	80042d0 <memset+0x4>

080042dc <__libc_init_array>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	2600      	movs	r6, #0
 80042e0:	4d0c      	ldr	r5, [pc, #48]	@ (8004314 <__libc_init_array+0x38>)
 80042e2:	4c0d      	ldr	r4, [pc, #52]	@ (8004318 <__libc_init_array+0x3c>)
 80042e4:	1b64      	subs	r4, r4, r5
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	42a6      	cmp	r6, r4
 80042ea:	d109      	bne.n	8004300 <__libc_init_array+0x24>
 80042ec:	f000 f828 	bl	8004340 <_init>
 80042f0:	2600      	movs	r6, #0
 80042f2:	4d0a      	ldr	r5, [pc, #40]	@ (800431c <__libc_init_array+0x40>)
 80042f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004320 <__libc_init_array+0x44>)
 80042f6:	1b64      	subs	r4, r4, r5
 80042f8:	10a4      	asrs	r4, r4, #2
 80042fa:	42a6      	cmp	r6, r4
 80042fc:	d105      	bne.n	800430a <__libc_init_array+0x2e>
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	f855 3b04 	ldr.w	r3, [r5], #4
 8004304:	4798      	blx	r3
 8004306:	3601      	adds	r6, #1
 8004308:	e7ee      	b.n	80042e8 <__libc_init_array+0xc>
 800430a:	f855 3b04 	ldr.w	r3, [r5], #4
 800430e:	4798      	blx	r3
 8004310:	3601      	adds	r6, #1
 8004312:	e7f2      	b.n	80042fa <__libc_init_array+0x1e>
 8004314:	08004384 	.word	0x08004384
 8004318:	08004384 	.word	0x08004384
 800431c:	08004384 	.word	0x08004384
 8004320:	08004388 	.word	0x08004388

08004324 <memcpy>:
 8004324:	440a      	add	r2, r1
 8004326:	4291      	cmp	r1, r2
 8004328:	f100 33ff 	add.w	r3, r0, #4294967295
 800432c:	d100      	bne.n	8004330 <memcpy+0xc>
 800432e:	4770      	bx	lr
 8004330:	b510      	push	{r4, lr}
 8004332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004336:	4291      	cmp	r1, r2
 8004338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800433c:	d1f9      	bne.n	8004332 <memcpy+0xe>
 800433e:	bd10      	pop	{r4, pc}

08004340 <_init>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	bf00      	nop
 8004344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004346:	bc08      	pop	{r3}
 8004348:	469e      	mov	lr, r3
 800434a:	4770      	bx	lr

0800434c <_fini>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr
