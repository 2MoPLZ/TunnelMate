
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x0000e768 memsz 0x0000e768 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e788 align 2**14
         filesz 0x00000938 memsz 0x00000938 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00014938 vaddr 0x70000938 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x000005d0 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000f0c0 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000011d0  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          000005d0  70000938  8000f0c0  00014938  2**3
                  ALLOC
  3 .data         00000938  70000000  8000e788  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001200  80001200  00005200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001300  80001300  00005300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001308  80001308  00005308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text         0000a788  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000f0c0  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000f0c0  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000f0c0  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000f0c0  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000f0c0  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000f0c0  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000f0c0  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000f0c0  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000f0c0  00015c00  2**6
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014938  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000d28  00000000  00000000  00014990  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000c991f  00000000  00000000  000156b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000c2ba  00000000  00000000  000defd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000e9bb  00000000  00000000  000eb291  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00002390  00000000  00000000  000f9c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00002168  00000000  00000000  000fbfdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00013e5c  00000000  00000000  000fe144  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001310  00000000  00000000  00111fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004ad67  00000000  00000000  001132b0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000938 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001200 l    d  .traptab	00000000 .traptab
80001300 l    d  .ctors	00000000 .ctors
80001308 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 Button_Driver.c
00000000 l    df *ABS*	00000000 asw.c
70000000 l     O .data	00000004 c.16115
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
80000154 l     O .rodata	0000001c osEE_tdb_ptr_array
80000148 l     O .rodata	00000004 osEE_res_db_ptr_array
80000170 l     O .rodata	000000e0 osEE_tdb_array
70000030 l     O .data	00000030 osEE_sn_array
8000014c l     O .rodata	00000008 osEE_res_db_array
70000bec l     O .bss	0000000c osEE_res_cb_array
80000250 l     O .rodata	00000008 osEE_sdb_array
70000bf8 l     O .bss	00000004 osEE_scb_array
70000060 l     O .data	0000008c osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
80000258 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
700000f0 l     O .data	00000004 IfxScuCcu_xtalFrequency
800060f0 l     F .text	00000034 IfxScuCcu_wait
80000b2c l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000dc8 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 infotainment_System.c
70000c00 l     O .bss	00000020 buf
70000c20 l     O .bss	00000004 infoState
70000c24 l     O .bss	0000001c infotainmentArr
80000ea8 l     O .rodata	0000001c stateMaxArr
00000000 l    df *ABS*	00000000 uart_Driver.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
7000050c l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000f44 l     O .rodata	00000010 blanks.4035
80000f34 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000c9a0 l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 locale.c
80000f70 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000fa8 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000930 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
80009856 l     F .text	0000000e osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 Lcd_Driver.c
8000404e l     F .text	00000060 lcd_write4bits
800040ae l     F .text	00000020 lcd_command
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ultrasonic_Driver.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
80009386 l     F .text	00000054 osEE_tc_stm_us_ticks
70000eb8 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
80009864 l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
8000a128 l     F .text	00000022 osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
8000a61e l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a7aa l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
80000460 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
800089a8 g     F .text	0000001c printStateBlue
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000010 g     O .data	00000020 osEE_ccb_var
70000f08 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
800058e4 g     F .text	00000062 IfxAsclin_Asc_write
80008e78 g     F .text	00000068 measureEchoTick
80005182 g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
8000720c g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
80007440 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000fb4 g     O .rodata	00000028 __mprec_tinytens
80000b70 g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
8000ad1c g     F .text	0000001a .hidden __ashldi3
800071a2 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
80009bd4 g     F .text	0000005a TerminateTask
800051fe g     F .text	00000006 IfxAsclin_Asc_resetSendCount
80000260 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000be8 g     O .bss	00000004 osEE_kcb_var
80000410 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
800081ea g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004cae g     F .text	00000014 IfxVadc_setScan
8000e3c0 g     F .text	00000040 .hidden __eqdf2
80005814 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80007136 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
80004920 g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
800084a0 g     F .text	00000176 Ifx_Fifo_read
80004d08 g     F .text	0000001c IfxAsclin_disableModule
800007b0 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
8000a1fe g     F .text	00000022 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80008c4e g     F .text	0000006e myprintfSerial
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
80008f1a g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
80008366 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
8000767a g     F .text	00000108 IfxVadc_Adc_getChannelConfig
800048d0 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
8000a67e g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
800069ac g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000a546 g     F .text	00000028 osEE_change_context_from_running
80005174 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
800007d0 g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
800070cc g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
800052c0 g     F .text	00000014 IfxAsclin_Asc_clearTx
80005962 g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000b500 g     F .text	00000002 __malloc_unlock
8000515e g     F .text	0000000a IfxAsclin_Asc_getReadEvent
8000422e g     F .text	00000132 TimerISR
8000864c g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007fb2 g     F .text	000000e8 IfxVadc_Adc_initModule
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
800047ea g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
800049ce g     F .text	00000028 IfxVadc_getSrcAddress
80004a1a g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004e32 g     F .text	00000024 IfxAsclin_getOvsFrequency
80009fee g     F .text	00000096 SetEvent
80007782 g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
8000708e g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
8000a14a g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000d78 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
80000580 g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000df08 g     F .text	00000050 memmove
800088c4 g     F .text	00000002 syncInfoState
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d7ce g     F .text	00000056 _Balloc
80000d58 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
80000870 g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
80000650 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
800062c6 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006438 g     F .text	000003be IfxScuCcu_init
8000e440 g     F .text	00000040 .hidden __gtdf2
8000e3a4  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800098b4 g     F .text	00000042 SuspendAllInterrupts
80005204 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
80000850 g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
8000a6ec g     F .text	00000066 osEE_hal_terminate_ctx
80000300 g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000a290 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009efc g     F .text	00000078 GetTaskState
800081a8 g     F .text	00000020 Ifx_CircularBuffer_get32
8000a342 g     F .text	00000022 osEE_task_event_set_mask
80000390 g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
800007c0 g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
80007476 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005bc8 g     F .text	00000092 IfxPort_setGroupModeOutput
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80006016 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000ef8 g     O .bss	00000004 errno
8000acc2 g     F .text	0000001e .hidden __make_dp
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001260 g       .traptab	00000000 osEE_tc_trap_context
800075f8 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
80000760 g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
80000900 g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
800005c0 g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
8000adb0 g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
80004568 g     F .text	0000007e initVADCChannels
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
80000330 g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000c58 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000cd0 g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
800070fe g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
8000a0b6 g     F .text	00000058 ClearEvent
8000638a g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
8000a154 g     F .text	000000aa osEE_scheduler_task_wrapper_run
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
800006a0 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
800009d0 g     O .rodata	00000080 IfxPort_cfg_indexMap
80005466 g     F .text	000003ae IfxAsclin_Asc_initModule
8000a4e2 g     F .text	00000026 osEE_scheduler_task_preemption_point
8000421a g     F .text	00000014 FuncTaskUltrasonic
8000d7b2 g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
8000b7fc g     F .text	000011a4 _svfprintf_r
8000ac7a g     F .text	00000048 .hidden __floatsidf
800077ba g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006f60 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000a2d8 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000e4c0 g     F .text	00000040 .hidden __ltdf2
800049c4 g     F .text	0000000a IfxVadc_getScanStatus
80001310 g       .dtors	00000000 __DTOR_END__
800069be g     F .text	00000076 IfxScuCcu_setCpuFrequency
800070a0 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000a58e g     F .text	00000026 osEE_idle_task_terminate
80000cbc g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
800088c6 g     F .text	00000002 updatePacket
800008f0 g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80000720 g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000dd74 g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
8000716e g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
80007308 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
8000a41c g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000b04a g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006dd0 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
80000780 g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
80009764 g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001240 g       .traptab	00000000 osEE_tc_trap_instruction
80001004 g     O .rodata	000000c8 __mprec_tens
70000008 g     O .data	00000004 g_vadcChannelIDs
800052a8 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
800041ec g     F .text	0000002e ButtonISR
80009ca2 g     F .text	000000b2 GetResource
80000420 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000510 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000b57e g     F .text	00000016 vsnprintf
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
80000950 g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
70000ef0 g     O .bss	00000004 __malloc_top_pad
80004608 g     F .text	00000026 readADCValue
80008938 g     F .text	0000001c printStateOn
80006a34 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005d54 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a6a2 g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000c30 g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80008316 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d790 g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004df8 g     F .text	00000022 IfxAsclin_getIndex
8000d960 g     F .text	00000010 __i2b
80009c2e g     F .text	00000074 Schedule
80004e56 g     F .text	00000016 IfxAsclin_getShiftFrequency
800079f8 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
80000320 g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006c96 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
80000740 g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
80007364 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000b502 g     F .text	0000001e _sbrk_r
800004d0 g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000cf0 g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
800004e0 g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
8000898c g     F .text	0000001c printStateGreen
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000958 g     O .bss	0000000c g_vadcGroup
80006f14 g     F .text	00000026 IfxScuEru_enableAutoClear
80000730 g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
80008dcc g     F .text	0000001a serialize_sensor_packet
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000aed8 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005dfa g     F .text	0000003c IfxPort_setPinPadDriver
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
80000490 g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000eec g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800012a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
8000a778 g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80008d54 g     F .text	0000003c readActuatorPacket
80004d6e g     F .text	00000016 IfxAsclin_getAddress
8000a946 g     F .text	00000038 .hidden __adddf3
800041a8 g     F .text	0000000e lcd_goto
80009a60 g     F .text	0000001a GetActiveApplicationMode
80006310 g     F .text	0000007a IfxScuCcu_getSriFrequency
80008e5c g     F .text	0000001c sendTrigger
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800098f6 g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006c16 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e620 g     F .text	00000026 .hidden __umoddi3
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
80000920 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000ef8 g     O .rodata	00000004 _global_impure_ptr
80006e20 g     F .text	00000036 IfxScuEru_connectTrigger
70000938 g     O .bss	00000020 g_vadcChannel
800063cc g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000df68 g     F .text	000003f0 _realloc_r
80000700 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004ea8 g     F .text	00000012 IfxAsclin_read16
800088c8 g     F .text	0000001c printStateLv1
80005afc g     F .text	0000003c IfxPort_enableEmergencyStop
80000350 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000e580 g     F .text	000000a0 .hidden __udivdi3
800008d0 g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
80000360 g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
8000a220 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
80000520 g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
800040ce g     F .text	0000000a lcd_clear
80000fdc g     O .rodata	00000028 __mprec_bigtens
8000e3ae g     F .text	00000012 abort
8000e54e g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000dbc0 g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
800052d4 g     F .text	0000001c IfxAsclin_Asc_read
80009a7a g     F .text	00000084 ActivateTask
80000c6c g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006e7c g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
8000836a g     F .text	0000003a Ifx_Fifo_init
80008970 g     F .text	0000001c printStateRed
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000f00  w    O .bss	00000004 _my_errno
80000560 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005a28 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
80000980 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009ea4 g     F .text	00000058 GetTaskID
8000680a g     F .text	000001a2 IfxScuCcu_initErayPll
80000400 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
800003a0 g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000ad8 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
80006fd2 g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000d14 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
8000991c g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000723e g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
80008cbc g     F .text	0000000c asclin0RxISR
8000ad36 g     F .text	0000007a .hidden __unpack_f
800096ac g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
800045e6 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
8000a508 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
80009782 g     F .text	0000008e osEE_tc_stm_set_sr1
800007a0 g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
80008cc8 g     F .text	0000000c asclin0TxISR
80000680 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
80007298 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
800075f4 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
80000800 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800006b0 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d8b8 g     F .text	00000042 __hi0bits
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
800008a0 g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
80000470 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
80000480 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e500 g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
8000a386 g     F .text	00000068 osEE_scheduler_task_activated
80006124 g     F .text	00000078 IfxScuCcu_getBbbFrequency
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
800003b0 g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
80000530 g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
800046d0 g     F .text	0000000c asclin3TxISR
80006402 g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b80 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
800071d6 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80008ee0 g     F .text	00000024 getUltrasonic
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
800006d0 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004f9e g     F .text	00000182 IfxAsclin_setBitTiming
80000d38 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
80000540 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
80000370 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
800088e4 g     F .text	0000001c printStateLv2
80000880 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000cfc g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80008de6 g     F .text	00000048 sendSensorPacket
80007638 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a752 g     F .text	00000026 .hidden __lshrdi3
80000790 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80008b26 g     F .text	00000008 initInfotainment
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
800008c0 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
80000620 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007bfa g     F .text	0000038a IfxVadc_Adc_initGroup
8000da8a g     F .text	0000007c __pow5mult
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_10
70000968 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
80006ec8 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
800005e0 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
8000a458 g     F .text	0000008a osEE_scheduler_task_terminated
800003c0 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000af84 g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
8000820a g     F .text	0000005e Ifx_CircularBuffer_read8
80000910 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
80007426 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
80009608 g     F .text	000000a4 osEE_tc_get_fsource
80004eba g     F .text	00000012 IfxAsclin_read32
80000c94 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
80007514 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
80000940 g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
80000810 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
800096e0 g     F .text	00000084 osEE_tc_stm_set_sr0
80000b90 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800006e0 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
8000a6ce g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d79a g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000b64e g     F .text	000001ac _free_r
8000589c g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
8000a10e g     F .text	00000018 GetISRID
80008900 g     F .text	0000001c printStateLv3
8000a640 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_5
80001280 g       .traptab	00000000 osEE_tc_trap_bus
80005e38 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80000960 g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
700000f8 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008b2e g     F .text	0000009c updateInfoState
800083a4 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
800073f6 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800012e0 g       .traptab	00000000 osEE_tc_trap_nmi
8000db06 g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
800006c0 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
8000765e g     F .text	0000001c IfxVadc_Adc_disableModule
80008d90 g     F .text	0000003c readSensorPacket
00002000 g       *ABS*	00000000 __CSA_SIZE
8000ddb6 g     F .text	000000f0 __ssprint_r
800048e8 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
8000476c g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000d970 g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006fe0 g     F .text	00000012 IfxScuEru_getEventFlagStatus
800041b6 g     F .text	00000036 lcd_print
800005a0 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800003f0 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004c34 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006ea2 g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000ec0 g     O .bss	00000028 __malloc_current_mallinfo
8000dccc g     F .text	000000a8 __d2b
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
80008954 g     F .text	0000001c printStateOff
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000bcc g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
800081c8 g     F .text	00000022 Ifx_CircularBuffer_get16
800004c0 g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005fd2 g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001300 g       .ctors	00000000 __EH_FRAME_END__
80006e56 g     F .text	00000026 IfxScuEru_disableAutoClear
80006ac2 g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
8000622c g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
80000660 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000e646 g     F .text	000000a6 .hidden __fpcmp_parts_d
80004d52 g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
8000a2e6 g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
8000a5b4 g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
80006f86 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
80000840 g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
80005a58 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
8000a084 g     F .text	00000032 GetEvent
8000544a g     F .text	0000001c IfxAsclin_Asc_disableModule
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004ecc g     F .text	00000012 IfxAsclin_read8
8000a3ee g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000ab62 g     F .text	00000118 .hidden __divdf3
80000d98 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000d48 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
80005946 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
8000809a g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000100 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009e40 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000b534 g     F .text	0000004a _vsnprintf_r
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
8000a9be g     F .text	000001a4 .hidden __muldf3
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
80000750 g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
800043ca g     F .text	0000006e delay_us
80000d88 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b4fe g     F .text	00000002 __malloc_lock
8000e368 g     F .text	0000003c sbrk
80005f30 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004734 g     F .text	00000038 IfxVadc_disableAccess
80008bcc g     F .text	00000082 initUartDriver
80000000 g       .startup	00000000 BootModeHeader0
800012c0 g       .traptab	00000000 osEE_tc_trap_system
80000d08 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004e94 g     F .text	00000014 IfxAsclin_getSrcPointerTx
80004930 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000dea6 g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
8000624e g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
80000830 g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004826 g     F .text	000000aa IfxVadc_enableGroupSync
8000703a g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
800052f0 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
800003e0 g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000df58 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
800040d8 g     F .text	000000d0 lcd_init
800046dc g     F .text	00000058 main
800073d6 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80004360 g     F .text	0000006a delay_ms
80006fac g     F .text	00000026 IfxScuEru_enableTriggerPulse
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000ee8 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
80004d24 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e6ec g     F .text	0000009c .hidden __udiv6432
80008d02 g     F .text	00000048 sendActuatorPacket
00000400 g       *ABS*	00000000 __ISTACK_SIZE
8000620c g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
80008116 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000c44 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
70000974 g     O .bss	00000274 g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000ce4 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000a30c g     F .text	00000018 osEE_task_activated
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
8000012c g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
80007412 g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000ace0 g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000cabc g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000b064 g     F .text	0000049a _malloc_r
80000550 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005db8 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
80000820 g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005424 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
80000610 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80005158 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
80000600 g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80005134 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
800044aa g     F .text	0000006e printfSerial
80000ee4 g     O .rodata	00000014 .hidden __thenan_df
8000b594 g     F .text	000000ba _malloc_trim_r
80001308 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
80000430 g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004b38 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
800047a4 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80009d54 g     F .text	000000ec ReleaseResource
800080d4 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004e1a g     F .text	00000018 IfxAsclin_getPdFrequency
80004906 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001308 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
80004be2 g     F .text	00000052 IfxVadc_resetKernel
80000930 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80008d4a g     F .text	0000000a deserialize_actuator_packet
80000d2c g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000e400 g     F .text	00000040 .hidden __nedf2
80004f4c g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80006088 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006b62 g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80007016 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000b60 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80000a50 g     O .rodata	00000080 IfxPort_cfg_esrMasks
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
80000770 g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
800052b0 g     F .text	00000010 IfxAsclin_Asc_clearRx
800009a0 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000db8 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005ad2 g     F .text	0000002a IfxPort_setESR
80000570 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
800004b0 g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
80008ce8 g     F .text	0000001a serialize_actuator_packet
80000990 g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000c08 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
800004a0 g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
70000508 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
80005a7a g     F .text	00000028 IfxPort_resetESR
8000518c g     F .text	00000072 IfxAsclin_Asc_isrError
800049f6 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80008cd4 g     F .text	00000014 calculate_checksum
80004e80 g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
80000500 g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80008e38 g     F .text	00000024 initUltrasonic
70000c40 g     O .bss	00000274 g_AsclinStm
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004e6c g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
80000450 g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
80000890 g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
80009882 g     F .text	00000016 DisableAllInterrupts
800082b8 g     F .text	0000005e Ifx_CircularBuffer_write8
8000538e g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005b38 g     F .text	00000090 IfxPort_setGroupModeInput
800083c6 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
80009afe g     F .text	000000d6 ChainTask
8000705a g     F .text	00000034 IfxScuEru_selectExternalInput
80006f3a g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
80000970 g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
800007f0 g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
80000670 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
800067f6 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
80000340 g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
80004a68 g     F .text	00000066 IfxVadc_initializeFAdcI
800005b0 g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000ba4 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
80000310 g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001200 g       .traptab	00000000 osEE_tc_trap_mmu
80008268 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
8000520c g     F .text	0000009c IfxAsclin_Asc_flushTx
8000982e g     F .text	00000028 osEE_tc_delay
80000690 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
800010cc g     O .rodata	00000000 __clear_table
80005f6e g     F .text	00000064 IfxScuCcu_getPllErayFrequency
80000860 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000a324 g     F .text	0000001e osEE_task_end
80000640 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
800008b0 g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001300 g       .ctors	00000000 __EH_FRAME_BEGIN__
80000590 g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
800060cc g     F .text	00000024 IfxScuCcu_getSourceFrequency
800004f0 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000da8 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c80 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a56e g     F .text	00000020 osEE_change_context_from_task_end
80009f74 g     F .text	0000007a WaitEvent
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_4
80005aa2 g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
80008f04 g     F .text	00000016 calculateDistanceCm
80000380 g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007f84 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
80009810 g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
700000fc g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
80004902 g     F .text	00000004 IfxVadc_getAdcModuleFrequency
8000873c g     F .text	00000186 Ifx_Fifo_write
8000dc02 g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
8000a364 g     F .text	00000022 osEE_activate_isr2
80007be4 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004d84 g     F .text	00000074 IfxAsclin_getFaFrequency
80006b12 g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
800093da g     F .text	0000022e osEE_tc_set_pll_fsource
80004a3e g     F .text	0000002a IfxVadc_initializeFAdcD
80004438 g     F .text	00000072 UART_init
80005c5a g     F .text	000000a4 IfxPort_setGroupPadDriver
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
80000d68 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
800008e0 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
8000891c g     F .text	0000001c printStateLv4
80005146 g     F .text	00000012 IfxAsclin_write8
8000704c g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
80001134 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
80005120 g     F .text	00000014 IfxAsclin_write16
80008616 g     F .text	00000036 Ifx_Fifo_clear
80000c1c g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000e358 g     F .text	00000010 _exit
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001220 g       .traptab	00000000 osEE_tc_trap_protection
80001200 g     F .traptab	00000000 __TRAPTAB
80000ca8 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006df8 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006eee g     F .text	00000026 IfxScuEru_disableTriggerPulse
8000754a g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
80005168 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000b520 g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004f2a g     F .text	00000022 IfxAsclin_setClockSource
8000e480 g     F .text	00000040 .hidden __gedf2
80000ad0 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
8000462e g     F .text	000000a2 initPeripheralsAndERU
800007e0 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
80000440 g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
80000be0 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004c58 g     F .text	00000056 IfxVadc_setArbiterPriority
70000f08 g     O .text	00000001 __HEAP_END
800005d0 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
8000619c g     F .text	00000070 IfxScuCcu_getMaxFrequency
80009898 g     F .text	0000001c EnableAllInterrupts
800005f0 g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004cc2 g     F .text	00000044 IfxVadc_startupCalibration
70000964 g     O .bss	00000004 g_vadc
80005cfe g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000bb8 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000a664 g     F .text	0000001a osEE_hal_restore_ctx
80004536 g     F .text	00000032 initVADCGroup
80000630 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000a97e g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
8000516e g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004ace g     F .text	0000006a IfxVadc_isPostCalibration
80004518 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006dba g     F .text	00000016 IfxScuEru_clearEventFlag
80007518 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d8fa g     F .text	00000066 __lo0bits
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
800003d0 g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
80005f3e g     F .text	00000030 IfxScuCcu_getOscFrequency
80009978 g     F .text	0000003c ResumeOSInterrupts
80004000 g     F .text	0000004e readLcdButtons
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004ede g     F .text	0000004c IfxAsclin_resetModule
80008e2e g     F .text	0000000a deserialize_sensor_packet
80006ff2 g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
800006f0 g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006da8 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
80000140 g     O .rodata	00000008 osEE_cdb_var
8000adc6 g     F .text	00000112 .hidden __pack_d
800009b0 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
800099b4 g     F .text	000000ac StartOS
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000d20 g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000bf4 g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
8000b056 g     F .text	0000000e free
80000b50 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d836 g     F .text	00000082 __multadd
8000d824 g     F .text	00000012 _Bfree
80000710 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
800089c4 g     F .text	00000162 printInfoDisplay
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 8d 47 	ja 80008f1a <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001200 <__TRAPTAB>:
80001200:	00 a0       	debug 
80001202:	1d ff ff ff 	j 80001200 <__TRAPTAB>
	...

80001220 <osEE_tc_trap_protection>:
80001220:	00 a0       	debug 
80001222:	1d ff ff ff 	j 80001220 <osEE_tc_trap_protection>
	...

80001240 <osEE_tc_trap_instruction>:
80001240:	00 a0       	debug 
80001242:	1d ff ff ff 	j 80001240 <osEE_tc_trap_instruction>
	...

80001260 <osEE_tc_trap_context>:
80001260:	00 a0       	debug 
80001262:	1d ff ff ff 	j 80001260 <osEE_tc_trap_context>
	...

80001280 <osEE_tc_trap_bus>:
80001280:	00 a0       	debug 
80001282:	1d ff ff ff 	j 80001280 <osEE_tc_trap_bus>
	...

800012a0 <osEE_tc_trap_assertion>:
800012a0:	00 a0       	debug 
800012a2:	1d ff ff ff 	j 800012a0 <osEE_tc_trap_assertion>
	...

800012c0 <osEE_tc_trap_system>:
800012c0:	00 a0       	debug 
800012c2:	1d ff ff ff 	j 800012c0 <osEE_tc_trap_system>
	...

800012e0 <osEE_tc_trap_nmi>:
800012e0:	00 a0       	debug 
800012e2:	1d ff ff ff 	j 800012e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001300 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001308 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 44       	mov %d4,4
80002046:	1d 00 08 3c 	j 80009856 <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr2_entry_4>:
80002080:	0d 00 00 02 	svlcx 
80002084:	82 14       	mov %d4,1
80002086:	1d 00 e8 3b 	j 80009856 <osEE_tc_isr2_wrapper>
	...

800020a0 <osEE_tc_isr2_entry_5>:
800020a0:	0d 00 00 02 	svlcx 
800020a4:	82 24       	mov %d4,2
800020a6:	1d 00 d8 3b 	j 80009856 <osEE_tc_isr2_wrapper>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr2_entry_10>:
80002140:	0d 00 00 02 	svlcx 
80002144:	82 34       	mov %d4,3
80002146:	1d 00 88 3b 	j 80009856 <osEE_tc_isr2_wrapper>
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
80002266:	1d 00 f8 3a 	j 80009856 <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <readLcdButtons>:
#include "bsw.h"



int readLcdButtons(void)
{
80004000:	20 08       	sub.a %sp,8
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004002:	82 34       	mov %d4,3
80004004:	6d 00 02 03 	call 80004608 <readADCValue>
    printfSerial("%d",adc_key_in);
80004008:	91 00 00 48 	movh.a %a4,32768
8000400c:	74 a2       	st.w [%sp],%d2
8000400e:	d9 44 28 00 	lea %a4,[%a4]40 <80000028 <_start+0x8>>

int readLcdButtons(void)
{
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004012:	02 2f       	mov %d15,%d2
    printfSerial("%d",adc_key_in);
80004014:	6d 00 4b 02 	call 800044aa <printfSerial>

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
80004018:	8b 4f 66 32 	lt.u %d3,%d15,100
        button_state = btnUP;
8000401c:	82 02       	mov %d2,0
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
    printfSerial("%d",adc_key_in);

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
8000401e:	df 03 17 80 	jne %d3,0,8000404c <readLcdButtons+0x4c>
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004022:	3b 80 3e 30 	mov %d3,1000
        button_state = btnRIGHT; 
80004026:	82 32       	mov %d2,3
    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004028:	3f 3f 12 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
8000402c:	3b 40 9c 30 	mov %d3,2500
        button_state = btnLEFT; 
80004030:	82 22       	mov %d2,2
     
    } 
    else if (adc_key_in < 1000){
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
80004032:	3f 3f 0d 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
80004036:	3b c0 da 30 	mov %d3,3500
8000403a:	3f 3f 08 80 	jlt.u %d15,%d3,8000404a <readLcdButtons+0x4a>
        button_state = btnDOWN; 
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
8000403e:	3b 00 fa 30 	mov %d3,4000
80004042:	0b 3f 30 f1 	lt.u %d15,%d15,%d3
80004046:	ea 42       	cmovn %d2,%d15,4
80004048:	00 90       	ret 
    }     
    else if (adc_key_in < 2500){ 
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
        button_state = btnDOWN; 
8000404a:	82 12       	mov %d2,1
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
    } 
    return button_state;
8000404c:	00 90       	ret 

8000404e <lcd_write4bits>:
    delay_ms(2);       
}

static void lcd_write4bits(uint8 data)
{
    IfxPort_setPinState(LCD_D4, (data & 0x01) ? IfxPort_State_high : IfxPort_State_low);
8000404e:	8f 14 00 21 	and %d2,%d4,1
80004052:	7b 10 00 f0 	movh %d15,1
80004056:	ab 1f a0 f2 	seln %d15,%d2,%d15,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000405a:	91 40 00 ff 	movh.a %a15,61444
8000405e:	06 4f       	sh %d15,4
80004060:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004064:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D5, (data & 0x02) ? IfxPort_State_high : IfxPort_State_low);
80004066:	8f 24 00 21 	and %d2,%d4,2
8000406a:	7b 80 00 f0 	movh %d15,8
8000406e:	91 40 00 ff 	movh.a %a15,61444
80004072:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004076:	ab 8f a0 f2 	seln %d15,%d2,%d15,8
8000407a:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D6, (data & 0x04) ? IfxPort_State_high : IfxPort_State_low);
8000407c:	8f 44 00 21 	and %d2,%d4,4
80004080:	7b 00 01 f0 	movh %d15,16
80004084:	ab 0f a1 f2 	seln %d15,%d2,%d15,16
80004088:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D7, (data & 0x08) ? IfxPort_State_high : IfxPort_State_low);
8000408a:	8f 84 00 41 	and %d4,%d4,8
8000408e:	7b 00 02 f0 	movh %d15,32
80004092:	ab 0f a2 44 	seln %d4,%d4,%d15,32
80004096:	68 14       	st.w [%a15]4,%d4
80004098:	da 80       	mov %d15,128
8000409a:	68 1f       	st.w [%a15]4,%d15
#include "bsw.h"

static void lcd_pulse_enable(void)
{
    IfxPort_setPinHigh(LCD_E);
    delay_ms(2);       
8000409c:	82 24       	mov %d4,2
8000409e:	6d 00 61 01 	call 80004360 <delay_ms>
800040a2:	7b 00 08 f0 	movh %d15,128
800040a6:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinLow(LCD_E);
    delay_ms(2);       
800040a8:	82 24       	mov %d4,2
800040aa:	1d 00 5b 01 	j 80004360 <delay_ms>

800040ae <lcd_command>:
800040ae:	91 40 00 ff 	movh.a %a15,61444
800040b2:	7b 00 04 20 	movh %d2,64
800040b6:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
    lcd_pulse_enable();
}


static void lcd_command(uint8 cmd)
{
800040ba:	02 4f       	mov %d15,%d4
800040bc:	68 12       	st.w [%a15]4,%d2
    IfxPort_setPinLow(LCD_RS);
    lcd_write4bits(cmd >> 4);
800040be:	06 c4       	sh %d4,-4
800040c0:	5c c7       	call 8000404e <lcd_write4bits>
    lcd_write4bits(cmd & 0x0F);
800040c2:	8f ff 00 41 	and %d4,%d15,15
800040c6:	5c c4       	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800040c8:	82 54       	mov %d4,5
800040ca:	1d 00 4b 01 	j 80004360 <delay_ms>

800040ce <lcd_clear>:
}


void lcd_clear(void)
{
    lcd_command(0x01);
800040ce:	82 14       	mov %d4,1
800040d0:	5c ef       	call 800040ae <lcd_command>
    delay_ms(5);       
800040d2:	82 54       	mov %d4,5
800040d4:	1d 00 46 01 	j 80004360 <delay_ms>

800040d8 <lcd_init>:
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800040d8:	91 40 00 4f 	movh.a %a4,61444
800040dc:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040e0:	82 64       	mov %d4,6
800040e2:	3b 00 08 50 	mov %d5,128
800040e6:	6d 00 0c 0e 	call 80005cfe <IfxPort_setPinMode>
800040ea:	91 40 00 4f 	movh.a %a4,61444
800040ee:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040f2:	82 74       	mov %d4,7
800040f4:	3b 00 08 50 	mov %d5,128
800040f8:	6d 00 03 0e 	call 80005cfe <IfxPort_setPinMode>
800040fc:	91 40 00 4f 	movh.a %a4,61444
80004100:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004104:	82 44       	mov %d4,4
80004106:	3b 00 08 50 	mov %d5,128
8000410a:	6d 00 fa 0d 	call 80005cfe <IfxPort_setPinMode>
8000410e:	91 40 00 4f 	movh.a %a4,61444
80004112:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004116:	82 34       	mov %d4,3
80004118:	3b 00 08 50 	mov %d5,128
8000411c:	6d 00 f1 0d 	call 80005cfe <IfxPort_setPinMode>
80004120:	91 40 00 4f 	movh.a %a4,61444
80004124:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004128:	82 44       	mov %d4,4
8000412a:	3b 00 08 50 	mov %d5,128
8000412e:	6d 00 e8 0d 	call 80005cfe <IfxPort_setPinMode>
80004132:	91 40 00 4f 	movh.a %a4,61444
80004136:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000413a:	3b 00 08 50 	mov %d5,128
8000413e:	82 54       	mov %d4,5
80004140:	6d 00 df 0d 	call 80005cfe <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(LCD_D4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D7, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    delay_ms(100);  
80004144:	3b 40 06 40 	mov %d4,100
80004148:	6d 00 0c 01 	call 80004360 <delay_ms>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000414c:	91 40 00 ff 	movh.a %a15,61444
80004150:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004154:	7b 00 04 f0 	movh %d15,64
80004158:	68 1f       	st.w [%a15]4,%d15
8000415a:	7b 00 08 f0 	movh %d15,128
8000415e:	68 1f       	st.w [%a15]4,%d15

    IfxPort_setPinLow(LCD_RS);
    IfxPort_setPinLow(LCD_E);

    lcd_write4bits(0x03); delay_ms(10);  
80004160:	82 34       	mov %d4,3
80004162:	6d ff 76 ff 	call 8000404e <lcd_write4bits>
80004166:	3b a0 00 40 	mov %d4,10
8000416a:	6d 00 fb 00 	call 80004360 <delay_ms>
    lcd_write4bits(0x03); delay_ms(10);  
8000416e:	82 34       	mov %d4,3
80004170:	6d ff 6f ff 	call 8000404e <lcd_write4bits>
80004174:	3b a0 00 40 	mov %d4,10
80004178:	6d 00 f4 00 	call 80004360 <delay_ms>
    lcd_write4bits(0x03); delay_ms(5);   
8000417c:	82 34       	mov %d4,3
8000417e:	6d ff 68 ff 	call 8000404e <lcd_write4bits>
80004182:	82 54       	mov %d4,5
80004184:	6d 00 ee 00 	call 80004360 <delay_ms>
    lcd_write4bits(0x02); delay_ms(5);   
80004188:	82 24       	mov %d4,2
8000418a:	6d ff 62 ff 	call 8000404e <lcd_write4bits>
8000418e:	82 54       	mov %d4,5
80004190:	6d 00 e8 00 	call 80004360 <delay_ms>

    lcd_command(0x28);
80004194:	3b 80 02 40 	mov %d4,40
80004198:	5c 8b       	call 800040ae <lcd_command>
    lcd_command(0x0C);
8000419a:	3b c0 00 40 	mov %d4,12
8000419e:	5c 88       	call 800040ae <lcd_command>
    lcd_command(0x06);
800041a0:	82 64       	mov %d4,6
800041a2:	5c 86       	call 800040ae <lcd_command>
    lcd_clear();
800041a4:	1d ff 95 ff 	j 800040ce <lcd_clear>

800041a8 <lcd_goto>:
}


void lcd_goto(uint8 row, uint8 col)
{
    uint8 address = (row == 0) ? 0x00 : 0x40;
800041a8:	ab 04 a4 44 	seln %d4,%d4,%d4,64
    address += col;
800041ac:	42 54       	add %d4,%d5
    lcd_command(0x80 | address);
800041ae:	b7 14 99 43 	insert %d4,%d4,1,7,25
800041b2:	1d ff 7e ff 	j 800040ae <lcd_command>

800041b6 <lcd_print>:
800041b6:	91 40 00 cf 	movh.a %a12,61444
}


void lcd_print(const char *str)
{
800041ba:	40 4f       	mov.aa %a15,%a4
800041bc:	d9 cc 00 8a 	lea %a12,[%a12]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800041c0:	3b 00 04 80 	mov %d8,64
    while (*str)
800041c4:	79 ff 00 00 	ld.b %d15,[%a15]0
800041c8:	6e 11       	jz %d15,800041ea <lcd_print+0x34>
        lcd_data(*str++);
800041ca:	16 ff       	and %d15,255


static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
800041cc:	8f cf 1f 40 	sh %d4,%d15,-4
800041d0:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x40038004>>,%d8
800041d4:	6d ff 3d ff 	call 8000404e <lcd_write4bits>
    lcd_write4bits(data & 0x0F);
800041d8:	8f ff 00 41 	and %d4,%d15,15
800041dc:	6d ff 39 ff 	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800041e0:	82 54       	mov %d4,5


void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
800041e2:	b0 1f       	add.a %a15,1
static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
    lcd_write4bits(data & 0x0F);
    delay_ms(5);       
800041e4:	6d 00 be 00 	call 80004360 <delay_ms>
800041e8:	3c ee       	j 800041c4 <lcd_print+0xe>

void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
}
800041ea:	00 90       	ret 

800041ec <ButtonISR>:
#include "bsw.h"

ISR2(ButtonISR)
{
    unsigned int buttonState;
    DisableAllInterrupts();
800041ec:	6d 00 4b 2b 	call 80009882 <DisableAllInterrupts>
    osEE_tc_delay(5000);
800041f0:	3b 80 38 41 	mov %d4,5000
800041f4:	6d 00 1d 2b 	call 8000982e <osEE_tc_delay>
    printfSerial("interuppt");
800041f8:	91 00 00 48 	movh.a %a4,32768
800041fc:	d9 44 2b 00 	lea %a4,[%a4]43 <8000002b <_start+0xb>>
80004200:	6d 00 55 01 	call 800044aa <printfSerial>
    buttonState = readLcdButtons();
80004204:	6d ff fe fe 	call 80004000 <readLcdButtons>
    updateInfoState(buttonState);
80004208:	02 24       	mov %d4,%d2
8000420a:	6d 00 92 24 	call 80008b2e <updateInfoState>

    osEE_tc_delay(3000);
8000420e:	3b 80 bb 40 	mov %d4,3000
80004212:	6d 00 0e 2b 	call 8000982e <osEE_tc_delay>
    EnableAllInterrupts();
80004216:	1d 00 41 2b 	j 80009898 <EnableAllInterrupts>

8000421a <FuncTaskUltrasonic>:
}

TASK(TaskUltrasonic)
{
8000421a:	20 08       	sub.a %sp,8
    printfSerial("ultrasonic:(%d)", getUltrasonic());
8000421c:	6d 00 62 26 	call 80008ee0 <getUltrasonic>
80004220:	91 00 00 48 	movh.a %a4,32768
80004224:	74 a2       	st.w [%sp],%d2
80004226:	d9 44 35 00 	lea %a4,[%a4]53 <80000035 <_start+0x15>>
8000422a:	1d 00 40 01 	j 800044aa <printfSerial>

8000422e <TimerISR>:
}

ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000422e:	7b f0 00 40 	movh %d4,15
{
    printfSerial("ultrasonic:(%d)", getUltrasonic());
}

ISR2(TimerISR)
{
80004232:	20 38       	sub.a %sp,56
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004234:	1b 04 24 44 	addi %d4,%d4,16960

    /************** ONE-TIME-TASK ********************/

    // code for packet uart send test//
    if (c == 1)
80004238:	91 00 00 f7 	movh.a %a15,28672
}

ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000423c:	6d 00 94 2a 	call 80009764 <osEE_tc_stm_set_sr0_next_match>

    /************** ONE-TIME-TASK ********************/

    // code for packet uart send test//
    if (c == 1)
80004240:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004244:	df 1f 37 80 	jne %d15,1,800042b2 <TimerISR+0x84>
    {
        struct ActuatorPacket sendActuatorPkt = {
80004248:	d9 a4 2d 00 	lea %a4,[%sp]45
8000424c:	40 42       	mov.aa %a2,%a4
8000424e:	82 02       	mov %d2,0
80004250:	a0 a3       	mov.a %a3,10
80004252:	24 22       	st.b [%a2+],%d2
80004254:	fc 3f       	loop %a3,80004252 <TimerISR+0x24>
80004256:	e9 af 2e 00 	st.b [%sp]46,%d15
8000425a:	39 af 2f 00 	ld.bu %d15,[%sp]47
8000425e:	3b a0 fa 2f 	mov %d2,-86
80004262:	b7 7f 03 f0 	insert %d15,%d15,7,0,3
80004266:	e9 a2 2d 00 	st.b [%sp]45,%d2
8000426a:	e9 af 2f 00 	st.b [%sp]47,%d15
8000426e:	39 af 30 00 	ld.bu %d15,[%sp]48
80004272:	82 42       	mov %d2,4
80004274:	b7 2f 02 f0 	insert %d15,%d15,2,0,2
80004278:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000427c:	b7 7f 04 f2 	insert %d15,%d15,7,4,4
80004280:	e9 a2 32 00 	st.b [%sp]50,%d2
80004284:	e9 af 30 00 	st.b [%sp]48,%d15
80004288:	3b 80 00 20 	mov %d2,8
8000428c:	82 0f       	mov %d15,0
8000428e:	e9 af 31 00 	st.b [%sp]49,%d15
80004292:	e9 af 33 00 	st.b [%sp]51,%d15
80004296:	e9 a2 34 00 	st.b [%sp]52,%d2
8000429a:	e9 af 35 00 	st.b [%sp]53,%d15
8000429e:	e9 a2 36 00 	st.b [%sp]54,%d2
            .servo_chair = 1024,
            .servo_window = 2048,
            .servo_air = 2048};

        
        sendActuatorPacket(&sendActuatorPkt);
800042a2:	6d 00 30 25 	call 80008d02 <sendActuatorPacket>
        printfSerial("ActuatorPacket sent...");
800042a6:	91 00 00 48 	movh.a %a4,32768
800042aa:	d9 44 05 10 	lea %a4,[%a4]69 <80000045 <_start+0x25>>
800042ae:	6d 00 fe 00 	call 800044aa <printfSerial>
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};
        
    }
    if (c == 3)
800042b2:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
800042b6:	df 3f 45 80 	jne %d15,3,80004340 <TimerISR+0x112>
    {
        struct ActuatorPacket recievedActuatorPkt;
        readActuatorPacket(recievedActuatorPkt);
800042ba:	d9 a4 2d 00 	lea %a4,[%sp]45
800042be:	6d 00 4b 25 	call 80008d54 <readActuatorPacket>
        printfSerial("ActuatorPacket recieved...");
800042c2:	91 00 00 48 	movh.a %a4,32768
800042c6:	d9 44 1c 10 	lea %a4,[%a4]92 <8000005c <_start+0x3c>>
800042ca:	6d 00 f0 00 	call 800044aa <printfSerial>

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ce:	39 af 2d 00 	ld.bu %d15,[%sp]45
800042d2:	91 00 00 48 	movh.a %a4,32768
800042d6:	78 00       	st.w [%sp]0,%d15
800042d8:	39 af 2e 00 	ld.bu %d15,[%sp]46 <80000000 <BootModeHeader0>>
800042dc:	d9 44 37 10 	lea %a4,[%a4]119 <80000077 <_start+0x57>>
800042e0:	78 01       	st.w [%sp]4,%d15
            recievedActuatorPkt.start_byte,
            recievedActuatorPkt.packet_id,
            recievedActuatorPkt.led_rgb,
800042e2:	39 af 2f 00 	ld.bu %d15,[%sp]47 <80000001 <BootModeHeader0+0x1>>
    {
        struct ActuatorPacket recievedActuatorPkt;
        readActuatorPacket(recievedActuatorPkt);
        printfSerial("ActuatorPacket recieved...");

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042e6:	16 07       	and %d15,7
800042e8:	78 02       	st.w [%sp]8,%d15
            recievedActuatorPkt.start_byte,
            recievedActuatorPkt.packet_id,
            recievedActuatorPkt.led_rgb,
            recievedActuatorPkt.fan,
800042ea:	39 af 30 00 	ld.bu %d15,[%sp]48 <70000002 <__DSPR0_START+0x2>>
    {
        struct ActuatorPacket recievedActuatorPkt;
        readActuatorPacket(recievedActuatorPkt);
        printfSerial("ActuatorPacket recieved...");

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ee:	8f 3f 00 21 	and %d2,%d15,3
800042f2:	59 a2 0c 00 	st.w [%sp]12,%d2
800042f6:	37 0f 61 21 	extr.u %d2,%d15,2,1
800042fa:	59 a2 10 00 	st.w [%sp]16,%d2
800042fe:	37 0f e1 21 	extr.u %d2,%d15,3,1
80004302:	37 0f 64 f2 	extr.u %d15,%d15,4,4
80004306:	59 a2 14 00 	st.w [%sp]20,%d2
8000430a:	78 06       	st.w [%sp]24,%d15
            recievedActuatorPkt.led_rgb,
            recievedActuatorPkt.fan,
            recievedActuatorPkt.led,
            recievedActuatorPkt.buzzer,
            recievedActuatorPkt.driving_mode,
            recievedActuatorPkt.servo_chair,
8000430c:	39 af 32 00 	ld.bu %d15,[%sp]50
80004310:	39 a2 31 00 	ld.bu %d2,[%sp]49
80004314:	8f 8f 00 f0 	sh %d15,%d15,8
    {
        struct ActuatorPacket recievedActuatorPkt;
        readActuatorPacket(recievedActuatorPkt);
        printfSerial("ActuatorPacket recieved...");

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
80004318:	a6 2f       	or %d15,%d2
8000431a:	78 07       	st.w [%sp]28,%d15
            recievedActuatorPkt.fan,
            recievedActuatorPkt.led,
            recievedActuatorPkt.buzzer,
            recievedActuatorPkt.driving_mode,
            recievedActuatorPkt.servo_chair,
            recievedActuatorPkt.servo_window,
8000431c:	39 af 34 00 	ld.bu %d15,[%sp]52 <70000007 <__DSPR0_START+0x7>>
80004320:	39 a2 33 00 	ld.bu %d2,[%sp]51 <70000007 <__DSPR0_START+0x7>>
80004324:	8f 8f 00 f0 	sh %d15,%d15,8
    {
        struct ActuatorPacket recievedActuatorPkt;
        readActuatorPacket(recievedActuatorPkt);
        printfSerial("ActuatorPacket recieved...");

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
80004328:	a6 2f       	or %d15,%d2
8000432a:	78 08       	st.w [%sp]32,%d15
            recievedActuatorPkt.led,
            recievedActuatorPkt.buzzer,
            recievedActuatorPkt.driving_mode,
            recievedActuatorPkt.servo_chair,
            recievedActuatorPkt.servo_window,
            recievedActuatorPkt.servo_air);
8000432c:	39 af 36 00 	ld.bu %d15,[%sp]54 <70000008 <g_vadcChannelIDs>>
80004330:	39 a2 35 00 	ld.bu %d2,[%sp]53 <70000008 <g_vadcChannelIDs>>
80004334:	8f 8f 00 f0 	sh %d15,%d15,8
    {
        struct ActuatorPacket recievedActuatorPkt;
        readActuatorPacket(recievedActuatorPkt);
        printfSerial("ActuatorPacket recieved...");

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
80004338:	a6 2f       	or %d15,%d2
8000433a:	78 09       	st.w [%sp]36,%d15
8000433c:	6d 00 b7 00 	call 800044aa <printfSerial>
            recievedActuatorPkt.servo_air);
    }
    // code for packet uart send test end//

    /************** basic-TASK (every 1s) ********************/
    printfSerial("\n%4ld: ", c++);
80004340:	19 f2 00 00 	ld.w %d2,[%a15]0 <70000000 <__DSPR0_START>>
80004344:	91 00 00 48 	movh.a %a4,32768
80004348:	02 2f       	mov %d15,%d2
8000434a:	74 a2       	st.w [%sp],%d2
8000434c:	c2 1f       	add %d15,1
8000434e:	d9 44 0e 30 	lea %a4,[%a4]206 <800000ce <_start+0xae>>
80004352:	59 ff 00 00 	st.w [%a15]0 <70000000 <__DSPR0_START>>,%d15
80004356:	6d 00 aa 00 	call 800044aa <printfSerial>
    ActivateTask(TaskUltrasonic);
8000435a:	82 54       	mov %d4,5
8000435c:	1d 00 8f 2b 	j 80009a7a <ActivateTask>

80004360 <delay_ms>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
80004360:	02 4a       	mov %d10,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80004362:	6d 00 b5 0e 	call 800060cc <IfxScuCcu_getSourceFrequency>
80004366:	91 30 00 ff 	movh.a %a15,61443
8000436a:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000436e:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004370:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004374:	37 04 64 44 	extr.u %d4,%d4,8,4
80004378:	53 1f 40 00 	mul.u %e0,%d15,1
8000437c:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80004380:	8f 0f 40 61 	or %d6,%d15,0
80004384:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
80004388:	3b 80 3e 40 	mov %d4,1000
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
8000438c:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
80004390:	4b 42 11 22 	div.u %e2,%d2,%d4
80004394:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
80004398:	73 a2 68 40 	mul.u %e4,%d2,%d10
8000439c:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043a0:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800043a4:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
800043a8:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043ac:	8f 0f 40 81 	or %d8,%d15,0
800043b0:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
800043b4:	0b 68 c0 20 	subx %d2,%d8,%d6
800043b8:	0b 79 d0 30 	subc %d3,%d9,%d7
800043bc:	3a 53       	eq %d15,%d3,%d5
800043be:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
800043c2:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
800043c6:	ee ed       	jnz %d15,800043a0 <delay_ms+0x40>
}
800043c8:	00 90       	ret 

800043ca <delay_us>:

void delay_us(unsigned long delay)
{
800043ca:	02 4a       	mov %d10,%d4
800043cc:	6d 00 80 0e 	call 800060cc <IfxScuCcu_getSourceFrequency>
800043d0:	91 30 00 ff 	movh.a %a15,61443
800043d4:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800043d8:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043da:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800043de:	37 04 64 44 	extr.u %d4,%d4,8,4
800043e2:	53 1f 40 00 	mul.u %e0,%d15,1
800043e6:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
800043ea:	8f 0f 40 61 	or %d6,%d15,0
800043ee:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_us = freq / 1000000;
800043f2:	7b f0 00 40 	movh %d4,15
800043f6:	1b 04 24 44 	addi %d4,%d4,16960
    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

void delay_us(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
800043fa:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_us = freq / 1000000;
800043fe:	4b 42 11 22 	div.u %e2,%d2,%d4
80004402:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_us;
80004406:	73 a2 68 40 	mul.u %e4,%d2,%d10
8000440a:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000440e:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004412:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80004416:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
8000441a:	8f 0f 40 81 	or %d8,%d15,0
8000441e:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80004422:	0b 68 c0 20 	subx %d2,%d8,%d6
80004426:	0b 79 d0 30 	subc %d3,%d9,%d7
8000442a:	3a 53       	eq %d15,%d3,%d5
8000442c:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80004430:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80004434:	ee ed       	jnz %d15,8000440e <delay_us+0x44>
}
80004436:	00 90       	ret 

80004438 <UART_init>:

void UART_init(void)
{
80004438:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
8000443a:	d9 a4 24 00 	lea %a4,[%sp]36
8000443e:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
80004442:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
80004444:	6d 00 e8 09 	call 80005814 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
80004448:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
8000444c:	7b 10 7e f4 	movh %d15,18401
80004450:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80004452:	82 3f       	mov %d15,3
80004454:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
80004458:	da 13       	mov %d15,19
8000445a:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000445e:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
80004462:	7b 00 00 28 	movh %d2,32768
80004466:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004468:	37 0f 63 f0 	extr.u %d15,%d15,0,3
8000446c:	d9 af 04 00 	lea %a15,[%sp]4
80004470:	40 f4       	mov.aa %a4,%a15
80004472:	d9 32 18 30 	lea %a2,[%a3]216
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
80004476:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
8000447a:	a0 33       	mov.a %a3,3
8000447c:	09 22 48 01 	ld.d %e2,[%a2+]8
80004480:	89 42 48 01 	st.d [%a4+]8,%e2
80004484:	fc 3c       	loop %a3,8000447c <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004486:	7b 00 00 f7 	movh %d15,28672
8000448a:	1b 4f 97 f0 	addi %d15,%d15,2420
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000448e:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004492:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004494:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004498:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000449c:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
800044a0:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
800044a4:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800044a6:	1d 00 e0 07 	j 80005466 <IfxAsclin_Asc_initModule>

800044aa <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
800044aa:	20 e8       	sub.a %sp,232
800044ac:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
800044ae:	6d 00 f5 29 	call 80009898 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
800044b2:	40 f5       	mov.aa %a5,%a15
800044b4:	d9 a4 28 10 	lea %a4,[%sp]104
800044b8:	3b 00 08 40 	mov %d4,128
800044bc:	d9 a6 28 30 	lea %a6,[%sp]232
800044c0:	6d 00 5f 38 	call 8000b57e <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
800044c4:	d9 a4 28 10 	lea %a4,[%sp]104
800044c8:	6d 00 2c 38 	call 8000b520 <strlen>
800044cc:	91 00 00 f7 	movh.a %a15,28672
800044d0:	d9 ff b4 50 	lea %a15,[%a15]2420 <70000974 <g_AsclinAsc>>
800044d4:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x170>>,%d2
    unsigned int i =0;
800044d8:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
800044da:	d9 a4 28 10 	lea %a4,[%sp]104
800044de:	6d 00 21 38 	call 8000b520 <strlen>
800044e2:	7f 2f 0c 80 	jge.u %d15,%d2,800044fa <printfSerial+0x50>
        txData[i] = buf[i];
800044e6:	d9 a3 04 00 	lea %a3,[%sp]4
800044ea:	10 32       	addsc.a %a2,%a3,%d15,0
800044ec:	d9 a3 28 10 	lea %a3,[%sp]104
800044f0:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
800044f2:	c2 1f       	add %d15,1
        txData[i] = buf[i];
800044f4:	08 02       	ld.bu %d2,[%a15]0
800044f6:	34 22       	st.b [%a2],%d2
800044f8:	3c f1       	j 800044da <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
800044fa:	91 00 00 47 	movh.a %a4,28672
800044fe:	91 00 00 67 	movh.a %a6,28672
80004502:	82 f4       	mov %d4,-1
80004504:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
80004508:	d9 a5 04 00 	lea %a5,[%sp]4 <70000bc8 <g_AsclinAsc+0x254>>
8000450c:	d9 66 a4 f0 	lea %a6,[%a6]3044 <70000be4 <g_AsclinAsc+0x270>>
80004510:	9b 04 00 58 	addih %d5,%d4,32768
80004514:	1d 00 e8 09 	j 800058e4 <IfxAsclin_Asc_write>

80004518 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
80004518:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
8000451a:	d9 a4 04 00 	lea %a4,[%sp]4
8000451e:	91 20 00 5f 	movh.a %a5,61442
80004522:	6d 00 bc 1d 	call 8000809a <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
80004526:	91 00 00 47 	movh.a %a4,28672
8000452a:	d9 44 a4 50 	lea %a4,[%a4]2404 <70000964 <g_vadc>>
8000452e:	d9 a5 04 00 	lea %a5,[%sp]4 <70000964 <g_vadc>>
80004532:	1d 00 40 1d 	j 80007fb2 <IfxVadc_Adc_initModule>

80004536 <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
80004536:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004538:	91 00 00 57 	movh.a %a5,28672
8000453c:	40 a4       	mov.aa %a4,%sp
8000453e:	d9 55 a4 50 	lea %a5,[%a5]2404 <70000964 <g_vadc>>
80004542:	6d 00 21 1d 	call 80007f84 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
80004546:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004548:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
8000454c:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
8000454e:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004550:	d9 44 98 50 	lea %a4,[%a4]2392 <70000958 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
80004554:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004556:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
80004558:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
8000455c:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80004560:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004564:	1d 00 4b 1b 	j 80007bfa <IfxVadc_Adc_initGroup>

80004568 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004568:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000456c:	7b 00 00 b7 	movh %d11,28672
80004570:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
80004574:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
80004578:	20 60       	sub.a %sp,96
8000457a:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
8000457c:	d9 ee 98 50 	lea %a14,[%a14]2392 <70000958 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004580:	1b 8b 00 b0 	addi %d11,%d11,8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004584:	82 19       	mov %d9,1
80004586:	1b 8a 93 a0 	addi %d10,%d10,2360
8000458a:	d9 dd a4 50 	lea %a13,[%a13]2404
8000458e:	53 8f 21 80 	mul %d8,%d15,24
80004592:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004594:	40 e5       	mov.aa %a5,%a14
80004596:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004598:	d9 af 20 10 	lea %a15,[%sp]96
8000459c:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
8000459e:	40 c4       	mov.aa %a4,%a12
800045a0:	6d 00 22 1b 	call 80007be4 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800045a4:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800045a6:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800045a8:	30 3f       	add.a %a15,%a3
800045aa:	60 b3       	mov.a %a3,%d11
800045ac:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
800045ae:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800045b2:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800045b4:	60 a2       	mov.a %a2,%d10
800045b6:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800045b8:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800045bc:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800045c0:	6d 00 1c 1a 	call 800079f8 <IfxVadc_Adc_initChannel>
800045c4:	d4 d2       	ld.a %a2,[%a13]
800045c6:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <g_vadcChannelIDs>>
800045ca:	c2 1f       	add %d15,1
800045cc:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
800045d0:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
800045d4:	19 23 00 60 	ld.w %d3,[%a2]384
800045d8:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
800045dc:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
800045e0:	df 4f d7 ff 	jne %d15,4,8000458e <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
800045e4:	00 90       	ret 

800045e6 <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
800045e6:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
800045ea:	6d ff 97 ff 	call 80004518 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
800045ee:	6d ff a4 ff 	call 80004536 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
800045f2:	6d ff bb ff 	call 80004568 <initVADCChannels>
800045f6:	99 ff a4 50 	ld.a %a15,[%a15]2404 <70000964 <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
800045fa:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000964 <g_vadc>>
800045fe:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80004602:	59 ff 04 80 	st.w [%a15]516,%d15
80004606:	00 90       	ret 

80004608 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80004608:	91 00 00 f7 	movh.a %a15,28672
8000460c:	d9 ff b8 40 	lea %a15,[%a15]2360 <70000938 <g_vadcChannel>>
80004610:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004614:	c8 12       	ld.a %a2,[%a15]4
80004616:	0c f1       	ld.bu %d15,[%a15]1
80004618:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
8000461c:	1b 0f 0a f0 	addi %d15,%d15,160
80004620:	90 2f       	addsc.a %a15,%a2,%d15,2
80004622:	4c f0       	ld.w %d15,[%a15]0
80004624:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
80004628:	ff 0f fd 7f 	jge %d15,0,80004622 <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
8000462c:	00 90       	ret 

8000462e <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
8000462e:	91 40 00 4f 	movh.a %a4,61444
80004632:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004636:	82 74       	mov %d4,7
80004638:	3b 00 01 50 	mov %d5,16
8000463c:	6d 00 61 0b 	call 80005cfe <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
80004640:	91 00 00 f8 	movh.a %a15,32768
80004644:	d9 ff 8c f0 	lea %a15,[%a15]3020 <80000bcc <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80004648:	c8 24       	ld.a %a4,[%a15]8
8000464a:	91 00 00 d7 	movh.a %a13,28672
8000464e:	08 c4       	ld.bu %d4,[%a15]12
80004650:	3b 80 00 50 	mov %d5,8
80004654:	b5 df a8 50 	st.a [%a13]2408 <70000968 <g_ERUconfig>>,%a15
80004658:	6d 00 53 0b 	call 80005cfe <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
8000465c:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
80004660:	08 44       	ld.bu %d4,[%a15]4
80004662:	6d 00 fc 14 	call 8000705a <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
80004666:	99 df a8 50 	ld.a %a15,[%a13]2408 <70000968 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
8000466a:	d9 dc a8 50 	lea %a12,[%a13]2408 <70000968 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
8000466e:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
80004670:	08 44       	ld.bu %d4,[%a15]4
80004672:	e9 c4 04 00 	st.b [%a12]4 <70000004 <__DSPR0_START+0x4>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
80004676:	6d 00 62 14 	call 80006f3a <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
8000467a:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
8000467e:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
80004680:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
80004682:	6d 00 95 14 	call 80006fac <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
80004686:	39 c4 04 00 	ld.bu %d4,[%a12]4
8000468a:	39 c5 05 00 	ld.bu %d5,[%a12]5
8000468e:	6d 00 c9 13 	call 80006e20 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
80004692:	39 c4 06 00 	ld.bu %d4,[%a12]6
80004696:	82 15       	mov %d5,1
80004698:	6d 00 1a 15 	call 800070cc <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
8000469c:	0c c6       	ld.bu %d15,[%a12]6
8000469e:	16 03       	and %d15,3
800046a0:	06 2f       	sh %d15,2
800046a2:	60 f2       	mov.a %a2,%d15
800046a4:	d9 2f d4 38 	lea %a15,[%a2]-29484
800046a8:	11 4f 00 ff 	addih.a %a15,%a15,61444
800046ac:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800046ae:	4c f0       	ld.w %d15,[%a15]0
800046b0:	b7 af 08 f0 	insert %d15,%d15,10,0,8
800046b4:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
800046b6:	4c f0       	ld.w %d15,[%a15]0
800046b8:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
800046bc:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800046be:	4c f0       	ld.w %d15,[%a15]0
800046c0:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
800046c4:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800046c6:	4c f0       	ld.w %d15,[%a15]0
800046c8:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800046cc:	68 0f       	st.w [%a15]0,%d15
800046ce:	00 90       	ret 

800046d0 <asclin3TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin3TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
800046d0:	91 00 00 47 	movh.a %a4,28672
800046d4:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
800046d8:	1d 00 0c 06 	j 800052f0 <IfxAsclin_Asc_isrTransmit>

800046dc <main>:
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
800046dc:	6d 00 e8 27 	call 800096ac <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
800046e0:	7b f0 00 40 	movh %d4,15
800046e4:	82 15       	mov %d5,1
800046e6:	1b 04 24 44 	addi %d4,%d4,16960
800046ea:	6d 00 fb 27 	call 800096e0 <osEE_tc_stm_set_sr0>

    UART_init();
800046ee:	6d ff a5 fe 	call 80004438 <UART_init>
    initADC();
800046f2:	6d ff 7a ff 	call 800045e6 <initADC>
    initPeripheralsAndERU();
800046f6:	6d ff 9c ff 	call 8000462e <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
800046fa:	6d ff ef fc 	call 800040d8 <lcd_init>
    initUltrasonic();
800046fe:	6d 00 9d 23 	call 80008e38 <initUltrasonic>
    initUartDriver();
80004702:	6d 00 65 22 	call 80008bcc <initUartDriver>
    /* custom driver added end*/

    printfSerial("\n...............\n");
80004706:	91 00 00 48 	movh.a %a4,32768
8000470a:	d9 44 38 30 	lea %a4,[%a4]248 <800000f8 <_start+0xd8>>
8000470e:	6d ff ce fe 	call 800044aa <printfSerial>
    printfSerial("...OS Starts...\n");
80004712:	91 00 00 48 	movh.a %a4,32768
80004716:	d9 44 0a 40 	lea %a4,[%a4]266 <8000010a <_start+0xea>>
8000471a:	6d ff c8 fe 	call 800044aa <printfSerial>
    printfSerial("...............\n");
8000471e:	91 00 00 48 	movh.a %a4,32768
80004722:	d9 44 1b 40 	lea %a4,[%a4]283 <8000011b <_start+0xfb>>
80004726:	6d ff c2 fe 	call 800044aa <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
8000472a:	82 04       	mov %d4,0
8000472c:	6d 00 44 29 	call 800099b4 <StartOS>
    return 0;
}
80004730:	82 02       	mov %d2,0
80004732:	00 90       	ret 

80004734 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004734:	02 4f       	mov %d15,%d4
80004736:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004738:	6d 00 6d 16 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
8000473c:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000473e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004740:	6d 00 66 15 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004744:	8b 0f a2 22 	ge.u %d2,%d15,32
80004748:	f6 28       	jnz %d2,80004758 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
8000474a:	19 f2 08 20 	ld.w %d2,[%a15]136
8000474e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
80004752:	59 ff 08 20 	st.w [%a15]136,%d15
80004756:	3c 08       	j 80004766 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
80004758:	19 f2 0c 20 	ld.w %d2,[%a15]140
8000475c:	16 1f       	and %d15,31
8000475e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
80004762:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80004766:	02 84       	mov %d4,%d8
80004768:	1d 00 d8 16 	j 80007518 <IfxScuWdt_setSafetyEndinit>

8000476c <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
8000476c:	02 4f       	mov %d15,%d4
8000476e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004770:	6d 00 51 16 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
80004774:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004776:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004778:	6d 00 4a 15 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
8000477c:	8b 0f a2 22 	ge.u %d2,%d15,32
80004780:	f6 28       	jnz %d2,80004790 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
80004782:	19 f2 08 20 	ld.w %d2,[%a15]136
80004786:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000478a:	59 ff 08 20 	st.w [%a15]136,%d15
8000478e:	3c 08       	j 8000479e <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
80004790:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004794:	16 1f       	and %d15,31
80004796:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000479a:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
8000479e:	02 84       	mov %d4,%d8
800047a0:	1d 00 bc 16 	j 80007518 <IfxScuWdt_setSafetyEndinit>

800047a4 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
800047a4:	82 0f       	mov %d15,0
800047a6:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800047aa:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
800047ae:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800047b2:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
800047b4:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
800047b8:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
800047bc:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047c0:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
800047c4:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800047c8:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
800047ca:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800047ce:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047d0:	6d ff ce ff 	call 8000476c <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
800047d4:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
800047d8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047dc:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
800047de:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047e2:	3b f0 00 40 	mov %d4,15
800047e6:	1d ff a7 ff 	j 80004734 <IfxVadc_disableAccess>

800047ea <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
800047ea:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
800047ec:	ff 84 1c 80 	jge.u %d4,8,80004824 <IfxVadc_disablePostCalibration+0x3a>
800047f0:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047f2:	3b f0 01 40 	mov %d4,31
800047f6:	02 58       	mov %d8,%d5
800047f8:	6d ff ba ff 	call 8000476c <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
800047fc:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
80004800:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004804:	82 1f       	mov %d15,1
80004806:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
8000480a:	df 18 04 80 	jne %d8,1,80004812 <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
8000480e:	a6 2f       	or %d15,%d2
80004810:	3c 03       	j 80004816 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
80004812:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004816:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000481a:	40 f4       	mov.aa %a4,%a15
8000481c:	3b f0 01 40 	mov %d4,31
80004820:	1d ff 8a ff 	j 80004734 <IfxVadc_disableAccess>
80004824:	00 90       	ret 

80004826 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
80004826:	40 4f       	mov.aa %a15,%a4
80004828:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000482a:	6d 00 d6 15 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
8000482e:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004830:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004832:	6d 00 d2 14 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004836:	40 f4       	mov.aa %a4,%a15
80004838:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
8000483c:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004840:	6d ff 96 ff 	call 8000476c <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
80004844:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
80004848:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000484c:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
8000484e:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004852:	3b f0 01 40 	mov %d4,31
80004856:	6d ff 6f ff 	call 80004734 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
8000485a:	df 08 1a 80 	jne %d8,0,8000488e <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
8000485e:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
80004862:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004866:	82 4f       	mov %d15,4
80004868:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
8000486c:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
80004870:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
80004874:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004878:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
8000487c:	3b 00 20 f4 	mov %d15,16896
80004880:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
80004884:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004888:	8f 8f c3 f1 	andn %d15,%d15,56
8000488c:	3c 1d       	j 800048c6 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
8000488e:	df 18 1e 80 	jne %d8,1,800048ca <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
80004892:	82 0f       	mov %d15,0
80004894:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
80004898:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
8000489c:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800048a0:	82 4f       	mov %d15,4
800048a2:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800048a6:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800048aa:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
800048ae:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800048b2:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
800048b6:	3b 00 20 f4 	mov %d15,16896
800048ba:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
800048be:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800048c2:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
800048c6:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
800048ca:	02 94       	mov %d4,%d9
800048cc:	1d 00 ba 15 	j 80007440 <IfxScuWdt_setCpuEndinit>

800048d0 <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
800048d0:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
800048d2:	6d 00 be 0c 	call 8000624e <IfxScuCcu_getSpbFrequency>
800048d6:	19 ff 00 20 	ld.w %d15,[%a15]128
800048da:	16 1f       	and %d15,31
800048dc:	c2 1f       	add %d15,1
800048de:	4b 0f 41 f1 	itof %d15,%d15
}
800048e2:	4b f2 51 20 	div.f %d2,%d2,%d15
800048e6:	00 90       	ret 

800048e8 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
800048e8:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
800048ea:	6d 00 b2 0c 	call 8000624e <IfxScuCcu_getSpbFrequency>
800048ee:	19 ff 00 20 	ld.w %d15,[%a15]128
800048f2:	37 0f 62 f4 	extr.u %d15,%d15,8,2
800048f6:	c2 1f       	add %d15,1
800048f8:	4b 0f 41 f1 	itof %d15,%d15
}
800048fc:	4b f2 51 20 	div.f %d2,%d2,%d15
80004900:	00 90       	ret 

80004902 <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
80004902:	1d 00 a6 0c 	j 8000624e <IfxScuCcu_getSpbFrequency>

80004906 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
80004906:	82 0f       	mov %d15,0
80004908:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
8000490a:	1b 0f 07 20 	addi %d2,%d15,112
8000490e:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
80004912:	54 22       	ld.w %d2,[%a2]
80004914:	f6 24       	jnz %d2,8000491c <IfxVadc_getBackgroundScanStatus+0x16>
80004916:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
80004918:	fc f9       	loop %a15,8000490a <IfxVadc_getBackgroundScanStatus+0x4>
8000491a:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
8000491c:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
8000491e:	00 90       	ret 

80004920 <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
80004920:	19 42 08 20 	ld.w %d2,[%a4]136
80004924:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
80004928:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
8000492c:	06 22       	sh %d2,2
8000492e:	00 90       	ret 

80004930 <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
80004930:	df 15 09 00 	jeq %d5,1,80004942 <IfxVadc_getResultBasedOnRequestSource+0x12>
80004934:	76 54       	jz %d5,8000493c <IfxVadc_getResultBasedOnRequestSource+0xc>
80004936:	df 25 0b 00 	jeq %d5,2,8000494c <IfxVadc_getResultBasedOnRequestSource+0x1c>
8000493a:	3c 39       	j 800049ac <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
8000493c:	19 5f 00 20 	ld.w %d15,[%a5]128
80004940:	3c 03       	j 80004946 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
80004942:	19 5f 20 20 	ld.w %d15,[%a5]160
80004946:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
80004948:	ee 39       	jnz %d15,800049ba <IfxVadc_getResultBasedOnRequestSource+0x8a>
8000494a:	3c 31       	j 800049ac <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
8000494c:	19 4f 00 80 	ld.w %d15,[%a4]512
80004950:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
80004952:	ee 34       	jnz %d15,800049ba <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
80004954:	1b 04 06 f0 	addi %d15,%d4,96
80004958:	90 5f       	addsc.a %a15,%a5,%d15,2
8000495a:	4c f0       	ld.w %d15,[%a15]0
8000495c:	ef 4f 28 00 	jz.t %d15,20,800049ac <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
80004960:	19 42 00 c0 	ld.w %d2,[%a4]768
80004964:	82 0f       	mov %d15,0
80004966:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
8000496a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000496e:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
80004972:	19 42 00 c0 	ld.w %d2,[%a4]768
80004976:	37 02 62 2e 	extr.u %d2,%d2,28,2
8000497a:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
8000497e:	19 42 00 c0 	ld.w %d2,[%a4]768
80004982:	37 02 e3 2c 	extr.u %d2,%d2,25,3
80004986:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
8000498a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000498e:	37 02 65 2a 	extr.u %d2,%d2,20,5
80004992:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
80004996:	19 42 00 c0 	ld.w %d2,[%a4]768
8000499a:	37 02 64 28 	extr.u %d2,%d2,16,4
8000499e:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
800049a2:	19 42 00 c0 	ld.w %d2,[%a4]768
800049a6:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
800049aa:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
800049ac:	1b 04 06 40 	addi %d4,%d4,96
800049b0:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
800049b4:	4c f0       	ld.w %d15,[%a15]0
800049b6:	37 0f 64 f8 	extr.u %d15,%d15,16,4
800049ba:	1b 0f 0a f0 	addi %d15,%d15,160
800049be:	90 55       	addsc.a %a5,%a5,%d15,2
800049c0:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
800049c2:	00 90       	ret 

800049c4 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
800049c4:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
800049c8:	ab 62 a0 22 	seln %d2,%d2,%d2,6
800049cc:	00 90       	ret 

800049ce <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
800049ce:	bf 45 0a 80 	jlt.u %d5,4,800049e2 <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
800049d2:	9a c5       	add %d15,%d5,-4
800049d4:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
800049d8:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
800049dc:	da 08       	mov %d15,8
800049de:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
800049e2:	13 44 20 45 	madd %d4,%d5,%d4,4
800049e6:	91 00 00 f8 	movh.a %a15,32768
800049ea:	d9 ff 20 90 	lea %a15,[%a15]608 <80000260 <IfxVadc_cfg_srcAddresses>>
800049ee:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
800049f2:	c8 02       	ld.a %a2,[%a15]0
800049f4:	00 90       	ret 

800049f6 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800049f6:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
800049fa:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
800049fc:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a00:	3b f0 01 40 	mov %d4,31
80004a04:	6d ff b4 fe 	call 8000476c <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004a08:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a0c:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004a0e:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a12:	3b f0 01 40 	mov %d4,31
80004a16:	1d ff 8f fe 	j 80004734 <IfxVadc_disableAccess>

80004a1a <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004a1a:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
80004a1e:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80004a20:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a24:	3b f0 01 40 	mov %d4,31
80004a28:	6d ff a2 fe 	call 8000476c <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004a2c:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a30:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004a32:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a36:	3b f0 01 40 	mov %d4,31
80004a3a:	1d ff 7d fe 	j 80004734 <IfxVadc_disableAccess>

80004a3e <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
80004a3e:	02 4f       	mov %d15,%d4
80004a40:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004a42:	6d 00 06 0c 	call 8000624e <IfxScuCcu_getSpbFrequency>
80004a46:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
80004a4a:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004a4e:	82 3f       	mov %d15,3
80004a50:	c2 f4       	add %d4,-1
80004a52:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80004a56:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a5a:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80004a5c:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a60:	6d ff cb ff 	call 800049f6 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80004a64:	02 82       	mov %d2,%d8
80004a66:	00 90       	ret 

80004a68 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
80004a68:	02 4f       	mov %d15,%d4
80004a6a:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004a6c:	6d 00 f1 0b 	call 8000624e <IfxScuCcu_getSpbFrequency>
80004a70:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
80004a74:	8f 22 00 40 	sh %d4,%d2,2
80004a78:	4b f4 11 42 	div.u %e4,%d4,%d15
80004a7c:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80004a80:	c2 24       	add %d4,2
80004a82:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
80004a84:	c2 f4       	add %d4,-1
80004a86:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
80004a8a:	1b 14 00 30 	addi %d3,%d4,1
80004a8e:	4b 32 11 62 	div.u %e6,%d2,%d3
80004a92:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
80004a94:	7b 10 13 60 	movh %d6,305
80004a98:	1b 16 d0 62 	addi %d6,%d6,11521
80004a9c:	3f 6f 08 80 	jlt.u %d15,%d6,80004aac <IfxVadc_initializeFAdcI+0x44>
80004aa0:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80004aa4:	9a 14       	add %d15,%d4,1
80004aa6:	4b f2 11 22 	div.u %e2,%d2,%d15
80004aaa:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80004aac:	1b 0f ee 25 	addi %d2,%d15,24288
80004ab0:	7b a0 12 30 	movh %d3,298
80004ab4:	9b 82 ff 2f 	addih %d2,%d2,65528
80004ab8:	1b 13 be 38 	addi %d3,%d3,-29727
80004abc:	7f 32 06 80 	jge.u %d2,%d3,80004ac8 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004ac0:	40 f4       	mov.aa %a4,%a15
80004ac2:	6d ff ac ff 	call 80004a1a <IfxVadc_initialiseAdcConverterClock>
80004ac6:	3c 02       	j 80004aca <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004ac8:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004aca:	02 f2       	mov %d2,%d15
80004acc:	00 90       	ret 

80004ace <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
80004ace:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004ad0:	ff 84 33 80 	jge.u %d4,8,80004b36 <IfxVadc_isPostCalibration+0x68>
80004ad4:	91 00 00 f8 	movh.a %a15,32768
80004ad8:	d9 ff a8 b4 	lea %a15,[%a15]19176 <80004ae8 <IfxVadc_isPostCalibration+0x1a>>
80004adc:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004ae0:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004ae4:	dc 0f       	ji %a15
80004ae6:	00 00       	nop 
80004ae8:	1d 00 10 00 	j 80004b08 <IfxVadc_isPostCalibration+0x3a>
80004aec:	1d 00 11 00 	j 80004b0e <IfxVadc_isPostCalibration+0x40>
80004af0:	1d 00 12 00 	j 80004b14 <IfxVadc_isPostCalibration+0x46>
80004af4:	1d 00 13 00 	j 80004b1a <IfxVadc_isPostCalibration+0x4c>
80004af8:	1d 00 14 00 	j 80004b20 <IfxVadc_isPostCalibration+0x52>
80004afc:	1d 00 15 00 	j 80004b26 <IfxVadc_isPostCalibration+0x58>
80004b00:	1d 00 16 00 	j 80004b2c <IfxVadc_isPostCalibration+0x5e>
80004b04:	1d 00 17 00 	j 80004b32 <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004b08:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004b0c:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004b0e:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004b12:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004b14:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004b18:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004b1a:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004b1e:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004b20:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004b24:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004b26:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004b2a:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004b2c:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004b30:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004b32:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
80004b36:	00 90       	ret 

80004b38 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
80004b38:	02 40       	mov %d0,%d4
80004b3a:	02 68       	mov %d8,%d6
80004b3c:	02 7a       	mov %d10,%d7
80004b3e:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
80004b40:	ff 25 08 80 	jge.u %d5,2,80004b50 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004b44:	8f 80 00 f0 	sh %d15,%d0,8
80004b48:	42 f5       	add %d5,%d15
80004b4a:	1b 85 12 50 	addi %d5,%d5,296
80004b4e:	3c 03       	j 80004b54 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004b50:	1b 65 02 50 	addi %d5,%d5,38
80004b54:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004b58:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b5a:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004b5c:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
80004b5e:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b62:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
80004b66:	f6 24       	jnz %d2,80004b6e <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004b68:	1b 1f ff ff 	addi %d15,%d15,-15
80004b6c:	06 4f       	sh %d15,4
80004b6e:	ff 63 35 80 	jge.u %d3,6,80004bd8 <IfxVadc_getChannelConversionTime+0xa0>
80004b72:	91 00 00 f8 	movh.a %a15,32768
80004b76:	d9 ff 18 90 	lea %a15,[%a15]600 <80000258 <CSWTCH.25>>
80004b7a:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004b7e:	82 02       	mov %d2,0
80004b80:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004b82:	df 04 2f 80 	jne %d4,0,80004be0 <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004b86:	df 53 0d 00 	jeq %d3,5,80004ba0 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004b8a:	02 04       	mov %d4,%d0
80004b8c:	6d ff a1 ff 	call 80004ace <IfxVadc_isPostCalibration>
80004b90:	92 24       	add %d4,%d15,2
80004b92:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004b96:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004b98:	42 24       	add %d4,%d2
80004b9a:	4b 04 41 41 	itof %d4,%d4
80004b9e:	3c 04       	j 80004ba6 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004ba0:	c2 4f       	add %d15,4
80004ba2:	4b 0f 41 41 	itof %d4,%d15
80004ba6:	4b 84 51 40 	div.f %d4,%d4,%d8
80004baa:	6d 00 e7 2d 	call 8000a778 <__extendsfdf2>
80004bae:	02 a4       	mov %d4,%d10
80004bb0:	0b 23 10 88 	mov %e8,%d3,%d2
80004bb4:	6d 00 e2 2d 	call 8000a778 <__extendsfdf2>
80004bb8:	b7 00 21 4f 	imask %e4,0,30,1
80004bbc:	0b 23 10 68 	mov %e6,%d3,%d2
80004bc0:	6d 00 d1 2f 	call 8000ab62 <__divdf3>
80004bc4:	0b 89 10 48 	mov %e4,%d9,%d8
80004bc8:	0b 23 10 68 	mov %e6,%d3,%d2
80004bcc:	6d 00 bd 2e 	call 8000a946 <__adddf3>
80004bd0:	0b 23 10 48 	mov %e4,%d3,%d2
80004bd4:	1d 00 86 30 	j 8000ace0 <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004bd8:	82 09       	mov %d9,0
80004bda:	df 04 d8 7f 	jeq %d4,0,80004b8a <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004bde:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004be0:	00 90       	ret 

80004be2 <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004be2:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004be4:	6d 00 f9 13 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004be8:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004bea:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004bec:	6d 00 f5 12 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bf0:	3b f0 01 40 	mov %d4,31
80004bf4:	40 f4       	mov.aa %a4,%a15
80004bf6:	6d ff bb fd 	call 8000476c <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004bfa:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004bfc:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004bfe:	8f 12 40 21 	or %d2,%d2,1
80004c02:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004c04:	48 d2       	ld.w %d2,[%a15]52
80004c06:	8f 12 40 21 	or %d2,%d2,1
80004c0a:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004c0c:	6d 00 1a 14 	call 80007440 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004c10:	48 d2       	ld.w %d2,[%a15]52
80004c12:	6f 12 ff 7f 	jz.t %d2,1,80004c10 <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004c16:	02 f4       	mov %d4,%d15
80004c18:	6d 00 df 12 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004c1c:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c1e:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004c22:	8f 12 40 21 	or %d2,%d2,1
80004c26:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c28:	40 f4       	mov.aa %a4,%a15
80004c2a:	6d ff 85 fd 	call 80004734 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004c2e:	02 f4       	mov %d4,%d15
80004c30:	1d 00 08 14 	j 80007440 <IfxScuWdt_setCpuEndinit>

80004c34 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004c34:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80004c38:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004c3a:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c3e:	3b f0 01 40 	mov %d4,31
80004c42:	6d ff 95 fd 	call 8000476c <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
80004c46:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c4a:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004c4c:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c50:	3b f0 01 40 	mov %d4,31
80004c54:	1d ff 70 fd 	j 80004734 <IfxVadc_disableAccess>

80004c58 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80004c58:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004c5c:	df 04 23 00 	jeq %d4,0,80004ca2 <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004c60:	19 42 04 00 	ld.w %d2,[%a4]4
80004c64:	0f f4 00 40 	sh %d4,%d4,%d15
80004c68:	a6 24       	or %d4,%d2
80004c6a:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004c6e:	19 42 04 00 	ld.w %d2,[%a4]4
80004c72:	06 27       	sh %d7,2
80004c74:	82 3f       	mov %d15,3
80004c76:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004c7a:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004c7e:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004c80:	4c 41       	ld.w %d15,[%a4]4
80004c82:	0f 75 00 50 	sh %d5,%d5,%d7
80004c86:	a6 f5       	or %d5,%d15
80004c88:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c8c:	4c 41       	ld.w %d15,[%a4]4
80004c8e:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004c90:	76 64       	jz %d6,80004c98 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c92:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004c96:	3c 03       	j 80004c9c <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004c98:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004c9c:	59 47 04 00 	st.w [%a4]4,%d7
80004ca0:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004ca2:	19 44 04 00 	ld.w %d4,[%a4]4
80004ca6:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004caa:	6c 41       	st.w [%a4]4,%d15
80004cac:	00 90       	ret 

80004cae <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004cae:	19 4f 28 20 	ld.w %d15,[%a4]168
80004cb2:	26 54       	and %d4,%d5
80004cb4:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004cb8:	0f 4f a0 50 	or %d5,%d15,%d4
80004cbc:	59 45 28 20 	st.w [%a4]168,%d5
80004cc0:	00 90       	ret 

80004cc2 <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004cc2:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004cc6:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004cc8:	6d ff 52 fd 	call 8000476c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004ccc:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004cd0:	40 f4       	mov.aa %a4,%a15
80004cd2:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004cd6:	3b f0 01 40 	mov %d4,31
80004cda:	59 ff 00 20 	st.w [%a15]128,%d15
80004cde:	6d ff 2b fd 	call 80004734 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004ce2:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004ce4:	82 0f       	mov %d15,0
80004ce6:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004ce8:	8f a2 00 30 	sh %d3,%d2,10
80004cec:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004cf0:	c2 12       	add %d2,1
80004cf2:	19 33 40 20 	ld.w %d3,[%a3]1152
80004cf6:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004cfa:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004cfe:	fc 25       	loop %a2,80004ce8 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004d00:	df 1f f1 7f 	jeq %d15,1,80004ce2 <IfxVadc_startupCalibration+0x20>
}
80004d04:	00 90       	ret 
	...

80004d08 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004d08:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d0a:	6d 00 66 13 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004d0e:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d10:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004d12:	6d 00 62 12 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004d16:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004d18:	02 f4       	mov %d4,%d15
80004d1a:	8f 12 40 21 	or %d2,%d2,1
80004d1e:	68 02       	st.w [%a15]0,%d2
80004d20:	1d 00 90 13 	j 80007440 <IfxScuWdt_setCpuEndinit>

80004d24 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004d24:	7b 10 00 f0 	movh %d15,1
80004d28:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004d2c:	19 4f 00 10 	ld.w %d15,[%a4]64
80004d30:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004d34:	a6 f4       	or %d4,%d15
80004d36:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004d3a:	7b 00 40 f0 	movh %d15,1024
80004d3e:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004d42:	19 4f 00 10 	ld.w %d15,[%a4]64
80004d46:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004d4a:	a6 f5       	or %d5,%d15
80004d4c:	59 45 00 10 	st.w [%a4]64,%d5
80004d50:	00 90       	ret 

80004d52 <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004d52:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d54:	6d 00 41 13 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d58:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d5a:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d5c:	6d 00 3d 12 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004d60:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004d62:	02 f4       	mov %d4,%d15
80004d64:	8f 12 c0 21 	andn %d2,%d2,1
80004d68:	68 02       	st.w [%a15]0,%d2
80004d6a:	1d 00 6b 13 	j 80007440 <IfxScuWdt_setCpuEndinit>

80004d6e <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004d6e:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004d70:	ff 44 09 00 	jge %d4,4,80004d82 <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004d74:	91 00 00 f8 	movh.a %a15,32768
80004d78:	d9 ff b0 60 	lea %a15,[%a15]2480 <800009b0 <IfxAsclin_cfg_indexMap>>
80004d7c:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004d80:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004d82:	00 90       	ret 

80004d84 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004d84:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004d88:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004d8a:	c2 ff       	add %d15,-1
80004d8c:	8b 0f a1 22 	ge.u %d2,%d15,16
80004d90:	df 02 32 80 	jne %d2,0,80004df4 <IfxAsclin_getFaFrequency+0x70>
80004d94:	91 00 00 f8 	movh.a %a15,32768
80004d98:	d9 ff e0 64 	lea %a15,[%a15]19872 <80004da0 <IfxAsclin_getFaFrequency+0x1c>>
80004d9c:	90 ff       	addsc.a %a15,%a15,%d15,2
80004d9e:	dc 0f       	ji %a15
80004da0:	1d 00 20 00 	j 80004de0 <IfxAsclin_getFaFrequency+0x5c>
80004da4:	1d 00 20 00 	j 80004de4 <IfxAsclin_getFaFrequency+0x60>
80004da8:	1d 00 26 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dac:	1d 00 1e 00 	j 80004de8 <IfxAsclin_getFaFrequency+0x64>
80004db0:	1d 00 22 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004db4:	1d 00 20 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004db8:	1d 00 1e 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dbc:	1d 00 18 00 	j 80004dec <IfxAsclin_getFaFrequency+0x68>
80004dc0:	1d 00 1a 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dc4:	1d 00 18 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dc8:	1d 00 16 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dcc:	1d 00 14 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dd0:	1d 00 12 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dd4:	1d 00 10 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004dd8:	1d 00 0e 00 	j 80004df4 <IfxAsclin_getFaFrequency+0x70>
80004ddc:	1d 00 0a 00 	j 80004df0 <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004de0:	1d 00 37 0a 	j 8000624e <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004de4:	1d 00 a6 08 	j 80005f30 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004de8:	1d 00 c3 08 	j 80005f6e <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004dec:	1d 00 20 0a 	j 8000622c <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004df0:	1d 00 0e 0a 	j 8000620c <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004df4:	82 02       	mov %d2,0
80004df6:	00 90       	ret 

80004df8 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004df8:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004dfc:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004dfe:	d9 33 b0 60 	lea %a3,[%a3]2480 <800009b0 <IfxAsclin_cfg_indexMap>>
80004e02:	a0 3f       	mov.a %a15,3
80004e04:	d0 32       	addsc.a %a2,%a3,%d15,3
80004e06:	d4 25       	ld.a %a5,[%a2]
80004e08:	7d 45 05 80 	jne.a %a5,%a4,80004e12 <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004e0c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004e10:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004e12:	c2 1f       	add %d15,1
80004e14:	fc f8       	loop %a15,80004e04 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004e16:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004e18:	00 90       	ret 

80004e1a <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004e1a:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004e1c:	6d ff b4 ff 	call 80004d84 <IfxAsclin_getFaFrequency>
80004e20:	4c f5       	ld.w %d15,[%a15]20
80004e22:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004e26:	c2 1f       	add %d15,1
80004e28:	4b 0f 41 f1 	itof %d15,%d15
}
80004e2c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e30:	00 90       	ret 

80004e32 <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004e32:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004e34:	6d ff f3 ff 	call 80004e1a <IfxAsclin_getPdFrequency>
80004e38:	48 83       	ld.w %d3,[%a15]32
80004e3a:	4c f8       	ld.w %d15,[%a15]32
80004e3c:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004e40:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004e44:	4b 03 41 31 	itof %d3,%d3
80004e48:	4b 0f 41 f1 	itof %d15,%d15
80004e4c:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004e50:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e54:	00 90       	ret 

80004e56 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004e56:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004e58:	6d ff ed ff 	call 80004e32 <IfxAsclin_getOvsFrequency>
80004e5c:	4c f5       	ld.w %d15,[%a15]20
80004e5e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004e62:	4b 0f 41 f1 	itof %d15,%d15
}
80004e66:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e6a:	00 90       	ret 

80004e6c <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004e6c:	6d ff c6 ff 	call 80004df8 <IfxAsclin_getIndex>
80004e70:	53 c2 20 f0 	mul %d15,%d2,12
80004e74:	60 ff       	mov.a %a15,%d15
80004e76:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004e7a:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e7e:	00 90       	ret 

80004e80 <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004e80:	6d ff bc ff 	call 80004df8 <IfxAsclin_getIndex>
80004e84:	53 c2 20 f0 	mul %d15,%d2,12
80004e88:	60 ff       	mov.a %a15,%d15
80004e8a:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004e8e:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e92:	00 90       	ret 

80004e94 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004e94:	6d ff b2 ff 	call 80004df8 <IfxAsclin_getIndex>
80004e98:	53 c2 20 f0 	mul %d15,%d2,12
80004e9c:	60 ff       	mov.a %a15,%d15
80004e9e:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004ea2:	11 42 00 2f 	addih.a %a2,%a2,61444
80004ea6:	00 90       	ret 

80004ea8 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004ea8:	9f 04 04 80 	jned %d4,0,80004eb0 <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004eac:	82 02       	mov %d2,0
80004eae:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004eb0:	19 4f 08 10 	ld.w %d15,[%a4]72
80004eb4:	ac 50       	st.h [%a5]0,%d15
80004eb6:	b0 25       	add.a %a5,2
80004eb8:	3c f8       	j 80004ea8 <IfxAsclin_read16>

80004eba <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004eba:	9f 04 04 80 	jned %d4,0,80004ec2 <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004ebe:	82 02       	mov %d2,0
80004ec0:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004ec2:	19 4f 08 10 	ld.w %d15,[%a4]72
80004ec6:	6c 50       	st.w [%a5]0,%d15
80004ec8:	b0 45       	add.a %a5,4
80004eca:	3c f8       	j 80004eba <IfxAsclin_read32>

80004ecc <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004ecc:	9f 04 04 80 	jned %d4,0,80004ed4 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004ed0:	82 02       	mov %d2,0
80004ed2:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004ed4:	19 4f 08 10 	ld.w %d15,[%a4]72
80004ed8:	2c 50       	st.b [%a5]0,%d15
80004eda:	b0 15       	add.a %a5,1
80004edc:	3c f8       	j 80004ecc <IfxAsclin_read8>

80004ede <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004ede:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004ee0:	6d 00 7b 12 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004ee4:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004ee6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004ee8:	6d 00 77 11 	call 800071d6 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004eec:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004ef0:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004ef2:	8f 12 40 21 	or %d2,%d2,1
80004ef6:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004efa:	19 f2 30 30 	ld.w %d2,[%a15]240
80004efe:	8f 12 40 21 	or %d2,%d2,1
80004f02:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004f06:	6d 00 9d 12 	call 80007440 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004f0a:	19 f2 34 30 	ld.w %d2,[%a15]244
80004f0e:	6f 12 fe 7f 	jz.t %d2,1,80004f0a <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004f12:	02 f4       	mov %d4,%d15
80004f14:	6d 00 61 11 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004f18:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004f1c:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004f1e:	8f 12 40 21 	or %d2,%d2,1
80004f22:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004f26:	1d 00 8d 12 	j 80007440 <IfxScuWdt_setCpuEndinit>

80004f2a <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004f2a:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004f2e:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004f32:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004f36:	f6 46       	jnz %d4,80004f42 <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004f38:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004f3c:	bf 0f fe 7f 	jlt %d15,0,80004f38 <IfxAsclin_setClockSource+0xe>
80004f40:	00 90       	ret 
80004f42:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004f46:	ff 0f fe 7f 	jge %d15,0,80004f42 <IfxAsclin_setClockSource+0x18>
80004f4a:	00 90       	ret 

80004f4c <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004f4c:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004f50:	19 42 0c 10 	ld.w %d2,[%a4]76
80004f54:	16 1f       	and %d15,31
80004f56:	8f f2 c1 21 	andn %d2,%d2,31
80004f5a:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004f5e:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004f62:	bf 02 fe 7f 	jlt %d2,0,80004f5e <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004f66:	19 42 14 00 	ld.w %d2,[%a4]20
80004f6a:	c2 f4       	add %d4,-1
80004f6c:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004f70:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004f74:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004f78:	02 f4       	mov %d4,%d15
80004f7a:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004f7e:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004f82:	19 42 20 00 	ld.w %d2,[%a4]32
80004f86:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004f8a:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004f8e:	19 42 14 00 	ld.w %d2,[%a4]20
80004f92:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004f96:	59 47 14 00 	st.w [%a4]20,%d7
80004f9a:	1d ff c8 ff 	j 80004f2a <IfxAsclin_setClockSource>

80004f9e <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004f9e:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004fa2:	20 08       	sub.a %sp,8
80004fa4:	8f f2 01 21 	and %d2,%d2,31
80004fa8:	02 5f       	mov %d15,%d5
80004faa:	40 4f       	mov.aa %a15,%a4
80004fac:	02 48       	mov %d8,%d4
80004fae:	02 6a       	mov %d10,%d6
80004fb0:	60 7d       	mov.a %a13,%d7
80004fb2:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004fb4:	6d ff 33 ff 	call 80004e1a <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004fb8:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004fba:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004fbc:	82 4f       	mov %d15,4
80004fbe:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004fc2:	8f ff 0f 21 	and %d2,%d15,255
80004fc6:	59 a2 04 00 	st.w [%sp]4,%d2
80004fca:	82 16       	mov %d6,1
80004fcc:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004fd0:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004fd2:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004fd6:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004fda:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004fde:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004fe0:	02 f4       	mov %d4,%d15
80004fe2:	6d 00 cb 2b 	call 8000a778 <__extendsfdf2>
80004fe6:	7b 00 f5 73 	movh %d7,16208
80004fea:	0b 23 10 48 	mov %e4,%d3,%d2
80004fee:	7b 20 2f 6d 	movh %d6,54002
80004ff2:	1b d7 24 76 	addi %d7,%d7,25165
80004ff6:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004ffa:	6d 00 e2 2c 	call 8000a9be <__muldf3>
80004ffe:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80005002:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80005004:	6d 00 6e 2e 	call 8000ace0 <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80005008:	4b f9 51 50 	div.f %d5,%d9,%d15
8000500c:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80005010:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80005012:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80005016:	4b 05 61 31 	utof %d3,%d5
8000501a:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
8000501e:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80005022:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80005026:	37 00 61 00 	extr.u %d0,%d0,0,1
8000502a:	9b 03 00 48 	addih %d4,%d3,32768
8000502e:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80005032:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005036:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000503a:	df 00 45 80 	jne %d0,0,800050c4 <IfxAsclin_setBitTiming+0x126>
8000503e:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80005042:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80005044:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80005046:	82 28       	mov %d8,2
80005048:	3b 00 00 71 	mov %d7,4096
8000504c:	7f 76 3b 80 	jge.u %d6,%d7,800050c2 <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80005050:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80005052:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80005054:	df 28 09 00 	jeq %d8,2,80005066 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80005058:	73 8e 0a a0 	mul %d10,%d14,%d8
8000505c:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80005060:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80005062:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80005064:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80005066:	80 34       	mov.d %d4,%a3
80005068:	3f b4 25 80 	jlt.u %d4,%d11,800050b2 <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
8000506c:	4b 08 61 01 	utof %d0,%d8
80005070:	0b 6b 00 40 	add %d4,%d11,%d6
80005074:	4b 04 61 d1 	utof %d13,%d4
80005078:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
8000507c:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
8000507e:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80005082:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80005086:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
8000508a:	37 0d 61 d0 	extr.u %d13,%d13,0,1
8000508e:	9b 00 00 a8 	addih %d10,%d0,32768
80005092:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80005096:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
8000509a:	37 0d 61 d1 	extr.u %d13,%d13,2,1
8000509e:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
800050a2:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
800050a6:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
800050aa:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
800050ae:	c2 1b       	add %d11,1
800050b0:	3c db       	j 80005066 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
800050b2:	4b 23 01 00 	cmp.f %d0,%d3,%d2
800050b6:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
800050ba:	f6 04       	jnz %d0,800050c2 <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
800050bc:	c2 18       	add %d8,1
800050be:	42 56       	add %d6,%d5
800050c0:	3c c6       	j 8000504c <IfxAsclin_setBitTiming+0xae>
800050c2:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
800050c4:	19 f3 0c 10 	ld.w %d3,[%a15]76
800050c8:	8f f3 c1 31 	andn %d3,%d3,31
800050cc:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
800050d0:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
800050d4:	bf 0f fe 7f 	jlt %d15,0,800050d0 <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
800050d8:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050da:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
800050de:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050e2:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
800050e4:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
800050e6:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050e8:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
800050ea:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
800050ee:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
800050f0:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050f2:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
800050f4:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050f6:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
800050fa:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050fc:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050fe:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005100:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80005104:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005108:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000510a:	ab 0f 80 72 	sel %d7,%d2,%d15,0
8000510e:	4c f5       	ld.w %d15,[%a15]20
80005110:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80005114:	a6 7f       	or %d15,%d7
80005116:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80005118:	6d ff 09 ff 	call 80004f2a <IfxAsclin_setClockSource>

    return TRUE;
}
8000511c:	82 12       	mov %d2,1
8000511e:	00 90       	ret 

80005120 <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80005120:	9f 04 04 80 	jned %d4,0,80005128 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005124:	82 02       	mov %d2,0
80005126:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80005128:	b9 5f 00 00 	ld.hu %d15,[%a5]0
8000512c:	b0 25       	add.a %a5,2
8000512e:	59 4f 04 10 	st.w [%a4]68,%d15
80005132:	3c f7       	j 80005120 <IfxAsclin_write16>

80005134 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80005134:	9f 04 04 80 	jned %d4,0,8000513c <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005138:	82 02       	mov %d2,0
8000513a:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
8000513c:	4c 50       	ld.w %d15,[%a5]0
8000513e:	b0 45       	add.a %a5,4
80005140:	59 4f 04 10 	st.w [%a4]68,%d15
80005144:	3c f8       	j 80005134 <IfxAsclin_write32>

80005146 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80005146:	9f 04 04 80 	jned %d4,0,8000514e <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
8000514a:	82 02       	mov %d2,0
8000514c:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
8000514e:	0c 50       	ld.bu %d15,[%a5]0
80005150:	b0 15       	add.a %a5,1
80005152:	59 4f 04 10 	st.w [%a4]68,%d15
80005156:	3c f8       	j 80005146 <IfxAsclin_write8>

80005158 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80005158:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
8000515a:	88 22       	ld.h %d2,[%a15]4
8000515c:	00 90       	ret 

8000515e <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
8000515e:	99 42 08 00 	ld.a %a2,[%a4]8
}
80005162:	d9 22 1d 00 	lea %a2,[%a2]29
80005166:	00 90       	ret 

80005168 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
80005168:	19 42 10 00 	ld.w %d2,[%a4]16
}
8000516c:	00 90       	ret 

8000516e <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
8000516e:	09 42 54 09 	ld.d %e2,[%a4]20
}
80005172:	00 90       	ret 

80005174 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
80005174:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
80005176:	88 c2       	ld.h %d2,[%a15]24
80005178:	8c f2       	ld.h %d15,[%a15]4
8000517a:	a2 f2       	sub %d2,%d15
}
8000517c:	37 02 50 20 	extr %d2,%d2,0,16
80005180:	00 90       	ret 

80005182 <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
80005182:	99 42 04 00 	ld.a %a2,[%a4]4
}
80005186:	d9 22 1d 00 	lea %a2,[%a2]29
8000518a:	00 90       	ret 

8000518c <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
8000518c:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
8000518e:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
80005190:	ef 0f 0a 00 	jz.t %d15,16,800051a4 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
80005194:	4c ff       	ld.w %d15,[%a15]60
80005196:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000519a:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
8000519c:	0c 4e       	ld.bu %d15,[%a4]14
8000519e:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
800051a2:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
800051a4:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
800051a6:	ef 2f 0a 00 	jz.t %d15,18,800051ba <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
800051aa:	4c ff       	ld.w %d15,[%a15]60
800051ac:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800051b0:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
800051b2:	0c 4e       	ld.bu %d15,[%a4]14
800051b4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
800051b8:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
800051ba:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
800051bc:	ef af 0a 00 	jz.t %d15,26,800051d0 <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
800051c0:	4c ff       	ld.w %d15,[%a15]60
800051c2:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
800051c6:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
800051c8:	0c 4e       	ld.bu %d15,[%a4]14
800051ca:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
800051ce:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
800051d0:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
800051d2:	ef bf 0a 00 	jz.t %d15,27,800051e6 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
800051d6:	4c ff       	ld.w %d15,[%a15]60
800051d8:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
800051dc:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
800051de:	0c 4e       	ld.bu %d15,[%a4]14
800051e0:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
800051e4:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
800051e6:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
800051e8:	ef ef 0a 00 	jz.t %d15,30,800051fc <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
800051ec:	4c ff       	ld.w %d15,[%a15]60
800051ee:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800051f2:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
800051f4:	0c 4e       	ld.bu %d15,[%a4]14
800051f6:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
800051fa:	2c 4e       	st.b [%a4]14,%d15
800051fc:	00 90       	ret 

800051fe <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
800051fe:	82 0f       	mov %d15,0
80005200:	6c 44       	st.w [%a4]16,%d15
80005202:	00 90       	ret 

80005204 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
80005204:	99 44 08 00 	ld.a %a4,[%a4]8
80005208:	1d 00 df 18 	j 800083c6 <Ifx_Fifo_canReadCount>

8000520c <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000520c:	82 f2       	mov %d2,-1
8000520e:	06 f2       	sh %d2,-1
80005210:	ba f4       	eq %d15,%d4,-1
80005212:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
80005216:	40 4f       	mov.aa %a15,%a4
80005218:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
8000521a:	82 f9       	mov %d9,-1
8000521c:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000521e:	ee 16       	jnz %d15,8000524a <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005220:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005224:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005228:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000522c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000522e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005232:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005236:	02 39       	mov %d9,%d3
80005238:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000523c:	76 23       	jz %d2,80005242 <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000523e:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80005242:	0b 69 40 90 	addx %d9,%d9,%d6
80005246:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
8000524a:	c8 14       	ld.a %a4,[%a15]4
8000524c:	02 57       	mov %d7,%d5
8000524e:	c9 44 18 00 	ld.h %d4,[%a4]24
80005252:	6d 00 fd 19 	call 8000864c <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80005256:	82 f4       	mov %d4,-1
80005258:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
8000525a:	f6 23       	jnz %d2,80005260 <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
8000525c:	82 02       	mov %d2,0
8000525e:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
80005260:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
80005262:	4c 23       	ld.w %d15,[%a2]12
80005264:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
80005268:	6e 1e       	jz %d15,800052a4 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000526a:	ba f9       	eq %d15,%d9,-1
8000526c:	0b 84 00 f2 	and.eq %d15,%d4,%d8
80005270:	ee f9       	jnz %d15,80005262 <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005272:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005276:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000527a:	0d 00 40 03 	disable 
8000527e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005280:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005284:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005288:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000528c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005290:	76 23       	jz %d2,80005296 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
80005292:	0d 00 00 03 	enable 
80005296:	0b 8f 00 21 	eq %d2,%d15,%d8
8000529a:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
8000529e:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800052a2:	3c dc       	j 8000525a <IfxAsclin_Asc_flushTx+0x4e>
800052a4:	82 12       	mov %d2,1
    }

    return result;
}
800052a6:	00 90       	ret 

800052a8 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
800052a8:	99 44 04 00 	ld.a %a4,[%a4]4
800052ac:	1d 00 d0 19 	j 8000864c <Ifx_Fifo_canWriteCount>

800052b0 <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
800052b0:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
800052b2:	4c f4       	ld.w %d15,[%a15]16
800052b4:	96 01       	or %d15,1
800052b6:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
800052b8:	99 44 08 00 	ld.a %a4,[%a4]8
800052bc:	1d 00 ad 19 	j 80008616 <Ifx_Fifo_clear>

800052c0 <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
800052c0:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
800052c2:	99 44 04 00 	ld.a %a4,[%a4]4
800052c6:	6d 00 a8 19 	call 80008616 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
800052ca:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
800052cc:	4c f3       	ld.w %d15,[%a15]12
800052ce:	96 01       	or %d15,1
800052d0:	68 3f       	st.w [%a15]12,%d15
800052d2:	00 90       	ret 

800052d4 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052d4:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800052d8:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052dc:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800052de:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052e0:	6d 00 e0 18 	call 800084a0 <Ifx_Fifo_read>

    *count -= left;
800052e4:	8c f0       	ld.h %d15,[%a15]0
800052e6:	a2 2f       	sub %d15,%d2
800052e8:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
800052ea:	8b 02 00 22 	eq %d2,%d2,0
800052ee:	00 90       	ret 

800052f0 <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
800052f0:	20 18       	sub.a %sp,24
800052f2:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800052f4:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800052f8:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800052fc:	0d 00 40 03 	disable 
80005300:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005302:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005306:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000530a:	02 52       	mov %d2,%d5
8000530c:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005310:	76 43       	jz %d4,80005316 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
80005312:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005316:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
8000531a:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
8000531c:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
8000531e:	c9 44 04 00 	ld.h %d4,[%a4]4
80005322:	c2 1f       	add %d15,1
80005324:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005326:	df 04 32 00 	jeq %d4,0,8000538a <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
8000532a:	0c ff       	ld.bu %d15,[%a15]15
8000532c:	6e 03       	jz %d15,80005332 <IfxAsclin_Asc_isrTransmit+0x42>
8000532e:	9e 1d       	jeq %d15,1,80005368 <IfxAsclin_Asc_isrTransmit+0x78>
80005330:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005332:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
80005334:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005336:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
8000533a:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
8000533c:	d2 06       	mov %e6,0
8000533e:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005342:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005346:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
80005348:	0c a7       	ld.bu %d15,[%sp]7
8000534a:	8b 0f 01 f1 	rsub %d15,%d15,16
8000534e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80005352:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
80005356:	37 0f 50 40 	extr %d4,%d15,0,16
8000535a:	6d 00 a3 18 	call 800084a0 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
8000535e:	c8 04       	ld.a %a4,[%a15]0
80005360:	d9 a5 08 00 	lea %a5,[%sp]8
80005364:	02 f4       	mov %d4,%d15
80005366:	3c 10       	j 80005386 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005368:	d2 06       	mov %e6,0
8000536a:	d9 a5 08 00 	lea %a5,[%sp]8
8000536e:	3b c0 00 40 	mov %d4,12
80005372:	6d 00 97 18 	call 800084a0 <Ifx_Fifo_read>

            ascData = packedData.data;
80005376:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
8000537a:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
8000537c:	d9 a5 18 00 	lea %a5,[%sp]24
80005380:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005384:	82 14       	mov %d4,1
        }
        break;
80005386:	1d ff e0 fe 	j 80005146 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
8000538a:	28 c4       	st.b [%a15]12,%d4
8000538c:	00 90       	ret 

8000538e <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
8000538e:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
80005390:	20 20       	sub.a %sp,32
80005392:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005394:	6e 34       	jz %d15,800053fc <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005396:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005398:	df 1f 45 80 	jne %d15,1,80005422 <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
8000539c:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
8000539e:	4c 24       	ld.w %d15,[%a2]16
800053a0:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800053a4:	6e 2b       	jz %d15,800053fa <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800053a6:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800053aa:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800053ae:	0d 00 40 03 	disable 
800053b2:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800053b4:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800053b8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800053bc:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800053c0:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800053c4:	76 33       	jz %d3,800053ca <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
800053c6:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
800053ca:	c8 04       	ld.a %a4,[%a15]0
800053cc:	d9 a5 10 00 	lea %a5,[%sp]16
800053d0:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
800053d2:	78 02       	st.w [%sp]8,%d15
800053d4:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
800053d8:	6d ff 7a fd 	call 80004ecc <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053dc:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
800053de:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053e2:	d2 06       	mov %e6,0
800053e4:	d9 a5 04 00 	lea %a5,[%sp]4
800053e8:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
800053ec:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053ee:	6d 00 a7 19 	call 8000873c <Ifx_Fifo_write>
800053f2:	df 02 d5 7f 	jeq %d2,0,8000539c <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
800053f6:	28 d8       	st.b [%a15]13,%d8
800053f8:	3c d2       	j 8000539c <IfxAsclin_Asc_isrReceive+0xe>
800053fa:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
800053fc:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
800053fe:	d9 a5 10 00 	lea %a5,[%sp]16
80005402:	4c 44       	ld.w %d15,[%a4]16
80005404:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005408:	02 f4       	mov %d4,%d15
8000540a:	6d ff 61 fd 	call 80004ecc <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
8000540e:	c8 24       	ld.a %a4,[%a15]8
80005410:	d2 06       	mov %e6,0
80005412:	d9 a5 10 00 	lea %a5,[%sp]16
80005416:	02 f4       	mov %d4,%d15
80005418:	6d 00 92 19 	call 8000873c <Ifx_Fifo_write>
8000541c:	76 23       	jz %d2,80005422 <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
8000541e:	82 1f       	mov %d15,1
80005420:	28 df       	st.b [%a15]13,%d15
80005422:	00 90       	ret 

80005424 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005424:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005426:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005428:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
8000542a:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
8000542c:	82 f4       	mov %d4,-1
8000542e:	40 f4       	mov.aa %a4,%a15
80005430:	d9 a5 05 00 	lea %a5,[%sp]5
80005434:	d9 a6 06 00 	lea %a6,[%sp]6
80005438:	9b 04 00 58 	addih %d5,%d4,32768
8000543c:	6d ff 4c ff 	call 800052d4 <IfxAsclin_Asc_read>
80005440:	df 12 f6 ff 	jne %d2,1,8000542c <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
80005444:	39 a2 05 00 	ld.bu %d2,[%sp]5
80005448:	00 90       	ret 

8000544a <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
8000544a:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
8000544c:	6d 00 c5 0f 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
80005450:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
80005452:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
80005454:	6d 00 c1 0e 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80005458:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
8000545a:	02 f4       	mov %d4,%d15
8000545c:	8f 12 40 21 	or %d2,%d2,1
80005460:	68 02       	st.w [%a15]0,%d2
80005462:	1d 00 ef 0f 	j 80007440 <IfxScuWdt_setCpuEndinit>

80005466 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
80005466:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
80005468:	40 4e       	mov.aa %a14,%a4
8000546a:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
8000546c:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
8000546e:	40 f4       	mov.aa %a4,%a15
80005470:	6d ff 71 fc 	call 80004d52 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
80005474:	40 f4       	mov.aa %a4,%a15
80005476:	82 04       	mov %d4,0
80005478:	6d ff 59 fd 	call 80004f2a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
8000547c:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
8000547e:	40 f4       	mov.aa %a4,%a15
80005480:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
80005484:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80005486:	8c c4       	ld.h %d15,[%a12]8
80005488:	48 52       	ld.w %d2,[%a15]20
8000548a:	c2 ff       	add %d15,-1
8000548c:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
80005490:	68 5f       	st.w [%a15]20,%d15
80005492:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005496:	6d ff 4a fd 	call 80004f2a <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
8000549a:	40 f4       	mov.aa %a4,%a15
8000549c:	19 c4 04 00 	ld.w %d4,[%a12]4
800054a0:	39 c5 0a 00 	ld.bu %d5,[%a12]10
800054a4:	39 c6 0d 00 	ld.bu %d6,[%a12]13
800054a8:	39 c7 0c 00 	ld.bu %d7,[%a12]12
800054ac:	6d ff 79 fd 	call 80004f9e <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
800054b0:	40 f4       	mov.aa %a4,%a15
800054b2:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800054b4:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
800054b6:	6d ff 3a fd 	call 80004f2a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
800054ba:	39 c2 38 00 	ld.bu %d2,[%a12]56
800054be:	7b 00 00 f1 	movh %d15,4096
800054c2:	ab 0f 80 22 	sel %d2,%d2,%d15,0
800054c6:	4c f1       	ld.w %d15,[%a15]4
800054c8:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
800054cc:	a6 2f       	or %d15,%d2
800054ce:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
800054d0:	39 c2 14 00 	ld.bu %d2,[%a12]20
800054d4:	7b 00 00 f4 	movh %d15,16384
800054d8:	ab 0f 80 22 	sel %d2,%d2,%d15,0
800054dc:	4c f6       	ld.w %d15,[%a15]24
800054de:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
800054e2:	a6 2f       	or %d15,%d2
800054e4:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
800054e6:	48 62       	ld.w %d2,[%a15]24
800054e8:	39 cf 12 00 	ld.bu %d15,[%a12]18
800054ec:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
800054f0:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
800054f2:	48 62       	ld.w %d2,[%a15]24
800054f4:	0c cf       	ld.bu %d15,[%a12]15
800054f6:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
800054fa:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
800054fc:	48 62       	ld.w %d2,[%a15]24
800054fe:	39 cf 11 00 	ld.bu %d15,[%a12]17
80005502:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
80005506:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
80005508:	48 72       	ld.w %d2,[%a15]28
8000550a:	39 cf 13 00 	ld.bu %d15,[%a12]19
8000550e:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
80005512:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80005514:	48 32       	ld.w %d2,[%a15]12
80005516:	39 cf 16 00 	ld.bu %d15,[%a12]22
8000551a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000551e:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
80005520:	48 42       	ld.w %d2,[%a15]16
80005522:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005526:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000552a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
8000552c:	48 62       	ld.w %d2,[%a15]24
8000552e:	0c ce       	ld.bu %d15,[%a12]14
80005530:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005534:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005536:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000553a:	da 0f       	mov %d15,15
8000553c:	0b f2 90 21 	min.u %d2,%d2,%d15
80005540:	48 33       	ld.w %d3,[%a15]12
80005542:	37 23 04 24 	insert %d2,%d3,%d2,8,4
80005546:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005548:	39 c2 19 00 	ld.bu %d2,[%a12]25
8000554c:	0b f2 90 f1 	min.u %d15,%d2,%d15
80005550:	48 42       	ld.w %d2,[%a15]16
80005552:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
80005556:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
80005558:	39 cf 10 00 	ld.bu %d15,[%a12]16
8000555c:	48 62       	ld.w %d2,[%a15]24
8000555e:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005562:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
80005564:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
80005568:	bd 0d 81 00 	jz.a %a13,8000566a <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
8000556c:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
8000556e:	6e 27       	jz %d15,800055bc <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
80005570:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
80005572:	79 d5 04 00 	ld.b %d5,[%a13]4
80005576:	99 24 04 00 	ld.a %a4,[%a2]4
8000557a:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000557e:	bd 04 1f 00 	jz.a %a4,800055bc <IfxAsclin_Asc_initModule+0x156>
80005582:	39 24 08 00 	ld.bu %d4,[%a2]8
80005586:	8f f5 0f 51 	and %d5,%d5,255
8000558a:	6d 00 ba 03 	call 80005cfe <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
8000558e:	60 f3       	mov.a %a3,%d15
80005590:	02 85       	mov %d5,%d8
80005592:	99 34 04 00 	ld.a %a4,[%a3]4
80005596:	39 34 08 00 	ld.bu %d4,[%a3]8
8000559a:	6d 00 30 04 	call 80005dfa <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
8000559e:	60 f3       	mov.a %a3,%d15
800055a0:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
800055a2:	19 22 04 00 	ld.w %d2,[%a2]4
800055a6:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
800055aa:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
800055ae:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
800055b0:	0c 3c       	ld.bu %d15,[%a3]12
800055b2:	19 22 04 00 	ld.w %d2,[%a2]4
800055b6:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800055ba:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
800055bc:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
800055be:	6e 20       	jz %d15,800055fe <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
800055c0:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
800055c2:	79 d5 0c 00 	ld.b %d5,[%a13]12
800055c6:	99 24 04 00 	ld.a %a4,[%a2]4
800055ca:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055ce:	bd 04 18 00 	jz.a %a4,800055fe <IfxAsclin_Asc_initModule+0x198>
800055d2:	39 24 08 00 	ld.bu %d4,[%a2]8
800055d6:	8f f5 0f 51 	and %d5,%d5,255
800055da:	6d 00 92 03 	call 80005cfe <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
800055de:	60 f3       	mov.a %a3,%d15
800055e0:	02 85       	mov %d5,%d8
800055e2:	99 34 04 00 	ld.a %a4,[%a3]4
800055e6:	39 34 08 00 	ld.bu %d4,[%a3]8
800055ea:	6d 00 08 04 	call 80005dfa <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
800055ee:	60 f3       	mov.a %a3,%d15
800055f0:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
800055f2:	0c 3c       	ld.bu %d15,[%a3]12
800055f4:	19 22 04 00 	ld.w %d2,[%a2]4
800055f8:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
800055fc:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
800055fe:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
80005600:	6e 1a       	jz %d15,80005634 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80005602:	60 f2       	mov.a %a2,%d15
80005604:	39 d2 14 00 	ld.bu %d2,[%a13]20
80005608:	39 23 0c 00 	ld.bu %d3,[%a2]12
8000560c:	99 24 04 00 	ld.a %a4,[%a2]4
80005610:	0f 23 a0 50 	or %d5,%d3,%d2
80005614:	39 24 08 00 	ld.bu %d4,[%a2]8
80005618:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
8000561c:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005620:	6d 00 6f 03 	call 80005cfe <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
80005624:	60 f3       	mov.a %a3,%d15
80005626:	02 85       	mov %d5,%d8
80005628:	99 34 04 00 	ld.a %a4,[%a3]4
8000562c:	39 34 08 00 	ld.bu %d4,[%a3]8
80005630:	6d 00 e5 03 	call 80005dfa <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005634:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005636:	6e 1a       	jz %d15,8000566a <IfxAsclin_Asc_initModule+0x204>
80005638:	60 f2       	mov.a %a2,%d15
8000563a:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000563e:	39 23 0c 00 	ld.bu %d3,[%a2]12
80005642:	99 24 04 00 	ld.a %a4,[%a2]4
80005646:	0f 23 a0 50 	or %d5,%d3,%d2
8000564a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000564e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
80005652:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005656:	6d 00 54 03 	call 80005cfe <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
8000565a:	60 f3       	mov.a %a3,%d15
8000565c:	02 85       	mov %d5,%d8
8000565e:	99 34 04 00 	ld.a %a4,[%a3]4
80005662:	39 34 08 00 	ld.bu %d4,[%a3]8
80005666:	6d 00 ca 03 	call 80005dfa <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
8000566a:	40 f4       	mov.aa %a4,%a15
8000566c:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005670:	6d ff 5d fc 	call 80004f2a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
80005674:	82 0f       	mov %d15,0
80005676:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
8000567a:	82 f2       	mov %d2,-1
8000567c:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
8000567e:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
80005680:	4c ca       	ld.w %d15,[%a12]40
80005682:	2e 87       	jz.t %d15,8,80005690 <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005684:	19 ff 00 10 	ld.w %d15,[%a15]64
80005688:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000568c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
80005690:	4c ca       	ld.w %d15,[%a12]40
80005692:	2e 97       	jz.t %d15,9,800056a0 <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
80005694:	19 ff 00 10 	ld.w %d15,[%a15]64
80005698:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000569c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
800056a0:	4c ca       	ld.w %d15,[%a12]40
800056a2:	2e a7       	jz.t %d15,10,800056b0 <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
800056a4:	19 ff 00 10 	ld.w %d15,[%a15]64
800056a8:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
800056ac:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
800056b0:	4c ca       	ld.w %d15,[%a12]40
800056b2:	2e b7       	jz.t %d15,11,800056c0 <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
800056b4:	19 ff 00 10 	ld.w %d15,[%a15]64
800056b8:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
800056bc:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
800056c0:	4c ca       	ld.w %d15,[%a12]40
800056c2:	2e c7       	jz.t %d15,12,800056d0 <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
800056c4:	19 ff 00 10 	ld.w %d15,[%a15]64
800056c8:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800056cc:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
800056d0:	82 0f       	mov %d15,0
800056d2:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
800056d4:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
800056d6:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
800056d8:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
800056dc:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
800056de:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
800056e2:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
800056e4:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
800056e8:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
800056ea:	76 34       	jz %d3,800056f2 <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
800056ec:	ba 13       	eq %d15,%d3,1
800056ee:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
800056f2:	99 c4 2c 00 	ld.a %a4,[%a12]44
800056f6:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056fa:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
800056fc:	bc 44       	jz.a %a4,80005704 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056fe:	6d 00 36 16 	call 8000836a <Ifx_Fifo_init>
80005702:	3c 03       	j 80005708 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005704:	6d 00 50 16 	call 800083a4 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
80005708:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
8000570c:	b5 e2 04 00 	st.a [%a14]4,%a2
80005710:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005714:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
80005716:	bc 44       	jz.a %a4,8000571e <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005718:	6d 00 29 16 	call 8000836a <Ifx_Fifo_init>
8000571c:	3c 03       	j 80005722 <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000571e:	6d 00 43 16 	call 800083a4 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
80005722:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005726:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
8000572a:	8b 3f 00 82 	eq %d8,%d15,3
8000572e:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
80005730:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005734:	8b 02 00 35 	or.ne %d3,%d2,0
80005738:	df 03 1e 00 	jeq %d3,0,80005774 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
8000573c:	40 f4       	mov.aa %a4,%a15
8000573e:	6d ff a1 fb 	call 80004e80 <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005742:	54 22       	ld.w %d2,[%a2]
80005744:	39 c3 1e 00 	ld.bu %d3,[%a12]30
80005748:	8f f2 cf 21 	andn %d2,%d2,255
8000574c:	a6 32       	or %d2,%d3
8000574e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005750:	54 22       	ld.w %d2,[%a2]
80005752:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
80005756:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005758:	54 22       	ld.w %d2,[%a2]
8000575a:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
8000575e:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
80005760:	19 f2 00 10 	ld.w %d2,[%a15]64
80005764:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80005768:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000576c:	54 22       	ld.w %d2,[%a2]
8000576e:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005772:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
80005774:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
80005778:	8b 02 00 85 	or.ne %d8,%d2,0
8000577c:	df 08 1e 00 	jeq %d8,0,800057b8 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
80005780:	40 f4       	mov.aa %a4,%a15
80005782:	6d ff 89 fb 	call 80004e94 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005786:	54 22       	ld.w %d2,[%a2]
80005788:	39 c3 1c 00 	ld.bu %d3,[%a12]28
8000578c:	8f f2 cf 21 	andn %d2,%d2,255
80005790:	a6 32       	or %d2,%d3
80005792:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005794:	54 22       	ld.w %d2,[%a2]
80005796:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
8000579a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000579c:	54 22       	ld.w %d2,[%a2]
8000579e:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800057a2:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
800057a4:	19 f2 00 10 	ld.w %d2,[%a15]64
800057a8:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
800057ac:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800057b0:	54 22       	ld.w %d2,[%a2]
800057b2:	b7 f2 01 25 	insert %d2,%d2,15,10,1
800057b6:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
800057b8:	b9 c2 20 00 	ld.hu %d2,[%a12]32
800057bc:	df 02 1e 00 	jeq %d2,0,800057f8 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
800057c0:	40 f4       	mov.aa %a4,%a15
800057c2:	6d ff 55 fb 	call 80004e6c <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800057c6:	54 22       	ld.w %d2,[%a2]
800057c8:	39 c3 20 00 	ld.bu %d3,[%a12]32
800057cc:	8f f2 cf 21 	andn %d2,%d2,255
800057d0:	a6 32       	or %d2,%d3
800057d2:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800057d4:	54 22       	ld.w %d2,[%a2]
800057d6:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
800057da:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800057dc:	4c 20       	ld.w %d15,[%a2]0
800057de:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
800057e2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800057e4:	19 ff 00 10 	ld.w %d15,[%a15]64
800057e8:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800057ec:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800057f0:	4c 20       	ld.w %d15,[%a2]0
800057f2:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800057f6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
800057f8:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
800057fa:	02 92       	mov %d2,%d9
800057fc:	96 02       	or %d15,2
800057fe:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
80005800:	4c f3       	ld.w %d15,[%a15]12
80005802:	96 02       	or %d15,2
80005804:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005806:	4c f4       	ld.w %d15,[%a15]16
80005808:	96 01       	or %d15,1
8000580a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
8000580c:	4c f3       	ld.w %d15,[%a15]12
8000580e:	96 01       	or %d15,1
80005810:	68 3f       	st.w [%a15]12,%d15
80005812:	00 90       	ret 

80005814 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005814:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005816:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
8000581a:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000581e:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
80005820:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
80005822:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005826:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
8000582a:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000582e:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
80005830:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80005834:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005838:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
8000583c:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000583e:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
80005842:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
80005846:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80005848:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
8000584c:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
8000584e:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
80005852:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
80005856:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
8000585a:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
8000585c:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
80005860:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
80005864:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80005868:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
8000586c:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
8000586e:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
80005870:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
80005872:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
80005876:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
80005878:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
8000587a:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
8000587e:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
80005882:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
80005886:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
8000588a:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000588e:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80005892:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
80005896:	e9 4f 39 00 	st.b [%a4]57,%d15
8000589a:	00 90       	ret 

8000589c <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
8000589c:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
8000589e:	20 10       	sub.a %sp,16
800058a0:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800058a2:	ee 20       	jnz %d15,800058e2 <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800058a4:	99 44 04 00 	ld.a %a4,[%a4]4
800058a8:	8c 42       	ld.h %d15,[%a4]4
800058aa:	6e 1c       	jz %d15,800058e2 <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
800058ac:	82 1f       	mov %d15,1
800058ae:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
800058b0:	0c ff       	ld.bu %d15,[%a15]15
800058b2:	6e 0c       	jz %d15,800058ca <IfxAsclin_Asc_initiateTransmission+0x2e>
800058b4:	de 11       	jne %d15,1,800058d6 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800058b6:	d2 06       	mov %e6,0
800058b8:	d9 a5 04 00 	lea %a5,[%sp]4
800058bc:	3b c0 00 40 	mov %d4,12
800058c0:	6d 00 f0 15 	call 800084a0 <Ifx_Fifo_read>
                data = packedData.data;
800058c4:	0c ac       	ld.bu %d15,[%sp]12
800058c6:	2c a3       	st.b [%sp]3,%d15
800058c8:	3c 07       	j 800058d6 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
800058ca:	d2 06       	mov %e6,0
800058cc:	d9 a5 03 00 	lea %a5,[%sp]3
800058d0:	82 14       	mov %d4,1
800058d2:	6d 00 e7 15 	call 800084a0 <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
800058d6:	c8 04       	ld.a %a4,[%a15]0
800058d8:	d9 a5 03 00 	lea %a5,[%sp]3
800058dc:	82 14       	mov %d4,1
800058de:	6d ff 34 fc 	call 80005146 <IfxAsclin_write8>
800058e2:	00 90       	ret 

800058e4 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800058e4:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
800058e6:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058e8:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
800058ec:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
800058ee:	0b 45 10 88 	mov %e8,%d5,%d4
800058f2:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058f4:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
800058f8:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
800058fa:	df 03 25 00 	jeq %d3,0,80005944 <IfxAsclin_Asc_write+0x60>
800058fe:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005900:	ee 13       	jnz %d15,80005926 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005902:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005906:	7f 3f 10 00 	jge %d15,%d3,80005926 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
8000590a:	0b 89 10 68 	mov %e6,%d9,%d8
8000590e:	6d 00 17 17 	call 8000873c <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
80005912:	40 f4       	mov.aa %a4,%a15
80005914:	6d ff c4 ff 	call 8000589c <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005918:	94 c4       	ld.h %d4,[%a12]
8000591a:	c8 14       	ld.a %a4,[%a15]4
8000591c:	a2 f4       	sub %d4,%d15
8000591e:	10 d5       	addsc.a %a5,%a13,%d15,0
80005920:	37 04 50 40 	extr %d4,%d4,0,16
80005924:	3c 03       	j 8000592a <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005926:	40 d5       	mov.aa %a5,%a13
80005928:	02 34       	mov %d4,%d3
8000592a:	0b 89 10 68 	mov %e6,%d9,%d8
8000592e:	6d 00 07 17 	call 8000873c <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
80005932:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005934:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
80005936:	6d ff b3 ff 	call 8000589c <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
8000593a:	94 c2       	ld.h %d2,[%a12]
8000593c:	a2 f2       	sub %d2,%d15
8000593e:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
80005940:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
80005944:	00 90       	ret 

80005946 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
80005946:	20 10       	sub.a %sp,16
80005948:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
8000594c:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
8000594e:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
80005950:	d9 a5 07 00 	lea %a5,[%sp]7
80005954:	d9 a6 0e 00 	lea %a6,[%sp]14
80005958:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
8000595c:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
8000595e:	1d ff c3 ff 	j 800058e4 <IfxAsclin_Asc_write>

80005962 <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
80005962:	40 42       	mov.aa %a2,%a4
80005964:	82 0f       	mov %d15,0
80005966:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
8000596a:	24 2f       	st.b [%a2+],%d15
8000596c:	fc ff       	loop %a15,8000596a <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
8000596e:	7b 00 00 f8 	movh %d15,32768
80005972:	1b 4f 8e f5 	addi %d15,%d15,22756
80005976:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
80005978:	7b 00 00 f8 	movh %d15,32768
8000597c:	1b 4f 2d f5 	addi %d15,%d15,21204
80005980:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
80005982:	7b 00 00 f8 	movh %d15,32768
80005986:	1b 8f 15 f5 	addi %d15,%d15,20824
8000598a:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
8000598c:	7b 00 00 f8 	movh %d15,32768
80005990:	1b ef 15 f5 	addi %d15,%d15,20830
80005994:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
80005996:	7b 00 00 f8 	movh %d15,32768
8000599a:	1b 4f 17 f5 	addi %d15,%d15,20852
8000599e:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
800059a0:	7b 00 00 f8 	movh %d15,32768
800059a4:	1b 2f 18 f5 	addi %d15,%d15,20866
800059a8:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
800059aa:	7b 00 00 f8 	movh %d15,32768
800059ae:	1b 4f 20 f5 	addi %d15,%d15,20996
800059b2:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
800059b4:	7b 00 00 f8 	movh %d15,32768
800059b8:	1b 8f 2a f5 	addi %d15,%d15,21160
800059bc:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
800059be:	7b 00 00 f8 	movh %d15,32768
800059c2:	1b cf 20 f5 	addi %d15,%d15,21004
800059c6:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
800059c8:	7b 00 00 f8 	movh %d15,32768
800059cc:	1b 0f 2c f5 	addi %d15,%d15,21184
800059d0:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
800059d2:	7b 00 00 f8 	movh %d15,32768
800059d6:	1b 0f 2b f5 	addi %d15,%d15,21168
800059da:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
800059dc:	7b 00 00 f8 	movh %d15,32768
800059e0:	1b ef 38 f5 	addi %d15,%d15,21390
800059e4:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
800059e6:	7b 00 00 f8 	movh %d15,32768
800059ea:	1b 0f 2f f5 	addi %d15,%d15,21232
800059ee:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
800059f0:	7b 00 00 f8 	movh %d15,32768
800059f4:	1b cf 18 f5 	addi %d15,%d15,20876
800059f8:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
800059fa:	7b 00 00 f8 	movh %d15,32768
800059fe:	1b 8f 16 f5 	addi %d15,%d15,20840
80005a02:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80005a06:	7b 00 00 f8 	movh %d15,32768
80005a0a:	1b ef 16 f5 	addi %d15,%d15,20846
80005a0e:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
80005a12:	7b 00 00 f8 	movh %d15,32768
80005a16:	1b ef 1f f5 	addi %d15,%d15,20990
80005a1a:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
80005a1e:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
80005a20:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
80005a22:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
80005a24:	82 12       	mov %d2,1
80005a26:	00 90       	ret 

80005a28 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005a28:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005a2c:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
80005a2e:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005a30:	d9 22 90 70 	lea %a2,[%a2]2512 <800009d0 <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005a34:	8f f5 0f f1 	and %d15,%d5,255
80005a38:	8b 02 00 32 	eq %d3,%d2,0
80005a3c:	8b 0f 61 34 	and.lt.u %d3,%d15,16
80005a40:	76 3a       	jz %d3,80005a54 <IfxPort_getAddress+0x2c>
80005a42:	02 5f       	mov %d15,%d5
80005a44:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005a46:	d0 2f       	addsc.a %a15,%a2,%d15,3
80005a48:	82 02       	mov %d2,0
80005a4a:	4c f1       	ld.w %d15,[%a15]4
80005a4c:	7e 42       	jne %d15,%d4,80005a50 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
80005a4e:	48 02       	ld.w %d2,[%a15]0
80005a50:	c2 15       	add %d5,1
80005a52:	3c f1       	j 80005a34 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
80005a54:	60 22       	mov.a %a2,%d2
80005a56:	00 90       	ret 

80005a58 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
80005a58:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
80005a5c:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
80005a5e:	d9 33 90 70 	lea %a3,[%a3]2512 <800009d0 <IfxPort_cfg_indexMap>>
80005a62:	a0 ff       	mov.a %a15,15
80005a64:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a66:	d4 25       	ld.a %a5,[%a2]
80005a68:	7d 45 05 80 	jne.a %a5,%a4,80005a72 <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
80005a6c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80005a70:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
80005a72:	c2 1f       	add %d15,1
80005a74:	fc f8       	loop %a15,80005a64 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
80005a76:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80005a78:	00 90       	ret 

80005a7a <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
80005a7a:	40 4f       	mov.aa %a15,%a4
80005a7c:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a7e:	6d 00 ac 0c 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a82:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a84:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a86:	6d 00 a8 0b 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
80005a8a:	82 12       	mov %d2,1
80005a8c:	d9 f4 10 10 	lea %a4,[%a15]80
80005a90:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a94:	d2 06       	mov %e6,0
80005a96:	02 27       	mov %d7,%d2
80005a98:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005a9c:	02 f4       	mov %d4,%d15
80005a9e:	1d 00 d1 0c 	j 80007440 <IfxScuWdt_setCpuEndinit>

80005aa2 <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005aa2:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005aa6:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005aa8:	d9 33 90 90 	lea %a3,[%a3]2640 <80000a50 <IfxPort_cfg_esrMasks>>
80005aac:	a0 ff       	mov.a %a15,15
80005aae:	d0 32       	addsc.a %a2,%a3,%d15,3
80005ab0:	d4 25       	ld.a %a5,[%a2]
80005ab2:	7d 54 0c 80 	jne.a %a4,%a5,80005aca <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005ab6:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005aba:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005abc:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005ac0:	6e 08       	jz %d15,80005ad0 <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005ac2:	6d ff dc ff 	call 80005a7a <IfxPort_resetESR>
                result = TRUE;
80005ac6:	82 12       	mov %d2,1
80005ac8:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005aca:	c2 1f       	add %d15,1
80005acc:	fc f1       	loop %a15,80005aae <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005ace:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005ad0:	00 90       	ret 

80005ad2 <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
80005ad2:	40 4f       	mov.aa %a15,%a4
80005ad4:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ad6:	6d 00 80 0c 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005ada:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005adc:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005ade:	6d 00 7c 0b 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005ae2:	82 12       	mov %d2,1
80005ae4:	0f 82 00 20 	sh %d2,%d2,%d8
80005ae8:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005aec:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005af0:	02 27       	mov %d7,%d2
80005af2:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005af6:	02 f4       	mov %d4,%d15
80005af8:	1d 00 a4 0c 	j 80007440 <IfxScuWdt_setCpuEndinit>

80005afc <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005afc:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005afe:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005b02:	40 4c       	mov.aa %a12,%a4
80005b04:	02 48       	mov %d8,%d4
80005b06:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005b0a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005b0c:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005b0e:	d9 dd 90 90 	lea %a13,[%a13]2640 <80000a50 <IfxPort_cfg_esrMasks>>
80005b12:	d0 df       	addsc.a %a15,%a13,%d15,3
80005b14:	c8 02       	ld.a %a2,[%a15]0
80005b16:	7d 2c 0b 80 	jne.a %a12,%a2,80005b2c <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005b1a:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005b1e:	26 93       	and %d3,%d9
80005b20:	76 36       	jz %d3,80005b2c <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005b22:	40 c4       	mov.aa %a4,%a12
80005b24:	02 84       	mov %d4,%d8
80005b26:	6d ff d6 ff 	call 80005ad2 <IfxPort_setESR>
                result = TRUE;
80005b2a:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005b2c:	c2 1f       	add %d15,1
80005b2e:	8b 0f 21 32 	ne %d3,%d15,16
80005b32:	df 03 f0 ff 	jne %d3,0,80005b12 <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
80005b36:	00 90       	ret 

80005b38 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b38:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
80005b3a:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b3c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b3e:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b40:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b42:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b44:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b46:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b48:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b4a:	78 07       	st.w [%sp]28,%d15
80005b4c:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b50:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005b54:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b58:	3b 80 0f 70 	mov %d7,248
80005b5c:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b60:	9f 0f 07 80 	jned %d15,0,80005b6e <IfxPort_setGroupModeInput+0x36>
80005b64:	d9 44 10 00 	lea %a4,[%a4]16
80005b68:	82 0f       	mov %d15,0
80005b6a:	a0 3f       	mov.a %a15,3
80005b6c:	3c 1e       	j 80005ba8 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005b6e:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b72:	df 02 19 00 	jeq %d2,0,80005ba4 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b76:	8f 34 c0 31 	andn %d3,%d4,3
80005b7a:	60 32       	mov.a %a2,%d3
80005b7c:	d9 af 20 00 	lea %a15,[%sp]32
80005b80:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005b82:	8f 34 00 21 	and %d2,%d4,3
80005b86:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b88:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005b8c:	0f 27 00 30 	sh %d3,%d7,%d2
80005b90:	a6 03       	or %d3,%d0
80005b92:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005b96:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005b9a:	0f 26 00 20 	sh %d2,%d6,%d2
80005b9e:	a6 32       	or %d2,%d3
80005ba0:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005ba4:	c2 14       	add %d4,1
80005ba6:	3c dd       	j 80005b60 <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005ba8:	d9 a3 20 00 	lea %a3,[%sp]32
80005bac:	90 32       	addsc.a %a2,%a3,%d15,2
80005bae:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005bb2:	76 47       	jz %d4,80005bc0 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005bb4:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005bb8:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005bba:	02 43       	mov %d3,%d4
80005bbc:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005bc0:	c2 1f       	add %d15,1
80005bc2:	b0 44       	add.a %a4,4
80005bc4:	fc f2       	loop %a15,80005ba8 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005bc6:	00 90       	ret 

80005bc8 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bc8:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005bca:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bcc:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005bce:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bd0:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005bd2:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bd4:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005bd6:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005bd8:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005bda:	78 07       	st.w [%sp]28,%d15
80005bdc:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005be0:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005be4:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005be8:	3b 80 0f 00 	mov %d0,248
80005bec:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005bf0:	9f 0f 07 80 	jned %d15,0,80005bfe <IfxPort_setGroupModeOutput+0x36>
80005bf4:	d9 44 10 00 	lea %a4,[%a4]16
80005bf8:	82 0f       	mov %d15,0
80005bfa:	a0 3f       	mov.a %a15,3
80005bfc:	3c 1f       	j 80005c3a <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005bfe:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005c02:	df 02 1a 00 	jeq %d2,0,80005c36 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005c06:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005c0a:	d9 a2 20 00 	lea %a2,[%sp]32
80005c0e:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005c12:	8f 34 00 21 	and %d2,%d4,3
80005c16:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005c18:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005c1a:	0f 20 00 70 	sh %d7,%d0,%d2
80005c1e:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005c22:	0f 23 00 20 	sh %d2,%d3,%d2
80005c26:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005c2a:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005c2c:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005c2e:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005c32:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005c36:	c2 14       	add %d4,1
80005c38:	3c dc       	j 80005bf0 <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005c3a:	d9 a3 20 00 	lea %a3,[%sp]32
80005c3e:	90 32       	addsc.a %a2,%a3,%d15,2
80005c40:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005c44:	76 47       	jz %d4,80005c52 <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c46:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005c4a:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c4c:	02 43       	mov %d3,%d4
80005c4e:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005c52:	c2 1f       	add %d15,1
80005c54:	b0 44       	add.a %a4,4
80005c56:	fc f2       	loop %a15,80005c3a <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005c58:	00 90       	ret 

80005c5a <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
80005c5a:	20 10       	sub.a %sp,16
80005c5c:	02 4f       	mov %d15,%d4
80005c5e:	02 5a       	mov %d10,%d5
80005c60:	40 4c       	mov.aa %a12,%a4
80005c62:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c64:	6d 00 b9 0b 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005c68:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c6a:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005c6c:	6d 00 b5 0a 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005c70:	82 03       	mov %d3,0
80005c72:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005c74:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005c78:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005c7c:	59 a3 0c 00 	st.w [%sp]12,%d3
80005c80:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c84:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005c88:	0f fa 00 50 	sh %d5,%d10,%d15
80005c8c:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005c90:	9f 03 03 80 	jned %d3,0,80005c96 <IfxPort_setGroupPadDriver+0x3c>
80005c94:	3c 1d       	j 80005cce <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005c96:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005c9a:	df 02 18 00 	jeq %d2,0,80005cca <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005c9e:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005ca2:	d9 a2 10 00 	lea %a2,[%sp]16
80005ca6:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005caa:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005cae:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005cb2:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005cb4:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005cb8:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005cbc:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005cc0:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005cc4:	a6 42       	or %d2,%d4
80005cc6:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005cca:	c2 1f       	add %d15,1
80005ccc:	3c e2       	j 80005c90 <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005cce:	58 02       	ld.w %d15,[%sp]8
80005cd0:	6e 08       	jz %d15,80005ce0 <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005cd2:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005cd6:	54 a6       	ld.w %d6,[%sp]
80005cd8:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005cda:	02 f7       	mov %d7,%d15
80005cdc:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005ce0:	58 03       	ld.w %d15,[%sp]12
80005ce2:	6e 09       	jz %d15,80005cf4 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005ce4:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005ce8:	19 a6 04 00 	ld.w %d6,[%sp]4
80005cec:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005cee:	02 f7       	mov %d7,%d15
80005cf0:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005cf4:	02 84       	mov %d4,%d8
}
80005cf6:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005cfa:	1d 00 a3 0b 	j 80007440 <IfxScuWdt_setCpuEndinit>

80005cfe <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005cfe:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005d02:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005d06:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005d0a:	40 4f       	mov.aa %a15,%a4
80005d0c:	02 4f       	mov %d15,%d4
80005d0e:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005d10:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005d14:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005d18:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005d1a:	7d 24 11 80 	jne.a %a4,%a2,80005d3c <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d1e:	6d 00 5c 0b 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005d22:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d24:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005d26:	6d 00 58 0a 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005d2a:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005d2e:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005d30:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005d34:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005d38:	6d 00 84 0b 	call 80007440 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005d3c:	da ff       	mov %d15,255
80005d3e:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005d42:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005d46:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005d4a:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005d4c:	02 f3       	mov %d3,%d15
80005d4e:	49 f2 40 08 	ldmst [%a15]0,%e2
80005d52:	00 90       	ret 

80005d54 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005d54:	02 5a       	mov %d10,%d5
80005d56:	40 4f       	mov.aa %a15,%a4
80005d58:	02 49       	mov %d9,%d4
80005d5a:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d5c:	6d 00 3d 0b 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d60:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d62:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d64:	6d 00 39 0a 	call 800071d6 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005d68:	37 0a 48 50 	extr %d5,%d10,0,8
80005d6c:	bf 05 11 00 	jlt %d5,0,80005d8e <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005d70:	bf 29 21 80 	jlt.u %d9,2,80005db2 <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005d74:	19 f2 24 20 	ld.w %d2,[%a15]164
80005d78:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005d7c:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005d80:	19 ff 24 20 	ld.w %d15,[%a15]164
80005d84:	8f 2f c0 f1 	andn %d15,%d15,2
80005d88:	59 ff 24 20 	st.w [%a15]164,%d15
80005d8c:	3c 13       	j 80005db2 <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005d8e:	19 f2 28 20 	ld.w %d2,[%a15]168
80005d92:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005d96:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005d9a:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d9e:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005da2:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005da6:	19 ff 28 20 	ld.w %d15,[%a15]168
80005daa:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005dae:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005db2:	02 84       	mov %d4,%d8
80005db4:	1d 00 46 0b 	j 80007440 <IfxScuWdt_setCpuEndinit>

80005db8 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005db8:	0b 65 10 a8 	mov %e10,%d5,%d6
80005dbc:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005dbe:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005dc2:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005dc4:	6d 00 09 0b 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005dc8:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005dca:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005dcc:	6d 00 05 0a 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005dd0:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005dd2:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005dd6:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005dda:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005dde:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005de2:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005de6:	0f 2b 00 50 	sh %d5,%d11,%d2
80005dea:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005dec:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005dee:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005df0:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005df4:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005df6:	1d 00 25 0b 	j 80007440 <IfxScuWdt_setCpuEndinit>

80005dfa <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005dfa:	0b 45 10 88 	mov %e8,%d5,%d4
80005dfe:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005e00:	6d 00 eb 0a 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005e04:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005e06:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005e08:	6d 00 e7 09 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005e0c:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005e10:	06 22       	sh %d2,2
80005e12:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005e14:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005e18:	3b f0 00 30 	mov %d3,15
80005e1c:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005e20:	0f 23 00 30 	sh %d3,%d3,%d2
80005e24:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005e28:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005e2a:	02 37       	mov %d7,%d3
80005e2c:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005e30:	02 f4       	mov %d4,%d15
80005e32:	1d 00 07 0b 	j 80007440 <IfxScuWdt_setCpuEndinit>
	...

80005e38 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005e38:	7b e0 e4 30 	movh %d3,3662
80005e3c:	1b 13 c0 31 	addi %d3,%d3,7169
80005e40:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005e44:	82 2f       	mov %d15,2
80005e46:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005e4a:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005e4e:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e52:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e56:	7b 80 82 6e 	movh %d6,59432
80005e5a:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005e5e:	19 4e 10 10 	ld.w %d14,[%a4]80
80005e62:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005e64:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005e68:	d2 0a       	mov %e10,0
80005e6a:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005e6c:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e70:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e74:	82 f7       	mov %d7,-1
80005e76:	1b 06 c0 67 	addi %d6,%d6,31744
80005e7a:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005e7e:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005e80:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e84:	7b 60 f8 1f 	movh %d1,65414
80005e88:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005e8c:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e8e:	0b 12 40 10 	addx %d1,%d2,%d1
80005e92:	8b f3 bf 20 	addc %d2,%d3,-1
80005e96:	80 53       	mov.d %d3,%a5
80005e98:	ba 02       	eq %d15,%d2,0
80005e9a:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005e9e:	8b 02 00 f5 	or.ne %d15,%d2,0
80005ea2:	ee 24       	jnz %d15,80005eea <IfxScuCcu_calculateSysPllDividers+0xb2>
80005ea4:	02 5d       	mov %d13,%d5
80005ea6:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005ea8:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005eac:	80 68       	mov.d %d8,%a6
80005eae:	ba 03       	eq %d15,%d3,0
80005eb0:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005eb4:	8b 03 00 f5 	or.ne %d15,%d3,0
80005eb8:	ee 13       	jnz %d15,80005ede <IfxScuCcu_calculateSysPllDividers+0xa6>
80005eba:	82 18       	mov %d8,1
80005ebc:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005ec0:	4b d8 11 22 	div.u %e2,%d8,%d13
80005ec4:	e2 e2       	mul %d2,%d14
80005ec6:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005ec8:	df 02 18 00 	jeq %d2,0,80005ef8 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005ecc:	82 1f       	mov %d15,1
80005ece:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005ed2:	6a 8b       	cmovn %d11,%d15,%d8
80005ed4:	6a 20       	cmovn %d0,%d15,%d2
80005ed6:	6a 5a       	cmovn %d10,%d15,%d5
80005ed8:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005eda:	c2 18       	add %d8,1
80005edc:	fc 22       	loop %a2,80005ec0 <IfxScuCcu_calculateSysPllDividers+0x88>
80005ede:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005ee0:	42 c1       	add %d1,%d12
80005ee2:	42 fd       	add %d13,%d15
80005ee4:	8b 11 68 f2 	lt.u %d15,%d1,129
80005ee8:	ee e0       	jnz %d15,80005ea8 <IfxScuCcu_calculateSysPllDividers+0x70>
80005eea:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005eec:	c2 f5       	add %d5,-1
80005eee:	01 23 20 30 	sub.a %a3,%a3,%a2
80005ef2:	fd f0 c7 7f 	loop %a15,80005e80 <IfxScuCcu_calculateSysPllDividers+0x48>
80005ef6:	3c 05       	j 80005f00 <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005ef8:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005efc:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005efe:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005f00:	da 64       	mov %d15,100
80005f02:	06 14       	sh %d4,1
80005f04:	4b f4 11 42 	div.u %e4,%d4,%d15
80005f08:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005f0a:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005f0c:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005f10:	ee 0f       	jnz %d15,80005f2e <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005f12:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005f14:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005f16:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005f18:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005f1a:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005f1e:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005f22:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005f26:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005f2a:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005f2c:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005f2e:	00 90       	ret 

80005f30 <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005f30:	91 00 00 f7 	movh.a %a15,28672
80005f34:	19 f2 30 30 	ld.w %d2,[%a15]240 <700000f0 <IfxScuCcu_xtalFrequency>>
}
80005f38:	4b 02 61 21 	utof %d2,%d2
80005f3c:	00 90       	ret 

80005f3e <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005f3e:	91 30 00 ff 	movh.a %a15,61443
80005f42:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005f46:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005f48:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005f4c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005f50:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005f54:	6e 0c       	jz %d15,80005f6c <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005f56:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005f58:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005f5a:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005f5e:	5e 17       	jne %d15,1,80005f6c <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005f60:	91 00 00 f7 	movh.a %a15,28672
80005f64:	19 f2 30 30 	ld.w %d2,[%a15]240 <700000f0 <IfxScuCcu_xtalFrequency>>
80005f68:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005f6c:	00 90       	ret 

80005f6e <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005f6e:	91 30 00 ff 	movh.a %a15,61443
80005f72:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005f76:	6d ff e4 ff 	call 80005f3e <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005f7a:	4c f9       	ld.w %d15,[%a15]36
80005f7c:	2e 05       	jz.t %d15,0,80005f86 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005f7e:	4c fb       	ld.w %d15,[%a15]44
80005f80:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f84:	3c 21       	j 80005fc6 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005f86:	4c f9       	ld.w %d15,[%a15]36
80005f88:	6f 3f 15 00 	jz.t %d15,3,80005fb2 <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005f8c:	48 b4       	ld.w %d4,[%a15]44
80005f8e:	8f f4 07 41 	and %d4,%d4,127
80005f92:	c2 14       	add %d4,1
80005f94:	6d 00 73 26 	call 8000ac7a <__floatsidf>
80005f98:	7b 80 19 54 	movh %d5,16792
80005f9c:	0b 23 10 68 	mov %e6,%d3,%d2
80005fa0:	82 04       	mov %d4,0
80005fa2:	1b 45 78 5d 	addi %d5,%d5,-10364
80005fa6:	6d 00 de 25 	call 8000ab62 <__divdf3>
80005faa:	0b 23 10 48 	mov %e4,%d3,%d2
80005fae:	1d 00 99 26 	j 8000ace0 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005fb2:	48 a3       	ld.w %d3,[%a15]40
80005fb4:	4c fb       	ld.w %d15,[%a15]44
80005fb6:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005fba:	16 7f       	and %d15,127
80005fbc:	c2 13       	add %d3,1
80005fbe:	4b 03 41 31 	itof %d3,%d3
80005fc2:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005fc6:	c2 1f       	add %d15,1
80005fc8:	4b 0f 41 f1 	itof %d15,%d15
80005fcc:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005fd0:	00 90       	ret 

80005fd2 <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005fd2:	91 30 00 ff 	movh.a %a15,61443
80005fd6:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005fda:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005fdc:	7b f0 cb 24 	movh %d2,19647
80005fe0:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005fe4:	6f 3f 18 80 	jnz.t %d15,3,80006014 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005fe8:	6d ff ab ff 	call 80005f3e <IfxScuCcu_getOscFrequency>
80005fec:	91 30 00 ff 	movh.a %a15,61443
80005ff0:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005ff4:	48 03       	ld.w %d3,[%a15]0
80005ff6:	4c f0       	ld.w %d15,[%a15]0
80005ff8:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005ffc:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006000:	c2 13       	add %d3,1
80006002:	4b 03 41 31 	itof %d3,%d3
80006006:	c2 1f       	add %d15,1
80006008:	4b 32 41 20 	mul.f %d2,%d2,%d3
8000600c:	4b 0f 41 f1 	itof %d15,%d15
80006010:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80006014:	00 90       	ret 

80006016 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80006016:	91 30 00 ff 	movh.a %a15,61443
8000601a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
8000601e:	6d ff 90 ff 	call 80005f3e <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80006022:	4c f5       	ld.w %d15,[%a15]20
80006024:	2e 06       	jz.t %d15,0,80006030 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80006026:	4c f7       	ld.w %d15,[%a15]28
80006028:	37 0f 67 f8 	extr.u %d15,%d15,16,7
8000602c:	c2 1f       	add %d15,1
8000602e:	3c 28       	j 8000607e <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80006030:	4c f5       	ld.w %d15,[%a15]20
80006032:	6f 3f 15 00 	jz.t %d15,3,8000605c <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80006036:	48 74       	ld.w %d4,[%a15]28
80006038:	8f f4 07 41 	and %d4,%d4,127
8000603c:	c2 14       	add %d4,1
8000603e:	6d 00 1e 26 	call 8000ac7a <__floatsidf>
80006042:	7b 80 19 54 	movh %d5,16792
80006046:	0b 23 10 68 	mov %e6,%d3,%d2
8000604a:	82 04       	mov %d4,0
8000604c:	1b 45 78 5d 	addi %d5,%d5,-10364
80006050:	6d 00 89 25 	call 8000ab62 <__divdf3>
80006054:	0b 23 10 48 	mov %e4,%d3,%d2
80006058:	1d 00 44 26 	j 8000ace0 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
8000605c:	48 64       	ld.w %d4,[%a15]24
8000605e:	4c f7       	ld.w %d15,[%a15]28
80006060:	37 04 e7 44 	extr.u %d4,%d4,9,7
80006064:	8f ff 07 31 	and %d3,%d15,127
80006068:	4c f6       	ld.w %d15,[%a15]24
8000606a:	c2 14       	add %d4,1
8000606c:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006070:	4b 04 41 41 	itof %d4,%d4
80006074:	c2 1f       	add %d15,1
80006076:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
8000607a:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000607e:	4b 0f 41 f1 	itof %d15,%d15
80006082:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80006086:	00 90       	ret 

80006088 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80006088:	91 30 00 ff 	movh.a %a15,61443
8000608c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006090:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80006092:	7b f0 cb 24 	movh %d2,19647
80006096:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
8000609a:	6f 3f 18 80 	jnz.t %d15,3,800060ca <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
8000609e:	6d ff 50 ff 	call 80005f3e <IfxScuCcu_getOscFrequency>
800060a2:	91 30 00 ff 	movh.a %a15,61443
800060a6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800060aa:	48 03       	ld.w %d3,[%a15]0
800060ac:	4c f0       	ld.w %d15,[%a15]0
800060ae:	37 03 e7 34 	extr.u %d3,%d3,9,7
800060b2:	37 0f 64 fc 	extr.u %d15,%d15,24,4
800060b6:	c2 13       	add %d3,1
800060b8:	4b 03 41 31 	itof %d3,%d3
800060bc:	c2 1f       	add %d15,1
800060be:	4b 32 41 20 	mul.f %d2,%d2,%d3
800060c2:	4b 0f 41 f1 	itof %d15,%d15
800060c6:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
800060ca:	00 90       	ret 

800060cc <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
800060cc:	91 30 00 ff 	movh.a %a15,61443
800060d0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060d4:	4c f0       	ld.w %d15,[%a15]0
800060d6:	37 0f 62 fe 	extr.u %d15,%d15,28,2
800060da:	6e 06       	jz %d15,800060e6 <IfxScuCcu_getSourceFrequency+0x1a>
800060dc:	1e 13       	jeq %d15,1,800060e2 <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
800060de:	82 02       	mov %d2,0
800060e0:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
800060e2:	1d ff 9a ff 	j 80006016 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
800060e6:	7b f0 cb 24 	movh %d2,19647
800060ea:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
800060ee:	00 90       	ret 

800060f0 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
800060f0:	02 4f       	mov %d15,%d4
800060f2:	6d ff ed ff 	call 800060cc <IfxScuCcu_getSourceFrequency>
800060f6:	91 30 00 ff 	movh.a %a15,61443
800060fa:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800060fe:	48 03       	ld.w %d3,[%a15]0
80006100:	37 03 64 34 	extr.u %d3,%d3,8,4
80006104:	4b 03 41 31 	itof %d3,%d3
80006108:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
8000610c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80006110:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006114:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80006118:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
8000611c:	a2 3f       	sub %d15,%d3
8000611e:	3f 2f fd ff 	jlt.u %d15,%d2,80006118 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80006122:	00 90       	ret 

80006124 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006124:	6d ff d4 ff 	call 800060cc <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006128:	91 30 00 ff 	movh.a %a15,61443
8000612c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006130:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
80006132:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006134:	37 03 64 36 	extr.u %d3,%d3,12,4
80006138:	ff 53 30 80 	jge.u %d3,5,80006198 <IfxScuCcu_getBbbFrequency+0x74>
8000613c:	91 00 00 f8 	movh.a %a15,32768
80006140:	d9 ff 0c 56 	lea %a15,[%a15]24908 <8000614c <IfxScuCcu_getBbbFrequency+0x28>>
80006144:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006148:	dc 0f       	ji %a15
8000614a:	00 00       	nop 
8000614c:	1d 00 0a 00 	j 80006160 <IfxScuCcu_getBbbFrequency+0x3c>
80006150:	1d 00 17 00 	j 8000617e <IfxScuCcu_getBbbFrequency+0x5a>
80006154:	1d 00 18 00 	j 80006184 <IfxScuCcu_getBbbFrequency+0x60>
80006158:	1d 00 19 00 	j 8000618a <IfxScuCcu_getBbbFrequency+0x66>
8000615c:	1d 00 1a 00 	j 80006190 <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80006160:	91 30 00 ff 	movh.a %a15,61443
80006164:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006168:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
8000616a:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
8000616c:	8f f3 00 31 	and %d3,%d3,15
80006170:	df 03 14 00 	jeq %d3,0,80006198 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
80006174:	4c f0       	ld.w %d15,[%a15]0
80006176:	16 0f       	and %d15,15
80006178:	4b 0f 41 f1 	itof %d15,%d15
8000617c:	3c 0c       	j 80006194 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
8000617e:	7b 00 1f f4 	movh %d15,16880
80006182:	3c 09       	j 80006194 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
80006184:	7b 00 27 f4 	movh %d15,17008
80006188:	3c 06       	j 80006194 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
8000618a:	7b 00 2f f4 	movh %d15,17136
8000618e:	3c 03       	j 80006194 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
80006190:	7b 00 37 f4 	movh %d15,17264
80006194:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
80006198:	02 f2       	mov %d2,%d15
8000619a:	00 90       	ret 

8000619c <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
8000619c:	91 30 00 ff 	movh.a %a15,61443
800061a0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
800061a4:	6d ff 94 ff 	call 800060cc <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800061a8:	4c f0       	ld.w %d15,[%a15]0
800061aa:	37 0f 64 f6 	extr.u %d15,%d15,12,4
800061ae:	ff 5f 2d 80 	jge.u %d15,5,80006208 <IfxScuCcu_getMaxFrequency+0x6c>
800061b2:	91 00 00 f8 	movh.a %a15,32768
800061b6:	d9 ff 00 76 	lea %a15,[%a15]25024 <800061c0 <IfxScuCcu_getMaxFrequency+0x24>>
800061ba:	90 ff       	addsc.a %a15,%a15,%d15,2
800061bc:	dc 0f       	ji %a15
800061be:	00 00       	nop 
800061c0:	1d 00 0a 00 	j 800061d4 <IfxScuCcu_getMaxFrequency+0x38>
800061c4:	1d 00 14 00 	j 800061ec <IfxScuCcu_getMaxFrequency+0x50>
800061c8:	1d 00 15 00 	j 800061f2 <IfxScuCcu_getMaxFrequency+0x56>
800061cc:	1d 00 16 00 	j 800061f8 <IfxScuCcu_getMaxFrequency+0x5c>
800061d0:	1d 00 17 00 	j 800061fe <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
800061d4:	91 30 00 ff 	movh.a %a15,61443
800061d8:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800061dc:	4c f0       	ld.w %d15,[%a15]0
800061de:	16 0f       	and %d15,15
800061e0:	6e 15       	jz %d15,8000620a <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
800061e2:	4c f0       	ld.w %d15,[%a15]0
800061e4:	16 0f       	and %d15,15
800061e6:	4b 0f 41 f1 	itof %d15,%d15
800061ea:	3c 0c       	j 80006202 <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
800061ec:	7b 00 17 f4 	movh %d15,16752
800061f0:	3c 09       	j 80006202 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
800061f2:	7b 00 1f f4 	movh %d15,16880
800061f6:	3c 06       	j 80006202 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
800061f8:	7b 00 27 f4 	movh %d15,17008
800061fc:	3c 03       	j 80006202 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
800061fe:	7b 00 2f f4 	movh %d15,17136
80006202:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80006206:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80006208:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
8000620a:	00 90       	ret 

8000620c <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000620c:	91 30 00 ff 	movh.a %a15,61443
80006210:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006214:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
80006216:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006218:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
8000621c:	76 87       	jz %d8,8000622a <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
8000621e:	6d ff bf ff 	call 8000619c <IfxScuCcu_getMaxFrequency>
80006222:	4b 08 41 f1 	itof %d15,%d8
80006226:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
8000622a:	00 90       	ret 

8000622c <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000622c:	91 30 00 ff 	movh.a %a15,61443
80006230:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006234:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80006236:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006238:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
8000623c:	16 f0       	and %d15,240
8000623e:	6e 07       	jz %d15,8000624c <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
80006240:	6d ff ae ff 	call 8000619c <IfxScuCcu_getMaxFrequency>
80006244:	4b 08 41 f1 	itof %d15,%d8
80006248:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
8000624c:	00 90       	ret 

8000624e <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
8000624e:	6d ff 3f ff 	call 800060cc <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006252:	91 30 00 ff 	movh.a %a15,61443
80006256:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000625a:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
8000625c:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
8000625e:	37 03 64 36 	extr.u %d3,%d3,12,4
80006262:	ff 53 30 80 	jge.u %d3,5,800062c2 <IfxScuCcu_getSpbFrequency+0x74>
80006266:	91 00 00 f8 	movh.a %a15,32768
8000626a:	d9 ff 34 96 	lea %a15,[%a15]25204 <80006274 <IfxScuCcu_getSpbFrequency+0x26>>
8000626e:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006272:	dc 0f       	ji %a15
80006274:	1d 00 0a 00 	j 80006288 <IfxScuCcu_getSpbFrequency+0x3a>
80006278:	1d 00 18 00 	j 800062a8 <IfxScuCcu_getSpbFrequency+0x5a>
8000627c:	1d 00 19 00 	j 800062ae <IfxScuCcu_getSpbFrequency+0x60>
80006280:	1d 00 1a 00 	j 800062b4 <IfxScuCcu_getSpbFrequency+0x66>
80006284:	1d 00 1b 00 	j 800062ba <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006288:	91 30 00 ff 	movh.a %a15,61443
8000628c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006290:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
80006292:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006294:	37 03 64 38 	extr.u %d3,%d3,16,4
80006298:	df 03 15 00 	jeq %d3,0,800062c2 <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
8000629c:	4c f0       	ld.w %d15,[%a15]0
8000629e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
800062a2:	4b 0f 41 f1 	itof %d15,%d15
800062a6:	3c 0c       	j 800062be <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
800062a8:	7b 00 1f f4 	movh %d15,16880
800062ac:	3c 09       	j 800062be <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
800062ae:	7b 00 27 f4 	movh %d15,17008
800062b2:	3c 06       	j 800062be <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
800062b4:	7b 00 2f f4 	movh %d15,17136
800062b8:	3c 03       	j 800062be <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
800062ba:	7b 00 37 f4 	movh %d15,17264
800062be:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
800062c2:	02 f2       	mov %d2,%d15
800062c4:	00 90       	ret 

800062c6 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
800062c6:	91 30 00 ff 	movh.a %a15,61443
800062ca:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
800062ce:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
800062d0:	6d ff bf ff 	call 8000624e <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
800062d4:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
800062d8:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
800062da:	26 9f       	and %d15,%d9
800062dc:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
800062e0:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
800062e4:	7e 29       	jne %d15,%d2,800062f6 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
800062e6:	3b 00 40 20 	mov %d2,1024
800062ea:	a2 82       	sub %d2,%d8
800062ec:	4b 02 41 21 	itof %d2,%d2
800062f0:	4b 23 51 20 	div.f %d2,%d3,%d2
800062f4:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
800062f6:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
800062fa:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
800062fc:	7e 49       	jne %d15,%d4,8000630e <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
800062fe:	4b 08 41 21 	itof %d2,%d8
80006302:	7b 00 a8 f3 	movh %d15,14976
80006306:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000630a:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
8000630e:	00 90       	ret 

80006310 <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006310:	6d ff de fe 	call 800060cc <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006314:	91 30 00 ff 	movh.a %a15,61443
80006318:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000631c:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
8000631e:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006320:	37 03 64 36 	extr.u %d3,%d3,12,4
80006324:	ff 53 31 80 	jge.u %d3,5,80006386 <IfxScuCcu_getSriFrequency+0x76>
80006328:	91 00 00 f8 	movh.a %a15,32768
8000632c:	d9 ff 38 c6 	lea %a15,[%a15]25400 <80006338 <IfxScuCcu_getSriFrequency+0x28>>
80006330:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006334:	dc 0f       	ji %a15
80006336:	00 00       	nop 
80006338:	1d 00 0a 00 	j 8000634c <IfxScuCcu_getSriFrequency+0x3c>
8000633c:	1d 00 18 00 	j 8000636c <IfxScuCcu_getSriFrequency+0x5c>
80006340:	1d 00 19 00 	j 80006372 <IfxScuCcu_getSriFrequency+0x62>
80006344:	1d 00 1a 00 	j 80006378 <IfxScuCcu_getSriFrequency+0x68>
80006348:	1d 00 1b 00 	j 8000637e <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
8000634c:	91 30 00 ff 	movh.a %a15,61443
80006350:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006354:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
80006356:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
80006358:	37 03 64 34 	extr.u %d3,%d3,8,4
8000635c:	df 03 15 00 	jeq %d3,0,80006386 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
80006360:	4c f0       	ld.w %d15,[%a15]0
80006362:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006366:	4b 0f 41 f1 	itof %d15,%d15
8000636a:	3c 0c       	j 80006382 <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
8000636c:	7b 00 1f f4 	movh %d15,16880
80006370:	3c 09       	j 80006382 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
80006372:	7b 00 27 f4 	movh %d15,17008
80006376:	3c 06       	j 80006382 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
80006378:	7b 00 2f f4 	movh %d15,17136
8000637c:	3c 03       	j 80006382 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
8000637e:	7b 00 37 f4 	movh %d15,17264
80006382:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
80006386:	02 f2       	mov %d2,%d15
80006388:	00 90       	ret 

8000638a <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
8000638a:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
8000638c:	6d ff c2 ff 	call 80006310 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
80006390:	1e 1d       	jeq %d15,1,800063aa <IfxScuCcu_getCpuFrequency+0x20>
80006392:	6e 07       	jz %d15,800063a0 <IfxScuCcu_getCpuFrequency+0x16>
80006394:	de 2a       	jne %d15,2,800063c8 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006396:	91 30 00 ff 	movh.a %a15,61443
8000639a:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000639e:	3c 0a       	j 800063b2 <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
800063a0:	91 30 00 ff 	movh.a %a15,61443
800063a4:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800063a8:	3c 05       	j 800063b2 <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
800063aa:	91 30 00 ff 	movh.a %a15,61443
800063ae:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
800063b2:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
800063b4:	6e 0b       	jz %d15,800063ca <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
800063b6:	4b 0f 61 f1 	utof %d15,%d15
800063ba:	7b 00 c8 33 	movh %d3,15488
800063be:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
800063c2:	4b f2 41 20 	mul.f %d2,%d2,%d15
800063c6:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
800063c8:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
800063ca:	00 90       	ret 

800063cc <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063cc:	91 30 00 ff 	movh.a %a15,61443
800063d0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063d4:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
800063d6:	7b 00 03 30 	movh %d3,48
800063da:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063dc:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
800063e0:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
800063e2:	76 3f       	jz %d3,80006400 <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
800063e4:	6d ff 96 ff 	call 80006310 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
800063e8:	3b 00 f0 30 	mov %d3,3840
800063ec:	26 3f       	and %d15,%d3
800063ee:	1b 0f f0 ff 	addi %d15,%d15,-256
800063f2:	8f 0f d0 f1 	andn %d15,%d15,256
800063f6:	ee 05       	jnz %d15,80006400 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
800063f8:	4b 08 41 f1 	itof %d15,%d8
800063fc:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006400:	00 90       	ret 

80006402 <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006402:	91 30 00 ff 	movh.a %a15,61443
80006406:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000640a:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
8000640c:	7b 00 30 30 	movh %d3,768
80006410:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006412:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
80006416:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
80006418:	76 3f       	jz %d3,80006436 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
8000641a:	6d ff 7b ff 	call 80006310 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
8000641e:	3b 00 f0 30 	mov %d3,3840
80006422:	26 3f       	and %d15,%d3
80006424:	1b 0f f0 ff 	addi %d15,%d15,-256
80006428:	8f 0f d0 f1 	andn %d15,%d15,256
8000642c:	ee 05       	jnz %d15,80006436 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
8000642e:	4b 08 41 f1 	itof %d15,%d8
80006432:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006436:	00 90       	ret 

80006438 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006438:	19 4f 10 10 	ld.w %d15,[%a4]80
8000643c:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
80006440:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006442:	59 cf 30 30 	st.w [%a12]240 <700000f0 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80006446:	6d 00 c8 07 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
8000644a:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
8000644c:	6d 00 e3 07 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006450:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80006452:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006454:	6d 00 c1 06 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006458:	91 30 00 2f 	movh.a %a2,61443
8000645c:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006460:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
80006462:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006464:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006466:	96 08       	or %d15,8
80006468:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000646a:	6d 00 eb 07 	call 80007440 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000646e:	02 84       	mov %d4,%d8
80006470:	6d 00 ce 06 	call 8000720c <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006474:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
80006478:	91 30 00 3f 	movh.a %a3,61443
8000647c:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006480:	4c 30       	ld.w %d15,[%a3]0
80006482:	91 30 00 2f 	movh.a %a2,61443
80006486:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000648a:	bf 0f fb 7f 	jlt %d15,0,80006480 <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
8000648e:	4c 20       	ld.w %d15,[%a2]0
80006490:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006494:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006496:	4c 20       	ld.w %d15,[%a2]0
80006498:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000649c:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
8000649e:	91 30 00 2f 	movh.a %a2,61443
800064a2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800064a6:	4c 20       	ld.w %d15,[%a2]0
800064a8:	96 10       	or %d15,16
800064aa:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
800064ac:	91 30 00 2f 	movh.a %a2,61443
800064b0:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800064b4:	4c 20       	ld.w %d15,[%a2]0
800064b6:	bf 0f ff 7f 	jlt %d15,0,800064b4 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
800064ba:	91 30 00 2f 	movh.a %a2,61443
800064be:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800064c2:	4c 20       	ld.w %d15,[%a2]0
800064c4:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
800064c8:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
800064ca:	4c 20       	ld.w %d15,[%a2]0
800064cc:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800064d0:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
800064d2:	6d 00 82 07 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800064d6:	91 30 00 2f 	movh.a %a2,61443
800064da:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
800064de:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800064e0:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800064e2:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
800064e4:	8f 02 c6 21 	andn %d2,%d2,96
800064e8:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
800064ea:	19 c6 30 30 	ld.w %d6,[%a12]240 <700000f0 <IfxScuCcu_xtalFrequency>>
800064ee:	7b 60 02 20 	movh %d2,38
800064f2:	1b 02 5a 22 	addi %d2,%d2,9632
800064f6:	4b 26 11 62 	div.u %e6,%d6,%d2
800064fa:	54 22       	ld.w %d2,[%a2]
800064fc:	c2 f6       	add %d6,-1
800064fe:	37 62 05 68 	insert %d6,%d2,%d6,16,5
80006502:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80006504:	54 22       	ld.w %d2,[%a2]
80006506:	8f 42 40 21 	or %d2,%d2,4
8000650a:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000650c:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
80006510:	54 32       	ld.w %d2,[%a3]
80006512:	6f 12 05 80 	jnz.t %d2,1,8000651c <IfxScuCcu_init+0xe4>
80006516:	fc 2d       	loop %a2,80006510 <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
80006518:	82 1b       	mov %d11,1
8000651a:	3c 05       	j 80006524 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000651c:	54 32       	ld.w %d2,[%a3]
8000651e:	6f 82 fc 7f 	jz.t %d2,8,80006516 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
80006522:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80006524:	02 f4       	mov %d4,%d15
80006526:	6d 00 58 06 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000652a:	91 30 00 2f 	movh.a %a2,61443
8000652e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006532:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
80006534:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006536:	8f 82 40 21 	or %d2,%d2,8
8000653a:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000653c:	91 30 00 2f 	movh.a %a2,61443
80006540:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006544:	54 22       	ld.w %d2,[%a2]
80006546:	8f 82 40 21 	or %d2,%d2,8
8000654a:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
8000654c:	6d 00 7a 07 	call 80007440 <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006550:	02 84       	mov %d4,%d8
80006552:	6d 00 e3 07 	call 80007518 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
80006556:	df 0b 29 81 	jne %d11,0,800067a8 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000655a:	02 84       	mov %d4,%d8
8000655c:	6d 00 58 06 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006560:	91 30 00 2f 	movh.a %a2,61443
80006564:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006568:	4c 20       	ld.w %d15,[%a2]0
8000656a:	6f 5f ff 7f 	jz.t %d15,5,80006568 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000656e:	91 30 00 2f 	movh.a %a2,61443
80006572:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006576:	54 22       	ld.w %d2,[%a2]
80006578:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
8000657a:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000657e:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006582:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80006586:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80006588:	91 30 00 2f 	movh.a %a2,61443
8000658c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006590:	54 22       	ld.w %d2,[%a2]
80006592:	0c f8       	ld.bu %d15,[%a15]8
80006594:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
80006598:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
8000659a:	54 22       	ld.w %d2,[%a2]
8000659c:	0c f9       	ld.bu %d15,[%a15]9
8000659e:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
800065a2:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
800065a4:	4c 20       	ld.w %d15,[%a2]0
800065a6:	96 40       	or %d15,64
800065a8:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
800065aa:	4c 20       	ld.w %d15,[%a2]0
800065ac:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
800065b0:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
800065b2:	4c 20       	ld.w %d15,[%a2]0
800065b4:	96 20       	or %d15,32
800065b6:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
800065b8:	4c 20       	ld.w %d15,[%a2]0
800065ba:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800065be:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
800065c0:	4c 20       	ld.w %d15,[%a2]0
800065c2:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800065c6:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800065c8:	6d ff 94 fd 	call 800060f0 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
800065cc:	91 30 00 2f 	movh.a %a2,61443
800065d0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800065d4:	4c 20       	ld.w %d15,[%a2]0
800065d6:	6f 2f ff 7f 	jz.t %d15,2,800065d4 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
800065da:	91 30 00 2f 	movh.a %a2,61443
800065de:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800065e2:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
800065e4:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
800065e8:	8f 1f c0 f1 	andn %d15,%d15,1
800065ec:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
800065ee:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065f2:	4c 30       	ld.w %d15,[%a3]0
800065f4:	91 30 00 2f 	movh.a %a2,61443
800065f8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065fc:	bf 0f fb 7f 	jlt %d15,0,800065f2 <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
80006600:	4c 20       	ld.w %d15,[%a2]0
80006602:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006606:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
80006608:	4c 20       	ld.w %d15,[%a2]0
8000660a:	91 30 00 cf 	movh.a %a12,61443
8000660e:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006612:	bf 0f fb 7f 	jlt %d15,0,80006608 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80006616:	48 34       	ld.w %d4,[%a15]12
80006618:	6d ff 6c fd 	call 800060f0 <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
8000661c:	4c f5       	ld.w %d15,[%a15]20
8000661e:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006620:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80006622:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006626:	26 f2       	and %d2,%d15
80006628:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
8000662c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
80006630:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006634:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80006638:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
8000663a:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000663e:	4c 30       	ld.w %d15,[%a3]0
80006640:	91 30 00 2f 	movh.a %a2,61443
80006644:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006648:	bf 0f fb 7f 	jlt %d15,0,8000663e <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
8000664c:	4c f7       	ld.w %d15,[%a15]28
8000664e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80006650:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80006652:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80006656:	26 f2       	and %d2,%d15
80006658:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
8000665c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
80006660:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
80006664:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
80006668:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
8000666a:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
8000666e:	4c 30       	ld.w %d15,[%a3]0
80006670:	91 30 00 2f 	movh.a %a2,61443
80006674:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006678:	bf 0f fb 7f 	jlt %d15,0,8000666e <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
8000667c:	4c f9       	ld.w %d15,[%a15]36
8000667e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006680:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80006682:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006686:	26 f2       	and %d2,%d15
80006688:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
8000668c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006690:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
80006694:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006696:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000669a:	4c 30       	ld.w %d15,[%a3]0
8000669c:	91 30 00 2f 	movh.a %a2,61443
800066a0:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800066a4:	bf 0f fb 7f 	jlt %d15,0,8000669a <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800066a8:	54 23       	ld.w %d3,[%a2]
800066aa:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800066ac:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800066ae:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800066b2:	26 f2       	and %d2,%d15
800066b4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
800066b8:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
800066bc:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
800066be:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800066c0:	91 30 00 2f 	movh.a %a2,61443
800066c4:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800066c8:	54 23       	ld.w %d3,[%a2]
800066ca:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066cc:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800066ce:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
800066d2:	26 f2       	and %d2,%d15
800066d4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
800066d8:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800066da:	91 30 00 2f 	movh.a %a2,61443
800066de:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
800066e2:	54 23       	ld.w %d3,[%a2]
800066e4:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800066e6:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800066e8:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800066ec:	26 f2       	and %d2,%d15
800066ee:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
800066f2:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800066f4:	91 30 00 2f 	movh.a %a2,61443
800066f8:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800066fc:	54 23       	ld.w %d3,[%a2]
800066fe:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80006702:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006706:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000670a:	26 f2       	and %d2,%d15
8000670c:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
80006710:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006712:	6d 00 03 07 	call 80007518 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80006716:	91 00 80 cf 	movh.a %a12,63488
8000671a:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000671e:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
80006722:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006724:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
80006728:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000672c:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
8000672e:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006730:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006734:	6d 00 51 05 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006738:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
8000673a:	02 94       	mov %d4,%d9
8000673c:	6d 00 82 06 	call 80007440 <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006740:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006744:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80006748:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000674a:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
8000674e:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80006752:	0c f0       	ld.bu %d15,[%a15]0
80006754:	8f fd 0f 21 	and %d2,%d13,255
80006758:	7f f2 28 80 	jge.u %d2,%d15,800067a8 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000675c:	02 84       	mov %d4,%d8
8000675e:	6d 00 57 05 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006762:	4c d0       	ld.w %d15,[%a13]0
80006764:	6f 5f ff 7f 	jz.t %d15,5,80006762 <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006768:	02 df       	mov %d15,%d13
8000676a:	16 ff       	and %d15,255
8000676c:	53 cf 20 a0 	mul %d10,%d15,12
80006770:	c8 12       	ld.a %a2,[%a15]4
80006772:	4c c0       	ld.w %d15,[%a12]0
80006774:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006776:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006778:	30 32       	add.a %a2,%a3
8000677a:	14 22       	ld.bu %d2,[%a2]
8000677c:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
80006780:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006782:	6d 00 cb 06 	call 80007518 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80006786:	c8 12       	ld.a %a2,[%a15]4
80006788:	60 a3       	mov.a %a3,%d10
8000678a:	30 32       	add.a %a2,%a3
8000678c:	99 22 08 00 	ld.a %a2,[%a2]8
80006790:	bc 23       	jz.a %a2,80006796 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80006792:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80006796:	c8 12       	ld.a %a2,[%a15]4
80006798:	60 a3       	mov.a %a3,%d10
8000679a:	c2 1d       	add %d13,1
8000679c:	30 32       	add.a %a2,%a3
8000679e:	19 24 04 00 	ld.w %d4,[%a2]4
800067a2:	6d ff a7 fc 	call 800060f0 <IfxScuCcu_wait>
800067a6:	3c d6       	j 80006752 <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800067a8:	02 84       	mov %d4,%d8
800067aa:	6d 00 31 05 	call 8000720c <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
800067ae:	91 30 00 ff 	movh.a %a15,61443
800067b2:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800067b6:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800067b8:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
800067ba:	8f 0f c4 f1 	andn %d15,%d15,64
800067be:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800067c0:	6d 00 ac 06 	call 80007518 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800067c4:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067c8:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
800067ca:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067ce:	6d 00 04 05 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
800067d2:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067d4:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800067d6:	96 08       	or %d15,8
800067d8:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067da:	91 30 00 ff 	movh.a %a15,61443
800067de:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800067e2:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067e4:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067e6:	8f 8f c0 f1 	andn %d15,%d15,8
800067ea:	a6 fc       	or %d12,%d15
800067ec:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067ee:	6d 00 29 06 	call 80007440 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
800067f2:	02 b2       	mov %d2,%d11
800067f4:	00 90       	ret 

800067f6 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
800067f6:	91 00 00 f8 	movh.a %a15,32768
800067fa:	d9 ff 98 b0 	lea %a15,[%a15]2776 <80000ad8 <IfxScuCcu_defaultClockConfig>>
800067fe:	c5 02 14 00 	lea %a2,14 <_.+0x13>
80006802:	44 ff       	ld.w %d15,[%a15+]
80006804:	64 4f       	st.w [%a4+],%d15
80006806:	fc 2e       	loop %a2,80006802 <IfxScuCcu_initConfig+0xc>
80006808:	00 90       	ret 

8000680a <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
8000680a:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
8000680c:	6d 00 e5 05 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
80006810:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006812:	6d 00 00 06 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006816:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006818:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000681a:	6d 00 de 04 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000681e:	91 30 00 ff 	movh.a %a15,61443
80006822:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006826:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006828:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000682a:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
8000682c:	8f 82 40 21 	or %d2,%d2,8
80006830:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006832:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006836:	6d 00 05 06 	call 80007440 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000683a:	02 84       	mov %d4,%d8
8000683c:	6d 00 e8 04 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
80006840:	91 30 00 ff 	movh.a %a15,61443
80006844:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006848:	48 02       	ld.w %d2,[%a15]0
8000684a:	ef 02 0c 00 	jz.t %d2,16,80006862 <IfxScuCcu_initErayPll+0x58>
8000684e:	48 02       	ld.w %d2,[%a15]0
80006850:	6f 12 09 80 	jnz.t %d2,1,80006862 <IfxScuCcu_initErayPll+0x58>
80006854:	91 30 00 ff 	movh.a %a15,61443
80006858:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000685c:	48 02       	ld.w %d2,[%a15]0
8000685e:	6f 12 19 00 	jz.t %d2,1,80006890 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
80006862:	91 30 00 ff 	movh.a %a15,61443
80006866:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000686a:	48 02       	ld.w %d2,[%a15]0
8000686c:	b7 f2 01 28 	insert %d2,%d2,15,16,1
80006870:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
80006872:	48 02       	ld.w %d2,[%a15]0
80006874:	8f 22 c0 21 	andn %d2,%d2,2
80006878:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
8000687a:	91 30 00 ff 	movh.a %a15,61443
8000687e:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006882:	48 02       	ld.w %d2,[%a15]0
80006884:	6f 12 ff ff 	jnz.t %d2,1,80006882 <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
80006888:	19 c4 04 00 	ld.w %d4,[%a12]4
8000688c:	6d ff 32 fc 	call 800060f0 <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
80006890:	91 30 00 ff 	movh.a %a15,61443
80006894:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006898:	48 02       	ld.w %d2,[%a15]0
8000689a:	6f 02 15 80 	jnz.t %d2,0,800068c4 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
8000689e:	48 02       	ld.w %d2,[%a15]0
800068a0:	6f 42 ff 7f 	jz.t %d2,4,8000689e <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
800068a4:	91 30 00 ff 	movh.a %a15,61443
800068a8:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
800068ac:	48 02       	ld.w %d2,[%a15]0
800068ae:	b7 32 07 28 	insert %d2,%d2,3,16,7
800068b2:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
800068b4:	91 30 00 ff 	movh.a %a15,61443
800068b8:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800068bc:	48 02       	ld.w %d2,[%a15]0
800068be:	8f 12 40 21 	or %d2,%d2,1
800068c2:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
800068c4:	91 30 00 ff 	movh.a %a15,61443
800068c8:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068cc:	48 02       	ld.w %d2,[%a15]0
800068ce:	6f 52 ff 7f 	jz.t %d2,5,800068cc <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
800068d2:	91 30 00 ff 	movh.a %a15,61443
800068d6:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
800068da:	48 03       	ld.w %d3,[%a15]0
800068dc:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068e0:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
800068e2:	37 23 07 20 	insert %d2,%d3,%d2,0,7
800068e6:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
800068e8:	91 30 00 ff 	movh.a %a15,61443
800068ec:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800068f0:	48 03       	ld.w %d3,[%a15]0
800068f2:	14 c2       	ld.bu %d2,[%a12]
800068f4:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
800068f8:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
800068fa:	48 03       	ld.w %d3,[%a15]0
800068fc:	39 c2 01 00 	ld.bu %d2,[%a12]1
80006900:	37 23 85 24 	insert %d2,%d3,%d2,9,5
80006904:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
80006906:	48 02       	ld.w %d2,[%a15]0
80006908:	b7 f2 01 29 	insert %d2,%d2,15,18,1
8000690c:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
8000690e:	48 02       	ld.w %d2,[%a15]0
80006910:	8f 02 42 21 	or %d2,%d2,32
80006914:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006916:	6d 00 01 06 	call 80007518 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
8000691a:	91 10 00 f0 	movh.a %a15,1
8000691e:	91 30 00 2f 	movh.a %a2,61443
80006922:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006926:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
8000692a:	fd f0 04 00 	loop %a15,80006932 <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
8000692e:	82 19       	mov %d9,1
80006930:	3c 05       	j 8000693a <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
80006932:	54 22       	ld.w %d2,[%a2]
80006934:	6f 22 fb 7f 	jz.t %d2,2,8000692a <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
80006938:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000693a:	02 84       	mov %d4,%d8
8000693c:	6d 00 68 04 	call 8000720c <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
80006940:	91 30 00 ff 	movh.a %a15,61443
80006944:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006948:	48 02       	ld.w %d2,[%a15]0
8000694a:	8f 12 c0 21 	andn %d2,%d2,1
8000694e:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
80006950:	91 30 00 ff 	movh.a %a15,61443
80006954:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006958:	48 02       	ld.w %d2,[%a15]0
8000695a:	6f 02 ff ff 	jnz.t %d2,0,80006958 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
8000695e:	91 30 00 ff 	movh.a %a15,61443
80006962:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006966:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006968:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
8000696a:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000696e:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
80006972:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006976:	6d 00 d1 05 	call 80007518 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000697a:	02 f4       	mov %d4,%d15
8000697c:	6d 00 2d 04 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006980:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006984:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006986:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000698a:	8f 82 40 21 	or %d2,%d2,8
8000698e:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006990:	91 30 00 ff 	movh.a %a15,61443
80006994:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006998:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000699a:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000699c:	8f 82 c0 21 	andn %d2,%d2,8
800069a0:	a6 32       	or %d2,%d3
800069a2:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
800069a4:	6d 00 4e 05 	call 80007440 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
800069a8:	02 92       	mov %d2,%d9
800069aa:	00 90       	ret 

800069ac <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
800069ac:	91 00 00 f8 	movh.a %a15,32768
800069b0:	d9 ff 90 b0 	lea %a15,[%a15]2768 <80000ad0 <IfxScuCcu_defaultErayPllConfig>>
800069b4:	09 f2 40 09 	ld.d %e2,[%a15]
800069b8:	89 42 40 09 	st.d [%a4],%e2
800069bc:	00 90       	ret 

800069be <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
800069be:	02 5a       	mov %d10,%d5
800069c0:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
800069c2:	6d ff a7 fc 	call 80006310 <IfxScuCcu_getSriFrequency>
800069c6:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
800069c8:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
800069cc:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
800069d0:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
800069d2:	f6 29       	jnz %d2,800069e4 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
800069d4:	7b 00 28 84 	movh %d8,17024
800069d8:	4b 8a 41 80 	mul.f %d8,%d10,%d8
800069dc:	4b f8 51 80 	div.f %d8,%d8,%d15
800069e0:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800069e4:	6d 00 17 05 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800069e8:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800069ea:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800069ec:	6d 00 10 04 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
800069f0:	df 19 0f 00 	jeq %d9,1,80006a0e <IfxScuCcu_setCpuFrequency+0x50>
800069f4:	76 98       	jz %d9,80006a04 <IfxScuCcu_setCpuFrequency+0x46>
800069f6:	df 29 11 80 	jne %d9,2,80006a18 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
800069fa:	91 30 00 ff 	movh.a %a15,61443
800069fe:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006a02:	3c 0a       	j 80006a16 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
80006a04:	91 30 00 ff 	movh.a %a15,61443
80006a08:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006a0c:	3c 05       	j 80006a16 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
80006a0e:	91 30 00 ff 	movh.a %a15,61443
80006a12:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006a16:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a18:	02 a4       	mov %d4,%d10
80006a1a:	6d 00 7f 05 	call 80007518 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
80006a1e:	76 89       	jz %d8,80006a30 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
80006a20:	4b 08 61 81 	utof %d8,%d8
80006a24:	7b 00 c8 23 	movh %d2,15488
80006a28:	4b 28 41 80 	mul.f %d8,%d8,%d2
80006a2c:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
80006a30:	02 f2       	mov %d2,%d15
80006a32:	00 90       	ret 

80006a34 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006a34:	91 30 00 ff 	movh.a %a15,61443
80006a38:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
80006a3c:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006a3e:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006a40:	6d ff 46 fb 	call 800060cc <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
80006a44:	4b 82 51 20 	div.f %d2,%d2,%d8
80006a48:	4b 02 31 31 	ftoiz %d3,%d2
80006a4c:	4b 03 41 41 	itof %d4,%d3
80006a50:	6b 04 31 22 	sub.f %d2,%d2,%d4
80006a54:	7b 00 f0 43 	movh %d4,16128
80006a58:	4b 42 01 20 	cmp.f %d2,%d2,%d4
80006a5c:	37 02 61 21 	extr.u %d2,%d2,2,1
80006a60:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80006a62:	82 13       	mov %d3,1
80006a64:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
80006a68:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
80006a6c:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
80006a70:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
80006a74:	8f 12 c0 31 	andn %d3,%d2,1
80006a78:	02 92       	mov %d2,%d9
80006a7a:	8b 74 a0 92 	ge.u %d9,%d4,7
80006a7e:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006a82:	6d 00 c8 04 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a86:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006a88:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a8a:	6d 00 c1 03 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
80006a8e:	40 f2       	mov.aa %a2,%a15
80006a90:	54 22       	ld.w %d2,[%a2]
80006a92:	91 30 00 ff 	movh.a %a15,61443
80006a96:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006a9a:	bf 02 fb 7f 	jlt %d2,0,80006a90 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
80006a9e:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
80006aa2:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006aa6:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
80006aa8:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006aaa:	6d 00 37 05 	call 80007518 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
80006aae:	6d ff 0f fb 	call 800060cc <IfxScuCcu_getSourceFrequency>
80006ab2:	4c f0       	ld.w %d15,[%a15]0
80006ab4:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006ab8:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006abc:	4b f2 51 20 	div.f %d2,%d2,%d15
80006ac0:	00 90       	ret 

80006ac2 <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
80006ac2:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006ac4:	6d 00 a7 04 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>
80006ac8:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006aca:	6d ff 84 fa 	call 80005fd2 <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006ace:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006ad0:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006ad2:	6d 00 9d 03 	call 8000720c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006ad6:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006ada:	91 30 00 ff 	movh.a %a15,61443
80006ade:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006ae2:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006ae4:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006ae8:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006aea:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006aee:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006af2:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006af6:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006af8:	6d 00 10 05 	call 80007518 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006afc:	6d ff 6b fa 	call 80005fd2 <IfxScuCcu_getPllErayVcoFrequency>
80006b00:	4c f0       	ld.w %d15,[%a15]0
80006b02:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006b06:	c2 1f       	add %d15,1
80006b08:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006b0c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b10:	00 90       	ret 

80006b12 <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
80006b12:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006b14:	6d 00 7f 04 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>
80006b18:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b1a:	6d ff b7 fa 	call 80006088 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006b1e:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b20:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006b22:	6d 00 75 03 	call 8000720c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b26:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006b2a:	91 30 00 ff 	movh.a %a15,61443
80006b2e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006b32:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b34:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006b38:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006b3a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006b3e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006b42:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006b46:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006b48:	6d 00 e8 04 	call 80007518 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
80006b4c:	6d ff 9e fa 	call 80006088 <IfxScuCcu_getPllVcoFrequency>
80006b50:	4c f0       	ld.w %d15,[%a15]0
80006b52:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006b56:	c2 1f       	add %d15,1
80006b58:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
80006b5c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b60:	00 90       	ret 

80006b62 <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
80006b62:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006b64:	6d ff b4 fa 	call 800060cc <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006b68:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b6c:	82 24       	mov %d4,2
80006b6e:	4b 02 71 21 	ftouz %d2,%d2
80006b72:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
80006b76:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006b7a:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
80006b7e:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006b82:	8f 14 c0 f1 	andn %d15,%d4,1
80006b86:	02 a4       	mov %d4,%d10
80006b88:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006b8c:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006b90:	6d 00 23 04 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
80006b94:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006b96:	6d 00 3e 04 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b9a:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006b9c:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b9e:	6d 00 1c 03 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006ba2:	91 30 00 ff 	movh.a %a15,61443
80006ba6:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006baa:	48 02       	ld.w %d2,[%a15]0
80006bac:	3b 00 3e f0 	mov %d15,992
80006bb0:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006bb2:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006bb4:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006bb6:	6d 00 45 04 	call 80007440 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bba:	02 94       	mov %d4,%d9
80006bbc:	6d 00 28 03 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bc0:	91 30 00 2f 	movh.a %a2,61443
80006bc4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bc8:	4c 20       	ld.w %d15,[%a2]0
80006bca:	91 30 00 ff 	movh.a %a15,61443
80006bce:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bd2:	bf 0f fb 7f 	jlt %d15,0,80006bc8 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006bd6:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bd8:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006bda:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006bde:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006be2:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006be4:	6d 00 9a 04 	call 80007518 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006be8:	02 84       	mov %d4,%d8
80006bea:	6d 00 f6 02 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006bee:	91 30 00 ff 	movh.a %a15,61443
80006bf2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006bf6:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006bf8:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006bfa:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006bfe:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006c00:	6d 00 20 04 	call 80007440 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c04:	91 30 00 ff 	movh.a %a15,61443
80006c08:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c0c:	4c f0       	ld.w %d15,[%a15]0
80006c0e:	bf 0f ff 7f 	jlt %d15,0,80006c0c <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006c12:	1d ff 1e fb 	j 8000624e <IfxScuCcu_getSpbFrequency>

80006c16 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006c16:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006c18:	6d ff 5a fa 	call 800060cc <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006c1c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006c20:	4b 02 31 31 	ftoiz %d3,%d2
80006c24:	4b 03 41 f1 	itof %d15,%d3
80006c28:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006c2c:	7b 00 f0 f3 	movh %d15,16128
80006c30:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006c34:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006c38:	82 12       	mov %d2,1
80006c3a:	42 3f       	add %d15,%d3
80006c3c:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
80006c40:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
80006c44:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
80006c46:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
80006c4a:	8f 1f c0 21 	andn %d2,%d15,1
80006c4e:	02 9f       	mov %d15,%d9
80006c50:	8b 73 a0 92 	ge.u %d9,%d3,7
80006c54:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006c58:	6d 00 dd 03 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c5c:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006c5e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c60:	6d 00 d6 02 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c64:	91 30 00 2f 	movh.a %a2,61443
80006c68:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c6c:	4c 20       	ld.w %d15,[%a2]0
80006c6e:	91 30 00 ff 	movh.a %a15,61443
80006c72:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c76:	bf 0f fb 7f 	jlt %d15,0,80006c6c <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006c7a:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006c7c:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006c7e:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006c82:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006c86:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006c88:	6d 00 48 04 	call 80007518 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c8c:	4c f0       	ld.w %d15,[%a15]0
80006c8e:	bf 0f ff 7f 	jlt %d15,0,80006c8c <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006c92:	1d ff 3f fb 	j 80006310 <IfxScuCcu_getSriFrequency>

80006c96 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006c96:	91 30 00 ff 	movh.a %a15,61443
80006c9a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c9e:	4c f0       	ld.w %d15,[%a15]0
80006ca0:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006ca4:	df 0f 81 00 	jeq %d15,0,80006da6 <IfxScuCcu_switchToBackupClock+0x110>
80006ca8:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006caa:	6d 00 b4 03 	call 80007412 <IfxScuWdt_getSafetyWatchdogPassword>
80006cae:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006cb0:	6d 00 93 03 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006cb4:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006cb6:	02 28       	mov %d8,%d2
80006cb8:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006cbc:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006cc0:	91 30 00 df 	movh.a %a13,61443
80006cc4:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006cc6:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006cca:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006cce:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006cd2:	6e 1b       	jz %d15,80006d08 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006cd4:	02 94       	mov %d4,%d9
80006cd6:	6d 00 9b 02 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006cda:	54 e2       	ld.w %d2,[%a14]
80006cdc:	6f 52 ff 7f 	jz.t %d2,5,80006cda <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006ce0:	c8 12       	ld.a %a2,[%a15]4
80006ce2:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006ce4:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006ce6:	30 c2       	add.a %a2,%a12
80006ce8:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006cea:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006cec:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006cf0:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cf2:	6d 00 13 04 	call 80007518 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006cf6:	c8 12       	ld.a %a2,[%a15]4
80006cf8:	30 c2       	add.a %a2,%a12
80006cfa:	19 24 04 00 	ld.w %d4,[%a2]4
80006cfe:	6d ff f9 f9 	call 800060f0 <IfxScuCcu_wait>
80006d02:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006d06:	3c e6       	j 80006cd2 <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006d08:	02 84       	mov %d4,%d8
80006d0a:	6d 00 66 02 	call 800071d6 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006d0e:	91 30 00 ff 	movh.a %a15,61443
80006d12:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006d16:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006d18:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d1a:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006d1c:	96 08       	or %d15,8
80006d1e:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006d20:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d24:	6d 00 8e 03 	call 80007440 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006d28:	02 94       	mov %d4,%d9
80006d2a:	6d 00 71 02 	call 8000720c <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006d2e:	91 30 00 2f 	movh.a %a2,61443
80006d32:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006d36:	4c 20       	ld.w %d15,[%a2]0
80006d38:	91 30 00 ff 	movh.a %a15,61443
80006d3c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006d40:	bf 0f fb 7f 	jlt %d15,0,80006d36 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006d44:	4c f0       	ld.w %d15,[%a15]0
80006d46:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006d4a:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006d4c:	4c f0       	ld.w %d15,[%a15]0
80006d4e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006d52:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006d54:	4c f0       	ld.w %d15,[%a15]0
80006d56:	bf 0f ff 7f 	jlt %d15,0,80006d54 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006d5a:	91 30 00 ff 	movh.a %a15,61443
80006d5e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006d62:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d64:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006d66:	96 10       	or %d15,16
80006d68:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006d6a:	4c f0       	ld.w %d15,[%a15]0
80006d6c:	8f 0f c4 f1 	andn %d15,%d15,64
80006d70:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d72:	6d 00 d3 03 	call 80007518 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d76:	91 30 00 ff 	movh.a %a15,61443
80006d7a:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006d7e:	02 84       	mov %d4,%d8
80006d80:	6d 00 2b 02 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006d84:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d86:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d8a:	96 08       	or %d15,8
80006d8c:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d8e:	91 30 00 ff 	movh.a %a15,61443
80006d92:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006d96:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d98:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d9a:	8f 8f c0 f1 	andn %d15,%d15,8
80006d9e:	a6 2f       	or %d15,%d2
80006da0:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006da2:	1d 00 4f 03 	j 80007440 <IfxScuWdt_setCpuEndinit>
80006da6:	00 90       	ret 

80006da8 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006da8:	91 30 00 ff 	movh.a %a15,61443
80006dac:	7b f0 0f f0 	movh %d15,255
80006db0:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006db4:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006db8:	00 90       	ret 

80006dba <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006dba:	1b 04 01 40 	addi %d4,%d4,16
80006dbe:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006dc0:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006dc4:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006dc8:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006dcc:	68 0f       	st.w [%a15]0,%d15
80006dce:	00 90       	ret 

80006dd0 <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dd0:	8f f4 1f f0 	sh %d15,%d4,-1
80006dd4:	06 2f       	sh %d15,2
80006dd6:	60 ff       	mov.a %a15,%d15
80006dd8:	d9 ff 00 06 	lea %a15,[%a15]24576
80006ddc:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006de0:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006de4:	6f 04 05 00 	jz.t %d4,0,80006dee <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006de8:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006dec:	3c 03       	j 80006df2 <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006dee:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006df2:	59 ff 10 80 	st.w [%a15]528,%d15
80006df6:	00 90       	ret 

80006df8 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006df8:	8f f4 1f f0 	sh %d15,%d4,-1
80006dfc:	06 2f       	sh %d15,2
80006dfe:	60 ff       	mov.a %a15,%d15
80006e00:	d9 ff 00 06 	lea %a15,[%a15]24576
80006e04:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006e08:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e0c:	6f 04 05 00 	jz.t %d4,0,80006e16 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006e10:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006e14:	3c 03       	j 80006e1a <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006e16:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006e1a:	59 ff 2c 80 	st.w [%a15]556,%d15
80006e1e:	00 90       	ret 

80006e20 <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e20:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006e24:	91 30 00 ff 	movh.a %a15,61443
80006e28:	1b 4f 08 f0 	addi %d15,%d15,132
80006e2c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e30:	8f 75 00 51 	and %d5,%d5,7
80006e34:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e36:	6f 04 08 00 	jz.t %d4,0,80006e46 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006e3a:	4c f0       	ld.w %d15,[%a15]0
80006e3c:	8f c5 01 50 	sh %d5,%d5,28
80006e40:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006e44:	3c 06       	j 80006e50 <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006e46:	4c f0       	ld.w %d15,[%a15]0
80006e48:	8f c5 00 50 	sh %d5,%d5,12
80006e4c:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006e50:	a6 f5       	or %d5,%d15
80006e52:	68 05       	st.w [%a15]0,%d5
80006e54:	00 90       	ret 

80006e56 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e56:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e5a:	91 30 00 ff 	movh.a %a15,61443
80006e5e:	1b 4f 08 f0 	addi %d15,%d15,132
80006e62:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e66:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e68:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e6a:	6f 04 05 00 	jz.t %d4,0,80006e74 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e6e:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006e72:	3c 03       	j 80006e78 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006e74:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006e78:	68 0f       	st.w [%a15]0,%d15
80006e7a:	00 90       	ret 

80006e7c <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e7c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e80:	91 30 00 ff 	movh.a %a15,61443
80006e84:	1b 4f 08 f0 	addi %d15,%d15,132
80006e88:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e8c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e8e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e90:	6f 04 05 00 	jz.t %d4,0,80006e9a <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e94:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006e98:	3c 03       	j 80006e9e <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006e9a:	8f 0f d0 f1 	andn %d15,%d15,256
80006e9e:	68 0f       	st.w [%a15]0,%d15
80006ea0:	00 90       	ret 

80006ea2 <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ea2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006ea6:	91 30 00 ff 	movh.a %a15,61443
80006eaa:	1b bf 08 f0 	addi %d15,%d15,139
80006eae:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006eb2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006eb4:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006eb6:	6f 04 05 00 	jz.t %d4,0,80006ec0 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006eba:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006ebe:	3c 03       	j 80006ec4 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006ec0:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006ec4:	68 0f       	st.w [%a15]0,%d15
80006ec6:	00 90       	ret 

80006ec8 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ec8:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006ecc:	91 30 00 ff 	movh.a %a15,61443
80006ed0:	1b 4f 08 f0 	addi %d15,%d15,132
80006ed4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ed8:	90 ff       	addsc.a %a15,%a15,%d15,2
80006eda:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006edc:	6f 04 05 00 	jz.t %d4,0,80006ee6 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006ee0:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006ee4:	3c 03       	j 80006eea <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006ee6:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006eea:	68 0f       	st.w [%a15]0,%d15
80006eec:	00 90       	ret 

80006eee <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006eee:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006ef2:	91 30 00 ff 	movh.a %a15,61443
80006ef6:	1b 4f 08 f0 	addi %d15,%d15,132
80006efa:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006efe:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f00:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f02:	6f 04 05 00 	jz.t %d4,0,80006f0c <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006f06:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006f0a:	3c 03       	j 80006f10 <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006f0c:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006f10:	68 0f       	st.w [%a15]0,%d15
80006f12:	00 90       	ret 

80006f14 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f14:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006f18:	91 30 00 ff 	movh.a %a15,61443
80006f1c:	1b 4f 08 f0 	addi %d15,%d15,132
80006f20:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f24:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f26:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f28:	6f 04 05 00 	jz.t %d4,0,80006f32 <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006f2c:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006f30:	3c 03       	j 80006f36 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006f32:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006f36:	68 0f       	st.w [%a15]0,%d15
80006f38:	00 90       	ret 

80006f3a <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f3a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006f3e:	91 30 00 ff 	movh.a %a15,61443
80006f42:	1b 4f 08 f0 	addi %d15,%d15,132
80006f46:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f4a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f4c:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f4e:	6f 04 05 00 	jz.t %d4,0,80006f58 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006f52:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006f56:	3c 03       	j 80006f5c <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006f58:	8f 0f 50 f1 	or %d15,%d15,256
80006f5c:	68 0f       	st.w [%a15]0,%d15
80006f5e:	00 90       	ret 

80006f60 <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f60:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f64:	91 30 00 ff 	movh.a %a15,61443
80006f68:	1b bf 08 f0 	addi %d15,%d15,139
80006f6c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f70:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f72:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f74:	6f 04 05 00 	jz.t %d4,0,80006f7e <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f78:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006f7c:	3c 03       	j 80006f82 <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006f7e:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006f82:	68 0f       	st.w [%a15]0,%d15
80006f84:	00 90       	ret 

80006f86 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f86:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f8a:	91 30 00 ff 	movh.a %a15,61443
80006f8e:	1b 4f 08 f0 	addi %d15,%d15,132
80006f92:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f96:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f98:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f9a:	6f 04 05 00 	jz.t %d4,0,80006fa4 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f9e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006fa2:	3c 03       	j 80006fa8 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006fa4:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006fa8:	68 0f       	st.w [%a15]0,%d15
80006faa:	00 90       	ret 

80006fac <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006fac:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006fb0:	91 30 00 ff 	movh.a %a15,61443
80006fb4:	1b 4f 08 f0 	addi %d15,%d15,132
80006fb8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fbc:	90 ff       	addsc.a %a15,%a15,%d15,2
80006fbe:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006fc0:	6f 04 05 00 	jz.t %d4,0,80006fca <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006fc4:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006fc8:	3c 03       	j 80006fce <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006fca:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006fce:	68 0f       	st.w [%a15]0,%d15
80006fd0:	00 90       	ret 

80006fd2 <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006fd2:	91 30 00 ff 	movh.a %a15,61443
80006fd6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fda:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006fde:	00 90       	ret 

80006fe0 <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006fe0:	91 30 00 ff 	movh.a %a15,61443
80006fe4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fe8:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006fec:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006ff0:	00 90       	ret 

80006ff2 <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ff2:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006ff6:	91 30 00 ff 	movh.a %a15,61443
80006ffa:	1b 4f 08 f0 	addi %d15,%d15,132
80006ffe:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007002:	90 ff       	addsc.a %a15,%a15,%d15,2
80007004:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80007006:	6f 04 05 00 	jz.t %d4,0,80007010 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
8000700a:	b7 02 10 20 	insert %d2,%d2,0,0,16
8000700e:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80007010:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80007014:	00 90       	ret 

80007016 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80007016:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
8000701a:	91 30 00 ff 	movh.a %a15,61443
8000701e:	1b bf 08 f0 	addi %d15,%d15,139
80007022:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007026:	90 ff       	addsc.a %a15,%a15,%d15,2
80007028:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
8000702a:	6f 04 05 00 	jz.t %d4,0,80007034 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
8000702e:	b7 02 10 20 	insert %d2,%d2,0,0,16
80007032:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80007034:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80007038:	00 90       	ret 

8000703a <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
8000703a:	91 30 00 ff 	movh.a %a15,61443
8000703e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007042:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80007046:	57 02 61 24 	extr.u %d2,%d2,%d4,1
8000704a:	00 90       	ret 

8000704c <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
8000704c:	91 30 00 ff 	movh.a %a15,61443
80007050:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007054:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80007058:	00 90       	ret 

8000705a <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
8000705a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
8000705e:	91 30 00 ff 	movh.a %a15,61443
80007062:	1b 4f 08 f0 	addi %d15,%d15,132
80007066:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
8000706a:	8f 75 00 51 	and %d5,%d5,7
8000706e:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80007070:	6f 04 08 00 	jz.t %d4,0,80007080 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80007074:	4c f0       	ld.w %d15,[%a15]0
80007076:	8f 45 01 50 	sh %d5,%d5,20
8000707a:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
8000707e:	3c 05       	j 80007088 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80007080:	4c f0       	ld.w %d15,[%a15]0
80007082:	06 45       	sh %d5,4
80007084:	8f 0f c7 f1 	andn %d15,%d15,112
80007088:	a6 f5       	or %d5,%d15
8000708a:	68 05       	st.w [%a15]0,%d5
8000708c:	00 90       	ret 

8000708e <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
8000708e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80007090:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80007094:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80007098:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
8000709c:	68 04       	st.w [%a15]0,%d4
8000709e:	00 90       	ret 

800070a0 <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
800070a0:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
800070a4:	6f 04 04 00 	jz.t %d4,0,800070ac <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
800070a8:	1b 05 01 50 	addi %d5,%d5,16
800070ac:	06 2f       	sh %d15,2
800070ae:	60 f2       	mov.a %a2,%d15
800070b0:	d9 2f 00 06 	lea %a15,[%a2]24576
800070b4:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
800070b8:	19 ff 2c 80 	ld.w %d15,[%a15]556
800070bc:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
800070c0:	0f 56 00 50 	sh %d5,%d6,%d5
800070c4:	a6 f5       	or %d5,%d15
800070c6:	59 f5 2c 80 	st.w [%a15]556,%d5
800070ca:	00 90       	ret 

800070cc <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
800070cc:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
800070d0:	91 30 00 ff 	movh.a %a15,61443
800070d4:	1b bf 08 f0 	addi %d15,%d15,139
800070d8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
800070dc:	8f 35 00 51 	and %d5,%d5,3
800070e0:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
800070e2:	6f 04 06 00 	jz.t %d4,0,800070ee <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
800070e6:	4c f0       	ld.w %d15,[%a15]0
800070e8:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
800070ec:	3c 07       	j 800070fa <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
800070ee:	4c f0       	ld.w %d15,[%a15]0
800070f0:	8f e5 00 50 	sh %d5,%d5,14
800070f4:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
800070f8:	a6 f5       	or %d5,%d15
800070fa:	68 05       	st.w [%a15]0,%d5
800070fc:	00 90       	ret 

800070fe <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800070fe:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007102:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
80007104:	53 cf 20 f0 	mul %d15,%d15,12
80007108:	60 f2       	mov.a %a2,%d15
8000710a:	d9 2f 00 46 	lea %a15,[%a2]24832
8000710e:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80007112:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007114:	2e 16       	jz.t %d15,1,80007120 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007116:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000711a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
8000711e:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007120:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007124:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007128:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000712c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000712e:	4c f0       	ld.w %d15,[%a15]0
80007130:	6f 0f ff 7f 	jz.t %d15,0,8000712e <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80007134:	00 90       	ret 

80007136 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007136:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000713a:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000713c:	53 cf 20 f0 	mul %d15,%d15,12
80007140:	60 f2       	mov.a %a2,%d15
80007142:	d9 2f 00 46 	lea %a15,[%a2]24832
80007146:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
8000714a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000714c:	2e 16       	jz.t %d15,1,80007158 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000714e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007152:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007156:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007158:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
8000715c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80007160:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007164:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80007166:	4c f0       	ld.w %d15,[%a15]0
80007168:	6f 0f ff 7f 	jz.t %d15,0,80007166 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
8000716c:	00 90       	ret 

8000716e <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
8000716e:	91 30 00 ff 	movh.a %a15,61443
80007172:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007176:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007178:	2e 16       	jz.t %d15,1,80007184 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000717a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000717e:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80007182:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007184:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007188:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
8000718c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80007190:	91 30 00 ff 	movh.a %a15,61443
80007194:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007198:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000719a:	4c f0       	ld.w %d15,[%a15]0
8000719c:	6f 0f ff 7f 	jz.t %d15,0,8000719a <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
800071a0:	00 90       	ret 

800071a2 <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
800071a2:	91 30 00 ff 	movh.a %a15,61443
800071a6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071aa:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800071ac:	2e 16       	jz.t %d15,1,800071b8 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800071ae:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800071b2:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800071b6:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800071b8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800071bc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
800071c0:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
800071c4:	91 30 00 ff 	movh.a %a15,61443
800071c8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071cc:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
800071ce:	4c f0       	ld.w %d15,[%a15]0
800071d0:	6f 0f ff 7f 	jz.t %d15,0,800071ce <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
800071d4:	00 90       	ret 

800071d6 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800071d6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071da:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800071dc:	53 cf 20 f0 	mul %d15,%d15,12
800071e0:	06 24       	sh %d4,2
800071e2:	60 f2       	mov.a %a2,%d15
800071e4:	d9 2f 00 46 	lea %a15,[%a2]24832
800071e8:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071ec:	4c f0       	ld.w %d15,[%a15]0
800071ee:	2e 16       	jz.t %d15,1,800071fa <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071f0:	4c f0       	ld.w %d15,[%a15]0
800071f2:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071f6:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071f8:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071fa:	4c f0       	ld.w %d15,[%a15]0
800071fc:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007200:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007202:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007204:	4c f0       	ld.w %d15,[%a15]0
80007206:	6f 0f ff ff 	jnz.t %d15,0,80007204 <IfxScuWdt_clearCpuEndinit+0x2e>
}
8000720a:	00 90       	ret 

8000720c <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000720c:	91 30 00 ff 	movh.a %a15,61443
80007210:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007214:	4c f0       	ld.w %d15,[%a15]0
80007216:	06 24       	sh %d4,2
80007218:	2e 16       	jz.t %d15,1,80007224 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000721a:	4c f0       	ld.w %d15,[%a15]0
8000721c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007220:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007222:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007224:	91 30 00 ff 	movh.a %a15,61443
80007228:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000722c:	4c f0       	ld.w %d15,[%a15]0
8000722e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007232:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007234:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007236:	4c f0       	ld.w %d15,[%a15]0
80007238:	6f 0f ff ff 	jnz.t %d15,0,80007236 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
8000723c:	00 90       	ret 

8000723e <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000723e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007242:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80007244:	53 cf 20 f0 	mul %d15,%d15,12
80007248:	06 24       	sh %d4,2
8000724a:	60 f2       	mov.a %a2,%d15
8000724c:	d9 2f 00 46 	lea %a15,[%a2]24832
80007250:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007254:	4c f0       	ld.w %d15,[%a15]0
80007256:	2e 16       	jz.t %d15,1,80007262 <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007258:	4c f0       	ld.w %d15,[%a15]0
8000725a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000725e:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007260:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007262:	4c f0       	ld.w %d15,[%a15]0
80007264:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007268:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000726a:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
8000726c:	4c f0       	ld.w %d15,[%a15]0
8000726e:	6f 0f ff ff 	jnz.t %d15,0,8000726c <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80007272:	4c f1       	ld.w %d15,[%a15]4
80007274:	96 08       	or %d15,8
80007276:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007278:	4c f0       	ld.w %d15,[%a15]0
8000727a:	2e 16       	jz.t %d15,1,80007286 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000727c:	4c f0       	ld.w %d15,[%a15]0
8000727e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007282:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007284:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007286:	4c f0       	ld.w %d15,[%a15]0
80007288:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000728c:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000728e:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007290:	4c f0       	ld.w %d15,[%a15]0
80007292:	6f 0f ff 7f 	jz.t %d15,0,80007290 <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007296:	00 90       	ret 

80007298 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007298:	91 30 00 ff 	movh.a %a15,61443
8000729c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072a0:	4c f0       	ld.w %d15,[%a15]0
800072a2:	06 24       	sh %d4,2
800072a4:	2e 16       	jz.t %d15,1,800072b0 <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072a6:	4c f0       	ld.w %d15,[%a15]0
800072a8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072ac:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072ae:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072b0:	91 30 00 ff 	movh.a %a15,61443
800072b4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072b8:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072ba:	40 f2       	mov.aa %a2,%a15
800072bc:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072c0:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072c2:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072c4:	4c 20       	ld.w %d15,[%a2]0
800072c6:	91 30 00 ff 	movh.a %a15,61443
800072ca:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072ce:	6f 0f fb ff 	jnz.t %d15,0,800072c4 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
800072d2:	91 30 00 2f 	movh.a %a2,61443
800072d6:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
800072da:	4c 20       	ld.w %d15,[%a2]0
800072dc:	96 08       	or %d15,8
800072de:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072e0:	4c f0       	ld.w %d15,[%a15]0
800072e2:	2e 16       	jz.t %d15,1,800072ee <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072e4:	4c f0       	ld.w %d15,[%a15]0
800072e6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072ea:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072ec:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072ee:	91 30 00 ff 	movh.a %a15,61443
800072f2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072f6:	4c f0       	ld.w %d15,[%a15]0
800072f8:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072fc:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072fe:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007300:	4c f0       	ld.w %d15,[%a15]0
80007302:	6f 0f ff 7f 	jz.t %d15,0,80007300 <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007306:	00 90       	ret 

80007308 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007308:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000730c:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000730e:	53 cf 20 f0 	mul %d15,%d15,12
80007312:	06 24       	sh %d4,2
80007314:	60 f2       	mov.a %a2,%d15
80007316:	d9 2f 00 46 	lea %a15,[%a2]24832
8000731a:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000731e:	4c f0       	ld.w %d15,[%a15]0
80007320:	2e 16       	jz.t %d15,1,8000732c <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007322:	4c f0       	ld.w %d15,[%a15]0
80007324:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007328:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000732a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000732c:	4c f0       	ld.w %d15,[%a15]0
8000732e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007332:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007334:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007336:	4c f0       	ld.w %d15,[%a15]0
80007338:	6f 0f ff ff 	jnz.t %d15,0,80007336 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
8000733c:	4c f1       	ld.w %d15,[%a15]4
8000733e:	8f 8f c0 f1 	andn %d15,%d15,8
80007342:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007344:	4c f0       	ld.w %d15,[%a15]0
80007346:	2e 16       	jz.t %d15,1,80007352 <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007348:	4c f0       	ld.w %d15,[%a15]0
8000734a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000734e:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007350:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007352:	4c f0       	ld.w %d15,[%a15]0
80007354:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007358:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000735a:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000735c:	4c f0       	ld.w %d15,[%a15]0
8000735e:	6f 0f ff 7f 	jz.t %d15,0,8000735c <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007362:	00 90       	ret 

80007364 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007364:	91 30 00 ff 	movh.a %a15,61443
80007368:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000736c:	4c f0       	ld.w %d15,[%a15]0
8000736e:	06 24       	sh %d4,2
80007370:	2e 16       	jz.t %d15,1,8000737c <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007372:	4c f0       	ld.w %d15,[%a15]0
80007374:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007378:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000737a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000737c:	91 30 00 ff 	movh.a %a15,61443
80007380:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007384:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007386:	40 f2       	mov.aa %a2,%a15
80007388:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000738c:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000738e:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007390:	4c 20       	ld.w %d15,[%a2]0
80007392:	91 30 00 ff 	movh.a %a15,61443
80007396:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000739a:	6f 0f fb ff 	jnz.t %d15,0,80007390 <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
8000739e:	91 30 00 2f 	movh.a %a2,61443
800073a2:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
800073a6:	4c 20       	ld.w %d15,[%a2]0
800073a8:	8f 8f c0 f1 	andn %d15,%d15,8
800073ac:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800073ae:	4c f0       	ld.w %d15,[%a15]0
800073b0:	2e 16       	jz.t %d15,1,800073bc <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800073b2:	4c f0       	ld.w %d15,[%a15]0
800073b4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800073b8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800073ba:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800073bc:	91 30 00 ff 	movh.a %a15,61443
800073c0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800073c4:	4c f0       	ld.w %d15,[%a15]0
800073c6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800073ca:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800073cc:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800073ce:	4c f0       	ld.w %d15,[%a15]0
800073d0:	6f 0f ff 7f 	jz.t %d15,0,800073ce <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800073d4:	00 90       	ret 

800073d6 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800073d6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073da:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800073dc:	53 cf 20 f0 	mul %d15,%d15,12
800073e0:	60 f2       	mov.a %a2,%d15
800073e2:	d9 2f 00 46 	lea %a15,[%a2]24832
800073e6:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
800073ea:	48 02       	ld.w %d2,[%a15]0
800073ec:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
800073f0:	8f f2 83 21 	xor %d2,%d2,63
800073f4:	00 90       	ret 

800073f6 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800073f6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073fa:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800073fc:	53 cf 20 f0 	mul %d15,%d15,12
80007400:	60 f2       	mov.a %a2,%d15
80007402:	d9 2f 00 46 	lea %a15,[%a2]24832
80007406:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
8000740a:	48 02       	ld.w %d2,[%a15]0
}
8000740c:	8f 12 00 21 	and %d2,%d2,1
80007410:	00 90       	ret 

80007412 <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007412:	91 30 00 ff 	movh.a %a15,61443
80007416:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000741a:	48 02       	ld.w %d2,[%a15]0
8000741c:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80007420:	8f f2 83 21 	xor %d2,%d2,63
80007424:	00 90       	ret 

80007426 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
80007426:	da 3c       	mov %d15,60
80007428:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
8000742a:	82 cf       	mov %d15,-4
8000742c:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000742e:	82 0f       	mov %d15,0
80007430:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
80007432:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007434:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007436:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007438:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
8000743a:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
8000743c:	2c 4a       	st.b [%a4]10,%d15
8000743e:	00 90       	ret 

80007440 <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007440:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007444:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80007446:	53 cf 20 f0 	mul %d15,%d15,12
8000744a:	06 24       	sh %d4,2
8000744c:	60 f2       	mov.a %a2,%d15
8000744e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007452:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007456:	4c f0       	ld.w %d15,[%a15]0
80007458:	2e 16       	jz.t %d15,1,80007464 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000745a:	4c f0       	ld.w %d15,[%a15]0
8000745c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007460:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007462:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007464:	4c f0       	ld.w %d15,[%a15]0
80007466:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000746a:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000746c:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000746e:	4c f0       	ld.w %d15,[%a15]0
80007470:	6f 0f ff 7f 	jz.t %d15,0,8000746e <IfxScuWdt_setCpuEndinit+0x2e>
}
80007474:	00 90       	ret 

80007476 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
80007476:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
80007478:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
8000747a:	6f 12 0b 00 	jz.t %d2,1,80007490 <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000747e:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
80007482:	37 02 6e 31 	extr.u %d3,%d2,2,14
80007486:	8f f3 83 31 	xor %d3,%d3,63
8000748a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
8000748e:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
80007490:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
80007492:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
80007496:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000749a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
8000749e:	b9 53 02 00 	ld.hu %d3,[%a5]2
800074a2:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800074a6:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800074a8:	54 42       	ld.w %d2,[%a4]
800074aa:	6f 02 ff ff 	jnz.t %d2,0,800074a8 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
800074ae:	39 52 04 00 	ld.bu %d2,[%a5]4
800074b2:	df 12 0a 00 	jeq %d2,1,800074c6 <IfxScuWdt_initCpuWatchdog+0x50>
800074b6:	76 26       	jz %d2,800074c2 <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
800074b8:	8b 22 20 22 	ne %d2,%d2,2
800074bc:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800074c0:	3c 07       	j 800074ce <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
800074c2:	82 0f       	mov %d15,0
        break;
800074c4:	3c 05       	j 800074ce <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800074c6:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
800074ca:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
800074ce:	39 52 05 00 	ld.bu %d2,[%a5]5
800074d2:	8b 02 20 22 	ne %d2,%d2,0
800074d6:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
800074da:	39 52 06 00 	ld.bu %d2,[%a5]6
800074de:	8b 02 20 22 	ne %d2,%d2,0
800074e2:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
800074e6:	39 52 07 00 	ld.bu %d2,[%a5]7
800074ea:	8b 02 20 22 	ne %d2,%d2,0
800074ee:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
800074f2:	39 52 08 00 	ld.bu %d2,[%a5]8
800074f6:	8b 02 20 22 	ne %d2,%d2,0
800074fa:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
800074fe:	39 52 09 00 	ld.bu %d2,[%a5]9
80007502:	8b 02 20 22 	ne %d2,%d2,0
80007506:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000750a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
8000750c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007510:	1d ff 98 ff 	j 80007440 <IfxScuWdt_setCpuEndinit>

80007514 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
80007514:	1d ff 96 ff 	j 80007440 <IfxScuWdt_setCpuEndinit>

80007518 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007518:	91 30 00 ff 	movh.a %a15,61443
8000751c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007520:	4c f0       	ld.w %d15,[%a15]0
80007522:	06 24       	sh %d4,2
80007524:	2e 16       	jz.t %d15,1,80007530 <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007526:	4c f0       	ld.w %d15,[%a15]0
80007528:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000752c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000752e:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007530:	91 30 00 ff 	movh.a %a15,61443
80007534:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007538:	4c f0       	ld.w %d15,[%a15]0
8000753a:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000753e:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007540:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007542:	4c f0       	ld.w %d15,[%a15]0
80007544:	6f 0f ff 7f 	jz.t %d15,0,80007542 <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007548:	00 90       	ret 

8000754a <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
8000754a:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
8000754c:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
8000754e:	6f 12 0b 00 	jz.t %d2,1,80007564 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007552:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
80007556:	37 02 6e 31 	extr.u %d3,%d2,2,14
8000755a:	8f f3 83 31 	xor %d3,%d3,63
8000755e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007562:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
80007564:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
80007566:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
8000756a:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000756e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
80007572:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007576:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
8000757a:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
8000757c:	54 42       	ld.w %d2,[%a4]
8000757e:	6f 02 ff ff 	jnz.t %d2,0,8000757c <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
80007582:	39 52 04 00 	ld.bu %d2,[%a5]4
80007586:	df 12 0a 00 	jeq %d2,1,8000759a <IfxScuWdt_initSafetyWatchdog+0x50>
8000758a:	76 26       	jz %d2,80007596 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
8000758c:	8b 22 20 22 	ne %d2,%d2,2
80007590:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007594:	3c 07       	j 800075a2 <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
80007596:	82 0f       	mov %d15,0
        break;
80007598:	3c 05       	j 800075a2 <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
8000759a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000759e:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
800075a2:	39 52 05 00 	ld.bu %d2,[%a5]5
800075a6:	8b 02 20 22 	ne %d2,%d2,0
800075aa:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
800075ae:	39 52 06 00 	ld.bu %d2,[%a5]6
800075b2:	8b 02 20 22 	ne %d2,%d2,0
800075b6:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
800075ba:	39 52 07 00 	ld.bu %d2,[%a5]7
800075be:	8b 02 20 22 	ne %d2,%d2,0
800075c2:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
800075c6:	39 52 08 00 	ld.bu %d2,[%a5]8
800075ca:	8b 02 20 22 	ne %d2,%d2,0
800075ce:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
800075d2:	39 52 09 00 	ld.bu %d2,[%a5]9
800075d6:	8b 02 20 22 	ne %d2,%d2,0
800075da:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
800075de:	39 52 0a 00 	ld.bu %d2,[%a5]10
800075e2:	8b 02 00 22 	eq %d2,%d2,0
800075e6:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
800075ea:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
800075ec:	b9 54 00 00 	ld.hu %d4,[%a5]0
800075f0:	1d ff 94 ff 	j 80007518 <IfxScuWdt_setSafetyEndinit>

800075f4 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
800075f4:	1d ff 92 ff 	j 80007518 <IfxScuWdt_setSafetyEndinit>

800075f8 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
800075f8:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
800075fc:	2e 07       	jz.t %d15,0,8000760a <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
800075fe:	3b 00 00 f3 	mov %d15,12288
80007602:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
80007606:	82 0f       	mov %d15,0
80007608:	3c 11       	j 8000762a <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
8000760a:	3b 10 0a 20 	mov %d2,161
8000760e:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
80007612:	da 5e       	mov %d15,94
80007614:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
80007618:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
8000761c:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
80007620:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
80007624:	6f 0f ed ff 	jnz.t %d15,0,800075fe <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
80007628:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
8000762a:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000762e:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
80007632:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007636:	00 90       	ret 

80007638 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007638:	0c 48       	ld.bu %d15,[%a4]8
8000763a:	d4 4c       	ld.a %a12,[%a4]
8000763c:	1b 0f 01 f0 	addi %d15,%d15,16
80007640:	16 ff       	and %d15,255
80007642:	99 4d 04 00 	ld.a %a13,[%a4]4
80007646:	02 f4       	mov %d4,%d15
80007648:	40 c4       	mov.aa %a4,%a12
8000764a:	6d ff 91 e8 	call 8000476c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
8000764e:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007650:	40 c4       	mov.aa %a4,%a12
80007652:	8f 32 c0 21 	andn %d2,%d2,3
80007656:	74 d2       	st.w [%a13],%d2
80007658:	02 f4       	mov %d4,%d15
8000765a:	1d ff 6d e8 	j 80004734 <IfxVadc_disableAccess>

8000765e <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
8000765e:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007660:	6d ff bb fe 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80007664:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007666:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80007668:	6d ff b7 fd 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
8000766c:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
8000766e:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
80007670:	8f 12 40 21 	or %d2,%d2,1
80007674:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007676:	1d ff e5 fe 	j 80007440 <IfxScuWdt_setCpuEndinit>

8000767a <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
8000767a:	99 42 04 00 	ld.a %a2,[%a4]4
8000767e:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
80007682:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
80007686:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
8000768a:	1b 02 06 f0 	addi %d15,%d2,96
8000768e:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
80007690:	e9 52 0c 00 	st.b [%a5]12,%d2
80007694:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
80007696:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
80007698:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
8000769c:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
8000769e:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
800076a2:	37 0f e1 35 	extr.u %d3,%d15,11,1
800076a6:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
800076aa:	37 0f 64 38 	extr.u %d3,%d15,16,4
800076ae:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
800076b2:	37 0f 61 3a 	extr.u %d3,%d15,20,1
800076b6:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
800076b8:	37 0f 62 32 	extr.u %d3,%d15,4,2
800076bc:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
800076c0:	37 0f 62 33 	extr.u %d3,%d15,6,2
800076c4:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
800076c8:	37 0f 64 36 	extr.u %d3,%d15,12,4
800076cc:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
800076d0:	37 0f 62 34 	extr.u %d3,%d15,8,2
800076d4:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
800076d8:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
800076dc:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
800076e0:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
800076e4:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
800076e6:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
800076e8:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
800076ec:	8f 12 80 21 	xor %d2,%d2,1
800076f0:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
800076f4:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800076f8:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
800076fc:	19 d2 20 40 	ld.w %d2,[%a13]288
80007700:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
80007702:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007706:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000770a:	0b 8f 10 48 	mov %e4,%d15,%d8
8000770e:	6d ff 60 e9 	call 800049ce <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007712:	54 22       	ld.w %d2,[%a2]
80007714:	6f a2 0a 00 	jz.t %d2,10,80007728 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
80007718:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
8000771a:	4c 20       	ld.w %d15,[%a2]0
8000771c:	16 ff       	and %d15,255
8000771e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
80007720:	4c 20       	ld.w %d15,[%a2]0
80007722:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007726:	3c 05       	j 80007730 <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
80007728:	82 0f       	mov %d15,0
8000772a:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
8000772c:	82 0f       	mov %d15,0
8000772e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
80007730:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007732:	0c ff       	ld.bu %d15,[%a15]15
80007734:	79 c2 00 00 	ld.b %d2,[%a12]0
80007738:	ff 8f 08 80 	jge.u %d15,8,80007748 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
8000773c:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007740:	06 22       	sh %d2,2
80007742:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
80007746:	3c 08       	j 80007756 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
80007748:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
8000774a:	19 d3 34 40 	ld.w %d3,[%a13]308
8000774e:	8f 2f 00 20 	sh %d2,%d15,2
80007752:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
80007756:	16 ff       	and %d15,255
80007758:	0b 8f 10 48 	mov %e4,%d15,%d8
8000775c:	6d ff 39 e9 	call 800049ce <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007760:	54 22       	ld.w %d2,[%a2]
80007762:	6f a2 0a 00 	jz.t %d2,10,80007776 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
80007766:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
80007768:	4c 20       	ld.w %d15,[%a2]0
8000776a:	16 ff       	and %d15,255
8000776c:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
8000776e:	4c 20       	ld.w %d15,[%a2]0
80007770:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007774:	3c 05       	j 8000777e <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
80007776:	82 0f       	mov %d15,0
80007778:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
8000777a:	82 0f       	mov %d15,0
8000777c:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
8000777e:	28 8f       	st.b [%a15]8,%d15
80007780:	00 90       	ret 

80007782 <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007782:	cc 41       	ld.a %a15,[%a4]4
80007784:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
80007786:	79 4f 00 00 	ld.b %d15,[%a4]0
8000778a:	08 8a       	ld.bu %d10,[%a15]8
8000778c:	c8 0f       	ld.a %a15,[%a15]0
8000778e:	1b 0f 06 f0 	addi %d15,%d15,96
80007792:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007794:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007796:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007798:	02 49       	mov %d9,%d4
8000779a:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
8000779c:	6d ff 9a e8 	call 800048d0 <IfxVadc_getAdcAnalogFrequency>
800077a0:	02 2f       	mov %d15,%d2
800077a2:	6d ff b0 e8 	call 80004902 <IfxVadc_getAdcModuleFrequency>
800077a6:	8f 38 00 81 	and %d8,%d8,3
800077aa:	74 a9       	st.w [%sp],%d9
800077ac:	40 f4       	mov.aa %a4,%a15
800077ae:	0b a8 10 48 	mov %e4,%d8,%d10
800077b2:	0b f2 10 68 	mov %e6,%d2,%d15
}
800077b6:	1d ff c1 e9 	j 80004b38 <IfxVadc_getChannelConversionTime>

800077ba <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
800077ba:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
800077bc:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
800077be:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800077c2:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
800077c4:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
800077c6:	6d ff 85 e8 	call 800048d0 <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
800077ca:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
800077cc:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
800077ce:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
800077d0:	4c c0       	ld.w %d15,[%a12]0
800077d2:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
800077d6:	e9 ff 32 00 	st.b [%a15]50,%d15
800077da:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
800077dc:	1b 8f 00 30 	addi %d3,%d15,8
800077e0:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
800077e4:	d0 f3       	addsc.a %a3,%a15,%d15,3
800077e6:	54 23       	ld.w %d3,[%a2]
800077e8:	37 03 63 34 	extr.u %d3,%d3,8,3
800077ec:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
800077f0:	54 23       	ld.w %d3,[%a2]
800077f2:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
800077f6:	8b 13 61 42 	lt.u %d4,%d3,17
800077fa:	f6 44       	jnz %d4,80007802 <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
800077fc:	1b 13 ff 3f 	addi %d3,%d3,-15
80007800:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
80007802:	c2 23       	add %d3,2
80007804:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
80007808:	92 14       	add %d4,%d15,1
8000780a:	4b 23 51 30 	div.f %d3,%d3,%d2
8000780e:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
80007812:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007814:	1e 13       	jeq %d15,1,8000781a <IfxVadc_Adc_getGroupConfig+0x60>
80007816:	82 1f       	mov %d15,1
80007818:	3c e2       	j 800077dc <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
8000781a:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
8000781e:	ef 92 33 00 	jz.t %d2,25,80007884 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
80007822:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
80007826:	19 c2 04 00 	ld.w %d2,[%a12]4
8000782a:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000782e:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
80007832:	19 c2 04 00 	ld.w %d2,[%a12]4
80007836:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
8000783a:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
8000783e:	19 c3 20 20 	ld.w %d3,[%a12]160
80007842:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
80007846:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
8000784a:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000784e:	8b f3 00 32 	eq %d3,%d3,15
80007852:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
80007856:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000785a:	f6 35       	jnz %d3,80007864 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
8000785c:	19 cf 24 20 	ld.w %d15,[%a12]164
80007860:	16 03       	and %d15,3
80007862:	3c 02       	j 80007866 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007864:	76 23       	jz %d2,8000786a <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007866:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
8000786a:	19 cf 20 20 	ld.w %d15,[%a12]160
8000786e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
80007872:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
80007876:	19 cf 24 20 	ld.w %d15,[%a12]164
8000787a:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
8000787e:	e9 ff 18 00 	st.b [%a15]24,%d15
80007882:	3c 0c       	j 8000789a <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
80007884:	82 0f       	mov %d15,0
80007886:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
8000788a:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
8000788e:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007892:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
80007896:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
8000789a:	4c c1       	ld.w %d15,[%a12]4
8000789c:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
800078a0:	df 1f 30 80 	jne %d15,1,80007900 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
800078a4:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
800078a8:	19 c2 04 00 	ld.w %d2,[%a12]4
800078ac:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
800078b0:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
800078b4:	19 c2 04 00 	ld.w %d2,[%a12]4
800078b8:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
800078bc:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
800078c0:	19 c3 00 20 	ld.w %d3,[%a12]128
800078c4:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
800078c8:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
800078cc:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078d0:	8b f3 00 32 	eq %d3,%d3,15
800078d4:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
800078d8:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078dc:	f6 35       	jnz %d3,800078e6 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
800078de:	19 cf 04 20 	ld.w %d15,[%a12]132
800078e2:	16 03       	and %d15,3
800078e4:	3c 02       	j 800078e8 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800078e6:	76 23       	jz %d2,800078ec <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800078e8:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
800078ec:	19 cf 00 20 	ld.w %d15,[%a12]128
800078f0:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
800078f4:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
800078f8:	82 0f       	mov %d15,0
800078fa:	e9 ff 20 00 	st.b [%a15]32,%d15
800078fe:	3c 0c       	j 80007916 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
80007900:	82 0f       	mov %d15,0
80007902:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007906:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
8000790a:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000790e:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
80007912:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
80007916:	4c c1       	ld.w %d15,[%a12]4
80007918:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
8000791c:	df 1f 33 80 	jne %d15,1,80007982 <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
80007920:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
80007924:	19 c2 04 00 	ld.w %d2,[%a12]4
80007928:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
8000792c:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
80007930:	19 c2 04 00 	ld.w %d2,[%a12]4
80007934:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007938:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
8000793c:	19 d3 00 80 	ld.w %d3,[%a13]512
80007940:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
80007944:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
80007948:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000794c:	8b f3 00 32 	eq %d3,%d3,15
80007950:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
80007954:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007958:	f6 35       	jnz %d3,80007962 <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
8000795a:	19 df 04 80 	ld.w %d15,[%a13]516
8000795e:	16 03       	and %d15,3
80007960:	3c 02       	j 80007964 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007962:	76 23       	jz %d2,80007968 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007964:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
80007968:	19 df 00 80 	ld.w %d15,[%a13]512
8000796c:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
80007970:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
80007974:	19 df 04 80 	ld.w %d15,[%a13]516
80007978:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
8000797c:	e9 ff 28 00 	st.b [%a15]40,%d15
80007980:	3c 0c       	j 80007998 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
80007982:	82 0f       	mov %d15,0
80007984:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007988:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
8000798c:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007990:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
80007994:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
80007998:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000799c:	39 e7 08 00 	ld.bu %d7,[%a14]8
800079a0:	8f 33 00 31 	and %d3,%d3,3
800079a4:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
800079a6:	df 03 1f 00 	jeq %d3,0,800079e4 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
800079aa:	7b 00 00 58 	movh %d5,32768
800079ae:	1b 85 dc 50 	addi %d5,%d5,3528
800079b2:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
800079b6:	8b 47 60 42 	lt.u %d4,%d7,4
800079ba:	82 02       	mov %d2,0
800079bc:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
800079c0:	1a 25       	add %d15,%d5,%d2
800079c2:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
800079c4:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
800079c6:	a0 32       	mov.a %a2,3
800079c8:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
800079cc:	8f f4 0f 61 	and %d6,%d4,255
800079d0:	14 35       	ld.bu %d5,[%a3]
800079d2:	5f 35 06 80 	jne %d5,%d3,800079de <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
800079d6:	42 62       	add %d2,%d6
800079d8:	8f f2 0f 21 	and %d2,%d2,255
800079dc:	3c 04       	j 800079e4 <IfxVadc_Adc_getGroupConfig+0x22a>
800079de:	c2 14       	add %d4,1
800079e0:	fc 24       	loop %a2,800079c8 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
800079e2:	02 72       	mov %d2,%d7
800079e4:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
800079e6:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
800079ea:	1b 07 01 f0 	addi %d15,%d7,16
800079ee:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
800079f2:	e9 ff 30 00 	st.b [%a15]48,%d15
800079f6:	00 90       	ret 

800079f8 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
800079f8:	99 52 14 00 	ld.a %a2,[%a5]20
800079fc:	d4 2e       	ld.a %a14,[%a2]
800079fe:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
80007a02:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80007a06:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007a0a:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80007a0c:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007a0e:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80007a10:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
80007a12:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007a16:	6d ff ab e6 	call 8000476c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
80007a1a:	1b 09 06 20 	addi %d2,%d9,96
80007a1e:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007a22:	0c fe       	ld.bu %d15,[%a15]14
80007a24:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a26:	40 e4       	mov.aa %a4,%a14
80007a28:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
80007a2c:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
80007a2e:	54 22       	ld.w %d2,[%a2]
80007a30:	0c ff       	ld.bu %d15,[%a15]15
80007a32:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007a36:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80007a38:	54 22       	ld.w %d2,[%a2]
80007a3a:	39 ff 10 00 	ld.bu %d15,[%a15]16
80007a3e:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007a42:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80007a44:	54 22       	ld.w %d2,[%a2]
80007a46:	39 ff 11 00 	ld.bu %d15,[%a15]17
80007a4a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
80007a4e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
80007a50:	54 22       	ld.w %d2,[%a2]
80007a52:	0c f1       	ld.bu %d15,[%a15]1
80007a54:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
80007a58:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
80007a5a:	54 22       	ld.w %d2,[%a2]
80007a5c:	0c fd       	ld.bu %d15,[%a15]13
80007a5e:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007a62:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
80007a64:	54 22       	ld.w %d2,[%a2]
80007a66:	39 ff 13 00 	ld.bu %d15,[%a15]19
80007a6a:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
80007a6e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80007a70:	54 22       	ld.w %d2,[%a2]
80007a72:	0c f3       	ld.bu %d15,[%a15]3
80007a74:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
80007a78:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
80007a7a:	54 22       	ld.w %d2,[%a2]
80007a7c:	0c f0       	ld.bu %d15,[%a15]0
80007a7e:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
80007a82:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
80007a84:	54 22       	ld.w %d2,[%a2]
80007a86:	39 ff 12 00 	ld.bu %d15,[%a15]18
80007a8a:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
80007a8e:	6c 20       	st.w [%a2]0,%d15
80007a90:	1b 08 01 f0 	addi %d15,%d8,16
80007a94:	16 ff       	and %d15,255
80007a96:	02 f4       	mov %d4,%d15
80007a98:	6d ff 6a e6 	call 8000476c <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80007a9c:	08 23       	ld.bu %d3,[%a15]2
80007a9e:	82 12       	mov %d2,1
80007aa0:	0f 92 00 20 	sh %d2,%d2,%d9
80007aa4:	f6 35       	jnz %d3,80007aae <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
80007aa6:	19 c3 08 00 	ld.w %d3,[%a12]8
80007aaa:	a6 32       	or %d2,%d3
80007aac:	3c 05       	j 80007ab6 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
80007aae:	19 c3 08 00 	ld.w %d3,[%a12]8
80007ab2:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007ab6:	02 f4       	mov %d4,%d15
80007ab8:	59 c2 08 00 	st.w [%a12]8,%d2
80007abc:	40 e4       	mov.aa %a4,%a14
80007abe:	6d ff 3b e6 	call 80004734 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80007ac2:	79 d3 00 00 	ld.b %d3,[%a13]0
80007ac6:	19 c5 20 40 	ld.w %d5,[%a12]288
80007aca:	8f 23 00 f0 	sh %d15,%d3,2
80007ace:	3b f0 00 20 	mov %d2,15
80007ad2:	0f f2 00 20 	sh %d2,%d2,%d15
80007ad6:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007ada:	08 b4       	ld.bu %d4,[%a15]11
80007adc:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007ae0:	19 c2 20 40 	ld.w %d2,[%a12]288
80007ae4:	0f f4 00 f0 	sh %d15,%d4,%d15
80007ae8:	a6 2f       	or %d15,%d2
80007aea:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007aee:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007af2:	6e 1f       	jz %d15,80007b30 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007af4:	02 84       	mov %d4,%d8
80007af6:	08 b5       	ld.bu %d5,[%a15]11
80007af8:	6d ff 6b e7 	call 800049ce <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007afc:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007b00:	82 1f       	mov %d15,1
80007b02:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007b06:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007b0a:	54 22       	ld.w %d2,[%a2]
80007b0c:	08 63       	ld.bu %d3,[%a15]6
80007b0e:	8f f2 cf 21 	andn %d2,%d2,255
80007b12:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007b14:	0c f9       	ld.bu %d15,[%a15]9
80007b16:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b18:	54 22       	ld.w %d2,[%a2]
80007b1a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b1e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007b20:	4c 20       	ld.w %d15,[%a2]0
80007b22:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b26:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007b28:	4c 20       	ld.w %d15,[%a2]0
80007b2a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b2e:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007b30:	0c ff       	ld.bu %d15,[%a15]15
80007b32:	08 a2       	ld.bu %d2,[%a15]10
80007b34:	ff 8f 15 80 	jge.u %d15,8,80007b5e <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80007b38:	19 c4 30 40 	ld.w %d4,[%a12]304
80007b3c:	06 2f       	sh %d15,2
80007b3e:	3b f0 00 30 	mov %d3,15
80007b42:	0f f3 00 30 	sh %d3,%d3,%d15
80007b46:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b4a:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007b4e:	19 c3 30 40 	ld.w %d3,[%a12]304
80007b52:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b56:	a6 3f       	or %d15,%d3
80007b58:	59 cf 30 40 	st.w [%a12]304,%d15
80007b5c:	3c 14       	j 80007b84 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b5e:	c2 8f       	add %d15,-8
80007b60:	19 c4 34 40 	ld.w %d4,[%a12]308
80007b64:	06 2f       	sh %d15,2
80007b66:	3b f0 00 30 	mov %d3,15
80007b6a:	0f f3 00 30 	sh %d3,%d3,%d15
80007b6e:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b72:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b76:	19 c3 34 40 	ld.w %d3,[%a12]308
80007b7a:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b7e:	a6 3f       	or %d15,%d3
80007b80:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80007b84:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007b88:	6e 24       	jz %d15,80007bd0 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007b8a:	02 84       	mov %d4,%d8
80007b8c:	08 a5       	ld.bu %d5,[%a15]10
80007b8e:	6d ff 20 e7 	call 800049ce <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80007b92:	0c ff       	ld.bu %d15,[%a15]15
80007b94:	1b 0f 08 f0 	addi %d15,%d15,128
80007b98:	90 c3       	addsc.a %a3,%a12,%d15,2
80007b9a:	4c 30       	ld.w %d15,[%a3]0
80007b9c:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007ba0:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
80007ba2:	bb f0 ff ff 	mov.u %d15,65535
80007ba6:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007baa:	54 22       	ld.w %d2,[%a2]
80007bac:	08 43       	ld.bu %d3,[%a15]4
80007bae:	8f f2 cf 21 	andn %d2,%d2,255
80007bb2:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007bb4:	0c f8       	ld.bu %d15,[%a15]8
80007bb6:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007bb8:	54 22       	ld.w %d2,[%a2]
80007bba:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007bbe:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007bc0:	4c 20       	ld.w %d15,[%a2]0
80007bc2:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007bc6:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007bc8:	4c 20       	ld.w %d15,[%a2]0
80007bca:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007bce:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007bd0:	40 e4       	mov.aa %a4,%a14
80007bd2:	02 84       	mov %d4,%d8
80007bd4:	6d ff b0 e5 	call 80004734 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007bd8:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007bda:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007bdc:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007bde:	0c fc       	ld.bu %d15,[%a15]12
80007be0:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007be2:	00 90       	ret 

80007be4 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007be4:	40 42       	mov.aa %a2,%a4
80007be6:	d2 02       	mov %e2,0
80007be8:	89 22 48 01 	st.d [%a2+]8,%e2
80007bec:	89 22 48 01 	st.d [%a2+]8,%e2
80007bf0:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007bf4:	b5 45 14 00 	st.a [%a4]20,%a5
80007bf8:	00 90       	ret 

80007bfa <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007bfa:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007bfc:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007c00:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007c02:	8f a8 00 90 	sh %d9,%d8,10
80007c06:	1b 09 48 f0 	addi %d15,%d9,1152
80007c0a:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
80007c0c:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
80007c0e:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007c12:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007c14:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007c18:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80007c1a:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007c1c:	6d ff 5a e6 	call 800048d0 <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007c20:	1b 08 01 f0 	addi %d15,%d8,16
80007c24:	8f ff 0f a1 	and %d10,%d15,255
80007c28:	40 c4       	mov.aa %a4,%a12
80007c2a:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007c2c:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007c2e:	6d ff 9f e5 	call 8000476c <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c32:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007c36:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c38:	5e 17       	jne %d15,1,80007c46 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007c3a:	82 14       	mov %d4,1
80007c3c:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007c40:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007c44:	3c 03       	j 80007c4a <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80007c46:	d2 04       	mov %e4,0
80007c48:	82 06       	mov %d6,0
80007c4a:	82 07       	mov %d7,0
80007c4c:	6d ff 06 e8 	call 80004c58 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007c50:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007c54:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007c56:	5e 17       	jne %d15,1,80007c64 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007c58:	82 14       	mov %d4,1
80007c5a:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007c5e:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007c62:	3c 03       	j 80007c68 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80007c64:	d2 04       	mov %e4,0
80007c66:	82 06       	mov %d6,0
80007c68:	82 17       	mov %d7,1
80007c6a:	6d ff f7 e7 	call 80004c58 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c6e:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007c72:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c74:	5e 17       	jne %d15,1,80007c82 <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007c76:	82 14       	mov %d4,1
80007c78:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007c7c:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007c80:	3c 03       	j 80007c86 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007c82:	d2 04       	mov %e4,0
80007c84:	82 06       	mov %d6,0
80007c86:	82 27       	mov %d7,2
80007c88:	6d ff e8 e7 	call 80004c58 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007c8c:	0c f5       	ld.bu %d15,[%a15]5
80007c8e:	be 8b       	jeq %d15,%d8,80007cc4 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007c90:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007c94:	91 00 00 28 	movh.a %a2,32768
80007c98:	d9 22 c8 70 	lea %a2,[%a2]3528 <80000dc8 <IfxVadc_Adc_masterIndex>>
80007c9c:	10 22       	addsc.a %a2,%a2,%d15,0
80007c9e:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007ca0:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007ca4:	8f 3f 00 21 	and %d2,%d15,3
80007ca8:	19 23 40 30 	ld.w %d3,[%a2]1216
80007cac:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007cb0:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007cb4:	19 23 40 30 	ld.w %d3,[%a2]1216
80007cb8:	da 08       	mov %d15,8
80007cba:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007cbe:	a6 3f       	or %d15,%d3
80007cc0:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007cc4:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007cc8:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007ccc:	8f 3f c0 f1 	andn %d15,%d15,3
80007cd0:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007cd4:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007cd8:	19 22 40 20 	ld.w %d2,[%a2]1152
80007cdc:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007ce0:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007ce4:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007ce8:	df 1f 5a 80 	jne %d15,1,80007d9c <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007cec:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007cf0:	6e 28       	jz %d15,80007d40 <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007cf2:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007cf6:	96 04       	or %d15,4
80007cf8:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007cfc:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007d00:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007d04:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007d08:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007d0c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007d10:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007d14:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007d18:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007d1c:	8b ff 20 f2 	ne %d15,%d15,15
80007d20:	ee 16       	jnz %d15,80007d4c <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007d22:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d26:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007d2a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007d2e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007d32:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007d36:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d3a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d3e:	3c 05       	j 80007d48 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007d40:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d44:	8f 4f c0 f1 	andn %d15,%d15,4
80007d48:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007d4c:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007d50:	8b ff 00 f2 	eq %d15,%d15,15
80007d54:	ee 15       	jnz %d15,80007d7e <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007d56:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007d5a:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007d5e:	19 23 40 40 	ld.w %d3,[%a2]1280
80007d62:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007d66:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007d6a:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007d6e:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007d72:	19 22 44 40 	ld.w %d2,[%a2]1284
80007d76:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d7a:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007d7e:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007d82:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d86:	3b 00 40 f0 	mov %d15,1024
80007d8a:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007d8e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d92:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007d96:	a6 2f       	or %d15,%d2
80007d98:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007d9c:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007da0:	df 1f 5a 80 	jne %d15,1,80007e54 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007da4:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007da8:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007dac:	6e 28       	jz %d15,80007dfc <IfxVadc_Adc_initGroup+0x202>
80007dae:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007db2:	96 04       	or %d15,4
80007db4:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007db8:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007dbc:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007dc0:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007dc4:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007dc8:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007dcc:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007dd0:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007dd4:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007dd8:	8b ff 20 f2 	ne %d15,%d15,15
80007ddc:	ee 16       	jnz %d15,80007e08 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007dde:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007de2:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007de6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007dea:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007dee:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007df2:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007df6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007dfa:	3c 05       	j 80007e04 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007dfc:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007e00:	8f 4f c0 f1 	andn %d15,%d15,4
80007e04:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007e08:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007e0c:	8b ff 00 f2 	eq %d15,%d15,15
80007e10:	ee 15       	jnz %d15,80007e3a <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007e12:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007e16:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007e1a:	19 23 60 40 	ld.w %d3,[%a2]1312
80007e1e:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007e22:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007e26:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007e2a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007e2e:	19 22 64 40 	ld.w %d2,[%a2]1316
80007e32:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e36:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007e3a:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007e3e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007e42:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e46:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007e4a:	8f 0f c1 f1 	andn %d15,%d15,16
80007e4e:	a6 2f       	or %d15,%d2
80007e50:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007e54:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007e58:	df 1f 4f 80 	jne %d15,1,80007ef6 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007e5c:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007e60:	6e 29       	jz %d15,80007eb2 <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007e62:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e66:	96 04       	or %d15,4
80007e68:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007e6c:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007e70:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007e74:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007e78:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007e7c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007e80:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007e84:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007e88:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e8c:	8b ff 20 f2 	ne %d15,%d15,15
80007e90:	ee 11       	jnz %d15,80007eb2 <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e92:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007e96:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e9a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e9e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007ea2:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007ea6:	19 cf 04 80 	ld.w %d15,[%a12]516
80007eaa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007eae:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007eb2:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007eb6:	8b ff 00 f2 	eq %d15,%d15,15
80007eba:	ee 13       	jnz %d15,80007ee0 <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007ebc:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007ec0:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007ec4:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007ec8:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007ecc:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007ed0:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007ed4:	19 c2 04 80 	ld.w %d2,[%a12]516
80007ed8:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007edc:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007ee0:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007ee4:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007ee8:	19 cf 04 80 	ld.w %d15,[%a12]516
80007eec:	8f 0f c1 f1 	andn %d15,%d15,16
80007ef0:	a6 2f       	or %d15,%d2
80007ef2:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007ef6:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007ef8:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007efc:	3a 8f       	eq %d15,%d15,%d8
80007efe:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007f02:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007f06:	02 84       	mov %d4,%d8
80007f08:	8f 3f c0 f1 	andn %d15,%d15,3
80007f0c:	a6 2f       	or %d15,%d2
80007f0e:	59 2f 40 20 	st.w [%a2]1152,%d15
80007f12:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007f16:	40 c4       	mov.aa %a4,%a12
80007f18:	6d ff 69 e4 	call 800047ea <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007f1c:	8f 88 00 80 	sh %d8,%d8,8
80007f20:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007f22:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007f26:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007f2a:	0b 58 00 20 	add %d2,%d8,%d5
80007f2e:	1b 82 12 20 	addi %d2,%d2,296
80007f32:	0c 2c       	ld.bu %d15,[%a2]12
80007f34:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007f38:	54 22       	ld.w %d2,[%a2]
80007f3a:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007f3e:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007f40:	9a 15       	add %d15,%d5,1
80007f42:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007f44:	54 23       	ld.w %d3,[%a2]
80007f46:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007f4a:	4b 03 71 31 	ftouz %d3,%d3
80007f4e:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007f50:	8b 03 62 f2 	lt.u %d15,%d3,32
80007f54:	ee 04       	jnz %d15,80007f5c <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007f56:	06 c3       	sh %d3,-4
80007f58:	1b f3 00 30 	addi %d3,%d3,15
80007f5c:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007f60:	1a 58       	add %d15,%d8,%d5
80007f62:	1b 8f 12 f0 	addi %d15,%d15,296
80007f66:	90 c2       	addsc.a %a2,%a12,%d15,2
80007f68:	4c 20       	ld.w %d15,[%a2]0
80007f6a:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007f6e:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007f70:	df 15 04 00 	jeq %d5,1,80007f78 <IfxVadc_Adc_initGroup+0x37e>
80007f74:	82 15       	mov %d5,1
80007f76:	3c d8       	j 80007f26 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007f78:	40 c4       	mov.aa %a4,%a12
80007f7a:	02 a4       	mov %d4,%d10
80007f7c:	6d ff dc e3 	call 80004734 <IfxVadc_disableAccess>

    return status;
}
80007f80:	82 02       	mov %d2,0
80007f82:	00 90       	ret 

80007f84 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007f84:	40 42       	mov.aa %a2,%a4
80007f86:	7b 60 58 f3 	movh %d15,13702
80007f8a:	d2 02       	mov %e2,0
80007f8c:	a0 6f       	mov.a %a15,6
80007f8e:	89 22 48 01 	st.d [%a2+]8,%e2
80007f92:	fc fe       	loop %a15,80007f8e <IfxVadc_Adc_initGroupConfig+0xa>
80007f94:	1b df 7b f3 	addi %d15,%d15,14269
80007f98:	6c 42       	st.w [%a4]8,%d15
80007f9a:	6c 44       	st.w [%a4]16,%d15
80007f9c:	82 1f       	mov %d15,1
80007f9e:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007fa2:	e9 4f 20 00 	st.b [%a4]32,%d15
80007fa6:	e9 4f 26 00 	st.b [%a4]38,%d15
80007faa:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007fae:	f4 45       	st.a [%a4],%a5
80007fb0:	00 90       	ret 

80007fb2 <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007fb2:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007fb4:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007fb6:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007fb8:	6d ff 0f fa 	call 800073d6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007fbc:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007fbe:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007fc0:	6d ff 0b f9 	call 800071d6 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007fc4:	82 02       	mov %d2,0
80007fc6:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007fc8:	02 f4       	mov %d4,%d15
80007fca:	6d ff 3b fa 	call 80007440 <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007fce:	40 f4       	mov.aa %a4,%a15
80007fd0:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007fd4:	6d ff 30 e6 	call 80004c34 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007fd8:	19 c4 18 00 	ld.w %d4,[%a12]24
80007fdc:	40 f4       	mov.aa %a4,%a15
80007fde:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007fe2:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007fe4:	6d ff 42 e5 	call 80004a68 <IfxVadc_initializeFAdcI>
80007fe8:	df 02 57 00 	jeq %d2,0,80008096 <_SMALL_DATA2_+0x96>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007fec:	19 c4 14 00 	ld.w %d4,[%a12]20
80007ff0:	40 f4       	mov.aa %a4,%a15
80007ff2:	4b 04 71 41 	ftouz %d4,%d4
80007ff6:	6d ff 24 e5 	call 80004a3e <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007ffa:	40 f4       	mov.aa %a4,%a15
80007ffc:	6d ff 6a e4 	call 800048d0 <IfxVadc_getAdcAnalogFrequency>
80008000:	82 03       	mov %d3,0
80008002:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80008006:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80008008:	1b 83 02 40 	addi %d4,%d3,40
8000800c:	d0 c2       	addsc.a %a2,%a12,%d15,3
8000800e:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80008012:	0c 20       	ld.bu %d15,[%a2]0
80008014:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80008016:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
8000801a:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
8000801e:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80008020:	4c 21       	ld.w %d15,[%a2]4
80008022:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80008026:	4b 0f 71 f1 	ftouz %d15,%d15
8000802a:	c2 ef       	add %d15,-2

    if (ticks > 31)
8000802c:	8b 0f 62 52 	lt.u %d5,%d15,32
80008030:	f6 54       	jnz %d5,80008038 <_SMALL_DATA2_+0x38>
    {
        ticks = (ticks / 16) + 15;
80008032:	06 cf       	sh %d15,-4
80008034:	1b ff 00 f0 	addi %d15,%d15,15
80008038:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
8000803c:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80008040:	54 24       	ld.w %d4,[%a2]
80008042:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80008046:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80008048:	df 13 04 00 	jeq %d3,1,80008050 <_SMALL_DATA2_+0x50>
8000804c:	82 13       	mov %d3,1
8000804e:	3c dc       	j 80008006 <_SMALL_DATA2_+0x6>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80008050:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80008054:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80008056:	df 12 20 80 	jne %d2,1,80008096 <_SMALL_DATA2_+0x96>
8000805a:	82 08       	mov %d8,0
8000805c:	1b 08 01 f0 	addi %d15,%d8,16
80008060:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008062:	02 f4       	mov %d4,%d15
80008064:	40 f4       	mov.aa %a4,%a15
80008066:	6d ff 83 e3 	call 8000476c <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
8000806a:	8f a8 00 20 	sh %d2,%d8,10
8000806e:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80008072:	c2 18       	add %d8,1
80008074:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008078:	02 f4       	mov %d4,%d15
8000807a:	8f 32 40 21 	or %d2,%d2,3
8000807e:	59 22 40 20 	st.w [%a2]1152,%d2
80008082:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80008084:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008088:	6d ff 56 e3 	call 80004734 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
8000808c:	ee e8       	jnz %d15,8000805c <_SMALL_DATA2_+0x5c>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
8000808e:	40 f4       	mov.aa %a4,%a15
80008090:	6d ff 19 e6 	call 80004cc2 <IfxVadc_startupCalibration>
    }

    return status;
80008094:	82 0f       	mov %d15,0
}
80008096:	02 f2       	mov %d2,%d15
80008098:	00 90       	ret 

8000809a <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
8000809a:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
8000809e:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
800080a0:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
800080a4:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
800080a6:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
800080a8:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
800080aa:	6d ff 1f e4 	call 800048e8 <IfxVadc_getAdcDigitalFrequency>
800080ae:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
800080b0:	6d ff cf f0 	call 8000624e <IfxScuCcu_getSpbFrequency>
800080b4:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
800080b6:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
800080ba:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
800080bc:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
800080c0:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
800080c2:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
800080c4:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
800080c8:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
800080ca:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
800080ce:	e9 ff 21 00 	st.b [%a15]33,%d15
800080d2:	00 90       	ret 

800080d4 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
800080d4:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
800080d6:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
800080d8:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
800080da:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
800080dc:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
800080de:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
800080e0:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
800080e2:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
800080e4:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
800080e6:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
800080e8:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
800080ec:	d2 02       	mov %e2,0
800080ee:	89 22 48 01 	st.d [%a2+]8,%e2
800080f2:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
800080f6:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
800080fa:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
800080fc:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
800080fe:	2c ac       	st.b [%sp]12,%d15
80008100:	d9 44 0c 00 	lea %a4,[%a4]12
80008104:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008108:	89 42 48 01 	st.d [%a4+]8,%e2
8000810c:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008110:	89 42 48 01 	st.d [%a4+]8,%e2
80008114:	00 90       	ret 

80008116 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80008116:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80008118:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
8000811a:	8f af 00 20 	sh %d2,%d15,10
8000811e:	1b 02 48 20 	addi %d2,%d2,1152
80008122:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80008126:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
8000812a:	40 4c       	mov.aa %a12,%a4
8000812c:	40 5f       	mov.aa %a15,%a5
8000812e:	16 0f       	and %d15,15
80008130:	f6 2a       	jnz %d2,80008144 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80008132:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008136:	8f f2 c0 21 	andn %d2,%d2,15
8000813a:	a6 2f       	or %d15,%d2
8000813c:	59 cf 30 f0 	st.w [%a12]1008,%d15
80008140:	82 0f       	mov %d15,0
80008142:	3c 07       	j 80008150 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
80008144:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008148:	06 4f       	sh %d15,4
8000814a:	8f 02 cf 21 	andn %d2,%d2,240
8000814e:	3c f6       	j 8000813a <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
80008150:	90 f2       	addsc.a %a2,%a15,%d15,2
80008152:	99 2d 0c 00 	ld.a %a13,[%a2]12
80008156:	bd 0d 19 00 	jz.a %a13,80008188 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
8000815a:	39 d3 0c 00 	ld.bu %d3,[%a13]12
8000815e:	39 f2 18 00 	ld.bu %d2,[%a15]24
80008162:	99 d4 04 00 	ld.a %a4,[%a13]4
80008166:	0f 23 a0 50 	or %d5,%d3,%d2
8000816a:	39 d4 08 00 	ld.bu %d4,[%a13]8
8000816e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
80008172:	39 f8 19 00 	ld.bu %d8,[%a15]25
80008176:	6d ff c4 ed 	call 80005cfe <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
8000817a:	99 d4 04 00 	ld.a %a4,[%a13]4
8000817e:	39 d4 08 00 	ld.bu %d4,[%a13]8
80008182:	02 85       	mov %d5,%d8
80008184:	6d ff 3b ee 	call 80005dfa <IfxPort_setPinPadDriver>
80008188:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
8000818a:	df 3f e3 ff 	jne %d15,3,80008150 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
8000818e:	0c f7       	ld.bu %d15,[%a15]7
80008190:	08 44       	ld.bu %d4,[%a15]4
80008192:	78 00       	st.w [%sp]0,%d15
80008194:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008198:	08 95       	ld.bu %d5,[%a15]9
8000819a:	08 56       	ld.bu %d6,[%a15]5
8000819c:	08 67       	ld.bu %d7,[%a15]6
8000819e:	78 01       	st.w [%sp]4,%d15
800081a0:	40 c4       	mov.aa %a4,%a12
800081a2:	40 e5       	mov.aa %a5,%a14
800081a4:	1d ff 00 e3 	j 800047a4 <IfxVadc_configExternalMultiplexerMode>

800081a8 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
800081a8:	cc 40       	ld.a %a15,[%a4]0
800081aa:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
800081ae:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
800081b2:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
800081b4:	c2 4f       	add %d15,4
800081b6:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
800081ba:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
800081bc:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
800081be:	3f 3f 04 80 	jlt.u %d15,%d3,800081c6 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
800081c2:	82 0f       	mov %d15,0
800081c4:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
800081c6:	00 90       	ret 

800081c8 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
800081c8:	cc 40       	ld.a %a15,[%a4]0
800081ca:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
800081ce:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
800081d2:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
800081d4:	c2 2f       	add %d15,2
800081d6:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
800081da:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
800081de:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
800081e0:	3f 3f 04 80 	jlt.u %d15,%d3,800081e8 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
800081e4:	82 0f       	mov %d15,0
800081e6:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
800081e8:	00 90       	ret 

800081ea <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081ea:	cc 40       	ld.a %a15,[%a4]0
800081ec:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
800081f0:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081f4:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
800081f6:	c2 4f       	add %d15,4
800081f8:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081fc:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
800081fe:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80008200:	3f 2f 04 80 	jlt.u %d15,%d2,80008208 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80008204:	82 0f       	mov %d15,0
80008206:	ac 42       	st.h [%a4]4,%d15
80008208:	00 90       	ret 

8000820a <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
8000820a:	80 52       	mov.d %d2,%a5
8000820c:	37 04 70 40 	extr.u %d4,%d4,0,16
80008210:	8f 02 60 31 	nor %d3,%d2,0
80008214:	1a 42       	add %d15,%d2,%d4
80008216:	42 3f       	add %d15,%d3
80008218:	42 23       	add %d3,%d2
8000821a:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
8000821c:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000821e:	82 06       	mov %d6,0
80008220:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008224:	6f f3 03 00 	jz.t %d3,15,8000822a <Ifx_CircularBuffer_read8+0x20>
80008228:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
8000822a:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000822e:	d4 42       	ld.a %a2,[%a4]
80008230:	60 33       	mov.a %a3,%d3
80008232:	30 32       	add.a %a2,%a3
80008234:	14 23       	ld.bu %d3,[%a2]
80008236:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80008238:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000823c:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
80008240:	c2 13       	add %d3,1
80008242:	37 03 70 30 	extr.u %d3,%d3,0,16
80008246:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
8000824a:	3f 53 04 80 	jlt.u %d3,%d5,80008252 <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
8000824e:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008252:	9f 0f ec ff 	jned %d15,0,8000822a <Ifx_CircularBuffer_read8+0x20>
80008256:	c2 f4       	add %d4,-1
80008258:	37 04 50 40 	extr %d4,%d4,0,16
8000825c:	8b 04 40 43 	max %d4,%d4,0
80008260:	c2 14       	add %d4,1

    return Dest;
}
80008262:	1a 42       	add %d15,%d2,%d4
80008264:	60 f2       	mov.a %a2,%d15
80008266:	00 90       	ret 

80008268 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80008268:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
8000826c:	d4 42       	ld.a %a2,[%a4]
8000826e:	1b f4 ff 5f 	addi %d5,%d4,-1
80008272:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008276:	b9 46 06 00 	ld.hu %d6,[%a4]6
8000827a:	82 03       	mov %d3,0
8000827c:	37 05 70 20 	extr.u %d2,%d5,0,16
80008280:	6f f5 03 00 	jz.t %d5,15,80008286 <Ifx_CircularBuffer_read32+0x1e>
80008284:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008286:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008288:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
8000828a:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
8000828c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008290:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008294:	c2 13       	add %d3,1
80008296:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008298:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000829c:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800082a0:	9f 02 f3 ff 	jned %d2,0,80008286 <Ifx_CircularBuffer_read32+0x1e>
800082a4:	c2 f4       	add %d4,-1
800082a6:	37 04 50 40 	extr %d4,%d4,0,16
800082aa:	ac 42       	st.h [%a4]4,%d15
800082ac:	8b 04 40 43 	max %d4,%d4,0
800082b0:	c2 14       	add %d4,1

    return Dest;
}
800082b2:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800082b6:	00 90       	ret 

800082b8 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
800082b8:	80 52       	mov.d %d2,%a5
800082ba:	37 04 70 40 	extr.u %d4,%d4,0,16
800082be:	8f 02 60 31 	nor %d3,%d2,0
800082c2:	1a 42       	add %d15,%d2,%d4
800082c4:	42 3f       	add %d15,%d3
800082c6:	42 23       	add %d3,%d2
800082c8:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
800082ca:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800082cc:	82 06       	mov %d6,0
800082ce:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800082d2:	6f f3 03 00 	jz.t %d3,15,800082d8 <Ifx_CircularBuffer_write8+0x20>
800082d6:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
800082d8:	b9 43 04 00 	ld.hu %d3,[%a4]4
800082dc:	d4 42       	ld.a %a2,[%a4]
800082de:	60 33       	mov.a %a3,%d3
800082e0:	04 f5       	ld.bu %d5,[%a15+]
800082e2:	30 32       	add.a %a2,%a3
800082e4:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
800082e6:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
800082ea:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
800082ee:	c2 13       	add %d3,1
800082f0:	37 03 70 30 	extr.u %d3,%d3,0,16
800082f4:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
800082f8:	3f 53 04 80 	jlt.u %d3,%d5,80008300 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
800082fc:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008300:	9f 0f ec ff 	jned %d15,0,800082d8 <Ifx_CircularBuffer_write8+0x20>
80008304:	c2 f4       	add %d4,-1
80008306:	37 04 50 40 	extr %d4,%d4,0,16
8000830a:	8b 04 40 43 	max %d4,%d4,0
8000830e:	c2 14       	add %d4,1

    return source;
}
80008310:	1a 42       	add %d15,%d2,%d4
80008312:	60 f2       	mov.a %a2,%d15
80008314:	00 90       	ret 

80008316 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008316:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
8000831a:	d4 42       	ld.a %a2,[%a4]
8000831c:	1b f4 ff 5f 	addi %d5,%d4,-1
80008320:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008324:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008328:	82 03       	mov %d3,0
8000832a:	37 05 70 20 	extr.u %d2,%d5,0,16
8000832e:	6f f5 03 00 	jz.t %d5,15,80008334 <Ifx_CircularBuffer_write32+0x1e>
80008332:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008334:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008338:	c2 13       	add %d3,1
8000833a:	48 05       	ld.w %d5,[%a15]0
8000833c:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000833e:	c2 4f       	add %d15,4
80008340:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008344:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008346:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000834a:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
8000834e:	9f 02 f3 ff 	jned %d2,0,80008334 <Ifx_CircularBuffer_write32+0x1e>
80008352:	c2 f4       	add %d4,-1
80008354:	37 04 50 40 	extr %d4,%d4,0,16
80008358:	ac 42       	st.h [%a4]4,%d15
8000835a:	8b 04 40 43 	max %d4,%d4,0
8000835e:	c2 14       	add %d4,1

    return source;
}
80008360:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008364:	00 90       	ret 

80008366 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
80008366:	1d 00 78 16 	j 8000b056 <free>

8000836a <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
8000836a:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
8000836c:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
8000836e:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
80008372:	82 1f       	mov %d15,1
80008374:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80008378:	1b 72 02 f0 	addi %d15,%d2,39
8000837c:	8f 7f c0 f1 	andn %d15,%d15,7
80008380:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
80008382:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
80008384:	82 0f       	mov %d15,0
80008386:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
80008388:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
8000838a:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
8000838e:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
80008390:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
80008392:	6c 43       	st.w [%a4]12,%d15
80008394:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
80008396:	ac 4b       	st.h [%a4]22,%d15
80008398:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
8000839a:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
8000839e:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
800083a2:	00 90       	ret 

800083a4 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800083a4:	c2 34       	add %d4,3
800083a6:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
800083aa:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800083ac:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
800083b0:	1b 8f 02 40 	addi %d4,%d15,40
800083b4:	6d 00 4b 16 	call 8000b04a <malloc>
800083b8:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
800083ba:	bc 25       	jz.a %a2,800083c4 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
800083bc:	0b f8 10 48 	mov %e4,%d8,%d15
800083c0:	1d ff d5 ff 	j 8000836a <Ifx_Fifo_init>
    }

    return fifo;
}
800083c4:	00 90       	ret 

800083c6 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
800083c6:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
800083c8:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
800083ca:	3f f4 6a 00 	jlt %d4,%d15,8000849e <Ifx_Fifo_canReadCount+0xd8>
800083ce:	8c 4c       	ld.h %d15,[%a4]24
800083d0:	3f 4f 67 00 	jlt %d15,%d4,8000849e <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083d4:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800083d8:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083dc:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800083e0:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
800083e2:	8c 42       	ld.h %d15,[%a4]4
800083e4:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
800083e6:	4e 4c       	jgtz %d4,800083fe <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
800083e8:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
800083ea:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
800083ee:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800083f2:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083f4:	df 00 55 00 	jeq %d0,0,8000849e <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
800083f8:	0d 00 00 03 	enable 
800083fc:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800083fe:	82 f2       	mov %d2,-1
80008400:	06 f2       	sh %d2,-1
80008402:	ba f6       	eq %d15,%d6,-1
80008404:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008408:	82 f5       	mov %d5,-1
8000840a:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000840c:	ee 16       	jnz %d15,80008438 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000840e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008412:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008416:	0d 00 40 03 	disable 
8000841a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000841c:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008420:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008424:	02 15       	mov %d5,%d1
80008426:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000842a:	76 23       	jz %d2,80008430 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
8000842c:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008430:	0b 65 40 50 	addx %d5,%d5,%d6
80008434:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
80008438:	82 0f       	mov %d15,0
8000843a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000843e:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008442:	76 03       	jz %d0,80008448 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
80008444:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008448:	82 f6       	mov %d6,-1
8000844a:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000844c:	39 4f 1c 00 	ld.bu %d15,[%a4]28
80008450:	6e 08       	jz %d15,80008460 <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
80008452:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
80008456:	82 0f       	mov %d15,0
80008458:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
8000845a:	8b 12 00 22 	eq %d2,%d2,1
8000845e:	00 90       	ret 
80008460:	ba f5       	eq %d15,%d5,-1
80008462:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008466:	ee f3       	jnz %d15,8000844c <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008468:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000846c:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008470:	0d 00 40 03 	disable 
80008474:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008476:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000847a:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000847e:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008482:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008486:	76 23       	jz %d2,8000848c <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
80008488:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000848c:	0b 3f 00 21 	eq %d2,%d15,%d3
80008490:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008494:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008498:	df 02 da ff 	jne %d2,0,8000844c <Ifx_Fifo_canReadCount+0x86>
8000849c:	3c db       	j 80008452 <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
8000849e:	00 90       	ret 

800084a0 <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
800084a0:	20 08       	sub.a %sp,8
800084a2:	40 4f       	mov.aa %a15,%a4
800084a4:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
800084a6:	df 04 b6 00 	jeq %d4,0,80008612 <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
800084aa:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084ac:	82 f2       	mov %d2,-1
800084ae:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
800084b0:	8c 4c       	ld.h %d15,[%a4]24
800084b2:	06 f2       	sh %d2,-1
800084b4:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
800084b6:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
800084b8:	82 fa       	mov %d10,-1
800084ba:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084bc:	ba f6       	eq %d15,%d6,-1
800084be:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800084c2:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084c4:	ee 16       	jnz %d15,800084f0 <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084c6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084ca:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084ce:	0d 00 40 03 	disable 
800084d2:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084d4:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084d8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084dc:	02 3a       	mov %d10,%d3
800084de:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084e2:	76 23       	jz %d2,800084e8 <Ifx_Fifo_read+0x48>
    {
        __enable();
800084e4:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800084e8:	0b 6a 40 a0 	addx %d10,%d10,%d6
800084ec:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800084f0:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
800084f2:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
800084f4:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084f6:	a0 0c       	mov.a %a12,0
800084f8:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084fa:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800084fe:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008502:	0d 00 40 03 	disable 
80008506:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
80008508:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000850a:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000850e:	8c fd       	ld.h %d15,[%a15]26
80008510:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
80008514:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008518:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
8000851c:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000851e:	a2 3b       	sub %d11,%d3
80008520:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008524:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008528:	0b f9 80 30 	sub %d3,%d9,%d15
8000852c:	0b 23 80 21 	min %d2,%d3,%d2
80008530:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008532:	76 43       	jz %d4,80008538 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008534:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
80008538:	6e 20       	jz %d15,80008578 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
8000853a:	40 a4       	mov.aa %a4,%sp
8000853c:	02 f4       	mov %d4,%d15
8000853e:	6d ff 66 fe 	call 8000820a <Ifx_CircularBuffer_read8>
80008542:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008544:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008548:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000854c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008550:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
80008552:	88 23       	ld.h %d3,[%a15]4
80008554:	a2 b3       	sub %d3,%d11
80008556:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
80008558:	48 33       	ld.w %d3,[%a15]12
8000855a:	76 39       	jz %d3,8000856c <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
8000855c:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
8000855e:	8e f3       	jlez %d15,80008564 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
80008560:	68 3f       	st.w [%a15]12,%d15
80008562:	3c 05       	j 8000856c <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008564:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008566:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008568:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000856c:	76 23       	jz %d2,80008572 <Ifx_Fifo_read+0xd2>
    {
        __enable();
8000856e:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
80008572:	a2 b9       	sub %d9,%d11
80008574:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008578:	76 d4       	jz %d13,80008580 <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
8000857a:	82 0f       	mov %d15,0
8000857c:	68 2f       	st.w [%a15]8,%d15
                break;
8000857e:	3c 48       	j 8000860e <Ifx_Fifo_read+0x16e>
80008580:	ba fa       	eq %d15,%d10,-1
80008582:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008586:	ee 1b       	jnz %d15,800085bc <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008588:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000858c:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008590:	0d 00 40 03 	disable 
80008594:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008596:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000859a:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000859e:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800085a2:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085a6:	76 23       	jz %d2,800085ac <Ifx_Fifo_read+0x10c>
    {
        __enable();
800085a8:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800085ac:	0b 8f 00 21 	eq %d2,%d15,%d8
800085b0:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800085b4:	0b f8 90 22 	or.lt %d2,%d8,%d15
800085b8:	df 02 e1 ff 	jne %d2,0,8000857a <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
800085bc:	df 09 29 00 	jeq %d9,0,8000860e <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800085c0:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800085c4:	ee 1f       	jnz %d15,80008602 <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800085c6:	ba fa       	eq %d15,%d10,-1
800085c8:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800085cc:	ee fa       	jnz %d15,800085c0 <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085ce:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085d2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085d6:	0d 00 40 03 	disable 
800085da:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800085dc:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085e0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800085e4:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800085e8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085ec:	76 23       	jz %d2,800085f2 <Ifx_Fifo_read+0x152>
    {
        __enable();
800085ee:	0d 00 00 03 	enable 
800085f2:	0b 8f 00 21 	eq %d2,%d15,%d8
800085f6:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800085fa:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800085fe:	df 02 e1 ff 	jne %d2,0,800085c0 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
80008602:	39 fd 1c 00 	ld.bu %d13,[%a15]28
80008606:	8b 0d 00 d2 	eq %d13,%d13,0
8000860a:	1d ff 78 ff 	j 800084fa <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
8000860e:	8c a2       	ld.h %d15,[%sp]4
80008610:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
80008612:	02 92       	mov %d2,%d9
80008614:	00 90       	ret 

80008616 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008616:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000861a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000861e:	0d 00 40 03 	disable 
80008622:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
80008624:	4c 43       	ld.w %d15,[%a4]12
80008626:	6e 06       	jz %d15,80008632 <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
80008628:	82 0f       	mov %d15,0
8000862a:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
8000862c:	82 1f       	mov %d15,1
8000862e:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
80008632:	82 0f       	mov %d15,0
80008634:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008638:	82 0f       	mov %d15,0
8000863a:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
8000863c:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000863e:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
80008640:	8c 4b       	ld.h %d15,[%a4]22
80008642:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008644:	76 23       	jz %d2,8000864a <Ifx_Fifo_clear+0x34>
    {
        __enable();
80008646:	0d 00 00 03 	enable 
8000864a:	00 90       	ret 

8000864c <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
8000864c:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
8000864e:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
80008650:	3f f4 75 00 	jlt %d4,%d15,8000873a <Ifx_Fifo_canWriteCount+0xee>
80008654:	8c 4c       	ld.h %d15,[%a4]24
80008656:	3f 4f 72 00 	jlt %d15,%d4,8000873a <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000865a:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
8000865e:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008662:	0d 00 40 03 	disable 
80008666:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
80008668:	c9 43 18 00 	ld.h %d3,[%a4]24
8000866c:	8c 42       	ld.h %d15,[%a4]4
8000866e:	5a f3       	sub %d15,%d3,%d15
80008670:	3f 4f 0d 00 	jlt %d15,%d4,8000868a <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
80008674:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
80008676:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
8000867a:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
8000867e:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008680:	df 00 5d 00 	jeq %d0,0,8000873a <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
80008684:	0d 00 00 03 	enable 
80008688:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000868a:	82 f2       	mov %d2,-1
8000868c:	06 f2       	sh %d2,-1
8000868e:	ba f6       	eq %d15,%d6,-1
80008690:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008694:	82 f5       	mov %d5,-1
80008696:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008698:	ee 16       	jnz %d15,800086c4 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000869a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000869e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086a2:	0d 00 40 03 	disable 
800086a6:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800086a8:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086ac:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086b0:	02 15       	mov %d5,%d1
800086b2:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086b6:	76 23       	jz %d2,800086bc <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
800086b8:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800086bc:	0b 65 40 50 	addx %d5,%d5,%d6
800086c0:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
800086c4:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
800086c6:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
800086ca:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
800086ce:	8c 4c       	ld.h %d15,[%a4]24
800086d0:	5a f2       	sub %d15,%d2,%d15
800086d2:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800086d4:	82 02       	mov %d2,0
800086d6:	0b 42 a0 41 	max %d4,%d2,%d4
800086da:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086de:	76 03       	jz %d0,800086e4 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
800086e0:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800086e4:	82 f6       	mov %d6,-1
800086e6:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800086e8:	39 4f 1d 00 	ld.bu %d15,[%a4]29
800086ec:	6e 08       	jz %d15,800086fc <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
800086ee:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
800086f2:	82 0f       	mov %d15,0
800086f4:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
800086f6:	8b 12 00 22 	eq %d2,%d2,1
800086fa:	00 90       	ret 
800086fc:	ba f5       	eq %d15,%d5,-1
800086fe:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008702:	ee f3       	jnz %d15,800086e8 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008704:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008708:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000870c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008710:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008712:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008716:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000871a:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000871e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008722:	76 23       	jz %d2,80008728 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008724:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008728:	0b 3f 00 21 	eq %d2,%d15,%d3
8000872c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008730:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008734:	df 02 da ff 	jne %d2,0,800086e8 <Ifx_Fifo_canWriteCount+0x9c>
80008738:	3c db       	j 800086ee <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
8000873a:	00 90       	ret 

8000873c <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
8000873c:	20 08       	sub.a %sp,8
8000873e:	40 4f       	mov.aa %a15,%a4
80008740:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008742:	df 04 be 00 	jeq %d4,0,800088be <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
80008746:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008748:	82 f2       	mov %d2,-1
8000874a:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
8000874c:	8c 4c       	ld.h %d15,[%a4]24
8000874e:	06 f2       	sh %d2,-1
80008750:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
80008752:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
80008754:	82 fa       	mov %d10,-1
80008756:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008758:	ba f6       	eq %d15,%d6,-1
8000875a:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000875e:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008760:	ee 16       	jnz %d15,8000878c <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008762:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008766:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000876a:	0d 00 40 03 	disable 
8000876e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008770:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008774:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008778:	02 3a       	mov %d10,%d3
8000877a:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000877e:	76 23       	jz %d2,80008784 <Ifx_Fifo_write+0x48>
    {
        __enable();
80008780:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008784:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008788:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000878c:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000878e:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
80008790:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008792:	a0 0c       	mov.a %a12,0
80008794:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008796:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
8000879a:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000879e:	0d 00 40 03 	disable 
800087a2:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
800087a4:	88 c4       	ld.h %d4,[%a15]24
800087a6:	88 2b       	ld.h %d11,[%a15]4
800087a8:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800087ac:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
800087b0:	8c fd       	ld.h %d15,[%a15]26
800087b2:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
800087b6:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
800087ba:	4b f2 01 22 	div %e2,%d2,%d15
800087be:	a2 3b       	sub %d11,%d3
800087c0:	37 0b 70 b0 	extr.u %d11,%d11,0,16
800087c4:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
800087c8:	0b f9 80 20 	sub %d2,%d9,%d15
800087cc:	0b 42 80 41 	min %d4,%d2,%d4
800087d0:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087d2:	76 53       	jz %d5,800087d8 <Ifx_Fifo_write+0x9c>
    {
        __enable();
800087d4:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
800087d8:	6e 26       	jz %d15,80008824 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
800087da:	40 a4       	mov.aa %a4,%sp
800087dc:	02 f4       	mov %d4,%d15
800087de:	6d ff 6d fd 	call 800082b8 <Ifx_CircularBuffer_write8>
800087e2:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800087e4:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800087e8:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800087ec:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800087f0:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
800087f2:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087f4:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
800087f6:	42 b2       	add %d2,%d11
800087f8:	37 02 50 20 	extr %d2,%d2,0,16
800087fc:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800087fe:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008802:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
80008804:	48 22       	ld.w %d2,[%a15]8
80008806:	76 29       	jz %d2,80008818 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
80008808:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
8000880a:	8e f3       	jlez %d15,80008810 <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
8000880c:	68 2f       	st.w [%a15]8,%d15
8000880e:	3c 05       	j 80008818 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008810:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008812:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008814:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008818:	76 33       	jz %d3,8000881e <Ifx_Fifo_write+0xe2>
    {
        __enable();
8000881a:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000881e:	a2 b9       	sub %d9,%d11
80008820:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008824:	76 d4       	jz %d13,8000882c <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008826:	82 0f       	mov %d15,0
80008828:	68 3f       	st.w [%a15]12,%d15
                break;
8000882a:	3c 48       	j 800088ba <Ifx_Fifo_write+0x17e>
8000882c:	ba fa       	eq %d15,%d10,-1
8000882e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008832:	ee 1b       	jnz %d15,80008868 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008834:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008838:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000883c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008840:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008842:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008846:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000884a:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000884e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008852:	76 23       	jz %d2,80008858 <Ifx_Fifo_write+0x11c>
    {
        __enable();
80008854:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008858:	0b 8f 00 21 	eq %d2,%d15,%d8
8000885c:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008860:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008864:	df 02 e1 ff 	jne %d2,0,80008826 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
80008868:	df 09 29 00 	jeq %d9,0,800088ba <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000886c:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80008870:	ee 1f       	jnz %d15,800088ae <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008872:	ba fa       	eq %d15,%d10,-1
80008874:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008878:	ee fa       	jnz %d15,8000886c <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000887a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000887e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008882:	0d 00 40 03 	disable 
80008886:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008888:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000888c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008890:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008894:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008898:	76 23       	jz %d2,8000889e <Ifx_Fifo_write+0x162>
    {
        __enable();
8000889a:	0d 00 00 03 	enable 
8000889e:	0b 8f 00 21 	eq %d2,%d15,%d8
800088a2:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800088a6:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800088aa:	df 02 e1 ff 	jne %d2,0,8000886c <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
800088ae:	39 fd 1d 00 	ld.bu %d13,[%a15]29
800088b2:	8b 0d 00 d2 	eq %d13,%d13,0
800088b6:	1d ff 70 ff 	j 80008796 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
800088ba:	8c a2       	ld.h %d15,[%sp]4
800088bc:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
800088be:	02 92       	mov %d2,%d9
800088c0:	00 90       	ret 
	...

800088c4 <syncInfoState>:
void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
    printInfoDisplay(); 
}

void syncInfoState(void){
800088c4:	00 90       	ret 

800088c6 <updatePacket>:


}

void updatePacket(void){
800088c6:	00 90       	ret 

800088c8 <printStateLv1>:
    }

}

void printStateLv1(){
    sprintf(buf, "\xDB\xDB");
800088c8:	91 00 00 f7 	movh.a %a15,28672
800088cc:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
800088d0:	91 00 00 28 	movh.a %a2,32768
800088d4:	d9 22 c8 80 	lea %a2,[%a2]3592 <80000e08 <IfxVadc_Adc_masterIndex+0x40>>
800088d8:	40 f4       	mov.aa %a4,%a15
800088da:	04 2f       	ld.bu %d15,[%a2+]
800088dc:	24 ff       	st.b [%a15+],%d15
800088de:	ee fe       	jnz %d15,800088da <printStateLv1+0x12>
    lcd_print(buf);
800088e0:	1d ff 6b dc 	j 800041b6 <lcd_print>

800088e4 <printStateLv2>:
}
void printStateLv2(){
    sprintf(buf, "\xDB\xDB\xDB\xDB");
800088e4:	91 00 00 f7 	movh.a %a15,28672
800088e8:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
800088ec:	91 00 00 28 	movh.a %a2,32768
800088f0:	d9 22 cb 80 	lea %a2,[%a2]3595 <80000e0b <IfxVadc_Adc_masterIndex+0x43>>
800088f4:	40 f4       	mov.aa %a4,%a15
800088f6:	04 2f       	ld.bu %d15,[%a2+]
800088f8:	24 ff       	st.b [%a15+],%d15
800088fa:	ee fe       	jnz %d15,800088f6 <printStateLv2+0x12>
    lcd_print(buf);
800088fc:	1d ff 5d dc 	j 800041b6 <lcd_print>

80008900 <printStateLv3>:
}
void printStateLv3(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB");
80008900:	91 00 00 f7 	movh.a %a15,28672
80008904:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
80008908:	91 00 00 28 	movh.a %a2,32768
8000890c:	d9 22 d0 80 	lea %a2,[%a2]3600 <80000e10 <IfxVadc_Adc_masterIndex+0x48>>
80008910:	40 f4       	mov.aa %a4,%a15
80008912:	04 2f       	ld.bu %d15,[%a2+]
80008914:	24 ff       	st.b [%a15+],%d15
80008916:	ee fe       	jnz %d15,80008912 <printStateLv3+0x12>
    lcd_print(buf);
80008918:	1d ff 4f dc 	j 800041b6 <lcd_print>

8000891c <printStateLv4>:
}
void printStateLv4(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB\xDB\xDB");
8000891c:	91 00 00 f7 	movh.a %a15,28672
80008920:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
80008924:	91 00 00 28 	movh.a %a2,32768
80008928:	d9 22 d7 80 	lea %a2,[%a2]3607 <80000e17 <IfxVadc_Adc_masterIndex+0x4f>>
8000892c:	40 f4       	mov.aa %a4,%a15
8000892e:	04 2f       	ld.bu %d15,[%a2+]
80008930:	24 ff       	st.b [%a15+],%d15
80008932:	ee fe       	jnz %d15,8000892e <printStateLv4+0x12>
    lcd_print(buf);
80008934:	1d ff 41 dc 	j 800041b6 <lcd_print>

80008938 <printStateOn>:
}
void printStateOn(){
    sprintf(buf, "mode on");
80008938:	91 00 00 f7 	movh.a %a15,28672
8000893c:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
80008940:	91 00 00 28 	movh.a %a2,32768
80008944:	d9 22 e0 80 	lea %a2,[%a2]3616 <80000e20 <IfxVadc_Adc_masterIndex+0x58>>
80008948:	40 f4       	mov.aa %a4,%a15
8000894a:	04 2f       	ld.bu %d15,[%a2+]
8000894c:	24 ff       	st.b [%a15+],%d15
8000894e:	ee fe       	jnz %d15,8000894a <printStateOn+0x12>
    lcd_print(buf);
80008950:	1d ff 33 dc 	j 800041b6 <lcd_print>

80008954 <printStateOff>:
}
void printStateOff(){
    sprintf(buf, "mode off");
80008954:	91 00 00 f7 	movh.a %a15,28672
80008958:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
8000895c:	91 00 00 28 	movh.a %a2,32768
80008960:	d9 22 e8 80 	lea %a2,[%a2]3624 <80000e28 <IfxVadc_Adc_masterIndex+0x60>>
80008964:	40 f4       	mov.aa %a4,%a15
80008966:	04 2f       	ld.bu %d15,[%a2+]
80008968:	24 ff       	st.b [%a15+],%d15
8000896a:	ee fe       	jnz %d15,80008966 <printStateOff+0x12>
    lcd_print(buf);
8000896c:	1d ff 25 dc 	j 800041b6 <lcd_print>

80008970 <printStateRed>:
}
void printStateRed(){
    sprintf(buf, "light red");
80008970:	91 00 00 f7 	movh.a %a15,28672
80008974:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
80008978:	91 00 00 28 	movh.a %a2,32768
8000897c:	d9 22 f1 80 	lea %a2,[%a2]3633 <80000e31 <IfxVadc_Adc_masterIndex+0x69>>
80008980:	40 f4       	mov.aa %a4,%a15
80008982:	04 2f       	ld.bu %d15,[%a2+]
80008984:	24 ff       	st.b [%a15+],%d15
80008986:	ee fe       	jnz %d15,80008982 <printStateRed+0x12>
    lcd_print(buf);
80008988:	1d ff 17 dc 	j 800041b6 <lcd_print>

8000898c <printStateGreen>:
}
void printStateGreen(){
    sprintf(buf, "light green");
8000898c:	91 00 00 f7 	movh.a %a15,28672
80008990:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
80008994:	91 00 00 28 	movh.a %a2,32768
80008998:	d9 22 fb 80 	lea %a2,[%a2]3643 <80000e3b <IfxVadc_Adc_masterIndex+0x73>>
8000899c:	40 f4       	mov.aa %a4,%a15
8000899e:	04 2f       	ld.bu %d15,[%a2+]
800089a0:	24 ff       	st.b [%a15+],%d15
800089a2:	ee fe       	jnz %d15,8000899e <printStateGreen+0x12>
    lcd_print(buf);
800089a4:	1d ff 09 dc 	j 800041b6 <lcd_print>

800089a8 <printStateBlue>:
}
void printStateBlue(){
    sprintf(buf, "light blue");
800089a8:	91 00 00 f7 	movh.a %a15,28672
800089ac:	d9 ff c0 00 	lea %a15,[%a15]3072 <70000c00 <buf>>
800089b0:	91 00 00 28 	movh.a %a2,32768
800089b4:	d9 22 c7 90 	lea %a2,[%a2]3655 <80000e47 <IfxVadc_Adc_masterIndex+0x7f>>
800089b8:	40 f4       	mov.aa %a4,%a15
800089ba:	04 2f       	ld.bu %d15,[%a2+]
800089bc:	24 ff       	st.b [%a15+],%d15
800089be:	ee fe       	jnz %d15,800089ba <printStateBlue+0x12>
    lcd_print(buf);
800089c0:	1d ff fb db 	j 800041b6 <lcd_print>

800089c4 <printInfoDisplay>:
    printInfoDisplay(); 
}


void printInfoDisplay(){
    lcd_goto(0,0);
800089c4:	d2 04       	mov %e4,0
800089c6:	6d ff f1 db 	call 800041a8 <lcd_goto>
    switch (infoState) {
800089ca:	91 00 00 c7 	movh.a %a12,28672
800089ce:	19 cf e0 00 	ld.w %d15,[%a12]3104 <70000c20 <infoState>>
800089d2:	91 00 00 47 	movh.a %a4,28672
800089d6:	d9 44 c0 00 	lea %a4,[%a4]3072 <70000c00 <buf>>
800089da:	ff 7f 55 80 	jge.u %d15,7,80008a84 <printInfoDisplay+0xc0>
800089de:	91 10 00 f8 	movh.a %a15,32769
800089e2:	d9 ff ac 78 	lea %a15,[%a15]-30228 <800089ec <printInfoDisplay+0x28>>
800089e6:	90 ff       	addsc.a %a15,%a15,%d15,2
800089e8:	dc 0f       	ji %a15
800089ea:	00 00       	nop 
800089ec:	1d 00 0e 00 	j 80008a08 <printInfoDisplay+0x44>
800089f0:	1d 00 15 00 	j 80008a1a <printInfoDisplay+0x56>
800089f4:	1d 00 1c 00 	j 80008a2c <printInfoDisplay+0x68>
800089f8:	1d 00 23 00 	j 80008a3e <printInfoDisplay+0x7a>
800089fc:	1d 00 2a 00 	j 80008a50 <printInfoDisplay+0x8c>
80008a00:	1d 00 31 00 	j 80008a62 <printInfoDisplay+0x9e>
80008a04:	1d 00 38 00 	j 80008a74 <printInfoDisplay+0xb0>
        case tunnelMode:
            sprintf(buf, "Tunnel Mode");
80008a08:	91 00 00 28 	movh.a %a2,32768
80008a0c:	40 4f       	mov.aa %a15,%a4
80008a0e:	d9 22 d2 90 	lea %a2,[%a2]3666 <80000e52 <IfxVadc_Adc_masterIndex+0x8a>>
80008a12:	04 2f       	ld.bu %d15,[%a2+]
80008a14:	24 ff       	st.b [%a15+],%d15
80008a16:	ee fe       	jnz %d15,80008a12 <printInfoDisplay+0x4e>
80008a18:	3c 36       	j 80008a84 <printInfoDisplay+0xc0>
            break;
        case airConditionMode:
            sprintf(buf,"Air Conditional");
80008a1a:	91 00 00 28 	movh.a %a2,32768
80008a1e:	40 4f       	mov.aa %a15,%a4
80008a20:	d9 22 de 90 	lea %a2,[%a2]3678 <80000e5e <IfxVadc_Adc_masterIndex+0x96>>
80008a24:	04 2f       	ld.bu %d15,[%a2+]
80008a26:	24 ff       	st.b [%a15+],%d15
80008a28:	ee fe       	jnz %d15,80008a24 <printInfoDisplay+0x60>
80008a2a:	3c 2d       	j 80008a84 <printInfoDisplay+0xc0>
            break;
        case chairDegree:
            sprintf(buf,"Chair Degree");
80008a2c:	91 00 00 28 	movh.a %a2,32768
80008a30:	40 4f       	mov.aa %a15,%a4
80008a32:	d9 22 ee 90 	lea %a2,[%a2]3694 <80000e6e <IfxVadc_Adc_masterIndex+0xa6>>
80008a36:	04 2f       	ld.bu %d15,[%a2+]
80008a38:	24 ff       	st.b [%a15+],%d15
80008a3a:	ee fe       	jnz %d15,80008a36 <printInfoDisplay+0x72>
80008a3c:	3c 24       	j 80008a84 <printInfoDisplay+0xc0>
            break;
        case window:
            sprintf(buf,"window");
80008a3e:	91 00 00 28 	movh.a %a2,32768
80008a42:	40 4f       	mov.aa %a15,%a4
80008a44:	d9 22 fb 90 	lea %a2,[%a2]3707 <80000e7b <IfxVadc_Adc_masterIndex+0xb3>>
80008a48:	04 2f       	ld.bu %d15,[%a2+]
80008a4a:	24 ff       	st.b [%a15+],%d15
80008a4c:	ee fe       	jnz %d15,80008a48 <printInfoDisplay+0x84>
80008a4e:	3c 1b       	j 80008a84 <printInfoDisplay+0xc0>
            break;
        case embientLight:
            sprintf(buf,"embient light");
80008a50:	91 00 00 28 	movh.a %a2,32768
80008a54:	40 4f       	mov.aa %a15,%a4
80008a56:	d9 22 c2 a0 	lea %a2,[%a2]3714 <80000e82 <IfxVadc_Adc_masterIndex+0xba>>
80008a5a:	04 2f       	ld.bu %d15,[%a2+]
80008a5c:	24 ff       	st.b [%a15+],%d15
80008a5e:	ee fe       	jnz %d15,80008a5a <printInfoDisplay+0x96>
80008a60:	3c 12       	j 80008a84 <printInfoDisplay+0xc0>
            break;
        case adasSensor:
            sprintf(buf,"adas sensor");
80008a62:	91 00 00 28 	movh.a %a2,32768
80008a66:	40 4f       	mov.aa %a15,%a4
80008a68:	d9 22 d0 a0 	lea %a2,[%a2]3728 <80000e90 <IfxVadc_Adc_masterIndex+0xc8>>
80008a6c:	04 2f       	ld.bu %d15,[%a2+]
80008a6e:	24 ff       	st.b [%a15+],%d15
80008a70:	ee fe       	jnz %d15,80008a6c <printInfoDisplay+0xa8>
80008a72:	3c 09       	j 80008a84 <printInfoDisplay+0xc0>
            break;
        case driveLight:
            sprintf(buf,"Drive Light");
80008a74:	91 00 00 28 	movh.a %a2,32768
80008a78:	40 4f       	mov.aa %a15,%a4
80008a7a:	d9 22 dc a0 	lea %a2,[%a2]3740 <80000e9c <IfxVadc_Adc_masterIndex+0xd4>>
80008a7e:	04 2f       	ld.bu %d15,[%a2+]
80008a80:	24 ff       	st.b [%a15+],%d15
80008a82:	ee fe       	jnz %d15,80008a7e <printInfoDisplay+0xba>
            break;
    }
    lcd_print(buf); 
80008a84:	6d ff 99 db 	call 800041b6 <lcd_print>
    lcd_goto(1,0);
80008a88:	d2 14       	mov %e4,1
80008a8a:	6d ff 8f db 	call 800041a8 <lcd_goto>
    // sprintf(buf, "state = %u", infotainmentArr[infoState]); 
    // lcd_print(buf); 

    if(infoState == tunnelMode || infoState == driveLight ){
80008a8e:	19 cf e0 00 	ld.w %d15,[%a12]3104 <70000c20 <infoState>>
80008a92:	91 00 00 f7 	movh.a %a15,28672
80008a96:	8b 6f 00 22 	eq %d2,%d15,6
80008a9a:	8b 0f e0 24 	or.eq %d2,%d15,0
80008a9e:	d9 ff e4 00 	lea %a15,[%a15]3108 <70000c24 <infotainmentArr>>
80008aa2:	76 26       	jz %d2,80008aae <printInfoDisplay+0xea>
        if (infotainmentArr[infoState] == 0) { //mode on
80008aa4:	90 ff       	addsc.a %a15,%a15,%d15,2
80008aa6:	4c f0       	ld.w %d15,[%a15]0
80008aa8:	6e 36       	jz %d15,80008b14 <printInfoDisplay+0x150>
            printStateOff();
        }
        else{ //mode off
            printStateOn();
80008aaa:	1d ff 47 ff 	j 80008938 <printStateOn>
        } 
    }
    else if(infoState == embientLight){
80008aae:	5e 4b       	jne %d15,4,80008ac4 <printInfoDisplay+0x100>
        switch(infotainmentArr[infoState]){
80008ab0:	4c f4       	ld.w %d15,[%a15]16
80008ab2:	1e 15       	jeq %d15,1,80008abc <printInfoDisplay+0xf8>
80008ab4:	1e 26       	jeq %d15,2,80008ac0 <printInfoDisplay+0xfc>
80008ab6:	ee 37       	jnz %d15,80008b24 <printInfoDisplay+0x160>
            case 0:
                printStateRed();
80008ab8:	1d ff 5c ff 	j 80008970 <printStateRed>
                break;
            case 1:
                printStateGreen();
80008abc:	1d ff 68 ff 	j 8000898c <printStateGreen>
                break;  
            case 2:
                printStateBlue();
80008ac0:	1d ff 74 ff 	j 800089a8 <printStateBlue>
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008ac4:	92 e2       	add %d2,%d15,-2
80008ac6:	06 2f       	sh %d15,2
        switch(infotainmentArr[infoState]){
80008ac8:	10 ff       	addsc.a %a15,%a15,%d15,0
80008aca:	4c f0       	ld.w %d15,[%a15]0
            case 2:
                printStateBlue();
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008acc:	ff 22 14 80 	jge.u %d2,2,80008af4 <printInfoDisplay+0x130>
        switch(infotainmentArr[infoState]){
80008ad0:	ff 4f 2a 80 	jge.u %d15,4,80008b24 <printInfoDisplay+0x160>
80008ad4:	91 10 00 f8 	movh.a %a15,32769
80008ad8:	d9 ff a0 b8 	lea %a15,[%a15]-29984 <80008ae0 <printInfoDisplay+0x11c>>
80008adc:	90 ff       	addsc.a %a15,%a15,%d15,2
80008ade:	dc 0f       	ji %a15
80008ae0:	1d 00 1c 00 	j 80008b18 <printInfoDisplay+0x154>
80008ae4:	1d 00 1c 00 	j 80008b1c <printInfoDisplay+0x158>
80008ae8:	1d 00 1c 00 	j 80008b20 <printInfoDisplay+0x15c>
80008aec:	1d 00 02 00 	j 80008af0 <printInfoDisplay+0x12c>
                break;  
            case 2:
                printStateLv3();
                break;
            case 3:
                printStateLv4();
80008af0:	1d ff 16 ff 	j 8000891c <printStateLv4>
                break;
        }
    }
    else{
        switch(infotainmentArr[infoState]){
80008af4:	ff 4f 18 80 	jge.u %d15,4,80008b24 <printInfoDisplay+0x160>
80008af8:	91 10 00 f8 	movh.a %a15,32769
80008afc:	d9 ff 84 c8 	lea %a15,[%a15]-29948 <80008b04 <printInfoDisplay+0x140>>
80008b00:	90 ff       	addsc.a %a15,%a15,%d15,2
80008b02:	dc 0f       	ji %a15
80008b04:	1d 00 08 00 	j 80008b14 <printInfoDisplay+0x150>
80008b08:	1d 00 08 00 	j 80008b18 <printInfoDisplay+0x154>
80008b0c:	1d 00 08 00 	j 80008b1c <printInfoDisplay+0x158>
80008b10:	1d 00 08 00 	j 80008b20 <printInfoDisplay+0x15c>
            case 0:
                printStateOff();
80008b14:	1d ff 20 ff 	j 80008954 <printStateOff>
                break;
            case 1:
                printStateLv1();
80008b18:	1d ff d8 fe 	j 800088c8 <printStateLv1>
                break;  
            case 2:
                printStateLv2();
80008b1c:	1d ff e4 fe 	j 800088e4 <printStateLv2>
                break;
            case 3:
                printStateLv3();
80008b20:	1d ff f0 fe 	j 80008900 <printStateLv3>
80008b24:	00 90       	ret 

80008b26 <initInfotainment>:
#include "infotainment_System.h"
#include "bsw.h"


void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008b26:	6d ff d4 da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008b2a:	1d ff 4d ff 	j 800089c4 <printInfoDisplay>

80008b2e <updateInfoState>:


}

void updateInfoState(unsigned int buttonState){
    switch (buttonState) {
80008b2e:	ff 44 4a 80 	jge.u %d4,4,80008bc2 <updateInfoState+0x94>
80008b32:	91 10 00 28 	movh.a %a2,32769
80008b36:	d9 22 84 d8 	lea %a2,[%a2]-29884 <80008b44 <updateInfoState+0x16>>
80008b3a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80008b3e:	91 00 00 f7 	movh.a %a15,28672
80008b42:	dc 02       	ji %a2
80008b44:	1d 00 08 00 	j 80008b54 <updateInfoState+0x26>
80008b48:	1d 00 10 00 	j 80008b68 <updateInfoState+0x3a>
80008b4c:	1d 00 19 00 	j 80008b7e <updateInfoState+0x50>
80008b50:	1d 00 24 00 	j 80008b98 <updateInfoState+0x6a>
        case btnUP:
            if (infoState + 1 <= driveLight) {
80008b54:	19 ff e0 00 	ld.w %d15,[%a15]3104 <70000c20 <infoState>>
80008b58:	91 00 00 27 	movh.a %a2,28672
80008b5c:	ff 6f 04 00 	jge %d15,6,80008b64 <updateInfoState+0x36>
                infoState = infoState + 1;
80008b60:	c2 1f       	add %d15,1
80008b62:	3c 09       	j 80008b74 <updateInfoState+0x46>
            }
            else {
                infoState = tunnelMode;
80008b64:	82 0f       	mov %d15,0
80008b66:	3c 07       	j 80008b74 <updateInfoState+0x46>
            }
            break;
        case btnDOWN:
            if (infoState - 1 >= tunnelMode) {
80008b68:	19 ff e0 00 	ld.w %d15,[%a15]3104 <70000c20 <infoState>>
80008b6c:	91 00 00 27 	movh.a %a2,28672
80008b70:	8e f5       	jlez %d15,80008b7a <updateInfoState+0x4c>
                infoState = infoState - 1;
80008b72:	c2 ff       	add %d15,-1
80008b74:	59 2f e0 00 	st.w [%a2]3104 <70000c20 <infoState>>,%d15
80008b78:	3c 25       	j 80008bc2 <updateInfoState+0x94>
            }
            else {
                infoState = driveLight;
80008b7a:	82 6f       	mov %d15,6
80008b7c:	3c fc       	j 80008b74 <updateInfoState+0x46>
            }
            break;
        case btnLEFT:
            if(infotainmentArr[infoState] -1 >= 0){
80008b7e:	19 ff e0 00 	ld.w %d15,[%a15]3104 <70000c20 <infoState>>
80008b82:	91 00 00 f7 	movh.a %a15,28672
80008b86:	d9 ff e4 00 	lea %a15,[%a15]3108 <70000c24 <infotainmentArr>>
80008b8a:	90 ff       	addsc.a %a15,%a15,%d15,2
80008b8c:	4c f0       	ld.w %d15,[%a15]0
80008b8e:	8e f3       	jlez %d15,80008b94 <updateInfoState+0x66>
                infotainmentArr[infoState] = infotainmentArr[infoState] - 1;
80008b90:	c2 ff       	add %d15,-1
80008b92:	3c 17       	j 80008bc0 <updateInfoState+0x92>
            }
            else{
                infotainmentArr[infoState] = 0;
80008b94:	82 0f       	mov %d15,0
80008b96:	3c 15       	j 80008bc0 <updateInfoState+0x92>
            }
            break;
        case btnRIGHT:
            if(infotainmentArr[infoState] +1 <=  stateMaxArr[infoState]){
80008b98:	19 ff e0 00 	ld.w %d15,[%a15]3104
80008b9c:	91 00 00 28 	movh.a %a2,32768
80008ba0:	91 00 00 f7 	movh.a %a15,28672
80008ba4:	06 2f       	sh %d15,2
80008ba6:	d9 ff e4 00 	lea %a15,[%a15]3108 <70000c24 <infotainmentArr>>
80008baa:	d9 22 e8 a0 	lea %a2,[%a2]3752 <80000ea8 <stateMaxArr>>
80008bae:	10 ff       	addsc.a %a15,%a15,%d15,0
80008bb0:	10 22       	addsc.a %a2,%a2,%d15,0
80008bb2:	48 02       	ld.w %d2,[%a15]0
80008bb4:	4c 20       	ld.w %d15,[%a2]0
80008bb6:	7f f2 05 00 	jge %d2,%d15,80008bc0 <updateInfoState+0x92>
                infotainmentArr[infoState] = infotainmentArr[infoState] +1;
80008bba:	c2 12       	add %d2,1
80008bbc:	68 02       	st.w [%a15]0,%d2
80008bbe:	3c 02       	j 80008bc2 <updateInfoState+0x94>
            }
            else{
                infotainmentArr[infoState] = stateMaxArr[infoState];
80008bc0:	68 0f       	st.w [%a15]0,%d15
            }
            break;
        
    }
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008bc2:	6d ff 86 da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008bc6:	1d ff ff fe 	j 800089c4 <printInfoDisplay>
	...

80008bcc <initUartDriver>:
#include "uart_Driver.h"
#include "bsw.h"

App_AsclinAsc g_AsclinStm;
void initUartDriver(void)
{
80008bcc:	20 60       	sub.a %sp,96
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);
80008bce:	d9 a4 24 00 	lea %a4,[%sp]36
80008bd2:	c5 f5 40 80 	lea %a5,f0000600 <_SMALL_DATA4_+0x3fff8600>
80008bd6:	6d ff 1f e6 	call 80005814 <IfxAsclin_Asc_initModuleConfig>

    ascConfig.baudrate.prescaler    = 1;
80008bda:	82 1f       	mov %d15,1
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008bdc:	7b 00 00 27 	movh %d2,28672
80008be0:	1b a2 d6 20 	addi %d2,%d2,3434
void initUartDriver(void)
{
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
80008be4:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
80008be8:	7b 10 7e f4 	movh %d15,18401
80008bec:	78 0a       	st.w [%sp]40,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008bee:	59 a2 18 10 	st.w [%sp]88,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008bf2:	82 3f       	mov %d15,3
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bf4:	7b 00 00 28 	movh %d2,32768
80008bf8:	60 23       	mov.a %a3,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008bfa:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008bfe:	82 4f       	mov %d15,4
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008c00:	d9 af 04 00 	lea %a15,[%sp]4

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008c04:	f9 af 02 10 	st.h [%sp]66,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008c08:	82 5f       	mov %d15,5
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008c0a:	40 f4       	mov.aa %a4,%a15
    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008c0c:	f9 af 00 10 	st.h [%sp]64,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008c10:	d9 32 c4 b0 	lea %a2,[%a3]3780
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;
80008c14:	82 0f       	mov %d15,0
80008c16:	e9 af 06 10 	st.b [%sp]70,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008c1a:	a0 33       	mov.a %a3,3
80008c1c:	09 22 48 01 	ld.d %e2,[%a2+]8
80008c20:	89 42 48 01 	st.d [%a4+]8,%e2
80008c24:	fc 3c       	loop %a3,80008c1c <initUartDriver+0x50>

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008c26:	7b 00 00 f7 	movh %d15,28672
80008c2a:	1b 0f c4 f0 	addi %d15,%d15,3136
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c2e:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008c32:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c34:	d9 44 d4 a0 	lea %a4,[%a4]3732 <70000e94 <g_AsclinStm+0x254>>
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008c38:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c3c:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008c40:	f9 af 0e 10 	st.h [%sp]78,%d15
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;
80008c44:	f9 af 14 10 	st.h [%sp]84,%d15
        &IfxAsclin0_RXB_P15_3_IN,      IfxPort_InputMode_pullUp,
        NULL_PTR,                      IfxPort_OutputMode_pushPull,
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80008c48:	f8 12       	st.a [%sp]72,%a15

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c4a:	1d ff 0e e4 	j 80005466 <IfxAsclin_Asc_initModule>

80008c4e <myprintfSerial>:
    }
    deserialize_actuator_packet(buffer,packet);
}

void myprintfSerial(const char *fmt,...)
{
80008c4e:	20 e8       	sub.a %sp,232
80008c50:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80008c52:	6d 00 23 06 	call 80009898 <EnableAllInterrupts>
    char buf[128];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, 128, fmt, args);
80008c56:	40 f5       	mov.aa %a5,%a15
80008c58:	d9 a4 28 10 	lea %a4,[%sp]104
80008c5c:	3b 00 08 40 	mov %d4,128
80008c60:	d9 a6 28 30 	lea %a6,[%sp]232
80008c64:	6d 00 8d 14 	call 8000b57e <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
80008c68:	d9 a4 28 10 	lea %a4,[%sp]104
80008c6c:	6d 00 5a 14 	call 8000b520 <strlen>
80008c70:	91 00 00 f7 	movh.a %a15,28672
80008c74:	d9 ff c0 10 	lea %a15,[%a15]3136 <70000c40 <g_AsclinStm>>
80008c78:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x170>>,%d2
    unsigned int i =0;
80008c7c:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80008c7e:	d9 a4 28 10 	lea %a4,[%sp]104
80008c82:	6d 00 4f 14 	call 8000b520 <strlen>
80008c86:	7f 2f 0c 80 	jge.u %d15,%d2,80008c9e <myprintfSerial+0x50>
        txData[i] = buf[i];
80008c8a:	d9 a3 04 00 	lea %a3,[%sp]4
80008c8e:	10 32       	addsc.a %a2,%a3,%d15,0
80008c90:	d9 a3 28 10 	lea %a3,[%sp]104
80008c94:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80008c96:	c2 1f       	add %d15,1
        txData[i] = buf[i];
80008c98:	08 02       	ld.bu %d2,[%a15]0
80008c9a:	34 22       	st.b [%a2],%d2
80008c9c:	3c f1       	j 80008c7e <myprintfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &txData, &g_AsclinStm.count, TIME_INFINITE);
80008c9e:	91 00 00 47 	movh.a %a4,28672
80008ca2:	91 00 00 67 	movh.a %a6,28672
80008ca6:	82 f4       	mov %d4,-1
80008ca8:	d9 44 d4 a0 	lea %a4,[%a4]3732 <70000e94 <g_AsclinStm+0x254>>
80008cac:	d9 a5 04 00 	lea %a5,[%sp]4 <70000e94 <g_AsclinStm+0x254>>
80008cb0:	d9 66 f0 a0 	lea %a6,[%a6]3760 <70000eb0 <g_AsclinStm+0x270>>
80008cb4:	9b 04 00 58 	addih %d5,%d4,32768
80008cb8:	1d ff 16 e6 	j 800058e4 <IfxAsclin_Asc_write>

80008cbc <asclin0RxISR>:
}

ISR(asclin0RxISR)
{
    // printfSerial("onReceive(%d) ",++recieveStamp);
    IfxAsclin_Asc_isrReceive(&g_AsclinStm.drivers.asc);
80008cbc:	91 00 00 47 	movh.a %a4,28672
80008cc0:	d9 44 d4 a0 	lea %a4,[%a4]3732 <70000e94 <g_AsclinStm+0x254>>
80008cc4:	1d ff 65 e3 	j 8000538e <IfxAsclin_Asc_isrReceive>

80008cc8 <asclin0TxISR>:
}

ISR(asclin0TxISR)
{
    // printfSerial("onTransmit(%d) ",++sendStamp);
    IfxAsclin_Asc_isrTransmit(&g_AsclinStm.drivers.asc);
80008cc8:	91 00 00 47 	movh.a %a4,28672
80008ccc:	d9 44 d4 a0 	lea %a4,[%a4]3732 <70000e94 <g_AsclinStm+0x254>>
80008cd0:	1d ff 10 e3 	j 800052f0 <IfxAsclin_Asc_isrTransmit>

80008cd4 <calculate_checksum>:

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008cd4:	82 0f       	mov %d15,0

//from uart_packet

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
80008cd6:	82 02       	mov %d2,0
80008cd8:	9f 04 03 80 	jned %d4,0,80008cde <calculate_checksum+0xa>
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
    }
    return checksumResult;
}
80008cdc:	00 90       	ret 
/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
80008cde:	10 4f       	addsc.a %a15,%a4,%d15,0

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008ce0:	c2 1f       	add %d15,1
        checksumResult ^= data[i];
80008ce2:	08 03       	ld.bu %d3,[%a15]0
80008ce4:	c6 32       	xor %d2,%d3
80008ce6:	3c f9       	j 80008cd8 <calculate_checksum+0x4>

80008ce8 <serialize_actuator_packet>:
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
80008ce8:	40 52       	mov.aa %a2,%a5
80008cea:	a0 93       	mov.a %a3,9
80008cec:	04 4f       	ld.bu %d15,[%a4+]
80008cee:	24 2f       	st.b [%a2+],%d15
80008cf0:	fc 3e       	loop %a3,80008cec <serialize_actuator_packet+0x4>
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008cf2:	40 54       	mov.aa %a4,%a5
80008cf4:	3b a0 00 40 	mov %d4,10
    }
    return checksumResult;
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
80008cf8:	40 5f       	mov.aa %a15,%a5
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008cfa:	6d ff ed ff 	call 80008cd4 <calculate_checksum>
80008cfe:	28 a2       	st.b [%a15]10,%d2
80008d00:	00 90       	ret 

80008d02 <sendActuatorPacket>:

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
80008d02:	20 10       	sub.a %sp,16
80008d04:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008d06:	6d 00 c9 05 	call 80009898 <EnableAllInterrupts>
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008d0a:	d9 af 05 00 	lea %a15,[%sp]5
80008d0e:	40 f2       	mov.aa %a2,%a15
    serialize_actuator_packet(packet,buf);
80008d10:	40 c4       	mov.aa %a4,%a12
80008d12:	40 f5       	mov.aa %a5,%a15
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008d14:	82 0f       	mov %d15,0
80008d16:	a0 a3       	mov.a %a3,10
80008d18:	24 2f       	st.b [%a2+],%d15
80008d1a:	fc 3f       	loop %a3,80008d18 <sendActuatorPacket+0x16>
    serialize_actuator_packet(packet,buf);
80008d1c:	6d ff e6 ff 	call 80008ce8 <serialize_actuator_packet>
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008d20:	91 00 00 27 	movh.a %a2,28672
80008d24:	da 0b       	mov %d15,11
80008d26:	d9 22 c0 10 	lea %a2,[%a2]3136 <70000c40 <g_AsclinStm>>
    int i=0;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008d2a:	91 00 00 47 	movh.a %a4,28672
80008d2e:	91 00 00 67 	movh.a %a6,28672
80008d32:	82 f4       	mov %d4,-1
void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
    serialize_actuator_packet(packet,buf);
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008d34:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x170>>,%d15
    int i=0;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008d38:	d9 44 d4 a0 	lea %a4,[%a4]3732 <70000e94 <g_AsclinStm+0x254>>
80008d3c:	40 f5       	mov.aa %a5,%a15
80008d3e:	d9 66 f0 a0 	lea %a6,[%a6]3760 <70000eb0 <g_AsclinStm+0x270>>
80008d42:	9b 04 00 58 	addih %d5,%d4,32768
80008d46:	1d ff cf e5 	j 800058e4 <IfxAsclin_Asc_write>

80008d4a <deserialize_actuator_packet>:
}

/* Deserialize buffer into ActuatorPacket */
void deserialize_actuator_packet(const uint8* buffer, struct ActuatorPacket* packet) {
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
80008d4a:	a0 af       	mov.a %a15,10
80008d4c:	04 4f       	ld.bu %d15,[%a4+]
80008d4e:	24 5f       	st.b [%a5+],%d15
80008d50:	fc fe       	loop %a15,80008d4c <deserialize_actuator_packet+0x2>
80008d52:	00 90       	ret 

80008d54 <readActuatorPacket>:
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008d54:	20 10       	sub.a %sp,16
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d56:	d9 af 05 00 	lea %a15,[%sp]5
80008d5a:	40 f2       	mov.aa %a2,%a15
80008d5c:	82 0f       	mov %d15,0
80008d5e:	a0 a3       	mov.a %a3,10
80008d60:	24 2f       	st.b [%a2+],%d15
80008d62:	fc 3f       	loop %a3,80008d60 <readActuatorPacket+0xc>
    int pos = 0;
    while (IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc))
80008d64:	91 00 00 d7 	movh.a %a13,28672
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008d68:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    int pos = 0;
80008d6a:	82 0f       	mov %d15,0
    while (IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc))
80008d6c:	d9 dd d4 a0 	lea %a13,[%a13]3732 <70000e94 <g_AsclinStm+0x254>>
80008d70:	40 d4       	mov.aa %a4,%a13
80008d72:	6d ff f3 e1 	call 80005158 <IfxAsclin_Asc_getReadCount>
80008d76:	76 29       	jz %d2,80008d88 <readActuatorPacket+0x34>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008d78:	40 d4       	mov.aa %a4,%a13
80008d7a:	6d ff 55 e3 	call 80005424 <IfxAsclin_Asc_blockingRead>
80008d7e:	10 f2       	addsc.a %a2,%a15,%d15,0
80008d80:	92 18       	add %d8,%d15,1
80008d82:	34 22       	st.b [%a2],%d2
80008d84:	02 8f       	mov %d15,%d8
80008d86:	3c f5       	j 80008d70 <readActuatorPacket+0x1c>
    }
    deserialize_actuator_packet(buffer,packet);
80008d88:	40 f4       	mov.aa %a4,%a15
80008d8a:	40 c5       	mov.aa %a5,%a12
80008d8c:	1d ff df ff 	j 80008d4a <deserialize_actuator_packet>

80008d90 <readSensorPacket>:
}

void readSensorPacket(struct SensorPacket* packet){
80008d90:	20 10       	sub.a %sp,16
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008d92:	d9 af 07 00 	lea %a15,[%sp]7
80008d96:	40 f2       	mov.aa %a2,%a15
80008d98:	82 0f       	mov %d15,0
80008d9a:	a0 83       	mov.a %a3,8
80008d9c:	24 2f       	st.b [%a2+],%d15
80008d9e:	fc 3f       	loop %a3,80008d9c <readSensorPacket+0xc>
    int pos = 0;
    while (IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc))
80008da0:	91 00 00 d7 	movh.a %a13,28672
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
80008da4:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    int pos = 0;
80008da6:	82 0f       	mov %d15,0
    while (IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc))
80008da8:	d9 dd d4 a0 	lea %a13,[%a13]3732 <70000e94 <g_AsclinStm+0x254>>
80008dac:	40 d4       	mov.aa %a4,%a13
80008dae:	6d ff d5 e1 	call 80005158 <IfxAsclin_Asc_getReadCount>
80008db2:	76 29       	jz %d2,80008dc4 <readSensorPacket+0x34>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008db4:	40 d4       	mov.aa %a4,%a13
80008db6:	6d ff 37 e3 	call 80005424 <IfxAsclin_Asc_blockingRead>
80008dba:	10 f2       	addsc.a %a2,%a15,%d15,0
80008dbc:	92 18       	add %d8,%d15,1
80008dbe:	34 22       	st.b [%a2],%d2
80008dc0:	02 8f       	mov %d15,%d8
80008dc2:	3c f5       	j 80008dac <readSensorPacket+0x1c>
    }
    deserialize_actuator_packet(buffer,packet);
80008dc4:	40 f4       	mov.aa %a4,%a15
80008dc6:	40 c5       	mov.aa %a5,%a12
80008dc8:	1d ff c1 ff 	j 80008d4a <deserialize_actuator_packet>

80008dcc <serialize_sensor_packet>:
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
80008dcc:	40 52       	mov.aa %a2,%a5
80008dce:	a0 73       	mov.a %a3,7
80008dd0:	04 4f       	ld.bu %d15,[%a4+]
80008dd2:	24 2f       	st.b [%a2+],%d15
80008dd4:	fc 3e       	loop %a3,80008dd0 <serialize_sensor_packet+0x4>
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008dd6:	40 54       	mov.aa %a4,%a5
80008dd8:	3b 80 00 40 	mov %d4,8
         // handle CRC mismatch
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
80008ddc:	40 5f       	mov.aa %a15,%a5
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008dde:	6d ff 7b ff 	call 80008cd4 <calculate_checksum>
80008de2:	28 82       	st.b [%a15]8,%d2
80008de4:	00 90       	ret 

80008de6 <sendSensorPacket>:
    int i=0;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void sendSensorPacket(const struct SensorPacket* packet)
{
80008de6:	20 10       	sub.a %sp,16
80008de8:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008dea:	6d 00 57 05 	call 80009898 <EnableAllInterrupts>
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008dee:	d9 af 07 00 	lea %a15,[%sp]7
80008df2:	40 f2       	mov.aa %a2,%a15
    serialize_sensor_packet(packet,buf);
80008df4:	40 c4       	mov.aa %a4,%a12
80008df6:	40 f5       	mov.aa %a5,%a15
}

void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008df8:	82 0f       	mov %d15,0
80008dfa:	a0 83       	mov.a %a3,8
80008dfc:	24 2f       	st.b [%a2+],%d15
80008dfe:	fc 3f       	loop %a3,80008dfc <sendSensorPacket+0x16>
    serialize_sensor_packet(packet,buf);
80008e00:	6d ff e6 ff 	call 80008dcc <serialize_sensor_packet>
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008e04:	91 00 00 27 	movh.a %a2,28672
80008e08:	da 09       	mov %d15,9
80008e0a:	d9 22 c0 10 	lea %a2,[%a2]3136 <70000c40 <g_AsclinStm>>
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008e0e:	91 00 00 47 	movh.a %a4,28672
80008e12:	91 00 00 67 	movh.a %a6,28672
80008e16:	82 f4       	mov %d4,-1
void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008e18:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x170>>,%d15
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008e1c:	d9 44 d4 a0 	lea %a4,[%a4]3732 <70000e94 <g_AsclinStm+0x254>>
80008e20:	40 f5       	mov.aa %a5,%a15
80008e22:	d9 66 f0 a0 	lea %a6,[%a6]3760 <70000eb0 <g_AsclinStm+0x270>>
80008e26:	9b 04 00 58 	addih %d5,%d4,32768
80008e2a:	1d ff 5d e5 	j 800058e4 <IfxAsclin_Asc_write>

80008e2e <deserialize_sensor_packet>:
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
}

/* Deserialize buffer into SensorPacket */
void deserialize_sensor_packet(const uint8* buffer, struct SensorPacket* packet) {
    memcpy(packet, buffer, SENSOR_PACKET_SIZE);
80008e2e:	a0 8f       	mov.a %a15,8
80008e30:	04 4f       	ld.bu %d15,[%a4+]
80008e32:	24 5f       	st.b [%a5+],%d15
80008e34:	fc fe       	loop %a15,80008e30 <deserialize_sensor_packet+0x2>
80008e36:	00 90       	ret 

80008e38 <initUltrasonic>:
80008e38:	91 40 00 4f 	movh.a %a4,61444
80008e3c:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e40:	82 14       	mov %d4,1
80008e42:	3b 00 08 50 	mov %d5,128
80008e46:	6d ff 5c e7 	call 80005cfe <IfxPort_setPinMode>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80008e4a:	91 40 00 4f 	movh.a %a4,61444
80008e4e:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e52:	82 24       	mov %d4,2
80008e54:	3b 80 00 50 	mov %d5,8
80008e58:	1d ff 53 e7 	j 80005cfe <IfxPort_setPinMode>

80008e5c <sendTrigger>:
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80008e5c:	91 40 00 ff 	movh.a %a15,61444
80008e60:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e64:	82 2f       	mov %d15,2
80008e66:	68 1f       	st.w [%a15]4,%d15
}

void sendTrigger()
{
    IfxPort_setPinHigh(TRIG_PIN);
    delay_us(10);
80008e68:	3b a0 00 40 	mov %d4,10
80008e6c:	7b 20 00 f0 	movh %d15,2
80008e70:	6d ff ad da 	call 800043ca <delay_us>
80008e74:	68 1f       	st.w [%a15]4,%d15
80008e76:	00 90       	ret 

80008e78 <measureEchoTick>:
}


IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
{
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80008e78:	91 40 00 ff 	movh.a %a15,61444
80008e7c:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e80:	4c f9       	ld.w %d15,[%a15]36
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0);
80008e82:	6f 2f ff 7f 	jz.t %d15,2,80008e80 <measureEchoTick+0x8>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008e86:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008e8a:	85 f0 2c 00 	ld.w %d0,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008e8e:	53 1f 40 20 	mul.u %e2,%d15,1
80008e92:	91 40 00 ff 	movh.a %a15,61444
    result |= ((uint64)stm->CAP.U) << 32;
80008e96:	8f 0f 40 41 	or %d4,%d15,0
80008e9a:	0f 30 a0 50 	or %d5,%d0,%d3
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008e9e:	7b 40 07 00 	movh %d0,116
    IfxPort_setPinLow(TRIG_PIN);
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
80008ea2:	d2 02       	mov %e2,0
80008ea4:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
    while (IfxPort_getPinState(ECHO_PIN) == 0);
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008ea8:	1b 00 78 0f 	addi %d0,%d0,-2176
80008eac:	4c f9       	ld.w %d15,[%a15]36
long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0);
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
80008eae:	6f 2f 18 00 	jz.t %d15,2,80008ede <measureEchoTick+0x66>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008eb2:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008eb6:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008eba:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008ebe:	8f 0f 40 61 	or %d6,%d15,0
80008ec2:	0f 32 a0 70 	or %d7,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008ec6:	0b 46 c0 20 	subx %d2,%d6,%d4
80008eca:	0b 57 d0 30 	subc %d3,%d7,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008ece:	ba 03       	eq %d15,%d3,0
80008ed0:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80008ed4:	8b 03 00 f5 	or.ne %d15,%d3,0
80008ed8:	6e ea       	jz %d15,80008eac <measureEchoTick+0x34>
80008eda:	82 f2       	mov %d2,-1
    };
    
    return (long)elapsedTick;
}
80008edc:	00 90       	ret 
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    
    return (long)elapsedTick;
80008ede:	00 90       	ret 

80008ee0 <getUltrasonic>:
    IfxPort_setPinModeOutput(TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

int getUltrasonic(){
    sendTrigger();
80008ee0:	6d ff be ff 	call 80008e5c <sendTrigger>
    long echoTicks = measureEchoTick();
80008ee4:	6d ff ca ff 	call 80008e78 <measureEchoTick>
80008ee8:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008eea:	82 f2       	mov %d2,-1
80008eec:	1e fb       	jeq %d15,-1,80008f02 <getUltrasonic+0x22>
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008eee:	3b 80 0c 20 	mov %d2,200
80008ef2:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008ef6:	3b 80 3e f0 	mov %d15,1000
80008efa:	53 12 21 20 	mul %d2,%d2,17
80008efe:	4b f2 01 22 	div %e2,%d2,%d15
    sendTrigger();
    long echoTicks = measureEchoTick();
    if(echoTicks==-1)return -1;
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}
80008f02:	00 90       	ret 

80008f04 <calculateDistanceCm>:
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008f04:	3b 80 0c 20 	mov %d2,200
80008f08:	4b 24 01 42 	div %e4,%d4,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008f0c:	3b 80 3e 20 	mov %d2,1000
80008f10:	53 14 21 40 	mul %d4,%d4,17
80008f14:	4b 24 01 22 	div %e2,%d4,%d2
    return (int) distanceCm;
}
80008f18:	00 90       	ret 

80008f1a <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f1a:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f1e:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f22:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f26:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f2a:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f2c:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f2e:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f32:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80008f36:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008f3a:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008f3e:	8f f8 83 81 	xor %d8,%d8,63
80008f42:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
80008f46:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008f48:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008f4c:	3b 00 b8 f0 	mov %d15,2944
80008f50:	cd 4f e0 0f 	mtcr $psw,%d15
80008f54:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008f58:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008f5c:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008f60:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008f64:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008f68:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008f6c:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008f6e:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008f72:	cd 42 20 09 	mtcr $pcon1,%d2
80008f76:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f7a:	53 cf 20 f0 	mul %d15,%d15,12
80008f7e:	10 22       	addsc.a %a2,%a2,%d15,0
80008f80:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008f82:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f84:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008f88:	d9 2f 00 46 	lea %a15,[%a2]24832
80008f8c:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f90:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008f92:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f96:	2e 16       	jz.t %d15,1,80008fa2 <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f98:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f9c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008fa0:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008fa2:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008fa6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008faa:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008fac:	4c f0       	ld.w %d15,[%a15]0
80008fae:	6f 0f ff ff 	jnz.t %d15,0,80008fac <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008fb2:	82 0f       	mov %d15,0
80008fb4:	cd cf 20 09 	mtcr $pcon0,%d15
80008fb8:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008fbc:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008fbe:	2e 16       	jz.t %d15,1,80008fca <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008fc0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008fc4:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008fc8:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008fca:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008fce:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008fd2:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008fd4:	4c f0       	ld.w %d15,[%a15]0
80008fd6:	6f 0f ff 7f 	jz.t %d15,0,80008fd4 <osEE_tc_core0_start+0xba>
80008fda:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008fde:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008fe2:	91 30 00 ff 	movh.a %a15,61443
80008fe6:	53 cf 20 f0 	mul %d15,%d15,12
80008fea:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008fee:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008ff0:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ff2:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008ff4:	d9 2f 00 46 	lea %a15,[%a2]24832
80008ff8:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ffc:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009000:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80009002:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009006:	2e 16       	jz.t %d15,1,80009012 <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009008:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000900c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009010:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80009012:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80009016:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000901a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000901c:	4c f0       	ld.w %d15,[%a15]0
8000901e:	6f 0f ff ff 	jnz.t %d15,0,8000901c <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80009022:	82 0f       	mov %d15,0
80009024:	cd 0f 04 09 	mtcr $dcon0,%d15
80009028:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000902c:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000902e:	2e 16       	jz.t %d15,1,8000903a <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009030:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009034:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009038:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
8000903a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
8000903e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009042:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80009044:	4c f0       	ld.w %d15,[%a15]0
80009046:	6f 0f ff 7f 	jz.t %d15,0,80009044 <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000904a:	91 30 00 ff 	movh.a %a15,61443
8000904e:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009052:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009054:	2e 16       	jz.t %d15,1,80009060 <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009056:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000905a:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000905e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80009060:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80009064:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009068:	91 30 00 ff 	movh.a %a15,61443
8000906c:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009070:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80009072:	4c f0       	ld.w %d15,[%a15]0
80009074:	91 30 00 2f 	movh.a %a2,61443
80009078:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000907c:	6f 0f fb ff 	jnz.t %d15,0,80009072 <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
80009080:	7b 00 00 f8 	movh %d15,32768
80009084:	1b 0f 20 f1 	addi %d15,%d15,4608
80009088:	cd 4f e2 0f 	mtcr $btv,%d15
8000908c:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80009090:	7b 00 00 f8 	movh %d15,32768
80009094:	1b 0f 00 f2 	addi %d15,%d15,8192
80009098:	cd 0f e2 0f 	mtcr $biv,%d15
8000909c:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
800090a0:	7b 20 00 f7 	movh %d15,28674
800090a4:	1b 0f b0 f9 	addi %d15,%d15,-25856
800090a8:	cd 8f e2 0f 	mtcr $isp,%d15
800090ac:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800090b0:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800090b2:	2e 16       	jz.t %d15,1,800090be <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800090b4:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800090b8:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800090bc:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800090be:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800090c2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800090c6:	91 30 00 ff 	movh.a %a15,61443
800090ca:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800090ce:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800090d0:	4c f0       	ld.w %d15,[%a15]0
800090d2:	6f 0f ff 7f 	jz.t %d15,0,800090d0 <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
800090d6:	91 10 00 f7 	movh.a %a15,28673
800090da:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
800090de:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
800090e0:	91 10 00 f8 	movh.a %a15,32769
800090e4:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800090e8:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
800090ea:	91 10 00 f8 	movh.a %a15,32769
800090ee:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800090f2:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
800090f4:	91 10 00 fb 	movh.a %a15,45057
800090f8:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
800090fc:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
800090fe:	7b 20 00 f7 	movh %d15,28674
80009102:	7b 20 00 47 	movh %d4,28674
80009106:	1b 0f c0 69 	addi %d6,%d15,-25600
8000910a:	1b 04 c0 4b 	addi %d4,%d4,-17408
8000910e:	a2 64       	sub %d4,%d6
80009110:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80009112:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80009114:	df 04 16 00 	jeq %d4,0,80009140 <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80009118:	9a f4       	add %d15,%d4,-1
8000911a:	06 6f       	sh %d15,6
8000911c:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000911e:	60 3f       	mov.a %a15,%d3
80009120:	82 00       	mov %d0,0
80009122:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009124:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009126:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
8000912a:	37 03 70 73 	extr.u %d7,%d3,6,16
8000912e:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009132:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009134:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80009138:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000913a:	82 53       	mov %d3,5
8000913c:	fd f0 11 01 	loop %a15,8000935e <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80009140:	cd 82 e3 0f 	mtcr $fcx,%d2
80009144:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009148:	91 30 00 ff 	movh.a %a15,61443
8000914c:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009150:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009152:	2e 16       	jz.t %d15,1,8000915e <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009154:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009158:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000915c:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000915e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80009162:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009166:	91 30 00 ff 	movh.a %a15,61443
8000916a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000916e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80009170:	40 f2       	mov.aa %a2,%a15
80009172:	4c 20       	ld.w %d15,[%a2]0
80009174:	91 30 00 ff 	movh.a %a15,61443
80009178:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000917c:	6f 0f fb ff 	jnz.t %d15,0,80009172 <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80009180:	4c f1       	ld.w %d15,[%a15]4
80009182:	96 08       	or %d15,8
80009184:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009186:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009188:	2e 16       	jz.t %d15,1,80009194 <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000918a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000918e:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009192:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80009194:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80009198:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000919c:	91 30 00 ff 	movh.a %a15,61443
800091a0:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800091a4:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800091a6:	4c f0       	ld.w %d15,[%a15]0
800091a8:	6f 0f ff 7f 	jz.t %d15,0,800091a6 <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800091ac:	91 30 00 ff 	movh.a %a15,61443
800091b0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091b4:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800091b6:	2e 16       	jz.t %d15,1,800091c2 <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800091b8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800091bc:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800091c0:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800091c2:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800091c6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800091ca:	91 30 00 ff 	movh.a %a15,61443
800091ce:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091d2:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800091d4:	40 f2       	mov.aa %a2,%a15
800091d6:	4c 20       	ld.w %d15,[%a2]0
800091d8:	91 30 00 ff 	movh.a %a15,61443
800091dc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091e0:	6f 0f fb ff 	jnz.t %d15,0,800091d6 <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
800091e4:	4c f1       	ld.w %d15,[%a15]4
800091e6:	96 08       	or %d15,8
800091e8:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800091ea:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800091ec:	2e 16       	jz.t %d15,1,800091f8 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800091ee:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800091f2:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800091f6:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
800091f8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
800091fc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80009200:	91 30 00 ff 	movh.a %a15,61443
80009204:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009208:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
8000920a:	4c f0       	ld.w %d15,[%a15]0
8000920c:	6f 0f ff 7f 	jz.t %d15,0,8000920a <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80009210:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
80009214:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80009216:	d9 44 0c 31 	lea %a4,[%a4]4300 <800010cc <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
8000921a:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
8000921c:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
8000921e:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
80009220:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
80009222:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80009224:	9e f6       	jeq %d15,-1,80009250 <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009226:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
8000922a:	76 49       	jz %d4,8000923c <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
8000922c:	60 4f       	mov.a %a15,%d4
8000922e:	40 32       	mov.aa %a2,%a3
80009230:	b0 ff       	add.a %a15,-1
80009232:	89 22 48 01 	st.d [%a2+]8,%e2
80009236:	fc fe       	loop %a15,80009232 <osEE_tc_core0_start+0x318>
80009238:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
8000923c:	2e 22       	jz.t %d15,2,80009240 <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
8000923e:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80009240:	2e 12       	jz.t %d15,1,80009244 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
80009242:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80009244:	2e 02       	jz.t %d15,0,80009248 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80009246:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80009248:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
8000924c:	bd 04 ea ff 	jnz.a %a4,80009220 <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
80009250:	91 00 00 68 	movh.a %a6,32768
80009254:	d9 66 34 41 	lea %a6,[%a6]4404 <80001134 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80009258:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
8000925a:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
8000925c:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80009260:	df ff 21 00 	jeq %d15,-1,800092a2 <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009264:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009268:	76 4f       	jz %d4,80009286 <osEE_tc_core0_start+0x36c>
8000926a:	60 4f       	mov.a %a15,%d4
8000926c:	40 43       	mov.aa %a3,%a4
8000926e:	40 52       	mov.aa %a2,%a5
80009270:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
80009272:	09 22 48 01 	ld.d %e2,[%a2+]8
80009276:	89 32 48 01 	st.d [%a3+]8,%e2
8000927a:	fc fc       	loop %a15,80009272 <osEE_tc_core0_start+0x358>
8000927c:	06 34       	sh %d4,3
8000927e:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
80009282:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80009286:	2e 23       	jz.t %d15,2,8000928c <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80009288:	44 52       	ld.w %d2,[%a5+]
8000928a:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
8000928c:	2e 14       	jz.t %d15,1,80009294 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
8000928e:	09 52 c2 00 	ld.hu %d2,[%a5+]2
80009292:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80009294:	2e 03       	jz.t %d15,0,8000929a <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
80009296:	0c 50       	ld.bu %d15,[%a5]0
80009298:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
8000929a:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
8000929e:	bd 06 dd ff 	jnz.a %a6,80009258 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800092a2:	91 30 00 ff 	movh.a %a15,61443
800092a6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092aa:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800092ac:	2e 16       	jz.t %d15,1,800092b8 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800092ae:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800092b2:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800092b6:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800092b8:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800092bc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800092c0:	91 30 00 ff 	movh.a %a15,61443
800092c4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092c8:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800092ca:	4c f0       	ld.w %d15,[%a15]0
800092cc:	6f 0f ff ff 	jnz.t %d15,0,800092ca <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
800092d0:	7b 20 22 f1 	movh %d15,4642
800092d4:	91 30 00 ff 	movh.a %a15,61443
800092d8:	1b 1f 10 f0 	addi %d15,%d15,257
800092dc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800092e0:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
800092e2:	7b 00 00 f5 	movh %d15,20480
800092e6:	91 30 00 ff 	movh.a %a15,61443
800092ea:	1b 0f 10 f1 	addi %d15,%d15,4352
800092ee:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800092f2:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
800092f4:	7b 70 00 f0 	movh %d15,7
800092f8:	91 30 00 ff 	movh.a %a15,61443
800092fc:	1b cf 01 f0 	addi %d15,%d15,28
80009300:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009304:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
80009306:	4c f0       	ld.w %d15,[%a15]0
80009308:	6f 1f ff 7f 	jz.t %d15,1,80009306 <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
8000930c:	91 30 00 ff 	movh.a %a15,61443
80009310:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009314:	4c f0       	ld.w %d15,[%a15]0
80009316:	6f 8f ff 7f 	jz.t %d15,8,80009314 <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
8000931a:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
8000931e:	91 30 00 ff 	movh.a %a15,61443
80009322:	1b 04 20 4c 	addi %d4,%d4,-15872
80009326:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000932a:	6d 00 58 00 	call 800093da <osEE_tc_set_pll_fsource>
8000932e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80009330:	2e 16       	jz.t %d15,1,8000933c <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80009332:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80009336:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
8000933a:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
8000933c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80009340:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80009344:	91 30 00 ff 	movh.a %a15,61443
80009348:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000934c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
8000934e:	4c f0       	ld.w %d15,[%a15]0
80009350:	6f 0f ff 7f 	jz.t %d15,0,8000934e <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80009354:	6d ff c4 d9 	call 800046dc <main>
80009358:	02 24       	mov %d4,%d2
8000935a:	6d 00 ff 27 	call 8000e358 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000935e:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009360:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80009364:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009366:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009368:	37 0f 70 23 	extr.u %d2,%d15,6,16
8000936c:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80009370:	76 36       	jz %d3,8000937c <osEE_tc_core0_start+0x462>
80009372:	1b 0f fc ff 	addi %d15,%d15,-64
80009376:	fc f4       	loop %a15,8000935e <osEE_tc_core0_start+0x444>
80009378:	1d ff e4 fe 	j 80009140 <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
8000937c:	cd c2 e3 0f 	mtcr $lcx,%d2
80009380:	0d 00 c0 04 	isync 
80009384:	3c f7       	j 80009372 <osEE_tc_core0_start+0x458>

80009386 <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
80009386:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009388:	91 00 00 f7 	movh.a %a15,28672
8000938c:	19 ff f8 a0 	ld.w %d15,[%a15]3768 <70000eb8 <osEE_tc_stm_freq_khz>>
80009390:	3b 80 3e 20 	mov %d2,1000
80009394:	3f 2f 0c 80 	jlt.u %d15,%d2,800093ac <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80009398:	7b 20 06 21 	movh %d2,4194
8000939c:	1b 32 dd 24 	addi %d2,%d2,19923
800093a0:	73 2f 68 20 	mul.u %e2,%d15,%d2
800093a4:	8f a3 1f 20 	sh %d2,%d3,-6
800093a8:	e2 42       	mul %d2,%d4
800093aa:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
800093ac:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
800093ae:	73 f4 0a 20 	mul %d2,%d4,%d15
800093b2:	7b 20 06 31 	movh %d3,4194
800093b6:	1b 33 dd 34 	addi %d3,%d3,19923
800093ba:	73 32 68 20 	mul.u %e2,%d2,%d3
800093be:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
800093c2:	3f 54 0b 80 	jlt.u %d4,%d5,800093d8 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
800093c6:	7b 20 06 21 	movh %d2,4194
800093ca:	1b 32 dd 24 	addi %d2,%d2,19923
800093ce:	73 24 68 40 	mul.u %e4,%d4,%d2
800093d2:	8f a5 1f 20 	sh %d2,%d5,-6
800093d6:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
800093d8:	00 90       	ret 

800093da <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
800093da:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
800093dc:	7b e0 e4 20 	movh %d2,3662
800093e0:	1b 12 c0 21 	addi %d2,%d2,7169
800093e4:	0b 24 30 f1 	lt.u %d15,%d4,%d2
800093e8:	82 22       	mov %d2,2
800093ea:	ab 12 80 ff 	sel %d15,%d15,%d2,1
800093ee:	60 f4       	mov.a %a4,%d15
800093f0:	53 ff 20 f0 	mul %d15,%d15,15
800093f4:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800093f6:	3b 00 01 e0 	mov %d14,16
800093fa:	82 03       	mov %d3,0
800093fc:	7b c0 be 20 	movh %d2,3052
80009400:	1b 02 20 2c 	addi %d2,%d2,-15872
80009404:	02 28       	mov %d8,%d2
80009406:	82 01       	mov %d1,0
80009408:	82 0b       	mov %d11,0
8000940a:	82 0d       	mov %d13,0
8000940c:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
8000940e:	7b 10 13 a0 	movh %d10,305
80009412:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009416:	91 40 0f 60 	movh.a %a6,244
8000941a:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
8000941e:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80009420:	53 14 40 60 	mul.u %e6,%d4,1
80009424:	60 62       	mov.a %a2,%d6
80009426:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009428:	91 80 7d f1 	movh.a %a15,6104
8000942c:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
80009430:	a0 1c       	mov.a %a12,1
80009432:	3c 5e       	j 800094ee <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80009434:	4b ea 11 62 	div.u %e6,%d10,%d14
80009438:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
8000943a:	7b 60 f8 ff 	movh %d15,65414
8000943e:	1b 0f e0 fe 	addi %d15,%d15,-4608
80009442:	0b f6 40 60 	addx %d6,%d6,%d15
80009446:	8b f7 bf 50 	addc %d5,%d7,-1
8000944a:	ba 05       	eq %d15,%d5,0
8000944c:	80 67       	mov.d %d7,%a6
8000944e:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009452:	8b 05 00 f5 	or.ne %d15,%d5,0
80009456:	ee 4a       	jnz %d15,800094ea <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80009458:	df 00 56 00 	jeq %d0,0,80009504 <osEE_tc_set_pll_fsource+0x12a>
8000945c:	02 e9       	mov %d9,%d14
8000945e:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80009460:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80009462:	80 2f       	mov.d %d15,%a2
80009464:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009468:	80 3f       	mov.d %d15,%a3
8000946a:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
8000946e:	7b 80 82 fe 	movh %d15,59432
80009472:	1b 0f c0 f7 	addi %d15,%d15,31744
80009476:	0b f6 40 60 	addx %d6,%d6,%d15
8000947a:	8b f7 bf 50 	addc %d5,%d7,-1
8000947e:	ba 05       	eq %d15,%d5,0
80009480:	80 f7       	mov.d %d7,%a15
80009482:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009486:	8b 05 00 f5 	or.ne %d15,%d5,0
8000948a:	ee 25       	jnz %d15,800094d4 <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
8000948c:	0f 23 a0 f0 	or %d15,%d3,%d2
80009490:	6e 2d       	jz %d15,800094ea <osEE_tc_set_pll_fsource+0x110>
80009492:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
80009494:	4b 96 11 22 	div.u %e2,%d6,%d9
80009498:	02 2f       	mov %d15,%d2
8000949a:	e2 af       	mul %d15,%d10
8000949c:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
8000949e:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800094a2:	df 0f ac 00 	jeq %d15,0,800095fa <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
800094a6:	0b 13 00 51 	eq %d5,%d3,%d1
800094aa:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
800094ae:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
800094b2:	ab 01 80 15 	sel %d1,%d5,%d1,0
800094b6:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
800094ba:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
800094be:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
800094c2:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
800094c4:	8b 16 68 52 	lt.u %d5,%d6,129
800094c8:	8b 0f 20 54 	and.ne %d5,%d15,0
800094cc:	df 05 e4 ff 	jne %d5,0,80009494 <osEE_tc_set_pll_fsource+0xba>
800094d0:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800094d2:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
800094d4:	80 4f       	mov.d %d15,%a4
800094d6:	42 f0       	add %d0,%d15
800094d8:	80 56       	mov.d %d6,%a5
800094da:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
800094dc:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
800094e0:	8b d0 61 f2 	lt.u %d15,%d0,29
800094e4:	8b 05 20 f4 	and.ne %d15,%d5,0
800094e8:	ee bd       	jnz %d15,80009462 <osEE_tc_set_pll_fsource+0x88>
800094ea:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800094ee:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
800094f0:	0f 32 a0 f0 	or %d15,%d2,%d3
800094f4:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
800094f8:	8b 0e 20 52 	ne %d5,%d14,0
800094fc:	8b 0f 20 54 	and.ne %d5,%d15,0
80009500:	df 05 9a ff 	jne %d5,0,80009434 <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
80009504:	06 14       	sh %d4,1
80009506:	7b c0 1e f5 	movh %d15,20972
8000950a:	1b ff 51 f8 	addi %d15,%d15,-31457
8000950e:	73 f4 68 40 	mul.u %e4,%d4,%d15
80009512:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
80009516:	ba 01       	eq %d15,%d1,0
80009518:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
8000951c:	8b 01 00 f5 	or.ne %d15,%d1,0
80009520:	ee 73       	jnz %d15,80009606 <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
80009522:	c2 fc       	add %d12,-1
80009524:	91 30 00 ff 	movh.a %a15,61443
80009528:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000952c:	4c f0       	ld.w %d15,[%a15]0
8000952e:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
80009532:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
80009534:	91 30 00 ff 	movh.a %a15,61443
80009538:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000953c:	4c f0       	ld.w %d15,[%a15]0
8000953e:	6f 5f ff 7f 	jz.t %d15,5,8000953c <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
80009542:	91 30 00 ff 	movh.a %a15,61443
80009546:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000954a:	4c f0       	ld.w %d15,[%a15]0
8000954c:	96 01       	or %d15,1
8000954e:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
80009550:	91 30 00 ff 	movh.a %a15,61443
80009554:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009558:	4c f0       	ld.w %d15,[%a15]0
8000955a:	6f 0f ff 7f 	jz.t %d15,0,80009558 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
8000955e:	9a fb       	add %d15,%d11,-1
80009560:	91 30 00 ff 	movh.a %a15,61443
80009564:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009568:	16 0f       	and %d15,15
8000956a:	8f 8f 01 f0 	sh %d15,%d15,24
8000956e:	48 02       	ld.w %d2,[%a15]0
80009570:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80009574:	a6 2f       	or %d15,%d2
80009576:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009578:	9a fd       	add %d15,%d13,-1
8000957a:	16 7f       	and %d15,127
8000957c:	8f 9f 00 f0 	sh %d15,%d15,9
80009580:	48 02       	ld.w %d2,[%a15]0
80009582:	b7 02 87 24 	insert %d2,%d2,0,9,7
80009586:	a6 2f       	or %d15,%d2
80009588:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
8000958a:	4c f0       	ld.w %d15,[%a15]0
8000958c:	8f 2f c0 f1 	andn %d15,%d15,2
80009590:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
80009592:	4c f0       	ld.w %d15,[%a15]0
80009594:	96 40       	or %d15,64
80009596:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009598:	4c f0       	ld.w %d15,[%a15]0
8000959a:	96 20       	or %d15,32
8000959c:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
8000959e:	91 30 00 ff 	movh.a %a15,61443
800095a2:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095a6:	4c f0       	ld.w %d15,[%a15]0
800095a8:	6f 3f ff ff 	jnz.t %d15,3,800095a6 <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
800095ac:	91 30 00 ff 	movh.a %a15,61443
800095b0:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095b4:	4c f0       	ld.w %d15,[%a15]0
800095b6:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800095ba:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
800095bc:	91 30 00 ff 	movh.a %a15,61443
800095c0:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095c4:	4c f0       	ld.w %d15,[%a15]0
800095c6:	6f 2f ff 7f 	jz.t %d15,2,800095c4 <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
800095ca:	91 30 00 ff 	movh.a %a15,61443
800095ce:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095d2:	4c f0       	ld.w %d15,[%a15]0
800095d4:	8f 1f c0 f1 	andn %d15,%d15,1
800095d8:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
800095da:	91 30 00 ff 	movh.a %a15,61443
800095de:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095e2:	4c f0       	ld.w %d15,[%a15]0
800095e4:	6f 0f ff ff 	jnz.t %d15,0,800095e2 <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
800095e8:	91 30 00 ff 	movh.a %a15,61443
800095ec:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095f0:	4c f0       	ld.w %d15,[%a15]0
800095f2:	8f 0f c4 f1 	andn %d15,%d15,64
800095f6:	68 0f       	st.w [%a15]0,%d15
800095f8:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
800095fa:	02 28       	mov %d8,%d2
800095fc:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800095fe:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80009600:	02 0c       	mov %d12,%d0
80009602:	1d ff 68 ff 	j 800094d2 <osEE_tc_set_pll_fsource+0xf8>
80009606:	00 90       	ret 

80009608 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
80009608:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
8000960a:	91 30 00 ff 	movh.a %a15,61443
8000960e:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80009612:	4c f0       	ld.w %d15,[%a15]0
80009614:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
80009618:	7b 60 5f 20 	movh %d2,1526
8000961c:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80009620:	6e 45       	jz %d15,800096aa <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
80009622:	91 30 00 ff 	movh.a %a15,61443
80009626:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000962a:	4c f0       	ld.w %d15,[%a15]0
8000962c:	6f 0f 11 00 	jz.t %d15,0,8000964e <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
80009630:	91 30 00 ff 	movh.a %a15,61443
80009634:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009638:	48 02       	ld.w %d2,[%a15]0
8000963a:	37 02 67 28 	extr.u %d2,%d2,16,7
8000963e:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
80009640:	7b 10 13 f0 	movh %d15,305
80009644:	1b 0f d0 f2 	addi %d15,%d15,11520
80009648:	4b 2f 11 22 	div.u %e2,%d15,%d2
8000964c:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
8000964e:	4c f0       	ld.w %d15,[%a15]0
80009650:	6f 3f 11 00 	jz.t %d15,3,80009672 <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009654:	91 30 00 ff 	movh.a %a15,61443
80009658:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000965c:	48 02       	ld.w %d2,[%a15]0
8000965e:	8f f2 07 21 	and %d2,%d2,127
80009662:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80009664:	7b 10 13 20 	movh %d2,305
80009668:	1b 02 d0 22 	addi %d2,%d2,11520
8000966c:	4b f2 11 22 	div.u %e2,%d2,%d15
80009670:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009672:	91 30 00 ff 	movh.a %a15,61443
80009676:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000967a:	4c f0       	ld.w %d15,[%a15]0
8000967c:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
80009680:	91 30 00 ff 	movh.a %a15,61443
80009684:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009688:	4c f0       	ld.w %d15,[%a15]0
8000968a:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
8000968e:	48 02       	ld.w %d2,[%a15]0
80009690:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009694:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
80009696:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
8000969a:	7b 10 13 20 	movh %d2,305
8000969e:	1b 02 d0 22 	addi %d2,%d2,11520
800096a2:	4b f2 11 22 	div.u %e2,%d2,%d15
800096a6:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
800096aa:	00 90       	ret 

800096ac <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
800096ac:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
800096ae:	6d ff ad ff 	call 80009608 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
800096b2:	91 30 00 ff 	movh.a %a15,61443
800096b6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800096ba:	4c f0       	ld.w %d15,[%a15]0
800096bc:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800096c0:	c2 12       	add %d2,1
800096c2:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
800096c6:	7b 20 06 f1 	movh %d15,4194
800096ca:	1b 3f dd f4 	addi %d15,%d15,19923
800096ce:	73 f2 68 20 	mul.u %e2,%d2,%d15
800096d2:	8f a3 1f f0 	sh %d15,%d3,-6
800096d6:	91 00 00 f7 	movh.a %a15,28672
800096da:	59 ff f8 a0 	st.w [%a15]3768 <70000eb8 <osEE_tc_stm_freq_khz>>,%d15
800096de:	00 90       	ret 

800096e0 <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
800096e0:	40 ae       	mov.aa %a14,%sp
800096e2:	02 59       	mov %d9,%d5
800096e4:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
800096e8:	6d ff 4f fe 	call 80009386 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
800096ec:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800096f0:	8f 38 00 f1 	and %d15,%d8,3
800096f4:	9b 0f 0f 40 	addih %d4,%d15,240
800096f8:	8f 84 00 40 	sh %d4,%d4,8
800096fc:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
800096fe:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80009700:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
80009702:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80009704:	df 09 23 00 	jeq %d9,0,8000974a <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
80009708:	48 e2       	ld.w %d2,[%a15]56
8000970a:	b7 02 05 24 	insert %d2,%d2,0,8,5
8000970e:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80009710:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
80009714:	48 e2       	ld.w %d2,[%a15]56
80009716:	37 32 05 30 	insert %d3,%d2,%d3,0,5
8000971a:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
8000971c:	48 f2       	ld.w %d2,[%a15]60
8000971e:	8f 42 c0 21 	andn %d2,%d2,4
80009722:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
80009724:	48 f2       	ld.w %d2,[%a15]60
80009726:	8f 12 40 21 	or %d2,%d2,1
8000972a:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
8000972c:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000972e:	60 f2       	mov.a %a2,%d15
80009730:	d9 2f 50 28 	lea %a15,[%a2]-31600
80009734:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009738:	b7 89 99 93 	insert %d9,%d9,8,7,25
8000973c:	8f 38 00 81 	and %d8,%d8,3
80009740:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009744:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009746:	68 09       	st.w [%a15]0,%d9
80009748:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
8000974a:	48 f2       	ld.w %d2,[%a15]60
8000974c:	8f 12 c0 21 	andn %d2,%d2,1
80009750:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
80009752:	1b 2f 09 f7 	addi %d15,%d15,28818
80009756:	9b 0f e0 f1 	addih %d15,%d15,7680
8000975a:	06 3f       	sh %d15,3
8000975c:	82 02       	mov %d2,0
8000975e:	60 ff       	mov.a %a15,%d15
80009760:	68 02       	st.w [%a15]0,%d2
80009762:	00 90       	ret 

80009764 <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
80009764:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009766:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
8000976a:	6d ff 0e fe 	call 80009386 <osEE_tc_stm_us_ticks>
8000976e:	16 03       	and %d15,3
80009770:	9b 0f 0f f0 	addih %d15,%d15,240
80009774:	8f 8f 00 f0 	sh %d15,%d15,8
80009778:	60 ff       	mov.a %a15,%d15
8000977a:	4c fc       	ld.w %d15,[%a15]48
8000977c:	42 f2       	add %d2,%d15
8000977e:	68 c2       	st.w [%a15]48,%d2
80009780:	00 90       	ret 

80009782 <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
80009782:	40 ae       	mov.aa %a14,%sp
80009784:	02 59       	mov %d9,%d5
80009786:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
8000978a:	6d ff fe fd 	call 80009386 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
8000978e:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80009792:	8f 38 00 f1 	and %d15,%d8,3
80009796:	9b 0f 0f 40 	addih %d4,%d15,240
8000979a:	8f 84 00 40 	sh %d4,%d4,8
8000979e:	60 4f       	mov.a %a15,%d4
800097a0:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800097a2:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
800097a4:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800097a6:	df 09 28 00 	jeq %d9,0,800097f6 <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
800097aa:	48 e2       	ld.w %d2,[%a15]56
800097ac:	b7 02 05 2c 	insert %d2,%d2,0,24,5
800097b0:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800097b2:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
800097b6:	8f f3 01 31 	and %d3,%d3,31
800097ba:	8f 03 01 30 	sh %d3,%d3,16
800097be:	48 e2       	ld.w %d2,[%a15]56
800097c0:	b7 02 05 28 	insert %d2,%d2,0,16,5
800097c4:	a6 23       	or %d3,%d2
800097c6:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
800097c8:	48 f2       	ld.w %d2,[%a15]60
800097ca:	8f 02 44 21 	or %d2,%d2,64
800097ce:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
800097d0:	48 f2       	ld.w %d2,[%a15]60
800097d2:	8f 02 41 21 	or %d2,%d2,16
800097d6:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
800097d8:	06 3f       	sh %d15,3
800097da:	60 f2       	mov.a %a2,%d15
800097dc:	d9 2f 54 28 	lea %a15,[%a2]-31596
800097e0:	11 4f 00 ff 	addih.a %a15,%a15,61444
800097e4:	b7 89 99 93 	insert %d9,%d9,8,7,25
800097e8:	8f 38 00 81 	and %d8,%d8,3
800097ec:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800097f0:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800097f2:	68 09       	st.w [%a15]0,%d9
800097f4:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
800097f6:	48 f2       	ld.w %d2,[%a15]60
800097f8:	8f 02 c1 21 	andn %d2,%d2,16
800097fc:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
800097fe:	06 3f       	sh %d15,3
80009800:	60 f2       	mov.a %a2,%d15
80009802:	d9 2f 54 28 	lea %a15,[%a2]-31596
80009806:	11 4f 00 ff 	addih.a %a15,%a15,61444
8000980a:	82 0f       	mov %d15,0
8000980c:	68 0f       	st.w [%a15]0,%d15
8000980e:	00 90       	ret 

80009810 <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
80009810:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009812:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
80009816:	6d ff b8 fd 	call 80009386 <osEE_tc_stm_us_ticks>
8000981a:	16 03       	and %d15,3
8000981c:	9b 0f 0f f0 	addih %d15,%d15,240
80009820:	8f 8f 00 f0 	sh %d15,%d15,8
80009824:	60 ff       	mov.a %a15,%d15
80009826:	4c fd       	ld.w %d15,[%a15]52
80009828:	42 f2       	add %d2,%d15
8000982a:	68 d2       	st.w [%a15]52,%d2
8000982c:	00 90       	ret 

8000982e <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
8000982e:	40 ae       	mov.aa %a14,%sp
80009830:	4d c0 e1 ff 	mfcr %d15,$core_id
80009834:	16 03       	and %d15,3
80009836:	9b 0f 0f f0 	addih %d15,%d15,240
8000983a:	8f 8f 00 f0 	sh %d15,%d15,8
8000983e:	60 f2       	mov.a %a2,%d15
80009840:	d9 2f 10 00 	lea %a15,[%a2]16
80009844:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
80009848:	6d ff 9f fd 	call 80009386 <osEE_tc_stm_us_ticks>
8000984c:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
8000984e:	a2 8f       	sub %d15,%d8
80009850:	3f 2f fe ff 	jlt.u %d15,%d2,8000984c <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
80009854:	00 90       	ret 

80009856 <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
80009856:	40 ae       	mov.aa %a14,%sp
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
80009858:	6d 00 86 05 	call 8000a364 <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
8000985c:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
80009860:	00 80       	rfe 
80009862:	00 90       	ret 

80009864 <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
80009864:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009866:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009868:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
8000986c:	82 32       	mov %d2,3
8000986e:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
80009872:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
80009876:	5e 25       	jne %d15,2,80009880 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009878:	99 44 04 00 	ld.a %a4,[%a4]4
8000987c:	6d 00 89 06 	call 8000a58e <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
80009880:	3c 00       	j 80009880 <osEE_shutdown_os+0x1c>

80009882 <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
80009882:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009884:	91 00 00 f8 	movh.a %a15,32768
80009888:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
8000988c:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
80009890:	82 1f       	mov %d15,1
80009892:	e9 ff 1e 00 	st.b [%a15]30,%d15
80009896:	00 90       	ret 

80009898 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
80009898:	40 ae       	mov.aa %a14,%sp
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000989a:	91 00 00 f8 	movh.a %a15,32768
8000989e:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
800098a2:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <80000140 <osEE_cdb_var>>
800098a6:	6e 06       	jz %d15,800098b2 <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
800098a8:	82 0f       	mov %d15,0
800098aa:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800098ae:	0d 00 00 03 	enable 
800098b2:	00 90       	ret 

800098b4 <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
800098b4:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800098b6:	91 00 00 f8 	movh.a %a15,32768
800098ba:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
800098be:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000140 <osEE_cdb_var>>
800098c2:	ee 0c       	jnz %d15,800098da <SuspendAllInterrupts+0x26>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098c4:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800098c8:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800098cc:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800098ce:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800098d2:	c2 1f       	add %d15,1
800098d4:	e9 ff 1c 00 	st.b [%a15]28,%d15
800098d8:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800098da:	8b ff 0f 22 	eq %d2,%d15,255
800098de:	f6 25       	jnz %d2,800098e8 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
800098e0:	c2 1f       	add %d15,1
800098e2:	e9 ff 1c 00 	st.b [%a15]28,%d15
800098e6:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
800098e8:	91 00 00 48 	movh.a %a4,32768
800098ec:	d9 44 00 50 	lea %a4,[%a4]320 <80000140 <osEE_cdb_var>>
800098f0:	3b 90 01 40 	mov %d4,25
800098f4:	3c b8       	j 80009864 <osEE_shutdown_os>

800098f6 <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
800098f6:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800098f8:	91 00 00 f8 	movh.a %a15,32768
800098fc:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
80009900:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000140 <osEE_cdb_var>>
80009904:	6e 0b       	jz %d15,8000991a <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
80009906:	c2 ff       	add %d15,-1
80009908:	16 ff       	and %d15,255
8000990a:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
8000990e:	ee 06       	jnz %d15,8000991a <ResumeAllInterrupts+0x24>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009910:	4c f5       	ld.w %d15,[%a15]20
80009912:	cd cf e2 0f 	mtcr $icr,%d15
80009916:	0d 00 c0 04 	isync 
8000991a:	00 90       	ret 

8000991c <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
8000991c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000991e:	91 00 00 f8 	movh.a %a15,32768
80009922:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
80009926:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000140 <osEE_cdb_var>>
8000992a:	ee 18       	jnz %d15,8000995a <SuspendOSInterrupts+0x3e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000992c:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009930:	8f f2 0f f1 	and %d15,%d2,255
80009934:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009938:	ee 0a       	jnz %d15,8000994c <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
8000993a:	02 2f       	mov %d15,%d2
8000993c:	3b 30 01 30 	mov %d3,19
80009940:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009944:	cd cf e2 0f 	mtcr $icr,%d15
80009948:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
8000994c:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
8000994e:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009952:	c2 1f       	add %d15,1
80009954:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009958:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
8000995a:	8b ff 0f 22 	eq %d2,%d15,255
8000995e:	f6 25       	jnz %d2,80009968 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
80009960:	c2 1f       	add %d15,1
80009962:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009966:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009968:	91 00 00 48 	movh.a %a4,32768
8000996c:	d9 44 00 50 	lea %a4,[%a4]320 <80000140 <osEE_cdb_var>>
80009970:	3b 90 01 40 	mov %d4,25
80009974:	1d ff 78 ff 	j 80009864 <osEE_shutdown_os>

80009978 <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
80009978:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000997a:	91 00 00 f8 	movh.a %a15,32768
8000997e:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
80009982:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000140 <osEE_cdb_var>>
80009986:	6e 16       	jz %d15,800099b2 <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
80009988:	c2 ff       	add %d15,-1
8000998a:	16 ff       	and %d15,255
8000998c:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009990:	ee 11       	jnz %d15,800099b2 <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
80009992:	48 62       	ld.w %d2,[%a15]24
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009994:	4d c0 e2 3f 	mfcr %d3,$icr
80009998:	02 3f       	mov %d15,%d3
8000999a:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000999e:	8f f2 0f 21 	and %d2,%d2,255
800099a2:	5f 23 08 00 	jeq %d3,%d2,800099b2 <ResumeOSInterrupts+0x3a>
800099a6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099aa:	cd cf e2 0f 	mtcr $icr,%d15
800099ae:	0d 00 c0 04 	isync 
800099b2:	00 90       	ret 

800099b4 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
800099b4:	40 ae       	mov.aa %a14,%sp
800099b6:	02 49       	mov %d9,%d4
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800099b8:	91 00 00 f8 	movh.a %a15,32768
800099bc:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099c0:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800099c4:	8f f8 0f f1 	and %d15,%d8,255
800099c8:	8b 3f a1 f2 	ge.u %d15,%d15,19
800099cc:	ee 0a       	jnz %d15,800099e0 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
800099ce:	02 8f       	mov %d15,%d8
800099d0:	3b 30 01 20 	mov %d2,19
800099d4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099d8:	cd cf e2 0f 	mtcr $icr,%d15
800099dc:	0d 00 c0 04 	isync 
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800099e0:	39 ff 10 00 	ld.bu %d15,[%a15]16
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
800099e4:	82 15       	mov %d5,1
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800099e6:	ee 21       	jnz %d15,80009a28 <StartOS+0x74>
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800099e8:	6d 00 e6 05 	call 8000a5b4 <osEE_cpu_startos>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
800099ec:	3b 80 01 50 	mov %d5,24
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800099f0:	df 02 1c 00 	jeq %d2,0,80009a28 <StartOS+0x74>
800099f4:	3c 24       	j 80009a3c <StartOS+0x88>
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
800099f6:	82 2f       	mov %d15,2
800099f8:	e9 ff 10 00 	st.b [%a15]16,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
800099fc:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009a00:	5e 2a       	jne %d15,2,80009a14 <StartOS+0x60>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
80009a02:	40 c4       	mov.aa %a4,%a12
80009a04:	99 c5 04 00 	ld.a %a5,[%a12]4
80009a08:	40 56       	mov.aa %a6,%a5
80009a0a:	6d 00 3a 06 	call 8000a67e <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009a0e:	40 c4       	mov.aa %a4,%a12
80009a10:	6d 00 8a 04 	call 8000a324 <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009a14:	0d 00 40 03 	disable 
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
80009a18:	3c 00       	j 80009a18 <StartOS+0x64>
80009a1a:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a1e:	cd cf e2 0f 	mtcr $icr,%d15
80009a22:	0d 00 c0 04 	isync 
80009a26:	3c 1b       	j 80009a5c <StartOS+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a28:	4d c0 e2 4f 	mfcr %d4,$icr
80009a2c:	02 4f       	mov %d15,%d4
80009a2e:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009a32:	8f f8 0f 31 	and %d3,%d8,255
80009a36:	5f 34 f2 ff 	jne %d4,%d3,80009a1a <StartOS+0x66>
80009a3a:	3c 11       	j 80009a5c <StartOS+0xa8>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009a3c:	91 00 00 28 	movh.a %a2,32768
80009a40:	d9 22 00 50 	lea %a2,[%a2]320 <80000140 <osEE_cdb_var>>
80009a44:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009a48:	82 1f       	mov %d15,1
80009a4a:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009a4e:	e9 f9 11 00 	st.b [%a15]17,%d9
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
80009a52:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009a56:	df 1f d3 ff 	jne %d15,1,800099fc <StartOS+0x48>
80009a5a:	3c ce       	j 800099f6 <StartOS+0x42>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
80009a5c:	02 52       	mov %d2,%d5
80009a5e:	00 90       	ret 

80009a60 <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009a60:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009a62:	91 00 00 f8 	movh.a %a15,32768
80009a66:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009a6a:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000140 <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009a6e:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009a72:	6e 03       	jz %d15,80009a78 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009a74:	39 f2 11 00 	ld.bu %d2,[%a15]17
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009a78:	00 90       	ret 

80009a7a <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009a7a:	40 ae       	mov.aa %a14,%sp
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009a7c:	91 00 00 f8 	movh.a %a15,32768
80009a80:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009a84:	4c f2       	ld.w %d15,[%a15]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009a86:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009a88:	7f f4 39 80 	jge.u %d4,%d15,80009afa <ActivateTask+0x80>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009a8c:	91 00 00 f8 	movh.a %a15,32768
80009a90:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009a94:	c8 1f       	ld.a %a15,[%a15]4
80009a96:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009a9a:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009a9c:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009aa0:	ff 2f 2d 80 	jge.u %d15,2,80009afa <ActivateTask+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009aa4:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009aa8:	8f f9 0f f1 	and %d15,%d9,255
80009aac:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ab0:	ee 0a       	jnz %d15,80009ac4 <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
80009ab2:	02 9f       	mov %d15,%d9
80009ab4:	3b 30 01 20 	mov %d2,19
80009ab8:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009abc:	cd cf e2 0f 	mtcr $icr,%d15
80009ac0:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
80009ac4:	40 f4       	mov.aa %a4,%a15
80009ac6:	6d 00 23 04 	call 8000a30c <osEE_task_activated>
80009aca:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
80009acc:	f6 28       	jnz %d2,80009adc <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
80009ace:	91 00 00 48 	movh.a %a4,32768
80009ad2:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
80009ad6:	40 f5       	mov.aa %a5,%a15
80009ad8:	6d 00 57 04 	call 8000a386 <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009adc:	4d c0 e2 3f 	mfcr %d3,$icr
80009ae0:	02 3f       	mov %d15,%d3
80009ae2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009ae6:	8f f9 0f 21 	and %d2,%d9,255
80009aea:	5f 23 08 00 	jeq %d3,%d2,80009afa <ActivateTask+0x80>
80009aee:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009af2:	cd cf e2 0f 	mtcr $icr,%d15
80009af6:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009afa:	02 82       	mov %d2,%d8
80009afc:	00 90       	ret 

80009afe <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009afe:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
80009b00:	91 00 00 f8 	movh.a %a15,32768
80009b04:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009b08:	48 03       	ld.w %d3,[%a15]0
80009b0a:	91 00 00 28 	movh.a %a2,32768
80009b0e:	d9 22 2c 40 	lea %a2,[%a2]300 <8000012c <osEE_kdb_var>>
80009b12:	4c 22       	ld.w %d15,[%a2]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009b14:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009b16:	7f f4 5e 80 	jge.u %d4,%d15,80009bd2 <ChainTask+0xd4>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009b1a:	91 00 00 28 	movh.a %a2,32768
80009b1e:	d9 22 2c 40 	lea %a2,[%a2]300 <8000012c <osEE_kdb_var>>
80009b22:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
80009b26:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009b2a:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009b2c:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009b30:	ff 2f 51 80 	jge.u %d15,2,80009bd2 <ChainTask+0xd4>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009b34:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009b38:	6e 09       	jz %d15,80009b4a <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
80009b3a:	82 0f       	mov %d15,0
80009b3c:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009b40:	4c f5       	ld.w %d15,[%a15]20
80009b42:	cd cf e2 0f 	mtcr $icr,%d15
80009b46:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009b4a:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009b4e:	6e 06       	jz %d15,80009b5a <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009b50:	82 0f       	mov %d15,0
80009b52:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009b56:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b5a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009b5e:	8f f8 0f f1 	and %d15,%d8,255
80009b62:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009b66:	ee 0a       	jnz %d15,80009b7a <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009b68:	02 8f       	mov %d15,%d8
80009b6a:	3b 30 01 20 	mov %d2,19
80009b6e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009b72:	cd cf e2 0f 	mtcr $icr,%d15
80009b76:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
80009b7a:	80 cf       	mov.d %d15,%a12
80009b7c:	7e 35       	jne %d15,%d3,80009b86 <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009b7e:	cc c3       	ld.a %a15,[%a12]12
80009b80:	82 5f       	mov %d15,5
80009b82:	28 2f       	st.b [%a15]2,%d15
80009b84:	3c 15       	j 80009bae <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009b86:	40 c4       	mov.aa %a4,%a12
80009b88:	6d 00 c2 03 	call 8000a30c <osEE_task_activated>
        if (ev == E_OK) {
80009b8c:	df 02 1a 80 	jne %d2,0,80009bc0 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009b90:	91 00 00 48 	movh.a %a4,32768
80009b94:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
80009b98:	40 c5       	mov.aa %a5,%a12
80009b9a:	6d 00 2a 04 	call 8000a3ee <osEE_scheduler_task_insert>
80009b9e:	3c 08       	j 80009bae <ChainTask+0xb0>
80009ba0:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009ba4:	cd cf e2 0f 	mtcr $icr,%d15
80009ba8:	0d 00 c0 04 	isync 
80009bac:	00 90       	ret 
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009bae:	91 00 00 f8 	movh.a %a15,32768
80009bb2:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
80009bb6:	c8 0f       	ld.a %a15,[%a15]0
80009bb8:	c8 14       	ld.a %a4,[%a15]4
80009bba:	a0 05       	mov.a %a5,0
80009bbc:	1d 00 98 05 	j 8000a6ec <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009bc0:	4d c0 e2 3f 	mfcr %d3,$icr
80009bc4:	02 3f       	mov %d15,%d3
80009bc6:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009bca:	8f f8 0f 81 	and %d8,%d8,255
80009bce:	5f 83 e9 ff 	jne %d3,%d8,80009ba0 <ChainTask+0xa2>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
80009bd2:	00 90       	ret 

80009bd4 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
80009bd4:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
80009bd6:	91 00 00 f8 	movh.a %a15,32768
80009bda:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009bde:	c8 02       	ld.a %a2,[%a15]0
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009be0:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000140 <osEE_cdb_var>>
80009be4:	6e 09       	jz %d15,80009bf6 <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
80009be6:	82 0f       	mov %d15,0
80009be8:	e9 ff 1c 00 	st.b [%a15]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009bec:	4c f5       	ld.w %d15,[%a15]20
80009bee:	cd cf e2 0f 	mtcr $icr,%d15
80009bf2:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009bf6:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009bfa:	6e 06       	jz %d15,80009c06 <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
80009bfc:	82 0f       	mov %d15,0
80009bfe:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009c02:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c06:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c0a:	8f ff 0f 21 	and %d2,%d15,255
80009c0e:	8b 32 a1 22 	ge.u %d2,%d2,19
80009c12:	f6 29       	jnz %d2,80009c24 <TerminateTask+0x50>
80009c14:	3b 30 01 20 	mov %d2,19
80009c18:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c1c:	cd cf e2 0f 	mtcr $icr,%d15
80009c20:	0d 00 c0 04 	isync 
80009c24:	99 24 04 00 	ld.a %a4,[%a2]4
80009c28:	a0 05       	mov.a %a5,0
80009c2a:	1d 00 61 05 	j 8000a6ec <osEE_hal_terminate_ctx>

80009c2e <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009c2e:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009c30:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009c34:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
80009c38:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009c3a:	c8 3c       	ld.a %a12,[%a15]12
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009c3c:	39 c2 01 00 	ld.bu %d2,[%a12]1 <80000140 <osEE_cdb_var>>
80009c40:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000140 <osEE_cdb_var>>
80009c44:	5f f2 2d 80 	jne %d2,%d15,80009c9e <Schedule+0x70>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c48:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c4c:	8f f8 0f f1 	and %d15,%d8,255
80009c50:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c54:	ee 0a       	jnz %d15,80009c68 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009c56:	02 8f       	mov %d15,%d8
80009c58:	3b 30 01 20 	mov %d2,19
80009c5c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c60:	cd cf e2 0f 	mtcr $icr,%d15
80009c64:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009c68:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009c6c:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009c6e:	91 00 00 48 	movh.a %a4,32768
80009c72:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
80009c76:	6d 00 36 04 	call 8000a4e2 <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009c7a:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009c7e:	2c c1       	st.b [%a12]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c80:	4d c0 e2 3f 	mfcr %d3,$icr
80009c84:	02 3f       	mov %d15,%d3
80009c86:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009c8a:	8f f8 0f 21 	and %d2,%d8,255
80009c8e:	5f 23 08 00 	jeq %d3,%d2,80009c9e <Schedule+0x70>
80009c92:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c96:	cd cf e2 0f 	mtcr $icr,%d15
80009c9a:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
80009c9e:	82 02       	mov %d2,0
80009ca0:	00 90       	ret 

80009ca2 <GetResource>:
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009ca2:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009ca4:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009ca8:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
80009cac:	c8 04       	ld.a %a4,[%a15]0
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
80009cae:	91 00 00 f8 	movh.a %a15,32768
80009cb2:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009cb6:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009cb8:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009cba:	7f f4 4c 80 	jge.u %d4,%d15,80009d52 <GetResource+0xb0>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
80009cbe:	91 00 00 f8 	movh.a %a15,32768
80009cc2:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009cc6:	c8 3f       	ld.a %a15,[%a15]12
80009cc8:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009ccc:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
80009cce:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
80009cd0:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
80009cd2:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
80009cd4:	08 14       	ld.bu %d4,[%a15]1
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009cd6:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009cda:	8f f2 0f 31 	and %d3,%d2,255
80009cde:	8b 33 a1 32 	ge.u %d3,%d3,19
80009ce2:	f6 3a       	jnz %d3,80009cf6 <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009ce4:	02 23       	mov %d3,%d2
80009ce6:	3b 30 01 50 	mov %d5,19
80009cea:	37 53 08 30 	insert %d3,%d3,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009cee:	cd c3 e2 0f 	mtcr $icr,%d3
80009cf2:	0d 00 c0 04 	isync 
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
80009cf6:	02 23       	mov %d3,%d2
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
80009cf8:	7f f4 16 80 	jge.u %d4,%d15,80009d24 <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009cfc:	28 1f       	st.b [%a15]1,%d15

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009cfe:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009d02:	8b ff 2f 72 	ne %d7,%d15,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009d06:	16 7f       	and %d15,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009d08:	c2 1f       	add %d15,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009d0a:	8f 02 d0 61 	andn %d6,%d2,256
80009d0e:	8f f2 cf 31 	andn %d3,%d2,255
80009d12:	a6 f3       	or %d3,%d15
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009d14:	8f f2 cf 21 	andn %d2,%d2,255
80009d18:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009d1c:	8b 05 40 52 	lt %d5,%d5,0
80009d20:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
80009d24:	b5 24 08 00 	st.a [%a2]8,%a4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d28:	4d c0 e2 5f 	mfcr %d5,$icr
80009d2c:	02 5f       	mov %d15,%d5
80009d2e:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009d32:	8f f3 0f 21 	and %d2,%d3,255
80009d36:	5f 25 08 00 	jeq %d5,%d2,80009d46 <GetResource+0xa4>
80009d3a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d3e:	cd cf e2 0f 	mtcr $icr,%d15
80009d42:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
80009d46:	4c f1       	ld.w %d15,[%a15]4
80009d48:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
80009d4a:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009d4e:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009d50:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
80009d52:	00 90       	ret 

80009d54 <ReleaseResource>:
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009d54:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009d56:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009d5a:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
80009d5e:	c8 03       	ld.a %a3,[%a15]0
80009d60:	91 00 00 f8 	movh.a %a15,32768
80009d64:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009d68:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009d6a:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009d6c:	7f f4 69 80 	jge.u %d4,%d15,80009e3e <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009d70:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009d72:	91 00 00 28 	movh.a %a2,32768
80009d76:	d9 22 2c 40 	lea %a2,[%a2]300 <8000012c <osEE_kdb_var>>
80009d7a:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009d7e:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009d82:	d4 22       	ld.a %a2,[%a2]
80009d84:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d86:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d8a:	8f ff 0f 21 	and %d2,%d15,255
80009d8e:	8b 32 a1 22 	ge.u %d2,%d2,19
80009d92:	f6 2a       	jnz %d2,80009da6 <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009d94:	02 f2       	mov %d2,%d15
80009d96:	3b 30 01 30 	mov %d3,19
80009d9a:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d9e:	cd c2 e2 0f 	mtcr $icr,%d2
80009da2:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
80009da6:	c8 14       	ld.a %a4,[%a15]4
80009da8:	d4 44       	ld.a %a4,[%a4]
80009daa:	54 42       	ld.w %d2,[%a4]
80009dac:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
80009dae:	df 02 1a 00 	jeq %d2,0,80009de2 <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009db2:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009db6:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009db8:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009dbc:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009dc0:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009dc4:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009dc6:	8f 0f d0 51 	andn %d5,%d15,256
80009dca:	8f ff cf 21 	andn %d2,%d15,255
80009dce:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009dd0:	8f ff cf f1 	andn %d15,%d15,255
80009dd4:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009dd8:	8b 04 40 42 	lt %d4,%d4,0
80009ddc:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009de0:	3c 17       	j 80009e0e <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
80009de2:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009de6:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009de8:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009dec:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009df0:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009df4:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009df6:	8f 0f d0 21 	andn %d2,%d15,256
80009dfa:	8f ff cf 31 	andn %d3,%d15,255
80009dfe:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009e00:	8f ff cf 51 	andn %d5,%d15,255
80009e04:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009e08:	fa 06       	lt %d15,%d6,0
80009e0a:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
80009e0e:	82 02       	mov %d2,0
80009e10:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009e14:	91 00 00 48 	movh.a %a4,32768
80009e18:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
80009e1c:	6d 00 63 03 	call 8000a4e2 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e20:	4d c0 e2 5f 	mfcr %d5,$icr
80009e24:	02 53       	mov %d3,%d5
80009e26:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e2a:	16 ff       	and %d15,255
80009e2c:	5f f5 08 00 	jeq %d5,%d15,80009e3c <ReleaseResource+0xe8>
80009e30:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e34:	cd c3 e2 0f 	mtcr $icr,%d3
80009e38:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
80009e3c:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
80009e3e:	00 90       	ret 

80009e40 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009e40:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009e42:	91 00 00 f8 	movh.a %a15,32768
80009e46:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e4a:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009e4e:	8f f2 0f f1 	and %d15,%d2,255
80009e52:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009e56:	ee 0a       	jnz %d15,80009e6a <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009e58:	02 2f       	mov %d15,%d2
80009e5a:	3b 30 01 30 	mov %d3,19
80009e5e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e62:	cd cf e2 0f 	mtcr $icr,%d15
80009e66:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009e6a:	39 ff 10 00 	ld.bu %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009e6e:	c2 ff       	add %d15,-1
80009e70:	16 ff       	and %d15,255
80009e72:	ff 2f 08 80 	jge.u %d15,2,80009e82 <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009e76:	91 00 00 48 	movh.a %a4,32768
80009e7a:	d9 44 00 50 	lea %a4,[%a4]320 <80000140 <osEE_cdb_var>>
80009e7e:	1d ff f3 fc 	j 80009864 <osEE_shutdown_os>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e82:	4d c0 e2 3f 	mfcr %d3,$icr
80009e86:	02 3f       	mov %d15,%d3
80009e88:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e8c:	8f f2 0f 21 	and %d2,%d2,255
80009e90:	5f 23 08 00 	jeq %d3,%d2,80009ea0 <ShutdownOS+0x60>
80009e94:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e98:	cd cf e2 0f 	mtcr $icr,%d15
80009e9c:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
80009ea0:	82 72       	mov %d2,7
80009ea2:	00 90       	ret 

80009ea4 <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
80009ea4:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009ea6:	91 00 00 f8 	movh.a %a15,32768
80009eaa:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
80009eae:	3b e0 00 20 	mov %d2,14
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
80009eb2:	bd 04 24 00 	jz.a %a4,80009efa <GetTaskID+0x56>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
80009eb6:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009eb8:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ebc:	ff 2f 05 80 	jge.u %d15,2,80009ec6 <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009ec0:	19 22 10 00 	ld.w %d2,[%a2]16
80009ec4:	3c 19       	j 80009ef6 <GetTaskID+0x52>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009ec6:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009ec8:	de 27       	jne %d15,2,80009ef6 <GetTaskID+0x52>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
80009eca:	c8 3f       	ld.a %a15,[%a15]12
80009ecc:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
80009ece:	bd 0f 14 00 	jz.a %a15,80009ef6 <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009ed2:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ed4:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ed8:	ff 2f 0b 80 	jge.u %d15,2,80009eee <GetTaskID+0x4a>
80009edc:	3c 06       	j 80009ee8 <GetTaskID+0x44>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009ede:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ee0:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ee4:	ff 2f 05 80 	jge.u %d15,2,80009eee <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
80009ee8:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
80009eec:	3c 05       	j 80009ef6 <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
80009eee:	c8 0f       	ld.a %a15,[%a15]0
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
80009ef0:	bd 0f f7 ff 	jnz.a %a15,80009ede <GetTaskID+0x3a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009ef4:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
80009ef6:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009ef8:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
80009efa:	00 90       	ret 

80009efc <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009efc:	40 ae       	mov.aa %a14,%sp
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009efe:	3b e0 00 20 	mov %d2,14
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
80009f02:	bd 04 38 00 	jz.a %a4,80009f72 <GetTaskState+0x76>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009f06:	91 00 00 f8 	movh.a %a15,32768
80009f0a:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009f0e:	4c f2       	ld.w %d15,[%a15]8
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009f10:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009f12:	7f f4 30 80 	jge.u %d4,%d15,80009f72 <GetTaskState+0x76>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009f16:	91 00 00 f8 	movh.a %a15,32768
80009f1a:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009f1e:	c8 1f       	ld.a %a15,[%a15]4
80009f20:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
80009f24:	c8 0f       	ld.a %a15,[%a15]0
80009f26:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
80009f28:	0c f2       	ld.bu %d15,[%a15]2
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f2a:	82 02       	mov %d2,0
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
80009f2c:	ff 6f 23 80 	jge.u %d15,6,80009f72 <GetTaskState+0x76>
80009f30:	91 10 00 f8 	movh.a %a15,32769
80009f34:	d9 ff fc c9 	lea %a15,[%a15]-24772 <80009f3c <GetTaskState+0x40>>
80009f38:	90 ff       	addsc.a %a15,%a15,%d15,2
80009f3a:	dc 0f       	ji %a15
80009f3c:	1d 00 0c 00 	j 80009f54 <GetTaskState+0x58>
80009f40:	1d 00 0e 00 	j 80009f5c <GetTaskState+0x60>
80009f44:	1d 00 0c 00 	j 80009f5c <GetTaskState+0x60>
80009f48:	1d 00 0e 00 	j 80009f64 <GetTaskState+0x68>
80009f4c:	1d 00 10 00 	j 80009f6c <GetTaskState+0x70>
80009f50:	1d 00 0e 00 	j 80009f6c <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009f54:	82 0f       	mov %d15,0
80009f56:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f58:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
80009f5a:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009f5c:	82 1f       	mov %d15,1
80009f5e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f60:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
80009f62:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009f64:	82 3f       	mov %d15,3
80009f66:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f68:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
80009f6a:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009f6c:	82 4f       	mov %d15,4
80009f6e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f70:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
80009f72:	00 90       	ret 

80009f74 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009f74:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
80009f76:	91 00 00 f8 	movh.a %a15,32768
80009f7a:	99 fc 00 50 	ld.a %a12,[%a15]320 <80000140 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009f7e:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009f80:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009f82:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009f86:	8f f8 0f f1 	and %d15,%d8,255
80009f8a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009f8e:	ee 0a       	jnz %d15,80009fa2 <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009f90:	02 8f       	mov %d15,%d8
80009f92:	3b 30 01 20 	mov %d2,19
80009f96:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f9a:	cd cf e2 0f 	mtcr $icr,%d15
80009f9e:	0d 00 c0 04 	isync 
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
80009fa2:	4c f3       	ld.w %d15,[%a15]12
80009fa4:	26 4f       	and %d15,%d4
80009fa6:	ee 13       	jnz %d15,80009fcc <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
80009fa8:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009faa:	91 00 00 48 	movh.a %a4,32768
80009fae:	d9 44 00 50 	lea %a4,[%a4]320 <80000140 <osEE_cdb_var>>
80009fb2:	d9 c5 04 00 	lea %a5,[%a12]4 <80000140 <osEE_cdb_var>>
80009fb6:	6d 00 98 01 	call 8000a2e6 <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
80009fba:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
80009fbc:	82 3f       	mov %d15,3
80009fbe:	28 2f       	st.b [%a15]2,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
80009fc0:	40 d4       	mov.aa %a4,%a13
80009fc2:	d4 c5       	ld.a %a5,[%a12]
80009fc4:	6d 00 c1 02 	call 8000a546 <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
80009fc8:	82 0f       	mov %d15,0
80009fca:	68 2f       	st.w [%a15]8,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009fcc:	4d c0 e2 3f 	mfcr %d3,$icr
80009fd0:	02 3f       	mov %d15,%d3
80009fd2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009fd6:	8f f8 0f 21 	and %d2,%d8,255
80009fda:	5f 23 08 00 	jeq %d3,%d2,80009fea <WaitEvent+0x76>
80009fde:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009fe2:	cd cf e2 0f 	mtcr $icr,%d15
80009fe6:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
80009fea:	82 02       	mov %d2,0
80009fec:	00 90       	ret 

80009fee <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009fee:	40 ae       	mov.aa %a14,%sp
80009ff0:	20 08       	sub.a %sp,8
80009ff2:	91 00 00 f8 	movh.a %a15,32768
80009ff6:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
80009ffa:	4c f2       	ld.w %d15,[%a15]8
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009ffc:	3f f4 06 80 	jlt.u %d4,%d15,8000a008 <SetEvent+0x1a>
    ev = E_OS_ID;
8000a000:	82 3f       	mov %d15,3
8000a002:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000a006:	3c 3c       	j 8000a07e <SetEvent+0x90>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a008:	91 00 00 f8 	movh.a %a15,32768
8000a00c:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
8000a010:	c8 1f       	ld.a %a15,[%a15]4
8000a012:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a016:	c8 04       	ld.a %a4,[%a15]0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a018:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a01c:	8f f8 0f f1 	and %d15,%d8,255
8000a020:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a024:	ee 0a       	jnz %d15,8000a038 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
8000a026:	02 8f       	mov %d15,%d8
8000a028:	3b 30 01 20 	mov %d2,19
8000a02c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a030:	cd cf e2 0f 	mtcr $icr,%d15
8000a034:	0d 00 c0 04 	isync 
8000a038:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
8000a03a:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000a03e:	6d 00 82 01 	call 8000a342 <osEE_task_event_set_mask>

    if (p_sn != NULL) {
8000a042:	bc 2f       	jz.a %a2,8000a060 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
8000a044:	91 00 00 48 	movh.a %a4,32768
8000a048:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
8000a04c:	40 25       	mov.aa %a5,%a2
8000a04e:	6d 00 e7 01 	call 8000a41c <osEE_scheduler_task_unblocked>
8000a052:	76 27       	jz %d2,8000a060 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000a054:	91 00 00 48 	movh.a %a4,32768
8000a058:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
8000a05c:	6d 00 43 02 	call 8000a4e2 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a060:	4d c0 e2 3f 	mfcr %d3,$icr
8000a064:	02 3f       	mov %d15,%d3
8000a066:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a06a:	8f f8 0f 21 	and %d2,%d8,255
8000a06e:	5f 23 08 00 	jeq %d3,%d2,8000a07e <SetEvent+0x90>
8000a072:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a076:	cd cf e2 0f 	mtcr $icr,%d15
8000a07a:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a07e:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000a082:	00 90       	ret 

8000a084 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
8000a084:	40 ae       	mov.aa %a14,%sp
8000a086:	91 00 00 f8 	movh.a %a15,32768
8000a08a:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
8000a08e:	4c f2       	ld.w %d15,[%a15]8
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000a090:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a092:	7f f4 11 80 	jge.u %d4,%d15,8000a0b4 <GetEvent+0x30>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a096:	91 00 00 f8 	movh.a %a15,32768
8000a09a:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
8000a09e:	c8 1f       	ld.a %a15,[%a15]4
8000a0a0:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
8000a0a4:	c8 0f       	ld.a %a15,[%a15]0
8000a0a6:	c8 3f       	ld.a %a15,[%a15]12
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
8000a0a8:	3b e0 00 20 	mov %d2,14
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
8000a0ac:	bc 44       	jz.a %a4,8000a0b4 <GetEvent+0x30>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
8000a0ae:	4c f3       	ld.w %d15,[%a15]12
8000a0b0:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a0b2:	82 02       	mov %d2,0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a0b4:	00 90       	ret 

8000a0b6 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a0b6:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
8000a0b8:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a0bc:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a0c0:	c8 0f       	ld.a %a15,[%a15]0
8000a0c2:	c8 3f       	ld.a %a15,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a0c4:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a0c8:	8f f2 0f f1 	and %d15,%d2,255
8000a0cc:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a0d0:	ee 0a       	jnz %d15,8000a0e4 <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
8000a0d2:	02 2f       	mov %d15,%d2
8000a0d4:	3b 30 01 30 	mov %d3,19
8000a0d8:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a0dc:	cd cf e2 0f 	mtcr $icr,%d15
8000a0e0:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
8000a0e4:	4c f3       	ld.w %d15,[%a15]12
8000a0e6:	0f 4f e0 40 	andn %d4,%d15,%d4
8000a0ea:	68 34       	st.w [%a15]12,%d4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a0ec:	4d c0 e2 3f 	mfcr %d3,$icr
8000a0f0:	02 3f       	mov %d15,%d3
8000a0f2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a0f6:	8f f2 0f 21 	and %d2,%d2,255
8000a0fa:	5f 23 08 00 	jeq %d3,%d2,8000a10a <ClearEvent+0x54>
8000a0fe:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a102:	cd cf e2 0f 	mtcr $icr,%d15
8000a106:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
8000a10a:	82 02       	mov %d2,0
8000a10c:	00 90       	ret 

8000a10e <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
8000a10e:	40 ae       	mov.aa %a14,%sp
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000a110:	91 00 00 f8 	movh.a %a15,32768
8000a114:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
8000a118:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a11a:	39 ff 14 00 	ld.bu %d15,[%a15]20 <80000140 <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
8000a11e:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a120:	5e 22       	jne %d15,2,8000a124 <GetISRID+0x16>
    isr_id = p_tdb->tid;
8000a122:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
8000a124:	00 90       	ret 
	...

8000a128 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
8000a128:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a12a:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
8000a12e:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
8000a130:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a132:	bc fb       	jz.a %a15,8000a148 <osEE_release_all_m+0x20>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000a134:	82 0f       	mov %d15,0
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
8000a136:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000a138:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
8000a13a:	7c 23       	jnz.a %a2,8000a140 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
8000a13c:	99 32 04 00 	ld.a %a2,[%a3]4
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
8000a140:	c8 0f       	ld.a %a15,[%a15]0
8000a142:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a144:	bd 0f f9 ff 	jnz.a %a15,8000a136 <osEE_release_all_m+0xe>
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
8000a148:	00 90       	ret 

8000a14a <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000a14a:	40 ae       	mov.aa %a14,%sp
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000a14c:	cc 43       	ld.a %a15,[%a4]12
8000a14e:	82 4f       	mov %d15,4
8000a150:	28 2f       	st.b [%a15]2,%d15
8000a152:	00 90       	ret 

8000a154 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000a154:	40 ae       	mov.aa %a14,%sp
8000a156:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000a158:	99 42 0c 00 	ld.a %a2,[%a4]12
8000a15c:	39 22 01 00 	ld.bu %d2,[%a2]1
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000a160:	82 4f       	mov %d15,4
8000a162:	2c 22       	st.b [%a2]2,%d15
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
8000a164:	8b f2 0f f2 	eq %d15,%d2,255
8000a168:	ee 13       	jnz %d15,8000a18e <osEE_scheduler_task_wrapper_run+0x3a>
8000a16a:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
8000a16e:	37 02 48 40 	extr %d4,%d2,0,8
8000a172:	82 03       	mov %d3,0
8000a174:	ce 45       	jgez %d4,8000a17e <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a176:	8f f2 07 21 	and %d2,%d2,127
8000a17a:	1b 12 00 30 	addi %d3,%d2,1
8000a17e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a182:	cd cf e2 0f 	mtcr $icr,%d15
8000a186:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000a18a:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
8000a18e:	c8 62       	ld.a %a2,[%a15]24
8000a190:	2d 02 00 00 	calli %a2
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a194:	91 00 00 28 	movh.a %a2,32768
8000a198:	99 22 00 50 	ld.a %a2,[%a2]320 <80000140 <osEE_cdb_var>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
8000a19c:	82 0f       	mov %d15,0
8000a19e:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
8000a1a2:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a1a6:	6e 09       	jz %d15,8000a1b8 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
8000a1a8:	82 0f       	mov %d15,0
8000a1aa:	e9 2f 1c 00 	st.b [%a2]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1ae:	4c 25       	ld.w %d15,[%a2]20
8000a1b0:	cd cf e2 0f 	mtcr $icr,%d15
8000a1b4:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
8000a1b8:	39 2f 1e 00 	ld.bu %d15,[%a2]30
8000a1bc:	6e 06       	jz %d15,8000a1c8 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
8000a1be:	82 0f       	mov %d15,0
8000a1c0:	e9 2f 1e 00 	st.b [%a2]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000a1c4:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a1c8:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a1cc:	8f ff 0f 21 	and %d2,%d15,255
8000a1d0:	8b 32 a1 22 	ge.u %d2,%d2,19
8000a1d4:	f6 29       	jnz %d2,8000a1e6 <osEE_scheduler_task_wrapper_run+0x92>
8000a1d6:	3b 30 01 20 	mov %d2,19
8000a1da:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1de:	cd cf e2 0f 	mtcr $icr,%d15
8000a1e2:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
8000a1e6:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a1ea:	5e 24       	jne %d15,2,8000a1f2 <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
8000a1ec:	40 f4       	mov.aa %a4,%a15
8000a1ee:	5c 9d       	call 8000a128 <osEE_release_all_m>
8000a1f0:	3c 03       	j 8000a1f6 <osEE_scheduler_task_wrapper_run+0xa2>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
8000a1f2:	40 f4       	mov.aa %a4,%a15
8000a1f4:	5c 9a       	call 8000a128 <osEE_release_all_m>
8000a1f6:	c8 14       	ld.a %a4,[%a15]4
8000a1f8:	a0 05       	mov.a %a5,0
8000a1fa:	1d 00 79 02 	j 8000a6ec <osEE_hal_terminate_ctx>

8000a1fe <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
8000a1fe:	40 ae       	mov.aa %a14,%sp
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
8000a200:	91 00 00 f8 	movh.a %a15,32768
8000a204:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
8000a208:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000140 <osEE_cdb_var>>
8000a20c:	df 2f fe 7f 	jeq %d15,2,8000a208 <osEE_idle_hook_wrapper+0xa>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
8000a210:	91 00 00 f8 	movh.a %a15,32768
8000a214:	d9 ff 00 50 	lea %a15,[%a15]320 <80000140 <osEE_cdb_var>>
8000a218:	c8 14       	ld.a %a4,[%a15]4
8000a21a:	6d 00 ba 01 	call 8000a58e <osEE_idle_task_terminate>
8000a21e:	00 90       	ret 

8000a220 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a220:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a222:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000a224:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
8000a226:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
8000a22a:	bd 02 13 00 	jz.a %a2,8000a250 <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
8000a22e:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000a232:	bd 0f 1b 00 	jz.a %a15,8000a268 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000a236:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
8000a23a:	c8 16       	ld.a %a6,[%a15]4
8000a23c:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
8000a240:	39 42 01 00 	ld.bu %d2,[%a4]1
8000a244:	0c 61       	ld.bu %d15,[%a6]1
8000a246:	7f f2 13 80 	jge.u %d2,%d15,8000a26c <osEE_scheduler_core_rq_preempt_stk+0x4c>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
8000a24a:	82 2f       	mov %d15,2
8000a24c:	2c 42       	st.b [%a4]2,%d15
8000a24e:	3c 11       	j 8000a270 <osEE_scheduler_core_rq_preempt_stk+0x50>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a250:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
8000a252:	bd 0f 1e 00 	jz.a %a15,8000a28e <osEE_scheduler_core_rq_preempt_stk+0x6e>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
8000a256:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a25a:	99 24 0c 00 	ld.a %a4,[%a2]12
8000a25e:	82 2f       	mov %d15,2
8000a260:	2c 42       	st.b [%a4]2,%d15
8000a262:	3c 07       	j 8000a270 <osEE_scheduler_core_rq_preempt_stk+0x50>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
8000a264:	2c 51       	st.b [%a5]1,%d15
8000a266:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a268:	a0 02       	mov.a %a2,0
8000a26a:	00 90       	ret 
8000a26c:	a0 02       	mov.a %a2,0
8000a26e:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
8000a270:	4c f0       	ld.w %d15,[%a15]0
8000a272:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
8000a274:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a276:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
8000a27a:	4c 33       	ld.w %d15,[%a3]12
8000a27c:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000a27e:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
8000a280:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
8000a282:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000a286:	39 52 01 00 	ld.bu %d2,[%a5]1
8000a28a:	3f f2 ed ff 	jlt.u %d2,%d15,8000a264 <osEE_scheduler_core_rq_preempt_stk+0x44>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
8000a28e:	00 90       	ret 

8000a290 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
8000a290:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000a292:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000a294:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
8000a296:	76 44       	jz %d4,8000a29e <osEE_sn_priority_insert+0xe>
8000a298:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000a29c:	3c 03       	j 8000a2a2 <osEE_sn_priority_insert+0x12>
8000a29e:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
8000a2a2:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a2a4:	a0 06       	mov.a %a6,0
8000a2a6:	7c f3       	jnz.a %a15,8000a2ac <osEE_sn_priority_insert+0x1c>
8000a2a8:	3c 14       	j 8000a2d0 <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a2aa:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
8000a2ac:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000a2ae:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000a2b2:	76 44       	jz %d4,8000a2ba <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000a2b4:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a2b8:	3c 02       	j 8000a2bc <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000a2ba:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000a2bc:	3f 2f 06 80 	jlt.u %d15,%d2,8000a2c8 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a2c0:	4c f0       	ld.w %d15,[%a15]0
8000a2c2:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a2c4:	ee f3       	jnz %d15,8000a2aa <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a2c6:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
8000a2c8:	bc 64       	jz.a %a6,8000a2d0 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000a2ca:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
8000a2cc:	82 02       	mov %d2,0
8000a2ce:	3c 03       	j 8000a2d4 <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
8000a2d0:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
8000a2d2:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000a2d4:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000a2d6:	00 90       	ret 

8000a2d8 <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
8000a2d8:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
8000a2da:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
8000a2de:	82 14       	mov %d4,1
8000a2e0:	6d ff d8 ff 	call 8000a290 <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
8000a2e4:	00 90       	ret 

8000a2e6 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a2e6:	40 ae       	mov.aa %a14,%sp
8000a2e8:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000a2ea:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
8000a2ec:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
8000a2ee:	4c c0       	ld.w %d15,[%a12]0
8000a2f0:	68 3f       	st.w [%a15]12,%d15
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
8000a2f2:	6d ff 97 ff 	call 8000a220 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000a2f6:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
8000a2f8:	7c 28       	jnz.a %a2,8000a308 <osEE_scheduler_core_pop_running+0x22>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
8000a2fa:	80 d3       	mov.d %d3,%a13
8000a2fc:	c2 43       	add %d3,4
8000a2fe:	92 42       	add %d2,%d15,4
8000a300:	6a 32       	cmovn %d2,%d15,%d3
8000a302:	60 2d       	mov.a %a13,%d2
8000a304:	4c d0       	ld.w %d15,[%a13]0
8000a306:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
8000a308:	40 c2       	mov.aa %a2,%a12
8000a30a:	00 90       	ret 

8000a30c <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a30c:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000a30e:	cc 43       	ld.a %a15,[%a4]12
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a310:	0c f0       	ld.bu %d15,[%a15]0
8000a312:	39 43 1e 00 	ld.bu %d3,[%a4]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
8000a316:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a318:	7f 3f 05 80 	jge.u %d15,%d3,8000a322 <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
8000a31c:	c2 1f       	add %d15,1
8000a31e:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
8000a320:	82 02       	mov %d2,0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
8000a322:	00 90       	ret 

8000a324 <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
8000a324:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a326:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000a328:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000a32c:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000a32e:	0c f0       	ld.bu %d15,[%a15]0
8000a330:	c2 ff       	add %d15,-1
8000a332:	16 ff       	and %d15,255
8000a334:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000a336:	ee 03       	jnz %d15,8000a33c <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000a338:	28 2f       	st.b [%a15]2,%d15
8000a33a:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000a33c:	82 1f       	mov %d15,1
8000a33e:	28 2f       	st.b [%a15]2,%d15
8000a340:	00 90       	ret 

8000a342 <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
8000a342:	40 ae       	mov.aa %a14,%sp
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
8000a344:	cc 43       	ld.a %a15,[%a4]12
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
8000a346:	02 42       	mov %d2,%d4
8000a348:	02 43       	mov %d3,%d4
8000a34a:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
8000a34e:	82 0f       	mov %d15,0
8000a350:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a352:	4c f2       	ld.w %d15,[%a15]8
8000a354:	26 f4       	and %d4,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
8000a356:	a0 02       	mov.a %a2,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a358:	76 45       	jz %d4,8000a362 <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000a35a:	c8 42       	ld.a %a2,[%a15]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
8000a35c:	bc 23       	jz.a %a2,8000a362 <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
8000a35e:	82 0f       	mov %d15,0
8000a360:	68 4f       	st.w [%a15]16,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
8000a362:	00 90       	ret 

8000a364 <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
8000a364:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
8000a366:	91 00 00 48 	movh.a %a4,32768
8000a36a:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
8000a36e:	cc 41       	ld.a %a15,[%a4]4
8000a370:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a374:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
8000a376:	cc 53       	ld.a %a15,[%a5]12
8000a378:	0c f0       	ld.bu %d15,[%a15]0
8000a37a:	c2 1f       	add %d15,1
8000a37c:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000a37e:	a0 06       	mov.a %a6,0
8000a380:	6d 00 c4 00 	call 8000a508 <osEE_scheduler_task_set_running>
8000a384:	00 90       	ret 

8000a386 <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a386:	40 ae       	mov.aa %a14,%sp
8000a388:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000a38a:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000a38e:	91 00 00 f8 	movh.a %a15,32768
8000a392:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000a396:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
8000a398:	99 43 0c 00 	ld.a %a3,[%a4]12 <80000140 <osEE_cdb_var>>
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
8000a39c:	39 32 01 00 	ld.bu %d2,[%a3]1 <80000140 <osEE_cdb_var>>
8000a3a0:	0c 21       	ld.bu %d15,[%a2]1
8000a3a2:	7f f2 15 80 	jge.u %d2,%d15,8000a3cc <osEE_scheduler_task_activated+0x46>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a3a6:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a3a8:	4c 20       	ld.w %d15,[%a2]0
8000a3aa:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a3ac:	82 02       	mov %d2,0
8000a3ae:	74 22       	st.w [%a2],%d2
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
8000a3b0:	82 2f       	mov %d15,2
8000a3b2:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000a3b4:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000a3b8:	4c f3       	ld.w %d15,[%a15]12
8000a3ba:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
8000a3bc:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
8000a3be:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
8000a3c0:	cc 53       	ld.a %a15,[%a5]12
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
8000a3c2:	68 32       	st.w [%a15]12,%d2

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
8000a3c4:	6d 00 c1 00 	call 8000a546 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a3c8:	82 12       	mov %d2,1
8000a3ca:	00 90       	ret 
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a3cc:	0c 22       	ld.bu %d15,[%a2]2
8000a3ce:	ee 05       	jnz %d15,8000a3d8 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
8000a3d0:	82 1f       	mov %d15,1
8000a3d2:	2c 22       	st.b [%a2]2,%d15
8000a3d4:	82 0f       	mov %d15,0
8000a3d6:	6c 23       	st.w [%a2]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a3d8:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a3da:	4c 50       	ld.w %d15,[%a5]0
8000a3dc:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a3de:	82 0f       	mov %d15,0
8000a3e0:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a3e2:	d9 f4 04 00 	lea %a4,[%a15]4
8000a3e6:	6d ff 79 ff 	call 8000a2d8 <osEE_scheduler_rq_insert>
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
8000a3ea:	82 02       	mov %d2,0
  }

  return is_preemption;
}
8000a3ec:	00 90       	ret 

8000a3ee <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a3ee:	40 ae       	mov.aa %a14,%sp
8000a3f0:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000a3f2:	cc 53       	ld.a %a15,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
8000a3f4:	91 00 00 28 	movh.a %a2,32768
8000a3f8:	99 24 00 50 	ld.a %a4,[%a2]320 <80000140 <osEE_cdb_var>>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a3fc:	0c f2       	ld.bu %d15,[%a15]2
8000a3fe:	ee 05       	jnz %d15,8000a408 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
8000a400:	82 1f       	mov %d15,1
8000a402:	28 2f       	st.b [%a15]2,%d15
8000a404:	82 0f       	mov %d15,0
8000a406:	68 3f       	st.w [%a15]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a408:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a40c:	4c 50       	ld.w %d15,[%a5]0
8000a40e:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a410:	82 0f       	mov %d15,0
8000a412:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a414:	b0 44       	add.a %a4,4
8000a416:	6d ff 61 ff 	call 8000a2d8 <osEE_scheduler_rq_insert>

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
8000a41a:	00 90       	ret 

8000a41c <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
8000a41c:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
8000a41e:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000a422:	cc 63       	ld.a %a15,[%a6]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a424:	91 00 00 28 	movh.a %a2,32768
8000a428:	99 2c 00 50 	ld.a %a12,[%a2]320 <80000140 <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000a42c:	82 2f       	mov %d15,2
8000a42e:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
8000a430:	39 6f 1c 00 	ld.bu %d15,[%a6]28
8000a434:	28 1f       	st.b [%a15]1,%d15
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a436:	d9 c4 04 00 	lea %a4,[%a12]4
8000a43a:	6d ff 4f ff 	call 8000a2d8 <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
8000a43e:	82 0f       	mov %d15,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
8000a440:	df 12 0a 80 	jne %d2,1,8000a454 <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000a444:	d4 c2       	ld.a %a2,[%a12]
8000a446:	99 22 0c 00 	ld.a %a2,[%a2]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
8000a44a:	0c f1       	ld.bu %d15,[%a15]1
8000a44c:	39 22 01 00 	ld.bu %d2,[%a2]1
8000a450:	0b f2 30 f1 	lt.u %d15,%d2,%d15
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
8000a454:	02 f2       	mov %d2,%d15
8000a456:	00 90       	ret 

8000a458 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
8000a458:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a45a:	91 00 00 f8 	movh.a %a15,32768
8000a45e:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
8000a462:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000a464:	99 dc 0c 00 	ld.a %a12,[%a13]12 <80000140 <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000a468:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000a46a:	0c c2       	ld.bu %d15,[%a12]2
8000a46c:	de 4a       	jne %d15,4,8000a4a0 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a46e:	91 00 00 48 	movh.a %a4,32768
8000a472:	d9 44 00 50 	lea %a4,[%a4]320 <80000140 <osEE_cdb_var>>
8000a476:	d9 f5 04 00 	lea %a5,[%a15]4 <80000140 <osEE_cdb_var>>
8000a47a:	6d ff 36 ff 	call 8000a2e6 <osEE_scheduler_core_pop_running>
8000a47e:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
8000a480:	4c f0       	ld.w %d15,[%a15]0

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
8000a482:	80 d2       	mov.d %d2,%a13
8000a484:	5f f2 06 00 	jeq %d2,%d15,8000a490 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
8000a488:	40 d4       	mov.aa %a4,%a13
8000a48a:	6d ff 4d ff 	call 8000a324 <osEE_task_end>
8000a48e:	3c 04       	j 8000a496 <osEE_scheduler_task_terminated+0x3e>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
8000a490:	14 c2       	ld.bu %d2,[%a12]
8000a492:	c2 f2       	add %d2,-1
8000a494:	34 c2       	st.b [%a12],%d2
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
8000a496:	48 22       	ld.w %d2,[%a15]8
8000a498:	60 82       	mov.a %a2,%d8
8000a49a:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000a49c:	68 28       	st.w [%a15]8,%d8
8000a49e:	3c 20       	j 8000a4de <osEE_scheduler_task_terminated+0x86>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
8000a4a0:	c8 35       	ld.a %a5,[%a15]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
8000a4a2:	54 52       	ld.w %d2,[%a5]
8000a4a4:	68 32       	st.w [%a15]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
8000a4a6:	39 df 1c 00 	ld.bu %d15,[%a13]28
8000a4aa:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
8000a4ac:	82 1f       	mov %d15,1
8000a4ae:	2c c2       	st.b [%a12]2,%d15
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
8000a4b0:	0c c0       	ld.bu %d15,[%a12]0
8000a4b2:	5e 13       	jne %d15,1,8000a4b8 <osEE_scheduler_task_terminated+0x60>
8000a4b4:	82 0f       	mov %d15,0
8000a4b6:	6c c3       	st.w [%a12]12,%d15
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
8000a4b8:	d9 fc 04 00 	lea %a12,[%a15]4
8000a4bc:	40 c4       	mov.aa %a4,%a12
8000a4be:	40 d6       	mov.aa %a6,%a13
8000a4c0:	6d ff 0c ff 	call 8000a2d8 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a4c4:	91 00 00 48 	movh.a %a4,32768
8000a4c8:	d9 44 00 50 	lea %a4,[%a4]320 <80000140 <osEE_cdb_var>>
8000a4cc:	40 c5       	mov.aa %a5,%a12
8000a4ce:	6d ff a9 fe 	call 8000a220 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000a4d2:	7c 25       	jnz.a %a2,8000a4dc <osEE_scheduler_task_terminated+0x84>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
8000a4d4:	c8 32       	ld.a %a2,[%a15]12
8000a4d6:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
8000a4d8:	68 0f       	st.w [%a15]0,%d15
8000a4da:	3c 02       	j 8000a4de <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
8000a4dc:	4c f0       	ld.w %d15,[%a15]0
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
8000a4de:	60 f2       	mov.a %a2,%d15
8000a4e0:	00 90       	ret 

8000a4e2 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
8000a4e2:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a4e4:	91 00 00 48 	movh.a %a4,32768
8000a4e8:	99 4f 00 50 	ld.a %a15,[%a4]320 <80000140 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a4ec:	d9 44 00 50 	lea %a4,[%a4]320 <80000140 <osEE_cdb_var>>
8000a4f0:	d9 f5 04 00 	lea %a5,[%a15]4 <80000140 <osEE_cdb_var>>
8000a4f4:	6d ff 96 fe 	call 8000a220 <osEE_scheduler_core_rq_preempt_stk>

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
8000a4f8:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
8000a4fa:	bc 26       	jz.a %a2,8000a506 <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000a4fc:	40 24       	mov.aa %a4,%a2
8000a4fe:	c8 05       	ld.a %a5,[%a15]0
8000a500:	6d 00 23 00 	call 8000a546 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a504:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
8000a506:	00 90       	ret 

8000a508 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
8000a508:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a50a:	91 00 00 f8 	movh.a %a15,32768
8000a50e:	99 ff 00 50 	ld.a %a15,[%a15]320 <80000140 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000a512:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000a514:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000a516:	99 42 0c 00 	ld.a %a2,[%a4]12 <80000140 <osEE_cdb_var>>
8000a51a:	0c 22       	ld.bu %d15,[%a2]2
8000a51c:	5e 43       	jne %d15,4,8000a522 <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a51e:	82 2f       	mov %d15,2
8000a520:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
8000a522:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
8000a524:	7c 68       	jnz.a %a6,8000a534 <osEE_scheduler_task_set_running+0x2c>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a526:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a528:	4c 20       	ld.w %d15,[%a2]0
8000a52a:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a52c:	82 0f       	mov %d15,0
8000a52e:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000a530:	e8 32       	st.a [%a15]12,%a2
8000a532:	3c 02       	j 8000a536 <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
8000a534:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
8000a536:	c8 32       	ld.a %a2,[%a15]12
8000a538:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000a53c:	c8 3f       	ld.a %a15,[%a15]12
8000a53e:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
8000a540:	6d 00 03 00 	call 8000a546 <osEE_change_context_from_running>
8000a544:	00 90       	ret 

8000a546 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a546:	40 ae       	mov.aa %a14,%sp
8000a548:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a54a:	99 52 0c 00 	ld.a %a2,[%a5]12
8000a54e:	0c 22       	ld.bu %d15,[%a2]2
8000a550:	5e 28       	jne %d15,2,8000a560 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000a552:	40 54       	mov.aa %a4,%a5
8000a554:	99 55 04 00 	ld.a %a5,[%a5]4
8000a558:	c8 16       	ld.a %a6,[%a15]4
8000a55a:	6d 00 73 00 	call 8000a640 <osEE_hal_save_ctx_and_restore_ctx>
8000a55e:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000a560:	40 54       	mov.aa %a4,%a5
8000a562:	99 55 04 00 	ld.a %a5,[%a5]4
8000a566:	c8 16       	ld.a %a6,[%a15]4
8000a568:	6d 00 8b 00 	call 8000a67e <osEE_hal_save_ctx_and_ready2stacked>
8000a56c:	00 90       	ret 

8000a56e <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a56e:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a570:	cc 53       	ld.a %a15,[%a5]12
8000a572:	0c f2       	ld.bu %d15,[%a15]2
8000a574:	5e 27       	jne %d15,2,8000a582 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000a576:	40 54       	mov.aa %a4,%a5
8000a578:	99 55 04 00 	ld.a %a5,[%a5]4
8000a57c:	6d 00 74 00 	call 8000a664 <osEE_hal_restore_ctx>
8000a580:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000a582:	40 54       	mov.aa %a4,%a5
8000a584:	99 55 04 00 	ld.a %a5,[%a5]4
8000a588:	6d 00 8d 00 	call 8000a6a2 <osEE_hal_ready2stacked>
8000a58c:	00 90       	ret 

8000a58e <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
8000a58e:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
8000a590:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000a594:	cc 40       	ld.a %a15,[%a4]0
8000a596:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000a598:	cc 50       	ld.a %a15,[%a5]0
8000a59a:	3c 02       	j 8000a59e <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
8000a59c:	60 ff       	mov.a %a15,%d15
8000a59e:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000a5a0:	8b 0f 20 22 	ne %d2,%d15,0
8000a5a4:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000a5a8:	df 02 fa ff 	jne %d2,0,8000a59c <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000a5ac:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000a5ae:	6d 00 5b 00 	call 8000a664 <osEE_hal_restore_ctx>
8000a5b2:	00 90       	ret 

8000a5b4 <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
8000a5b4:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a5b6:	4d c0 e1 5f 	mfcr %d5,$core_id
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
8000a5ba:	91 00 00 f8 	movh.a %a15,32768
8000a5be:	d9 ff 2c 40 	lea %a15,[%a15]300 <8000012c <osEE_kdb_var>>
8000a5c2:	c8 2f       	ld.a %a15,[%a15]8
8000a5c4:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000a5c6:	bd 0f 2a 00 	jz.a %a15,8000a61a <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a5ca:	91 00 00 28 	movh.a %a2,32768
8000a5ce:	d9 22 2c 40 	lea %a2,[%a2]300 <8000012c <osEE_kdb_var>>
8000a5d2:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a5d6:	8f 35 00 51 	and %d5,%d5,3
8000a5da:	8f b5 00 50 	sh %d5,%d5,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a5de:	bb f0 ff 4f 	mov.u %d4,65535
8000a5e2:	82 0f       	mov %d15,0
8000a5e4:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a5e6:	60 33       	mov.a %a3,%d3
8000a5e8:	90 32       	addsc.a %a2,%a3,%d15,2
8000a5ea:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a5ec:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a5f0:	df 22 12 80 	jne %d2,2,8000a614 <osEE_cpu_startos+0x60>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a5f4:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a5f8:	5f 42 0e 00 	jeq %d2,%d4,8000a614 <osEE_cpu_startos+0x60>
8000a5fc:	60 24       	mov.a %a4,%d2
8000a5fe:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a602:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a606:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a60a:	c2 12       	add %d2,1
8000a60c:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000a610:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a612:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
8000a614:	c2 1f       	add %d15,1
8000a616:	fd f0 e8 7f 	loop %a15,8000a5e6 <osEE_cpu_startos+0x32>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
8000a61a:	82 12       	mov %d2,1
8000a61c:	00 90       	ret 

8000a61e <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a61e:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a622:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a624:	0c 22       	ld.bu %d15,[%a2]2
8000a626:	1e 27       	jeq %d15,2,8000a634 <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
8000a628:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a62a:	c8 1f       	ld.a %a15,[%a15]4
8000a62c:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000a62e:	1d 00 3a 00 	j 8000a6a2 <osEE_hal_ready2stacked>
8000a632:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
8000a634:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a636:	c8 1f       	ld.a %a15,[%a15]4
8000a638:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000a63a:	1d 00 15 00 	j 8000a664 <osEE_hal_restore_ctx>
8000a63e:	00 90       	ret 

8000a640 <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a640:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a642:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a646:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a648:	4c 60       	ld.w %d15,[%a6]0
8000a64a:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a64e:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a652:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a656:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a658:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a65c:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
8000a65e:	1d 00 03 00 	j 8000a664 <osEE_hal_restore_ctx>
8000a662:	00 90       	ret 

8000a664 <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
8000a664:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a666:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a668:	4c f2       	ld.w %d15,[%a15]8
8000a66a:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a66c:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a670:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
8000a674:	4c f0       	ld.w %d15,[%a15]0
8000a676:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
8000a678:	1d ff 69 fd 	j 8000a14a <osEE_scheduler_task_wrapper_restore>
8000a67c:	00 90       	ret 

8000a67e <osEE_hal_save_ctx_and_ready2stacked>:
8000a67e:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a680:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a684:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a686:	4c 60       	ld.w %d15,[%a6]0
8000a688:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a68c:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a690:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a694:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a696:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a69a:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
8000a69c:	1d 00 03 00 	j 8000a6a2 <osEE_hal_ready2stacked>
8000a6a0:	00 90       	ret 

8000a6a2 <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a6a2:	cc 50       	ld.a %a15,[%a5]0
8000a6a4:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
8000a6a6:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a6aa:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a6ac:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a6b0:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a6b2:	4c 50       	ld.w %d15,[%a5]0
8000a6b4:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a6b8:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a6bc:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a6c0:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a6c2:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a6c6:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
8000a6c8:	1d ff 46 fd 	j 8000a154 <osEE_scheduler_task_wrapper_run>
8000a6cc:	00 90       	ret 

8000a6ce <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
8000a6ce:	4d 40 e0 ff 	mfcr %d15,$psw
8000a6d2:	8f ff c7 f1 	andn %d15,%d15,127
8000a6d6:	cd 4f e0 0f 	mtcr $psw,%d15
8000a6da:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a6de:	91 10 00 f8 	movh.a %a15,32769
8000a6e2:	d9 ff 5e 8a 	lea %a15,[%a15]-23010 <8000a61e <osEE_tc_change_context_from_task_end>>
8000a6e6:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000a6e8:	00 80       	rfe 
8000a6ea:	00 90       	ret 

8000a6ec <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
8000a6ec:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
8000a6ee:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a6f2:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
8000a6f6:	cc 40       	ld.a %a15,[%a4]0
8000a6f8:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a6fa:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a6fe:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a702:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a704:	8f c3 01 30 	sh %d3,%d3,28
8000a708:	a6 43       	or %d3,%d4
8000a70a:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000a70c:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000a70e:	bc f3       	jz.a %a15,8000a714 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a710:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000a712:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000a714:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a718:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a71c:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a720:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000a724:	cc 40       	ld.a %a15,[%a4]0
8000a726:	4c f0       	ld.w %d15,[%a15]0
8000a728:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000a72a:	91 00 00 48 	movh.a %a4,32768
8000a72e:	d9 44 2c 40 	lea %a4,[%a4]300 <8000012c <osEE_kdb_var>>
8000a732:	d9 a5 04 00 	lea %a5,[%sp]4 <8000012c <osEE_kdb_var>>
8000a736:	6d ff 91 fe 	call 8000a458 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a73a:	d8 01       	ld.a %a15,[%sp]4
8000a73c:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a740:	1e 25       	jeq %d15,2,8000a74a <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000a742:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a744:	1d ff 6d ff 	j 8000a61e <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000a748:	3c 00       	j 8000a748 <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000a74a:	40 24       	mov.aa %a4,%a2
8000a74c:	6d ff c1 ff 	call 8000a6ce <osEE_tc_change_context_from_isr2_end>
8000a750:	3c fc       	j 8000a748 <osEE_hal_terminate_ctx+0x5c>

8000a752 <__lshrdi3>:
8000a752:	6f 56 0c 80 	jnz.t %d6,5,8000a76a <__lshrdi3+0x18>
8000a756:	8b 06 02 71 	rsub %d7,%d6,32
8000a75a:	32 56       	rsub %d6
8000a75c:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a760:	0f 65 00 30 	sh %d3,%d5,%d6
8000a764:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a768:	00 90       	ret 
8000a76a:	8b 06 02 60 	add %d6,%d6,32
8000a76e:	32 56       	rsub %d6
8000a770:	0f 65 00 20 	sh %d2,%d5,%d6
8000a774:	82 03       	mov %d3,0
8000a776:	00 90       	ret 

8000a778 <__extendsfdf2>:
8000a778:	20 20       	sub.a %sp,32
8000a77a:	d9 a4 20 00 	lea %a4,[%sp]32
8000a77e:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a782:	d9 a5 10 00 	lea %a5,[%sp]16
8000a786:	6d 00 d8 02 	call 8000ad36 <__unpack_f>
8000a78a:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a78e:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a792:	8f e2 1f f0 	sh %d15,%d2,-2
8000a796:	8f e2 01 20 	sh %d2,%d2,30
8000a79a:	74 a2       	st.w [%sp],%d2
8000a79c:	78 01       	st.w [%sp]4,%d15
8000a79e:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a7a2:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a7a6:	1d 00 8e 02 	j 8000acc2 <__make_dp>

8000a7aa <_fpadd_parts>:
8000a7aa:	0c 40       	ld.bu %d15,[%a4]0
8000a7ac:	40 42       	mov.aa %a2,%a4
8000a7ae:	bf 2f cb 80 	jlt.u %d15,2,8000a944 <_fpadd_parts+0x19a>
8000a7b2:	14 52       	ld.bu %d2,[%a5]
8000a7b4:	40 52       	mov.aa %a2,%a5
8000a7b6:	bf 22 c7 80 	jlt.u %d2,2,8000a944 <_fpadd_parts+0x19a>
8000a7ba:	5e 4e       	jne %d15,4,8000a7d6 <_fpadd_parts+0x2c>
8000a7bc:	40 42       	mov.aa %a2,%a4
8000a7be:	df 42 c3 80 	jne %d2,4,8000a944 <_fpadd_parts+0x19a>
8000a7c2:	19 42 04 00 	ld.w %d2,[%a4]4
8000a7c6:	4c 51       	ld.w %d15,[%a5]4
8000a7c8:	5f f2 be 00 	jeq %d2,%d15,8000a944 <_fpadd_parts+0x19a>
8000a7cc:	91 00 00 f8 	movh.a %a15,32768
8000a7d0:	d9 f2 e4 b0 	lea %a2,[%a15]3812 <80000ee4 <__thenan_df>>
8000a7d4:	00 90       	ret 
8000a7d6:	40 52       	mov.aa %a2,%a5
8000a7d8:	df 42 b6 00 	jeq %d2,4,8000a944 <_fpadd_parts+0x19a>
8000a7dc:	df 22 11 80 	jne %d2,2,8000a7fe <_fpadd_parts+0x54>
8000a7e0:	40 42       	mov.aa %a2,%a4
8000a7e2:	df 2f b1 80 	jne %d15,2,8000a944 <_fpadd_parts+0x19a>
8000a7e6:	40 63       	mov.aa %a3,%a6
8000a7e8:	a0 4f       	mov.a %a15,4
8000a7ea:	44 4f       	ld.w %d15,[%a4+]
8000a7ec:	64 3f       	st.w [%a3+],%d15
8000a7ee:	fc fe       	loop %a15,8000a7ea <_fpadd_parts+0x40>
8000a7f0:	4c 21       	ld.w %d15,[%a2]4
8000a7f2:	19 52 04 00 	ld.w %d2,[%a5]4
8000a7f6:	40 62       	mov.aa %a2,%a6
8000a7f8:	26 2f       	and %d15,%d2
8000a7fa:	6c 61       	st.w [%a6]4,%d15
8000a7fc:	00 90       	ret 
8000a7fe:	40 52       	mov.aa %a2,%a5
8000a800:	df 2f a2 00 	jeq %d15,2,8000a944 <_fpadd_parts+0x19a>
8000a804:	4c 42       	ld.w %d15,[%a4]8
8000a806:	19 52 08 00 	ld.w %d2,[%a5]8
8000a80a:	40 6f       	mov.aa %a15,%a6
8000a80c:	52 23       	sub %d3,%d15,%d2
8000a80e:	0b 30 c0 c1 	abs %d12,%d3
8000a812:	8b 0c 84 42 	ge %d4,%d12,64
8000a816:	40 5c       	mov.aa %a12,%a5
8000a818:	40 4d       	mov.aa %a13,%a4
8000a81a:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a81e:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a822:	df 04 35 80 	jne %d4,0,8000a88c <_fpadd_parts+0xe2>
8000a826:	bf 13 19 00 	jlt %d3,1,8000a858 <_fpadd_parts+0xae>
8000a82a:	0b 89 10 48 	mov %e4,%d9,%d8
8000a82e:	02 c6       	mov %d6,%d12
8000a830:	6d ff 91 ff 	call 8000a752 <__lshrdi3>
8000a834:	d2 14       	mov %e4,1
8000a836:	02 c6       	mov %d6,%d12
8000a838:	02 2e       	mov %d14,%d2
8000a83a:	02 3d       	mov %d13,%d3
8000a83c:	6d 00 70 02 	call 8000ad1c <__ashldi3>
8000a840:	8b f2 9f 20 	addx %d2,%d2,-1
8000a844:	8b f3 bf 30 	addc %d3,%d3,-1
8000a848:	26 82       	and %d2,%d8
8000a84a:	26 93       	and %d3,%d9
8000a84c:	a6 23       	or %d3,%d2
8000a84e:	02 e8       	mov %d8,%d14
8000a850:	8b 03 00 85 	or.ne %d8,%d3,0
8000a854:	02 d9       	mov %d9,%d13
8000a856:	3c 21       	j 8000a898 <_fpadd_parts+0xee>
8000a858:	df 03 20 00 	jeq %d3,0,8000a898 <_fpadd_parts+0xee>
8000a85c:	0b ab 10 48 	mov %e4,%d11,%d10
8000a860:	02 c6       	mov %d6,%d12
8000a862:	6d ff 78 ff 	call 8000a752 <__lshrdi3>
8000a866:	d2 14       	mov %e4,1
8000a868:	02 c6       	mov %d6,%d12
8000a86a:	02 2e       	mov %d14,%d2
8000a86c:	02 3d       	mov %d13,%d3
8000a86e:	6d 00 57 02 	call 8000ad1c <__ashldi3>
8000a872:	8b f2 9f 20 	addx %d2,%d2,-1
8000a876:	8b f3 bf 30 	addc %d3,%d3,-1
8000a87a:	26 a2       	and %d2,%d10
8000a87c:	26 b3       	and %d3,%d11
8000a87e:	a6 23       	or %d3,%d2
8000a880:	02 ea       	mov %d10,%d14
8000a882:	42 cf       	add %d15,%d12
8000a884:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a888:	02 db       	mov %d11,%d13
8000a88a:	3c 07       	j 8000a898 <_fpadd_parts+0xee>
8000a88c:	3f f2 05 00 	jlt %d2,%d15,8000a896 <_fpadd_parts+0xec>
8000a890:	02 2f       	mov %d15,%d2
8000a892:	d2 0a       	mov %e10,0
8000a894:	3c 02       	j 8000a898 <_fpadd_parts+0xee>
8000a896:	d2 08       	mov %e8,0
8000a898:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a89c:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a8a0:	5f 24 34 00 	jeq %d4,%d2,8000a908 <_fpadd_parts+0x15e>
8000a8a4:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a8a8:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a8ac:	76 45       	jz %d4,8000a8b6 <_fpadd_parts+0x10c>
8000a8ae:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a8b2:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a8b6:	0e 37       	jltz %d3,8000a8c4 <_fpadd_parts+0x11a>
8000a8b8:	82 04       	mov %d4,0
8000a8ba:	68 14       	st.w [%a15]4,%d4
8000a8bc:	68 2f       	st.w [%a15]8,%d15
8000a8be:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a8c2:	3c 0c       	j 8000a8da <_fpadd_parts+0x130>
8000a8c4:	68 2f       	st.w [%a15]8,%d15
8000a8c6:	8b 03 00 f1 	rsub %d15,%d3,0
8000a8ca:	82 14       	mov %d4,1
8000a8cc:	8b 02 00 31 	rsub %d3,%d2,0
8000a8d0:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a8d4:	68 14       	st.w [%a15]4,%d4
8000a8d6:	68 33       	st.w [%a15]12,%d3
8000a8d8:	68 4f       	st.w [%a15]16,%d15
8000a8da:	82 f5       	mov %d5,-1
8000a8dc:	06 c5       	sh %d5,-4
8000a8de:	48 32       	ld.w %d2,[%a15]12
8000a8e0:	48 43       	ld.w %d3,[%a15]16
8000a8e2:	8b f2 9f 60 	addx %d6,%d2,-1
8000a8e6:	8b f3 bf 40 	addc %d4,%d3,-1
8000a8ea:	3a 54       	eq %d15,%d4,%d5
8000a8ec:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a8f0:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a8f4:	6e 12       	jz %d15,8000a918 <_fpadd_parts+0x16e>
8000a8f6:	4c f2       	ld.w %d15,[%a15]8
8000a8f8:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a8fc:	c2 ff       	add %d15,-1
8000a8fe:	06 12       	sh %d2,1
8000a900:	68 32       	st.w [%a15]12,%d2
8000a902:	68 43       	st.w [%a15]16,%d3
8000a904:	68 2f       	st.w [%a15]8,%d15
8000a906:	3c ec       	j 8000a8de <_fpadd_parts+0x134>
8000a908:	0b a8 40 20 	addx %d2,%d8,%d10
8000a90c:	68 2f       	st.w [%a15]8,%d15
8000a90e:	0b b9 50 f0 	addc %d15,%d9,%d11
8000a912:	68 14       	st.w [%a15]4,%d4
8000a914:	68 32       	st.w [%a15]12,%d2
8000a916:	68 4f       	st.w [%a15]16,%d15
8000a918:	82 3f       	mov %d15,3
8000a91a:	28 0f       	st.b [%a15]0,%d15
8000a91c:	4c f4       	ld.w %d15,[%a15]16
8000a91e:	7b 00 00 42 	movh %d4,8192
8000a922:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000a926:	48 32       	ld.w %d2,[%a15]12
8000a928:	40 f2       	mov.aa %a2,%a15
8000a92a:	f6 3d       	jnz %d3,8000a944 <_fpadd_parts+0x19a>
8000a92c:	8f 12 00 31 	and %d3,%d2,1
8000a930:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000a934:	06 ff       	sh %d15,-1
8000a936:	96 00       	or %d15,0
8000a938:	68 4f       	st.w [%a15]16,%d15
8000a93a:	4c f2       	ld.w %d15,[%a15]8
8000a93c:	a6 32       	or %d2,%d3
8000a93e:	c2 1f       	add %d15,1
8000a940:	68 32       	st.w [%a15]12,%d2
8000a942:	68 2f       	st.w [%a15]8,%d15
8000a944:	00 90       	ret 

8000a946 <__adddf3>:
8000a946:	20 50       	sub.a %sp,80
8000a948:	d9 a4 04 00 	lea %a4,[%sp]4
8000a94c:	d9 a5 14 00 	lea %a5,[%sp]20
8000a950:	89 a4 44 09 	st.d [%sp]4,%e4
8000a954:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a958:	6d 00 c0 02 	call 8000aed8 <__unpack_d>
8000a95c:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a960:	d9 a5 28 00 	lea %a5,[%sp]40
8000a964:	6d 00 ba 02 	call 8000aed8 <__unpack_d>
8000a968:	d9 a4 14 00 	lea %a4,[%sp]20
8000a96c:	d9 a5 28 00 	lea %a5,[%sp]40
8000a970:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a974:	6d ff 1b ff 	call 8000a7aa <_fpadd_parts>
8000a978:	40 24       	mov.aa %a4,%a2
8000a97a:	1d 00 26 02 	j 8000adc6 <__pack_d>

8000a97e <__subdf3>:
8000a97e:	20 50       	sub.a %sp,80
8000a980:	d9 a4 04 00 	lea %a4,[%sp]4
8000a984:	d9 a5 14 00 	lea %a5,[%sp]20
8000a988:	89 a4 44 09 	st.d [%sp]4,%e4
8000a98c:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a990:	6d 00 a4 02 	call 8000aed8 <__unpack_d>
8000a994:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a998:	d9 a5 28 00 	lea %a5,[%sp]40
8000a99c:	6d 00 9e 02 	call 8000aed8 <__unpack_d>
8000a9a0:	58 0b       	ld.w %d15,[%sp]44
8000a9a2:	d9 a4 14 00 	lea %a4,[%sp]20
8000a9a6:	8f 1f 80 f1 	xor %d15,%d15,1
8000a9aa:	d9 a5 28 00 	lea %a5,[%sp]40
8000a9ae:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a9b2:	78 0b       	st.w [%sp]44,%d15
8000a9b4:	6d ff fb fe 	call 8000a7aa <_fpadd_parts>
8000a9b8:	40 24       	mov.aa %a4,%a2
8000a9ba:	1d 00 06 02 	j 8000adc6 <__pack_d>

8000a9be <__muldf3>:
8000a9be:	20 50       	sub.a %sp,80
8000a9c0:	d9 a4 04 00 	lea %a4,[%sp]4
8000a9c4:	d9 a5 14 00 	lea %a5,[%sp]20
8000a9c8:	89 a4 44 09 	st.d [%sp]4,%e4
8000a9cc:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a9d0:	6d 00 84 02 	call 8000aed8 <__unpack_d>
8000a9d4:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a9d8:	d9 a5 28 00 	lea %a5,[%sp]40
8000a9dc:	6d 00 7e 02 	call 8000aed8 <__unpack_d>
8000a9e0:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000a9e4:	ff 23 0c 80 	jge.u %d3,2,8000a9fc <__muldf3+0x3e>
8000a9e8:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a9ec:	58 0b       	ld.w %d15,[%sp]44
8000a9ee:	d9 a4 14 00 	lea %a4,[%sp]20
8000a9f2:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a9f6:	78 06       	st.w [%sp]24,%d15
8000a9f8:	1d 00 b3 00 	j 8000ab5e <__muldf3+0x1a0>
8000a9fc:	39 af 28 00 	ld.bu %d15,[%sp]40
8000aa00:	ff 2f 0c 80 	jge.u %d15,2,8000aa18 <__muldf3+0x5a>
8000aa04:	58 0b       	ld.w %d15,[%sp]44
8000aa06:	19 a2 18 00 	ld.w %d2,[%sp]24
8000aa0a:	d9 a4 28 00 	lea %a4,[%sp]40
8000aa0e:	0b f2 10 f1 	ne %d15,%d2,%d15
8000aa12:	78 0b       	st.w [%sp]44,%d15
8000aa14:	1d 00 a5 00 	j 8000ab5e <__muldf3+0x1a0>
8000aa18:	df 43 09 80 	jne %d3,4,8000aa2a <__muldf3+0x6c>
8000aa1c:	91 00 00 48 	movh.a %a4,32768
8000aa20:	d9 44 e4 b0 	lea %a4,[%a4]3812 <80000ee4 <__thenan_df>>
8000aa24:	df 2f 9d 00 	jeq %d15,2,8000ab5e <__muldf3+0x1a0>
8000aa28:	3c e0       	j 8000a9e8 <__muldf3+0x2a>
8000aa2a:	5e 48       	jne %d15,4,8000aa3a <__muldf3+0x7c>
8000aa2c:	91 00 00 48 	movh.a %a4,32768
8000aa30:	d9 44 e4 b0 	lea %a4,[%a4]3812 <80000ee4 <__thenan_df>>
8000aa34:	df 23 95 00 	jeq %d3,2,8000ab5e <__muldf3+0x1a0>
8000aa38:	3c e6       	j 8000aa04 <__muldf3+0x46>
8000aa3a:	df 23 d7 7f 	jeq %d3,2,8000a9e8 <__muldf3+0x2a>
8000aa3e:	df 2f e3 7f 	jeq %d15,2,8000aa04 <__muldf3+0x46>
8000aa42:	58 08       	ld.w %d15,[%sp]32
8000aa44:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000aa48:	d2 00       	mov %e0,0
8000aa4a:	19 a0 34 00 	ld.w %d0,[%sp]52
8000aa4e:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000aa52:	82 0c       	mov %d12,0
8000aa54:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000aa58:	19 aa 24 00 	ld.w %d10,[%sp]36
8000aa5c:	82 02       	mov %d2,0
8000aa5e:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000aa62:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000aa66:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000aa6a:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000aa6e:	82 0d       	mov %d13,0
8000aa70:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000aa74:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000aa78:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000aa7c:	0b 54 10 08 	mov %e0,%d4,%d5
8000aa80:	42 20       	add %d0,%d2
8000aa82:	3a 73       	eq %d15,%d3,%d7
8000aa84:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000aa88:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000aa8c:	8b 0f 00 62 	eq %d6,%d15,0
8000aa90:	3a 50       	eq %d15,%d0,%d5
8000aa92:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000aa96:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000aa9a:	ba 0f       	eq %d15,%d15,0
8000aa9c:	53 1f 40 40 	mul.u %e4,%d15,1
8000aaa0:	02 38       	mov %d8,%d3
8000aaa2:	82 09       	mov %d9,0
8000aaa4:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000aaa8:	02 5f       	mov %d15,%d5
8000aaaa:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000aaae:	42 6f       	add %d15,%d6
8000aab0:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000aab4:	0b 4f 10 68 	mov %e6,%d15,%d4
8000aab8:	0b 62 40 40 	addx %d4,%d2,%d6
8000aabc:	0b 73 50 20 	addc %d2,%d3,%d7
8000aac0:	58 07       	ld.w %d15,[%sp]28
8000aac2:	19 a3 30 00 	ld.w %d3,[%sp]48
8000aac6:	19 a5 18 00 	ld.w %d5,[%sp]24
8000aaca:	42 3f       	add %d15,%d3
8000aacc:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000aad0:	c2 4f       	add %d15,4
8000aad2:	0b 35 10 31 	ne %d3,%d5,%d3
8000aad6:	59 a3 00 10 	st.w [%sp]64,%d3
8000aada:	7b 00 00 52 	movh %d5,8192
8000aade:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000aae2:	df 03 1b 00 	jeq %d3,0,8000ab18 <__muldf3+0x15a>
8000aae6:	8f 14 00 31 	and %d3,%d4,1
8000aaea:	76 37       	jz %d3,8000aaf8 <__muldf3+0x13a>
8000aaec:	8f f0 1f 30 	sh %d3,%d0,-1
8000aaf0:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000aaf4:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000aaf8:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000aafc:	c2 1f       	add %d15,1
8000aafe:	06 f2       	sh %d2,-1
8000ab00:	3c ed       	j 8000aada <__muldf3+0x11c>
8000ab02:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000ab06:	06 14       	sh %d4,1
8000ab08:	ce 04       	jgez %d0,8000ab10 <__muldf3+0x152>
8000ab0a:	8f 14 40 51 	or %d5,%d4,1
8000ab0e:	02 54       	mov %d4,%d5
8000ab10:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000ab14:	c2 ff       	add %d15,-1
8000ab16:	06 11       	sh %d1,1
8000ab18:	7b 00 00 51 	movh %d5,4096
8000ab1c:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000ab20:	df 03 f1 ff 	jne %d3,0,8000ab02 <__muldf3+0x144>
8000ab24:	78 11       	st.w [%sp]68,%d15
8000ab26:	02 4f       	mov %d15,%d4
8000ab28:	16 ff       	and %d15,255
8000ab2a:	8b 0f 28 f2 	ne %d15,%d15,128
8000ab2e:	ee 0f       	jnz %d15,8000ab4c <__muldf3+0x18e>
8000ab30:	a6 10       	or %d0,%d1
8000ab32:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000ab36:	8b 00 20 02 	ne %d0,%d0,0
8000ab3a:	0f f0 e0 00 	andn %d0,%d0,%d15
8000ab3e:	76 07       	jz %d0,8000ab4c <__muldf3+0x18e>
8000ab40:	8b 04 88 40 	addx %d4,%d4,128
8000ab44:	8b 02 a0 20 	addc %d2,%d2,0
8000ab48:	8f f4 cf 41 	andn %d4,%d4,255
8000ab4c:	d9 a4 10 10 	lea %a4,[%sp]80
8000ab50:	82 3f       	mov %d15,3
8000ab52:	59 a4 08 10 	st.w [%sp]72,%d4
8000ab56:	59 a2 0c 10 	st.w [%sp]76,%d2
8000ab5a:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin2_TX_P33_8_OUT+0xc>>,%d15
8000ab5e:	1d 00 34 01 	j 8000adc6 <__pack_d>

8000ab62 <__divdf3>:
8000ab62:	20 38       	sub.a %sp,56
8000ab64:	40 a4       	mov.aa %a4,%sp
8000ab66:	d9 a5 10 00 	lea %a5,[%sp]16
8000ab6a:	89 a4 40 09 	st.d [%sp],%e4
8000ab6e:	89 a6 48 09 	st.d [%sp]8,%e6
8000ab72:	6d 00 b3 01 	call 8000aed8 <__unpack_d>
8000ab76:	d9 a4 08 00 	lea %a4,[%sp]8
8000ab7a:	d9 a5 24 00 	lea %a5,[%sp]36
8000ab7e:	6d 00 ad 01 	call 8000aed8 <__unpack_d>
8000ab82:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000ab86:	bf 22 76 80 	jlt.u %d2,2,8000ac72 <__divdf3+0x110>
8000ab8a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000ab8e:	d9 a4 24 00 	lea %a4,[%sp]36
8000ab92:	bf 2f 72 80 	jlt.u %d15,2,8000ac76 <__divdf3+0x114>
8000ab96:	19 a4 14 00 	ld.w %d4,[%sp]20
8000ab9a:	19 a3 28 00 	ld.w %d3,[%sp]40
8000ab9e:	c6 43       	xor %d3,%d4
8000aba0:	59 a3 14 00 	st.w [%sp]20,%d3
8000aba4:	1b e2 ff 3f 	addi %d3,%d2,-2
8000aba8:	8f d3 0f 31 	and %d3,%d3,253
8000abac:	f6 38       	jnz %d3,8000abbc <__divdf3+0x5a>
8000abae:	91 00 00 48 	movh.a %a4,32768
8000abb2:	d9 44 e4 b0 	lea %a4,[%a4]3812 <80000ee4 <__thenan_df>>
8000abb6:	5f f2 5e 80 	jne %d2,%d15,8000ac72 <__divdf3+0x110>
8000abba:	3c 5e       	j 8000ac76 <__divdf3+0x114>
8000abbc:	5e 47       	jne %d15,4,8000abca <__divdf3+0x68>
8000abbe:	d2 02       	mov %e2,0
8000abc0:	82 0f       	mov %d15,0
8000abc2:	89 a2 5c 09 	st.d [%sp]28,%e2
8000abc6:	78 06       	st.w [%sp]24,%d15
8000abc8:	3c 55       	j 8000ac72 <__divdf3+0x110>
8000abca:	5e 25       	jne %d15,2,8000abd4 <__divdf3+0x72>
8000abcc:	82 4f       	mov %d15,4
8000abce:	e9 af 10 00 	st.b [%sp]16,%d15
8000abd2:	3c 50       	j 8000ac72 <__divdf3+0x110>
8000abd4:	58 06       	ld.w %d15,[%sp]24
8000abd6:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000abda:	09 a4 70 09 	ld.d %e4,[%sp]48
8000abde:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000abe2:	52 66       	sub %d6,%d15,%d6
8000abe4:	3a 53       	eq %d15,%d3,%d5
8000abe6:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000abea:	59 a6 18 00 	st.w [%sp]24,%d6
8000abee:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000abf2:	ee 07       	jnz %d15,8000ac00 <__divdf3+0x9e>
8000abf4:	c2 f6       	add %d6,-1
8000abf6:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000abfa:	59 a6 18 00 	st.w [%sp]24,%d6
8000abfe:	06 12       	sh %d2,1
8000ac00:	82 01       	mov %d1,0
8000ac02:	7b 00 00 f1 	movh %d15,4096
8000ac06:	82 00       	mov %d0,0
8000ac08:	82 07       	mov %d7,0
8000ac0a:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000ac0e:	0b 53 00 61 	eq %d6,%d3,%d5
8000ac12:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000ac16:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000ac1a:	f6 6b       	jnz %d6,8000ac30 <__divdf3+0xce>
8000ac1c:	0f 10 a0 80 	or %d8,%d0,%d1
8000ac20:	0f f7 a0 60 	or %d6,%d7,%d15
8000ac24:	0b 42 c0 20 	subx %d2,%d2,%d4
8000ac28:	02 80       	mov %d0,%d8
8000ac2a:	02 67       	mov %d7,%d6
8000ac2c:	0b 53 d0 30 	subc %d3,%d3,%d5
8000ac30:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000ac34:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000ac38:	06 ff       	sh %d15,-1
8000ac3a:	06 12       	sh %d2,1
8000ac3c:	fd f0 e9 7f 	loop %a15,8000ac0e <__divdf3+0xac>
8000ac40:	02 0f       	mov %d15,%d0
8000ac42:	16 ff       	and %d15,255
8000ac44:	8b 0f 28 f2 	ne %d15,%d15,128
8000ac48:	0b 70 10 48 	mov %e4,%d0,%d7
8000ac4c:	ee 0f       	jnz %d15,8000ac6a <__divdf3+0x108>
8000ac4e:	a6 32       	or %d2,%d3
8000ac50:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000ac54:	8b 02 20 22 	ne %d2,%d2,0
8000ac58:	0f f2 e0 20 	andn %d2,%d2,%d15
8000ac5c:	76 27       	jz %d2,8000ac6a <__divdf3+0x108>
8000ac5e:	8b 00 88 00 	addx %d0,%d0,128
8000ac62:	8b 07 a0 40 	addc %d4,%d7,0
8000ac66:	8f f0 cf 51 	andn %d5,%d0,255
8000ac6a:	59 a5 1c 00 	st.w [%sp]28,%d5
8000ac6e:	59 a4 20 00 	st.w [%sp]32,%d4
8000ac72:	d9 a4 10 00 	lea %a4,[%sp]16
8000ac76:	1d 00 a8 00 	j 8000adc6 <__pack_d>

8000ac7a <__floatsidf>:
8000ac7a:	20 18       	sub.a %sp,24
8000ac7c:	82 3f       	mov %d15,3
8000ac7e:	2c a4       	st.b [%sp]4,%d15
8000ac80:	8f 14 1e f0 	sh %d15,%d4,-31
8000ac84:	78 02       	st.w [%sp]8,%d15
8000ac86:	f6 44       	jnz %d4,8000ac8e <__floatsidf+0x14>
8000ac88:	82 2f       	mov %d15,2
8000ac8a:	2c a4       	st.b [%sp]4,%d15
8000ac8c:	3c 16       	j 8000acb8 <__floatsidf+0x3e>
8000ac8e:	6e 09       	jz %d15,8000aca0 <__floatsidf+0x26>
8000ac90:	7b 00 00 f8 	movh %d15,32768
8000ac94:	82 02       	mov %d2,0
8000ac96:	7b 00 1e 3c 	movh %d3,49632
8000ac9a:	5f f4 13 00 	jeq %d4,%d15,8000acc0 <__floatsidf+0x46>
8000ac9e:	32 54       	rsub %d4
8000aca0:	0f 04 b0 f1 	clz %d15,%d4
8000aca4:	1b df 01 60 	addi %d6,%d15,29
8000aca8:	82 05       	mov %d5,0
8000acaa:	6d 00 39 00 	call 8000ad1c <__ashldi3>
8000acae:	8b ff 01 f1 	rsub %d15,%d15,31
8000acb2:	89 a2 50 09 	st.d [%sp]16,%e2
8000acb6:	78 03       	st.w [%sp]12,%d15
8000acb8:	d9 a4 04 00 	lea %a4,[%sp]4
8000acbc:	6d 00 85 00 	call 8000adc6 <__pack_d>
8000acc0:	00 90       	ret 

8000acc2 <__make_dp>:
8000acc2:	20 18       	sub.a %sp,24
8000acc4:	09 a2 58 09 	ld.d %e2,[%sp]24
8000acc8:	d9 a4 04 00 	lea %a4,[%sp]4
8000accc:	e9 a4 04 00 	st.b [%sp]4,%d4
8000acd0:	59 a5 08 00 	st.w [%sp]8,%d5
8000acd4:	59 a6 0c 00 	st.w [%sp]12,%d6
8000acd8:	89 a2 50 09 	st.d [%sp]16,%e2
8000acdc:	1d 00 75 00 	j 8000adc6 <__pack_d>

8000ace0 <__truncdfsf2>:
8000ace0:	20 20       	sub.a %sp,32
8000ace2:	d9 a4 20 00 	lea %a4,[%sp]32
8000ace6:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000acea:	d9 a5 0c 00 	lea %a5,[%sp]12
8000acee:	6d 00 f5 00 	call 8000aed8 <__unpack_d>
8000acf2:	19 a7 18 00 	ld.w %d7,[%sp]24
8000acf6:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000acfa:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000acfe:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000ad02:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000ad06:	02 23       	mov %d3,%d2
8000ad08:	8f 12 40 21 	or %d2,%d2,1
8000ad0c:	19 a5 10 00 	ld.w %d5,[%sp]16
8000ad10:	19 a6 14 00 	ld.w %d6,[%sp]20
8000ad14:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000ad18:	1d 00 4c 00 	j 8000adb0 <__make_fp>

8000ad1c <__ashldi3>:
8000ad1c:	6f 56 07 80 	jnz.t %d6,5,8000ad2a <__ashldi3+0xe>
8000ad20:	0f 64 00 20 	sh %d2,%d4,%d6
8000ad24:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000ad28:	00 90       	ret 
8000ad2a:	8b 06 1e 60 	add %d6,%d6,-32
8000ad2e:	82 02       	mov %d2,0
8000ad30:	0f 64 00 30 	sh %d3,%d4,%d6
8000ad34:	00 90       	ret 

8000ad36 <__unpack_f>:
8000ad36:	54 43       	ld.w %d3,[%a4]
8000ad38:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000ad3c:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000ad40:	8f 13 1e 30 	sh %d3,%d3,-31
8000ad44:	59 53 04 00 	st.w [%a5]4,%d3
8000ad48:	df 02 18 80 	jne %d2,0,8000ad78 <__unpack_f+0x42>
8000ad4c:	ee 03       	jnz %d15,8000ad52 <__unpack_f+0x1c>
8000ad4e:	82 2f       	mov %d15,2
8000ad50:	3c 19       	j 8000ad82 <__unpack_f+0x4c>
8000ad52:	3b 20 f8 2f 	mov %d2,-126
8000ad56:	59 52 08 00 	st.w [%a5]8,%d2
8000ad5a:	82 32       	mov %d2,3
8000ad5c:	34 52       	st.b [%a5],%d2
8000ad5e:	06 7f       	sh %d15,7
8000ad60:	3b 10 f8 2f 	mov %d2,-127
8000ad64:	7b 00 00 44 	movh %d4,16384
8000ad68:	06 1f       	sh %d15,1
8000ad6a:	02 23       	mov %d3,%d2
8000ad6c:	c2 f2       	add %d2,-1
8000ad6e:	3f 4f fd ff 	jlt.u %d15,%d4,8000ad68 <__unpack_f+0x32>
8000ad72:	59 53 08 00 	st.w [%a5]8,%d3
8000ad76:	3c 1b       	j 8000adac <__unpack_f+0x76>
8000ad78:	8b f2 2f 32 	ne %d3,%d2,255
8000ad7c:	f6 3f       	jnz %d3,8000ad9a <__unpack_f+0x64>
8000ad7e:	ee 04       	jnz %d15,8000ad86 <__unpack_f+0x50>
8000ad80:	82 4f       	mov %d15,4
8000ad82:	2c 50       	st.b [%a5]0,%d15
8000ad84:	00 90       	ret 
8000ad86:	7b 00 04 20 	movh %d2,64
8000ad8a:	26 f2       	and %d2,%d15
8000ad8c:	76 22       	jz %d2,8000ad90 <__unpack_f+0x5a>
8000ad8e:	82 12       	mov %d2,1
8000ad90:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000ad94:	34 52       	st.b [%a5],%d2
8000ad96:	06 7f       	sh %d15,7
8000ad98:	3c 0a       	j 8000adac <__unpack_f+0x76>
8000ad9a:	1b 12 f8 2f 	addi %d2,%d2,-127
8000ad9e:	06 7f       	sh %d15,7
8000ada0:	59 52 08 00 	st.w [%a5]8,%d2
8000ada4:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000ada8:	82 32       	mov %d2,3
8000adaa:	34 52       	st.b [%a5],%d2
8000adac:	6c 53       	st.w [%a5]12,%d15
8000adae:	00 90       	ret 

8000adb0 <__make_fp>:
8000adb0:	20 10       	sub.a %sp,16
8000adb2:	40 a4       	mov.aa %a4,%sp
8000adb4:	34 a4       	st.b [%sp],%d4
8000adb6:	59 a5 04 00 	st.w [%sp]4,%d5
8000adba:	59 a6 08 00 	st.w [%sp]8,%d6
8000adbe:	59 a7 0c 00 	st.w [%sp]12,%d7
8000adc2:	1d 00 e1 00 	j 8000af84 <__pack_f>

8000adc6 <__pack_d>:
8000adc6:	14 42       	ld.bu %d2,[%a4]
8000adc8:	19 49 0c 00 	ld.w %d9,[%a4]12
8000adcc:	19 48 10 00 	ld.w %d8,[%a4]16
8000add0:	19 4c 04 00 	ld.w %d12,[%a4]4
8000add4:	ff 22 0b 80 	jge.u %d2,2,8000adea <__pack_d+0x24>
8000add8:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000addc:	06 88       	sh %d8,-8
8000adde:	02 95       	mov %d5,%d9
8000ade0:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000ade4:	3b f0 7f f0 	mov %d15,2047
8000ade8:	3c 6f       	j 8000aec6 <__pack_d+0x100>
8000adea:	3b f0 7f f0 	mov %d15,2047
8000adee:	d2 04       	mov %e4,0
8000adf0:	df 42 6b 00 	jeq %d2,4,8000aec6 <__pack_d+0x100>
8000adf4:	0f 89 a0 f0 	or %d15,%d9,%d8
8000adf8:	8b 22 00 32 	eq %d3,%d2,2
8000adfc:	8b 0f e0 34 	or.eq %d3,%d15,0
8000ae00:	82 0f       	mov %d15,0
8000ae02:	df 03 62 80 	jne %d3,0,8000aec6 <__pack_d+0x100>
8000ae06:	19 42 08 00 	ld.w %d2,[%a4]8
8000ae0a:	3b 20 c0 ff 	mov %d15,-1022
8000ae0e:	7f f2 36 00 	jge %d2,%d15,8000ae7a <__pack_d+0xb4>
8000ae12:	a2 2f       	sub %d15,%d2
8000ae14:	8b 9f 83 42 	ge %d4,%d15,57
8000ae18:	82 02       	mov %d2,0
8000ae1a:	df 04 18 80 	jne %d4,0,8000ae4a <__pack_d+0x84>
8000ae1e:	0b 98 10 48 	mov %e4,%d8,%d9
8000ae22:	02 f6       	mov %d6,%d15
8000ae24:	6d ff 97 fc 	call 8000a752 <__lshrdi3>
8000ae28:	d2 14       	mov %e4,1
8000ae2a:	02 f6       	mov %d6,%d15
8000ae2c:	0b 32 10 a8 	mov %e10,%d2,%d3
8000ae30:	6d ff 76 ff 	call 8000ad1c <__ashldi3>
8000ae34:	8b f2 9f 20 	addx %d2,%d2,-1
8000ae38:	8b f3 bf 30 	addc %d3,%d3,-1
8000ae3c:	26 29       	and %d9,%d2
8000ae3e:	26 38       	and %d8,%d3
8000ae40:	a6 98       	or %d8,%d9
8000ae42:	02 b2       	mov %d2,%d11
8000ae44:	8b 08 00 25 	or.ne %d2,%d8,0
8000ae48:	02 a3       	mov %d3,%d10
8000ae4a:	02 2f       	mov %d15,%d2
8000ae4c:	16 ff       	and %d15,255
8000ae4e:	8b 0f 28 f2 	ne %d15,%d15,128
8000ae52:	ee 07       	jnz %d15,8000ae60 <__pack_d+0x9a>
8000ae54:	8f 02 10 f1 	and %d15,%d2,256
8000ae58:	6e 08       	jz %d15,8000ae68 <__pack_d+0xa2>
8000ae5a:	8b 02 88 20 	addx %d2,%d2,128
8000ae5e:	3c 03       	j 8000ae64 <__pack_d+0x9e>
8000ae60:	8b f2 87 20 	addx %d2,%d2,127
8000ae64:	8b 03 a0 30 	addc %d3,%d3,0
8000ae68:	7b 00 00 41 	movh %d4,4096
8000ae6c:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000ae70:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000ae74:	8f 83 1f 40 	sh %d4,%d3,-8
8000ae78:	3c 27       	j 8000aec6 <__pack_d+0x100>
8000ae7a:	3b 00 40 30 	mov %d3,1024
8000ae7e:	3b f0 7f f0 	mov %d15,2047
8000ae82:	7f 32 22 00 	jge %d2,%d3,8000aec6 <__pack_d+0x100>
8000ae86:	02 9f       	mov %d15,%d9
8000ae88:	16 ff       	and %d15,255
8000ae8a:	8b 0f 28 f2 	ne %d15,%d15,128
8000ae8e:	ee 07       	jnz %d15,8000ae9c <__pack_d+0xd6>
8000ae90:	8f 09 10 f1 	and %d15,%d9,256
8000ae94:	6e 08       	jz %d15,8000aea4 <__pack_d+0xde>
8000ae96:	8b 09 88 90 	addx %d9,%d9,128
8000ae9a:	3c 03       	j 8000aea0 <__pack_d+0xda>
8000ae9c:	8b f9 87 90 	addx %d9,%d9,127
8000aea0:	8b 08 a0 80 	addc %d8,%d8,0
8000aea4:	7b 00 00 32 	movh %d3,8192
8000aea8:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000aeac:	ee 04       	jnz %d15,8000aeb4 <__pack_d+0xee>
8000aeae:	1b f2 3f f0 	addi %d15,%d2,1023
8000aeb2:	3c 06       	j 8000aebe <__pack_d+0xf8>
8000aeb4:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000aeb8:	1b 02 40 f0 	addi %d15,%d2,1024
8000aebc:	06 f8       	sh %d8,-1
8000aebe:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000aec2:	8f 88 1f 40 	sh %d4,%d8,-8
8000aec6:	d2 02       	mov %e2,0
8000aec8:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000aecc:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000aed0:	02 52       	mov %d2,%d5
8000aed2:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000aed6:	00 90       	ret 

8000aed8 <__unpack_d>:
8000aed8:	19 44 04 00 	ld.w %d4,[%a4]4
8000aedc:	54 42       	ld.w %d2,[%a4]
8000aede:	37 04 74 50 	extr.u %d5,%d4,0,20
8000aee2:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000aee6:	8f 14 1e 40 	sh %d4,%d4,-31
8000aeea:	59 54 04 00 	st.w [%a5]4,%d4
8000aeee:	02 53       	mov %d3,%d5
8000aef0:	ee 21       	jnz %d15,8000af32 <__unpack_d+0x5a>
8000aef2:	0f 25 a0 f0 	or %d15,%d5,%d2
8000aef6:	ee 03       	jnz %d15,8000aefc <__unpack_d+0x24>
8000aef8:	82 2f       	mov %d15,2
8000aefa:	3c 23       	j 8000af40 <__unpack_d+0x68>
8000aefc:	3b 20 c0 ff 	mov %d15,-1022
8000af00:	6c 52       	st.w [%a5]8,%d15
8000af02:	82 3f       	mov %d15,3
8000af04:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000af08:	2c 50       	st.b [%a5]0,%d15
8000af0a:	8f 82 00 20 	sh %d2,%d2,8
8000af0e:	3b 10 c0 ff 	mov %d15,-1023
8000af12:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000af16:	7b 00 00 61 	movh %d6,4096
8000af1a:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000af1e:	02 f4       	mov %d4,%d15
8000af20:	06 12       	sh %d2,1
8000af22:	c2 ff       	add %d15,-1
8000af24:	df 05 f7 ff 	jne %d5,0,8000af12 <__unpack_d+0x3a>
8000af28:	59 54 08 00 	st.w [%a5]8,%d4
8000af2c:	59 52 0c 00 	st.w [%a5]12,%d2
8000af30:	3c 27       	j 8000af7e <__unpack_d+0xa6>
8000af32:	3b f0 7f 40 	mov %d4,2047
8000af36:	fe 47       	jne %d15,%d4,8000af64 <__unpack_d+0x8c>
8000af38:	0f 25 a0 f0 	or %d15,%d5,%d2
8000af3c:	ee 04       	jnz %d15,8000af44 <__unpack_d+0x6c>
8000af3e:	82 4f       	mov %d15,4
8000af40:	2c 50       	st.b [%a5]0,%d15
8000af42:	00 90       	ret 
8000af44:	7b 80 00 f0 	movh %d15,8
8000af48:	26 5f       	and %d15,%d5
8000af4a:	6e 02       	jz %d15,8000af4e <__unpack_d+0x76>
8000af4c:	82 1f       	mov %d15,1
8000af4e:	2c 50       	st.b [%a5]0,%d15
8000af50:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000af54:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000af58:	8f 82 00 40 	sh %d4,%d2,8
8000af5c:	59 54 0c 00 	st.w [%a5]12,%d4
8000af60:	6c 54       	st.w [%a5]16,%d15
8000af62:	00 90       	ret 
8000af64:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000af68:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000af6c:	6c 52       	st.w [%a5]8,%d15
8000af6e:	8f 82 00 20 	sh %d2,%d2,8
8000af72:	82 3f       	mov %d15,3
8000af74:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000af78:	2c 50       	st.b [%a5]0,%d15
8000af7a:	59 52 0c 00 	st.w [%a5]12,%d2
8000af7e:	59 53 10 00 	st.w [%a5]16,%d3
8000af82:	00 90       	ret 

8000af84 <__pack_f>:
8000af84:	14 45       	ld.bu %d5,[%a4]
8000af86:	4c 43       	ld.w %d15,[%a4]12
8000af88:	19 47 04 00 	ld.w %d7,[%a4]4
8000af8c:	ff 25 09 80 	jge.u %d5,2,8000af9e <__pack_f+0x1a>
8000af90:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000af94:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000af98:	3b f0 0f 40 	mov %d4,255
8000af9c:	3c 4f       	j 8000b03a <__pack_f+0xb6>
8000af9e:	3b f0 0f 40 	mov %d4,255
8000afa2:	82 03       	mov %d3,0
8000afa4:	df 45 4b 00 	jeq %d5,4,8000b03a <__pack_f+0xb6>
8000afa8:	8b 25 00 62 	eq %d6,%d5,2
8000afac:	8b 0f e0 64 	or.eq %d6,%d15,0
8000afb0:	82 04       	mov %d4,0
8000afb2:	df 06 44 80 	jne %d6,0,8000b03a <__pack_f+0xb6>
8000afb6:	19 45 08 00 	ld.w %d5,[%a4]8
8000afba:	8b 25 98 42 	ge %d4,%d5,-126
8000afbe:	df 04 24 80 	jne %d4,0,8000b006 <__pack_f+0x82>
8000afc2:	8b 25 18 51 	rsub %d5,%d5,-126
8000afc6:	8b a5 81 42 	ge %d4,%d5,26
8000afca:	f6 4c       	jnz %d4,8000afe2 <__pack_f+0x5e>
8000afcc:	82 12       	mov %d2,1
8000afce:	0f 52 00 20 	sh %d2,%d2,%d5
8000afd2:	8b 05 00 31 	rsub %d3,%d5,0
8000afd6:	c2 f2       	add %d2,-1
8000afd8:	0f 3f 00 30 	sh %d3,%d15,%d3
8000afdc:	26 2f       	and %d15,%d2
8000afde:	8b 0f 00 35 	or.ne %d3,%d15,0
8000afe2:	8f f3 07 f1 	and %d15,%d3,127
8000afe6:	8b 0f 24 f2 	ne %d15,%d15,64
8000afea:	ee 06       	jnz %d15,8000aff6 <__pack_f+0x72>
8000afec:	8f 03 08 f1 	and %d15,%d3,128
8000aff0:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000aff4:	3c 03       	j 8000affa <__pack_f+0x76>
8000aff6:	1b f3 03 30 	addi %d3,%d3,63
8000affa:	7b 00 00 f4 	movh %d15,16384
8000affe:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000b002:	06 93       	sh %d3,-7
8000b004:	3c 1b       	j 8000b03a <__pack_f+0xb6>
8000b006:	8b 05 88 62 	ge %d6,%d5,128
8000b00a:	3b f0 0f 40 	mov %d4,255
8000b00e:	df 06 16 80 	jne %d6,0,8000b03a <__pack_f+0xb6>
8000b012:	8f ff 07 31 	and %d3,%d15,127
8000b016:	8b 03 24 32 	ne %d3,%d3,64
8000b01a:	f6 36       	jnz %d3,8000b026 <__pack_f+0xa2>
8000b01c:	8f 0f 08 31 	and %d3,%d15,128
8000b020:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000b024:	3c 03       	j 8000b02a <__pack_f+0xa6>
8000b026:	1b ff 03 f0 	addi %d15,%d15,63
8000b02a:	1b f5 07 40 	addi %d4,%d5,127
8000b02e:	ce f4       	jgez %d15,8000b036 <__pack_f+0xb2>
8000b030:	06 ff       	sh %d15,-1
8000b032:	1b 05 08 40 	addi %d4,%d5,128
8000b036:	8f 9f 1f 30 	sh %d3,%d15,-7
8000b03a:	82 02       	mov %d2,0
8000b03c:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000b040:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000b044:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000b048:	00 90       	ret 

8000b04a <malloc>:
8000b04a:	91 00 00 f7 	movh.a %a15,28672
8000b04e:	99 f4 48 40 	ld.a %a4,[%a15]1288 <70000508 <_impure_ptr>>
8000b052:	1d 00 09 00 	j 8000b064 <_malloc_r>

8000b056 <free>:
8000b056:	91 00 00 f7 	movh.a %a15,28672
8000b05a:	40 45       	mov.aa %a5,%a4
8000b05c:	99 f4 48 40 	ld.a %a4,[%a15]1288 <70000508 <_impure_ptr>>
8000b060:	1d 00 f7 02 	j 8000b64e <_free_r>

8000b064 <_malloc_r>:
8000b064:	1b b4 00 f0 	addi %d15,%d4,11
8000b068:	8b 7f 61 82 	lt.u %d8,%d15,23
8000b06c:	8f 7f c0 f1 	andn %d15,%d15,7
8000b070:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000b074:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000b078:	8b 08 20 45 	or.lt %d4,%d8,0
8000b07c:	40 4d       	mov.aa %a13,%a4
8000b07e:	76 45       	jz %d4,8000b088 <_malloc_r+0x24>
8000b080:	da 0c       	mov %d15,12
8000b082:	6c 40       	st.w [%a4]0,%d15
8000b084:	1d 00 2a 02 	j 8000b4d8 <_malloc_r+0x474>
8000b088:	91 00 00 f7 	movh.a %a15,28672
8000b08c:	8b 88 bf f2 	ge.u %d15,%d8,504
8000b090:	6d 00 37 02 	call 8000b4fe <__malloc_lock>
8000b094:	d9 ff 00 40 	lea %a15,[%a15]256 <70000100 <__malloc_av_>>
8000b098:	ee 19       	jnz %d15,8000b0ca <_malloc_r+0x66>
8000b09a:	8f d8 1f 20 	sh %d2,%d8,-3
8000b09e:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b0a2:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b0a6:	7d 2c 09 80 	jne.a %a12,%a2,8000b0b8 <_malloc_r+0x54>
8000b0aa:	d9 c2 08 00 	lea %a2,[%a12]8
8000b0ae:	99 cc 14 00 	ld.a %a12,[%a12]20
8000b0b2:	c2 22       	add %d2,2
8000b0b4:	7d 2c 58 00 	jeq.a %a12,%a2,8000b164 <_malloc_r+0x100>
8000b0b8:	cc c3       	ld.a %a15,[%a12]12
8000b0ba:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b0be:	4c c1       	ld.w %d15,[%a12]4
8000b0c0:	ec 23       	st.a [%a2]12,%a15
8000b0c2:	8f 3f c0 f1 	andn %d15,%d15,3
8000b0c6:	e8 22       	st.a [%a15]8,%a2
8000b0c8:	3c 74       	j 8000b1b0 <_malloc_r+0x14c>
8000b0ca:	8f 78 1f f0 	sh %d15,%d8,-9
8000b0ce:	3b f0 03 20 	mov %d2,63
8000b0d2:	6e 27       	jz %d15,8000b120 <_malloc_r+0xbc>
8000b0d4:	8f a8 1f 20 	sh %d2,%d8,-6
8000b0d8:	1b 82 03 20 	addi %d2,%d2,56
8000b0dc:	bf 5f 22 80 	jlt.u %d15,5,8000b120 <_malloc_r+0xbc>
8000b0e0:	8b 5f a1 22 	ge.u %d2,%d15,21
8000b0e4:	f6 24       	jnz %d2,8000b0ec <_malloc_r+0x88>
8000b0e6:	1b bf 05 20 	addi %d2,%d15,91
8000b0ea:	3c 1b       	j 8000b120 <_malloc_r+0xbc>
8000b0ec:	8b 5f a5 22 	ge.u %d2,%d15,85
8000b0f0:	f6 26       	jnz %d2,8000b0fc <_malloc_r+0x98>
8000b0f2:	8f 48 1f 20 	sh %d2,%d8,-12
8000b0f6:	1b e2 06 20 	addi %d2,%d2,110
8000b0fa:	3c 13       	j 8000b120 <_malloc_r+0xbc>
8000b0fc:	8b 5f b5 22 	ge.u %d2,%d15,341
8000b100:	f6 26       	jnz %d2,8000b10c <_malloc_r+0xa8>
8000b102:	8f 18 1f 20 	sh %d2,%d8,-15
8000b106:	1b 72 07 20 	addi %d2,%d2,119
8000b10a:	3c 0b       	j 8000b120 <_malloc_r+0xbc>
8000b10c:	3b 50 55 30 	mov %d3,1365
8000b110:	3b e0 07 20 	mov %d2,126
8000b114:	7f 3f 06 80 	jge.u %d15,%d3,8000b120 <_malloc_r+0xbc>
8000b118:	8f e8 1e 20 	sh %d2,%d8,-18
8000b11c:	1b c2 07 20 	addi %d2,%d2,124
8000b120:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b124:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b128:	7d 2c 1d 00 	jeq.a %a12,%a2,8000b162 <_malloc_r+0xfe>
8000b12c:	19 c4 04 00 	ld.w %d4,[%a12]4
8000b130:	8f 34 c0 41 	andn %d4,%d4,3
8000b134:	5a 84       	sub %d15,%d4,%d8
8000b136:	8b 0f 41 32 	lt %d3,%d15,16
8000b13a:	f6 33       	jnz %d3,8000b140 <_malloc_r+0xdc>
8000b13c:	c2 f2       	add %d2,-1
8000b13e:	3c 12       	j 8000b162 <_malloc_r+0xfe>
8000b140:	0e fe       	jltz %d15,8000b15c <_malloc_r+0xf8>
8000b142:	cc c3       	ld.a %a15,[%a12]12
8000b144:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b148:	ec 23       	st.a [%a2]12,%a15
8000b14a:	e8 22       	st.a [%a15]8,%a2
8000b14c:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000b150:	b7 10 21 20 	imask %e2,1,0,1
8000b154:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b158:	1d 00 cc 01 	j 8000b4f0 <_malloc_r+0x48c>
8000b15c:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b160:	3c e4       	j 8000b128 <_malloc_r+0xc4>
8000b162:	c2 12       	add %d2,1
8000b164:	c8 4c       	ld.a %a12,[%a15]16
8000b166:	91 00 00 37 	movh.a %a3,28672
8000b16a:	d9 33 08 40 	lea %a3,[%a3]264 <70000108 <__malloc_av_+0x8>>
8000b16e:	7d 3c 83 00 	jeq.a %a12,%a3,8000b274 <_malloc_r+0x210>
8000b172:	4c c1       	ld.w %d15,[%a12]4
8000b174:	8f 3f c0 f1 	andn %d15,%d15,3
8000b178:	52 83       	sub %d3,%d15,%d8
8000b17a:	8b 03 41 42 	lt %d4,%d3,16
8000b17e:	df 04 16 80 	jne %d4,0,8000b1aa <_malloc_r+0x146>
8000b182:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b186:	8f 18 40 81 	or %d8,%d8,1
8000b18a:	59 c8 04 00 	st.w [%a12]4,%d8
8000b18e:	e8 52       	st.a [%a15]20,%a2
8000b190:	e8 42       	st.a [%a15]16,%a2
8000b192:	8f 13 40 f1 	or %d15,%d3,1
8000b196:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b19a:	b5 23 08 00 	st.a [%a2]8,%a3
8000b19e:	6c 21       	st.w [%a2]4,%d15
8000b1a0:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b1a4:	74 23       	st.w [%a2],%d3
8000b1a6:	1d 00 a5 01 	j 8000b4f0 <_malloc_r+0x48c>
8000b1aa:	e8 53       	st.a [%a15]20,%a3
8000b1ac:	e8 43       	st.a [%a15]16,%a3
8000b1ae:	0e 33       	jltz %d3,8000b1b4 <_malloc_r+0x150>
8000b1b0:	10 cf       	addsc.a %a15,%a12,%d15,0
8000b1b2:	3c cf       	j 8000b150 <_malloc_r+0xec>
8000b1b4:	3b 00 20 30 	mov %d3,512
8000b1b8:	7f 3f 15 80 	jge.u %d15,%d3,8000b1e2 <_malloc_r+0x17e>
8000b1bc:	06 df       	sh %d15,-3
8000b1be:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000b1c0:	48 14       	ld.w %d4,[%a15]4
8000b1c2:	99 24 08 00 	ld.a %a4,[%a2]8
8000b1c6:	8f ef 3f 30 	sha %d3,%d15,-2
8000b1ca:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000b1ce:	b5 c4 08 00 	st.a [%a12]8,%a4
8000b1d2:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000b1d6:	b5 2c 08 00 	st.a [%a2]8,%a12
8000b1da:	68 13       	st.w [%a15]4,%d3
8000b1dc:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000b1e0:	3c 4a       	j 8000b274 <_malloc_r+0x210>
8000b1e2:	8f af 1f 40 	sh %d4,%d15,-6
8000b1e6:	8f 7f 1f 30 	sh %d3,%d15,-9
8000b1ea:	1b 84 03 40 	addi %d4,%d4,56
8000b1ee:	bf 53 22 80 	jlt.u %d3,5,8000b232 <_malloc_r+0x1ce>
8000b1f2:	8b 53 a1 42 	ge.u %d4,%d3,21
8000b1f6:	f6 44       	jnz %d4,8000b1fe <_malloc_r+0x19a>
8000b1f8:	1b b3 05 40 	addi %d4,%d3,91
8000b1fc:	3c 1b       	j 8000b232 <_malloc_r+0x1ce>
8000b1fe:	8b 53 a5 42 	ge.u %d4,%d3,85
8000b202:	f6 46       	jnz %d4,8000b20e <_malloc_r+0x1aa>
8000b204:	8f 4f 1f 40 	sh %d4,%d15,-12
8000b208:	1b e4 06 40 	addi %d4,%d4,110
8000b20c:	3c 13       	j 8000b232 <_malloc_r+0x1ce>
8000b20e:	8b 53 b5 42 	ge.u %d4,%d3,341
8000b212:	f6 46       	jnz %d4,8000b21e <_malloc_r+0x1ba>
8000b214:	8f 1f 1f 40 	sh %d4,%d15,-15
8000b218:	1b 74 07 40 	addi %d4,%d4,119
8000b21c:	3c 0b       	j 8000b232 <_malloc_r+0x1ce>
8000b21e:	3b 50 55 50 	mov %d5,1365
8000b222:	3b e0 07 40 	mov %d4,126
8000b226:	7f 53 06 80 	jge.u %d3,%d5,8000b232 <_malloc_r+0x1ce>
8000b22a:	8f ef 1e 40 	sh %d4,%d15,-18
8000b22e:	1b c4 07 40 	addi %d4,%d4,124
8000b232:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000b236:	99 42 08 00 	ld.a %a2,[%a4]8
8000b23a:	7d 42 0d 80 	jne.a %a2,%a4,8000b254 <_malloc_r+0x1f0>
8000b23e:	4c f1       	ld.w %d15,[%a15]4
8000b240:	86 e4       	sha %d4,-2
8000b242:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000b246:	40 24       	mov.aa %a4,%a2
8000b248:	68 14       	st.w [%a15]4,%d4
8000b24a:	3c 0d       	j 8000b264 <_malloc_r+0x200>
8000b24c:	99 22 08 00 	ld.a %a2,[%a2]8
8000b250:	7d 42 08 00 	jeq.a %a2,%a4,8000b260 <_malloc_r+0x1fc>
8000b254:	19 23 04 00 	ld.w %d3,[%a2]4
8000b258:	8f 33 c0 31 	andn %d3,%d3,3
8000b25c:	3f 3f f8 ff 	jlt.u %d15,%d3,8000b24c <_malloc_r+0x1e8>
8000b260:	99 24 0c 00 	ld.a %a4,[%a2]12
8000b264:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000b268:	b5 c2 08 00 	st.a [%a12]8,%a2
8000b26c:	b5 4c 08 00 	st.a [%a4]8,%a12
8000b270:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000b274:	8f e2 3f 30 	sha %d3,%d2,-2
8000b278:	82 1f       	mov %d15,1
8000b27a:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000b27e:	48 13       	ld.w %d3,[%a15]4
8000b280:	3f f3 73 80 	jlt.u %d3,%d15,8000b366 <_malloc_r+0x302>
8000b284:	0f 3f 80 40 	and %d4,%d15,%d3
8000b288:	f6 49       	jnz %d4,8000b29a <_malloc_r+0x236>
8000b28a:	8f 32 c0 21 	andn %d2,%d2,3
8000b28e:	06 1f       	sh %d15,1
8000b290:	0f 3f 80 40 	and %d4,%d15,%d3
8000b294:	c2 42       	add %d2,4
8000b296:	df 04 fc 7f 	jeq %d4,0,8000b28e <_malloc_r+0x22a>
8000b29a:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b29e:	02 24       	mov %d4,%d2
8000b2a0:	40 24       	mov.aa %a4,%a2
8000b2a2:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000b2a6:	7d 4c 3c 00 	jeq.a %a12,%a4,8000b31e <_malloc_r+0x2ba>
8000b2aa:	19 c6 04 00 	ld.w %d6,[%a12]4
8000b2ae:	8f 36 c0 61 	andn %d6,%d6,3
8000b2b2:	0b 86 80 30 	sub %d3,%d6,%d8
8000b2b6:	8b 03 41 52 	lt %d5,%d3,16
8000b2ba:	df 05 1d 80 	jne %d5,0,8000b2f4 <_malloc_r+0x290>
8000b2be:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b2c2:	8f 18 40 81 	or %d8,%d8,1
8000b2c6:	59 c8 04 00 	st.w [%a12]4,%d8
8000b2ca:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b2ce:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000b2d2:	8f 13 40 f1 	or %d15,%d3,1
8000b2d6:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b2da:	b5 45 08 00 	st.a [%a4]8,%a5
8000b2de:	e8 52       	st.a [%a15]20,%a2
8000b2e0:	e8 42       	st.a [%a15]16,%a2
8000b2e2:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b2e6:	b5 23 08 00 	st.a [%a2]8,%a3
8000b2ea:	6c 21       	st.w [%a2]4,%d15
8000b2ec:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b2f0:	74 23       	st.w [%a2],%d3
8000b2f2:	3c 0e       	j 8000b30e <_malloc_r+0x2aa>
8000b2f4:	bf 03 12 00 	jlt %d3,0,8000b318 <_malloc_r+0x2b4>
8000b2f8:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000b2fc:	b7 10 21 20 	imask %e2,1,0,1
8000b300:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b304:	cc c3       	ld.a %a15,[%a12]12
8000b306:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000b30a:	ec 23       	st.a [%a2]12,%a15
8000b30c:	e8 22       	st.a [%a15]8,%a2
8000b30e:	40 d4       	mov.aa %a4,%a13
8000b310:	6d 00 f8 00 	call 8000b500 <__malloc_unlock>
8000b314:	1d 00 f3 00 	j 8000b4fa <_malloc_r+0x496>
8000b318:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b31c:	3c c5       	j 8000b2a6 <_malloc_r+0x242>
8000b31e:	c2 14       	add %d4,1
8000b320:	8f 34 00 31 	and %d3,%d4,3
8000b324:	d9 44 08 00 	lea %a4,[%a4]8
8000b328:	df 03 bd ff 	jne %d3,0,8000b2a2 <_malloc_r+0x23e>
8000b32c:	8f 32 00 31 	and %d3,%d2,3
8000b330:	f6 36       	jnz %d3,8000b33c <_malloc_r+0x2d8>
8000b332:	48 12       	ld.w %d2,[%a15]4
8000b334:	0f f2 e0 20 	andn %d2,%d2,%d15
8000b338:	68 12       	st.w [%a15]4,%d2
8000b33a:	3c 07       	j 8000b348 <_malloc_r+0x2e4>
8000b33c:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000b340:	d4 22       	ld.a %a2,[%a2]
8000b342:	c2 f2       	add %d2,-1
8000b344:	7d 42 f4 7f 	jeq.a %a2,%a4,8000b32c <_malloc_r+0x2c8>
8000b348:	06 1f       	sh %d15,1
8000b34a:	48 12       	ld.w %d2,[%a15]4
8000b34c:	8b 0f 20 32 	ne %d3,%d15,0
8000b350:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000b354:	76 39       	jz %d3,8000b366 <_malloc_r+0x302>
8000b356:	0f 2f 80 30 	and %d3,%d15,%d2
8000b35a:	f6 34       	jnz %d3,8000b362 <_malloc_r+0x2fe>
8000b35c:	c2 44       	add %d4,4
8000b35e:	06 1f       	sh %d15,1
8000b360:	3c fb       	j 8000b356 <_malloc_r+0x2f2>
8000b362:	02 42       	mov %d2,%d4
8000b364:	3c 9b       	j 8000b29a <_malloc_r+0x236>
8000b366:	c8 2c       	ld.a %a12,[%a15]8
8000b368:	19 ca 04 00 	ld.w %d10,[%a12]4
8000b36c:	8f 3a c0 a1 	andn %d10,%d10,3
8000b370:	5a 8a       	sub %d15,%d10,%d8
8000b372:	8b 0f 41 22 	lt %d2,%d15,16
8000b376:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000b37a:	df 02 b1 00 	jeq %d2,0,8000b4dc <_malloc_r+0x478>
8000b37e:	91 00 00 27 	movh.a %a2,28672
8000b382:	19 2b f0 b0 	ld.w %d11,[%a2]3824 <70000ef0 <__malloc_top_pad>>
8000b386:	91 00 00 27 	movh.a %a2,28672
8000b38a:	42 8b       	add %d11,%d8
8000b38c:	19 23 38 30 	ld.w %d3,[%a2]248 <700000f8 <__malloc_sbrk_base>>
8000b390:	1b fb 00 f1 	addi %d15,%d11,4111
8000b394:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b398:	1b 0b 01 20 	addi %d2,%d11,16
8000b39c:	8b f3 3f b2 	ne %d11,%d3,-1
8000b3a0:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000b3a4:	40 d4       	mov.aa %a4,%a13
8000b3a6:	02 b4       	mov %d4,%d11
8000b3a8:	80 2c       	mov.d %d12,%a2
8000b3aa:	6d 00 ac 00 	call 8000b502 <_sbrk_r>
8000b3ae:	80 29       	mov.d %d9,%a2
8000b3b0:	df f9 86 00 	jeq %d9,-1,8000b4bc <_malloc_r+0x458>
8000b3b4:	80 c2       	mov.d %d2,%a12
8000b3b6:	80 c3       	mov.d %d3,%a12
8000b3b8:	42 a2       	add %d2,%d10
8000b3ba:	80 f4       	mov.d %d4,%a15
8000b3bc:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000b3c0:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000b3c4:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000b3c8:	ee 7a       	jnz %d15,8000b4bc <_malloc_r+0x458>
8000b3ca:	91 00 00 e7 	movh.a %a14,28672
8000b3ce:	19 e3 c0 b0 	ld.w %d3,[%a14]3776 <70000ec0 <__malloc_current_mallinfo>>
8000b3d2:	42 b3       	add %d3,%d11
8000b3d4:	59 e3 c0 b0 	st.w [%a14]3776 <70000ec0 <__malloc_current_mallinfo>>,%d3
8000b3d8:	5f 29 0c 80 	jne %d9,%d2,8000b3f0 <_malloc_r+0x38c>
8000b3dc:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000b3e0:	ee 08       	jnz %d15,8000b3f0 <_malloc_r+0x38c>
8000b3e2:	c8 22       	ld.a %a2,[%a15]8
8000b3e4:	42 ba       	add %d10,%d11
8000b3e6:	8f 1a 40 a1 	or %d10,%d10,1
8000b3ea:	59 2a 04 00 	st.w [%a2]4,%d10
8000b3ee:	3c 55       	j 8000b498 <_malloc_r+0x434>
8000b3f0:	60 c2       	mov.a %a2,%d12
8000b3f2:	19 2f 38 30 	ld.w %d15,[%a2]248
8000b3f6:	5e f6       	jne %d15,-1,8000b402 <_malloc_r+0x39e>
8000b3f8:	91 00 00 27 	movh.a %a2,28672
8000b3fc:	59 29 38 30 	st.w [%a2]248 <700000f8 <__malloc_sbrk_base>>,%d9
8000b400:	3c 06       	j 8000b40c <_malloc_r+0x3a8>
8000b402:	0b 29 80 20 	sub %d2,%d9,%d2
8000b406:	42 23       	add %d3,%d2
8000b408:	59 e3 c0 b0 	st.w [%a14]3776 <70000ec0 <__malloc_current_mallinfo>>,%d3
8000b40c:	8f 79 00 21 	and %d2,%d9,7
8000b410:	82 0f       	mov %d15,0
8000b412:	76 24       	jz %d2,8000b41a <_malloc_r+0x3b6>
8000b414:	8b 82 00 f1 	rsub %d15,%d2,8
8000b418:	42 f9       	add %d9,%d15
8000b41a:	42 9b       	add %d11,%d9
8000b41c:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000b420:	1b 0f 00 21 	addi %d2,%d15,4096
8000b424:	5a b2       	sub %d15,%d2,%d11
8000b426:	40 d4       	mov.aa %a4,%a13
8000b428:	02 f4       	mov %d4,%d15
8000b42a:	6d 00 6c 00 	call 8000b502 <_sbrk_r>
8000b42e:	80 22       	mov.d %d2,%a2
8000b430:	df f2 04 80 	jne %d2,-1,8000b438 <_malloc_r+0x3d4>
8000b434:	60 92       	mov.a %a2,%d9
8000b436:	82 0f       	mov %d15,0
8000b438:	80 2b       	mov.d %d11,%a2
8000b43a:	19 e2 c0 b0 	ld.w %d2,[%a14]3776 <70000ec0 <__malloc_current_mallinfo>>
8000b43e:	a2 9b       	sub %d11,%d9
8000b440:	42 f2       	add %d2,%d15
8000b442:	60 92       	mov.a %a2,%d9
8000b444:	42 bf       	add %d15,%d11
8000b446:	68 29       	st.w [%a15]8,%d9
8000b448:	8f 1f 40 31 	or %d3,%d15,1
8000b44c:	59 e2 c0 b0 	st.w [%a14]3776 <70000ec0 <__malloc_current_mallinfo>>,%d2
8000b450:	59 23 04 00 	st.w [%a2]4 <70000ec0 <__malloc_current_mallinfo>>,%d3
8000b454:	df 0d 22 00 	jeq %d13,0,8000b498 <_malloc_r+0x434>
8000b458:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000b45c:	ee 05       	jnz %d15,8000b466 <_malloc_r+0x402>
8000b45e:	82 12       	mov %d2,1
8000b460:	59 22 04 00 	st.w [%a2]4,%d2
8000b464:	3c 2c       	j 8000b4bc <_malloc_r+0x458>
8000b466:	1b 4a ff af 	addi %d10,%d10,-12
8000b46a:	8f 7a c0 f1 	andn %d15,%d10,7
8000b46e:	10 c2       	addsc.a %a2,%a12,%d15,0
8000b470:	82 52       	mov %d2,5
8000b472:	59 22 04 00 	st.w [%a2]4,%d2
8000b476:	59 22 08 00 	st.w [%a2]8,%d2
8000b47a:	19 c2 04 00 	ld.w %d2,[%a12]4
8000b47e:	8f 12 00 21 	and %d2,%d2,1
8000b482:	a6 f2       	or %d2,%d15
8000b484:	59 c2 04 00 	st.w [%a12]4,%d2
8000b488:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000b48c:	ee 06       	jnz %d15,8000b498 <_malloc_r+0x434>
8000b48e:	40 d4       	mov.aa %a4,%a13
8000b490:	d9 c5 08 00 	lea %a5,[%a12]8
8000b494:	6d 00 dd 00 	call 8000b64e <_free_r>
8000b498:	91 00 00 27 	movh.a %a2,28672
8000b49c:	19 ef c0 b0 	ld.w %d15,[%a14]3776 <70000ec0 <__malloc_current_mallinfo>>
8000b4a0:	19 22 ec b0 	ld.w %d2,[%a2]3820 <70000eec <__malloc_max_sbrked_mem>>
8000b4a4:	7f f2 04 80 	jge.u %d2,%d15,8000b4ac <_malloc_r+0x448>
8000b4a8:	59 2f ec b0 	st.w [%a2]3820 <70000eec <__malloc_max_sbrked_mem>>,%d15
8000b4ac:	91 00 00 27 	movh.a %a2,28672
8000b4b0:	19 22 e8 b0 	ld.w %d2,[%a2]3816 <70000ee8 <__malloc_max_total_mem>>
8000b4b4:	7f f2 04 80 	jge.u %d2,%d15,8000b4bc <_malloc_r+0x458>
8000b4b8:	59 2f e8 b0 	st.w [%a2]3816 <70000ee8 <__malloc_max_total_mem>>,%d15
8000b4bc:	c8 22       	ld.a %a2,[%a15]8
8000b4be:	19 22 04 00 	ld.w %d2,[%a2]4 <70000ee8 <__malloc_max_total_mem>>
8000b4c2:	8f 32 c0 21 	andn %d2,%d2,3
8000b4c6:	5a 82       	sub %d15,%d2,%d8
8000b4c8:	8b 0f 41 32 	lt %d3,%d15,16
8000b4cc:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000b4d0:	76 36       	jz %d3,8000b4dc <_malloc_r+0x478>
8000b4d2:	40 d4       	mov.aa %a4,%a13
8000b4d4:	6d 00 16 00 	call 8000b500 <__malloc_unlock>
8000b4d8:	a0 0c       	mov.a %a12,0
8000b4da:	3c 10       	j 8000b4fa <_malloc_r+0x496>
8000b4dc:	c8 2c       	ld.a %a12,[%a15]8
8000b4de:	8f 18 40 21 	or %d2,%d8,1
8000b4e2:	96 01       	or %d15,1
8000b4e4:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b4e8:	59 c2 04 00 	st.w [%a12]4,%d2
8000b4ec:	e8 22       	st.a [%a15]8,%a2
8000b4ee:	6c 21       	st.w [%a2]4,%d15
8000b4f0:	40 d4       	mov.aa %a4,%a13
8000b4f2:	6d 00 07 00 	call 8000b500 <__malloc_unlock>
8000b4f6:	d9 cc 08 00 	lea %a12,[%a12]8
8000b4fa:	40 c2       	mov.aa %a2,%a12
8000b4fc:	00 90       	ret 

8000b4fe <__malloc_lock>:
8000b4fe:	00 90       	ret 

8000b500 <__malloc_unlock>:
8000b500:	00 90       	ret 

8000b502 <_sbrk_r>:
8000b502:	82 0f       	mov %d15,0
8000b504:	91 00 00 c7 	movh.a %a12,28672
8000b508:	59 cf f8 b0 	st.w [%a12]3832 <70000ef8 <errno>>,%d15
8000b50c:	40 4f       	mov.aa %a15,%a4
8000b50e:	6d 00 2d 17 	call 8000e368 <sbrk>
8000b512:	80 2f       	mov.d %d15,%a2
8000b514:	5e f5       	jne %d15,-1,8000b51e <_sbrk_r+0x1c>
8000b516:	19 cf f8 b0 	ld.w %d15,[%a12]3832 <70000ef8 <errno>>
8000b51a:	6e 02       	jz %d15,8000b51e <_sbrk_r+0x1c>
8000b51c:	68 0f       	st.w [%a15]0,%d15
8000b51e:	00 90       	ret 

8000b520 <strlen>:
8000b520:	80 42       	mov.d %d2,%a4
8000b522:	80 4f       	mov.d %d15,%a4
8000b524:	60 ff       	mov.a %a15,%d15
8000b526:	79 f3 00 00 	ld.b %d3,[%a15]0
8000b52a:	76 33       	jz %d3,8000b530 <strlen+0x10>
8000b52c:	c2 1f       	add %d15,1
8000b52e:	3c fb       	j 8000b524 <strlen+0x4>
8000b530:	52 22       	sub %d2,%d15,%d2
8000b532:	00 90       	ret 

8000b534 <_vsnprintf_r>:
8000b534:	20 68       	sub.a %sp,104
8000b536:	40 4f       	mov.aa %a15,%a4
8000b538:	ce 45       	jgez %d4,8000b542 <_vsnprintf_r+0xe>
8000b53a:	da 8b       	mov %d15,139
8000b53c:	6c 40       	st.w [%a4]0,%d15
8000b53e:	82 f2       	mov %d2,-1
8000b540:	00 90       	ret 
8000b542:	02 4f       	mov %d15,%d4
8000b544:	3b 80 20 20 	mov %d2,520
8000b548:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000b54c:	92 f2       	add %d2,%d15,-1
8000b54e:	ea 02       	cmovn %d2,%d15,0
8000b550:	f4 a5       	st.a [%sp],%a5
8000b552:	b5 a5 10 00 	st.a [%sp]16,%a5
8000b556:	59 a2 08 00 	st.w [%sp]8,%d2
8000b55a:	59 a2 14 00 	st.w [%sp]20,%d2
8000b55e:	40 a5       	mov.aa %a5,%sp
8000b560:	82 f2       	mov %d2,-1
8000b562:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000b566:	6d 00 4b 01 	call 8000b7fc <_svfprintf_r>
8000b56a:	ff f2 05 00 	jge %d2,-1,8000b574 <_vsnprintf_r+0x40>
8000b56e:	3b b0 08 30 	mov %d3,139
8000b572:	68 03       	st.w [%a15]0,%d3
8000b574:	6e 04       	jz %d15,8000b57c <_vsnprintf_r+0x48>
8000b576:	d8 00       	ld.a %a15,[%sp]0
8000b578:	82 0f       	mov %d15,0
8000b57a:	28 0f       	st.b [%a15]0,%d15
8000b57c:	00 90       	ret 

8000b57e <vsnprintf>:
8000b57e:	91 00 00 37 	movh.a %a3,28672
8000b582:	40 42       	mov.aa %a2,%a4
8000b584:	99 34 48 40 	ld.a %a4,[%a3]1288 <70000508 <_impure_ptr>>
8000b588:	40 5f       	mov.aa %a15,%a5
8000b58a:	40 67       	mov.aa %a7,%a6
8000b58c:	40 25       	mov.aa %a5,%a2
8000b58e:	40 f6       	mov.aa %a6,%a15
8000b590:	1d ff d2 ff 	j 8000b534 <_vsnprintf_r>

8000b594 <_malloc_trim_r>:
8000b594:	02 4f       	mov %d15,%d4
8000b596:	40 4f       	mov.aa %a15,%a4
8000b598:	6d ff b3 ff 	call 8000b4fe <__malloc_lock>
8000b59c:	91 00 00 c7 	movh.a %a12,28672
8000b5a0:	d9 cc 00 40 	lea %a12,[%a12]256 <70000100 <__malloc_av_>>
8000b5a4:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <g_vadcChannelIDs>>
8000b5a8:	3b 00 00 21 	mov %d2,4096
8000b5ac:	19 28 04 00 	ld.w %d8,[%a2]4
8000b5b0:	8f 38 c0 81 	andn %d8,%d8,3
8000b5b4:	5a f8       	sub %d15,%d8,%d15
8000b5b6:	1b ff fe f0 	addi %d15,%d15,4079
8000b5ba:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b5be:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000b5c2:	7f 2f 07 00 	jge %d15,%d2,8000b5d0 <_malloc_trim_r+0x3c>
8000b5c6:	40 f4       	mov.aa %a4,%a15
8000b5c8:	6d ff 9c ff 	call 8000b500 <__malloc_unlock>
8000b5cc:	82 02       	mov %d2,0
8000b5ce:	00 90       	ret 
8000b5d0:	40 f4       	mov.aa %a4,%a15
8000b5d2:	82 04       	mov %d4,0
8000b5d4:	6d ff 97 ff 	call 8000b502 <_sbrk_r>
8000b5d8:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b5dc:	60 84       	mov.a %a4,%d8
8000b5de:	30 43       	add.a %a3,%a4
8000b5e0:	7d 32 f3 ff 	jne.a %a2,%a3,8000b5c6 <_malloc_trim_r+0x32>
8000b5e4:	40 f4       	mov.aa %a4,%a15
8000b5e6:	8b 0f 00 41 	rsub %d4,%d15,0
8000b5ea:	6d ff 8c ff 	call 8000b502 <_sbrk_r>
8000b5ee:	80 22       	mov.d %d2,%a2
8000b5f0:	df f2 1c 80 	jne %d2,-1,8000b628 <_malloc_trim_r+0x94>
8000b5f4:	40 f4       	mov.aa %a4,%a15
8000b5f6:	82 04       	mov %d4,0
8000b5f8:	6d ff 85 ff 	call 8000b502 <_sbrk_r>
8000b5fc:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b600:	01 32 20 40 	sub.a %a4,%a2,%a3
8000b604:	80 4f       	mov.d %d15,%a4
8000b606:	8b 0f 41 22 	lt %d2,%d15,16
8000b60a:	df 02 de ff 	jne %d2,0,8000b5c6 <_malloc_trim_r+0x32>
8000b60e:	91 00 00 47 	movh.a %a4,28672
8000b612:	99 44 38 30 	ld.a %a4,[%a4]248 <700000f8 <__malloc_sbrk_base>>
8000b616:	96 01       	or %d15,1
8000b618:	6c 31       	st.w [%a3]4,%d15
8000b61a:	01 42 20 20 	sub.a %a2,%a2,%a4
8000b61e:	91 00 00 47 	movh.a %a4,28672
8000b622:	b5 42 c0 b0 	st.a [%a4]3776 <70000ec0 <__malloc_current_mallinfo>>,%a2
8000b626:	3c d0       	j 8000b5c6 <_malloc_trim_r+0x32>
8000b628:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b62c:	a2 f8       	sub %d8,%d15
8000b62e:	8f 18 40 81 	or %d8,%d8,1
8000b632:	59 28 04 00 	st.w [%a2]4,%d8
8000b636:	91 00 00 27 	movh.a %a2,28672
8000b63a:	19 22 c0 b0 	ld.w %d2,[%a2]3776 <70000ec0 <__malloc_current_mallinfo>>
8000b63e:	40 f4       	mov.aa %a4,%a15
8000b640:	5a f2       	sub %d15,%d2,%d15
8000b642:	59 2f c0 b0 	st.w [%a2]3776 <70000ec0 <__malloc_current_mallinfo>>,%d15
8000b646:	6d ff 5d ff 	call 8000b500 <__malloc_unlock>
8000b64a:	82 12       	mov %d2,1
8000b64c:	00 90       	ret 

8000b64e <_free_r>:
8000b64e:	40 4d       	mov.aa %a13,%a4
8000b650:	bd 05 d4 00 	jz.a %a5,8000b7f8 <_free_r+0x1aa>
8000b654:	40 5c       	mov.aa %a12,%a5
8000b656:	6d ff 54 ff 	call 8000b4fe <__malloc_lock>
8000b65a:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000b65e:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000b662:	8f 14 c0 f1 	andn %d15,%d4,1
8000b666:	91 00 00 27 	movh.a %a2,28672
8000b66a:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b66c:	d9 22 00 40 	lea %a2,[%a2]256 <70000100 <__malloc_av_>>
8000b670:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <g_vadcChannelIDs>>
8000b674:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <g_vadcChannelIDs>>
8000b678:	8f 14 00 41 	and %d4,%d4,1
8000b67c:	8f 33 c0 31 	andn %d3,%d3,3
8000b680:	7d 43 24 80 	jne.a %a3,%a4,8000b6c8 <_free_r+0x7a>
8000b684:	42 3f       	add %d15,%d3
8000b686:	f6 4d       	jnz %d4,8000b6a0 <_free_r+0x52>
8000b688:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b68c:	60 23       	mov.a %a3,%d2
8000b68e:	42 2f       	add %d15,%d2
8000b690:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000b694:	c8 33       	ld.a %a3,[%a15]12
8000b696:	c8 24       	ld.a %a4,[%a15]8
8000b698:	b5 43 0c 00 	st.a [%a4]12,%a3
8000b69c:	b5 34 08 00 	st.a [%a3]8,%a4
8000b6a0:	8f 1f 40 21 	or %d2,%d15,1
8000b6a4:	68 12       	st.w [%a15]4,%d2
8000b6a6:	ec 22       	st.a [%a2]8,%a15
8000b6a8:	91 00 00 f7 	movh.a %a15,28672
8000b6ac:	19 f2 3c 30 	ld.w %d2,[%a15]252 <700000fc <__malloc_trim_threshold>>
8000b6b0:	3f 2f 09 80 	jlt.u %d15,%d2,8000b6c2 <_free_r+0x74>
8000b6b4:	91 00 00 f7 	movh.a %a15,28672
8000b6b8:	40 d4       	mov.aa %a4,%a13
8000b6ba:	19 f4 f0 b0 	ld.w %d4,[%a15]3824 <70000ef0 <__malloc_top_pad>>
8000b6be:	6d ff 6b ff 	call 8000b594 <_malloc_trim_r>
8000b6c2:	40 d4       	mov.aa %a4,%a13
8000b6c4:	1d ff 1e ff 	j 8000b500 <__malloc_unlock>
8000b6c8:	59 33 04 00 	st.w [%a3]4,%d3
8000b6cc:	82 02       	mov %d2,0
8000b6ce:	df 04 16 80 	jne %d4,0,8000b6fa <_free_r+0xac>
8000b6d2:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b6d6:	60 24       	mov.a %a4,%d2
8000b6d8:	42 2f       	add %d15,%d2
8000b6da:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000b6de:	c8 25       	ld.a %a5,[%a15]8
8000b6e0:	91 00 00 47 	movh.a %a4,28672
8000b6e4:	d9 44 08 40 	lea %a4,[%a4]264 <70000108 <__malloc_av_+0x8>>
8000b6e8:	82 12       	mov %d2,1
8000b6ea:	7d 45 08 00 	jeq.a %a5,%a4,8000b6fa <_free_r+0xac>
8000b6ee:	c8 34       	ld.a %a4,[%a15]12
8000b6f0:	82 02       	mov %d2,0
8000b6f2:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b6f6:	b5 45 08 00 	st.a [%a4]8,%a5
8000b6fa:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000b6fe:	19 44 04 00 	ld.w %d4,[%a4]4
8000b702:	6f 04 18 80 	jnz.t %d4,0,8000b732 <_free_r+0xe4>
8000b706:	42 3f       	add %d15,%d3
8000b708:	99 35 08 00 	ld.a %a5,[%a3]8
8000b70c:	f6 2d       	jnz %d2,8000b726 <_free_r+0xd8>
8000b70e:	91 00 00 47 	movh.a %a4,28672
8000b712:	d9 44 08 40 	lea %a4,[%a4]264 <70000108 <__malloc_av_+0x8>>
8000b716:	7d 45 08 80 	jne.a %a5,%a4,8000b726 <_free_r+0xd8>
8000b71a:	ec 25       	st.a [%a2]20,%a15
8000b71c:	ec 24       	st.a [%a2]16,%a15
8000b71e:	e8 35       	st.a [%a15]12,%a5
8000b720:	e8 25       	st.a [%a15]8,%a5
8000b722:	82 12       	mov %d2,1
8000b724:	3c 07       	j 8000b732 <_free_r+0xe4>
8000b726:	99 33 0c 00 	ld.a %a3,[%a3]12
8000b72a:	b5 53 0c 00 	st.a [%a5]12,%a3
8000b72e:	b5 35 08 00 	st.a [%a3]8,%a5
8000b732:	8f 1f 40 31 	or %d3,%d15,1
8000b736:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b738:	68 13       	st.w [%a15]4,%d3
8000b73a:	6c 30       	st.w [%a3]0,%d15
8000b73c:	df 02 c3 ff 	jne %d2,0,8000b6c2 <_free_r+0x74>
8000b740:	3b 00 20 20 	mov %d2,512
8000b744:	7f 2f 12 80 	jge.u %d15,%d2,8000b768 <_free_r+0x11a>
8000b748:	19 23 04 00 	ld.w %d3,[%a2]4
8000b74c:	06 df       	sh %d15,-3
8000b74e:	8f ef 3f 20 	sha %d2,%d15,-2
8000b752:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000b756:	59 22 04 00 	st.w [%a2]4,%d2
8000b75a:	d0 22       	addsc.a %a2,%a2,%d15,3
8000b75c:	99 23 08 00 	ld.a %a3,[%a2]8
8000b760:	e8 32       	st.a [%a15]12,%a2
8000b762:	e8 23       	st.a [%a15]8,%a3
8000b764:	ec 22       	st.a [%a2]8,%a15
8000b766:	3c 46       	j 8000b7f2 <_free_r+0x1a4>
8000b768:	8f af 1f 30 	sh %d3,%d15,-6
8000b76c:	8f 7f 1f 20 	sh %d2,%d15,-9
8000b770:	1b 83 03 30 	addi %d3,%d3,56
8000b774:	bf 52 22 80 	jlt.u %d2,5,8000b7b8 <_free_r+0x16a>
8000b778:	8b 52 a1 32 	ge.u %d3,%d2,21
8000b77c:	f6 34       	jnz %d3,8000b784 <_free_r+0x136>
8000b77e:	1b b2 05 30 	addi %d3,%d2,91
8000b782:	3c 1b       	j 8000b7b8 <_free_r+0x16a>
8000b784:	8b 52 a5 32 	ge.u %d3,%d2,85
8000b788:	f6 36       	jnz %d3,8000b794 <_free_r+0x146>
8000b78a:	8f 4f 1f 30 	sh %d3,%d15,-12
8000b78e:	1b e3 06 30 	addi %d3,%d3,110
8000b792:	3c 13       	j 8000b7b8 <_free_r+0x16a>
8000b794:	8b 52 b5 32 	ge.u %d3,%d2,341
8000b798:	f6 36       	jnz %d3,8000b7a4 <_free_r+0x156>
8000b79a:	8f 1f 1f 30 	sh %d3,%d15,-15
8000b79e:	1b 73 07 30 	addi %d3,%d3,119
8000b7a2:	3c 0b       	j 8000b7b8 <_free_r+0x16a>
8000b7a4:	3b 50 55 40 	mov %d4,1365
8000b7a8:	3b e0 07 30 	mov %d3,126
8000b7ac:	7f 42 06 80 	jge.u %d2,%d4,8000b7b8 <_free_r+0x16a>
8000b7b0:	8f ef 1e 30 	sh %d3,%d15,-18
8000b7b4:	1b c3 07 30 	addi %d3,%d3,124
8000b7b8:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000b7bc:	99 65 08 00 	ld.a %a5,[%a6]8
8000b7c0:	40 53       	mov.aa %a3,%a5
8000b7c2:	7d 65 0d 80 	jne.a %a5,%a6,8000b7dc <_free_r+0x18e>
8000b7c6:	4c 21       	ld.w %d15,[%a2]4
8000b7c8:	86 e3       	sha %d3,-2
8000b7ca:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000b7ce:	59 23 04 00 	st.w [%a2]4,%d3
8000b7d2:	3c 0d       	j 8000b7ec <_free_r+0x19e>
8000b7d4:	99 33 08 00 	ld.a %a3,[%a3]8
8000b7d8:	7d 63 08 00 	jeq.a %a3,%a6,8000b7e8 <_free_r+0x19a>
8000b7dc:	19 32 04 00 	ld.w %d2,[%a3]4
8000b7e0:	8f 32 c0 21 	andn %d2,%d2,3
8000b7e4:	3f 2f f8 ff 	jlt.u %d15,%d2,8000b7d4 <_free_r+0x186>
8000b7e8:	99 35 0c 00 	ld.a %a5,[%a3]12
8000b7ec:	e8 35       	st.a [%a15]12,%a5
8000b7ee:	e8 23       	st.a [%a15]8,%a3
8000b7f0:	ec 52       	st.a [%a5]8,%a15
8000b7f2:	ec 33       	st.a [%a3]12,%a15
8000b7f4:	1d ff 67 ff 	j 8000b6c2 <_free_r+0x74>
8000b7f8:	00 90       	ret 
	...

8000b7fc <_svfprintf_r>:
8000b7fc:	20 d0       	sub.a %sp,208
8000b7fe:	80 5b       	mov.d %d11,%a5
8000b800:	80 4c       	mov.d %d12,%a4
8000b802:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b806:	40 7f       	mov.aa %a15,%a7
8000b808:	6d 00 c4 0f 	call 8000d790 <_localeconv_r>
8000b80c:	d4 22       	ld.a %a2,[%a2]
8000b80e:	40 24       	mov.aa %a4,%a2
8000b810:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b814:	6d ff 86 fe 	call 8000b520 <strlen>
8000b818:	60 b2       	mov.a %a2,%d11
8000b81a:	59 a2 20 00 	st.w [%sp]32,%d2
8000b81e:	8c 26       	ld.h %d15,[%a2]12
8000b820:	6f 7f 16 00 	jz.t %d15,7,8000b84c <_svfprintf_r+0x50>
8000b824:	4c 24       	ld.w %d15,[%a2]16
8000b826:	ee 13       	jnz %d15,8000b84c <_svfprintf_r+0x50>
8000b828:	60 c4       	mov.a %a4,%d12
8000b82a:	3b 00 04 40 	mov %d4,64
8000b82e:	6d ff 1b fc 	call 8000b064 <_malloc_r>
8000b832:	60 b3       	mov.a %a3,%d11
8000b834:	f4 32       	st.a [%a3],%a2
8000b836:	b5 32 10 00 	st.a [%a3]16,%a2
8000b83a:	7c 26       	jnz.a %a2,8000b846 <_svfprintf_r+0x4a>
8000b83c:	60 cf       	mov.a %a15,%d12
8000b83e:	da 0c       	mov %d15,12
8000b840:	68 0f       	st.w [%a15]0,%d15
8000b842:	82 f2       	mov %d2,-1
8000b844:	00 90       	ret 
8000b846:	60 b2       	mov.a %a2,%d11
8000b848:	da 40       	mov %d15,64
8000b84a:	6c 25       	st.w [%a2]20,%d15
8000b84c:	82 0f       	mov %d15,0
8000b84e:	d9 a2 10 20 	lea %a2,[%sp]144
8000b852:	a0 03       	mov.a %a3,0
8000b854:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b858:	78 19       	st.w [%sp]100,%d15
8000b85a:	78 18       	st.w [%sp]96,%d15
8000b85c:	78 05       	st.w [%sp]20,%d15
8000b85e:	78 0b       	st.w [%sp]44,%d15
8000b860:	78 0c       	st.w [%sp]48,%d15
8000b862:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b866:	78 0e       	st.w [%sp]56,%d15
8000b868:	78 0a       	st.w [%sp]40,%d15
8000b86a:	40 2e       	mov.aa %a14,%a2
8000b86c:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b870:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b874:	8b 0f 20 32 	ne %d3,%d15,0
8000b878:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b87c:	76 33       	jz %d3,8000b882 <_svfprintf_r+0x86>
8000b87e:	b0 1c       	add.a %a12,1
8000b880:	3c f8       	j 8000b870 <_svfprintf_r+0x74>
8000b882:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b886:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b88a:	80 3f       	mov.d %d15,%a3
8000b88c:	6e 23       	jz %d15,8000b8d2 <_svfprintf_r+0xd6>
8000b88e:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b892:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b896:	42 f3       	add %d3,%d15
8000b898:	59 a3 24 10 	st.w [%sp]100,%d3
8000b89c:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b8a0:	f4 e3       	st.a [%a14],%a3
8000b8a2:	c2 13       	add %d3,1
8000b8a4:	6c e1       	st.w [%a14]4,%d15
8000b8a6:	59 a3 20 10 	st.w [%sp]96,%d3
8000b8aa:	8b 83 80 32 	ge %d3,%d3,8
8000b8ae:	d9 ee 08 00 	lea %a14,[%a14]8
8000b8b2:	76 3b       	jz %d3,8000b8c8 <_svfprintf_r+0xcc>
8000b8b4:	60 c4       	mov.a %a4,%d12
8000b8b6:	60 b5       	mov.a %a5,%d11
8000b8b8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b8bc:	6d 00 7d 12 	call 8000ddb6 <__ssprint_r>
8000b8c0:	df 02 69 88 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000b8c4:	d9 ae 10 20 	lea %a14,[%sp]144
8000b8c8:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b8cc:	42 f2       	add %d2,%d15
8000b8ce:	59 a2 28 00 	st.w [%sp]40,%d2
8000b8d2:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b8d6:	df 0f 56 08 	jeq %d15,0,8000c982 <_svfprintf_r+0x1186>
8000b8da:	82 0f       	mov %d15,0
8000b8dc:	82 02       	mov %d2,0
8000b8de:	e9 af 01 10 	st.b [%sp]65,%d15
8000b8e2:	d9 c2 01 00 	lea %a2,[%a12]1
8000b8e6:	82 0f       	mov %d15,0
8000b8e8:	82 fe       	mov %d14,-1
8000b8ea:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b8ee:	82 0a       	mov %d10,0
8000b8f0:	79 22 00 00 	ld.b %d2,[%a2]0
8000b8f4:	d9 23 01 00 	lea %a3,[%a2]1
8000b8f8:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b8fc:	59 a2 10 00 	st.w [%sp]16,%d2
8000b900:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b904:	1b 02 fe 3f 	addi %d3,%d2,-32
8000b908:	8b 93 a5 42 	ge.u %d4,%d3,89
8000b90c:	df 04 19 84 	jne %d4,0,8000c13e <_svfprintf_r+0x942>
8000b910:	91 10 00 28 	movh.a %a2,32769
8000b914:	d9 22 a0 4b 	lea %a2,[%a2]-18144 <8000b920 <_svfprintf_r+0x124>>
8000b918:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000b91c:	dc 07       	ji %a7
8000b91e:	00 00       	nop 
8000b920:	1d 00 c3 00 	j 8000baa6 <_svfprintf_r+0x2aa>
8000b924:	1d 00 0d 04 	j 8000c13e <_svfprintf_r+0x942>
8000b928:	1d 00 0b 04 	j 8000c13e <_svfprintf_r+0x942>
8000b92c:	1d 00 c0 00 	j 8000baac <_svfprintf_r+0x2b0>
8000b930:	1d 00 07 04 	j 8000c13e <_svfprintf_r+0x942>
8000b934:	1d 00 05 04 	j 8000c13e <_svfprintf_r+0x942>
8000b938:	1d 00 03 04 	j 8000c13e <_svfprintf_r+0x942>
8000b93c:	1d 00 01 04 	j 8000c13e <_svfprintf_r+0x942>
8000b940:	1d 00 ff 03 	j 8000c13e <_svfprintf_r+0x942>
8000b944:	1d 00 fd 03 	j 8000c13e <_svfprintf_r+0x942>
8000b948:	1d 00 b5 00 	j 8000bab2 <_svfprintf_r+0x2b6>
8000b94c:	1d 00 9c 00 	j 8000ba84 <_svfprintf_r+0x288>
8000b950:	1d 00 f7 03 	j 8000c13e <_svfprintf_r+0x942>
8000b954:	1d 00 b8 00 	j 8000bac4 <_svfprintf_r+0x2c8>
8000b958:	1d 00 b9 00 	j 8000baca <_svfprintf_r+0x2ce>
8000b95c:	1d 00 f1 03 	j 8000c13e <_svfprintf_r+0x942>
8000b960:	1d 00 de 00 	j 8000bb1c <_svfprintf_r+0x320>
8000b964:	1d 00 df 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b968:	1d 00 dd 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b96c:	1d 00 db 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b970:	1d 00 d9 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b974:	1d 00 d7 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b978:	1d 00 d5 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b97c:	1d 00 d3 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b980:	1d 00 d1 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b984:	1d 00 cf 00 	j 8000bb22 <_svfprintf_r+0x326>
8000b988:	1d 00 db 03 	j 8000c13e <_svfprintf_r+0x942>
8000b98c:	1d 00 d9 03 	j 8000c13e <_svfprintf_r+0x942>
8000b990:	1d 00 d7 03 	j 8000c13e <_svfprintf_r+0x942>
8000b994:	1d 00 d5 03 	j 8000c13e <_svfprintf_r+0x942>
8000b998:	1d 00 d3 03 	j 8000c13e <_svfprintf_r+0x942>
8000b99c:	1d 00 d1 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9a0:	1d 00 cf 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9a4:	1d 00 cd 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9a8:	1d 00 cb 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9ac:	1d 00 c9 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9b0:	1d 00 f9 00 	j 8000bba2 <_svfprintf_r+0x3a6>
8000b9b4:	1d 00 21 01 	j 8000bbf6 <_svfprintf_r+0x3fa>
8000b9b8:	1d 00 c3 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9bc:	1d 00 1d 01 	j 8000bbf6 <_svfprintf_r+0x3fa>
8000b9c0:	1d 00 bf 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9c4:	1d 00 bd 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9c8:	1d 00 bb 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9cc:	1d 00 b9 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9d0:	1d 00 c6 00 	j 8000bb5c <_svfprintf_r+0x360>
8000b9d4:	1d 00 b5 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9d8:	1d 00 b3 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9dc:	1d 00 92 02 	j 8000bf00 <_svfprintf_r+0x704>
8000b9e0:	1d 00 af 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9e4:	1d 00 ad 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9e8:	1d 00 ab 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9ec:	1d 00 a9 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9f0:	1d 00 a7 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9f4:	1d 00 d0 02 	j 8000bf94 <_svfprintf_r+0x798>
8000b9f8:	1d 00 a3 03 	j 8000c13e <_svfprintf_r+0x942>
8000b9fc:	1d 00 a1 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba00:	1d 00 4b 00 	j 8000ba96 <_svfprintf_r+0x29a>
8000ba04:	1d 00 9d 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba08:	1d 00 9b 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba0c:	1d 00 99 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba10:	1d 00 97 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba14:	1d 00 95 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba18:	1d 00 93 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba1c:	1d 00 91 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba20:	1d 00 8f 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba24:	1d 00 8d 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba28:	1d 00 8b 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba2c:	1d 00 b0 00 	j 8000bb8c <_svfprintf_r+0x390>
8000ba30:	1d 00 2f 00 	j 8000ba8e <_svfprintf_r+0x292>
8000ba34:	1d 00 e1 00 	j 8000bbf6 <_svfprintf_r+0x3fa>
8000ba38:	1d 00 df 00 	j 8000bbf6 <_svfprintf_r+0x3fa>
8000ba3c:	1d 00 dd 00 	j 8000bbf6 <_svfprintf_r+0x3fa>
8000ba40:	1d 00 91 00 	j 8000bb62 <_svfprintf_r+0x366>
8000ba44:	1d 00 25 00 	j 8000ba8e <_svfprintf_r+0x292>
8000ba48:	1d 00 7b 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba4c:	1d 00 79 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba50:	1d 00 8c 00 	j 8000bb68 <_svfprintf_r+0x36c>
8000ba54:	1d 00 75 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba58:	1d 00 39 02 	j 8000beca <_svfprintf_r+0x6ce>
8000ba5c:	1d 00 54 02 	j 8000bf04 <_svfprintf_r+0x708>
8000ba60:	1d 00 66 02 	j 8000bf2c <_svfprintf_r+0x730>
8000ba64:	1d 00 90 00 	j 8000bb84 <_svfprintf_r+0x388>
8000ba68:	1d 00 6b 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba6c:	1d 00 77 02 	j 8000bf5a <_svfprintf_r+0x75e>
8000ba70:	1d 00 67 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba74:	1d 00 92 02 	j 8000bf98 <_svfprintf_r+0x79c>
8000ba78:	1d 00 63 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba7c:	1d 00 61 03 	j 8000c13e <_svfprintf_r+0x942>
8000ba80:	1d 00 a0 02 	j 8000bfc0 <_svfprintf_r+0x7c4>
8000ba84:	da 2b       	mov %d15,43
8000ba86:	99 a2 18 00 	ld.a %a2,[%sp]24
8000ba8a:	1d ff 33 ff 	j 8000b8f0 <_svfprintf_r+0xf4>
8000ba8e:	e9 af 01 10 	st.b [%sp]65,%d15
8000ba92:	1d 00 8c 00 	j 8000bbaa <_svfprintf_r+0x3ae>
8000ba96:	e9 af 01 10 	st.b [%sp]65,%d15
8000ba9a:	7b 00 00 f8 	movh %d15,32768
8000ba9e:	1b 0f f1 f0 	addi %d15,%d15,3856
8000baa2:	1d 00 95 02 	j 8000bfcc <_svfprintf_r+0x7d0>
8000baa6:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000baaa:	3c ee       	j 8000ba86 <_svfprintf_r+0x28a>
8000baac:	8f 1a 40 a1 	or %d10,%d10,1
8000bab0:	3c eb       	j 8000ba86 <_svfprintf_r+0x28a>
8000bab2:	48 02       	ld.w %d2,[%a15]0
8000bab4:	b0 4f       	add.a %a15,4
8000bab6:	59 a2 1c 00 	st.w [%sp]28,%d2
8000baba:	ff 02 e6 7f 	jge %d2,0,8000ba86 <_svfprintf_r+0x28a>
8000babe:	32 52       	rsub %d2
8000bac0:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bac4:	8f 4a 40 a1 	or %d10,%d10,4
8000bac8:	3c df       	j 8000ba86 <_svfprintf_r+0x28a>
8000baca:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bace:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bad2:	79 32 00 00 	ld.b %d2,[%a3]0
8000bad6:	b0 12       	add.a %a2,1
8000bad8:	59 a2 10 00 	st.w [%sp]16,%d2
8000badc:	8b a2 02 32 	eq %d3,%d2,42
8000bae0:	f6 33       	jnz %d3,8000bae6 <_svfprintf_r+0x2ea>
8000bae2:	82 05       	mov %d5,0
8000bae4:	3c 08       	j 8000baf4 <_svfprintf_r+0x2f8>
8000bae6:	48 0e       	ld.w %d14,[%a15]0
8000bae8:	b5 a2 18 00 	st.a [%sp]24,%a2
8000baec:	b0 4f       	add.a %a15,4
8000baee:	8b fe 5f e3 	max %d14,%d14,-1
8000baf2:	3c ca       	j 8000ba86 <_svfprintf_r+0x28a>
8000baf4:	19 a2 10 00 	ld.w %d2,[%sp]16
8000baf8:	1b 02 fd 3f 	addi %d3,%d2,-48
8000bafc:	ff a3 0a 80 	jge.u %d3,10,8000bb10 <_svfprintf_r+0x314>
8000bb00:	79 22 00 00 	ld.b %d2,[%a2]0
8000bb04:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000bb08:	59 a2 10 00 	st.w [%sp]16,%d2
8000bb0c:	b0 12       	add.a %a2,1
8000bb0e:	3c f3       	j 8000baf4 <_svfprintf_r+0x2f8>
8000bb10:	8b f5 5f e3 	max %d14,%d5,-1
8000bb14:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bb18:	1d ff f4 fe 	j 8000b900 <_svfprintf_r+0x104>
8000bb1c:	8f 0a 48 a1 	or %d10,%d10,128
8000bb20:	3c b3       	j 8000ba86 <_svfprintf_r+0x28a>
8000bb22:	82 02       	mov %d2,0
8000bb24:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bb28:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bb2c:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bb30:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bb34:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000bb38:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bb3c:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000bb40:	b0 12       	add.a %a2,1
8000bb42:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bb46:	79 32 00 00 	ld.b %d2,[%a3]0
8000bb4a:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bb4e:	59 a2 10 00 	st.w [%sp]16,%d2
8000bb52:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bb56:	bf a4 e9 ff 	jlt.u %d4,10,8000bb28 <_svfprintf_r+0x32c>
8000bb5a:	3c dd       	j 8000bb14 <_svfprintf_r+0x318>
8000bb5c:	8f 8a 40 a1 	or %d10,%d10,8
8000bb60:	3c 93       	j 8000ba86 <_svfprintf_r+0x28a>
8000bb62:	8f 0a 44 a1 	or %d10,%d10,64
8000bb66:	3c 90       	j 8000ba86 <_svfprintf_r+0x28a>
8000bb68:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bb6c:	79 33 00 00 	ld.b %d3,[%a3]0
8000bb70:	8b c3 26 32 	ne %d3,%d3,108
8000bb74:	f6 35       	jnz %d3,8000bb7e <_svfprintf_r+0x382>
8000bb76:	b0 13       	add.a %a3,1
8000bb78:	b5 a3 18 00 	st.a [%sp]24,%a3
8000bb7c:	3c 04       	j 8000bb84 <_svfprintf_r+0x388>
8000bb7e:	8f 0a 41 a1 	or %d10,%d10,16
8000bb82:	3c 82       	j 8000ba86 <_svfprintf_r+0x28a>
8000bb84:	8f 0a 42 a1 	or %d10,%d10,32
8000bb88:	1d ff 7f ff 	j 8000ba86 <_svfprintf_r+0x28a>
8000bb8c:	48 03       	ld.w %d3,[%a15]0
8000bb8e:	d9 fc 04 00 	lea %a12,[%a15]4
8000bb92:	e9 a3 28 10 	st.b [%sp]104,%d3
8000bb96:	82 03       	mov %d3,0
8000bb98:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bb9c:	60 ad       	mov.a %a13,%d10
8000bb9e:	1d 00 dc 02 	j 8000c156 <_svfprintf_r+0x95a>
8000bba2:	e9 af 01 10 	st.b [%sp]65,%d15
8000bba6:	8f 0a 41 a1 	or %d10,%d10,16
8000bbaa:	60 ad       	mov.a %a13,%d10
8000bbac:	6f 5a 07 00 	jz.t %d10,5,8000bbba <_svfprintf_r+0x3be>
8000bbb0:	d9 fc 08 00 	lea %a12,[%a15]8
8000bbb4:	09 f8 40 09 	ld.d %e8,[%a15]
8000bbb8:	3c 12       	j 8000bbdc <_svfprintf_r+0x3e0>
8000bbba:	d9 f2 04 00 	lea %a2,[%a15]4
8000bbbe:	6f 4a 05 00 	jz.t %d10,4,8000bbc8 <_svfprintf_r+0x3cc>
8000bbc2:	40 2c       	mov.aa %a12,%a2
8000bbc4:	48 08       	ld.w %d8,[%a15]0
8000bbc6:	3c 09       	j 8000bbd8 <_svfprintf_r+0x3dc>
8000bbc8:	48 03       	ld.w %d3,[%a15]0
8000bbca:	40 2c       	mov.aa %a12,%a2
8000bbcc:	0b 30 00 88 	mov %e8,%d3
8000bbd0:	6f 6a 06 00 	jz.t %d10,6,8000bbdc <_svfprintf_r+0x3e0>
8000bbd4:	37 03 50 80 	extr %d8,%d3,0,16
8000bbd8:	0b 80 00 88 	mov %e8,%d8
8000bbdc:	82 13       	mov %d3,1
8000bbde:	ff 09 1d 02 	jge %d9,0,8000c018 <_svfprintf_r+0x81c>
8000bbe2:	32 59       	rsub %d9
8000bbe4:	32 58       	rsub %d8
8000bbe6:	3b d0 02 70 	mov %d7,45
8000bbea:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000bbee:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bbf2:	1d 00 13 02 	j 8000c018 <_svfprintf_r+0x81c>
8000bbf6:	e9 af 01 10 	st.b [%sp]65,%d15
8000bbfa:	4c f0       	ld.w %d15,[%a15]0
8000bbfc:	d9 fc 08 00 	lea %a12,[%a15]8
8000bc00:	78 0b       	st.w [%sp]44,%d15
8000bc02:	4c f1       	ld.w %d15,[%a15]4
8000bc04:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bc08:	78 0c       	st.w [%sp]48,%d15
8000bc0a:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bc0e:	6d 00 b3 10 	call 8000dd74 <__fpclassifyd>
8000bc12:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bc16:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bc1a:	df 12 18 80 	jne %d2,1,8000bc4a <_svfprintf_r+0x44e>
8000bc1e:	d2 06       	mov %e6,0
8000bc20:	6d 00 50 14 	call 8000e4c0 <__ltdf2>
8000bc24:	ce 25       	jgez %d2,8000bc2e <_svfprintf_r+0x432>
8000bc26:	3b d0 02 30 	mov %d3,45
8000bc2a:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bc2e:	58 04       	ld.w %d15,[%sp]16
8000bc30:	7b 00 00 78 	movh %d7,32768
8000bc34:	8b 8f 84 32 	ge %d3,%d15,72
8000bc38:	1b 47 f0 d0 	addi %d13,%d7,3844
8000bc3c:	df 03 17 80 	jne %d3,0,8000bc6a <_svfprintf_r+0x46e>
8000bc40:	7b 00 00 78 	movh %d7,32768
8000bc44:	1b 07 f0 d0 	addi %d13,%d7,3840
8000bc48:	3c 11       	j 8000bc6a <_svfprintf_r+0x46e>
8000bc4a:	6d 00 95 10 	call 8000dd74 <__fpclassifyd>
8000bc4e:	58 04       	ld.w %d15,[%sp]16
8000bc50:	df 02 13 80 	jne %d2,0,8000bc76 <_svfprintf_r+0x47a>
8000bc54:	7b 00 00 78 	movh %d7,32768
8000bc58:	8b 8f 84 32 	ge %d3,%d15,72
8000bc5c:	1b c7 f0 d0 	addi %d13,%d7,3852
8000bc60:	f6 35       	jnz %d3,8000bc6a <_svfprintf_r+0x46e>
8000bc62:	7b 00 00 78 	movh %d7,32768
8000bc66:	1b 87 f0 d0 	addi %d13,%d7,3848
8000bc6a:	8f 0a c8 a1 	andn %d10,%d10,128
8000bc6e:	60 ad       	mov.a %a13,%d10
8000bc70:	82 39       	mov %d9,3
8000bc72:	1d 00 78 02 	j 8000c162 <_svfprintf_r+0x966>
8000bc76:	8f 0f c2 f1 	andn %d15,%d15,32
8000bc7a:	78 01       	st.w [%sp]4,%d15
8000bc7c:	df fe 09 00 	jeq %d14,-1,8000bc8e <_svfprintf_r+0x492>
8000bc80:	8b 0e 00 72 	eq %d7,%d14,0
8000bc84:	8b 7f 04 74 	and.eq %d7,%d15,71
8000bc88:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000bc8c:	3c 02       	j 8000bc90 <_svfprintf_r+0x494>
8000bc8e:	82 6e       	mov %d14,6
8000bc90:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bc94:	8f 0a 50 21 	or %d2,%d10,256
8000bc98:	60 2d       	mov.a %a13,%d2
8000bc9a:	d8 0b       	ld.a %a15,[%sp]44
8000bc9c:	82 0f       	mov %d15,0
8000bc9e:	ce 34       	jgez %d3,8000bca6 <_svfprintf_r+0x4aa>
8000bca0:	9b 03 00 38 	addih %d3,%d3,32768
8000bca4:	da 2d       	mov %d15,45
8000bca6:	78 09       	st.w [%sp]36,%d15
8000bca8:	58 01       	ld.w %d15,[%sp]4
8000bcaa:	02 e9       	mov %d9,%d14
8000bcac:	8b 6f 04 22 	eq %d2,%d15,70
8000bcb0:	82 36       	mov %d6,3
8000bcb2:	f6 28       	jnz %d2,8000bcc2 <_svfprintf_r+0x4c6>
8000bcb4:	8b 5f 24 12 	ne %d1,%d15,69
8000bcb8:	1b 1e 00 50 	addi %d5,%d14,1
8000bcbc:	82 26       	mov %d6,2
8000bcbe:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000bcc2:	60 c4       	mov.a %a4,%d12
8000bcc4:	80 f4       	mov.d %d4,%a15
8000bcc6:	02 35       	mov %d5,%d3
8000bcc8:	02 97       	mov %d7,%d9
8000bcca:	d9 a5 04 10 	lea %a5,[%sp]68
8000bcce:	d9 a6 08 10 	lea %a6,[%sp]72
8000bcd2:	d9 a7 14 10 	lea %a7,[%sp]84
8000bcd6:	59 a2 0c 00 	st.w [%sp]12,%d2
8000bcda:	59 a3 08 00 	st.w [%sp]8,%d3
8000bcde:	6d 00 ef 06 	call 8000cabc <_dtoa_r>
8000bce2:	58 01       	ld.w %d15,[%sp]4
8000bce4:	80 2d       	mov.d %d13,%a2
8000bce6:	8b 7f 24 12 	ne %d1,%d15,71
8000bcea:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000bcee:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bcf2:	df 01 11 80 	jne %d1,0,8000bd14 <_svfprintf_r+0x518>
8000bcf6:	6f 0a 0f 80 	jnz.t %d10,0,8000bd14 <_svfprintf_r+0x518>
8000bcfa:	19 a2 14 10 	ld.w %d2,[%sp]84
8000bcfe:	58 01       	ld.w %d15,[%sp]4
8000bd00:	a2 d2       	sub %d2,%d13
8000bd02:	59 a2 14 00 	st.w [%sp]20,%d2
8000bd06:	8b 7f 04 42 	eq %d4,%d15,71
8000bd0a:	19 a5 04 10 	ld.w %d5,[%sp]68
8000bd0e:	df 04 36 80 	jne %d4,0,8000bd7a <_svfprintf_r+0x57e>
8000bd12:	3c 3e       	j 8000bd8e <_svfprintf_r+0x592>
8000bd14:	0b 9d 00 80 	add %d8,%d13,%d9
8000bd18:	df 02 1c 00 	jeq %d2,0,8000bd50 <_svfprintf_r+0x554>
8000bd1c:	60 d2       	mov.a %a2,%d13
8000bd1e:	80 f4       	mov.d %d4,%a15
8000bd20:	79 20 00 00 	ld.b %d0,[%a2]0
8000bd24:	d2 06       	mov %e6,0
8000bd26:	02 35       	mov %d5,%d3
8000bd28:	8b 00 03 f2 	eq %d15,%d0,48
8000bd2c:	59 a3 08 00 	st.w [%sp]8,%d3
8000bd30:	6d 00 68 13 	call 8000e400 <__nedf2>
8000bd34:	8b 02 20 22 	ne %d2,%d2,0
8000bd38:	0f 2f 80 00 	and %d0,%d15,%d2
8000bd3c:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bd40:	76 05       	jz %d0,8000bd4a <_svfprintf_r+0x54e>
8000bd42:	8b 19 00 01 	rsub %d0,%d9,1
8000bd46:	59 a0 04 10 	st.w [%sp]68,%d0
8000bd4a:	19 a2 04 10 	ld.w %d2,[%sp]68
8000bd4e:	42 28       	add %d8,%d2
8000bd50:	80 f4       	mov.d %d4,%a15
8000bd52:	d2 06       	mov %e6,0
8000bd54:	02 35       	mov %d5,%d3
8000bd56:	6d 00 35 13 	call 8000e3c0 <__eqdf2>
8000bd5a:	f6 23       	jnz %d2,8000bd60 <_svfprintf_r+0x564>
8000bd5c:	59 a8 14 10 	st.w [%sp]84,%d8
8000bd60:	3b 00 03 00 	mov %d0,48
8000bd64:	19 a3 14 10 	ld.w %d3,[%sp]84
8000bd68:	7f 83 c9 ff 	jge.u %d3,%d8,8000bcfa <_svfprintf_r+0x4fe>
8000bd6c:	1b 13 00 10 	addi %d1,%d3,1
8000bd70:	60 32       	mov.a %a2,%d3
8000bd72:	59 a1 14 10 	st.w [%sp]84,%d1
8000bd76:	34 20       	st.b [%a2],%d0
8000bd78:	3c f6       	j 8000bd64 <_svfprintf_r+0x568>
8000bd7a:	0b 5e 20 31 	lt %d3,%d14,%d5
8000bd7e:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000bd82:	df 03 88 00 	jeq %d3,0,8000be92 <_svfprintf_r+0x696>
8000bd86:	58 04       	ld.w %d15,[%sp]16
8000bd88:	c2 ef       	add %d15,-2
8000bd8a:	78 04       	st.w [%sp]16,%d15
8000bd8c:	3c 06       	j 8000bd98 <_svfprintf_r+0x59c>
8000bd8e:	58 04       	ld.w %d15,[%sp]16
8000bd90:	8b 6f 86 32 	ge %d3,%d15,102
8000bd94:	df 03 69 80 	jne %d3,0,8000be66 <_svfprintf_r+0x66a>
8000bd98:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bd9c:	9a f5       	add %d15,%d5,-1
8000bd9e:	78 11       	st.w [%sp]68,%d15
8000bda0:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000bda4:	3b b0 02 30 	mov %d3,43
8000bda8:	ce f4       	jgez %d15,8000bdb0 <_svfprintf_r+0x5b4>
8000bdaa:	32 5f       	rsub %d15
8000bdac:	3b d0 02 30 	mov %d3,45
8000bdb0:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000bdb4:	8b af 40 32 	lt %d3,%d15,10
8000bdb8:	df 03 3e 80 	jne %d3,0,8000be34 <_svfprintf_r+0x638>
8000bdbc:	82 06       	mov %d6,0
8000bdbe:	3b a0 00 00 	mov %d0,10
8000bdc2:	4b 0f 01 42 	div %e4,%d15,%d0
8000bdc6:	8b 66 00 71 	rsub %d7,%d6,6
8000bdca:	60 72       	mov.a %a2,%d7
8000bdcc:	d9 af 14 10 	lea %a15,[%sp]84
8000bdd0:	1b 05 03 30 	addi %d3,%d5,48
8000bdd4:	30 2f       	add.a %a15,%a2
8000bdd6:	28 03       	st.b [%a15]0,%d3
8000bdd8:	8b a4 80 32 	ge %d3,%d4,10
8000bddc:	02 4f       	mov %d15,%d4
8000bdde:	c2 16       	add %d6,1
8000bde0:	df 03 f1 ff 	jne %d3,0,8000bdc2 <_svfprintf_r+0x5c6>
8000bde4:	60 74       	mov.a %a4,%d7
8000bde6:	d9 a2 10 30 	lea %a2,[%sp]208
8000bdea:	1b 04 03 f0 	addi %d15,%d4,48
8000bdee:	30 42       	add.a %a2,%a4
8000bdf0:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000bdf4:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000bdf8:	80 22       	mov.d %d2,%a2
8000bdfa:	d9 af 1b 10 	lea %a15,[%sp]91
8000bdfe:	80 ff       	mov.d %d15,%a15
8000be00:	1b 32 f8 4f 	addi %d4,%d2,-125
8000be04:	82 03       	mov %d3,0
8000be06:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000be0a:	3f 4f 08 80 	jlt.u %d15,%d4,8000be1a <_svfprintf_r+0x61e>
8000be0e:	80 a2       	mov.d %d2,%sp
8000be10:	1b 02 0d 20 	addi %d2,%d2,208
8000be14:	8b 52 07 42 	eq %d4,%d2,117
8000be18:	76 46       	jz %d4,8000be24 <_svfprintf_r+0x628>
8000be1a:	a0 03       	mov.a %a3,0
8000be1c:	3c 04       	j 8000be24 <_svfprintf_r+0x628>
8000be1e:	0c 70       	ld.bu %d15,[%a7]0
8000be20:	b0 17       	add.a %a7,1
8000be22:	28 0f       	st.b [%a15]0,%d15
8000be24:	60 3f       	mov.a %a15,%d3
8000be26:	d9 a2 0d 10 	lea %a2,[%sp]77
8000be2a:	b0 2f       	add.a %a15,2
8000be2c:	30 2f       	add.a %a15,%a2
8000be2e:	c2 13       	add %d3,1
8000be30:	fc 37       	loop %a3,8000be1e <_svfprintf_r+0x622>
8000be32:	3c 0b       	j 8000be48 <_svfprintf_r+0x64c>
8000be34:	3b 00 03 30 	mov %d3,48
8000be38:	1b 0f 03 f0 	addi %d15,%d15,48
8000be3c:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000be40:	e9 af 10 10 	st.b [%sp]80,%d15
8000be44:	d9 af 11 10 	lea %a15,[%sp]81
8000be48:	d9 a7 0d 10 	lea %a7,[%sp]77
8000be4c:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000be50:	80 79       	mov.d %d9,%a7
8000be52:	58 05       	ld.w %d15,[%sp]20
8000be54:	b5 a7 38 00 	st.a [%sp]56,%a7
8000be58:	42 f9       	add %d9,%d15
8000be5a:	ff 2f 04 00 	jge %d15,2,8000be62 <_svfprintf_r+0x666>
8000be5e:	6f 0a 2c 00 	jz.t %d10,0,8000beb6 <_svfprintf_r+0x6ba>
8000be62:	c2 19       	add %d9,1
8000be64:	3c 29       	j 8000beb6 <_svfprintf_r+0x6ba>
8000be66:	58 04       	ld.w %d15,[%sp]16
8000be68:	8b 6f 26 42 	ne %d4,%d15,102
8000be6c:	df 04 15 80 	jne %d4,0,8000be96 <_svfprintf_r+0x69a>
8000be70:	02 59       	mov %d9,%d5
8000be72:	8e 59       	jlez %d5,8000be84 <_svfprintf_r+0x688>
8000be74:	f6 e3       	jnz %d14,8000be7a <_svfprintf_r+0x67e>
8000be76:	6f 0a 20 00 	jz.t %d10,0,8000beb6 <_svfprintf_r+0x6ba>
8000be7a:	1b 1e 00 30 	addi %d3,%d14,1
8000be7e:	0b 35 00 90 	add %d9,%d5,%d3
8000be82:	3c 1a       	j 8000beb6 <_svfprintf_r+0x6ba>
8000be84:	f6 e4       	jnz %d14,8000be8c <_svfprintf_r+0x690>
8000be86:	82 19       	mov %d9,1
8000be88:	6f 0a 17 00 	jz.t %d10,0,8000beb6 <_svfprintf_r+0x6ba>
8000be8c:	1b 2e 00 90 	addi %d9,%d14,2
8000be90:	3c 13       	j 8000beb6 <_svfprintf_r+0x6ba>
8000be92:	da 67       	mov %d15,103
8000be94:	78 04       	st.w [%sp]16,%d15
8000be96:	58 05       	ld.w %d15,[%sp]20
8000be98:	8f 1a 00 a1 	and %d10,%d10,1
8000be9c:	0b a5 00 90 	add %d9,%d5,%d10
8000bea0:	7f f5 0b 00 	jge %d5,%d15,8000beb6 <_svfprintf_r+0x6ba>
8000bea4:	8b 15 40 92 	lt %d9,%d5,1
8000bea8:	8b 25 00 31 	rsub %d3,%d5,2
8000beac:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000beb0:	19 a9 14 00 	ld.w %d9,[%sp]20
8000beb4:	42 39       	add %d9,%d3
8000beb6:	58 09       	ld.w %d15,[%sp]36
8000beb8:	82 0e       	mov %d14,0
8000beba:	df 0f 55 01 	jeq %d15,0,8000c164 <_svfprintf_r+0x968>
8000bebe:	3b d0 02 70 	mov %d7,45
8000bec2:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bec6:	1d 00 4f 01 	j 8000c164 <_svfprintf_r+0x968>
8000beca:	e9 af 01 10 	st.b [%sp]65,%d15
8000bece:	d9 f2 04 00 	lea %a2,[%a15]4
8000bed2:	6f 5a 09 00 	jz.t %d10,5,8000bee4 <_svfprintf_r+0x6e8>
8000bed6:	58 0a       	ld.w %d15,[%sp]40
8000bed8:	c8 03       	ld.a %a3,[%a15]0
8000beda:	0b f0 00 48 	mov %e4,%d15
8000bede:	89 34 40 09 	st.d [%a3],%e4
8000bee2:	3c 0c       	j 8000befa <_svfprintf_r+0x6fe>
8000bee4:	6f 4a 08 80 	jnz.t %d10,4,8000bef4 <_svfprintf_r+0x6f8>
8000bee8:	6f 6a 06 00 	jz.t %d10,6,8000bef4 <_svfprintf_r+0x6f8>
8000beec:	c8 03       	ld.a %a3,[%a15]0
8000beee:	58 0a       	ld.w %d15,[%sp]40
8000bef0:	ac 30       	st.h [%a3]0,%d15
8000bef2:	3c 04       	j 8000befa <_svfprintf_r+0x6fe>
8000bef4:	c8 03       	ld.a %a3,[%a15]0
8000bef6:	58 0a       	ld.w %d15,[%sp]40
8000bef8:	6c 30       	st.w [%a3]0,%d15
8000befa:	40 2f       	mov.aa %a15,%a2
8000befc:	1d ff b8 fc 	j 8000b86c <_svfprintf_r+0x70>
8000bf00:	8f 0a 41 a1 	or %d10,%d10,16
8000bf04:	6f 5a 07 00 	jz.t %d10,5,8000bf12 <_svfprintf_r+0x716>
8000bf08:	d9 fc 08 00 	lea %a12,[%a15]8
8000bf0c:	09 f8 40 09 	ld.d %e8,[%a15]
8000bf10:	3c 0c       	j 8000bf28 <_svfprintf_r+0x72c>
8000bf12:	d9 fc 04 00 	lea %a12,[%a15]4
8000bf16:	6f 4a 07 80 	jnz.t %d10,4,8000bf24 <_svfprintf_r+0x728>
8000bf1a:	6f 6a 05 00 	jz.t %d10,6,8000bf24 <_svfprintf_r+0x728>
8000bf1e:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bf22:	3c 02       	j 8000bf26 <_svfprintf_r+0x72a>
8000bf24:	48 08       	ld.w %d8,[%a15]0
8000bf26:	82 09       	mov %d9,0
8000bf28:	82 03       	mov %d3,0
8000bf2a:	3c 73       	j 8000c010 <_svfprintf_r+0x814>
8000bf2c:	3b 00 03 40 	mov %d4,48
8000bf30:	7b 00 00 f8 	movh %d15,32768
8000bf34:	1b 1f f2 f0 	addi %d15,%d15,3873
8000bf38:	e9 a4 02 10 	st.b [%sp]66,%d4
8000bf3c:	3b 80 07 40 	mov %d4,120
8000bf40:	78 0f       	st.w [%sp]60,%d15
8000bf42:	02 4f       	mov %d15,%d4
8000bf44:	d9 fc 04 00 	lea %a12,[%a15]4
8000bf48:	48 08       	ld.w %d8,[%a15]0
8000bf4a:	82 09       	mov %d9,0
8000bf4c:	8f 2a 40 a1 	or %d10,%d10,2
8000bf50:	e9 a4 03 10 	st.b [%sp]67,%d4
8000bf54:	82 23       	mov %d3,2
8000bf56:	78 04       	st.w [%sp]16,%d15
8000bf58:	3c 5c       	j 8000c010 <_svfprintf_r+0x814>
8000bf5a:	82 07       	mov %d7,0
8000bf5c:	48 0d       	ld.w %d13,[%a15]0
8000bf5e:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bf62:	02 e9       	mov %d9,%d14
8000bf64:	60 ad       	mov.a %a13,%d10
8000bf66:	d9 fc 04 00 	lea %a12,[%a15]4
8000bf6a:	60 d4       	mov.a %a4,%d13
8000bf6c:	0e ef       	jltz %d14,8000bf8a <_svfprintf_r+0x78e>
8000bf6e:	82 04       	mov %d4,0
8000bf70:	02 e5       	mov %d5,%d14
8000bf72:	6d 00 14 0c 	call 8000d79a <memchr>
8000bf76:	bd 02 f6 00 	jz.a %a2,8000c162 <_svfprintf_r+0x966>
8000bf7a:	60 d4       	mov.a %a4,%d13
8000bf7c:	01 42 20 30 	sub.a %a3,%a2,%a4
8000bf80:	80 32       	mov.d %d2,%a3
8000bf82:	0b e2 80 91 	min %d9,%d2,%d14
8000bf86:	1d 00 ee 00 	j 8000c162 <_svfprintf_r+0x966>
8000bf8a:	6d ff cb fa 	call 8000b520 <strlen>
8000bf8e:	02 29       	mov %d9,%d2
8000bf90:	1d 00 e9 00 	j 8000c162 <_svfprintf_r+0x966>
8000bf94:	8f 0a 41 a1 	or %d10,%d10,16
8000bf98:	6f 5a 07 00 	jz.t %d10,5,8000bfa6 <_svfprintf_r+0x7aa>
8000bf9c:	d9 fc 08 00 	lea %a12,[%a15]8
8000bfa0:	09 f8 40 09 	ld.d %e8,[%a15]
8000bfa4:	3c 0c       	j 8000bfbc <_svfprintf_r+0x7c0>
8000bfa6:	d9 fc 04 00 	lea %a12,[%a15]4
8000bfaa:	6f 4a 07 80 	jnz.t %d10,4,8000bfb8 <_svfprintf_r+0x7bc>
8000bfae:	6f 6a 05 00 	jz.t %d10,6,8000bfb8 <_svfprintf_r+0x7bc>
8000bfb2:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bfb6:	3c 02       	j 8000bfba <_svfprintf_r+0x7be>
8000bfb8:	48 08       	ld.w %d8,[%a15]0
8000bfba:	82 09       	mov %d9,0
8000bfbc:	82 13       	mov %d3,1
8000bfbe:	3c 29       	j 8000c010 <_svfprintf_r+0x814>
8000bfc0:	e9 af 01 10 	st.b [%sp]65,%d15
8000bfc4:	7b 00 00 f8 	movh %d15,32768
8000bfc8:	1b 1f f2 f0 	addi %d15,%d15,3873
8000bfcc:	78 0f       	st.w [%sp]60,%d15
8000bfce:	6f 5a 07 00 	jz.t %d10,5,8000bfdc <_svfprintf_r+0x7e0>
8000bfd2:	d9 fc 08 00 	lea %a12,[%a15]8
8000bfd6:	09 f8 40 09 	ld.d %e8,[%a15]
8000bfda:	3c 0c       	j 8000bff2 <_svfprintf_r+0x7f6>
8000bfdc:	d9 fc 04 00 	lea %a12,[%a15]4
8000bfe0:	6f 4a 07 80 	jnz.t %d10,4,8000bfee <_svfprintf_r+0x7f2>
8000bfe4:	6f 6a 05 00 	jz.t %d10,6,8000bfee <_svfprintf_r+0x7f2>
8000bfe8:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bfec:	3c 02       	j 8000bff0 <_svfprintf_r+0x7f4>
8000bfee:	48 08       	ld.w %d8,[%a15]0
8000bff0:	82 09       	mov %d9,0
8000bff2:	82 23       	mov %d3,2
8000bff4:	6f 0a 0e 00 	jz.t %d10,0,8000c010 <_svfprintf_r+0x814>
8000bff8:	0f 89 a0 40 	or %d4,%d9,%d8
8000bffc:	76 4a       	jz %d4,8000c010 <_svfprintf_r+0x814>
8000bffe:	58 04       	ld.w %d15,[%sp]16
8000c000:	3b 00 03 70 	mov %d7,48
8000c004:	e9 a7 02 10 	st.b [%sp]66,%d7
8000c008:	e9 af 03 10 	st.b [%sp]67,%d15
8000c00c:	8f 2a 40 a1 	or %d10,%d10,2
8000c010:	82 07       	mov %d7,0
8000c012:	60 ad       	mov.a %a13,%d10
8000c014:	e9 a7 01 10 	st.b [%sp]65,%d7
8000c018:	80 d2       	mov.d %d2,%a13
8000c01a:	8b 0e 80 72 	ge %d7,%d14,0
8000c01e:	8f 02 c8 41 	andn %d4,%d2,128
8000c022:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000c026:	0f 98 a0 60 	or %d6,%d8,%d9
8000c02a:	8b 0e 20 42 	ne %d4,%d14,0
8000c02e:	8b 06 00 45 	or.ne %d4,%d6,0
8000c032:	60 2d       	mov.a %a13,%d2
8000c034:	df 04 72 00 	jeq %d4,0,8000c118 <_svfprintf_r+0x91c>
8000c038:	df 13 06 00 	jeq %d3,1,8000c044 <_svfprintf_r+0x848>
8000c03c:	df 23 57 00 	jeq %d3,2,8000c0ea <_svfprintf_r+0x8ee>
8000c040:	82 03       	mov %d3,0
8000c042:	3c 03       	j 8000c048 <_svfprintf_r+0x84c>
8000c044:	82 04       	mov %d4,0
8000c046:	3c 22       	j 8000c08a <_svfprintf_r+0x88e>
8000c048:	8b 73 02 71 	rsub %d7,%d3,39
8000c04c:	60 72       	mov.a %a2,%d7
8000c04e:	8f 78 00 41 	and %d4,%d8,7
8000c052:	d9 a3 28 10 	lea %a3,[%sp]104
8000c056:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000c05a:	30 23       	add.a %a3,%a2
8000c05c:	1b 04 03 40 	addi %d4,%d4,48
8000c060:	06 d9       	sh %d9,-3
8000c062:	34 34       	st.b [%a3],%d4
8000c064:	0f 89 a0 60 	or %d6,%d9,%d8
8000c068:	c2 13       	add %d3,1
8000c06a:	df 06 ef ff 	jne %d6,0,8000c048 <_svfprintf_r+0x84c>
8000c06e:	80 d2       	mov.d %d2,%a13
8000c070:	80 3d       	mov.d %d13,%a3
8000c072:	6f 02 61 00 	jz.t %d2,0,8000c134 <_svfprintf_r+0x938>
8000c076:	8b 04 03 42 	eq %d4,%d4,48
8000c07a:	df 04 5d 80 	jne %d4,0,8000c134 <_svfprintf_r+0x938>
8000c07e:	3b 00 03 70 	mov %d7,48
8000c082:	c2 fd       	add %d13,-1
8000c084:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000c088:	3c 56       	j 8000c134 <_svfprintf_r+0x938>
8000c08a:	8b 84 02 71 	rsub %d7,%d4,40
8000c08e:	8b 09 00 32 	eq %d3,%d9,0
8000c092:	60 73       	mov.a %a3,%d7
8000c094:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000c098:	d9 a7 28 10 	lea %a7,[%sp]104
8000c09c:	8b 09 00 35 	or.ne %d3,%d9,0
8000c0a0:	30 37       	add.a %a7,%a3
8000c0a2:	1b 14 00 d0 	addi %d13,%d4,1
8000c0a6:	df 03 1b 00 	jeq %d3,0,8000c0dc <_svfprintf_r+0x8e0>
8000c0aa:	8b 74 02 41 	rsub %d4,%d4,39
8000c0ae:	60 42       	mov.a %a2,%d4
8000c0b0:	fb a0 00 60 	mov %e6,10
8000c0b4:	0b 89 10 48 	mov %e4,%d9,%d8
8000c0b8:	d9 af 28 10 	lea %a15,[%sp]104
8000c0bc:	30 2f       	add.a %a15,%a2
8000c0be:	6d 00 b1 12 	call 8000e620 <__umoddi3>
8000c0c2:	0b 89 10 48 	mov %e4,%d9,%d8
8000c0c6:	1b 02 03 20 	addi %d2,%d2,48
8000c0ca:	fb a0 00 60 	mov %e6,10
8000c0ce:	28 02       	st.b [%a15]0,%d2
8000c0d0:	6d 00 58 12 	call 8000e580 <__udivdi3>
8000c0d4:	02 d4       	mov %d4,%d13
8000c0d6:	0b 23 10 88 	mov %e8,%d3,%d2
8000c0da:	3c d8       	j 8000c08a <_svfprintf_r+0x88e>
8000c0dc:	80 7d       	mov.d %d13,%a7
8000c0de:	1b 08 03 80 	addi %d8,%d8,48
8000c0e2:	c2 fd       	add %d13,-1
8000c0e4:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000c0e8:	3c 26       	j 8000c134 <_svfprintf_r+0x938>
8000c0ea:	82 03       	mov %d3,0
8000c0ec:	d8 0f       	ld.a %a15,[%sp]60
8000c0ee:	80 ad       	mov.d %d13,%sp
8000c0f0:	8f f8 00 f1 	and %d15,%d8,15
8000c0f4:	8b 73 02 71 	rsub %d7,%d3,39
8000c0f8:	1b 8d 06 d0 	addi %d13,%d13,104
8000c0fc:	10 f7       	addsc.a %a7,%a15,%d15,0
8000c0fe:	42 7d       	add %d13,%d7
8000c100:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000c104:	0c 70       	ld.bu %d15,[%a7]0
8000c106:	60 d2       	mov.a %a2,%d13
8000c108:	06 c9       	sh %d9,-4
8000c10a:	2c 20       	st.b [%a2]0,%d15
8000c10c:	0f 89 a0 40 	or %d4,%d9,%d8
8000c110:	c2 13       	add %d3,1
8000c112:	df 04 ed ff 	jne %d4,0,8000c0ec <_svfprintf_r+0x8f0>
8000c116:	3c 0f       	j 8000c134 <_svfprintf_r+0x938>
8000c118:	80 a2       	mov.d %d2,%sp
8000c11a:	1b 02 09 d0 	addi %d13,%d2,144
8000c11e:	f6 3b       	jnz %d3,8000c134 <_svfprintf_r+0x938>
8000c120:	80 df       	mov.d %d15,%a13
8000c122:	2e 09       	jz.t %d15,0,8000c134 <_svfprintf_r+0x938>
8000c124:	1b 02 0d d0 	addi %d13,%d2,208
8000c128:	60 d2       	mov.a %a2,%d13
8000c12a:	3b 00 03 70 	mov %d7,48
8000c12e:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000c132:	80 2d       	mov.d %d13,%a2
8000c134:	d9 a3 10 20 	lea %a3,[%sp]144
8000c138:	80 39       	mov.d %d9,%a3
8000c13a:	a2 d9       	sub %d9,%d13
8000c13c:	3c 14       	j 8000c164 <_svfprintf_r+0x968>
8000c13e:	e9 af 01 10 	st.b [%sp]65,%d15
8000c142:	58 04       	ld.w %d15,[%sp]16
8000c144:	df 0f 1f 04 	jeq %d15,0,8000c982 <_svfprintf_r+0x1186>
8000c148:	82 03       	mov %d3,0
8000c14a:	60 ad       	mov.a %a13,%d10
8000c14c:	e9 af 28 10 	st.b [%sp]104,%d15
8000c150:	e9 a3 01 10 	st.b [%sp]65,%d3
8000c154:	40 fc       	mov.aa %a12,%a15
8000c156:	80 a2       	mov.d %d2,%sp
8000c158:	82 19       	mov %d9,1
8000c15a:	82 0e       	mov %d14,0
8000c15c:	1b 82 06 d0 	addi %d13,%d2,104
8000c160:	3c 02       	j 8000c164 <_svfprintf_r+0x968>
8000c162:	82 0e       	mov %d14,0
8000c164:	79 a7 01 10 	ld.b %d7,[%sp]65
8000c168:	80 df       	mov.d %d15,%a13
8000c16a:	0b e9 a0 a1 	max %d10,%d9,%d14
8000c16e:	80 d2       	mov.d %d2,%a13
8000c170:	16 02       	and %d15,2
8000c172:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000c176:	60 ff       	mov.a %a15,%d15
8000c178:	8a 2a       	cadd %d10,%d15,2
8000c17a:	8f 42 08 f1 	and %d15,%d2,132
8000c17e:	ee 48       	jnz %d15,8000c20e <_svfprintf_r+0xa12>
8000c180:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000c184:	a2 a8       	sub %d8,%d10
8000c186:	bf 18 44 00 	jlt %d8,1,8000c20e <_svfprintf_r+0xa12>
8000c18a:	91 00 00 28 	movh.a %a2,32768
8000c18e:	d9 22 c4 d0 	lea %a2,[%a2]3908 <80000f44 <blanks.4035>>
8000c192:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000f44 <blanks.4035>>
8000c196:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000f44 <blanks.4035>>
8000c19a:	8b 18 81 72 	ge %d7,%d8,17
8000c19e:	f4 e2       	st.a [%a14],%a2
8000c1a0:	df 07 20 00 	jeq %d7,0,8000c1e0 <_svfprintf_r+0x9e4>
8000c1a4:	1b 14 00 00 	addi %d0,%d4,1
8000c1a8:	3b 00 01 20 	mov %d2,16
8000c1ac:	1b 01 01 10 	addi %d1,%d1,16
8000c1b0:	59 e2 04 00 	st.w [%a14]4,%d2
8000c1b4:	59 a0 20 10 	st.w [%sp]96,%d0
8000c1b8:	59 a1 24 10 	st.w [%sp]100,%d1
8000c1bc:	8b 80 80 02 	ge %d0,%d0,8
8000c1c0:	d9 ee 08 00 	lea %a14,[%a14]8
8000c1c4:	76 0b       	jz %d0,8000c1da <_svfprintf_r+0x9de>
8000c1c6:	60 c4       	mov.a %a4,%d12
8000c1c8:	60 b5       	mov.a %a5,%d11
8000c1ca:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1ce:	6d 00 f4 0d 	call 8000ddb6 <__ssprint_r>
8000c1d2:	df 02 e0 83 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c1d6:	d9 ae 10 20 	lea %a14,[%sp]144
8000c1da:	1b 08 ff 8f 	addi %d8,%d8,-16
8000c1de:	3c d6       	j 8000c18a <_svfprintf_r+0x98e>
8000c1e0:	c2 14       	add %d4,1
8000c1e2:	42 81       	add %d1,%d8
8000c1e4:	59 e8 04 00 	st.w [%a14]4,%d8
8000c1e8:	59 a4 20 10 	st.w [%sp]96,%d4
8000c1ec:	59 a1 24 10 	st.w [%sp]100,%d1
8000c1f0:	8b 84 80 42 	ge %d4,%d4,8
8000c1f4:	d9 ee 08 00 	lea %a14,[%a14]8
8000c1f8:	76 4b       	jz %d4,8000c20e <_svfprintf_r+0xa12>
8000c1fa:	60 c4       	mov.a %a4,%d12
8000c1fc:	60 b5       	mov.a %a5,%d11
8000c1fe:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c202:	6d 00 da 0d 	call 8000ddb6 <__ssprint_r>
8000c206:	df 02 c6 83 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c20a:	d9 ae 10 20 	lea %a14,[%sp]144
8000c20e:	79 a4 01 10 	ld.b %d4,[%sp]65
8000c212:	df 04 21 00 	jeq %d4,0,8000c254 <_svfprintf_r+0xa58>
8000c216:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c21a:	d9 a7 01 10 	lea %a7,[%sp]65
8000c21e:	c2 14       	add %d4,1
8000c220:	59 a4 24 10 	st.w [%sp]100,%d4
8000c224:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c228:	82 17       	mov %d7,1
8000c22a:	c2 14       	add %d4,1
8000c22c:	f4 e7       	st.a [%a14],%a7
8000c22e:	59 e7 04 00 	st.w [%a14]4,%d7
8000c232:	59 a4 20 10 	st.w [%sp]96,%d4
8000c236:	8b 84 80 42 	ge %d4,%d4,8
8000c23a:	d9 ee 08 00 	lea %a14,[%a14]8
8000c23e:	76 4b       	jz %d4,8000c254 <_svfprintf_r+0xa58>
8000c240:	60 c4       	mov.a %a4,%d12
8000c242:	60 b5       	mov.a %a5,%d11
8000c244:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c248:	6d 00 b7 0d 	call 8000ddb6 <__ssprint_r>
8000c24c:	df 02 a3 83 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c250:	d9 ae 10 20 	lea %a14,[%sp]144
8000c254:	bd 0f 21 00 	jz.a %a15,8000c296 <_svfprintf_r+0xa9a>
8000c258:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c25c:	d9 a7 02 10 	lea %a7,[%sp]66
8000c260:	c2 24       	add %d4,2
8000c262:	59 a4 24 10 	st.w [%sp]100,%d4
8000c266:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c26a:	82 27       	mov %d7,2
8000c26c:	c2 14       	add %d4,1
8000c26e:	f4 e7       	st.a [%a14],%a7
8000c270:	59 e7 04 00 	st.w [%a14]4,%d7
8000c274:	59 a4 20 10 	st.w [%sp]96,%d4
8000c278:	8b 84 80 42 	ge %d4,%d4,8
8000c27c:	d9 ee 08 00 	lea %a14,[%a14]8
8000c280:	76 4b       	jz %d4,8000c296 <_svfprintf_r+0xa9a>
8000c282:	60 c4       	mov.a %a4,%d12
8000c284:	60 b5       	mov.a %a5,%d11
8000c286:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c28a:	6d 00 96 0d 	call 8000ddb6 <__ssprint_r>
8000c28e:	df 02 82 83 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c292:	d9 ae 10 20 	lea %a14,[%sp]144
8000c296:	8b 0f 28 42 	ne %d4,%d15,128
8000c29a:	df 04 48 80 	jne %d4,0,8000c32a <_svfprintf_r+0xb2e>
8000c29e:	58 07       	ld.w %d15,[%sp]28
8000c2a0:	7b 00 00 28 	movh %d2,32768
8000c2a4:	60 23       	mov.a %a3,%d2
8000c2a6:	a2 af       	sub %d15,%d10
8000c2a8:	d9 3f f4 c0 	lea %a15,[%a3]3892
8000c2ac:	bf 1f 3f 00 	jlt %d15,1,8000c32a <_svfprintf_r+0xb2e>
8000c2b0:	19 a7 24 10 	ld.w %d7,[%sp]100
8000c2b4:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c2b8:	8b 1f 81 82 	ge %d8,%d15,17
8000c2bc:	ec e0       	st.a [%a14]0,%a15
8000c2be:	df 08 20 00 	jeq %d8,0,8000c2fe <_svfprintf_r+0xb02>
8000c2c2:	1b 14 00 00 	addi %d0,%d4,1
8000c2c6:	3b 00 01 20 	mov %d2,16
8000c2ca:	1b 07 01 10 	addi %d1,%d7,16
8000c2ce:	59 e2 04 00 	st.w [%a14]4,%d2
8000c2d2:	59 a0 20 10 	st.w [%sp]96,%d0
8000c2d6:	59 a1 24 10 	st.w [%sp]100,%d1
8000c2da:	8b 80 80 02 	ge %d0,%d0,8
8000c2de:	d9 ee 08 00 	lea %a14,[%a14]8
8000c2e2:	76 0b       	jz %d0,8000c2f8 <_svfprintf_r+0xafc>
8000c2e4:	60 c4       	mov.a %a4,%d12
8000c2e6:	60 b5       	mov.a %a5,%d11
8000c2e8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2ec:	6d 00 65 0d 	call 8000ddb6 <__ssprint_r>
8000c2f0:	df 02 51 83 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c2f4:	d9 ae 10 20 	lea %a14,[%sp]144
8000c2f8:	1b 0f ff ff 	addi %d15,%d15,-16
8000c2fc:	3c da       	j 8000c2b0 <_svfprintf_r+0xab4>
8000c2fe:	c2 14       	add %d4,1
8000c300:	42 f7       	add %d7,%d15
8000c302:	6c e1       	st.w [%a14]4,%d15
8000c304:	59 a4 20 10 	st.w [%sp]96,%d4
8000c308:	59 a7 24 10 	st.w [%sp]100,%d7
8000c30c:	8b 84 80 42 	ge %d4,%d4,8
8000c310:	d9 ee 08 00 	lea %a14,[%a14]8
8000c314:	76 4b       	jz %d4,8000c32a <_svfprintf_r+0xb2e>
8000c316:	60 c4       	mov.a %a4,%d12
8000c318:	60 b5       	mov.a %a5,%d11
8000c31a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c31e:	6d 00 4c 0d 	call 8000ddb6 <__ssprint_r>
8000c322:	df 02 38 83 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c326:	d9 ae 10 20 	lea %a14,[%sp]144
8000c32a:	7b 00 00 88 	movh %d8,32768
8000c32e:	a2 9e       	sub %d14,%d9
8000c330:	1b 48 f3 80 	addi %d8,%d8,3892
8000c334:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000c338:	bf 1e 3c 00 	jlt %d14,1,8000c3b0 <_svfprintf_r+0xbb4>
8000c33c:	19 a6 24 10 	ld.w %d6,[%sp]100
8000c340:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c344:	8b 1e 81 02 	ge %d0,%d14,17
8000c348:	74 e8       	st.w [%a14],%d8
8000c34a:	df 00 1c 00 	jeq %d0,0,8000c382 <_svfprintf_r+0xb86>
8000c34e:	c2 14       	add %d4,1
8000c350:	1b 06 01 00 	addi %d0,%d6,16
8000c354:	ec e1       	st.a [%a14]4,%a15
8000c356:	59 a4 20 10 	st.w [%sp]96,%d4
8000c35a:	59 a0 24 10 	st.w [%sp]100,%d0
8000c35e:	8b 84 80 42 	ge %d4,%d4,8
8000c362:	d9 ee 08 00 	lea %a14,[%a14]8
8000c366:	76 4b       	jz %d4,8000c37c <_svfprintf_r+0xb80>
8000c368:	60 c4       	mov.a %a4,%d12
8000c36a:	60 b5       	mov.a %a5,%d11
8000c36c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c370:	6d 00 23 0d 	call 8000ddb6 <__ssprint_r>
8000c374:	df 02 0f 83 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c378:	d9 ae 10 20 	lea %a14,[%sp]144
8000c37c:	1b 0e ff ef 	addi %d14,%d14,-16
8000c380:	3c de       	j 8000c33c <_svfprintf_r+0xb40>
8000c382:	c2 14       	add %d4,1
8000c384:	42 e6       	add %d6,%d14
8000c386:	59 ee 04 00 	st.w [%a14]4,%d14
8000c38a:	59 a4 20 10 	st.w [%sp]96,%d4
8000c38e:	59 a6 24 10 	st.w [%sp]100,%d6
8000c392:	8b 84 80 42 	ge %d4,%d4,8
8000c396:	d9 ee 08 00 	lea %a14,[%a14]8
8000c39a:	76 4b       	jz %d4,8000c3b0 <_svfprintf_r+0xbb4>
8000c39c:	60 c4       	mov.a %a4,%d12
8000c39e:	60 b5       	mov.a %a5,%d11
8000c3a0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3a4:	6d 00 09 0d 	call 8000ddb6 <__ssprint_r>
8000c3a8:	df 02 f5 82 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c3ac:	d9 ae 10 20 	lea %a14,[%sp]144
8000c3b0:	80 df       	mov.d %d15,%a13
8000c3b2:	19 ae 24 10 	ld.w %d14,[%sp]100
8000c3b6:	19 a8 20 10 	ld.w %d8,[%sp]96
8000c3ba:	6f 8f 1d 80 	jnz.t %d15,8,8000c3f4 <_svfprintf_r+0xbf8>
8000c3be:	c2 18       	add %d8,1
8000c3c0:	59 e9 04 00 	st.w [%a14]4,%d9
8000c3c4:	42 e9       	add %d9,%d14
8000c3c6:	59 a8 20 10 	st.w [%sp]96,%d8
8000c3ca:	74 ed       	st.w [%a14],%d13
8000c3cc:	59 a9 24 10 	st.w [%sp]100,%d9
8000c3d0:	8b 88 80 82 	ge %d8,%d8,8
8000c3d4:	d9 ef 08 00 	lea %a15,[%a14]8
8000c3d8:	df 08 79 02 	jeq %d8,0,8000c8ca <_svfprintf_r+0x10ce>
8000c3dc:	60 c4       	mov.a %a4,%d12
8000c3de:	60 b5       	mov.a %a5,%d11
8000c3e0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3e4:	6d 00 e9 0c 	call 8000ddb6 <__ssprint_r>
8000c3e8:	df 02 d5 82 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c3ec:	d9 af 10 20 	lea %a15,[%sp]144
8000c3f0:	1d 00 6d 02 	j 8000c8ca <_svfprintf_r+0x10ce>
8000c3f4:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c3f8:	8b 62 46 f2 	lt %d15,%d2,102
8000c3fc:	df 0f be 81 	jne %d15,0,8000c778 <_svfprintf_r+0xf7c>
8000c400:	d2 06       	mov %e6,0
8000c402:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c406:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c40a:	6d 00 db 0f 	call 8000e3c0 <__eqdf2>
8000c40e:	df 02 78 80 	jne %d2,0,8000c4fe <_svfprintf_r+0xd02>
8000c412:	7b 00 00 38 	movh %d3,32768
8000c416:	1b 23 f3 30 	addi %d3,%d3,3890
8000c41a:	c2 18       	add %d8,1
8000c41c:	74 e3       	st.w [%a14],%d3
8000c41e:	1b 1e 00 90 	addi %d9,%d14,1
8000c422:	82 13       	mov %d3,1
8000c424:	59 a8 20 10 	st.w [%sp]96,%d8
8000c428:	59 e3 04 00 	st.w [%a14]4,%d3
8000c42c:	59 a9 24 10 	st.w [%sp]100,%d9
8000c430:	8b 88 80 82 	ge %d8,%d8,8
8000c434:	d9 ef 08 00 	lea %a15,[%a14]8
8000c438:	76 8b       	jz %d8,8000c44e <_svfprintf_r+0xc52>
8000c43a:	60 c4       	mov.a %a4,%d12
8000c43c:	60 b5       	mov.a %a5,%d11
8000c43e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c442:	6d 00 ba 0c 	call 8000ddb6 <__ssprint_r>
8000c446:	df 02 a6 82 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c44a:	d9 af 10 20 	lea %a15,[%sp]144
8000c44e:	58 11       	ld.w %d15,[%sp]68
8000c450:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c454:	3f 2f 05 00 	jlt %d15,%d2,8000c45e <_svfprintf_r+0xc62>
8000c458:	80 df       	mov.d %d15,%a13
8000c45a:	6f 0f 38 02 	jz.t %d15,0,8000c8ca <_svfprintf_r+0x10ce>
8000c45e:	58 08       	ld.w %d15,[%sp]32
8000c460:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c464:	68 1f       	st.w [%a15]4,%d15
8000c466:	58 19       	ld.w %d15,[%sp]100
8000c468:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c46c:	42 2f       	add %d15,%d2
8000c46e:	78 19       	st.w [%sp]100,%d15
8000c470:	58 18       	ld.w %d15,[%sp]96
8000c472:	e8 03       	st.a [%a15]0,%a3
8000c474:	c2 1f       	add %d15,1
8000c476:	78 18       	st.w [%sp]96,%d15
8000c478:	8b 8f 80 f2 	ge %d15,%d15,8
8000c47c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c480:	6e 0b       	jz %d15,8000c496 <_svfprintf_r+0xc9a>
8000c482:	60 c4       	mov.a %a4,%d12
8000c484:	60 b5       	mov.a %a5,%d11
8000c486:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c48a:	6d 00 96 0c 	call 8000ddb6 <__ssprint_r>
8000c48e:	df 02 82 82 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c492:	d9 af 10 20 	lea %a15,[%sp]144
8000c496:	58 05       	ld.w %d15,[%sp]20
8000c498:	7b 00 00 88 	movh %d8,32768
8000c49c:	c2 ff       	add %d15,-1
8000c49e:	1b 48 f3 80 	addi %d8,%d8,3892
8000c4a2:	3b 00 01 90 	mov %d9,16
8000c4a6:	bf 1f 12 02 	jlt %d15,1,8000c8ca <_svfprintf_r+0x10ce>
8000c4aa:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c4ae:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c4b2:	8b 1f 81 42 	ge %d4,%d15,17
8000c4b6:	68 08       	st.w [%a15]0,%d8
8000c4b8:	df 04 1c 00 	jeq %d4,0,8000c4f0 <_svfprintf_r+0xcf4>
8000c4bc:	c2 13       	add %d3,1
8000c4be:	1b 05 01 40 	addi %d4,%d5,16
8000c4c2:	68 19       	st.w [%a15]4,%d9
8000c4c4:	59 a3 20 10 	st.w [%sp]96,%d3
8000c4c8:	59 a4 24 10 	st.w [%sp]100,%d4
8000c4cc:	8b 83 80 32 	ge %d3,%d3,8
8000c4d0:	d9 ff 08 00 	lea %a15,[%a15]8
8000c4d4:	76 3b       	jz %d3,8000c4ea <_svfprintf_r+0xcee>
8000c4d6:	60 c4       	mov.a %a4,%d12
8000c4d8:	60 b5       	mov.a %a5,%d11
8000c4da:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c4de:	6d 00 6c 0c 	call 8000ddb6 <__ssprint_r>
8000c4e2:	df 02 58 82 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c4e6:	d9 af 10 20 	lea %a15,[%sp]144
8000c4ea:	1b 0f ff ff 	addi %d15,%d15,-16
8000c4ee:	3c de       	j 8000c4aa <_svfprintf_r+0xcae>
8000c4f0:	12 54       	add %d4,%d15,%d5
8000c4f2:	68 1f       	st.w [%a15]4,%d15
8000c4f4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c4f8:	9a 13       	add %d15,%d3,1
8000c4fa:	1d 00 e1 01 	j 8000c8bc <_svfprintf_r+0x10c0>
8000c4fe:	19 a3 04 10 	ld.w %d3,[%sp]68
8000c502:	ff 13 8e 00 	jge %d3,1,8000c61e <_svfprintf_r+0xe22>
8000c506:	7b 00 00 38 	movh %d3,32768
8000c50a:	1b 23 f3 30 	addi %d3,%d3,3890
8000c50e:	c2 18       	add %d8,1
8000c510:	74 e3       	st.w [%a14],%d3
8000c512:	1b 1e 00 90 	addi %d9,%d14,1
8000c516:	82 13       	mov %d3,1
8000c518:	59 a8 20 10 	st.w [%sp]96,%d8
8000c51c:	59 e3 04 00 	st.w [%a14]4,%d3
8000c520:	59 a9 24 10 	st.w [%sp]100,%d9
8000c524:	8b 88 80 82 	ge %d8,%d8,8
8000c528:	d9 ef 08 00 	lea %a15,[%a14]8
8000c52c:	76 8b       	jz %d8,8000c542 <_svfprintf_r+0xd46>
8000c52e:	60 c4       	mov.a %a4,%d12
8000c530:	60 b5       	mov.a %a5,%d11
8000c532:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c536:	6d 00 40 0c 	call 8000ddb6 <__ssprint_r>
8000c53a:	df 02 2c 82 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c53e:	d9 af 10 20 	lea %a15,[%sp]144
8000c542:	58 11       	ld.w %d15,[%sp]68
8000c544:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c548:	a6 2f       	or %d15,%d2
8000c54a:	ee 04       	jnz %d15,8000c552 <_svfprintf_r+0xd56>
8000c54c:	80 df       	mov.d %d15,%a13
8000c54e:	6f 0f be 01 	jz.t %d15,0,8000c8ca <_svfprintf_r+0x10ce>
8000c552:	58 08       	ld.w %d15,[%sp]32
8000c554:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c558:	68 1f       	st.w [%a15]4,%d15
8000c55a:	58 19       	ld.w %d15,[%sp]100
8000c55c:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c560:	42 2f       	add %d15,%d2
8000c562:	78 19       	st.w [%sp]100,%d15
8000c564:	58 18       	ld.w %d15,[%sp]96
8000c566:	e8 03       	st.a [%a15]0,%a3
8000c568:	c2 1f       	add %d15,1
8000c56a:	78 18       	st.w [%sp]96,%d15
8000c56c:	8b 8f 80 f2 	ge %d15,%d15,8
8000c570:	d9 ff 08 00 	lea %a15,[%a15]8
8000c574:	6e 0b       	jz %d15,8000c58a <_svfprintf_r+0xd8e>
8000c576:	60 c4       	mov.a %a4,%d12
8000c578:	60 b5       	mov.a %a5,%d11
8000c57a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c57e:	6d 00 1c 0c 	call 8000ddb6 <__ssprint_r>
8000c582:	df 02 08 82 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c586:	d9 af 10 20 	lea %a15,[%sp]144
8000c58a:	58 11       	ld.w %d15,[%sp]68
8000c58c:	7b 00 00 88 	movh %d8,32768
8000c590:	32 5f       	rsub %d15
8000c592:	1b 48 f3 80 	addi %d8,%d8,3892
8000c596:	3b 00 01 90 	mov %d9,16
8000c59a:	bf 1f 3a 00 	jlt %d15,1,8000c60e <_svfprintf_r+0xe12>
8000c59e:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c5a2:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c5a6:	8b 1f 81 42 	ge %d4,%d15,17
8000c5aa:	68 08       	st.w [%a15]0,%d8
8000c5ac:	df 04 1c 00 	jeq %d4,0,8000c5e4 <_svfprintf_r+0xde8>
8000c5b0:	c2 13       	add %d3,1
8000c5b2:	1b 05 01 40 	addi %d4,%d5,16
8000c5b6:	68 19       	st.w [%a15]4,%d9
8000c5b8:	59 a3 20 10 	st.w [%sp]96,%d3
8000c5bc:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5c0:	8b 83 80 32 	ge %d3,%d3,8
8000c5c4:	d9 ff 08 00 	lea %a15,[%a15]8
8000c5c8:	76 3b       	jz %d3,8000c5de <_svfprintf_r+0xde2>
8000c5ca:	60 c4       	mov.a %a4,%d12
8000c5cc:	60 b5       	mov.a %a5,%d11
8000c5ce:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c5d2:	6d 00 f2 0b 	call 8000ddb6 <__ssprint_r>
8000c5d6:	df 02 de 81 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c5da:	d9 af 10 20 	lea %a15,[%sp]144
8000c5de:	1b 0f ff ff 	addi %d15,%d15,-16
8000c5e2:	3c de       	j 8000c59e <_svfprintf_r+0xda2>
8000c5e4:	68 1f       	st.w [%a15]4,%d15
8000c5e6:	12 54       	add %d4,%d15,%d5
8000c5e8:	9a 13       	add %d15,%d3,1
8000c5ea:	78 18       	st.w [%sp]96,%d15
8000c5ec:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5f0:	8b 8f 80 f2 	ge %d15,%d15,8
8000c5f4:	d9 ff 08 00 	lea %a15,[%a15]8
8000c5f8:	6e 0b       	jz %d15,8000c60e <_svfprintf_r+0xe12>
8000c5fa:	60 c4       	mov.a %a4,%d12
8000c5fc:	60 b5       	mov.a %a5,%d11
8000c5fe:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c602:	6d 00 da 0b 	call 8000ddb6 <__ssprint_r>
8000c606:	df 02 c6 81 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c60a:	d9 af 10 20 	lea %a15,[%sp]144
8000c60e:	58 05       	ld.w %d15,[%sp]20
8000c610:	68 0d       	st.w [%a15]0,%d13
8000c612:	68 1f       	st.w [%a15]4,%d15
8000c614:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c618:	58 19       	ld.w %d15,[%sp]100
8000c61a:	1d 00 4d 01 	j 8000c8b4 <_svfprintf_r+0x10b8>
8000c61e:	58 05       	ld.w %d15,[%sp]20
8000c620:	74 ed       	st.w [%a14],%d13
8000c622:	3f f3 6a 00 	jlt %d3,%d15,8000c6f6 <_svfprintf_r+0xefa>
8000c626:	02 f9       	mov %d9,%d15
8000c628:	c2 18       	add %d8,1
8000c62a:	42 e9       	add %d9,%d14
8000c62c:	59 a8 20 10 	st.w [%sp]96,%d8
8000c630:	6c e1       	st.w [%a14]4,%d15
8000c632:	59 a9 24 10 	st.w [%sp]100,%d9
8000c636:	8b 88 80 82 	ge %d8,%d8,8
8000c63a:	d9 ef 08 00 	lea %a15,[%a14]8
8000c63e:	76 8b       	jz %d8,8000c654 <_svfprintf_r+0xe58>
8000c640:	60 c4       	mov.a %a4,%d12
8000c642:	60 b5       	mov.a %a5,%d11
8000c644:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c648:	6d 00 b7 0b 	call 8000ddb6 <__ssprint_r>
8000c64c:	df 02 a3 81 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c650:	d9 af 10 20 	lea %a15,[%sp]144
8000c654:	58 11       	ld.w %d15,[%sp]68
8000c656:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c65a:	7b 00 00 88 	movh %d8,32768
8000c65e:	a2 2f       	sub %d15,%d2
8000c660:	1b 48 f3 80 	addi %d8,%d8,3892
8000c664:	3b 00 01 90 	mov %d9,16
8000c668:	bf 1f 3a 00 	jlt %d15,1,8000c6dc <_svfprintf_r+0xee0>
8000c66c:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c670:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c674:	8b 1f 81 42 	ge %d4,%d15,17
8000c678:	68 08       	st.w [%a15]0,%d8
8000c67a:	df 04 1c 00 	jeq %d4,0,8000c6b2 <_svfprintf_r+0xeb6>
8000c67e:	c2 13       	add %d3,1
8000c680:	1b 05 01 40 	addi %d4,%d5,16
8000c684:	68 19       	st.w [%a15]4,%d9
8000c686:	59 a3 20 10 	st.w [%sp]96,%d3
8000c68a:	59 a4 24 10 	st.w [%sp]100,%d4
8000c68e:	8b 83 80 32 	ge %d3,%d3,8
8000c692:	d9 ff 08 00 	lea %a15,[%a15]8
8000c696:	76 3b       	jz %d3,8000c6ac <_svfprintf_r+0xeb0>
8000c698:	60 c4       	mov.a %a4,%d12
8000c69a:	60 b5       	mov.a %a5,%d11
8000c69c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6a0:	6d 00 8b 0b 	call 8000ddb6 <__ssprint_r>
8000c6a4:	df 02 77 81 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c6a8:	d9 af 10 20 	lea %a15,[%sp]144
8000c6ac:	1b 0f ff ff 	addi %d15,%d15,-16
8000c6b0:	3c de       	j 8000c66c <_svfprintf_r+0xe70>
8000c6b2:	68 1f       	st.w [%a15]4,%d15
8000c6b4:	12 54       	add %d4,%d15,%d5
8000c6b6:	9a 13       	add %d15,%d3,1
8000c6b8:	78 18       	st.w [%sp]96,%d15
8000c6ba:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6be:	8b 8f 80 f2 	ge %d15,%d15,8
8000c6c2:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6c6:	6e 0b       	jz %d15,8000c6dc <_svfprintf_r+0xee0>
8000c6c8:	60 c4       	mov.a %a4,%d12
8000c6ca:	60 b5       	mov.a %a5,%d11
8000c6cc:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6d0:	6d 00 73 0b 	call 8000ddb6 <__ssprint_r>
8000c6d4:	df 02 5f 81 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c6d8:	d9 af 10 20 	lea %a15,[%sp]144
8000c6dc:	80 df       	mov.d %d15,%a13
8000c6de:	6f 0f f6 00 	jz.t %d15,0,8000c8ca <_svfprintf_r+0x10ce>
8000c6e2:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c6e6:	58 08       	ld.w %d15,[%sp]32
8000c6e8:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c6ec:	68 1f       	st.w [%a15]4,%d15
8000c6ee:	e8 03       	st.a [%a15]0,%a3
8000c6f0:	58 19       	ld.w %d15,[%sp]100
8000c6f2:	1d 00 e1 00 	j 8000c8b4 <_svfprintf_r+0x10b8>
8000c6f6:	c2 18       	add %d8,1
8000c6f8:	59 e3 04 00 	st.w [%a14]4,%d3
8000c6fc:	42 e3       	add %d3,%d14
8000c6fe:	59 a8 20 10 	st.w [%sp]96,%d8
8000c702:	59 a3 24 10 	st.w [%sp]100,%d3
8000c706:	8b 88 80 82 	ge %d8,%d8,8
8000c70a:	d9 ef 08 00 	lea %a15,[%a14]8
8000c70e:	76 8b       	jz %d8,8000c724 <_svfprintf_r+0xf28>
8000c710:	60 c4       	mov.a %a4,%d12
8000c712:	60 b5       	mov.a %a5,%d11
8000c714:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c718:	6d 00 4f 0b 	call 8000ddb6 <__ssprint_r>
8000c71c:	df 02 3b 81 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c720:	d9 af 10 20 	lea %a15,[%sp]144
8000c724:	58 08       	ld.w %d15,[%sp]32
8000c726:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c72a:	68 1f       	st.w [%a15]4,%d15
8000c72c:	58 19       	ld.w %d15,[%sp]100
8000c72e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c732:	42 2f       	add %d15,%d2
8000c734:	78 19       	st.w [%sp]100,%d15
8000c736:	58 18       	ld.w %d15,[%sp]96
8000c738:	99 ae 04 10 	ld.a %a14,[%sp]68
8000c73c:	c2 1f       	add %d15,1
8000c73e:	60 d2       	mov.a %a2,%d13
8000c740:	e8 03       	st.a [%a15]0,%a3
8000c742:	78 18       	st.w [%sp]96,%d15
8000c744:	8b 8f 80 f2 	ge %d15,%d15,8
8000c748:	30 2e       	add.a %a14,%a2
8000c74a:	d9 ff 08 00 	lea %a15,[%a15]8
8000c74e:	6e 0b       	jz %d15,8000c764 <_svfprintf_r+0xf68>
8000c750:	60 c4       	mov.a %a4,%d12
8000c752:	60 b5       	mov.a %a5,%d11
8000c754:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c758:	6d 00 2f 0b 	call 8000ddb6 <__ssprint_r>
8000c75c:	df 02 1b 81 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c760:	d9 af 10 20 	lea %a15,[%sp]144
8000c764:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c768:	58 11       	ld.w %d15,[%sp]68
8000c76a:	e8 0e       	st.a [%a15]0,%a14
8000c76c:	5a f2       	sub %d15,%d2,%d15
8000c76e:	68 1f       	st.w [%a15]4,%d15
8000c770:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c774:	1d 00 a0 00 	j 8000c8b4 <_svfprintf_r+0x10b8>
8000c778:	c2 18       	add %d8,1
8000c77a:	82 13       	mov %d3,1
8000c77c:	1b 1e 00 90 	addi %d9,%d14,1
8000c780:	58 05       	ld.w %d15,[%sp]20
8000c782:	59 a8 20 10 	st.w [%sp]96,%d8
8000c786:	74 ed       	st.w [%a14],%d13
8000c788:	59 e3 04 00 	st.w [%a14]4,%d3
8000c78c:	59 a9 24 10 	st.w [%sp]100,%d9
8000c790:	8b 88 80 82 	ge %d8,%d8,8
8000c794:	ff 2f 05 00 	jge %d15,2,8000c79e <_svfprintf_r+0xfa2>
8000c798:	80 d2       	mov.d %d2,%a13
8000c79a:	6f 02 81 00 	jz.t %d2,0,8000c89c <_svfprintf_r+0x10a0>
8000c79e:	d9 ef 08 00 	lea %a15,[%a14]8
8000c7a2:	76 8b       	jz %d8,8000c7b8 <_svfprintf_r+0xfbc>
8000c7a4:	60 c4       	mov.a %a4,%d12
8000c7a6:	60 b5       	mov.a %a5,%d11
8000c7a8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7ac:	6d 00 05 0b 	call 8000ddb6 <__ssprint_r>
8000c7b0:	df 02 f1 80 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c7b4:	d9 af 10 20 	lea %a15,[%sp]144
8000c7b8:	58 08       	ld.w %d15,[%sp]32
8000c7ba:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c7be:	68 1f       	st.w [%a15]4,%d15
8000c7c0:	58 19       	ld.w %d15,[%sp]100
8000c7c2:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c7c6:	42 2f       	add %d15,%d2
8000c7c8:	78 19       	st.w [%sp]100,%d15
8000c7ca:	58 18       	ld.w %d15,[%sp]96
8000c7cc:	e8 03       	st.a [%a15]0,%a3
8000c7ce:	c2 1f       	add %d15,1
8000c7d0:	78 18       	st.w [%sp]96,%d15
8000c7d2:	8b 8f 80 f2 	ge %d15,%d15,8
8000c7d6:	d9 ff 08 00 	lea %a15,[%a15]8
8000c7da:	6e 0b       	jz %d15,8000c7f0 <_svfprintf_r+0xff4>
8000c7dc:	60 c4       	mov.a %a4,%d12
8000c7de:	60 b5       	mov.a %a5,%d11
8000c7e0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7e4:	6d 00 e9 0a 	call 8000ddb6 <__ssprint_r>
8000c7e8:	df 02 d5 80 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c7ec:	d9 af 10 20 	lea %a15,[%sp]144
8000c7f0:	d2 06       	mov %e6,0
8000c7f2:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c7f6:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c7fa:	6d 00 03 0e 	call 8000e400 <__nedf2>
8000c7fe:	58 05       	ld.w %d15,[%sp]20
8000c800:	c2 ff       	add %d15,-1
8000c802:	76 2c       	jz %d2,8000c81a <_svfprintf_r+0x101e>
8000c804:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c808:	60 de       	mov.a %a14,%d13
8000c80a:	68 1f       	st.w [%a15]4,%d15
8000c80c:	42 2f       	add %d15,%d2
8000c80e:	78 19       	st.w [%sp]100,%d15
8000c810:	58 18       	ld.w %d15,[%sp]96
8000c812:	b0 1e       	add.a %a14,1
8000c814:	e8 0e       	st.a [%a15]0,%a14
8000c816:	c2 1f       	add %d15,1
8000c818:	3c 31       	j 8000c87a <_svfprintf_r+0x107e>
8000c81a:	7b 00 00 88 	movh %d8,32768
8000c81e:	1b 48 f3 80 	addi %d8,%d8,3892
8000c822:	3b 00 01 90 	mov %d9,16
8000c826:	bf 1f 3f 00 	jlt %d15,1,8000c8a4 <_svfprintf_r+0x10a8>
8000c82a:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c82e:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c832:	8b 1f 81 42 	ge %d4,%d15,17
8000c836:	68 08       	st.w [%a15]0,%d8
8000c838:	df 04 1c 00 	jeq %d4,0,8000c870 <_svfprintf_r+0x1074>
8000c83c:	c2 13       	add %d3,1
8000c83e:	1b 05 01 40 	addi %d4,%d5,16
8000c842:	68 19       	st.w [%a15]4,%d9
8000c844:	59 a3 20 10 	st.w [%sp]96,%d3
8000c848:	59 a4 24 10 	st.w [%sp]100,%d4
8000c84c:	8b 83 80 32 	ge %d3,%d3,8
8000c850:	d9 ff 08 00 	lea %a15,[%a15]8
8000c854:	76 3b       	jz %d3,8000c86a <_svfprintf_r+0x106e>
8000c856:	60 c4       	mov.a %a4,%d12
8000c858:	60 b5       	mov.a %a5,%d11
8000c85a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c85e:	6d 00 ac 0a 	call 8000ddb6 <__ssprint_r>
8000c862:	df 02 98 80 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c866:	d9 af 10 20 	lea %a15,[%sp]144
8000c86a:	1b 0f ff ff 	addi %d15,%d15,-16
8000c86e:	3c de       	j 8000c82a <_svfprintf_r+0x102e>
8000c870:	12 54       	add %d4,%d15,%d5
8000c872:	68 1f       	st.w [%a15]4,%d15
8000c874:	59 a4 24 10 	st.w [%sp]100,%d4
8000c878:	9a 13       	add %d15,%d3,1
8000c87a:	78 18       	st.w [%sp]96,%d15
8000c87c:	8b 8f 80 f2 	ge %d15,%d15,8
8000c880:	d9 ff 08 00 	lea %a15,[%a15]8
8000c884:	6e 10       	jz %d15,8000c8a4 <_svfprintf_r+0x10a8>
8000c886:	60 c4       	mov.a %a4,%d12
8000c888:	60 b5       	mov.a %a5,%d11
8000c88a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c88e:	6d 00 94 0a 	call 8000ddb6 <__ssprint_r>
8000c892:	df 02 80 80 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c896:	d9 af 10 20 	lea %a15,[%sp]144
8000c89a:	3c 05       	j 8000c8a4 <_svfprintf_r+0x10a8>
8000c89c:	df 08 f5 ff 	jne %d8,0,8000c886 <_svfprintf_r+0x108a>
8000c8a0:	d9 ef 08 00 	lea %a15,[%a14]8
8000c8a4:	58 0e       	ld.w %d15,[%sp]56
8000c8a6:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c8aa:	68 1f       	st.w [%a15]4,%d15
8000c8ac:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c8b0:	58 19       	ld.w %d15,[%sp]100
8000c8b2:	e8 03       	st.a [%a15]0,%a3
8000c8b4:	42 2f       	add %d15,%d2
8000c8b6:	78 19       	st.w [%sp]100,%d15
8000c8b8:	58 18       	ld.w %d15,[%sp]96
8000c8ba:	c2 1f       	add %d15,1
8000c8bc:	78 18       	st.w [%sp]96,%d15
8000c8be:	8b 8f 80 f2 	ge %d15,%d15,8
8000c8c2:	df 0f 8d fd 	jne %d15,0,8000c3dc <_svfprintf_r+0xbe0>
8000c8c6:	d9 ff 08 00 	lea %a15,[%a15]8
8000c8ca:	80 df       	mov.d %d15,%a13
8000c8cc:	ae 2d       	jnz.t %d15,2,8000c8e6 <_svfprintf_r+0x10ea>
8000c8ce:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c8d2:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c8d6:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c8da:	42 f2       	add %d2,%d15
8000c8dc:	58 19       	ld.w %d15,[%sp]100
8000c8de:	59 a2 28 00 	st.w [%sp]40,%d2
8000c8e2:	6e 49       	jz %d15,8000c974 <_svfprintf_r+0x1178>
8000c8e4:	3c 40       	j 8000c964 <_svfprintf_r+0x1168>
8000c8e6:	58 07       	ld.w %d15,[%sp]28
8000c8e8:	3b 00 01 80 	mov %d8,16
8000c8ec:	a2 af       	sub %d15,%d10
8000c8ee:	bf 1f f0 7f 	jlt %d15,1,8000c8ce <_svfprintf_r+0x10d2>
8000c8f2:	91 00 00 28 	movh.a %a2,32768
8000c8f6:	d9 22 c4 d0 	lea %a2,[%a2]3908 <80000f44 <blanks.4035>>
8000c8fa:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000f44 <blanks.4035>>
8000c8fe:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000f44 <blanks.4035>>
8000c902:	8b 1f 81 42 	ge %d4,%d15,17
8000c906:	e8 02       	st.a [%a15]0,%a2
8000c908:	df 04 1c 00 	jeq %d4,0,8000c940 <_svfprintf_r+0x1144>
8000c90c:	c2 13       	add %d3,1
8000c90e:	1b 05 01 40 	addi %d4,%d5,16
8000c912:	68 18       	st.w [%a15]4,%d8
8000c914:	59 a3 20 10 	st.w [%sp]96,%d3
8000c918:	59 a4 24 10 	st.w [%sp]100,%d4
8000c91c:	8b 83 80 32 	ge %d3,%d3,8
8000c920:	d9 ff 08 00 	lea %a15,[%a15]8
8000c924:	76 3b       	jz %d3,8000c93a <_svfprintf_r+0x113e>
8000c926:	60 c4       	mov.a %a4,%d12
8000c928:	60 b5       	mov.a %a5,%d11
8000c92a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c92e:	6d 00 44 0a 	call 8000ddb6 <__ssprint_r>
8000c932:	df 02 30 80 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c936:	d9 af 10 20 	lea %a15,[%sp]144
8000c93a:	1b 0f ff ff 	addi %d15,%d15,-16
8000c93e:	3c da       	j 8000c8f2 <_svfprintf_r+0x10f6>
8000c940:	12 54       	add %d4,%d15,%d5
8000c942:	68 1f       	st.w [%a15]4,%d15
8000c944:	9a 13       	add %d15,%d3,1
8000c946:	78 18       	st.w [%sp]96,%d15
8000c948:	59 a4 24 10 	st.w [%sp]100,%d4
8000c94c:	8b 8f 40 f2 	lt %d15,%d15,8
8000c950:	ee bf       	jnz %d15,8000c8ce <_svfprintf_r+0x10d2>
8000c952:	60 c4       	mov.a %a4,%d12
8000c954:	60 b5       	mov.a %a5,%d11
8000c956:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c95a:	6d 00 2e 0a 	call 8000ddb6 <__ssprint_r>
8000c95e:	df 02 b8 7f 	jeq %d2,0,8000c8ce <_svfprintf_r+0x10d2>
8000c962:	3c 18       	j 8000c992 <_svfprintf_r+0x1196>
8000c964:	60 c4       	mov.a %a4,%d12
8000c966:	60 b5       	mov.a %a5,%d11
8000c968:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c96c:	6d 00 25 0a 	call 8000ddb6 <__ssprint_r>
8000c970:	df 02 11 80 	jne %d2,0,8000c992 <_svfprintf_r+0x1196>
8000c974:	82 0f       	mov %d15,0
8000c976:	78 18       	st.w [%sp]96,%d15
8000c978:	40 cf       	mov.aa %a15,%a12
8000c97a:	d9 ae 10 20 	lea %a14,[%sp]144
8000c97e:	1d ff 77 f7 	j 8000b86c <_svfprintf_r+0x70>
8000c982:	58 19       	ld.w %d15,[%sp]100
8000c984:	6e 07       	jz %d15,8000c992 <_svfprintf_r+0x1196>
8000c986:	60 c4       	mov.a %a4,%d12
8000c988:	60 b5       	mov.a %a5,%d11
8000c98a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c98e:	6d 00 14 0a 	call 8000ddb6 <__ssprint_r>
8000c992:	60 b3       	mov.a %a3,%d11
8000c994:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c998:	8c 36       	ld.h %d15,[%a3]12
8000c99a:	16 40       	and %d15,64
8000c99c:	aa f2       	cmov %d2,%d15,-1
8000c99e:	00 90       	ret 

8000c9a0 <quorem>:
8000c9a0:	19 58 10 00 	ld.w %d8,[%a5]16
8000c9a4:	4c 44       	ld.w %d15,[%a4]16
8000c9a6:	82 02       	mov %d2,0
8000c9a8:	3f 8f 88 00 	jlt %d15,%d8,8000cab8 <quorem+0x118>
8000c9ac:	c2 f8       	add %d8,-1
8000c9ae:	80 4f       	mov.d %d15,%a4
8000c9b0:	8f 28 00 20 	sh %d2,%d8,2
8000c9b4:	60 2f       	mov.a %a15,%d2
8000c9b6:	1b 4f 01 90 	addi %d9,%d15,20
8000c9ba:	d9 5c 14 00 	lea %a12,[%a5]20
8000c9be:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000c9c2:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000c9c6:	54 dc       	ld.w %d12,[%a13]
8000c9c8:	4c f0       	ld.w %d15,[%a15]0
8000c9ca:	c2 1c       	add %d12,1
8000c9cc:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000c9d0:	02 ca       	mov %d10,%d12
8000c9d2:	df 0c 3d 00 	jeq %d12,0,8000ca4c <quorem+0xac>
8000c9d6:	60 96       	mov.a %a6,%d9
8000c9d8:	40 c2       	mov.aa %a2,%a12
8000c9da:	82 05       	mov %d5,0
8000c9dc:	82 06       	mov %d6,0
8000c9de:	54 22       	ld.w %d2,[%a2]
8000c9e0:	40 63       	mov.aa %a3,%a6
8000c9e2:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c9e6:	8f 02 1f 20 	sh %d2,%d2,-16
8000c9ea:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000c9ee:	b0 42       	add.a %a2,4
8000c9f0:	8f 03 1f 40 	sh %d4,%d3,-16
8000c9f4:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000c9f8:	44 34       	ld.w %d4,[%a3+]
8000c9fa:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000c9fe:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000ca02:	8f 02 1f 50 	sh %d5,%d2,-16
8000ca06:	42 f6       	add %d6,%d15
8000ca08:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000ca0c:	0b 36 80 30 	sub %d3,%d6,%d3
8000ca10:	8f 04 1f 40 	sh %d4,%d4,-16
8000ca14:	8f 03 3f f0 	sha %d15,%d3,-16
8000ca18:	0b 24 80 20 	sub %d2,%d4,%d2
8000ca1c:	42 f2       	add %d2,%d15
8000ca1e:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000ca22:	8f 02 3f 60 	sha %d6,%d2,-16
8000ca26:	80 2f       	mov.d %d15,%a2
8000ca28:	80 d2       	mov.d %d2,%a13
8000ca2a:	74 63       	st.w [%a6],%d3
8000ca2c:	40 36       	mov.aa %a6,%a3
8000ca2e:	7f f2 d8 ff 	jge.u %d2,%d15,8000c9de <quorem+0x3e>
8000ca32:	4c f0       	ld.w %d15,[%a15]0
8000ca34:	ee 0c       	jnz %d15,8000ca4c <quorem+0xac>
8000ca36:	b0 cf       	add.a %a15,-4
8000ca38:	80 f2       	mov.d %d2,%a15
8000ca3a:	3f 29 05 80 	jlt.u %d9,%d2,8000ca44 <quorem+0xa4>
8000ca3e:	59 48 10 00 	st.w [%a4]16,%d8
8000ca42:	3c 05       	j 8000ca4c <quorem+0xac>
8000ca44:	4c f0       	ld.w %d15,[%a15]0
8000ca46:	ee fc       	jnz %d15,8000ca3e <quorem+0x9e>
8000ca48:	c2 f8       	add %d8,-1
8000ca4a:	3c f6       	j 8000ca36 <quorem+0x96>
8000ca4c:	40 4e       	mov.aa %a14,%a4
8000ca4e:	6d 00 b9 08 	call 8000dbc0 <__mcmp>
8000ca52:	bf 02 32 00 	jlt %d2,0,8000cab6 <quorem+0x116>
8000ca56:	60 92       	mov.a %a2,%d9
8000ca58:	1b 1c 00 a0 	addi %d10,%d12,1
8000ca5c:	82 04       	mov %d4,0
8000ca5e:	40 2f       	mov.aa %a15,%a2
8000ca60:	44 f3       	ld.w %d3,[%a15+]
8000ca62:	54 c5       	ld.w %d5,[%a12]
8000ca64:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000ca68:	8f 05 1f f0 	sh %d15,%d5,-16
8000ca6c:	42 42       	add %d2,%d4
8000ca6e:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000ca72:	8f 03 1f 30 	sh %d3,%d3,-16
8000ca76:	a2 42       	sub %d2,%d4
8000ca78:	8f 02 3f 40 	sha %d4,%d2,-16
8000ca7c:	a2 f3       	sub %d3,%d15
8000ca7e:	42 43       	add %d3,%d4
8000ca80:	8f 03 3f 40 	sha %d4,%d3,-16
8000ca84:	b0 4c       	add.a %a12,4
8000ca86:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000ca8a:	80 df       	mov.d %d15,%a13
8000ca8c:	80 c2       	mov.d %d2,%a12
8000ca8e:	74 23       	st.w [%a2],%d3
8000ca90:	40 f2       	mov.aa %a2,%a15
8000ca92:	7f 2f e6 ff 	jge.u %d15,%d2,8000ca5e <quorem+0xbe>
8000ca96:	60 92       	mov.a %a2,%d9
8000ca98:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000ca9c:	4c f0       	ld.w %d15,[%a15]0
8000ca9e:	ee 0c       	jnz %d15,8000cab6 <quorem+0x116>
8000caa0:	b0 cf       	add.a %a15,-4
8000caa2:	80 f2       	mov.d %d2,%a15
8000caa4:	3f 29 05 80 	jlt.u %d9,%d2,8000caae <quorem+0x10e>
8000caa8:	59 e8 10 00 	st.w [%a14]16,%d8
8000caac:	3c 05       	j 8000cab6 <quorem+0x116>
8000caae:	4c f0       	ld.w %d15,[%a15]0
8000cab0:	ee fc       	jnz %d15,8000caa8 <quorem+0x108>
8000cab2:	c2 f8       	add %d8,-1
8000cab4:	3c f6       	j 8000caa0 <quorem+0x100>
8000cab6:	02 a2       	mov %d2,%d10
8000cab8:	00 90       	ret 
	...

8000cabc <_dtoa_r>:
8000cabc:	20 58       	sub.a %sp,88
8000cabe:	b5 a5 08 10 	st.a [%sp]72,%a5
8000cac2:	99 45 00 10 	ld.a %a5,[%a4]64
8000cac6:	59 a6 1c 00 	st.w [%sp]28,%d6
8000caca:	59 a7 28 00 	st.w [%sp]40,%d7
8000cace:	b5 a7 38 00 	st.a [%sp]56,%a7
8000cad2:	40 4d       	mov.aa %a13,%a4
8000cad4:	0b 45 10 88 	mov %e8,%d5,%d4
8000cad8:	40 6c       	mov.aa %a12,%a6
8000cada:	0b 45 10 c8 	mov %e12,%d5,%d4
8000cade:	bc 5e       	jz.a %a5,8000cafa <_dtoa_r+0x3e>
8000cae0:	19 4f 04 10 	ld.w %d15,[%a4]68
8000cae4:	82 12       	mov %d2,1
8000cae6:	0f f2 00 20 	sh %d2,%d2,%d15
8000caea:	6c 51       	st.w [%a5]4,%d15
8000caec:	59 52 08 00 	st.w [%a5]8,%d2
8000caf0:	82 0f       	mov %d15,0
8000caf2:	6d 00 99 06 	call 8000d824 <_Bfree>
8000caf6:	59 df 00 10 	st.w [%a13]64,%d15
8000cafa:	ce 96       	jgez %d9,8000cb06 <_dtoa_r+0x4a>
8000cafc:	82 1f       	mov %d15,1
8000cafe:	6c c0       	st.w [%a12]0,%d15
8000cb00:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000cb04:	3c 03       	j 8000cb0a <_dtoa_r+0x4e>
8000cb06:	82 0f       	mov %d15,0
8000cb08:	6c c0       	st.w [%a12]0,%d15
8000cb0a:	7b 00 ff 27 	movh %d2,32752
8000cb0e:	26 d2       	and %d2,%d13
8000cb10:	7b 00 ff 37 	movh %d3,32752
8000cb14:	5f 32 22 80 	jne %d2,%d3,8000cb58 <_dtoa_r+0x9c>
8000cb18:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cb1c:	3b f0 70 22 	mov %d2,9999
8000cb20:	91 00 00 f8 	movh.a %a15,32768
8000cb24:	74 32       	st.w [%a3],%d2
8000cb26:	d9 ff dd d0 	lea %a15,[%a15]3933 <80000f5d <blanks.4035+0x19>>
8000cb2a:	f6 c8       	jnz %d12,8000cb3a <_dtoa_r+0x7e>
8000cb2c:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000cb30:	ee 05       	jnz %d15,8000cb3a <_dtoa_r+0x7e>
8000cb32:	91 00 00 f8 	movh.a %a15,32768
8000cb36:	d9 ff d4 d0 	lea %a15,[%a15]3924 <80000f54 <blanks.4035+0x10>>
8000cb3a:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000f54 <blanks.4035+0x10>>
8000cb3e:	40 f2       	mov.aa %a2,%a15
8000cb40:	bd 03 26 06 	jz.a %a3,8000d78c <_dtoa_r+0xcd0>
8000cb44:	80 ff       	mov.d %d15,%a15
8000cb46:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000cb4a:	1b 8f 00 20 	addi %d2,%d15,8
8000cb4e:	c2 3f       	add %d15,3
8000cb50:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000cb54:	6c 30       	st.w [%a3]0,%d15
8000cb56:	00 90       	ret 
8000cb58:	0b cd 10 48 	mov %e4,%d13,%d12
8000cb5c:	d2 06       	mov %e6,0
8000cb5e:	0b cd 10 88 	mov %e8,%d13,%d12
8000cb62:	6d 00 2f 0c 	call 8000e3c0 <__eqdf2>
8000cb66:	df 02 13 80 	jne %d2,0,8000cb8c <_dtoa_r+0xd0>
8000cb6a:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cb6e:	d8 0e       	ld.a %a15,[%sp]56
8000cb70:	82 1f       	mov %d15,1
8000cb72:	91 00 00 28 	movh.a %a2,32768
8000cb76:	6c 30       	st.w [%a3]0,%d15
8000cb78:	d9 22 e1 d0 	lea %a2,[%a2]3937 <80000f61 <blanks.4035+0x1d>>
8000cb7c:	bd 0f 08 06 	jz.a %a15,8000d78c <_dtoa_r+0xcd0>
8000cb80:	7b 00 00 f8 	movh %d15,32768
8000cb84:	1b 2f f6 f0 	addi %d15,%d15,3938
8000cb88:	68 0f       	st.w [%a15]0,%d15
8000cb8a:	00 90       	ret 
8000cb8c:	0b cd 10 48 	mov %e4,%d13,%d12
8000cb90:	40 d4       	mov.aa %a4,%a13
8000cb92:	d9 a5 14 10 	lea %a5,[%sp]84
8000cb96:	d9 a6 10 10 	lea %a6,[%sp]80
8000cb9a:	6d 00 99 08 	call 8000dccc <__d2b>
8000cb9e:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000cba2:	40 2e       	mov.aa %a14,%a2
8000cba4:	19 aa 10 10 	ld.w %d10,[%sp]80
8000cba8:	76 bd       	jz %d11,8000cbc2 <_dtoa_r+0x106>
8000cbaa:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000cbae:	0b cd 10 48 	mov %e4,%d13,%d12
8000cbb2:	7b 00 ff 23 	movh %d2,16368
8000cbb6:	0f 2f a0 50 	or %d5,%d15,%d2
8000cbba:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000cbbe:	82 0f       	mov %d15,0
8000cbc0:	3c 22       	j 8000cc04 <_dtoa_r+0x148>
8000cbc2:	19 ab 14 10 	ld.w %d11,[%sp]84
8000cbc6:	3b e0 be 4f 	mov %d4,-1042
8000cbca:	42 ab       	add %d11,%d10
8000cbcc:	a2 b4       	sub %d4,%d11
8000cbce:	3b f0 be 2f 	mov %d2,-1041
8000cbd2:	0f 4c 00 40 	sh %d4,%d12,%d4
8000cbd6:	3f 2b 0f 00 	jlt %d11,%d2,8000cbf4 <_dtoa_r+0x138>
8000cbda:	1b 2b 41 30 	addi %d3,%d11,1042
8000cbde:	3b e0 c0 4f 	mov %d4,-1010
8000cbe2:	a2 b4       	sub %d4,%d11
8000cbe4:	8b 03 00 21 	rsub %d2,%d3,0
8000cbe8:	0f 2c 00 20 	sh %d2,%d12,%d2
8000cbec:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000cbf0:	0f f2 a0 40 	or %d4,%d2,%d15
8000cbf4:	6d 00 ad 0c 	call 8000e54e <__floatunsidf>
8000cbf8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cbfc:	9b 03 e1 5f 	addih %d5,%d3,65040
8000cc00:	c2 fb       	add %d11,-1
8000cc02:	82 1f       	mov %d15,1
8000cc04:	b7 00 ab 69 	imask %e6,0,19,11
8000cc08:	78 13       	st.w [%sp]76,%d15
8000cc0a:	6d ff ba ee 	call 8000a97e <__subdf3>
8000cc0e:	7b 30 fd 73 	movh %d7,16339
8000cc12:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc16:	7b f0 36 66 	movh %d6,25455
8000cc1a:	1b 77 7a 78 	addi %d7,%d7,-30809
8000cc1e:	1b 16 36 64 	addi %d6,%d6,17249
8000cc22:	6d ff ce ee 	call 8000a9be <__muldf3>
8000cc26:	7b 70 fc 73 	movh %d7,16327
8000cc2a:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc2e:	7b 10 b6 68 	movh %d6,35681
8000cc32:	1b 87 a2 78 	addi %d7,%d7,-30168
8000cc36:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000cc3a:	6d ff 86 ee 	call 8000a946 <__adddf3>
8000cc3e:	02 b4       	mov %d4,%d11
8000cc40:	0b 23 10 88 	mov %e8,%d3,%d2
8000cc44:	6d ff 1b f0 	call 8000ac7a <__floatsidf>
8000cc48:	7b 30 fd 73 	movh %d7,16339
8000cc4c:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc50:	7b f0 09 65 	movh %d6,20639
8000cc54:	1b 37 41 74 	addi %d7,%d7,17427
8000cc58:	1b b6 9f 67 	addi %d6,%d6,31227
8000cc5c:	6d ff b1 ee 	call 8000a9be <__muldf3>
8000cc60:	0b 89 10 48 	mov %e4,%d9,%d8
8000cc64:	0b 23 10 68 	mov %e6,%d3,%d2
8000cc68:	6d ff 6f ee 	call 8000a946 <__adddf3>
8000cc6c:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc70:	0b 23 10 88 	mov %e8,%d3,%d2
8000cc74:	6d 00 46 0c 	call 8000e500 <__fixdfsi>
8000cc78:	0b 89 10 48 	mov %e4,%d9,%d8
8000cc7c:	d2 06       	mov %e6,0
8000cc7e:	59 a2 08 00 	st.w [%sp]8,%d2
8000cc82:	6d 00 1f 0c 	call 8000e4c0 <__ltdf2>
8000cc86:	ff 02 12 00 	jge %d2,0,8000ccaa <_dtoa_r+0x1ee>
8000cc8a:	19 a4 08 00 	ld.w %d4,[%sp]8
8000cc8e:	6d ff f6 ef 	call 8000ac7a <__floatsidf>
8000cc92:	0b 89 10 48 	mov %e4,%d9,%d8
8000cc96:	0b 23 10 68 	mov %e6,%d3,%d2
8000cc9a:	6d 00 b3 0b 	call 8000e400 <__nedf2>
8000cc9e:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cca2:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000cca6:	59 a3 08 00 	st.w [%sp]8,%d3
8000ccaa:	19 a2 08 00 	ld.w %d2,[%sp]8
8000ccae:	82 13       	mov %d3,1
8000ccb0:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000ccb4:	59 a3 3c 00 	st.w [%sp]60,%d3
8000ccb8:	ee 18       	jnz %d15,8000cce8 <_dtoa_r+0x22c>
8000ccba:	91 00 00 f8 	movh.a %a15,32768
8000ccbe:	d9 ff 04 01 	lea %a15,[%a15]4100 <80001004 <__mprec_tens>>
8000ccc2:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000ccc6:	0b cd 10 68 	mov %e6,%d13,%d12
8000ccca:	09 f4 40 09 	ld.d %e4,[%a15]
8000ccce:	6d 00 b9 0b 	call 8000e440 <__gtdf2>
8000ccd2:	8e 28       	jlez %d2,8000cce2 <_dtoa_r+0x226>
8000ccd4:	58 02       	ld.w %d15,[%sp]8
8000ccd6:	82 02       	mov %d2,0
8000ccd8:	c2 ff       	add %d15,-1
8000ccda:	78 02       	st.w [%sp]8,%d15
8000ccdc:	59 a2 3c 00 	st.w [%sp]60,%d2
8000cce0:	3c 04       	j 8000cce8 <_dtoa_r+0x22c>
8000cce2:	82 03       	mov %d3,0
8000cce4:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cce8:	0b ba 80 b0 	sub %d11,%d10,%d11
8000ccec:	9a fb       	add %d15,%d11,-1
8000ccee:	82 02       	mov %d2,0
8000ccf0:	78 06       	st.w [%sp]24,%d15
8000ccf2:	59 a2 14 00 	st.w [%sp]20,%d2
8000ccf6:	ce f6       	jgez %d15,8000cd02 <_dtoa_r+0x246>
8000ccf8:	32 5f       	rsub %d15
8000ccfa:	82 03       	mov %d3,0
8000ccfc:	78 05       	st.w [%sp]20,%d15
8000ccfe:	59 a3 18 00 	st.w [%sp]24,%d3
8000cd02:	58 02       	ld.w %d15,[%sp]8
8000cd04:	0e fa       	jltz %d15,8000cd18 <_dtoa_r+0x25c>
8000cd06:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cd0a:	78 0d       	st.w [%sp]52,%d15
8000cd0c:	42 f2       	add %d2,%d15
8000cd0e:	82 0f       	mov %d15,0
8000cd10:	59 a2 18 00 	st.w [%sp]24,%d2
8000cd14:	78 08       	st.w [%sp]32,%d15
8000cd16:	3c 0d       	j 8000cd30 <_dtoa_r+0x274>
8000cd18:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cd1c:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cd20:	82 0f       	mov %d15,0
8000cd22:	a2 32       	sub %d2,%d3
8000cd24:	32 53       	rsub %d3
8000cd26:	59 a2 14 00 	st.w [%sp]20,%d2
8000cd2a:	59 a3 20 00 	st.w [%sp]32,%d3
8000cd2e:	78 0d       	st.w [%sp]52,%d15
8000cd30:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cd34:	82 18       	mov %d8,1
8000cd36:	ff a2 46 80 	jge.u %d2,10,8000cdc2 <_dtoa_r+0x306>
8000cd3a:	bf 62 06 00 	jlt %d2,6,8000cd46 <_dtoa_r+0x28a>
8000cd3e:	c2 c2       	add %d2,-4
8000cd40:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd44:	82 08       	mov %d8,0
8000cd46:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000cd4a:	c2 e3       	add %d3,-2
8000cd4c:	ff 43 4b 80 	jge.u %d3,4,8000cde2 <_dtoa_r+0x326>
8000cd50:	91 10 00 f8 	movh.a %a15,32769
8000cd54:	d9 ff e0 5c 	lea %a15,[%a15]-12960 <8000cd60 <_dtoa_r+0x2a4>>
8000cd58:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000cd5c:	dc 0f       	ji %a15
8000cd5e:	00 00       	nop 
8000cd60:	1d 00 08 00 	j 8000cd70 <_dtoa_r+0x2b4>
8000cd64:	1d 00 1c 00 	j 8000cd9c <_dtoa_r+0x2e0>
8000cd68:	1d 00 08 00 	j 8000cd78 <_dtoa_r+0x2bc>
8000cd6c:	1d 00 1c 00 	j 8000cda4 <_dtoa_r+0x2e8>
8000cd70:	82 03       	mov %d3,0
8000cd72:	59 a3 24 00 	st.w [%sp]36,%d3
8000cd76:	3c 03       	j 8000cd7c <_dtoa_r+0x2c0>
8000cd78:	82 1f       	mov %d15,1
8000cd7a:	78 09       	st.w [%sp]36,%d15
8000cd7c:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cd80:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cd84:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd88:	02 23       	mov %d3,%d2
8000cd8a:	ff 12 38 00 	jge %d2,1,8000cdfa <_dtoa_r+0x33e>
8000cd8e:	82 13       	mov %d3,1
8000cd90:	82 1f       	mov %d15,1
8000cd92:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cd96:	78 04       	st.w [%sp]16,%d15
8000cd98:	82 12       	mov %d2,1
8000cd9a:	3c 21       	j 8000cddc <_dtoa_r+0x320>
8000cd9c:	82 03       	mov %d3,0
8000cd9e:	59 a3 24 00 	st.w [%sp]36,%d3
8000cda2:	3c 03       	j 8000cda8 <_dtoa_r+0x2ec>
8000cda4:	82 1f       	mov %d15,1
8000cda6:	78 09       	st.w [%sp]36,%d15
8000cda8:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cdac:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cdb0:	42 32       	add %d2,%d3
8000cdb2:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cdb6:	c2 12       	add %d2,1
8000cdb8:	59 a2 10 00 	st.w [%sp]16,%d2
8000cdbc:	8b 12 40 33 	max %d3,%d2,1
8000cdc0:	3c 1d       	j 8000cdfa <_dtoa_r+0x33e>
8000cdc2:	82 0f       	mov %d15,0
8000cdc4:	82 12       	mov %d2,1
8000cdc6:	82 f3       	mov %d3,-1
8000cdc8:	78 07       	st.w [%sp]28,%d15
8000cdca:	82 ff       	mov %d15,-1
8000cdcc:	59 a2 24 00 	st.w [%sp]36,%d2
8000cdd0:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cdd4:	78 04       	st.w [%sp]16,%d15
8000cdd6:	3b 20 01 30 	mov %d3,18
8000cdda:	82 02       	mov %d2,0
8000cddc:	59 a2 28 00 	st.w [%sp]40,%d2
8000cde0:	3c 0d       	j 8000cdfa <_dtoa_r+0x33e>
8000cde2:	82 ff       	mov %d15,-1
8000cde4:	82 13       	mov %d3,1
8000cde6:	78 0b       	st.w [%sp]44,%d15
8000cde8:	82 f2       	mov %d2,-1
8000cdea:	82 0f       	mov %d15,0
8000cdec:	59 a3 24 00 	st.w [%sp]36,%d3
8000cdf0:	59 a2 10 00 	st.w [%sp]16,%d2
8000cdf4:	3b 20 01 30 	mov %d3,18
8000cdf8:	78 0a       	st.w [%sp]40,%d15
8000cdfa:	82 05       	mov %d5,0
8000cdfc:	59 d5 04 10 	st.w [%a13]68,%d5
8000ce00:	82 45       	mov %d5,4
8000ce02:	1b 45 01 00 	addi %d0,%d5,20
8000ce06:	3f 03 09 80 	jlt.u %d3,%d0,8000ce18 <_dtoa_r+0x35c>
8000ce0a:	19 d0 04 10 	ld.w %d0,[%a13]68
8000ce0e:	06 15       	sh %d5,1
8000ce10:	c2 10       	add %d0,1
8000ce12:	59 d0 04 10 	st.w [%a13]68,%d0
8000ce16:	3c f6       	j 8000ce02 <_dtoa_r+0x346>
8000ce18:	40 d4       	mov.aa %a4,%a13
8000ce1a:	19 d4 04 10 	ld.w %d4,[%a13]68
8000ce1e:	6d 00 d8 04 	call 8000d7ce <_Balloc>
8000ce22:	19 a2 10 00 	ld.w %d2,[%sp]16
8000ce26:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000ce2a:	8b f2 60 32 	lt.u %d3,%d2,15
8000ce2e:	b5 d2 00 10 	st.a [%a13]64,%a2
8000ce32:	26 38       	and %d8,%d3
8000ce34:	df 08 97 01 	jeq %d8,0,8000d162 <_dtoa_r+0x6a6>
8000ce38:	19 a3 08 00 	ld.w %d3,[%sp]8
8000ce3c:	89 ac 40 19 	st.d [%sp]64,%e12
8000ce40:	bf 13 3f 00 	jlt %d3,1,8000cebe <_dtoa_r+0x402>
8000ce44:	91 00 00 f8 	movh.a %a15,32768
8000ce48:	8f f3 00 31 	and %d3,%d3,15
8000ce4c:	d9 ff 04 01 	lea %a15,[%a15]4100 <80001004 <__mprec_tens>>
8000ce50:	19 ae 08 00 	ld.w %d14,[%sp]8 <80001004 <__mprec_tens>>
8000ce54:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000ce58:	86 ce       	sha %d14,-4
8000ce5a:	09 f8 40 09 	ld.d %e8,[%a15]
8000ce5e:	82 2a       	mov %d10,2
8000ce60:	6f 4e 11 00 	jz.t %d14,4,8000ce82 <_dtoa_r+0x3c6>
8000ce64:	91 00 00 f8 	movh.a %a15,32768
8000ce68:	0b cd 10 48 	mov %e4,%d13,%d12
8000ce6c:	d9 ff dc f0 	lea %a15,[%a15]4060 <80000fdc <__mprec_bigtens>>
8000ce70:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000ce74:	6d ff 77 ee 	call 8000ab62 <__divdf3>
8000ce78:	0b 23 10 c8 	mov %e12,%d3,%d2
8000ce7c:	8f fe 00 e1 	and %d14,%d14,15
8000ce80:	82 3a       	mov %d10,3
8000ce82:	7b 00 00 b8 	movh %d11,32768
8000ce86:	82 0f       	mov %d15,0
8000ce88:	1b cb fd b0 	addi %d11,%d11,4060
8000ce8c:	df 0e 12 00 	jeq %d14,0,8000ceb0 <_dtoa_r+0x3f4>
8000ce90:	6f 0e 0d 00 	jz.t %d14,0,8000ceaa <_dtoa_r+0x3ee>
8000ce94:	60 b2       	mov.a %a2,%d11
8000ce96:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000ce98:	0b 89 10 48 	mov %e4,%d9,%d8
8000ce9c:	09 f6 40 09 	ld.d %e6,[%a15]
8000cea0:	6d ff 8f ed 	call 8000a9be <__muldf3>
8000cea4:	0b 23 10 88 	mov %e8,%d3,%d2
8000cea8:	c2 1a       	add %d10,1
8000ceaa:	86 fe       	sha %d14,-1
8000ceac:	c2 1f       	add %d15,1
8000ceae:	3c ef       	j 8000ce8c <_dtoa_r+0x3d0>
8000ceb0:	0b cd 10 48 	mov %e4,%d13,%d12
8000ceb4:	0b 89 10 68 	mov %e6,%d9,%d8
8000ceb8:	6d ff 55 ee 	call 8000ab62 <__divdf3>
8000cebc:	3c 2c       	j 8000cf14 <_dtoa_r+0x458>
8000cebe:	19 a8 08 00 	ld.w %d8,[%sp]8
8000cec2:	82 2a       	mov %d10,2
8000cec4:	32 58       	rsub %d8
8000cec6:	df 08 29 00 	jeq %d8,0,8000cf18 <_dtoa_r+0x45c>
8000ceca:	91 00 00 f8 	movh.a %a15,32768
8000cece:	8f f8 00 31 	and %d3,%d8,15
8000ced2:	d9 ff 04 01 	lea %a15,[%a15]4100 <80001004 <__mprec_tens>>
8000ced6:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000ceda:	09 a4 40 19 	ld.d %e4,[%sp]64
8000cede:	09 f6 40 09 	ld.d %e6,[%a15]
8000cee2:	7b 00 00 c8 	movh %d12,32768
8000cee6:	6d ff 6c ed 	call 8000a9be <__muldf3>
8000ceea:	82 09       	mov %d9,0
8000ceec:	86 c8       	sha %d8,-4
8000ceee:	1b cc fd c0 	addi %d12,%d12,4060
8000cef2:	df 08 11 00 	jeq %d8,0,8000cf14 <_dtoa_r+0x458>
8000cef6:	6f 08 0c 00 	jz.t %d8,0,8000cf0e <_dtoa_r+0x452>
8000cefa:	60 c3       	mov.a %a3,%d12
8000cefc:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000cf00:	0b 23 10 48 	mov %e4,%d3,%d2
8000cf04:	09 f6 40 09 	ld.d %e6,[%a15]
8000cf08:	c2 1a       	add %d10,1
8000cf0a:	6d ff 5a ed 	call 8000a9be <__muldf3>
8000cf0e:	86 f8       	sha %d8,-1
8000cf10:	c2 19       	add %d9,1
8000cf12:	3c f0       	j 8000cef2 <_dtoa_r+0x436>
8000cf14:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf18:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000cf1c:	df 02 23 00 	jeq %d2,0,8000cf62 <_dtoa_r+0x4a6>
8000cf20:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf24:	b7 00 2a 6a 	imask %e6,0,20,10
8000cf28:	6d 00 cc 0a 	call 8000e4c0 <__ltdf2>
8000cf2c:	ff 02 20 00 	jge %d2,0,8000cf6c <_dtoa_r+0x4b0>
8000cf30:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cf34:	df 03 21 00 	jeq %d3,0,8000cf76 <_dtoa_r+0x4ba>
8000cf38:	58 0b       	ld.w %d15,[%sp]44
8000cf3a:	bf 1f 12 01 	jlt %d15,1,8000d15e <_dtoa_r+0x6a2>
8000cf3e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cf42:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf46:	c2 f2       	add %d2,-1
8000cf48:	82 06       	mov %d6,0
8000cf4a:	7b 40 02 74 	movh %d7,16420
8000cf4e:	59 a2 30 00 	st.w [%sp]48,%d2
8000cf52:	6d ff 36 ed 	call 8000a9be <__muldf3>
8000cf56:	c2 1a       	add %d10,1
8000cf58:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf5c:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000cf60:	3c 10       	j 8000cf80 <_dtoa_r+0x4c4>
8000cf62:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf66:	59 a3 30 00 	st.w [%sp]48,%d3
8000cf6a:	3c 03       	j 8000cf70 <_dtoa_r+0x4b4>
8000cf6c:	58 02       	ld.w %d15,[%sp]8
8000cf6e:	78 0c       	st.w [%sp]48,%d15
8000cf70:	99 ac 10 00 	ld.a %a12,[%sp]16
8000cf74:	3c 06       	j 8000cf80 <_dtoa_r+0x4c4>
8000cf76:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cf7a:	a0 0c       	mov.a %a12,0
8000cf7c:	59 a2 30 00 	st.w [%sp]48,%d2
8000cf80:	02 a4       	mov %d4,%d10
8000cf82:	6d ff 7c ee 	call 8000ac7a <__floatsidf>
8000cf86:	0b cd 10 68 	mov %e6,%d13,%d12
8000cf8a:	0b 23 10 48 	mov %e4,%d3,%d2
8000cf8e:	6d ff 18 ed 	call 8000a9be <__muldf3>
8000cf92:	0b 23 10 48 	mov %e4,%d3,%d2
8000cf96:	82 06       	mov %d6,0
8000cf98:	7b c0 01 74 	movh %d7,16412
8000cf9c:	6d ff d5 ec 	call 8000a946 <__adddf3>
8000cfa0:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cfa4:	0b 23 10 e8 	mov %e14,%d3,%d2
8000cfa8:	60 b2       	mov.a %a2,%d11
8000cfaa:	11 02 cc ff 	addih.a %a15,%a2,64704
8000cfae:	80 ff       	mov.d %d15,%a15
8000cfb0:	bd 0c 1e 80 	jnz.a %a12,8000cfec <_dtoa_r+0x530>
8000cfb4:	0b cd 10 48 	mov %e4,%d13,%d12
8000cfb8:	82 06       	mov %d6,0
8000cfba:	7b 40 01 74 	movh %d7,16404
8000cfbe:	6d ff e0 ec 	call 8000a97e <__subdf3>
8000cfc2:	80 f7       	mov.d %d7,%a15
8000cfc4:	0b 23 10 48 	mov %e4,%d3,%d2
8000cfc8:	02 e6       	mov %d6,%d14
8000cfca:	0b 23 10 88 	mov %e8,%d3,%d2
8000cfce:	6d 00 39 0a 	call 8000e440 <__gtdf2>
8000cfd2:	ff 12 8e 02 	jge %d2,1,8000d4ee <_dtoa_r+0xa32>
8000cfd6:	0b 89 10 48 	mov %e4,%d9,%d8
8000cfda:	02 e6       	mov %d6,%d14
8000cfdc:	9b 0b cc 77 	addih %d7,%d11,31936
8000cfe0:	6d 00 70 0a 	call 8000e4c0 <__ltdf2>
8000cfe4:	bf 02 7d 02 	jlt %d2,0,8000d4de <_dtoa_r+0xa22>
8000cfe8:	1d 00 bb 00 	j 8000d15e <_dtoa_r+0x6a2>
8000cfec:	80 c5       	mov.d %d5,%a12
8000cfee:	91 00 00 f8 	movh.a %a15,32768
8000cff2:	19 a2 24 00 	ld.w %d2,[%sp]36
8000cff6:	d9 ff 04 01 	lea %a15,[%a15]4100 <80001004 <__mprec_tens>>
8000cffa:	c2 f5       	add %d5,-1
8000cffc:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000d000:	df 02 57 00 	jeq %d2,0,8000d0ae <_dtoa_r+0x5f2>
8000d004:	b7 00 a9 4a 	imask %e4,0,21,9
8000d008:	09 f6 40 09 	ld.d %e6,[%a15]
8000d00c:	6d ff ab ed 	call 8000ab62 <__divdf3>
8000d010:	0b ef 10 68 	mov %e6,%d15,%d14
8000d014:	0b 23 10 48 	mov %e4,%d3,%d2
8000d018:	6d ff b3 ec 	call 8000a97e <__subdf3>
8000d01c:	d8 03       	ld.a %a15,[%sp]12
8000d01e:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d022:	0b cd 10 48 	mov %e4,%d13,%d12
8000d026:	80 fe       	mov.d %d14,%a15
8000d028:	6d 00 6c 0a 	call 8000e500 <__fixdfsi>
8000d02c:	02 24       	mov %d4,%d2
8000d02e:	02 2f       	mov %d15,%d2
8000d030:	6d ff 25 ee 	call 8000ac7a <__floatsidf>
8000d034:	0b cd 10 48 	mov %e4,%d13,%d12
8000d038:	0b 23 10 68 	mov %e6,%d3,%d2
8000d03c:	c2 1e       	add %d14,1
8000d03e:	6d ff a0 ec 	call 8000a97e <__subdf3>
8000d042:	1b 0f 03 50 	addi %d5,%d15,48
8000d046:	28 05       	st.b [%a15]0,%d5
8000d048:	0b ab 10 68 	mov %e6,%d11,%d10
8000d04c:	0b 23 10 48 	mov %e4,%d3,%d2
8000d050:	0b 23 10 88 	mov %e8,%d3,%d2
8000d054:	6d 00 36 0a 	call 8000e4c0 <__ltdf2>
8000d058:	bf 02 86 03 	jlt %d2,0,8000d764 <_dtoa_r+0xca8>
8000d05c:	b7 00 2a 4a 	imask %e4,0,20,10
8000d060:	0b 89 10 68 	mov %e6,%d9,%d8
8000d064:	6d ff 8d ec 	call 8000a97e <__subdf3>
8000d068:	0b ab 10 68 	mov %e6,%d11,%d10
8000d06c:	0b 23 10 48 	mov %e4,%d3,%d2
8000d070:	6d 00 28 0a 	call 8000e4c0 <__ltdf2>
8000d074:	bf 02 ea 00 	jlt %d2,0,8000d248 <_dtoa_r+0x78c>
8000d078:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000d07c:	02 e5       	mov %d5,%d14
8000d07e:	80 cf       	mov.d %d15,%a12
8000d080:	a2 35       	sub %d5,%d3
8000d082:	7f f5 6e 00 	jge %d5,%d15,8000d15e <_dtoa_r+0x6a2>
8000d086:	0b ab 10 48 	mov %e4,%d11,%d10
8000d08a:	82 06       	mov %d6,0
8000d08c:	7b 40 02 74 	movh %d7,16420
8000d090:	6d ff 97 ec 	call 8000a9be <__muldf3>
8000d094:	0b 89 10 48 	mov %e4,%d9,%d8
8000d098:	82 06       	mov %d6,0
8000d09a:	7b 40 02 74 	movh %d7,16420
8000d09e:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d0a2:	6d ff 8e ec 	call 8000a9be <__muldf3>
8000d0a6:	60 ef       	mov.a %a15,%d14
8000d0a8:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d0ac:	3c bb       	j 8000d022 <_dtoa_r+0x566>
8000d0ae:	0b ef 10 68 	mov %e6,%d15,%d14
8000d0b2:	09 f4 40 09 	ld.d %e4,[%a15]
8000d0b6:	6d ff 84 ec 	call 8000a9be <__muldf3>
8000d0ba:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d0be:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d0c2:	30 c3       	add.a %a3,%a12
8000d0c4:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000d0c8:	80 3e       	mov.d %d14,%a3
8000d0ca:	0b cd 10 48 	mov %e4,%d13,%d12
8000d0ce:	d9 cf 01 00 	lea %a15,[%a12]1
8000d0d2:	6d 00 17 0a 	call 8000e500 <__fixdfsi>
8000d0d6:	02 24       	mov %d4,%d2
8000d0d8:	02 2f       	mov %d15,%d2
8000d0da:	6d ff d0 ed 	call 8000ac7a <__floatsidf>
8000d0de:	0b cd 10 48 	mov %e4,%d13,%d12
8000d0e2:	0b 23 10 68 	mov %e6,%d3,%d2
8000d0e6:	6d ff 4c ec 	call 8000a97e <__subdf3>
8000d0ea:	1b 0f 03 50 	addi %d5,%d15,48
8000d0ee:	0b 23 10 88 	mov %e8,%d3,%d2
8000d0f2:	80 f2       	mov.d %d2,%a15
8000d0f4:	34 c5       	st.b [%a12],%d5
8000d0f6:	5f e2 29 80 	jne %d2,%d14,8000d148 <_dtoa_r+0x68c>
8000d0fa:	0b ab 10 48 	mov %e4,%d11,%d10
8000d0fe:	b7 00 a9 6a 	imask %e6,0,21,9
8000d102:	6d ff 22 ec 	call 8000a946 <__adddf3>
8000d106:	0b 89 10 48 	mov %e4,%d9,%d8
8000d10a:	0b 23 10 68 	mov %e6,%d3,%d2
8000d10e:	6d 00 99 09 	call 8000e440 <__gtdf2>
8000d112:	ff 12 9b 00 	jge %d2,1,8000d248 <_dtoa_r+0x78c>
8000d116:	b7 00 a9 4a 	imask %e4,0,21,9
8000d11a:	0b ab 10 68 	mov %e6,%d11,%d10
8000d11e:	6d ff 30 ec 	call 8000a97e <__subdf3>
8000d122:	0b 89 10 48 	mov %e4,%d9,%d8
8000d126:	0b 23 10 68 	mov %e6,%d3,%d2
8000d12a:	6d 00 cb 09 	call 8000e4c0 <__ltdf2>
8000d12e:	ff 02 18 00 	jge %d2,0,8000d15e <_dtoa_r+0x6a2>
8000d132:	60 e2       	mov.a %a2,%d14
8000d134:	60 ef       	mov.a %a15,%d14
8000d136:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d13a:	b0 ff       	add.a %a15,-1
8000d13c:	8b 0f 03 f2 	eq %d15,%d15,48
8000d140:	df 0f 12 03 	jeq %d15,0,8000d764 <_dtoa_r+0xca8>
8000d144:	80 fe       	mov.d %d14,%a15
8000d146:	3c f6       	j 8000d132 <_dtoa_r+0x676>
8000d148:	0b 89 10 48 	mov %e4,%d9,%d8
8000d14c:	82 06       	mov %d6,0
8000d14e:	7b 40 02 74 	movh %d7,16420
8000d152:	6d ff 36 ec 	call 8000a9be <__muldf3>
8000d156:	40 fc       	mov.aa %a12,%a15
8000d158:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d15c:	3c b7       	j 8000d0ca <_dtoa_r+0x60e>
8000d15e:	09 ac 40 19 	ld.d %e12,[%sp]64
8000d162:	19 a3 14 10 	ld.w %d3,[%sp]84
8000d166:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d16a:	8b 03 80 52 	ge %d5,%d3,0
8000d16e:	8b f2 40 54 	and.lt %d5,%d2,15
8000d172:	df 05 9e 00 	jeq %d5,0,8000d2ae <_dtoa_r+0x7f2>
8000d176:	91 00 00 f8 	movh.a %a15,32768
8000d17a:	d9 ff 04 01 	lea %a15,[%a15]4100 <80001004 <__mprec_tens>>
8000d17e:	19 a3 10 00 	ld.w %d3,[%sp]16 <80001004 <__mprec_tens>>
8000d182:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000d186:	19 a2 28 00 	ld.w %d2,[%sp]40
8000d18a:	fa 13       	lt %d15,%d3,1
8000d18c:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000d190:	09 f8 40 09 	ld.d %e8,[%a15]
8000d194:	6e 16       	jz %d15,8000d1c0 <_dtoa_r+0x704>
8000d196:	df 03 a4 81 	jne %d3,0,8000d4de <_dtoa_r+0xa22>
8000d19a:	0b 89 10 48 	mov %e4,%d9,%d8
8000d19e:	82 06       	mov %d6,0
8000d1a0:	7b 40 01 74 	movh %d7,16404
8000d1a4:	6d ff 0d ec 	call 8000a9be <__muldf3>
8000d1a8:	0b cd 10 68 	mov %e6,%d13,%d12
8000d1ac:	0b 23 10 48 	mov %e4,%d3,%d2
8000d1b0:	a0 0c       	mov.a %a12,0
8000d1b2:	6d 00 67 09 	call 8000e480 <__gedf2>
8000d1b6:	a0 0f       	mov.a %a15,0
8000d1b8:	ff 02 95 01 	jge %d2,0,8000d4e2 <_dtoa_r+0xa26>
8000d1bc:	1d 00 9d 01 	j 8000d4f6 <_dtoa_r+0xa3a>
8000d1c0:	d8 03       	ld.a %a15,[%sp]12
8000d1c2:	0b cd 10 a8 	mov %e10,%d13,%d12
8000d1c6:	0b 89 10 68 	mov %e6,%d9,%d8
8000d1ca:	0b ab 10 48 	mov %e4,%d11,%d10
8000d1ce:	80 fe       	mov.d %d14,%a15
8000d1d0:	6d ff c9 ec 	call 8000ab62 <__divdf3>
8000d1d4:	0b 23 10 48 	mov %e4,%d3,%d2
8000d1d8:	c2 1e       	add %d14,1
8000d1da:	6d 00 93 09 	call 8000e500 <__fixdfsi>
8000d1de:	02 24       	mov %d4,%d2
8000d1e0:	02 2f       	mov %d15,%d2
8000d1e2:	6d ff 4c ed 	call 8000ac7a <__floatsidf>
8000d1e6:	0b 89 10 68 	mov %e6,%d9,%d8
8000d1ea:	0b 23 10 48 	mov %e4,%d3,%d2
8000d1ee:	6d ff e8 eb 	call 8000a9be <__muldf3>
8000d1f2:	0b ab 10 48 	mov %e4,%d11,%d10
8000d1f6:	0b 23 10 68 	mov %e6,%d3,%d2
8000d1fa:	6d ff c2 eb 	call 8000a97e <__subdf3>
8000d1fe:	0b 23 10 48 	mov %e4,%d3,%d2
8000d202:	1b 0f 03 30 	addi %d3,%d15,48
8000d206:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d20a:	28 03       	st.b [%a15]0,%d3
8000d20c:	02 e3       	mov %d3,%d14
8000d20e:	a2 23       	sub %d3,%d2
8000d210:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d214:	5f 23 3c 80 	jne %d3,%d2,8000d28c <_dtoa_r+0x7d0>
8000d218:	0b 45 10 68 	mov %e6,%d5,%d4
8000d21c:	6d ff 95 eb 	call 8000a946 <__adddf3>
8000d220:	0b 89 10 68 	mov %e6,%d9,%d8
8000d224:	0b 23 10 48 	mov %e4,%d3,%d2
8000d228:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d22c:	6d 00 0a 09 	call 8000e440 <__gtdf2>
8000d230:	4e 2e       	jgtz %d2,8000d24c <_dtoa_r+0x790>
8000d232:	0b ab 10 48 	mov %e4,%d11,%d10
8000d236:	0b 89 10 68 	mov %e6,%d9,%d8
8000d23a:	6d 00 c3 08 	call 8000e3c0 <__eqdf2>
8000d23e:	df 02 95 82 	jne %d2,0,8000d768 <_dtoa_r+0xcac>
8000d242:	ae 05       	jnz.t %d15,0,8000d24c <_dtoa_r+0x790>
8000d244:	1d 00 92 02 	j 8000d768 <_dtoa_r+0xcac>
8000d248:	58 0c       	ld.w %d15,[%sp]48
8000d24a:	78 02       	st.w [%sp]8,%d15
8000d24c:	58 03       	ld.w %d15,[%sp]12
8000d24e:	a2 ef       	sub %d15,%d14
8000d250:	46 0f       	not %d15
8000d252:	60 e2       	mov.a %a2,%d14
8000d254:	60 ef       	mov.a %a15,%d14
8000d256:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d25a:	b0 ff       	add.a %a15,-1
8000d25c:	8b 93 03 32 	eq %d3,%d3,57
8000d260:	df 03 11 00 	jeq %d3,0,8000d282 <_dtoa_r+0x7c6>
8000d264:	9f 0f 0d 80 	jned %d15,0,8000d27e <_dtoa_r+0x7c2>
8000d268:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d26c:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d270:	c2 13       	add %d3,1
8000d272:	da 30       	mov %d15,48
8000d274:	59 a3 08 00 	st.w [%sp]8,%d3
8000d278:	2c 30       	st.b [%a3]0,%d15
8000d27a:	40 3f       	mov.aa %a15,%a3
8000d27c:	3c 03       	j 8000d282 <_dtoa_r+0x7c6>
8000d27e:	80 fe       	mov.d %d14,%a15
8000d280:	3c e9       	j 8000d252 <_dtoa_r+0x796>
8000d282:	0c f0       	ld.bu %d15,[%a15]0
8000d284:	c2 1f       	add %d15,1
8000d286:	28 0f       	st.b [%a15]0,%d15
8000d288:	1d 00 70 02 	j 8000d768 <_dtoa_r+0xcac>
8000d28c:	82 06       	mov %d6,0
8000d28e:	7b 40 02 74 	movh %d7,16420
8000d292:	6d ff 96 eb 	call 8000a9be <__muldf3>
8000d296:	d2 06       	mov %e6,0
8000d298:	0b 23 10 48 	mov %e4,%d3,%d2
8000d29c:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d2a0:	60 ef       	mov.a %a15,%d14
8000d2a2:	6d 00 8f 08 	call 8000e3c0 <__eqdf2>
8000d2a6:	df 02 90 ff 	jne %d2,0,8000d1c6 <_dtoa_r+0x70a>
8000d2aa:	1d 00 5f 02 	j 8000d768 <_dtoa_r+0xcac>
8000d2ae:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d2b2:	58 08       	ld.w %d15,[%sp]32
8000d2b4:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d2b8:	a0 0f       	mov.a %a15,0
8000d2ba:	df 02 3b 00 	jeq %d2,0,8000d330 <_dtoa_r+0x874>
8000d2be:	58 07       	ld.w %d15,[%sp]28
8000d2c0:	ff 2f 10 00 	jge %d15,2,8000d2e0 <_dtoa_r+0x824>
8000d2c4:	58 13       	ld.w %d15,[%sp]76
8000d2c6:	6e 05       	jz %d15,8000d2d0 <_dtoa_r+0x814>
8000d2c8:	1b 33 43 30 	addi %d3,%d3,1075
8000d2cc:	58 08       	ld.w %d15,[%sp]32
8000d2ce:	3c 22       	j 8000d312 <_dtoa_r+0x856>
8000d2d0:	19 a3 10 10 	ld.w %d3,[%sp]80
8000d2d4:	58 08       	ld.w %d15,[%sp]32
8000d2d6:	8b 63 03 31 	rsub %d3,%d3,54
8000d2da:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d2de:	3c 1a       	j 8000d312 <_dtoa_r+0x856>
8000d2e0:	58 04       	ld.w %d15,[%sp]16
8000d2e2:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d2e6:	c2 ff       	add %d15,-1
8000d2e8:	3f f2 04 00 	jlt %d2,%d15,8000d2f0 <_dtoa_r+0x834>
8000d2ec:	5a f2       	sub %d15,%d2,%d15
8000d2ee:	3c 0b       	j 8000d304 <_dtoa_r+0x848>
8000d2f0:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d2f4:	78 08       	st.w [%sp]32,%d15
8000d2f6:	52 32       	sub %d2,%d15,%d3
8000d2f8:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d2fc:	82 0f       	mov %d15,0
8000d2fe:	42 23       	add %d3,%d2
8000d300:	59 a3 34 00 	st.w [%sp]52,%d3
8000d304:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d308:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d30c:	ce 33       	jgez %d3,8000d312 <_dtoa_r+0x856>
8000d30e:	a2 38       	sub %d8,%d3
8000d310:	82 03       	mov %d3,0
8000d312:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d316:	40 d4       	mov.aa %a4,%a13
8000d318:	42 32       	add %d2,%d3
8000d31a:	59 a2 14 00 	st.w [%sp]20,%d2
8000d31e:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d322:	82 14       	mov %d4,1
8000d324:	42 32       	add %d2,%d3
8000d326:	59 a2 18 00 	st.w [%sp]24,%d2
8000d32a:	6d 00 1b 03 	call 8000d960 <__i2b>
8000d32e:	40 2f       	mov.aa %a15,%a2
8000d330:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d334:	8b 18 80 32 	ge %d3,%d8,1
8000d338:	8b 12 80 34 	and.ge %d3,%d2,1
8000d33c:	76 3e       	jz %d3,8000d358 <_dtoa_r+0x89c>
8000d33e:	0b 82 80 31 	min %d3,%d2,%d8
8000d342:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d346:	a2 38       	sub %d8,%d3
8000d348:	a2 32       	sub %d2,%d3
8000d34a:	59 a2 14 00 	st.w [%sp]20,%d2
8000d34e:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d352:	a2 32       	sub %d2,%d3
8000d354:	59 a2 18 00 	st.w [%sp]24,%d2
8000d358:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d35c:	bf 13 27 00 	jlt %d3,1,8000d3aa <_dtoa_r+0x8ee>
8000d360:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d364:	df 02 1c 00 	jeq %d2,0,8000d39c <_dtoa_r+0x8e0>
8000d368:	bf 1f 13 00 	jlt %d15,1,8000d38e <_dtoa_r+0x8d2>
8000d36c:	40 f5       	mov.aa %a5,%a15
8000d36e:	02 f4       	mov %d4,%d15
8000d370:	40 d4       	mov.aa %a4,%a13
8000d372:	6d 00 8c 03 	call 8000da8a <__pow5mult>
8000d376:	40 e6       	mov.aa %a6,%a14
8000d378:	40 d4       	mov.aa %a4,%a13
8000d37a:	40 25       	mov.aa %a5,%a2
8000d37c:	40 2f       	mov.aa %a15,%a2
8000d37e:	6d 00 f9 02 	call 8000d970 <__multiply>
8000d382:	40 e5       	mov.aa %a5,%a14
8000d384:	40 2c       	mov.aa %a12,%a2
8000d386:	40 d4       	mov.aa %a4,%a13
8000d388:	6d 00 4e 02 	call 8000d824 <_Bfree>
8000d38c:	40 ce       	mov.aa %a14,%a12
8000d38e:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d392:	40 d4       	mov.aa %a4,%a13
8000d394:	a2 f4       	sub %d4,%d15
8000d396:	40 e5       	mov.aa %a5,%a14
8000d398:	76 49       	jz %d4,8000d3aa <_dtoa_r+0x8ee>
8000d39a:	3c 05       	j 8000d3a4 <_dtoa_r+0x8e8>
8000d39c:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d3a0:	40 d4       	mov.aa %a4,%a13
8000d3a2:	40 e5       	mov.aa %a5,%a14
8000d3a4:	6d 00 73 03 	call 8000da8a <__pow5mult>
8000d3a8:	40 2e       	mov.aa %a14,%a2
8000d3aa:	40 d4       	mov.aa %a4,%a13
8000d3ac:	82 14       	mov %d4,1
8000d3ae:	6d 00 d9 02 	call 8000d960 <__i2b>
8000d3b2:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d3b6:	40 2c       	mov.aa %a12,%a2
8000d3b8:	8e 3c       	jlez %d3,8000d3d0 <_dtoa_r+0x914>
8000d3ba:	40 d4       	mov.aa %a4,%a13
8000d3bc:	40 25       	mov.aa %a5,%a2
8000d3be:	02 34       	mov %d4,%d3
8000d3c0:	6d 00 65 03 	call 8000da8a <__pow5mult>
8000d3c4:	58 07       	ld.w %d15,[%sp]28
8000d3c6:	40 2c       	mov.aa %a12,%a2
8000d3c8:	82 09       	mov %d9,0
8000d3ca:	ff 2f 1f 00 	jge %d15,2,8000d408 <_dtoa_r+0x94c>
8000d3ce:	3c 06       	j 8000d3da <_dtoa_r+0x91e>
8000d3d0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d3d4:	82 09       	mov %d9,0
8000d3d6:	ff 22 15 00 	jge %d2,2,8000d400 <_dtoa_r+0x944>
8000d3da:	82 09       	mov %d9,0
8000d3dc:	df 0c 12 80 	jne %d12,0,8000d400 <_dtoa_r+0x944>
8000d3e0:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000d3e4:	ee 0e       	jnz %d15,8000d400 <_dtoa_r+0x944>
8000d3e6:	7b 00 ff f7 	movh %d15,32752
8000d3ea:	26 df       	and %d15,%d13
8000d3ec:	6e 0a       	jz %d15,8000d400 <_dtoa_r+0x944>
8000d3ee:	19 a3 14 00 	ld.w %d3,[%sp]20
8000d3f2:	58 06       	ld.w %d15,[%sp]24
8000d3f4:	c2 13       	add %d3,1
8000d3f6:	c2 1f       	add %d15,1
8000d3f8:	59 a3 14 00 	st.w [%sp]20,%d3
8000d3fc:	78 06       	st.w [%sp]24,%d15
8000d3fe:	82 19       	mov %d9,1
8000d400:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d404:	82 12       	mov %d2,1
8000d406:	76 39       	jz %d3,8000d418 <_dtoa_r+0x95c>
8000d408:	4c c4       	ld.w %d15,[%a12]16
8000d40a:	90 c3       	addsc.a %a3,%a12,%d15,2
8000d40c:	19 34 10 00 	ld.w %d4,[%a3]16
8000d410:	6d 00 54 02 	call 8000d8b8 <__hi0bits>
8000d414:	8b 02 02 21 	rsub %d2,%d2,32
8000d418:	58 06       	ld.w %d15,[%sp]24
8000d41a:	42 2f       	add %d15,%d2
8000d41c:	16 1f       	and %d15,31
8000d41e:	6e 0a       	jz %d15,8000d432 <_dtoa_r+0x976>
8000d420:	8b 0f 02 31 	rsub %d3,%d15,32
8000d424:	8b cf 01 f1 	rsub %d15,%d15,28
8000d428:	ff 53 07 00 	jge %d3,5,8000d436 <_dtoa_r+0x97a>
8000d42c:	df 43 10 00 	jeq %d3,4,8000d44c <_dtoa_r+0x990>
8000d430:	02 3f       	mov %d15,%d3
8000d432:	1b cf 01 f0 	addi %d15,%d15,28
8000d436:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d43a:	19 a3 18 00 	ld.w %d3,[%sp]24
8000d43e:	42 f2       	add %d2,%d15
8000d440:	42 f3       	add %d3,%d15
8000d442:	59 a2 14 00 	st.w [%sp]20,%d2
8000d446:	42 f8       	add %d8,%d15
8000d448:	59 a3 18 00 	st.w [%sp]24,%d3
8000d44c:	58 05       	ld.w %d15,[%sp]20
8000d44e:	8e f7       	jlez %d15,8000d45c <_dtoa_r+0x9a0>
8000d450:	40 e5       	mov.aa %a5,%a14
8000d452:	40 d4       	mov.aa %a4,%a13
8000d454:	02 f4       	mov %d4,%d15
8000d456:	6d 00 58 03 	call 8000db06 <__lshift>
8000d45a:	40 2e       	mov.aa %a14,%a2
8000d45c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d460:	8e 27       	jlez %d2,8000d46e <_dtoa_r+0x9b2>
8000d462:	40 c5       	mov.aa %a5,%a12
8000d464:	40 d4       	mov.aa %a4,%a13
8000d466:	02 24       	mov %d4,%d2
8000d468:	6d 00 4f 03 	call 8000db06 <__lshift>
8000d46c:	40 2c       	mov.aa %a12,%a2
8000d46e:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000d472:	df 03 20 00 	jeq %d3,0,8000d4b2 <_dtoa_r+0x9f6>
8000d476:	40 e4       	mov.aa %a4,%a14
8000d478:	40 c5       	mov.aa %a5,%a12
8000d47a:	6d 00 a3 03 	call 8000dbc0 <__mcmp>
8000d47e:	ff 02 1a 00 	jge %d2,0,8000d4b2 <_dtoa_r+0x9f6>
8000d482:	58 02       	ld.w %d15,[%sp]8
8000d484:	40 e5       	mov.aa %a5,%a14
8000d486:	c2 ff       	add %d15,-1
8000d488:	40 d4       	mov.aa %a4,%a13
8000d48a:	fb a0 00 40 	mov %e4,10
8000d48e:	78 02       	st.w [%sp]8,%d15
8000d490:	6d 00 d3 01 	call 8000d836 <__multadd>
8000d494:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000d498:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d49c:	59 a2 10 00 	st.w [%sp]16,%d2
8000d4a0:	40 2e       	mov.aa %a14,%a2
8000d4a2:	76 38       	jz %d3,8000d4b2 <_dtoa_r+0x9f6>
8000d4a4:	40 f5       	mov.aa %a5,%a15
8000d4a6:	40 d4       	mov.aa %a4,%a13
8000d4a8:	fb a0 00 40 	mov %e4,10
8000d4ac:	6d 00 c5 01 	call 8000d836 <__multadd>
8000d4b0:	40 2f       	mov.aa %a15,%a2
8000d4b2:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d4b6:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d4ba:	8b 32 80 f2 	ge %d15,%d2,3
8000d4be:	8b 13 40 f4 	and.lt %d15,%d3,1
8000d4c2:	6e 2a       	jz %d15,8000d516 <_dtoa_r+0xa5a>
8000d4c4:	f6 3f       	jnz %d3,8000d4e2 <_dtoa_r+0xa26>
8000d4c6:	40 c5       	mov.aa %a5,%a12
8000d4c8:	40 d4       	mov.aa %a4,%a13
8000d4ca:	d2 54       	mov %e4,5
8000d4cc:	6d 00 b5 01 	call 8000d836 <__multadd>
8000d4d0:	40 e4       	mov.aa %a4,%a14
8000d4d2:	40 25       	mov.aa %a5,%a2
8000d4d4:	40 2c       	mov.aa %a12,%a2
8000d4d6:	6d 00 75 03 	call 8000dbc0 <__mcmp>
8000d4da:	4e 2e       	jgtz %d2,8000d4f6 <_dtoa_r+0xa3a>
8000d4dc:	3c 03       	j 8000d4e2 <_dtoa_r+0xa26>
8000d4de:	a0 0c       	mov.a %a12,0
8000d4e0:	a0 0f       	mov.a %a15,0
8000d4e2:	58 0a       	ld.w %d15,[%sp]40
8000d4e4:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d4e8:	46 0f       	not %d15
8000d4ea:	78 02       	st.w [%sp]8,%d15
8000d4ec:	3c 11       	j 8000d50e <_dtoa_r+0xa52>
8000d4ee:	58 0c       	ld.w %d15,[%sp]48
8000d4f0:	a0 0c       	mov.a %a12,0
8000d4f2:	78 02       	st.w [%sp]8,%d15
8000d4f4:	a0 0f       	mov.a %a15,0
8000d4f6:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d4fa:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d4fe:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d502:	da 31       	mov %d15,49
8000d504:	c2 12       	add %d2,1
8000d506:	c2 1e       	add %d14,1
8000d508:	2c 30       	st.b [%a3]0,%d15
8000d50a:	59 a2 08 00 	st.w [%sp]8,%d2
8000d50e:	80 f8       	mov.d %d8,%a15
8000d510:	a0 0f       	mov.a %a15,0
8000d512:	1d 00 14 01 	j 8000d73a <_dtoa_r+0xc7e>
8000d516:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d51a:	f6 35       	jnz %d3,8000d524 <_dtoa_r+0xa68>
8000d51c:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000d520:	1d 00 c2 00 	j 8000d6a4 <_dtoa_r+0xbe8>
8000d524:	8e 87       	jlez %d8,8000d532 <_dtoa_r+0xa76>
8000d526:	40 f5       	mov.aa %a5,%a15
8000d528:	40 d4       	mov.aa %a4,%a13
8000d52a:	02 84       	mov %d4,%d8
8000d52c:	6d 00 ed 02 	call 8000db06 <__lshift>
8000d530:	40 2f       	mov.aa %a15,%a2
8000d532:	80 f8       	mov.d %d8,%a15
8000d534:	df 09 16 00 	jeq %d9,0,8000d560 <_dtoa_r+0xaa4>
8000d538:	40 d4       	mov.aa %a4,%a13
8000d53a:	48 14       	ld.w %d4,[%a15]4
8000d53c:	6d 00 49 01 	call 8000d7ce <_Balloc>
8000d540:	48 44       	ld.w %d4,[%a15]16
8000d542:	d9 24 0c 00 	lea %a4,[%a2]12
8000d546:	c2 24       	add %d4,2
8000d548:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d54c:	06 24       	sh %d4,2
8000d54e:	80 2f       	mov.d %d15,%a2
8000d550:	6d 00 31 01 	call 8000d7b2 <memcpy>
8000d554:	60 f5       	mov.a %a5,%d15
8000d556:	40 d4       	mov.aa %a4,%a13
8000d558:	82 14       	mov %d4,1
8000d55a:	6d 00 d6 02 	call 8000db06 <__lshift>
8000d55e:	80 28       	mov.d %d8,%a2
8000d560:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000d564:	8f 1c 00 a1 	and %d10,%d12,1
8000d568:	40 e4       	mov.aa %a4,%a14
8000d56a:	40 c5       	mov.aa %a5,%a12
8000d56c:	6d ff 1a fa 	call 8000c9a0 <quorem>
8000d570:	40 e4       	mov.aa %a4,%a14
8000d572:	40 f5       	mov.aa %a5,%a15
8000d574:	02 2e       	mov %d14,%d2
8000d576:	1b 02 03 f0 	addi %d15,%d2,48
8000d57a:	6d 00 23 03 	call 8000dbc0 <__mcmp>
8000d57e:	60 86       	mov.a %a6,%d8
8000d580:	40 d4       	mov.aa %a4,%a13
8000d582:	40 c5       	mov.aa %a5,%a12
8000d584:	02 2b       	mov %d11,%d2
8000d586:	6d 00 3e 03 	call 8000dc02 <__mdiff>
8000d58a:	19 22 0c 00 	ld.w %d2,[%a2]12
8000d58e:	80 2d       	mov.d %d13,%a2
8000d590:	82 1c       	mov %d12,1
8000d592:	f6 26       	jnz %d2,8000d59e <_dtoa_r+0xae2>
8000d594:	40 e4       	mov.aa %a4,%a14
8000d596:	40 25       	mov.aa %a5,%a2
8000d598:	6d 00 14 03 	call 8000dbc0 <__mcmp>
8000d59c:	02 2c       	mov %d12,%d2
8000d59e:	60 d5       	mov.a %a5,%d13
8000d5a0:	40 d4       	mov.aa %a4,%a13
8000d5a2:	6d 00 41 01 	call 8000d824 <_Bfree>
8000d5a6:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000d5aa:	1b 19 00 d0 	addi %d13,%d9,1
8000d5ae:	a6 c3       	or %d3,%d12
8000d5b0:	f6 3f       	jnz %d3,8000d5ce <_dtoa_r+0xb12>
8000d5b2:	f6 ae       	jnz %d10,8000d5ce <_dtoa_r+0xb12>
8000d5b4:	8b 9f 03 32 	eq %d3,%d15,57
8000d5b8:	40 e2       	mov.aa %a2,%a14
8000d5ba:	df 03 3a 80 	jne %d3,0,8000d62e <_dtoa_r+0xb72>
8000d5be:	1b 1e 03 20 	addi %d2,%d14,49
8000d5c2:	8b 1b 80 b2 	ge %d11,%d11,1
8000d5c6:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000d5ca:	02 de       	mov %d14,%d13
8000d5cc:	3c 37       	j 8000d63a <_dtoa_r+0xb7e>
8000d5ce:	ce b5       	jgez %d11,8000d5d8 <_dtoa_r+0xb1c>
8000d5d0:	02 fa       	mov %d10,%d15
8000d5d2:	40 e2       	mov.aa %a2,%a14
8000d5d4:	4e ca       	jgtz %d12,8000d5e8 <_dtoa_r+0xb2c>
8000d5d6:	3c 1e       	j 8000d612 <_dtoa_r+0xb56>
8000d5d8:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d5dc:	a6 2b       	or %d11,%d2
8000d5de:	df 0b 20 80 	jne %d11,0,8000d61e <_dtoa_r+0xb62>
8000d5e2:	df 0a 1e 80 	jne %d10,0,8000d61e <_dtoa_r+0xb62>
8000d5e6:	3c f5       	j 8000d5d0 <_dtoa_r+0xb14>
8000d5e8:	40 d4       	mov.aa %a4,%a13
8000d5ea:	40 e5       	mov.aa %a5,%a14
8000d5ec:	82 14       	mov %d4,1
8000d5ee:	6d 00 8c 02 	call 8000db06 <__lshift>
8000d5f2:	40 c5       	mov.aa %a5,%a12
8000d5f4:	40 24       	mov.aa %a4,%a2
8000d5f6:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d5fa:	6d 00 e3 02 	call 8000dbc0 <__mcmp>
8000d5fe:	99 a2 04 00 	ld.a %a2,[%sp]4
8000d602:	4e 23       	jgtz %d2,8000d608 <_dtoa_r+0xb4c>
8000d604:	f6 27       	jnz %d2,8000d612 <_dtoa_r+0xb56>
8000d606:	2e 06       	jz.t %d15,0,8000d612 <_dtoa_r+0xb56>
8000d608:	8b 9f 03 32 	eq %d3,%d15,57
8000d60c:	df 03 11 80 	jne %d3,0,8000d62e <_dtoa_r+0xb72>
8000d610:	92 1a       	add %d10,%d15,1
8000d612:	60 93       	mov.a %a3,%d9
8000d614:	02 de       	mov %d14,%d13
8000d616:	34 3a       	st.b [%a3],%d10
8000d618:	40 2e       	mov.aa %a14,%a2
8000d61a:	1d 00 90 00 	j 8000d73a <_dtoa_r+0xc7e>
8000d61e:	bf 1c 11 00 	jlt %d12,1,8000d640 <_dtoa_r+0xb84>
8000d622:	8b 9f 23 32 	ne %d3,%d15,57
8000d626:	40 e2       	mov.aa %a2,%a14
8000d628:	02 de       	mov %d14,%d13
8000d62a:	c2 1f       	add %d15,1
8000d62c:	f6 37       	jnz %d3,8000d63a <_dtoa_r+0xb7e>
8000d62e:	60 93       	mov.a %a3,%d9
8000d630:	da 39       	mov %d15,57
8000d632:	02 de       	mov %d14,%d13
8000d634:	2c 30       	st.b [%a3]0,%d15
8000d636:	40 2e       	mov.aa %a14,%a2
8000d638:	3c 5d       	j 8000d6f2 <_dtoa_r+0xc36>
8000d63a:	60 92       	mov.a %a2,%d9
8000d63c:	2c 20       	st.b [%a2]0,%d15
8000d63e:	3c 7e       	j 8000d73a <_dtoa_r+0xc7e>
8000d640:	60 93       	mov.a %a3,%d9
8000d642:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d646:	02 d5       	mov %d5,%d13
8000d648:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d64c:	2c 30       	st.b [%a3]0,%d15
8000d64e:	a2 25       	sub %d5,%d2
8000d650:	02 de       	mov %d14,%d13
8000d652:	5f 35 41 00 	jeq %d5,%d3,8000d6d4 <_dtoa_r+0xc18>
8000d656:	40 e5       	mov.aa %a5,%a14
8000d658:	40 d4       	mov.aa %a4,%a13
8000d65a:	fb a0 00 40 	mov %e4,10
8000d65e:	6d 00 ec 00 	call 8000d836 <__multadd>
8000d662:	80 ff       	mov.d %d15,%a15
8000d664:	40 2e       	mov.aa %a14,%a2
8000d666:	40 d4       	mov.aa %a4,%a13
8000d668:	40 f5       	mov.aa %a5,%a15
8000d66a:	fb a0 00 40 	mov %e4,10
8000d66e:	7e 86       	jne %d15,%d8,8000d67a <_dtoa_r+0xbbe>
8000d670:	6d 00 e3 00 	call 8000d836 <__multadd>
8000d674:	40 2f       	mov.aa %a15,%a2
8000d676:	80 28       	mov.d %d8,%a2
8000d678:	3c 0b       	j 8000d68e <_dtoa_r+0xbd2>
8000d67a:	6d 00 de 00 	call 8000d836 <__multadd>
8000d67e:	60 85       	mov.a %a5,%d8
8000d680:	40 d4       	mov.aa %a4,%a13
8000d682:	fb a0 00 40 	mov %e4,10
8000d686:	40 2f       	mov.aa %a15,%a2
8000d688:	6d 00 d7 00 	call 8000d836 <__multadd>
8000d68c:	80 28       	mov.d %d8,%a2
8000d68e:	02 d9       	mov %d9,%d13
8000d690:	1d ff 6c ff 	j 8000d568 <_dtoa_r+0xaac>
8000d694:	40 e5       	mov.aa %a5,%a14
8000d696:	40 d4       	mov.aa %a4,%a13
8000d698:	fb a0 00 40 	mov %e4,10
8000d69c:	6d 00 cd 00 	call 8000d836 <__multadd>
8000d6a0:	02 98       	mov %d8,%d9
8000d6a2:	40 2e       	mov.aa %a14,%a2
8000d6a4:	40 e4       	mov.aa %a4,%a14
8000d6a6:	40 c5       	mov.aa %a5,%a12
8000d6a8:	6d ff 7c f9 	call 8000c9a0 <quorem>
8000d6ac:	1b 18 00 90 	addi %d9,%d8,1
8000d6b0:	1b 02 03 f0 	addi %d15,%d2,48
8000d6b4:	60 82       	mov.a %a2,%d8
8000d6b6:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d6ba:	02 95       	mov %d5,%d9
8000d6bc:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d6c0:	2c 20       	st.b [%a2]0,%d15
8000d6c2:	a2 25       	sub %d5,%d2
8000d6c4:	3f 35 e8 7f 	jlt %d5,%d3,8000d694 <_dtoa_r+0xbd8>
8000d6c8:	8b 13 40 33 	max %d3,%d3,1
8000d6cc:	02 2e       	mov %d14,%d2
8000d6ce:	80 f8       	mov.d %d8,%a15
8000d6d0:	42 3e       	add %d14,%d3
8000d6d2:	a0 0f       	mov.a %a15,0
8000d6d4:	40 e5       	mov.aa %a5,%a14
8000d6d6:	40 d4       	mov.aa %a4,%a13
8000d6d8:	82 14       	mov %d4,1
8000d6da:	6d 00 16 02 	call 8000db06 <__lshift>
8000d6de:	40 c5       	mov.aa %a5,%a12
8000d6e0:	40 2e       	mov.aa %a14,%a2
8000d6e2:	40 24       	mov.aa %a4,%a2
8000d6e4:	6d 00 6e 02 	call 8000dbc0 <__mcmp>
8000d6e8:	4e 25       	jgtz %d2,8000d6f2 <_dtoa_r+0xc36>
8000d6ea:	df 02 1e 80 	jne %d2,0,8000d726 <_dtoa_r+0xc6a>
8000d6ee:	6f 0f 1c 00 	jz.t %d15,0,8000d726 <_dtoa_r+0xc6a>
8000d6f2:	58 03       	ld.w %d15,[%sp]12
8000d6f4:	a2 ef       	sub %d15,%d14
8000d6f6:	46 0f       	not %d15
8000d6f8:	60 e2       	mov.a %a2,%d14
8000d6fa:	60 e3       	mov.a %a3,%d14
8000d6fc:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d700:	b0 f3       	add.a %a3,-1
8000d702:	8b 93 03 52 	eq %d5,%d3,57
8000d706:	76 5d       	jz %d5,8000d720 <_dtoa_r+0xc64>
8000d708:	9f 0f 0a 80 	jned %d15,0,8000d71c <_dtoa_r+0xc60>
8000d70c:	58 02       	ld.w %d15,[%sp]8
8000d70e:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d712:	c2 1f       	add %d15,1
8000d714:	78 02       	st.w [%sp]8,%d15
8000d716:	da 31       	mov %d15,49
8000d718:	2c 30       	st.b [%a3]0,%d15
8000d71a:	3c 10       	j 8000d73a <_dtoa_r+0xc7e>
8000d71c:	80 3e       	mov.d %d14,%a3
8000d71e:	3c ed       	j 8000d6f8 <_dtoa_r+0xc3c>
8000d720:	c2 13       	add %d3,1
8000d722:	34 33       	st.b [%a3],%d3
8000d724:	3c 0b       	j 8000d73a <_dtoa_r+0xc7e>
8000d726:	60 e2       	mov.a %a2,%d14
8000d728:	60 e3       	mov.a %a3,%d14
8000d72a:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d72e:	b0 f3       	add.a %a3,-1
8000d730:	8b 0f 03 f2 	eq %d15,%d15,48
8000d734:	6e 03       	jz %d15,8000d73a <_dtoa_r+0xc7e>
8000d736:	80 3e       	mov.d %d14,%a3
8000d738:	3c f7       	j 8000d726 <_dtoa_r+0xc6a>
8000d73a:	40 d4       	mov.aa %a4,%a13
8000d73c:	40 c5       	mov.aa %a5,%a12
8000d73e:	6d 00 73 00 	call 8000d824 <_Bfree>
8000d742:	df 08 13 00 	jeq %d8,0,8000d768 <_dtoa_r+0xcac>
8000d746:	80 f2       	mov.d %d2,%a15
8000d748:	8b 02 20 f2 	ne %d15,%d2,0
8000d74c:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000d750:	6e 05       	jz %d15,8000d75a <_dtoa_r+0xc9e>
8000d752:	40 d4       	mov.aa %a4,%a13
8000d754:	40 f5       	mov.aa %a5,%a15
8000d756:	6d 00 67 00 	call 8000d824 <_Bfree>
8000d75a:	60 85       	mov.a %a5,%d8
8000d75c:	40 d4       	mov.aa %a4,%a13
8000d75e:	6d 00 63 00 	call 8000d824 <_Bfree>
8000d762:	3c 03       	j 8000d768 <_dtoa_r+0xcac>
8000d764:	58 0c       	ld.w %d15,[%sp]48
8000d766:	78 02       	st.w [%sp]8,%d15
8000d768:	40 d4       	mov.aa %a4,%a13
8000d76a:	40 e5       	mov.aa %a5,%a14
8000d76c:	6d 00 5c 00 	call 8000d824 <_Bfree>
8000d770:	60 e2       	mov.a %a2,%d14
8000d772:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d776:	99 a3 08 10 	ld.a %a3,[%sp]72
8000d77a:	82 0f       	mov %d15,0
8000d77c:	d8 0e       	ld.a %a15,[%sp]56
8000d77e:	2c 20       	st.b [%a2]0,%d15
8000d780:	c2 12       	add %d2,1
8000d782:	74 32       	st.w [%a3],%d2
8000d784:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d788:	bc f2       	jz.a %a15,8000d78c <_dtoa_r+0xcd0>
8000d78a:	68 0e       	st.w [%a15]0,%d14
8000d78c:	00 90       	ret 
	...

8000d790 <_localeconv_r>:
8000d790:	91 00 00 28 	movh.a %a2,32768
8000d794:	d9 22 f0 d0 	lea %a2,[%a2]3952 <80000f70 <lconv>>
8000d798:	00 90       	ret 

8000d79a <memchr>:
8000d79a:	8f f4 0f 41 	and %d4,%d4,255
8000d79e:	9f 05 04 80 	jned %d5,0,8000d7a6 <memchr+0xc>
8000d7a2:	a0 02       	mov.a %a2,0
8000d7a4:	00 90       	ret 
8000d7a6:	0c 40       	ld.bu %d15,[%a4]0
8000d7a8:	3e 43       	jeq %d15,%d4,8000d7ae <memchr+0x14>
8000d7aa:	b0 14       	add.a %a4,1
8000d7ac:	3c f9       	j 8000d79e <memchr+0x4>
8000d7ae:	40 42       	mov.aa %a2,%a4
8000d7b0:	00 90       	ret 

8000d7b2 <memcpy>:
8000d7b2:	40 42       	mov.aa %a2,%a4
8000d7b4:	a0 0f       	mov.a %a15,0
8000d7b6:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d7ba:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d7be:	9f 04 03 80 	jned %d4,0,8000d7c4 <memcpy+0x12>
8000d7c2:	00 90       	ret 
8000d7c4:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d7c8:	b0 1f       	add.a %a15,1
8000d7ca:	2c 40       	st.b [%a4]0,%d15
8000d7cc:	3c f5       	j 8000d7b6 <memcpy+0x4>

8000d7ce <_Balloc>:
8000d7ce:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d7d2:	40 4f       	mov.aa %a15,%a4
8000d7d4:	02 4f       	mov %d15,%d4
8000d7d6:	76 29       	jz %d2,8000d7e8 <_Balloc+0x1a>
8000d7d8:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d7dc:	90 33       	addsc.a %a3,%a3,%d15,2
8000d7de:	d4 32       	ld.a %a2,[%a3]
8000d7e0:	bc 2f       	jz.a %a2,8000d7fe <_Balloc+0x30>
8000d7e2:	4c 20       	ld.w %d15,[%a2]0
8000d7e4:	6c 30       	st.w [%a3]0,%d15
8000d7e6:	3c 1b       	j 8000d81c <_Balloc+0x4e>
8000d7e8:	82 44       	mov %d4,4
8000d7ea:	3b 10 02 50 	mov %d5,33
8000d7ee:	6d 00 5c 03 	call 8000dea6 <_calloc_r>
8000d7f2:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d7f6:	bd 02 f1 ff 	jnz.a %a2,8000d7d8 <_Balloc+0xa>
8000d7fa:	a0 02       	mov.a %a2,0
8000d7fc:	00 90       	ret 
8000d7fe:	82 18       	mov %d8,1
8000d800:	0f f8 00 80 	sh %d8,%d8,%d15
8000d804:	1b 58 00 50 	addi %d5,%d8,5
8000d808:	40 f4       	mov.aa %a4,%a15
8000d80a:	82 14       	mov %d4,1
8000d80c:	06 25       	sh %d5,2
8000d80e:	6d 00 4c 03 	call 8000dea6 <_calloc_r>
8000d812:	bd 02 f4 7f 	jz.a %a2,8000d7fa <_Balloc+0x2c>
8000d816:	6c 21       	st.w [%a2]4,%d15
8000d818:	59 28 08 00 	st.w [%a2]8,%d8
8000d81c:	82 0f       	mov %d15,0
8000d81e:	6c 24       	st.w [%a2]16,%d15
8000d820:	6c 23       	st.w [%a2]12,%d15
8000d822:	00 90       	ret 

8000d824 <_Bfree>:
8000d824:	bc 58       	jz.a %a5,8000d834 <_Bfree+0x10>
8000d826:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d82a:	4c 51       	ld.w %d15,[%a5]4
8000d82c:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d82e:	4c f0       	ld.w %d15,[%a15]0
8000d830:	6c 50       	st.w [%a5]0,%d15
8000d832:	e8 05       	st.a [%a15]0,%a5
8000d834:	00 90       	ret 

8000d836 <__multadd>:
8000d836:	19 59 10 00 	ld.w %d9,[%a5]16
8000d83a:	40 4c       	mov.aa %a12,%a4
8000d83c:	9a f9       	add %d15,%d9,-1
8000d83e:	8b 19 80 22 	ge %d2,%d9,1
8000d842:	40 5f       	mov.aa %a15,%a5
8000d844:	02 58       	mov %d8,%d5
8000d846:	d9 53 14 00 	lea %a3,[%a5]20
8000d84a:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d84e:	40 32       	mov.aa %a2,%a3
8000d850:	44 25       	ld.w %d5,[%a2+]
8000d852:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d856:	8f 05 1f f0 	sh %d15,%d5,-16
8000d85a:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d85e:	8f 03 1f 60 	sh %d6,%d3,-16
8000d862:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d866:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d86a:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d86e:	74 33       	st.w [%a3],%d3
8000d870:	40 23       	mov.aa %a3,%a2
8000d872:	9f 02 ee ff 	jned %d2,0,8000d84e <__multadd+0x18>
8000d876:	df 08 1f 00 	jeq %d8,0,8000d8b4 <__multadd+0x7e>
8000d87a:	4c f2       	ld.w %d15,[%a15]8
8000d87c:	3f f9 16 00 	jlt %d9,%d15,8000d8a8 <__multadd+0x72>
8000d880:	48 14       	ld.w %d4,[%a15]4
8000d882:	40 c4       	mov.aa %a4,%a12
8000d884:	c2 14       	add %d4,1
8000d886:	6d ff a4 ff 	call 8000d7ce <_Balloc>
8000d88a:	48 44       	ld.w %d4,[%a15]16
8000d88c:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d890:	c2 24       	add %d4,2
8000d892:	d9 24 0c 00 	lea %a4,[%a2]12
8000d896:	06 24       	sh %d4,2
8000d898:	40 2d       	mov.aa %a13,%a2
8000d89a:	6d ff 8c ff 	call 8000d7b2 <memcpy>
8000d89e:	40 f5       	mov.aa %a5,%a15
8000d8a0:	40 c4       	mov.aa %a4,%a12
8000d8a2:	6d ff c1 ff 	call 8000d824 <_Bfree>
8000d8a6:	40 df       	mov.aa %a15,%a13
8000d8a8:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d8ac:	c2 19       	add %d9,1
8000d8ae:	59 28 14 00 	st.w [%a2]20,%d8
8000d8b2:	68 49       	st.w [%a15]16,%d9
8000d8b4:	40 f2       	mov.aa %a2,%a15
8000d8b6:	00 90       	ret 

8000d8b8 <__hi0bits>:
8000d8b8:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d8bc:	82 02       	mov %d2,0
8000d8be:	ee 05       	jnz %d15,8000d8c8 <__hi0bits+0x10>
8000d8c0:	8f 04 01 40 	sh %d4,%d4,16
8000d8c4:	3b 00 01 20 	mov %d2,16
8000d8c8:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d8cc:	ee 05       	jnz %d15,8000d8d6 <__hi0bits+0x1e>
8000d8ce:	1b 82 00 20 	addi %d2,%d2,8
8000d8d2:	8f 84 00 40 	sh %d4,%d4,8
8000d8d6:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d8da:	ee 03       	jnz %d15,8000d8e0 <__hi0bits+0x28>
8000d8dc:	c2 42       	add %d2,4
8000d8de:	06 44       	sh %d4,4
8000d8e0:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d8e4:	ee 03       	jnz %d15,8000d8ea <__hi0bits+0x32>
8000d8e6:	c2 22       	add %d2,2
8000d8e8:	06 24       	sh %d4,2
8000d8ea:	0e 47       	jltz %d4,8000d8f8 <__hi0bits+0x40>
8000d8ec:	7b 00 00 f4 	movh %d15,16384
8000d8f0:	26 f4       	and %d4,%d15
8000d8f2:	c2 12       	add %d2,1
8000d8f4:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d8f8:	00 90       	ret 

8000d8fa <__lo0bits>:
8000d8fa:	54 43       	ld.w %d3,[%a4]
8000d8fc:	8f 73 00 f1 	and %d15,%d3,7
8000d900:	6e 0e       	jz %d15,8000d91c <__lo0bits+0x22>
8000d902:	82 02       	mov %d2,0
8000d904:	6f 03 2d 80 	jnz.t %d3,0,8000d95e <__lo0bits+0x64>
8000d908:	6f 13 06 00 	jz.t %d3,1,8000d914 <__lo0bits+0x1a>
8000d90c:	06 f3       	sh %d3,-1
8000d90e:	74 43       	st.w [%a4],%d3
8000d910:	82 12       	mov %d2,1
8000d912:	00 90       	ret 
8000d914:	06 e3       	sh %d3,-2
8000d916:	74 43       	st.w [%a4],%d3
8000d918:	82 22       	mov %d2,2
8000d91a:	00 90       	ret 
8000d91c:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000d920:	82 04       	mov %d4,0
8000d922:	ee 05       	jnz %d15,8000d92c <__lo0bits+0x32>
8000d924:	8f 03 1f 30 	sh %d3,%d3,-16
8000d928:	3b 00 01 40 	mov %d4,16
8000d92c:	02 3f       	mov %d15,%d3
8000d92e:	16 ff       	and %d15,255
8000d930:	ee 04       	jnz %d15,8000d938 <__lo0bits+0x3e>
8000d932:	1b 84 00 40 	addi %d4,%d4,8
8000d936:	06 83       	sh %d3,-8
8000d938:	8f f3 00 f1 	and %d15,%d3,15
8000d93c:	ee 03       	jnz %d15,8000d942 <__lo0bits+0x48>
8000d93e:	c2 44       	add %d4,4
8000d940:	06 c3       	sh %d3,-4
8000d942:	8f 33 00 f1 	and %d15,%d3,3
8000d946:	ee 03       	jnz %d15,8000d94c <__lo0bits+0x52>
8000d948:	c2 24       	add %d4,2
8000d94a:	06 e3       	sh %d3,-2
8000d94c:	6f 03 07 80 	jnz.t %d3,0,8000d95a <__lo0bits+0x60>
8000d950:	06 f3       	sh %d3,-1
8000d952:	3b 00 02 20 	mov %d2,32
8000d956:	76 34       	jz %d3,8000d95e <__lo0bits+0x64>
8000d958:	c2 14       	add %d4,1
8000d95a:	74 43       	st.w [%a4],%d3
8000d95c:	02 42       	mov %d2,%d4
8000d95e:	00 90       	ret 

8000d960 <__i2b>:
8000d960:	02 4f       	mov %d15,%d4
8000d962:	82 14       	mov %d4,1
8000d964:	6d ff 35 ff 	call 8000d7ce <_Balloc>
8000d968:	6c 25       	st.w [%a2]20,%d15
8000d96a:	82 1f       	mov %d15,1
8000d96c:	6c 24       	st.w [%a2]16,%d15
8000d96e:	00 90       	ret 

8000d970 <__multiply>:
8000d970:	19 52 10 00 	ld.w %d2,[%a5]16
8000d974:	4c 64       	ld.w %d15,[%a6]16
8000d976:	40 5f       	mov.aa %a15,%a5
8000d978:	40 6c       	mov.aa %a12,%a6
8000d97a:	7f f2 04 00 	jge %d2,%d15,8000d982 <__multiply+0x12>
8000d97e:	40 6f       	mov.aa %a15,%a6
8000d980:	40 5c       	mov.aa %a12,%a5
8000d982:	48 4a       	ld.w %d10,[%a15]16
8000d984:	19 c9 10 00 	ld.w %d9,[%a12]16
8000d988:	4c f2       	ld.w %d15,[%a15]8
8000d98a:	0b 9a 00 80 	add %d8,%d10,%d9
8000d98e:	48 12       	ld.w %d2,[%a15]4
8000d990:	0b 8f 20 41 	lt %d4,%d15,%d8
8000d994:	42 24       	add %d4,%d2
8000d996:	6d ff 1c ff 	call 8000d7ce <_Balloc>
8000d99a:	d9 23 14 00 	lea %a3,[%a2]20
8000d99e:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000d9a2:	40 34       	mov.aa %a4,%a3
8000d9a4:	82 0f       	mov %d15,0
8000d9a6:	80 43       	mov.d %d3,%a4
8000d9a8:	80 d2       	mov.d %d2,%a13
8000d9aa:	7f 23 04 80 	jge.u %d3,%d2,8000d9b2 <__multiply+0x42>
8000d9ae:	64 4f       	st.w [%a4+],%d15
8000d9b0:	3c fb       	j 8000d9a6 <__multiply+0x36>
8000d9b2:	d9 ff 14 00 	lea %a15,[%a15]20
8000d9b6:	d9 cc 14 00 	lea %a12,[%a12]20
8000d9ba:	80 f3       	mov.d %d3,%a15
8000d9bc:	80 cf       	mov.d %d15,%a12
8000d9be:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000d9c2:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000d9c6:	80 c2       	mov.d %d2,%a12
8000d9c8:	7f 02 54 80 	jge.u %d2,%d0,8000da70 <__multiply+0x100>
8000d9cc:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000d9d0:	40 34       	mov.aa %a4,%a3
8000d9d2:	40 f6       	mov.aa %a6,%a15
8000d9d4:	82 03       	mov %d3,0
8000d9d6:	df 02 21 00 	jeq %d2,0,8000da18 <__multiply+0xa8>
8000d9da:	40 45       	mov.aa %a5,%a4
8000d9dc:	44 67       	ld.w %d7,[%a6+]
8000d9de:	44 56       	ld.w %d6,[%a5+]
8000d9e0:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000d9e4:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000d9e8:	8f 07 1f 70 	sh %d7,%d7,-16
8000d9ec:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000d9f0:	8f 06 1f 60 	sh %d6,%d6,-16
8000d9f4:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000d9f8:	42 35       	add %d5,%d3
8000d9fa:	8f 05 1f 30 	sh %d3,%d5,-16
8000d9fe:	1a 36       	add %d15,%d6,%d3
8000da00:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000da04:	8f 0f 1f 30 	sh %d3,%d15,-16
8000da08:	80 6f       	mov.d %d15,%a6
8000da0a:	74 45       	st.w [%a4],%d5
8000da0c:	7f 4f 04 80 	jge.u %d15,%d4,8000da14 <__multiply+0xa4>
8000da10:	40 54       	mov.aa %a4,%a5
8000da12:	3c e4       	j 8000d9da <__multiply+0x6a>
8000da14:	59 43 04 00 	st.w [%a4]4,%d3
8000da18:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000da1c:	df 02 27 00 	jeq %d2,0,8000da6a <__multiply+0xfa>
8000da20:	54 33       	ld.w %d3,[%a3]
8000da22:	40 34       	mov.aa %a4,%a3
8000da24:	40 f5       	mov.aa %a5,%a15
8000da26:	82 07       	mov %d7,0
8000da28:	40 56       	mov.aa %a6,%a5
8000da2a:	44 66       	ld.w %d6,[%a6+]
8000da2c:	40 47       	mov.aa %a7,%a4
8000da2e:	44 75       	ld.w %d5,[%a7+]
8000da30:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000da34:	8f 05 1f 50 	sh %d5,%d5,-16
8000da38:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000da3c:	42 7f       	add %d15,%d7
8000da3e:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000da42:	8f 0f 1f f0 	sh %d15,%d15,-16
8000da46:	74 43       	st.w [%a4],%d3
8000da48:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000da4c:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000da50:	40 65       	mov.aa %a5,%a6
8000da52:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000da56:	42 f3       	add %d3,%d15
8000da58:	80 6f       	mov.d %d15,%a6
8000da5a:	8f 03 1f 70 	sh %d7,%d3,-16
8000da5e:	7f 4f 04 80 	jge.u %d15,%d4,8000da66 <__multiply+0xf6>
8000da62:	40 74       	mov.aa %a4,%a7
8000da64:	3c e2       	j 8000da28 <__multiply+0xb8>
8000da66:	59 43 04 00 	st.w [%a4]4,%d3
8000da6a:	b0 4c       	add.a %a12,4
8000da6c:	b0 43       	add.a %a3,4
8000da6e:	3c ac       	j 8000d9c6 <__multiply+0x56>
8000da70:	8b 08 40 f3 	max %d15,%d8,0
8000da74:	9f 0f 05 80 	jned %d15,0,8000da7e <__multiply+0x10e>
8000da78:	59 28 10 00 	st.w [%a2]16,%d8
8000da7c:	00 90       	ret 
8000da7e:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000da82:	df 02 fb ff 	jne %d2,0,8000da78 <__multiply+0x108>
8000da86:	c2 f8       	add %d8,-1
8000da88:	3c f6       	j 8000da74 <__multiply+0x104>

8000da8a <__pow5mult>:
8000da8a:	8f 34 00 21 	and %d2,%d4,3
8000da8e:	40 4c       	mov.aa %a12,%a4
8000da90:	40 5d       	mov.aa %a13,%a5
8000da92:	02 4f       	mov %d15,%d4
8000da94:	76 2d       	jz %d2,8000daae <__pow5mult+0x24>
8000da96:	91 00 00 f8 	movh.a %a15,32768
8000da9a:	d9 ff e8 e0 	lea %a15,[%a15]4008 <80000fa8 <p05.2553>>
8000da9e:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000daa2:	82 05       	mov %d5,0
8000daa4:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000daa8:	6d ff c7 fe 	call 8000d836 <__multadd>
8000daac:	40 2d       	mov.aa %a13,%a2
8000daae:	86 ef       	sha %d15,-2
8000dab0:	6e 29       	jz %d15,8000db02 <__pow5mult+0x78>
8000dab2:	99 cf 08 10 	ld.a %a15,[%a12]72
8000dab6:	7c fb       	jnz.a %a15,8000dacc <__pow5mult+0x42>
8000dab8:	40 c4       	mov.aa %a4,%a12
8000daba:	3b 10 27 40 	mov %d4,625
8000dabe:	6d ff 51 ff 	call 8000d960 <__i2b>
8000dac2:	82 02       	mov %d2,0
8000dac4:	b5 c2 08 10 	st.a [%a12]72,%a2
8000dac8:	40 2f       	mov.aa %a15,%a2
8000daca:	74 22       	st.w [%a2],%d2
8000dacc:	82 08       	mov %d8,0
8000dace:	2e 0c       	jz.t %d15,0,8000dae6 <__pow5mult+0x5c>
8000dad0:	40 d5       	mov.aa %a5,%a13
8000dad2:	40 c4       	mov.aa %a4,%a12
8000dad4:	40 f6       	mov.aa %a6,%a15
8000dad6:	6d ff 4d ff 	call 8000d970 <__multiply>
8000dada:	40 d5       	mov.aa %a5,%a13
8000dadc:	40 2e       	mov.aa %a14,%a2
8000dade:	40 c4       	mov.aa %a4,%a12
8000dae0:	6d ff a2 fe 	call 8000d824 <_Bfree>
8000dae4:	40 ed       	mov.aa %a13,%a14
8000dae6:	86 ff       	sha %d15,-1
8000dae8:	6e 0d       	jz %d15,8000db02 <__pow5mult+0x78>
8000daea:	c8 02       	ld.a %a2,[%a15]0
8000daec:	bc 23       	jz.a %a2,8000daf2 <__pow5mult+0x68>
8000daee:	40 2f       	mov.aa %a15,%a2
8000daf0:	3c ef       	j 8000dace <__pow5mult+0x44>
8000daf2:	40 c4       	mov.aa %a4,%a12
8000daf4:	40 f5       	mov.aa %a5,%a15
8000daf6:	40 f6       	mov.aa %a6,%a15
8000daf8:	6d ff 3c ff 	call 8000d970 <__multiply>
8000dafc:	e8 02       	st.a [%a15]0,%a2
8000dafe:	74 28       	st.w [%a2],%d8
8000db00:	3c f7       	j 8000daee <__pow5mult+0x64>
8000db02:	40 d2       	mov.aa %a2,%a13
8000db04:	00 90       	ret 

8000db06 <__lshift>:
8000db06:	19 5b 10 00 	ld.w %d11,[%a5]16
8000db0a:	8f b4 3f 80 	sha %d8,%d4,-5
8000db0e:	02 4a       	mov %d10,%d4
8000db10:	42 8b       	add %d11,%d8
8000db12:	19 54 04 00 	ld.w %d4,[%a5]4
8000db16:	4c 52       	ld.w %d15,[%a5]8
8000db18:	40 4e       	mov.aa %a14,%a4
8000db1a:	40 5c       	mov.aa %a12,%a5
8000db1c:	1b 1b 00 90 	addi %d9,%d11,1
8000db20:	7f 9f 05 00 	jge %d15,%d9,8000db2a <__lshift+0x24>
8000db24:	c2 14       	add %d4,1
8000db26:	06 1f       	sh %d15,1
8000db28:	3c fc       	j 8000db20 <__lshift+0x1a>
8000db2a:	40 e4       	mov.aa %a4,%a14
8000db2c:	6d ff 51 fe 	call 8000d7ce <_Balloc>
8000db30:	8b 08 40 f3 	max %d15,%d8,0
8000db34:	40 2d       	mov.aa %a13,%a2
8000db36:	d9 2f 14 00 	lea %a15,[%a2]20
8000db3a:	d2 02       	mov %e2,0
8000db3c:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000db40:	9f 0f 03 80 	jned %d15,0,8000db46 <__lshift+0x40>
8000db44:	3c 04       	j 8000db4c <__lshift+0x46>
8000db46:	74 23       	st.w [%a2],%d3
8000db48:	c2 12       	add %d2,1
8000db4a:	3c f9       	j 8000db3c <__lshift+0x36>
8000db4c:	8b 08 40 83 	max %d8,%d8,0
8000db50:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000db54:	d9 cf 14 00 	lea %a15,[%a12]20
8000db58:	19 c2 10 00 	ld.w %d2,[%a12]16
8000db5c:	80 f3       	mov.d %d3,%a15
8000db5e:	8f fa 01 41 	and %d4,%d10,31
8000db62:	13 42 20 23 	madd %d2,%d3,%d2,4
8000db66:	8b 04 02 51 	rsub %d5,%d4,32
8000db6a:	82 0f       	mov %d15,0
8000db6c:	df 04 1a 00 	jeq %d4,0,8000dba0 <__lshift+0x9a>
8000db70:	40 f5       	mov.aa %a5,%a15
8000db72:	44 53       	ld.w %d3,[%a5+]
8000db74:	d9 32 04 00 	lea %a2,[%a3]4
8000db78:	0f 43 00 30 	sh %d3,%d3,%d4
8000db7c:	a6 3f       	or %d15,%d3
8000db7e:	6c 30       	st.w [%a3]0,%d15
8000db80:	4c f0       	ld.w %d15,[%a15]0
8000db82:	8b 05 00 31 	rsub %d3,%d5,0
8000db86:	0f 3f 00 30 	sh %d3,%d15,%d3
8000db8a:	02 3f       	mov %d15,%d3
8000db8c:	80 53       	mov.d %d3,%a5
8000db8e:	40 5f       	mov.aa %a15,%a5
8000db90:	7f 23 04 80 	jge.u %d3,%d2,8000db98 <__lshift+0x92>
8000db94:	40 23       	mov.aa %a3,%a2
8000db96:	3c ed       	j 8000db70 <__lshift+0x6a>
8000db98:	c2 2b       	add %d11,2
8000db9a:	6c 31       	st.w [%a3]4,%d15
8000db9c:	2a b9       	cmov %d9,%d15,%d11
8000db9e:	3c 08       	j 8000dbae <__lshift+0xa8>
8000dba0:	4c f0       	ld.w %d15,[%a15]0
8000dba2:	b0 4f       	add.a %a15,4
8000dba4:	80 f3       	mov.d %d3,%a15
8000dba6:	6c 30       	st.w [%a3]0,%d15
8000dba8:	b0 43       	add.a %a3,4
8000dbaa:	3f 23 fb ff 	jlt.u %d3,%d2,8000dba0 <__lshift+0x9a>
8000dbae:	c2 f9       	add %d9,-1
8000dbb0:	59 d9 10 00 	st.w [%a13]16,%d9
8000dbb4:	40 e4       	mov.aa %a4,%a14
8000dbb6:	40 c5       	mov.aa %a5,%a12
8000dbb8:	6d ff 36 fe 	call 8000d824 <_Bfree>
8000dbbc:	40 d2       	mov.aa %a2,%a13
8000dbbe:	00 90       	ret 

8000dbc0 <__mcmp>:
8000dbc0:	4c 54       	ld.w %d15,[%a5]16
8000dbc2:	19 42 10 00 	ld.w %d2,[%a4]16
8000dbc6:	a2 f2       	sub %d2,%d15
8000dbc8:	df 02 1c 80 	jne %d2,0,8000dc00 <__mcmp+0x40>
8000dbcc:	80 42       	mov.d %d2,%a4
8000dbce:	06 2f       	sh %d15,2
8000dbd0:	60 f2       	mov.a %a2,%d15
8000dbd2:	1b 42 01 30 	addi %d3,%d2,20
8000dbd6:	d9 55 14 00 	lea %a5,[%a5]20
8000dbda:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000dbde:	30 25       	add.a %a5,%a2
8000dbe0:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000dbe4:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000dbe8:	5f f2 08 00 	jeq %d2,%d15,8000dbf8 <__mcmp+0x38>
8000dbec:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000dbf0:	82 f3       	mov %d3,-1
8000dbf2:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000dbf6:	00 90       	ret 
8000dbf8:	80 ff       	mov.d %d15,%a15
8000dbfa:	3f f3 f3 ff 	jlt.u %d3,%d15,8000dbe0 <__mcmp+0x20>
8000dbfe:	82 02       	mov %d2,0
8000dc00:	00 90       	ret 

8000dc02 <__mdiff>:
8000dc02:	40 4d       	mov.aa %a13,%a4
8000dc04:	40 5f       	mov.aa %a15,%a5
8000dc06:	40 54       	mov.aa %a4,%a5
8000dc08:	40 65       	mov.aa %a5,%a6
8000dc0a:	40 6c       	mov.aa %a12,%a6
8000dc0c:	6d ff da ff 	call 8000dbc0 <__mcmp>
8000dc10:	02 2f       	mov %d15,%d2
8000dc12:	f6 2a       	jnz %d2,8000dc26 <__mdiff+0x24>
8000dc14:	40 d4       	mov.aa %a4,%a13
8000dc16:	82 04       	mov %d4,0
8000dc18:	6d ff db fd 	call 8000d7ce <_Balloc>
8000dc1c:	82 12       	mov %d2,1
8000dc1e:	59 22 10 00 	st.w [%a2]16,%d2
8000dc22:	6c 25       	st.w [%a2]20,%d15
8000dc24:	00 90       	ret 
8000dc26:	82 08       	mov %d8,0
8000dc28:	ce 25       	jgez %d2,8000dc32 <__mdiff+0x30>
8000dc2a:	40 f2       	mov.aa %a2,%a15
8000dc2c:	82 18       	mov %d8,1
8000dc2e:	40 cf       	mov.aa %a15,%a12
8000dc30:	40 2c       	mov.aa %a12,%a2
8000dc32:	40 d4       	mov.aa %a4,%a13
8000dc34:	48 14       	ld.w %d4,[%a15]4
8000dc36:	6d ff cc fd 	call 8000d7ce <_Balloc>
8000dc3a:	48 42       	ld.w %d2,[%a15]16
8000dc3c:	d9 ff 14 00 	lea %a15,[%a15]20
8000dc40:	80 ff       	mov.d %d15,%a15
8000dc42:	d9 c4 14 00 	lea %a4,[%a12]20
8000dc46:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000dc4a:	19 c0 10 00 	ld.w %d0,[%a12]16
8000dc4e:	80 4f       	mov.d %d15,%a4
8000dc50:	59 28 0c 00 	st.w [%a2]12,%d8
8000dc54:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000dc58:	d9 25 14 00 	lea %a5,[%a2]20
8000dc5c:	82 03       	mov %d3,0
8000dc5e:	44 f6       	ld.w %d6,[%a15+]
8000dc60:	44 45       	ld.w %d5,[%a4+]
8000dc62:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000dc66:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000dc6a:	42 34       	add %d4,%d3
8000dc6c:	a2 14       	sub %d4,%d1
8000dc6e:	8f 06 1f 60 	sh %d6,%d6,-16
8000dc72:	8f 05 1f 50 	sh %d5,%d5,-16
8000dc76:	8f 04 3f 30 	sha %d3,%d4,-16
8000dc7a:	0b 56 80 50 	sub %d5,%d6,%d5
8000dc7e:	1a 35       	add %d15,%d5,%d3
8000dc80:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000dc84:	8f 0f 3f 30 	sha %d3,%d15,-16
8000dc88:	80 4f       	mov.d %d15,%a4
8000dc8a:	d9 53 04 00 	lea %a3,[%a5]4
8000dc8e:	74 54       	st.w [%a5],%d4
8000dc90:	40 35       	mov.aa %a5,%a3
8000dc92:	3f 0f e6 ff 	jlt.u %d15,%d0,8000dc5e <__mdiff+0x5c>
8000dc96:	80 ff       	mov.d %d15,%a15
8000dc98:	7f 7f 12 80 	jge.u %d15,%d7,8000dcbc <__mdiff+0xba>
8000dc9c:	44 f5       	ld.w %d5,[%a15+]
8000dc9e:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000dca2:	8f 05 1f 50 	sh %d5,%d5,-16
8000dca6:	42 34       	add %d4,%d3
8000dca8:	8f 04 3f f0 	sha %d15,%d4,-16
8000dcac:	42 5f       	add %d15,%d5
8000dcae:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000dcb2:	8f 0f 3f 30 	sha %d3,%d15,-16
8000dcb6:	74 34       	st.w [%a3],%d4
8000dcb8:	b0 43       	add.a %a3,4
8000dcba:	3c ee       	j 8000dc96 <__mdiff+0x94>
8000dcbc:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000dcc0:	ee 03       	jnz %d15,8000dcc6 <__mdiff+0xc4>
8000dcc2:	c2 f2       	add %d2,-1
8000dcc4:	3c fc       	j 8000dcbc <__mdiff+0xba>
8000dcc6:	59 22 10 00 	st.w [%a2]16,%d2
8000dcca:	00 90       	ret 

8000dccc <__d2b>:
8000dccc:	20 08       	sub.a %sp,8
8000dcce:	02 48       	mov %d8,%d4
8000dcd0:	82 14       	mov %d4,1
8000dcd2:	02 59       	mov %d9,%d5
8000dcd4:	40 5d       	mov.aa %a13,%a5
8000dcd6:	40 6c       	mov.aa %a12,%a6
8000dcd8:	6d ff 7b fd 	call 8000d7ce <_Balloc>
8000dcdc:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000dce0:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000dce4:	40 2f       	mov.aa %a15,%a2
8000dce6:	76 93       	jz %d9,8000dcec <__d2b+0x20>
8000dce8:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000dcec:	59 a2 04 00 	st.w [%sp]4,%d2
8000dcf0:	df 08 20 00 	jeq %d8,0,8000dd30 <__d2b+0x64>
8000dcf4:	d9 a4 08 00 	lea %a4,[%sp]8
8000dcf8:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000dcfc:	40 a4       	mov.aa %a4,%sp
8000dcfe:	6d ff fe fd 	call 8000d8fa <__lo0bits>
8000dd02:	58 00       	ld.w %d15,[%sp]0
8000dd04:	76 2f       	jz %d2,8000dd22 <__d2b+0x56>
8000dd06:	19 a4 04 00 	ld.w %d4,[%sp]4
8000dd0a:	8b 02 02 31 	rsub %d3,%d2,32
8000dd0e:	0f 34 00 30 	sh %d3,%d4,%d3
8000dd12:	a6 3f       	or %d15,%d3
8000dd14:	68 5f       	st.w [%a15]20,%d15
8000dd16:	8b 02 00 f1 	rsub %d15,%d2,0
8000dd1a:	0f f4 00 f0 	sh %d15,%d4,%d15
8000dd1e:	78 01       	st.w [%sp]4,%d15
8000dd20:	3c 02       	j 8000dd24 <__d2b+0x58>
8000dd22:	68 5f       	st.w [%a15]20,%d15
8000dd24:	58 01       	ld.w %d15,[%sp]4
8000dd26:	82 28       	mov %d8,2
8000dd28:	ea 18       	cmovn %d8,%d15,1
8000dd2a:	68 6f       	st.w [%a15]24,%d15
8000dd2c:	68 48       	st.w [%a15]16,%d8
8000dd2e:	3c 0c       	j 8000dd46 <__d2b+0x7a>
8000dd30:	d9 a4 04 00 	lea %a4,[%sp]4
8000dd34:	6d ff e3 fd 	call 8000d8fa <__lo0bits>
8000dd38:	58 01       	ld.w %d15,[%sp]4
8000dd3a:	1b 02 02 20 	addi %d2,%d2,32
8000dd3e:	68 5f       	st.w [%a15]20,%d15
8000dd40:	82 1f       	mov %d15,1
8000dd42:	68 4f       	st.w [%a15]16,%d15
8000dd44:	82 18       	mov %d8,1
8000dd46:	76 98       	jz %d9,8000dd56 <__d2b+0x8a>
8000dd48:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000dd4c:	42 29       	add %d9,%d2
8000dd4e:	74 d9       	st.w [%a13],%d9
8000dd50:	8b 52 03 21 	rsub %d2,%d2,53
8000dd54:	3c 0d       	j 8000dd6e <__d2b+0xa2>
8000dd56:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000dd5a:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000dd5e:	74 d2       	st.w [%a13],%d2
8000dd60:	19 24 10 00 	ld.w %d4,[%a2]16
8000dd64:	6d ff aa fd 	call 8000d8b8 <__hi0bits>
8000dd68:	06 58       	sh %d8,5
8000dd6a:	0b 28 80 20 	sub %d2,%d8,%d2
8000dd6e:	74 c2       	st.w [%a12],%d2
8000dd70:	40 f2       	mov.aa %a2,%a15
8000dd72:	00 90       	ret 

8000dd74 <__fpclassifyd>:
8000dd74:	0f 45 a0 f0 	or %d15,%d5,%d4
8000dd78:	82 22       	mov %d2,2
8000dd7a:	6e 1d       	jz %d15,8000ddb4 <__fpclassifyd+0x40>
8000dd7c:	7b 00 00 38 	movh %d3,32768
8000dd80:	3a 53       	eq %d15,%d3,%d5
8000dd82:	8b 04 00 f4 	and.eq %d15,%d4,0
8000dd86:	8b 04 00 62 	eq %d6,%d4,0
8000dd8a:	ee 15       	jnz %d15,8000ddb4 <__fpclassifyd+0x40>
8000dd8c:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000dd90:	7b 00 fe f7 	movh %d15,32736
8000dd94:	9b 05 ff 3f 	addih %d3,%d5,65520
8000dd98:	82 42       	mov %d2,4
8000dd9a:	3f f3 0d 80 	jlt.u %d3,%d15,8000ddb4 <__fpclassifyd+0x40>
8000dd9e:	7b 00 01 f0 	movh %d15,16
8000dda2:	82 32       	mov %d2,3
8000dda4:	3f f5 08 80 	jlt.u %d5,%d15,8000ddb4 <__fpclassifyd+0x40>
8000dda8:	7b 00 ff 27 	movh %d2,32752
8000ddac:	0b 25 00 51 	eq %d5,%d5,%d2
8000ddb0:	0f 56 80 20 	and %d2,%d6,%d5
8000ddb4:	00 90       	ret 

8000ddb6 <__ssprint_r>:
8000ddb6:	4c 62       	ld.w %d15,[%a6]8
8000ddb8:	20 08       	sub.a %sp,8
8000ddba:	40 4e       	mov.aa %a14,%a4
8000ddbc:	40 5f       	mov.aa %a15,%a5
8000ddbe:	40 6c       	mov.aa %a12,%a6
8000ddc0:	54 6c       	ld.w %d12,[%a6]
8000ddc2:	6e 30       	jz %d15,8000de22 <__ssprint_r+0x6c>
8000ddc4:	a0 02       	mov.a %a2,0
8000ddc6:	b5 a2 04 00 	st.a [%sp]4,%a2
8000ddca:	82 09       	mov %d9,0
8000ddcc:	3b 00 48 e0 	mov %d14,1152
8000ddd0:	3b f0 b7 df 	mov %d13,-1153
8000ddd4:	3c 0a       	j 8000dde8 <__ssprint_r+0x32>
8000ddd6:	60 c2       	mov.a %a2,%d12
8000ddd8:	d4 22       	ld.a %a2,[%a2]
8000ddda:	b5 a2 04 00 	st.a [%sp]4,%a2
8000ddde:	60 c2       	mov.a %a2,%d12
8000dde0:	1b 8c 00 c0 	addi %d12,%d12,8
8000dde4:	19 29 04 00 	ld.w %d9,[%a2]4
8000dde8:	df 09 f7 7f 	jeq %d9,0,8000ddd6 <__ssprint_r+0x20>
8000ddec:	48 28       	ld.w %d8,[%a15]8
8000ddee:	3f 89 5a 80 	jlt.u %d9,%d8,8000dea2 <__ssprint_r+0xec>
8000ddf2:	88 62       	ld.h %d2,[%a15]12
8000ddf4:	0f e2 80 f0 	and %d15,%d2,%d14
8000ddf8:	ee 19       	jnz %d15,8000de2a <__ssprint_r+0x74>
8000ddfa:	3f 89 54 80 	jlt.u %d9,%d8,8000dea2 <__ssprint_r+0xec>
8000ddfe:	c8 04       	ld.a %a4,[%a15]0
8000de00:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000de04:	02 84       	mov %d4,%d8
8000de06:	6d 00 81 00 	call 8000df08 <memmove>
8000de0a:	4c f2       	ld.w %d15,[%a15]8
8000de0c:	a2 8f       	sub %d15,%d8
8000de0e:	68 2f       	st.w [%a15]8,%d15
8000de10:	4c f0       	ld.w %d15,[%a15]0
8000de12:	42 f8       	add %d8,%d15
8000de14:	4c c2       	ld.w %d15,[%a12]8
8000de16:	68 08       	st.w [%a15]0,%d8
8000de18:	52 99       	sub %d9,%d15,%d9
8000de1a:	59 c9 08 00 	st.w [%a12]8,%d9
8000de1e:	df 09 dc ff 	jne %d9,0,8000ddd6 <__ssprint_r+0x20>
8000de22:	82 0f       	mov %d15,0
8000de24:	6c c1       	st.w [%a12]4,%d15
8000de26:	82 02       	mov %d2,0
8000de28:	00 90       	ret 
8000de2a:	c8 45       	ld.a %a5,[%a15]16
8000de2c:	48 5a       	ld.w %d10,[%a15]20
8000de2e:	4c f0       	ld.w %d15,[%a15]0
8000de30:	80 53       	mov.d %d3,%a5
8000de32:	53 3a 20 a0 	mul %d10,%d10,3
8000de36:	a2 3f       	sub %d15,%d3
8000de38:	82 23       	mov %d3,2
8000de3a:	4b 3a 01 a2 	div %e10,%d10,%d3
8000de3e:	92 13       	add %d3,%d15,1
8000de40:	42 93       	add %d3,%d9
8000de42:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000de46:	40 e4       	mov.aa %a4,%a14
8000de48:	02 a4       	mov %d4,%d10
8000de4a:	6f a2 12 00 	jz.t %d2,10,8000de6e <__ssprint_r+0xb8>
8000de4e:	6d ff 0b e9 	call 8000b064 <_malloc_r>
8000de52:	40 2d       	mov.aa %a13,%a2
8000de54:	bd 02 15 00 	jz.a %a2,8000de7e <__ssprint_r+0xc8>
8000de58:	c8 45       	ld.a %a5,[%a15]16
8000de5a:	40 24       	mov.aa %a4,%a2
8000de5c:	02 f4       	mov %d4,%d15
8000de5e:	6d ff aa fc 	call 8000d7b2 <memcpy>
8000de62:	88 62       	ld.h %d2,[%a15]12
8000de64:	26 d2       	and %d2,%d13
8000de66:	8f 02 48 21 	or %d2,%d2,128
8000de6a:	a8 62       	st.h [%a15]12,%d2
8000de6c:	3c 13       	j 8000de92 <__ssprint_r+0xdc>
8000de6e:	6d 00 7d 00 	call 8000df68 <_realloc_r>
8000de72:	40 2d       	mov.aa %a13,%a2
8000de74:	7c 2f       	jnz.a %a2,8000de92 <__ssprint_r+0xdc>
8000de76:	c8 45       	ld.a %a5,[%a15]16
8000de78:	40 e4       	mov.aa %a4,%a14
8000de7a:	6d ff ea eb 	call 8000b64e <_free_r>
8000de7e:	da 0c       	mov %d15,12
8000de80:	6c e0       	st.w [%a14]0,%d15
8000de82:	8c f6       	ld.h %d15,[%a15]12
8000de84:	82 f2       	mov %d2,-1
8000de86:	96 40       	or %d15,64
8000de88:	a8 6f       	st.h [%a15]12,%d15
8000de8a:	82 0f       	mov %d15,0
8000de8c:	6c c2       	st.w [%a12]8,%d15
8000de8e:	6c c1       	st.w [%a12]4,%d15
8000de90:	00 90       	ret 
8000de92:	e8 4d       	st.a [%a15]16,%a13
8000de94:	10 dd       	addsc.a %a13,%a13,%d15,0
8000de96:	68 5a       	st.w [%a15]20,%d10
8000de98:	a2 fa       	sub %d10,%d15
8000de9a:	e8 0d       	st.a [%a15]0,%a13
8000de9c:	02 98       	mov %d8,%d9
8000de9e:	68 2a       	st.w [%a15]8,%d10
8000dea0:	3c ad       	j 8000ddfa <__ssprint_r+0x44>
8000dea2:	02 98       	mov %d8,%d9
8000dea4:	3c ad       	j 8000ddfe <__ssprint_r+0x48>

8000dea6 <_calloc_r>:
8000dea6:	e2 54       	mul %d4,%d5
8000dea8:	6d ff de e8 	call 8000b064 <_malloc_r>
8000deac:	40 2f       	mov.aa %a15,%a2
8000deae:	a0 02       	mov.a %a2,0
8000deb0:	bd 0f 2b 00 	jz.a %a15,8000df06 <_calloc_r+0x60>
8000deb4:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000deb8:	8f 35 c0 51 	andn %d5,%d5,3
8000debc:	c2 c5       	add %d5,-4
8000debe:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000dec2:	ee 1d       	jnz %d15,8000defc <_calloc_r+0x56>
8000dec4:	8b 45 61 f2 	lt.u %d15,%d5,20
8000dec8:	40 f2       	mov.aa %a2,%a15
8000deca:	ee 14       	jnz %d15,8000def2 <_calloc_r+0x4c>
8000decc:	82 0f       	mov %d15,0
8000dece:	68 0f       	st.w [%a15]0,%d15
8000ded0:	68 1f       	st.w [%a15]4,%d15
8000ded2:	8b c5 a1 22 	ge.u %d2,%d5,28
8000ded6:	d9 f2 08 00 	lea %a2,[%a15]8
8000deda:	76 2c       	jz %d2,8000def2 <_calloc_r+0x4c>
8000dedc:	68 2f       	st.w [%a15]8,%d15
8000dede:	68 3f       	st.w [%a15]12,%d15
8000dee0:	8b 45 02 52 	eq %d5,%d5,36
8000dee4:	d9 f2 10 00 	lea %a2,[%a15]16
8000dee8:	76 55       	jz %d5,8000def2 <_calloc_r+0x4c>
8000deea:	68 4f       	st.w [%a15]16,%d15
8000deec:	d9 f2 18 00 	lea %a2,[%a15]24
8000def0:	68 5f       	st.w [%a15]20,%d15
8000def2:	82 0f       	mov %d15,0
8000def4:	6c 20       	st.w [%a2]0,%d15
8000def6:	6c 21       	st.w [%a2]4,%d15
8000def8:	6c 22       	st.w [%a2]8,%d15
8000defa:	3c 05       	j 8000df04 <_calloc_r+0x5e>
8000defc:	40 f4       	mov.aa %a4,%a15
8000defe:	82 04       	mov %d4,0
8000df00:	6d 00 2c 00 	call 8000df58 <memset>
8000df04:	40 f2       	mov.aa %a2,%a15
8000df06:	00 90       	ret 

8000df08 <memmove>:
8000df08:	80 46       	mov.d %d6,%a4
8000df0a:	80 52       	mov.d %d2,%a5
8000df0c:	7f 62 16 80 	jge.u %d2,%d6,8000df38 <memmove+0x30>
8000df10:	0b 42 00 50 	add %d5,%d2,%d4
8000df14:	7f 56 12 80 	jge.u %d6,%d5,8000df38 <memmove+0x30>
8000df18:	60 4f       	mov.a %a15,%d4
8000df1a:	02 42       	mov %d2,%d4
8000df1c:	c2 f2       	add %d2,-1
8000df1e:	fd f0 03 00 	loop %a15,8000df24 <memmove+0x1c>
8000df22:	3c 19       	j 8000df54 <memmove+0x4c>
8000df24:	5a 42       	sub %d15,%d2,%d4
8000df26:	60 f2       	mov.a %a2,%d15
8000df28:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000df2c:	1a 62       	add %d15,%d2,%d6
8000df2e:	79 23 00 00 	ld.b %d3,[%a2]0
8000df32:	60 f2       	mov.a %a2,%d15
8000df34:	34 23       	st.b [%a2],%d3
8000df36:	3c f3       	j 8000df1c <memmove+0x14>
8000df38:	60 4f       	mov.a %a15,%d4
8000df3a:	a0 02       	mov.a %a2,0
8000df3c:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000df40:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000df44:	fd f0 03 00 	loop %a15,8000df4a <memmove+0x42>
8000df48:	3c 06       	j 8000df54 <memmove+0x4c>
8000df4a:	79 33 00 00 	ld.b %d3,[%a3]0
8000df4e:	b0 12       	add.a %a2,1
8000df50:	34 43       	st.b [%a4],%d3
8000df52:	3c f5       	j 8000df3c <memmove+0x34>
8000df54:	60 62       	mov.a %a2,%d6
8000df56:	00 90       	ret 

8000df58 <memset>:
8000df58:	40 42       	mov.aa %a2,%a4
8000df5a:	40 4f       	mov.aa %a15,%a4
8000df5c:	9f 05 03 80 	jned %d5,0,8000df62 <memset+0xa>
8000df60:	00 90       	ret 
8000df62:	28 04       	st.b [%a15]0,%d4
8000df64:	b0 1f       	add.a %a15,1
8000df66:	3c fb       	j 8000df5c <memset+0x4>

8000df68 <_realloc_r>:
8000df68:	40 4d       	mov.aa %a13,%a4
8000df6a:	40 5f       	mov.aa %a15,%a5
8000df6c:	02 49       	mov %d9,%d4
8000df6e:	7c 53       	jnz.a %a5,8000df74 <_realloc_r+0xc>
8000df70:	1d ff 7a e8 	j 8000b064 <_malloc_r>
8000df74:	6d ff c5 ea 	call 8000b4fe <__malloc_lock>
8000df78:	1b b9 00 20 	addi %d2,%d9,11
8000df7c:	8b 72 61 f2 	lt.u %d15,%d2,23
8000df80:	8f 72 c0 21 	andn %d2,%d2,7
8000df84:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000df88:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000df8c:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000df90:	8b 0f 20 25 	or.lt %d2,%d15,0
8000df94:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000df98:	8f 33 c0 81 	andn %d8,%d3,3
8000df9c:	76 25       	jz %d2,8000dfa6 <_realloc_r+0x3e>
8000df9e:	da 0c       	mov %d15,12
8000dfa0:	6c d0       	st.w [%a13]0,%d15
8000dfa2:	1d 00 56 01 	j 8000e24e <_realloc_r+0x2e6>
8000dfa6:	7f f8 ac 01 	jge %d8,%d15,8000e2fe <_realloc_r+0x396>
8000dfaa:	7b 00 00 c7 	movh %d12,28672
8000dfae:	60 c3       	mov.a %a3,%d12
8000dfb0:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000dfb4:	d9 34 00 40 	lea %a4,[%a3]256
8000dfb8:	99 43 08 00 	ld.a %a3,[%a4]8
8000dfbc:	80 4c       	mov.d %d12,%a4
8000dfbe:	19 2b 04 00 	ld.w %d11,[%a2]4
8000dfc2:	7d 32 0a 00 	jeq.a %a2,%a3,8000dfd6 <_realloc_r+0x6e>
8000dfc6:	8f 1b c0 21 	andn %d2,%d11,1
8000dfca:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000dfce:	19 42 04 00 	ld.w %d2,[%a4]4
8000dfd2:	6f 02 2b 80 	jnz.t %d2,0,8000e028 <_realloc_r+0xc0>
8000dfd6:	8f 3b c0 b1 	andn %d11,%d11,3
8000dfda:	0b 8b 00 20 	add %d2,%d11,%d8
8000dfde:	7d 32 1b 80 	jne.a %a2,%a3,8000e014 <_realloc_r+0xac>
8000dfe2:	1b 0f 01 40 	addi %d4,%d15,16
8000dfe6:	3f 42 23 00 	jlt %d2,%d4,8000e02c <_realloc_r+0xc4>
8000dfea:	10 ee       	addsc.a %a14,%a14,%d15,0
8000dfec:	60 c2       	mov.a %a2,%d12
8000dfee:	a2 f2       	sub %d2,%d15
8000dff0:	b5 2e 08 00 	st.a [%a2]8,%a14
8000dff4:	8f 12 40 21 	or %d2,%d2,1
8000dff8:	59 e2 04 00 	st.w [%a14]4,%d2
8000dffc:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e000:	40 d4       	mov.aa %a4,%a13
8000e002:	8f 12 00 21 	and %d2,%d2,1
8000e006:	a6 2f       	or %d15,%d2
8000e008:	59 ff fc ff 	st.w [%a15]-4,%d15
8000e00c:	6d ff 7a ea 	call 8000b500 <__malloc_unlock>
8000e010:	40 f2       	mov.aa %a2,%a15
8000e012:	00 90       	ret 
8000e014:	3f f2 0c 00 	jlt %d2,%d15,8000e02c <_realloc_r+0xc4>
8000e018:	cc 23       	ld.a %a15,[%a2]12
8000e01a:	99 22 08 00 	ld.a %a2,[%a2]8
8000e01e:	02 28       	mov %d8,%d2
8000e020:	ec 23       	st.a [%a2]12,%a15
8000e022:	e8 22       	st.a [%a15]8,%a2
8000e024:	1d 00 6d 01 	j 8000e2fe <_realloc_r+0x396>
8000e028:	82 0b       	mov %d11,0
8000e02a:	a0 02       	mov.a %a2,0
8000e02c:	6f 03 08 81 	jnz.t %d3,0,8000e23c <_realloc_r+0x2d4>
8000e030:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000e034:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000e038:	19 ca 04 00 	ld.w %d10,[%a12]4
8000e03c:	8f 3a c0 a1 	andn %d10,%d10,3
8000e040:	42 8a       	add %d10,%d8
8000e042:	bd 02 b3 00 	jz.a %a2,8000e1a8 <_realloc_r+0x240>
8000e046:	42 ab       	add %d11,%d10
8000e048:	7d 32 5f 80 	jne.a %a2,%a3,8000e106 <_realloc_r+0x19e>
8000e04c:	1b 0f 01 20 	addi %d2,%d15,16
8000e050:	3f 2b ac 00 	jlt %d11,%d2,8000e1a8 <_realloc_r+0x240>
8000e054:	40 ce       	mov.aa %a14,%a12
8000e056:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e05a:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000e05e:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e062:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e066:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e06a:	b5 23 08 00 	st.a [%a2]8,%a3
8000e06e:	df 02 36 80 	jne %d2,0,8000e0da <_realloc_r+0x172>
8000e072:	8b 44 61 22 	lt.u %d2,%d4,20
8000e076:	40 e3       	mov.aa %a3,%a14
8000e078:	df 02 28 80 	jne %d2,0,8000e0c8 <_realloc_r+0x160>
8000e07c:	48 02       	ld.w %d2,[%a15]0
8000e07e:	59 c2 08 00 	st.w [%a12]8,%d2
8000e082:	48 13       	ld.w %d3,[%a15]4
8000e084:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e088:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e08c:	f6 26       	jnz %d2,8000e098 <_realloc_r+0x130>
8000e08e:	d9 c3 10 00 	lea %a3,[%a12]16
8000e092:	d9 ff 08 00 	lea %a15,[%a15]8
8000e096:	3c 19       	j 8000e0c8 <_realloc_r+0x160>
8000e098:	48 22       	ld.w %d2,[%a15]8
8000e09a:	8b 44 02 82 	eq %d8,%d4,36
8000e09e:	59 c2 10 00 	st.w [%a12]16,%d2
8000e0a2:	48 33       	ld.w %d3,[%a15]12
8000e0a4:	59 c3 14 00 	st.w [%a12]20,%d3
8000e0a8:	f6 86       	jnz %d8,8000e0b4 <_realloc_r+0x14c>
8000e0aa:	d9 c3 18 00 	lea %a3,[%a12]24
8000e0ae:	d9 ff 10 00 	lea %a15,[%a15]16
8000e0b2:	3c 0b       	j 8000e0c8 <_realloc_r+0x160>
8000e0b4:	48 42       	ld.w %d2,[%a15]16
8000e0b6:	d9 c3 20 00 	lea %a3,[%a12]32
8000e0ba:	59 c2 18 00 	st.w [%a12]24,%d2
8000e0be:	48 53       	ld.w %d3,[%a15]20
8000e0c0:	d9 ff 18 00 	lea %a15,[%a15]24
8000e0c4:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e0c8:	48 02       	ld.w %d2,[%a15]0
8000e0ca:	74 32       	st.w [%a3],%d2
8000e0cc:	48 13       	ld.w %d3,[%a15]4
8000e0ce:	59 33 04 00 	st.w [%a3]4,%d3
8000e0d2:	48 22       	ld.w %d2,[%a15]8
8000e0d4:	59 32 08 00 	st.w [%a3]8,%d2
8000e0d8:	3c 05       	j 8000e0e2 <_realloc_r+0x17a>
8000e0da:	40 e4       	mov.aa %a4,%a14
8000e0dc:	40 f5       	mov.aa %a5,%a15
8000e0de:	6d ff 15 ff 	call 8000df08 <memmove>
8000e0e2:	10 cf       	addsc.a %a15,%a12,%d15,0
8000e0e4:	60 c2       	mov.a %a2,%d12
8000e0e6:	a2 fb       	sub %d11,%d15
8000e0e8:	ec 22       	st.a [%a2]8,%a15
8000e0ea:	8f 1b 40 b1 	or %d11,%d11,1
8000e0ee:	68 1b       	st.w [%a15]4,%d11
8000e0f0:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e0f4:	40 d4       	mov.aa %a4,%a13
8000e0f6:	8f 12 00 21 	and %d2,%d2,1
8000e0fa:	a6 2f       	or %d15,%d2
8000e0fc:	6c c1       	st.w [%a12]4,%d15
8000e0fe:	6d ff 01 ea 	call 8000b500 <__malloc_unlock>
8000e102:	40 e2       	mov.aa %a2,%a14
8000e104:	00 90       	ret 
8000e106:	3f fb 51 00 	jlt %d11,%d15,8000e1a8 <_realloc_r+0x240>
8000e10a:	99 23 0c 00 	ld.a %a3,[%a2]12
8000e10e:	99 22 08 00 	ld.a %a2,[%a2]8
8000e112:	40 c4       	mov.aa %a4,%a12
8000e114:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e118:	b5 23 0c 00 	st.a [%a2]12,%a3
8000e11c:	b5 32 08 00 	st.a [%a3]8,%a2
8000e120:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e124:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e128:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e12c:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e130:	b5 23 08 00 	st.a [%a2]8,%a3
8000e134:	df 02 35 80 	jne %d2,0,8000e19e <_realloc_r+0x236>
8000e138:	8b 44 61 22 	lt.u %d2,%d4,20
8000e13c:	df 02 28 80 	jne %d2,0,8000e18c <_realloc_r+0x224>
8000e140:	48 02       	ld.w %d2,[%a15]0
8000e142:	59 c2 08 00 	st.w [%a12]8,%d2
8000e146:	48 13       	ld.w %d3,[%a15]4
8000e148:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e14c:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e150:	f6 26       	jnz %d2,8000e15c <_realloc_r+0x1f4>
8000e152:	d9 c4 10 00 	lea %a4,[%a12]16
8000e156:	d9 ff 08 00 	lea %a15,[%a15]8
8000e15a:	3c 19       	j 8000e18c <_realloc_r+0x224>
8000e15c:	48 22       	ld.w %d2,[%a15]8
8000e15e:	8b 44 02 82 	eq %d8,%d4,36
8000e162:	59 c2 10 00 	st.w [%a12]16,%d2
8000e166:	48 33       	ld.w %d3,[%a15]12
8000e168:	59 c3 14 00 	st.w [%a12]20,%d3
8000e16c:	f6 86       	jnz %d8,8000e178 <_realloc_r+0x210>
8000e16e:	d9 c4 18 00 	lea %a4,[%a12]24
8000e172:	d9 ff 10 00 	lea %a15,[%a15]16
8000e176:	3c 0b       	j 8000e18c <_realloc_r+0x224>
8000e178:	48 42       	ld.w %d2,[%a15]16
8000e17a:	d9 c4 20 00 	lea %a4,[%a12]32
8000e17e:	59 c2 18 00 	st.w [%a12]24,%d2
8000e182:	48 53       	ld.w %d3,[%a15]20
8000e184:	d9 ff 18 00 	lea %a15,[%a15]24
8000e188:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e18c:	48 02       	ld.w %d2,[%a15]0
8000e18e:	74 42       	st.w [%a4],%d2
8000e190:	48 13       	ld.w %d3,[%a15]4
8000e192:	59 43 04 00 	st.w [%a4]4,%d3
8000e196:	48 22       	ld.w %d2,[%a15]8
8000e198:	59 42 08 00 	st.w [%a4]8,%d2
8000e19c:	3c 04       	j 8000e1a4 <_realloc_r+0x23c>
8000e19e:	40 f5       	mov.aa %a5,%a15
8000e1a0:	6d ff b4 fe 	call 8000df08 <memmove>
8000e1a4:	02 b8       	mov %d8,%d11
8000e1a6:	3c 45       	j 8000e230 <_realloc_r+0x2c8>
8000e1a8:	3f fa 4a 00 	jlt %d10,%d15,8000e23c <_realloc_r+0x2d4>
8000e1ac:	40 c4       	mov.aa %a4,%a12
8000e1ae:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e1b2:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e1b6:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e1ba:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e1be:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e1c2:	b5 23 08 00 	st.a [%a2]8,%a3
8000e1c6:	df 02 37 80 	jne %d2,0,8000e234 <_realloc_r+0x2cc>
8000e1ca:	8b 44 61 22 	lt.u %d2,%d4,20
8000e1ce:	df 02 28 80 	jne %d2,0,8000e21e <_realloc_r+0x2b6>
8000e1d2:	48 03       	ld.w %d3,[%a15]0
8000e1d4:	59 c3 08 00 	st.w [%a12]8,%d3
8000e1d8:	48 12       	ld.w %d2,[%a15]4
8000e1da:	59 c2 0c 00 	st.w [%a12]12,%d2
8000e1de:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e1e2:	f6 26       	jnz %d2,8000e1ee <_realloc_r+0x286>
8000e1e4:	d9 c4 10 00 	lea %a4,[%a12]16
8000e1e8:	d9 ff 08 00 	lea %a15,[%a15]8
8000e1ec:	3c 19       	j 8000e21e <_realloc_r+0x2b6>
8000e1ee:	48 23       	ld.w %d3,[%a15]8
8000e1f0:	8b 44 02 82 	eq %d8,%d4,36
8000e1f4:	59 c3 10 00 	st.w [%a12]16,%d3
8000e1f8:	48 32       	ld.w %d2,[%a15]12
8000e1fa:	59 c2 14 00 	st.w [%a12]20,%d2
8000e1fe:	f6 86       	jnz %d8,8000e20a <_realloc_r+0x2a2>
8000e200:	d9 c4 18 00 	lea %a4,[%a12]24
8000e204:	d9 ff 10 00 	lea %a15,[%a15]16
8000e208:	3c 0b       	j 8000e21e <_realloc_r+0x2b6>
8000e20a:	48 43       	ld.w %d3,[%a15]16
8000e20c:	d9 c4 20 00 	lea %a4,[%a12]32
8000e210:	59 c3 18 00 	st.w [%a12]24,%d3
8000e214:	48 52       	ld.w %d2,[%a15]20
8000e216:	d9 ff 18 00 	lea %a15,[%a15]24
8000e21a:	59 c2 1c 00 	st.w [%a12]28,%d2
8000e21e:	48 03       	ld.w %d3,[%a15]0
8000e220:	74 43       	st.w [%a4],%d3
8000e222:	48 12       	ld.w %d2,[%a15]4
8000e224:	59 42 04 00 	st.w [%a4]4,%d2
8000e228:	48 23       	ld.w %d3,[%a15]8
8000e22a:	59 43 08 00 	st.w [%a4]8,%d3
8000e22e:	02 a8       	mov %d8,%d10
8000e230:	40 ce       	mov.aa %a14,%a12
8000e232:	3c 66       	j 8000e2fe <_realloc_r+0x396>
8000e234:	40 f5       	mov.aa %a5,%a15
8000e236:	6d ff 69 fe 	call 8000df08 <memmove>
8000e23a:	3c fa       	j 8000e22e <_realloc_r+0x2c6>
8000e23c:	40 d4       	mov.aa %a4,%a13
8000e23e:	02 94       	mov %d4,%d9
8000e240:	6d ff 12 e7 	call 8000b064 <_malloc_r>
8000e244:	40 2c       	mov.aa %a12,%a2
8000e246:	7c 26       	jnz.a %a2,8000e252 <_realloc_r+0x2ea>
8000e248:	40 d4       	mov.aa %a4,%a13
8000e24a:	6d ff 5b e9 	call 8000b500 <__malloc_unlock>
8000e24e:	a0 02       	mov.a %a2,0
8000e250:	00 90       	ret 
8000e252:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e256:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000e25a:	8f 12 c0 21 	andn %d2,%d2,1
8000e25e:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000e262:	80 32       	mov.d %d2,%a3
8000e264:	80 23       	mov.d %d3,%a2
8000e266:	5f 32 08 80 	jne %d2,%d3,8000e276 <_realloc_r+0x30e>
8000e26a:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e26e:	8f 32 c0 21 	andn %d2,%d2,3
8000e272:	42 28       	add %d8,%d2
8000e274:	3c 45       	j 8000e2fe <_realloc_r+0x396>
8000e276:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e27a:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000e27e:	ee 33       	jnz %d15,8000e2e4 <_realloc_r+0x37c>
8000e280:	8b 44 61 f2 	lt.u %d15,%d4,20
8000e284:	40 c3       	mov.aa %a3,%a12
8000e286:	40 f2       	mov.aa %a2,%a15
8000e288:	ee 23       	jnz %d15,8000e2ce <_realloc_r+0x366>
8000e28a:	4c f0       	ld.w %d15,[%a15]0
8000e28c:	d9 c3 08 00 	lea %a3,[%a12]8
8000e290:	6c c0       	st.w [%a12]0,%d15
8000e292:	48 12       	ld.w %d2,[%a15]4
8000e294:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000e298:	59 c2 04 00 	st.w [%a12]4,%d2
8000e29c:	d9 f2 08 00 	lea %a2,[%a15]8
8000e2a0:	6e 17       	jz %d15,8000e2ce <_realloc_r+0x366>
8000e2a2:	48 23       	ld.w %d3,[%a15]8
8000e2a4:	8b 44 02 82 	eq %d8,%d4,36
8000e2a8:	59 c3 08 00 	st.w [%a12]8,%d3
8000e2ac:	4c f3       	ld.w %d15,[%a15]12
8000e2ae:	d9 c3 10 00 	lea %a3,[%a12]16
8000e2b2:	6c c3       	st.w [%a12]12,%d15
8000e2b4:	d9 f2 10 00 	lea %a2,[%a15]16
8000e2b8:	76 8b       	jz %d8,8000e2ce <_realloc_r+0x366>
8000e2ba:	48 42       	ld.w %d2,[%a15]16
8000e2bc:	d9 c3 18 00 	lea %a3,[%a12]24
8000e2c0:	59 c2 10 00 	st.w [%a12]16,%d2
8000e2c4:	48 53       	ld.w %d3,[%a15]20
8000e2c6:	d9 f2 18 00 	lea %a2,[%a15]24
8000e2ca:	59 c3 14 00 	st.w [%a12]20,%d3
8000e2ce:	4c 20       	ld.w %d15,[%a2]0
8000e2d0:	6c 30       	st.w [%a3]0,%d15
8000e2d2:	19 22 04 00 	ld.w %d2,[%a2]4
8000e2d6:	59 32 04 00 	st.w [%a3]4,%d2
8000e2da:	19 23 08 00 	ld.w %d3,[%a2]8
8000e2de:	59 33 08 00 	st.w [%a3]8,%d3
8000e2e2:	3c 05       	j 8000e2ec <_realloc_r+0x384>
8000e2e4:	40 c4       	mov.aa %a4,%a12
8000e2e6:	40 f5       	mov.aa %a5,%a15
8000e2e8:	6d ff 10 fe 	call 8000df08 <memmove>
8000e2ec:	40 d4       	mov.aa %a4,%a13
8000e2ee:	40 f5       	mov.aa %a5,%a15
8000e2f0:	6d ff af e9 	call 8000b64e <_free_r>
8000e2f4:	40 d4       	mov.aa %a4,%a13
8000e2f6:	6d ff 05 e9 	call 8000b500 <__malloc_unlock>
8000e2fa:	40 c2       	mov.aa %a2,%a12
8000e2fc:	00 90       	ret 
8000e2fe:	0b f8 80 20 	sub %d2,%d8,%d15
8000e302:	8b 02 61 42 	lt.u %d4,%d2,16
8000e306:	19 e3 04 00 	ld.w %d3,[%a14]4
8000e30a:	df 04 16 80 	jne %d4,0,8000e336 <_realloc_r+0x3ce>
8000e30e:	8f 13 00 31 	and %d3,%d3,1
8000e312:	10 e5       	addsc.a %a5,%a14,%d15,0
8000e314:	a6 3f       	or %d15,%d3
8000e316:	6c e1       	st.w [%a14]4,%d15
8000e318:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000e31c:	8f 12 40 f1 	or %d15,%d2,1
8000e320:	b7 10 21 20 	imask %e2,1,0,1
8000e324:	6c 51       	st.w [%a5]4,%d15
8000e326:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e32a:	40 d4       	mov.aa %a4,%a13
8000e32c:	d9 55 08 00 	lea %a5,[%a5]8
8000e330:	6d ff 8f e9 	call 8000b64e <_free_r>
8000e334:	3c 0c       	j 8000e34c <_realloc_r+0x3e4>
8000e336:	8f 13 00 31 	and %d3,%d3,1
8000e33a:	a6 83       	or %d3,%d8
8000e33c:	59 e3 04 00 	st.w [%a14]4,%d3
8000e340:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000e344:	b7 10 21 20 	imask %e2,1,0,1
8000e348:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e34c:	40 d4       	mov.aa %a4,%a13
8000e34e:	6d ff d9 e8 	call 8000b500 <__malloc_unlock>
8000e352:	d9 e2 08 00 	lea %a2,[%a14]8
8000e356:	00 90       	ret 

8000e358 <_exit>:
8000e358:	76 43       	jz %d4,8000e35e <_exit+0x6>
8000e35a:	60 4e       	mov.a %a14,%d4
8000e35c:	3c 04       	j 8000e364 <_exit+0xc>
8000e35e:	bb d0 00 f9 	mov.u %d15,36877
8000e362:	60 fe       	mov.a %a14,%d15
8000e364:	00 a0       	debug 
8000e366:	3c 00       	j 8000e366 <_exit+0xe>

8000e368 <sbrk>:
8000e368:	91 00 00 f7 	movh.a %a15,28672
8000e36c:	19 ff b0 40 	ld.w %d15,[%a15]2352 <70000930 <heap_top.2289>>
8000e370:	7b 00 00 27 	movh %d2,28672
8000e374:	42 f4       	add %d4,%d15
8000e376:	1b 82 f0 20 	addi %d2,%d2,3848
8000e37a:	7f 42 09 80 	jge.u %d2,%d4,8000e38c <sbrk+0x24>
8000e37e:	6d 00 13 00 	call 8000e3a4 <__errno>
8000e382:	da 0c       	mov %d15,12
8000e384:	6c 20       	st.w [%a2]0,%d15
8000e386:	a0 02       	mov.a %a2,0
8000e388:	b0 f2       	add.a %a2,-1
8000e38a:	00 90       	ret 
8000e38c:	7b 00 00 27 	movh %d2,28672
8000e390:	1b 82 f0 20 	addi %d2,%d2,3848
8000e394:	7f 24 04 80 	jge.u %d4,%d2,8000e39c <sbrk+0x34>
8000e398:	6d 00 0b 00 	call 8000e3ae <abort>
8000e39c:	59 f4 b0 40 	st.w [%a15]2352,%d4
8000e3a0:	60 f2       	mov.a %a2,%d15
8000e3a2:	00 90       	ret 

8000e3a4 <__errno>:
8000e3a4:	91 00 00 27 	movh.a %a2,28672
8000e3a8:	d9 22 c0 c0 	lea %a2,[%a2]3840 <70000f00 <_my_errno>>
8000e3ac:	00 90       	ret 

8000e3ae <abort>:
8000e3ae:	00 a0       	debug 
8000e3b0:	7b e0 ea fd 	movh %d15,57006
8000e3b4:	1b ff ee fb 	addi %d15,%d15,-16657
8000e3b8:	60 fe       	mov.a %a14,%d15
8000e3ba:	1d ff cf ff 	j 8000e358 <_exit>
8000e3be:	3c 00       	j 8000e3be <abort+0x10>

8000e3c0 <__eqdf2>:
8000e3c0:	20 38       	sub.a %sp,56
8000e3c2:	40 a4       	mov.aa %a4,%sp
8000e3c4:	d9 a5 10 00 	lea %a5,[%sp]16
8000e3c8:	89 a4 40 09 	st.d [%sp],%e4
8000e3cc:	89 a6 48 09 	st.d [%sp]8,%e6
8000e3d0:	6d ff 84 e5 	call 8000aed8 <__unpack_d>
8000e3d4:	d9 a4 08 00 	lea %a4,[%sp]8
8000e3d8:	d9 a5 24 00 	lea %a5,[%sp]36
8000e3dc:	6d ff 7e e5 	call 8000aed8 <__unpack_d>
8000e3e0:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e3e4:	82 12       	mov %d2,1
8000e3e6:	bf 2f 0c 80 	jlt.u %d15,2,8000e3fe <__eqdf2+0x3e>
8000e3ea:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e3ee:	bf 2f 08 80 	jlt.u %d15,2,8000e3fe <__eqdf2+0x3e>
8000e3f2:	d9 a4 10 00 	lea %a4,[%sp]16
8000e3f6:	d9 a5 24 00 	lea %a5,[%sp]36
8000e3fa:	6d 00 26 01 	call 8000e646 <__fpcmp_parts_d>
8000e3fe:	00 90       	ret 

8000e400 <__nedf2>:
8000e400:	20 38       	sub.a %sp,56
8000e402:	40 a4       	mov.aa %a4,%sp
8000e404:	d9 a5 10 00 	lea %a5,[%sp]16
8000e408:	89 a4 40 09 	st.d [%sp],%e4
8000e40c:	89 a6 48 09 	st.d [%sp]8,%e6
8000e410:	6d ff 64 e5 	call 8000aed8 <__unpack_d>
8000e414:	d9 a4 08 00 	lea %a4,[%sp]8
8000e418:	d9 a5 24 00 	lea %a5,[%sp]36
8000e41c:	6d ff 5e e5 	call 8000aed8 <__unpack_d>
8000e420:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e424:	82 12       	mov %d2,1
8000e426:	bf 2f 0c 80 	jlt.u %d15,2,8000e43e <__nedf2+0x3e>
8000e42a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e42e:	bf 2f 08 80 	jlt.u %d15,2,8000e43e <__nedf2+0x3e>
8000e432:	d9 a4 10 00 	lea %a4,[%sp]16
8000e436:	d9 a5 24 00 	lea %a5,[%sp]36
8000e43a:	6d 00 06 01 	call 8000e646 <__fpcmp_parts_d>
8000e43e:	00 90       	ret 

8000e440 <__gtdf2>:
8000e440:	20 38       	sub.a %sp,56
8000e442:	40 a4       	mov.aa %a4,%sp
8000e444:	d9 a5 10 00 	lea %a5,[%sp]16
8000e448:	89 a4 40 09 	st.d [%sp],%e4
8000e44c:	89 a6 48 09 	st.d [%sp]8,%e6
8000e450:	6d ff 44 e5 	call 8000aed8 <__unpack_d>
8000e454:	d9 a4 08 00 	lea %a4,[%sp]8
8000e458:	d9 a5 24 00 	lea %a5,[%sp]36
8000e45c:	6d ff 3e e5 	call 8000aed8 <__unpack_d>
8000e460:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e464:	82 f2       	mov %d2,-1
8000e466:	bf 2f 0c 80 	jlt.u %d15,2,8000e47e <__gtdf2+0x3e>
8000e46a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e46e:	bf 2f 08 80 	jlt.u %d15,2,8000e47e <__gtdf2+0x3e>
8000e472:	d9 a4 10 00 	lea %a4,[%sp]16
8000e476:	d9 a5 24 00 	lea %a5,[%sp]36
8000e47a:	6d 00 e6 00 	call 8000e646 <__fpcmp_parts_d>
8000e47e:	00 90       	ret 

8000e480 <__gedf2>:
8000e480:	20 38       	sub.a %sp,56
8000e482:	40 a4       	mov.aa %a4,%sp
8000e484:	d9 a5 10 00 	lea %a5,[%sp]16
8000e488:	89 a4 40 09 	st.d [%sp],%e4
8000e48c:	89 a6 48 09 	st.d [%sp]8,%e6
8000e490:	6d ff 24 e5 	call 8000aed8 <__unpack_d>
8000e494:	d9 a4 08 00 	lea %a4,[%sp]8
8000e498:	d9 a5 24 00 	lea %a5,[%sp]36
8000e49c:	6d ff 1e e5 	call 8000aed8 <__unpack_d>
8000e4a0:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e4a4:	82 f2       	mov %d2,-1
8000e4a6:	bf 2f 0c 80 	jlt.u %d15,2,8000e4be <__gedf2+0x3e>
8000e4aa:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e4ae:	bf 2f 08 80 	jlt.u %d15,2,8000e4be <__gedf2+0x3e>
8000e4b2:	d9 a4 10 00 	lea %a4,[%sp]16
8000e4b6:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4ba:	6d 00 c6 00 	call 8000e646 <__fpcmp_parts_d>
8000e4be:	00 90       	ret 

8000e4c0 <__ltdf2>:
8000e4c0:	20 38       	sub.a %sp,56
8000e4c2:	40 a4       	mov.aa %a4,%sp
8000e4c4:	d9 a5 10 00 	lea %a5,[%sp]16
8000e4c8:	89 a4 40 09 	st.d [%sp],%e4
8000e4cc:	89 a6 48 09 	st.d [%sp]8,%e6
8000e4d0:	6d ff 04 e5 	call 8000aed8 <__unpack_d>
8000e4d4:	d9 a4 08 00 	lea %a4,[%sp]8
8000e4d8:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4dc:	6d ff fe e4 	call 8000aed8 <__unpack_d>
8000e4e0:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e4e4:	82 12       	mov %d2,1
8000e4e6:	bf 2f 0c 80 	jlt.u %d15,2,8000e4fe <__ltdf2+0x3e>
8000e4ea:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e4ee:	bf 2f 08 80 	jlt.u %d15,2,8000e4fe <__ltdf2+0x3e>
8000e4f2:	d9 a4 10 00 	lea %a4,[%sp]16
8000e4f6:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4fa:	6d 00 a6 00 	call 8000e646 <__fpcmp_parts_d>
8000e4fe:	00 90       	ret 

8000e500 <__fixdfsi>:
8000e500:	20 20       	sub.a %sp,32
8000e502:	d9 a4 20 00 	lea %a4,[%sp]32
8000e506:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000e50a:	d9 a5 0c 00 	lea %a5,[%sp]12
8000e50e:	6d ff e5 e4 	call 8000aed8 <__unpack_d>
8000e512:	0c ac       	ld.bu %d15,[%sp]12
8000e514:	82 02       	mov %d2,0
8000e516:	bf 3f 1b 80 	jlt.u %d15,3,8000e54c <__fixdfsi+0x4c>
8000e51a:	5e 48       	jne %d15,4,8000e52a <__fixdfsi+0x2a>
8000e51c:	7b 00 00 28 	movh %d2,32768
8000e520:	58 04       	ld.w %d15,[%sp]16
8000e522:	1b f2 ff 3f 	addi %d3,%d2,-1
8000e526:	6a 32       	cmovn %d2,%d15,%d3
8000e528:	00 90       	ret 
8000e52a:	19 a6 14 00 	ld.w %d6,[%sp]20
8000e52e:	82 02       	mov %d2,0
8000e530:	0e 6e       	jltz %d6,8000e54c <__fixdfsi+0x4c>
8000e532:	8b f6 81 f2 	ge %d15,%d6,31
8000e536:	ee f3       	jnz %d15,8000e51c <__fixdfsi+0x1c>
8000e538:	09 a4 58 09 	ld.d %e4,[%sp]24
8000e53c:	8b c6 03 61 	rsub %d6,%d6,60
8000e540:	6d ff 09 e1 	call 8000a752 <__lshrdi3>
8000e544:	58 04       	ld.w %d15,[%sp]16
8000e546:	8b 02 00 41 	rsub %d4,%d2,0
8000e54a:	2a 42       	cmov %d2,%d15,%d4
8000e54c:	00 90       	ret 

8000e54e <__floatunsidf>:
8000e54e:	20 18       	sub.a %sp,24
8000e550:	82 0f       	mov %d15,0
8000e552:	78 02       	st.w [%sp]8,%d15
8000e554:	f6 44       	jnz %d4,8000e55c <__floatunsidf+0xe>
8000e556:	82 2f       	mov %d15,2
8000e558:	2c a4       	st.b [%sp]4,%d15
8000e55a:	3c 0f       	j 8000e578 <__floatunsidf+0x2a>
8000e55c:	82 3f       	mov %d15,3
8000e55e:	2c a4       	st.b [%sp]4,%d15
8000e560:	0f 04 b0 f1 	clz %d15,%d4
8000e564:	1b df 01 60 	addi %d6,%d15,29
8000e568:	82 05       	mov %d5,0
8000e56a:	6d ff d9 e3 	call 8000ad1c <__ashldi3>
8000e56e:	8b ff 01 f1 	rsub %d15,%d15,31
8000e572:	89 a2 50 09 	st.d [%sp]16,%e2
8000e576:	78 03       	st.w [%sp]12,%d15
8000e578:	d9 a4 04 00 	lea %a4,[%sp]4
8000e57c:	1d ff 25 e4 	j 8000adc6 <__pack_d>

8000e580 <__udivdi3>:
8000e580:	0f 67 a0 20 	or %d2,%d7,%d6
8000e584:	0b 45 10 a8 	mov %e10,%d5,%d4
8000e588:	02 6f       	mov %d15,%d6
8000e58a:	02 7c       	mov %d12,%d7
8000e58c:	d2 f8       	mov %e8,-1
8000e58e:	df 02 46 00 	jeq %d2,0,8000e61a <__udivdi3+0x9a>
8000e592:	8f 07 40 21 	or %d2,%d7,0
8000e596:	f6 2d       	jnz %d2,8000e5b0 <__udivdi3+0x30>
8000e598:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000e59c:	d2 04       	mov %e4,0
8000e59e:	02 a4       	mov %d4,%d10
8000e5a0:	42 95       	add %d5,%d9
8000e5a2:	6d 00 a5 00 	call 8000e6ec <__udiv6432>
8000e5a6:	82 04       	mov %d4,0
8000e5a8:	02 85       	mov %d5,%d8
8000e5aa:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000e5ae:	3c 36       	j 8000e61a <__udivdi3+0x9a>
8000e5b0:	0b 7b 00 21 	eq %d2,%d11,%d7
8000e5b4:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000e5b8:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000e5bc:	d2 08       	mov %e8,0
8000e5be:	df 02 2e 80 	jne %d2,0,8000e61a <__udivdi3+0x9a>
8000e5c2:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000e5c6:	0f 07 b0 d1 	clz %d13,%d7
8000e5ca:	60 5f       	mov.a %a15,%d5
8000e5cc:	0b 67 10 48 	mov %e4,%d7,%d6
8000e5d0:	02 d6       	mov %d6,%d13
8000e5d2:	6d ff a5 e3 	call 8000ad1c <__ashldi3>
8000e5d6:	8f fb 1f e0 	sh %d14,%d11,-1
8000e5da:	80 f4       	mov.d %d4,%a15
8000e5dc:	02 36       	mov %d6,%d3
8000e5de:	02 e5       	mov %d5,%d14
8000e5e0:	6d 00 86 00 	call 8000e6ec <__udiv6432>
8000e5e4:	8b fd 01 d1 	rsub %d13,%d13,31
8000e5e8:	8b 0d 00 31 	rsub %d3,%d13,0
8000e5ec:	0f 32 00 30 	sh %d3,%d2,%d3
8000e5f0:	02 32       	mov %d2,%d3
8000e5f2:	8b f2 9f 80 	addx %d8,%d2,-1
8000e5f6:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000e5fa:	82 03       	mov %d3,0
8000e5fc:	8b f3 bf 90 	addc %d9,%d3,-1
8000e600:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000e604:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000e608:	0b cb 00 41 	eq %d4,%d11,%d12
8000e60c:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000e610:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000e614:	f6 43       	jnz %d4,8000e61a <__udivdi3+0x9a>
8000e616:	0b 23 10 88 	mov %e8,%d3,%d2
8000e61a:	0b 89 10 28 	mov %e2,%d9,%d8
8000e61e:	00 90       	ret 

8000e620 <__umoddi3>:
8000e620:	0f 67 a0 90 	or %d9,%d7,%d6
8000e624:	02 6f       	mov %d15,%d6
8000e626:	d2 00       	mov %e0,0
8000e628:	76 9c       	jz %d9,8000e640 <__umoddi3+0x20>
8000e62a:	02 7a       	mov %d10,%d7
8000e62c:	0b 45 10 88 	mov %e8,%d5,%d4
8000e630:	6d ff a8 ff 	call 8000e580 <__udivdi3>
8000e634:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000e638:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000e63c:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000e640:	0b 01 10 28 	mov %e2,%d1,%d0
8000e644:	00 90       	ret 

8000e646 <__fpcmp_parts_d>:
8000e646:	14 43       	ld.bu %d3,[%a4]
8000e648:	82 12       	mov %d2,1
8000e64a:	bf 23 50 80 	jlt.u %d3,2,8000e6ea <__fpcmp_parts_d+0xa4>
8000e64e:	0c 50       	ld.bu %d15,[%a5]0
8000e650:	bf 2f 4d 80 	jlt.u %d15,2,8000e6ea <__fpcmp_parts_d+0xa4>
8000e654:	8b 43 00 42 	eq %d4,%d3,4
8000e658:	8b 4f 00 22 	eq %d2,%d15,4
8000e65c:	0f 24 80 50 	and %d5,%d4,%d2
8000e660:	76 56       	jz %d5,8000e66c <__fpcmp_parts_d+0x26>
8000e662:	19 52 04 00 	ld.w %d2,[%a5]4
8000e666:	4c 41       	ld.w %d15,[%a4]4
8000e668:	a2 f2       	sub %d2,%d15
8000e66a:	00 90       	ret 
8000e66c:	76 47       	jz %d4,8000e67a <__fpcmp_parts_d+0x34>
8000e66e:	19 42 04 00 	ld.w %d2,[%a4]4
8000e672:	82 1f       	mov %d15,1
8000e674:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e678:	00 90       	ret 
8000e67a:	76 27       	jz %d2,8000e688 <__fpcmp_parts_d+0x42>
8000e67c:	19 52 04 00 	ld.w %d2,[%a5]4
8000e680:	82 ff       	mov %d15,-1
8000e682:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e686:	00 90       	ret 
8000e688:	df 23 06 80 	jne %d3,2,8000e694 <__fpcmp_parts_d+0x4e>
8000e68c:	82 02       	mov %d2,0
8000e68e:	df 2f f7 ff 	jne %d15,2,8000e67c <__fpcmp_parts_d+0x36>
8000e692:	00 90       	ret 
8000e694:	df 2f ed 7f 	jeq %d15,2,8000e66e <__fpcmp_parts_d+0x28>
8000e698:	19 45 04 00 	ld.w %d5,[%a4]4
8000e69c:	4c 51       	ld.w %d15,[%a5]4
8000e69e:	5f f5 19 80 	jne %d5,%d15,8000e6d0 <__fpcmp_parts_d+0x8a>
8000e6a2:	19 42 08 00 	ld.w %d2,[%a4]8
8000e6a6:	4c 52       	ld.w %d15,[%a5]8
8000e6a8:	3f 2f 14 00 	jlt %d15,%d2,8000e6d0 <__fpcmp_parts_d+0x8a>
8000e6ac:	3f f2 1c 00 	jlt %d2,%d15,8000e6e4 <__fpcmp_parts_d+0x9e>
8000e6b0:	19 43 10 00 	ld.w %d3,[%a4]16
8000e6b4:	19 54 10 00 	ld.w %d4,[%a5]16
8000e6b8:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e6bc:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e6c0:	0b 43 00 21 	eq %d2,%d3,%d4
8000e6c4:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e6c8:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e6cc:	3a 43       	eq %d15,%d3,%d4
8000e6ce:	f6 25       	jnz %d2,8000e6d8 <__fpcmp_parts_d+0x92>
8000e6d0:	82 12       	mov %d2,1
8000e6d2:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e6d6:	00 90       	ret 
8000e6d8:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e6dc:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e6e0:	82 02       	mov %d2,0
8000e6e2:	ee 04       	jnz %d15,8000e6ea <__fpcmp_parts_d+0xa4>
8000e6e4:	82 f2       	mov %d2,-1
8000e6e6:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e6ea:	00 90       	ret 

8000e6ec <__udiv6432>:
8000e6ec:	02 53       	mov %d3,%d5
8000e6ee:	82 f2       	mov %d2,-1
8000e6f0:	7f 65 4b 80 	jge.u %d5,%d6,8000e786 <__udiv6432+0x9a>
8000e6f4:	0f 06 b0 21 	clz %d2,%d6
8000e6f8:	0f 26 00 60 	sh %d6,%d6,%d2
8000e6fc:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e700:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e704:	8f 06 1f 70 	sh %d7,%d6,-16
8000e708:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e70c:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e710:	0f 24 00 20 	sh %d2,%d4,%d2
8000e714:	02 05       	mov %d5,%d0
8000e716:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e71a:	e2 80       	mul %d0,%d8
8000e71c:	8f 02 1f b0 	sh %d11,%d2,-16
8000e720:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e724:	82 0c       	mov %d12,0
8000e726:	7b 10 00 90 	movh %d9,1
8000e72a:	7f 95 09 80 	jge.u %d5,%d9,8000e73c <__udiv6432+0x50>
8000e72e:	8f 01 01 f0 	sh %d15,%d1,16
8000e732:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e736:	42 bf       	add %d15,%d11
8000e738:	7f af 07 80 	jge.u %d15,%d10,8000e746 <__udiv6432+0x5a>
8000e73c:	42 71       	add %d1,%d7
8000e73e:	c2 f5       	add %d5,-1
8000e740:	a2 8c       	sub %d12,%d8
8000e742:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e72a <__udiv6432+0x3e>
8000e746:	8f 03 01 30 	sh %d3,%d3,16
8000e74a:	42 3b       	add %d11,%d3
8000e74c:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e750:	82 0a       	mov %d10,0
8000e752:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e756:	7b 10 00 10 	movh %d1,1
8000e75a:	02 03       	mov %d3,%d0
8000e75c:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e760:	e2 80       	mul %d0,%d8
8000e762:	7f 13 09 80 	jge.u %d3,%d1,8000e774 <__udiv6432+0x88>
8000e766:	8f 06 01 f0 	sh %d15,%d6,16
8000e76a:	0b 0a 00 90 	add %d9,%d10,%d0
8000e76e:	42 2f       	add %d15,%d2
8000e770:	7f 9f 07 80 	jge.u %d15,%d9,8000e77e <__udiv6432+0x92>
8000e774:	42 76       	add %d6,%d7
8000e776:	c2 f3       	add %d3,-1
8000e778:	a2 8a       	sub %d10,%d8
8000e77a:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e762 <__udiv6432+0x76>
8000e77e:	8f 05 01 50 	sh %d5,%d5,16
8000e782:	0b 53 00 20 	add %d2,%d3,%d5
8000e786:	00 90       	ret 
