
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x0000e298 memsz 0x0000e298 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e2b8 align 2**14
         filesz 0x00000918 memsz 0x00000918 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000ebd0 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000ebd0 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000ebd0 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000ebd0 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00014918 vaddr 0x70000918 paddr 0x8000ebd0 align 2**14
         filesz 0x00000000 memsz 0x00000320 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000ebd0 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000ebd0 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000ec00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000ec00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000ec00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001060  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000320  70000918  8000ebd0  00014918  2**3
                  ALLOC
  3 .data         00000918  70000000  8000e2b8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001100  80001100  00005100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001200  80001200  00005200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001208  80001208  00005208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text         0000a2b8  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000ebd0  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000ebd0  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000ec00  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000ebd0  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000ebd0  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000ec00  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000ebd0  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000ebd0  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000ec00  00015c00  2**6
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014918  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000d30  00000000  00000000  00014970  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000c35c5  00000000  00000000  000156a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000c065  00000000  00000000  000d8c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000dfd1  00000000  00000000  000e4cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00002218  00000000  00000000  000f2c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0000203d  00000000  00000000  000f4eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00013e67  00000000  00000000  000f6ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001440  00000000  00000000  0010ad58  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004dce5  00000000  00000000  0010c198  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000918 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001100 l    d  .traptab	00000000 .traptab
80001200 l    d  .ctors	00000000 .ctors
80001208 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 asw.c
70000000 l     O .data	00000004 c.15763
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
800000e8 l     O .rodata	00000018 osEE_tdb_ptr_array
800000dc l     O .rodata	00000004 osEE_res_db_ptr_array
80000100 l     O .rodata	000000c0 osEE_tdb_array
70000030 l     O .data	00000028 osEE_sn_array
800000e0 l     O .rodata	00000008 osEE_res_db_array
70000bd4 l     O .bss	0000000c osEE_res_cb_array
800001c0 l     O .rodata	00000008 osEE_sdb_array
70000be0 l     O .bss	00000004 osEE_scb_array
70000058 l     O .data	00000078 osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
800001c8 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
700000d0 l     O .data	00000004 IfxScuCcu_xtalFrequency
8000603c l     F .text	00000034 IfxScuCcu_wait
80000a9c l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000d38 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 vfprintf.c
80000dd0 l     O .rodata	00000010 blanks.4035
80000dc0 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000c29c l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 impure.c
700004ec l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
80000e04 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000e3c l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000910 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
80009304 l     F .text	0000000e osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 Button_Driver.c
00000000 l    df *ABS*	00000000 Lcd_Driver.c
8000400a l     F .text	00000060 lcd_write4bits
8000406a l     F .text	00000020 lcd_command
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ultrasonic_Driver.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
80008e34 l     F .text	00000054 osEE_tc_stm_us_ticks
70000be8 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
80009314 l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
80009bd8 l     F .text	00000022 osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
8000a0ce l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a2a6 l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
800003d0 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000010 g     O .data	00000020 osEE_ccb_var
70000c38 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
80005830 g     F .text	00000062 IfxAsclin_Asc_write
80008926 g     F .text	00000068 measureEchoTick
800050ce g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
80007158 g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
8000738c g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000e48 g     O .rodata	00000028 __mprec_tinytens
80000ae0 g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
8000437e g     F .text	000000e8 mdelay
8000a84a g     F .text	0000001a .hidden __ashldi3
800070ee g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
80009684 g     F .text	0000005a TerminateTask
8000514a g     F .text	00000006 IfxAsclin_Asc_resetSendCount
800001d0 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000bd0 g     O .bss	00000004 osEE_kcb_var
80000380 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
80008136 g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004bfa g     F .text	00000014 IfxVadc_setScan
8000df22 g     F .text	00000040 .hidden __eqdf2
80005760 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80007082 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
8000486c g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
800083ec g     F .text	00000176 Ifx_Fifo_read
80004c54 g     F .text	0000001c IfxAsclin_disableModule
80000720 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
80009cae g     F .text	00000022 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
800089c8 g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
800082b2 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
800075c6 g     F .text	00000108 IfxVadc_Adc_getChannelConfig
8000481c g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
8000a12e g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
800068f8 g     F .text	00000012 IfxScuCcu_initErayPllConfig
80009ff6 g     F .text	00000028 osEE_change_context_from_running
800050c0 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
80000740 g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
80007018 g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
8000520c g     F .text	00000014 IfxAsclin_Asc_clearTx
800058ae g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000b02e g     F .text	00000002 __malloc_unlock
800050aa g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80004244 g     F .text	0000005a TimerISR
80008598 g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007efe g     F .text	000000e8 IfxVadc_Adc_initModule
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
80004736 g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
8000491a g     F .text	00000028 IfxVadc_getSrcAddress
80004966 g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004d7e g     F .text	00000024 IfxAsclin_getOvsFrequency
80009a9e g     F .text	00000096 SetEvent
800076ce g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
80006fda g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
80009bfa g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000ce8 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
800004f0 g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000da6a g     F .text	00000050 memmove
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d330 g     F .text	00000056 _Balloc
80000cc8 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
800007e0 g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
800005c0 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80006212 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006384 g     F .text	000003be IfxScuCcu_init
8000dfa2 g     F .text	00000040 .hidden __gtdf2
8000df06  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
80009364 g     F .text	00000042 SuspendAllInterrupts
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_10
80005150 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
800007c0 g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
8000a19c g     F .text	00000066 osEE_hal_terminate_ctx
80000270 g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
80009d40 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
800099ac g     F .text	00000078 GetTaskState
800080f4 g     F .text	00000020 Ifx_CircularBuffer_get32
80009df2 g     F .text	00000022 osEE_task_event_set_mask
80000300 g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
80000730 g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
800073c2 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005b14 g     F .text	00000092 IfxPort_setGroupModeOutput
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_4
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005f62 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000c28 g     O .bss	00000004 errno
8000a7be g     F .text	0000001e .hidden __make_dp
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001160 g       .traptab	00000000 osEE_tc_trap_context
80007544 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
800006d0 g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
80000870 g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
80000530 g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
8000a8de g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
800044b6 g     F .text	0000007e initVADCChannels
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
800002a0 g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000bc8 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000c40 g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
8000704a g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
80009b66 g     F .text	00000058 ClearEvent
800062d6 g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
80009c04 g     F .text	000000aa osEE_scheduler_task_wrapper_run
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
80000610 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
80000940 g     O .rodata	00000080 IfxPort_cfg_indexMap
800053b2 g     F .text	000003ae IfxAsclin_Asc_initModule
80009f92 g     F .text	00000026 osEE_scheduler_task_preemption_point
80004230 g     F .text	00000014 FuncTaskUltrasonic
8000d314 g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
800041a8 g     F .text	0000003e FuncTask1
8000b098 g     F .text	000011a4 _svfprintf_r
8000a776 g     F .text	00000048 .hidden __floatsidf
80007706 g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006eac g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
80009d88 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000e022 g     F .text	00000040 .hidden __ltdf2
80004910 g     F .text	0000000a IfxVadc_getScanStatus
80001210 g       .dtors	00000000 __DTOR_END__
8000690a g     F .text	00000076 IfxScuCcu_setCpuFrequency
80006fec g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000a03e g     F .text	00000026 osEE_idle_task_terminate
80000c2c g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
80000860 g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80000690 g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000d8d6 g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
800070ba g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
80007254 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
80009ecc g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000ab78 g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006d1c g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
800006f0 g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
80009212 g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001140 g       .traptab	00000000 osEE_tc_trap_instruction
80000e98 g     O .rodata	000000c8 __mprec_tens
70000008 g     O .data	00000004 g_vadcChannelIDs
800051f4 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
80009752 g     F .text	000000b2 GetResource
80000390 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000480 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000c286 g     F .text	00000016 vsnprintf
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
800008c0 g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
70000c20 g     O .bss	00000004 __malloc_top_pad
80004556 g     F .text	00000026 readADCValue
80006980 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005ca0 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a152 g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000ba0 g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80008262 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d2f2 g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004d44 g     F .text	00000022 IfxAsclin_getIndex
8000d4c2 g     F .text	00000010 __i2b
800096de g     F .text	00000074 Schedule
80004da2 g     F .text	00000016 IfxAsclin_getShiftFrequency
80007944 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
80000290 g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006be2 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
800006b0 g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
800072b0 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000b030 g     F .text	0000001e _sbrk_r
80000440 g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000c60 g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
80000450 g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000938 g     O .bss	0000000c g_vadcGroup
80006e60 g     F .text	00000026 IfxScuEru_enableAutoClear
800006a0 g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000aa06 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005d46 g     F .text	0000003c IfxPort_setPinPadDriver
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
80000400 g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000c1c g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800011a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
8000a274 g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80004cba g     F .text	00000016 IfxAsclin_getAddress
8000a442 g     F .text	00000038 .hidden __adddf3
80004164 g     F .text	0000000e lcd_goto
80009510 g     F .text	0000001a GetActiveApplicationMode
8000625c g     F .text	0000007a IfxScuCcu_getSriFrequency
8000890a g     F .text	0000001c sendTrigger
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800093a6 g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006b62 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e150 g     F .text	00000026 .hidden __umoddi3
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
80000890 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000df0 g     O .rodata	00000004 _global_impure_ptr
80006d6c g     F .text	00000036 IfxScuEru_connectTrigger
70000918 g     O .bss	00000020 g_vadcChannel
80006318 g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000daca g     F .text	000003f0 _realloc_r
80000670 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004df4 g     F .text	00000012 IfxAsclin_read16
80005a48 g     F .text	0000003c IfxPort_enableEmergencyStop
800002c0 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000e0b0 g     F .text	000000a0 .hidden __udivdi3
80000840 g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
800002d0 g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
80009cd0 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
80000490 g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
8000408a g     F .text	0000000a lcd_clear
80000e70 g     O .rodata	00000028 __mprec_bigtens
8000df10 g     F .text	00000012 abort
8000a818 g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000d722 g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
80005220 g     F .text	0000001c IfxAsclin_Asc_read
8000952a g     F .text	00000084 ActivateTask
80000bdc g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006dc8 g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
800082b6 g     F .text	0000003a Ifx_Fifo_init
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000c30  w    O .bss	00000004 _my_errno
800004d0 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005974 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
800008f0 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009954 g     F .text	00000058 GetTaskID
80006756 g     F .text	000001a2 IfxScuCcu_initErayPll
80000370 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
80000310 g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000a48 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
80006f1e g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000c84 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
800093cc g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000718a g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
8000a864 g     F .text	0000007a .hidden __unpack_f
8000915a g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
80004534 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
80009fb8 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
80009230 g     F .text	0000008e osEE_tc_stm_set_sr1
80000710 g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
8000461e g     F .text	0000000c asclin0TxISR
800005f0 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
800071e4 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
80007540 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
80000770 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
80000620 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d41a g     F .text	00000042 __hi0bits
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
80000810 g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
800003e0 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
800003f0 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e062 g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
80009e36 g     F .text	00000068 osEE_scheduler_task_activated
80006070 g     F .text	00000078 IfxScuCcu_getBbbFrequency
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
80000320 g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
800004a0 g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
8000634e g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000af0 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
80007122 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
8000898e g     F .text	00000024 getUltrasonic
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
80000640 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004eea g     F .text	00000182 IfxAsclin_setBitTiming
80000ca8 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
800004b0 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
800002e0 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
800007f0 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000c6c g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80007584 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a202 g     F .text	00000026 .hidden __lshrdi3
80000700 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
80000830 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
80000590 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007b46 g     F .text	0000038a IfxVadc_Adc_initGroup
8000d5ec g     F .text	0000007c __pow5mult
70000948 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
80006e14 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
80000550 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
80009f08 g     F .text	0000008a osEE_scheduler_task_terminated
80000330 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000aab2 g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
80008156 g     F .text	0000005e Ifx_CircularBuffer_read8
80000880 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
80007372 g     F .text	0000001a IfxScuWdt_initConfig
80001200 g       .ctors	00000000 __CTOR_LIST__
800090b6 g     F .text	000000a4 osEE_tc_get_fsource
80004e06 g     F .text	00000012 IfxAsclin_read32
80000c04 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
80007460 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
800008b0 g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
80000780 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
8000918e g     F .text	00000084 osEE_tc_stm_set_sr0
80000b00 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
80000650 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
8000a17e g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d2fc g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000d146 g     F .text	000001ac _free_r
800057e8 g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
80009bbe g     F .text	00000018 GetISRID
8000a0f0 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
80001180 g       .traptab	00000000 osEE_tc_trap_bus
80005d84 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
800008d0 g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
700000d8 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
800082f0 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
80007342 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800011e0 g       .traptab	00000000 osEE_tc_trap_nmi
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_5
8000d668 g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
80000630 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
800075aa g     F .text	0000001c IfxVadc_Adc_disableModule
00002000 g       *ABS*	00000000 __CSA_SIZE
8000d918 g     F .text	000000f0 __ssprint_r
80004834 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
800046b8 g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000d4d2 g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006f2c g     F .text	00000012 IfxScuEru_getEventFlagStatus
80004172 g     F .text	00000036 lcd_print
80000510 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
80000360 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004b80 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006dee g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000bf0 g     O .bss	00000028 __malloc_current_mallinfo
8000d82e g     F .text	000000a8 __d2b
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000b3c g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80008114 g     F .text	00000022 Ifx_CircularBuffer_get16
80000430 g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005f1e g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001200 g       .ctors	00000000 __EH_FRAME_END__
80006da2 g     F .text	00000026 IfxScuEru_disableAutoClear
80006a0e g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
80006178 g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
800005d0 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000e176 g     F .text	000000a6 .hidden __fpcmp_parts_d
80004c9e g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
80009d96 g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
8000a064 g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
70000004 g     O .data	00000002 rpm
80006ed2 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
800007b0 g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
800059a4 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
80009b34 g     F .text	00000032 GetEvent
80005396 g     F .text	0000001c IfxAsclin_Asc_disableModule
8000a228 g     F .text	0000004c .hidden __floatundisf
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004e18 g     F .text	00000012 IfxAsclin_read8
80009e9e g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000a65e g     F .text	00000118 .hidden __divdf3
80000d08 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000cb8 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
80005892 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80007fe6 g     F .text	0000003a IfxVadc_Adc_initModuleConfig
700000e0 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
800098f0 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000c23c g     F .text	0000004a _vsnprintf_r
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
8000a4ba g     F .text	000001a4 .hidden __muldf3
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
800006c0 g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
8000889c g     F .text	0000006e delay_us
80000cf8 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b02c g     F .text	00000002 __malloc_lock
8000deca g     F .text	0000003c sbrk
80005e7c g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004680 g     F .text	00000038 IfxVadc_disableAccess
80000000 g       .startup	00000000 BootModeHeader0
800011c0 g       .traptab	00000000 osEE_tc_trap_system
80000c78 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004de0 g     F .text	00000014 IfxAsclin_getSrcPointerTx
8000487c g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000da08 g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
8000619a g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
800007a0 g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004772 g     F .text	000000aa IfxVadc_enableGroupSync
80006f86 g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
8000523c g     F .text	0000009e IfxAsclin_Asc_isrTransmit
80000350 g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000daba g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
80004094 g     F .text	000000d0 lcd_init
8000462a g     F .text	00000054 main
80007322 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80008832 g     F .text	0000006a delay_ms
80006ef8 g     F .text	00000026 IfxScuEru_enableTriggerPulse
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000c18 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
80004c70 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e21c g     F .text	0000009c .hidden __udiv6432
00000400 g       *ABS*	00000000 __ISTACK_SIZE
80006158 g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
80008062 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000bb4 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
70000954 g     O .bss	0000027c g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000c54 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
80009dbc g     F .text	00000018 osEE_task_activated
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
800000c0 g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
8000735e g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000a7dc g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000c3b8 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000ab92 g     F .text	0000049a _malloc_r
800004c0 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005d04 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
80000790 g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005370 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
80000580 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
800050a4 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
80000570 g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80005080 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
80004310 g     F .text	0000006e printfSerial
80000d78 g     O .rodata	00000014 .hidden __thenan_df
8000d08c g     F .text	000000ba _malloc_trim_r
80001208 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
800003a0 g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004a84 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
800046f0 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
800041e6 g     F .text	0000004a FuncTaskLCD
80009804 g     F .text	000000ec ReleaseResource
80008020 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004d66 g     F .text	00000018 IfxAsclin_getPdFrequency
80004852 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001208 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
80004b2e g     F .text	00000052 IfxVadc_resetKernel
800008a0 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80000c9c g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000df62 g     F .text	00000040 .hidden __nedf2
80004e98 g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80005fd4 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006aae g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80006f62 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000ad0 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
800009c0 g     O .rodata	00000080 IfxPort_cfg_esrMasks
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
800006e0 g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
8000b04e g     F .text	00000036 sprintf
80004000 g     F .text	0000000a read_LCD_buttons
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
800051fc g     F .text	00000010 IfxAsclin_Asc_clearRx
80000910 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000d28 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005a1e g     F .text	0000002a IfxPort_setESR
800004e0 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
80000420 g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
80000900 g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000b78 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
80000410 g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
700004e8 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
800059c6 g     F .text	00000028 IfxPort_resetESR
800050d8 g     F .text	00000072 IfxAsclin_Asc_isrError
80004942 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80004dcc g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
80000470 g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
8000880e g     F .text	00000024 initUltrasonic
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004db8 g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
800003c0 g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
80000800 g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
80009332 g     F .text	00000016 DisableAllInterrupts
80008204 g     F .text	0000005e Ifx_CircularBuffer_write8
800052da g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005a84 g     F .text	00000090 IfxPort_setGroupModeInput
80008312 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
800095ae g     F .text	000000d6 ChainTask
80006fa6 g     F .text	00000034 IfxScuEru_selectExternalInput
80006e86 g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
800008e0 g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
80000760 g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
800005e0 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
80006742 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
800002b0 g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
800049b4 g     F .text	00000066 IfxVadc_initializeFAdcI
80000520 g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000b14 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
80000280 g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001100 g       .traptab	00000000 osEE_tc_trap_mmu
800081b4 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
80005158 g     F .text	0000009c IfxAsclin_Asc_flushTx
800092dc g     F .text	00000028 osEE_tc_delay
80000600 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
80000f60 g     O .rodata	00000000 __clear_table
80005eba g     F .text	00000064 IfxScuCcu_getPllErayFrequency
800007d0 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
80009dd4 g     F .text	0000001e osEE_task_end
800005b0 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
80000820 g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001200 g       .ctors	00000000 __EH_FRAME_BEGIN__
80000500 g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
80006018 g     F .text	00000024 IfxScuCcu_getSourceFrequency
80000460 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000d18 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000bf0 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a01e g     F .text	00000020 osEE_change_context_from_task_end
80009a24 g     F .text	0000007a WaitEvent
800059ee g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
800089b2 g     F .text	00000016 calculateDistanceCm
800002f0 g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007ed0 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
800092be g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
700000dc g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
8000484e g     F .text	00000004 IfxVadc_getAdcModuleFrequency
80008688 g     F .text	00000186 Ifx_Fifo_write
8000d764 g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
80009e14 g     F .text	00000022 osEE_activate_isr2
80007b30 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004cd0 g     F .text	00000074 IfxAsclin_getFaFrequency
80006a5e g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
80008e88 g     F .text	0000022e osEE_tc_set_pll_fsource
8000498a g     F .text	0000002a IfxVadc_initializeFAdcD
8000429e g     F .text	00000072 UART_init
80005ba6 g     F .text	000000a4 IfxPort_setGroupPadDriver
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
80000cd8 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
80000850 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
80005092 g     F .text	00000012 IfxAsclin_write8
80006f98 g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
80000fc8 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
8000506c g     F .text	00000014 IfxAsclin_write16
80008562 g     F .text	00000036 Ifx_Fifo_clear
80000b8c g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000deba g     F .text	00000010 _exit
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001120 g       .traptab	00000000 osEE_tc_trap_protection
80001100 g     F .traptab	00000000 __TRAPTAB
80000c18 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006d44 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006e3a g     F .text	00000026 IfxScuEru_disableTriggerPulse
80007496 g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
800050b4 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000b084 g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004e76 g     F .text	00000022 IfxAsclin_setClockSource
8000dfe2 g     F .text	00000040 .hidden __gedf2
80000a40 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
8000457c g     F .text	000000a2 initPeripheralsAndERU
80000750 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
800003b0 g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
80000b50 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004ba4 g     F .text	00000056 IfxVadc_setArbiterPriority
70000c38 g     O .text	00000001 __HEAP_END
80000540 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
800060e8 g     F .text	00000070 IfxScuCcu_getMaxFrequency
80009348 g     F .text	0000001c EnableAllInterrupts
80000560 g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004c0e g     F .text	00000044 IfxVadc_startupCalibration
70000944 g     O .bss	00000004 g_vadc
80005c4a g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000b28 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000a114 g     F .text	0000001a osEE_hal_restore_ctx
80004484 g     F .text	00000032 initVADCGroup
800005a0 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000a47a g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
800050ba g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004a1a g     F .text	0000006a IfxVadc_isPostCalibration
80004466 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006d06 g     F .text	00000016 IfxScuEru_clearEventFlag
80007464 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d45c g     F .text	00000066 __lo0bits
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
80000340 g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
80005e8a g     F .text	00000030 IfxScuCcu_getOscFrequency
80009428 g     F .text	0000003c ResumeOSInterrupts
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004e2a g     F .text	0000004c IfxAsclin_resetModule
80006f3e g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
80000660 g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006cf4 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
800000d4 g     O .rodata	00000008 osEE_cdb_var
8000a8f4 g     F .text	00000112 .hidden __pack_d
80000920 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
80009464 g     F .text	000000ac StartOS
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000c90 g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000b64 g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
8000ab84 g     F .text	0000000e free
80000ac0 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d398 g     F .text	00000082 __multadd
8000d386 g     F .text	00000012 _Bfree
80000680 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 e4 44 	ja 800089c8 <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001100 <__TRAPTAB>:
80001100:	00 a0       	debug 
80001102:	1d ff ff ff 	j 80001100 <__TRAPTAB>
	...

80001120 <osEE_tc_trap_protection>:
80001120:	00 a0       	debug 
80001122:	1d ff ff ff 	j 80001120 <osEE_tc_trap_protection>
	...

80001140 <osEE_tc_trap_instruction>:
80001140:	00 a0       	debug 
80001142:	1d ff ff ff 	j 80001140 <osEE_tc_trap_instruction>
	...

80001160 <osEE_tc_trap_context>:
80001160:	00 a0       	debug 
80001162:	1d ff ff ff 	j 80001160 <osEE_tc_trap_context>
	...

80001180 <osEE_tc_trap_bus>:
80001180:	00 a0       	debug 
80001182:	1d ff ff ff 	j 80001180 <osEE_tc_trap_bus>
	...

800011a0 <osEE_tc_trap_assertion>:
800011a0:	00 a0       	debug 
800011a2:	1d ff ff ff 	j 800011a0 <osEE_tc_trap_assertion>
	...

800011c0 <osEE_tc_trap_system>:
800011c0:	00 a0       	debug 
800011c2:	1d ff ff ff 	j 800011c0 <osEE_tc_trap_system>
	...

800011e0 <osEE_tc_trap_nmi>:
800011e0:	00 a0       	debug 
800011e2:	1d ff ff ff 	j 800011e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001200 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001208 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 14       	mov %d4,1
80002046:	1d 00 5f 39 	j 80009304 <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr_dummy_entry_4>:
80002080:	3c 00       	j 80002080 <osEE_tc_isr_dummy_entry_4>
	...

800020a0 <osEE_tc_isr_dummy_entry_5>:
800020a0:	3c 00       	j 800020a0 <osEE_tc_isr_dummy_entry_5>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr_dummy_entry_10>:
80002140:	3c 00       	j 80002140 <osEE_tc_isr_dummy_entry_10>
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
80002266:	1d 00 4f 38 	j 80009304 <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <read_LCD_buttons>:

int read_LCD_buttons(void)
{
    unsigned adc_key_in;
    int button_state;
    button_state = readADCValue(BUTTON_CH);
80004000:	82 34       	mov %d4,3
80004002:	6d 00 aa 02 	call 80004556 <readADCValue>
    else if (adc_key_in >= 50){ 
        button_state = btnNONE;  //  No action  will show "None" on the screen 
       
    } 
    return button_state;
80004006:	82 02       	mov %d2,0
80004008:	00 90       	ret 

8000400a <lcd_write4bits>:
}


static void lcd_write4bits(uint8 data)
{
    IfxPort_setPinState(LCD_D4, (data & 0x01) ? IfxPort_State_high : IfxPort_State_low);
8000400a:	8f 14 00 21 	and %d2,%d4,1
8000400e:	7b 10 00 f0 	movh %d15,1
80004012:	ab 1f a0 f2 	seln %d15,%d2,%d15,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80004016:	91 40 00 ff 	movh.a %a15,61444
8000401a:	06 4f       	sh %d15,4
8000401c:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004020:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D5, (data & 0x02) ? IfxPort_State_high : IfxPort_State_low);
80004022:	8f 24 00 21 	and %d2,%d4,2
80004026:	7b 80 00 f0 	movh %d15,8
8000402a:	91 40 00 ff 	movh.a %a15,61444
8000402e:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004032:	ab 8f a0 f2 	seln %d15,%d2,%d15,8
80004036:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D6, (data & 0x04) ? IfxPort_State_high : IfxPort_State_low);
80004038:	8f 44 00 21 	and %d2,%d4,4
8000403c:	7b 00 01 f0 	movh %d15,16
80004040:	ab 0f a1 f2 	seln %d15,%d2,%d15,16
80004044:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D7, (data & 0x08) ? IfxPort_State_high : IfxPort_State_low);
80004046:	8f 84 00 41 	and %d4,%d4,8
8000404a:	7b 00 02 f0 	movh %d15,32
8000404e:	ab 0f a2 44 	seln %d4,%d4,%d15,32
80004052:	68 14       	st.w [%a15]4,%d4
80004054:	da 80       	mov %d15,128
80004056:	68 1f       	st.w [%a15]4,%d15


static void lcd_pulse_enable(void)
{
    IfxPort_setPinHigh(LCD_E);
    delay_ms(2);       
80004058:	82 24       	mov %d4,2
8000405a:	6d 00 ec 23 	call 80008832 <delay_ms>
8000405e:	7b 00 08 f0 	movh %d15,128
80004062:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinLow(LCD_E);
    delay_ms(2);       
80004064:	82 24       	mov %d4,2
80004066:	1d 00 e6 23 	j 80008832 <delay_ms>

8000406a <lcd_command>:
8000406a:	91 40 00 ff 	movh.a %a15,61444
8000406e:	7b 00 04 20 	movh %d2,64
80004072:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
    lcd_pulse_enable();
}


static void lcd_command(uint8 cmd)
{
80004076:	02 4f       	mov %d15,%d4
80004078:	68 12       	st.w [%a15]4,%d2
    IfxPort_setPinLow(LCD_RS);
    lcd_write4bits(cmd >> 4);
8000407a:	06 c4       	sh %d4,-4
8000407c:	5c c7       	call 8000400a <lcd_write4bits>
    lcd_write4bits(cmd & 0x0F);
8000407e:	8f ff 00 41 	and %d4,%d15,15
80004082:	5c c4       	call 8000400a <lcd_write4bits>
    delay_ms(5);       
80004084:	82 54       	mov %d4,5
80004086:	1d 00 d6 23 	j 80008832 <delay_ms>

8000408a <lcd_clear>:
}


void lcd_clear(void)
{
    lcd_command(0x01);
8000408a:	82 14       	mov %d4,1
8000408c:	5c ef       	call 8000406a <lcd_command>
    delay_ms(5);       
8000408e:	82 54       	mov %d4,5
80004090:	1d 00 d1 23 	j 80008832 <delay_ms>

80004094 <lcd_init>:
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80004094:	91 40 00 4f 	movh.a %a4,61444
80004098:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000409c:	82 64       	mov %d4,6
8000409e:	3b 00 08 50 	mov %d5,128
800040a2:	6d 00 d4 0d 	call 80005c4a <IfxPort_setPinMode>
800040a6:	91 40 00 4f 	movh.a %a4,61444
800040aa:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040ae:	82 74       	mov %d4,7
800040b0:	3b 00 08 50 	mov %d5,128
800040b4:	6d 00 cb 0d 	call 80005c4a <IfxPort_setPinMode>
800040b8:	91 40 00 4f 	movh.a %a4,61444
800040bc:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
800040c0:	82 44       	mov %d4,4
800040c2:	3b 00 08 50 	mov %d5,128
800040c6:	6d 00 c2 0d 	call 80005c4a <IfxPort_setPinMode>
800040ca:	91 40 00 4f 	movh.a %a4,61444
800040ce:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040d2:	82 34       	mov %d4,3
800040d4:	3b 00 08 50 	mov %d5,128
800040d8:	6d 00 b9 0d 	call 80005c4a <IfxPort_setPinMode>
800040dc:	91 40 00 4f 	movh.a %a4,61444
800040e0:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040e4:	82 44       	mov %d4,4
800040e6:	3b 00 08 50 	mov %d5,128
800040ea:	6d 00 b0 0d 	call 80005c4a <IfxPort_setPinMode>
800040ee:	91 40 00 4f 	movh.a %a4,61444
800040f2:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040f6:	3b 00 08 50 	mov %d5,128
800040fa:	82 54       	mov %d4,5
800040fc:	6d 00 a7 0d 	call 80005c4a <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(LCD_D4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D7, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    delay_ms(100);  
80004100:	3b 40 06 40 	mov %d4,100
80004104:	6d 00 97 23 	call 80008832 <delay_ms>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80004108:	91 40 00 ff 	movh.a %a15,61444
8000410c:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004110:	7b 00 04 f0 	movh %d15,64
80004114:	68 1f       	st.w [%a15]4,%d15
80004116:	7b 00 08 f0 	movh %d15,128
8000411a:	68 1f       	st.w [%a15]4,%d15

    IfxPort_setPinLow(LCD_RS);
    IfxPort_setPinLow(LCD_E);

    lcd_write4bits(0x03); delay_ms(10);  
8000411c:	82 34       	mov %d4,3
8000411e:	6d ff 76 ff 	call 8000400a <lcd_write4bits>
80004122:	3b a0 00 40 	mov %d4,10
80004126:	6d 00 86 23 	call 80008832 <delay_ms>
    lcd_write4bits(0x03); delay_ms(10);  
8000412a:	82 34       	mov %d4,3
8000412c:	6d ff 6f ff 	call 8000400a <lcd_write4bits>
80004130:	3b a0 00 40 	mov %d4,10
80004134:	6d 00 7f 23 	call 80008832 <delay_ms>
    lcd_write4bits(0x03); delay_ms(5);   
80004138:	82 34       	mov %d4,3
8000413a:	6d ff 68 ff 	call 8000400a <lcd_write4bits>
8000413e:	82 54       	mov %d4,5
80004140:	6d 00 79 23 	call 80008832 <delay_ms>
    lcd_write4bits(0x02); delay_ms(5);   
80004144:	82 24       	mov %d4,2
80004146:	6d ff 62 ff 	call 8000400a <lcd_write4bits>
8000414a:	82 54       	mov %d4,5
8000414c:	6d 00 73 23 	call 80008832 <delay_ms>

    lcd_command(0x28);
80004150:	3b 80 02 40 	mov %d4,40
80004154:	5c 8b       	call 8000406a <lcd_command>
    lcd_command(0x0C);
80004156:	3b c0 00 40 	mov %d4,12
8000415a:	5c 88       	call 8000406a <lcd_command>
    lcd_command(0x06);
8000415c:	82 64       	mov %d4,6
8000415e:	5c 86       	call 8000406a <lcd_command>
    lcd_clear();
80004160:	1d ff 95 ff 	j 8000408a <lcd_clear>

80004164 <lcd_goto>:
}


void lcd_goto(uint8 row, uint8 col)
{
    uint8 address = (row == 0) ? 0x00 : 0x40;
80004164:	ab 04 a4 44 	seln %d4,%d4,%d4,64
    address += col;
80004168:	42 54       	add %d4,%d5
    lcd_command(0x80 | address);
8000416a:	b7 14 99 43 	insert %d4,%d4,1,7,25
8000416e:	1d ff 7e ff 	j 8000406a <lcd_command>

80004172 <lcd_print>:
80004172:	91 40 00 cf 	movh.a %a12,61444
}


void lcd_print(const char *str)
{
80004176:	40 4f       	mov.aa %a15,%a4
80004178:	d9 cc 00 8a 	lea %a12,[%a12]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000417c:	3b 00 04 80 	mov %d8,64
    while (*str)
80004180:	79 ff 00 00 	ld.b %d15,[%a15]0
80004184:	6e 11       	jz %d15,800041a6 <lcd_print+0x34>
        lcd_data(*str++);
80004186:	16 ff       	and %d15,255


static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
80004188:	8f cf 1f 40 	sh %d4,%d15,-4
8000418c:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x40038004>>,%d8
80004190:	6d ff 3d ff 	call 8000400a <lcd_write4bits>
    lcd_write4bits(data & 0x0F);
80004194:	8f ff 00 41 	and %d4,%d15,15
80004198:	6d ff 39 ff 	call 8000400a <lcd_write4bits>
    delay_ms(5);       
8000419c:	82 54       	mov %d4,5


void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
8000419e:	b0 1f       	add.a %a15,1
static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
    lcd_write4bits(data & 0x0F);
    delay_ms(5);       
800041a0:	6d 00 49 23 	call 80008832 <delay_ms>
800041a4:	3c ee       	j 80004180 <lcd_print+0xe>

void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
}
800041a6:	00 90       	ret 

800041a8 <FuncTask1>:

uint16_t rpm = 1000; // LCD에 출력한 전역변수 선언

TASK(Task1)
{
    printfSerial("Task1 Begins...");
800041a8:	91 00 00 48 	movh.a %a4,32768


uint16_t rpm = 1000; // LCD에 출력한 전역변수 선언

TASK(Task1)
{
800041ac:	20 08       	sub.a %sp,8
    printfSerial("Task1 Begins...");
800041ae:	d9 44 28 00 	lea %a4,[%a4]40
800041b2:	6d 00 af 00 	call 80004310 <printfSerial>
    int a0 = readADCValue(3);
800041b6:	82 34       	mov %d4,3
800041b8:	6d 00 cf 01 	call 80004556 <readADCValue>
    printfSerial("%d",a0);
800041bc:	91 00 00 48 	movh.a %a4,32768
uint16_t rpm = 1000; // LCD에 출력한 전역변수 선언

TASK(Task1)
{
    printfSerial("Task1 Begins...");
    int a0 = readADCValue(3);
800041c0:	74 a2       	st.w [%sp],%d2
    printfSerial("%d",a0);
800041c2:	d9 44 38 00 	lea %a4,[%a4]56 <80000038 <_start+0x18>>
800041c6:	6d 00 a5 00 	call 80004310 <printfSerial>
    mdelay(3000);
800041ca:	3b 80 bb 40 	mov %d4,3000
800041ce:	6d 00 d8 00 	call 8000437e <mdelay>
    printfSerial("Task1 Finishes...");
800041d2:	91 00 00 48 	movh.a %a4,32768
800041d6:	d9 44 3b 00 	lea %a4,[%a4]59 <8000003b <_start+0x1b>>
800041da:	6d 00 9b 00 	call 80004310 <printfSerial>

    TerminateTask();
}
800041de:	d9 aa 08 00 	lea %sp,[%sp]8
    int a0 = readADCValue(3);
    printfSerial("%d",a0);
    mdelay(3000);
    printfSerial("Task1 Finishes...");

    TerminateTask();
800041e2:	1d 00 51 2a 	j 80009684 <TerminateTask>

800041e6 <FuncTaskLCD>:
}

TASK(TaskLCD)
{   
    rpm += 100;
800041e6:	91 00 00 f7 	movh.a %a15,28672
800041ea:	c9 ff 04 00 	ld.h %d15,[%a15]4 <70000004 <rpm>>

    TerminateTask();
}

TASK(TaskLCD)
{   
800041ee:	20 28       	sub.a %sp,40
    rpm += 100;
800041f0:	1b 4f 06 f0 	addi %d15,%d15,100
800041f4:	f9 ff 04 00 	st.h [%a15]4,%d15
    lcd_clear(); // LCD 출력 내용 초기화 함수
800041f8:	6d ff 49 ff 	call 8000408a <lcd_clear>

    char buf[32];  
    sprintf(buf, "RPM = %u", rpm); 
800041fc:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80004200:	91 00 00 58 	movh.a %a5,32768
80004204:	d9 55 0d 10 	lea %a5,[%a5]77 <8000004d <_start+0x2d>>
80004208:	d9 a4 08 00 	lea %a4,[%sp]8 <8000004d <_start+0x2d>>
8000420c:	78 00       	st.w [%sp]0,%d15
8000420e:	6d 00 20 37 	call 8000b04e <sprintf>
    lcd_print(buf);  // 출력할 내용을 문자열로 만들어 LCD에게 전송
80004212:	d9 a4 08 00 	lea %a4,[%sp]8
80004216:	6d ff ae ff 	call 80004172 <lcd_print>

    lcd_goto(1,0); // LCD 커서 위치 이동 함수
8000421a:	d2 14       	mov %e4,1
8000421c:	6d ff a4 ff 	call 80004164 <lcd_goto>
    lcd_print("Hello World!");
80004220:	91 00 00 48 	movh.a %a4,32768
80004224:	d9 44 16 10 	lea %a4,[%a4]86 <80000056 <_start+0x36>>
80004228:	6d ff a5 ff 	call 80004172 <lcd_print>

    TerminateTask();
8000422c:	1d 00 2c 2a 	j 80009684 <TerminateTask>

80004230 <FuncTaskUltrasonic>:
}

TASK(TaskUltrasonic)
{   
80004230:	20 08       	sub.a %sp,8
    printfSerial("%d",getUltrasonic());
80004232:	6d 00 ae 23 	call 8000898e <getUltrasonic>
80004236:	91 00 00 48 	movh.a %a4,32768
8000423a:	74 a2       	st.w [%sp],%d2
8000423c:	d9 44 38 00 	lea %a4,[%a4]56 <80000038 <_start+0x18>>
80004240:	1d 00 68 00 	j 80004310 <printfSerial>

80004244 <TimerISR>:


ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004244:	7b f0 00 40 	movh %d4,15
    printfSerial("%d",getUltrasonic());
}


ISR2(TimerISR)
{
80004248:	20 08       	sub.a %sp,8
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000424a:	1b 04 24 44 	addi %d4,%d4,16960
    if (c == 0)
8000424e:	91 00 00 f7 	movh.a %a15,28672


ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004252:	6d 00 e0 27 	call 80009212 <osEE_tc_stm_set_sr0_next_match>
    if (c == 0)
80004256:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
8000425a:	ee 04       	jnz %d15,80004262 <TimerISR+0x1e>
        ActivateTask(Task1);
8000425c:	82 24       	mov %d4,2
8000425e:	6d 00 66 29 	call 8000952a <ActivateTask>
    if (c % 2 == 0)
80004262:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004266:	ae 04       	jnz.t %d15,0,8000426e <TimerISR+0x2a>
    ActivateTask(TaskLCD);
80004268:	82 34       	mov %d4,3
8000426a:	6d 00 60 29 	call 8000952a <ActivateTask>
    ActivateTask(TaskUltrasonic);
8000426e:	82 44       	mov %d4,4
80004270:	6d 00 5d 29 	call 8000952a <ActivateTask>
    printfSerial("\n%4ld: ", c++);
80004274:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004278:	91 00 00 48 	movh.a %a4,32768
8000427c:	d9 44 23 10 	lea %a4,[%a4]99 <80000063 <_start+0x43>>
80004280:	78 00       	st.w [%sp]0,%d15
80004282:	c2 1f       	add %d15,1
80004284:	59 ff 00 00 	st.w [%a15]0 <70000000 <__DSPR0_START>>,%d15
80004288:	6d 00 44 00 	call 80004310 <printfSerial>
    int a;
    a =  read_LCD_buttons();
8000428c:	6d ff ba fe 	call 80004000 <read_LCD_buttons>
    printfSerial("%d",a);
80004290:	91 00 00 48 	movh.a %a4,32768
80004294:	74 a2       	st.w [%sp],%d2
80004296:	d9 44 38 00 	lea %a4,[%a4]56 <80000038 <_start+0x18>>
8000429a:	1d 00 3b 00 	j 80004310 <printfSerial>

8000429e <UART_init>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void UART_init(void)
{
8000429e:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042a0:	d9 a4 24 00 	lea %a4,[%sp]36
800042a4:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
800042a8:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042aa:	6d 00 5b 0a 	call 80005760 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
800042ae:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
800042b2:	7b 10 7e f4 	movh %d15,18401
800042b6:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
800042b8:	82 3f       	mov %d15,3
800042ba:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
800042be:	da 13       	mov %d15,19
800042c0:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800042c4:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042c8:	7b 00 00 28 	movh %d2,32768
800042cc:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800042ce:	37 0f 63 f0 	extr.u %d15,%d15,0,3
800042d2:	d9 af 04 00 	lea %a15,[%sp]4
800042d6:	40 f4       	mov.aa %a4,%a15
800042d8:	d9 32 2c 10 	lea %a2,[%a3]108
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
800042dc:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042e0:	a0 33       	mov.a %a3,3
800042e2:	09 22 48 01 	ld.d %e2,[%a2+]8
800042e6:	89 42 48 01 	st.d [%a4+]8 <80000008 <BootModeHeader0+0x8>>,%e2
800042ea:	fc 3c       	loop %a3,800042e2 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800042ec:	7b 00 00 f7 	movh %d15,28672
800042f0:	1b 4f 95 f0 	addi %d15,%d15,2388
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800042f4:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800042f8:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800042fa:	d9 44 a8 e0 	lea %a4,[%a4]2984 <70000ba8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
800042fe:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004302:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004306:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
8000430a:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000430c:	1d 00 53 08 	j 800053b2 <IfxAsclin_Asc_initModule>

80004310 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004310:	20 e8       	sub.a %sp,232
80004312:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80004314:	6d 00 1a 28 	call 80009348 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
80004318:	40 f5       	mov.aa %a5,%a15
8000431a:	d9 a4 28 10 	lea %a4,[%sp]104
8000431e:	3b 00 08 40 	mov %d4,128
80004322:	d9 a6 28 30 	lea %a6,[%sp]232
80004326:	6d 00 b0 3f 	call 8000c286 <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
8000432a:	d9 a4 28 10 	lea %a4,[%sp]104
8000432e:	6d 00 ab 36 	call 8000b084 <strlen>
80004332:	91 00 00 f7 	movh.a %a15,28672
80004336:	d9 ff 94 50 	lea %a15,[%a15]2388 <70000954 <g_AsclinAsc>>
8000433a:	f9 f2 3a 90 	st.h [%a15]634 <7000027a <__malloc_av_+0x19a>>,%d2
    unsigned int i =0;
8000433e:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80004340:	d9 a4 28 10 	lea %a4,[%sp]104
80004344:	6d 00 a0 36 	call 8000b084 <strlen>
80004348:	7f 2f 0c 80 	jge.u %d15,%d2,80004360 <printfSerial+0x50>
        txData[i] = buf[i];
8000434c:	d9 a3 04 00 	lea %a3,[%sp]4
80004350:	10 32       	addsc.a %a2,%a3,%d15,0
80004352:	d9 a3 28 10 	lea %a3,[%sp]104
80004356:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80004358:	c2 1f       	add %d15,1
        txData[i] = buf[i];
8000435a:	08 02       	ld.bu %d2,[%a15]0
8000435c:	34 22       	st.b [%a2],%d2
8000435e:	3c f1       	j 80004340 <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
80004360:	91 00 00 47 	movh.a %a4,28672
80004364:	91 00 00 67 	movh.a %a6,28672
80004368:	82 f4       	mov %d4,-1
8000436a:	d9 44 a8 e0 	lea %a4,[%a4]2984 <70000ba8 <g_AsclinAsc+0x254>>
8000436e:	d9 a5 04 00 	lea %a5,[%sp]4 <70000ba8 <g_AsclinAsc+0x254>>
80004372:	d9 66 8e f0 	lea %a6,[%a6]3022 <70000bce <g_AsclinAsc+0x27a>>
80004376:	9b 04 00 58 	addih %d5,%d4,32768
8000437a:	1d 00 5b 0a 	j 80005830 <IfxAsclin_Asc_write>

8000437e <mdelay>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000437e:	85 fa 10 00 	ld.w %d10,f0000010 <_SMALL_DATA4_+0x3fff8010>
}

void mdelay(unsigned long delay_ms)
{
80004382:	02 4b       	mov %d11,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80004384:	85 fc 2c 00 	ld.w %d12,f000002c <_SMALL_DATA4_+0x3fff802c>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80004388:	6d 00 48 0e 	call 80006018 <IfxScuCcu_getSourceFrequency>
8000438c:	91 30 00 ff 	movh.a %a15,61443
80004390:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80004394:	4c f0       	ld.w %d15,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004396:	53 1a 40 80 	mul.u %e8,%d10,1
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000439a:	0b ac 10 48 	mov %e4,%d12,%d10
8000439e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800043a2:	a6 95       	or %d5,%d9
800043a4:	02 28       	mov %d8,%d2
800043a6:	6d 00 41 2f 	call 8000a228 <__floatundisf>
800043aa:	4b 0f 41 f1 	itof %d15,%d15
800043ae:	7b a0 47 a4 	movh %d10,17530
800043b2:	4b f8 51 f0 	div.f %d15,%d8,%d15
800043b6:	40 fc       	mov.aa %a12,%a15
800043b8:	40 fd       	mov.aa %a13,%a15
800043ba:	4b af 51 f0 	div.f %d15,%d15,%d10
800043be:	4b f2 51 20 	div.f %d2,%d2,%d15
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043c2:	02 ae       	mov %d14,%d10
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043c4:	4b 02 71 f1 	ftouz %d15,%d2
800043c8:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800043cc:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043d0:	6d 00 24 0e 	call 80006018 <IfxScuCcu_getSourceFrequency>
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
800043d4:	3b 40 01 40 	mov %d4,20
800043d8:	4b 4b 11 42 	div.u %e4,%d11,%d4
800043dc:	48 02       	ld.w %d2,[%a15]0
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
800043de:	82 0b       	mov %d11,0
    while (cnt < (delay_ms / period_ms)) {
800043e0:	02 4d       	mov %d13,%d4
800043e2:	5f db 41 00 	jeq %d11,%d13,80004464 <mdelay+0xe6>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043e6:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800043ea:	85 fe 2c 08 	ld.a %a14,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043ee:	53 1c 40 80 	mul.u %e8,%d12,1
800043f2:	6d 00 13 0e 	call 80006018 <IfxScuCcu_getSourceFrequency>
800043f6:	54 c3       	ld.w %d3,[%a12]
    result |= ((uint64)stm->CAP.U) << 32;
800043f8:	80 e5       	mov.d %d5,%a14
800043fa:	37 03 64 34 	extr.u %d3,%d3,8,4
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043fe:	02 c4       	mov %d4,%d12
80004400:	a6 95       	or %d5,%d9
80004402:	60 3f       	mov.a %a15,%d3
80004404:	02 28       	mov %d8,%d2
80004406:	6d 00 11 2f 	call 8000a228 <__floatundisf>
8000440a:	80 f4       	mov.d %d4,%a15
8000440c:	4b 04 41 31 	itof %d3,%d4
80004410:	4b 38 51 80 	div.f %d8,%d8,%d3
80004414:	4b a8 51 80 	div.f %d8,%d8,%d10
80004418:	4b 82 51 20 	div.f %d2,%d2,%d8
8000441c:	4b 02 71 21 	ftouz %d2,%d2
        if (current_ms - prev_ms >= period_ms) {
80004420:	a2 f2       	sub %d2,%d15
80004422:	8b 42 61 22 	lt.u %d2,%d2,20
80004426:	df 02 de ff 	jne %d2,0,800043e2 <mdelay+0x64>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000442a:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000442e:	85 ff 2c 08 	ld.a %a15,f000002c <_SMALL_DATA4_+0x3fff802c>
80004432:	6d 00 f3 0d 	call 80006018 <IfxScuCcu_getSourceFrequency>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004436:	53 1c 40 80 	mul.u %e8,%d12,1
8000443a:	4c d0       	ld.w %d15,[%a13]0
    result |= ((uint64)stm->CAP.U) << 32;
8000443c:	80 f5       	mov.d %d5,%a15
8000443e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
            cnt++;
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004442:	02 c4       	mov %d4,%d12
80004444:	a6 95       	or %d5,%d9
80004446:	02 28       	mov %d8,%d2
80004448:	6d 00 f0 2e 	call 8000a228 <__floatundisf>
8000444c:	4b 0f 41 f1 	itof %d15,%d15
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        if (current_ms - prev_ms >= period_ms) {
            cnt++;
80004450:	c2 1b       	add %d11,1
80004452:	4b f8 51 f0 	div.f %d15,%d8,%d15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004456:	4b ef 51 f0 	div.f %d15,%d15,%d14
8000445a:	4b f2 51 20 	div.f %d2,%d2,%d15
8000445e:	4b 02 71 f1 	ftouz %d15,%d2
80004462:	3c c0       	j 800043e2 <mdelay+0x64>
        }
    }
}
80004464:	00 90       	ret 

80004466 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
80004466:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
80004468:	d9 a4 04 00 	lea %a4,[%sp]4
8000446c:	91 20 00 5f 	movh.a %a5,61442
80004470:	6d 00 bb 1d 	call 80007fe6 <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
80004474:	91 00 00 47 	movh.a %a4,28672
80004478:	d9 44 84 50 	lea %a4,[%a4]2372 <70000944 <g_vadc>>
8000447c:	d9 a5 04 00 	lea %a5,[%sp]4 <70000944 <g_vadc>>
80004480:	1d 00 3f 1d 	j 80007efe <IfxVadc_Adc_initModule>

80004484 <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
80004484:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004486:	91 00 00 57 	movh.a %a5,28672
8000448a:	40 a4       	mov.aa %a4,%sp
8000448c:	d9 55 84 50 	lea %a5,[%a5]2372 <70000944 <g_vadc>>
80004490:	6d 00 20 1d 	call 80007ed0 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
80004494:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004496:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
8000449a:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
8000449c:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
8000449e:	d9 44 b8 40 	lea %a4,[%a4]2360 <70000938 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800044a2:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044a4:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800044a6:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
800044aa:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800044ae:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044b2:	1d 00 4a 1b 	j 80007b46 <IfxVadc_Adc_initGroup>

800044b6 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044b6:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044ba:	7b 00 00 b7 	movh %d11,28672
800044be:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
800044c2:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
800044c6:	20 60       	sub.a %sp,96
800044c8:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044ca:	d9 ee b8 40 	lea %a14,[%a14]2360 <70000938 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044ce:	1b 8b 00 b0 	addi %d11,%d11,8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800044d2:	82 19       	mov %d9,1
800044d4:	1b 8a 91 a0 	addi %d10,%d10,2328
800044d8:	d9 dd 84 50 	lea %a13,[%a13]2372
800044dc:	53 8f 21 80 	mul %d8,%d15,24
800044e0:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044e2:	40 e5       	mov.aa %a5,%a14
800044e4:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044e6:	d9 af 20 10 	lea %a15,[%sp]96
800044ea:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044ec:	40 c4       	mov.aa %a4,%a12
800044ee:	6d 00 21 1b 	call 80007b30 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044f2:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800044f4:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044f6:	30 3f       	add.a %a15,%a3
800044f8:	60 b3       	mov.a %a3,%d11
800044fa:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
800044fc:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004500:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004502:	60 a2       	mov.a %a2,%d10
80004504:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004506:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
8000450a:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000450e:	6d 00 1b 1a 	call 80007944 <IfxVadc_Adc_initChannel>
80004512:	d4 d2       	ld.a %a2,[%a13]
80004514:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <g_vadcChannelIDs>>
80004518:	c2 1f       	add %d15,1
8000451a:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000451e:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
80004522:	19 23 00 60 	ld.w %d3,[%a2]384
80004526:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
8000452a:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
8000452e:	df 4f d7 ff 	jne %d15,4,800044dc <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
80004532:	00 90       	ret 

80004534 <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
80004534:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
80004538:	6d ff 97 ff 	call 80004466 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
8000453c:	6d ff a4 ff 	call 80004484 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
80004540:	6d ff bb ff 	call 800044b6 <initVADCChannels>
80004544:	99 ff 84 50 	ld.a %a15,[%a15]2372 <70000944 <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
80004548:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000944 <g_vadc>>
8000454c:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80004550:	59 ff 04 80 	st.w [%a15]516,%d15
80004554:	00 90       	ret 

80004556 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80004556:	91 00 00 f7 	movh.a %a15,28672
8000455a:	d9 ff 98 40 	lea %a15,[%a15]2328 <70000918 <g_vadcChannel>>
8000455e:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004562:	c8 12       	ld.a %a2,[%a15]4
80004564:	0c f1       	ld.bu %d15,[%a15]1
80004566:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
8000456a:	1b 0f 0a f0 	addi %d15,%d15,160
8000456e:	90 2f       	addsc.a %a15,%a2,%d15,2
80004570:	4c f0       	ld.w %d15,[%a15]0
80004572:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
80004576:	ff 0f fd 7f 	jge %d15,0,80004570 <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
8000457a:	00 90       	ret 

8000457c <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
8000457c:	91 40 00 4f 	movh.a %a4,61444
80004580:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004584:	82 74       	mov %d4,7
80004586:	3b 00 01 50 	mov %d5,16
8000458a:	6d 00 60 0b 	call 80005c4a <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
8000458e:	91 00 00 f8 	movh.a %a15,32768
80004592:	d9 ff bc c0 	lea %a15,[%a15]2876 <80000b3c <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80004596:	c8 24       	ld.a %a4,[%a15]8
80004598:	91 00 00 d7 	movh.a %a13,28672
8000459c:	08 c4       	ld.bu %d4,[%a15]12
8000459e:	3b 80 00 50 	mov %d5,8
800045a2:	b5 df 88 50 	st.a [%a13]2376 <70000948 <g_ERUconfig>>,%a15
800045a6:	6d 00 52 0b 	call 80005c4a <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
800045aa:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800045ae:	08 44       	ld.bu %d4,[%a15]4
800045b0:	6d 00 fb 14 	call 80006fa6 <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800045b4:	99 df 88 50 	ld.a %a15,[%a13]2376 <70000948 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800045b8:	d9 dc 88 50 	lea %a12,[%a13]2376 <70000948 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800045bc:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800045be:	08 44       	ld.bu %d4,[%a15]4
800045c0:	e9 c4 04 00 	st.b [%a12]4 <70000004 <rpm>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
800045c4:	6d 00 61 14 	call 80006e86 <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800045c8:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800045cc:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
800045ce:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800045d0:	6d 00 94 14 	call 80006ef8 <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
800045d4:	39 c4 04 00 	ld.bu %d4,[%a12]4
800045d8:	39 c5 05 00 	ld.bu %d5,[%a12]5
800045dc:	6d 00 c8 13 	call 80006d6c <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
800045e0:	39 c4 06 00 	ld.bu %d4,[%a12]6
800045e4:	82 15       	mov %d5,1
800045e6:	6d 00 19 15 	call 80007018 <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
800045ea:	0c c6       	ld.bu %d15,[%a12]6
800045ec:	16 03       	and %d15,3
800045ee:	06 2f       	sh %d15,2
800045f0:	60 f2       	mov.a %a2,%d15
800045f2:	d9 2f d4 38 	lea %a15,[%a2]-29484
800045f6:	11 4f 00 ff 	addih.a %a15,%a15,61444
800045fa:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800045fc:	4c f0       	ld.w %d15,[%a15]0
800045fe:	b7 af 08 f0 	insert %d15,%d15,10,0,8
80004602:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004604:	4c f0       	ld.w %d15,[%a15]0
80004606:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
8000460a:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000460c:	4c f0       	ld.w %d15,[%a15]0
8000460e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80004612:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80004614:	4c f0       	ld.w %d15,[%a15]0
80004616:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
8000461a:	68 0f       	st.w [%a15]0,%d15
8000461c:	00 90       	ret 

8000461e <asclin0TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin0TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
8000461e:	91 00 00 47 	movh.a %a4,28672
80004622:	d9 44 a8 e0 	lea %a4,[%a4]2984 <70000ba8 <g_AsclinAsc+0x254>>
80004626:	1d 00 0b 06 	j 8000523c <IfxAsclin_Asc_isrTransmit>

8000462a <main>:
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
8000462a:	6d 00 98 25 	call 8000915a <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
8000462e:	7b f0 00 40 	movh %d4,15
80004632:	82 15       	mov %d5,1
80004634:	1b 04 24 44 	addi %d4,%d4,16960
80004638:	6d 00 ab 25 	call 8000918e <osEE_tc_stm_set_sr0>

    UART_init();
8000463c:	6d ff 31 fe 	call 8000429e <UART_init>
    initADC();
80004640:	6d ff 7a ff 	call 80004534 <initADC>
    initPeripheralsAndERU();
80004644:	6d ff 9c ff 	call 8000457c <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
80004648:	6d ff 26 fd 	call 80004094 <lcd_init>
    initUltrasonic();
8000464c:	6d 00 e1 20 	call 8000880e <initUltrasonic>
    /* custom driver added end*/
    

    printfSerial("\n...............\n");
80004650:	91 00 00 48 	movh.a %a4,32768
80004654:	d9 44 0c 20 	lea %a4,[%a4]140 <8000008c <_start+0x6c>>
80004658:	6d ff 5c fe 	call 80004310 <printfSerial>
    printfSerial("...OS Starts...\n");
8000465c:	91 00 00 48 	movh.a %a4,32768
80004660:	d9 44 1e 20 	lea %a4,[%a4]158 <8000009e <_start+0x7e>>
80004664:	6d ff 56 fe 	call 80004310 <printfSerial>
    printfSerial("...............\n");
80004668:	91 00 00 48 	movh.a %a4,32768
8000466c:	d9 44 2f 20 	lea %a4,[%a4]175 <800000af <_start+0x8f>>
80004670:	6d ff 50 fe 	call 80004310 <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
80004674:	82 04       	mov %d4,0
80004676:	6d 00 f7 26 	call 80009464 <StartOS>
    return 0;
}
8000467a:	82 02       	mov %d2,0
8000467c:	00 90       	ret 
	...

80004680 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004680:	02 4f       	mov %d15,%d4
80004682:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004684:	6d 00 6d 16 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
80004688:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000468a:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
8000468c:	6d 00 66 15 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004690:	8b 0f a2 22 	ge.u %d2,%d15,32
80004694:	f6 28       	jnz %d2,800046a4 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
80004696:	19 f2 08 20 	ld.w %d2,[%a15]136
8000469a:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
8000469e:	59 ff 08 20 	st.w [%a15]136,%d15
800046a2:	3c 08       	j 800046b2 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
800046a4:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046a8:	16 1f       	and %d15,31
800046aa:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046ae:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046b2:	02 84       	mov %d4,%d8
800046b4:	1d 00 d8 16 	j 80007464 <IfxScuWdt_setSafetyEndinit>

800046b8 <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800046b8:	02 4f       	mov %d15,%d4
800046ba:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046bc:	6d 00 51 16 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800046c0:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046c2:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800046c4:	6d 00 4a 15 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800046c8:	8b 0f a2 22 	ge.u %d2,%d15,32
800046cc:	f6 28       	jnz %d2,800046dc <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
800046ce:	19 f2 08 20 	ld.w %d2,[%a15]136
800046d2:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046d6:	59 ff 08 20 	st.w [%a15]136,%d15
800046da:	3c 08       	j 800046ea <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
800046dc:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046e0:	16 1f       	and %d15,31
800046e2:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046e6:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046ea:	02 84       	mov %d4,%d8
800046ec:	1d 00 bc 16 	j 80007464 <IfxScuWdt_setSafetyEndinit>

800046f0 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
800046f0:	82 0f       	mov %d15,0
800046f2:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800046f6:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
800046fa:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800046fe:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
80004700:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004704:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
80004708:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000470c:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
80004710:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004714:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
80004716:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000471a:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000471c:	6d ff ce ff 	call 800046b8 <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
80004720:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004724:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004728:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
8000472a:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000472e:	3b f0 00 40 	mov %d4,15
80004732:	1d ff a7 ff 	j 80004680 <IfxVadc_disableAccess>

80004736 <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
80004736:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
80004738:	ff 84 1c 80 	jge.u %d4,8,80004770 <IfxVadc_disablePostCalibration+0x3a>
8000473c:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000473e:	3b f0 01 40 	mov %d4,31
80004742:	02 58       	mov %d8,%d5
80004744:	6d ff ba ff 	call 800046b8 <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004748:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
8000474c:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004750:	82 1f       	mov %d15,1
80004752:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
80004756:	df 18 04 80 	jne %d8,1,8000475e <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
8000475a:	a6 2f       	or %d15,%d2
8000475c:	3c 03       	j 80004762 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
8000475e:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004762:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004766:	40 f4       	mov.aa %a4,%a15
80004768:	3b f0 01 40 	mov %d4,31
8000476c:	1d ff 8a ff 	j 80004680 <IfxVadc_disableAccess>
80004770:	00 90       	ret 

80004772 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
80004772:	40 4f       	mov.aa %a15,%a4
80004774:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004776:	6d 00 d6 15 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
8000477a:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000477c:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
8000477e:	6d 00 d2 14 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004782:	40 f4       	mov.aa %a4,%a15
80004784:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
80004788:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000478c:	6d ff 96 ff 	call 800046b8 <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
80004790:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
80004794:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004798:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
8000479a:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000479e:	3b f0 01 40 	mov %d4,31
800047a2:	6d ff 6f ff 	call 80004680 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
800047a6:	df 08 1a 80 	jne %d8,0,800047da <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
800047aa:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
800047ae:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800047b2:	82 4f       	mov %d15,4
800047b4:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800047b8:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800047bc:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
800047c0:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800047c4:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
800047c8:	3b 00 20 f4 	mov %d15,16896
800047cc:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
800047d0:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800047d4:	8f 8f c3 f1 	andn %d15,%d15,56
800047d8:	3c 1d       	j 80004812 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
800047da:	df 18 1e 80 	jne %d8,1,80004816 <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
800047de:	82 0f       	mov %d15,0
800047e0:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
800047e4:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
800047e8:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800047ec:	82 4f       	mov %d15,4
800047ee:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800047f2:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800047f6:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
800047fa:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800047fe:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004802:	3b 00 20 f4 	mov %d15,16896
80004806:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000480a:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
8000480e:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
80004812:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80004816:	02 94       	mov %d4,%d9
80004818:	1d 00 ba 15 	j 8000738c <IfxScuWdt_setCpuEndinit>

8000481c <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
8000481c:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
8000481e:	6d 00 be 0c 	call 8000619a <IfxScuCcu_getSpbFrequency>
80004822:	19 ff 00 20 	ld.w %d15,[%a15]128
80004826:	16 1f       	and %d15,31
80004828:	c2 1f       	add %d15,1
8000482a:	4b 0f 41 f1 	itof %d15,%d15
}
8000482e:	4b f2 51 20 	div.f %d2,%d2,%d15
80004832:	00 90       	ret 

80004834 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80004834:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
80004836:	6d 00 b2 0c 	call 8000619a <IfxScuCcu_getSpbFrequency>
8000483a:	19 ff 00 20 	ld.w %d15,[%a15]128
8000483e:	37 0f 62 f4 	extr.u %d15,%d15,8,2
80004842:	c2 1f       	add %d15,1
80004844:	4b 0f 41 f1 	itof %d15,%d15
}
80004848:	4b f2 51 20 	div.f %d2,%d2,%d15
8000484c:	00 90       	ret 

8000484e <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
8000484e:	1d 00 a6 0c 	j 8000619a <IfxScuCcu_getSpbFrequency>

80004852 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
80004852:	82 0f       	mov %d15,0
80004854:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
80004856:	1b 0f 07 20 	addi %d2,%d15,112
8000485a:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
8000485e:	54 22       	ld.w %d2,[%a2]
80004860:	f6 24       	jnz %d2,80004868 <IfxVadc_getBackgroundScanStatus+0x16>
80004862:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
80004864:	fc f9       	loop %a15,80004856 <IfxVadc_getBackgroundScanStatus+0x4>
80004866:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
80004868:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
8000486a:	00 90       	ret 

8000486c <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
8000486c:	19 42 08 20 	ld.w %d2,[%a4]136
80004870:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
80004874:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
80004878:	06 22       	sh %d2,2
8000487a:	00 90       	ret 

8000487c <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
8000487c:	df 15 09 00 	jeq %d5,1,8000488e <IfxVadc_getResultBasedOnRequestSource+0x12>
80004880:	76 54       	jz %d5,80004888 <IfxVadc_getResultBasedOnRequestSource+0xc>
80004882:	df 25 0b 00 	jeq %d5,2,80004898 <IfxVadc_getResultBasedOnRequestSource+0x1c>
80004886:	3c 39       	j 800048f8 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
80004888:	19 5f 00 20 	ld.w %d15,[%a5]128
8000488c:	3c 03       	j 80004892 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
8000488e:	19 5f 20 20 	ld.w %d15,[%a5]160
80004892:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
80004894:	ee 39       	jnz %d15,80004906 <IfxVadc_getResultBasedOnRequestSource+0x8a>
80004896:	3c 31       	j 800048f8 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
80004898:	19 4f 00 80 	ld.w %d15,[%a4]512
8000489c:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
8000489e:	ee 34       	jnz %d15,80004906 <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
800048a0:	1b 04 06 f0 	addi %d15,%d4,96
800048a4:	90 5f       	addsc.a %a15,%a5,%d15,2
800048a6:	4c f0       	ld.w %d15,[%a15]0
800048a8:	ef 4f 28 00 	jz.t %d15,20,800048f8 <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
800048ac:	19 42 00 c0 	ld.w %d2,[%a4]768
800048b0:	82 0f       	mov %d15,0
800048b2:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
800048b6:	19 42 00 c0 	ld.w %d2,[%a4]768
800048ba:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
800048be:	19 42 00 c0 	ld.w %d2,[%a4]768
800048c2:	37 02 62 2e 	extr.u %d2,%d2,28,2
800048c6:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
800048ca:	19 42 00 c0 	ld.w %d2,[%a4]768
800048ce:	37 02 e3 2c 	extr.u %d2,%d2,25,3
800048d2:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
800048d6:	19 42 00 c0 	ld.w %d2,[%a4]768
800048da:	37 02 65 2a 	extr.u %d2,%d2,20,5
800048de:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
800048e2:	19 42 00 c0 	ld.w %d2,[%a4]768
800048e6:	37 02 64 28 	extr.u %d2,%d2,16,4
800048ea:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
800048ee:	19 42 00 c0 	ld.w %d2,[%a4]768
800048f2:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
800048f6:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
800048f8:	1b 04 06 40 	addi %d4,%d4,96
800048fc:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004900:	4c f0       	ld.w %d15,[%a15]0
80004902:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004906:	1b 0f 0a f0 	addi %d15,%d15,160
8000490a:	90 55       	addsc.a %a5,%a5,%d15,2
8000490c:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
8000490e:	00 90       	ret 

80004910 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
80004910:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
80004914:	ab 62 a0 22 	seln %d2,%d2,%d2,6
80004918:	00 90       	ret 

8000491a <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
8000491a:	bf 45 0a 80 	jlt.u %d5,4,8000492e <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
8000491e:	9a c5       	add %d15,%d5,-4
80004920:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004924:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
80004928:	da 08       	mov %d15,8
8000492a:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
8000492e:	13 44 20 45 	madd %d4,%d5,%d4,4
80004932:	91 00 00 f8 	movh.a %a15,32768
80004936:	d9 ff 10 70 	lea %a15,[%a15]464 <800001d0 <IfxVadc_cfg_srcAddresses>>
8000493a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
8000493e:	c8 02       	ld.a %a2,[%a15]0
80004940:	00 90       	ret 

80004942 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004942:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
80004946:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
80004948:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000494c:	3b f0 01 40 	mov %d4,31
80004950:	6d ff b4 fe 	call 800046b8 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004954:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004958:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000495a:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000495e:	3b f0 01 40 	mov %d4,31
80004962:	1d ff 8f fe 	j 80004680 <IfxVadc_disableAccess>

80004966 <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004966:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
8000496a:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
8000496c:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004970:	3b f0 01 40 	mov %d4,31
80004974:	6d ff a2 fe 	call 800046b8 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004978:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000497c:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000497e:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004982:	3b f0 01 40 	mov %d4,31
80004986:	1d ff 7d fe 	j 80004680 <IfxVadc_disableAccess>

8000498a <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
8000498a:	02 4f       	mov %d15,%d4
8000498c:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
8000498e:	6d 00 06 0c 	call 8000619a <IfxScuCcu_getSpbFrequency>
80004992:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
80004996:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000499a:	82 3f       	mov %d15,3
8000499c:	c2 f4       	add %d4,-1
8000499e:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800049a2:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049a6:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800049a8:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049ac:	6d ff cb ff 	call 80004942 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
800049b0:	02 82       	mov %d2,%d8
800049b2:	00 90       	ret 

800049b4 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
800049b4:	02 4f       	mov %d15,%d4
800049b6:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800049b8:	6d 00 f1 0b 	call 8000619a <IfxScuCcu_getSpbFrequency>
800049bc:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
800049c0:	8f 22 00 40 	sh %d4,%d2,2
800049c4:	4b f4 11 42 	div.u %e4,%d4,%d15
800049c8:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
800049cc:	c2 24       	add %d4,2
800049ce:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
800049d0:	c2 f4       	add %d4,-1
800049d2:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
800049d6:	1b 14 00 30 	addi %d3,%d4,1
800049da:	4b 32 11 62 	div.u %e6,%d2,%d3
800049de:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
800049e0:	7b 10 13 60 	movh %d6,305
800049e4:	1b 16 d0 62 	addi %d6,%d6,11521
800049e8:	3f 6f 08 80 	jlt.u %d15,%d6,800049f8 <IfxVadc_initializeFAdcI+0x44>
800049ec:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
800049f0:	9a 14       	add %d15,%d4,1
800049f2:	4b f2 11 22 	div.u %e2,%d2,%d15
800049f6:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
800049f8:	1b 0f ee 25 	addi %d2,%d15,24288
800049fc:	7b a0 12 30 	movh %d3,298
80004a00:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a04:	1b 13 be 38 	addi %d3,%d3,-29727
80004a08:	7f 32 06 80 	jge.u %d2,%d3,80004a14 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004a0c:	40 f4       	mov.aa %a4,%a15
80004a0e:	6d ff ac ff 	call 80004966 <IfxVadc_initialiseAdcConverterClock>
80004a12:	3c 02       	j 80004a16 <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004a14:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004a16:	02 f2       	mov %d2,%d15
80004a18:	00 90       	ret 

80004a1a <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
80004a1a:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a1c:	ff 84 33 80 	jge.u %d4,8,80004a82 <IfxVadc_isPostCalibration+0x68>
80004a20:	91 00 00 f8 	movh.a %a15,32768
80004a24:	d9 ff b4 84 	lea %a15,[%a15]18996 <80004a34 <IfxVadc_isPostCalibration+0x1a>>
80004a28:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a2c:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a30:	dc 0f       	ji %a15
80004a32:	00 00       	nop 
80004a34:	1d 00 10 00 	j 80004a54 <IfxVadc_isPostCalibration+0x3a>
80004a38:	1d 00 11 00 	j 80004a5a <IfxVadc_isPostCalibration+0x40>
80004a3c:	1d 00 12 00 	j 80004a60 <IfxVadc_isPostCalibration+0x46>
80004a40:	1d 00 13 00 	j 80004a66 <IfxVadc_isPostCalibration+0x4c>
80004a44:	1d 00 14 00 	j 80004a6c <IfxVadc_isPostCalibration+0x52>
80004a48:	1d 00 15 00 	j 80004a72 <IfxVadc_isPostCalibration+0x58>
80004a4c:	1d 00 16 00 	j 80004a78 <IfxVadc_isPostCalibration+0x5e>
80004a50:	1d 00 17 00 	j 80004a7e <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004a54:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004a58:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004a5a:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004a5e:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004a60:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004a64:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004a66:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004a6a:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004a6c:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004a70:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004a72:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004a76:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004a78:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004a7c:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a7e:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
80004a82:	00 90       	ret 

80004a84 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
80004a84:	02 40       	mov %d0,%d4
80004a86:	02 68       	mov %d8,%d6
80004a88:	02 7a       	mov %d10,%d7
80004a8a:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
80004a8c:	ff 25 08 80 	jge.u %d5,2,80004a9c <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004a90:	8f 80 00 f0 	sh %d15,%d0,8
80004a94:	42 f5       	add %d5,%d15
80004a96:	1b 85 12 50 	addi %d5,%d5,296
80004a9a:	3c 03       	j 80004aa0 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004a9c:	1b 65 02 50 	addi %d5,%d5,38
80004aa0:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004aa4:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004aa6:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004aa8:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
80004aaa:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004aae:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
80004ab2:	f6 24       	jnz %d2,80004aba <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004ab4:	1b 1f ff ff 	addi %d15,%d15,-15
80004ab8:	06 4f       	sh %d15,4
80004aba:	ff 63 35 80 	jge.u %d3,6,80004b24 <IfxVadc_getChannelConversionTime+0xa0>
80004abe:	91 00 00 f8 	movh.a %a15,32768
80004ac2:	d9 ff 08 70 	lea %a15,[%a15]456 <800001c8 <CSWTCH.25>>
80004ac6:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004aca:	82 02       	mov %d2,0
80004acc:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004ace:	df 04 2f 80 	jne %d4,0,80004b2c <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004ad2:	df 53 0d 00 	jeq %d3,5,80004aec <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004ad6:	02 04       	mov %d4,%d0
80004ad8:	6d ff a1 ff 	call 80004a1a <IfxVadc_isPostCalibration>
80004adc:	92 24       	add %d4,%d15,2
80004ade:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004ae2:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004ae4:	42 24       	add %d4,%d2
80004ae6:	4b 04 41 41 	itof %d4,%d4
80004aea:	3c 04       	j 80004af2 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004aec:	c2 4f       	add %d15,4
80004aee:	4b 0f 41 41 	itof %d4,%d15
80004af2:	4b 84 51 40 	div.f %d4,%d4,%d8
80004af6:	6d 00 bf 2b 	call 8000a274 <__extendsfdf2>
80004afa:	02 a4       	mov %d4,%d10
80004afc:	0b 23 10 88 	mov %e8,%d3,%d2
80004b00:	6d 00 ba 2b 	call 8000a274 <__extendsfdf2>
80004b04:	b7 00 21 4f 	imask %e4,0,30,1
80004b08:	0b 23 10 68 	mov %e6,%d3,%d2
80004b0c:	6d 00 a9 2d 	call 8000a65e <__divdf3>
80004b10:	0b 89 10 48 	mov %e4,%d9,%d8
80004b14:	0b 23 10 68 	mov %e6,%d3,%d2
80004b18:	6d 00 95 2c 	call 8000a442 <__adddf3>
80004b1c:	0b 23 10 48 	mov %e4,%d3,%d2
80004b20:	1d 00 5e 2e 	j 8000a7dc <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004b24:	82 09       	mov %d9,0
80004b26:	df 04 d8 7f 	jeq %d4,0,80004ad6 <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004b2a:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004b2c:	00 90       	ret 

80004b2e <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004b2e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b30:	6d 00 f9 13 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004b34:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b36:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004b38:	6d 00 f5 12 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b3c:	3b f0 01 40 	mov %d4,31
80004b40:	40 f4       	mov.aa %a4,%a15
80004b42:	6d ff bb fd 	call 800046b8 <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004b46:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004b48:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004b4a:	8f 12 40 21 	or %d2,%d2,1
80004b4e:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004b50:	48 d2       	ld.w %d2,[%a15]52
80004b52:	8f 12 40 21 	or %d2,%d2,1
80004b56:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004b58:	6d 00 1a 14 	call 8000738c <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004b5c:	48 d2       	ld.w %d2,[%a15]52
80004b5e:	6f 12 ff 7f 	jz.t %d2,1,80004b5c <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004b62:	02 f4       	mov %d4,%d15
80004b64:	6d 00 df 12 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b68:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b6a:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b6e:	8f 12 40 21 	or %d2,%d2,1
80004b72:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b74:	40 f4       	mov.aa %a4,%a15
80004b76:	6d ff 85 fd 	call 80004680 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004b7a:	02 f4       	mov %d4,%d15
80004b7c:	1d 00 08 14 	j 8000738c <IfxScuWdt_setCpuEndinit>

80004b80 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004b80:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80004b84:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004b86:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b8a:	3b f0 01 40 	mov %d4,31
80004b8e:	6d ff 95 fd 	call 800046b8 <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
80004b92:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b96:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004b98:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b9c:	3b f0 01 40 	mov %d4,31
80004ba0:	1d ff 70 fd 	j 80004680 <IfxVadc_disableAccess>

80004ba4 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80004ba4:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004ba8:	df 04 23 00 	jeq %d4,0,80004bee <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004bac:	19 42 04 00 	ld.w %d2,[%a4]4
80004bb0:	0f f4 00 40 	sh %d4,%d4,%d15
80004bb4:	a6 24       	or %d4,%d2
80004bb6:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004bba:	19 42 04 00 	ld.w %d2,[%a4]4
80004bbe:	06 27       	sh %d7,2
80004bc0:	82 3f       	mov %d15,3
80004bc2:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004bc6:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004bca:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004bcc:	4c 41       	ld.w %d15,[%a4]4
80004bce:	0f 75 00 50 	sh %d5,%d5,%d7
80004bd2:	a6 f5       	or %d5,%d15
80004bd4:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004bd8:	4c 41       	ld.w %d15,[%a4]4
80004bda:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004bdc:	76 64       	jz %d6,80004be4 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004bde:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004be2:	3c 03       	j 80004be8 <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004be4:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004be8:	59 47 04 00 	st.w [%a4]4,%d7
80004bec:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004bee:	19 44 04 00 	ld.w %d4,[%a4]4
80004bf2:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004bf6:	6c 41       	st.w [%a4]4,%d15
80004bf8:	00 90       	ret 

80004bfa <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004bfa:	19 4f 28 20 	ld.w %d15,[%a4]168
80004bfe:	26 54       	and %d4,%d5
80004c00:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c04:	0f 4f a0 50 	or %d5,%d15,%d4
80004c08:	59 45 28 20 	st.w [%a4]168,%d5
80004c0c:	00 90       	ret 

80004c0e <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c0e:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c12:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c14:	6d ff 52 fd 	call 800046b8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004c18:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c1c:	40 f4       	mov.aa %a4,%a15
80004c1e:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004c22:	3b f0 01 40 	mov %d4,31
80004c26:	59 ff 00 20 	st.w [%a15]128,%d15
80004c2a:	6d ff 2b fd 	call 80004680 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c2e:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004c30:	82 0f       	mov %d15,0
80004c32:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004c34:	8f a2 00 30 	sh %d3,%d2,10
80004c38:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004c3c:	c2 12       	add %d2,1
80004c3e:	19 33 40 20 	ld.w %d3,[%a3]1152
80004c42:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004c46:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004c4a:	fc 25       	loop %a2,80004c34 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004c4c:	df 1f f1 7f 	jeq %d15,1,80004c2e <IfxVadc_startupCalibration+0x20>
}
80004c50:	00 90       	ret 
	...

80004c54 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004c54:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004c56:	6d 00 66 13 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c5a:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004c5c:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c5e:	6d 00 62 12 	call 80007122 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004c62:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004c64:	02 f4       	mov %d4,%d15
80004c66:	8f 12 40 21 	or %d2,%d2,1
80004c6a:	68 02       	st.w [%a15]0,%d2
80004c6c:	1d 00 90 13 	j 8000738c <IfxScuWdt_setCpuEndinit>

80004c70 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004c70:	7b 10 00 f0 	movh %d15,1
80004c74:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004c78:	19 4f 00 10 	ld.w %d15,[%a4]64
80004c7c:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004c80:	a6 f4       	or %d4,%d15
80004c82:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004c86:	7b 00 40 f0 	movh %d15,1024
80004c8a:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004c8e:	19 4f 00 10 	ld.w %d15,[%a4]64
80004c92:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004c96:	a6 f5       	or %d5,%d15
80004c98:	59 45 00 10 	st.w [%a4]64,%d5
80004c9c:	00 90       	ret 

80004c9e <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004c9e:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004ca0:	6d 00 41 13 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004ca4:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004ca6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004ca8:	6d 00 3d 12 	call 80007122 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004cac:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004cae:	02 f4       	mov %d4,%d15
80004cb0:	8f 12 c0 21 	andn %d2,%d2,1
80004cb4:	68 02       	st.w [%a15]0,%d2
80004cb6:	1d 00 6b 13 	j 8000738c <IfxScuWdt_setCpuEndinit>

80004cba <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004cba:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004cbc:	ff 44 09 00 	jge %d4,4,80004cce <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004cc0:	91 00 00 f8 	movh.a %a15,32768
80004cc4:	d9 ff a0 40 	lea %a15,[%a15]2336 <80000920 <IfxAsclin_cfg_indexMap>>
80004cc8:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004ccc:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004cce:	00 90       	ret 

80004cd0 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004cd0:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004cd4:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004cd6:	c2 ff       	add %d15,-1
80004cd8:	8b 0f a1 22 	ge.u %d2,%d15,16
80004cdc:	df 02 32 80 	jne %d2,0,80004d40 <IfxAsclin_getFaFrequency+0x70>
80004ce0:	91 00 00 f8 	movh.a %a15,32768
80004ce4:	d9 ff ec 34 	lea %a15,[%a15]19692 <80004cec <IfxAsclin_getFaFrequency+0x1c>>
80004ce8:	90 ff       	addsc.a %a15,%a15,%d15,2
80004cea:	dc 0f       	ji %a15
80004cec:	1d 00 20 00 	j 80004d2c <IfxAsclin_getFaFrequency+0x5c>
80004cf0:	1d 00 20 00 	j 80004d30 <IfxAsclin_getFaFrequency+0x60>
80004cf4:	1d 00 26 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004cf8:	1d 00 1e 00 	j 80004d34 <IfxAsclin_getFaFrequency+0x64>
80004cfc:	1d 00 22 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d00:	1d 00 20 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d04:	1d 00 1e 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d08:	1d 00 18 00 	j 80004d38 <IfxAsclin_getFaFrequency+0x68>
80004d0c:	1d 00 1a 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d10:	1d 00 18 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d14:	1d 00 16 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d18:	1d 00 14 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d1c:	1d 00 12 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d20:	1d 00 10 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d24:	1d 00 0e 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x70>
80004d28:	1d 00 0a 00 	j 80004d3c <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004d2c:	1d 00 37 0a 	j 8000619a <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004d30:	1d 00 a6 08 	j 80005e7c <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004d34:	1d 00 c3 08 	j 80005eba <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004d38:	1d 00 20 0a 	j 80006178 <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004d3c:	1d 00 0e 0a 	j 80006158 <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004d40:	82 02       	mov %d2,0
80004d42:	00 90       	ret 

80004d44 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004d44:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004d48:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004d4a:	d9 33 a0 40 	lea %a3,[%a3]2336 <80000920 <IfxAsclin_cfg_indexMap>>
80004d4e:	a0 3f       	mov.a %a15,3
80004d50:	d0 32       	addsc.a %a2,%a3,%d15,3
80004d52:	d4 25       	ld.a %a5,[%a2]
80004d54:	7d 45 05 80 	jne.a %a5,%a4,80004d5e <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004d58:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004d5c:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004d5e:	c2 1f       	add %d15,1
80004d60:	fc f8       	loop %a15,80004d50 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004d62:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004d64:	00 90       	ret 

80004d66 <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004d66:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004d68:	6d ff b4 ff 	call 80004cd0 <IfxAsclin_getFaFrequency>
80004d6c:	4c f5       	ld.w %d15,[%a15]20
80004d6e:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004d72:	c2 1f       	add %d15,1
80004d74:	4b 0f 41 f1 	itof %d15,%d15
}
80004d78:	4b f2 51 20 	div.f %d2,%d2,%d15
80004d7c:	00 90       	ret 

80004d7e <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004d7e:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004d80:	6d ff f3 ff 	call 80004d66 <IfxAsclin_getPdFrequency>
80004d84:	48 83       	ld.w %d3,[%a15]32
80004d86:	4c f8       	ld.w %d15,[%a15]32
80004d88:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004d8c:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004d90:	4b 03 41 31 	itof %d3,%d3
80004d94:	4b 0f 41 f1 	itof %d15,%d15
80004d98:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004d9c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004da0:	00 90       	ret 

80004da2 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004da2:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004da4:	6d ff ed ff 	call 80004d7e <IfxAsclin_getOvsFrequency>
80004da8:	4c f5       	ld.w %d15,[%a15]20
80004daa:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004dae:	4b 0f 41 f1 	itof %d15,%d15
}
80004db2:	4b f2 51 20 	div.f %d2,%d2,%d15
80004db6:	00 90       	ret 

80004db8 <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004db8:	6d ff c6 ff 	call 80004d44 <IfxAsclin_getIndex>
80004dbc:	53 c2 20 f0 	mul %d15,%d2,12
80004dc0:	60 ff       	mov.a %a15,%d15
80004dc2:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004dc6:	11 42 00 2f 	addih.a %a2,%a2,61444
80004dca:	00 90       	ret 

80004dcc <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004dcc:	6d ff bc ff 	call 80004d44 <IfxAsclin_getIndex>
80004dd0:	53 c2 20 f0 	mul %d15,%d2,12
80004dd4:	60 ff       	mov.a %a15,%d15
80004dd6:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004dda:	11 42 00 2f 	addih.a %a2,%a2,61444
80004dde:	00 90       	ret 

80004de0 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004de0:	6d ff b2 ff 	call 80004d44 <IfxAsclin_getIndex>
80004de4:	53 c2 20 f0 	mul %d15,%d2,12
80004de8:	60 ff       	mov.a %a15,%d15
80004dea:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004dee:	11 42 00 2f 	addih.a %a2,%a2,61444
80004df2:	00 90       	ret 

80004df4 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004df4:	9f 04 04 80 	jned %d4,0,80004dfc <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004df8:	82 02       	mov %d2,0
80004dfa:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004dfc:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e00:	ac 50       	st.h [%a5]0,%d15
80004e02:	b0 25       	add.a %a5,2
80004e04:	3c f8       	j 80004df4 <IfxAsclin_read16>

80004e06 <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004e06:	9f 04 04 80 	jned %d4,0,80004e0e <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004e0a:	82 02       	mov %d2,0
80004e0c:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004e0e:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e12:	6c 50       	st.w [%a5]0,%d15
80004e14:	b0 45       	add.a %a5,4
80004e16:	3c f8       	j 80004e06 <IfxAsclin_read32>

80004e18 <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004e18:	9f 04 04 80 	jned %d4,0,80004e20 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004e1c:	82 02       	mov %d2,0
80004e1e:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004e20:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e24:	2c 50       	st.b [%a5]0,%d15
80004e26:	b0 15       	add.a %a5,1
80004e28:	3c f8       	j 80004e18 <IfxAsclin_read8>

80004e2a <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004e2a:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e2c:	6d 00 7b 12 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004e30:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e32:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004e34:	6d 00 77 11 	call 80007122 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e38:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004e3c:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e3e:	8f 12 40 21 	or %d2,%d2,1
80004e42:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004e46:	19 f2 30 30 	ld.w %d2,[%a15]240
80004e4a:	8f 12 40 21 	or %d2,%d2,1
80004e4e:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004e52:	6d 00 9d 12 	call 8000738c <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004e56:	19 f2 34 30 	ld.w %d2,[%a15]244
80004e5a:	6f 12 fe 7f 	jz.t %d2,1,80004e56 <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004e5e:	02 f4       	mov %d4,%d15
80004e60:	6d 00 61 11 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004e64:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004e68:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004e6a:	8f 12 40 21 	or %d2,%d2,1
80004e6e:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004e72:	1d 00 8d 12 	j 8000738c <IfxScuWdt_setCpuEndinit>

80004e76 <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004e76:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004e7a:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004e7e:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004e82:	f6 46       	jnz %d4,80004e8e <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004e84:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004e88:	bf 0f fe 7f 	jlt %d15,0,80004e84 <IfxAsclin_setClockSource+0xe>
80004e8c:	00 90       	ret 
80004e8e:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004e92:	ff 0f fe 7f 	jge %d15,0,80004e8e <IfxAsclin_setClockSource+0x18>
80004e96:	00 90       	ret 

80004e98 <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004e98:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004e9c:	19 42 0c 10 	ld.w %d2,[%a4]76
80004ea0:	16 1f       	and %d15,31
80004ea2:	8f f2 c1 21 	andn %d2,%d2,31
80004ea6:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004eaa:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004eae:	bf 02 fe 7f 	jlt %d2,0,80004eaa <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004eb2:	19 42 14 00 	ld.w %d2,[%a4]20
80004eb6:	c2 f4       	add %d4,-1
80004eb8:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004ebc:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004ec0:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004ec4:	02 f4       	mov %d4,%d15
80004ec6:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004eca:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004ece:	19 42 20 00 	ld.w %d2,[%a4]32
80004ed2:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004ed6:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004eda:	19 42 14 00 	ld.w %d2,[%a4]20
80004ede:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004ee2:	59 47 14 00 	st.w [%a4]20,%d7
80004ee6:	1d ff c8 ff 	j 80004e76 <IfxAsclin_setClockSource>

80004eea <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004eea:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004eee:	20 08       	sub.a %sp,8
80004ef0:	8f f2 01 21 	and %d2,%d2,31
80004ef4:	02 5f       	mov %d15,%d5
80004ef6:	40 4f       	mov.aa %a15,%a4
80004ef8:	02 48       	mov %d8,%d4
80004efa:	02 6a       	mov %d10,%d6
80004efc:	60 7d       	mov.a %a13,%d7
80004efe:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f00:	6d ff 33 ff 	call 80004d66 <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f04:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f06:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004f08:	82 4f       	mov %d15,4
80004f0a:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f0e:	8f ff 0f 21 	and %d2,%d15,255
80004f12:	59 a2 04 00 	st.w [%sp]4,%d2
80004f16:	82 16       	mov %d6,1
80004f18:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004f1c:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004f1e:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f22:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004f26:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f2a:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f2c:	02 f4       	mov %d4,%d15
80004f2e:	6d 00 a3 29 	call 8000a274 <__extendsfdf2>
80004f32:	7b 00 f5 73 	movh %d7,16208
80004f36:	0b 23 10 48 	mov %e4,%d3,%d2
80004f3a:	7b 20 2f 6d 	movh %d6,54002
80004f3e:	1b d7 24 76 	addi %d7,%d7,25165
80004f42:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004f46:	6d 00 ba 2a 	call 8000a4ba <__muldf3>
80004f4a:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004f4e:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f50:	6d 00 46 2c 	call 8000a7dc <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004f54:	4b f9 51 50 	div.f %d5,%d9,%d15
80004f58:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004f5c:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004f5e:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004f62:	4b 05 61 31 	utof %d3,%d5
80004f66:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004f6a:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004f6e:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004f72:	37 00 61 00 	extr.u %d0,%d0,0,1
80004f76:	9b 03 00 48 	addih %d4,%d3,32768
80004f7a:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004f7e:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004f82:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004f86:	df 00 45 80 	jne %d0,0,80005010 <IfxAsclin_setBitTiming+0x126>
80004f8a:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80004f8e:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004f90:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004f92:	82 28       	mov %d8,2
80004f94:	3b 00 00 71 	mov %d7,4096
80004f98:	7f 76 3b 80 	jge.u %d6,%d7,8000500e <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80004f9c:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80004f9e:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80004fa0:	df 28 09 00 	jeq %d8,2,80004fb2 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004fa4:	73 8e 0a a0 	mul %d10,%d14,%d8
80004fa8:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80004fac:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004fae:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80004fb0:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004fb2:	80 34       	mov.d %d4,%a3
80004fb4:	3f b4 25 80 	jlt.u %d4,%d11,80004ffe <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80004fb8:	4b 08 61 01 	utof %d0,%d8
80004fbc:	0b 6b 00 40 	add %d4,%d11,%d6
80004fc0:	4b 04 61 d1 	utof %d13,%d4
80004fc4:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80004fc8:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
80004fca:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80004fce:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80004fd2:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80004fd6:	37 0d 61 d0 	extr.u %d13,%d13,0,1
80004fda:	9b 00 00 a8 	addih %d10,%d0,32768
80004fde:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80004fe2:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80004fe6:	37 0d 61 d1 	extr.u %d13,%d13,2,1
80004fea:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80004fee:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80004ff2:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80004ff6:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004ffa:	c2 1b       	add %d11,1
80004ffc:	3c db       	j 80004fb2 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
80004ffe:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005002:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80005006:	f6 04       	jnz %d0,8000500e <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80005008:	c2 18       	add %d8,1
8000500a:	42 56       	add %d6,%d5
8000500c:	3c c6       	j 80004f98 <IfxAsclin_setBitTiming+0xae>
8000500e:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80005010:	19 f3 0c 10 	ld.w %d3,[%a15]76
80005014:	8f f3 c1 31 	andn %d3,%d3,31
80005018:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
8000501c:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80005020:	bf 0f fe 7f 	jlt %d15,0,8000501c <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005024:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005026:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
8000502a:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000502e:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005030:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80005032:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005034:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80005036:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
8000503a:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
8000503c:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000503e:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80005040:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005042:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
80005046:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005048:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000504a:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
8000504c:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80005050:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005054:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80005056:	ab 0f 80 72 	sel %d7,%d2,%d15,0
8000505a:	4c f5       	ld.w %d15,[%a15]20
8000505c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80005060:	a6 7f       	or %d15,%d7
80005062:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80005064:	6d ff 09 ff 	call 80004e76 <IfxAsclin_setClockSource>

    return TRUE;
}
80005068:	82 12       	mov %d2,1
8000506a:	00 90       	ret 

8000506c <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
8000506c:	9f 04 04 80 	jned %d4,0,80005074 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005070:	82 02       	mov %d2,0
80005072:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80005074:	b9 5f 00 00 	ld.hu %d15,[%a5]0
80005078:	b0 25       	add.a %a5,2
8000507a:	59 4f 04 10 	st.w [%a4]68,%d15
8000507e:	3c f7       	j 8000506c <IfxAsclin_write16>

80005080 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80005080:	9f 04 04 80 	jned %d4,0,80005088 <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005084:	82 02       	mov %d2,0
80005086:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80005088:	4c 50       	ld.w %d15,[%a5]0
8000508a:	b0 45       	add.a %a5,4
8000508c:	59 4f 04 10 	st.w [%a4]68,%d15
80005090:	3c f8       	j 80005080 <IfxAsclin_write32>

80005092 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80005092:	9f 04 04 80 	jned %d4,0,8000509a <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
80005096:	82 02       	mov %d2,0
80005098:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
8000509a:	0c 50       	ld.bu %d15,[%a5]0
8000509c:	b0 15       	add.a %a5,1
8000509e:	59 4f 04 10 	st.w [%a4]68,%d15
800050a2:	3c f8       	j 80005092 <IfxAsclin_write8>

800050a4 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
800050a4:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
800050a6:	88 22       	ld.h %d2,[%a15]4
800050a8:	00 90       	ret 

800050aa <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
800050aa:	99 42 08 00 	ld.a %a2,[%a4]8
}
800050ae:	d9 22 1d 00 	lea %a2,[%a2]29
800050b2:	00 90       	ret 

800050b4 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
800050b4:	19 42 10 00 	ld.w %d2,[%a4]16
}
800050b8:	00 90       	ret 

800050ba <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
800050ba:	09 42 54 09 	ld.d %e2,[%a4]20
}
800050be:	00 90       	ret 

800050c0 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
800050c0:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
800050c2:	88 c2       	ld.h %d2,[%a15]24
800050c4:	8c f2       	ld.h %d15,[%a15]4
800050c6:	a2 f2       	sub %d2,%d15
}
800050c8:	37 02 50 20 	extr %d2,%d2,0,16
800050cc:	00 90       	ret 

800050ce <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
800050ce:	99 42 04 00 	ld.a %a2,[%a4]4
}
800050d2:	d9 22 1d 00 	lea %a2,[%a2]29
800050d6:	00 90       	ret 

800050d8 <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
800050d8:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
800050da:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
800050dc:	ef 0f 0a 00 	jz.t %d15,16,800050f0 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
800050e0:	4c ff       	ld.w %d15,[%a15]60
800050e2:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800050e6:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
800050e8:	0c 4e       	ld.bu %d15,[%a4]14
800050ea:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
800050ee:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
800050f0:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
800050f2:	ef 2f 0a 00 	jz.t %d15,18,80005106 <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
800050f6:	4c ff       	ld.w %d15,[%a15]60
800050f8:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800050fc:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
800050fe:	0c 4e       	ld.bu %d15,[%a4]14
80005100:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005104:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
80005106:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
80005108:	ef af 0a 00 	jz.t %d15,26,8000511c <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
8000510c:	4c ff       	ld.w %d15,[%a15]60
8000510e:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005112:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80005114:	0c 4e       	ld.bu %d15,[%a4]14
80005116:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000511a:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
8000511c:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
8000511e:	ef bf 0a 00 	jz.t %d15,27,80005132 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
80005122:	4c ff       	ld.w %d15,[%a15]60
80005124:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005128:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000512a:	0c 4e       	ld.bu %d15,[%a4]14
8000512c:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80005130:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80005132:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80005134:	ef ef 0a 00 	jz.t %d15,30,80005148 <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
80005138:	4c ff       	ld.w %d15,[%a15]60
8000513a:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000513e:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
80005140:	0c 4e       	ld.bu %d15,[%a4]14
80005142:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
80005146:	2c 4e       	st.b [%a4]14,%d15
80005148:	00 90       	ret 

8000514a <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
8000514a:	82 0f       	mov %d15,0
8000514c:	6c 44       	st.w [%a4]16,%d15
8000514e:	00 90       	ret 

80005150 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
80005150:	99 44 08 00 	ld.a %a4,[%a4]8
80005154:	1d 00 df 18 	j 80008312 <Ifx_Fifo_canReadCount>

80005158 <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80005158:	82 f2       	mov %d2,-1
8000515a:	06 f2       	sh %d2,-1
8000515c:	ba f4       	eq %d15,%d4,-1
8000515e:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
80005162:	40 4f       	mov.aa %a15,%a4
80005164:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
80005166:	82 f9       	mov %d9,-1
80005168:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000516a:	ee 16       	jnz %d15,80005196 <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000516c:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005170:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005174:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80005178:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000517a:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000517e:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005182:	02 39       	mov %d9,%d3
80005184:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005188:	76 23       	jz %d2,8000518e <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000518a:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000518e:	0b 69 40 90 	addx %d9,%d9,%d6
80005192:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
80005196:	c8 14       	ld.a %a4,[%a15]4
80005198:	02 57       	mov %d7,%d5
8000519a:	c9 44 18 00 	ld.h %d4,[%a4]24
8000519e:	6d 00 fd 19 	call 80008598 <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800051a2:	82 f4       	mov %d4,-1
800051a4:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
800051a6:	f6 23       	jnz %d2,800051ac <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
800051a8:	82 02       	mov %d2,0
800051aa:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
800051ac:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
800051ae:	4c 23       	ld.w %d15,[%a2]12
800051b0:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
800051b4:	6e 1e       	jz %d15,800051f0 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800051b6:	ba f9       	eq %d15,%d9,-1
800051b8:	0b 84 00 f2 	and.eq %d15,%d4,%d8
800051bc:	ee f9       	jnz %d15,800051ae <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800051be:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800051c2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800051c6:	0d 00 40 03 	disable 
800051ca:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800051cc:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800051d0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800051d4:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800051d8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800051dc:	76 23       	jz %d2,800051e2 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
800051de:	0d 00 00 03 	enable 
800051e2:	0b 8f 00 21 	eq %d2,%d15,%d8
800051e6:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
800051ea:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800051ee:	3c dc       	j 800051a6 <IfxAsclin_Asc_flushTx+0x4e>
800051f0:	82 12       	mov %d2,1
    }

    return result;
}
800051f2:	00 90       	ret 

800051f4 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
800051f4:	99 44 04 00 	ld.a %a4,[%a4]4
800051f8:	1d 00 d0 19 	j 80008598 <Ifx_Fifo_canWriteCount>

800051fc <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
800051fc:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
800051fe:	4c f4       	ld.w %d15,[%a15]16
80005200:	96 01       	or %d15,1
80005202:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005204:	99 44 08 00 	ld.a %a4,[%a4]8
80005208:	1d 00 ad 19 	j 80008562 <Ifx_Fifo_clear>

8000520c <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
8000520c:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
8000520e:	99 44 04 00 	ld.a %a4,[%a4]4
80005212:	6d 00 a8 19 	call 80008562 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
80005216:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
80005218:	4c f3       	ld.w %d15,[%a15]12
8000521a:	96 01       	or %d15,1
8000521c:	68 3f       	st.w [%a15]12,%d15
8000521e:	00 90       	ret 

80005220 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005220:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005224:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005228:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000522a:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000522c:	6d 00 e0 18 	call 800083ec <Ifx_Fifo_read>

    *count -= left;
80005230:	8c f0       	ld.h %d15,[%a15]0
80005232:	a2 2f       	sub %d15,%d2
80005234:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
80005236:	8b 02 00 22 	eq %d2,%d2,0
8000523a:	00 90       	ret 

8000523c <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
8000523c:	20 18       	sub.a %sp,24
8000523e:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005240:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005244:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005248:	0d 00 40 03 	disable 
8000524c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000524e:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005252:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005256:	02 52       	mov %d2,%d5
80005258:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000525c:	76 43       	jz %d4,80005262 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
8000525e:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005262:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005266:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
80005268:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
8000526a:	c9 44 04 00 	ld.h %d4,[%a4]4
8000526e:	c2 1f       	add %d15,1
80005270:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005272:	df 04 32 00 	jeq %d4,0,800052d6 <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
80005276:	0c ff       	ld.bu %d15,[%a15]15
80005278:	6e 03       	jz %d15,8000527e <IfxAsclin_Asc_isrTransmit+0x42>
8000527a:	9e 1d       	jeq %d15,1,800052b4 <IfxAsclin_Asc_isrTransmit+0x78>
8000527c:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
8000527e:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
80005280:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005282:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
80005286:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
80005288:	d2 06       	mov %e6,0
8000528a:	37 0f 65 f8 	extr.u %d15,%d15,16,5
8000528e:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005292:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
80005294:	0c a7       	ld.bu %d15,[%sp]7
80005296:	8b 0f 01 f1 	rsub %d15,%d15,16
8000529a:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000529e:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800052a2:	37 0f 50 40 	extr %d4,%d15,0,16
800052a6:	6d 00 a3 18 	call 800083ec <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
800052aa:	c8 04       	ld.a %a4,[%a15]0
800052ac:	d9 a5 08 00 	lea %a5,[%sp]8
800052b0:	02 f4       	mov %d4,%d15
800052b2:	3c 10       	j 800052d2 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800052b4:	d2 06       	mov %e6,0
800052b6:	d9 a5 08 00 	lea %a5,[%sp]8
800052ba:	3b c0 00 40 	mov %d4,12
800052be:	6d 00 97 18 	call 800083ec <Ifx_Fifo_read>

            ascData = packedData.data;
800052c2:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052c6:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
800052c8:	d9 a5 18 00 	lea %a5,[%sp]24
800052cc:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052d0:	82 14       	mov %d4,1
        }
        break;
800052d2:	1d ff e0 fe 	j 80005092 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
800052d6:	28 c4       	st.b [%a15]12,%d4
800052d8:	00 90       	ret 

800052da <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052da:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
800052dc:	20 20       	sub.a %sp,32
800052de:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052e0:	6e 34       	jz %d15,80005348 <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
800052e2:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052e4:	df 1f 45 80 	jne %d15,1,8000536e <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
800052e8:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
800052ea:	4c 24       	ld.w %d15,[%a2]16
800052ec:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800052f0:	6e 2b       	jz %d15,80005346 <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800052f2:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800052f6:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800052fa:	0d 00 40 03 	disable 
800052fe:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005300:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005304:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005308:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000530c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005310:	76 33       	jz %d3,80005316 <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
80005312:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005316:	c8 04       	ld.a %a4,[%a15]0
80005318:	d9 a5 10 00 	lea %a5,[%sp]16
8000531c:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
8000531e:	78 02       	st.w [%sp]8,%d15
80005320:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005324:	6d ff 7a fd 	call 80004e18 <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005328:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000532a:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000532e:	d2 06       	mov %e6,0
80005330:	d9 a5 04 00 	lea %a5,[%sp]4
80005334:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
80005338:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000533a:	6d 00 a7 19 	call 80008688 <Ifx_Fifo_write>
8000533e:	df 02 d5 7f 	jeq %d2,0,800052e8 <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005342:	28 d8       	st.b [%a15]13,%d8
80005344:	3c d2       	j 800052e8 <IfxAsclin_Asc_isrReceive+0xe>
80005346:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
80005348:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
8000534a:	d9 a5 10 00 	lea %a5,[%sp]16
8000534e:	4c 44       	ld.w %d15,[%a4]16
80005350:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005354:	02 f4       	mov %d4,%d15
80005356:	6d ff 61 fd 	call 80004e18 <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
8000535a:	c8 24       	ld.a %a4,[%a15]8
8000535c:	d2 06       	mov %e6,0
8000535e:	d9 a5 10 00 	lea %a5,[%sp]16
80005362:	02 f4       	mov %d4,%d15
80005364:	6d 00 92 19 	call 80008688 <Ifx_Fifo_write>
80005368:	76 23       	jz %d2,8000536e <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
8000536a:	82 1f       	mov %d15,1
8000536c:	28 df       	st.b [%a15]13,%d15
8000536e:	00 90       	ret 

80005370 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005370:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005372:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005374:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
80005376:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
80005378:	82 f4       	mov %d4,-1
8000537a:	40 f4       	mov.aa %a4,%a15
8000537c:	d9 a5 05 00 	lea %a5,[%sp]5
80005380:	d9 a6 06 00 	lea %a6,[%sp]6
80005384:	9b 04 00 58 	addih %d5,%d4,32768
80005388:	6d ff 4c ff 	call 80005220 <IfxAsclin_Asc_read>
8000538c:	df 12 f6 ff 	jne %d2,1,80005378 <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
80005390:	39 a2 05 00 	ld.bu %d2,[%sp]5
80005394:	00 90       	ret 

80005396 <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
80005396:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
80005398:	6d 00 c5 0f 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
8000539c:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
8000539e:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053a0:	6d 00 c1 0e 	call 80007122 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
800053a4:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
800053a6:	02 f4       	mov %d4,%d15
800053a8:	8f 12 40 21 	or %d2,%d2,1
800053ac:	68 02       	st.w [%a15]0,%d2
800053ae:	1d 00 ef 0f 	j 8000738c <IfxScuWdt_setCpuEndinit>

800053b2 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
800053b2:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
800053b4:	40 4e       	mov.aa %a14,%a4
800053b6:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
800053b8:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
800053ba:	40 f4       	mov.aa %a4,%a15
800053bc:	6d ff 71 fc 	call 80004c9e <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
800053c0:	40 f4       	mov.aa %a4,%a15
800053c2:	82 04       	mov %d4,0
800053c4:	6d ff 59 fd 	call 80004e76 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800053c8:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800053ca:	40 f4       	mov.aa %a4,%a15
800053cc:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
800053d0:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
800053d2:	8c c4       	ld.h %d15,[%a12]8
800053d4:	48 52       	ld.w %d2,[%a15]20
800053d6:	c2 ff       	add %d15,-1
800053d8:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
800053dc:	68 5f       	st.w [%a15]20,%d15
800053de:	39 c4 28 00 	ld.bu %d4,[%a12]40
800053e2:	6d ff 4a fd 	call 80004e76 <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800053e6:	40 f4       	mov.aa %a4,%a15
800053e8:	19 c4 04 00 	ld.w %d4,[%a12]4
800053ec:	39 c5 0a 00 	ld.bu %d5,[%a12]10
800053f0:	39 c6 0d 00 	ld.bu %d6,[%a12]13
800053f4:	39 c7 0c 00 	ld.bu %d7,[%a12]12
800053f8:	6d ff 79 fd 	call 80004eea <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
800053fc:	40 f4       	mov.aa %a4,%a15
800053fe:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005400:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005402:	6d ff 3a fd 	call 80004e76 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
80005406:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000540a:	7b 00 00 f1 	movh %d15,4096
8000540e:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005412:	4c f1       	ld.w %d15,[%a15]4
80005414:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
80005418:	a6 2f       	or %d15,%d2
8000541a:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
8000541c:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005420:	7b 00 00 f4 	movh %d15,16384
80005424:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005428:	4c f6       	ld.w %d15,[%a15]24
8000542a:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
8000542e:	a6 2f       	or %d15,%d2
80005430:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
80005432:	48 62       	ld.w %d2,[%a15]24
80005434:	39 cf 12 00 	ld.bu %d15,[%a12]18
80005438:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
8000543c:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
8000543e:	48 62       	ld.w %d2,[%a15]24
80005440:	0c cf       	ld.bu %d15,[%a12]15
80005442:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
80005446:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
80005448:	48 62       	ld.w %d2,[%a15]24
8000544a:	39 cf 11 00 	ld.bu %d15,[%a12]17
8000544e:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
80005452:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
80005454:	48 72       	ld.w %d2,[%a15]28
80005456:	39 cf 13 00 	ld.bu %d15,[%a12]19
8000545a:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
8000545e:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80005460:	48 32       	ld.w %d2,[%a15]12
80005462:	39 cf 16 00 	ld.bu %d15,[%a12]22
80005466:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000546a:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
8000546c:	48 42       	ld.w %d2,[%a15]16
8000546e:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005472:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
80005476:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
80005478:	48 62       	ld.w %d2,[%a15]24
8000547a:	0c ce       	ld.bu %d15,[%a12]14
8000547c:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005480:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005482:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80005486:	da 0f       	mov %d15,15
80005488:	0b f2 90 21 	min.u %d2,%d2,%d15
8000548c:	48 33       	ld.w %d3,[%a15]12
8000548e:	37 23 04 24 	insert %d2,%d3,%d2,8,4
80005492:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005494:	39 c2 19 00 	ld.bu %d2,[%a12]25
80005498:	0b f2 90 f1 	min.u %d15,%d2,%d15
8000549c:	48 42       	ld.w %d2,[%a15]16
8000549e:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
800054a2:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800054a4:	39 cf 10 00 	ld.bu %d15,[%a12]16
800054a8:	48 62       	ld.w %d2,[%a15]24
800054aa:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800054ae:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
800054b0:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
800054b4:	bd 0d 81 00 	jz.a %a13,800055b6 <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
800054b8:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
800054ba:	6e 27       	jz %d15,80005508 <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
800054bc:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800054be:	79 d5 04 00 	ld.b %d5,[%a13]4
800054c2:	99 24 04 00 	ld.a %a4,[%a2]4
800054c6:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800054ca:	bd 04 1f 00 	jz.a %a4,80005508 <IfxAsclin_Asc_initModule+0x156>
800054ce:	39 24 08 00 	ld.bu %d4,[%a2]8
800054d2:	8f f5 0f 51 	and %d5,%d5,255
800054d6:	6d 00 ba 03 	call 80005c4a <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
800054da:	60 f3       	mov.a %a3,%d15
800054dc:	02 85       	mov %d5,%d8
800054de:	99 34 04 00 	ld.a %a4,[%a3]4
800054e2:	39 34 08 00 	ld.bu %d4,[%a3]8
800054e6:	6d 00 30 04 	call 80005d46 <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
800054ea:	60 f3       	mov.a %a3,%d15
800054ec:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
800054ee:	19 22 04 00 	ld.w %d2,[%a2]4
800054f2:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
800054f6:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
800054fa:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
800054fc:	0c 3c       	ld.bu %d15,[%a3]12
800054fe:	19 22 04 00 	ld.w %d2,[%a2]4
80005502:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005506:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
80005508:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000550a:	6e 20       	jz %d15,8000554a <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
8000550c:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
8000550e:	79 d5 0c 00 	ld.b %d5,[%a13]12
80005512:	99 24 04 00 	ld.a %a4,[%a2]4
80005516:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000551a:	bd 04 18 00 	jz.a %a4,8000554a <IfxAsclin_Asc_initModule+0x198>
8000551e:	39 24 08 00 	ld.bu %d4,[%a2]8
80005522:	8f f5 0f 51 	and %d5,%d5,255
80005526:	6d 00 92 03 	call 80005c4a <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000552a:	60 f3       	mov.a %a3,%d15
8000552c:	02 85       	mov %d5,%d8
8000552e:	99 34 04 00 	ld.a %a4,[%a3]4
80005532:	39 34 08 00 	ld.bu %d4,[%a3]8
80005536:	6d 00 08 04 	call 80005d46 <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000553a:	60 f3       	mov.a %a3,%d15
8000553c:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
8000553e:	0c 3c       	ld.bu %d15,[%a3]12
80005540:	19 22 04 00 	ld.w %d2,[%a2]4
80005544:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
80005548:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
8000554a:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
8000554c:	6e 1a       	jz %d15,80005580 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
8000554e:	60 f2       	mov.a %a2,%d15
80005550:	39 d2 14 00 	ld.bu %d2,[%a13]20
80005554:	39 23 0c 00 	ld.bu %d3,[%a2]12
80005558:	99 24 04 00 	ld.a %a4,[%a2]4
8000555c:	0f 23 a0 50 	or %d5,%d3,%d2
80005560:	39 24 08 00 	ld.bu %d4,[%a2]8
80005564:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
80005568:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000556c:	6d 00 6f 03 	call 80005c4a <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
80005570:	60 f3       	mov.a %a3,%d15
80005572:	02 85       	mov %d5,%d8
80005574:	99 34 04 00 	ld.a %a4,[%a3]4
80005578:	39 34 08 00 	ld.bu %d4,[%a3]8
8000557c:	6d 00 e5 03 	call 80005d46 <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005580:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005582:	6e 1a       	jz %d15,800055b6 <IfxAsclin_Asc_initModule+0x204>
80005584:	60 f2       	mov.a %a2,%d15
80005586:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000558a:	39 23 0c 00 	ld.bu %d3,[%a2]12
8000558e:	99 24 04 00 	ld.a %a4,[%a2]4
80005592:	0f 23 a0 50 	or %d5,%d3,%d2
80005596:	39 24 08 00 	ld.bu %d4,[%a2]8
8000559a:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
8000559e:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055a2:	6d 00 54 03 	call 80005c4a <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800055a6:	60 f3       	mov.a %a3,%d15
800055a8:	02 85       	mov %d5,%d8
800055aa:	99 34 04 00 	ld.a %a4,[%a3]4
800055ae:	39 34 08 00 	ld.bu %d4,[%a3]8
800055b2:	6d 00 ca 03 	call 80005d46 <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
800055b6:	40 f4       	mov.aa %a4,%a15
800055b8:	39 c4 28 00 	ld.bu %d4,[%a12]40
800055bc:	6d ff 5d fc 	call 80004e76 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
800055c0:	82 0f       	mov %d15,0
800055c2:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
800055c6:	82 f2       	mov %d2,-1
800055c8:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
800055ca:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
800055cc:	4c ca       	ld.w %d15,[%a12]40
800055ce:	2e 87       	jz.t %d15,8,800055dc <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800055d0:	19 ff 00 10 	ld.w %d15,[%a15]64
800055d4:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800055d8:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
800055dc:	4c ca       	ld.w %d15,[%a12]40
800055de:	2e 97       	jz.t %d15,9,800055ec <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
800055e0:	19 ff 00 10 	ld.w %d15,[%a15]64
800055e4:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800055e8:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
800055ec:	4c ca       	ld.w %d15,[%a12]40
800055ee:	2e a7       	jz.t %d15,10,800055fc <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
800055f0:	19 ff 00 10 	ld.w %d15,[%a15]64
800055f4:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
800055f8:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
800055fc:	4c ca       	ld.w %d15,[%a12]40
800055fe:	2e b7       	jz.t %d15,11,8000560c <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005600:	19 ff 00 10 	ld.w %d15,[%a15]64
80005604:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005608:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
8000560c:	4c ca       	ld.w %d15,[%a12]40
8000560e:	2e c7       	jz.t %d15,12,8000561c <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80005610:	19 ff 00 10 	ld.w %d15,[%a15]64
80005614:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005618:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
8000561c:	82 0f       	mov %d15,0
8000561e:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005620:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
80005622:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005624:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
80005628:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
8000562a:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
8000562e:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005630:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
80005634:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
80005636:	76 34       	jz %d3,8000563e <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
80005638:	ba 13       	eq %d15,%d3,1
8000563a:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
8000563e:	99 c4 2c 00 	ld.a %a4,[%a12]44
80005642:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
80005646:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
80005648:	bc 44       	jz.a %a4,80005650 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000564a:	6d 00 36 16 	call 800082b6 <Ifx_Fifo_init>
8000564e:	3c 03       	j 80005654 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005650:	6d 00 50 16 	call 800082f0 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
80005654:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005658:	b5 e2 04 00 	st.a [%a14]4,%a2
8000565c:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005660:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
80005662:	bc 44       	jz.a %a4,8000566a <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005664:	6d 00 29 16 	call 800082b6 <Ifx_Fifo_init>
80005668:	3c 03       	j 8000566e <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000566a:	6d 00 43 16 	call 800082f0 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
8000566e:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005672:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
80005676:	8b 3f 00 82 	eq %d8,%d15,3
8000567a:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000567c:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005680:	8b 02 00 35 	or.ne %d3,%d2,0
80005684:	df 03 1e 00 	jeq %d3,0,800056c0 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
80005688:	40 f4       	mov.aa %a4,%a15
8000568a:	6d ff a1 fb 	call 80004dcc <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000568e:	54 22       	ld.w %d2,[%a2]
80005690:	39 c3 1e 00 	ld.bu %d3,[%a12]30
80005694:	8f f2 cf 21 	andn %d2,%d2,255
80005698:	a6 32       	or %d2,%d3
8000569a:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
8000569c:	54 22       	ld.w %d2,[%a2]
8000569e:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056a2:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800056a4:	54 22       	ld.w %d2,[%a2]
800056a6:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800056aa:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800056ac:	19 f2 00 10 	ld.w %d2,[%a15]64
800056b0:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800056b4:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800056b8:	54 22       	ld.w %d2,[%a2]
800056ba:	b7 f2 01 25 	insert %d2,%d2,15,10,1
800056be:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
800056c0:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
800056c4:	8b 02 00 85 	or.ne %d8,%d2,0
800056c8:	df 08 1e 00 	jeq %d8,0,80005704 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
800056cc:	40 f4       	mov.aa %a4,%a15
800056ce:	6d ff 89 fb 	call 80004de0 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800056d2:	54 22       	ld.w %d2,[%a2]
800056d4:	39 c3 1c 00 	ld.bu %d3,[%a12]28
800056d8:	8f f2 cf 21 	andn %d2,%d2,255
800056dc:	a6 32       	or %d2,%d3
800056de:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800056e0:	54 22       	ld.w %d2,[%a2]
800056e2:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056e6:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800056e8:	54 22       	ld.w %d2,[%a2]
800056ea:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800056ee:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
800056f0:	19 f2 00 10 	ld.w %d2,[%a15]64
800056f4:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
800056f8:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800056fc:	54 22       	ld.w %d2,[%a2]
800056fe:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005702:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005704:	b9 c2 20 00 	ld.hu %d2,[%a12]32
80005708:	df 02 1e 00 	jeq %d2,0,80005744 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
8000570c:	40 f4       	mov.aa %a4,%a15
8000570e:	6d ff 55 fb 	call 80004db8 <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005712:	54 22       	ld.w %d2,[%a2]
80005714:	39 c3 20 00 	ld.bu %d3,[%a12]32
80005718:	8f f2 cf 21 	andn %d2,%d2,255
8000571c:	a6 32       	or %d2,%d3
8000571e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005720:	54 22       	ld.w %d2,[%a2]
80005722:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80005726:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005728:	4c 20       	ld.w %d15,[%a2]0
8000572a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000572e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005730:	19 ff 00 10 	ld.w %d15,[%a15]64
80005734:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005738:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000573c:	4c 20       	ld.w %d15,[%a2]0
8000573e:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80005742:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
80005744:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
80005746:	02 92       	mov %d2,%d9
80005748:	96 02       	or %d15,2
8000574a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
8000574c:	4c f3       	ld.w %d15,[%a15]12
8000574e:	96 02       	or %d15,2
80005750:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005752:	4c f4       	ld.w %d15,[%a15]16
80005754:	96 01       	or %d15,1
80005756:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
80005758:	4c f3       	ld.w %d15,[%a15]12
8000575a:	96 01       	or %d15,1
8000575c:	68 3f       	st.w [%a15]12,%d15
8000575e:	00 90       	ret 

80005760 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005760:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005762:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005766:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000576a:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000576c:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000576e:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005772:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
80005776:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000577a:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
8000577c:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80005780:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005784:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80005788:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000578a:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000578e:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
80005792:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80005794:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
80005798:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
8000579a:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
8000579e:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
800057a2:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800057a6:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
800057a8:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
800057ac:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
800057b0:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800057b4:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800057b8:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800057ba:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
800057bc:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800057be:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800057c2:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
800057c4:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
800057c6:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
800057ca:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800057ce:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
800057d2:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
800057d6:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057da:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057de:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
800057e2:	e9 4f 39 00 	st.b [%a4]57,%d15
800057e6:	00 90       	ret 

800057e8 <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800057e8:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
800057ea:	20 10       	sub.a %sp,16
800057ec:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800057ee:	ee 20       	jnz %d15,8000582e <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800057f0:	99 44 04 00 	ld.a %a4,[%a4]4
800057f4:	8c 42       	ld.h %d15,[%a4]4
800057f6:	6e 1c       	jz %d15,8000582e <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
800057f8:	82 1f       	mov %d15,1
800057fa:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
800057fc:	0c ff       	ld.bu %d15,[%a15]15
800057fe:	6e 0c       	jz %d15,80005816 <IfxAsclin_Asc_initiateTransmission+0x2e>
80005800:	de 11       	jne %d15,1,80005822 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005802:	d2 06       	mov %e6,0
80005804:	d9 a5 04 00 	lea %a5,[%sp]4
80005808:	3b c0 00 40 	mov %d4,12
8000580c:	6d 00 f0 15 	call 800083ec <Ifx_Fifo_read>
                data = packedData.data;
80005810:	0c ac       	ld.bu %d15,[%sp]12
80005812:	2c a3       	st.b [%sp]3,%d15
80005814:	3c 07       	j 80005822 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
80005816:	d2 06       	mov %e6,0
80005818:	d9 a5 03 00 	lea %a5,[%sp]3
8000581c:	82 14       	mov %d4,1
8000581e:	6d 00 e7 15 	call 800083ec <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
80005822:	c8 04       	ld.a %a4,[%a15]0
80005824:	d9 a5 03 00 	lea %a5,[%sp]3
80005828:	82 14       	mov %d4,1
8000582a:	6d ff 34 fc 	call 80005092 <IfxAsclin_write8>
8000582e:	00 90       	ret 

80005830 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005830:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
80005832:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005834:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
80005838:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000583a:	0b 45 10 88 	mov %e8,%d5,%d4
8000583e:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005840:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
80005844:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
80005846:	df 03 25 00 	jeq %d3,0,80005890 <IfxAsclin_Asc_write+0x60>
8000584a:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
8000584c:	ee 13       	jnz %d15,80005872 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
8000584e:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005852:	7f 3f 10 00 	jge %d15,%d3,80005872 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
80005856:	0b 89 10 68 	mov %e6,%d9,%d8
8000585a:	6d 00 17 17 	call 80008688 <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
8000585e:	40 f4       	mov.aa %a4,%a15
80005860:	6d ff c4 ff 	call 800057e8 <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005864:	94 c4       	ld.h %d4,[%a12]
80005866:	c8 14       	ld.a %a4,[%a15]4
80005868:	a2 f4       	sub %d4,%d15
8000586a:	10 d5       	addsc.a %a5,%a13,%d15,0
8000586c:	37 04 50 40 	extr %d4,%d4,0,16
80005870:	3c 03       	j 80005876 <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005872:	40 d5       	mov.aa %a5,%a13
80005874:	02 34       	mov %d4,%d3
80005876:	0b 89 10 68 	mov %e6,%d9,%d8
8000587a:	6d 00 07 17 	call 80008688 <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
8000587e:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005880:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
80005882:	6d ff b3 ff 	call 800057e8 <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
80005886:	94 c2       	ld.h %d2,[%a12]
80005888:	a2 f2       	sub %d2,%d15
8000588a:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
8000588c:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
80005890:	00 90       	ret 

80005892 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
80005892:	20 10       	sub.a %sp,16
80005894:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
80005898:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
8000589a:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
8000589c:	d9 a5 07 00 	lea %a5,[%sp]7
800058a0:	d9 a6 0e 00 	lea %a6,[%sp]14
800058a4:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800058a8:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
800058aa:	1d ff c3 ff 	j 80005830 <IfxAsclin_Asc_write>

800058ae <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
800058ae:	40 42       	mov.aa %a2,%a4
800058b0:	82 0f       	mov %d15,0
800058b2:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
800058b6:	24 2f       	st.b [%a2+],%d15
800058b8:	fc ff       	loop %a15,800058b6 <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
800058ba:	7b 00 00 f8 	movh %d15,32768
800058be:	1b 0f 83 f5 	addi %d15,%d15,22576
800058c2:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
800058c4:	7b 00 00 f8 	movh %d15,32768
800058c8:	1b 0f 22 f5 	addi %d15,%d15,21024
800058cc:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
800058ce:	7b 00 00 f8 	movh %d15,32768
800058d2:	1b 4f 0a f5 	addi %d15,%d15,20644
800058d6:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
800058d8:	7b 00 00 f8 	movh %d15,32768
800058dc:	1b af 0a f5 	addi %d15,%d15,20650
800058e0:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
800058e2:	7b 00 00 f8 	movh %d15,32768
800058e6:	1b 0f 0c f5 	addi %d15,%d15,20672
800058ea:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
800058ec:	7b 00 00 f8 	movh %d15,32768
800058f0:	1b ef 0c f5 	addi %d15,%d15,20686
800058f4:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
800058f6:	7b 00 00 f8 	movh %d15,32768
800058fa:	1b 0f 15 f5 	addi %d15,%d15,20816
800058fe:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005900:	7b 00 00 f8 	movh %d15,32768
80005904:	1b 4f 1f f5 	addi %d15,%d15,20980
80005908:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000590a:	7b 00 00 f8 	movh %d15,32768
8000590e:	1b 8f 15 f5 	addi %d15,%d15,20824
80005912:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005914:	7b 00 00 f8 	movh %d15,32768
80005918:	1b cf 20 f5 	addi %d15,%d15,21004
8000591c:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
8000591e:	7b 00 00 f8 	movh %d15,32768
80005922:	1b cf 1f f5 	addi %d15,%d15,20988
80005926:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
80005928:	7b 00 00 f8 	movh %d15,32768
8000592c:	1b af 2d f5 	addi %d15,%d15,21210
80005930:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80005932:	7b 00 00 f8 	movh %d15,32768
80005936:	1b cf 23 f5 	addi %d15,%d15,21052
8000593a:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
8000593c:	7b 00 00 f8 	movh %d15,32768
80005940:	1b 8f 0d f5 	addi %d15,%d15,20696
80005944:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
80005946:	7b 00 00 f8 	movh %d15,32768
8000594a:	1b 4f 0b f5 	addi %d15,%d15,20660
8000594e:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80005952:	7b 00 00 f8 	movh %d15,32768
80005956:	1b af 0b f5 	addi %d15,%d15,20666
8000595a:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
8000595e:	7b 00 00 f8 	movh %d15,32768
80005962:	1b af 14 f5 	addi %d15,%d15,20810
80005966:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
8000596a:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
8000596c:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
8000596e:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
80005970:	82 12       	mov %d2,1
80005972:	00 90       	ret 

80005974 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005974:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005978:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
8000597a:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
8000597c:	d9 22 80 50 	lea %a2,[%a2]2368 <80000940 <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005980:	8f f5 0f f1 	and %d15,%d5,255
80005984:	8b 02 00 32 	eq %d3,%d2,0
80005988:	8b 0f 61 34 	and.lt.u %d3,%d15,16
8000598c:	76 3a       	jz %d3,800059a0 <IfxPort_getAddress+0x2c>
8000598e:	02 5f       	mov %d15,%d5
80005990:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005992:	d0 2f       	addsc.a %a15,%a2,%d15,3
80005994:	82 02       	mov %d2,0
80005996:	4c f1       	ld.w %d15,[%a15]4
80005998:	7e 42       	jne %d15,%d4,8000599c <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
8000599a:	48 02       	ld.w %d2,[%a15]0
8000599c:	c2 15       	add %d5,1
8000599e:	3c f1       	j 80005980 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
800059a0:	60 22       	mov.a %a2,%d2
800059a2:	00 90       	ret 

800059a4 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800059a4:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800059a8:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800059aa:	d9 33 80 50 	lea %a3,[%a3]2368 <80000940 <IfxPort_cfg_indexMap>>
800059ae:	a0 ff       	mov.a %a15,15
800059b0:	d0 32       	addsc.a %a2,%a3,%d15,3
800059b2:	d4 25       	ld.a %a5,[%a2]
800059b4:	7d 45 05 80 	jne.a %a5,%a4,800059be <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
800059b8:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
800059bc:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800059be:	c2 1f       	add %d15,1
800059c0:	fc f8       	loop %a15,800059b0 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
800059c2:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
800059c4:	00 90       	ret 

800059c6 <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
800059c6:	40 4f       	mov.aa %a15,%a4
800059c8:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059ca:	6d 00 ac 0c 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
800059ce:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059d0:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
800059d2:	6d 00 a8 0b 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
800059d6:	82 12       	mov %d2,1
800059d8:	d9 f4 10 10 	lea %a4,[%a15]80
800059dc:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
800059e0:	d2 06       	mov %e6,0
800059e2:	02 27       	mov %d7,%d2
800059e4:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
800059e8:	02 f4       	mov %d4,%d15
800059ea:	1d 00 d1 0c 	j 8000738c <IfxScuWdt_setCpuEndinit>

800059ee <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
800059ee:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
800059f2:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
800059f4:	d9 33 80 70 	lea %a3,[%a3]2496 <800009c0 <IfxPort_cfg_esrMasks>>
800059f8:	a0 ff       	mov.a %a15,15
800059fa:	d0 32       	addsc.a %a2,%a3,%d15,3
800059fc:	d4 25       	ld.a %a5,[%a2]
800059fe:	7d 54 0c 80 	jne.a %a4,%a5,80005a16 <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a02:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a06:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a08:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005a0c:	6e 08       	jz %d15,80005a1c <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005a0e:	6d ff dc ff 	call 800059c6 <IfxPort_resetESR>
                result = TRUE;
80005a12:	82 12       	mov %d2,1
80005a14:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a16:	c2 1f       	add %d15,1
80005a18:	fc f1       	loop %a15,800059fa <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a1a:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005a1c:	00 90       	ret 

80005a1e <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
80005a1e:	40 4f       	mov.aa %a15,%a4
80005a20:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a22:	6d 00 80 0c 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a26:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a28:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a2a:	6d 00 7c 0b 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005a2e:	82 12       	mov %d2,1
80005a30:	0f 82 00 20 	sh %d2,%d2,%d8
80005a34:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a38:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a3c:	02 27       	mov %d7,%d2
80005a3e:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005a42:	02 f4       	mov %d4,%d15
80005a44:	1d 00 a4 0c 	j 8000738c <IfxScuWdt_setCpuEndinit>

80005a48 <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005a48:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a4a:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005a4e:	40 4c       	mov.aa %a12,%a4
80005a50:	02 48       	mov %d8,%d4
80005a52:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005a56:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a58:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a5a:	d9 dd 80 70 	lea %a13,[%a13]2496 <800009c0 <IfxPort_cfg_esrMasks>>
80005a5e:	d0 df       	addsc.a %a15,%a13,%d15,3
80005a60:	c8 02       	ld.a %a2,[%a15]0
80005a62:	7d 2c 0b 80 	jne.a %a12,%a2,80005a78 <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a66:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005a6a:	26 93       	and %d3,%d9
80005a6c:	76 36       	jz %d3,80005a78 <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005a6e:	40 c4       	mov.aa %a4,%a12
80005a70:	02 84       	mov %d4,%d8
80005a72:	6d ff d6 ff 	call 80005a1e <IfxPort_setESR>
                result = TRUE;
80005a76:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a78:	c2 1f       	add %d15,1
80005a7a:	8b 0f 21 32 	ne %d3,%d15,16
80005a7e:	df 03 f0 ff 	jne %d3,0,80005a5e <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
80005a82:	00 90       	ret 

80005a84 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a84:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
80005a86:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a88:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005a8a:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a8c:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005a8e:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a90:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005a92:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a94:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005a96:	78 07       	st.w [%sp]28,%d15
80005a98:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005a9c:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005aa0:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005aa4:	3b 80 0f 70 	mov %d7,248
80005aa8:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005aac:	9f 0f 07 80 	jned %d15,0,80005aba <IfxPort_setGroupModeInput+0x36>
80005ab0:	d9 44 10 00 	lea %a4,[%a4]16
80005ab4:	82 0f       	mov %d15,0
80005ab6:	a0 3f       	mov.a %a15,3
80005ab8:	3c 1e       	j 80005af4 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005aba:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005abe:	df 02 19 00 	jeq %d2,0,80005af0 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ac2:	8f 34 c0 31 	andn %d3,%d4,3
80005ac6:	60 32       	mov.a %a2,%d3
80005ac8:	d9 af 20 00 	lea %a15,[%sp]32
80005acc:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005ace:	8f 34 00 21 	and %d2,%d4,3
80005ad2:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ad4:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005ad8:	0f 27 00 30 	sh %d3,%d7,%d2
80005adc:	a6 03       	or %d3,%d0
80005ade:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005ae2:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005ae6:	0f 26 00 20 	sh %d2,%d6,%d2
80005aea:	a6 32       	or %d2,%d3
80005aec:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005af0:	c2 14       	add %d4,1
80005af2:	3c dd       	j 80005aac <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005af4:	d9 a3 20 00 	lea %a3,[%sp]32
80005af8:	90 32       	addsc.a %a2,%a3,%d15,2
80005afa:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005afe:	76 47       	jz %d4,80005b0c <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b00:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b04:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b06:	02 43       	mov %d3,%d4
80005b08:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005b0c:	c2 1f       	add %d15,1
80005b0e:	b0 44       	add.a %a4,4
80005b10:	fc f2       	loop %a15,80005af4 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005b12:	00 90       	ret 

80005b14 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b14:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005b16:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b18:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b1a:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b1c:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b1e:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b20:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b22:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b24:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b26:	78 07       	st.w [%sp]28,%d15
80005b28:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b2c:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005b30:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b34:	3b 80 0f 00 	mov %d0,248
80005b38:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b3c:	9f 0f 07 80 	jned %d15,0,80005b4a <IfxPort_setGroupModeOutput+0x36>
80005b40:	d9 44 10 00 	lea %a4,[%a4]16
80005b44:	82 0f       	mov %d15,0
80005b46:	a0 3f       	mov.a %a15,3
80005b48:	3c 1f       	j 80005b86 <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005b4a:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b4e:	df 02 1a 00 	jeq %d2,0,80005b82 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005b52:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b56:	d9 a2 20 00 	lea %a2,[%sp]32
80005b5a:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005b5e:	8f 34 00 21 	and %d2,%d4,3
80005b62:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005b64:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b66:	0f 20 00 70 	sh %d7,%d0,%d2
80005b6a:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005b6e:	0f 23 00 20 	sh %d2,%d3,%d2
80005b72:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b76:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005b78:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b7a:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005b7e:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b82:	c2 14       	add %d4,1
80005b84:	3c dc       	j 80005b3c <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005b86:	d9 a3 20 00 	lea %a3,[%sp]32
80005b8a:	90 32       	addsc.a %a2,%a3,%d15,2
80005b8c:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b90:	76 47       	jz %d4,80005b9e <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b92:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b96:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b98:	02 43       	mov %d3,%d4
80005b9a:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005b9e:	c2 1f       	add %d15,1
80005ba0:	b0 44       	add.a %a4,4
80005ba2:	fc f2       	loop %a15,80005b86 <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005ba4:	00 90       	ret 

80005ba6 <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
80005ba6:	20 10       	sub.a %sp,16
80005ba8:	02 4f       	mov %d15,%d4
80005baa:	02 5a       	mov %d10,%d5
80005bac:	40 4c       	mov.aa %a12,%a4
80005bae:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bb0:	6d 00 b9 0b 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005bb4:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bb6:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005bb8:	6d 00 b5 0a 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005bbc:	82 03       	mov %d3,0
80005bbe:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005bc0:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005bc4:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005bc8:	59 a3 0c 00 	st.w [%sp]12,%d3
80005bcc:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005bd0:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005bd4:	0f fa 00 50 	sh %d5,%d10,%d15
80005bd8:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005bdc:	9f 03 03 80 	jned %d3,0,80005be2 <IfxPort_setGroupPadDriver+0x3c>
80005be0:	3c 1d       	j 80005c1a <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005be2:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005be6:	df 02 18 00 	jeq %d2,0,80005c16 <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005bea:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005bee:	d9 a2 10 00 	lea %a2,[%sp]16
80005bf2:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005bf6:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005bfa:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005bfe:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005c00:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005c04:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c08:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005c0c:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005c10:	a6 42       	or %d2,%d4
80005c12:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005c16:	c2 1f       	add %d15,1
80005c18:	3c e2       	j 80005bdc <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c1a:	58 02       	ld.w %d15,[%sp]8
80005c1c:	6e 08       	jz %d15,80005c2c <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c1e:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c22:	54 a6       	ld.w %d6,[%sp]
80005c24:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c26:	02 f7       	mov %d7,%d15
80005c28:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c2c:	58 03       	ld.w %d15,[%sp]12
80005c2e:	6e 09       	jz %d15,80005c40 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c30:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c34:	19 a6 04 00 	ld.w %d6,[%sp]4
80005c38:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c3a:	02 f7       	mov %d7,%d15
80005c3c:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c40:	02 84       	mov %d4,%d8
}
80005c42:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c46:	1d 00 a3 0b 	j 8000738c <IfxScuWdt_setCpuEndinit>

80005c4a <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005c4a:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005c4e:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005c52:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005c56:	40 4f       	mov.aa %a15,%a4
80005c58:	02 4f       	mov %d15,%d4
80005c5a:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005c5c:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005c60:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005c64:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005c66:	7d 24 11 80 	jne.a %a4,%a2,80005c88 <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c6a:	6d 00 5c 0b 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005c6e:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c70:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005c72:	6d 00 58 0a 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005c76:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005c7a:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005c7c:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005c80:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005c84:	6d 00 84 0b 	call 8000738c <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005c88:	da ff       	mov %d15,255
80005c8a:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005c8e:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005c92:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c96:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c98:	02 f3       	mov %d3,%d15
80005c9a:	49 f2 40 08 	ldmst [%a15]0,%e2
80005c9e:	00 90       	ret 

80005ca0 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005ca0:	02 5a       	mov %d10,%d5
80005ca2:	40 4f       	mov.aa %a15,%a4
80005ca4:	02 49       	mov %d9,%d4
80005ca6:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ca8:	6d 00 3d 0b 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005cac:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cae:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005cb0:	6d 00 39 0a 	call 80007122 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005cb4:	37 0a 48 50 	extr %d5,%d10,0,8
80005cb8:	bf 05 11 00 	jlt %d5,0,80005cda <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005cbc:	bf 29 21 80 	jlt.u %d9,2,80005cfe <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005cc0:	19 f2 24 20 	ld.w %d2,[%a15]164
80005cc4:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005cc8:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005ccc:	19 ff 24 20 	ld.w %d15,[%a15]164
80005cd0:	8f 2f c0 f1 	andn %d15,%d15,2
80005cd4:	59 ff 24 20 	st.w [%a15]164,%d15
80005cd8:	3c 13       	j 80005cfe <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005cda:	19 f2 28 20 	ld.w %d2,[%a15]168
80005cde:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005ce2:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005ce6:	19 ff 28 20 	ld.w %d15,[%a15]168
80005cea:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005cee:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005cf2:	19 ff 28 20 	ld.w %d15,[%a15]168
80005cf6:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005cfa:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005cfe:	02 84       	mov %d4,%d8
80005d00:	1d 00 46 0b 	j 8000738c <IfxScuWdt_setCpuEndinit>

80005d04 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d04:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d08:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d0a:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d0e:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d10:	6d 00 09 0b 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d14:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d16:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d18:	6d 00 05 0a 	call 80007122 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005d1c:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005d1e:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d22:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d26:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005d2a:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d2e:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d32:	0f 2b 00 50 	sh %d5,%d11,%d2
80005d36:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d38:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d3a:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d3c:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005d40:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d42:	1d 00 25 0b 	j 8000738c <IfxScuWdt_setCpuEndinit>

80005d46 <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005d46:	0b 45 10 88 	mov %e8,%d5,%d4
80005d4a:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d4c:	6d 00 eb 0a 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d50:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d52:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d54:	6d 00 e7 09 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005d58:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d5c:	06 22       	sh %d2,2
80005d5e:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005d60:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d64:	3b f0 00 30 	mov %d3,15
80005d68:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005d6c:	0f 23 00 30 	sh %d3,%d3,%d2
80005d70:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005d74:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005d76:	02 37       	mov %d7,%d3
80005d78:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d7c:	02 f4       	mov %d4,%d15
80005d7e:	1d 00 07 0b 	j 8000738c <IfxScuWdt_setCpuEndinit>
	...

80005d84 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005d84:	7b e0 e4 30 	movh %d3,3662
80005d88:	1b 13 c0 31 	addi %d3,%d3,7169
80005d8c:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005d90:	82 2f       	mov %d15,2
80005d92:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005d96:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005d9a:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005d9e:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005da2:	7b 80 82 6e 	movh %d6,59432
80005da6:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005daa:	19 4e 10 10 	ld.w %d14,[%a4]80
80005dae:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005db0:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005db4:	d2 0a       	mov %e10,0
80005db6:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005db8:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dbc:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005dc0:	82 f7       	mov %d7,-1
80005dc2:	1b 06 c0 67 	addi %d6,%d6,31744
80005dc6:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005dca:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005dcc:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dd0:	7b 60 f8 1f 	movh %d1,65414
80005dd4:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005dd8:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dda:	0b 12 40 10 	addx %d1,%d2,%d1
80005dde:	8b f3 bf 20 	addc %d2,%d3,-1
80005de2:	80 53       	mov.d %d3,%a5
80005de4:	ba 02       	eq %d15,%d2,0
80005de6:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005dea:	8b 02 00 f5 	or.ne %d15,%d2,0
80005dee:	ee 24       	jnz %d15,80005e36 <IfxScuCcu_calculateSysPllDividers+0xb2>
80005df0:	02 5d       	mov %d13,%d5
80005df2:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005df4:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005df8:	80 68       	mov.d %d8,%a6
80005dfa:	ba 03       	eq %d15,%d3,0
80005dfc:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e00:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e04:	ee 13       	jnz %d15,80005e2a <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e06:	82 18       	mov %d8,1
80005e08:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005e0c:	4b d8 11 22 	div.u %e2,%d8,%d13
80005e10:	e2 e2       	mul %d2,%d14
80005e12:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005e14:	df 02 18 00 	jeq %d2,0,80005e44 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005e18:	82 1f       	mov %d15,1
80005e1a:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005e1e:	6a 8b       	cmovn %d11,%d15,%d8
80005e20:	6a 20       	cmovn %d0,%d15,%d2
80005e22:	6a 5a       	cmovn %d10,%d15,%d5
80005e24:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005e26:	c2 18       	add %d8,1
80005e28:	fc 22       	loop %a2,80005e0c <IfxScuCcu_calculateSysPllDividers+0x88>
80005e2a:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005e2c:	42 c1       	add %d1,%d12
80005e2e:	42 fd       	add %d13,%d15
80005e30:	8b 11 68 f2 	lt.u %d15,%d1,129
80005e34:	ee e0       	jnz %d15,80005df4 <IfxScuCcu_calculateSysPllDividers+0x70>
80005e36:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005e38:	c2 f5       	add %d5,-1
80005e3a:	01 23 20 30 	sub.a %a3,%a3,%a2
80005e3e:	fd f0 c7 7f 	loop %a15,80005dcc <IfxScuCcu_calculateSysPllDividers+0x48>
80005e42:	3c 05       	j 80005e4c <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005e44:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005e48:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005e4a:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005e4c:	da 64       	mov %d15,100
80005e4e:	06 14       	sh %d4,1
80005e50:	4b f4 11 42 	div.u %e4,%d4,%d15
80005e54:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005e56:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005e58:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005e5c:	ee 0f       	jnz %d15,80005e7a <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005e5e:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005e60:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e62:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e64:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005e66:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005e6a:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e6e:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e72:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005e76:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005e78:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005e7a:	00 90       	ret 

80005e7c <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005e7c:	91 00 00 f7 	movh.a %a15,28672
80005e80:	19 f2 10 30 	ld.w %d2,[%a15]208 <700000d0 <IfxScuCcu_xtalFrequency>>
}
80005e84:	4b 02 61 21 	utof %d2,%d2
80005e88:	00 90       	ret 

80005e8a <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005e8a:	91 30 00 ff 	movh.a %a15,61443
80005e8e:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005e92:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005e94:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005e98:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005e9c:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005ea0:	6e 0c       	jz %d15,80005eb8 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005ea2:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005ea4:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005ea6:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005eaa:	5e 17       	jne %d15,1,80005eb8 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005eac:	91 00 00 f7 	movh.a %a15,28672
80005eb0:	19 f2 10 30 	ld.w %d2,[%a15]208 <700000d0 <IfxScuCcu_xtalFrequency>>
80005eb4:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005eb8:	00 90       	ret 

80005eba <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005eba:	91 30 00 ff 	movh.a %a15,61443
80005ebe:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005ec2:	6d ff e4 ff 	call 80005e8a <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005ec6:	4c f9       	ld.w %d15,[%a15]36
80005ec8:	2e 05       	jz.t %d15,0,80005ed2 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005eca:	4c fb       	ld.w %d15,[%a15]44
80005ecc:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005ed0:	3c 21       	j 80005f12 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005ed2:	4c f9       	ld.w %d15,[%a15]36
80005ed4:	6f 3f 15 00 	jz.t %d15,3,80005efe <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005ed8:	48 b4       	ld.w %d4,[%a15]44
80005eda:	8f f4 07 41 	and %d4,%d4,127
80005ede:	c2 14       	add %d4,1
80005ee0:	6d 00 4b 24 	call 8000a776 <__floatsidf>
80005ee4:	7b 80 19 54 	movh %d5,16792
80005ee8:	0b 23 10 68 	mov %e6,%d3,%d2
80005eec:	82 04       	mov %d4,0
80005eee:	1b 45 78 5d 	addi %d5,%d5,-10364
80005ef2:	6d 00 b6 23 	call 8000a65e <__divdf3>
80005ef6:	0b 23 10 48 	mov %e4,%d3,%d2
80005efa:	1d 00 71 24 	j 8000a7dc <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005efe:	48 a3       	ld.w %d3,[%a15]40
80005f00:	4c fb       	ld.w %d15,[%a15]44
80005f02:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f06:	16 7f       	and %d15,127
80005f08:	c2 13       	add %d3,1
80005f0a:	4b 03 41 31 	itof %d3,%d3
80005f0e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f12:	c2 1f       	add %d15,1
80005f14:	4b 0f 41 f1 	itof %d15,%d15
80005f18:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005f1c:	00 90       	ret 

80005f1e <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f1e:	91 30 00 ff 	movh.a %a15,61443
80005f22:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005f26:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005f28:	7b f0 cb 24 	movh %d2,19647
80005f2c:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f30:	6f 3f 18 80 	jnz.t %d15,3,80005f60 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005f34:	6d ff ab ff 	call 80005e8a <IfxScuCcu_getOscFrequency>
80005f38:	91 30 00 ff 	movh.a %a15,61443
80005f3c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005f40:	48 03       	ld.w %d3,[%a15]0
80005f42:	4c f0       	ld.w %d15,[%a15]0
80005f44:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f48:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005f4c:	c2 13       	add %d3,1
80005f4e:	4b 03 41 31 	itof %d3,%d3
80005f52:	c2 1f       	add %d15,1
80005f54:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f58:	4b 0f 41 f1 	itof %d15,%d15
80005f5c:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005f60:	00 90       	ret 

80005f62 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005f62:	91 30 00 ff 	movh.a %a15,61443
80005f66:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005f6a:	6d ff 90 ff 	call 80005e8a <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005f6e:	4c f5       	ld.w %d15,[%a15]20
80005f70:	2e 06       	jz.t %d15,0,80005f7c <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005f72:	4c f7       	ld.w %d15,[%a15]28
80005f74:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f78:	c2 1f       	add %d15,1
80005f7a:	3c 28       	j 80005fca <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005f7c:	4c f5       	ld.w %d15,[%a15]20
80005f7e:	6f 3f 15 00 	jz.t %d15,3,80005fa8 <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005f82:	48 74       	ld.w %d4,[%a15]28
80005f84:	8f f4 07 41 	and %d4,%d4,127
80005f88:	c2 14       	add %d4,1
80005f8a:	6d 00 f6 23 	call 8000a776 <__floatsidf>
80005f8e:	7b 80 19 54 	movh %d5,16792
80005f92:	0b 23 10 68 	mov %e6,%d3,%d2
80005f96:	82 04       	mov %d4,0
80005f98:	1b 45 78 5d 	addi %d5,%d5,-10364
80005f9c:	6d 00 61 23 	call 8000a65e <__divdf3>
80005fa0:	0b 23 10 48 	mov %e4,%d3,%d2
80005fa4:	1d 00 1c 24 	j 8000a7dc <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80005fa8:	48 64       	ld.w %d4,[%a15]24
80005faa:	4c f7       	ld.w %d15,[%a15]28
80005fac:	37 04 e7 44 	extr.u %d4,%d4,9,7
80005fb0:	8f ff 07 31 	and %d3,%d15,127
80005fb4:	4c f6       	ld.w %d15,[%a15]24
80005fb6:	c2 14       	add %d4,1
80005fb8:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fbc:	4b 04 41 41 	itof %d4,%d4
80005fc0:	c2 1f       	add %d15,1
80005fc2:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80005fc6:	4b 42 41 20 	mul.f %d2,%d2,%d4
80005fca:	4b 0f 41 f1 	itof %d15,%d15
80005fce:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005fd2:	00 90       	ret 

80005fd4 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005fd4:	91 30 00 ff 	movh.a %a15,61443
80005fd8:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80005fdc:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005fde:	7b f0 cb 24 	movh %d2,19647
80005fe2:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005fe6:	6f 3f 18 80 	jnz.t %d15,3,80006016 <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
80005fea:	6d ff 50 ff 	call 80005e8a <IfxScuCcu_getOscFrequency>
80005fee:	91 30 00 ff 	movh.a %a15,61443
80005ff2:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80005ff6:	48 03       	ld.w %d3,[%a15]0
80005ff8:	4c f0       	ld.w %d15,[%a15]0
80005ffa:	37 03 e7 34 	extr.u %d3,%d3,9,7
80005ffe:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006002:	c2 13       	add %d3,1
80006004:	4b 03 41 31 	itof %d3,%d3
80006008:	c2 1f       	add %d15,1
8000600a:	4b 32 41 20 	mul.f %d2,%d2,%d3
8000600e:	4b 0f 41 f1 	itof %d15,%d15
80006012:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80006016:	00 90       	ret 

80006018 <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80006018:	91 30 00 ff 	movh.a %a15,61443
8000601c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006020:	4c f0       	ld.w %d15,[%a15]0
80006022:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006026:	6e 06       	jz %d15,80006032 <IfxScuCcu_getSourceFrequency+0x1a>
80006028:	1e 13       	jeq %d15,1,8000602e <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
8000602a:	82 02       	mov %d2,0
8000602c:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
8000602e:	1d ff 9a ff 	j 80005f62 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80006032:	7b f0 cb 24 	movh %d2,19647
80006036:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
8000603a:	00 90       	ret 

8000603c <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
8000603c:	02 4f       	mov %d15,%d4
8000603e:	6d ff ed ff 	call 80006018 <IfxScuCcu_getSourceFrequency>
80006042:	91 30 00 ff 	movh.a %a15,61443
80006046:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000604a:	48 03       	ld.w %d3,[%a15]0
8000604c:	37 03 64 34 	extr.u %d3,%d3,8,4
80006050:	4b 03 41 31 	itof %d3,%d3
80006054:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
80006058:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
8000605c:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006060:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80006064:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80006068:	a2 3f       	sub %d15,%d3
8000606a:	3f 2f fd ff 	jlt.u %d15,%d2,80006064 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
8000606e:	00 90       	ret 

80006070 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006070:	6d ff d4 ff 	call 80006018 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006074:	91 30 00 ff 	movh.a %a15,61443
80006078:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000607c:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
8000607e:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006080:	37 03 64 36 	extr.u %d3,%d3,12,4
80006084:	ff 53 30 80 	jge.u %d3,5,800060e4 <IfxScuCcu_getBbbFrequency+0x74>
80006088:	91 00 00 f8 	movh.a %a15,32768
8000608c:	d9 ff 18 26 	lea %a15,[%a15]24728 <80006098 <IfxScuCcu_getBbbFrequency+0x28>>
80006090:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006094:	dc 0f       	ji %a15
80006096:	00 00       	nop 
80006098:	1d 00 0a 00 	j 800060ac <IfxScuCcu_getBbbFrequency+0x3c>
8000609c:	1d 00 17 00 	j 800060ca <IfxScuCcu_getBbbFrequency+0x5a>
800060a0:	1d 00 18 00 	j 800060d0 <IfxScuCcu_getBbbFrequency+0x60>
800060a4:	1d 00 19 00 	j 800060d6 <IfxScuCcu_getBbbFrequency+0x66>
800060a8:	1d 00 1a 00 	j 800060dc <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
800060ac:	91 30 00 ff 	movh.a %a15,61443
800060b0:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800060b4:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
800060b6:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
800060b8:	8f f3 00 31 	and %d3,%d3,15
800060bc:	df 03 14 00 	jeq %d3,0,800060e4 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
800060c0:	4c f0       	ld.w %d15,[%a15]0
800060c2:	16 0f       	and %d15,15
800060c4:	4b 0f 41 f1 	itof %d15,%d15
800060c8:	3c 0c       	j 800060e0 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
800060ca:	7b 00 1f f4 	movh %d15,16880
800060ce:	3c 09       	j 800060e0 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
800060d0:	7b 00 27 f4 	movh %d15,17008
800060d4:	3c 06       	j 800060e0 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
800060d6:	7b 00 2f f4 	movh %d15,17136
800060da:	3c 03       	j 800060e0 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
800060dc:	7b 00 37 f4 	movh %d15,17264
800060e0:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
800060e4:	02 f2       	mov %d2,%d15
800060e6:	00 90       	ret 

800060e8 <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800060e8:	91 30 00 ff 	movh.a %a15,61443
800060ec:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
800060f0:	6d ff 94 ff 	call 80006018 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800060f4:	4c f0       	ld.w %d15,[%a15]0
800060f6:	37 0f 64 f6 	extr.u %d15,%d15,12,4
800060fa:	ff 5f 2d 80 	jge.u %d15,5,80006154 <IfxScuCcu_getMaxFrequency+0x6c>
800060fe:	91 00 00 f8 	movh.a %a15,32768
80006102:	d9 ff 0c 46 	lea %a15,[%a15]24844 <8000610c <IfxScuCcu_getMaxFrequency+0x24>>
80006106:	90 ff       	addsc.a %a15,%a15,%d15,2
80006108:	dc 0f       	ji %a15
8000610a:	00 00       	nop 
8000610c:	1d 00 0a 00 	j 80006120 <IfxScuCcu_getMaxFrequency+0x38>
80006110:	1d 00 14 00 	j 80006138 <IfxScuCcu_getMaxFrequency+0x50>
80006114:	1d 00 15 00 	j 8000613e <IfxScuCcu_getMaxFrequency+0x56>
80006118:	1d 00 16 00 	j 80006144 <IfxScuCcu_getMaxFrequency+0x5c>
8000611c:	1d 00 17 00 	j 8000614a <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
80006120:	91 30 00 ff 	movh.a %a15,61443
80006124:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006128:	4c f0       	ld.w %d15,[%a15]0
8000612a:	16 0f       	and %d15,15
8000612c:	6e 15       	jz %d15,80006156 <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
8000612e:	4c f0       	ld.w %d15,[%a15]0
80006130:	16 0f       	and %d15,15
80006132:	4b 0f 41 f1 	itof %d15,%d15
80006136:	3c 0c       	j 8000614e <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
80006138:	7b 00 17 f4 	movh %d15,16752
8000613c:	3c 09       	j 8000614e <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
8000613e:	7b 00 1f f4 	movh %d15,16880
80006142:	3c 06       	j 8000614e <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
80006144:	7b 00 27 f4 	movh %d15,17008
80006148:	3c 03       	j 8000614e <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
8000614a:	7b 00 2f f4 	movh %d15,17136
8000614e:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80006152:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80006154:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
80006156:	00 90       	ret 

80006158 <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006158:	91 30 00 ff 	movh.a %a15,61443
8000615c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006160:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
80006162:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006164:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
80006168:	76 87       	jz %d8,80006176 <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
8000616a:	6d ff bf ff 	call 800060e8 <IfxScuCcu_getMaxFrequency>
8000616e:	4b 08 41 f1 	itof %d15,%d8
80006172:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
80006176:	00 90       	ret 

80006178 <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006178:	91 30 00 ff 	movh.a %a15,61443
8000617c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006180:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80006182:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006184:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
80006188:	16 f0       	and %d15,240
8000618a:	6e 07       	jz %d15,80006198 <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
8000618c:	6d ff ae ff 	call 800060e8 <IfxScuCcu_getMaxFrequency>
80006190:	4b 08 41 f1 	itof %d15,%d8
80006194:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
80006198:	00 90       	ret 

8000619a <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
8000619a:	6d ff 3f ff 	call 80006018 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
8000619e:	91 30 00 ff 	movh.a %a15,61443
800061a2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061a6:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
800061a8:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800061aa:	37 03 64 36 	extr.u %d3,%d3,12,4
800061ae:	ff 53 30 80 	jge.u %d3,5,8000620e <IfxScuCcu_getSpbFrequency+0x74>
800061b2:	91 00 00 f8 	movh.a %a15,32768
800061b6:	d9 ff 00 76 	lea %a15,[%a15]25024 <800061c0 <IfxScuCcu_getSpbFrequency+0x26>>
800061ba:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800061be:	dc 0f       	ji %a15
800061c0:	1d 00 0a 00 	j 800061d4 <IfxScuCcu_getSpbFrequency+0x3a>
800061c4:	1d 00 18 00 	j 800061f4 <IfxScuCcu_getSpbFrequency+0x5a>
800061c8:	1d 00 19 00 	j 800061fa <IfxScuCcu_getSpbFrequency+0x60>
800061cc:	1d 00 1a 00 	j 80006200 <IfxScuCcu_getSpbFrequency+0x66>
800061d0:	1d 00 1b 00 	j 80006206 <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800061d4:	91 30 00 ff 	movh.a %a15,61443
800061d8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061dc:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
800061de:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800061e0:	37 03 64 38 	extr.u %d3,%d3,16,4
800061e4:	df 03 15 00 	jeq %d3,0,8000620e <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
800061e8:	4c f0       	ld.w %d15,[%a15]0
800061ea:	37 0f 64 f8 	extr.u %d15,%d15,16,4
800061ee:	4b 0f 41 f1 	itof %d15,%d15
800061f2:	3c 0c       	j 8000620a <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
800061f4:	7b 00 1f f4 	movh %d15,16880
800061f8:	3c 09       	j 8000620a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
800061fa:	7b 00 27 f4 	movh %d15,17008
800061fe:	3c 06       	j 8000620a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006200:	7b 00 2f f4 	movh %d15,17136
80006204:	3c 03       	j 8000620a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
80006206:	7b 00 37 f4 	movh %d15,17264
8000620a:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
8000620e:	02 f2       	mov %d2,%d15
80006210:	00 90       	ret 

80006212 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006212:	91 30 00 ff 	movh.a %a15,61443
80006216:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000621a:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
8000621c:	6d ff bf ff 	call 8000619a <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
80006220:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
80006224:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
80006226:	26 9f       	and %d15,%d9
80006228:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
8000622c:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
80006230:	7e 29       	jne %d15,%d2,80006242 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
80006232:	3b 00 40 20 	mov %d2,1024
80006236:	a2 82       	sub %d2,%d8
80006238:	4b 02 41 21 	itof %d2,%d2
8000623c:	4b 23 51 20 	div.f %d2,%d3,%d2
80006240:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
80006242:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
80006246:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
80006248:	7e 49       	jne %d15,%d4,8000625a <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
8000624a:	4b 08 41 21 	itof %d2,%d8
8000624e:	7b 00 a8 f3 	movh %d15,14976
80006252:	4b 23 41 20 	mul.f %d2,%d3,%d2
80006256:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
8000625a:	00 90       	ret 

8000625c <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
8000625c:	6d ff de fe 	call 80006018 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006260:	91 30 00 ff 	movh.a %a15,61443
80006264:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006268:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
8000626a:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
8000626c:	37 03 64 36 	extr.u %d3,%d3,12,4
80006270:	ff 53 31 80 	jge.u %d3,5,800062d2 <IfxScuCcu_getSriFrequency+0x76>
80006274:	91 00 00 f8 	movh.a %a15,32768
80006278:	d9 ff 04 a6 	lea %a15,[%a15]25220 <80006284 <IfxScuCcu_getSriFrequency+0x28>>
8000627c:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006280:	dc 0f       	ji %a15
80006282:	00 00       	nop 
80006284:	1d 00 0a 00 	j 80006298 <IfxScuCcu_getSriFrequency+0x3c>
80006288:	1d 00 18 00 	j 800062b8 <IfxScuCcu_getSriFrequency+0x5c>
8000628c:	1d 00 19 00 	j 800062be <IfxScuCcu_getSriFrequency+0x62>
80006290:	1d 00 1a 00 	j 800062c4 <IfxScuCcu_getSriFrequency+0x68>
80006294:	1d 00 1b 00 	j 800062ca <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
80006298:	91 30 00 ff 	movh.a %a15,61443
8000629c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062a0:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
800062a2:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800062a4:	37 03 64 34 	extr.u %d3,%d3,8,4
800062a8:	df 03 15 00 	jeq %d3,0,800062d2 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
800062ac:	4c f0       	ld.w %d15,[%a15]0
800062ae:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800062b2:	4b 0f 41 f1 	itof %d15,%d15
800062b6:	3c 0c       	j 800062ce <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
800062b8:	7b 00 1f f4 	movh %d15,16880
800062bc:	3c 09       	j 800062ce <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
800062be:	7b 00 27 f4 	movh %d15,17008
800062c2:	3c 06       	j 800062ce <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
800062c4:	7b 00 2f f4 	movh %d15,17136
800062c8:	3c 03       	j 800062ce <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
800062ca:	7b 00 37 f4 	movh %d15,17264
800062ce:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
800062d2:	02 f2       	mov %d2,%d15
800062d4:	00 90       	ret 

800062d6 <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
800062d6:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
800062d8:	6d ff c2 ff 	call 8000625c <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
800062dc:	1e 1d       	jeq %d15,1,800062f6 <IfxScuCcu_getCpuFrequency+0x20>
800062de:	6e 07       	jz %d15,800062ec <IfxScuCcu_getCpuFrequency+0x16>
800062e0:	de 2a       	jne %d15,2,80006314 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
800062e2:	91 30 00 ff 	movh.a %a15,61443
800062e6:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800062ea:	3c 0a       	j 800062fe <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
800062ec:	91 30 00 ff 	movh.a %a15,61443
800062f0:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800062f4:	3c 05       	j 800062fe <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
800062f6:	91 30 00 ff 	movh.a %a15,61443
800062fa:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
800062fe:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
80006300:	6e 0b       	jz %d15,80006316 <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006302:	4b 0f 61 f1 	utof %d15,%d15
80006306:	7b 00 c8 33 	movh %d3,15488
8000630a:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
8000630e:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006312:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
80006314:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
80006316:	00 90       	ret 

80006318 <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006318:	91 30 00 ff 	movh.a %a15,61443
8000631c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006320:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006322:	7b 00 03 30 	movh %d3,48
80006326:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006328:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
8000632c:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
8000632e:	76 3f       	jz %d3,8000634c <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006330:	6d ff 96 ff 	call 8000625c <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006334:	3b 00 f0 30 	mov %d3,3840
80006338:	26 3f       	and %d15,%d3
8000633a:	1b 0f f0 ff 	addi %d15,%d15,-256
8000633e:	8f 0f d0 f1 	andn %d15,%d15,256
80006342:	ee 05       	jnz %d15,8000634c <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
80006344:	4b 08 41 f1 	itof %d15,%d8
80006348:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
8000634c:	00 90       	ret 

8000634e <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000634e:	91 30 00 ff 	movh.a %a15,61443
80006352:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006356:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
80006358:	7b 00 30 30 	movh %d3,768
8000635c:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000635e:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
80006362:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
80006364:	76 3f       	jz %d3,80006382 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006366:	6d ff 7b ff 	call 8000625c <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
8000636a:	3b 00 f0 30 	mov %d3,3840
8000636e:	26 3f       	and %d15,%d3
80006370:	1b 0f f0 ff 	addi %d15,%d15,-256
80006374:	8f 0f d0 f1 	andn %d15,%d15,256
80006378:	ee 05       	jnz %d15,80006382 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
8000637a:	4b 08 41 f1 	itof %d15,%d8
8000637e:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006382:	00 90       	ret 

80006384 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006384:	19 4f 10 10 	ld.w %d15,[%a4]80
80006388:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
8000638c:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
8000638e:	59 cf 10 30 	st.w [%a12]208 <700000d0 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80006392:	6d 00 c8 07 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
80006396:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80006398:	6d 00 e3 07 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000639c:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
8000639e:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800063a0:	6d 00 c1 06 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800063a4:	91 30 00 2f 	movh.a %a2,61443
800063a8:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800063ac:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
800063ae:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063b0:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800063b2:	96 08       	or %d15,8
800063b4:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063b6:	6d 00 eb 07 	call 8000738c <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800063ba:	02 84       	mov %d4,%d8
800063bc:	6d 00 ce 06 	call 80007158 <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800063c0:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
800063c4:	91 30 00 3f 	movh.a %a3,61443
800063c8:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063cc:	4c 30       	ld.w %d15,[%a3]0
800063ce:	91 30 00 2f 	movh.a %a2,61443
800063d2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063d6:	bf 0f fb 7f 	jlt %d15,0,800063cc <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
800063da:	4c 20       	ld.w %d15,[%a2]0
800063dc:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
800063e0:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800063e2:	4c 20       	ld.w %d15,[%a2]0
800063e4:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800063e8:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
800063ea:	91 30 00 2f 	movh.a %a2,61443
800063ee:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800063f2:	4c 20       	ld.w %d15,[%a2]0
800063f4:	96 10       	or %d15,16
800063f6:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
800063f8:	91 30 00 2f 	movh.a %a2,61443
800063fc:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006400:	4c 20       	ld.w %d15,[%a2]0
80006402:	bf 0f ff 7f 	jlt %d15,0,80006400 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80006406:	91 30 00 2f 	movh.a %a2,61443
8000640a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000640e:	4c 20       	ld.w %d15,[%a2]0
80006410:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006414:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80006416:	4c 20       	ld.w %d15,[%a2]0
80006418:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000641c:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000641e:	6d 00 82 07 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006422:	91 30 00 2f 	movh.a %a2,61443
80006426:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000642a:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
8000642c:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000642e:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006430:	8f 02 c6 21 	andn %d2,%d2,96
80006434:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
80006436:	19 c6 10 30 	ld.w %d6,[%a12]208 <700000d0 <IfxScuCcu_xtalFrequency>>
8000643a:	7b 60 02 20 	movh %d2,38
8000643e:	1b 02 5a 22 	addi %d2,%d2,9632
80006442:	4b 26 11 62 	div.u %e6,%d6,%d2
80006446:	54 22       	ld.w %d2,[%a2]
80006448:	c2 f6       	add %d6,-1
8000644a:	37 62 05 68 	insert %d6,%d2,%d6,16,5
8000644e:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80006450:	54 22       	ld.w %d2,[%a2]
80006452:	8f 42 40 21 	or %d2,%d2,4
80006456:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80006458:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
8000645c:	54 32       	ld.w %d2,[%a3]
8000645e:	6f 12 05 80 	jnz.t %d2,1,80006468 <IfxScuCcu_init+0xe4>
80006462:	fc 2d       	loop %a2,8000645c <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
80006464:	82 1b       	mov %d11,1
80006466:	3c 05       	j 80006470 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80006468:	54 32       	ld.w %d2,[%a3]
8000646a:	6f 82 fc 7f 	jz.t %d2,8,80006462 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
8000646e:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80006470:	02 f4       	mov %d4,%d15
80006472:	6d 00 58 06 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006476:	91 30 00 2f 	movh.a %a2,61443
8000647a:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
8000647e:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
80006480:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006482:	8f 82 40 21 	or %d2,%d2,8
80006486:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
80006488:	91 30 00 2f 	movh.a %a2,61443
8000648c:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006490:	54 22       	ld.w %d2,[%a2]
80006492:	8f 82 40 21 	or %d2,%d2,8
80006496:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
80006498:	6d 00 7a 07 	call 8000738c <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000649c:	02 84       	mov %d4,%d8
8000649e:	6d 00 e3 07 	call 80007464 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
800064a2:	df 0b 29 81 	jne %d11,0,800066f4 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800064a6:	02 84       	mov %d4,%d8
800064a8:	6d 00 58 06 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064ac:	91 30 00 2f 	movh.a %a2,61443
800064b0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800064b4:	4c 20       	ld.w %d15,[%a2]0
800064b6:	6f 5f ff 7f 	jz.t %d15,5,800064b4 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064ba:	91 30 00 2f 	movh.a %a2,61443
800064be:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800064c2:	54 22       	ld.w %d2,[%a2]
800064c4:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800064c6:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064ca:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800064ce:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064d2:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
800064d4:	91 30 00 2f 	movh.a %a2,61443
800064d8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800064dc:	54 22       	ld.w %d2,[%a2]
800064de:	0c f8       	ld.bu %d15,[%a15]8
800064e0:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
800064e4:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
800064e6:	54 22       	ld.w %d2,[%a2]
800064e8:	0c f9       	ld.bu %d15,[%a15]9
800064ea:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
800064ee:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
800064f0:	4c 20       	ld.w %d15,[%a2]0
800064f2:	96 40       	or %d15,64
800064f4:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
800064f6:	4c 20       	ld.w %d15,[%a2]0
800064f8:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
800064fc:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
800064fe:	4c 20       	ld.w %d15,[%a2]0
80006500:	96 20       	or %d15,32
80006502:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006504:	4c 20       	ld.w %d15,[%a2]0
80006506:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000650a:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
8000650c:	4c 20       	ld.w %d15,[%a2]0
8000650e:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80006512:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006514:	6d ff 94 fd 	call 8000603c <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80006518:	91 30 00 2f 	movh.a %a2,61443
8000651c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006520:	4c 20       	ld.w %d15,[%a2]0
80006522:	6f 2f ff 7f 	jz.t %d15,2,80006520 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006526:	91 30 00 2f 	movh.a %a2,61443
8000652a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000652e:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006530:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006534:	8f 1f c0 f1 	andn %d15,%d15,1
80006538:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000653a:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000653e:	4c 30       	ld.w %d15,[%a3]0
80006540:	91 30 00 2f 	movh.a %a2,61443
80006544:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006548:	bf 0f fb 7f 	jlt %d15,0,8000653e <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
8000654c:	4c 20       	ld.w %d15,[%a2]0
8000654e:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006552:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
80006554:	4c 20       	ld.w %d15,[%a2]0
80006556:	91 30 00 cf 	movh.a %a12,61443
8000655a:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000655e:	bf 0f fb 7f 	jlt %d15,0,80006554 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80006562:	48 34       	ld.w %d4,[%a15]12
80006564:	6d ff 6c fd 	call 8000603c <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80006568:	4c f5       	ld.w %d15,[%a15]20
8000656a:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
8000656c:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
8000656e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006572:	26 f2       	and %d2,%d15
80006574:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80006578:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
8000657c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006580:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80006584:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006586:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000658a:	4c 30       	ld.w %d15,[%a3]0
8000658c:	91 30 00 2f 	movh.a %a2,61443
80006590:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006594:	bf 0f fb 7f 	jlt %d15,0,8000658a <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80006598:	4c f7       	ld.w %d15,[%a15]28
8000659a:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
8000659c:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
8000659e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065a2:	26 f2       	and %d2,%d15
800065a4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
800065a8:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
800065ac:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800065b0:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
800065b4:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800065b6:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065ba:	4c 30       	ld.w %d15,[%a3]0
800065bc:	91 30 00 2f 	movh.a %a2,61443
800065c0:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065c4:	bf 0f fb 7f 	jlt %d15,0,800065ba <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800065c8:	4c f9       	ld.w %d15,[%a15]36
800065ca:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065cc:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800065ce:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065d2:	26 f2       	and %d2,%d15
800065d4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
800065d8:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800065dc:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
800065e0:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800065e2:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800065e6:	4c 30       	ld.w %d15,[%a3]0
800065e8:	91 30 00 2f 	movh.a %a2,61443
800065ec:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800065f0:	bf 0f fb 7f 	jlt %d15,0,800065e6 <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800065f4:	54 23       	ld.w %d3,[%a2]
800065f6:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800065f8:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800065fa:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800065fe:	26 f2       	and %d2,%d15
80006600:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006604:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006608:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000660a:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000660c:	91 30 00 2f 	movh.a %a2,61443
80006610:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006614:	54 23       	ld.w %d3,[%a2]
80006616:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006618:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000661a:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000661e:	26 f2       	and %d2,%d15
80006620:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006624:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006626:	91 30 00 2f 	movh.a %a2,61443
8000662a:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
8000662e:	54 23       	ld.w %d3,[%a2]
80006630:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006632:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006634:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006638:	26 f2       	and %d2,%d15
8000663a:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
8000663e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006640:	91 30 00 2f 	movh.a %a2,61443
80006644:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006648:	54 23       	ld.w %d3,[%a2]
8000664a:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000664e:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006652:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80006656:	26 f2       	and %d2,%d15
80006658:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
8000665c:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000665e:	6d 00 03 07 	call 80007464 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80006662:	91 00 80 cf 	movh.a %a12,63488
80006666:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000666a:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000666e:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006670:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
80006674:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006678:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
8000667a:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000667c:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006680:	6d 00 51 05 	call 80007122 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006684:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
80006686:	02 94       	mov %d4,%d9
80006688:	6d 00 82 06 	call 8000738c <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000668c:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006690:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80006694:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006696:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
8000669a:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
8000669e:	0c f0       	ld.bu %d15,[%a15]0
800066a0:	8f fd 0f 21 	and %d2,%d13,255
800066a4:	7f f2 28 80 	jge.u %d2,%d15,800066f4 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066a8:	02 84       	mov %d4,%d8
800066aa:	6d 00 57 05 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066ae:	4c d0       	ld.w %d15,[%a13]0
800066b0:	6f 5f ff 7f 	jz.t %d15,5,800066ae <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066b4:	02 df       	mov %d15,%d13
800066b6:	16 ff       	and %d15,255
800066b8:	53 cf 20 a0 	mul %d10,%d15,12
800066bc:	c8 12       	ld.a %a2,[%a15]4
800066be:	4c c0       	ld.w %d15,[%a12]0
800066c0:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066c2:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066c4:	30 32       	add.a %a2,%a3
800066c6:	14 22       	ld.bu %d2,[%a2]
800066c8:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
800066cc:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066ce:	6d 00 cb 06 	call 80007464 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
800066d2:	c8 12       	ld.a %a2,[%a15]4
800066d4:	60 a3       	mov.a %a3,%d10
800066d6:	30 32       	add.a %a2,%a3
800066d8:	99 22 08 00 	ld.a %a2,[%a2]8
800066dc:	bc 23       	jz.a %a2,800066e2 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
800066de:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
800066e2:	c8 12       	ld.a %a2,[%a15]4
800066e4:	60 a3       	mov.a %a3,%d10
800066e6:	c2 1d       	add %d13,1
800066e8:	30 32       	add.a %a2,%a3
800066ea:	19 24 04 00 	ld.w %d4,[%a2]4
800066ee:	6d ff a7 fc 	call 8000603c <IfxScuCcu_wait>
800066f2:	3c d6       	j 8000669e <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066f4:	02 84       	mov %d4,%d8
800066f6:	6d 00 31 05 	call 80007158 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
800066fa:	91 30 00 ff 	movh.a %a15,61443
800066fe:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006702:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006704:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006706:	8f 0f c4 f1 	andn %d15,%d15,64
8000670a:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000670c:	6d 00 ac 06 	call 80007464 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006710:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006714:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
80006716:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000671a:	6d 00 04 05 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
8000671e:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006720:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006722:	96 08       	or %d15,8
80006724:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006726:	91 30 00 ff 	movh.a %a15,61443
8000672a:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
8000672e:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006730:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006732:	8f 8f c0 f1 	andn %d15,%d15,8
80006736:	a6 fc       	or %d12,%d15
80006738:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000673a:	6d 00 29 06 	call 8000738c <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
8000673e:	02 b2       	mov %d2,%d11
80006740:	00 90       	ret 

80006742 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
80006742:	91 00 00 f8 	movh.a %a15,32768
80006746:	d9 ff 88 90 	lea %a15,[%a15]2632 <80000a48 <IfxScuCcu_defaultClockConfig>>
8000674a:	c5 02 14 00 	lea %a2,14 <_.+0x13>
8000674e:	44 ff       	ld.w %d15,[%a15+]
80006750:	64 4f       	st.w [%a4+],%d15
80006752:	fc 2e       	loop %a2,8000674e <IfxScuCcu_initConfig+0xc>
80006754:	00 90       	ret 

80006756 <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
80006756:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006758:	6d 00 e5 05 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
8000675c:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
8000675e:	6d 00 00 06 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006762:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006764:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006766:	6d 00 de 04 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000676a:	91 30 00 ff 	movh.a %a15,61443
8000676e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006772:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006774:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006776:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006778:	8f 82 40 21 	or %d2,%d2,8
8000677c:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000677e:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006782:	6d 00 05 06 	call 8000738c <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006786:	02 84       	mov %d4,%d8
80006788:	6d 00 e8 04 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
8000678c:	91 30 00 ff 	movh.a %a15,61443
80006790:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006794:	48 02       	ld.w %d2,[%a15]0
80006796:	ef 02 0c 00 	jz.t %d2,16,800067ae <IfxScuCcu_initErayPll+0x58>
8000679a:	48 02       	ld.w %d2,[%a15]0
8000679c:	6f 12 09 80 	jnz.t %d2,1,800067ae <IfxScuCcu_initErayPll+0x58>
800067a0:	91 30 00 ff 	movh.a %a15,61443
800067a4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067a8:	48 02       	ld.w %d2,[%a15]0
800067aa:	6f 12 19 00 	jz.t %d2,1,800067dc <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
800067ae:	91 30 00 ff 	movh.a %a15,61443
800067b2:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800067b6:	48 02       	ld.w %d2,[%a15]0
800067b8:	b7 f2 01 28 	insert %d2,%d2,15,16,1
800067bc:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
800067be:	48 02       	ld.w %d2,[%a15]0
800067c0:	8f 22 c0 21 	andn %d2,%d2,2
800067c4:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
800067c6:	91 30 00 ff 	movh.a %a15,61443
800067ca:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067ce:	48 02       	ld.w %d2,[%a15]0
800067d0:	6f 12 ff ff 	jnz.t %d2,1,800067ce <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
800067d4:	19 c4 04 00 	ld.w %d4,[%a12]4
800067d8:	6d ff 32 fc 	call 8000603c <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
800067dc:	91 30 00 ff 	movh.a %a15,61443
800067e0:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067e4:	48 02       	ld.w %d2,[%a15]0
800067e6:	6f 02 15 80 	jnz.t %d2,0,80006810 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
800067ea:	48 02       	ld.w %d2,[%a15]0
800067ec:	6f 42 ff 7f 	jz.t %d2,4,800067ea <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
800067f0:	91 30 00 ff 	movh.a %a15,61443
800067f4:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
800067f8:	48 02       	ld.w %d2,[%a15]0
800067fa:	b7 32 07 28 	insert %d2,%d2,3,16,7
800067fe:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006800:	91 30 00 ff 	movh.a %a15,61443
80006804:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006808:	48 02       	ld.w %d2,[%a15]0
8000680a:	8f 12 40 21 	or %d2,%d2,1
8000680e:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
80006810:	91 30 00 ff 	movh.a %a15,61443
80006814:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006818:	48 02       	ld.w %d2,[%a15]0
8000681a:	6f 52 ff 7f 	jz.t %d2,5,80006818 <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000681e:	91 30 00 ff 	movh.a %a15,61443
80006822:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006826:	48 03       	ld.w %d3,[%a15]0
80006828:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000682c:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000682e:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006832:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006834:	91 30 00 ff 	movh.a %a15,61443
80006838:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000683c:	48 03       	ld.w %d3,[%a15]0
8000683e:	14 c2       	ld.bu %d2,[%a12]
80006840:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
80006844:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
80006846:	48 03       	ld.w %d3,[%a15]0
80006848:	39 c2 01 00 	ld.bu %d2,[%a12]1
8000684c:	37 23 85 24 	insert %d2,%d3,%d2,9,5
80006850:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
80006852:	48 02       	ld.w %d2,[%a15]0
80006854:	b7 f2 01 29 	insert %d2,%d2,15,18,1
80006858:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
8000685a:	48 02       	ld.w %d2,[%a15]0
8000685c:	8f 02 42 21 	or %d2,%d2,32
80006860:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006862:	6d 00 01 06 	call 80007464 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
80006866:	91 10 00 f0 	movh.a %a15,1
8000686a:	91 30 00 2f 	movh.a %a2,61443
8000686e:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006872:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
80006876:	fd f0 04 00 	loop %a15,8000687e <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
8000687a:	82 19       	mov %d9,1
8000687c:	3c 05       	j 80006886 <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
8000687e:	54 22       	ld.w %d2,[%a2]
80006880:	6f 22 fb 7f 	jz.t %d2,2,80006876 <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
80006884:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006886:	02 84       	mov %d4,%d8
80006888:	6d 00 68 04 	call 80007158 <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
8000688c:	91 30 00 ff 	movh.a %a15,61443
80006890:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006894:	48 02       	ld.w %d2,[%a15]0
80006896:	8f 12 c0 21 	andn %d2,%d2,1
8000689a:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
8000689c:	91 30 00 ff 	movh.a %a15,61443
800068a0:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068a4:	48 02       	ld.w %d2,[%a15]0
800068a6:	6f 02 ff ff 	jnz.t %d2,0,800068a4 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800068aa:	91 30 00 ff 	movh.a %a15,61443
800068ae:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068b2:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068b4:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800068b6:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800068ba:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
800068be:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068c2:	6d 00 d1 05 	call 80007464 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800068c6:	02 f4       	mov %d4,%d15
800068c8:	6d 00 2d 04 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
800068cc:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800068d0:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068d2:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800068d6:	8f 82 40 21 	or %d2,%d2,8
800068da:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068dc:	91 30 00 ff 	movh.a %a15,61443
800068e0:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800068e4:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800068e6:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068e8:	8f 82 c0 21 	andn %d2,%d2,8
800068ec:	a6 32       	or %d2,%d3
800068ee:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
800068f0:	6d 00 4e 05 	call 8000738c <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
800068f4:	02 92       	mov %d2,%d9
800068f6:	00 90       	ret 

800068f8 <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
800068f8:	91 00 00 f8 	movh.a %a15,32768
800068fc:	d9 ff 80 90 	lea %a15,[%a15]2624 <80000a40 <IfxScuCcu_defaultErayPllConfig>>
80006900:	09 f2 40 09 	ld.d %e2,[%a15]
80006904:	89 42 40 09 	st.d [%a4],%e2
80006908:	00 90       	ret 

8000690a <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
8000690a:	02 5a       	mov %d10,%d5
8000690c:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
8000690e:	6d ff a7 fc 	call 8000625c <IfxScuCcu_getSriFrequency>
80006912:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006914:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
80006918:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
8000691c:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
8000691e:	f6 29       	jnz %d2,80006930 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
80006920:	7b 00 28 84 	movh %d8,17024
80006924:	4b 8a 41 80 	mul.f %d8,%d10,%d8
80006928:	4b f8 51 80 	div.f %d8,%d8,%d15
8000692c:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006930:	6d 00 17 05 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006934:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006936:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006938:	6d 00 10 04 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
8000693c:	df 19 0f 00 	jeq %d9,1,8000695a <IfxScuCcu_setCpuFrequency+0x50>
80006940:	76 98       	jz %d9,80006950 <IfxScuCcu_setCpuFrequency+0x46>
80006942:	df 29 11 80 	jne %d9,2,80006964 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006946:	91 30 00 ff 	movh.a %a15,61443
8000694a:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000694e:	3c 0a       	j 80006962 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
80006950:	91 30 00 ff 	movh.a %a15,61443
80006954:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006958:	3c 05       	j 80006962 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
8000695a:	91 30 00 ff 	movh.a %a15,61443
8000695e:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006962:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006964:	02 a4       	mov %d4,%d10
80006966:	6d 00 7f 05 	call 80007464 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
8000696a:	76 89       	jz %d8,8000697c <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
8000696c:	4b 08 61 81 	utof %d8,%d8
80006970:	7b 00 c8 23 	movh %d2,15488
80006974:	4b 28 41 80 	mul.f %d8,%d8,%d2
80006978:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
8000697c:	02 f2       	mov %d2,%d15
8000697e:	00 90       	ret 

80006980 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006980:	91 30 00 ff 	movh.a %a15,61443
80006984:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
80006988:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
8000698a:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
8000698c:	6d ff 46 fb 	call 80006018 <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
80006990:	4b 82 51 20 	div.f %d2,%d2,%d8
80006994:	4b 02 31 31 	ftoiz %d3,%d2
80006998:	4b 03 41 41 	itof %d4,%d3
8000699c:	6b 04 31 22 	sub.f %d2,%d2,%d4
800069a0:	7b 00 f0 43 	movh %d4,16128
800069a4:	4b 42 01 20 	cmp.f %d2,%d2,%d4
800069a8:	37 02 61 21 	extr.u %d2,%d2,2,1
800069ac:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800069ae:	82 13       	mov %d3,1
800069b0:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
800069b4:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
800069b8:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
800069bc:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
800069c0:	8f 12 c0 31 	andn %d3,%d2,1
800069c4:	02 92       	mov %d2,%d9
800069c6:	8b 74 a0 92 	ge.u %d9,%d4,7
800069ca:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069ce:	6d 00 c8 04 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069d2:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069d4:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069d6:	6d 00 c1 03 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
800069da:	40 f2       	mov.aa %a2,%a15
800069dc:	54 22       	ld.w %d2,[%a2]
800069de:	91 30 00 ff 	movh.a %a15,61443
800069e2:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800069e6:	bf 02 fb 7f 	jlt %d2,0,800069dc <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
800069ea:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
800069ee:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
800069f2:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
800069f4:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
800069f6:	6d 00 37 05 	call 80007464 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
800069fa:	6d ff 0f fb 	call 80006018 <IfxScuCcu_getSourceFrequency>
800069fe:	4c f0       	ld.w %d15,[%a15]0
80006a00:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a04:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006a08:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a0c:	00 90       	ret 

80006a0e <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
80006a0e:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006a10:	6d 00 a7 04 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>
80006a14:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a16:	6d ff 84 fa 	call 80005f1e <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a1a:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a1c:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a1e:	6d 00 9d 03 	call 80007158 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a22:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a26:	91 30 00 ff 	movh.a %a15,61443
80006a2a:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006a2e:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a30:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006a34:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a36:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a3a:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a3e:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006a42:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006a44:	6d 00 10 05 	call 80007464 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006a48:	6d ff 6b fa 	call 80005f1e <IfxScuCcu_getPllErayVcoFrequency>
80006a4c:	4c f0       	ld.w %d15,[%a15]0
80006a4e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006a52:	c2 1f       	add %d15,1
80006a54:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006a58:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a5c:	00 90       	ret 

80006a5e <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
80006a5e:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006a60:	6d 00 7f 04 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>
80006a64:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a66:	6d ff b7 fa 	call 80005fd4 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a6a:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a6c:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a6e:	6d 00 75 03 	call 80007158 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a72:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006a76:	91 30 00 ff 	movh.a %a15,61443
80006a7a:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006a7e:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a80:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a84:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a86:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a8a:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006a8e:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006a92:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a94:	6d 00 e8 04 	call 80007464 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
80006a98:	6d ff 9e fa 	call 80005fd4 <IfxScuCcu_getPllVcoFrequency>
80006a9c:	4c f0       	ld.w %d15,[%a15]0
80006a9e:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006aa2:	c2 1f       	add %d15,1
80006aa4:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
80006aa8:	4b f2 51 20 	div.f %d2,%d2,%d15
80006aac:	00 90       	ret 

80006aae <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
80006aae:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006ab0:	6d ff b4 fa 	call 80006018 <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006ab4:	4b f2 51 20 	div.f %d2,%d2,%d15
80006ab8:	82 24       	mov %d4,2
80006aba:	4b 02 71 21 	ftouz %d2,%d2
80006abe:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
80006ac2:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006ac6:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
80006aca:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006ace:	8f 14 c0 f1 	andn %d15,%d4,1
80006ad2:	02 a4       	mov %d4,%d10
80006ad4:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006ad8:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006adc:	6d 00 23 04 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
80006ae0:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006ae2:	6d 00 3e 04 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006ae6:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006ae8:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006aea:	6d 00 1c 03 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006aee:	91 30 00 ff 	movh.a %a15,61443
80006af2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006af6:	48 02       	ld.w %d2,[%a15]0
80006af8:	3b 00 3e f0 	mov %d15,992
80006afc:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006afe:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b00:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b02:	6d 00 45 04 	call 8000738c <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006b06:	02 94       	mov %d4,%d9
80006b08:	6d 00 28 03 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b0c:	91 30 00 2f 	movh.a %a2,61443
80006b10:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b14:	4c 20       	ld.w %d15,[%a2]0
80006b16:	91 30 00 ff 	movh.a %a15,61443
80006b1a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b1e:	bf 0f fb 7f 	jlt %d15,0,80006b14 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006b22:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b24:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006b26:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006b2a:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006b2e:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b30:	6d 00 9a 04 	call 80007464 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b34:	02 84       	mov %d4,%d8
80006b36:	6d 00 f6 02 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b3a:	91 30 00 ff 	movh.a %a15,61443
80006b3e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b42:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b44:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b46:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006b4a:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b4c:	6d 00 20 04 	call 8000738c <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b50:	91 30 00 ff 	movh.a %a15,61443
80006b54:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b58:	4c f0       	ld.w %d15,[%a15]0
80006b5a:	bf 0f ff 7f 	jlt %d15,0,80006b58 <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006b5e:	1d ff 1e fb 	j 8000619a <IfxScuCcu_getSpbFrequency>

80006b62 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006b62:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006b64:	6d ff 5a fa 	call 80006018 <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006b68:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b6c:	4b 02 31 31 	ftoiz %d3,%d2
80006b70:	4b 03 41 f1 	itof %d15,%d3
80006b74:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006b78:	7b 00 f0 f3 	movh %d15,16128
80006b7c:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006b80:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006b84:	82 12       	mov %d2,1
80006b86:	42 3f       	add %d15,%d3
80006b88:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
80006b8c:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
80006b90:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
80006b92:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
80006b96:	8f 1f c0 21 	andn %d2,%d15,1
80006b9a:	02 9f       	mov %d15,%d9
80006b9c:	8b 73 a0 92 	ge.u %d9,%d3,7
80006ba0:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006ba4:	6d 00 dd 03 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006ba8:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006baa:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bac:	6d 00 d6 02 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bb0:	91 30 00 2f 	movh.a %a2,61443
80006bb4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bb8:	4c 20       	ld.w %d15,[%a2]0
80006bba:	91 30 00 ff 	movh.a %a15,61443
80006bbe:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bc2:	bf 0f fb 7f 	jlt %d15,0,80006bb8 <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006bc6:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bc8:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006bca:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006bce:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006bd2:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bd4:	6d 00 48 04 	call 80007464 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bd8:	4c f0       	ld.w %d15,[%a15]0
80006bda:	bf 0f ff 7f 	jlt %d15,0,80006bd8 <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006bde:	1d ff 3f fb 	j 8000625c <IfxScuCcu_getSriFrequency>

80006be2 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006be2:	91 30 00 ff 	movh.a %a15,61443
80006be6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bea:	4c f0       	ld.w %d15,[%a15]0
80006bec:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006bf0:	df 0f 81 00 	jeq %d15,0,80006cf2 <IfxScuCcu_switchToBackupClock+0x110>
80006bf4:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006bf6:	6d 00 b4 03 	call 8000735e <IfxScuWdt_getSafetyWatchdogPassword>
80006bfa:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006bfc:	6d 00 93 03 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c00:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c02:	02 28       	mov %d8,%d2
80006c04:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c08:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c0c:	91 30 00 df 	movh.a %a13,61443
80006c10:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c12:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006c16:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c1a:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c1e:	6e 1b       	jz %d15,80006c54 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c20:	02 94       	mov %d4,%d9
80006c22:	6d 00 9b 02 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c26:	54 e2       	ld.w %d2,[%a14]
80006c28:	6f 52 ff 7f 	jz.t %d2,5,80006c26 <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c2c:	c8 12       	ld.a %a2,[%a15]4
80006c2e:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c30:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c32:	30 c2       	add.a %a2,%a12
80006c34:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c36:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c38:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006c3c:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c3e:	6d 00 13 04 	call 80007464 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006c42:	c8 12       	ld.a %a2,[%a15]4
80006c44:	30 c2       	add.a %a2,%a12
80006c46:	19 24 04 00 	ld.w %d4,[%a2]4
80006c4a:	6d ff f9 f9 	call 8000603c <IfxScuCcu_wait>
80006c4e:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006c52:	3c e6       	j 80006c1e <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006c54:	02 84       	mov %d4,%d8
80006c56:	6d 00 66 02 	call 80007122 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006c5a:	91 30 00 ff 	movh.a %a15,61443
80006c5e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006c62:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006c64:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c66:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006c68:	96 08       	or %d15,8
80006c6a:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006c6c:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c70:	6d 00 8e 03 	call 8000738c <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c74:	02 94       	mov %d4,%d9
80006c76:	6d 00 71 02 	call 80007158 <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006c7a:	91 30 00 2f 	movh.a %a2,61443
80006c7e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c82:	4c 20       	ld.w %d15,[%a2]0
80006c84:	91 30 00 ff 	movh.a %a15,61443
80006c88:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c8c:	bf 0f fb 7f 	jlt %d15,0,80006c82 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006c90:	4c f0       	ld.w %d15,[%a15]0
80006c92:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006c96:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006c98:	4c f0       	ld.w %d15,[%a15]0
80006c9a:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006c9e:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006ca0:	4c f0       	ld.w %d15,[%a15]0
80006ca2:	bf 0f ff 7f 	jlt %d15,0,80006ca0 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006ca6:	91 30 00 ff 	movh.a %a15,61443
80006caa:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006cae:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cb0:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006cb2:	96 10       	or %d15,16
80006cb4:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006cb6:	4c f0       	ld.w %d15,[%a15]0
80006cb8:	8f 0f c4 f1 	andn %d15,%d15,64
80006cbc:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cbe:	6d 00 d3 03 	call 80007464 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006cc2:	91 30 00 ff 	movh.a %a15,61443
80006cc6:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006cca:	02 84       	mov %d4,%d8
80006ccc:	6d 00 2b 02 	call 80007122 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006cd0:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cd2:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006cd6:	96 08       	or %d15,8
80006cd8:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cda:	91 30 00 ff 	movh.a %a15,61443
80006cde:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006ce2:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006ce4:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006ce6:	8f 8f c0 f1 	andn %d15,%d15,8
80006cea:	a6 2f       	or %d15,%d2
80006cec:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cee:	1d 00 4f 03 	j 8000738c <IfxScuWdt_setCpuEndinit>
80006cf2:	00 90       	ret 

80006cf4 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006cf4:	91 30 00 ff 	movh.a %a15,61443
80006cf8:	7b f0 0f f0 	movh %d15,255
80006cfc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d00:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d04:	00 90       	ret 

80006d06 <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d06:	1b 04 01 40 	addi %d4,%d4,16
80006d0a:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006d0c:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d10:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006d14:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006d18:	68 0f       	st.w [%a15]0,%d15
80006d1a:	00 90       	ret 

80006d1c <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d1c:	8f f4 1f f0 	sh %d15,%d4,-1
80006d20:	06 2f       	sh %d15,2
80006d22:	60 ff       	mov.a %a15,%d15
80006d24:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d28:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d2c:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d30:	6f 04 05 00 	jz.t %d4,0,80006d3a <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d34:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d38:	3c 03       	j 80006d3e <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d3a:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d3e:	59 ff 10 80 	st.w [%a15]528,%d15
80006d42:	00 90       	ret 

80006d44 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d44:	8f f4 1f f0 	sh %d15,%d4,-1
80006d48:	06 2f       	sh %d15,2
80006d4a:	60 ff       	mov.a %a15,%d15
80006d4c:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d50:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d54:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d58:	6f 04 05 00 	jz.t %d4,0,80006d62 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d5c:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d60:	3c 03       	j 80006d66 <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d62:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d66:	59 ff 2c 80 	st.w [%a15]556,%d15
80006d6a:	00 90       	ret 

80006d6c <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d6c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006d70:	91 30 00 ff 	movh.a %a15,61443
80006d74:	1b 4f 08 f0 	addi %d15,%d15,132
80006d78:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d7c:	8f 75 00 51 	and %d5,%d5,7
80006d80:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d82:	6f 04 08 00 	jz.t %d4,0,80006d92 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006d86:	4c f0       	ld.w %d15,[%a15]0
80006d88:	8f c5 01 50 	sh %d5,%d5,28
80006d8c:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006d90:	3c 06       	j 80006d9c <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006d92:	4c f0       	ld.w %d15,[%a15]0
80006d94:	8f c5 00 50 	sh %d5,%d5,12
80006d98:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006d9c:	a6 f5       	or %d5,%d15
80006d9e:	68 05       	st.w [%a15]0,%d5
80006da0:	00 90       	ret 

80006da2 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006da2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006da6:	91 30 00 ff 	movh.a %a15,61443
80006daa:	1b 4f 08 f0 	addi %d15,%d15,132
80006dae:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006db2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006db4:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006db6:	6f 04 05 00 	jz.t %d4,0,80006dc0 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006dba:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006dbe:	3c 03       	j 80006dc4 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006dc0:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006dc4:	68 0f       	st.w [%a15]0,%d15
80006dc6:	00 90       	ret 

80006dc8 <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dc8:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006dcc:	91 30 00 ff 	movh.a %a15,61443
80006dd0:	1b 4f 08 f0 	addi %d15,%d15,132
80006dd4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dd8:	90 ff       	addsc.a %a15,%a15,%d15,2
80006dda:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006ddc:	6f 04 05 00 	jz.t %d4,0,80006de6 <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006de0:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006de4:	3c 03       	j 80006dea <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006de6:	8f 0f d0 f1 	andn %d15,%d15,256
80006dea:	68 0f       	st.w [%a15]0,%d15
80006dec:	00 90       	ret 

80006dee <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dee:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006df2:	91 30 00 ff 	movh.a %a15,61443
80006df6:	1b bf 08 f0 	addi %d15,%d15,139
80006dfa:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dfe:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e00:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e02:	6f 04 05 00 	jz.t %d4,0,80006e0c <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e06:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e0a:	3c 03       	j 80006e10 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006e0c:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006e10:	68 0f       	st.w [%a15]0,%d15
80006e12:	00 90       	ret 

80006e14 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e14:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e18:	91 30 00 ff 	movh.a %a15,61443
80006e1c:	1b 4f 08 f0 	addi %d15,%d15,132
80006e20:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e24:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e26:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e28:	6f 04 05 00 	jz.t %d4,0,80006e32 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e2c:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006e30:	3c 03       	j 80006e36 <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006e32:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006e36:	68 0f       	st.w [%a15]0,%d15
80006e38:	00 90       	ret 

80006e3a <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e3a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e3e:	91 30 00 ff 	movh.a %a15,61443
80006e42:	1b 4f 08 f0 	addi %d15,%d15,132
80006e46:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e4a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e4c:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e4e:	6f 04 05 00 	jz.t %d4,0,80006e58 <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e52:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006e56:	3c 03       	j 80006e5c <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006e58:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006e5c:	68 0f       	st.w [%a15]0,%d15
80006e5e:	00 90       	ret 

80006e60 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e60:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006e64:	91 30 00 ff 	movh.a %a15,61443
80006e68:	1b 4f 08 f0 	addi %d15,%d15,132
80006e6c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e70:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e72:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e74:	6f 04 05 00 	jz.t %d4,0,80006e7e <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006e78:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006e7c:	3c 03       	j 80006e82 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006e7e:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006e82:	68 0f       	st.w [%a15]0,%d15
80006e84:	00 90       	ret 

80006e86 <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e86:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006e8a:	91 30 00 ff 	movh.a %a15,61443
80006e8e:	1b 4f 08 f0 	addi %d15,%d15,132
80006e92:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e96:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e98:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e9a:	6f 04 05 00 	jz.t %d4,0,80006ea4 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006e9e:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006ea2:	3c 03       	j 80006ea8 <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006ea4:	8f 0f 50 f1 	or %d15,%d15,256
80006ea8:	68 0f       	st.w [%a15]0,%d15
80006eaa:	00 90       	ret 

80006eac <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006eac:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006eb0:	91 30 00 ff 	movh.a %a15,61443
80006eb4:	1b bf 08 f0 	addi %d15,%d15,139
80006eb8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ebc:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ebe:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006ec0:	6f 04 05 00 	jz.t %d4,0,80006eca <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006ec4:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006ec8:	3c 03       	j 80006ece <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006eca:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006ece:	68 0f       	st.w [%a15]0,%d15
80006ed0:	00 90       	ret 

80006ed2 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ed2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006ed6:	91 30 00 ff 	movh.a %a15,61443
80006eda:	1b 4f 08 f0 	addi %d15,%d15,132
80006ede:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ee2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ee4:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006ee6:	6f 04 05 00 	jz.t %d4,0,80006ef0 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006eea:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006eee:	3c 03       	j 80006ef4 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006ef0:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006ef4:	68 0f       	st.w [%a15]0,%d15
80006ef6:	00 90       	ret 

80006ef8 <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ef8:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006efc:	91 30 00 ff 	movh.a %a15,61443
80006f00:	1b 4f 08 f0 	addi %d15,%d15,132
80006f04:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f08:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f0a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f0c:	6f 04 05 00 	jz.t %d4,0,80006f16 <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f10:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006f14:	3c 03       	j 80006f1a <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006f16:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006f1a:	68 0f       	st.w [%a15]0,%d15
80006f1c:	00 90       	ret 

80006f1e <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006f1e:	91 30 00 ff 	movh.a %a15,61443
80006f22:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f26:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f2a:	00 90       	ret 

80006f2c <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006f2c:	91 30 00 ff 	movh.a %a15,61443
80006f30:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f34:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f38:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f3c:	00 90       	ret 

80006f3e <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f3e:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006f42:	91 30 00 ff 	movh.a %a15,61443
80006f46:	1b 4f 08 f0 	addi %d15,%d15,132
80006f4a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f4e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f50:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f52:	6f 04 05 00 	jz.t %d4,0,80006f5c <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006f56:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f5a:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006f5c:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006f60:	00 90       	ret 

80006f62 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f62:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f66:	91 30 00 ff 	movh.a %a15,61443
80006f6a:	1b bf 08 f0 	addi %d15,%d15,139
80006f6e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f72:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f74:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f76:	6f 04 05 00 	jz.t %d4,0,80006f80 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f7a:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f7e:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f80:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006f84:	00 90       	ret 

80006f86 <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
80006f86:	91 30 00 ff 	movh.a %a15,61443
80006f8a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f8e:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006f92:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f96:	00 90       	ret 

80006f98 <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
80006f98:	91 30 00 ff 	movh.a %a15,61443
80006f9c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fa0:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006fa4:	00 90       	ret 

80006fa6 <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006fa6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006faa:	91 30 00 ff 	movh.a %a15,61443
80006fae:	1b 4f 08 f0 	addi %d15,%d15,132
80006fb2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fb6:	8f 75 00 51 	and %d5,%d5,7
80006fba:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006fbc:	6f 04 08 00 	jz.t %d4,0,80006fcc <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006fc0:	4c f0       	ld.w %d15,[%a15]0
80006fc2:	8f 45 01 50 	sh %d5,%d5,20
80006fc6:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
80006fca:	3c 05       	j 80006fd4 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80006fcc:	4c f0       	ld.w %d15,[%a15]0
80006fce:	06 45       	sh %d5,4
80006fd0:	8f 0f c7 f1 	andn %d15,%d15,112
80006fd4:	a6 f5       	or %d5,%d15
80006fd6:	68 05       	st.w [%a15]0,%d5
80006fd8:	00 90       	ret 

80006fda <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006fda:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006fdc:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006fe0:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80006fe4:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006fe8:	68 04       	st.w [%a15]0,%d4
80006fea:	00 90       	ret 

80006fec <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
80006fec:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80006ff0:	6f 04 04 00 	jz.t %d4,0,80006ff8 <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80006ff4:	1b 05 01 50 	addi %d5,%d5,16
80006ff8:	06 2f       	sh %d15,2
80006ffa:	60 f2       	mov.a %a2,%d15
80006ffc:	d9 2f 00 06 	lea %a15,[%a2]24576
80007000:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80007004:	19 ff 2c 80 	ld.w %d15,[%a15]556
80007008:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
8000700c:	0f 56 00 50 	sh %d5,%d6,%d5
80007010:	a6 f5       	or %d5,%d15
80007012:	59 f5 2c 80 	st.w [%a15]556,%d5
80007016:	00 90       	ret 

80007018 <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80007018:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
8000701c:	91 30 00 ff 	movh.a %a15,61443
80007020:	1b bf 08 f0 	addi %d15,%d15,139
80007024:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007028:	8f 35 00 51 	and %d5,%d5,3
8000702c:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
8000702e:	6f 04 06 00 	jz.t %d4,0,8000703a <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007032:	4c f0       	ld.w %d15,[%a15]0
80007034:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
80007038:	3c 07       	j 80007046 <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
8000703a:	4c f0       	ld.w %d15,[%a15]0
8000703c:	8f e5 00 50 	sh %d5,%d5,14
80007040:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
80007044:	a6 f5       	or %d5,%d15
80007046:	68 05       	st.w [%a15]0,%d5
80007048:	00 90       	ret 

8000704a <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000704a:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000704e:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
80007050:	53 cf 20 f0 	mul %d15,%d15,12
80007054:	60 f2       	mov.a %a2,%d15
80007056:	d9 2f 00 46 	lea %a15,[%a2]24832
8000705a:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
8000705e:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007060:	2e 16       	jz.t %d15,1,8000706c <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007062:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007066:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
8000706a:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
8000706c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007070:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007074:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80007078:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000707a:	4c f0       	ld.w %d15,[%a15]0
8000707c:	6f 0f ff 7f 	jz.t %d15,0,8000707a <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80007080:	00 90       	ret 

80007082 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007082:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007086:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
80007088:	53 cf 20 f0 	mul %d15,%d15,12
8000708c:	60 f2       	mov.a %a2,%d15
8000708e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007092:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80007096:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007098:	2e 16       	jz.t %d15,1,800070a4 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000709a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000709e:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800070a2:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800070a4:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070a8:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
800070ac:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
800070b0:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
800070b2:	4c f0       	ld.w %d15,[%a15]0
800070b4:	6f 0f ff 7f 	jz.t %d15,0,800070b2 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
800070b8:	00 90       	ret 

800070ba <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
800070ba:	91 30 00 ff 	movh.a %a15,61443
800070be:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070c2:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070c4:	2e 16       	jz.t %d15,1,800070d0 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070c6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070ca:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
800070ce:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800070d0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070d4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
800070d8:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
800070dc:	91 30 00 ff 	movh.a %a15,61443
800070e0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070e4:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070e6:	4c f0       	ld.w %d15,[%a15]0
800070e8:	6f 0f ff 7f 	jz.t %d15,0,800070e6 <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
800070ec:	00 90       	ret 

800070ee <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
800070ee:	91 30 00 ff 	movh.a %a15,61443
800070f2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070f6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070f8:	2e 16       	jz.t %d15,1,80007104 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070fa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070fe:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007102:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007104:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007108:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
8000710c:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007110:	91 30 00 ff 	movh.a %a15,61443
80007114:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007118:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
8000711a:	4c f0       	ld.w %d15,[%a15]0
8000711c:	6f 0f ff 7f 	jz.t %d15,0,8000711a <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80007120:	00 90       	ret 

80007122 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007122:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007126:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80007128:	53 cf 20 f0 	mul %d15,%d15,12
8000712c:	06 24       	sh %d4,2
8000712e:	60 f2       	mov.a %a2,%d15
80007130:	d9 2f 00 46 	lea %a15,[%a2]24832
80007134:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007138:	4c f0       	ld.w %d15,[%a15]0
8000713a:	2e 16       	jz.t %d15,1,80007146 <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000713c:	4c f0       	ld.w %d15,[%a15]0
8000713e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007142:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007144:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007146:	4c f0       	ld.w %d15,[%a15]0
80007148:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000714c:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000714e:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007150:	4c f0       	ld.w %d15,[%a15]0
80007152:	6f 0f ff ff 	jnz.t %d15,0,80007150 <IfxScuWdt_clearCpuEndinit+0x2e>
}
80007156:	00 90       	ret 

80007158 <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007158:	91 30 00 ff 	movh.a %a15,61443
8000715c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007160:	4c f0       	ld.w %d15,[%a15]0
80007162:	06 24       	sh %d4,2
80007164:	2e 16       	jz.t %d15,1,80007170 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007166:	4c f0       	ld.w %d15,[%a15]0
80007168:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000716c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000716e:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007170:	91 30 00 ff 	movh.a %a15,61443
80007174:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007178:	4c f0       	ld.w %d15,[%a15]0
8000717a:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000717e:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007180:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007182:	4c f0       	ld.w %d15,[%a15]0
80007184:	6f 0f ff ff 	jnz.t %d15,0,80007182 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80007188:	00 90       	ret 

8000718a <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000718a:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000718e:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80007190:	53 cf 20 f0 	mul %d15,%d15,12
80007194:	06 24       	sh %d4,2
80007196:	60 f2       	mov.a %a2,%d15
80007198:	d9 2f 00 46 	lea %a15,[%a2]24832
8000719c:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071a0:	4c f0       	ld.w %d15,[%a15]0
800071a2:	2e 16       	jz.t %d15,1,800071ae <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071a4:	4c f0       	ld.w %d15,[%a15]0
800071a6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071aa:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071ac:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071ae:	4c f0       	ld.w %d15,[%a15]0
800071b0:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071b4:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071b6:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800071b8:	4c f0       	ld.w %d15,[%a15]0
800071ba:	6f 0f ff ff 	jnz.t %d15,0,800071b8 <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
800071be:	4c f1       	ld.w %d15,[%a15]4
800071c0:	96 08       	or %d15,8
800071c2:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071c4:	4c f0       	ld.w %d15,[%a15]0
800071c6:	2e 16       	jz.t %d15,1,800071d2 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071c8:	4c f0       	ld.w %d15,[%a15]0
800071ca:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071ce:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071d0:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071d2:	4c f0       	ld.w %d15,[%a15]0
800071d4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071d8:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071da:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800071dc:	4c f0       	ld.w %d15,[%a15]0
800071de:	6f 0f ff 7f 	jz.t %d15,0,800071dc <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800071e2:	00 90       	ret 

800071e4 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800071e4:	91 30 00 ff 	movh.a %a15,61443
800071e8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071ec:	4c f0       	ld.w %d15,[%a15]0
800071ee:	06 24       	sh %d4,2
800071f0:	2e 16       	jz.t %d15,1,800071fc <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071f2:	4c f0       	ld.w %d15,[%a15]0
800071f4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800071f8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800071fa:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071fc:	91 30 00 ff 	movh.a %a15,61443
80007200:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007204:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007206:	40 f2       	mov.aa %a2,%a15
80007208:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000720c:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000720e:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007210:	4c 20       	ld.w %d15,[%a2]0
80007212:	91 30 00 ff 	movh.a %a15,61443
80007216:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000721a:	6f 0f fb ff 	jnz.t %d15,0,80007210 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
8000721e:	91 30 00 2f 	movh.a %a2,61443
80007222:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007226:	4c 20       	ld.w %d15,[%a2]0
80007228:	96 08       	or %d15,8
8000722a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000722c:	4c f0       	ld.w %d15,[%a15]0
8000722e:	2e 16       	jz.t %d15,1,8000723a <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007230:	4c f0       	ld.w %d15,[%a15]0
80007232:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007236:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007238:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000723a:	91 30 00 ff 	movh.a %a15,61443
8000723e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007242:	4c f0       	ld.w %d15,[%a15]0
80007244:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007248:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000724a:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000724c:	4c f0       	ld.w %d15,[%a15]0
8000724e:	6f 0f ff 7f 	jz.t %d15,0,8000724c <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007252:	00 90       	ret 

80007254 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007254:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007258:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000725a:	53 cf 20 f0 	mul %d15,%d15,12
8000725e:	06 24       	sh %d4,2
80007260:	60 f2       	mov.a %a2,%d15
80007262:	d9 2f 00 46 	lea %a15,[%a2]24832
80007266:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000726a:	4c f0       	ld.w %d15,[%a15]0
8000726c:	2e 16       	jz.t %d15,1,80007278 <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000726e:	4c f0       	ld.w %d15,[%a15]0
80007270:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007274:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007276:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007278:	4c f0       	ld.w %d15,[%a15]0
8000727a:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000727e:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007280:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007282:	4c f0       	ld.w %d15,[%a15]0
80007284:	6f 0f ff ff 	jnz.t %d15,0,80007282 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
80007288:	4c f1       	ld.w %d15,[%a15]4
8000728a:	8f 8f c0 f1 	andn %d15,%d15,8
8000728e:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007290:	4c f0       	ld.w %d15,[%a15]0
80007292:	2e 16       	jz.t %d15,1,8000729e <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007294:	4c f0       	ld.w %d15,[%a15]0
80007296:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000729a:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000729c:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000729e:	4c f0       	ld.w %d15,[%a15]0
800072a0:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072a4:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072a6:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800072a8:	4c f0       	ld.w %d15,[%a15]0
800072aa:	6f 0f ff 7f 	jz.t %d15,0,800072a8 <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800072ae:	00 90       	ret 

800072b0 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072b0:	91 30 00 ff 	movh.a %a15,61443
800072b4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072b8:	4c f0       	ld.w %d15,[%a15]0
800072ba:	06 24       	sh %d4,2
800072bc:	2e 16       	jz.t %d15,1,800072c8 <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072be:	4c f0       	ld.w %d15,[%a15]0
800072c0:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072c4:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072c6:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072c8:	91 30 00 ff 	movh.a %a15,61443
800072cc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072d0:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072d2:	40 f2       	mov.aa %a2,%a15
800072d4:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072d8:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072da:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072dc:	4c 20       	ld.w %d15,[%a2]0
800072de:	91 30 00 ff 	movh.a %a15,61443
800072e2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072e6:	6f 0f fb ff 	jnz.t %d15,0,800072dc <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
800072ea:	91 30 00 2f 	movh.a %a2,61443
800072ee:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
800072f2:	4c 20       	ld.w %d15,[%a2]0
800072f4:	8f 8f c0 f1 	andn %d15,%d15,8
800072f8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072fa:	4c f0       	ld.w %d15,[%a15]0
800072fc:	2e 16       	jz.t %d15,1,80007308 <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072fe:	4c f0       	ld.w %d15,[%a15]0
80007300:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007304:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007306:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007308:	91 30 00 ff 	movh.a %a15,61443
8000730c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007310:	4c f0       	ld.w %d15,[%a15]0
80007312:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007316:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007318:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000731a:	4c f0       	ld.w %d15,[%a15]0
8000731c:	6f 0f ff 7f 	jz.t %d15,0,8000731a <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007320:	00 90       	ret 

80007322 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007322:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007326:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80007328:	53 cf 20 f0 	mul %d15,%d15,12
8000732c:	60 f2       	mov.a %a2,%d15
8000732e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007332:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007336:	48 02       	ld.w %d2,[%a15]0
80007338:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
8000733c:	8f f2 83 21 	xor %d2,%d2,63
80007340:	00 90       	ret 

80007342 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007342:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007346:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80007348:	53 cf 20 f0 	mul %d15,%d15,12
8000734c:	60 f2       	mov.a %a2,%d15
8000734e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007352:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
80007356:	48 02       	ld.w %d2,[%a15]0
}
80007358:	8f 12 00 21 	and %d2,%d2,1
8000735c:	00 90       	ret 

8000735e <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
8000735e:	91 30 00 ff 	movh.a %a15,61443
80007362:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007366:	48 02       	ld.w %d2,[%a15]0
80007368:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
8000736c:	8f f2 83 21 	xor %d2,%d2,63
80007370:	00 90       	ret 

80007372 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
80007372:	da 3c       	mov %d15,60
80007374:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
80007376:	82 cf       	mov %d15,-4
80007378:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000737a:	82 0f       	mov %d15,0
8000737c:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
8000737e:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007380:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007382:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007384:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
80007386:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
80007388:	2c 4a       	st.b [%a4]10,%d15
8000738a:	00 90       	ret 

8000738c <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000738c:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007390:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80007392:	53 cf 20 f0 	mul %d15,%d15,12
80007396:	06 24       	sh %d4,2
80007398:	60 f2       	mov.a %a2,%d15
8000739a:	d9 2f 00 46 	lea %a15,[%a2]24832
8000739e:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800073a2:	4c f0       	ld.w %d15,[%a15]0
800073a4:	2e 16       	jz.t %d15,1,800073b0 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800073a6:	4c f0       	ld.w %d15,[%a15]0
800073a8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800073ac:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800073ae:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800073b0:	4c f0       	ld.w %d15,[%a15]0
800073b2:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800073b6:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800073b8:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800073ba:	4c f0       	ld.w %d15,[%a15]0
800073bc:	6f 0f ff 7f 	jz.t %d15,0,800073ba <IfxScuWdt_setCpuEndinit+0x2e>
}
800073c0:	00 90       	ret 

800073c2 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800073c2:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800073c4:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800073c6:	6f 12 0b 00 	jz.t %d2,1,800073dc <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800073ca:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800073ce:	37 02 6e 31 	extr.u %d3,%d2,2,14
800073d2:	8f f3 83 31 	xor %d3,%d3,63
800073d6:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800073da:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800073dc:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800073de:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800073e2:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800073e6:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800073ea:	b9 53 02 00 	ld.hu %d3,[%a5]2
800073ee:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800073f2:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800073f4:	54 42       	ld.w %d2,[%a4]
800073f6:	6f 02 ff ff 	jnz.t %d2,0,800073f4 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
800073fa:	39 52 04 00 	ld.bu %d2,[%a5]4
800073fe:	df 12 0a 00 	jeq %d2,1,80007412 <IfxScuWdt_initCpuWatchdog+0x50>
80007402:	76 26       	jz %d2,8000740e <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007404:	8b 22 20 22 	ne %d2,%d2,2
80007408:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
8000740c:	3c 07       	j 8000741a <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
8000740e:	82 0f       	mov %d15,0
        break;
80007410:	3c 05       	j 8000741a <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007412:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
80007416:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
8000741a:	39 52 05 00 	ld.bu %d2,[%a5]5
8000741e:	8b 02 20 22 	ne %d2,%d2,0
80007422:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
80007426:	39 52 06 00 	ld.bu %d2,[%a5]6
8000742a:	8b 02 20 22 	ne %d2,%d2,0
8000742e:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
80007432:	39 52 07 00 	ld.bu %d2,[%a5]7
80007436:	8b 02 20 22 	ne %d2,%d2,0
8000743a:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
8000743e:	39 52 08 00 	ld.bu %d2,[%a5]8
80007442:	8b 02 20 22 	ne %d2,%d2,0
80007446:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
8000744a:	39 52 09 00 	ld.bu %d2,[%a5]9
8000744e:	8b 02 20 22 	ne %d2,%d2,0
80007452:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
80007456:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
80007458:	b9 54 00 00 	ld.hu %d4,[%a5]0
8000745c:	1d ff 98 ff 	j 8000738c <IfxScuWdt_setCpuEndinit>

80007460 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
80007460:	1d ff 96 ff 	j 8000738c <IfxScuWdt_setCpuEndinit>

80007464 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007464:	91 30 00 ff 	movh.a %a15,61443
80007468:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000746c:	4c f0       	ld.w %d15,[%a15]0
8000746e:	06 24       	sh %d4,2
80007470:	2e 16       	jz.t %d15,1,8000747c <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007472:	4c f0       	ld.w %d15,[%a15]0
80007474:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007478:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000747a:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000747c:	91 30 00 ff 	movh.a %a15,61443
80007480:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007484:	4c f0       	ld.w %d15,[%a15]0
80007486:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000748a:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000748c:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000748e:	4c f0       	ld.w %d15,[%a15]0
80007490:	6f 0f ff 7f 	jz.t %d15,0,8000748e <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007494:	00 90       	ret 

80007496 <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
80007496:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
80007498:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
8000749a:	6f 12 0b 00 	jz.t %d2,1,800074b0 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000749e:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800074a2:	37 02 6e 31 	extr.u %d3,%d2,2,14
800074a6:	8f f3 83 31 	xor %d3,%d3,63
800074aa:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800074ae:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800074b0:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800074b2:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800074b6:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800074ba:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800074be:	b9 53 02 00 	ld.hu %d3,[%a5]2
800074c2:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800074c6:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800074c8:	54 42       	ld.w %d2,[%a4]
800074ca:	6f 02 ff ff 	jnz.t %d2,0,800074c8 <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
800074ce:	39 52 04 00 	ld.bu %d2,[%a5]4
800074d2:	df 12 0a 00 	jeq %d2,1,800074e6 <IfxScuWdt_initSafetyWatchdog+0x50>
800074d6:	76 26       	jz %d2,800074e2 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
800074d8:	8b 22 20 22 	ne %d2,%d2,2
800074dc:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800074e0:	3c 07       	j 800074ee <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
800074e2:	82 0f       	mov %d15,0
        break;
800074e4:	3c 05       	j 800074ee <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800074e6:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
800074ea:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
800074ee:	39 52 05 00 	ld.bu %d2,[%a5]5
800074f2:	8b 02 20 22 	ne %d2,%d2,0
800074f6:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
800074fa:	39 52 06 00 	ld.bu %d2,[%a5]6
800074fe:	8b 02 20 22 	ne %d2,%d2,0
80007502:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
80007506:	39 52 07 00 	ld.bu %d2,[%a5]7
8000750a:	8b 02 20 22 	ne %d2,%d2,0
8000750e:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
80007512:	39 52 08 00 	ld.bu %d2,[%a5]8
80007516:	8b 02 20 22 	ne %d2,%d2,0
8000751a:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
8000751e:	39 52 09 00 	ld.bu %d2,[%a5]9
80007522:	8b 02 20 22 	ne %d2,%d2,0
80007526:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
8000752a:	39 52 0a 00 	ld.bu %d2,[%a5]10
8000752e:	8b 02 00 22 	eq %d2,%d2,0
80007532:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
80007536:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
80007538:	b9 54 00 00 	ld.hu %d4,[%a5]0
8000753c:	1d ff 94 ff 	j 80007464 <IfxScuWdt_setSafetyEndinit>

80007540 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
80007540:	1d ff 92 ff 	j 80007464 <IfxScuWdt_setSafetyEndinit>

80007544 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
80007544:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
80007548:	2e 07       	jz.t %d15,0,80007556 <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
8000754a:	3b 00 00 f3 	mov %d15,12288
8000754e:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
80007552:	82 0f       	mov %d15,0
80007554:	3c 11       	j 80007576 <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
80007556:	3b 10 0a 20 	mov %d2,161
8000755a:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
8000755e:	da 5e       	mov %d15,94
80007560:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
80007564:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
80007568:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
8000756c:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
80007570:	6f 0f ed ff 	jnz.t %d15,0,8000754a <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
80007574:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
80007576:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000757a:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
8000757e:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007582:	00 90       	ret 

80007584 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007584:	0c 48       	ld.bu %d15,[%a4]8
80007586:	d4 4c       	ld.a %a12,[%a4]
80007588:	1b 0f 01 f0 	addi %d15,%d15,16
8000758c:	16 ff       	and %d15,255
8000758e:	99 4d 04 00 	ld.a %a13,[%a4]4
80007592:	02 f4       	mov %d4,%d15
80007594:	40 c4       	mov.aa %a4,%a12
80007596:	6d ff 91 e8 	call 800046b8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
8000759a:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
8000759c:	40 c4       	mov.aa %a4,%a12
8000759e:	8f 32 c0 21 	andn %d2,%d2,3
800075a2:	74 d2       	st.w [%a13],%d2
800075a4:	02 f4       	mov %d4,%d15
800075a6:	1d ff 6d e8 	j 80004680 <IfxVadc_disableAccess>

800075aa <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
800075aa:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800075ac:	6d ff bb fe 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800075b0:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800075b2:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800075b4:	6d ff b7 fd 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
800075b8:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
800075ba:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
800075bc:	8f 12 40 21 	or %d2,%d2,1
800075c0:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
800075c2:	1d ff e5 fe 	j 8000738c <IfxScuWdt_setCpuEndinit>

800075c6 <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
800075c6:	99 42 04 00 	ld.a %a2,[%a4]4
800075ca:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
800075ce:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
800075d2:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
800075d6:	1b 02 06 f0 	addi %d15,%d2,96
800075da:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
800075dc:	e9 52 0c 00 	st.b [%a5]12,%d2
800075e0:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800075e2:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800075e4:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800075e8:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800075ea:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
800075ee:	37 0f e1 35 	extr.u %d3,%d15,11,1
800075f2:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
800075f6:	37 0f 64 38 	extr.u %d3,%d15,16,4
800075fa:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
800075fe:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007602:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007604:	37 0f 62 32 	extr.u %d3,%d15,4,2
80007608:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
8000760c:	37 0f 62 33 	extr.u %d3,%d15,6,2
80007610:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007614:	37 0f 64 36 	extr.u %d3,%d15,12,4
80007618:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
8000761c:	37 0f 62 34 	extr.u %d3,%d15,8,2
80007620:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007624:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007628:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
8000762c:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007630:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
80007632:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007634:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
80007638:	8f 12 80 21 	xor %d2,%d2,1
8000763c:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007640:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007644:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
80007648:	19 d2 20 40 	ld.w %d2,[%a13]288
8000764c:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000764e:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007652:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
80007656:	0b 8f 10 48 	mov %e4,%d15,%d8
8000765a:	6d ff 60 e9 	call 8000491a <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
8000765e:	54 22       	ld.w %d2,[%a2]
80007660:	6f a2 0a 00 	jz.t %d2,10,80007674 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
80007664:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
80007666:	4c 20       	ld.w %d15,[%a2]0
80007668:	16 ff       	and %d15,255
8000766a:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
8000766c:	4c 20       	ld.w %d15,[%a2]0
8000766e:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007672:	3c 05       	j 8000767c <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
80007674:	82 0f       	mov %d15,0
80007676:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
80007678:	82 0f       	mov %d15,0
8000767a:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
8000767c:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
8000767e:	0c ff       	ld.bu %d15,[%a15]15
80007680:	79 c2 00 00 	ld.b %d2,[%a12]0
80007684:	ff 8f 08 80 	jge.u %d15,8,80007694 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
80007688:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
8000768c:	06 22       	sh %d2,2
8000768e:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
80007692:	3c 08       	j 800076a2 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
80007694:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
80007696:	19 d3 34 40 	ld.w %d3,[%a13]308
8000769a:	8f 2f 00 20 	sh %d2,%d15,2
8000769e:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
800076a2:	16 ff       	and %d15,255
800076a4:	0b 8f 10 48 	mov %e4,%d15,%d8
800076a8:	6d ff 39 e9 	call 8000491a <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800076ac:	54 22       	ld.w %d2,[%a2]
800076ae:	6f a2 0a 00 	jz.t %d2,10,800076c2 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
800076b2:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
800076b4:	4c 20       	ld.w %d15,[%a2]0
800076b6:	16 ff       	and %d15,255
800076b8:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
800076ba:	4c 20       	ld.w %d15,[%a2]0
800076bc:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800076c0:	3c 05       	j 800076ca <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
800076c2:	82 0f       	mov %d15,0
800076c4:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
800076c6:	82 0f       	mov %d15,0
800076c8:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
800076ca:	28 8f       	st.b [%a15]8,%d15
800076cc:	00 90       	ret 

800076ce <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076ce:	cc 41       	ld.a %a15,[%a4]4
800076d0:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
800076d2:	79 4f 00 00 	ld.b %d15,[%a4]0
800076d6:	08 8a       	ld.bu %d10,[%a15]8
800076d8:	c8 0f       	ld.a %a15,[%a15]0
800076da:	1b 0f 06 f0 	addi %d15,%d15,96
800076de:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800076e0:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076e2:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800076e4:	02 49       	mov %d9,%d4
800076e6:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076e8:	6d ff 9a e8 	call 8000481c <IfxVadc_getAdcAnalogFrequency>
800076ec:	02 2f       	mov %d15,%d2
800076ee:	6d ff b0 e8 	call 8000484e <IfxVadc_getAdcModuleFrequency>
800076f2:	8f 38 00 81 	and %d8,%d8,3
800076f6:	74 a9       	st.w [%sp],%d9
800076f8:	40 f4       	mov.aa %a4,%a15
800076fa:	0b a8 10 48 	mov %e4,%d8,%d10
800076fe:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007702:	1d ff c1 e9 	j 80004a84 <IfxVadc_getChannelConversionTime>

80007706 <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
80007706:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007708:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000770a:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
8000770e:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007710:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007712:	6d ff 85 e8 	call 8000481c <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
80007716:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
80007718:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
8000771a:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
8000771c:	4c c0       	ld.w %d15,[%a12]0
8000771e:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007722:	e9 ff 32 00 	st.b [%a15]50,%d15
80007726:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
80007728:	1b 8f 00 30 	addi %d3,%d15,8
8000772c:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
80007730:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007732:	54 23       	ld.w %d3,[%a2]
80007734:	37 03 63 34 	extr.u %d3,%d3,8,3
80007738:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
8000773c:	54 23       	ld.w %d3,[%a2]
8000773e:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
80007742:	8b 13 61 42 	lt.u %d4,%d3,17
80007746:	f6 44       	jnz %d4,8000774e <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
80007748:	1b 13 ff 3f 	addi %d3,%d3,-15
8000774c:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
8000774e:	c2 23       	add %d3,2
80007750:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
80007754:	92 14       	add %d4,%d15,1
80007756:	4b 23 51 30 	div.f %d3,%d3,%d2
8000775a:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
8000775e:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007760:	1e 13       	jeq %d15,1,80007766 <IfxVadc_Adc_getGroupConfig+0x60>
80007762:	82 1f       	mov %d15,1
80007764:	3c e2       	j 80007728 <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
80007766:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
8000776a:	ef 92 33 00 	jz.t %d2,25,800077d0 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
8000776e:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
80007772:	19 c2 04 00 	ld.w %d2,[%a12]4
80007776:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000777a:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
8000777e:	19 c2 04 00 	ld.w %d2,[%a12]4
80007782:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
80007786:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
8000778a:	19 c3 20 20 	ld.w %d3,[%a12]160
8000778e:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
80007792:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
80007796:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000779a:	8b f3 00 32 	eq %d3,%d3,15
8000779e:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
800077a2:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077a6:	f6 35       	jnz %d3,800077b0 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
800077a8:	19 cf 24 20 	ld.w %d15,[%a12]164
800077ac:	16 03       	and %d15,3
800077ae:	3c 02       	j 800077b2 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800077b0:	76 23       	jz %d2,800077b6 <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800077b2:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
800077b6:	19 cf 20 20 	ld.w %d15,[%a12]160
800077ba:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
800077be:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
800077c2:	19 cf 24 20 	ld.w %d15,[%a12]164
800077c6:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
800077ca:	e9 ff 18 00 	st.b [%a15]24,%d15
800077ce:	3c 0c       	j 800077e6 <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
800077d0:	82 0f       	mov %d15,0
800077d2:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800077d6:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
800077da:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800077de:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
800077e2:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
800077e6:	4c c1       	ld.w %d15,[%a12]4
800077e8:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
800077ec:	df 1f 30 80 	jne %d15,1,8000784c <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
800077f0:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
800077f4:	19 c2 04 00 	ld.w %d2,[%a12]4
800077f8:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
800077fc:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
80007800:	19 c2 04 00 	ld.w %d2,[%a12]4
80007804:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
80007808:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
8000780c:	19 c3 00 20 	ld.w %d3,[%a12]128
80007810:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007814:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
80007818:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000781c:	8b f3 00 32 	eq %d3,%d3,15
80007820:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
80007824:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007828:	f6 35       	jnz %d3,80007832 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
8000782a:	19 cf 04 20 	ld.w %d15,[%a12]132
8000782e:	16 03       	and %d15,3
80007830:	3c 02       	j 80007834 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007832:	76 23       	jz %d2,80007838 <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007834:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
80007838:	19 cf 00 20 	ld.w %d15,[%a12]128
8000783c:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
80007840:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
80007844:	82 0f       	mov %d15,0
80007846:	e9 ff 20 00 	st.b [%a15]32,%d15
8000784a:	3c 0c       	j 80007862 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
8000784c:	82 0f       	mov %d15,0
8000784e:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007852:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
80007856:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000785a:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
8000785e:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
80007862:	4c c1       	ld.w %d15,[%a12]4
80007864:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
80007868:	df 1f 33 80 	jne %d15,1,800078ce <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
8000786c:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
80007870:	19 c2 04 00 	ld.w %d2,[%a12]4
80007874:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
80007878:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
8000787c:	19 c2 04 00 	ld.w %d2,[%a12]4
80007880:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007884:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
80007888:	19 d3 00 80 	ld.w %d3,[%a13]512
8000788c:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
80007890:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
80007894:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007898:	8b f3 00 32 	eq %d3,%d3,15
8000789c:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
800078a0:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078a4:	f6 35       	jnz %d3,800078ae <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
800078a6:	19 df 04 80 	ld.w %d15,[%a13]516
800078aa:	16 03       	and %d15,3
800078ac:	3c 02       	j 800078b0 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800078ae:	76 23       	jz %d2,800078b4 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800078b0:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
800078b4:	19 df 00 80 	ld.w %d15,[%a13]512
800078b8:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
800078bc:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
800078c0:	19 df 04 80 	ld.w %d15,[%a13]516
800078c4:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
800078c8:	e9 ff 28 00 	st.b [%a15]40,%d15
800078cc:	3c 0c       	j 800078e4 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
800078ce:	82 0f       	mov %d15,0
800078d0:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800078d4:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
800078d8:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800078dc:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
800078e0:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
800078e4:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
800078e8:	39 e7 08 00 	ld.bu %d7,[%a14]8
800078ec:	8f 33 00 31 	and %d3,%d3,3
800078f0:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
800078f2:	df 03 1f 00 	jeq %d3,0,80007930 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
800078f6:	7b 00 00 58 	movh %d5,32768
800078fa:	1b 85 d3 50 	addi %d5,%d5,3384
800078fe:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007902:	8b 47 60 42 	lt.u %d4,%d7,4
80007906:	82 02       	mov %d2,0
80007908:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
8000790c:	1a 25       	add %d15,%d5,%d2
8000790e:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007910:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007912:	a0 32       	mov.a %a2,3
80007914:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
80007918:	8f f4 0f 61 	and %d6,%d4,255
8000791c:	14 35       	ld.bu %d5,[%a3]
8000791e:	5f 35 06 80 	jne %d5,%d3,8000792a <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007922:	42 62       	add %d2,%d6
80007924:	8f f2 0f 21 	and %d2,%d2,255
80007928:	3c 04       	j 80007930 <IfxVadc_Adc_getGroupConfig+0x22a>
8000792a:	c2 14       	add %d4,1
8000792c:	fc 24       	loop %a2,80007914 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000792e:	02 72       	mov %d2,%d7
80007930:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
80007932:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
80007936:	1b 07 01 f0 	addi %d15,%d7,16
8000793a:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
8000793e:	e9 ff 30 00 	st.b [%a15]48,%d15
80007942:	00 90       	ret 

80007944 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80007944:	99 52 14 00 	ld.a %a2,[%a5]20
80007948:	d4 2e       	ld.a %a14,[%a2]
8000794a:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
8000794e:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80007952:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007956:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80007958:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000795a:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
8000795c:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
8000795e:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007962:	6d ff ab e6 	call 800046b8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
80007966:	1b 09 06 20 	addi %d2,%d9,96
8000796a:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
8000796e:	0c fe       	ld.bu %d15,[%a15]14
80007970:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007972:	40 e4       	mov.aa %a4,%a14
80007974:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
80007978:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
8000797a:	54 22       	ld.w %d2,[%a2]
8000797c:	0c ff       	ld.bu %d15,[%a15]15
8000797e:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007982:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80007984:	54 22       	ld.w %d2,[%a2]
80007986:	39 ff 10 00 	ld.bu %d15,[%a15]16
8000798a:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
8000798e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80007990:	54 22       	ld.w %d2,[%a2]
80007992:	39 ff 11 00 	ld.bu %d15,[%a15]17
80007996:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000799a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
8000799c:	54 22       	ld.w %d2,[%a2]
8000799e:	0c f1       	ld.bu %d15,[%a15]1
800079a0:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
800079a4:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
800079a6:	54 22       	ld.w %d2,[%a2]
800079a8:	0c fd       	ld.bu %d15,[%a15]13
800079aa:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
800079ae:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
800079b0:	54 22       	ld.w %d2,[%a2]
800079b2:	39 ff 13 00 	ld.bu %d15,[%a15]19
800079b6:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
800079ba:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
800079bc:	54 22       	ld.w %d2,[%a2]
800079be:	0c f3       	ld.bu %d15,[%a15]3
800079c0:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
800079c4:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
800079c6:	54 22       	ld.w %d2,[%a2]
800079c8:	0c f0       	ld.bu %d15,[%a15]0
800079ca:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
800079ce:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
800079d0:	54 22       	ld.w %d2,[%a2]
800079d2:	39 ff 12 00 	ld.bu %d15,[%a15]18
800079d6:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
800079da:	6c 20       	st.w [%a2]0,%d15
800079dc:	1b 08 01 f0 	addi %d15,%d8,16
800079e0:	16 ff       	and %d15,255
800079e2:	02 f4       	mov %d4,%d15
800079e4:	6d ff 6a e6 	call 800046b8 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
800079e8:	08 23       	ld.bu %d3,[%a15]2
800079ea:	82 12       	mov %d2,1
800079ec:	0f 92 00 20 	sh %d2,%d2,%d9
800079f0:	f6 35       	jnz %d3,800079fa <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
800079f2:	19 c3 08 00 	ld.w %d3,[%a12]8
800079f6:	a6 32       	or %d2,%d3
800079f8:	3c 05       	j 80007a02 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
800079fa:	19 c3 08 00 	ld.w %d3,[%a12]8
800079fe:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a02:	02 f4       	mov %d4,%d15
80007a04:	59 c2 08 00 	st.w [%a12]8,%d2
80007a08:	40 e4       	mov.aa %a4,%a14
80007a0a:	6d ff 3b e6 	call 80004680 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80007a0e:	79 d3 00 00 	ld.b %d3,[%a13]0
80007a12:	19 c5 20 40 	ld.w %d5,[%a12]288
80007a16:	8f 23 00 f0 	sh %d15,%d3,2
80007a1a:	3b f0 00 20 	mov %d2,15
80007a1e:	0f f2 00 20 	sh %d2,%d2,%d15
80007a22:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007a26:	08 b4       	ld.bu %d4,[%a15]11
80007a28:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007a2c:	19 c2 20 40 	ld.w %d2,[%a12]288
80007a30:	0f f4 00 f0 	sh %d15,%d4,%d15
80007a34:	a6 2f       	or %d15,%d2
80007a36:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007a3a:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007a3e:	6e 1f       	jz %d15,80007a7c <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007a40:	02 84       	mov %d4,%d8
80007a42:	08 b5       	ld.bu %d5,[%a15]11
80007a44:	6d ff 6b e7 	call 8000491a <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007a48:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007a4c:	82 1f       	mov %d15,1
80007a4e:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007a52:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007a56:	54 22       	ld.w %d2,[%a2]
80007a58:	08 63       	ld.bu %d3,[%a15]6
80007a5a:	8f f2 cf 21 	andn %d2,%d2,255
80007a5e:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007a60:	0c f9       	ld.bu %d15,[%a15]9
80007a62:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007a64:	54 22       	ld.w %d2,[%a2]
80007a66:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007a6a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007a6c:	4c 20       	ld.w %d15,[%a2]0
80007a6e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007a72:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007a74:	4c 20       	ld.w %d15,[%a2]0
80007a76:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007a7a:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007a7c:	0c ff       	ld.bu %d15,[%a15]15
80007a7e:	08 a2       	ld.bu %d2,[%a15]10
80007a80:	ff 8f 15 80 	jge.u %d15,8,80007aaa <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80007a84:	19 c4 30 40 	ld.w %d4,[%a12]304
80007a88:	06 2f       	sh %d15,2
80007a8a:	3b f0 00 30 	mov %d3,15
80007a8e:	0f f3 00 30 	sh %d3,%d3,%d15
80007a92:	0f 34 e0 30 	andn %d3,%d4,%d3
80007a96:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007a9a:	19 c3 30 40 	ld.w %d3,[%a12]304
80007a9e:	0f f2 00 f0 	sh %d15,%d2,%d15
80007aa2:	a6 3f       	or %d15,%d3
80007aa4:	59 cf 30 40 	st.w [%a12]304,%d15
80007aa8:	3c 14       	j 80007ad0 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007aaa:	c2 8f       	add %d15,-8
80007aac:	19 c4 34 40 	ld.w %d4,[%a12]308
80007ab0:	06 2f       	sh %d15,2
80007ab2:	3b f0 00 30 	mov %d3,15
80007ab6:	0f f3 00 30 	sh %d3,%d3,%d15
80007aba:	0f 34 e0 30 	andn %d3,%d4,%d3
80007abe:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007ac2:	19 c3 34 40 	ld.w %d3,[%a12]308
80007ac6:	0f f2 00 f0 	sh %d15,%d2,%d15
80007aca:	a6 3f       	or %d15,%d3
80007acc:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80007ad0:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007ad4:	6e 24       	jz %d15,80007b1c <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007ad6:	02 84       	mov %d4,%d8
80007ad8:	08 a5       	ld.bu %d5,[%a15]10
80007ada:	6d ff 20 e7 	call 8000491a <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80007ade:	0c ff       	ld.bu %d15,[%a15]15
80007ae0:	1b 0f 08 f0 	addi %d15,%d15,128
80007ae4:	90 c3       	addsc.a %a3,%a12,%d15,2
80007ae6:	4c 30       	ld.w %d15,[%a3]0
80007ae8:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007aec:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
80007aee:	bb f0 ff ff 	mov.u %d15,65535
80007af2:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007af6:	54 22       	ld.w %d2,[%a2]
80007af8:	08 43       	ld.bu %d3,[%a15]4
80007afa:	8f f2 cf 21 	andn %d2,%d2,255
80007afe:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007b00:	0c f8       	ld.bu %d15,[%a15]8
80007b02:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b04:	54 22       	ld.w %d2,[%a2]
80007b06:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b0a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007b0c:	4c 20       	ld.w %d15,[%a2]0
80007b0e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b12:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007b14:	4c 20       	ld.w %d15,[%a2]0
80007b16:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b1a:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007b1c:	40 e4       	mov.aa %a4,%a14
80007b1e:	02 84       	mov %d4,%d8
80007b20:	6d ff b0 e5 	call 80004680 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b24:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007b26:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b28:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007b2a:	0c fc       	ld.bu %d15,[%a15]12
80007b2c:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007b2e:	00 90       	ret 

80007b30 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007b30:	40 42       	mov.aa %a2,%a4
80007b32:	d2 02       	mov %e2,0
80007b34:	89 22 48 01 	st.d [%a2+]8,%e2
80007b38:	89 22 48 01 	st.d [%a2+]8,%e2
80007b3c:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007b40:	b5 45 14 00 	st.a [%a4]20,%a5
80007b44:	00 90       	ret 

80007b46 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007b46:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b48:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007b4c:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b4e:	8f a8 00 90 	sh %d9,%d8,10
80007b52:	1b 09 48 f0 	addi %d15,%d9,1152
80007b56:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
80007b58:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
80007b5a:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007b5e:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007b60:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b64:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80007b66:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b68:	6d ff 5a e6 	call 8000481c <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007b6c:	1b 08 01 f0 	addi %d15,%d8,16
80007b70:	8f ff 0f a1 	and %d10,%d15,255
80007b74:	40 c4       	mov.aa %a4,%a12
80007b76:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b78:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007b7a:	6d ff 9f e5 	call 800046b8 <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b7e:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b82:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b84:	5e 17       	jne %d15,1,80007b92 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b86:	82 14       	mov %d4,1
80007b88:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007b8c:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007b90:	3c 03       	j 80007b96 <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80007b92:	d2 04       	mov %e4,0
80007b94:	82 06       	mov %d6,0
80007b96:	82 07       	mov %d7,0
80007b98:	6d ff 06 e8 	call 80004ba4 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007b9c:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007ba0:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007ba2:	5e 17       	jne %d15,1,80007bb0 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007ba4:	82 14       	mov %d4,1
80007ba6:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007baa:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007bae:	3c 03       	j 80007bb4 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80007bb0:	d2 04       	mov %e4,0
80007bb2:	82 06       	mov %d6,0
80007bb4:	82 17       	mov %d7,1
80007bb6:	6d ff f7 e7 	call 80004ba4 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bba:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007bbe:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bc0:	5e 17       	jne %d15,1,80007bce <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007bc2:	82 14       	mov %d4,1
80007bc4:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007bc8:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007bcc:	3c 03       	j 80007bd2 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007bce:	d2 04       	mov %e4,0
80007bd0:	82 06       	mov %d6,0
80007bd2:	82 27       	mov %d7,2
80007bd4:	6d ff e8 e7 	call 80004ba4 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007bd8:	0c f5       	ld.bu %d15,[%a15]5
80007bda:	be 8b       	jeq %d15,%d8,80007c10 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007bdc:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007be0:	91 00 00 28 	movh.a %a2,32768
80007be4:	d9 22 f8 40 	lea %a2,[%a2]3384 <80000d38 <IfxVadc_Adc_masterIndex>>
80007be8:	10 22       	addsc.a %a2,%a2,%d15,0
80007bea:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007bec:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007bf0:	8f 3f 00 21 	and %d2,%d15,3
80007bf4:	19 23 40 30 	ld.w %d3,[%a2]1216
80007bf8:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007bfc:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c00:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c04:	da 08       	mov %d15,8
80007c06:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c0a:	a6 3f       	or %d15,%d3
80007c0c:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007c10:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c14:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007c18:	8f 3f c0 f1 	andn %d15,%d15,3
80007c1c:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007c20:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007c24:	19 22 40 20 	ld.w %d2,[%a2]1152
80007c28:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007c2c:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c30:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007c34:	df 1f 5a 80 	jne %d15,1,80007ce8 <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007c38:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007c3c:	6e 28       	jz %d15,80007c8c <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007c3e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c42:	96 04       	or %d15,4
80007c44:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007c48:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007c4c:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007c50:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007c54:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007c58:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007c5c:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007c60:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007c64:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007c68:	8b ff 20 f2 	ne %d15,%d15,15
80007c6c:	ee 16       	jnz %d15,80007c98 <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007c6e:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007c72:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007c76:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007c7a:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007c7e:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007c82:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c86:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007c8a:	3c 05       	j 80007c94 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007c8c:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c90:	8f 4f c0 f1 	andn %d15,%d15,4
80007c94:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007c98:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007c9c:	8b ff 00 f2 	eq %d15,%d15,15
80007ca0:	ee 15       	jnz %d15,80007cca <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007ca2:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007ca6:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007caa:	19 23 40 40 	ld.w %d3,[%a2]1280
80007cae:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007cb2:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007cb6:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007cba:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007cbe:	19 22 44 40 	ld.w %d2,[%a2]1284
80007cc2:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007cc6:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007cca:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007cce:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007cd2:	3b 00 40 f0 	mov %d15,1024
80007cd6:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007cda:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007cde:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007ce2:	a6 2f       	or %d15,%d2
80007ce4:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007ce8:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007cec:	df 1f 5a 80 	jne %d15,1,80007da0 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007cf0:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007cf4:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007cf8:	6e 28       	jz %d15,80007d48 <IfxVadc_Adc_initGroup+0x202>
80007cfa:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007cfe:	96 04       	or %d15,4
80007d00:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007d04:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007d08:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007d0c:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007d10:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007d14:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007d18:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007d1c:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007d20:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d24:	8b ff 20 f2 	ne %d15,%d15,15
80007d28:	ee 16       	jnz %d15,80007d54 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007d2a:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d2e:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007d32:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d36:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d3a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d3e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d42:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d46:	3c 05       	j 80007d50 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007d48:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d4c:	8f 4f c0 f1 	andn %d15,%d15,4
80007d50:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007d54:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d58:	8b ff 00 f2 	eq %d15,%d15,15
80007d5c:	ee 15       	jnz %d15,80007d86 <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007d5e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007d62:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007d66:	19 23 60 40 	ld.w %d3,[%a2]1312
80007d6a:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007d6e:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d72:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d76:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d7a:	19 22 64 40 	ld.w %d2,[%a2]1316
80007d7e:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d82:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007d86:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007d8a:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d8e:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007d92:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d96:	8f 0f c1 f1 	andn %d15,%d15,16
80007d9a:	a6 2f       	or %d15,%d2
80007d9c:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007da0:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007da4:	df 1f 4f 80 	jne %d15,1,80007e42 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007da8:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007dac:	6e 29       	jz %d15,80007dfe <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007dae:	19 cf 04 80 	ld.w %d15,[%a12]516
80007db2:	96 04       	or %d15,4
80007db4:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007db8:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007dbc:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007dc0:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007dc4:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007dc8:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007dcc:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007dd0:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007dd4:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007dd8:	8b ff 20 f2 	ne %d15,%d15,15
80007ddc:	ee 11       	jnz %d15,80007dfe <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007dde:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007de2:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007de6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007dea:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007dee:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007df2:	19 cf 04 80 	ld.w %d15,[%a12]516
80007df6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007dfa:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007dfe:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e02:	8b ff 00 f2 	eq %d15,%d15,15
80007e06:	ee 13       	jnz %d15,80007e2c <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e08:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007e0c:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e10:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e14:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007e18:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007e1c:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e20:	19 c2 04 80 	ld.w %d2,[%a12]516
80007e24:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e28:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007e2c:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007e30:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e34:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e38:	8f 0f c1 f1 	andn %d15,%d15,16
80007e3c:	a6 2f       	or %d15,%d2
80007e3e:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007e42:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007e44:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007e48:	3a 8f       	eq %d15,%d15,%d8
80007e4a:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007e4e:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007e52:	02 84       	mov %d4,%d8
80007e54:	8f 3f c0 f1 	andn %d15,%d15,3
80007e58:	a6 2f       	or %d15,%d2
80007e5a:	59 2f 40 20 	st.w [%a2]1152,%d15
80007e5e:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007e62:	40 c4       	mov.aa %a4,%a12
80007e64:	6d ff 69 e4 	call 80004736 <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007e68:	8f 88 00 80 	sh %d8,%d8,8
80007e6c:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007e6e:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007e72:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007e76:	0b 58 00 20 	add %d2,%d8,%d5
80007e7a:	1b 82 12 20 	addi %d2,%d2,296
80007e7e:	0c 2c       	ld.bu %d15,[%a2]12
80007e80:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007e84:	54 22       	ld.w %d2,[%a2]
80007e86:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007e8a:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007e8c:	9a 15       	add %d15,%d5,1
80007e8e:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007e90:	54 23       	ld.w %d3,[%a2]
80007e92:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007e96:	4b 03 71 31 	ftouz %d3,%d3
80007e9a:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007e9c:	8b 03 62 f2 	lt.u %d15,%d3,32
80007ea0:	ee 04       	jnz %d15,80007ea8 <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007ea2:	06 c3       	sh %d3,-4
80007ea4:	1b f3 00 30 	addi %d3,%d3,15
80007ea8:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007eac:	1a 58       	add %d15,%d8,%d5
80007eae:	1b 8f 12 f0 	addi %d15,%d15,296
80007eb2:	90 c2       	addsc.a %a2,%a12,%d15,2
80007eb4:	4c 20       	ld.w %d15,[%a2]0
80007eb6:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007eba:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007ebc:	df 15 04 00 	jeq %d5,1,80007ec4 <IfxVadc_Adc_initGroup+0x37e>
80007ec0:	82 15       	mov %d5,1
80007ec2:	3c d8       	j 80007e72 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007ec4:	40 c4       	mov.aa %a4,%a12
80007ec6:	02 a4       	mov %d4,%d10
80007ec8:	6d ff dc e3 	call 80004680 <IfxVadc_disableAccess>

    return status;
}
80007ecc:	82 02       	mov %d2,0
80007ece:	00 90       	ret 

80007ed0 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007ed0:	40 42       	mov.aa %a2,%a4
80007ed2:	7b 60 58 f3 	movh %d15,13702
80007ed6:	d2 02       	mov %e2,0
80007ed8:	a0 6f       	mov.a %a15,6
80007eda:	89 22 48 01 	st.d [%a2+]8,%e2
80007ede:	fc fe       	loop %a15,80007eda <IfxVadc_Adc_initGroupConfig+0xa>
80007ee0:	1b df 7b f3 	addi %d15,%d15,14269
80007ee4:	6c 42       	st.w [%a4]8,%d15
80007ee6:	6c 44       	st.w [%a4]16,%d15
80007ee8:	82 1f       	mov %d15,1
80007eea:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007eee:	e9 4f 20 00 	st.b [%a4]32,%d15
80007ef2:	e9 4f 26 00 	st.b [%a4]38,%d15
80007ef6:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007efa:	f4 45       	st.a [%a4],%a5
80007efc:	00 90       	ret 

80007efe <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007efe:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007f00:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f02:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f04:	6d ff 0f fa 	call 80007322 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f08:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f0a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007f0c:	6d ff 0b f9 	call 80007122 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007f10:	82 02       	mov %d2,0
80007f12:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007f14:	02 f4       	mov %d4,%d15
80007f16:	6d ff 3b fa 	call 8000738c <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007f1a:	40 f4       	mov.aa %a4,%a15
80007f1c:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007f20:	6d ff 30 e6 	call 80004b80 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f24:	19 c4 18 00 	ld.w %d4,[%a12]24
80007f28:	40 f4       	mov.aa %a4,%a15
80007f2a:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007f2e:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f30:	6d ff 42 e5 	call 800049b4 <IfxVadc_initializeFAdcI>
80007f34:	df 02 57 00 	jeq %d2,0,80007fe2 <IfxVadc_Adc_initModule+0xe4>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007f38:	19 c4 14 00 	ld.w %d4,[%a12]20
80007f3c:	40 f4       	mov.aa %a4,%a15
80007f3e:	4b 04 71 41 	ftouz %d4,%d4
80007f42:	6d ff 24 e5 	call 8000498a <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007f46:	40 f4       	mov.aa %a4,%a15
80007f48:	6d ff 6a e4 	call 8000481c <IfxVadc_getAdcAnalogFrequency>
80007f4c:	82 03       	mov %d3,0
80007f4e:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007f52:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007f54:	1b 83 02 40 	addi %d4,%d3,40
80007f58:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007f5a:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007f5e:	0c 20       	ld.bu %d15,[%a2]0
80007f60:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007f62:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007f66:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007f6a:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007f6c:	4c 21       	ld.w %d15,[%a2]4
80007f6e:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007f72:	4b 0f 71 f1 	ftouz %d15,%d15
80007f76:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007f78:	8b 0f 62 52 	lt.u %d5,%d15,32
80007f7c:	f6 54       	jnz %d5,80007f84 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007f7e:	06 cf       	sh %d15,-4
80007f80:	1b ff 00 f0 	addi %d15,%d15,15
80007f84:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007f88:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007f8c:	54 24       	ld.w %d4,[%a2]
80007f8e:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007f92:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80007f94:	df 13 04 00 	jeq %d3,1,80007f9c <IfxVadc_Adc_initModule+0x9e>
80007f98:	82 13       	mov %d3,1
80007f9a:	3c dc       	j 80007f52 <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007f9c:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80007fa0:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007fa2:	df 12 20 80 	jne %d2,1,80007fe2 <IfxVadc_Adc_initModule+0xe4>
80007fa6:	82 08       	mov %d8,0
80007fa8:	1b 08 01 f0 	addi %d15,%d8,16
80007fac:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fae:	02 f4       	mov %d4,%d15
80007fb0:	40 f4       	mov.aa %a4,%a15
80007fb2:	6d ff 83 e3 	call 800046b8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007fb6:	8f a8 00 20 	sh %d2,%d8,10
80007fba:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80007fbe:	c2 18       	add %d8,1
80007fc0:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fc4:	02 f4       	mov %d4,%d15
80007fc6:	8f 32 40 21 	or %d2,%d2,3
80007fca:	59 22 40 20 	st.w [%a2]1152,%d2
80007fce:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007fd0:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fd4:	6d ff 56 e3 	call 80004680 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007fd8:	ee e8       	jnz %d15,80007fa8 <IfxVadc_Adc_initModule+0xaa>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
80007fda:	40 f4       	mov.aa %a4,%a15
80007fdc:	6d ff 19 e6 	call 80004c0e <IfxVadc_startupCalibration>
    }

    return status;
80007fe0:	82 0f       	mov %d15,0
}
80007fe2:	02 f2       	mov %d2,%d15
80007fe4:	00 90       	ret 

80007fe6 <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007fe6:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007fea:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007fec:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007ff0:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80007ff2:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007ff4:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80007ff6:	6d ff 1f e4 	call 80004834 <IfxVadc_getAdcDigitalFrequency>
80007ffa:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80007ffc:	6d ff cf f0 	call 8000619a <IfxScuCcu_getSpbFrequency>
80008000:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008002:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80008006:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008008:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
8000800c:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
8000800e:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80008010:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80008014:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
80008016:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
8000801a:	e9 ff 21 00 	st.b [%a15]33,%d15
8000801e:	00 90       	ret 

80008020 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
80008020:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008022:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80008024:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008026:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
80008028:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
8000802a:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
8000802c:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
8000802e:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80008030:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80008032:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80008034:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80008038:	d2 02       	mov %e2,0
8000803a:	89 22 48 01 	st.d [%a2+]8,%e2
8000803e:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80008042:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
80008046:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80008048:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
8000804a:	2c ac       	st.b [%sp]12,%d15
8000804c:	d9 44 0c 00 	lea %a4,[%a4]12
80008050:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008054:	89 42 48 01 	st.d [%a4+]8,%e2
80008058:	09 f2 48 01 	ld.d %e2,[%a15+]8
8000805c:	89 42 48 01 	st.d [%a4+]8,%e2
80008060:	00 90       	ret 

80008062 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80008062:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80008064:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80008066:	8f af 00 20 	sh %d2,%d15,10
8000806a:	1b 02 48 20 	addi %d2,%d2,1152
8000806e:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80008072:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80008076:	40 4c       	mov.aa %a12,%a4
80008078:	40 5f       	mov.aa %a15,%a5
8000807a:	16 0f       	and %d15,15
8000807c:	f6 2a       	jnz %d2,80008090 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
8000807e:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008082:	8f f2 c0 21 	andn %d2,%d2,15
80008086:	a6 2f       	or %d15,%d2
80008088:	59 cf 30 f0 	st.w [%a12]1008,%d15
8000808c:	82 0f       	mov %d15,0
8000808e:	3c 07       	j 8000809c <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
80008090:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008094:	06 4f       	sh %d15,4
80008096:	8f 02 cf 21 	andn %d2,%d2,240
8000809a:	3c f6       	j 80008086 <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
8000809c:	90 f2       	addsc.a %a2,%a15,%d15,2
8000809e:	99 2d 0c 00 	ld.a %a13,[%a2]12
800080a2:	bd 0d 19 00 	jz.a %a13,800080d4 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
800080a6:	39 d3 0c 00 	ld.bu %d3,[%a13]12
800080aa:	39 f2 18 00 	ld.bu %d2,[%a15]24
800080ae:	99 d4 04 00 	ld.a %a4,[%a13]4
800080b2:	0f 23 a0 50 	or %d5,%d3,%d2
800080b6:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080ba:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
800080be:	39 f8 19 00 	ld.bu %d8,[%a15]25
800080c2:	6d ff c4 ed 	call 80005c4a <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
800080c6:	99 d4 04 00 	ld.a %a4,[%a13]4
800080ca:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080ce:	02 85       	mov %d5,%d8
800080d0:	6d ff 3b ee 	call 80005d46 <IfxPort_setPinPadDriver>
800080d4:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
800080d6:	df 3f e3 ff 	jne %d15,3,8000809c <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
800080da:	0c f7       	ld.bu %d15,[%a15]7
800080dc:	08 44       	ld.bu %d4,[%a15]4
800080de:	78 00       	st.w [%sp]0,%d15
800080e0:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800080e4:	08 95       	ld.bu %d5,[%a15]9
800080e6:	08 56       	ld.bu %d6,[%a15]5
800080e8:	08 67       	ld.bu %d7,[%a15]6
800080ea:	78 01       	st.w [%sp]4,%d15
800080ec:	40 c4       	mov.aa %a4,%a12
800080ee:	40 e5       	mov.aa %a5,%a14
800080f0:	1d ff 00 e3 	j 800046f0 <IfxVadc_configExternalMultiplexerMode>

800080f4 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
800080f4:	cc 40       	ld.a %a15,[%a4]0
800080f6:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
800080fa:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
800080fe:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008100:	c2 4f       	add %d15,4
80008102:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008106:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
80008108:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000810a:	3f 3f 04 80 	jlt.u %d15,%d3,80008112 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
8000810e:	82 0f       	mov %d15,0
80008110:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008112:	00 90       	ret 

80008114 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008114:	cc 40       	ld.a %a15,[%a4]0
80008116:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
8000811a:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
8000811e:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80008120:	c2 2f       	add %d15,2
80008122:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008126:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
8000812a:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000812c:	3f 3f 04 80 	jlt.u %d15,%d3,80008134 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80008130:	82 0f       	mov %d15,0
80008132:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008134:	00 90       	ret 

80008136 <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008136:	cc 40       	ld.a %a15,[%a4]0
80008138:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
8000813c:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008140:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
80008142:	c2 4f       	add %d15,4
80008144:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008148:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
8000814a:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000814c:	3f 2f 04 80 	jlt.u %d15,%d2,80008154 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80008150:	82 0f       	mov %d15,0
80008152:	ac 42       	st.h [%a4]4,%d15
80008154:	00 90       	ret 

80008156 <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80008156:	80 52       	mov.d %d2,%a5
80008158:	37 04 70 40 	extr.u %d4,%d4,0,16
8000815c:	8f 02 60 31 	nor %d3,%d2,0
80008160:	1a 42       	add %d15,%d2,%d4
80008162:	42 3f       	add %d15,%d3
80008164:	42 23       	add %d3,%d2
80008166:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
80008168:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000816a:	82 06       	mov %d6,0
8000816c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008170:	6f f3 03 00 	jz.t %d3,15,80008176 <Ifx_CircularBuffer_read8+0x20>
80008174:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
80008176:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000817a:	d4 42       	ld.a %a2,[%a4]
8000817c:	60 33       	mov.a %a3,%d3
8000817e:	30 32       	add.a %a2,%a3
80008180:	14 23       	ld.bu %d3,[%a2]
80008182:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80008184:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80008188:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
8000818c:	c2 13       	add %d3,1
8000818e:	37 03 70 30 	extr.u %d3,%d3,0,16
80008192:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008196:	3f 53 04 80 	jlt.u %d3,%d5,8000819e <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
8000819a:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
8000819e:	9f 0f ec ff 	jned %d15,0,80008176 <Ifx_CircularBuffer_read8+0x20>
800081a2:	c2 f4       	add %d4,-1
800081a4:	37 04 50 40 	extr %d4,%d4,0,16
800081a8:	8b 04 40 43 	max %d4,%d4,0
800081ac:	c2 14       	add %d4,1

    return Dest;
}
800081ae:	1a 42       	add %d15,%d2,%d4
800081b0:	60 f2       	mov.a %a2,%d15
800081b2:	00 90       	ret 

800081b4 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
800081b4:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
800081b8:	d4 42       	ld.a %a2,[%a4]
800081ba:	1b f4 ff 5f 	addi %d5,%d4,-1
800081be:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
800081c2:	b9 46 06 00 	ld.hu %d6,[%a4]6
800081c6:	82 03       	mov %d3,0
800081c8:	37 05 70 20 	extr.u %d2,%d5,0,16
800081cc:	6f f5 03 00 	jz.t %d5,15,800081d2 <Ifx_CircularBuffer_read32+0x1e>
800081d0:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081d2:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081d4:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081d6:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081d8:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081dc:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800081e0:	c2 13       	add %d3,1
800081e2:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800081e4:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800081e8:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800081ec:	9f 02 f3 ff 	jned %d2,0,800081d2 <Ifx_CircularBuffer_read32+0x1e>
800081f0:	c2 f4       	add %d4,-1
800081f2:	37 04 50 40 	extr %d4,%d4,0,16
800081f6:	ac 42       	st.h [%a4]4,%d15
800081f8:	8b 04 40 43 	max %d4,%d4,0
800081fc:	c2 14       	add %d4,1

    return Dest;
}
800081fe:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008202:	00 90       	ret 

80008204 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008204:	80 52       	mov.d %d2,%a5
80008206:	37 04 70 40 	extr.u %d4,%d4,0,16
8000820a:	8f 02 60 31 	nor %d3,%d2,0
8000820e:	1a 42       	add %d15,%d2,%d4
80008210:	42 3f       	add %d15,%d3
80008212:	42 23       	add %d3,%d2
80008214:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
80008216:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008218:	82 06       	mov %d6,0
8000821a:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000821e:	6f f3 03 00 	jz.t %d3,15,80008224 <Ifx_CircularBuffer_write8+0x20>
80008222:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
80008224:	b9 43 04 00 	ld.hu %d3,[%a4]4
80008228:	d4 42       	ld.a %a2,[%a4]
8000822a:	60 33       	mov.a %a3,%d3
8000822c:	04 f5       	ld.bu %d5,[%a15+]
8000822e:	30 32       	add.a %a2,%a3
80008230:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
80008232:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80008236:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
8000823a:	c2 13       	add %d3,1
8000823c:	37 03 70 30 	extr.u %d3,%d3,0,16
80008240:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008244:	3f 53 04 80 	jlt.u %d3,%d5,8000824c <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
80008248:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
8000824c:	9f 0f ec ff 	jned %d15,0,80008224 <Ifx_CircularBuffer_write8+0x20>
80008250:	c2 f4       	add %d4,-1
80008252:	37 04 50 40 	extr %d4,%d4,0,16
80008256:	8b 04 40 43 	max %d4,%d4,0
8000825a:	c2 14       	add %d4,1

    return source;
}
8000825c:	1a 42       	add %d15,%d2,%d4
8000825e:	60 f2       	mov.a %a2,%d15
80008260:	00 90       	ret 

80008262 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008262:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
80008266:	d4 42       	ld.a %a2,[%a4]
80008268:	1b f4 ff 5f 	addi %d5,%d4,-1
8000826c:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008270:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008274:	82 03       	mov %d3,0
80008276:	37 05 70 20 	extr.u %d2,%d5,0,16
8000827a:	6f f5 03 00 	jz.t %d5,15,80008280 <Ifx_CircularBuffer_write32+0x1e>
8000827e:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008280:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008284:	c2 13       	add %d3,1
80008286:	48 05       	ld.w %d5,[%a15]0
80008288:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000828a:	c2 4f       	add %d15,4
8000828c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008290:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008292:	0b 6f 30 51 	lt.u %d5,%d15,%d6
80008296:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
8000829a:	9f 02 f3 ff 	jned %d2,0,80008280 <Ifx_CircularBuffer_write32+0x1e>
8000829e:	c2 f4       	add %d4,-1
800082a0:	37 04 50 40 	extr %d4,%d4,0,16
800082a4:	ac 42       	st.h [%a4]4,%d15
800082a6:	8b 04 40 43 	max %d4,%d4,0
800082aa:	c2 14       	add %d4,1

    return source;
}
800082ac:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800082b0:	00 90       	ret 

800082b2 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
800082b2:	1d 00 69 14 	j 8000ab84 <free>

800082b6 <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800082b6:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082b8:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800082ba:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
800082be:	82 1f       	mov %d15,1
800082c0:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082c4:	1b 72 02 f0 	addi %d15,%d2,39
800082c8:	8f 7f c0 f1 	andn %d15,%d15,7
800082cc:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800082ce:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
800082d0:	82 0f       	mov %d15,0
800082d2:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
800082d4:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800082d6:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800082da:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
800082dc:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800082de:	6c 43       	st.w [%a4]12,%d15
800082e0:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
800082e2:	ac 4b       	st.h [%a4]22,%d15
800082e4:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
800082e6:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
800082ea:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
800082ee:	00 90       	ret 

800082f0 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800082f0:	c2 34       	add %d4,3
800082f2:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
800082f6:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800082f8:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
800082fc:	1b 8f 02 40 	addi %d4,%d15,40
80008300:	6d 00 3c 14 	call 8000ab78 <malloc>
80008304:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
80008306:	bc 25       	jz.a %a2,80008310 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
80008308:	0b f8 10 48 	mov %e4,%d8,%d15
8000830c:	1d ff d5 ff 	j 800082b6 <Ifx_Fifo_init>
    }

    return fifo;
}
80008310:	00 90       	ret 

80008312 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008312:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008314:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008316:	3f f4 6a 00 	jlt %d4,%d15,800083ea <Ifx_Fifo_canReadCount+0xd8>
8000831a:	8c 4c       	ld.h %d15,[%a4]24
8000831c:	3f 4f 67 00 	jlt %d15,%d4,800083ea <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008320:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008324:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008328:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000832c:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
8000832e:	8c 42       	ld.h %d15,[%a4]4
80008330:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
80008332:	4e 4c       	jgtz %d4,8000834a <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008334:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008336:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
8000833a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
8000833e:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008340:	df 00 55 00 	jeq %d0,0,800083ea <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
80008344:	0d 00 00 03 	enable 
80008348:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000834a:	82 f2       	mov %d2,-1
8000834c:	06 f2       	sh %d2,-1
8000834e:	ba f6       	eq %d15,%d6,-1
80008350:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008354:	82 f5       	mov %d5,-1
80008356:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008358:	ee 16       	jnz %d15,80008384 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000835a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000835e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008362:	0d 00 40 03 	disable 
80008366:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008368:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000836c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008370:	02 15       	mov %d5,%d1
80008372:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008376:	76 23       	jz %d2,8000837c <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
80008378:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000837c:	0b 65 40 50 	addx %d5,%d5,%d6
80008380:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
80008384:	82 0f       	mov %d15,0
80008386:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000838a:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000838e:	76 03       	jz %d0,80008394 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
80008390:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008394:	82 f6       	mov %d6,-1
80008396:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008398:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000839c:	6e 08       	jz %d15,800083ac <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
8000839e:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
800083a2:	82 0f       	mov %d15,0
800083a4:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
800083a6:	8b 12 00 22 	eq %d2,%d2,1
800083aa:	00 90       	ret 
800083ac:	ba f5       	eq %d15,%d5,-1
800083ae:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800083b2:	ee f3       	jnz %d15,80008398 <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083b4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083b8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083bc:	0d 00 40 03 	disable 
800083c0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800083c2:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800083c6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800083ca:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800083ce:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083d2:	76 23       	jz %d2,800083d8 <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
800083d4:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800083d8:	0b 3f 00 21 	eq %d2,%d15,%d3
800083dc:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800083e0:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800083e4:	df 02 da ff 	jne %d2,0,80008398 <Ifx_Fifo_canReadCount+0x86>
800083e8:	3c db       	j 8000839e <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
800083ea:	00 90       	ret 

800083ec <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
800083ec:	20 08       	sub.a %sp,8
800083ee:	40 4f       	mov.aa %a15,%a4
800083f0:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
800083f2:	df 04 b6 00 	jeq %d4,0,8000855e <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
800083f6:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800083f8:	82 f2       	mov %d2,-1
800083fa:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
800083fc:	8c 4c       	ld.h %d15,[%a4]24
800083fe:	06 f2       	sh %d2,-1
80008400:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008402:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008404:	82 fa       	mov %d10,-1
80008406:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008408:	ba f6       	eq %d15,%d6,-1
8000840a:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000840e:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008410:	ee 16       	jnz %d15,8000843c <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008412:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008416:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000841a:	0d 00 40 03 	disable 
8000841e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008420:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008424:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008428:	02 3a       	mov %d10,%d3
8000842a:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000842e:	76 23       	jz %d2,80008434 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008430:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008434:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008438:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000843c:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000843e:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
80008440:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008442:	a0 0c       	mov.a %a12,0
80008444:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008446:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000844a:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000844e:	0d 00 40 03 	disable 
80008452:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
80008454:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008456:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000845a:	8c fd       	ld.h %d15,[%a15]26
8000845c:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
80008460:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008464:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008468:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000846a:	a2 3b       	sub %d11,%d3
8000846c:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008470:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008474:	0b f9 80 30 	sub %d3,%d9,%d15
80008478:	0b 23 80 21 	min %d2,%d3,%d2
8000847c:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000847e:	76 43       	jz %d4,80008484 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008480:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
80008484:	6e 20       	jz %d15,800084c4 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
80008486:	40 a4       	mov.aa %a4,%sp
80008488:	02 f4       	mov %d4,%d15
8000848a:	6d ff 66 fe 	call 80008156 <Ifx_CircularBuffer_read8>
8000848e:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008490:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008494:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008498:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000849c:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
8000849e:	88 23       	ld.h %d3,[%a15]4
800084a0:	a2 b3       	sub %d3,%d11
800084a2:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
800084a4:	48 33       	ld.w %d3,[%a15]12
800084a6:	76 39       	jz %d3,800084b8 <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
800084a8:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
800084aa:	8e f3       	jlez %d15,800084b0 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
800084ac:	68 3f       	st.w [%a15]12,%d15
800084ae:	3c 05       	j 800084b8 <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084b0:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084b2:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084b4:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084b8:	76 23       	jz %d2,800084be <Ifx_Fifo_read+0xd2>
    {
        __enable();
800084ba:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800084be:	a2 b9       	sub %d9,%d11
800084c0:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800084c4:	76 d4       	jz %d13,800084cc <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
800084c6:	82 0f       	mov %d15,0
800084c8:	68 2f       	st.w [%a15]8,%d15
                break;
800084ca:	3c 48       	j 8000855a <Ifx_Fifo_read+0x16e>
800084cc:	ba fa       	eq %d15,%d10,-1
800084ce:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800084d2:	ee 1b       	jnz %d15,80008508 <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084d4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084d8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084dc:	0d 00 40 03 	disable 
800084e0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084e2:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084e6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800084ea:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084ee:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084f2:	76 23       	jz %d2,800084f8 <Ifx_Fifo_read+0x10c>
    {
        __enable();
800084f4:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800084f8:	0b 8f 00 21 	eq %d2,%d15,%d8
800084fc:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008500:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008504:	df 02 e1 ff 	jne %d2,0,800084c6 <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
80008508:	df 09 29 00 	jeq %d9,0,8000855a <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000850c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008510:	ee 1f       	jnz %d15,8000854e <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008512:	ba fa       	eq %d15,%d10,-1
80008514:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008518:	ee fa       	jnz %d15,8000850c <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000851a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000851e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008522:	0d 00 40 03 	disable 
80008526:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008528:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000852c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008530:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008534:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008538:	76 23       	jz %d2,8000853e <Ifx_Fifo_read+0x152>
    {
        __enable();
8000853a:	0d 00 00 03 	enable 
8000853e:	0b 8f 00 21 	eq %d2,%d15,%d8
80008542:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008546:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000854a:	df 02 e1 ff 	jne %d2,0,8000850c <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
8000854e:	39 fd 1c 00 	ld.bu %d13,[%a15]28
80008552:	8b 0d 00 d2 	eq %d13,%d13,0
80008556:	1d ff 78 ff 	j 80008446 <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
8000855a:	8c a2       	ld.h %d15,[%sp]4
8000855c:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
8000855e:	02 92       	mov %d2,%d9
80008560:	00 90       	ret 

80008562 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008562:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008566:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000856a:	0d 00 40 03 	disable 
8000856e:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
80008570:	4c 43       	ld.w %d15,[%a4]12
80008572:	6e 06       	jz %d15,8000857e <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
80008574:	82 0f       	mov %d15,0
80008576:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
80008578:	82 1f       	mov %d15,1
8000857a:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
8000857e:	82 0f       	mov %d15,0
80008580:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008584:	82 0f       	mov %d15,0
80008586:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
80008588:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000858a:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
8000858c:	8c 4b       	ld.h %d15,[%a4]22
8000858e:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008590:	76 23       	jz %d2,80008596 <Ifx_Fifo_clear+0x34>
    {
        __enable();
80008592:	0d 00 00 03 	enable 
80008596:	00 90       	ret 

80008598 <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
80008598:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
8000859a:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
8000859c:	3f f4 75 00 	jlt %d4,%d15,80008686 <Ifx_Fifo_canWriteCount+0xee>
800085a0:	8c 4c       	ld.h %d15,[%a4]24
800085a2:	3f 4f 72 00 	jlt %d15,%d4,80008686 <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085a6:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800085aa:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085ae:	0d 00 40 03 	disable 
800085b2:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
800085b4:	c9 43 18 00 	ld.h %d3,[%a4]24
800085b8:	8c 42       	ld.h %d15,[%a4]4
800085ba:	5a f3       	sub %d15,%d3,%d15
800085bc:	3f 4f 0d 00 	jlt %d15,%d4,800085d6 <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
800085c0:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
800085c2:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
800085c6:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800085ca:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085cc:	df 00 5d 00 	jeq %d0,0,80008686 <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
800085d0:	0d 00 00 03 	enable 
800085d4:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085d6:	82 f2       	mov %d2,-1
800085d8:	06 f2       	sh %d2,-1
800085da:	ba f6       	eq %d15,%d6,-1
800085dc:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800085e0:	82 f5       	mov %d5,-1
800085e2:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085e4:	ee 16       	jnz %d15,80008610 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085e6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085ea:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085ee:	0d 00 40 03 	disable 
800085f2:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800085f4:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085f8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800085fc:	02 15       	mov %d5,%d1
800085fe:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008602:	76 23       	jz %d2,80008608 <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008604:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008608:	0b 65 40 50 	addx %d5,%d5,%d6
8000860c:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008610:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008612:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008616:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000861a:	8c 4c       	ld.h %d15,[%a4]24
8000861c:	5a f2       	sub %d15,%d2,%d15
8000861e:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008620:	82 02       	mov %d2,0
80008622:	0b 42 a0 41 	max %d4,%d2,%d4
80008626:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000862a:	76 03       	jz %d0,80008630 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
8000862c:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008630:	82 f6       	mov %d6,-1
80008632:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008634:	39 4f 1d 00 	ld.bu %d15,[%a4]29
80008638:	6e 08       	jz %d15,80008648 <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
8000863a:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
8000863e:	82 0f       	mov %d15,0
80008640:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
80008642:	8b 12 00 22 	eq %d2,%d2,1
80008646:	00 90       	ret 
80008648:	ba f5       	eq %d15,%d5,-1
8000864a:	0b 36 00 f2 	and.eq %d15,%d6,%d3
8000864e:	ee f3       	jnz %d15,80008634 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008650:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008654:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008658:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000865c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000865e:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008662:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008666:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000866a:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000866e:	76 23       	jz %d2,80008674 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008670:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008674:	0b 3f 00 21 	eq %d2,%d15,%d3
80008678:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
8000867c:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008680:	df 02 da ff 	jne %d2,0,80008634 <Ifx_Fifo_canWriteCount+0x9c>
80008684:	3c db       	j 8000863a <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
80008686:	00 90       	ret 

80008688 <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80008688:	20 08       	sub.a %sp,8
8000868a:	40 4f       	mov.aa %a15,%a4
8000868c:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
8000868e:	df 04 be 00 	jeq %d4,0,8000880a <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
80008692:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008694:	82 f2       	mov %d2,-1
80008696:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
80008698:	8c 4c       	ld.h %d15,[%a4]24
8000869a:	06 f2       	sh %d2,-1
8000869c:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
8000869e:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
800086a0:	82 fa       	mov %d10,-1
800086a2:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086a4:	ba f6       	eq %d15,%d6,-1
800086a6:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800086aa:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086ac:	ee 16       	jnz %d15,800086d8 <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086ae:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086b2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086b6:	0d 00 40 03 	disable 
800086ba:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800086bc:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086c0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086c4:	02 3a       	mov %d10,%d3
800086c6:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086ca:	76 23       	jz %d2,800086d0 <Ifx_Fifo_write+0x48>
    {
        __enable();
800086cc:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800086d0:	0b 6a 40 a0 	addx %d10,%d10,%d6
800086d4:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800086d8:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
800086da:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
800086dc:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800086de:	a0 0c       	mov.a %a12,0
800086e0:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086e2:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800086e6:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086ea:	0d 00 40 03 	disable 
800086ee:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
800086f0:	88 c4       	ld.h %d4,[%a15]24
800086f2:	88 2b       	ld.h %d11,[%a15]4
800086f4:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800086f8:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
800086fc:	8c fd       	ld.h %d15,[%a15]26
800086fe:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008702:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008706:	4b f2 01 22 	div %e2,%d2,%d15
8000870a:	a2 3b       	sub %d11,%d3
8000870c:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008710:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008714:	0b f9 80 20 	sub %d2,%d9,%d15
80008718:	0b 42 80 41 	min %d4,%d2,%d4
8000871c:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000871e:	76 53       	jz %d5,80008724 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008720:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
80008724:	6e 26       	jz %d15,80008770 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
80008726:	40 a4       	mov.aa %a4,%sp
80008728:	02 f4       	mov %d4,%d15
8000872a:	6d ff 6d fd 	call 80008204 <Ifx_CircularBuffer_write8>
8000872e:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008730:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008734:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008738:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000873c:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
8000873e:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008740:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008742:	42 b2       	add %d2,%d11
80008744:	37 02 50 20 	extr %d2,%d2,0,16
80008748:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000874a:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
8000874e:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
80008750:	48 22       	ld.w %d2,[%a15]8
80008752:	76 29       	jz %d2,80008764 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
80008754:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
80008756:	8e f3       	jlez %d15,8000875c <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
80008758:	68 2f       	st.w [%a15]8,%d15
8000875a:	3c 05       	j 80008764 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
8000875c:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
8000875e:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008760:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008764:	76 33       	jz %d3,8000876a <Ifx_Fifo_write+0xe2>
    {
        __enable();
80008766:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000876a:	a2 b9       	sub %d9,%d11
8000876c:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008770:	76 d4       	jz %d13,80008778 <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008772:	82 0f       	mov %d15,0
80008774:	68 3f       	st.w [%a15]12,%d15
                break;
80008776:	3c 48       	j 80008806 <Ifx_Fifo_write+0x17e>
80008778:	ba fa       	eq %d15,%d10,-1
8000877a:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
8000877e:	ee 1b       	jnz %d15,800087b4 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008780:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008784:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008788:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000878c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000878e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008792:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008796:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000879a:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000879e:	76 23       	jz %d2,800087a4 <Ifx_Fifo_write+0x11c>
    {
        __enable();
800087a0:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800087a4:	0b 8f 00 21 	eq %d2,%d15,%d8
800087a8:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800087ac:	0b f8 90 22 	or.lt %d2,%d8,%d15
800087b0:	df 02 e1 ff 	jne %d2,0,80008772 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
800087b4:	df 09 29 00 	jeq %d9,0,80008806 <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800087b8:	39 ff 1d 00 	ld.bu %d15,[%a15]29
800087bc:	ee 1f       	jnz %d15,800087fa <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800087be:	ba fa       	eq %d15,%d10,-1
800087c0:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800087c4:	ee fa       	jnz %d15,800087b8 <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800087c6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800087ca:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800087ce:	0d 00 40 03 	disable 
800087d2:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800087d4:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800087d8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800087dc:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800087e0:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087e4:	76 23       	jz %d2,800087ea <Ifx_Fifo_write+0x162>
    {
        __enable();
800087e6:	0d 00 00 03 	enable 
800087ea:	0b 8f 00 21 	eq %d2,%d15,%d8
800087ee:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800087f2:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800087f6:	df 02 e1 ff 	jne %d2,0,800087b8 <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
800087fa:	39 fd 1d 00 	ld.bu %d13,[%a15]29
800087fe:	8b 0d 00 d2 	eq %d13,%d13,0
80008802:	1d ff 70 ff 	j 800086e2 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
80008806:	8c a2       	ld.h %d15,[%sp]4
80008808:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
8000880a:	02 92       	mov %d2,%d9
8000880c:	00 90       	ret 

8000880e <initUltrasonic>:
8000880e:	91 40 00 4f 	movh.a %a4,61444
80008812:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008816:	82 14       	mov %d4,1
80008818:	3b 00 08 50 	mov %d5,128
8000881c:	6d ff 17 ea 	call 80005c4a <IfxPort_setPinMode>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80008820:	91 40 00 4f 	movh.a %a4,61444
80008824:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008828:	82 24       	mov %d4,2
8000882a:	3b 80 00 50 	mov %d5,8
8000882e:	1d ff 0e ea 	j 80005c4a <IfxPort_setPinMode>

80008832 <delay_ms>:
    IfxPort_setPinModeOutput(TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

void delay_ms(unsigned long delay)
{
80008832:	02 4a       	mov %d10,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80008834:	6d ff f2 eb 	call 80006018 <IfxScuCcu_getSourceFrequency>
80008838:	91 30 00 ff 	movh.a %a15,61443
8000883c:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008840:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008842:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008846:	37 04 64 44 	extr.u %d4,%d4,8,4
8000884a:	53 1f 40 00 	mul.u %e0,%d15,1
8000884e:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80008852:	8f 0f 40 61 	or %d6,%d15,0
80008856:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
8000885a:	3b 80 3e 40 	mov %d4,1000
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
8000885e:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
80008862:	4b 42 11 22 	div.u %e2,%d2,%d4
80008866:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
8000886a:	73 a2 68 40 	mul.u %e4,%d2,%d10
8000886e:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008872:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008876:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
8000887a:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
8000887e:	8f 0f 40 81 	or %d8,%d15,0
80008882:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80008886:	0b 68 c0 20 	subx %d2,%d8,%d6
8000888a:	0b 79 d0 30 	subc %d3,%d9,%d7
8000888e:	3a 53       	eq %d15,%d3,%d5
80008890:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80008894:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80008898:	ee ed       	jnz %d15,80008872 <delay_ms+0x40>
}
8000889a:	00 90       	ret 

8000889c <delay_us>:

void delay_us(unsigned long delay)
{
8000889c:	02 4a       	mov %d10,%d4
8000889e:	6d ff bd eb 	call 80006018 <IfxScuCcu_getSourceFrequency>
800088a2:	91 30 00 ff 	movh.a %a15,61443
800088a6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800088aa:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800088ac:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800088b0:	37 04 64 44 	extr.u %d4,%d4,8,4
800088b4:	53 1f 40 00 	mul.u %e0,%d15,1
800088b8:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
800088bc:	8f 0f 40 61 	or %d6,%d15,0
800088c0:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_us = freq / 1000000;
800088c4:	7b f0 00 40 	movh %d4,15
800088c8:	1b 04 24 44 	addi %d4,%d4,16960
    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

void delay_us(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
800088cc:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_us = freq / 1000000;
800088d0:	4b 42 11 22 	div.u %e2,%d2,%d4
800088d4:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_us;
800088d8:	73 a2 68 40 	mul.u %e4,%d2,%d10
800088dc:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800088e0:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800088e4:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
800088e8:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800088ec:	8f 0f 40 81 	or %d8,%d15,0
800088f0:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
800088f4:	0b 68 c0 20 	subx %d2,%d8,%d6
800088f8:	0b 79 d0 30 	subc %d3,%d9,%d7
800088fc:	3a 53       	eq %d15,%d3,%d5
800088fe:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80008902:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80008906:	ee ed       	jnz %d15,800088e0 <delay_us+0x44>
}
80008908:	00 90       	ret 

8000890a <sendTrigger>:
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000890a:	91 40 00 ff 	movh.a %a15,61444
8000890e:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008912:	82 2f       	mov %d15,2
80008914:	68 1f       	st.w [%a15]4,%d15
}

void sendTrigger()
{
    IfxPort_setPinHigh(TRIG_PIN);
    delay_us(10);
80008916:	3b a0 00 40 	mov %d4,10
8000891a:	7b 20 00 f0 	movh %d15,2
8000891e:	6d ff bf ff 	call 8000889c <delay_us>
80008922:	68 1f       	st.w [%a15]4,%d15
80008924:	00 90       	ret 

80008926 <measureEchoTick>:
}


IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
{
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80008926:	91 40 00 ff 	movh.a %a15,61444
8000892a:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
8000892e:	4c f9       	ld.w %d15,[%a15]36
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0);
80008930:	6f 2f ff 7f 	jz.t %d15,2,8000892e <measureEchoTick+0x8>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008934:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008938:	85 f0 2c 00 	ld.w %d0,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000893c:	53 1f 40 20 	mul.u %e2,%d15,1
80008940:	91 40 00 ff 	movh.a %a15,61444
    result |= ((uint64)stm->CAP.U) << 32;
80008944:	8f 0f 40 41 	or %d4,%d15,0
80008948:	0f 30 a0 50 	or %d5,%d0,%d3
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
8000894c:	7b 40 07 00 	movh %d0,116
    IfxPort_setPinLow(TRIG_PIN);
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
80008950:	d2 02       	mov %e2,0
80008952:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
    while (IfxPort_getPinState(ECHO_PIN) == 0);
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008956:	1b 00 78 0f 	addi %d0,%d0,-2176
8000895a:	4c f9       	ld.w %d15,[%a15]36
long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0);
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
8000895c:	6f 2f 18 00 	jz.t %d15,2,8000898c <measureEchoTick+0x66>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008960:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008964:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008968:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
8000896c:	8f 0f 40 61 	or %d6,%d15,0
80008970:	0f 32 a0 70 	or %d7,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008974:	0b 46 c0 20 	subx %d2,%d6,%d4
80008978:	0b 57 d0 30 	subc %d3,%d7,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
8000897c:	ba 03       	eq %d15,%d3,0
8000897e:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80008982:	8b 03 00 f5 	or.ne %d15,%d3,0
80008986:	6e ea       	jz %d15,8000895a <measureEchoTick+0x34>
80008988:	82 f2       	mov %d2,-1
    };
    
    return (long)elapsedTick;
}
8000898a:	00 90       	ret 
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    
    return (long)elapsedTick;
8000898c:	00 90       	ret 

8000898e <getUltrasonic>:

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

int getUltrasonic(){
    sendTrigger();
8000898e:	6d ff be ff 	call 8000890a <sendTrigger>
    long echoTicks = measureEchoTick();
80008992:	6d ff ca ff 	call 80008926 <measureEchoTick>
80008996:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008998:	82 f2       	mov %d2,-1
8000899a:	1e fb       	jeq %d15,-1,800089b0 <getUltrasonic+0x22>
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
8000899c:	3b 80 0c 20 	mov %d2,200
800089a0:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
800089a4:	3b 80 3e f0 	mov %d15,1000
800089a8:	53 12 21 20 	mul %d2,%d2,17
800089ac:	4b f2 01 22 	div %e2,%d2,%d15
    sendTrigger();
    long echoTicks = measureEchoTick();
    if(echoTicks==-1)return -1;
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}
800089b0:	00 90       	ret 

800089b2 <calculateDistanceCm>:
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
800089b2:	3b 80 0c 20 	mov %d2,200
800089b6:	4b 24 01 42 	div %e4,%d4,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
800089ba:	3b 80 3e 20 	mov %d2,1000
800089be:	53 14 21 40 	mul %d4,%d4,17
800089c2:	4b 24 01 22 	div %e2,%d4,%d2
    return (int) distanceCm;
}
800089c6:	00 90       	ret 

800089c8 <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800089c8:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
800089cc:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800089d0:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
800089d4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800089d8:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
800089da:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800089dc:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
800089e0:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
800089e4:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
800089e8:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
800089ec:	8f f8 83 81 	xor %d8,%d8,63
800089f0:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
800089f4:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
800089f6:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
800089fa:	3b 00 b8 f0 	mov %d15,2944
800089fe:	cd 4f e0 0f 	mtcr $psw,%d15
80008a02:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008a06:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008a0a:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008a0e:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008a12:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008a16:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008a1a:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008a1c:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008a20:	cd 42 20 09 	mtcr $pcon1,%d2
80008a24:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008a28:	53 cf 20 f0 	mul %d15,%d15,12
80008a2c:	10 22       	addsc.a %a2,%a2,%d15,0
80008a2e:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008a30:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008a32:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008a36:	d9 2f 00 46 	lea %a15,[%a2]24832
80008a3a:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008a3e:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008a40:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008a44:	2e 16       	jz.t %d15,1,80008a50 <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008a46:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008a4a:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008a4e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008a50:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008a54:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008a58:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008a5a:	4c f0       	ld.w %d15,[%a15]0
80008a5c:	6f 0f ff ff 	jnz.t %d15,0,80008a5a <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008a60:	82 0f       	mov %d15,0
80008a62:	cd cf 20 09 	mtcr $pcon0,%d15
80008a66:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008a6a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008a6c:	2e 16       	jz.t %d15,1,80008a78 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008a6e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008a72:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008a76:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008a78:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008a7c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008a80:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008a82:	4c f0       	ld.w %d15,[%a15]0
80008a84:	6f 0f ff 7f 	jz.t %d15,0,80008a82 <osEE_tc_core0_start+0xba>
80008a88:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008a8c:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008a90:	91 30 00 ff 	movh.a %a15,61443
80008a94:	53 cf 20 f0 	mul %d15,%d15,12
80008a98:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008a9c:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008a9e:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008aa0:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008aa2:	d9 2f 00 46 	lea %a15,[%a2]24832
80008aa6:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008aaa:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008aae:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008ab0:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008ab4:	2e 16       	jz.t %d15,1,80008ac0 <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008ab6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008aba:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008abe:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008ac0:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008ac4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008ac8:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008aca:	4c f0       	ld.w %d15,[%a15]0
80008acc:	6f 0f ff ff 	jnz.t %d15,0,80008aca <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008ad0:	82 0f       	mov %d15,0
80008ad2:	cd 0f 04 09 	mtcr $dcon0,%d15
80008ad6:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008ada:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008adc:	2e 16       	jz.t %d15,1,80008ae8 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008ade:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008ae2:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008ae6:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008ae8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008aec:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008af0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008af2:	4c f0       	ld.w %d15,[%a15]0
80008af4:	6f 0f ff 7f 	jz.t %d15,0,80008af2 <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008af8:	91 30 00 ff 	movh.a %a15,61443
80008afc:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008b00:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008b02:	2e 16       	jz.t %d15,1,80008b0e <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008b04:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008b08:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008b0c:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008b0e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008b12:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008b16:	91 30 00 ff 	movh.a %a15,61443
80008b1a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008b1e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008b20:	4c f0       	ld.w %d15,[%a15]0
80008b22:	91 30 00 2f 	movh.a %a2,61443
80008b26:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008b2a:	6f 0f fb ff 	jnz.t %d15,0,80008b20 <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
80008b2e:	7b 00 00 f8 	movh %d15,32768
80008b32:	1b 0f 10 f1 	addi %d15,%d15,4352
80008b36:	cd 4f e2 0f 	mtcr $btv,%d15
80008b3a:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80008b3e:	7b 00 00 f8 	movh %d15,32768
80008b42:	1b 0f 00 f2 	addi %d15,%d15,8192
80008b46:	cd 0f e2 0f 	mtcr $biv,%d15
80008b4a:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
80008b4e:	7b 20 00 f7 	movh %d15,28674
80008b52:	1b 0f b0 f9 	addi %d15,%d15,-25856
80008b56:	cd 8f e2 0f 	mtcr $isp,%d15
80008b5a:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008b5e:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008b60:	2e 16       	jz.t %d15,1,80008b6c <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008b62:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008b66:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008b6a:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008b6c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008b70:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008b74:	91 30 00 ff 	movh.a %a15,61443
80008b78:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008b7c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008b7e:	4c f0       	ld.w %d15,[%a15]0
80008b80:	6f 0f ff 7f 	jz.t %d15,0,80008b7e <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
80008b84:	91 10 00 f7 	movh.a %a15,28673
80008b88:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008b8c:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008b8e:	91 10 00 f8 	movh.a %a15,32769
80008b92:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008b96:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008b98:	91 10 00 f8 	movh.a %a15,32769
80008b9c:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008ba0:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
80008ba2:	91 10 00 fb 	movh.a %a15,45057
80008ba6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
80008baa:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008bac:	7b 20 00 f7 	movh %d15,28674
80008bb0:	7b 20 00 47 	movh %d4,28674
80008bb4:	1b 0f c0 69 	addi %d6,%d15,-25600
80008bb8:	1b 04 c0 4b 	addi %d4,%d4,-17408
80008bbc:	a2 64       	sub %d4,%d6
80008bbe:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008bc0:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008bc2:	df 04 16 00 	jeq %d4,0,80008bee <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008bc6:	9a f4       	add %d15,%d4,-1
80008bc8:	06 6f       	sh %d15,6
80008bca:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008bcc:	60 3f       	mov.a %a15,%d3
80008bce:	82 00       	mov %d0,0
80008bd0:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008bd2:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008bd4:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008bd8:	37 03 70 73 	extr.u %d7,%d3,6,16
80008bdc:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008be0:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008be2:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80008be6:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008be8:	82 53       	mov %d3,5
80008bea:	fd f0 11 01 	loop %a15,80008e0c <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008bee:	cd 82 e3 0f 	mtcr $fcx,%d2
80008bf2:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008bf6:	91 30 00 ff 	movh.a %a15,61443
80008bfa:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008bfe:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008c00:	2e 16       	jz.t %d15,1,80008c0c <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008c02:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008c06:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008c0a:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008c0c:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008c10:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008c14:	91 30 00 ff 	movh.a %a15,61443
80008c18:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008c1c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008c1e:	40 f2       	mov.aa %a2,%a15
80008c20:	4c 20       	ld.w %d15,[%a2]0
80008c22:	91 30 00 ff 	movh.a %a15,61443
80008c26:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008c2a:	6f 0f fb ff 	jnz.t %d15,0,80008c20 <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80008c2e:	4c f1       	ld.w %d15,[%a15]4
80008c30:	96 08       	or %d15,8
80008c32:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008c34:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008c36:	2e 16       	jz.t %d15,1,80008c42 <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008c38:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008c3c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008c40:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008c42:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008c46:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008c4a:	91 30 00 ff 	movh.a %a15,61443
80008c4e:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008c52:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008c54:	4c f0       	ld.w %d15,[%a15]0
80008c56:	6f 0f ff 7f 	jz.t %d15,0,80008c54 <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008c5a:	91 30 00 ff 	movh.a %a15,61443
80008c5e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008c62:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008c64:	2e 16       	jz.t %d15,1,80008c70 <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008c66:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008c6a:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008c6e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008c70:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008c74:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008c78:	91 30 00 ff 	movh.a %a15,61443
80008c7c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008c80:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008c82:	40 f2       	mov.aa %a2,%a15
80008c84:	4c 20       	ld.w %d15,[%a2]0
80008c86:	91 30 00 ff 	movh.a %a15,61443
80008c8a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008c8e:	6f 0f fb ff 	jnz.t %d15,0,80008c84 <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
80008c92:	4c f1       	ld.w %d15,[%a15]4
80008c94:	96 08       	or %d15,8
80008c96:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008c98:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008c9a:	2e 16       	jz.t %d15,1,80008ca6 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008c9c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008ca0:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008ca4:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008ca6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008caa:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008cae:	91 30 00 ff 	movh.a %a15,61443
80008cb2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008cb6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008cb8:	4c f0       	ld.w %d15,[%a15]0
80008cba:	6f 0f ff 7f 	jz.t %d15,0,80008cb8 <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008cbe:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
80008cc2:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008cc4:	d9 44 e0 d0 	lea %a4,[%a4]3936 <80000f60 <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
80008cc8:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
80008cca:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
80008ccc:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
80008cce:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
80008cd0:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008cd2:	9e f6       	jeq %d15,-1,80008cfe <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80008cd4:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008cd8:	76 49       	jz %d4,80008cea <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
80008cda:	60 4f       	mov.a %a15,%d4
80008cdc:	40 32       	mov.aa %a2,%a3
80008cde:	b0 ff       	add.a %a15,-1
80008ce0:	89 22 48 01 	st.d [%a2+]8,%e2
80008ce4:	fc fe       	loop %a15,80008ce0 <osEE_tc_core0_start+0x318>
80008ce6:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80008cea:	2e 22       	jz.t %d15,2,80008cee <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
80008cec:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008cee:	2e 12       	jz.t %d15,1,80008cf2 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
80008cf0:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80008cf2:	2e 02       	jz.t %d15,0,80008cf6 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80008cf4:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80008cf6:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
80008cfa:	bd 04 ea ff 	jnz.a %a4,80008cce <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
80008cfe:	91 00 00 68 	movh.a %a6,32768
80008d02:	d9 66 c8 f0 	lea %a6,[%a6]4040 <80000fc8 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80008d06:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
80008d08:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80008d0a:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008d0e:	df ff 21 00 	jeq %d15,-1,80008d50 <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80008d12:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008d16:	76 4f       	jz %d4,80008d34 <osEE_tc_core0_start+0x36c>
80008d18:	60 4f       	mov.a %a15,%d4
80008d1a:	40 43       	mov.aa %a3,%a4
80008d1c:	40 52       	mov.aa %a2,%a5
80008d1e:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
80008d20:	09 22 48 01 	ld.d %e2,[%a2+]8
80008d24:	89 32 48 01 	st.d [%a3+]8,%e2
80008d28:	fc fc       	loop %a15,80008d20 <osEE_tc_core0_start+0x358>
80008d2a:	06 34       	sh %d4,3
80008d2c:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
80008d30:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80008d34:	2e 23       	jz.t %d15,2,80008d3a <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80008d36:	44 52       	ld.w %d2,[%a5+]
80008d38:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008d3a:	2e 14       	jz.t %d15,1,80008d42 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
80008d3c:	09 52 c2 00 	ld.hu %d2,[%a5+]2
80008d40:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80008d42:	2e 03       	jz.t %d15,0,80008d48 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
80008d44:	0c 50       	ld.bu %d15,[%a5]0
80008d46:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
80008d48:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
80008d4c:	bd 06 dd ff 	jnz.a %a6,80008d06 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008d50:	91 30 00 ff 	movh.a %a15,61443
80008d54:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008d58:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008d5a:	2e 16       	jz.t %d15,1,80008d66 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008d5c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008d60:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008d64:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008d66:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008d6a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008d6e:	91 30 00 ff 	movh.a %a15,61443
80008d72:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008d76:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008d78:	4c f0       	ld.w %d15,[%a15]0
80008d7a:	6f 0f ff ff 	jnz.t %d15,0,80008d78 <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
80008d7e:	7b 20 22 f1 	movh %d15,4642
80008d82:	91 30 00 ff 	movh.a %a15,61443
80008d86:	1b 1f 10 f0 	addi %d15,%d15,257
80008d8a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80008d8e:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
80008d90:	7b 00 00 f5 	movh %d15,20480
80008d94:	91 30 00 ff 	movh.a %a15,61443
80008d98:	1b 0f 10 f1 	addi %d15,%d15,4352
80008d9c:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008da0:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
80008da2:	7b 70 00 f0 	movh %d15,7
80008da6:	91 30 00 ff 	movh.a %a15,61443
80008daa:	1b cf 01 f0 	addi %d15,%d15,28
80008dae:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008db2:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
80008db4:	4c f0       	ld.w %d15,[%a15]0
80008db6:	6f 1f ff 7f 	jz.t %d15,1,80008db4 <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
80008dba:	91 30 00 ff 	movh.a %a15,61443
80008dbe:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008dc2:	4c f0       	ld.w %d15,[%a15]0
80008dc4:	6f 8f ff 7f 	jz.t %d15,8,80008dc2 <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80008dc8:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008dcc:	91 30 00 ff 	movh.a %a15,61443
80008dd0:	1b 04 20 4c 	addi %d4,%d4,-15872
80008dd4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008dd8:	6d 00 58 00 	call 80008e88 <osEE_tc_set_pll_fsource>
80008ddc:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008dde:	2e 16       	jz.t %d15,1,80008dea <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008de0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008de4:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008de8:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008dea:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008dee:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008df2:	91 30 00 ff 	movh.a %a15,61443
80008df6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008dfa:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008dfc:	4c f0       	ld.w %d15,[%a15]0
80008dfe:	6f 0f ff 7f 	jz.t %d15,0,80008dfc <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80008e02:	6d ff 14 dc 	call 8000462a <main>
80008e06:	02 24       	mov %d4,%d2
80008e08:	6d 00 59 28 	call 8000deba <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008e0c:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008e0e:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008e12:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008e14:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008e16:	37 0f 70 23 	extr.u %d2,%d15,6,16
80008e1a:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80008e1e:	76 36       	jz %d3,80008e2a <osEE_tc_core0_start+0x462>
80008e20:	1b 0f fc ff 	addi %d15,%d15,-64
80008e24:	fc f4       	loop %a15,80008e0c <osEE_tc_core0_start+0x444>
80008e26:	1d ff e4 fe 	j 80008bee <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80008e2a:	cd c2 e3 0f 	mtcr $lcx,%d2
80008e2e:	0d 00 c0 04 	isync 
80008e32:	3c f7       	j 80008e20 <osEE_tc_core0_start+0x458>

80008e34 <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
80008e34:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80008e36:	91 00 00 f7 	movh.a %a15,28672
80008e3a:	19 ff a8 f0 	ld.w %d15,[%a15]3048 <70000be8 <osEE_tc_stm_freq_khz>>
80008e3e:	3b 80 3e 20 	mov %d2,1000
80008e42:	3f 2f 0c 80 	jlt.u %d15,%d2,80008e5a <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80008e46:	7b 20 06 21 	movh %d2,4194
80008e4a:	1b 32 dd 24 	addi %d2,%d2,19923
80008e4e:	73 2f 68 20 	mul.u %e2,%d15,%d2
80008e52:	8f a3 1f 20 	sh %d2,%d3,-6
80008e56:	e2 42       	mul %d2,%d4
80008e58:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
80008e5a:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
80008e5c:	73 f4 0a 20 	mul %d2,%d4,%d15
80008e60:	7b 20 06 31 	movh %d3,4194
80008e64:	1b 33 dd 34 	addi %d3,%d3,19923
80008e68:	73 32 68 20 	mul.u %e2,%d2,%d3
80008e6c:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
80008e70:	3f 54 0b 80 	jlt.u %d4,%d5,80008e86 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
80008e74:	7b 20 06 21 	movh %d2,4194
80008e78:	1b 32 dd 24 	addi %d2,%d2,19923
80008e7c:	73 24 68 40 	mul.u %e4,%d4,%d2
80008e80:	8f a5 1f 20 	sh %d2,%d5,-6
80008e84:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
80008e86:	00 90       	ret 

80008e88 <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
80008e88:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
80008e8a:	7b e0 e4 20 	movh %d2,3662
80008e8e:	1b 12 c0 21 	addi %d2,%d2,7169
80008e92:	0b 24 30 f1 	lt.u %d15,%d4,%d2
80008e96:	82 22       	mov %d2,2
80008e98:	ab 12 80 ff 	sel %d15,%d15,%d2,1
80008e9c:	60 f4       	mov.a %a4,%d15
80008e9e:	53 ff 20 f0 	mul %d15,%d15,15
80008ea2:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008ea4:	3b 00 01 e0 	mov %d14,16
80008ea8:	82 03       	mov %d3,0
80008eaa:	7b c0 be 20 	movh %d2,3052
80008eae:	1b 02 20 2c 	addi %d2,%d2,-15872
80008eb2:	02 28       	mov %d8,%d2
80008eb4:	82 01       	mov %d1,0
80008eb6:	82 0b       	mov %d11,0
80008eb8:	82 0d       	mov %d13,0
80008eba:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80008ebc:	7b 10 13 a0 	movh %d10,305
80008ec0:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80008ec4:	91 40 0f 60 	movh.a %a6,244
80008ec8:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
80008ecc:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80008ece:	53 14 40 60 	mul.u %e6,%d4,1
80008ed2:	60 62       	mov.a %a2,%d6
80008ed4:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80008ed6:	91 80 7d f1 	movh.a %a15,6104
80008eda:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
80008ede:	a0 1c       	mov.a %a12,1
80008ee0:	3c 5e       	j 80008f9c <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80008ee2:	4b ea 11 62 	div.u %e6,%d10,%d14
80008ee6:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80008ee8:	7b 60 f8 ff 	movh %d15,65414
80008eec:	1b 0f e0 fe 	addi %d15,%d15,-4608
80008ef0:	0b f6 40 60 	addx %d6,%d6,%d15
80008ef4:	8b f7 bf 50 	addc %d5,%d7,-1
80008ef8:	ba 05       	eq %d15,%d5,0
80008efa:	80 67       	mov.d %d7,%a6
80008efc:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80008f00:	8b 05 00 f5 	or.ne %d15,%d5,0
80008f04:	ee 4a       	jnz %d15,80008f98 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80008f06:	df 00 56 00 	jeq %d0,0,80008fb2 <osEE_tc_set_pll_fsource+0x12a>
80008f0a:	02 e9       	mov %d9,%d14
80008f0c:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008f0e:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80008f10:	80 2f       	mov.d %d15,%a2
80008f12:	73 f0 68 60 	mul.u %e6,%d0,%d15
80008f16:	80 3f       	mov.d %d15,%a3
80008f18:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80008f1c:	7b 80 82 fe 	movh %d15,59432
80008f20:	1b 0f c0 f7 	addi %d15,%d15,31744
80008f24:	0b f6 40 60 	addx %d6,%d6,%d15
80008f28:	8b f7 bf 50 	addc %d5,%d7,-1
80008f2c:	ba 05       	eq %d15,%d5,0
80008f2e:	80 f7       	mov.d %d7,%a15
80008f30:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80008f34:	8b 05 00 f5 	or.ne %d15,%d5,0
80008f38:	ee 25       	jnz %d15,80008f82 <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
80008f3a:	0f 23 a0 f0 	or %d15,%d3,%d2
80008f3e:	6e 2d       	jz %d15,80008f98 <osEE_tc_set_pll_fsource+0x110>
80008f40:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
80008f42:	4b 96 11 22 	div.u %e2,%d6,%d9
80008f46:	02 2f       	mov %d15,%d2
80008f48:	e2 af       	mul %d15,%d10
80008f4a:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80008f4c:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008f50:	df 0f ac 00 	jeq %d15,0,800090a8 <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
80008f54:	0b 13 00 51 	eq %d5,%d3,%d1
80008f58:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80008f5c:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
80008f60:	ab 01 80 15 	sel %d1,%d5,%d1,0
80008f64:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
80008f68:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
80008f6c:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
80008f70:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
80008f72:	8b 16 68 52 	lt.u %d5,%d6,129
80008f76:	8b 0f 20 54 	and.ne %d5,%d15,0
80008f7a:	df 05 e4 ff 	jne %d5,0,80008f42 <osEE_tc_set_pll_fsource+0xba>
80008f7e:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008f80:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
80008f82:	80 4f       	mov.d %d15,%a4
80008f84:	42 f0       	add %d0,%d15
80008f86:	80 56       	mov.d %d6,%a5
80008f88:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
80008f8a:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
80008f8e:	8b d0 61 f2 	lt.u %d15,%d0,29
80008f92:	8b 05 20 f4 	and.ne %d15,%d5,0
80008f96:	ee bd       	jnz %d15,80008f10 <osEE_tc_set_pll_fsource+0x88>
80008f98:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008f9c:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
80008f9e:	0f 32 a0 f0 	or %d15,%d2,%d3
80008fa2:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
80008fa6:	8b 0e 20 52 	ne %d5,%d14,0
80008faa:	8b 0f 20 54 	and.ne %d5,%d15,0
80008fae:	df 05 9a ff 	jne %d5,0,80008ee2 <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
80008fb2:	06 14       	sh %d4,1
80008fb4:	7b c0 1e f5 	movh %d15,20972
80008fb8:	1b ff 51 f8 	addi %d15,%d15,-31457
80008fbc:	73 f4 68 40 	mul.u %e4,%d4,%d15
80008fc0:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
80008fc4:	ba 01       	eq %d15,%d1,0
80008fc6:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
80008fca:	8b 01 00 f5 	or.ne %d15,%d1,0
80008fce:	ee 73       	jnz %d15,800090b4 <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
80008fd0:	c2 fc       	add %d12,-1
80008fd2:	91 30 00 ff 	movh.a %a15,61443
80008fd6:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008fda:	4c f0       	ld.w %d15,[%a15]0
80008fdc:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
80008fe0:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
80008fe2:	91 30 00 ff 	movh.a %a15,61443
80008fe6:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008fea:	4c f0       	ld.w %d15,[%a15]0
80008fec:	6f 5f ff 7f 	jz.t %d15,5,80008fea <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
80008ff0:	91 30 00 ff 	movh.a %a15,61443
80008ff4:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008ff8:	4c f0       	ld.w %d15,[%a15]0
80008ffa:	96 01       	or %d15,1
80008ffc:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
80008ffe:	91 30 00 ff 	movh.a %a15,61443
80009002:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009006:	4c f0       	ld.w %d15,[%a15]0
80009008:	6f 0f ff 7f 	jz.t %d15,0,80009006 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
8000900c:	9a fb       	add %d15,%d11,-1
8000900e:	91 30 00 ff 	movh.a %a15,61443
80009012:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009016:	16 0f       	and %d15,15
80009018:	8f 8f 01 f0 	sh %d15,%d15,24
8000901c:	48 02       	ld.w %d2,[%a15]0
8000901e:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80009022:	a6 2f       	or %d15,%d2
80009024:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009026:	9a fd       	add %d15,%d13,-1
80009028:	16 7f       	and %d15,127
8000902a:	8f 9f 00 f0 	sh %d15,%d15,9
8000902e:	48 02       	ld.w %d2,[%a15]0
80009030:	b7 02 87 24 	insert %d2,%d2,0,9,7
80009034:	a6 2f       	or %d15,%d2
80009036:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80009038:	4c f0       	ld.w %d15,[%a15]0
8000903a:	8f 2f c0 f1 	andn %d15,%d15,2
8000903e:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
80009040:	4c f0       	ld.w %d15,[%a15]0
80009042:	96 40       	or %d15,64
80009044:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009046:	4c f0       	ld.w %d15,[%a15]0
80009048:	96 20       	or %d15,32
8000904a:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
8000904c:	91 30 00 ff 	movh.a %a15,61443
80009050:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009054:	4c f0       	ld.w %d15,[%a15]0
80009056:	6f 3f ff ff 	jnz.t %d15,3,80009054 <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
8000905a:	91 30 00 ff 	movh.a %a15,61443
8000905e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009062:	4c f0       	ld.w %d15,[%a15]0
80009064:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80009068:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
8000906a:	91 30 00 ff 	movh.a %a15,61443
8000906e:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009072:	4c f0       	ld.w %d15,[%a15]0
80009074:	6f 2f ff 7f 	jz.t %d15,2,80009072 <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
80009078:	91 30 00 ff 	movh.a %a15,61443
8000907c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009080:	4c f0       	ld.w %d15,[%a15]0
80009082:	8f 1f c0 f1 	andn %d15,%d15,1
80009086:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
80009088:	91 30 00 ff 	movh.a %a15,61443
8000908c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009090:	4c f0       	ld.w %d15,[%a15]0
80009092:	6f 0f ff ff 	jnz.t %d15,0,80009090 <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
80009096:	91 30 00 ff 	movh.a %a15,61443
8000909a:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000909e:	4c f0       	ld.w %d15,[%a15]0
800090a0:	8f 0f c4 f1 	andn %d15,%d15,64
800090a4:	68 0f       	st.w [%a15]0,%d15
800090a6:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
800090a8:	02 28       	mov %d8,%d2
800090aa:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800090ac:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800090ae:	02 0c       	mov %d12,%d0
800090b0:	1d ff 68 ff 	j 80008f80 <osEE_tc_set_pll_fsource+0xf8>
800090b4:	00 90       	ret 

800090b6 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
800090b6:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
800090b8:	91 30 00 ff 	movh.a %a15,61443
800090bc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800090c0:	4c f0       	ld.w %d15,[%a15]0
800090c2:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
800090c6:	7b 60 5f 20 	movh %d2,1526
800090ca:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
800090ce:	6e 45       	jz %d15,80009158 <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
800090d0:	91 30 00 ff 	movh.a %a15,61443
800090d4:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800090d8:	4c f0       	ld.w %d15,[%a15]0
800090da:	6f 0f 11 00 	jz.t %d15,0,800090fc <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
800090de:	91 30 00 ff 	movh.a %a15,61443
800090e2:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800090e6:	48 02       	ld.w %d2,[%a15]0
800090e8:	37 02 67 28 	extr.u %d2,%d2,16,7
800090ec:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
800090ee:	7b 10 13 f0 	movh %d15,305
800090f2:	1b 0f d0 f2 	addi %d15,%d15,11520
800090f6:	4b 2f 11 22 	div.u %e2,%d15,%d2
800090fa:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
800090fc:	4c f0       	ld.w %d15,[%a15]0
800090fe:	6f 3f 11 00 	jz.t %d15,3,80009120 <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009102:	91 30 00 ff 	movh.a %a15,61443
80009106:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000910a:	48 02       	ld.w %d2,[%a15]0
8000910c:	8f f2 07 21 	and %d2,%d2,127
80009110:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80009112:	7b 10 13 20 	movh %d2,305
80009116:	1b 02 d0 22 	addi %d2,%d2,11520
8000911a:	4b f2 11 22 	div.u %e2,%d2,%d15
8000911e:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009120:	91 30 00 ff 	movh.a %a15,61443
80009124:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009128:	4c f0       	ld.w %d15,[%a15]0
8000912a:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
8000912e:	91 30 00 ff 	movh.a %a15,61443
80009132:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009136:	4c f0       	ld.w %d15,[%a15]0
80009138:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
8000913c:	48 02       	ld.w %d2,[%a15]0
8000913e:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009142:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
80009144:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80009148:	7b 10 13 20 	movh %d2,305
8000914c:	1b 02 d0 22 	addi %d2,%d2,11520
80009150:	4b f2 11 22 	div.u %e2,%d2,%d15
80009154:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
80009158:	00 90       	ret 

8000915a <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
8000915a:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
8000915c:	6d ff ad ff 	call 800090b6 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
80009160:	91 30 00 ff 	movh.a %a15,61443
80009164:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80009168:	4c f0       	ld.w %d15,[%a15]0
8000916a:	37 0f 64 f4 	extr.u %d15,%d15,8,4
8000916e:	c2 12       	add %d2,1
80009170:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
80009174:	7b 20 06 f1 	movh %d15,4194
80009178:	1b 3f dd f4 	addi %d15,%d15,19923
8000917c:	73 f2 68 20 	mul.u %e2,%d2,%d15
80009180:	8f a3 1f f0 	sh %d15,%d3,-6
80009184:	91 00 00 f7 	movh.a %a15,28672
80009188:	59 ff a8 f0 	st.w [%a15]3048 <70000be8 <osEE_tc_stm_freq_khz>>,%d15
8000918c:	00 90       	ret 

8000918e <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
8000918e:	40 ae       	mov.aa %a14,%sp
80009190:	02 59       	mov %d9,%d5
80009192:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009196:	6d ff 4f fe 	call 80008e34 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
8000919a:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
8000919e:	8f 38 00 f1 	and %d15,%d8,3
800091a2:	9b 0f 0f 40 	addih %d4,%d15,240
800091a6:	8f 84 00 40 	sh %d4,%d4,8
800091aa:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
800091ac:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800091ae:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800091b0:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800091b2:	df 09 23 00 	jeq %d9,0,800091f8 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
800091b6:	48 e2       	ld.w %d2,[%a15]56
800091b8:	b7 02 05 24 	insert %d2,%d2,0,8,5
800091bc:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800091be:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
800091c2:	48 e2       	ld.w %d2,[%a15]56
800091c4:	37 32 05 30 	insert %d3,%d2,%d3,0,5
800091c8:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
800091ca:	48 f2       	ld.w %d2,[%a15]60
800091cc:	8f 42 c0 21 	andn %d2,%d2,4
800091d0:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
800091d2:	48 f2       	ld.w %d2,[%a15]60
800091d4:	8f 12 40 21 	or %d2,%d2,1
800091d8:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
800091da:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800091dc:	60 f2       	mov.a %a2,%d15
800091de:	d9 2f 50 28 	lea %a15,[%a2]-31600
800091e2:	11 4f 00 ff 	addih.a %a15,%a15,61444
800091e6:	b7 89 99 93 	insert %d9,%d9,8,7,25
800091ea:	8f 38 00 81 	and %d8,%d8,3
800091ee:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800091f2:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800091f4:	68 09       	st.w [%a15]0,%d9
800091f6:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
800091f8:	48 f2       	ld.w %d2,[%a15]60
800091fa:	8f 12 c0 21 	andn %d2,%d2,1
800091fe:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
80009200:	1b 2f 09 f7 	addi %d15,%d15,28818
80009204:	9b 0f e0 f1 	addih %d15,%d15,7680
80009208:	06 3f       	sh %d15,3
8000920a:	82 02       	mov %d2,0
8000920c:	60 ff       	mov.a %a15,%d15
8000920e:	68 02       	st.w [%a15]0,%d2
80009210:	00 90       	ret 

80009212 <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
80009212:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009214:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
80009218:	6d ff 0e fe 	call 80008e34 <osEE_tc_stm_us_ticks>
8000921c:	16 03       	and %d15,3
8000921e:	9b 0f 0f f0 	addih %d15,%d15,240
80009222:	8f 8f 00 f0 	sh %d15,%d15,8
80009226:	60 ff       	mov.a %a15,%d15
80009228:	4c fc       	ld.w %d15,[%a15]48
8000922a:	42 f2       	add %d2,%d15
8000922c:	68 c2       	st.w [%a15]48,%d2
8000922e:	00 90       	ret 

80009230 <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
80009230:	40 ae       	mov.aa %a14,%sp
80009232:	02 59       	mov %d9,%d5
80009234:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009238:	6d ff fe fd 	call 80008e34 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
8000923c:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80009240:	8f 38 00 f1 	and %d15,%d8,3
80009244:	9b 0f 0f 40 	addih %d4,%d15,240
80009248:	8f 84 00 40 	sh %d4,%d4,8
8000924c:	60 4f       	mov.a %a15,%d4
8000924e:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80009250:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80009252:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80009254:	df 09 28 00 	jeq %d9,0,800092a4 <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
80009258:	48 e2       	ld.w %d2,[%a15]56
8000925a:	b7 02 05 2c 	insert %d2,%d2,0,24,5
8000925e:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80009260:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
80009264:	8f f3 01 31 	and %d3,%d3,31
80009268:	8f 03 01 30 	sh %d3,%d3,16
8000926c:	48 e2       	ld.w %d2,[%a15]56
8000926e:	b7 02 05 28 	insert %d2,%d2,0,16,5
80009272:	a6 23       	or %d3,%d2
80009274:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
80009276:	48 f2       	ld.w %d2,[%a15]60
80009278:	8f 02 44 21 	or %d2,%d2,64
8000927c:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
8000927e:	48 f2       	ld.w %d2,[%a15]60
80009280:	8f 02 41 21 	or %d2,%d2,16
80009284:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
80009286:	06 3f       	sh %d15,3
80009288:	60 f2       	mov.a %a2,%d15
8000928a:	d9 2f 54 28 	lea %a15,[%a2]-31596
8000928e:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009292:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009296:	8f 38 00 81 	and %d8,%d8,3
8000929a:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000929e:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800092a0:	68 09       	st.w [%a15]0,%d9
800092a2:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
800092a4:	48 f2       	ld.w %d2,[%a15]60
800092a6:	8f 02 c1 21 	andn %d2,%d2,16
800092aa:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
800092ac:	06 3f       	sh %d15,3
800092ae:	60 f2       	mov.a %a2,%d15
800092b0:	d9 2f 54 28 	lea %a15,[%a2]-31596
800092b4:	11 4f 00 ff 	addih.a %a15,%a15,61444
800092b8:	82 0f       	mov %d15,0
800092ba:	68 0f       	st.w [%a15]0,%d15
800092bc:	00 90       	ret 

800092be <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
800092be:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
800092c0:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
800092c4:	6d ff b8 fd 	call 80008e34 <osEE_tc_stm_us_ticks>
800092c8:	16 03       	and %d15,3
800092ca:	9b 0f 0f f0 	addih %d15,%d15,240
800092ce:	8f 8f 00 f0 	sh %d15,%d15,8
800092d2:	60 ff       	mov.a %a15,%d15
800092d4:	4c fd       	ld.w %d15,[%a15]52
800092d6:	42 f2       	add %d2,%d15
800092d8:	68 d2       	st.w [%a15]52,%d2
800092da:	00 90       	ret 

800092dc <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
800092dc:	40 ae       	mov.aa %a14,%sp
800092de:	4d c0 e1 ff 	mfcr %d15,$core_id
800092e2:	16 03       	and %d15,3
800092e4:	9b 0f 0f f0 	addih %d15,%d15,240
800092e8:	8f 8f 00 f0 	sh %d15,%d15,8
800092ec:	60 f2       	mov.a %a2,%d15
800092ee:	d9 2f 10 00 	lea %a15,[%a2]16
800092f2:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
800092f6:	6d ff 9f fd 	call 80008e34 <osEE_tc_stm_us_ticks>
800092fa:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
800092fc:	a2 8f       	sub %d15,%d8
800092fe:	3f 2f fe ff 	jlt.u %d15,%d2,800092fa <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
80009302:	00 90       	ret 

80009304 <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
80009304:	40 ae       	mov.aa %a14,%sp
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
80009306:	6d 00 87 05 	call 80009e14 <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
8000930a:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000930e:	00 80       	rfe 
80009310:	00 90       	ret 
	...

80009314 <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
80009314:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009316:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009318:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
8000931c:	82 32       	mov %d2,3
8000931e:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
80009322:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
80009326:	5e 25       	jne %d15,2,80009330 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009328:	99 44 04 00 	ld.a %a4,[%a4]4
8000932c:	6d 00 89 06 	call 8000a03e <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
80009330:	3c 00       	j 80009330 <osEE_shutdown_os+0x1c>

80009332 <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
80009332:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009334:	91 00 00 f8 	movh.a %a15,32768
80009338:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
8000933c:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
80009340:	82 1f       	mov %d15,1
80009342:	e9 ff 1e 00 	st.b [%a15]30,%d15
80009346:	00 90       	ret 

80009348 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
80009348:	40 ae       	mov.aa %a14,%sp
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000934a:	91 00 00 f8 	movh.a %a15,32768
8000934e:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
80009352:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <800000d4 <osEE_cdb_var>>
80009356:	6e 06       	jz %d15,80009362 <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
80009358:	82 0f       	mov %d15,0
8000935a:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000935e:	0d 00 00 03 	enable 
80009362:	00 90       	ret 

80009364 <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
80009364:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009366:	91 00 00 f8 	movh.a %a15,32768
8000936a:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
8000936e:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000d4 <osEE_cdb_var>>
80009372:	ee 0c       	jnz %d15,8000938a <SuspendAllInterrupts+0x26>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009374:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009378:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
8000937c:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
8000937e:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009382:	c2 1f       	add %d15,1
80009384:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009388:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
8000938a:	8b ff 0f 22 	eq %d2,%d15,255
8000938e:	f6 25       	jnz %d2,80009398 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
80009390:	c2 1f       	add %d15,1
80009392:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009396:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009398:	91 00 00 48 	movh.a %a4,32768
8000939c:	d9 44 14 30 	lea %a4,[%a4]212 <800000d4 <osEE_cdb_var>>
800093a0:	3b 90 01 40 	mov %d4,25
800093a4:	3c b8       	j 80009314 <osEE_shutdown_os>

800093a6 <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
800093a6:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800093a8:	91 00 00 f8 	movh.a %a15,32768
800093ac:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
800093b0:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000d4 <osEE_cdb_var>>
800093b4:	6e 0b       	jz %d15,800093ca <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
800093b6:	c2 ff       	add %d15,-1
800093b8:	16 ff       	and %d15,255
800093ba:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
800093be:	ee 06       	jnz %d15,800093ca <ResumeAllInterrupts+0x24>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800093c0:	4c f5       	ld.w %d15,[%a15]20
800093c2:	cd cf e2 0f 	mtcr $icr,%d15
800093c6:	0d 00 c0 04 	isync 
800093ca:	00 90       	ret 

800093cc <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
800093cc:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800093ce:	91 00 00 f8 	movh.a %a15,32768
800093d2:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
800093d6:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000d4 <osEE_cdb_var>>
800093da:	ee 18       	jnz %d15,8000940a <SuspendOSInterrupts+0x3e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800093dc:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800093e0:	8f f2 0f f1 	and %d15,%d2,255
800093e4:	8b 3f a1 f2 	ge.u %d15,%d15,19
800093e8:	ee 0a       	jnz %d15,800093fc <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
800093ea:	02 2f       	mov %d15,%d2
800093ec:	3b 30 01 30 	mov %d3,19
800093f0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800093f4:	cd cf e2 0f 	mtcr $icr,%d15
800093f8:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
800093fc:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
800093fe:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009402:	c2 1f       	add %d15,1
80009404:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009408:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
8000940a:	8b ff 0f 22 	eq %d2,%d15,255
8000940e:	f6 25       	jnz %d2,80009418 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
80009410:	c2 1f       	add %d15,1
80009412:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009416:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009418:	91 00 00 48 	movh.a %a4,32768
8000941c:	d9 44 14 30 	lea %a4,[%a4]212 <800000d4 <osEE_cdb_var>>
80009420:	3b 90 01 40 	mov %d4,25
80009424:	1d ff 78 ff 	j 80009314 <osEE_shutdown_os>

80009428 <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
80009428:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000942a:	91 00 00 f8 	movh.a %a15,32768
8000942e:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
80009432:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000d4 <osEE_cdb_var>>
80009436:	6e 16       	jz %d15,80009462 <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
80009438:	c2 ff       	add %d15,-1
8000943a:	16 ff       	and %d15,255
8000943c:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009440:	ee 11       	jnz %d15,80009462 <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
80009442:	48 62       	ld.w %d2,[%a15]24
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009444:	4d c0 e2 3f 	mfcr %d3,$icr
80009448:	02 3f       	mov %d15,%d3
8000944a:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000944e:	8f f2 0f 21 	and %d2,%d2,255
80009452:	5f 23 08 00 	jeq %d3,%d2,80009462 <ResumeOSInterrupts+0x3a>
80009456:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000945a:	cd cf e2 0f 	mtcr $icr,%d15
8000945e:	0d 00 c0 04 	isync 
80009462:	00 90       	ret 

80009464 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
80009464:	40 ae       	mov.aa %a14,%sp
80009466:	02 49       	mov %d9,%d4
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009468:	91 00 00 f8 	movh.a %a15,32768
8000946c:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009470:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009474:	8f f8 0f f1 	and %d15,%d8,255
80009478:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000947c:	ee 0a       	jnz %d15,80009490 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
8000947e:	02 8f       	mov %d15,%d8
80009480:	3b 30 01 20 	mov %d2,19
80009484:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009488:	cd cf e2 0f 	mtcr $icr,%d15
8000948c:	0d 00 c0 04 	isync 
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
80009490:	39 ff 10 00 	ld.bu %d15,[%a15]16
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
80009494:	82 15       	mov %d5,1
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
80009496:	ee 21       	jnz %d15,800094d8 <StartOS+0x74>
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
80009498:	6d 00 e6 05 	call 8000a064 <osEE_cpu_startos>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
8000949c:	3b 80 01 50 	mov %d5,24
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800094a0:	df 02 1c 00 	jeq %d2,0,800094d8 <StartOS+0x74>
800094a4:	3c 24       	j 800094ec <StartOS+0x88>
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
800094a6:	82 2f       	mov %d15,2
800094a8:	e9 ff 10 00 	st.b [%a15]16,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
800094ac:	39 ff 10 00 	ld.bu %d15,[%a15]16
800094b0:	5e 2a       	jne %d15,2,800094c4 <StartOS+0x60>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
800094b2:	40 c4       	mov.aa %a4,%a12
800094b4:	99 c5 04 00 	ld.a %a5,[%a12]4
800094b8:	40 56       	mov.aa %a6,%a5
800094ba:	6d 00 3a 06 	call 8000a12e <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
800094be:	40 c4       	mov.aa %a4,%a12
800094c0:	6d 00 8a 04 	call 80009dd4 <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800094c4:	0d 00 40 03 	disable 
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
800094c8:	3c 00       	j 800094c8 <StartOS+0x64>
800094ca:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800094ce:	cd cf e2 0f 	mtcr $icr,%d15
800094d2:	0d 00 c0 04 	isync 
800094d6:	3c 1b       	j 8000950c <StartOS+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800094d8:	4d c0 e2 4f 	mfcr %d4,$icr
800094dc:	02 4f       	mov %d15,%d4
800094de:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800094e2:	8f f8 0f 31 	and %d3,%d8,255
800094e6:	5f 34 f2 ff 	jne %d4,%d3,800094ca <StartOS+0x66>
800094ea:	3c 11       	j 8000950c <StartOS+0xa8>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
800094ec:	91 00 00 28 	movh.a %a2,32768
800094f0:	d9 22 14 30 	lea %a2,[%a2]212 <800000d4 <osEE_cdb_var>>
800094f4:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
800094f8:	82 1f       	mov %d15,1
800094fa:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
800094fe:	e9 f9 11 00 	st.b [%a15]17,%d9
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
80009502:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009506:	df 1f d3 ff 	jne %d15,1,800094ac <StartOS+0x48>
8000950a:	3c ce       	j 800094a6 <StartOS+0x42>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
8000950c:	02 52       	mov %d2,%d5
8000950e:	00 90       	ret 

80009510 <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009510:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009512:	91 00 00 f8 	movh.a %a15,32768
80009516:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
8000951a:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000d4 <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
8000951e:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009522:	6e 03       	jz %d15,80009528 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009524:	39 f2 11 00 	ld.bu %d2,[%a15]17
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009528:	00 90       	ret 

8000952a <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
8000952a:	40 ae       	mov.aa %a14,%sp
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000952c:	91 00 00 f8 	movh.a %a15,32768
80009530:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009534:	4c f2       	ld.w %d15,[%a15]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009536:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009538:	7f f4 39 80 	jge.u %d4,%d15,800095aa <ActivateTask+0x80>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000953c:	91 00 00 f8 	movh.a %a15,32768
80009540:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009544:	c8 1f       	ld.a %a15,[%a15]4
80009546:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000954a:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
8000954c:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009550:	ff 2f 2d 80 	jge.u %d15,2,800095aa <ActivateTask+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009554:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009558:	8f f9 0f f1 	and %d15,%d9,255
8000955c:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009560:	ee 0a       	jnz %d15,80009574 <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
80009562:	02 9f       	mov %d15,%d9
80009564:	3b 30 01 20 	mov %d2,19
80009568:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000956c:	cd cf e2 0f 	mtcr $icr,%d15
80009570:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
80009574:	40 f4       	mov.aa %a4,%a15
80009576:	6d 00 23 04 	call 80009dbc <osEE_task_activated>
8000957a:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
8000957c:	f6 28       	jnz %d2,8000958c <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
8000957e:	91 00 00 48 	movh.a %a4,32768
80009582:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
80009586:	40 f5       	mov.aa %a5,%a15
80009588:	6d 00 57 04 	call 80009e36 <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000958c:	4d c0 e2 3f 	mfcr %d3,$icr
80009590:	02 3f       	mov %d15,%d3
80009592:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009596:	8f f9 0f 21 	and %d2,%d9,255
8000959a:	5f 23 08 00 	jeq %d3,%d2,800095aa <ActivateTask+0x80>
8000959e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800095a2:	cd cf e2 0f 	mtcr $icr,%d15
800095a6:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
800095aa:	02 82       	mov %d2,%d8
800095ac:	00 90       	ret 

800095ae <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
800095ae:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
800095b0:	91 00 00 f8 	movh.a %a15,32768
800095b4:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
800095b8:	48 03       	ld.w %d3,[%a15]0
800095ba:	91 00 00 28 	movh.a %a2,32768
800095be:	d9 22 00 30 	lea %a2,[%a2]192 <800000c0 <osEE_kdb_var>>
800095c2:	4c 22       	ld.w %d15,[%a2]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
800095c4:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
800095c6:	7f f4 5e 80 	jge.u %d4,%d15,80009682 <ChainTask+0xd4>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
800095ca:	91 00 00 28 	movh.a %a2,32768
800095ce:	d9 22 00 30 	lea %a2,[%a2]192 <800000c0 <osEE_kdb_var>>
800095d2:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
800095d6:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
800095da:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800095dc:	39 cf 14 00 	ld.bu %d15,[%a12]20
800095e0:	ff 2f 51 80 	jge.u %d15,2,80009682 <ChainTask+0xd4>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
800095e4:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800095e8:	6e 09       	jz %d15,800095fa <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
800095ea:	82 0f       	mov %d15,0
800095ec:	e9 ff 1c 00 	st.b [%a15]28,%d15
800095f0:	4c f5       	ld.w %d15,[%a15]20
800095f2:	cd cf e2 0f 	mtcr $icr,%d15
800095f6:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
800095fa:	39 ff 1e 00 	ld.bu %d15,[%a15]30
800095fe:	6e 06       	jz %d15,8000960a <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009600:	82 0f       	mov %d15,0
80009602:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009606:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000960a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000960e:	8f f8 0f f1 	and %d15,%d8,255
80009612:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009616:	ee 0a       	jnz %d15,8000962a <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009618:	02 8f       	mov %d15,%d8
8000961a:	3b 30 01 20 	mov %d2,19
8000961e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009622:	cd cf e2 0f 	mtcr $icr,%d15
80009626:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
8000962a:	80 cf       	mov.d %d15,%a12
8000962c:	7e 35       	jne %d15,%d3,80009636 <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
8000962e:	cc c3       	ld.a %a15,[%a12]12
80009630:	82 5f       	mov %d15,5
80009632:	28 2f       	st.b [%a15]2,%d15
80009634:	3c 15       	j 8000965e <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009636:	40 c4       	mov.aa %a4,%a12
80009638:	6d 00 c2 03 	call 80009dbc <osEE_task_activated>
        if (ev == E_OK) {
8000963c:	df 02 1a 80 	jne %d2,0,80009670 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009640:	91 00 00 48 	movh.a %a4,32768
80009644:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
80009648:	40 c5       	mov.aa %a5,%a12
8000964a:	6d 00 2a 04 	call 80009e9e <osEE_scheduler_task_insert>
8000964e:	3c 08       	j 8000965e <ChainTask+0xb0>
80009650:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009654:	cd cf e2 0f 	mtcr $icr,%d15
80009658:	0d 00 c0 04 	isync 
8000965c:	00 90       	ret 
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000965e:	91 00 00 f8 	movh.a %a15,32768
80009662:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
80009666:	c8 0f       	ld.a %a15,[%a15]0
80009668:	c8 14       	ld.a %a4,[%a15]4
8000966a:	a0 05       	mov.a %a5,0
8000966c:	1d 00 98 05 	j 8000a19c <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009670:	4d c0 e2 3f 	mfcr %d3,$icr
80009674:	02 3f       	mov %d15,%d3
80009676:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000967a:	8f f8 0f 81 	and %d8,%d8,255
8000967e:	5f 83 e9 ff 	jne %d3,%d8,80009650 <ChainTask+0xa2>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
80009682:	00 90       	ret 

80009684 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
80009684:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
80009686:	91 00 00 f8 	movh.a %a15,32768
8000968a:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000968e:	c8 02       	ld.a %a2,[%a15]0
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009690:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000d4 <osEE_cdb_var>>
80009694:	6e 09       	jz %d15,800096a6 <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
80009696:	82 0f       	mov %d15,0
80009698:	e9 ff 1c 00 	st.b [%a15]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000969c:	4c f5       	ld.w %d15,[%a15]20
8000969e:	cd cf e2 0f 	mtcr $icr,%d15
800096a2:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
800096a6:	39 ff 1e 00 	ld.bu %d15,[%a15]30
800096aa:	6e 06       	jz %d15,800096b6 <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
800096ac:	82 0f       	mov %d15,0
800096ae:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800096b2:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800096b6:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800096ba:	8f ff 0f 21 	and %d2,%d15,255
800096be:	8b 32 a1 22 	ge.u %d2,%d2,19
800096c2:	f6 29       	jnz %d2,800096d4 <TerminateTask+0x50>
800096c4:	3b 30 01 20 	mov %d2,19
800096c8:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800096cc:	cd cf e2 0f 	mtcr $icr,%d15
800096d0:	0d 00 c0 04 	isync 
800096d4:	99 24 04 00 	ld.a %a4,[%a2]4
800096d8:	a0 05       	mov.a %a5,0
800096da:	1d 00 61 05 	j 8000a19c <osEE_hal_terminate_ctx>

800096de <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
800096de:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
800096e0:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
800096e4:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
800096e8:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
800096ea:	c8 3c       	ld.a %a12,[%a15]12
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
800096ec:	39 c2 01 00 	ld.bu %d2,[%a12]1 <800000d4 <osEE_cdb_var>>
800096f0:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000d4 <osEE_cdb_var>>
800096f4:	5f f2 2d 80 	jne %d2,%d15,8000974e <Schedule+0x70>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800096f8:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800096fc:	8f f8 0f f1 	and %d15,%d8,255
80009700:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009704:	ee 0a       	jnz %d15,80009718 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009706:	02 8f       	mov %d15,%d8
80009708:	3b 30 01 20 	mov %d2,19
8000970c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009710:	cd cf e2 0f 	mtcr $icr,%d15
80009714:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009718:	39 ff 1c 00 	ld.bu %d15,[%a15]28
8000971c:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
8000971e:	91 00 00 48 	movh.a %a4,32768
80009722:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
80009726:	6d 00 36 04 	call 80009f92 <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
8000972a:	39 ff 1d 00 	ld.bu %d15,[%a15]29
8000972e:	2c c1       	st.b [%a12]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009730:	4d c0 e2 3f 	mfcr %d3,$icr
80009734:	02 3f       	mov %d15,%d3
80009736:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000973a:	8f f8 0f 21 	and %d2,%d8,255
8000973e:	5f 23 08 00 	jeq %d3,%d2,8000974e <Schedule+0x70>
80009742:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009746:	cd cf e2 0f 	mtcr $icr,%d15
8000974a:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
8000974e:	82 02       	mov %d2,0
80009750:	00 90       	ret 

80009752 <GetResource>:
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009752:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009754:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009758:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
8000975c:	c8 04       	ld.a %a4,[%a15]0
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
8000975e:	91 00 00 f8 	movh.a %a15,32768
80009762:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009766:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009768:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
8000976a:	7f f4 4c 80 	jge.u %d4,%d15,80009802 <GetResource+0xb0>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
8000976e:	91 00 00 f8 	movh.a %a15,32768
80009772:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009776:	c8 3f       	ld.a %a15,[%a15]12
80009778:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000977c:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
8000977e:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
80009780:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
80009782:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
80009784:	08 14       	ld.bu %d4,[%a15]1
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009786:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000978a:	8f f2 0f 31 	and %d3,%d2,255
8000978e:	8b 33 a1 32 	ge.u %d3,%d3,19
80009792:	f6 3a       	jnz %d3,800097a6 <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009794:	02 23       	mov %d3,%d2
80009796:	3b 30 01 50 	mov %d5,19
8000979a:	37 53 08 30 	insert %d3,%d3,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000979e:	cd c3 e2 0f 	mtcr $icr,%d3
800097a2:	0d 00 c0 04 	isync 
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
800097a6:	02 23       	mov %d3,%d2
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
800097a8:	7f f4 16 80 	jge.u %d4,%d15,800097d4 <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
800097ac:	28 1f       	st.b [%a15]1,%d15

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
800097ae:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
800097b2:	8b ff 2f 72 	ne %d7,%d15,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
800097b6:	16 7f       	and %d15,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
800097b8:	c2 1f       	add %d15,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
800097ba:	8f 02 d0 61 	andn %d6,%d2,256
800097be:	8f f2 cf 31 	andn %d3,%d2,255
800097c2:	a6 f3       	or %d3,%d15
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
800097c4:	8f f2 cf 21 	andn %d2,%d2,255
800097c8:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
800097cc:	8b 05 40 52 	lt %d5,%d5,0
800097d0:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
800097d4:	b5 24 08 00 	st.a [%a2]8,%a4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800097d8:	4d c0 e2 5f 	mfcr %d5,$icr
800097dc:	02 5f       	mov %d15,%d5
800097de:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800097e2:	8f f3 0f 21 	and %d2,%d3,255
800097e6:	5f 25 08 00 	jeq %d5,%d2,800097f6 <GetResource+0xa4>
800097ea:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800097ee:	cd cf e2 0f 	mtcr $icr,%d15
800097f2:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
800097f6:	4c f1       	ld.w %d15,[%a15]4
800097f8:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
800097fa:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
800097fe:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009800:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
80009802:	00 90       	ret 

80009804 <ReleaseResource>:
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009804:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009806:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
8000980a:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
8000980e:	c8 03       	ld.a %a3,[%a15]0
80009810:	91 00 00 f8 	movh.a %a15,32768
80009814:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009818:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
8000981a:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
8000981c:	7f f4 69 80 	jge.u %d4,%d15,800098ee <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009820:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009822:	91 00 00 28 	movh.a %a2,32768
80009826:	d9 22 00 30 	lea %a2,[%a2]192 <800000c0 <osEE_kdb_var>>
8000982a:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
8000982e:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009832:	d4 22       	ld.a %a2,[%a2]
80009834:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009836:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000983a:	8f ff 0f 21 	and %d2,%d15,255
8000983e:	8b 32 a1 22 	ge.u %d2,%d2,19
80009842:	f6 2a       	jnz %d2,80009856 <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009844:	02 f2       	mov %d2,%d15
80009846:	3b 30 01 30 	mov %d3,19
8000984a:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000984e:	cd c2 e2 0f 	mtcr $icr,%d2
80009852:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
80009856:	c8 14       	ld.a %a4,[%a15]4
80009858:	d4 44       	ld.a %a4,[%a4]
8000985a:	54 42       	ld.w %d2,[%a4]
8000985c:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
8000985e:	df 02 1a 00 	jeq %d2,0,80009892 <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009862:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009866:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009868:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
8000986c:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009870:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009874:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009876:	8f 0f d0 51 	andn %d5,%d15,256
8000987a:	8f ff cf 21 	andn %d2,%d15,255
8000987e:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009880:	8f ff cf f1 	andn %d15,%d15,255
80009884:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009888:	8b 04 40 42 	lt %d4,%d4,0
8000988c:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009890:	3c 17       	j 800098be <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
80009892:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009896:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009898:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
8000989c:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
800098a0:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
800098a4:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
800098a6:	8f 0f d0 21 	andn %d2,%d15,256
800098aa:	8f ff cf 31 	andn %d3,%d15,255
800098ae:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
800098b0:	8f ff cf 51 	andn %d5,%d15,255
800098b4:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
800098b8:	fa 06       	lt %d15,%d6,0
800098ba:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
800098be:	82 02       	mov %d2,0
800098c0:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
800098c4:	91 00 00 48 	movh.a %a4,32768
800098c8:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
800098cc:	6d 00 63 03 	call 80009f92 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098d0:	4d c0 e2 5f 	mfcr %d5,$icr
800098d4:	02 53       	mov %d3,%d5
800098d6:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800098da:	16 ff       	and %d15,255
800098dc:	5f f5 08 00 	jeq %d5,%d15,800098ec <ReleaseResource+0xe8>
800098e0:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098e4:	cd c3 e2 0f 	mtcr $icr,%d3
800098e8:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
800098ec:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
800098ee:	00 90       	ret 

800098f0 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
800098f0:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
800098f2:	91 00 00 f8 	movh.a %a15,32768
800098f6:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098fa:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800098fe:	8f f2 0f f1 	and %d15,%d2,255
80009902:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009906:	ee 0a       	jnz %d15,8000991a <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009908:	02 2f       	mov %d15,%d2
8000990a:	3b 30 01 30 	mov %d3,19
8000990e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009912:	cd cf e2 0f 	mtcr $icr,%d15
80009916:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
8000991a:	39 ff 10 00 	ld.bu %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
8000991e:	c2 ff       	add %d15,-1
80009920:	16 ff       	and %d15,255
80009922:	ff 2f 08 80 	jge.u %d15,2,80009932 <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009926:	91 00 00 48 	movh.a %a4,32768
8000992a:	d9 44 14 30 	lea %a4,[%a4]212 <800000d4 <osEE_cdb_var>>
8000992e:	1d ff f3 fc 	j 80009314 <osEE_shutdown_os>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009932:	4d c0 e2 3f 	mfcr %d3,$icr
80009936:	02 3f       	mov %d15,%d3
80009938:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000993c:	8f f2 0f 21 	and %d2,%d2,255
80009940:	5f 23 08 00 	jeq %d3,%d2,80009950 <ShutdownOS+0x60>
80009944:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009948:	cd cf e2 0f 	mtcr $icr,%d15
8000994c:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
80009950:	82 72       	mov %d2,7
80009952:	00 90       	ret 

80009954 <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
80009954:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009956:	91 00 00 f8 	movh.a %a15,32768
8000995a:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
8000995e:	3b e0 00 20 	mov %d2,14
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
80009962:	bd 04 24 00 	jz.a %a4,800099aa <GetTaskID+0x56>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
80009966:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009968:	39 2f 14 00 	ld.bu %d15,[%a2]20
8000996c:	ff 2f 05 80 	jge.u %d15,2,80009976 <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009970:	19 22 10 00 	ld.w %d2,[%a2]16
80009974:	3c 19       	j 800099a6 <GetTaskID+0x52>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009976:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009978:	de 27       	jne %d15,2,800099a6 <GetTaskID+0x52>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
8000997a:	c8 3f       	ld.a %a15,[%a15]12
8000997c:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
8000997e:	bd 0f 14 00 	jz.a %a15,800099a6 <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009982:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009984:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009988:	ff 2f 0b 80 	jge.u %d15,2,8000999e <GetTaskID+0x4a>
8000998c:	3c 06       	j 80009998 <GetTaskID+0x44>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
8000998e:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009990:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009994:	ff 2f 05 80 	jge.u %d15,2,8000999e <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
80009998:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
8000999c:	3c 05       	j 800099a6 <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
8000999e:	c8 0f       	ld.a %a15,[%a15]0
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
800099a0:	bd 0f f7 ff 	jnz.a %a15,8000998e <GetTaskID+0x3a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
800099a4:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
800099a6:	74 42       	st.w [%a4],%d2
    ev = E_OK;
800099a8:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
800099aa:	00 90       	ret 

800099ac <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
800099ac:	40 ae       	mov.aa %a14,%sp
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
800099ae:	3b e0 00 20 	mov %d2,14
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
800099b2:	bd 04 38 00 	jz.a %a4,80009a22 <GetTaskState+0x76>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
800099b6:	91 00 00 f8 	movh.a %a15,32768
800099ba:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
800099be:	4c f2       	ld.w %d15,[%a15]8
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
800099c0:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
800099c2:	7f f4 30 80 	jge.u %d4,%d15,80009a22 <GetTaskState+0x76>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
800099c6:	91 00 00 f8 	movh.a %a15,32768
800099ca:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
800099ce:	c8 1f       	ld.a %a15,[%a15]4
800099d0:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
800099d4:	c8 0f       	ld.a %a15,[%a15]0
800099d6:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
800099d8:	0c f2       	ld.bu %d15,[%a15]2
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
800099da:	82 02       	mov %d2,0
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
800099dc:	ff 6f 23 80 	jge.u %d15,6,80009a22 <GetTaskState+0x76>
800099e0:	91 10 00 f8 	movh.a %a15,32769
800099e4:	d9 ff ac 79 	lea %a15,[%a15]-26132 <800099ec <GetTaskState+0x40>>
800099e8:	90 ff       	addsc.a %a15,%a15,%d15,2
800099ea:	dc 0f       	ji %a15
800099ec:	1d 00 0c 00 	j 80009a04 <GetTaskState+0x58>
800099f0:	1d 00 0e 00 	j 80009a0c <GetTaskState+0x60>
800099f4:	1d 00 0c 00 	j 80009a0c <GetTaskState+0x60>
800099f8:	1d 00 0e 00 	j 80009a14 <GetTaskState+0x68>
800099fc:	1d 00 10 00 	j 80009a1c <GetTaskState+0x70>
80009a00:	1d 00 0e 00 	j 80009a1c <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009a04:	82 0f       	mov %d15,0
80009a06:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009a08:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
80009a0a:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009a0c:	82 1f       	mov %d15,1
80009a0e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009a10:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
80009a12:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009a14:	82 3f       	mov %d15,3
80009a16:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009a18:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
80009a1a:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009a1c:	82 4f       	mov %d15,4
80009a1e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009a20:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
80009a22:	00 90       	ret 

80009a24 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009a24:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
80009a26:	91 00 00 f8 	movh.a %a15,32768
80009a2a:	99 fc 14 30 	ld.a %a12,[%a15]212 <800000d4 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009a2e:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009a30:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a32:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009a36:	8f f8 0f f1 	and %d15,%d8,255
80009a3a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009a3e:	ee 0a       	jnz %d15,80009a52 <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009a40:	02 8f       	mov %d15,%d8
80009a42:	3b 30 01 20 	mov %d2,19
80009a46:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a4a:	cd cf e2 0f 	mtcr $icr,%d15
80009a4e:	0d 00 c0 04 	isync 
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
80009a52:	4c f3       	ld.w %d15,[%a15]12
80009a54:	26 4f       	and %d15,%d4
80009a56:	ee 13       	jnz %d15,80009a7c <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
80009a58:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009a5a:	91 00 00 48 	movh.a %a4,32768
80009a5e:	d9 44 14 30 	lea %a4,[%a4]212 <800000d4 <osEE_cdb_var>>
80009a62:	d9 c5 04 00 	lea %a5,[%a12]4 <800000d4 <osEE_cdb_var>>
80009a66:	6d 00 98 01 	call 80009d96 <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
80009a6a:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
80009a6c:	82 3f       	mov %d15,3
80009a6e:	28 2f       	st.b [%a15]2,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
80009a70:	40 d4       	mov.aa %a4,%a13
80009a72:	d4 c5       	ld.a %a5,[%a12]
80009a74:	6d 00 c1 02 	call 80009ff6 <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
80009a78:	82 0f       	mov %d15,0
80009a7a:	68 2f       	st.w [%a15]8,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a7c:	4d c0 e2 3f 	mfcr %d3,$icr
80009a80:	02 3f       	mov %d15,%d3
80009a82:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009a86:	8f f8 0f 21 	and %d2,%d8,255
80009a8a:	5f 23 08 00 	jeq %d3,%d2,80009a9a <WaitEvent+0x76>
80009a8e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a92:	cd cf e2 0f 	mtcr $icr,%d15
80009a96:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
80009a9a:	82 02       	mov %d2,0
80009a9c:	00 90       	ret 

80009a9e <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009a9e:	40 ae       	mov.aa %a14,%sp
80009aa0:	20 08       	sub.a %sp,8
80009aa2:	91 00 00 f8 	movh.a %a15,32768
80009aa6:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009aaa:	4c f2       	ld.w %d15,[%a15]8
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009aac:	3f f4 06 80 	jlt.u %d4,%d15,80009ab8 <SetEvent+0x1a>
    ev = E_OS_ID;
80009ab0:	82 3f       	mov %d15,3
80009ab2:	e9 ef ff ff 	st.b [%a14]-1,%d15
80009ab6:	3c 3c       	j 80009b2e <SetEvent+0x90>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009ab8:	91 00 00 f8 	movh.a %a15,32768
80009abc:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009ac0:	c8 1f       	ld.a %a15,[%a15]4
80009ac2:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009ac6:	c8 04       	ld.a %a4,[%a15]0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ac8:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009acc:	8f f8 0f f1 	and %d15,%d8,255
80009ad0:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ad4:	ee 0a       	jnz %d15,80009ae8 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
80009ad6:	02 8f       	mov %d15,%d8
80009ad8:	3b 30 01 20 	mov %d2,19
80009adc:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ae0:	cd cf e2 0f 	mtcr $icr,%d15
80009ae4:	0d 00 c0 04 	isync 
80009ae8:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
80009aea:	d9 e5 ff ff 	lea %a5,[%a14]-1
80009aee:	6d 00 82 01 	call 80009df2 <osEE_task_event_set_mask>

    if (p_sn != NULL) {
80009af2:	bc 2f       	jz.a %a2,80009b10 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
80009af4:	91 00 00 48 	movh.a %a4,32768
80009af8:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
80009afc:	40 25       	mov.aa %a5,%a2
80009afe:	6d 00 e7 01 	call 80009ecc <osEE_scheduler_task_unblocked>
80009b02:	76 27       	jz %d2,80009b10 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
80009b04:	91 00 00 48 	movh.a %a4,32768
80009b08:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
80009b0c:	6d 00 43 02 	call 80009f92 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b10:	4d c0 e2 3f 	mfcr %d3,$icr
80009b14:	02 3f       	mov %d15,%d3
80009b16:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009b1a:	8f f8 0f 21 	and %d2,%d8,255
80009b1e:	5f 23 08 00 	jeq %d3,%d2,80009b2e <SetEvent+0x90>
80009b22:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009b26:	cd cf e2 0f 	mtcr $icr,%d15
80009b2a:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009b2e:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
80009b32:	00 90       	ret 

80009b34 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
80009b34:	40 ae       	mov.aa %a14,%sp
80009b36:	91 00 00 f8 	movh.a %a15,32768
80009b3a:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009b3e:	4c f2       	ld.w %d15,[%a15]8
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009b40:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009b42:	7f f4 11 80 	jge.u %d4,%d15,80009b64 <GetEvent+0x30>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009b46:	91 00 00 f8 	movh.a %a15,32768
80009b4a:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
80009b4e:	c8 1f       	ld.a %a15,[%a15]4
80009b50:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
80009b54:	c8 0f       	ld.a %a15,[%a15]0
80009b56:	c8 3f       	ld.a %a15,[%a15]12
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
80009b58:	3b e0 00 20 	mov %d2,14
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
80009b5c:	bc 44       	jz.a %a4,80009b64 <GetEvent+0x30>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
80009b5e:	4c f3       	ld.w %d15,[%a15]12
80009b60:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
80009b62:	82 02       	mov %d2,0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009b64:	00 90       	ret 

80009b66 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009b66:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
80009b68:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009b6c:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009b70:	c8 0f       	ld.a %a15,[%a15]0
80009b72:	c8 3f       	ld.a %a15,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b74:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009b78:	8f f2 0f f1 	and %d15,%d2,255
80009b7c:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009b80:	ee 0a       	jnz %d15,80009b94 <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009b82:	02 2f       	mov %d15,%d2
80009b84:	3b 30 01 30 	mov %d3,19
80009b88:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009b8c:	cd cf e2 0f 	mtcr $icr,%d15
80009b90:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
80009b94:	4c f3       	ld.w %d15,[%a15]12
80009b96:	0f 4f e0 40 	andn %d4,%d15,%d4
80009b9a:	68 34       	st.w [%a15]12,%d4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b9c:	4d c0 e2 3f 	mfcr %d3,$icr
80009ba0:	02 3f       	mov %d15,%d3
80009ba2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009ba6:	8f f2 0f 21 	and %d2,%d2,255
80009baa:	5f 23 08 00 	jeq %d3,%d2,80009bba <ClearEvent+0x54>
80009bae:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009bb2:	cd cf e2 0f 	mtcr $icr,%d15
80009bb6:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
80009bba:	82 02       	mov %d2,0
80009bbc:	00 90       	ret 

80009bbe <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
80009bbe:	40 ae       	mov.aa %a14,%sp
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009bc0:	91 00 00 f8 	movh.a %a15,32768
80009bc4:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
80009bc8:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009bca:	39 ff 14 00 	ld.bu %d15,[%a15]20 <800000d4 <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
80009bce:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009bd0:	5e 22       	jne %d15,2,80009bd4 <GetISRID+0x16>
    isr_id = p_tdb->tid;
80009bd2:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
80009bd4:	00 90       	ret 
	...

80009bd8 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
80009bd8:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009bda:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
80009bde:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
80009be0:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009be2:	bc fb       	jz.a %a15,80009bf8 <osEE_release_all_m+0x20>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009be4:	82 0f       	mov %d15,0
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
80009be6:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009be8:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
80009bea:	7c 23       	jnz.a %a2,80009bf0 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
80009bec:	99 32 04 00 	ld.a %a2,[%a3]4
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
80009bf0:	c8 0f       	ld.a %a15,[%a15]0
80009bf2:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009bf4:	bd 0f f9 ff 	jnz.a %a15,80009be6 <osEE_release_all_m+0xe>
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
80009bf8:	00 90       	ret 

80009bfa <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
80009bfa:	40 ae       	mov.aa %a14,%sp
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009bfc:	cc 43       	ld.a %a15,[%a4]12
80009bfe:	82 4f       	mov %d15,4
80009c00:	28 2f       	st.b [%a15]2,%d15
80009c02:	00 90       	ret 

80009c04 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
80009c04:	40 ae       	mov.aa %a14,%sp
80009c06:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
80009c08:	99 42 0c 00 	ld.a %a2,[%a4]12
80009c0c:	39 22 01 00 	ld.bu %d2,[%a2]1
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009c10:	82 4f       	mov %d15,4
80009c12:	2c 22       	st.b [%a2]2,%d15
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
80009c14:	8b f2 0f f2 	eq %d15,%d2,255
80009c18:	ee 13       	jnz %d15,80009c3e <osEE_scheduler_task_wrapper_run+0x3a>
80009c1a:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
80009c1e:	37 02 48 40 	extr %d4,%d2,0,8
80009c22:	82 03       	mov %d3,0
80009c24:	ce 45       	jgez %d4,80009c2e <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
80009c26:	8f f2 07 21 	and %d2,%d2,127
80009c2a:	1b 12 00 30 	addi %d3,%d2,1
80009c2e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c32:	cd cf e2 0f 	mtcr $icr,%d15
80009c36:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009c3a:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
80009c3e:	c8 62       	ld.a %a2,[%a15]24
80009c40:	2d 02 00 00 	calli %a2
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
80009c44:	91 00 00 28 	movh.a %a2,32768
80009c48:	99 22 14 30 	ld.a %a2,[%a2]212 <800000d4 <osEE_cdb_var>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
80009c4c:	82 0f       	mov %d15,0
80009c4e:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
80009c52:	39 2f 1c 00 	ld.bu %d15,[%a2]28
80009c56:	6e 09       	jz %d15,80009c68 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
80009c58:	82 0f       	mov %d15,0
80009c5a:	e9 2f 1c 00 	st.b [%a2]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c5e:	4c 25       	ld.w %d15,[%a2]20
80009c60:	cd cf e2 0f 	mtcr $icr,%d15
80009c64:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
80009c68:	39 2f 1e 00 	ld.bu %d15,[%a2]30
80009c6c:	6e 06       	jz %d15,80009c78 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
80009c6e:	82 0f       	mov %d15,0
80009c70:	e9 2f 1e 00 	st.b [%a2]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009c74:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c78:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c7c:	8f ff 0f 21 	and %d2,%d15,255
80009c80:	8b 32 a1 22 	ge.u %d2,%d2,19
80009c84:	f6 29       	jnz %d2,80009c96 <osEE_scheduler_task_wrapper_run+0x92>
80009c86:	3b 30 01 20 	mov %d2,19
80009c8a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c8e:	cd cf e2 0f 	mtcr $icr,%d15
80009c92:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
80009c96:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009c9a:	5e 24       	jne %d15,2,80009ca2 <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
80009c9c:	40 f4       	mov.aa %a4,%a15
80009c9e:	5c 9d       	call 80009bd8 <osEE_release_all_m>
80009ca0:	3c 03       	j 80009ca6 <osEE_scheduler_task_wrapper_run+0xa2>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
80009ca2:	40 f4       	mov.aa %a4,%a15
80009ca4:	5c 9a       	call 80009bd8 <osEE_release_all_m>
80009ca6:	c8 14       	ld.a %a4,[%a15]4
80009ca8:	a0 05       	mov.a %a5,0
80009caa:	1d 00 79 02 	j 8000a19c <osEE_hal_terminate_ctx>

80009cae <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
80009cae:	40 ae       	mov.aa %a14,%sp
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009cb0:	91 00 00 f8 	movh.a %a15,32768
80009cb4:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
80009cb8:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000d4 <osEE_cdb_var>>
80009cbc:	df 2f fe 7f 	jeq %d15,2,80009cb8 <osEE_idle_hook_wrapper+0xa>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
80009cc0:	91 00 00 f8 	movh.a %a15,32768
80009cc4:	d9 ff 14 30 	lea %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
80009cc8:	c8 14       	ld.a %a4,[%a15]4
80009cca:	6d 00 ba 01 	call 8000a03e <osEE_idle_task_terminate>
80009cce:	00 90       	ret 

80009cd0 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
80009cd0:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009cd2:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
80009cd4:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
80009cd6:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
80009cda:	bd 02 13 00 	jz.a %a2,80009d00 <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
80009cde:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
80009ce2:	bd 0f 1b 00 	jz.a %a15,80009d18 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
80009ce6:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
80009cea:	c8 16       	ld.a %a6,[%a15]4
80009cec:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
80009cf0:	39 42 01 00 	ld.bu %d2,[%a4]1
80009cf4:	0c 61       	ld.bu %d15,[%a6]1
80009cf6:	7f f2 13 80 	jge.u %d2,%d15,80009d1c <osEE_scheduler_core_rq_preempt_stk+0x4c>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
80009cfa:	82 2f       	mov %d15,2
80009cfc:	2c 42       	st.b [%a4]2,%d15
80009cfe:	3c 11       	j 80009d20 <osEE_scheduler_core_rq_preempt_stk+0x50>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
80009d00:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
80009d02:	bd 0f 1e 00 	jz.a %a15,80009d3e <osEE_scheduler_core_rq_preempt_stk+0x6e>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
80009d06:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
80009d0a:	99 24 0c 00 	ld.a %a4,[%a2]12
80009d0e:	82 2f       	mov %d15,2
80009d10:	2c 42       	st.b [%a4]2,%d15
80009d12:	3c 07       	j 80009d20 <osEE_scheduler_core_rq_preempt_stk+0x50>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
80009d14:	2c 51       	st.b [%a5]1,%d15
80009d16:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
80009d18:	a0 02       	mov.a %a2,0
80009d1a:	00 90       	ret 
80009d1c:	a0 02       	mov.a %a2,0
80009d1e:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
80009d20:	4c f0       	ld.w %d15,[%a15]0
80009d22:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
80009d24:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009d26:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
80009d2a:	4c 33       	ld.w %d15,[%a3]12
80009d2c:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
80009d2e:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
80009d30:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
80009d32:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
80009d36:	39 52 01 00 	ld.bu %d2,[%a5]1
80009d3a:	3f f2 ed ff 	jlt.u %d2,%d15,80009d14 <osEE_scheduler_core_rq_preempt_stk+0x44>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
80009d3e:	00 90       	ret 

80009d40 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
80009d40:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
80009d42:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
80009d44:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
80009d46:	76 44       	jz %d4,80009d4e <osEE_sn_priority_insert+0xe>
80009d48:	39 f2 1c 00 	ld.bu %d2,[%a15]28
80009d4c:	3c 03       	j 80009d52 <osEE_sn_priority_insert+0x12>
80009d4e:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
80009d52:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
80009d54:	a0 06       	mov.a %a6,0
80009d56:	7c f3       	jnz.a %a15,80009d5c <osEE_sn_priority_insert+0x1c>
80009d58:	3c 14       	j 80009d80 <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009d5a:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
80009d5c:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
80009d5e:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
80009d62:	76 44       	jz %d4,80009d6a <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
80009d64:	39 2f 1c 00 	ld.bu %d15,[%a2]28
80009d68:	3c 02       	j 80009d6c <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
80009d6a:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
80009d6c:	3f 2f 06 80 	jlt.u %d15,%d2,80009d78 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009d70:	4c f0       	ld.w %d15,[%a15]0
80009d72:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
80009d74:	ee f3       	jnz %d15,80009d5a <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009d76:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
80009d78:	bc 64       	jz.a %a6,80009d80 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
80009d7a:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
80009d7c:	82 02       	mov %d2,0
80009d7e:	3c 03       	j 80009d84 <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
80009d80:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
80009d82:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
80009d84:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
80009d86:	00 90       	ret 

80009d88 <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
80009d88:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
80009d8a:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
80009d8e:	82 14       	mov %d4,1
80009d90:	6d ff d8 ff 	call 80009d40 <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
80009d94:	00 90       	ret 

80009d96 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
80009d96:	40 ae       	mov.aa %a14,%sp
80009d98:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
80009d9a:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
80009d9c:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
80009d9e:	4c c0       	ld.w %d15,[%a12]0
80009da0:	68 3f       	st.w [%a15]12,%d15
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
80009da2:	6d ff 97 ff 	call 80009cd0 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
80009da6:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
80009da8:	7c 28       	jnz.a %a2,80009db8 <osEE_scheduler_core_pop_running+0x22>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
80009daa:	80 d3       	mov.d %d3,%a13
80009dac:	c2 43       	add %d3,4
80009dae:	92 42       	add %d2,%d15,4
80009db0:	6a 32       	cmovn %d2,%d15,%d3
80009db2:	60 2d       	mov.a %a13,%d2
80009db4:	4c d0       	ld.w %d15,[%a13]0
80009db6:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
80009db8:	40 c2       	mov.aa %a2,%a12
80009dba:	00 90       	ret 

80009dbc <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009dbc:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
80009dbe:	cc 43       	ld.a %a15,[%a4]12
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
80009dc0:	0c f0       	ld.bu %d15,[%a15]0
80009dc2:	39 43 1e 00 	ld.bu %d3,[%a4]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
80009dc6:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
80009dc8:	7f 3f 05 80 	jge.u %d15,%d3,80009dd2 <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
80009dcc:	c2 1f       	add %d15,1
80009dce:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
80009dd0:	82 02       	mov %d2,0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
80009dd2:	00 90       	ret 

80009dd4 <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
80009dd4:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009dd6:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
80009dd8:	39 4f 1c 00 	ld.bu %d15,[%a4]28
80009ddc:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
80009dde:	0c f0       	ld.bu %d15,[%a15]0
80009de0:	c2 ff       	add %d15,-1
80009de2:	16 ff       	and %d15,255
80009de4:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
80009de6:	ee 03       	jnz %d15,80009dec <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
80009de8:	28 2f       	st.b [%a15]2,%d15
80009dea:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
80009dec:	82 1f       	mov %d15,1
80009dee:	28 2f       	st.b [%a15]2,%d15
80009df0:	00 90       	ret 

80009df2 <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
80009df2:	40 ae       	mov.aa %a14,%sp
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
80009df4:	cc 43       	ld.a %a15,[%a4]12
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
80009df6:	02 42       	mov %d2,%d4
80009df8:	02 43       	mov %d3,%d4
80009dfa:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
80009dfe:	82 0f       	mov %d15,0
80009e00:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
80009e02:	4c f2       	ld.w %d15,[%a15]8
80009e04:	26 f4       	and %d4,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
80009e06:	a0 02       	mov.a %a2,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
80009e08:	76 45       	jz %d4,80009e12 <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
80009e0a:	c8 42       	ld.a %a2,[%a15]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
80009e0c:	bc 23       	jz.a %a2,80009e12 <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
80009e0e:	82 0f       	mov %d15,0
80009e10:	68 4f       	st.w [%a15]16,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
80009e12:	00 90       	ret 

80009e14 <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
80009e14:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
80009e16:	91 00 00 48 	movh.a %a4,32768
80009e1a:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
80009e1e:	cc 41       	ld.a %a15,[%a4]4
80009e20:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009e24:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
80009e26:	cc 53       	ld.a %a15,[%a5]12
80009e28:	0c f0       	ld.bu %d15,[%a15]0
80009e2a:	c2 1f       	add %d15,1
80009e2c:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
80009e2e:	a0 06       	mov.a %a6,0
80009e30:	6d 00 c4 00 	call 80009fb8 <osEE_scheduler_task_set_running>
80009e34:	00 90       	ret 

80009e36 <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009e36:	40 ae       	mov.aa %a14,%sp
80009e38:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
80009e3a:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
80009e3e:	91 00 00 f8 	movh.a %a15,32768
80009e42:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
80009e46:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
80009e48:	99 43 0c 00 	ld.a %a3,[%a4]12 <800000d4 <osEE_cdb_var>>
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
80009e4c:	39 32 01 00 	ld.bu %d2,[%a3]1 <800000d4 <osEE_cdb_var>>
80009e50:	0c 21       	ld.bu %d15,[%a2]1
80009e52:	7f f2 15 80 	jge.u %d2,%d15,80009e7c <osEE_scheduler_task_activated+0x46>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009e56:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009e58:	4c 20       	ld.w %d15,[%a2]0
80009e5a:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009e5c:	82 02       	mov %d2,0
80009e5e:	74 22       	st.w [%a2],%d2
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
80009e60:	82 2f       	mov %d15,2
80009e62:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
80009e64:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
80009e68:	4c f3       	ld.w %d15,[%a15]12
80009e6a:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
80009e6c:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
80009e6e:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
80009e70:	cc 53       	ld.a %a15,[%a5]12
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
80009e72:	68 32       	st.w [%a15]12,%d2

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
80009e74:	6d 00 c1 00 	call 80009ff6 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
80009e78:	82 12       	mov %d2,1
80009e7a:	00 90       	ret 
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
80009e7c:	0c 22       	ld.bu %d15,[%a2]2
80009e7e:	ee 05       	jnz %d15,80009e88 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
80009e80:	82 1f       	mov %d15,1
80009e82:	2c 22       	st.b [%a2]2,%d15
80009e84:	82 0f       	mov %d15,0
80009e86:	6c 23       	st.w [%a2]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009e88:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009e8a:	4c 50       	ld.w %d15,[%a5]0
80009e8c:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009e8e:	82 0f       	mov %d15,0
80009e90:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009e92:	d9 f4 04 00 	lea %a4,[%a15]4
80009e96:	6d ff 79 ff 	call 80009d88 <osEE_scheduler_rq_insert>
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
80009e9a:	82 02       	mov %d2,0
  }

  return is_preemption;
}
80009e9c:	00 90       	ret 

80009e9e <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009e9e:	40 ae       	mov.aa %a14,%sp
80009ea0:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
80009ea2:	cc 53       	ld.a %a15,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
80009ea4:	91 00 00 28 	movh.a %a2,32768
80009ea8:	99 24 14 30 	ld.a %a4,[%a2]212 <800000d4 <osEE_cdb_var>>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
80009eac:	0c f2       	ld.bu %d15,[%a15]2
80009eae:	ee 05       	jnz %d15,80009eb8 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
80009eb0:	82 1f       	mov %d15,1
80009eb2:	28 2f       	st.b [%a15]2,%d15
80009eb4:	82 0f       	mov %d15,0
80009eb6:	68 3f       	st.w [%a15]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009eb8:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
80009ebc:	4c 50       	ld.w %d15,[%a5]0
80009ebe:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
80009ec0:	82 0f       	mov %d15,0
80009ec2:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009ec4:	b0 44       	add.a %a4,4
80009ec6:	6d ff 61 ff 	call 80009d88 <osEE_scheduler_rq_insert>

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
80009eca:	00 90       	ret 

80009ecc <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
80009ecc:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
80009ece:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
80009ed2:	cc 63       	ld.a %a15,[%a6]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
80009ed4:	91 00 00 28 	movh.a %a2,32768
80009ed8:	99 2c 14 30 	ld.a %a12,[%a2]212 <800000d4 <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
80009edc:	82 2f       	mov %d15,2
80009ede:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
80009ee0:	39 6f 1c 00 	ld.bu %d15,[%a6]28
80009ee4:	28 1f       	st.b [%a15]1,%d15
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009ee6:	d9 c4 04 00 	lea %a4,[%a12]4
80009eea:	6d ff 4f ff 	call 80009d88 <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
80009eee:	82 0f       	mov %d15,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
80009ef0:	df 12 0a 80 	jne %d2,1,80009f04 <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
80009ef4:	d4 c2       	ld.a %a2,[%a12]
80009ef6:	99 22 0c 00 	ld.a %a2,[%a2]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
80009efa:	0c f1       	ld.bu %d15,[%a15]1
80009efc:	39 22 01 00 	ld.bu %d2,[%a2]1
80009f00:	0b f2 30 f1 	lt.u %d15,%d2,%d15
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
80009f04:	02 f2       	mov %d2,%d15
80009f06:	00 90       	ret 

80009f08 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
80009f08:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009f0a:	91 00 00 f8 	movh.a %a15,32768
80009f0e:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
80009f12:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
80009f14:	99 dc 0c 00 	ld.a %a12,[%a13]12 <800000d4 <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
80009f18:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
80009f1a:	0c c2       	ld.bu %d15,[%a12]2
80009f1c:	de 4a       	jne %d15,4,80009f50 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009f1e:	91 00 00 48 	movh.a %a4,32768
80009f22:	d9 44 14 30 	lea %a4,[%a4]212 <800000d4 <osEE_cdb_var>>
80009f26:	d9 f5 04 00 	lea %a5,[%a15]4 <800000d4 <osEE_cdb_var>>
80009f2a:	6d ff 36 ff 	call 80009d96 <osEE_scheduler_core_pop_running>
80009f2e:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
80009f30:	4c f0       	ld.w %d15,[%a15]0

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
80009f32:	80 d2       	mov.d %d2,%a13
80009f34:	5f f2 06 00 	jeq %d2,%d15,80009f40 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
80009f38:	40 d4       	mov.aa %a4,%a13
80009f3a:	6d ff 4d ff 	call 80009dd4 <osEE_task_end>
80009f3e:	3c 04       	j 80009f46 <osEE_scheduler_task_terminated+0x3e>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
80009f40:	14 c2       	ld.bu %d2,[%a12]
80009f42:	c2 f2       	add %d2,-1
80009f44:	34 c2       	st.b [%a12],%d2
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
80009f46:	48 22       	ld.w %d2,[%a15]8
80009f48:	60 82       	mov.a %a2,%d8
80009f4a:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
80009f4c:	68 28       	st.w [%a15]8,%d8
80009f4e:	3c 20       	j 80009f8e <osEE_scheduler_task_terminated+0x86>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
80009f50:	c8 35       	ld.a %a5,[%a15]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
80009f52:	54 52       	ld.w %d2,[%a5]
80009f54:	68 32       	st.w [%a15]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
80009f56:	39 df 1c 00 	ld.bu %d15,[%a13]28
80009f5a:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
80009f5c:	82 1f       	mov %d15,1
80009f5e:	2c c2       	st.b [%a12]2,%d15
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
80009f60:	0c c0       	ld.bu %d15,[%a12]0
80009f62:	5e 13       	jne %d15,1,80009f68 <osEE_scheduler_task_terminated+0x60>
80009f64:	82 0f       	mov %d15,0
80009f66:	6c c3       	st.w [%a12]12,%d15
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
80009f68:	d9 fc 04 00 	lea %a12,[%a15]4
80009f6c:	40 c4       	mov.aa %a4,%a12
80009f6e:	40 d6       	mov.aa %a6,%a13
80009f70:	6d ff 0c ff 	call 80009d88 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
80009f74:	91 00 00 48 	movh.a %a4,32768
80009f78:	d9 44 14 30 	lea %a4,[%a4]212 <800000d4 <osEE_cdb_var>>
80009f7c:	40 c5       	mov.aa %a5,%a12
80009f7e:	6d ff a9 fe 	call 80009cd0 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
80009f82:	7c 25       	jnz.a %a2,80009f8c <osEE_scheduler_task_terminated+0x84>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
80009f84:	c8 32       	ld.a %a2,[%a15]12
80009f86:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
80009f88:	68 0f       	st.w [%a15]0,%d15
80009f8a:	3c 02       	j 80009f8e <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
80009f8c:	4c f0       	ld.w %d15,[%a15]0
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
80009f8e:	60 f2       	mov.a %a2,%d15
80009f90:	00 90       	ret 

80009f92 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
80009f92:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009f94:	91 00 00 48 	movh.a %a4,32768
80009f98:	99 4f 14 30 	ld.a %a15,[%a4]212 <800000d4 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
80009f9c:	d9 44 14 30 	lea %a4,[%a4]212 <800000d4 <osEE_cdb_var>>
80009fa0:	d9 f5 04 00 	lea %a5,[%a15]4 <800000d4 <osEE_cdb_var>>
80009fa4:	6d ff 96 fe 	call 80009cd0 <osEE_scheduler_core_rq_preempt_stk>

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
80009fa8:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
80009faa:	bc 26       	jz.a %a2,80009fb6 <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
80009fac:	40 24       	mov.aa %a4,%a2
80009fae:	c8 05       	ld.a %a5,[%a15]0
80009fb0:	6d 00 23 00 	call 80009ff6 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
80009fb4:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
80009fb6:	00 90       	ret 

80009fb8 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
80009fb8:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009fba:	91 00 00 f8 	movh.a %a15,32768
80009fbe:	99 ff 14 30 	ld.a %a15,[%a15]212 <800000d4 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
80009fc2:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
80009fc4:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
80009fc6:	99 42 0c 00 	ld.a %a2,[%a4]12 <800000d4 <osEE_cdb_var>>
80009fca:	0c 22       	ld.bu %d15,[%a2]2
80009fcc:	5e 43       	jne %d15,4,80009fd2 <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
80009fce:	82 2f       	mov %d15,2
80009fd0:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
80009fd2:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
80009fd4:	7c 68       	jnz.a %a6,80009fe4 <osEE_scheduler_task_set_running+0x2c>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009fd6:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009fd8:	4c 20       	ld.w %d15,[%a2]0
80009fda:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009fdc:	82 0f       	mov %d15,0
80009fde:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
80009fe0:	e8 32       	st.a [%a15]12,%a2
80009fe2:	3c 02       	j 80009fe6 <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
80009fe4:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
80009fe6:	c8 32       	ld.a %a2,[%a15]12
80009fe8:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
80009fec:	c8 3f       	ld.a %a15,[%a15]12
80009fee:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
80009ff0:	6d 00 03 00 	call 80009ff6 <osEE_change_context_from_running>
80009ff4:	00 90       	ret 

80009ff6 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
80009ff6:	40 ae       	mov.aa %a14,%sp
80009ff8:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009ffa:	99 52 0c 00 	ld.a %a2,[%a5]12
80009ffe:	0c 22       	ld.bu %d15,[%a2]2
8000a000:	5e 28       	jne %d15,2,8000a010 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000a002:	40 54       	mov.aa %a4,%a5
8000a004:	99 55 04 00 	ld.a %a5,[%a5]4
8000a008:	c8 16       	ld.a %a6,[%a15]4
8000a00a:	6d 00 73 00 	call 8000a0f0 <osEE_hal_save_ctx_and_restore_ctx>
8000a00e:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000a010:	40 54       	mov.aa %a4,%a5
8000a012:	99 55 04 00 	ld.a %a5,[%a5]4
8000a016:	c8 16       	ld.a %a6,[%a15]4
8000a018:	6d 00 8b 00 	call 8000a12e <osEE_hal_save_ctx_and_ready2stacked>
8000a01c:	00 90       	ret 

8000a01e <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a01e:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a020:	cc 53       	ld.a %a15,[%a5]12
8000a022:	0c f2       	ld.bu %d15,[%a15]2
8000a024:	5e 27       	jne %d15,2,8000a032 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000a026:	40 54       	mov.aa %a4,%a5
8000a028:	99 55 04 00 	ld.a %a5,[%a5]4
8000a02c:	6d 00 74 00 	call 8000a114 <osEE_hal_restore_ctx>
8000a030:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000a032:	40 54       	mov.aa %a4,%a5
8000a034:	99 55 04 00 	ld.a %a5,[%a5]4
8000a038:	6d 00 8d 00 	call 8000a152 <osEE_hal_ready2stacked>
8000a03c:	00 90       	ret 

8000a03e <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
8000a03e:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
8000a040:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000a044:	cc 40       	ld.a %a15,[%a4]0
8000a046:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000a048:	cc 50       	ld.a %a15,[%a5]0
8000a04a:	3c 02       	j 8000a04e <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
8000a04c:	60 ff       	mov.a %a15,%d15
8000a04e:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000a050:	8b 0f 20 22 	ne %d2,%d15,0
8000a054:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000a058:	df 02 fa ff 	jne %d2,0,8000a04c <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000a05c:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000a05e:	6d 00 5b 00 	call 8000a114 <osEE_hal_restore_ctx>
8000a062:	00 90       	ret 

8000a064 <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
8000a064:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a066:	4d c0 e1 5f 	mfcr %d5,$core_id
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
8000a06a:	91 00 00 f8 	movh.a %a15,32768
8000a06e:	d9 ff 00 30 	lea %a15,[%a15]192 <800000c0 <osEE_kdb_var>>
8000a072:	c8 2f       	ld.a %a15,[%a15]8
8000a074:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000a076:	bd 0f 2a 00 	jz.a %a15,8000a0ca <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a07a:	91 00 00 28 	movh.a %a2,32768
8000a07e:	d9 22 00 30 	lea %a2,[%a2]192 <800000c0 <osEE_kdb_var>>
8000a082:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a086:	8f 35 00 51 	and %d5,%d5,3
8000a08a:	8f b5 00 50 	sh %d5,%d5,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a08e:	bb f0 ff 4f 	mov.u %d4,65535
8000a092:	82 0f       	mov %d15,0
8000a094:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a096:	60 33       	mov.a %a3,%d3
8000a098:	90 32       	addsc.a %a2,%a3,%d15,2
8000a09a:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a09c:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a0a0:	df 22 12 80 	jne %d2,2,8000a0c4 <osEE_cpu_startos+0x60>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a0a4:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a0a8:	5f 42 0e 00 	jeq %d2,%d4,8000a0c4 <osEE_cpu_startos+0x60>
8000a0ac:	60 24       	mov.a %a4,%d2
8000a0ae:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a0b2:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a0b6:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a0ba:	c2 12       	add %d2,1
8000a0bc:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000a0c0:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a0c2:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
8000a0c4:	c2 1f       	add %d15,1
8000a0c6:	fd f0 e8 7f 	loop %a15,8000a096 <osEE_cpu_startos+0x32>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
8000a0ca:	82 12       	mov %d2,1
8000a0cc:	00 90       	ret 

8000a0ce <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a0ce:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a0d2:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a0d4:	0c 22       	ld.bu %d15,[%a2]2
8000a0d6:	1e 27       	jeq %d15,2,8000a0e4 <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
8000a0d8:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a0da:	c8 1f       	ld.a %a15,[%a15]4
8000a0dc:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000a0de:	1d 00 3a 00 	j 8000a152 <osEE_hal_ready2stacked>
8000a0e2:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
8000a0e4:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a0e6:	c8 1f       	ld.a %a15,[%a15]4
8000a0e8:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000a0ea:	1d 00 15 00 	j 8000a114 <osEE_hal_restore_ctx>
8000a0ee:	00 90       	ret 

8000a0f0 <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a0f0:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a0f2:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a0f6:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a0f8:	4c 60       	ld.w %d15,[%a6]0
8000a0fa:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a0fe:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a102:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a106:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a108:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a10c:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
8000a10e:	1d 00 03 00 	j 8000a114 <osEE_hal_restore_ctx>
8000a112:	00 90       	ret 

8000a114 <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
8000a114:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a116:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a118:	4c f2       	ld.w %d15,[%a15]8
8000a11a:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a11c:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a120:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
8000a124:	4c f0       	ld.w %d15,[%a15]0
8000a126:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
8000a128:	1d ff 69 fd 	j 80009bfa <osEE_scheduler_task_wrapper_restore>
8000a12c:	00 90       	ret 

8000a12e <osEE_hal_save_ctx_and_ready2stacked>:
8000a12e:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a130:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a134:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a136:	4c 60       	ld.w %d15,[%a6]0
8000a138:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a13c:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a140:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a144:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a146:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a14a:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
8000a14c:	1d 00 03 00 	j 8000a152 <osEE_hal_ready2stacked>
8000a150:	00 90       	ret 

8000a152 <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a152:	cc 50       	ld.a %a15,[%a5]0
8000a154:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
8000a156:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a15a:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a15c:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a160:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a162:	4c 50       	ld.w %d15,[%a5]0
8000a164:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a168:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a16c:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a170:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a172:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a176:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
8000a178:	1d ff 46 fd 	j 80009c04 <osEE_scheduler_task_wrapper_run>
8000a17c:	00 90       	ret 

8000a17e <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
8000a17e:	4d 40 e0 ff 	mfcr %d15,$psw
8000a182:	8f ff c7 f1 	andn %d15,%d15,127
8000a186:	cd 4f e0 0f 	mtcr $psw,%d15
8000a18a:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a18e:	91 10 00 f8 	movh.a %a15,32769
8000a192:	d9 ff 0e 3a 	lea %a15,[%a15]-24370 <8000a0ce <osEE_tc_change_context_from_task_end>>
8000a196:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000a198:	00 80       	rfe 
8000a19a:	00 90       	ret 

8000a19c <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
8000a19c:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
8000a19e:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a1a2:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
8000a1a6:	cc 40       	ld.a %a15,[%a4]0
8000a1a8:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a1aa:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a1ae:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a1b2:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a1b4:	8f c3 01 30 	sh %d3,%d3,28
8000a1b8:	a6 43       	or %d3,%d4
8000a1ba:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000a1bc:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000a1be:	bc f3       	jz.a %a15,8000a1c4 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a1c0:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000a1c2:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000a1c4:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a1c8:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a1cc:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a1d0:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000a1d4:	cc 40       	ld.a %a15,[%a4]0
8000a1d6:	4c f0       	ld.w %d15,[%a15]0
8000a1d8:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000a1da:	91 00 00 48 	movh.a %a4,32768
8000a1de:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <osEE_kdb_var>>
8000a1e2:	d9 a5 04 00 	lea %a5,[%sp]4 <800000c0 <osEE_kdb_var>>
8000a1e6:	6d ff 91 fe 	call 80009f08 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a1ea:	d8 01       	ld.a %a15,[%sp]4
8000a1ec:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a1f0:	1e 25       	jeq %d15,2,8000a1fa <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000a1f2:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a1f4:	1d ff 6d ff 	j 8000a0ce <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000a1f8:	3c 00       	j 8000a1f8 <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000a1fa:	40 24       	mov.aa %a4,%a2
8000a1fc:	6d ff c1 ff 	call 8000a17e <osEE_tc_change_context_from_isr2_end>
8000a200:	3c fc       	j 8000a1f8 <osEE_hal_terminate_ctx+0x5c>

8000a202 <__lshrdi3>:
8000a202:	6f 56 0c 80 	jnz.t %d6,5,8000a21a <__lshrdi3+0x18>
8000a206:	8b 06 02 71 	rsub %d7,%d6,32
8000a20a:	32 56       	rsub %d6
8000a20c:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a210:	0f 65 00 30 	sh %d3,%d5,%d6
8000a214:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a218:	00 90       	ret 
8000a21a:	8b 06 02 60 	add %d6,%d6,32
8000a21e:	32 56       	rsub %d6
8000a220:	0f 65 00 20 	sh %d2,%d5,%d6
8000a224:	82 03       	mov %d3,0
8000a226:	00 90       	ret 

8000a228 <__floatundisf>:
8000a228:	7b 00 02 20 	movh %d2,32
8000a22c:	0b 25 30 f1 	lt.u %d15,%d5,%d2
8000a230:	02 4a       	mov %d10,%d4
8000a232:	02 54       	mov %d4,%d5
8000a234:	ee 08       	jnz %d15,8000a244 <__floatundisf+0x1c>
8000a236:	b7 0a 95 f5 	insert %d15,%d10,0,11,21
8000a23a:	6e 05       	jz %d15,8000a244 <__floatundisf+0x1c>
8000a23c:	b7 0a 0b a0 	insert %d10,%d10,0,0,11
8000a240:	b7 fa 81 a5 	insert %d10,%d10,15,11,1
8000a244:	6d 00 ea 02 	call 8000a818 <__floatunsidf>
8000a248:	0b 23 10 48 	mov %e4,%d3,%d2
8000a24c:	82 06       	mov %d6,0
8000a24e:	7b 00 1f 74 	movh %d7,16880
8000a252:	6d 00 34 01 	call 8000a4ba <__muldf3>
8000a256:	02 a4       	mov %d4,%d10
8000a258:	0b 23 10 88 	mov %e8,%d3,%d2
8000a25c:	6d 00 de 02 	call 8000a818 <__floatunsidf>
8000a260:	0b 89 10 48 	mov %e4,%d9,%d8
8000a264:	0b 23 10 68 	mov %e6,%d3,%d2
8000a268:	6d 00 ed 00 	call 8000a442 <__adddf3>
8000a26c:	0b 23 10 48 	mov %e4,%d3,%d2
8000a270:	1d 00 b6 02 	j 8000a7dc <__truncdfsf2>

8000a274 <__extendsfdf2>:
8000a274:	20 20       	sub.a %sp,32
8000a276:	d9 a4 20 00 	lea %a4,[%sp]32
8000a27a:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a27e:	d9 a5 10 00 	lea %a5,[%sp]16
8000a282:	6d 00 f1 02 	call 8000a864 <__unpack_f>
8000a286:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a28a:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a28e:	8f e2 1f f0 	sh %d15,%d2,-2
8000a292:	8f e2 01 20 	sh %d2,%d2,30
8000a296:	74 a2       	st.w [%sp],%d2
8000a298:	78 01       	st.w [%sp]4,%d15
8000a29a:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a29e:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a2a2:	1d 00 8e 02 	j 8000a7be <__make_dp>

8000a2a6 <_fpadd_parts>:
8000a2a6:	0c 40       	ld.bu %d15,[%a4]0
8000a2a8:	40 42       	mov.aa %a2,%a4
8000a2aa:	bf 2f cb 80 	jlt.u %d15,2,8000a440 <_fpadd_parts+0x19a>
8000a2ae:	14 52       	ld.bu %d2,[%a5]
8000a2b0:	40 52       	mov.aa %a2,%a5
8000a2b2:	bf 22 c7 80 	jlt.u %d2,2,8000a440 <_fpadd_parts+0x19a>
8000a2b6:	5e 4e       	jne %d15,4,8000a2d2 <_fpadd_parts+0x2c>
8000a2b8:	40 42       	mov.aa %a2,%a4
8000a2ba:	df 42 c3 80 	jne %d2,4,8000a440 <_fpadd_parts+0x19a>
8000a2be:	19 42 04 00 	ld.w %d2,[%a4]4
8000a2c2:	4c 51       	ld.w %d15,[%a5]4
8000a2c4:	5f f2 be 00 	jeq %d2,%d15,8000a440 <_fpadd_parts+0x19a>
8000a2c8:	91 00 00 f8 	movh.a %a15,32768
8000a2cc:	d9 f2 f8 50 	lea %a2,[%a15]3448 <80000d78 <__thenan_df>>
8000a2d0:	00 90       	ret 
8000a2d2:	40 52       	mov.aa %a2,%a5
8000a2d4:	df 42 b6 00 	jeq %d2,4,8000a440 <_fpadd_parts+0x19a>
8000a2d8:	df 22 11 80 	jne %d2,2,8000a2fa <_fpadd_parts+0x54>
8000a2dc:	40 42       	mov.aa %a2,%a4
8000a2de:	df 2f b1 80 	jne %d15,2,8000a440 <_fpadd_parts+0x19a>
8000a2e2:	40 63       	mov.aa %a3,%a6
8000a2e4:	a0 4f       	mov.a %a15,4
8000a2e6:	44 4f       	ld.w %d15,[%a4+]
8000a2e8:	64 3f       	st.w [%a3+],%d15
8000a2ea:	fc fe       	loop %a15,8000a2e6 <_fpadd_parts+0x40>
8000a2ec:	4c 21       	ld.w %d15,[%a2]4
8000a2ee:	19 52 04 00 	ld.w %d2,[%a5]4
8000a2f2:	40 62       	mov.aa %a2,%a6
8000a2f4:	26 2f       	and %d15,%d2
8000a2f6:	6c 61       	st.w [%a6]4,%d15
8000a2f8:	00 90       	ret 
8000a2fa:	40 52       	mov.aa %a2,%a5
8000a2fc:	df 2f a2 00 	jeq %d15,2,8000a440 <_fpadd_parts+0x19a>
8000a300:	4c 42       	ld.w %d15,[%a4]8
8000a302:	19 52 08 00 	ld.w %d2,[%a5]8
8000a306:	40 6f       	mov.aa %a15,%a6
8000a308:	52 23       	sub %d3,%d15,%d2
8000a30a:	0b 30 c0 c1 	abs %d12,%d3
8000a30e:	8b 0c 84 42 	ge %d4,%d12,64
8000a312:	40 5c       	mov.aa %a12,%a5
8000a314:	40 4d       	mov.aa %a13,%a4
8000a316:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a31a:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a31e:	df 04 35 80 	jne %d4,0,8000a388 <_fpadd_parts+0xe2>
8000a322:	bf 13 19 00 	jlt %d3,1,8000a354 <_fpadd_parts+0xae>
8000a326:	0b 89 10 48 	mov %e4,%d9,%d8
8000a32a:	02 c6       	mov %d6,%d12
8000a32c:	6d ff 6b ff 	call 8000a202 <__lshrdi3>
8000a330:	d2 14       	mov %e4,1
8000a332:	02 c6       	mov %d6,%d12
8000a334:	02 2e       	mov %d14,%d2
8000a336:	02 3d       	mov %d13,%d3
8000a338:	6d 00 89 02 	call 8000a84a <__ashldi3>
8000a33c:	8b f2 9f 20 	addx %d2,%d2,-1
8000a340:	8b f3 bf 30 	addc %d3,%d3,-1
8000a344:	26 82       	and %d2,%d8
8000a346:	26 93       	and %d3,%d9
8000a348:	a6 23       	or %d3,%d2
8000a34a:	02 e8       	mov %d8,%d14
8000a34c:	8b 03 00 85 	or.ne %d8,%d3,0
8000a350:	02 d9       	mov %d9,%d13
8000a352:	3c 21       	j 8000a394 <_fpadd_parts+0xee>
8000a354:	df 03 20 00 	jeq %d3,0,8000a394 <_fpadd_parts+0xee>
8000a358:	0b ab 10 48 	mov %e4,%d11,%d10
8000a35c:	02 c6       	mov %d6,%d12
8000a35e:	6d ff 52 ff 	call 8000a202 <__lshrdi3>
8000a362:	d2 14       	mov %e4,1
8000a364:	02 c6       	mov %d6,%d12
8000a366:	02 2e       	mov %d14,%d2
8000a368:	02 3d       	mov %d13,%d3
8000a36a:	6d 00 70 02 	call 8000a84a <__ashldi3>
8000a36e:	8b f2 9f 20 	addx %d2,%d2,-1
8000a372:	8b f3 bf 30 	addc %d3,%d3,-1
8000a376:	26 a2       	and %d2,%d10
8000a378:	26 b3       	and %d3,%d11
8000a37a:	a6 23       	or %d3,%d2
8000a37c:	02 ea       	mov %d10,%d14
8000a37e:	42 cf       	add %d15,%d12
8000a380:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a384:	02 db       	mov %d11,%d13
8000a386:	3c 07       	j 8000a394 <_fpadd_parts+0xee>
8000a388:	3f f2 05 00 	jlt %d2,%d15,8000a392 <_fpadd_parts+0xec>
8000a38c:	02 2f       	mov %d15,%d2
8000a38e:	d2 0a       	mov %e10,0
8000a390:	3c 02       	j 8000a394 <_fpadd_parts+0xee>
8000a392:	d2 08       	mov %e8,0
8000a394:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a398:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a39c:	5f 24 34 00 	jeq %d4,%d2,8000a404 <_fpadd_parts+0x15e>
8000a3a0:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a3a4:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a3a8:	76 45       	jz %d4,8000a3b2 <_fpadd_parts+0x10c>
8000a3aa:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a3ae:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a3b2:	0e 37       	jltz %d3,8000a3c0 <_fpadd_parts+0x11a>
8000a3b4:	82 04       	mov %d4,0
8000a3b6:	68 14       	st.w [%a15]4,%d4
8000a3b8:	68 2f       	st.w [%a15]8,%d15
8000a3ba:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a3be:	3c 0c       	j 8000a3d6 <_fpadd_parts+0x130>
8000a3c0:	68 2f       	st.w [%a15]8,%d15
8000a3c2:	8b 03 00 f1 	rsub %d15,%d3,0
8000a3c6:	82 14       	mov %d4,1
8000a3c8:	8b 02 00 31 	rsub %d3,%d2,0
8000a3cc:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a3d0:	68 14       	st.w [%a15]4,%d4
8000a3d2:	68 33       	st.w [%a15]12,%d3
8000a3d4:	68 4f       	st.w [%a15]16,%d15
8000a3d6:	82 f5       	mov %d5,-1
8000a3d8:	06 c5       	sh %d5,-4
8000a3da:	48 32       	ld.w %d2,[%a15]12
8000a3dc:	48 43       	ld.w %d3,[%a15]16
8000a3de:	8b f2 9f 60 	addx %d6,%d2,-1
8000a3e2:	8b f3 bf 40 	addc %d4,%d3,-1
8000a3e6:	3a 54       	eq %d15,%d4,%d5
8000a3e8:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a3ec:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a3f0:	6e 12       	jz %d15,8000a414 <_fpadd_parts+0x16e>
8000a3f2:	4c f2       	ld.w %d15,[%a15]8
8000a3f4:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a3f8:	c2 ff       	add %d15,-1
8000a3fa:	06 12       	sh %d2,1
8000a3fc:	68 32       	st.w [%a15]12,%d2
8000a3fe:	68 43       	st.w [%a15]16,%d3
8000a400:	68 2f       	st.w [%a15]8,%d15
8000a402:	3c ec       	j 8000a3da <_fpadd_parts+0x134>
8000a404:	0b a8 40 20 	addx %d2,%d8,%d10
8000a408:	68 2f       	st.w [%a15]8,%d15
8000a40a:	0b b9 50 f0 	addc %d15,%d9,%d11
8000a40e:	68 14       	st.w [%a15]4,%d4
8000a410:	68 32       	st.w [%a15]12,%d2
8000a412:	68 4f       	st.w [%a15]16,%d15
8000a414:	82 3f       	mov %d15,3
8000a416:	28 0f       	st.b [%a15]0,%d15
8000a418:	4c f4       	ld.w %d15,[%a15]16
8000a41a:	7b 00 00 42 	movh %d4,8192
8000a41e:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000a422:	48 32       	ld.w %d2,[%a15]12
8000a424:	40 f2       	mov.aa %a2,%a15
8000a426:	f6 3d       	jnz %d3,8000a440 <_fpadd_parts+0x19a>
8000a428:	8f 12 00 31 	and %d3,%d2,1
8000a42c:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000a430:	06 ff       	sh %d15,-1
8000a432:	96 00       	or %d15,0
8000a434:	68 4f       	st.w [%a15]16,%d15
8000a436:	4c f2       	ld.w %d15,[%a15]8
8000a438:	a6 32       	or %d2,%d3
8000a43a:	c2 1f       	add %d15,1
8000a43c:	68 32       	st.w [%a15]12,%d2
8000a43e:	68 2f       	st.w [%a15]8,%d15
8000a440:	00 90       	ret 

8000a442 <__adddf3>:
8000a442:	20 50       	sub.a %sp,80
8000a444:	d9 a4 04 00 	lea %a4,[%sp]4
8000a448:	d9 a5 14 00 	lea %a5,[%sp]20
8000a44c:	89 a4 44 09 	st.d [%sp]4,%e4
8000a450:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a454:	6d 00 d9 02 	call 8000aa06 <__unpack_d>
8000a458:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a45c:	d9 a5 28 00 	lea %a5,[%sp]40
8000a460:	6d 00 d3 02 	call 8000aa06 <__unpack_d>
8000a464:	d9 a4 14 00 	lea %a4,[%sp]20
8000a468:	d9 a5 28 00 	lea %a5,[%sp]40
8000a46c:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a470:	6d ff 1b ff 	call 8000a2a6 <_fpadd_parts>
8000a474:	40 24       	mov.aa %a4,%a2
8000a476:	1d 00 3f 02 	j 8000a8f4 <__pack_d>

8000a47a <__subdf3>:
8000a47a:	20 50       	sub.a %sp,80
8000a47c:	d9 a4 04 00 	lea %a4,[%sp]4
8000a480:	d9 a5 14 00 	lea %a5,[%sp]20
8000a484:	89 a4 44 09 	st.d [%sp]4,%e4
8000a488:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a48c:	6d 00 bd 02 	call 8000aa06 <__unpack_d>
8000a490:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a494:	d9 a5 28 00 	lea %a5,[%sp]40
8000a498:	6d 00 b7 02 	call 8000aa06 <__unpack_d>
8000a49c:	58 0b       	ld.w %d15,[%sp]44
8000a49e:	d9 a4 14 00 	lea %a4,[%sp]20
8000a4a2:	8f 1f 80 f1 	xor %d15,%d15,1
8000a4a6:	d9 a5 28 00 	lea %a5,[%sp]40
8000a4aa:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a4ae:	78 0b       	st.w [%sp]44,%d15
8000a4b0:	6d ff fb fe 	call 8000a2a6 <_fpadd_parts>
8000a4b4:	40 24       	mov.aa %a4,%a2
8000a4b6:	1d 00 1f 02 	j 8000a8f4 <__pack_d>

8000a4ba <__muldf3>:
8000a4ba:	20 50       	sub.a %sp,80
8000a4bc:	d9 a4 04 00 	lea %a4,[%sp]4
8000a4c0:	d9 a5 14 00 	lea %a5,[%sp]20
8000a4c4:	89 a4 44 09 	st.d [%sp]4,%e4
8000a4c8:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a4cc:	6d 00 9d 02 	call 8000aa06 <__unpack_d>
8000a4d0:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a4d4:	d9 a5 28 00 	lea %a5,[%sp]40
8000a4d8:	6d 00 97 02 	call 8000aa06 <__unpack_d>
8000a4dc:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000a4e0:	ff 23 0c 80 	jge.u %d3,2,8000a4f8 <__muldf3+0x3e>
8000a4e4:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a4e8:	58 0b       	ld.w %d15,[%sp]44
8000a4ea:	d9 a4 14 00 	lea %a4,[%sp]20
8000a4ee:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a4f2:	78 06       	st.w [%sp]24,%d15
8000a4f4:	1d 00 b3 00 	j 8000a65a <__muldf3+0x1a0>
8000a4f8:	39 af 28 00 	ld.bu %d15,[%sp]40
8000a4fc:	ff 2f 0c 80 	jge.u %d15,2,8000a514 <__muldf3+0x5a>
8000a500:	58 0b       	ld.w %d15,[%sp]44
8000a502:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a506:	d9 a4 28 00 	lea %a4,[%sp]40
8000a50a:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a50e:	78 0b       	st.w [%sp]44,%d15
8000a510:	1d 00 a5 00 	j 8000a65a <__muldf3+0x1a0>
8000a514:	df 43 09 80 	jne %d3,4,8000a526 <__muldf3+0x6c>
8000a518:	91 00 00 48 	movh.a %a4,32768
8000a51c:	d9 44 f8 50 	lea %a4,[%a4]3448 <80000d78 <__thenan_df>>
8000a520:	df 2f 9d 00 	jeq %d15,2,8000a65a <__muldf3+0x1a0>
8000a524:	3c e0       	j 8000a4e4 <__muldf3+0x2a>
8000a526:	5e 48       	jne %d15,4,8000a536 <__muldf3+0x7c>
8000a528:	91 00 00 48 	movh.a %a4,32768
8000a52c:	d9 44 f8 50 	lea %a4,[%a4]3448 <80000d78 <__thenan_df>>
8000a530:	df 23 95 00 	jeq %d3,2,8000a65a <__muldf3+0x1a0>
8000a534:	3c e6       	j 8000a500 <__muldf3+0x46>
8000a536:	df 23 d7 7f 	jeq %d3,2,8000a4e4 <__muldf3+0x2a>
8000a53a:	df 2f e3 7f 	jeq %d15,2,8000a500 <__muldf3+0x46>
8000a53e:	58 08       	ld.w %d15,[%sp]32
8000a540:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000a544:	d2 00       	mov %e0,0
8000a546:	19 a0 34 00 	ld.w %d0,[%sp]52
8000a54a:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000a54e:	82 0c       	mov %d12,0
8000a550:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000a554:	19 aa 24 00 	ld.w %d10,[%sp]36
8000a558:	82 02       	mov %d2,0
8000a55a:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000a55e:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000a562:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000a566:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000a56a:	82 0d       	mov %d13,0
8000a56c:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000a570:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000a574:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000a578:	0b 54 10 08 	mov %e0,%d4,%d5
8000a57c:	42 20       	add %d0,%d2
8000a57e:	3a 73       	eq %d15,%d3,%d7
8000a580:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000a584:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000a588:	8b 0f 00 62 	eq %d6,%d15,0
8000a58c:	3a 50       	eq %d15,%d0,%d5
8000a58e:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000a592:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000a596:	ba 0f       	eq %d15,%d15,0
8000a598:	53 1f 40 40 	mul.u %e4,%d15,1
8000a59c:	02 38       	mov %d8,%d3
8000a59e:	82 09       	mov %d9,0
8000a5a0:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000a5a4:	02 5f       	mov %d15,%d5
8000a5a6:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000a5aa:	42 6f       	add %d15,%d6
8000a5ac:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000a5b0:	0b 4f 10 68 	mov %e6,%d15,%d4
8000a5b4:	0b 62 40 40 	addx %d4,%d2,%d6
8000a5b8:	0b 73 50 20 	addc %d2,%d3,%d7
8000a5bc:	58 07       	ld.w %d15,[%sp]28
8000a5be:	19 a3 30 00 	ld.w %d3,[%sp]48
8000a5c2:	19 a5 18 00 	ld.w %d5,[%sp]24
8000a5c6:	42 3f       	add %d15,%d3
8000a5c8:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000a5cc:	c2 4f       	add %d15,4
8000a5ce:	0b 35 10 31 	ne %d3,%d5,%d3
8000a5d2:	59 a3 00 10 	st.w [%sp]64,%d3
8000a5d6:	7b 00 00 52 	movh %d5,8192
8000a5da:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000a5de:	df 03 1b 00 	jeq %d3,0,8000a614 <__muldf3+0x15a>
8000a5e2:	8f 14 00 31 	and %d3,%d4,1
8000a5e6:	76 37       	jz %d3,8000a5f4 <__muldf3+0x13a>
8000a5e8:	8f f0 1f 30 	sh %d3,%d0,-1
8000a5ec:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000a5f0:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000a5f4:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000a5f8:	c2 1f       	add %d15,1
8000a5fa:	06 f2       	sh %d2,-1
8000a5fc:	3c ed       	j 8000a5d6 <__muldf3+0x11c>
8000a5fe:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000a602:	06 14       	sh %d4,1
8000a604:	ce 04       	jgez %d0,8000a60c <__muldf3+0x152>
8000a606:	8f 14 40 51 	or %d5,%d4,1
8000a60a:	02 54       	mov %d4,%d5
8000a60c:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000a610:	c2 ff       	add %d15,-1
8000a612:	06 11       	sh %d1,1
8000a614:	7b 00 00 51 	movh %d5,4096
8000a618:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000a61c:	df 03 f1 ff 	jne %d3,0,8000a5fe <__muldf3+0x144>
8000a620:	78 11       	st.w [%sp]68,%d15
8000a622:	02 4f       	mov %d15,%d4
8000a624:	16 ff       	and %d15,255
8000a626:	8b 0f 28 f2 	ne %d15,%d15,128
8000a62a:	ee 0f       	jnz %d15,8000a648 <__muldf3+0x18e>
8000a62c:	a6 10       	or %d0,%d1
8000a62e:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000a632:	8b 00 20 02 	ne %d0,%d0,0
8000a636:	0f f0 e0 00 	andn %d0,%d0,%d15
8000a63a:	76 07       	jz %d0,8000a648 <__muldf3+0x18e>
8000a63c:	8b 04 88 40 	addx %d4,%d4,128
8000a640:	8b 02 a0 20 	addc %d2,%d2,0
8000a644:	8f f4 cf 41 	andn %d4,%d4,255
8000a648:	d9 a4 10 10 	lea %a4,[%sp]80
8000a64c:	82 3f       	mov %d15,3
8000a64e:	59 a4 08 10 	st.w [%sp]72,%d4
8000a652:	59 a2 0c 10 	st.w [%sp]76,%d2
8000a656:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin1_TX_P20_10_OUT+0xc>>,%d15
8000a65a:	1d 00 4d 01 	j 8000a8f4 <__pack_d>

8000a65e <__divdf3>:
8000a65e:	20 38       	sub.a %sp,56
8000a660:	40 a4       	mov.aa %a4,%sp
8000a662:	d9 a5 10 00 	lea %a5,[%sp]16
8000a666:	89 a4 40 09 	st.d [%sp],%e4
8000a66a:	89 a6 48 09 	st.d [%sp]8,%e6
8000a66e:	6d 00 cc 01 	call 8000aa06 <__unpack_d>
8000a672:	d9 a4 08 00 	lea %a4,[%sp]8
8000a676:	d9 a5 24 00 	lea %a5,[%sp]36
8000a67a:	6d 00 c6 01 	call 8000aa06 <__unpack_d>
8000a67e:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000a682:	bf 22 76 80 	jlt.u %d2,2,8000a76e <__divdf3+0x110>
8000a686:	39 af 24 00 	ld.bu %d15,[%sp]36
8000a68a:	d9 a4 24 00 	lea %a4,[%sp]36
8000a68e:	bf 2f 72 80 	jlt.u %d15,2,8000a772 <__divdf3+0x114>
8000a692:	19 a4 14 00 	ld.w %d4,[%sp]20
8000a696:	19 a3 28 00 	ld.w %d3,[%sp]40
8000a69a:	c6 43       	xor %d3,%d4
8000a69c:	59 a3 14 00 	st.w [%sp]20,%d3
8000a6a0:	1b e2 ff 3f 	addi %d3,%d2,-2
8000a6a4:	8f d3 0f 31 	and %d3,%d3,253
8000a6a8:	f6 38       	jnz %d3,8000a6b8 <__divdf3+0x5a>
8000a6aa:	91 00 00 48 	movh.a %a4,32768
8000a6ae:	d9 44 f8 50 	lea %a4,[%a4]3448 <80000d78 <__thenan_df>>
8000a6b2:	5f f2 5e 80 	jne %d2,%d15,8000a76e <__divdf3+0x110>
8000a6b6:	3c 5e       	j 8000a772 <__divdf3+0x114>
8000a6b8:	5e 47       	jne %d15,4,8000a6c6 <__divdf3+0x68>
8000a6ba:	d2 02       	mov %e2,0
8000a6bc:	82 0f       	mov %d15,0
8000a6be:	89 a2 5c 09 	st.d [%sp]28,%e2
8000a6c2:	78 06       	st.w [%sp]24,%d15
8000a6c4:	3c 55       	j 8000a76e <__divdf3+0x110>
8000a6c6:	5e 25       	jne %d15,2,8000a6d0 <__divdf3+0x72>
8000a6c8:	82 4f       	mov %d15,4
8000a6ca:	e9 af 10 00 	st.b [%sp]16,%d15
8000a6ce:	3c 50       	j 8000a76e <__divdf3+0x110>
8000a6d0:	58 06       	ld.w %d15,[%sp]24
8000a6d2:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000a6d6:	09 a4 70 09 	ld.d %e4,[%sp]48
8000a6da:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000a6de:	52 66       	sub %d6,%d15,%d6
8000a6e0:	3a 53       	eq %d15,%d3,%d5
8000a6e2:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000a6e6:	59 a6 18 00 	st.w [%sp]24,%d6
8000a6ea:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000a6ee:	ee 07       	jnz %d15,8000a6fc <__divdf3+0x9e>
8000a6f0:	c2 f6       	add %d6,-1
8000a6f2:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a6f6:	59 a6 18 00 	st.w [%sp]24,%d6
8000a6fa:	06 12       	sh %d2,1
8000a6fc:	82 01       	mov %d1,0
8000a6fe:	7b 00 00 f1 	movh %d15,4096
8000a702:	82 00       	mov %d0,0
8000a704:	82 07       	mov %d7,0
8000a706:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000a70a:	0b 53 00 61 	eq %d6,%d3,%d5
8000a70e:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000a712:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000a716:	f6 6b       	jnz %d6,8000a72c <__divdf3+0xce>
8000a718:	0f 10 a0 80 	or %d8,%d0,%d1
8000a71c:	0f f7 a0 60 	or %d6,%d7,%d15
8000a720:	0b 42 c0 20 	subx %d2,%d2,%d4
8000a724:	02 80       	mov %d0,%d8
8000a726:	02 67       	mov %d7,%d6
8000a728:	0b 53 d0 30 	subc %d3,%d3,%d5
8000a72c:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000a730:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a734:	06 ff       	sh %d15,-1
8000a736:	06 12       	sh %d2,1
8000a738:	fd f0 e9 7f 	loop %a15,8000a70a <__divdf3+0xac>
8000a73c:	02 0f       	mov %d15,%d0
8000a73e:	16 ff       	and %d15,255
8000a740:	8b 0f 28 f2 	ne %d15,%d15,128
8000a744:	0b 70 10 48 	mov %e4,%d0,%d7
8000a748:	ee 0f       	jnz %d15,8000a766 <__divdf3+0x108>
8000a74a:	a6 32       	or %d2,%d3
8000a74c:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000a750:	8b 02 20 22 	ne %d2,%d2,0
8000a754:	0f f2 e0 20 	andn %d2,%d2,%d15
8000a758:	76 27       	jz %d2,8000a766 <__divdf3+0x108>
8000a75a:	8b 00 88 00 	addx %d0,%d0,128
8000a75e:	8b 07 a0 40 	addc %d4,%d7,0
8000a762:	8f f0 cf 51 	andn %d5,%d0,255
8000a766:	59 a5 1c 00 	st.w [%sp]28,%d5
8000a76a:	59 a4 20 00 	st.w [%sp]32,%d4
8000a76e:	d9 a4 10 00 	lea %a4,[%sp]16
8000a772:	1d 00 c1 00 	j 8000a8f4 <__pack_d>

8000a776 <__floatsidf>:
8000a776:	20 18       	sub.a %sp,24
8000a778:	82 3f       	mov %d15,3
8000a77a:	2c a4       	st.b [%sp]4,%d15
8000a77c:	8f 14 1e f0 	sh %d15,%d4,-31
8000a780:	78 02       	st.w [%sp]8,%d15
8000a782:	f6 44       	jnz %d4,8000a78a <__floatsidf+0x14>
8000a784:	82 2f       	mov %d15,2
8000a786:	2c a4       	st.b [%sp]4,%d15
8000a788:	3c 16       	j 8000a7b4 <__floatsidf+0x3e>
8000a78a:	6e 09       	jz %d15,8000a79c <__floatsidf+0x26>
8000a78c:	7b 00 00 f8 	movh %d15,32768
8000a790:	82 02       	mov %d2,0
8000a792:	7b 00 1e 3c 	movh %d3,49632
8000a796:	5f f4 13 00 	jeq %d4,%d15,8000a7bc <__floatsidf+0x46>
8000a79a:	32 54       	rsub %d4
8000a79c:	0f 04 b0 f1 	clz %d15,%d4
8000a7a0:	1b df 01 60 	addi %d6,%d15,29
8000a7a4:	82 05       	mov %d5,0
8000a7a6:	6d 00 52 00 	call 8000a84a <__ashldi3>
8000a7aa:	8b ff 01 f1 	rsub %d15,%d15,31
8000a7ae:	89 a2 50 09 	st.d [%sp]16,%e2
8000a7b2:	78 03       	st.w [%sp]12,%d15
8000a7b4:	d9 a4 04 00 	lea %a4,[%sp]4
8000a7b8:	6d 00 9e 00 	call 8000a8f4 <__pack_d>
8000a7bc:	00 90       	ret 

8000a7be <__make_dp>:
8000a7be:	20 18       	sub.a %sp,24
8000a7c0:	09 a2 58 09 	ld.d %e2,[%sp]24
8000a7c4:	d9 a4 04 00 	lea %a4,[%sp]4
8000a7c8:	e9 a4 04 00 	st.b [%sp]4,%d4
8000a7cc:	59 a5 08 00 	st.w [%sp]8,%d5
8000a7d0:	59 a6 0c 00 	st.w [%sp]12,%d6
8000a7d4:	89 a2 50 09 	st.d [%sp]16,%e2
8000a7d8:	1d 00 8e 00 	j 8000a8f4 <__pack_d>

8000a7dc <__truncdfsf2>:
8000a7dc:	20 20       	sub.a %sp,32
8000a7de:	d9 a4 20 00 	lea %a4,[%sp]32
8000a7e2:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000a7e6:	d9 a5 0c 00 	lea %a5,[%sp]12
8000a7ea:	6d 00 0e 01 	call 8000aa06 <__unpack_d>
8000a7ee:	19 a7 18 00 	ld.w %d7,[%sp]24
8000a7f2:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a7f6:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000a7fa:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000a7fe:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000a802:	02 23       	mov %d3,%d2
8000a804:	8f 12 40 21 	or %d2,%d2,1
8000a808:	19 a5 10 00 	ld.w %d5,[%sp]16
8000a80c:	19 a6 14 00 	ld.w %d6,[%sp]20
8000a810:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000a814:	1d 00 65 00 	j 8000a8de <__make_fp>

8000a818 <__floatunsidf>:
8000a818:	20 18       	sub.a %sp,24
8000a81a:	82 0f       	mov %d15,0
8000a81c:	78 02       	st.w [%sp]8,%d15
8000a81e:	f6 44       	jnz %d4,8000a826 <__floatunsidf+0xe>
8000a820:	82 2f       	mov %d15,2
8000a822:	2c a4       	st.b [%sp]4,%d15
8000a824:	3c 0f       	j 8000a842 <__floatunsidf+0x2a>
8000a826:	82 3f       	mov %d15,3
8000a828:	2c a4       	st.b [%sp]4,%d15
8000a82a:	0f 04 b0 f1 	clz %d15,%d4
8000a82e:	1b df 01 60 	addi %d6,%d15,29
8000a832:	82 05       	mov %d5,0
8000a834:	6d 00 0b 00 	call 8000a84a <__ashldi3>
8000a838:	8b ff 01 f1 	rsub %d15,%d15,31
8000a83c:	89 a2 50 09 	st.d [%sp]16,%e2
8000a840:	78 03       	st.w [%sp]12,%d15
8000a842:	d9 a4 04 00 	lea %a4,[%sp]4
8000a846:	1d 00 57 00 	j 8000a8f4 <__pack_d>

8000a84a <__ashldi3>:
8000a84a:	6f 56 07 80 	jnz.t %d6,5,8000a858 <__ashldi3+0xe>
8000a84e:	0f 64 00 20 	sh %d2,%d4,%d6
8000a852:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000a856:	00 90       	ret 
8000a858:	8b 06 1e 60 	add %d6,%d6,-32
8000a85c:	82 02       	mov %d2,0
8000a85e:	0f 64 00 30 	sh %d3,%d4,%d6
8000a862:	00 90       	ret 

8000a864 <__unpack_f>:
8000a864:	54 43       	ld.w %d3,[%a4]
8000a866:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000a86a:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000a86e:	8f 13 1e 30 	sh %d3,%d3,-31
8000a872:	59 53 04 00 	st.w [%a5]4,%d3
8000a876:	df 02 18 80 	jne %d2,0,8000a8a6 <__unpack_f+0x42>
8000a87a:	ee 03       	jnz %d15,8000a880 <__unpack_f+0x1c>
8000a87c:	82 2f       	mov %d15,2
8000a87e:	3c 19       	j 8000a8b0 <__unpack_f+0x4c>
8000a880:	3b 20 f8 2f 	mov %d2,-126
8000a884:	59 52 08 00 	st.w [%a5]8,%d2
8000a888:	82 32       	mov %d2,3
8000a88a:	34 52       	st.b [%a5],%d2
8000a88c:	06 7f       	sh %d15,7
8000a88e:	3b 10 f8 2f 	mov %d2,-127
8000a892:	7b 00 00 44 	movh %d4,16384
8000a896:	06 1f       	sh %d15,1
8000a898:	02 23       	mov %d3,%d2
8000a89a:	c2 f2       	add %d2,-1
8000a89c:	3f 4f fd ff 	jlt.u %d15,%d4,8000a896 <__unpack_f+0x32>
8000a8a0:	59 53 08 00 	st.w [%a5]8,%d3
8000a8a4:	3c 1b       	j 8000a8da <__unpack_f+0x76>
8000a8a6:	8b f2 2f 32 	ne %d3,%d2,255
8000a8aa:	f6 3f       	jnz %d3,8000a8c8 <__unpack_f+0x64>
8000a8ac:	ee 04       	jnz %d15,8000a8b4 <__unpack_f+0x50>
8000a8ae:	82 4f       	mov %d15,4
8000a8b0:	2c 50       	st.b [%a5]0,%d15
8000a8b2:	00 90       	ret 
8000a8b4:	7b 00 04 20 	movh %d2,64
8000a8b8:	26 f2       	and %d2,%d15
8000a8ba:	76 22       	jz %d2,8000a8be <__unpack_f+0x5a>
8000a8bc:	82 12       	mov %d2,1
8000a8be:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000a8c2:	34 52       	st.b [%a5],%d2
8000a8c4:	06 7f       	sh %d15,7
8000a8c6:	3c 0a       	j 8000a8da <__unpack_f+0x76>
8000a8c8:	1b 12 f8 2f 	addi %d2,%d2,-127
8000a8cc:	06 7f       	sh %d15,7
8000a8ce:	59 52 08 00 	st.w [%a5]8,%d2
8000a8d2:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000a8d6:	82 32       	mov %d2,3
8000a8d8:	34 52       	st.b [%a5],%d2
8000a8da:	6c 53       	st.w [%a5]12,%d15
8000a8dc:	00 90       	ret 

8000a8de <__make_fp>:
8000a8de:	20 10       	sub.a %sp,16
8000a8e0:	40 a4       	mov.aa %a4,%sp
8000a8e2:	34 a4       	st.b [%sp],%d4
8000a8e4:	59 a5 04 00 	st.w [%sp]4,%d5
8000a8e8:	59 a6 08 00 	st.w [%sp]8,%d6
8000a8ec:	59 a7 0c 00 	st.w [%sp]12,%d7
8000a8f0:	1d 00 e1 00 	j 8000aab2 <__pack_f>

8000a8f4 <__pack_d>:
8000a8f4:	14 42       	ld.bu %d2,[%a4]
8000a8f6:	19 49 0c 00 	ld.w %d9,[%a4]12
8000a8fa:	19 48 10 00 	ld.w %d8,[%a4]16
8000a8fe:	19 4c 04 00 	ld.w %d12,[%a4]4
8000a902:	ff 22 0b 80 	jge.u %d2,2,8000a918 <__pack_d+0x24>
8000a906:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000a90a:	06 88       	sh %d8,-8
8000a90c:	02 95       	mov %d5,%d9
8000a90e:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000a912:	3b f0 7f f0 	mov %d15,2047
8000a916:	3c 6f       	j 8000a9f4 <__pack_d+0x100>
8000a918:	3b f0 7f f0 	mov %d15,2047
8000a91c:	d2 04       	mov %e4,0
8000a91e:	df 42 6b 00 	jeq %d2,4,8000a9f4 <__pack_d+0x100>
8000a922:	0f 89 a0 f0 	or %d15,%d9,%d8
8000a926:	8b 22 00 32 	eq %d3,%d2,2
8000a92a:	8b 0f e0 34 	or.eq %d3,%d15,0
8000a92e:	82 0f       	mov %d15,0
8000a930:	df 03 62 80 	jne %d3,0,8000a9f4 <__pack_d+0x100>
8000a934:	19 42 08 00 	ld.w %d2,[%a4]8
8000a938:	3b 20 c0 ff 	mov %d15,-1022
8000a93c:	7f f2 36 00 	jge %d2,%d15,8000a9a8 <__pack_d+0xb4>
8000a940:	a2 2f       	sub %d15,%d2
8000a942:	8b 9f 83 42 	ge %d4,%d15,57
8000a946:	82 02       	mov %d2,0
8000a948:	df 04 18 80 	jne %d4,0,8000a978 <__pack_d+0x84>
8000a94c:	0b 98 10 48 	mov %e4,%d8,%d9
8000a950:	02 f6       	mov %d6,%d15
8000a952:	6d ff 58 fc 	call 8000a202 <__lshrdi3>
8000a956:	d2 14       	mov %e4,1
8000a958:	02 f6       	mov %d6,%d15
8000a95a:	0b 32 10 a8 	mov %e10,%d2,%d3
8000a95e:	6d ff 76 ff 	call 8000a84a <__ashldi3>
8000a962:	8b f2 9f 20 	addx %d2,%d2,-1
8000a966:	8b f3 bf 30 	addc %d3,%d3,-1
8000a96a:	26 29       	and %d9,%d2
8000a96c:	26 38       	and %d8,%d3
8000a96e:	a6 98       	or %d8,%d9
8000a970:	02 b2       	mov %d2,%d11
8000a972:	8b 08 00 25 	or.ne %d2,%d8,0
8000a976:	02 a3       	mov %d3,%d10
8000a978:	02 2f       	mov %d15,%d2
8000a97a:	16 ff       	and %d15,255
8000a97c:	8b 0f 28 f2 	ne %d15,%d15,128
8000a980:	ee 07       	jnz %d15,8000a98e <__pack_d+0x9a>
8000a982:	8f 02 10 f1 	and %d15,%d2,256
8000a986:	6e 08       	jz %d15,8000a996 <__pack_d+0xa2>
8000a988:	8b 02 88 20 	addx %d2,%d2,128
8000a98c:	3c 03       	j 8000a992 <__pack_d+0x9e>
8000a98e:	8b f2 87 20 	addx %d2,%d2,127
8000a992:	8b 03 a0 30 	addc %d3,%d3,0
8000a996:	7b 00 00 41 	movh %d4,4096
8000a99a:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000a99e:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000a9a2:	8f 83 1f 40 	sh %d4,%d3,-8
8000a9a6:	3c 27       	j 8000a9f4 <__pack_d+0x100>
8000a9a8:	3b 00 40 30 	mov %d3,1024
8000a9ac:	3b f0 7f f0 	mov %d15,2047
8000a9b0:	7f 32 22 00 	jge %d2,%d3,8000a9f4 <__pack_d+0x100>
8000a9b4:	02 9f       	mov %d15,%d9
8000a9b6:	16 ff       	and %d15,255
8000a9b8:	8b 0f 28 f2 	ne %d15,%d15,128
8000a9bc:	ee 07       	jnz %d15,8000a9ca <__pack_d+0xd6>
8000a9be:	8f 09 10 f1 	and %d15,%d9,256
8000a9c2:	6e 08       	jz %d15,8000a9d2 <__pack_d+0xde>
8000a9c4:	8b 09 88 90 	addx %d9,%d9,128
8000a9c8:	3c 03       	j 8000a9ce <__pack_d+0xda>
8000a9ca:	8b f9 87 90 	addx %d9,%d9,127
8000a9ce:	8b 08 a0 80 	addc %d8,%d8,0
8000a9d2:	7b 00 00 32 	movh %d3,8192
8000a9d6:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000a9da:	ee 04       	jnz %d15,8000a9e2 <__pack_d+0xee>
8000a9dc:	1b f2 3f f0 	addi %d15,%d2,1023
8000a9e0:	3c 06       	j 8000a9ec <__pack_d+0xf8>
8000a9e2:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000a9e6:	1b 02 40 f0 	addi %d15,%d2,1024
8000a9ea:	06 f8       	sh %d8,-1
8000a9ec:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000a9f0:	8f 88 1f 40 	sh %d4,%d8,-8
8000a9f4:	d2 02       	mov %e2,0
8000a9f6:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000a9fa:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000a9fe:	02 52       	mov %d2,%d5
8000aa00:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000aa04:	00 90       	ret 

8000aa06 <__unpack_d>:
8000aa06:	19 44 04 00 	ld.w %d4,[%a4]4
8000aa0a:	54 42       	ld.w %d2,[%a4]
8000aa0c:	37 04 74 50 	extr.u %d5,%d4,0,20
8000aa10:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000aa14:	8f 14 1e 40 	sh %d4,%d4,-31
8000aa18:	59 54 04 00 	st.w [%a5]4,%d4
8000aa1c:	02 53       	mov %d3,%d5
8000aa1e:	ee 21       	jnz %d15,8000aa60 <__unpack_d+0x5a>
8000aa20:	0f 25 a0 f0 	or %d15,%d5,%d2
8000aa24:	ee 03       	jnz %d15,8000aa2a <__unpack_d+0x24>
8000aa26:	82 2f       	mov %d15,2
8000aa28:	3c 23       	j 8000aa6e <__unpack_d+0x68>
8000aa2a:	3b 20 c0 ff 	mov %d15,-1022
8000aa2e:	6c 52       	st.w [%a5]8,%d15
8000aa30:	82 3f       	mov %d15,3
8000aa32:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000aa36:	2c 50       	st.b [%a5]0,%d15
8000aa38:	8f 82 00 20 	sh %d2,%d2,8
8000aa3c:	3b 10 c0 ff 	mov %d15,-1023
8000aa40:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000aa44:	7b 00 00 61 	movh %d6,4096
8000aa48:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000aa4c:	02 f4       	mov %d4,%d15
8000aa4e:	06 12       	sh %d2,1
8000aa50:	c2 ff       	add %d15,-1
8000aa52:	df 05 f7 ff 	jne %d5,0,8000aa40 <__unpack_d+0x3a>
8000aa56:	59 54 08 00 	st.w [%a5]8,%d4
8000aa5a:	59 52 0c 00 	st.w [%a5]12,%d2
8000aa5e:	3c 27       	j 8000aaac <__unpack_d+0xa6>
8000aa60:	3b f0 7f 40 	mov %d4,2047
8000aa64:	fe 47       	jne %d15,%d4,8000aa92 <__unpack_d+0x8c>
8000aa66:	0f 25 a0 f0 	or %d15,%d5,%d2
8000aa6a:	ee 04       	jnz %d15,8000aa72 <__unpack_d+0x6c>
8000aa6c:	82 4f       	mov %d15,4
8000aa6e:	2c 50       	st.b [%a5]0,%d15
8000aa70:	00 90       	ret 
8000aa72:	7b 80 00 f0 	movh %d15,8
8000aa76:	26 5f       	and %d15,%d5
8000aa78:	6e 02       	jz %d15,8000aa7c <__unpack_d+0x76>
8000aa7a:	82 1f       	mov %d15,1
8000aa7c:	2c 50       	st.b [%a5]0,%d15
8000aa7e:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000aa82:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000aa86:	8f 82 00 40 	sh %d4,%d2,8
8000aa8a:	59 54 0c 00 	st.w [%a5]12,%d4
8000aa8e:	6c 54       	st.w [%a5]16,%d15
8000aa90:	00 90       	ret 
8000aa92:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000aa96:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000aa9a:	6c 52       	st.w [%a5]8,%d15
8000aa9c:	8f 82 00 20 	sh %d2,%d2,8
8000aaa0:	82 3f       	mov %d15,3
8000aaa2:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000aaa6:	2c 50       	st.b [%a5]0,%d15
8000aaa8:	59 52 0c 00 	st.w [%a5]12,%d2
8000aaac:	59 53 10 00 	st.w [%a5]16,%d3
8000aab0:	00 90       	ret 

8000aab2 <__pack_f>:
8000aab2:	14 45       	ld.bu %d5,[%a4]
8000aab4:	4c 43       	ld.w %d15,[%a4]12
8000aab6:	19 47 04 00 	ld.w %d7,[%a4]4
8000aaba:	ff 25 09 80 	jge.u %d5,2,8000aacc <__pack_f+0x1a>
8000aabe:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000aac2:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000aac6:	3b f0 0f 40 	mov %d4,255
8000aaca:	3c 4f       	j 8000ab68 <__pack_f+0xb6>
8000aacc:	3b f0 0f 40 	mov %d4,255
8000aad0:	82 03       	mov %d3,0
8000aad2:	df 45 4b 00 	jeq %d5,4,8000ab68 <__pack_f+0xb6>
8000aad6:	8b 25 00 62 	eq %d6,%d5,2
8000aada:	8b 0f e0 64 	or.eq %d6,%d15,0
8000aade:	82 04       	mov %d4,0
8000aae0:	df 06 44 80 	jne %d6,0,8000ab68 <__pack_f+0xb6>
8000aae4:	19 45 08 00 	ld.w %d5,[%a4]8
8000aae8:	8b 25 98 42 	ge %d4,%d5,-126
8000aaec:	df 04 24 80 	jne %d4,0,8000ab34 <__pack_f+0x82>
8000aaf0:	8b 25 18 51 	rsub %d5,%d5,-126
8000aaf4:	8b a5 81 42 	ge %d4,%d5,26
8000aaf8:	f6 4c       	jnz %d4,8000ab10 <__pack_f+0x5e>
8000aafa:	82 12       	mov %d2,1
8000aafc:	0f 52 00 20 	sh %d2,%d2,%d5
8000ab00:	8b 05 00 31 	rsub %d3,%d5,0
8000ab04:	c2 f2       	add %d2,-1
8000ab06:	0f 3f 00 30 	sh %d3,%d15,%d3
8000ab0a:	26 2f       	and %d15,%d2
8000ab0c:	8b 0f 00 35 	or.ne %d3,%d15,0
8000ab10:	8f f3 07 f1 	and %d15,%d3,127
8000ab14:	8b 0f 24 f2 	ne %d15,%d15,64
8000ab18:	ee 06       	jnz %d15,8000ab24 <__pack_f+0x72>
8000ab1a:	8f 03 08 f1 	and %d15,%d3,128
8000ab1e:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000ab22:	3c 03       	j 8000ab28 <__pack_f+0x76>
8000ab24:	1b f3 03 30 	addi %d3,%d3,63
8000ab28:	7b 00 00 f4 	movh %d15,16384
8000ab2c:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000ab30:	06 93       	sh %d3,-7
8000ab32:	3c 1b       	j 8000ab68 <__pack_f+0xb6>
8000ab34:	8b 05 88 62 	ge %d6,%d5,128
8000ab38:	3b f0 0f 40 	mov %d4,255
8000ab3c:	df 06 16 80 	jne %d6,0,8000ab68 <__pack_f+0xb6>
8000ab40:	8f ff 07 31 	and %d3,%d15,127
8000ab44:	8b 03 24 32 	ne %d3,%d3,64
8000ab48:	f6 36       	jnz %d3,8000ab54 <__pack_f+0xa2>
8000ab4a:	8f 0f 08 31 	and %d3,%d15,128
8000ab4e:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000ab52:	3c 03       	j 8000ab58 <__pack_f+0xa6>
8000ab54:	1b ff 03 f0 	addi %d15,%d15,63
8000ab58:	1b f5 07 40 	addi %d4,%d5,127
8000ab5c:	ce f4       	jgez %d15,8000ab64 <__pack_f+0xb2>
8000ab5e:	06 ff       	sh %d15,-1
8000ab60:	1b 05 08 40 	addi %d4,%d5,128
8000ab64:	8f 9f 1f 30 	sh %d3,%d15,-7
8000ab68:	82 02       	mov %d2,0
8000ab6a:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000ab6e:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000ab72:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000ab76:	00 90       	ret 

8000ab78 <malloc>:
8000ab78:	91 00 00 f7 	movh.a %a15,28672
8000ab7c:	99 f4 68 30 	ld.a %a4,[%a15]1256 <700004e8 <_impure_ptr>>
8000ab80:	1d 00 09 00 	j 8000ab92 <_malloc_r>

8000ab84 <free>:
8000ab84:	91 00 00 f7 	movh.a %a15,28672
8000ab88:	40 45       	mov.aa %a5,%a4
8000ab8a:	99 f4 68 30 	ld.a %a4,[%a15]1256 <700004e8 <_impure_ptr>>
8000ab8e:	1d 00 dc 12 	j 8000d146 <_free_r>

8000ab92 <_malloc_r>:
8000ab92:	1b b4 00 f0 	addi %d15,%d4,11
8000ab96:	8b 7f 61 82 	lt.u %d8,%d15,23
8000ab9a:	8f 7f c0 f1 	andn %d15,%d15,7
8000ab9e:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000aba2:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000aba6:	8b 08 20 45 	or.lt %d4,%d8,0
8000abaa:	40 4d       	mov.aa %a13,%a4
8000abac:	76 45       	jz %d4,8000abb6 <_malloc_r+0x24>
8000abae:	da 0c       	mov %d15,12
8000abb0:	6c 40       	st.w [%a4]0,%d15
8000abb2:	1d 00 2a 02 	j 8000b006 <_malloc_r+0x474>
8000abb6:	91 00 00 f7 	movh.a %a15,28672
8000abba:	8b 88 bf f2 	ge.u %d15,%d8,504
8000abbe:	6d 00 37 02 	call 8000b02c <__malloc_lock>
8000abc2:	d9 ff 20 30 	lea %a15,[%a15]224 <700000e0 <__malloc_av_>>
8000abc6:	ee 19       	jnz %d15,8000abf8 <_malloc_r+0x66>
8000abc8:	8f d8 1f 20 	sh %d2,%d8,-3
8000abcc:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000abd0:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000abd4:	7d 2c 09 80 	jne.a %a12,%a2,8000abe6 <_malloc_r+0x54>
8000abd8:	d9 c2 08 00 	lea %a2,[%a12]8
8000abdc:	99 cc 14 00 	ld.a %a12,[%a12]20
8000abe0:	c2 22       	add %d2,2
8000abe2:	7d 2c 58 00 	jeq.a %a12,%a2,8000ac92 <_malloc_r+0x100>
8000abe6:	cc c3       	ld.a %a15,[%a12]12
8000abe8:	99 c2 08 00 	ld.a %a2,[%a12]8
8000abec:	4c c1       	ld.w %d15,[%a12]4
8000abee:	ec 23       	st.a [%a2]12,%a15
8000abf0:	8f 3f c0 f1 	andn %d15,%d15,3
8000abf4:	e8 22       	st.a [%a15]8,%a2
8000abf6:	3c 74       	j 8000acde <_malloc_r+0x14c>
8000abf8:	8f 78 1f f0 	sh %d15,%d8,-9
8000abfc:	3b f0 03 20 	mov %d2,63
8000ac00:	6e 27       	jz %d15,8000ac4e <_malloc_r+0xbc>
8000ac02:	8f a8 1f 20 	sh %d2,%d8,-6
8000ac06:	1b 82 03 20 	addi %d2,%d2,56
8000ac0a:	bf 5f 22 80 	jlt.u %d15,5,8000ac4e <_malloc_r+0xbc>
8000ac0e:	8b 5f a1 22 	ge.u %d2,%d15,21
8000ac12:	f6 24       	jnz %d2,8000ac1a <_malloc_r+0x88>
8000ac14:	1b bf 05 20 	addi %d2,%d15,91
8000ac18:	3c 1b       	j 8000ac4e <_malloc_r+0xbc>
8000ac1a:	8b 5f a5 22 	ge.u %d2,%d15,85
8000ac1e:	f6 26       	jnz %d2,8000ac2a <_malloc_r+0x98>
8000ac20:	8f 48 1f 20 	sh %d2,%d8,-12
8000ac24:	1b e2 06 20 	addi %d2,%d2,110
8000ac28:	3c 13       	j 8000ac4e <_malloc_r+0xbc>
8000ac2a:	8b 5f b5 22 	ge.u %d2,%d15,341
8000ac2e:	f6 26       	jnz %d2,8000ac3a <_malloc_r+0xa8>
8000ac30:	8f 18 1f 20 	sh %d2,%d8,-15
8000ac34:	1b 72 07 20 	addi %d2,%d2,119
8000ac38:	3c 0b       	j 8000ac4e <_malloc_r+0xbc>
8000ac3a:	3b 50 55 30 	mov %d3,1365
8000ac3e:	3b e0 07 20 	mov %d2,126
8000ac42:	7f 3f 06 80 	jge.u %d15,%d3,8000ac4e <_malloc_r+0xbc>
8000ac46:	8f e8 1e 20 	sh %d2,%d8,-18
8000ac4a:	1b c2 07 20 	addi %d2,%d2,124
8000ac4e:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000ac52:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000ac56:	7d 2c 1d 00 	jeq.a %a12,%a2,8000ac90 <_malloc_r+0xfe>
8000ac5a:	19 c4 04 00 	ld.w %d4,[%a12]4
8000ac5e:	8f 34 c0 41 	andn %d4,%d4,3
8000ac62:	5a 84       	sub %d15,%d4,%d8
8000ac64:	8b 0f 41 32 	lt %d3,%d15,16
8000ac68:	f6 33       	jnz %d3,8000ac6e <_malloc_r+0xdc>
8000ac6a:	c2 f2       	add %d2,-1
8000ac6c:	3c 12       	j 8000ac90 <_malloc_r+0xfe>
8000ac6e:	0e fe       	jltz %d15,8000ac8a <_malloc_r+0xf8>
8000ac70:	cc c3       	ld.a %a15,[%a12]12
8000ac72:	99 c2 08 00 	ld.a %a2,[%a12]8
8000ac76:	ec 23       	st.a [%a2]12,%a15
8000ac78:	e8 22       	st.a [%a15]8,%a2
8000ac7a:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000ac7e:	b7 10 21 20 	imask %e2,1,0,1
8000ac82:	49 f2 44 08 	ldmst [%a15]4,%e2
8000ac86:	1d 00 cc 01 	j 8000b01e <_malloc_r+0x48c>
8000ac8a:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000ac8e:	3c e4       	j 8000ac56 <_malloc_r+0xc4>
8000ac90:	c2 12       	add %d2,1
8000ac92:	c8 4c       	ld.a %a12,[%a15]16
8000ac94:	91 00 00 37 	movh.a %a3,28672
8000ac98:	d9 33 28 30 	lea %a3,[%a3]232 <700000e8 <__malloc_av_+0x8>>
8000ac9c:	7d 3c 83 00 	jeq.a %a12,%a3,8000ada2 <_malloc_r+0x210>
8000aca0:	4c c1       	ld.w %d15,[%a12]4
8000aca2:	8f 3f c0 f1 	andn %d15,%d15,3
8000aca6:	52 83       	sub %d3,%d15,%d8
8000aca8:	8b 03 41 42 	lt %d4,%d3,16
8000acac:	df 04 16 80 	jne %d4,0,8000acd8 <_malloc_r+0x146>
8000acb0:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000acb4:	8f 18 40 81 	or %d8,%d8,1
8000acb8:	59 c8 04 00 	st.w [%a12]4,%d8
8000acbc:	e8 52       	st.a [%a15]20,%a2
8000acbe:	e8 42       	st.a [%a15]16,%a2
8000acc0:	8f 13 40 f1 	or %d15,%d3,1
8000acc4:	b5 23 0c 00 	st.a [%a2]12,%a3
8000acc8:	b5 23 08 00 	st.a [%a2]8,%a3
8000accc:	6c 21       	st.w [%a2]4,%d15
8000acce:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000acd2:	74 23       	st.w [%a2],%d3
8000acd4:	1d 00 a5 01 	j 8000b01e <_malloc_r+0x48c>
8000acd8:	e8 53       	st.a [%a15]20,%a3
8000acda:	e8 43       	st.a [%a15]16,%a3
8000acdc:	0e 33       	jltz %d3,8000ace2 <_malloc_r+0x150>
8000acde:	10 cf       	addsc.a %a15,%a12,%d15,0
8000ace0:	3c cf       	j 8000ac7e <_malloc_r+0xec>
8000ace2:	3b 00 20 30 	mov %d3,512
8000ace6:	7f 3f 15 80 	jge.u %d15,%d3,8000ad10 <_malloc_r+0x17e>
8000acea:	06 df       	sh %d15,-3
8000acec:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000acee:	48 14       	ld.w %d4,[%a15]4
8000acf0:	99 24 08 00 	ld.a %a4,[%a2]8
8000acf4:	8f ef 3f 30 	sha %d3,%d15,-2
8000acf8:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000acfc:	b5 c4 08 00 	st.a [%a12]8,%a4
8000ad00:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000ad04:	b5 2c 08 00 	st.a [%a2]8,%a12
8000ad08:	68 13       	st.w [%a15]4,%d3
8000ad0a:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000ad0e:	3c 4a       	j 8000ada2 <_malloc_r+0x210>
8000ad10:	8f af 1f 40 	sh %d4,%d15,-6
8000ad14:	8f 7f 1f 30 	sh %d3,%d15,-9
8000ad18:	1b 84 03 40 	addi %d4,%d4,56
8000ad1c:	bf 53 22 80 	jlt.u %d3,5,8000ad60 <_malloc_r+0x1ce>
8000ad20:	8b 53 a1 42 	ge.u %d4,%d3,21
8000ad24:	f6 44       	jnz %d4,8000ad2c <_malloc_r+0x19a>
8000ad26:	1b b3 05 40 	addi %d4,%d3,91
8000ad2a:	3c 1b       	j 8000ad60 <_malloc_r+0x1ce>
8000ad2c:	8b 53 a5 42 	ge.u %d4,%d3,85
8000ad30:	f6 46       	jnz %d4,8000ad3c <_malloc_r+0x1aa>
8000ad32:	8f 4f 1f 40 	sh %d4,%d15,-12
8000ad36:	1b e4 06 40 	addi %d4,%d4,110
8000ad3a:	3c 13       	j 8000ad60 <_malloc_r+0x1ce>
8000ad3c:	8b 53 b5 42 	ge.u %d4,%d3,341
8000ad40:	f6 46       	jnz %d4,8000ad4c <_malloc_r+0x1ba>
8000ad42:	8f 1f 1f 40 	sh %d4,%d15,-15
8000ad46:	1b 74 07 40 	addi %d4,%d4,119
8000ad4a:	3c 0b       	j 8000ad60 <_malloc_r+0x1ce>
8000ad4c:	3b 50 55 50 	mov %d5,1365
8000ad50:	3b e0 07 40 	mov %d4,126
8000ad54:	7f 53 06 80 	jge.u %d3,%d5,8000ad60 <_malloc_r+0x1ce>
8000ad58:	8f ef 1e 40 	sh %d4,%d15,-18
8000ad5c:	1b c4 07 40 	addi %d4,%d4,124
8000ad60:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000ad64:	99 42 08 00 	ld.a %a2,[%a4]8
8000ad68:	7d 42 0d 80 	jne.a %a2,%a4,8000ad82 <_malloc_r+0x1f0>
8000ad6c:	4c f1       	ld.w %d15,[%a15]4
8000ad6e:	86 e4       	sha %d4,-2
8000ad70:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000ad74:	40 24       	mov.aa %a4,%a2
8000ad76:	68 14       	st.w [%a15]4,%d4
8000ad78:	3c 0d       	j 8000ad92 <_malloc_r+0x200>
8000ad7a:	99 22 08 00 	ld.a %a2,[%a2]8
8000ad7e:	7d 42 08 00 	jeq.a %a2,%a4,8000ad8e <_malloc_r+0x1fc>
8000ad82:	19 23 04 00 	ld.w %d3,[%a2]4
8000ad86:	8f 33 c0 31 	andn %d3,%d3,3
8000ad8a:	3f 3f f8 ff 	jlt.u %d15,%d3,8000ad7a <_malloc_r+0x1e8>
8000ad8e:	99 24 0c 00 	ld.a %a4,[%a2]12
8000ad92:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000ad96:	b5 c2 08 00 	st.a [%a12]8,%a2
8000ad9a:	b5 4c 08 00 	st.a [%a4]8,%a12
8000ad9e:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000ada2:	8f e2 3f 30 	sha %d3,%d2,-2
8000ada6:	82 1f       	mov %d15,1
8000ada8:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000adac:	48 13       	ld.w %d3,[%a15]4
8000adae:	3f f3 73 80 	jlt.u %d3,%d15,8000ae94 <_malloc_r+0x302>
8000adb2:	0f 3f 80 40 	and %d4,%d15,%d3
8000adb6:	f6 49       	jnz %d4,8000adc8 <_malloc_r+0x236>
8000adb8:	8f 32 c0 21 	andn %d2,%d2,3
8000adbc:	06 1f       	sh %d15,1
8000adbe:	0f 3f 80 40 	and %d4,%d15,%d3
8000adc2:	c2 42       	add %d2,4
8000adc4:	df 04 fc 7f 	jeq %d4,0,8000adbc <_malloc_r+0x22a>
8000adc8:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000adcc:	02 24       	mov %d4,%d2
8000adce:	40 24       	mov.aa %a4,%a2
8000add0:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000add4:	7d 4c 3c 00 	jeq.a %a12,%a4,8000ae4c <_malloc_r+0x2ba>
8000add8:	19 c6 04 00 	ld.w %d6,[%a12]4
8000addc:	8f 36 c0 61 	andn %d6,%d6,3
8000ade0:	0b 86 80 30 	sub %d3,%d6,%d8
8000ade4:	8b 03 41 52 	lt %d5,%d3,16
8000ade8:	df 05 1d 80 	jne %d5,0,8000ae22 <_malloc_r+0x290>
8000adec:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000adf0:	8f 18 40 81 	or %d8,%d8,1
8000adf4:	59 c8 04 00 	st.w [%a12]4,%d8
8000adf8:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000adfc:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000ae00:	8f 13 40 f1 	or %d15,%d3,1
8000ae04:	b5 54 0c 00 	st.a [%a5]12,%a4
8000ae08:	b5 45 08 00 	st.a [%a4]8,%a5
8000ae0c:	e8 52       	st.a [%a15]20,%a2
8000ae0e:	e8 42       	st.a [%a15]16,%a2
8000ae10:	b5 23 0c 00 	st.a [%a2]12,%a3
8000ae14:	b5 23 08 00 	st.a [%a2]8,%a3
8000ae18:	6c 21       	st.w [%a2]4,%d15
8000ae1a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000ae1e:	74 23       	st.w [%a2],%d3
8000ae20:	3c 0e       	j 8000ae3c <_malloc_r+0x2aa>
8000ae22:	bf 03 12 00 	jlt %d3,0,8000ae46 <_malloc_r+0x2b4>
8000ae26:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000ae2a:	b7 10 21 20 	imask %e2,1,0,1
8000ae2e:	49 f2 44 08 	ldmst [%a15]4,%e2
8000ae32:	cc c3       	ld.a %a15,[%a12]12
8000ae34:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000ae38:	ec 23       	st.a [%a2]12,%a15
8000ae3a:	e8 22       	st.a [%a15]8,%a2
8000ae3c:	40 d4       	mov.aa %a4,%a13
8000ae3e:	6d 00 f8 00 	call 8000b02e <__malloc_unlock>
8000ae42:	1d 00 f3 00 	j 8000b028 <_malloc_r+0x496>
8000ae46:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000ae4a:	3c c5       	j 8000add4 <_malloc_r+0x242>
8000ae4c:	c2 14       	add %d4,1
8000ae4e:	8f 34 00 31 	and %d3,%d4,3
8000ae52:	d9 44 08 00 	lea %a4,[%a4]8
8000ae56:	df 03 bd ff 	jne %d3,0,8000add0 <_malloc_r+0x23e>
8000ae5a:	8f 32 00 31 	and %d3,%d2,3
8000ae5e:	f6 36       	jnz %d3,8000ae6a <_malloc_r+0x2d8>
8000ae60:	48 12       	ld.w %d2,[%a15]4
8000ae62:	0f f2 e0 20 	andn %d2,%d2,%d15
8000ae66:	68 12       	st.w [%a15]4,%d2
8000ae68:	3c 07       	j 8000ae76 <_malloc_r+0x2e4>
8000ae6a:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000ae6e:	d4 22       	ld.a %a2,[%a2]
8000ae70:	c2 f2       	add %d2,-1
8000ae72:	7d 42 f4 7f 	jeq.a %a2,%a4,8000ae5a <_malloc_r+0x2c8>
8000ae76:	06 1f       	sh %d15,1
8000ae78:	48 12       	ld.w %d2,[%a15]4
8000ae7a:	8b 0f 20 32 	ne %d3,%d15,0
8000ae7e:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000ae82:	76 39       	jz %d3,8000ae94 <_malloc_r+0x302>
8000ae84:	0f 2f 80 30 	and %d3,%d15,%d2
8000ae88:	f6 34       	jnz %d3,8000ae90 <_malloc_r+0x2fe>
8000ae8a:	c2 44       	add %d4,4
8000ae8c:	06 1f       	sh %d15,1
8000ae8e:	3c fb       	j 8000ae84 <_malloc_r+0x2f2>
8000ae90:	02 42       	mov %d2,%d4
8000ae92:	3c 9b       	j 8000adc8 <_malloc_r+0x236>
8000ae94:	c8 2c       	ld.a %a12,[%a15]8
8000ae96:	19 ca 04 00 	ld.w %d10,[%a12]4
8000ae9a:	8f 3a c0 a1 	andn %d10,%d10,3
8000ae9e:	5a 8a       	sub %d15,%d10,%d8
8000aea0:	8b 0f 41 22 	lt %d2,%d15,16
8000aea4:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000aea8:	df 02 b1 00 	jeq %d2,0,8000b00a <_malloc_r+0x478>
8000aeac:	91 00 00 27 	movh.a %a2,28672
8000aeb0:	19 2b e0 00 	ld.w %d11,[%a2]3104 <70000c20 <__malloc_top_pad>>
8000aeb4:	91 00 00 27 	movh.a %a2,28672
8000aeb8:	42 8b       	add %d11,%d8
8000aeba:	19 23 18 30 	ld.w %d3,[%a2]216 <700000d8 <__malloc_sbrk_base>>
8000aebe:	1b fb 00 f1 	addi %d15,%d11,4111
8000aec2:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000aec6:	1b 0b 01 20 	addi %d2,%d11,16
8000aeca:	8b f3 3f b2 	ne %d11,%d3,-1
8000aece:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000aed2:	40 d4       	mov.aa %a4,%a13
8000aed4:	02 b4       	mov %d4,%d11
8000aed6:	80 2c       	mov.d %d12,%a2
8000aed8:	6d 00 ac 00 	call 8000b030 <_sbrk_r>
8000aedc:	80 29       	mov.d %d9,%a2
8000aede:	df f9 86 00 	jeq %d9,-1,8000afea <_malloc_r+0x458>
8000aee2:	80 c2       	mov.d %d2,%a12
8000aee4:	80 c3       	mov.d %d3,%a12
8000aee6:	42 a2       	add %d2,%d10
8000aee8:	80 f4       	mov.d %d4,%a15
8000aeea:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000aeee:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000aef2:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000aef6:	ee 7a       	jnz %d15,8000afea <_malloc_r+0x458>
8000aef8:	91 00 00 e7 	movh.a %a14,28672
8000aefc:	19 e3 b0 f0 	ld.w %d3,[%a14]3056 <70000bf0 <__malloc_current_mallinfo>>
8000af00:	42 b3       	add %d3,%d11
8000af02:	59 e3 b0 f0 	st.w [%a14]3056 <70000bf0 <__malloc_current_mallinfo>>,%d3
8000af06:	5f 29 0c 80 	jne %d9,%d2,8000af1e <_malloc_r+0x38c>
8000af0a:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000af0e:	ee 08       	jnz %d15,8000af1e <_malloc_r+0x38c>
8000af10:	c8 22       	ld.a %a2,[%a15]8
8000af12:	42 ba       	add %d10,%d11
8000af14:	8f 1a 40 a1 	or %d10,%d10,1
8000af18:	59 2a 04 00 	st.w [%a2]4,%d10
8000af1c:	3c 55       	j 8000afc6 <_malloc_r+0x434>
8000af1e:	60 c2       	mov.a %a2,%d12
8000af20:	19 2f 18 30 	ld.w %d15,[%a2]216
8000af24:	5e f6       	jne %d15,-1,8000af30 <_malloc_r+0x39e>
8000af26:	91 00 00 27 	movh.a %a2,28672
8000af2a:	59 29 18 30 	st.w [%a2]216 <700000d8 <__malloc_sbrk_base>>,%d9
8000af2e:	3c 06       	j 8000af3a <_malloc_r+0x3a8>
8000af30:	0b 29 80 20 	sub %d2,%d9,%d2
8000af34:	42 23       	add %d3,%d2
8000af36:	59 e3 b0 f0 	st.w [%a14]3056 <70000bf0 <__malloc_current_mallinfo>>,%d3
8000af3a:	8f 79 00 21 	and %d2,%d9,7
8000af3e:	82 0f       	mov %d15,0
8000af40:	76 24       	jz %d2,8000af48 <_malloc_r+0x3b6>
8000af42:	8b 82 00 f1 	rsub %d15,%d2,8
8000af46:	42 f9       	add %d9,%d15
8000af48:	42 9b       	add %d11,%d9
8000af4a:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000af4e:	1b 0f 00 21 	addi %d2,%d15,4096
8000af52:	5a b2       	sub %d15,%d2,%d11
8000af54:	40 d4       	mov.aa %a4,%a13
8000af56:	02 f4       	mov %d4,%d15
8000af58:	6d 00 6c 00 	call 8000b030 <_sbrk_r>
8000af5c:	80 22       	mov.d %d2,%a2
8000af5e:	df f2 04 80 	jne %d2,-1,8000af66 <_malloc_r+0x3d4>
8000af62:	60 92       	mov.a %a2,%d9
8000af64:	82 0f       	mov %d15,0
8000af66:	80 2b       	mov.d %d11,%a2
8000af68:	19 e2 b0 f0 	ld.w %d2,[%a14]3056 <70000bf0 <__malloc_current_mallinfo>>
8000af6c:	a2 9b       	sub %d11,%d9
8000af6e:	42 f2       	add %d2,%d15
8000af70:	60 92       	mov.a %a2,%d9
8000af72:	42 bf       	add %d15,%d11
8000af74:	68 29       	st.w [%a15]8,%d9
8000af76:	8f 1f 40 31 	or %d3,%d15,1
8000af7a:	59 e2 b0 f0 	st.w [%a14]3056 <70000bf0 <__malloc_current_mallinfo>>,%d2
8000af7e:	59 23 04 00 	st.w [%a2]4 <70000bf0 <__malloc_current_mallinfo>>,%d3
8000af82:	df 0d 22 00 	jeq %d13,0,8000afc6 <_malloc_r+0x434>
8000af86:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000af8a:	ee 05       	jnz %d15,8000af94 <_malloc_r+0x402>
8000af8c:	82 12       	mov %d2,1
8000af8e:	59 22 04 00 	st.w [%a2]4,%d2
8000af92:	3c 2c       	j 8000afea <_malloc_r+0x458>
8000af94:	1b 4a ff af 	addi %d10,%d10,-12
8000af98:	8f 7a c0 f1 	andn %d15,%d10,7
8000af9c:	10 c2       	addsc.a %a2,%a12,%d15,0
8000af9e:	82 52       	mov %d2,5
8000afa0:	59 22 04 00 	st.w [%a2]4,%d2
8000afa4:	59 22 08 00 	st.w [%a2]8,%d2
8000afa8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000afac:	8f 12 00 21 	and %d2,%d2,1
8000afb0:	a6 f2       	or %d2,%d15
8000afb2:	59 c2 04 00 	st.w [%a12]4,%d2
8000afb6:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000afba:	ee 06       	jnz %d15,8000afc6 <_malloc_r+0x434>
8000afbc:	40 d4       	mov.aa %a4,%a13
8000afbe:	d9 c5 08 00 	lea %a5,[%a12]8
8000afc2:	6d 00 c2 10 	call 8000d146 <_free_r>
8000afc6:	91 00 00 27 	movh.a %a2,28672
8000afca:	19 ef b0 f0 	ld.w %d15,[%a14]3056 <70000bf0 <__malloc_current_mallinfo>>
8000afce:	19 22 dc 00 	ld.w %d2,[%a2]3100 <70000c1c <__malloc_max_sbrked_mem>>
8000afd2:	7f f2 04 80 	jge.u %d2,%d15,8000afda <_malloc_r+0x448>
8000afd6:	59 2f dc 00 	st.w [%a2]3100 <70000c1c <__malloc_max_sbrked_mem>>,%d15
8000afda:	91 00 00 27 	movh.a %a2,28672
8000afde:	19 22 d8 00 	ld.w %d2,[%a2]3096 <70000c18 <__malloc_max_total_mem>>
8000afe2:	7f f2 04 80 	jge.u %d2,%d15,8000afea <_malloc_r+0x458>
8000afe6:	59 2f d8 00 	st.w [%a2]3096 <70000c18 <__malloc_max_total_mem>>,%d15
8000afea:	c8 22       	ld.a %a2,[%a15]8
8000afec:	19 22 04 00 	ld.w %d2,[%a2]4 <70000c18 <__malloc_max_total_mem>>
8000aff0:	8f 32 c0 21 	andn %d2,%d2,3
8000aff4:	5a 82       	sub %d15,%d2,%d8
8000aff6:	8b 0f 41 32 	lt %d3,%d15,16
8000affa:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000affe:	76 36       	jz %d3,8000b00a <_malloc_r+0x478>
8000b000:	40 d4       	mov.aa %a4,%a13
8000b002:	6d 00 16 00 	call 8000b02e <__malloc_unlock>
8000b006:	a0 0c       	mov.a %a12,0
8000b008:	3c 10       	j 8000b028 <_malloc_r+0x496>
8000b00a:	c8 2c       	ld.a %a12,[%a15]8
8000b00c:	8f 18 40 21 	or %d2,%d8,1
8000b010:	96 01       	or %d15,1
8000b012:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b016:	59 c2 04 00 	st.w [%a12]4,%d2
8000b01a:	e8 22       	st.a [%a15]8,%a2
8000b01c:	6c 21       	st.w [%a2]4,%d15
8000b01e:	40 d4       	mov.aa %a4,%a13
8000b020:	6d 00 07 00 	call 8000b02e <__malloc_unlock>
8000b024:	d9 cc 08 00 	lea %a12,[%a12]8
8000b028:	40 c2       	mov.aa %a2,%a12
8000b02a:	00 90       	ret 

8000b02c <__malloc_lock>:
8000b02c:	00 90       	ret 

8000b02e <__malloc_unlock>:
8000b02e:	00 90       	ret 

8000b030 <_sbrk_r>:
8000b030:	82 0f       	mov %d15,0
8000b032:	91 00 00 c7 	movh.a %a12,28672
8000b036:	59 cf e8 00 	st.w [%a12]3112 <70000c28 <errno>>,%d15
8000b03a:	40 4f       	mov.aa %a15,%a4
8000b03c:	6d 00 47 17 	call 8000deca <sbrk>
8000b040:	80 2f       	mov.d %d15,%a2
8000b042:	5e f5       	jne %d15,-1,8000b04c <_sbrk_r+0x1c>
8000b044:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <errno>>
8000b048:	6e 02       	jz %d15,8000b04c <_sbrk_r+0x1c>
8000b04a:	68 0f       	st.w [%a15]0,%d15
8000b04c:	00 90       	ret 

8000b04e <sprintf>:
8000b04e:	20 68       	sub.a %sp,104
8000b050:	3b 80 20 f0 	mov %d15,520
8000b054:	91 00 00 f7 	movh.a %a15,28672
8000b058:	ac a6       	st.h [%sp]12,%d15
8000b05a:	f4 a4       	st.a [%sp],%a4
8000b05c:	b5 a4 10 00 	st.a [%sp]16,%a4
8000b060:	82 ff       	mov %d15,-1
8000b062:	99 f4 68 30 	ld.a %a4,[%a15]1256 <700004e8 <_impure_ptr>>
8000b066:	06 ff       	sh %d15,-1
8000b068:	40 56       	mov.aa %a6,%a5
8000b06a:	78 02       	st.w [%sp]8,%d15
8000b06c:	78 05       	st.w [%sp]20,%d15
8000b06e:	40 a5       	mov.aa %a5,%sp
8000b070:	82 ff       	mov %d15,-1
8000b072:	d9 a7 28 10 	lea %a7,[%sp]104
8000b076:	ac a7       	st.h [%sp]14,%d15
8000b078:	6d 00 10 00 	call 8000b098 <_svfprintf_r>
8000b07c:	d8 00       	ld.a %a15,[%sp]0
8000b07e:	82 0f       	mov %d15,0
8000b080:	28 0f       	st.b [%a15]0,%d15
8000b082:	00 90       	ret 

8000b084 <strlen>:
8000b084:	80 42       	mov.d %d2,%a4
8000b086:	80 4f       	mov.d %d15,%a4
8000b088:	60 ff       	mov.a %a15,%d15
8000b08a:	79 f3 00 00 	ld.b %d3,[%a15]0
8000b08e:	76 33       	jz %d3,8000b094 <strlen+0x10>
8000b090:	c2 1f       	add %d15,1
8000b092:	3c fb       	j 8000b088 <strlen+0x4>
8000b094:	52 22       	sub %d2,%d15,%d2
8000b096:	00 90       	ret 

8000b098 <_svfprintf_r>:
8000b098:	20 d0       	sub.a %sp,208
8000b09a:	80 5b       	mov.d %d11,%a5
8000b09c:	80 4c       	mov.d %d12,%a4
8000b09e:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b0a2:	40 7f       	mov.aa %a15,%a7
8000b0a4:	6d 00 27 11 	call 8000d2f2 <_localeconv_r>
8000b0a8:	d4 22       	ld.a %a2,[%a2]
8000b0aa:	40 24       	mov.aa %a4,%a2
8000b0ac:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b0b0:	6d ff ea ff 	call 8000b084 <strlen>
8000b0b4:	60 b2       	mov.a %a2,%d11
8000b0b6:	59 a2 20 00 	st.w [%sp]32,%d2
8000b0ba:	8c 26       	ld.h %d15,[%a2]12
8000b0bc:	6f 7f 16 00 	jz.t %d15,7,8000b0e8 <_svfprintf_r+0x50>
8000b0c0:	4c 24       	ld.w %d15,[%a2]16
8000b0c2:	ee 13       	jnz %d15,8000b0e8 <_svfprintf_r+0x50>
8000b0c4:	60 c4       	mov.a %a4,%d12
8000b0c6:	3b 00 04 40 	mov %d4,64
8000b0ca:	6d ff 64 fd 	call 8000ab92 <_malloc_r>
8000b0ce:	60 b3       	mov.a %a3,%d11
8000b0d0:	f4 32       	st.a [%a3],%a2
8000b0d2:	b5 32 10 00 	st.a [%a3]16,%a2
8000b0d6:	7c 26       	jnz.a %a2,8000b0e2 <_svfprintf_r+0x4a>
8000b0d8:	60 cf       	mov.a %a15,%d12
8000b0da:	da 0c       	mov %d15,12
8000b0dc:	68 0f       	st.w [%a15]0,%d15
8000b0de:	82 f2       	mov %d2,-1
8000b0e0:	00 90       	ret 
8000b0e2:	60 b2       	mov.a %a2,%d11
8000b0e4:	da 40       	mov %d15,64
8000b0e6:	6c 25       	st.w [%a2]20,%d15
8000b0e8:	82 0f       	mov %d15,0
8000b0ea:	d9 a2 10 20 	lea %a2,[%sp]144
8000b0ee:	a0 03       	mov.a %a3,0
8000b0f0:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b0f4:	78 19       	st.w [%sp]100,%d15
8000b0f6:	78 18       	st.w [%sp]96,%d15
8000b0f8:	78 05       	st.w [%sp]20,%d15
8000b0fa:	78 0b       	st.w [%sp]44,%d15
8000b0fc:	78 0c       	st.w [%sp]48,%d15
8000b0fe:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b102:	78 0e       	st.w [%sp]56,%d15
8000b104:	78 0a       	st.w [%sp]40,%d15
8000b106:	40 2e       	mov.aa %a14,%a2
8000b108:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b10c:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b110:	8b 0f 20 32 	ne %d3,%d15,0
8000b114:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b118:	76 33       	jz %d3,8000b11e <_svfprintf_r+0x86>
8000b11a:	b0 1c       	add.a %a12,1
8000b11c:	3c f8       	j 8000b10c <_svfprintf_r+0x74>
8000b11e:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b122:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b126:	80 3f       	mov.d %d15,%a3
8000b128:	6e 23       	jz %d15,8000b16e <_svfprintf_r+0xd6>
8000b12a:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b12e:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b132:	42 f3       	add %d3,%d15
8000b134:	59 a3 24 10 	st.w [%sp]100,%d3
8000b138:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b13c:	f4 e3       	st.a [%a14],%a3
8000b13e:	c2 13       	add %d3,1
8000b140:	6c e1       	st.w [%a14]4,%d15
8000b142:	59 a3 20 10 	st.w [%sp]96,%d3
8000b146:	8b 83 80 32 	ge %d3,%d3,8
8000b14a:	d9 ee 08 00 	lea %a14,[%a14]8
8000b14e:	76 3b       	jz %d3,8000b164 <_svfprintf_r+0xcc>
8000b150:	60 c4       	mov.a %a4,%d12
8000b152:	60 b5       	mov.a %a5,%d11
8000b154:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b158:	6d 00 e0 13 	call 8000d918 <__ssprint_r>
8000b15c:	df 02 69 88 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000b160:	d9 ae 10 20 	lea %a14,[%sp]144
8000b164:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b168:	42 f2       	add %d2,%d15
8000b16a:	59 a2 28 00 	st.w [%sp]40,%d2
8000b16e:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b172:	df 0f 56 08 	jeq %d15,0,8000c21e <_svfprintf_r+0x1186>
8000b176:	82 0f       	mov %d15,0
8000b178:	82 02       	mov %d2,0
8000b17a:	e9 af 01 10 	st.b [%sp]65,%d15
8000b17e:	d9 c2 01 00 	lea %a2,[%a12]1
8000b182:	82 0f       	mov %d15,0
8000b184:	82 fe       	mov %d14,-1
8000b186:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b18a:	82 0a       	mov %d10,0
8000b18c:	79 22 00 00 	ld.b %d2,[%a2]0
8000b190:	d9 23 01 00 	lea %a3,[%a2]1
8000b194:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b198:	59 a2 10 00 	st.w [%sp]16,%d2
8000b19c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b1a0:	1b 02 fe 3f 	addi %d3,%d2,-32
8000b1a4:	8b 93 a5 42 	ge.u %d4,%d3,89
8000b1a8:	df 04 19 84 	jne %d4,0,8000b9da <_svfprintf_r+0x942>
8000b1ac:	91 10 00 28 	movh.a %a2,32769
8000b1b0:	d9 22 3c 6b 	lea %a2,[%a2]-20036 <8000b1bc <_svfprintf_r+0x124>>
8000b1b4:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000b1b8:	dc 07       	ji %a7
8000b1ba:	00 00       	nop 
8000b1bc:	1d 00 c3 00 	j 8000b342 <_svfprintf_r+0x2aa>
8000b1c0:	1d 00 0d 04 	j 8000b9da <_svfprintf_r+0x942>
8000b1c4:	1d 00 0b 04 	j 8000b9da <_svfprintf_r+0x942>
8000b1c8:	1d 00 c0 00 	j 8000b348 <_svfprintf_r+0x2b0>
8000b1cc:	1d 00 07 04 	j 8000b9da <_svfprintf_r+0x942>
8000b1d0:	1d 00 05 04 	j 8000b9da <_svfprintf_r+0x942>
8000b1d4:	1d 00 03 04 	j 8000b9da <_svfprintf_r+0x942>
8000b1d8:	1d 00 01 04 	j 8000b9da <_svfprintf_r+0x942>
8000b1dc:	1d 00 ff 03 	j 8000b9da <_svfprintf_r+0x942>
8000b1e0:	1d 00 fd 03 	j 8000b9da <_svfprintf_r+0x942>
8000b1e4:	1d 00 b5 00 	j 8000b34e <_svfprintf_r+0x2b6>
8000b1e8:	1d 00 9c 00 	j 8000b320 <_svfprintf_r+0x288>
8000b1ec:	1d 00 f7 03 	j 8000b9da <_svfprintf_r+0x942>
8000b1f0:	1d 00 b8 00 	j 8000b360 <_svfprintf_r+0x2c8>
8000b1f4:	1d 00 b9 00 	j 8000b366 <_svfprintf_r+0x2ce>
8000b1f8:	1d 00 f1 03 	j 8000b9da <_svfprintf_r+0x942>
8000b1fc:	1d 00 de 00 	j 8000b3b8 <_svfprintf_r+0x320>
8000b200:	1d 00 df 00 	j 8000b3be <_svfprintf_r+0x326>
8000b204:	1d 00 dd 00 	j 8000b3be <_svfprintf_r+0x326>
8000b208:	1d 00 db 00 	j 8000b3be <_svfprintf_r+0x326>
8000b20c:	1d 00 d9 00 	j 8000b3be <_svfprintf_r+0x326>
8000b210:	1d 00 d7 00 	j 8000b3be <_svfprintf_r+0x326>
8000b214:	1d 00 d5 00 	j 8000b3be <_svfprintf_r+0x326>
8000b218:	1d 00 d3 00 	j 8000b3be <_svfprintf_r+0x326>
8000b21c:	1d 00 d1 00 	j 8000b3be <_svfprintf_r+0x326>
8000b220:	1d 00 cf 00 	j 8000b3be <_svfprintf_r+0x326>
8000b224:	1d 00 db 03 	j 8000b9da <_svfprintf_r+0x942>
8000b228:	1d 00 d9 03 	j 8000b9da <_svfprintf_r+0x942>
8000b22c:	1d 00 d7 03 	j 8000b9da <_svfprintf_r+0x942>
8000b230:	1d 00 d5 03 	j 8000b9da <_svfprintf_r+0x942>
8000b234:	1d 00 d3 03 	j 8000b9da <_svfprintf_r+0x942>
8000b238:	1d 00 d1 03 	j 8000b9da <_svfprintf_r+0x942>
8000b23c:	1d 00 cf 03 	j 8000b9da <_svfprintf_r+0x942>
8000b240:	1d 00 cd 03 	j 8000b9da <_svfprintf_r+0x942>
8000b244:	1d 00 cb 03 	j 8000b9da <_svfprintf_r+0x942>
8000b248:	1d 00 c9 03 	j 8000b9da <_svfprintf_r+0x942>
8000b24c:	1d 00 f9 00 	j 8000b43e <_svfprintf_r+0x3a6>
8000b250:	1d 00 21 01 	j 8000b492 <_svfprintf_r+0x3fa>
8000b254:	1d 00 c3 03 	j 8000b9da <_svfprintf_r+0x942>
8000b258:	1d 00 1d 01 	j 8000b492 <_svfprintf_r+0x3fa>
8000b25c:	1d 00 bf 03 	j 8000b9da <_svfprintf_r+0x942>
8000b260:	1d 00 bd 03 	j 8000b9da <_svfprintf_r+0x942>
8000b264:	1d 00 bb 03 	j 8000b9da <_svfprintf_r+0x942>
8000b268:	1d 00 b9 03 	j 8000b9da <_svfprintf_r+0x942>
8000b26c:	1d 00 c6 00 	j 8000b3f8 <_svfprintf_r+0x360>
8000b270:	1d 00 b5 03 	j 8000b9da <_svfprintf_r+0x942>
8000b274:	1d 00 b3 03 	j 8000b9da <_svfprintf_r+0x942>
8000b278:	1d 00 92 02 	j 8000b79c <_svfprintf_r+0x704>
8000b27c:	1d 00 af 03 	j 8000b9da <_svfprintf_r+0x942>
8000b280:	1d 00 ad 03 	j 8000b9da <_svfprintf_r+0x942>
8000b284:	1d 00 ab 03 	j 8000b9da <_svfprintf_r+0x942>
8000b288:	1d 00 a9 03 	j 8000b9da <_svfprintf_r+0x942>
8000b28c:	1d 00 a7 03 	j 8000b9da <_svfprintf_r+0x942>
8000b290:	1d 00 d0 02 	j 8000b830 <_svfprintf_r+0x798>
8000b294:	1d 00 a3 03 	j 8000b9da <_svfprintf_r+0x942>
8000b298:	1d 00 a1 03 	j 8000b9da <_svfprintf_r+0x942>
8000b29c:	1d 00 4b 00 	j 8000b332 <_svfprintf_r+0x29a>
8000b2a0:	1d 00 9d 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2a4:	1d 00 9b 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2a8:	1d 00 99 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2ac:	1d 00 97 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2b0:	1d 00 95 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2b4:	1d 00 93 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2b8:	1d 00 91 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2bc:	1d 00 8f 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2c0:	1d 00 8d 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2c4:	1d 00 8b 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2c8:	1d 00 b0 00 	j 8000b428 <_svfprintf_r+0x390>
8000b2cc:	1d 00 2f 00 	j 8000b32a <_svfprintf_r+0x292>
8000b2d0:	1d 00 e1 00 	j 8000b492 <_svfprintf_r+0x3fa>
8000b2d4:	1d 00 df 00 	j 8000b492 <_svfprintf_r+0x3fa>
8000b2d8:	1d 00 dd 00 	j 8000b492 <_svfprintf_r+0x3fa>
8000b2dc:	1d 00 91 00 	j 8000b3fe <_svfprintf_r+0x366>
8000b2e0:	1d 00 25 00 	j 8000b32a <_svfprintf_r+0x292>
8000b2e4:	1d 00 7b 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2e8:	1d 00 79 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2ec:	1d 00 8c 00 	j 8000b404 <_svfprintf_r+0x36c>
8000b2f0:	1d 00 75 03 	j 8000b9da <_svfprintf_r+0x942>
8000b2f4:	1d 00 39 02 	j 8000b766 <_svfprintf_r+0x6ce>
8000b2f8:	1d 00 54 02 	j 8000b7a0 <_svfprintf_r+0x708>
8000b2fc:	1d 00 66 02 	j 8000b7c8 <_svfprintf_r+0x730>
8000b300:	1d 00 90 00 	j 8000b420 <_svfprintf_r+0x388>
8000b304:	1d 00 6b 03 	j 8000b9da <_svfprintf_r+0x942>
8000b308:	1d 00 77 02 	j 8000b7f6 <_svfprintf_r+0x75e>
8000b30c:	1d 00 67 03 	j 8000b9da <_svfprintf_r+0x942>
8000b310:	1d 00 92 02 	j 8000b834 <_svfprintf_r+0x79c>
8000b314:	1d 00 63 03 	j 8000b9da <_svfprintf_r+0x942>
8000b318:	1d 00 61 03 	j 8000b9da <_svfprintf_r+0x942>
8000b31c:	1d 00 a0 02 	j 8000b85c <_svfprintf_r+0x7c4>
8000b320:	da 2b       	mov %d15,43
8000b322:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b326:	1d ff 33 ff 	j 8000b18c <_svfprintf_r+0xf4>
8000b32a:	e9 af 01 10 	st.b [%sp]65,%d15
8000b32e:	1d 00 8c 00 	j 8000b446 <_svfprintf_r+0x3ae>
8000b332:	e9 af 01 10 	st.b [%sp]65,%d15
8000b336:	7b 00 00 f8 	movh %d15,32768
8000b33a:	1b cf d9 f0 	addi %d15,%d15,3484
8000b33e:	1d 00 95 02 	j 8000b868 <_svfprintf_r+0x7d0>
8000b342:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000b346:	3c ee       	j 8000b322 <_svfprintf_r+0x28a>
8000b348:	8f 1a 40 a1 	or %d10,%d10,1
8000b34c:	3c eb       	j 8000b322 <_svfprintf_r+0x28a>
8000b34e:	48 02       	ld.w %d2,[%a15]0
8000b350:	b0 4f       	add.a %a15,4
8000b352:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b356:	ff 02 e6 7f 	jge %d2,0,8000b322 <_svfprintf_r+0x28a>
8000b35a:	32 52       	rsub %d2
8000b35c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b360:	8f 4a 40 a1 	or %d10,%d10,4
8000b364:	3c df       	j 8000b322 <_svfprintf_r+0x28a>
8000b366:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b36a:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b36e:	79 32 00 00 	ld.b %d2,[%a3]0
8000b372:	b0 12       	add.a %a2,1
8000b374:	59 a2 10 00 	st.w [%sp]16,%d2
8000b378:	8b a2 02 32 	eq %d3,%d2,42
8000b37c:	f6 33       	jnz %d3,8000b382 <_svfprintf_r+0x2ea>
8000b37e:	82 05       	mov %d5,0
8000b380:	3c 08       	j 8000b390 <_svfprintf_r+0x2f8>
8000b382:	48 0e       	ld.w %d14,[%a15]0
8000b384:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b388:	b0 4f       	add.a %a15,4
8000b38a:	8b fe 5f e3 	max %d14,%d14,-1
8000b38e:	3c ca       	j 8000b322 <_svfprintf_r+0x28a>
8000b390:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b394:	1b 02 fd 3f 	addi %d3,%d2,-48
8000b398:	ff a3 0a 80 	jge.u %d3,10,8000b3ac <_svfprintf_r+0x314>
8000b39c:	79 22 00 00 	ld.b %d2,[%a2]0
8000b3a0:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000b3a4:	59 a2 10 00 	st.w [%sp]16,%d2
8000b3a8:	b0 12       	add.a %a2,1
8000b3aa:	3c f3       	j 8000b390 <_svfprintf_r+0x2f8>
8000b3ac:	8b f5 5f e3 	max %d14,%d5,-1
8000b3b0:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b3b4:	1d ff f4 fe 	j 8000b19c <_svfprintf_r+0x104>
8000b3b8:	8f 0a 48 a1 	or %d10,%d10,128
8000b3bc:	3c b3       	j 8000b322 <_svfprintf_r+0x28a>
8000b3be:	82 02       	mov %d2,0
8000b3c0:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b3c4:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b3c8:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b3cc:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b3d0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000b3d4:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b3d8:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000b3dc:	b0 12       	add.a %a2,1
8000b3de:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b3e2:	79 32 00 00 	ld.b %d2,[%a3]0
8000b3e6:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b3ea:	59 a2 10 00 	st.w [%sp]16,%d2
8000b3ee:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b3f2:	bf a4 e9 ff 	jlt.u %d4,10,8000b3c4 <_svfprintf_r+0x32c>
8000b3f6:	3c dd       	j 8000b3b0 <_svfprintf_r+0x318>
8000b3f8:	8f 8a 40 a1 	or %d10,%d10,8
8000b3fc:	3c 93       	j 8000b322 <_svfprintf_r+0x28a>
8000b3fe:	8f 0a 44 a1 	or %d10,%d10,64
8000b402:	3c 90       	j 8000b322 <_svfprintf_r+0x28a>
8000b404:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b408:	79 33 00 00 	ld.b %d3,[%a3]0
8000b40c:	8b c3 26 32 	ne %d3,%d3,108
8000b410:	f6 35       	jnz %d3,8000b41a <_svfprintf_r+0x382>
8000b412:	b0 13       	add.a %a3,1
8000b414:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b418:	3c 04       	j 8000b420 <_svfprintf_r+0x388>
8000b41a:	8f 0a 41 a1 	or %d10,%d10,16
8000b41e:	3c 82       	j 8000b322 <_svfprintf_r+0x28a>
8000b420:	8f 0a 42 a1 	or %d10,%d10,32
8000b424:	1d ff 7f ff 	j 8000b322 <_svfprintf_r+0x28a>
8000b428:	48 03       	ld.w %d3,[%a15]0
8000b42a:	d9 fc 04 00 	lea %a12,[%a15]4
8000b42e:	e9 a3 28 10 	st.b [%sp]104,%d3
8000b432:	82 03       	mov %d3,0
8000b434:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b438:	60 ad       	mov.a %a13,%d10
8000b43a:	1d 00 dc 02 	j 8000b9f2 <_svfprintf_r+0x95a>
8000b43e:	e9 af 01 10 	st.b [%sp]65,%d15
8000b442:	8f 0a 41 a1 	or %d10,%d10,16
8000b446:	60 ad       	mov.a %a13,%d10
8000b448:	6f 5a 07 00 	jz.t %d10,5,8000b456 <_svfprintf_r+0x3be>
8000b44c:	d9 fc 08 00 	lea %a12,[%a15]8
8000b450:	09 f8 40 09 	ld.d %e8,[%a15]
8000b454:	3c 12       	j 8000b478 <_svfprintf_r+0x3e0>
8000b456:	d9 f2 04 00 	lea %a2,[%a15]4
8000b45a:	6f 4a 05 00 	jz.t %d10,4,8000b464 <_svfprintf_r+0x3cc>
8000b45e:	40 2c       	mov.aa %a12,%a2
8000b460:	48 08       	ld.w %d8,[%a15]0
8000b462:	3c 09       	j 8000b474 <_svfprintf_r+0x3dc>
8000b464:	48 03       	ld.w %d3,[%a15]0
8000b466:	40 2c       	mov.aa %a12,%a2
8000b468:	0b 30 00 88 	mov %e8,%d3
8000b46c:	6f 6a 06 00 	jz.t %d10,6,8000b478 <_svfprintf_r+0x3e0>
8000b470:	37 03 50 80 	extr %d8,%d3,0,16
8000b474:	0b 80 00 88 	mov %e8,%d8
8000b478:	82 13       	mov %d3,1
8000b47a:	ff 09 1d 02 	jge %d9,0,8000b8b4 <_svfprintf_r+0x81c>
8000b47e:	32 59       	rsub %d9
8000b480:	32 58       	rsub %d8
8000b482:	3b d0 02 70 	mov %d7,45
8000b486:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000b48a:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b48e:	1d 00 13 02 	j 8000b8b4 <_svfprintf_r+0x81c>
8000b492:	e9 af 01 10 	st.b [%sp]65,%d15
8000b496:	4c f0       	ld.w %d15,[%a15]0
8000b498:	d9 fc 08 00 	lea %a12,[%a15]8
8000b49c:	78 0b       	st.w [%sp]44,%d15
8000b49e:	4c f1       	ld.w %d15,[%a15]4
8000b4a0:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000b4a4:	78 0c       	st.w [%sp]48,%d15
8000b4a6:	19 a5 30 00 	ld.w %d5,[%sp]48
8000b4aa:	6d 00 16 12 	call 8000d8d6 <__fpclassifyd>
8000b4ae:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000b4b2:	19 a5 30 00 	ld.w %d5,[%sp]48
8000b4b6:	df 12 18 80 	jne %d2,1,8000b4e6 <_svfprintf_r+0x44e>
8000b4ba:	d2 06       	mov %e6,0
8000b4bc:	6d 00 b3 15 	call 8000e022 <__ltdf2>
8000b4c0:	ce 25       	jgez %d2,8000b4ca <_svfprintf_r+0x432>
8000b4c2:	3b d0 02 30 	mov %d3,45
8000b4c6:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b4ca:	58 04       	ld.w %d15,[%sp]16
8000b4cc:	7b 00 00 78 	movh %d7,32768
8000b4d0:	8b 8f 84 32 	ge %d3,%d15,72
8000b4d4:	1b 07 d9 d0 	addi %d13,%d7,3472
8000b4d8:	df 03 17 80 	jne %d3,0,8000b506 <_svfprintf_r+0x46e>
8000b4dc:	7b 00 00 78 	movh %d7,32768
8000b4e0:	1b c7 d8 d0 	addi %d13,%d7,3468
8000b4e4:	3c 11       	j 8000b506 <_svfprintf_r+0x46e>
8000b4e6:	6d 00 f8 11 	call 8000d8d6 <__fpclassifyd>
8000b4ea:	58 04       	ld.w %d15,[%sp]16
8000b4ec:	df 02 13 80 	jne %d2,0,8000b512 <_svfprintf_r+0x47a>
8000b4f0:	7b 00 00 78 	movh %d7,32768
8000b4f4:	8b 8f 84 32 	ge %d3,%d15,72
8000b4f8:	1b 87 d9 d0 	addi %d13,%d7,3480
8000b4fc:	f6 35       	jnz %d3,8000b506 <_svfprintf_r+0x46e>
8000b4fe:	7b 00 00 78 	movh %d7,32768
8000b502:	1b 47 d9 d0 	addi %d13,%d7,3476
8000b506:	8f 0a c8 a1 	andn %d10,%d10,128
8000b50a:	60 ad       	mov.a %a13,%d10
8000b50c:	82 39       	mov %d9,3
8000b50e:	1d 00 78 02 	j 8000b9fe <_svfprintf_r+0x966>
8000b512:	8f 0f c2 f1 	andn %d15,%d15,32
8000b516:	78 01       	st.w [%sp]4,%d15
8000b518:	df fe 09 00 	jeq %d14,-1,8000b52a <_svfprintf_r+0x492>
8000b51c:	8b 0e 00 72 	eq %d7,%d14,0
8000b520:	8b 7f 04 74 	and.eq %d7,%d15,71
8000b524:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000b528:	3c 02       	j 8000b52c <_svfprintf_r+0x494>
8000b52a:	82 6e       	mov %d14,6
8000b52c:	19 a3 30 00 	ld.w %d3,[%sp]48
8000b530:	8f 0a 50 21 	or %d2,%d10,256
8000b534:	60 2d       	mov.a %a13,%d2
8000b536:	d8 0b       	ld.a %a15,[%sp]44
8000b538:	82 0f       	mov %d15,0
8000b53a:	ce 34       	jgez %d3,8000b542 <_svfprintf_r+0x4aa>
8000b53c:	9b 03 00 38 	addih %d3,%d3,32768
8000b540:	da 2d       	mov %d15,45
8000b542:	78 09       	st.w [%sp]36,%d15
8000b544:	58 01       	ld.w %d15,[%sp]4
8000b546:	02 e9       	mov %d9,%d14
8000b548:	8b 6f 04 22 	eq %d2,%d15,70
8000b54c:	82 36       	mov %d6,3
8000b54e:	f6 28       	jnz %d2,8000b55e <_svfprintf_r+0x4c6>
8000b550:	8b 5f 24 12 	ne %d1,%d15,69
8000b554:	1b 1e 00 50 	addi %d5,%d14,1
8000b558:	82 26       	mov %d6,2
8000b55a:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000b55e:	60 c4       	mov.a %a4,%d12
8000b560:	80 f4       	mov.d %d4,%a15
8000b562:	02 35       	mov %d5,%d3
8000b564:	02 97       	mov %d7,%d9
8000b566:	d9 a5 04 10 	lea %a5,[%sp]68
8000b56a:	d9 a6 08 10 	lea %a6,[%sp]72
8000b56e:	d9 a7 14 10 	lea %a7,[%sp]84
8000b572:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b576:	59 a3 08 00 	st.w [%sp]8,%d3
8000b57a:	6d 00 1f 07 	call 8000c3b8 <_dtoa_r>
8000b57e:	58 01       	ld.w %d15,[%sp]4
8000b580:	80 2d       	mov.d %d13,%a2
8000b582:	8b 7f 24 12 	ne %d1,%d15,71
8000b586:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000b58a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000b58e:	df 01 11 80 	jne %d1,0,8000b5b0 <_svfprintf_r+0x518>
8000b592:	6f 0a 0f 80 	jnz.t %d10,0,8000b5b0 <_svfprintf_r+0x518>
8000b596:	19 a2 14 10 	ld.w %d2,[%sp]84
8000b59a:	58 01       	ld.w %d15,[%sp]4
8000b59c:	a2 d2       	sub %d2,%d13
8000b59e:	59 a2 14 00 	st.w [%sp]20,%d2
8000b5a2:	8b 7f 04 42 	eq %d4,%d15,71
8000b5a6:	19 a5 04 10 	ld.w %d5,[%sp]68
8000b5aa:	df 04 36 80 	jne %d4,0,8000b616 <_svfprintf_r+0x57e>
8000b5ae:	3c 3e       	j 8000b62a <_svfprintf_r+0x592>
8000b5b0:	0b 9d 00 80 	add %d8,%d13,%d9
8000b5b4:	df 02 1c 00 	jeq %d2,0,8000b5ec <_svfprintf_r+0x554>
8000b5b8:	60 d2       	mov.a %a2,%d13
8000b5ba:	80 f4       	mov.d %d4,%a15
8000b5bc:	79 20 00 00 	ld.b %d0,[%a2]0
8000b5c0:	d2 06       	mov %e6,0
8000b5c2:	02 35       	mov %d5,%d3
8000b5c4:	8b 00 03 f2 	eq %d15,%d0,48
8000b5c8:	59 a3 08 00 	st.w [%sp]8,%d3
8000b5cc:	6d 00 cb 14 	call 8000df62 <__nedf2>
8000b5d0:	8b 02 20 22 	ne %d2,%d2,0
8000b5d4:	0f 2f 80 00 	and %d0,%d15,%d2
8000b5d8:	19 a3 08 00 	ld.w %d3,[%sp]8
8000b5dc:	76 05       	jz %d0,8000b5e6 <_svfprintf_r+0x54e>
8000b5de:	8b 19 00 01 	rsub %d0,%d9,1
8000b5e2:	59 a0 04 10 	st.w [%sp]68,%d0
8000b5e6:	19 a2 04 10 	ld.w %d2,[%sp]68
8000b5ea:	42 28       	add %d8,%d2
8000b5ec:	80 f4       	mov.d %d4,%a15
8000b5ee:	d2 06       	mov %e6,0
8000b5f0:	02 35       	mov %d5,%d3
8000b5f2:	6d 00 98 14 	call 8000df22 <__eqdf2>
8000b5f6:	f6 23       	jnz %d2,8000b5fc <_svfprintf_r+0x564>
8000b5f8:	59 a8 14 10 	st.w [%sp]84,%d8
8000b5fc:	3b 00 03 00 	mov %d0,48
8000b600:	19 a3 14 10 	ld.w %d3,[%sp]84
8000b604:	7f 83 c9 ff 	jge.u %d3,%d8,8000b596 <_svfprintf_r+0x4fe>
8000b608:	1b 13 00 10 	addi %d1,%d3,1
8000b60c:	60 32       	mov.a %a2,%d3
8000b60e:	59 a1 14 10 	st.w [%sp]84,%d1
8000b612:	34 20       	st.b [%a2],%d0
8000b614:	3c f6       	j 8000b600 <_svfprintf_r+0x568>
8000b616:	0b 5e 20 31 	lt %d3,%d14,%d5
8000b61a:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000b61e:	df 03 88 00 	jeq %d3,0,8000b72e <_svfprintf_r+0x696>
8000b622:	58 04       	ld.w %d15,[%sp]16
8000b624:	c2 ef       	add %d15,-2
8000b626:	78 04       	st.w [%sp]16,%d15
8000b628:	3c 06       	j 8000b634 <_svfprintf_r+0x59c>
8000b62a:	58 04       	ld.w %d15,[%sp]16
8000b62c:	8b 6f 86 32 	ge %d3,%d15,102
8000b630:	df 03 69 80 	jne %d3,0,8000b702 <_svfprintf_r+0x66a>
8000b634:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b638:	9a f5       	add %d15,%d5,-1
8000b63a:	78 11       	st.w [%sp]68,%d15
8000b63c:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000b640:	3b b0 02 30 	mov %d3,43
8000b644:	ce f4       	jgez %d15,8000b64c <_svfprintf_r+0x5b4>
8000b646:	32 5f       	rsub %d15
8000b648:	3b d0 02 30 	mov %d3,45
8000b64c:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000b650:	8b af 40 32 	lt %d3,%d15,10
8000b654:	df 03 3e 80 	jne %d3,0,8000b6d0 <_svfprintf_r+0x638>
8000b658:	82 06       	mov %d6,0
8000b65a:	3b a0 00 00 	mov %d0,10
8000b65e:	4b 0f 01 42 	div %e4,%d15,%d0
8000b662:	8b 66 00 71 	rsub %d7,%d6,6
8000b666:	60 72       	mov.a %a2,%d7
8000b668:	d9 af 14 10 	lea %a15,[%sp]84
8000b66c:	1b 05 03 30 	addi %d3,%d5,48
8000b670:	30 2f       	add.a %a15,%a2
8000b672:	28 03       	st.b [%a15]0,%d3
8000b674:	8b a4 80 32 	ge %d3,%d4,10
8000b678:	02 4f       	mov %d15,%d4
8000b67a:	c2 16       	add %d6,1
8000b67c:	df 03 f1 ff 	jne %d3,0,8000b65e <_svfprintf_r+0x5c6>
8000b680:	60 74       	mov.a %a4,%d7
8000b682:	d9 a2 10 30 	lea %a2,[%sp]208
8000b686:	1b 04 03 f0 	addi %d15,%d4,48
8000b68a:	30 42       	add.a %a2,%a4
8000b68c:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000b690:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000b694:	80 22       	mov.d %d2,%a2
8000b696:	d9 af 1b 10 	lea %a15,[%sp]91
8000b69a:	80 ff       	mov.d %d15,%a15
8000b69c:	1b 32 f8 4f 	addi %d4,%d2,-125
8000b6a0:	82 03       	mov %d3,0
8000b6a2:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000b6a6:	3f 4f 08 80 	jlt.u %d15,%d4,8000b6b6 <_svfprintf_r+0x61e>
8000b6aa:	80 a2       	mov.d %d2,%sp
8000b6ac:	1b 02 0d 20 	addi %d2,%d2,208
8000b6b0:	8b 52 07 42 	eq %d4,%d2,117
8000b6b4:	76 46       	jz %d4,8000b6c0 <_svfprintf_r+0x628>
8000b6b6:	a0 03       	mov.a %a3,0
8000b6b8:	3c 04       	j 8000b6c0 <_svfprintf_r+0x628>
8000b6ba:	0c 70       	ld.bu %d15,[%a7]0
8000b6bc:	b0 17       	add.a %a7,1
8000b6be:	28 0f       	st.b [%a15]0,%d15
8000b6c0:	60 3f       	mov.a %a15,%d3
8000b6c2:	d9 a2 0d 10 	lea %a2,[%sp]77
8000b6c6:	b0 2f       	add.a %a15,2
8000b6c8:	30 2f       	add.a %a15,%a2
8000b6ca:	c2 13       	add %d3,1
8000b6cc:	fc 37       	loop %a3,8000b6ba <_svfprintf_r+0x622>
8000b6ce:	3c 0b       	j 8000b6e4 <_svfprintf_r+0x64c>
8000b6d0:	3b 00 03 30 	mov %d3,48
8000b6d4:	1b 0f 03 f0 	addi %d15,%d15,48
8000b6d8:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000b6dc:	e9 af 10 10 	st.b [%sp]80,%d15
8000b6e0:	d9 af 11 10 	lea %a15,[%sp]81
8000b6e4:	d9 a7 0d 10 	lea %a7,[%sp]77
8000b6e8:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000b6ec:	80 79       	mov.d %d9,%a7
8000b6ee:	58 05       	ld.w %d15,[%sp]20
8000b6f0:	b5 a7 38 00 	st.a [%sp]56,%a7
8000b6f4:	42 f9       	add %d9,%d15
8000b6f6:	ff 2f 04 00 	jge %d15,2,8000b6fe <_svfprintf_r+0x666>
8000b6fa:	6f 0a 2c 00 	jz.t %d10,0,8000b752 <_svfprintf_r+0x6ba>
8000b6fe:	c2 19       	add %d9,1
8000b700:	3c 29       	j 8000b752 <_svfprintf_r+0x6ba>
8000b702:	58 04       	ld.w %d15,[%sp]16
8000b704:	8b 6f 26 42 	ne %d4,%d15,102
8000b708:	df 04 15 80 	jne %d4,0,8000b732 <_svfprintf_r+0x69a>
8000b70c:	02 59       	mov %d9,%d5
8000b70e:	8e 59       	jlez %d5,8000b720 <_svfprintf_r+0x688>
8000b710:	f6 e3       	jnz %d14,8000b716 <_svfprintf_r+0x67e>
8000b712:	6f 0a 20 00 	jz.t %d10,0,8000b752 <_svfprintf_r+0x6ba>
8000b716:	1b 1e 00 30 	addi %d3,%d14,1
8000b71a:	0b 35 00 90 	add %d9,%d5,%d3
8000b71e:	3c 1a       	j 8000b752 <_svfprintf_r+0x6ba>
8000b720:	f6 e4       	jnz %d14,8000b728 <_svfprintf_r+0x690>
8000b722:	82 19       	mov %d9,1
8000b724:	6f 0a 17 00 	jz.t %d10,0,8000b752 <_svfprintf_r+0x6ba>
8000b728:	1b 2e 00 90 	addi %d9,%d14,2
8000b72c:	3c 13       	j 8000b752 <_svfprintf_r+0x6ba>
8000b72e:	da 67       	mov %d15,103
8000b730:	78 04       	st.w [%sp]16,%d15
8000b732:	58 05       	ld.w %d15,[%sp]20
8000b734:	8f 1a 00 a1 	and %d10,%d10,1
8000b738:	0b a5 00 90 	add %d9,%d5,%d10
8000b73c:	7f f5 0b 00 	jge %d5,%d15,8000b752 <_svfprintf_r+0x6ba>
8000b740:	8b 15 40 92 	lt %d9,%d5,1
8000b744:	8b 25 00 31 	rsub %d3,%d5,2
8000b748:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000b74c:	19 a9 14 00 	ld.w %d9,[%sp]20
8000b750:	42 39       	add %d9,%d3
8000b752:	58 09       	ld.w %d15,[%sp]36
8000b754:	82 0e       	mov %d14,0
8000b756:	df 0f 55 01 	jeq %d15,0,8000ba00 <_svfprintf_r+0x968>
8000b75a:	3b d0 02 70 	mov %d7,45
8000b75e:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b762:	1d 00 4f 01 	j 8000ba00 <_svfprintf_r+0x968>
8000b766:	e9 af 01 10 	st.b [%sp]65,%d15
8000b76a:	d9 f2 04 00 	lea %a2,[%a15]4
8000b76e:	6f 5a 09 00 	jz.t %d10,5,8000b780 <_svfprintf_r+0x6e8>
8000b772:	58 0a       	ld.w %d15,[%sp]40
8000b774:	c8 03       	ld.a %a3,[%a15]0
8000b776:	0b f0 00 48 	mov %e4,%d15
8000b77a:	89 34 40 09 	st.d [%a3],%e4
8000b77e:	3c 0c       	j 8000b796 <_svfprintf_r+0x6fe>
8000b780:	6f 4a 08 80 	jnz.t %d10,4,8000b790 <_svfprintf_r+0x6f8>
8000b784:	6f 6a 06 00 	jz.t %d10,6,8000b790 <_svfprintf_r+0x6f8>
8000b788:	c8 03       	ld.a %a3,[%a15]0
8000b78a:	58 0a       	ld.w %d15,[%sp]40
8000b78c:	ac 30       	st.h [%a3]0,%d15
8000b78e:	3c 04       	j 8000b796 <_svfprintf_r+0x6fe>
8000b790:	c8 03       	ld.a %a3,[%a15]0
8000b792:	58 0a       	ld.w %d15,[%sp]40
8000b794:	6c 30       	st.w [%a3]0,%d15
8000b796:	40 2f       	mov.aa %a15,%a2
8000b798:	1d ff b8 fc 	j 8000b108 <_svfprintf_r+0x70>
8000b79c:	8f 0a 41 a1 	or %d10,%d10,16
8000b7a0:	6f 5a 07 00 	jz.t %d10,5,8000b7ae <_svfprintf_r+0x716>
8000b7a4:	d9 fc 08 00 	lea %a12,[%a15]8
8000b7a8:	09 f8 40 09 	ld.d %e8,[%a15]
8000b7ac:	3c 0c       	j 8000b7c4 <_svfprintf_r+0x72c>
8000b7ae:	d9 fc 04 00 	lea %a12,[%a15]4
8000b7b2:	6f 4a 07 80 	jnz.t %d10,4,8000b7c0 <_svfprintf_r+0x728>
8000b7b6:	6f 6a 05 00 	jz.t %d10,6,8000b7c0 <_svfprintf_r+0x728>
8000b7ba:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b7be:	3c 02       	j 8000b7c2 <_svfprintf_r+0x72a>
8000b7c0:	48 08       	ld.w %d8,[%a15]0
8000b7c2:	82 09       	mov %d9,0
8000b7c4:	82 03       	mov %d3,0
8000b7c6:	3c 73       	j 8000b8ac <_svfprintf_r+0x814>
8000b7c8:	3b 00 03 40 	mov %d4,48
8000b7cc:	7b 00 00 f8 	movh %d15,32768
8000b7d0:	1b df da f0 	addi %d15,%d15,3501
8000b7d4:	e9 a4 02 10 	st.b [%sp]66,%d4
8000b7d8:	3b 80 07 40 	mov %d4,120
8000b7dc:	78 0f       	st.w [%sp]60,%d15
8000b7de:	02 4f       	mov %d15,%d4
8000b7e0:	d9 fc 04 00 	lea %a12,[%a15]4
8000b7e4:	48 08       	ld.w %d8,[%a15]0
8000b7e6:	82 09       	mov %d9,0
8000b7e8:	8f 2a 40 a1 	or %d10,%d10,2
8000b7ec:	e9 a4 03 10 	st.b [%sp]67,%d4
8000b7f0:	82 23       	mov %d3,2
8000b7f2:	78 04       	st.w [%sp]16,%d15
8000b7f4:	3c 5c       	j 8000b8ac <_svfprintf_r+0x814>
8000b7f6:	82 07       	mov %d7,0
8000b7f8:	48 0d       	ld.w %d13,[%a15]0
8000b7fa:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b7fe:	02 e9       	mov %d9,%d14
8000b800:	60 ad       	mov.a %a13,%d10
8000b802:	d9 fc 04 00 	lea %a12,[%a15]4
8000b806:	60 d4       	mov.a %a4,%d13
8000b808:	0e ef       	jltz %d14,8000b826 <_svfprintf_r+0x78e>
8000b80a:	82 04       	mov %d4,0
8000b80c:	02 e5       	mov %d5,%d14
8000b80e:	6d 00 77 0d 	call 8000d2fc <memchr>
8000b812:	bd 02 f6 00 	jz.a %a2,8000b9fe <_svfprintf_r+0x966>
8000b816:	60 d4       	mov.a %a4,%d13
8000b818:	01 42 20 30 	sub.a %a3,%a2,%a4
8000b81c:	80 32       	mov.d %d2,%a3
8000b81e:	0b e2 80 91 	min %d9,%d2,%d14
8000b822:	1d 00 ee 00 	j 8000b9fe <_svfprintf_r+0x966>
8000b826:	6d ff 2f fc 	call 8000b084 <strlen>
8000b82a:	02 29       	mov %d9,%d2
8000b82c:	1d 00 e9 00 	j 8000b9fe <_svfprintf_r+0x966>
8000b830:	8f 0a 41 a1 	or %d10,%d10,16
8000b834:	6f 5a 07 00 	jz.t %d10,5,8000b842 <_svfprintf_r+0x7aa>
8000b838:	d9 fc 08 00 	lea %a12,[%a15]8
8000b83c:	09 f8 40 09 	ld.d %e8,[%a15]
8000b840:	3c 0c       	j 8000b858 <_svfprintf_r+0x7c0>
8000b842:	d9 fc 04 00 	lea %a12,[%a15]4
8000b846:	6f 4a 07 80 	jnz.t %d10,4,8000b854 <_svfprintf_r+0x7bc>
8000b84a:	6f 6a 05 00 	jz.t %d10,6,8000b854 <_svfprintf_r+0x7bc>
8000b84e:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b852:	3c 02       	j 8000b856 <_svfprintf_r+0x7be>
8000b854:	48 08       	ld.w %d8,[%a15]0
8000b856:	82 09       	mov %d9,0
8000b858:	82 13       	mov %d3,1
8000b85a:	3c 29       	j 8000b8ac <_svfprintf_r+0x814>
8000b85c:	e9 af 01 10 	st.b [%sp]65,%d15
8000b860:	7b 00 00 f8 	movh %d15,32768
8000b864:	1b df da f0 	addi %d15,%d15,3501
8000b868:	78 0f       	st.w [%sp]60,%d15
8000b86a:	6f 5a 07 00 	jz.t %d10,5,8000b878 <_svfprintf_r+0x7e0>
8000b86e:	d9 fc 08 00 	lea %a12,[%a15]8
8000b872:	09 f8 40 09 	ld.d %e8,[%a15]
8000b876:	3c 0c       	j 8000b88e <_svfprintf_r+0x7f6>
8000b878:	d9 fc 04 00 	lea %a12,[%a15]4
8000b87c:	6f 4a 07 80 	jnz.t %d10,4,8000b88a <_svfprintf_r+0x7f2>
8000b880:	6f 6a 05 00 	jz.t %d10,6,8000b88a <_svfprintf_r+0x7f2>
8000b884:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b888:	3c 02       	j 8000b88c <_svfprintf_r+0x7f4>
8000b88a:	48 08       	ld.w %d8,[%a15]0
8000b88c:	82 09       	mov %d9,0
8000b88e:	82 23       	mov %d3,2
8000b890:	6f 0a 0e 00 	jz.t %d10,0,8000b8ac <_svfprintf_r+0x814>
8000b894:	0f 89 a0 40 	or %d4,%d9,%d8
8000b898:	76 4a       	jz %d4,8000b8ac <_svfprintf_r+0x814>
8000b89a:	58 04       	ld.w %d15,[%sp]16
8000b89c:	3b 00 03 70 	mov %d7,48
8000b8a0:	e9 a7 02 10 	st.b [%sp]66,%d7
8000b8a4:	e9 af 03 10 	st.b [%sp]67,%d15
8000b8a8:	8f 2a 40 a1 	or %d10,%d10,2
8000b8ac:	82 07       	mov %d7,0
8000b8ae:	60 ad       	mov.a %a13,%d10
8000b8b0:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b8b4:	80 d2       	mov.d %d2,%a13
8000b8b6:	8b 0e 80 72 	ge %d7,%d14,0
8000b8ba:	8f 02 c8 41 	andn %d4,%d2,128
8000b8be:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000b8c2:	0f 98 a0 60 	or %d6,%d8,%d9
8000b8c6:	8b 0e 20 42 	ne %d4,%d14,0
8000b8ca:	8b 06 00 45 	or.ne %d4,%d6,0
8000b8ce:	60 2d       	mov.a %a13,%d2
8000b8d0:	df 04 72 00 	jeq %d4,0,8000b9b4 <_svfprintf_r+0x91c>
8000b8d4:	df 13 06 00 	jeq %d3,1,8000b8e0 <_svfprintf_r+0x848>
8000b8d8:	df 23 57 00 	jeq %d3,2,8000b986 <_svfprintf_r+0x8ee>
8000b8dc:	82 03       	mov %d3,0
8000b8de:	3c 03       	j 8000b8e4 <_svfprintf_r+0x84c>
8000b8e0:	82 04       	mov %d4,0
8000b8e2:	3c 22       	j 8000b926 <_svfprintf_r+0x88e>
8000b8e4:	8b 73 02 71 	rsub %d7,%d3,39
8000b8e8:	60 72       	mov.a %a2,%d7
8000b8ea:	8f 78 00 41 	and %d4,%d8,7
8000b8ee:	d9 a3 28 10 	lea %a3,[%sp]104
8000b8f2:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000b8f6:	30 23       	add.a %a3,%a2
8000b8f8:	1b 04 03 40 	addi %d4,%d4,48
8000b8fc:	06 d9       	sh %d9,-3
8000b8fe:	34 34       	st.b [%a3],%d4
8000b900:	0f 89 a0 60 	or %d6,%d9,%d8
8000b904:	c2 13       	add %d3,1
8000b906:	df 06 ef ff 	jne %d6,0,8000b8e4 <_svfprintf_r+0x84c>
8000b90a:	80 d2       	mov.d %d2,%a13
8000b90c:	80 3d       	mov.d %d13,%a3
8000b90e:	6f 02 61 00 	jz.t %d2,0,8000b9d0 <_svfprintf_r+0x938>
8000b912:	8b 04 03 42 	eq %d4,%d4,48
8000b916:	df 04 5d 80 	jne %d4,0,8000b9d0 <_svfprintf_r+0x938>
8000b91a:	3b 00 03 70 	mov %d7,48
8000b91e:	c2 fd       	add %d13,-1
8000b920:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000b924:	3c 56       	j 8000b9d0 <_svfprintf_r+0x938>
8000b926:	8b 84 02 71 	rsub %d7,%d4,40
8000b92a:	8b 09 00 32 	eq %d3,%d9,0
8000b92e:	60 73       	mov.a %a3,%d7
8000b930:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000b934:	d9 a7 28 10 	lea %a7,[%sp]104
8000b938:	8b 09 00 35 	or.ne %d3,%d9,0
8000b93c:	30 37       	add.a %a7,%a3
8000b93e:	1b 14 00 d0 	addi %d13,%d4,1
8000b942:	df 03 1b 00 	jeq %d3,0,8000b978 <_svfprintf_r+0x8e0>
8000b946:	8b 74 02 41 	rsub %d4,%d4,39
8000b94a:	60 42       	mov.a %a2,%d4
8000b94c:	fb a0 00 60 	mov %e6,10
8000b950:	0b 89 10 48 	mov %e4,%d9,%d8
8000b954:	d9 af 28 10 	lea %a15,[%sp]104
8000b958:	30 2f       	add.a %a15,%a2
8000b95a:	6d 00 fb 13 	call 8000e150 <__umoddi3>
8000b95e:	0b 89 10 48 	mov %e4,%d9,%d8
8000b962:	1b 02 03 20 	addi %d2,%d2,48
8000b966:	fb a0 00 60 	mov %e6,10
8000b96a:	28 02       	st.b [%a15]0,%d2
8000b96c:	6d 00 a2 13 	call 8000e0b0 <__udivdi3>
8000b970:	02 d4       	mov %d4,%d13
8000b972:	0b 23 10 88 	mov %e8,%d3,%d2
8000b976:	3c d8       	j 8000b926 <_svfprintf_r+0x88e>
8000b978:	80 7d       	mov.d %d13,%a7
8000b97a:	1b 08 03 80 	addi %d8,%d8,48
8000b97e:	c2 fd       	add %d13,-1
8000b980:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000b984:	3c 26       	j 8000b9d0 <_svfprintf_r+0x938>
8000b986:	82 03       	mov %d3,0
8000b988:	d8 0f       	ld.a %a15,[%sp]60
8000b98a:	80 ad       	mov.d %d13,%sp
8000b98c:	8f f8 00 f1 	and %d15,%d8,15
8000b990:	8b 73 02 71 	rsub %d7,%d3,39
8000b994:	1b 8d 06 d0 	addi %d13,%d13,104
8000b998:	10 f7       	addsc.a %a7,%a15,%d15,0
8000b99a:	42 7d       	add %d13,%d7
8000b99c:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000b9a0:	0c 70       	ld.bu %d15,[%a7]0
8000b9a2:	60 d2       	mov.a %a2,%d13
8000b9a4:	06 c9       	sh %d9,-4
8000b9a6:	2c 20       	st.b [%a2]0,%d15
8000b9a8:	0f 89 a0 40 	or %d4,%d9,%d8
8000b9ac:	c2 13       	add %d3,1
8000b9ae:	df 04 ed ff 	jne %d4,0,8000b988 <_svfprintf_r+0x8f0>
8000b9b2:	3c 0f       	j 8000b9d0 <_svfprintf_r+0x938>
8000b9b4:	80 a2       	mov.d %d2,%sp
8000b9b6:	1b 02 09 d0 	addi %d13,%d2,144
8000b9ba:	f6 3b       	jnz %d3,8000b9d0 <_svfprintf_r+0x938>
8000b9bc:	80 df       	mov.d %d15,%a13
8000b9be:	2e 09       	jz.t %d15,0,8000b9d0 <_svfprintf_r+0x938>
8000b9c0:	1b 02 0d d0 	addi %d13,%d2,208
8000b9c4:	60 d2       	mov.a %a2,%d13
8000b9c6:	3b 00 03 70 	mov %d7,48
8000b9ca:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000b9ce:	80 2d       	mov.d %d13,%a2
8000b9d0:	d9 a3 10 20 	lea %a3,[%sp]144
8000b9d4:	80 39       	mov.d %d9,%a3
8000b9d6:	a2 d9       	sub %d9,%d13
8000b9d8:	3c 14       	j 8000ba00 <_svfprintf_r+0x968>
8000b9da:	e9 af 01 10 	st.b [%sp]65,%d15
8000b9de:	58 04       	ld.w %d15,[%sp]16
8000b9e0:	df 0f 1f 04 	jeq %d15,0,8000c21e <_svfprintf_r+0x1186>
8000b9e4:	82 03       	mov %d3,0
8000b9e6:	60 ad       	mov.a %a13,%d10
8000b9e8:	e9 af 28 10 	st.b [%sp]104,%d15
8000b9ec:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b9f0:	40 fc       	mov.aa %a12,%a15
8000b9f2:	80 a2       	mov.d %d2,%sp
8000b9f4:	82 19       	mov %d9,1
8000b9f6:	82 0e       	mov %d14,0
8000b9f8:	1b 82 06 d0 	addi %d13,%d2,104
8000b9fc:	3c 02       	j 8000ba00 <_svfprintf_r+0x968>
8000b9fe:	82 0e       	mov %d14,0
8000ba00:	79 a7 01 10 	ld.b %d7,[%sp]65
8000ba04:	80 df       	mov.d %d15,%a13
8000ba06:	0b e9 a0 a1 	max %d10,%d9,%d14
8000ba0a:	80 d2       	mov.d %d2,%a13
8000ba0c:	16 02       	and %d15,2
8000ba0e:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000ba12:	60 ff       	mov.a %a15,%d15
8000ba14:	8a 2a       	cadd %d10,%d15,2
8000ba16:	8f 42 08 f1 	and %d15,%d2,132
8000ba1a:	ee 48       	jnz %d15,8000baaa <_svfprintf_r+0xa12>
8000ba1c:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000ba20:	a2 a8       	sub %d8,%d10
8000ba22:	bf 18 44 00 	jlt %d8,1,8000baaa <_svfprintf_r+0xa12>
8000ba26:	91 00 00 28 	movh.a %a2,32768
8000ba2a:	d9 22 d0 70 	lea %a2,[%a2]3536 <80000dd0 <blanks.4035>>
8000ba2e:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000dd0 <blanks.4035>>
8000ba32:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000dd0 <blanks.4035>>
8000ba36:	8b 18 81 72 	ge %d7,%d8,17
8000ba3a:	f4 e2       	st.a [%a14],%a2
8000ba3c:	df 07 20 00 	jeq %d7,0,8000ba7c <_svfprintf_r+0x9e4>
8000ba40:	1b 14 00 00 	addi %d0,%d4,1
8000ba44:	3b 00 01 20 	mov %d2,16
8000ba48:	1b 01 01 10 	addi %d1,%d1,16
8000ba4c:	59 e2 04 00 	st.w [%a14]4,%d2
8000ba50:	59 a0 20 10 	st.w [%sp]96,%d0
8000ba54:	59 a1 24 10 	st.w [%sp]100,%d1
8000ba58:	8b 80 80 02 	ge %d0,%d0,8
8000ba5c:	d9 ee 08 00 	lea %a14,[%a14]8
8000ba60:	76 0b       	jz %d0,8000ba76 <_svfprintf_r+0x9de>
8000ba62:	60 c4       	mov.a %a4,%d12
8000ba64:	60 b5       	mov.a %a5,%d11
8000ba66:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ba6a:	6d 00 57 0f 	call 8000d918 <__ssprint_r>
8000ba6e:	df 02 e0 83 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000ba72:	d9 ae 10 20 	lea %a14,[%sp]144
8000ba76:	1b 08 ff 8f 	addi %d8,%d8,-16
8000ba7a:	3c d6       	j 8000ba26 <_svfprintf_r+0x98e>
8000ba7c:	c2 14       	add %d4,1
8000ba7e:	42 81       	add %d1,%d8
8000ba80:	59 e8 04 00 	st.w [%a14]4,%d8
8000ba84:	59 a4 20 10 	st.w [%sp]96,%d4
8000ba88:	59 a1 24 10 	st.w [%sp]100,%d1
8000ba8c:	8b 84 80 42 	ge %d4,%d4,8
8000ba90:	d9 ee 08 00 	lea %a14,[%a14]8
8000ba94:	76 4b       	jz %d4,8000baaa <_svfprintf_r+0xa12>
8000ba96:	60 c4       	mov.a %a4,%d12
8000ba98:	60 b5       	mov.a %a5,%d11
8000ba9a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ba9e:	6d 00 3d 0f 	call 8000d918 <__ssprint_r>
8000baa2:	df 02 c6 83 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000baa6:	d9 ae 10 20 	lea %a14,[%sp]144
8000baaa:	79 a4 01 10 	ld.b %d4,[%sp]65
8000baae:	df 04 21 00 	jeq %d4,0,8000baf0 <_svfprintf_r+0xa58>
8000bab2:	19 a4 24 10 	ld.w %d4,[%sp]100
8000bab6:	d9 a7 01 10 	lea %a7,[%sp]65
8000baba:	c2 14       	add %d4,1
8000babc:	59 a4 24 10 	st.w [%sp]100,%d4
8000bac0:	19 a4 20 10 	ld.w %d4,[%sp]96
8000bac4:	82 17       	mov %d7,1
8000bac6:	c2 14       	add %d4,1
8000bac8:	f4 e7       	st.a [%a14],%a7
8000baca:	59 e7 04 00 	st.w [%a14]4,%d7
8000bace:	59 a4 20 10 	st.w [%sp]96,%d4
8000bad2:	8b 84 80 42 	ge %d4,%d4,8
8000bad6:	d9 ee 08 00 	lea %a14,[%a14]8
8000bada:	76 4b       	jz %d4,8000baf0 <_svfprintf_r+0xa58>
8000badc:	60 c4       	mov.a %a4,%d12
8000bade:	60 b5       	mov.a %a5,%d11
8000bae0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bae4:	6d 00 1a 0f 	call 8000d918 <__ssprint_r>
8000bae8:	df 02 a3 83 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000baec:	d9 ae 10 20 	lea %a14,[%sp]144
8000baf0:	bd 0f 21 00 	jz.a %a15,8000bb32 <_svfprintf_r+0xa9a>
8000baf4:	19 a4 24 10 	ld.w %d4,[%sp]100
8000baf8:	d9 a7 02 10 	lea %a7,[%sp]66
8000bafc:	c2 24       	add %d4,2
8000bafe:	59 a4 24 10 	st.w [%sp]100,%d4
8000bb02:	19 a4 20 10 	ld.w %d4,[%sp]96
8000bb06:	82 27       	mov %d7,2
8000bb08:	c2 14       	add %d4,1
8000bb0a:	f4 e7       	st.a [%a14],%a7
8000bb0c:	59 e7 04 00 	st.w [%a14]4,%d7
8000bb10:	59 a4 20 10 	st.w [%sp]96,%d4
8000bb14:	8b 84 80 42 	ge %d4,%d4,8
8000bb18:	d9 ee 08 00 	lea %a14,[%a14]8
8000bb1c:	76 4b       	jz %d4,8000bb32 <_svfprintf_r+0xa9a>
8000bb1e:	60 c4       	mov.a %a4,%d12
8000bb20:	60 b5       	mov.a %a5,%d11
8000bb22:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bb26:	6d 00 f9 0e 	call 8000d918 <__ssprint_r>
8000bb2a:	df 02 82 83 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bb2e:	d9 ae 10 20 	lea %a14,[%sp]144
8000bb32:	8b 0f 28 42 	ne %d4,%d15,128
8000bb36:	df 04 48 80 	jne %d4,0,8000bbc6 <_svfprintf_r+0xb2e>
8000bb3a:	58 07       	ld.w %d15,[%sp]28
8000bb3c:	7b 00 00 28 	movh %d2,32768
8000bb40:	60 23       	mov.a %a3,%d2
8000bb42:	a2 af       	sub %d15,%d10
8000bb44:	d9 3f c0 70 	lea %a15,[%a3]3520
8000bb48:	bf 1f 3f 00 	jlt %d15,1,8000bbc6 <_svfprintf_r+0xb2e>
8000bb4c:	19 a7 24 10 	ld.w %d7,[%sp]100
8000bb50:	19 a4 20 10 	ld.w %d4,[%sp]96
8000bb54:	8b 1f 81 82 	ge %d8,%d15,17
8000bb58:	ec e0       	st.a [%a14]0,%a15
8000bb5a:	df 08 20 00 	jeq %d8,0,8000bb9a <_svfprintf_r+0xb02>
8000bb5e:	1b 14 00 00 	addi %d0,%d4,1
8000bb62:	3b 00 01 20 	mov %d2,16
8000bb66:	1b 07 01 10 	addi %d1,%d7,16
8000bb6a:	59 e2 04 00 	st.w [%a14]4,%d2
8000bb6e:	59 a0 20 10 	st.w [%sp]96,%d0
8000bb72:	59 a1 24 10 	st.w [%sp]100,%d1
8000bb76:	8b 80 80 02 	ge %d0,%d0,8
8000bb7a:	d9 ee 08 00 	lea %a14,[%a14]8
8000bb7e:	76 0b       	jz %d0,8000bb94 <_svfprintf_r+0xafc>
8000bb80:	60 c4       	mov.a %a4,%d12
8000bb82:	60 b5       	mov.a %a5,%d11
8000bb84:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bb88:	6d 00 c8 0e 	call 8000d918 <__ssprint_r>
8000bb8c:	df 02 51 83 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bb90:	d9 ae 10 20 	lea %a14,[%sp]144
8000bb94:	1b 0f ff ff 	addi %d15,%d15,-16
8000bb98:	3c da       	j 8000bb4c <_svfprintf_r+0xab4>
8000bb9a:	c2 14       	add %d4,1
8000bb9c:	42 f7       	add %d7,%d15
8000bb9e:	6c e1       	st.w [%a14]4,%d15
8000bba0:	59 a4 20 10 	st.w [%sp]96,%d4
8000bba4:	59 a7 24 10 	st.w [%sp]100,%d7
8000bba8:	8b 84 80 42 	ge %d4,%d4,8
8000bbac:	d9 ee 08 00 	lea %a14,[%a14]8
8000bbb0:	76 4b       	jz %d4,8000bbc6 <_svfprintf_r+0xb2e>
8000bbb2:	60 c4       	mov.a %a4,%d12
8000bbb4:	60 b5       	mov.a %a5,%d11
8000bbb6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bbba:	6d 00 af 0e 	call 8000d918 <__ssprint_r>
8000bbbe:	df 02 38 83 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bbc2:	d9 ae 10 20 	lea %a14,[%sp]144
8000bbc6:	7b 00 00 88 	movh %d8,32768
8000bbca:	a2 9e       	sub %d14,%d9
8000bbcc:	1b 08 dc 80 	addi %d8,%d8,3520
8000bbd0:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000bbd4:	bf 1e 3c 00 	jlt %d14,1,8000bc4c <_svfprintf_r+0xbb4>
8000bbd8:	19 a6 24 10 	ld.w %d6,[%sp]100
8000bbdc:	19 a4 20 10 	ld.w %d4,[%sp]96
8000bbe0:	8b 1e 81 02 	ge %d0,%d14,17
8000bbe4:	74 e8       	st.w [%a14],%d8
8000bbe6:	df 00 1c 00 	jeq %d0,0,8000bc1e <_svfprintf_r+0xb86>
8000bbea:	c2 14       	add %d4,1
8000bbec:	1b 06 01 00 	addi %d0,%d6,16
8000bbf0:	ec e1       	st.a [%a14]4,%a15
8000bbf2:	59 a4 20 10 	st.w [%sp]96,%d4
8000bbf6:	59 a0 24 10 	st.w [%sp]100,%d0
8000bbfa:	8b 84 80 42 	ge %d4,%d4,8
8000bbfe:	d9 ee 08 00 	lea %a14,[%a14]8
8000bc02:	76 4b       	jz %d4,8000bc18 <_svfprintf_r+0xb80>
8000bc04:	60 c4       	mov.a %a4,%d12
8000bc06:	60 b5       	mov.a %a5,%d11
8000bc08:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bc0c:	6d 00 86 0e 	call 8000d918 <__ssprint_r>
8000bc10:	df 02 0f 83 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bc14:	d9 ae 10 20 	lea %a14,[%sp]144
8000bc18:	1b 0e ff ef 	addi %d14,%d14,-16
8000bc1c:	3c de       	j 8000bbd8 <_svfprintf_r+0xb40>
8000bc1e:	c2 14       	add %d4,1
8000bc20:	42 e6       	add %d6,%d14
8000bc22:	59 ee 04 00 	st.w [%a14]4,%d14
8000bc26:	59 a4 20 10 	st.w [%sp]96,%d4
8000bc2a:	59 a6 24 10 	st.w [%sp]100,%d6
8000bc2e:	8b 84 80 42 	ge %d4,%d4,8
8000bc32:	d9 ee 08 00 	lea %a14,[%a14]8
8000bc36:	76 4b       	jz %d4,8000bc4c <_svfprintf_r+0xbb4>
8000bc38:	60 c4       	mov.a %a4,%d12
8000bc3a:	60 b5       	mov.a %a5,%d11
8000bc3c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bc40:	6d 00 6c 0e 	call 8000d918 <__ssprint_r>
8000bc44:	df 02 f5 82 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bc48:	d9 ae 10 20 	lea %a14,[%sp]144
8000bc4c:	80 df       	mov.d %d15,%a13
8000bc4e:	19 ae 24 10 	ld.w %d14,[%sp]100
8000bc52:	19 a8 20 10 	ld.w %d8,[%sp]96
8000bc56:	6f 8f 1d 80 	jnz.t %d15,8,8000bc90 <_svfprintf_r+0xbf8>
8000bc5a:	c2 18       	add %d8,1
8000bc5c:	59 e9 04 00 	st.w [%a14]4,%d9
8000bc60:	42 e9       	add %d9,%d14
8000bc62:	59 a8 20 10 	st.w [%sp]96,%d8
8000bc66:	74 ed       	st.w [%a14],%d13
8000bc68:	59 a9 24 10 	st.w [%sp]100,%d9
8000bc6c:	8b 88 80 82 	ge %d8,%d8,8
8000bc70:	d9 ef 08 00 	lea %a15,[%a14]8
8000bc74:	df 08 79 02 	jeq %d8,0,8000c166 <_svfprintf_r+0x10ce>
8000bc78:	60 c4       	mov.a %a4,%d12
8000bc7a:	60 b5       	mov.a %a5,%d11
8000bc7c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bc80:	6d 00 4c 0e 	call 8000d918 <__ssprint_r>
8000bc84:	df 02 d5 82 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bc88:	d9 af 10 20 	lea %a15,[%sp]144
8000bc8c:	1d 00 6d 02 	j 8000c166 <_svfprintf_r+0x10ce>
8000bc90:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bc94:	8b 62 46 f2 	lt %d15,%d2,102
8000bc98:	df 0f be 81 	jne %d15,0,8000c014 <_svfprintf_r+0xf7c>
8000bc9c:	d2 06       	mov %e6,0
8000bc9e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bca2:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bca6:	6d 00 3e 11 	call 8000df22 <__eqdf2>
8000bcaa:	df 02 78 80 	jne %d2,0,8000bd9a <_svfprintf_r+0xd02>
8000bcae:	7b 00 00 38 	movh %d3,32768
8000bcb2:	1b e3 db 30 	addi %d3,%d3,3518
8000bcb6:	c2 18       	add %d8,1
8000bcb8:	74 e3       	st.w [%a14],%d3
8000bcba:	1b 1e 00 90 	addi %d9,%d14,1
8000bcbe:	82 13       	mov %d3,1
8000bcc0:	59 a8 20 10 	st.w [%sp]96,%d8
8000bcc4:	59 e3 04 00 	st.w [%a14]4,%d3
8000bcc8:	59 a9 24 10 	st.w [%sp]100,%d9
8000bccc:	8b 88 80 82 	ge %d8,%d8,8
8000bcd0:	d9 ef 08 00 	lea %a15,[%a14]8
8000bcd4:	76 8b       	jz %d8,8000bcea <_svfprintf_r+0xc52>
8000bcd6:	60 c4       	mov.a %a4,%d12
8000bcd8:	60 b5       	mov.a %a5,%d11
8000bcda:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bcde:	6d 00 1d 0e 	call 8000d918 <__ssprint_r>
8000bce2:	df 02 a6 82 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bce6:	d9 af 10 20 	lea %a15,[%sp]144
8000bcea:	58 11       	ld.w %d15,[%sp]68
8000bcec:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bcf0:	3f 2f 05 00 	jlt %d15,%d2,8000bcfa <_svfprintf_r+0xc62>
8000bcf4:	80 df       	mov.d %d15,%a13
8000bcf6:	6f 0f 38 02 	jz.t %d15,0,8000c166 <_svfprintf_r+0x10ce>
8000bcfa:	58 08       	ld.w %d15,[%sp]32
8000bcfc:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bd00:	68 1f       	st.w [%a15]4,%d15
8000bd02:	58 19       	ld.w %d15,[%sp]100
8000bd04:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bd08:	42 2f       	add %d15,%d2
8000bd0a:	78 19       	st.w [%sp]100,%d15
8000bd0c:	58 18       	ld.w %d15,[%sp]96
8000bd0e:	e8 03       	st.a [%a15]0,%a3
8000bd10:	c2 1f       	add %d15,1
8000bd12:	78 18       	st.w [%sp]96,%d15
8000bd14:	8b 8f 80 f2 	ge %d15,%d15,8
8000bd18:	d9 ff 08 00 	lea %a15,[%a15]8
8000bd1c:	6e 0b       	jz %d15,8000bd32 <_svfprintf_r+0xc9a>
8000bd1e:	60 c4       	mov.a %a4,%d12
8000bd20:	60 b5       	mov.a %a5,%d11
8000bd22:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bd26:	6d 00 f9 0d 	call 8000d918 <__ssprint_r>
8000bd2a:	df 02 82 82 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bd2e:	d9 af 10 20 	lea %a15,[%sp]144
8000bd32:	58 05       	ld.w %d15,[%sp]20
8000bd34:	7b 00 00 88 	movh %d8,32768
8000bd38:	c2 ff       	add %d15,-1
8000bd3a:	1b 08 dc 80 	addi %d8,%d8,3520
8000bd3e:	3b 00 01 90 	mov %d9,16
8000bd42:	bf 1f 12 02 	jlt %d15,1,8000c166 <_svfprintf_r+0x10ce>
8000bd46:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bd4a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bd4e:	8b 1f 81 42 	ge %d4,%d15,17
8000bd52:	68 08       	st.w [%a15]0,%d8
8000bd54:	df 04 1c 00 	jeq %d4,0,8000bd8c <_svfprintf_r+0xcf4>
8000bd58:	c2 13       	add %d3,1
8000bd5a:	1b 05 01 40 	addi %d4,%d5,16
8000bd5e:	68 19       	st.w [%a15]4,%d9
8000bd60:	59 a3 20 10 	st.w [%sp]96,%d3
8000bd64:	59 a4 24 10 	st.w [%sp]100,%d4
8000bd68:	8b 83 80 32 	ge %d3,%d3,8
8000bd6c:	d9 ff 08 00 	lea %a15,[%a15]8
8000bd70:	76 3b       	jz %d3,8000bd86 <_svfprintf_r+0xcee>
8000bd72:	60 c4       	mov.a %a4,%d12
8000bd74:	60 b5       	mov.a %a5,%d11
8000bd76:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bd7a:	6d 00 cf 0d 	call 8000d918 <__ssprint_r>
8000bd7e:	df 02 58 82 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bd82:	d9 af 10 20 	lea %a15,[%sp]144
8000bd86:	1b 0f ff ff 	addi %d15,%d15,-16
8000bd8a:	3c de       	j 8000bd46 <_svfprintf_r+0xcae>
8000bd8c:	12 54       	add %d4,%d15,%d5
8000bd8e:	68 1f       	st.w [%a15]4,%d15
8000bd90:	59 a4 24 10 	st.w [%sp]100,%d4
8000bd94:	9a 13       	add %d15,%d3,1
8000bd96:	1d 00 e1 01 	j 8000c158 <_svfprintf_r+0x10c0>
8000bd9a:	19 a3 04 10 	ld.w %d3,[%sp]68
8000bd9e:	ff 13 8e 00 	jge %d3,1,8000beba <_svfprintf_r+0xe22>
8000bda2:	7b 00 00 38 	movh %d3,32768
8000bda6:	1b e3 db 30 	addi %d3,%d3,3518
8000bdaa:	c2 18       	add %d8,1
8000bdac:	74 e3       	st.w [%a14],%d3
8000bdae:	1b 1e 00 90 	addi %d9,%d14,1
8000bdb2:	82 13       	mov %d3,1
8000bdb4:	59 a8 20 10 	st.w [%sp]96,%d8
8000bdb8:	59 e3 04 00 	st.w [%a14]4,%d3
8000bdbc:	59 a9 24 10 	st.w [%sp]100,%d9
8000bdc0:	8b 88 80 82 	ge %d8,%d8,8
8000bdc4:	d9 ef 08 00 	lea %a15,[%a14]8
8000bdc8:	76 8b       	jz %d8,8000bdde <_svfprintf_r+0xd46>
8000bdca:	60 c4       	mov.a %a4,%d12
8000bdcc:	60 b5       	mov.a %a5,%d11
8000bdce:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bdd2:	6d 00 a3 0d 	call 8000d918 <__ssprint_r>
8000bdd6:	df 02 2c 82 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bdda:	d9 af 10 20 	lea %a15,[%sp]144
8000bdde:	58 11       	ld.w %d15,[%sp]68
8000bde0:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bde4:	a6 2f       	or %d15,%d2
8000bde6:	ee 04       	jnz %d15,8000bdee <_svfprintf_r+0xd56>
8000bde8:	80 df       	mov.d %d15,%a13
8000bdea:	6f 0f be 01 	jz.t %d15,0,8000c166 <_svfprintf_r+0x10ce>
8000bdee:	58 08       	ld.w %d15,[%sp]32
8000bdf0:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bdf4:	68 1f       	st.w [%a15]4,%d15
8000bdf6:	58 19       	ld.w %d15,[%sp]100
8000bdf8:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bdfc:	42 2f       	add %d15,%d2
8000bdfe:	78 19       	st.w [%sp]100,%d15
8000be00:	58 18       	ld.w %d15,[%sp]96
8000be02:	e8 03       	st.a [%a15]0,%a3
8000be04:	c2 1f       	add %d15,1
8000be06:	78 18       	st.w [%sp]96,%d15
8000be08:	8b 8f 80 f2 	ge %d15,%d15,8
8000be0c:	d9 ff 08 00 	lea %a15,[%a15]8
8000be10:	6e 0b       	jz %d15,8000be26 <_svfprintf_r+0xd8e>
8000be12:	60 c4       	mov.a %a4,%d12
8000be14:	60 b5       	mov.a %a5,%d11
8000be16:	d9 a6 1c 10 	lea %a6,[%sp]92
8000be1a:	6d 00 7f 0d 	call 8000d918 <__ssprint_r>
8000be1e:	df 02 08 82 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000be22:	d9 af 10 20 	lea %a15,[%sp]144
8000be26:	58 11       	ld.w %d15,[%sp]68
8000be28:	7b 00 00 88 	movh %d8,32768
8000be2c:	32 5f       	rsub %d15
8000be2e:	1b 08 dc 80 	addi %d8,%d8,3520
8000be32:	3b 00 01 90 	mov %d9,16
8000be36:	bf 1f 3a 00 	jlt %d15,1,8000beaa <_svfprintf_r+0xe12>
8000be3a:	19 a5 24 10 	ld.w %d5,[%sp]100
8000be3e:	19 a3 20 10 	ld.w %d3,[%sp]96
8000be42:	8b 1f 81 42 	ge %d4,%d15,17
8000be46:	68 08       	st.w [%a15]0,%d8
8000be48:	df 04 1c 00 	jeq %d4,0,8000be80 <_svfprintf_r+0xde8>
8000be4c:	c2 13       	add %d3,1
8000be4e:	1b 05 01 40 	addi %d4,%d5,16
8000be52:	68 19       	st.w [%a15]4,%d9
8000be54:	59 a3 20 10 	st.w [%sp]96,%d3
8000be58:	59 a4 24 10 	st.w [%sp]100,%d4
8000be5c:	8b 83 80 32 	ge %d3,%d3,8
8000be60:	d9 ff 08 00 	lea %a15,[%a15]8
8000be64:	76 3b       	jz %d3,8000be7a <_svfprintf_r+0xde2>
8000be66:	60 c4       	mov.a %a4,%d12
8000be68:	60 b5       	mov.a %a5,%d11
8000be6a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000be6e:	6d 00 55 0d 	call 8000d918 <__ssprint_r>
8000be72:	df 02 de 81 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000be76:	d9 af 10 20 	lea %a15,[%sp]144
8000be7a:	1b 0f ff ff 	addi %d15,%d15,-16
8000be7e:	3c de       	j 8000be3a <_svfprintf_r+0xda2>
8000be80:	68 1f       	st.w [%a15]4,%d15
8000be82:	12 54       	add %d4,%d15,%d5
8000be84:	9a 13       	add %d15,%d3,1
8000be86:	78 18       	st.w [%sp]96,%d15
8000be88:	59 a4 24 10 	st.w [%sp]100,%d4
8000be8c:	8b 8f 80 f2 	ge %d15,%d15,8
8000be90:	d9 ff 08 00 	lea %a15,[%a15]8
8000be94:	6e 0b       	jz %d15,8000beaa <_svfprintf_r+0xe12>
8000be96:	60 c4       	mov.a %a4,%d12
8000be98:	60 b5       	mov.a %a5,%d11
8000be9a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000be9e:	6d 00 3d 0d 	call 8000d918 <__ssprint_r>
8000bea2:	df 02 c6 81 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bea6:	d9 af 10 20 	lea %a15,[%sp]144
8000beaa:	58 05       	ld.w %d15,[%sp]20
8000beac:	68 0d       	st.w [%a15]0,%d13
8000beae:	68 1f       	st.w [%a15]4,%d15
8000beb0:	19 a2 14 00 	ld.w %d2,[%sp]20
8000beb4:	58 19       	ld.w %d15,[%sp]100
8000beb6:	1d 00 4d 01 	j 8000c150 <_svfprintf_r+0x10b8>
8000beba:	58 05       	ld.w %d15,[%sp]20
8000bebc:	74 ed       	st.w [%a14],%d13
8000bebe:	3f f3 6a 00 	jlt %d3,%d15,8000bf92 <_svfprintf_r+0xefa>
8000bec2:	02 f9       	mov %d9,%d15
8000bec4:	c2 18       	add %d8,1
8000bec6:	42 e9       	add %d9,%d14
8000bec8:	59 a8 20 10 	st.w [%sp]96,%d8
8000becc:	6c e1       	st.w [%a14]4,%d15
8000bece:	59 a9 24 10 	st.w [%sp]100,%d9
8000bed2:	8b 88 80 82 	ge %d8,%d8,8
8000bed6:	d9 ef 08 00 	lea %a15,[%a14]8
8000beda:	76 8b       	jz %d8,8000bef0 <_svfprintf_r+0xe58>
8000bedc:	60 c4       	mov.a %a4,%d12
8000bede:	60 b5       	mov.a %a5,%d11
8000bee0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bee4:	6d 00 1a 0d 	call 8000d918 <__ssprint_r>
8000bee8:	df 02 a3 81 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000beec:	d9 af 10 20 	lea %a15,[%sp]144
8000bef0:	58 11       	ld.w %d15,[%sp]68
8000bef2:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bef6:	7b 00 00 88 	movh %d8,32768
8000befa:	a2 2f       	sub %d15,%d2
8000befc:	1b 08 dc 80 	addi %d8,%d8,3520
8000bf00:	3b 00 01 90 	mov %d9,16
8000bf04:	bf 1f 3a 00 	jlt %d15,1,8000bf78 <_svfprintf_r+0xee0>
8000bf08:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bf0c:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bf10:	8b 1f 81 42 	ge %d4,%d15,17
8000bf14:	68 08       	st.w [%a15]0,%d8
8000bf16:	df 04 1c 00 	jeq %d4,0,8000bf4e <_svfprintf_r+0xeb6>
8000bf1a:	c2 13       	add %d3,1
8000bf1c:	1b 05 01 40 	addi %d4,%d5,16
8000bf20:	68 19       	st.w [%a15]4,%d9
8000bf22:	59 a3 20 10 	st.w [%sp]96,%d3
8000bf26:	59 a4 24 10 	st.w [%sp]100,%d4
8000bf2a:	8b 83 80 32 	ge %d3,%d3,8
8000bf2e:	d9 ff 08 00 	lea %a15,[%a15]8
8000bf32:	76 3b       	jz %d3,8000bf48 <_svfprintf_r+0xeb0>
8000bf34:	60 c4       	mov.a %a4,%d12
8000bf36:	60 b5       	mov.a %a5,%d11
8000bf38:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bf3c:	6d 00 ee 0c 	call 8000d918 <__ssprint_r>
8000bf40:	df 02 77 81 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bf44:	d9 af 10 20 	lea %a15,[%sp]144
8000bf48:	1b 0f ff ff 	addi %d15,%d15,-16
8000bf4c:	3c de       	j 8000bf08 <_svfprintf_r+0xe70>
8000bf4e:	68 1f       	st.w [%a15]4,%d15
8000bf50:	12 54       	add %d4,%d15,%d5
8000bf52:	9a 13       	add %d15,%d3,1
8000bf54:	78 18       	st.w [%sp]96,%d15
8000bf56:	59 a4 24 10 	st.w [%sp]100,%d4
8000bf5a:	8b 8f 80 f2 	ge %d15,%d15,8
8000bf5e:	d9 ff 08 00 	lea %a15,[%a15]8
8000bf62:	6e 0b       	jz %d15,8000bf78 <_svfprintf_r+0xee0>
8000bf64:	60 c4       	mov.a %a4,%d12
8000bf66:	60 b5       	mov.a %a5,%d11
8000bf68:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bf6c:	6d 00 d6 0c 	call 8000d918 <__ssprint_r>
8000bf70:	df 02 5f 81 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bf74:	d9 af 10 20 	lea %a15,[%sp]144
8000bf78:	80 df       	mov.d %d15,%a13
8000bf7a:	6f 0f f6 00 	jz.t %d15,0,8000c166 <_svfprintf_r+0x10ce>
8000bf7e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bf82:	58 08       	ld.w %d15,[%sp]32
8000bf84:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bf88:	68 1f       	st.w [%a15]4,%d15
8000bf8a:	e8 03       	st.a [%a15]0,%a3
8000bf8c:	58 19       	ld.w %d15,[%sp]100
8000bf8e:	1d 00 e1 00 	j 8000c150 <_svfprintf_r+0x10b8>
8000bf92:	c2 18       	add %d8,1
8000bf94:	59 e3 04 00 	st.w [%a14]4,%d3
8000bf98:	42 e3       	add %d3,%d14
8000bf9a:	59 a8 20 10 	st.w [%sp]96,%d8
8000bf9e:	59 a3 24 10 	st.w [%sp]100,%d3
8000bfa2:	8b 88 80 82 	ge %d8,%d8,8
8000bfa6:	d9 ef 08 00 	lea %a15,[%a14]8
8000bfaa:	76 8b       	jz %d8,8000bfc0 <_svfprintf_r+0xf28>
8000bfac:	60 c4       	mov.a %a4,%d12
8000bfae:	60 b5       	mov.a %a5,%d11
8000bfb0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bfb4:	6d 00 b2 0c 	call 8000d918 <__ssprint_r>
8000bfb8:	df 02 3b 81 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bfbc:	d9 af 10 20 	lea %a15,[%sp]144
8000bfc0:	58 08       	ld.w %d15,[%sp]32
8000bfc2:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bfc6:	68 1f       	st.w [%a15]4,%d15
8000bfc8:	58 19       	ld.w %d15,[%sp]100
8000bfca:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bfce:	42 2f       	add %d15,%d2
8000bfd0:	78 19       	st.w [%sp]100,%d15
8000bfd2:	58 18       	ld.w %d15,[%sp]96
8000bfd4:	99 ae 04 10 	ld.a %a14,[%sp]68
8000bfd8:	c2 1f       	add %d15,1
8000bfda:	60 d2       	mov.a %a2,%d13
8000bfdc:	e8 03       	st.a [%a15]0,%a3
8000bfde:	78 18       	st.w [%sp]96,%d15
8000bfe0:	8b 8f 80 f2 	ge %d15,%d15,8
8000bfe4:	30 2e       	add.a %a14,%a2
8000bfe6:	d9 ff 08 00 	lea %a15,[%a15]8
8000bfea:	6e 0b       	jz %d15,8000c000 <_svfprintf_r+0xf68>
8000bfec:	60 c4       	mov.a %a4,%d12
8000bfee:	60 b5       	mov.a %a5,%d11
8000bff0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bff4:	6d 00 92 0c 	call 8000d918 <__ssprint_r>
8000bff8:	df 02 1b 81 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000bffc:	d9 af 10 20 	lea %a15,[%sp]144
8000c000:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c004:	58 11       	ld.w %d15,[%sp]68
8000c006:	e8 0e       	st.a [%a15]0,%a14
8000c008:	5a f2       	sub %d15,%d2,%d15
8000c00a:	68 1f       	st.w [%a15]4,%d15
8000c00c:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c010:	1d 00 a0 00 	j 8000c150 <_svfprintf_r+0x10b8>
8000c014:	c2 18       	add %d8,1
8000c016:	82 13       	mov %d3,1
8000c018:	1b 1e 00 90 	addi %d9,%d14,1
8000c01c:	58 05       	ld.w %d15,[%sp]20
8000c01e:	59 a8 20 10 	st.w [%sp]96,%d8
8000c022:	74 ed       	st.w [%a14],%d13
8000c024:	59 e3 04 00 	st.w [%a14]4,%d3
8000c028:	59 a9 24 10 	st.w [%sp]100,%d9
8000c02c:	8b 88 80 82 	ge %d8,%d8,8
8000c030:	ff 2f 05 00 	jge %d15,2,8000c03a <_svfprintf_r+0xfa2>
8000c034:	80 d2       	mov.d %d2,%a13
8000c036:	6f 02 81 00 	jz.t %d2,0,8000c138 <_svfprintf_r+0x10a0>
8000c03a:	d9 ef 08 00 	lea %a15,[%a14]8
8000c03e:	76 8b       	jz %d8,8000c054 <_svfprintf_r+0xfbc>
8000c040:	60 c4       	mov.a %a4,%d12
8000c042:	60 b5       	mov.a %a5,%d11
8000c044:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c048:	6d 00 68 0c 	call 8000d918 <__ssprint_r>
8000c04c:	df 02 f1 80 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000c050:	d9 af 10 20 	lea %a15,[%sp]144
8000c054:	58 08       	ld.w %d15,[%sp]32
8000c056:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c05a:	68 1f       	st.w [%a15]4,%d15
8000c05c:	58 19       	ld.w %d15,[%sp]100
8000c05e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c062:	42 2f       	add %d15,%d2
8000c064:	78 19       	st.w [%sp]100,%d15
8000c066:	58 18       	ld.w %d15,[%sp]96
8000c068:	e8 03       	st.a [%a15]0,%a3
8000c06a:	c2 1f       	add %d15,1
8000c06c:	78 18       	st.w [%sp]96,%d15
8000c06e:	8b 8f 80 f2 	ge %d15,%d15,8
8000c072:	d9 ff 08 00 	lea %a15,[%a15]8
8000c076:	6e 0b       	jz %d15,8000c08c <_svfprintf_r+0xff4>
8000c078:	60 c4       	mov.a %a4,%d12
8000c07a:	60 b5       	mov.a %a5,%d11
8000c07c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c080:	6d 00 4c 0c 	call 8000d918 <__ssprint_r>
8000c084:	df 02 d5 80 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000c088:	d9 af 10 20 	lea %a15,[%sp]144
8000c08c:	d2 06       	mov %e6,0
8000c08e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c092:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c096:	6d 00 66 0f 	call 8000df62 <__nedf2>
8000c09a:	58 05       	ld.w %d15,[%sp]20
8000c09c:	c2 ff       	add %d15,-1
8000c09e:	76 2c       	jz %d2,8000c0b6 <_svfprintf_r+0x101e>
8000c0a0:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c0a4:	60 de       	mov.a %a14,%d13
8000c0a6:	68 1f       	st.w [%a15]4,%d15
8000c0a8:	42 2f       	add %d15,%d2
8000c0aa:	78 19       	st.w [%sp]100,%d15
8000c0ac:	58 18       	ld.w %d15,[%sp]96
8000c0ae:	b0 1e       	add.a %a14,1
8000c0b0:	e8 0e       	st.a [%a15]0,%a14
8000c0b2:	c2 1f       	add %d15,1
8000c0b4:	3c 31       	j 8000c116 <_svfprintf_r+0x107e>
8000c0b6:	7b 00 00 88 	movh %d8,32768
8000c0ba:	1b 08 dc 80 	addi %d8,%d8,3520
8000c0be:	3b 00 01 90 	mov %d9,16
8000c0c2:	bf 1f 3f 00 	jlt %d15,1,8000c140 <_svfprintf_r+0x10a8>
8000c0c6:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c0ca:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c0ce:	8b 1f 81 42 	ge %d4,%d15,17
8000c0d2:	68 08       	st.w [%a15]0,%d8
8000c0d4:	df 04 1c 00 	jeq %d4,0,8000c10c <_svfprintf_r+0x1074>
8000c0d8:	c2 13       	add %d3,1
8000c0da:	1b 05 01 40 	addi %d4,%d5,16
8000c0de:	68 19       	st.w [%a15]4,%d9
8000c0e0:	59 a3 20 10 	st.w [%sp]96,%d3
8000c0e4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c0e8:	8b 83 80 32 	ge %d3,%d3,8
8000c0ec:	d9 ff 08 00 	lea %a15,[%a15]8
8000c0f0:	76 3b       	jz %d3,8000c106 <_svfprintf_r+0x106e>
8000c0f2:	60 c4       	mov.a %a4,%d12
8000c0f4:	60 b5       	mov.a %a5,%d11
8000c0f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c0fa:	6d 00 0f 0c 	call 8000d918 <__ssprint_r>
8000c0fe:	df 02 98 80 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000c102:	d9 af 10 20 	lea %a15,[%sp]144
8000c106:	1b 0f ff ff 	addi %d15,%d15,-16
8000c10a:	3c de       	j 8000c0c6 <_svfprintf_r+0x102e>
8000c10c:	12 54       	add %d4,%d15,%d5
8000c10e:	68 1f       	st.w [%a15]4,%d15
8000c110:	59 a4 24 10 	st.w [%sp]100,%d4
8000c114:	9a 13       	add %d15,%d3,1
8000c116:	78 18       	st.w [%sp]96,%d15
8000c118:	8b 8f 80 f2 	ge %d15,%d15,8
8000c11c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c120:	6e 10       	jz %d15,8000c140 <_svfprintf_r+0x10a8>
8000c122:	60 c4       	mov.a %a4,%d12
8000c124:	60 b5       	mov.a %a5,%d11
8000c126:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c12a:	6d 00 f7 0b 	call 8000d918 <__ssprint_r>
8000c12e:	df 02 80 80 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000c132:	d9 af 10 20 	lea %a15,[%sp]144
8000c136:	3c 05       	j 8000c140 <_svfprintf_r+0x10a8>
8000c138:	df 08 f5 ff 	jne %d8,0,8000c122 <_svfprintf_r+0x108a>
8000c13c:	d9 ef 08 00 	lea %a15,[%a14]8
8000c140:	58 0e       	ld.w %d15,[%sp]56
8000c142:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c146:	68 1f       	st.w [%a15]4,%d15
8000c148:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c14c:	58 19       	ld.w %d15,[%sp]100
8000c14e:	e8 03       	st.a [%a15]0,%a3
8000c150:	42 2f       	add %d15,%d2
8000c152:	78 19       	st.w [%sp]100,%d15
8000c154:	58 18       	ld.w %d15,[%sp]96
8000c156:	c2 1f       	add %d15,1
8000c158:	78 18       	st.w [%sp]96,%d15
8000c15a:	8b 8f 80 f2 	ge %d15,%d15,8
8000c15e:	df 0f 8d fd 	jne %d15,0,8000bc78 <_svfprintf_r+0xbe0>
8000c162:	d9 ff 08 00 	lea %a15,[%a15]8
8000c166:	80 df       	mov.d %d15,%a13
8000c168:	ae 2d       	jnz.t %d15,2,8000c182 <_svfprintf_r+0x10ea>
8000c16a:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c16e:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c172:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c176:	42 f2       	add %d2,%d15
8000c178:	58 19       	ld.w %d15,[%sp]100
8000c17a:	59 a2 28 00 	st.w [%sp]40,%d2
8000c17e:	6e 49       	jz %d15,8000c210 <_svfprintf_r+0x1178>
8000c180:	3c 40       	j 8000c200 <_svfprintf_r+0x1168>
8000c182:	58 07       	ld.w %d15,[%sp]28
8000c184:	3b 00 01 80 	mov %d8,16
8000c188:	a2 af       	sub %d15,%d10
8000c18a:	bf 1f f0 7f 	jlt %d15,1,8000c16a <_svfprintf_r+0x10d2>
8000c18e:	91 00 00 28 	movh.a %a2,32768
8000c192:	d9 22 d0 70 	lea %a2,[%a2]3536 <80000dd0 <blanks.4035>>
8000c196:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000dd0 <blanks.4035>>
8000c19a:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000dd0 <blanks.4035>>
8000c19e:	8b 1f 81 42 	ge %d4,%d15,17
8000c1a2:	e8 02       	st.a [%a15]0,%a2
8000c1a4:	df 04 1c 00 	jeq %d4,0,8000c1dc <_svfprintf_r+0x1144>
8000c1a8:	c2 13       	add %d3,1
8000c1aa:	1b 05 01 40 	addi %d4,%d5,16
8000c1ae:	68 18       	st.w [%a15]4,%d8
8000c1b0:	59 a3 20 10 	st.w [%sp]96,%d3
8000c1b4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c1b8:	8b 83 80 32 	ge %d3,%d3,8
8000c1bc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c1c0:	76 3b       	jz %d3,8000c1d6 <_svfprintf_r+0x113e>
8000c1c2:	60 c4       	mov.a %a4,%d12
8000c1c4:	60 b5       	mov.a %a5,%d11
8000c1c6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1ca:	6d 00 a7 0b 	call 8000d918 <__ssprint_r>
8000c1ce:	df 02 30 80 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000c1d2:	d9 af 10 20 	lea %a15,[%sp]144
8000c1d6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c1da:	3c da       	j 8000c18e <_svfprintf_r+0x10f6>
8000c1dc:	12 54       	add %d4,%d15,%d5
8000c1de:	68 1f       	st.w [%a15]4,%d15
8000c1e0:	9a 13       	add %d15,%d3,1
8000c1e2:	78 18       	st.w [%sp]96,%d15
8000c1e4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c1e8:	8b 8f 40 f2 	lt %d15,%d15,8
8000c1ec:	ee bf       	jnz %d15,8000c16a <_svfprintf_r+0x10d2>
8000c1ee:	60 c4       	mov.a %a4,%d12
8000c1f0:	60 b5       	mov.a %a5,%d11
8000c1f2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1f6:	6d 00 91 0b 	call 8000d918 <__ssprint_r>
8000c1fa:	df 02 b8 7f 	jeq %d2,0,8000c16a <_svfprintf_r+0x10d2>
8000c1fe:	3c 18       	j 8000c22e <_svfprintf_r+0x1196>
8000c200:	60 c4       	mov.a %a4,%d12
8000c202:	60 b5       	mov.a %a5,%d11
8000c204:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c208:	6d 00 88 0b 	call 8000d918 <__ssprint_r>
8000c20c:	df 02 11 80 	jne %d2,0,8000c22e <_svfprintf_r+0x1196>
8000c210:	82 0f       	mov %d15,0
8000c212:	78 18       	st.w [%sp]96,%d15
8000c214:	40 cf       	mov.aa %a15,%a12
8000c216:	d9 ae 10 20 	lea %a14,[%sp]144
8000c21a:	1d ff 77 f7 	j 8000b108 <_svfprintf_r+0x70>
8000c21e:	58 19       	ld.w %d15,[%sp]100
8000c220:	6e 07       	jz %d15,8000c22e <_svfprintf_r+0x1196>
8000c222:	60 c4       	mov.a %a4,%d12
8000c224:	60 b5       	mov.a %a5,%d11
8000c226:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c22a:	6d 00 77 0b 	call 8000d918 <__ssprint_r>
8000c22e:	60 b3       	mov.a %a3,%d11
8000c230:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c234:	8c 36       	ld.h %d15,[%a3]12
8000c236:	16 40       	and %d15,64
8000c238:	aa f2       	cmov %d2,%d15,-1
8000c23a:	00 90       	ret 

8000c23c <_vsnprintf_r>:
8000c23c:	20 68       	sub.a %sp,104
8000c23e:	40 4f       	mov.aa %a15,%a4
8000c240:	ce 45       	jgez %d4,8000c24a <_vsnprintf_r+0xe>
8000c242:	da 8b       	mov %d15,139
8000c244:	6c 40       	st.w [%a4]0,%d15
8000c246:	82 f2       	mov %d2,-1
8000c248:	00 90       	ret 
8000c24a:	02 4f       	mov %d15,%d4
8000c24c:	3b 80 20 20 	mov %d2,520
8000c250:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000c254:	92 f2       	add %d2,%d15,-1
8000c256:	ea 02       	cmovn %d2,%d15,0
8000c258:	f4 a5       	st.a [%sp],%a5
8000c25a:	b5 a5 10 00 	st.a [%sp]16,%a5
8000c25e:	59 a2 08 00 	st.w [%sp]8,%d2
8000c262:	59 a2 14 00 	st.w [%sp]20,%d2
8000c266:	40 a5       	mov.aa %a5,%sp
8000c268:	82 f2       	mov %d2,-1
8000c26a:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000c26e:	6d ff 15 f7 	call 8000b098 <_svfprintf_r>
8000c272:	ff f2 05 00 	jge %d2,-1,8000c27c <_vsnprintf_r+0x40>
8000c276:	3b b0 08 30 	mov %d3,139
8000c27a:	68 03       	st.w [%a15]0,%d3
8000c27c:	6e 04       	jz %d15,8000c284 <_vsnprintf_r+0x48>
8000c27e:	d8 00       	ld.a %a15,[%sp]0
8000c280:	82 0f       	mov %d15,0
8000c282:	28 0f       	st.b [%a15]0,%d15
8000c284:	00 90       	ret 

8000c286 <vsnprintf>:
8000c286:	91 00 00 37 	movh.a %a3,28672
8000c28a:	40 42       	mov.aa %a2,%a4
8000c28c:	99 34 68 30 	ld.a %a4,[%a3]1256 <700004e8 <_impure_ptr>>
8000c290:	40 5f       	mov.aa %a15,%a5
8000c292:	40 67       	mov.aa %a7,%a6
8000c294:	40 25       	mov.aa %a5,%a2
8000c296:	40 f6       	mov.aa %a6,%a15
8000c298:	1d ff d2 ff 	j 8000c23c <_vsnprintf_r>

8000c29c <quorem>:
8000c29c:	19 58 10 00 	ld.w %d8,[%a5]16
8000c2a0:	4c 44       	ld.w %d15,[%a4]16
8000c2a2:	82 02       	mov %d2,0
8000c2a4:	3f 8f 88 00 	jlt %d15,%d8,8000c3b4 <quorem+0x118>
8000c2a8:	c2 f8       	add %d8,-1
8000c2aa:	80 4f       	mov.d %d15,%a4
8000c2ac:	8f 28 00 20 	sh %d2,%d8,2
8000c2b0:	60 2f       	mov.a %a15,%d2
8000c2b2:	1b 4f 01 90 	addi %d9,%d15,20
8000c2b6:	d9 5c 14 00 	lea %a12,[%a5]20
8000c2ba:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000c2be:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000c2c2:	54 dc       	ld.w %d12,[%a13]
8000c2c4:	4c f0       	ld.w %d15,[%a15]0
8000c2c6:	c2 1c       	add %d12,1
8000c2c8:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000c2cc:	02 ca       	mov %d10,%d12
8000c2ce:	df 0c 3d 00 	jeq %d12,0,8000c348 <quorem+0xac>
8000c2d2:	60 96       	mov.a %a6,%d9
8000c2d4:	40 c2       	mov.aa %a2,%a12
8000c2d6:	82 05       	mov %d5,0
8000c2d8:	82 06       	mov %d6,0
8000c2da:	54 22       	ld.w %d2,[%a2]
8000c2dc:	40 63       	mov.aa %a3,%a6
8000c2de:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c2e2:	8f 02 1f 20 	sh %d2,%d2,-16
8000c2e6:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000c2ea:	b0 42       	add.a %a2,4
8000c2ec:	8f 03 1f 40 	sh %d4,%d3,-16
8000c2f0:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000c2f4:	44 34       	ld.w %d4,[%a3+]
8000c2f6:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000c2fa:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000c2fe:	8f 02 1f 50 	sh %d5,%d2,-16
8000c302:	42 f6       	add %d6,%d15
8000c304:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000c308:	0b 36 80 30 	sub %d3,%d6,%d3
8000c30c:	8f 04 1f 40 	sh %d4,%d4,-16
8000c310:	8f 03 3f f0 	sha %d15,%d3,-16
8000c314:	0b 24 80 20 	sub %d2,%d4,%d2
8000c318:	42 f2       	add %d2,%d15
8000c31a:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000c31e:	8f 02 3f 60 	sha %d6,%d2,-16
8000c322:	80 2f       	mov.d %d15,%a2
8000c324:	80 d2       	mov.d %d2,%a13
8000c326:	74 63       	st.w [%a6],%d3
8000c328:	40 36       	mov.aa %a6,%a3
8000c32a:	7f f2 d8 ff 	jge.u %d2,%d15,8000c2da <quorem+0x3e>
8000c32e:	4c f0       	ld.w %d15,[%a15]0
8000c330:	ee 0c       	jnz %d15,8000c348 <quorem+0xac>
8000c332:	b0 cf       	add.a %a15,-4
8000c334:	80 f2       	mov.d %d2,%a15
8000c336:	3f 29 05 80 	jlt.u %d9,%d2,8000c340 <quorem+0xa4>
8000c33a:	59 48 10 00 	st.w [%a4]16,%d8
8000c33e:	3c 05       	j 8000c348 <quorem+0xac>
8000c340:	4c f0       	ld.w %d15,[%a15]0
8000c342:	ee fc       	jnz %d15,8000c33a <quorem+0x9e>
8000c344:	c2 f8       	add %d8,-1
8000c346:	3c f6       	j 8000c332 <quorem+0x96>
8000c348:	40 4e       	mov.aa %a14,%a4
8000c34a:	6d 00 ec 09 	call 8000d722 <__mcmp>
8000c34e:	bf 02 32 00 	jlt %d2,0,8000c3b2 <quorem+0x116>
8000c352:	60 92       	mov.a %a2,%d9
8000c354:	1b 1c 00 a0 	addi %d10,%d12,1
8000c358:	82 04       	mov %d4,0
8000c35a:	40 2f       	mov.aa %a15,%a2
8000c35c:	44 f3       	ld.w %d3,[%a15+]
8000c35e:	54 c5       	ld.w %d5,[%a12]
8000c360:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000c364:	8f 05 1f f0 	sh %d15,%d5,-16
8000c368:	42 42       	add %d2,%d4
8000c36a:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000c36e:	8f 03 1f 30 	sh %d3,%d3,-16
8000c372:	a2 42       	sub %d2,%d4
8000c374:	8f 02 3f 40 	sha %d4,%d2,-16
8000c378:	a2 f3       	sub %d3,%d15
8000c37a:	42 43       	add %d3,%d4
8000c37c:	8f 03 3f 40 	sha %d4,%d3,-16
8000c380:	b0 4c       	add.a %a12,4
8000c382:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000c386:	80 df       	mov.d %d15,%a13
8000c388:	80 c2       	mov.d %d2,%a12
8000c38a:	74 23       	st.w [%a2],%d3
8000c38c:	40 f2       	mov.aa %a2,%a15
8000c38e:	7f 2f e6 ff 	jge.u %d15,%d2,8000c35a <quorem+0xbe>
8000c392:	60 92       	mov.a %a2,%d9
8000c394:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000c398:	4c f0       	ld.w %d15,[%a15]0
8000c39a:	ee 0c       	jnz %d15,8000c3b2 <quorem+0x116>
8000c39c:	b0 cf       	add.a %a15,-4
8000c39e:	80 f2       	mov.d %d2,%a15
8000c3a0:	3f 29 05 80 	jlt.u %d9,%d2,8000c3aa <quorem+0x10e>
8000c3a4:	59 e8 10 00 	st.w [%a14]16,%d8
8000c3a8:	3c 05       	j 8000c3b2 <quorem+0x116>
8000c3aa:	4c f0       	ld.w %d15,[%a15]0
8000c3ac:	ee fc       	jnz %d15,8000c3a4 <quorem+0x108>
8000c3ae:	c2 f8       	add %d8,-1
8000c3b0:	3c f6       	j 8000c39c <quorem+0x100>
8000c3b2:	02 a2       	mov %d2,%d10
8000c3b4:	00 90       	ret 
	...

8000c3b8 <_dtoa_r>:
8000c3b8:	20 58       	sub.a %sp,88
8000c3ba:	b5 a5 08 10 	st.a [%sp]72,%a5
8000c3be:	99 45 00 10 	ld.a %a5,[%a4]64
8000c3c2:	59 a6 1c 00 	st.w [%sp]28,%d6
8000c3c6:	59 a7 28 00 	st.w [%sp]40,%d7
8000c3ca:	b5 a7 38 00 	st.a [%sp]56,%a7
8000c3ce:	40 4d       	mov.aa %a13,%a4
8000c3d0:	0b 45 10 88 	mov %e8,%d5,%d4
8000c3d4:	40 6c       	mov.aa %a12,%a6
8000c3d6:	0b 45 10 c8 	mov %e12,%d5,%d4
8000c3da:	bc 5e       	jz.a %a5,8000c3f6 <_dtoa_r+0x3e>
8000c3dc:	19 4f 04 10 	ld.w %d15,[%a4]68
8000c3e0:	82 12       	mov %d2,1
8000c3e2:	0f f2 00 20 	sh %d2,%d2,%d15
8000c3e6:	6c 51       	st.w [%a5]4,%d15
8000c3e8:	59 52 08 00 	st.w [%a5]8,%d2
8000c3ec:	82 0f       	mov %d15,0
8000c3ee:	6d 00 cc 07 	call 8000d386 <_Bfree>
8000c3f2:	59 df 00 10 	st.w [%a13]64,%d15
8000c3f6:	ce 96       	jgez %d9,8000c402 <_dtoa_r+0x4a>
8000c3f8:	82 1f       	mov %d15,1
8000c3fa:	6c c0       	st.w [%a12]0,%d15
8000c3fc:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000c400:	3c 03       	j 8000c406 <_dtoa_r+0x4e>
8000c402:	82 0f       	mov %d15,0
8000c404:	6c c0       	st.w [%a12]0,%d15
8000c406:	7b 00 ff 27 	movh %d2,32752
8000c40a:	26 d2       	and %d2,%d13
8000c40c:	7b 00 ff 37 	movh %d3,32752
8000c410:	5f 32 22 80 	jne %d2,%d3,8000c454 <_dtoa_r+0x9c>
8000c414:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c418:	3b f0 70 22 	mov %d2,9999
8000c41c:	91 00 00 f8 	movh.a %a15,32768
8000c420:	74 32       	st.w [%a3],%d2
8000c422:	d9 ff e9 70 	lea %a15,[%a15]3561 <80000de9 <blanks.4035+0x19>>
8000c426:	f6 c8       	jnz %d12,8000c436 <_dtoa_r+0x7e>
8000c428:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000c42c:	ee 05       	jnz %d15,8000c436 <_dtoa_r+0x7e>
8000c42e:	91 00 00 f8 	movh.a %a15,32768
8000c432:	d9 ff e0 70 	lea %a15,[%a15]3552 <80000de0 <blanks.4035+0x10>>
8000c436:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000de0 <blanks.4035+0x10>>
8000c43a:	40 f2       	mov.aa %a2,%a15
8000c43c:	bd 03 26 06 	jz.a %a3,8000d088 <_dtoa_r+0xcd0>
8000c440:	80 ff       	mov.d %d15,%a15
8000c442:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000c446:	1b 8f 00 20 	addi %d2,%d15,8
8000c44a:	c2 3f       	add %d15,3
8000c44c:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000c450:	6c 30       	st.w [%a3]0,%d15
8000c452:	00 90       	ret 
8000c454:	0b cd 10 48 	mov %e4,%d13,%d12
8000c458:	d2 06       	mov %e6,0
8000c45a:	0b cd 10 88 	mov %e8,%d13,%d12
8000c45e:	6d 00 62 0d 	call 8000df22 <__eqdf2>
8000c462:	df 02 13 80 	jne %d2,0,8000c488 <_dtoa_r+0xd0>
8000c466:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c46a:	d8 0e       	ld.a %a15,[%sp]56
8000c46c:	82 1f       	mov %d15,1
8000c46e:	91 00 00 28 	movh.a %a2,32768
8000c472:	6c 30       	st.w [%a3]0,%d15
8000c474:	d9 22 ed 70 	lea %a2,[%a2]3565 <80000ded <blanks.4035+0x1d>>
8000c478:	bd 0f 08 06 	jz.a %a15,8000d088 <_dtoa_r+0xcd0>
8000c47c:	7b 00 00 f8 	movh %d15,32768
8000c480:	1b ef de f0 	addi %d15,%d15,3566
8000c484:	68 0f       	st.w [%a15]0,%d15
8000c486:	00 90       	ret 
8000c488:	0b cd 10 48 	mov %e4,%d13,%d12
8000c48c:	40 d4       	mov.aa %a4,%a13
8000c48e:	d9 a5 14 10 	lea %a5,[%sp]84
8000c492:	d9 a6 10 10 	lea %a6,[%sp]80
8000c496:	6d 00 cc 09 	call 8000d82e <__d2b>
8000c49a:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000c49e:	40 2e       	mov.aa %a14,%a2
8000c4a0:	19 aa 10 10 	ld.w %d10,[%sp]80
8000c4a4:	76 bd       	jz %d11,8000c4be <_dtoa_r+0x106>
8000c4a6:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000c4aa:	0b cd 10 48 	mov %e4,%d13,%d12
8000c4ae:	7b 00 ff 23 	movh %d2,16368
8000c4b2:	0f 2f a0 50 	or %d5,%d15,%d2
8000c4b6:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000c4ba:	82 0f       	mov %d15,0
8000c4bc:	3c 22       	j 8000c500 <_dtoa_r+0x148>
8000c4be:	19 ab 14 10 	ld.w %d11,[%sp]84
8000c4c2:	3b e0 be 4f 	mov %d4,-1042
8000c4c6:	42 ab       	add %d11,%d10
8000c4c8:	a2 b4       	sub %d4,%d11
8000c4ca:	3b f0 be 2f 	mov %d2,-1041
8000c4ce:	0f 4c 00 40 	sh %d4,%d12,%d4
8000c4d2:	3f 2b 0f 00 	jlt %d11,%d2,8000c4f0 <_dtoa_r+0x138>
8000c4d6:	1b 2b 41 30 	addi %d3,%d11,1042
8000c4da:	3b e0 c0 4f 	mov %d4,-1010
8000c4de:	a2 b4       	sub %d4,%d11
8000c4e0:	8b 03 00 21 	rsub %d2,%d3,0
8000c4e4:	0f 2c 00 20 	sh %d2,%d12,%d2
8000c4e8:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000c4ec:	0f f2 a0 40 	or %d4,%d2,%d15
8000c4f0:	6d ff 94 f1 	call 8000a818 <__floatunsidf>
8000c4f4:	0b 23 10 48 	mov %e4,%d3,%d2
8000c4f8:	9b 03 e1 5f 	addih %d5,%d3,65040
8000c4fc:	c2 fb       	add %d11,-1
8000c4fe:	82 1f       	mov %d15,1
8000c500:	b7 00 ab 69 	imask %e6,0,19,11
8000c504:	78 13       	st.w [%sp]76,%d15
8000c506:	6d ff ba ef 	call 8000a47a <__subdf3>
8000c50a:	7b 30 fd 73 	movh %d7,16339
8000c50e:	0b 23 10 48 	mov %e4,%d3,%d2
8000c512:	7b f0 36 66 	movh %d6,25455
8000c516:	1b 77 7a 78 	addi %d7,%d7,-30809
8000c51a:	1b 16 36 64 	addi %d6,%d6,17249
8000c51e:	6d ff ce ef 	call 8000a4ba <__muldf3>
8000c522:	7b 70 fc 73 	movh %d7,16327
8000c526:	0b 23 10 48 	mov %e4,%d3,%d2
8000c52a:	7b 10 b6 68 	movh %d6,35681
8000c52e:	1b 87 a2 78 	addi %d7,%d7,-30168
8000c532:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000c536:	6d ff 86 ef 	call 8000a442 <__adddf3>
8000c53a:	02 b4       	mov %d4,%d11
8000c53c:	0b 23 10 88 	mov %e8,%d3,%d2
8000c540:	6d ff 1b f1 	call 8000a776 <__floatsidf>
8000c544:	7b 30 fd 73 	movh %d7,16339
8000c548:	0b 23 10 48 	mov %e4,%d3,%d2
8000c54c:	7b f0 09 65 	movh %d6,20639
8000c550:	1b 37 41 74 	addi %d7,%d7,17427
8000c554:	1b b6 9f 67 	addi %d6,%d6,31227
8000c558:	6d ff b1 ef 	call 8000a4ba <__muldf3>
8000c55c:	0b 89 10 48 	mov %e4,%d9,%d8
8000c560:	0b 23 10 68 	mov %e6,%d3,%d2
8000c564:	6d ff 6f ef 	call 8000a442 <__adddf3>
8000c568:	0b 23 10 48 	mov %e4,%d3,%d2
8000c56c:	0b 23 10 88 	mov %e8,%d3,%d2
8000c570:	6d 00 79 0d 	call 8000e062 <__fixdfsi>
8000c574:	0b 89 10 48 	mov %e4,%d9,%d8
8000c578:	d2 06       	mov %e6,0
8000c57a:	59 a2 08 00 	st.w [%sp]8,%d2
8000c57e:	6d 00 52 0d 	call 8000e022 <__ltdf2>
8000c582:	ff 02 12 00 	jge %d2,0,8000c5a6 <_dtoa_r+0x1ee>
8000c586:	19 a4 08 00 	ld.w %d4,[%sp]8
8000c58a:	6d ff f6 f0 	call 8000a776 <__floatsidf>
8000c58e:	0b 89 10 48 	mov %e4,%d9,%d8
8000c592:	0b 23 10 68 	mov %e6,%d3,%d2
8000c596:	6d 00 e6 0c 	call 8000df62 <__nedf2>
8000c59a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c59e:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000c5a2:	59 a3 08 00 	st.w [%sp]8,%d3
8000c5a6:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c5aa:	82 13       	mov %d3,1
8000c5ac:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000c5b0:	59 a3 3c 00 	st.w [%sp]60,%d3
8000c5b4:	ee 18       	jnz %d15,8000c5e4 <_dtoa_r+0x22c>
8000c5b6:	91 00 00 f8 	movh.a %a15,32768
8000c5ba:	d9 ff d8 a0 	lea %a15,[%a15]3736 <80000e98 <__mprec_tens>>
8000c5be:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000c5c2:	0b cd 10 68 	mov %e6,%d13,%d12
8000c5c6:	09 f4 40 09 	ld.d %e4,[%a15]
8000c5ca:	6d 00 ec 0c 	call 8000dfa2 <__gtdf2>
8000c5ce:	8e 28       	jlez %d2,8000c5de <_dtoa_r+0x226>
8000c5d0:	58 02       	ld.w %d15,[%sp]8
8000c5d2:	82 02       	mov %d2,0
8000c5d4:	c2 ff       	add %d15,-1
8000c5d6:	78 02       	st.w [%sp]8,%d15
8000c5d8:	59 a2 3c 00 	st.w [%sp]60,%d2
8000c5dc:	3c 04       	j 8000c5e4 <_dtoa_r+0x22c>
8000c5de:	82 03       	mov %d3,0
8000c5e0:	59 a3 3c 00 	st.w [%sp]60,%d3
8000c5e4:	0b ba 80 b0 	sub %d11,%d10,%d11
8000c5e8:	9a fb       	add %d15,%d11,-1
8000c5ea:	82 02       	mov %d2,0
8000c5ec:	78 06       	st.w [%sp]24,%d15
8000c5ee:	59 a2 14 00 	st.w [%sp]20,%d2
8000c5f2:	ce f6       	jgez %d15,8000c5fe <_dtoa_r+0x246>
8000c5f4:	32 5f       	rsub %d15
8000c5f6:	82 03       	mov %d3,0
8000c5f8:	78 05       	st.w [%sp]20,%d15
8000c5fa:	59 a3 18 00 	st.w [%sp]24,%d3
8000c5fe:	58 02       	ld.w %d15,[%sp]8
8000c600:	0e fa       	jltz %d15,8000c614 <_dtoa_r+0x25c>
8000c602:	19 a2 18 00 	ld.w %d2,[%sp]24
8000c606:	78 0d       	st.w [%sp]52,%d15
8000c608:	42 f2       	add %d2,%d15
8000c60a:	82 0f       	mov %d15,0
8000c60c:	59 a2 18 00 	st.w [%sp]24,%d2
8000c610:	78 08       	st.w [%sp]32,%d15
8000c612:	3c 0d       	j 8000c62c <_dtoa_r+0x274>
8000c614:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c618:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c61c:	82 0f       	mov %d15,0
8000c61e:	a2 32       	sub %d2,%d3
8000c620:	32 53       	rsub %d3
8000c622:	59 a2 14 00 	st.w [%sp]20,%d2
8000c626:	59 a3 20 00 	st.w [%sp]32,%d3
8000c62a:	78 0d       	st.w [%sp]52,%d15
8000c62c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c630:	82 18       	mov %d8,1
8000c632:	ff a2 46 80 	jge.u %d2,10,8000c6be <_dtoa_r+0x306>
8000c636:	bf 62 06 00 	jlt %d2,6,8000c642 <_dtoa_r+0x28a>
8000c63a:	c2 c2       	add %d2,-4
8000c63c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000c640:	82 08       	mov %d8,0
8000c642:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000c646:	c2 e3       	add %d3,-2
8000c648:	ff 43 4b 80 	jge.u %d3,4,8000c6de <_dtoa_r+0x326>
8000c64c:	91 10 00 f8 	movh.a %a15,32769
8000c650:	d9 ff 5c 9c 	lea %a15,[%a15]-14756 <8000c65c <_dtoa_r+0x2a4>>
8000c654:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000c658:	dc 0f       	ji %a15
8000c65a:	00 00       	nop 
8000c65c:	1d 00 08 00 	j 8000c66c <_dtoa_r+0x2b4>
8000c660:	1d 00 1c 00 	j 8000c698 <_dtoa_r+0x2e0>
8000c664:	1d 00 08 00 	j 8000c674 <_dtoa_r+0x2bc>
8000c668:	1d 00 1c 00 	j 8000c6a0 <_dtoa_r+0x2e8>
8000c66c:	82 03       	mov %d3,0
8000c66e:	59 a3 24 00 	st.w [%sp]36,%d3
8000c672:	3c 03       	j 8000c678 <_dtoa_r+0x2c0>
8000c674:	82 1f       	mov %d15,1
8000c676:	78 09       	st.w [%sp]36,%d15
8000c678:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c67c:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c680:	59 a2 10 00 	st.w [%sp]16,%d2
8000c684:	02 23       	mov %d3,%d2
8000c686:	ff 12 38 00 	jge %d2,1,8000c6f6 <_dtoa_r+0x33e>
8000c68a:	82 13       	mov %d3,1
8000c68c:	82 1f       	mov %d15,1
8000c68e:	59 a3 2c 00 	st.w [%sp]44,%d3
8000c692:	78 04       	st.w [%sp]16,%d15
8000c694:	82 12       	mov %d2,1
8000c696:	3c 21       	j 8000c6d8 <_dtoa_r+0x320>
8000c698:	82 03       	mov %d3,0
8000c69a:	59 a3 24 00 	st.w [%sp]36,%d3
8000c69e:	3c 03       	j 8000c6a4 <_dtoa_r+0x2ec>
8000c6a0:	82 1f       	mov %d15,1
8000c6a2:	78 09       	st.w [%sp]36,%d15
8000c6a4:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c6a8:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c6ac:	42 32       	add %d2,%d3
8000c6ae:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c6b2:	c2 12       	add %d2,1
8000c6b4:	59 a2 10 00 	st.w [%sp]16,%d2
8000c6b8:	8b 12 40 33 	max %d3,%d2,1
8000c6bc:	3c 1d       	j 8000c6f6 <_dtoa_r+0x33e>
8000c6be:	82 0f       	mov %d15,0
8000c6c0:	82 12       	mov %d2,1
8000c6c2:	82 f3       	mov %d3,-1
8000c6c4:	78 07       	st.w [%sp]28,%d15
8000c6c6:	82 ff       	mov %d15,-1
8000c6c8:	59 a2 24 00 	st.w [%sp]36,%d2
8000c6cc:	59 a3 2c 00 	st.w [%sp]44,%d3
8000c6d0:	78 04       	st.w [%sp]16,%d15
8000c6d2:	3b 20 01 30 	mov %d3,18
8000c6d6:	82 02       	mov %d2,0
8000c6d8:	59 a2 28 00 	st.w [%sp]40,%d2
8000c6dc:	3c 0d       	j 8000c6f6 <_dtoa_r+0x33e>
8000c6de:	82 ff       	mov %d15,-1
8000c6e0:	82 13       	mov %d3,1
8000c6e2:	78 0b       	st.w [%sp]44,%d15
8000c6e4:	82 f2       	mov %d2,-1
8000c6e6:	82 0f       	mov %d15,0
8000c6e8:	59 a3 24 00 	st.w [%sp]36,%d3
8000c6ec:	59 a2 10 00 	st.w [%sp]16,%d2
8000c6f0:	3b 20 01 30 	mov %d3,18
8000c6f4:	78 0a       	st.w [%sp]40,%d15
8000c6f6:	82 05       	mov %d5,0
8000c6f8:	59 d5 04 10 	st.w [%a13]68,%d5
8000c6fc:	82 45       	mov %d5,4
8000c6fe:	1b 45 01 00 	addi %d0,%d5,20
8000c702:	3f 03 09 80 	jlt.u %d3,%d0,8000c714 <_dtoa_r+0x35c>
8000c706:	19 d0 04 10 	ld.w %d0,[%a13]68
8000c70a:	06 15       	sh %d5,1
8000c70c:	c2 10       	add %d0,1
8000c70e:	59 d0 04 10 	st.w [%a13]68,%d0
8000c712:	3c f6       	j 8000c6fe <_dtoa_r+0x346>
8000c714:	40 d4       	mov.aa %a4,%a13
8000c716:	19 d4 04 10 	ld.w %d4,[%a13]68
8000c71a:	6d 00 0b 06 	call 8000d330 <_Balloc>
8000c71e:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c722:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000c726:	8b f2 60 32 	lt.u %d3,%d2,15
8000c72a:	b5 d2 00 10 	st.a [%a13]64,%a2
8000c72e:	26 38       	and %d8,%d3
8000c730:	df 08 97 01 	jeq %d8,0,8000ca5e <_dtoa_r+0x6a6>
8000c734:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c738:	89 ac 40 19 	st.d [%sp]64,%e12
8000c73c:	bf 13 3f 00 	jlt %d3,1,8000c7ba <_dtoa_r+0x402>
8000c740:	91 00 00 f8 	movh.a %a15,32768
8000c744:	8f f3 00 31 	and %d3,%d3,15
8000c748:	d9 ff d8 a0 	lea %a15,[%a15]3736 <80000e98 <__mprec_tens>>
8000c74c:	19 ae 08 00 	ld.w %d14,[%sp]8 <80000e98 <__mprec_tens>>
8000c750:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000c754:	86 ce       	sha %d14,-4
8000c756:	09 f8 40 09 	ld.d %e8,[%a15]
8000c75a:	82 2a       	mov %d10,2
8000c75c:	6f 4e 11 00 	jz.t %d14,4,8000c77e <_dtoa_r+0x3c6>
8000c760:	91 00 00 f8 	movh.a %a15,32768
8000c764:	0b cd 10 48 	mov %e4,%d13,%d12
8000c768:	d9 ff f0 90 	lea %a15,[%a15]3696 <80000e70 <__mprec_bigtens>>
8000c76c:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000c770:	6d ff 77 ef 	call 8000a65e <__divdf3>
8000c774:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c778:	8f fe 00 e1 	and %d14,%d14,15
8000c77c:	82 3a       	mov %d10,3
8000c77e:	7b 00 00 b8 	movh %d11,32768
8000c782:	82 0f       	mov %d15,0
8000c784:	1b 0b e7 b0 	addi %d11,%d11,3696
8000c788:	df 0e 12 00 	jeq %d14,0,8000c7ac <_dtoa_r+0x3f4>
8000c78c:	6f 0e 0d 00 	jz.t %d14,0,8000c7a6 <_dtoa_r+0x3ee>
8000c790:	60 b2       	mov.a %a2,%d11
8000c792:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000c794:	0b 89 10 48 	mov %e4,%d9,%d8
8000c798:	09 f6 40 09 	ld.d %e6,[%a15]
8000c79c:	6d ff 8f ee 	call 8000a4ba <__muldf3>
8000c7a0:	0b 23 10 88 	mov %e8,%d3,%d2
8000c7a4:	c2 1a       	add %d10,1
8000c7a6:	86 fe       	sha %d14,-1
8000c7a8:	c2 1f       	add %d15,1
8000c7aa:	3c ef       	j 8000c788 <_dtoa_r+0x3d0>
8000c7ac:	0b cd 10 48 	mov %e4,%d13,%d12
8000c7b0:	0b 89 10 68 	mov %e6,%d9,%d8
8000c7b4:	6d ff 55 ef 	call 8000a65e <__divdf3>
8000c7b8:	3c 2c       	j 8000c810 <_dtoa_r+0x458>
8000c7ba:	19 a8 08 00 	ld.w %d8,[%sp]8
8000c7be:	82 2a       	mov %d10,2
8000c7c0:	32 58       	rsub %d8
8000c7c2:	df 08 29 00 	jeq %d8,0,8000c814 <_dtoa_r+0x45c>
8000c7c6:	91 00 00 f8 	movh.a %a15,32768
8000c7ca:	8f f8 00 31 	and %d3,%d8,15
8000c7ce:	d9 ff d8 a0 	lea %a15,[%a15]3736 <80000e98 <__mprec_tens>>
8000c7d2:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000c7d6:	09 a4 40 19 	ld.d %e4,[%sp]64
8000c7da:	09 f6 40 09 	ld.d %e6,[%a15]
8000c7de:	7b 00 00 c8 	movh %d12,32768
8000c7e2:	6d ff 6c ee 	call 8000a4ba <__muldf3>
8000c7e6:	82 09       	mov %d9,0
8000c7e8:	86 c8       	sha %d8,-4
8000c7ea:	1b 0c e7 c0 	addi %d12,%d12,3696
8000c7ee:	df 08 11 00 	jeq %d8,0,8000c810 <_dtoa_r+0x458>
8000c7f2:	6f 08 0c 00 	jz.t %d8,0,8000c80a <_dtoa_r+0x452>
8000c7f6:	60 c3       	mov.a %a3,%d12
8000c7f8:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000c7fc:	0b 23 10 48 	mov %e4,%d3,%d2
8000c800:	09 f6 40 09 	ld.d %e6,[%a15]
8000c804:	c2 1a       	add %d10,1
8000c806:	6d ff 5a ee 	call 8000a4ba <__muldf3>
8000c80a:	86 f8       	sha %d8,-1
8000c80c:	c2 19       	add %d9,1
8000c80e:	3c f0       	j 8000c7ee <_dtoa_r+0x436>
8000c810:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c814:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000c818:	df 02 23 00 	jeq %d2,0,8000c85e <_dtoa_r+0x4a6>
8000c81c:	0b cd 10 48 	mov %e4,%d13,%d12
8000c820:	b7 00 2a 6a 	imask %e6,0,20,10
8000c824:	6d 00 ff 0b 	call 8000e022 <__ltdf2>
8000c828:	ff 02 20 00 	jge %d2,0,8000c868 <_dtoa_r+0x4b0>
8000c82c:	19 a3 10 00 	ld.w %d3,[%sp]16
8000c830:	df 03 21 00 	jeq %d3,0,8000c872 <_dtoa_r+0x4ba>
8000c834:	58 0b       	ld.w %d15,[%sp]44
8000c836:	bf 1f 12 01 	jlt %d15,1,8000ca5a <_dtoa_r+0x6a2>
8000c83a:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c83e:	0b cd 10 48 	mov %e4,%d13,%d12
8000c842:	c2 f2       	add %d2,-1
8000c844:	82 06       	mov %d6,0
8000c846:	7b 40 02 74 	movh %d7,16420
8000c84a:	59 a2 30 00 	st.w [%sp]48,%d2
8000c84e:	6d ff 36 ee 	call 8000a4ba <__muldf3>
8000c852:	c2 1a       	add %d10,1
8000c854:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c858:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000c85c:	3c 10       	j 8000c87c <_dtoa_r+0x4c4>
8000c85e:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c862:	59 a3 30 00 	st.w [%sp]48,%d3
8000c866:	3c 03       	j 8000c86c <_dtoa_r+0x4b4>
8000c868:	58 02       	ld.w %d15,[%sp]8
8000c86a:	78 0c       	st.w [%sp]48,%d15
8000c86c:	99 ac 10 00 	ld.a %a12,[%sp]16
8000c870:	3c 06       	j 8000c87c <_dtoa_r+0x4c4>
8000c872:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c876:	a0 0c       	mov.a %a12,0
8000c878:	59 a2 30 00 	st.w [%sp]48,%d2
8000c87c:	02 a4       	mov %d4,%d10
8000c87e:	6d ff 7c ef 	call 8000a776 <__floatsidf>
8000c882:	0b cd 10 68 	mov %e6,%d13,%d12
8000c886:	0b 23 10 48 	mov %e4,%d3,%d2
8000c88a:	6d ff 18 ee 	call 8000a4ba <__muldf3>
8000c88e:	0b 23 10 48 	mov %e4,%d3,%d2
8000c892:	82 06       	mov %d6,0
8000c894:	7b c0 01 74 	movh %d7,16412
8000c898:	6d ff d5 ed 	call 8000a442 <__adddf3>
8000c89c:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c8a0:	0b 23 10 e8 	mov %e14,%d3,%d2
8000c8a4:	60 b2       	mov.a %a2,%d11
8000c8a6:	11 02 cc ff 	addih.a %a15,%a2,64704
8000c8aa:	80 ff       	mov.d %d15,%a15
8000c8ac:	bd 0c 1e 80 	jnz.a %a12,8000c8e8 <_dtoa_r+0x530>
8000c8b0:	0b cd 10 48 	mov %e4,%d13,%d12
8000c8b4:	82 06       	mov %d6,0
8000c8b6:	7b 40 01 74 	movh %d7,16404
8000c8ba:	6d ff e0 ed 	call 8000a47a <__subdf3>
8000c8be:	80 f7       	mov.d %d7,%a15
8000c8c0:	0b 23 10 48 	mov %e4,%d3,%d2
8000c8c4:	02 e6       	mov %d6,%d14
8000c8c6:	0b 23 10 88 	mov %e8,%d3,%d2
8000c8ca:	6d 00 6c 0b 	call 8000dfa2 <__gtdf2>
8000c8ce:	ff 12 8e 02 	jge %d2,1,8000cdea <_dtoa_r+0xa32>
8000c8d2:	0b 89 10 48 	mov %e4,%d9,%d8
8000c8d6:	02 e6       	mov %d6,%d14
8000c8d8:	9b 0b cc 77 	addih %d7,%d11,31936
8000c8dc:	6d 00 a3 0b 	call 8000e022 <__ltdf2>
8000c8e0:	bf 02 7d 02 	jlt %d2,0,8000cdda <_dtoa_r+0xa22>
8000c8e4:	1d 00 bb 00 	j 8000ca5a <_dtoa_r+0x6a2>
8000c8e8:	80 c5       	mov.d %d5,%a12
8000c8ea:	91 00 00 f8 	movh.a %a15,32768
8000c8ee:	19 a2 24 00 	ld.w %d2,[%sp]36
8000c8f2:	d9 ff d8 a0 	lea %a15,[%a15]3736 <80000e98 <__mprec_tens>>
8000c8f6:	c2 f5       	add %d5,-1
8000c8f8:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000c8fc:	df 02 57 00 	jeq %d2,0,8000c9aa <_dtoa_r+0x5f2>
8000c900:	b7 00 a9 4a 	imask %e4,0,21,9
8000c904:	09 f6 40 09 	ld.d %e6,[%a15]
8000c908:	6d ff ab ee 	call 8000a65e <__divdf3>
8000c90c:	0b ef 10 68 	mov %e6,%d15,%d14
8000c910:	0b 23 10 48 	mov %e4,%d3,%d2
8000c914:	6d ff b3 ed 	call 8000a47a <__subdf3>
8000c918:	d8 03       	ld.a %a15,[%sp]12
8000c91a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c91e:	0b cd 10 48 	mov %e4,%d13,%d12
8000c922:	80 fe       	mov.d %d14,%a15
8000c924:	6d 00 9f 0b 	call 8000e062 <__fixdfsi>
8000c928:	02 24       	mov %d4,%d2
8000c92a:	02 2f       	mov %d15,%d2
8000c92c:	6d ff 25 ef 	call 8000a776 <__floatsidf>
8000c930:	0b cd 10 48 	mov %e4,%d13,%d12
8000c934:	0b 23 10 68 	mov %e6,%d3,%d2
8000c938:	c2 1e       	add %d14,1
8000c93a:	6d ff a0 ed 	call 8000a47a <__subdf3>
8000c93e:	1b 0f 03 50 	addi %d5,%d15,48
8000c942:	28 05       	st.b [%a15]0,%d5
8000c944:	0b ab 10 68 	mov %e6,%d11,%d10
8000c948:	0b 23 10 48 	mov %e4,%d3,%d2
8000c94c:	0b 23 10 88 	mov %e8,%d3,%d2
8000c950:	6d 00 69 0b 	call 8000e022 <__ltdf2>
8000c954:	bf 02 86 03 	jlt %d2,0,8000d060 <_dtoa_r+0xca8>
8000c958:	b7 00 2a 4a 	imask %e4,0,20,10
8000c95c:	0b 89 10 68 	mov %e6,%d9,%d8
8000c960:	6d ff 8d ed 	call 8000a47a <__subdf3>
8000c964:	0b ab 10 68 	mov %e6,%d11,%d10
8000c968:	0b 23 10 48 	mov %e4,%d3,%d2
8000c96c:	6d 00 5b 0b 	call 8000e022 <__ltdf2>
8000c970:	bf 02 ea 00 	jlt %d2,0,8000cb44 <_dtoa_r+0x78c>
8000c974:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000c978:	02 e5       	mov %d5,%d14
8000c97a:	80 cf       	mov.d %d15,%a12
8000c97c:	a2 35       	sub %d5,%d3
8000c97e:	7f f5 6e 00 	jge %d5,%d15,8000ca5a <_dtoa_r+0x6a2>
8000c982:	0b ab 10 48 	mov %e4,%d11,%d10
8000c986:	82 06       	mov %d6,0
8000c988:	7b 40 02 74 	movh %d7,16420
8000c98c:	6d ff 97 ed 	call 8000a4ba <__muldf3>
8000c990:	0b 89 10 48 	mov %e4,%d9,%d8
8000c994:	82 06       	mov %d6,0
8000c996:	7b 40 02 74 	movh %d7,16420
8000c99a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c99e:	6d ff 8e ed 	call 8000a4ba <__muldf3>
8000c9a2:	60 ef       	mov.a %a15,%d14
8000c9a4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c9a8:	3c bb       	j 8000c91e <_dtoa_r+0x566>
8000c9aa:	0b ef 10 68 	mov %e6,%d15,%d14
8000c9ae:	09 f4 40 09 	ld.d %e4,[%a15]
8000c9b2:	6d ff 84 ed 	call 8000a4ba <__muldf3>
8000c9b6:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000c9ba:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c9be:	30 c3       	add.a %a3,%a12
8000c9c0:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000c9c4:	80 3e       	mov.d %d14,%a3
8000c9c6:	0b cd 10 48 	mov %e4,%d13,%d12
8000c9ca:	d9 cf 01 00 	lea %a15,[%a12]1
8000c9ce:	6d 00 4a 0b 	call 8000e062 <__fixdfsi>
8000c9d2:	02 24       	mov %d4,%d2
8000c9d4:	02 2f       	mov %d15,%d2
8000c9d6:	6d ff d0 ee 	call 8000a776 <__floatsidf>
8000c9da:	0b cd 10 48 	mov %e4,%d13,%d12
8000c9de:	0b 23 10 68 	mov %e6,%d3,%d2
8000c9e2:	6d ff 4c ed 	call 8000a47a <__subdf3>
8000c9e6:	1b 0f 03 50 	addi %d5,%d15,48
8000c9ea:	0b 23 10 88 	mov %e8,%d3,%d2
8000c9ee:	80 f2       	mov.d %d2,%a15
8000c9f0:	34 c5       	st.b [%a12],%d5
8000c9f2:	5f e2 29 80 	jne %d2,%d14,8000ca44 <_dtoa_r+0x68c>
8000c9f6:	0b ab 10 48 	mov %e4,%d11,%d10
8000c9fa:	b7 00 a9 6a 	imask %e6,0,21,9
8000c9fe:	6d ff 22 ed 	call 8000a442 <__adddf3>
8000ca02:	0b 89 10 48 	mov %e4,%d9,%d8
8000ca06:	0b 23 10 68 	mov %e6,%d3,%d2
8000ca0a:	6d 00 cc 0a 	call 8000dfa2 <__gtdf2>
8000ca0e:	ff 12 9b 00 	jge %d2,1,8000cb44 <_dtoa_r+0x78c>
8000ca12:	b7 00 a9 4a 	imask %e4,0,21,9
8000ca16:	0b ab 10 68 	mov %e6,%d11,%d10
8000ca1a:	6d ff 30 ed 	call 8000a47a <__subdf3>
8000ca1e:	0b 89 10 48 	mov %e4,%d9,%d8
8000ca22:	0b 23 10 68 	mov %e6,%d3,%d2
8000ca26:	6d 00 fe 0a 	call 8000e022 <__ltdf2>
8000ca2a:	ff 02 18 00 	jge %d2,0,8000ca5a <_dtoa_r+0x6a2>
8000ca2e:	60 e2       	mov.a %a2,%d14
8000ca30:	60 ef       	mov.a %a15,%d14
8000ca32:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000ca36:	b0 ff       	add.a %a15,-1
8000ca38:	8b 0f 03 f2 	eq %d15,%d15,48
8000ca3c:	df 0f 12 03 	jeq %d15,0,8000d060 <_dtoa_r+0xca8>
8000ca40:	80 fe       	mov.d %d14,%a15
8000ca42:	3c f6       	j 8000ca2e <_dtoa_r+0x676>
8000ca44:	0b 89 10 48 	mov %e4,%d9,%d8
8000ca48:	82 06       	mov %d6,0
8000ca4a:	7b 40 02 74 	movh %d7,16420
8000ca4e:	6d ff 36 ed 	call 8000a4ba <__muldf3>
8000ca52:	40 fc       	mov.aa %a12,%a15
8000ca54:	0b 23 10 c8 	mov %e12,%d3,%d2
8000ca58:	3c b7       	j 8000c9c6 <_dtoa_r+0x60e>
8000ca5a:	09 ac 40 19 	ld.d %e12,[%sp]64
8000ca5e:	19 a3 14 10 	ld.w %d3,[%sp]84
8000ca62:	19 a2 08 00 	ld.w %d2,[%sp]8
8000ca66:	8b 03 80 52 	ge %d5,%d3,0
8000ca6a:	8b f2 40 54 	and.lt %d5,%d2,15
8000ca6e:	df 05 9e 00 	jeq %d5,0,8000cbaa <_dtoa_r+0x7f2>
8000ca72:	91 00 00 f8 	movh.a %a15,32768
8000ca76:	d9 ff d8 a0 	lea %a15,[%a15]3736 <80000e98 <__mprec_tens>>
8000ca7a:	19 a3 10 00 	ld.w %d3,[%sp]16 <80000e98 <__mprec_tens>>
8000ca7e:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000ca82:	19 a2 28 00 	ld.w %d2,[%sp]40
8000ca86:	fa 13       	lt %d15,%d3,1
8000ca88:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000ca8c:	09 f8 40 09 	ld.d %e8,[%a15]
8000ca90:	6e 16       	jz %d15,8000cabc <_dtoa_r+0x704>
8000ca92:	df 03 a4 81 	jne %d3,0,8000cdda <_dtoa_r+0xa22>
8000ca96:	0b 89 10 48 	mov %e4,%d9,%d8
8000ca9a:	82 06       	mov %d6,0
8000ca9c:	7b 40 01 74 	movh %d7,16404
8000caa0:	6d ff 0d ed 	call 8000a4ba <__muldf3>
8000caa4:	0b cd 10 68 	mov %e6,%d13,%d12
8000caa8:	0b 23 10 48 	mov %e4,%d3,%d2
8000caac:	a0 0c       	mov.a %a12,0
8000caae:	6d 00 9a 0a 	call 8000dfe2 <__gedf2>
8000cab2:	a0 0f       	mov.a %a15,0
8000cab4:	ff 02 95 01 	jge %d2,0,8000cdde <_dtoa_r+0xa26>
8000cab8:	1d 00 9d 01 	j 8000cdf2 <_dtoa_r+0xa3a>
8000cabc:	d8 03       	ld.a %a15,[%sp]12
8000cabe:	0b cd 10 a8 	mov %e10,%d13,%d12
8000cac2:	0b 89 10 68 	mov %e6,%d9,%d8
8000cac6:	0b ab 10 48 	mov %e4,%d11,%d10
8000caca:	80 fe       	mov.d %d14,%a15
8000cacc:	6d ff c9 ed 	call 8000a65e <__divdf3>
8000cad0:	0b 23 10 48 	mov %e4,%d3,%d2
8000cad4:	c2 1e       	add %d14,1
8000cad6:	6d 00 c6 0a 	call 8000e062 <__fixdfsi>
8000cada:	02 24       	mov %d4,%d2
8000cadc:	02 2f       	mov %d15,%d2
8000cade:	6d ff 4c ee 	call 8000a776 <__floatsidf>
8000cae2:	0b 89 10 68 	mov %e6,%d9,%d8
8000cae6:	0b 23 10 48 	mov %e4,%d3,%d2
8000caea:	6d ff e8 ec 	call 8000a4ba <__muldf3>
8000caee:	0b ab 10 48 	mov %e4,%d11,%d10
8000caf2:	0b 23 10 68 	mov %e6,%d3,%d2
8000caf6:	6d ff c2 ec 	call 8000a47a <__subdf3>
8000cafa:	0b 23 10 48 	mov %e4,%d3,%d2
8000cafe:	1b 0f 03 30 	addi %d3,%d15,48
8000cb02:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cb06:	28 03       	st.b [%a15]0,%d3
8000cb08:	02 e3       	mov %d3,%d14
8000cb0a:	a2 23       	sub %d3,%d2
8000cb0c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cb10:	5f 23 3c 80 	jne %d3,%d2,8000cb88 <_dtoa_r+0x7d0>
8000cb14:	0b 45 10 68 	mov %e6,%d5,%d4
8000cb18:	6d ff 95 ec 	call 8000a442 <__adddf3>
8000cb1c:	0b 89 10 68 	mov %e6,%d9,%d8
8000cb20:	0b 23 10 48 	mov %e4,%d3,%d2
8000cb24:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cb28:	6d 00 3d 0a 	call 8000dfa2 <__gtdf2>
8000cb2c:	4e 2e       	jgtz %d2,8000cb48 <_dtoa_r+0x790>
8000cb2e:	0b ab 10 48 	mov %e4,%d11,%d10
8000cb32:	0b 89 10 68 	mov %e6,%d9,%d8
8000cb36:	6d 00 f6 09 	call 8000df22 <__eqdf2>
8000cb3a:	df 02 95 82 	jne %d2,0,8000d064 <_dtoa_r+0xcac>
8000cb3e:	ae 05       	jnz.t %d15,0,8000cb48 <_dtoa_r+0x790>
8000cb40:	1d 00 92 02 	j 8000d064 <_dtoa_r+0xcac>
8000cb44:	58 0c       	ld.w %d15,[%sp]48
8000cb46:	78 02       	st.w [%sp]8,%d15
8000cb48:	58 03       	ld.w %d15,[%sp]12
8000cb4a:	a2 ef       	sub %d15,%d14
8000cb4c:	46 0f       	not %d15
8000cb4e:	60 e2       	mov.a %a2,%d14
8000cb50:	60 ef       	mov.a %a15,%d14
8000cb52:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000cb56:	b0 ff       	add.a %a15,-1
8000cb58:	8b 93 03 32 	eq %d3,%d3,57
8000cb5c:	df 03 11 00 	jeq %d3,0,8000cb7e <_dtoa_r+0x7c6>
8000cb60:	9f 0f 0d 80 	jned %d15,0,8000cb7a <_dtoa_r+0x7c2>
8000cb64:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cb68:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000cb6c:	c2 13       	add %d3,1
8000cb6e:	da 30       	mov %d15,48
8000cb70:	59 a3 08 00 	st.w [%sp]8,%d3
8000cb74:	2c 30       	st.b [%a3]0,%d15
8000cb76:	40 3f       	mov.aa %a15,%a3
8000cb78:	3c 03       	j 8000cb7e <_dtoa_r+0x7c6>
8000cb7a:	80 fe       	mov.d %d14,%a15
8000cb7c:	3c e9       	j 8000cb4e <_dtoa_r+0x796>
8000cb7e:	0c f0       	ld.bu %d15,[%a15]0
8000cb80:	c2 1f       	add %d15,1
8000cb82:	28 0f       	st.b [%a15]0,%d15
8000cb84:	1d 00 70 02 	j 8000d064 <_dtoa_r+0xcac>
8000cb88:	82 06       	mov %d6,0
8000cb8a:	7b 40 02 74 	movh %d7,16420
8000cb8e:	6d ff 96 ec 	call 8000a4ba <__muldf3>
8000cb92:	d2 06       	mov %e6,0
8000cb94:	0b 23 10 48 	mov %e4,%d3,%d2
8000cb98:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cb9c:	60 ef       	mov.a %a15,%d14
8000cb9e:	6d 00 c2 09 	call 8000df22 <__eqdf2>
8000cba2:	df 02 90 ff 	jne %d2,0,8000cac2 <_dtoa_r+0x70a>
8000cba6:	1d 00 5f 02 	j 8000d064 <_dtoa_r+0xcac>
8000cbaa:	19 a2 24 00 	ld.w %d2,[%sp]36
8000cbae:	58 08       	ld.w %d15,[%sp]32
8000cbb0:	19 a8 14 00 	ld.w %d8,[%sp]20
8000cbb4:	a0 0f       	mov.a %a15,0
8000cbb6:	df 02 3b 00 	jeq %d2,0,8000cc2c <_dtoa_r+0x874>
8000cbba:	58 07       	ld.w %d15,[%sp]28
8000cbbc:	ff 2f 10 00 	jge %d15,2,8000cbdc <_dtoa_r+0x824>
8000cbc0:	58 13       	ld.w %d15,[%sp]76
8000cbc2:	6e 05       	jz %d15,8000cbcc <_dtoa_r+0x814>
8000cbc4:	1b 33 43 30 	addi %d3,%d3,1075
8000cbc8:	58 08       	ld.w %d15,[%sp]32
8000cbca:	3c 22       	j 8000cc0e <_dtoa_r+0x856>
8000cbcc:	19 a3 10 10 	ld.w %d3,[%sp]80
8000cbd0:	58 08       	ld.w %d15,[%sp]32
8000cbd2:	8b 63 03 31 	rsub %d3,%d3,54
8000cbd6:	19 a8 14 00 	ld.w %d8,[%sp]20
8000cbda:	3c 1a       	j 8000cc0e <_dtoa_r+0x856>
8000cbdc:	58 04       	ld.w %d15,[%sp]16
8000cbde:	19 a2 20 00 	ld.w %d2,[%sp]32
8000cbe2:	c2 ff       	add %d15,-1
8000cbe4:	3f f2 04 00 	jlt %d2,%d15,8000cbec <_dtoa_r+0x834>
8000cbe8:	5a f2       	sub %d15,%d2,%d15
8000cbea:	3c 0b       	j 8000cc00 <_dtoa_r+0x848>
8000cbec:	19 a3 20 00 	ld.w %d3,[%sp]32
8000cbf0:	78 08       	st.w [%sp]32,%d15
8000cbf2:	52 32       	sub %d2,%d15,%d3
8000cbf4:	19 a3 34 00 	ld.w %d3,[%sp]52
8000cbf8:	82 0f       	mov %d15,0
8000cbfa:	42 23       	add %d3,%d2
8000cbfc:	59 a3 34 00 	st.w [%sp]52,%d3
8000cc00:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cc04:	19 a8 14 00 	ld.w %d8,[%sp]20
8000cc08:	ce 33       	jgez %d3,8000cc0e <_dtoa_r+0x856>
8000cc0a:	a2 38       	sub %d8,%d3
8000cc0c:	82 03       	mov %d3,0
8000cc0e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cc12:	40 d4       	mov.aa %a4,%a13
8000cc14:	42 32       	add %d2,%d3
8000cc16:	59 a2 14 00 	st.w [%sp]20,%d2
8000cc1a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cc1e:	82 14       	mov %d4,1
8000cc20:	42 32       	add %d2,%d3
8000cc22:	59 a2 18 00 	st.w [%sp]24,%d2
8000cc26:	6d 00 4e 04 	call 8000d4c2 <__i2b>
8000cc2a:	40 2f       	mov.aa %a15,%a2
8000cc2c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cc30:	8b 18 80 32 	ge %d3,%d8,1
8000cc34:	8b 12 80 34 	and.ge %d3,%d2,1
8000cc38:	76 3e       	jz %d3,8000cc54 <_dtoa_r+0x89c>
8000cc3a:	0b 82 80 31 	min %d3,%d2,%d8
8000cc3e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cc42:	a2 38       	sub %d8,%d3
8000cc44:	a2 32       	sub %d2,%d3
8000cc46:	59 a2 14 00 	st.w [%sp]20,%d2
8000cc4a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cc4e:	a2 32       	sub %d2,%d3
8000cc50:	59 a2 18 00 	st.w [%sp]24,%d2
8000cc54:	19 a3 20 00 	ld.w %d3,[%sp]32
8000cc58:	bf 13 27 00 	jlt %d3,1,8000cca6 <_dtoa_r+0x8ee>
8000cc5c:	19 a2 24 00 	ld.w %d2,[%sp]36
8000cc60:	df 02 1c 00 	jeq %d2,0,8000cc98 <_dtoa_r+0x8e0>
8000cc64:	bf 1f 13 00 	jlt %d15,1,8000cc8a <_dtoa_r+0x8d2>
8000cc68:	40 f5       	mov.aa %a5,%a15
8000cc6a:	02 f4       	mov %d4,%d15
8000cc6c:	40 d4       	mov.aa %a4,%a13
8000cc6e:	6d 00 bf 04 	call 8000d5ec <__pow5mult>
8000cc72:	40 e6       	mov.aa %a6,%a14
8000cc74:	40 d4       	mov.aa %a4,%a13
8000cc76:	40 25       	mov.aa %a5,%a2
8000cc78:	40 2f       	mov.aa %a15,%a2
8000cc7a:	6d 00 2c 04 	call 8000d4d2 <__multiply>
8000cc7e:	40 e5       	mov.aa %a5,%a14
8000cc80:	40 2c       	mov.aa %a12,%a2
8000cc82:	40 d4       	mov.aa %a4,%a13
8000cc84:	6d 00 81 03 	call 8000d386 <_Bfree>
8000cc88:	40 ce       	mov.aa %a14,%a12
8000cc8a:	19 a4 20 00 	ld.w %d4,[%sp]32
8000cc8e:	40 d4       	mov.aa %a4,%a13
8000cc90:	a2 f4       	sub %d4,%d15
8000cc92:	40 e5       	mov.aa %a5,%a14
8000cc94:	76 49       	jz %d4,8000cca6 <_dtoa_r+0x8ee>
8000cc96:	3c 05       	j 8000cca0 <_dtoa_r+0x8e8>
8000cc98:	19 a4 20 00 	ld.w %d4,[%sp]32
8000cc9c:	40 d4       	mov.aa %a4,%a13
8000cc9e:	40 e5       	mov.aa %a5,%a14
8000cca0:	6d 00 a6 04 	call 8000d5ec <__pow5mult>
8000cca4:	40 2e       	mov.aa %a14,%a2
8000cca6:	40 d4       	mov.aa %a4,%a13
8000cca8:	82 14       	mov %d4,1
8000ccaa:	6d 00 0c 04 	call 8000d4c2 <__i2b>
8000ccae:	19 a3 34 00 	ld.w %d3,[%sp]52
8000ccb2:	40 2c       	mov.aa %a12,%a2
8000ccb4:	8e 3c       	jlez %d3,8000cccc <_dtoa_r+0x914>
8000ccb6:	40 d4       	mov.aa %a4,%a13
8000ccb8:	40 25       	mov.aa %a5,%a2
8000ccba:	02 34       	mov %d4,%d3
8000ccbc:	6d 00 98 04 	call 8000d5ec <__pow5mult>
8000ccc0:	58 07       	ld.w %d15,[%sp]28
8000ccc2:	40 2c       	mov.aa %a12,%a2
8000ccc4:	82 09       	mov %d9,0
8000ccc6:	ff 2f 1f 00 	jge %d15,2,8000cd04 <_dtoa_r+0x94c>
8000ccca:	3c 06       	j 8000ccd6 <_dtoa_r+0x91e>
8000cccc:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ccd0:	82 09       	mov %d9,0
8000ccd2:	ff 22 15 00 	jge %d2,2,8000ccfc <_dtoa_r+0x944>
8000ccd6:	82 09       	mov %d9,0
8000ccd8:	df 0c 12 80 	jne %d12,0,8000ccfc <_dtoa_r+0x944>
8000ccdc:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000cce0:	ee 0e       	jnz %d15,8000ccfc <_dtoa_r+0x944>
8000cce2:	7b 00 ff f7 	movh %d15,32752
8000cce6:	26 df       	and %d15,%d13
8000cce8:	6e 0a       	jz %d15,8000ccfc <_dtoa_r+0x944>
8000ccea:	19 a3 14 00 	ld.w %d3,[%sp]20
8000ccee:	58 06       	ld.w %d15,[%sp]24
8000ccf0:	c2 13       	add %d3,1
8000ccf2:	c2 1f       	add %d15,1
8000ccf4:	59 a3 14 00 	st.w [%sp]20,%d3
8000ccf8:	78 06       	st.w [%sp]24,%d15
8000ccfa:	82 19       	mov %d9,1
8000ccfc:	19 a3 34 00 	ld.w %d3,[%sp]52
8000cd00:	82 12       	mov %d2,1
8000cd02:	76 39       	jz %d3,8000cd14 <_dtoa_r+0x95c>
8000cd04:	4c c4       	ld.w %d15,[%a12]16
8000cd06:	90 c3       	addsc.a %a3,%a12,%d15,2
8000cd08:	19 34 10 00 	ld.w %d4,[%a3]16
8000cd0c:	6d 00 87 03 	call 8000d41a <__hi0bits>
8000cd10:	8b 02 02 21 	rsub %d2,%d2,32
8000cd14:	58 06       	ld.w %d15,[%sp]24
8000cd16:	42 2f       	add %d15,%d2
8000cd18:	16 1f       	and %d15,31
8000cd1a:	6e 0a       	jz %d15,8000cd2e <_dtoa_r+0x976>
8000cd1c:	8b 0f 02 31 	rsub %d3,%d15,32
8000cd20:	8b cf 01 f1 	rsub %d15,%d15,28
8000cd24:	ff 53 07 00 	jge %d3,5,8000cd32 <_dtoa_r+0x97a>
8000cd28:	df 43 10 00 	jeq %d3,4,8000cd48 <_dtoa_r+0x990>
8000cd2c:	02 3f       	mov %d15,%d3
8000cd2e:	1b cf 01 f0 	addi %d15,%d15,28
8000cd32:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cd36:	19 a3 18 00 	ld.w %d3,[%sp]24
8000cd3a:	42 f2       	add %d2,%d15
8000cd3c:	42 f3       	add %d3,%d15
8000cd3e:	59 a2 14 00 	st.w [%sp]20,%d2
8000cd42:	42 f8       	add %d8,%d15
8000cd44:	59 a3 18 00 	st.w [%sp]24,%d3
8000cd48:	58 05       	ld.w %d15,[%sp]20
8000cd4a:	8e f7       	jlez %d15,8000cd58 <_dtoa_r+0x9a0>
8000cd4c:	40 e5       	mov.aa %a5,%a14
8000cd4e:	40 d4       	mov.aa %a4,%a13
8000cd50:	02 f4       	mov %d4,%d15
8000cd52:	6d 00 8b 04 	call 8000d668 <__lshift>
8000cd56:	40 2e       	mov.aa %a14,%a2
8000cd58:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cd5c:	8e 27       	jlez %d2,8000cd6a <_dtoa_r+0x9b2>
8000cd5e:	40 c5       	mov.aa %a5,%a12
8000cd60:	40 d4       	mov.aa %a4,%a13
8000cd62:	02 24       	mov %d4,%d2
8000cd64:	6d 00 82 04 	call 8000d668 <__lshift>
8000cd68:	40 2c       	mov.aa %a12,%a2
8000cd6a:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000cd6e:	df 03 20 00 	jeq %d3,0,8000cdae <_dtoa_r+0x9f6>
8000cd72:	40 e4       	mov.aa %a4,%a14
8000cd74:	40 c5       	mov.aa %a5,%a12
8000cd76:	6d 00 d6 04 	call 8000d722 <__mcmp>
8000cd7a:	ff 02 1a 00 	jge %d2,0,8000cdae <_dtoa_r+0x9f6>
8000cd7e:	58 02       	ld.w %d15,[%sp]8
8000cd80:	40 e5       	mov.aa %a5,%a14
8000cd82:	c2 ff       	add %d15,-1
8000cd84:	40 d4       	mov.aa %a4,%a13
8000cd86:	fb a0 00 40 	mov %e4,10
8000cd8a:	78 02       	st.w [%sp]8,%d15
8000cd8c:	6d 00 06 03 	call 8000d398 <__multadd>
8000cd90:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000cd94:	19 a3 24 00 	ld.w %d3,[%sp]36
8000cd98:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd9c:	40 2e       	mov.aa %a14,%a2
8000cd9e:	76 38       	jz %d3,8000cdae <_dtoa_r+0x9f6>
8000cda0:	40 f5       	mov.aa %a5,%a15
8000cda2:	40 d4       	mov.aa %a4,%a13
8000cda4:	fb a0 00 40 	mov %e4,10
8000cda8:	6d 00 f8 02 	call 8000d398 <__multadd>
8000cdac:	40 2f       	mov.aa %a15,%a2
8000cdae:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cdb2:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cdb6:	8b 32 80 f2 	ge %d15,%d2,3
8000cdba:	8b 13 40 f4 	and.lt %d15,%d3,1
8000cdbe:	6e 2a       	jz %d15,8000ce12 <_dtoa_r+0xa5a>
8000cdc0:	f6 3f       	jnz %d3,8000cdde <_dtoa_r+0xa26>
8000cdc2:	40 c5       	mov.aa %a5,%a12
8000cdc4:	40 d4       	mov.aa %a4,%a13
8000cdc6:	d2 54       	mov %e4,5
8000cdc8:	6d 00 e8 02 	call 8000d398 <__multadd>
8000cdcc:	40 e4       	mov.aa %a4,%a14
8000cdce:	40 25       	mov.aa %a5,%a2
8000cdd0:	40 2c       	mov.aa %a12,%a2
8000cdd2:	6d 00 a8 04 	call 8000d722 <__mcmp>
8000cdd6:	4e 2e       	jgtz %d2,8000cdf2 <_dtoa_r+0xa3a>
8000cdd8:	3c 03       	j 8000cdde <_dtoa_r+0xa26>
8000cdda:	a0 0c       	mov.a %a12,0
8000cddc:	a0 0f       	mov.a %a15,0
8000cdde:	58 0a       	ld.w %d15,[%sp]40
8000cde0:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000cde4:	46 0f       	not %d15
8000cde6:	78 02       	st.w [%sp]8,%d15
8000cde8:	3c 11       	j 8000ce0a <_dtoa_r+0xa52>
8000cdea:	58 0c       	ld.w %d15,[%sp]48
8000cdec:	a0 0c       	mov.a %a12,0
8000cdee:	78 02       	st.w [%sp]8,%d15
8000cdf0:	a0 0f       	mov.a %a15,0
8000cdf2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cdf6:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000cdfa:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000cdfe:	da 31       	mov %d15,49
8000ce00:	c2 12       	add %d2,1
8000ce02:	c2 1e       	add %d14,1
8000ce04:	2c 30       	st.b [%a3]0,%d15
8000ce06:	59 a2 08 00 	st.w [%sp]8,%d2
8000ce0a:	80 f8       	mov.d %d8,%a15
8000ce0c:	a0 0f       	mov.a %a15,0
8000ce0e:	1d 00 14 01 	j 8000d036 <_dtoa_r+0xc7e>
8000ce12:	19 a3 24 00 	ld.w %d3,[%sp]36
8000ce16:	f6 35       	jnz %d3,8000ce20 <_dtoa_r+0xa68>
8000ce18:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000ce1c:	1d 00 c2 00 	j 8000cfa0 <_dtoa_r+0xbe8>
8000ce20:	8e 87       	jlez %d8,8000ce2e <_dtoa_r+0xa76>
8000ce22:	40 f5       	mov.aa %a5,%a15
8000ce24:	40 d4       	mov.aa %a4,%a13
8000ce26:	02 84       	mov %d4,%d8
8000ce28:	6d 00 20 04 	call 8000d668 <__lshift>
8000ce2c:	40 2f       	mov.aa %a15,%a2
8000ce2e:	80 f8       	mov.d %d8,%a15
8000ce30:	df 09 16 00 	jeq %d9,0,8000ce5c <_dtoa_r+0xaa4>
8000ce34:	40 d4       	mov.aa %a4,%a13
8000ce36:	48 14       	ld.w %d4,[%a15]4
8000ce38:	6d 00 7c 02 	call 8000d330 <_Balloc>
8000ce3c:	48 44       	ld.w %d4,[%a15]16
8000ce3e:	d9 24 0c 00 	lea %a4,[%a2]12
8000ce42:	c2 24       	add %d4,2
8000ce44:	d9 f5 0c 00 	lea %a5,[%a15]12
8000ce48:	06 24       	sh %d4,2
8000ce4a:	80 2f       	mov.d %d15,%a2
8000ce4c:	6d 00 64 02 	call 8000d314 <memcpy>
8000ce50:	60 f5       	mov.a %a5,%d15
8000ce52:	40 d4       	mov.aa %a4,%a13
8000ce54:	82 14       	mov %d4,1
8000ce56:	6d 00 09 04 	call 8000d668 <__lshift>
8000ce5a:	80 28       	mov.d %d8,%a2
8000ce5c:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000ce60:	8f 1c 00 a1 	and %d10,%d12,1
8000ce64:	40 e4       	mov.aa %a4,%a14
8000ce66:	40 c5       	mov.aa %a5,%a12
8000ce68:	6d ff 1a fa 	call 8000c29c <quorem>
8000ce6c:	40 e4       	mov.aa %a4,%a14
8000ce6e:	40 f5       	mov.aa %a5,%a15
8000ce70:	02 2e       	mov %d14,%d2
8000ce72:	1b 02 03 f0 	addi %d15,%d2,48
8000ce76:	6d 00 56 04 	call 8000d722 <__mcmp>
8000ce7a:	60 86       	mov.a %a6,%d8
8000ce7c:	40 d4       	mov.aa %a4,%a13
8000ce7e:	40 c5       	mov.aa %a5,%a12
8000ce80:	02 2b       	mov %d11,%d2
8000ce82:	6d 00 71 04 	call 8000d764 <__mdiff>
8000ce86:	19 22 0c 00 	ld.w %d2,[%a2]12
8000ce8a:	80 2d       	mov.d %d13,%a2
8000ce8c:	82 1c       	mov %d12,1
8000ce8e:	f6 26       	jnz %d2,8000ce9a <_dtoa_r+0xae2>
8000ce90:	40 e4       	mov.aa %a4,%a14
8000ce92:	40 25       	mov.aa %a5,%a2
8000ce94:	6d 00 47 04 	call 8000d722 <__mcmp>
8000ce98:	02 2c       	mov %d12,%d2
8000ce9a:	60 d5       	mov.a %a5,%d13
8000ce9c:	40 d4       	mov.aa %a4,%a13
8000ce9e:	6d 00 74 02 	call 8000d386 <_Bfree>
8000cea2:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000cea6:	1b 19 00 d0 	addi %d13,%d9,1
8000ceaa:	a6 c3       	or %d3,%d12
8000ceac:	f6 3f       	jnz %d3,8000ceca <_dtoa_r+0xb12>
8000ceae:	f6 ae       	jnz %d10,8000ceca <_dtoa_r+0xb12>
8000ceb0:	8b 9f 03 32 	eq %d3,%d15,57
8000ceb4:	40 e2       	mov.aa %a2,%a14
8000ceb6:	df 03 3a 80 	jne %d3,0,8000cf2a <_dtoa_r+0xb72>
8000ceba:	1b 1e 03 20 	addi %d2,%d14,49
8000cebe:	8b 1b 80 b2 	ge %d11,%d11,1
8000cec2:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000cec6:	02 de       	mov %d14,%d13
8000cec8:	3c 37       	j 8000cf36 <_dtoa_r+0xb7e>
8000ceca:	ce b5       	jgez %d11,8000ced4 <_dtoa_r+0xb1c>
8000cecc:	02 fa       	mov %d10,%d15
8000cece:	40 e2       	mov.aa %a2,%a14
8000ced0:	4e ca       	jgtz %d12,8000cee4 <_dtoa_r+0xb2c>
8000ced2:	3c 1e       	j 8000cf0e <_dtoa_r+0xb56>
8000ced4:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ced8:	a6 2b       	or %d11,%d2
8000ceda:	df 0b 20 80 	jne %d11,0,8000cf1a <_dtoa_r+0xb62>
8000cede:	df 0a 1e 80 	jne %d10,0,8000cf1a <_dtoa_r+0xb62>
8000cee2:	3c f5       	j 8000cecc <_dtoa_r+0xb14>
8000cee4:	40 d4       	mov.aa %a4,%a13
8000cee6:	40 e5       	mov.aa %a5,%a14
8000cee8:	82 14       	mov %d4,1
8000ceea:	6d 00 bf 03 	call 8000d668 <__lshift>
8000ceee:	40 c5       	mov.aa %a5,%a12
8000cef0:	40 24       	mov.aa %a4,%a2
8000cef2:	b5 a2 04 00 	st.a [%sp]4,%a2
8000cef6:	6d 00 16 04 	call 8000d722 <__mcmp>
8000cefa:	99 a2 04 00 	ld.a %a2,[%sp]4
8000cefe:	4e 23       	jgtz %d2,8000cf04 <_dtoa_r+0xb4c>
8000cf00:	f6 27       	jnz %d2,8000cf0e <_dtoa_r+0xb56>
8000cf02:	2e 06       	jz.t %d15,0,8000cf0e <_dtoa_r+0xb56>
8000cf04:	8b 9f 03 32 	eq %d3,%d15,57
8000cf08:	df 03 11 80 	jne %d3,0,8000cf2a <_dtoa_r+0xb72>
8000cf0c:	92 1a       	add %d10,%d15,1
8000cf0e:	60 93       	mov.a %a3,%d9
8000cf10:	02 de       	mov %d14,%d13
8000cf12:	34 3a       	st.b [%a3],%d10
8000cf14:	40 2e       	mov.aa %a14,%a2
8000cf16:	1d 00 90 00 	j 8000d036 <_dtoa_r+0xc7e>
8000cf1a:	bf 1c 11 00 	jlt %d12,1,8000cf3c <_dtoa_r+0xb84>
8000cf1e:	8b 9f 23 32 	ne %d3,%d15,57
8000cf22:	40 e2       	mov.aa %a2,%a14
8000cf24:	02 de       	mov %d14,%d13
8000cf26:	c2 1f       	add %d15,1
8000cf28:	f6 37       	jnz %d3,8000cf36 <_dtoa_r+0xb7e>
8000cf2a:	60 93       	mov.a %a3,%d9
8000cf2c:	da 39       	mov %d15,57
8000cf2e:	02 de       	mov %d14,%d13
8000cf30:	2c 30       	st.b [%a3]0,%d15
8000cf32:	40 2e       	mov.aa %a14,%a2
8000cf34:	3c 5d       	j 8000cfee <_dtoa_r+0xc36>
8000cf36:	60 92       	mov.a %a2,%d9
8000cf38:	2c 20       	st.b [%a2]0,%d15
8000cf3a:	3c 7e       	j 8000d036 <_dtoa_r+0xc7e>
8000cf3c:	60 93       	mov.a %a3,%d9
8000cf3e:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cf42:	02 d5       	mov %d5,%d13
8000cf44:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cf48:	2c 30       	st.b [%a3]0,%d15
8000cf4a:	a2 25       	sub %d5,%d2
8000cf4c:	02 de       	mov %d14,%d13
8000cf4e:	5f 35 41 00 	jeq %d5,%d3,8000cfd0 <_dtoa_r+0xc18>
8000cf52:	40 e5       	mov.aa %a5,%a14
8000cf54:	40 d4       	mov.aa %a4,%a13
8000cf56:	fb a0 00 40 	mov %e4,10
8000cf5a:	6d 00 1f 02 	call 8000d398 <__multadd>
8000cf5e:	80 ff       	mov.d %d15,%a15
8000cf60:	40 2e       	mov.aa %a14,%a2
8000cf62:	40 d4       	mov.aa %a4,%a13
8000cf64:	40 f5       	mov.aa %a5,%a15
8000cf66:	fb a0 00 40 	mov %e4,10
8000cf6a:	7e 86       	jne %d15,%d8,8000cf76 <_dtoa_r+0xbbe>
8000cf6c:	6d 00 16 02 	call 8000d398 <__multadd>
8000cf70:	40 2f       	mov.aa %a15,%a2
8000cf72:	80 28       	mov.d %d8,%a2
8000cf74:	3c 0b       	j 8000cf8a <_dtoa_r+0xbd2>
8000cf76:	6d 00 11 02 	call 8000d398 <__multadd>
8000cf7a:	60 85       	mov.a %a5,%d8
8000cf7c:	40 d4       	mov.aa %a4,%a13
8000cf7e:	fb a0 00 40 	mov %e4,10
8000cf82:	40 2f       	mov.aa %a15,%a2
8000cf84:	6d 00 0a 02 	call 8000d398 <__multadd>
8000cf88:	80 28       	mov.d %d8,%a2
8000cf8a:	02 d9       	mov %d9,%d13
8000cf8c:	1d ff 6c ff 	j 8000ce64 <_dtoa_r+0xaac>
8000cf90:	40 e5       	mov.aa %a5,%a14
8000cf92:	40 d4       	mov.aa %a4,%a13
8000cf94:	fb a0 00 40 	mov %e4,10
8000cf98:	6d 00 00 02 	call 8000d398 <__multadd>
8000cf9c:	02 98       	mov %d8,%d9
8000cf9e:	40 2e       	mov.aa %a14,%a2
8000cfa0:	40 e4       	mov.aa %a4,%a14
8000cfa2:	40 c5       	mov.aa %a5,%a12
8000cfa4:	6d ff 7c f9 	call 8000c29c <quorem>
8000cfa8:	1b 18 00 90 	addi %d9,%d8,1
8000cfac:	1b 02 03 f0 	addi %d15,%d2,48
8000cfb0:	60 82       	mov.a %a2,%d8
8000cfb2:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cfb6:	02 95       	mov %d5,%d9
8000cfb8:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cfbc:	2c 20       	st.b [%a2]0,%d15
8000cfbe:	a2 25       	sub %d5,%d2
8000cfc0:	3f 35 e8 7f 	jlt %d5,%d3,8000cf90 <_dtoa_r+0xbd8>
8000cfc4:	8b 13 40 33 	max %d3,%d3,1
8000cfc8:	02 2e       	mov %d14,%d2
8000cfca:	80 f8       	mov.d %d8,%a15
8000cfcc:	42 3e       	add %d14,%d3
8000cfce:	a0 0f       	mov.a %a15,0
8000cfd0:	40 e5       	mov.aa %a5,%a14
8000cfd2:	40 d4       	mov.aa %a4,%a13
8000cfd4:	82 14       	mov %d4,1
8000cfd6:	6d 00 49 03 	call 8000d668 <__lshift>
8000cfda:	40 c5       	mov.aa %a5,%a12
8000cfdc:	40 2e       	mov.aa %a14,%a2
8000cfde:	40 24       	mov.aa %a4,%a2
8000cfe0:	6d 00 a1 03 	call 8000d722 <__mcmp>
8000cfe4:	4e 25       	jgtz %d2,8000cfee <_dtoa_r+0xc36>
8000cfe6:	df 02 1e 80 	jne %d2,0,8000d022 <_dtoa_r+0xc6a>
8000cfea:	6f 0f 1c 00 	jz.t %d15,0,8000d022 <_dtoa_r+0xc6a>
8000cfee:	58 03       	ld.w %d15,[%sp]12
8000cff0:	a2 ef       	sub %d15,%d14
8000cff2:	46 0f       	not %d15
8000cff4:	60 e2       	mov.a %a2,%d14
8000cff6:	60 e3       	mov.a %a3,%d14
8000cff8:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000cffc:	b0 f3       	add.a %a3,-1
8000cffe:	8b 93 03 52 	eq %d5,%d3,57
8000d002:	76 5d       	jz %d5,8000d01c <_dtoa_r+0xc64>
8000d004:	9f 0f 0a 80 	jned %d15,0,8000d018 <_dtoa_r+0xc60>
8000d008:	58 02       	ld.w %d15,[%sp]8
8000d00a:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d00e:	c2 1f       	add %d15,1
8000d010:	78 02       	st.w [%sp]8,%d15
8000d012:	da 31       	mov %d15,49
8000d014:	2c 30       	st.b [%a3]0,%d15
8000d016:	3c 10       	j 8000d036 <_dtoa_r+0xc7e>
8000d018:	80 3e       	mov.d %d14,%a3
8000d01a:	3c ed       	j 8000cff4 <_dtoa_r+0xc3c>
8000d01c:	c2 13       	add %d3,1
8000d01e:	34 33       	st.b [%a3],%d3
8000d020:	3c 0b       	j 8000d036 <_dtoa_r+0xc7e>
8000d022:	60 e2       	mov.a %a2,%d14
8000d024:	60 e3       	mov.a %a3,%d14
8000d026:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d02a:	b0 f3       	add.a %a3,-1
8000d02c:	8b 0f 03 f2 	eq %d15,%d15,48
8000d030:	6e 03       	jz %d15,8000d036 <_dtoa_r+0xc7e>
8000d032:	80 3e       	mov.d %d14,%a3
8000d034:	3c f7       	j 8000d022 <_dtoa_r+0xc6a>
8000d036:	40 d4       	mov.aa %a4,%a13
8000d038:	40 c5       	mov.aa %a5,%a12
8000d03a:	6d 00 a6 01 	call 8000d386 <_Bfree>
8000d03e:	df 08 13 00 	jeq %d8,0,8000d064 <_dtoa_r+0xcac>
8000d042:	80 f2       	mov.d %d2,%a15
8000d044:	8b 02 20 f2 	ne %d15,%d2,0
8000d048:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000d04c:	6e 05       	jz %d15,8000d056 <_dtoa_r+0xc9e>
8000d04e:	40 d4       	mov.aa %a4,%a13
8000d050:	40 f5       	mov.aa %a5,%a15
8000d052:	6d 00 9a 01 	call 8000d386 <_Bfree>
8000d056:	60 85       	mov.a %a5,%d8
8000d058:	40 d4       	mov.aa %a4,%a13
8000d05a:	6d 00 96 01 	call 8000d386 <_Bfree>
8000d05e:	3c 03       	j 8000d064 <_dtoa_r+0xcac>
8000d060:	58 0c       	ld.w %d15,[%sp]48
8000d062:	78 02       	st.w [%sp]8,%d15
8000d064:	40 d4       	mov.aa %a4,%a13
8000d066:	40 e5       	mov.aa %a5,%a14
8000d068:	6d 00 8f 01 	call 8000d386 <_Bfree>
8000d06c:	60 e2       	mov.a %a2,%d14
8000d06e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d072:	99 a3 08 10 	ld.a %a3,[%sp]72
8000d076:	82 0f       	mov %d15,0
8000d078:	d8 0e       	ld.a %a15,[%sp]56
8000d07a:	2c 20       	st.b [%a2]0,%d15
8000d07c:	c2 12       	add %d2,1
8000d07e:	74 32       	st.w [%a3],%d2
8000d080:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d084:	bc f2       	jz.a %a15,8000d088 <_dtoa_r+0xcd0>
8000d086:	68 0e       	st.w [%a15]0,%d14
8000d088:	00 90       	ret 
	...

8000d08c <_malloc_trim_r>:
8000d08c:	02 4f       	mov %d15,%d4
8000d08e:	40 4f       	mov.aa %a15,%a4
8000d090:	6d ff ce ef 	call 8000b02c <__malloc_lock>
8000d094:	91 00 00 c7 	movh.a %a12,28672
8000d098:	d9 cc 20 30 	lea %a12,[%a12]224 <700000e0 <__malloc_av_>>
8000d09c:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <g_vadcChannelIDs>>
8000d0a0:	3b 00 00 21 	mov %d2,4096
8000d0a4:	19 28 04 00 	ld.w %d8,[%a2]4
8000d0a8:	8f 38 c0 81 	andn %d8,%d8,3
8000d0ac:	5a f8       	sub %d15,%d8,%d15
8000d0ae:	1b ff fe f0 	addi %d15,%d15,4079
8000d0b2:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000d0b6:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000d0ba:	7f 2f 07 00 	jge %d15,%d2,8000d0c8 <_malloc_trim_r+0x3c>
8000d0be:	40 f4       	mov.aa %a4,%a15
8000d0c0:	6d ff b7 ef 	call 8000b02e <__malloc_unlock>
8000d0c4:	82 02       	mov %d2,0
8000d0c6:	00 90       	ret 
8000d0c8:	40 f4       	mov.aa %a4,%a15
8000d0ca:	82 04       	mov %d4,0
8000d0cc:	6d ff b2 ef 	call 8000b030 <_sbrk_r>
8000d0d0:	99 c3 08 00 	ld.a %a3,[%a12]8
8000d0d4:	60 84       	mov.a %a4,%d8
8000d0d6:	30 43       	add.a %a3,%a4
8000d0d8:	7d 32 f3 ff 	jne.a %a2,%a3,8000d0be <_malloc_trim_r+0x32>
8000d0dc:	40 f4       	mov.aa %a4,%a15
8000d0de:	8b 0f 00 41 	rsub %d4,%d15,0
8000d0e2:	6d ff a7 ef 	call 8000b030 <_sbrk_r>
8000d0e6:	80 22       	mov.d %d2,%a2
8000d0e8:	df f2 1c 80 	jne %d2,-1,8000d120 <_malloc_trim_r+0x94>
8000d0ec:	40 f4       	mov.aa %a4,%a15
8000d0ee:	82 04       	mov %d4,0
8000d0f0:	6d ff a0 ef 	call 8000b030 <_sbrk_r>
8000d0f4:	99 c3 08 00 	ld.a %a3,[%a12]8
8000d0f8:	01 32 20 40 	sub.a %a4,%a2,%a3
8000d0fc:	80 4f       	mov.d %d15,%a4
8000d0fe:	8b 0f 41 22 	lt %d2,%d15,16
8000d102:	df 02 de ff 	jne %d2,0,8000d0be <_malloc_trim_r+0x32>
8000d106:	91 00 00 47 	movh.a %a4,28672
8000d10a:	99 44 18 30 	ld.a %a4,[%a4]216 <700000d8 <__malloc_sbrk_base>>
8000d10e:	96 01       	or %d15,1
8000d110:	6c 31       	st.w [%a3]4,%d15
8000d112:	01 42 20 20 	sub.a %a2,%a2,%a4
8000d116:	91 00 00 47 	movh.a %a4,28672
8000d11a:	b5 42 b0 f0 	st.a [%a4]3056 <70000bf0 <__malloc_current_mallinfo>>,%a2
8000d11e:	3c d0       	j 8000d0be <_malloc_trim_r+0x32>
8000d120:	99 c2 08 00 	ld.a %a2,[%a12]8
8000d124:	a2 f8       	sub %d8,%d15
8000d126:	8f 18 40 81 	or %d8,%d8,1
8000d12a:	59 28 04 00 	st.w [%a2]4,%d8
8000d12e:	91 00 00 27 	movh.a %a2,28672
8000d132:	19 22 b0 f0 	ld.w %d2,[%a2]3056 <70000bf0 <__malloc_current_mallinfo>>
8000d136:	40 f4       	mov.aa %a4,%a15
8000d138:	5a f2       	sub %d15,%d2,%d15
8000d13a:	59 2f b0 f0 	st.w [%a2]3056 <70000bf0 <__malloc_current_mallinfo>>,%d15
8000d13e:	6d ff 78 ef 	call 8000b02e <__malloc_unlock>
8000d142:	82 12       	mov %d2,1
8000d144:	00 90       	ret 

8000d146 <_free_r>:
8000d146:	40 4d       	mov.aa %a13,%a4
8000d148:	bd 05 d4 00 	jz.a %a5,8000d2f0 <_free_r+0x1aa>
8000d14c:	40 5c       	mov.aa %a12,%a5
8000d14e:	6d ff 6f ef 	call 8000b02c <__malloc_lock>
8000d152:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000d156:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000d15a:	8f 14 c0 f1 	andn %d15,%d4,1
8000d15e:	91 00 00 27 	movh.a %a2,28672
8000d162:	10 f3       	addsc.a %a3,%a15,%d15,0
8000d164:	d9 22 20 30 	lea %a2,[%a2]224 <700000e0 <__malloc_av_>>
8000d168:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <g_vadcChannelIDs>>
8000d16c:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <g_vadcChannelIDs>>
8000d170:	8f 14 00 41 	and %d4,%d4,1
8000d174:	8f 33 c0 31 	andn %d3,%d3,3
8000d178:	7d 43 24 80 	jne.a %a3,%a4,8000d1c0 <_free_r+0x7a>
8000d17c:	42 3f       	add %d15,%d3
8000d17e:	f6 4d       	jnz %d4,8000d198 <_free_r+0x52>
8000d180:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000d184:	60 23       	mov.a %a3,%d2
8000d186:	42 2f       	add %d15,%d2
8000d188:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000d18c:	c8 33       	ld.a %a3,[%a15]12
8000d18e:	c8 24       	ld.a %a4,[%a15]8
8000d190:	b5 43 0c 00 	st.a [%a4]12,%a3
8000d194:	b5 34 08 00 	st.a [%a3]8,%a4
8000d198:	8f 1f 40 21 	or %d2,%d15,1
8000d19c:	68 12       	st.w [%a15]4,%d2
8000d19e:	ec 22       	st.a [%a2]8,%a15
8000d1a0:	91 00 00 f7 	movh.a %a15,28672
8000d1a4:	19 f2 1c 30 	ld.w %d2,[%a15]220 <700000dc <__malloc_trim_threshold>>
8000d1a8:	3f 2f 09 80 	jlt.u %d15,%d2,8000d1ba <_free_r+0x74>
8000d1ac:	91 00 00 f7 	movh.a %a15,28672
8000d1b0:	40 d4       	mov.aa %a4,%a13
8000d1b2:	19 f4 e0 00 	ld.w %d4,[%a15]3104 <70000c20 <__malloc_top_pad>>
8000d1b6:	6d ff 6b ff 	call 8000d08c <_malloc_trim_r>
8000d1ba:	40 d4       	mov.aa %a4,%a13
8000d1bc:	1d ff 39 ef 	j 8000b02e <__malloc_unlock>
8000d1c0:	59 33 04 00 	st.w [%a3]4,%d3
8000d1c4:	82 02       	mov %d2,0
8000d1c6:	df 04 16 80 	jne %d4,0,8000d1f2 <_free_r+0xac>
8000d1ca:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000d1ce:	60 24       	mov.a %a4,%d2
8000d1d0:	42 2f       	add %d15,%d2
8000d1d2:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000d1d6:	c8 25       	ld.a %a5,[%a15]8
8000d1d8:	91 00 00 47 	movh.a %a4,28672
8000d1dc:	d9 44 28 30 	lea %a4,[%a4]232 <700000e8 <__malloc_av_+0x8>>
8000d1e0:	82 12       	mov %d2,1
8000d1e2:	7d 45 08 00 	jeq.a %a5,%a4,8000d1f2 <_free_r+0xac>
8000d1e6:	c8 34       	ld.a %a4,[%a15]12
8000d1e8:	82 02       	mov %d2,0
8000d1ea:	b5 54 0c 00 	st.a [%a5]12,%a4
8000d1ee:	b5 45 08 00 	st.a [%a4]8,%a5
8000d1f2:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000d1f6:	19 44 04 00 	ld.w %d4,[%a4]4
8000d1fa:	6f 04 18 80 	jnz.t %d4,0,8000d22a <_free_r+0xe4>
8000d1fe:	42 3f       	add %d15,%d3
8000d200:	99 35 08 00 	ld.a %a5,[%a3]8
8000d204:	f6 2d       	jnz %d2,8000d21e <_free_r+0xd8>
8000d206:	91 00 00 47 	movh.a %a4,28672
8000d20a:	d9 44 28 30 	lea %a4,[%a4]232 <700000e8 <__malloc_av_+0x8>>
8000d20e:	7d 45 08 80 	jne.a %a5,%a4,8000d21e <_free_r+0xd8>
8000d212:	ec 25       	st.a [%a2]20,%a15
8000d214:	ec 24       	st.a [%a2]16,%a15
8000d216:	e8 35       	st.a [%a15]12,%a5
8000d218:	e8 25       	st.a [%a15]8,%a5
8000d21a:	82 12       	mov %d2,1
8000d21c:	3c 07       	j 8000d22a <_free_r+0xe4>
8000d21e:	99 33 0c 00 	ld.a %a3,[%a3]12
8000d222:	b5 53 0c 00 	st.a [%a5]12,%a3
8000d226:	b5 35 08 00 	st.a [%a3]8,%a5
8000d22a:	8f 1f 40 31 	or %d3,%d15,1
8000d22e:	10 f3       	addsc.a %a3,%a15,%d15,0
8000d230:	68 13       	st.w [%a15]4,%d3
8000d232:	6c 30       	st.w [%a3]0,%d15
8000d234:	df 02 c3 ff 	jne %d2,0,8000d1ba <_free_r+0x74>
8000d238:	3b 00 20 20 	mov %d2,512
8000d23c:	7f 2f 12 80 	jge.u %d15,%d2,8000d260 <_free_r+0x11a>
8000d240:	19 23 04 00 	ld.w %d3,[%a2]4
8000d244:	06 df       	sh %d15,-3
8000d246:	8f ef 3f 20 	sha %d2,%d15,-2
8000d24a:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000d24e:	59 22 04 00 	st.w [%a2]4,%d2
8000d252:	d0 22       	addsc.a %a2,%a2,%d15,3
8000d254:	99 23 08 00 	ld.a %a3,[%a2]8
8000d258:	e8 32       	st.a [%a15]12,%a2
8000d25a:	e8 23       	st.a [%a15]8,%a3
8000d25c:	ec 22       	st.a [%a2]8,%a15
8000d25e:	3c 46       	j 8000d2ea <_free_r+0x1a4>
8000d260:	8f af 1f 30 	sh %d3,%d15,-6
8000d264:	8f 7f 1f 20 	sh %d2,%d15,-9
8000d268:	1b 83 03 30 	addi %d3,%d3,56
8000d26c:	bf 52 22 80 	jlt.u %d2,5,8000d2b0 <_free_r+0x16a>
8000d270:	8b 52 a1 32 	ge.u %d3,%d2,21
8000d274:	f6 34       	jnz %d3,8000d27c <_free_r+0x136>
8000d276:	1b b2 05 30 	addi %d3,%d2,91
8000d27a:	3c 1b       	j 8000d2b0 <_free_r+0x16a>
8000d27c:	8b 52 a5 32 	ge.u %d3,%d2,85
8000d280:	f6 36       	jnz %d3,8000d28c <_free_r+0x146>
8000d282:	8f 4f 1f 30 	sh %d3,%d15,-12
8000d286:	1b e3 06 30 	addi %d3,%d3,110
8000d28a:	3c 13       	j 8000d2b0 <_free_r+0x16a>
8000d28c:	8b 52 b5 32 	ge.u %d3,%d2,341
8000d290:	f6 36       	jnz %d3,8000d29c <_free_r+0x156>
8000d292:	8f 1f 1f 30 	sh %d3,%d15,-15
8000d296:	1b 73 07 30 	addi %d3,%d3,119
8000d29a:	3c 0b       	j 8000d2b0 <_free_r+0x16a>
8000d29c:	3b 50 55 40 	mov %d4,1365
8000d2a0:	3b e0 07 30 	mov %d3,126
8000d2a4:	7f 42 06 80 	jge.u %d2,%d4,8000d2b0 <_free_r+0x16a>
8000d2a8:	8f ef 1e 30 	sh %d3,%d15,-18
8000d2ac:	1b c3 07 30 	addi %d3,%d3,124
8000d2b0:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000d2b4:	99 65 08 00 	ld.a %a5,[%a6]8
8000d2b8:	40 53       	mov.aa %a3,%a5
8000d2ba:	7d 65 0d 80 	jne.a %a5,%a6,8000d2d4 <_free_r+0x18e>
8000d2be:	4c 21       	ld.w %d15,[%a2]4
8000d2c0:	86 e3       	sha %d3,-2
8000d2c2:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000d2c6:	59 23 04 00 	st.w [%a2]4,%d3
8000d2ca:	3c 0d       	j 8000d2e4 <_free_r+0x19e>
8000d2cc:	99 33 08 00 	ld.a %a3,[%a3]8
8000d2d0:	7d 63 08 00 	jeq.a %a3,%a6,8000d2e0 <_free_r+0x19a>
8000d2d4:	19 32 04 00 	ld.w %d2,[%a3]4
8000d2d8:	8f 32 c0 21 	andn %d2,%d2,3
8000d2dc:	3f 2f f8 ff 	jlt.u %d15,%d2,8000d2cc <_free_r+0x186>
8000d2e0:	99 35 0c 00 	ld.a %a5,[%a3]12
8000d2e4:	e8 35       	st.a [%a15]12,%a5
8000d2e6:	e8 23       	st.a [%a15]8,%a3
8000d2e8:	ec 52       	st.a [%a5]8,%a15
8000d2ea:	ec 33       	st.a [%a3]12,%a15
8000d2ec:	1d ff 67 ff 	j 8000d1ba <_free_r+0x74>
8000d2f0:	00 90       	ret 

8000d2f2 <_localeconv_r>:
8000d2f2:	91 00 00 28 	movh.a %a2,32768
8000d2f6:	d9 22 c4 80 	lea %a2,[%a2]3588 <80000e04 <lconv>>
8000d2fa:	00 90       	ret 

8000d2fc <memchr>:
8000d2fc:	8f f4 0f 41 	and %d4,%d4,255
8000d300:	9f 05 04 80 	jned %d5,0,8000d308 <memchr+0xc>
8000d304:	a0 02       	mov.a %a2,0
8000d306:	00 90       	ret 
8000d308:	0c 40       	ld.bu %d15,[%a4]0
8000d30a:	3e 43       	jeq %d15,%d4,8000d310 <memchr+0x14>
8000d30c:	b0 14       	add.a %a4,1
8000d30e:	3c f9       	j 8000d300 <memchr+0x4>
8000d310:	40 42       	mov.aa %a2,%a4
8000d312:	00 90       	ret 

8000d314 <memcpy>:
8000d314:	40 42       	mov.aa %a2,%a4
8000d316:	a0 0f       	mov.a %a15,0
8000d318:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d31c:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d320:	9f 04 03 80 	jned %d4,0,8000d326 <memcpy+0x12>
8000d324:	00 90       	ret 
8000d326:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d32a:	b0 1f       	add.a %a15,1
8000d32c:	2c 40       	st.b [%a4]0,%d15
8000d32e:	3c f5       	j 8000d318 <memcpy+0x4>

8000d330 <_Balloc>:
8000d330:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d334:	40 4f       	mov.aa %a15,%a4
8000d336:	02 4f       	mov %d15,%d4
8000d338:	76 29       	jz %d2,8000d34a <_Balloc+0x1a>
8000d33a:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d33e:	90 33       	addsc.a %a3,%a3,%d15,2
8000d340:	d4 32       	ld.a %a2,[%a3]
8000d342:	bc 2f       	jz.a %a2,8000d360 <_Balloc+0x30>
8000d344:	4c 20       	ld.w %d15,[%a2]0
8000d346:	6c 30       	st.w [%a3]0,%d15
8000d348:	3c 1b       	j 8000d37e <_Balloc+0x4e>
8000d34a:	82 44       	mov %d4,4
8000d34c:	3b 10 02 50 	mov %d5,33
8000d350:	6d 00 5c 03 	call 8000da08 <_calloc_r>
8000d354:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d358:	bd 02 f1 ff 	jnz.a %a2,8000d33a <_Balloc+0xa>
8000d35c:	a0 02       	mov.a %a2,0
8000d35e:	00 90       	ret 
8000d360:	82 18       	mov %d8,1
8000d362:	0f f8 00 80 	sh %d8,%d8,%d15
8000d366:	1b 58 00 50 	addi %d5,%d8,5
8000d36a:	40 f4       	mov.aa %a4,%a15
8000d36c:	82 14       	mov %d4,1
8000d36e:	06 25       	sh %d5,2
8000d370:	6d 00 4c 03 	call 8000da08 <_calloc_r>
8000d374:	bd 02 f4 7f 	jz.a %a2,8000d35c <_Balloc+0x2c>
8000d378:	6c 21       	st.w [%a2]4,%d15
8000d37a:	59 28 08 00 	st.w [%a2]8,%d8
8000d37e:	82 0f       	mov %d15,0
8000d380:	6c 24       	st.w [%a2]16,%d15
8000d382:	6c 23       	st.w [%a2]12,%d15
8000d384:	00 90       	ret 

8000d386 <_Bfree>:
8000d386:	bc 58       	jz.a %a5,8000d396 <_Bfree+0x10>
8000d388:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d38c:	4c 51       	ld.w %d15,[%a5]4
8000d38e:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d390:	4c f0       	ld.w %d15,[%a15]0
8000d392:	6c 50       	st.w [%a5]0,%d15
8000d394:	e8 05       	st.a [%a15]0,%a5
8000d396:	00 90       	ret 

8000d398 <__multadd>:
8000d398:	19 59 10 00 	ld.w %d9,[%a5]16
8000d39c:	40 4c       	mov.aa %a12,%a4
8000d39e:	9a f9       	add %d15,%d9,-1
8000d3a0:	8b 19 80 22 	ge %d2,%d9,1
8000d3a4:	40 5f       	mov.aa %a15,%a5
8000d3a6:	02 58       	mov %d8,%d5
8000d3a8:	d9 53 14 00 	lea %a3,[%a5]20
8000d3ac:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d3b0:	40 32       	mov.aa %a2,%a3
8000d3b2:	44 25       	ld.w %d5,[%a2+]
8000d3b4:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d3b8:	8f 05 1f f0 	sh %d15,%d5,-16
8000d3bc:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d3c0:	8f 03 1f 60 	sh %d6,%d3,-16
8000d3c4:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d3c8:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d3cc:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d3d0:	74 33       	st.w [%a3],%d3
8000d3d2:	40 23       	mov.aa %a3,%a2
8000d3d4:	9f 02 ee ff 	jned %d2,0,8000d3b0 <__multadd+0x18>
8000d3d8:	df 08 1f 00 	jeq %d8,0,8000d416 <__multadd+0x7e>
8000d3dc:	4c f2       	ld.w %d15,[%a15]8
8000d3de:	3f f9 16 00 	jlt %d9,%d15,8000d40a <__multadd+0x72>
8000d3e2:	48 14       	ld.w %d4,[%a15]4
8000d3e4:	40 c4       	mov.aa %a4,%a12
8000d3e6:	c2 14       	add %d4,1
8000d3e8:	6d ff a4 ff 	call 8000d330 <_Balloc>
8000d3ec:	48 44       	ld.w %d4,[%a15]16
8000d3ee:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d3f2:	c2 24       	add %d4,2
8000d3f4:	d9 24 0c 00 	lea %a4,[%a2]12
8000d3f8:	06 24       	sh %d4,2
8000d3fa:	40 2d       	mov.aa %a13,%a2
8000d3fc:	6d ff 8c ff 	call 8000d314 <memcpy>
8000d400:	40 f5       	mov.aa %a5,%a15
8000d402:	40 c4       	mov.aa %a4,%a12
8000d404:	6d ff c1 ff 	call 8000d386 <_Bfree>
8000d408:	40 df       	mov.aa %a15,%a13
8000d40a:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d40e:	c2 19       	add %d9,1
8000d410:	59 28 14 00 	st.w [%a2]20,%d8
8000d414:	68 49       	st.w [%a15]16,%d9
8000d416:	40 f2       	mov.aa %a2,%a15
8000d418:	00 90       	ret 

8000d41a <__hi0bits>:
8000d41a:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d41e:	82 02       	mov %d2,0
8000d420:	ee 05       	jnz %d15,8000d42a <__hi0bits+0x10>
8000d422:	8f 04 01 40 	sh %d4,%d4,16
8000d426:	3b 00 01 20 	mov %d2,16
8000d42a:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d42e:	ee 05       	jnz %d15,8000d438 <__hi0bits+0x1e>
8000d430:	1b 82 00 20 	addi %d2,%d2,8
8000d434:	8f 84 00 40 	sh %d4,%d4,8
8000d438:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d43c:	ee 03       	jnz %d15,8000d442 <__hi0bits+0x28>
8000d43e:	c2 42       	add %d2,4
8000d440:	06 44       	sh %d4,4
8000d442:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d446:	ee 03       	jnz %d15,8000d44c <__hi0bits+0x32>
8000d448:	c2 22       	add %d2,2
8000d44a:	06 24       	sh %d4,2
8000d44c:	0e 47       	jltz %d4,8000d45a <__hi0bits+0x40>
8000d44e:	7b 00 00 f4 	movh %d15,16384
8000d452:	26 f4       	and %d4,%d15
8000d454:	c2 12       	add %d2,1
8000d456:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d45a:	00 90       	ret 

8000d45c <__lo0bits>:
8000d45c:	54 43       	ld.w %d3,[%a4]
8000d45e:	8f 73 00 f1 	and %d15,%d3,7
8000d462:	6e 0e       	jz %d15,8000d47e <__lo0bits+0x22>
8000d464:	82 02       	mov %d2,0
8000d466:	6f 03 2d 80 	jnz.t %d3,0,8000d4c0 <__lo0bits+0x64>
8000d46a:	6f 13 06 00 	jz.t %d3,1,8000d476 <__lo0bits+0x1a>
8000d46e:	06 f3       	sh %d3,-1
8000d470:	74 43       	st.w [%a4],%d3
8000d472:	82 12       	mov %d2,1
8000d474:	00 90       	ret 
8000d476:	06 e3       	sh %d3,-2
8000d478:	74 43       	st.w [%a4],%d3
8000d47a:	82 22       	mov %d2,2
8000d47c:	00 90       	ret 
8000d47e:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000d482:	82 04       	mov %d4,0
8000d484:	ee 05       	jnz %d15,8000d48e <__lo0bits+0x32>
8000d486:	8f 03 1f 30 	sh %d3,%d3,-16
8000d48a:	3b 00 01 40 	mov %d4,16
8000d48e:	02 3f       	mov %d15,%d3
8000d490:	16 ff       	and %d15,255
8000d492:	ee 04       	jnz %d15,8000d49a <__lo0bits+0x3e>
8000d494:	1b 84 00 40 	addi %d4,%d4,8
8000d498:	06 83       	sh %d3,-8
8000d49a:	8f f3 00 f1 	and %d15,%d3,15
8000d49e:	ee 03       	jnz %d15,8000d4a4 <__lo0bits+0x48>
8000d4a0:	c2 44       	add %d4,4
8000d4a2:	06 c3       	sh %d3,-4
8000d4a4:	8f 33 00 f1 	and %d15,%d3,3
8000d4a8:	ee 03       	jnz %d15,8000d4ae <__lo0bits+0x52>
8000d4aa:	c2 24       	add %d4,2
8000d4ac:	06 e3       	sh %d3,-2
8000d4ae:	6f 03 07 80 	jnz.t %d3,0,8000d4bc <__lo0bits+0x60>
8000d4b2:	06 f3       	sh %d3,-1
8000d4b4:	3b 00 02 20 	mov %d2,32
8000d4b8:	76 34       	jz %d3,8000d4c0 <__lo0bits+0x64>
8000d4ba:	c2 14       	add %d4,1
8000d4bc:	74 43       	st.w [%a4],%d3
8000d4be:	02 42       	mov %d2,%d4
8000d4c0:	00 90       	ret 

8000d4c2 <__i2b>:
8000d4c2:	02 4f       	mov %d15,%d4
8000d4c4:	82 14       	mov %d4,1
8000d4c6:	6d ff 35 ff 	call 8000d330 <_Balloc>
8000d4ca:	6c 25       	st.w [%a2]20,%d15
8000d4cc:	82 1f       	mov %d15,1
8000d4ce:	6c 24       	st.w [%a2]16,%d15
8000d4d0:	00 90       	ret 

8000d4d2 <__multiply>:
8000d4d2:	19 52 10 00 	ld.w %d2,[%a5]16
8000d4d6:	4c 64       	ld.w %d15,[%a6]16
8000d4d8:	40 5f       	mov.aa %a15,%a5
8000d4da:	40 6c       	mov.aa %a12,%a6
8000d4dc:	7f f2 04 00 	jge %d2,%d15,8000d4e4 <__multiply+0x12>
8000d4e0:	40 6f       	mov.aa %a15,%a6
8000d4e2:	40 5c       	mov.aa %a12,%a5
8000d4e4:	48 4a       	ld.w %d10,[%a15]16
8000d4e6:	19 c9 10 00 	ld.w %d9,[%a12]16
8000d4ea:	4c f2       	ld.w %d15,[%a15]8
8000d4ec:	0b 9a 00 80 	add %d8,%d10,%d9
8000d4f0:	48 12       	ld.w %d2,[%a15]4
8000d4f2:	0b 8f 20 41 	lt %d4,%d15,%d8
8000d4f6:	42 24       	add %d4,%d2
8000d4f8:	6d ff 1c ff 	call 8000d330 <_Balloc>
8000d4fc:	d9 23 14 00 	lea %a3,[%a2]20
8000d500:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000d504:	40 34       	mov.aa %a4,%a3
8000d506:	82 0f       	mov %d15,0
8000d508:	80 43       	mov.d %d3,%a4
8000d50a:	80 d2       	mov.d %d2,%a13
8000d50c:	7f 23 04 80 	jge.u %d3,%d2,8000d514 <__multiply+0x42>
8000d510:	64 4f       	st.w [%a4+],%d15
8000d512:	3c fb       	j 8000d508 <__multiply+0x36>
8000d514:	d9 ff 14 00 	lea %a15,[%a15]20
8000d518:	d9 cc 14 00 	lea %a12,[%a12]20
8000d51c:	80 f3       	mov.d %d3,%a15
8000d51e:	80 cf       	mov.d %d15,%a12
8000d520:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000d524:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000d528:	80 c2       	mov.d %d2,%a12
8000d52a:	7f 02 54 80 	jge.u %d2,%d0,8000d5d2 <__multiply+0x100>
8000d52e:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000d532:	40 34       	mov.aa %a4,%a3
8000d534:	40 f6       	mov.aa %a6,%a15
8000d536:	82 03       	mov %d3,0
8000d538:	df 02 21 00 	jeq %d2,0,8000d57a <__multiply+0xa8>
8000d53c:	40 45       	mov.aa %a5,%a4
8000d53e:	44 67       	ld.w %d7,[%a6+]
8000d540:	44 56       	ld.w %d6,[%a5+]
8000d542:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000d546:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000d54a:	8f 07 1f 70 	sh %d7,%d7,-16
8000d54e:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000d552:	8f 06 1f 60 	sh %d6,%d6,-16
8000d556:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000d55a:	42 35       	add %d5,%d3
8000d55c:	8f 05 1f 30 	sh %d3,%d5,-16
8000d560:	1a 36       	add %d15,%d6,%d3
8000d562:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000d566:	8f 0f 1f 30 	sh %d3,%d15,-16
8000d56a:	80 6f       	mov.d %d15,%a6
8000d56c:	74 45       	st.w [%a4],%d5
8000d56e:	7f 4f 04 80 	jge.u %d15,%d4,8000d576 <__multiply+0xa4>
8000d572:	40 54       	mov.aa %a4,%a5
8000d574:	3c e4       	j 8000d53c <__multiply+0x6a>
8000d576:	59 43 04 00 	st.w [%a4]4,%d3
8000d57a:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000d57e:	df 02 27 00 	jeq %d2,0,8000d5cc <__multiply+0xfa>
8000d582:	54 33       	ld.w %d3,[%a3]
8000d584:	40 34       	mov.aa %a4,%a3
8000d586:	40 f5       	mov.aa %a5,%a15
8000d588:	82 07       	mov %d7,0
8000d58a:	40 56       	mov.aa %a6,%a5
8000d58c:	44 66       	ld.w %d6,[%a6+]
8000d58e:	40 47       	mov.aa %a7,%a4
8000d590:	44 75       	ld.w %d5,[%a7+]
8000d592:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000d596:	8f 05 1f 50 	sh %d5,%d5,-16
8000d59a:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000d59e:	42 7f       	add %d15,%d7
8000d5a0:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d5a4:	8f 0f 1f f0 	sh %d15,%d15,-16
8000d5a8:	74 43       	st.w [%a4],%d3
8000d5aa:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000d5ae:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000d5b2:	40 65       	mov.aa %a5,%a6
8000d5b4:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000d5b8:	42 f3       	add %d3,%d15
8000d5ba:	80 6f       	mov.d %d15,%a6
8000d5bc:	8f 03 1f 70 	sh %d7,%d3,-16
8000d5c0:	7f 4f 04 80 	jge.u %d15,%d4,8000d5c8 <__multiply+0xf6>
8000d5c4:	40 74       	mov.aa %a4,%a7
8000d5c6:	3c e2       	j 8000d58a <__multiply+0xb8>
8000d5c8:	59 43 04 00 	st.w [%a4]4,%d3
8000d5cc:	b0 4c       	add.a %a12,4
8000d5ce:	b0 43       	add.a %a3,4
8000d5d0:	3c ac       	j 8000d528 <__multiply+0x56>
8000d5d2:	8b 08 40 f3 	max %d15,%d8,0
8000d5d6:	9f 0f 05 80 	jned %d15,0,8000d5e0 <__multiply+0x10e>
8000d5da:	59 28 10 00 	st.w [%a2]16,%d8
8000d5de:	00 90       	ret 
8000d5e0:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000d5e4:	df 02 fb ff 	jne %d2,0,8000d5da <__multiply+0x108>
8000d5e8:	c2 f8       	add %d8,-1
8000d5ea:	3c f6       	j 8000d5d6 <__multiply+0x104>

8000d5ec <__pow5mult>:
8000d5ec:	8f 34 00 21 	and %d2,%d4,3
8000d5f0:	40 4c       	mov.aa %a12,%a4
8000d5f2:	40 5d       	mov.aa %a13,%a5
8000d5f4:	02 4f       	mov %d15,%d4
8000d5f6:	76 2d       	jz %d2,8000d610 <__pow5mult+0x24>
8000d5f8:	91 00 00 f8 	movh.a %a15,32768
8000d5fc:	d9 ff fc 80 	lea %a15,[%a15]3644 <80000e3c <p05.2553>>
8000d600:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000d604:	82 05       	mov %d5,0
8000d606:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000d60a:	6d ff c7 fe 	call 8000d398 <__multadd>
8000d60e:	40 2d       	mov.aa %a13,%a2
8000d610:	86 ef       	sha %d15,-2
8000d612:	6e 29       	jz %d15,8000d664 <__pow5mult+0x78>
8000d614:	99 cf 08 10 	ld.a %a15,[%a12]72
8000d618:	7c fb       	jnz.a %a15,8000d62e <__pow5mult+0x42>
8000d61a:	40 c4       	mov.aa %a4,%a12
8000d61c:	3b 10 27 40 	mov %d4,625
8000d620:	6d ff 51 ff 	call 8000d4c2 <__i2b>
8000d624:	82 02       	mov %d2,0
8000d626:	b5 c2 08 10 	st.a [%a12]72,%a2
8000d62a:	40 2f       	mov.aa %a15,%a2
8000d62c:	74 22       	st.w [%a2],%d2
8000d62e:	82 08       	mov %d8,0
8000d630:	2e 0c       	jz.t %d15,0,8000d648 <__pow5mult+0x5c>
8000d632:	40 d5       	mov.aa %a5,%a13
8000d634:	40 c4       	mov.aa %a4,%a12
8000d636:	40 f6       	mov.aa %a6,%a15
8000d638:	6d ff 4d ff 	call 8000d4d2 <__multiply>
8000d63c:	40 d5       	mov.aa %a5,%a13
8000d63e:	40 2e       	mov.aa %a14,%a2
8000d640:	40 c4       	mov.aa %a4,%a12
8000d642:	6d ff a2 fe 	call 8000d386 <_Bfree>
8000d646:	40 ed       	mov.aa %a13,%a14
8000d648:	86 ff       	sha %d15,-1
8000d64a:	6e 0d       	jz %d15,8000d664 <__pow5mult+0x78>
8000d64c:	c8 02       	ld.a %a2,[%a15]0
8000d64e:	bc 23       	jz.a %a2,8000d654 <__pow5mult+0x68>
8000d650:	40 2f       	mov.aa %a15,%a2
8000d652:	3c ef       	j 8000d630 <__pow5mult+0x44>
8000d654:	40 c4       	mov.aa %a4,%a12
8000d656:	40 f5       	mov.aa %a5,%a15
8000d658:	40 f6       	mov.aa %a6,%a15
8000d65a:	6d ff 3c ff 	call 8000d4d2 <__multiply>
8000d65e:	e8 02       	st.a [%a15]0,%a2
8000d660:	74 28       	st.w [%a2],%d8
8000d662:	3c f7       	j 8000d650 <__pow5mult+0x64>
8000d664:	40 d2       	mov.aa %a2,%a13
8000d666:	00 90       	ret 

8000d668 <__lshift>:
8000d668:	19 5b 10 00 	ld.w %d11,[%a5]16
8000d66c:	8f b4 3f 80 	sha %d8,%d4,-5
8000d670:	02 4a       	mov %d10,%d4
8000d672:	42 8b       	add %d11,%d8
8000d674:	19 54 04 00 	ld.w %d4,[%a5]4
8000d678:	4c 52       	ld.w %d15,[%a5]8
8000d67a:	40 4e       	mov.aa %a14,%a4
8000d67c:	40 5c       	mov.aa %a12,%a5
8000d67e:	1b 1b 00 90 	addi %d9,%d11,1
8000d682:	7f 9f 05 00 	jge %d15,%d9,8000d68c <__lshift+0x24>
8000d686:	c2 14       	add %d4,1
8000d688:	06 1f       	sh %d15,1
8000d68a:	3c fc       	j 8000d682 <__lshift+0x1a>
8000d68c:	40 e4       	mov.aa %a4,%a14
8000d68e:	6d ff 51 fe 	call 8000d330 <_Balloc>
8000d692:	8b 08 40 f3 	max %d15,%d8,0
8000d696:	40 2d       	mov.aa %a13,%a2
8000d698:	d9 2f 14 00 	lea %a15,[%a2]20
8000d69c:	d2 02       	mov %e2,0
8000d69e:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000d6a2:	9f 0f 03 80 	jned %d15,0,8000d6a8 <__lshift+0x40>
8000d6a6:	3c 04       	j 8000d6ae <__lshift+0x46>
8000d6a8:	74 23       	st.w [%a2],%d3
8000d6aa:	c2 12       	add %d2,1
8000d6ac:	3c f9       	j 8000d69e <__lshift+0x36>
8000d6ae:	8b 08 40 83 	max %d8,%d8,0
8000d6b2:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000d6b6:	d9 cf 14 00 	lea %a15,[%a12]20
8000d6ba:	19 c2 10 00 	ld.w %d2,[%a12]16
8000d6be:	80 f3       	mov.d %d3,%a15
8000d6c0:	8f fa 01 41 	and %d4,%d10,31
8000d6c4:	13 42 20 23 	madd %d2,%d3,%d2,4
8000d6c8:	8b 04 02 51 	rsub %d5,%d4,32
8000d6cc:	82 0f       	mov %d15,0
8000d6ce:	df 04 1a 00 	jeq %d4,0,8000d702 <__lshift+0x9a>
8000d6d2:	40 f5       	mov.aa %a5,%a15
8000d6d4:	44 53       	ld.w %d3,[%a5+]
8000d6d6:	d9 32 04 00 	lea %a2,[%a3]4
8000d6da:	0f 43 00 30 	sh %d3,%d3,%d4
8000d6de:	a6 3f       	or %d15,%d3
8000d6e0:	6c 30       	st.w [%a3]0,%d15
8000d6e2:	4c f0       	ld.w %d15,[%a15]0
8000d6e4:	8b 05 00 31 	rsub %d3,%d5,0
8000d6e8:	0f 3f 00 30 	sh %d3,%d15,%d3
8000d6ec:	02 3f       	mov %d15,%d3
8000d6ee:	80 53       	mov.d %d3,%a5
8000d6f0:	40 5f       	mov.aa %a15,%a5
8000d6f2:	7f 23 04 80 	jge.u %d3,%d2,8000d6fa <__lshift+0x92>
8000d6f6:	40 23       	mov.aa %a3,%a2
8000d6f8:	3c ed       	j 8000d6d2 <__lshift+0x6a>
8000d6fa:	c2 2b       	add %d11,2
8000d6fc:	6c 31       	st.w [%a3]4,%d15
8000d6fe:	2a b9       	cmov %d9,%d15,%d11
8000d700:	3c 08       	j 8000d710 <__lshift+0xa8>
8000d702:	4c f0       	ld.w %d15,[%a15]0
8000d704:	b0 4f       	add.a %a15,4
8000d706:	80 f3       	mov.d %d3,%a15
8000d708:	6c 30       	st.w [%a3]0,%d15
8000d70a:	b0 43       	add.a %a3,4
8000d70c:	3f 23 fb ff 	jlt.u %d3,%d2,8000d702 <__lshift+0x9a>
8000d710:	c2 f9       	add %d9,-1
8000d712:	59 d9 10 00 	st.w [%a13]16,%d9
8000d716:	40 e4       	mov.aa %a4,%a14
8000d718:	40 c5       	mov.aa %a5,%a12
8000d71a:	6d ff 36 fe 	call 8000d386 <_Bfree>
8000d71e:	40 d2       	mov.aa %a2,%a13
8000d720:	00 90       	ret 

8000d722 <__mcmp>:
8000d722:	4c 54       	ld.w %d15,[%a5]16
8000d724:	19 42 10 00 	ld.w %d2,[%a4]16
8000d728:	a2 f2       	sub %d2,%d15
8000d72a:	df 02 1c 80 	jne %d2,0,8000d762 <__mcmp+0x40>
8000d72e:	80 42       	mov.d %d2,%a4
8000d730:	06 2f       	sh %d15,2
8000d732:	60 f2       	mov.a %a2,%d15
8000d734:	1b 42 01 30 	addi %d3,%d2,20
8000d738:	d9 55 14 00 	lea %a5,[%a5]20
8000d73c:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000d740:	30 25       	add.a %a5,%a2
8000d742:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000d746:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000d74a:	5f f2 08 00 	jeq %d2,%d15,8000d75a <__mcmp+0x38>
8000d74e:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000d752:	82 f3       	mov %d3,-1
8000d754:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000d758:	00 90       	ret 
8000d75a:	80 ff       	mov.d %d15,%a15
8000d75c:	3f f3 f3 ff 	jlt.u %d3,%d15,8000d742 <__mcmp+0x20>
8000d760:	82 02       	mov %d2,0
8000d762:	00 90       	ret 

8000d764 <__mdiff>:
8000d764:	40 4d       	mov.aa %a13,%a4
8000d766:	40 5f       	mov.aa %a15,%a5
8000d768:	40 54       	mov.aa %a4,%a5
8000d76a:	40 65       	mov.aa %a5,%a6
8000d76c:	40 6c       	mov.aa %a12,%a6
8000d76e:	6d ff da ff 	call 8000d722 <__mcmp>
8000d772:	02 2f       	mov %d15,%d2
8000d774:	f6 2a       	jnz %d2,8000d788 <__mdiff+0x24>
8000d776:	40 d4       	mov.aa %a4,%a13
8000d778:	82 04       	mov %d4,0
8000d77a:	6d ff db fd 	call 8000d330 <_Balloc>
8000d77e:	82 12       	mov %d2,1
8000d780:	59 22 10 00 	st.w [%a2]16,%d2
8000d784:	6c 25       	st.w [%a2]20,%d15
8000d786:	00 90       	ret 
8000d788:	82 08       	mov %d8,0
8000d78a:	ce 25       	jgez %d2,8000d794 <__mdiff+0x30>
8000d78c:	40 f2       	mov.aa %a2,%a15
8000d78e:	82 18       	mov %d8,1
8000d790:	40 cf       	mov.aa %a15,%a12
8000d792:	40 2c       	mov.aa %a12,%a2
8000d794:	40 d4       	mov.aa %a4,%a13
8000d796:	48 14       	ld.w %d4,[%a15]4
8000d798:	6d ff cc fd 	call 8000d330 <_Balloc>
8000d79c:	48 42       	ld.w %d2,[%a15]16
8000d79e:	d9 ff 14 00 	lea %a15,[%a15]20
8000d7a2:	80 ff       	mov.d %d15,%a15
8000d7a4:	d9 c4 14 00 	lea %a4,[%a12]20
8000d7a8:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000d7ac:	19 c0 10 00 	ld.w %d0,[%a12]16
8000d7b0:	80 4f       	mov.d %d15,%a4
8000d7b2:	59 28 0c 00 	st.w [%a2]12,%d8
8000d7b6:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000d7ba:	d9 25 14 00 	lea %a5,[%a2]20
8000d7be:	82 03       	mov %d3,0
8000d7c0:	44 f6       	ld.w %d6,[%a15+]
8000d7c2:	44 45       	ld.w %d5,[%a4+]
8000d7c4:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000d7c8:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000d7cc:	42 34       	add %d4,%d3
8000d7ce:	a2 14       	sub %d4,%d1
8000d7d0:	8f 06 1f 60 	sh %d6,%d6,-16
8000d7d4:	8f 05 1f 50 	sh %d5,%d5,-16
8000d7d8:	8f 04 3f 30 	sha %d3,%d4,-16
8000d7dc:	0b 56 80 50 	sub %d5,%d6,%d5
8000d7e0:	1a 35       	add %d15,%d5,%d3
8000d7e2:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000d7e6:	8f 0f 3f 30 	sha %d3,%d15,-16
8000d7ea:	80 4f       	mov.d %d15,%a4
8000d7ec:	d9 53 04 00 	lea %a3,[%a5]4
8000d7f0:	74 54       	st.w [%a5],%d4
8000d7f2:	40 35       	mov.aa %a5,%a3
8000d7f4:	3f 0f e6 ff 	jlt.u %d15,%d0,8000d7c0 <__mdiff+0x5c>
8000d7f8:	80 ff       	mov.d %d15,%a15
8000d7fa:	7f 7f 12 80 	jge.u %d15,%d7,8000d81e <__mdiff+0xba>
8000d7fe:	44 f5       	ld.w %d5,[%a15+]
8000d800:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000d804:	8f 05 1f 50 	sh %d5,%d5,-16
8000d808:	42 34       	add %d4,%d3
8000d80a:	8f 04 3f f0 	sha %d15,%d4,-16
8000d80e:	42 5f       	add %d15,%d5
8000d810:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000d814:	8f 0f 3f 30 	sha %d3,%d15,-16
8000d818:	74 34       	st.w [%a3],%d4
8000d81a:	b0 43       	add.a %a3,4
8000d81c:	3c ee       	j 8000d7f8 <__mdiff+0x94>
8000d81e:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000d822:	ee 03       	jnz %d15,8000d828 <__mdiff+0xc4>
8000d824:	c2 f2       	add %d2,-1
8000d826:	3c fc       	j 8000d81e <__mdiff+0xba>
8000d828:	59 22 10 00 	st.w [%a2]16,%d2
8000d82c:	00 90       	ret 

8000d82e <__d2b>:
8000d82e:	20 08       	sub.a %sp,8
8000d830:	02 48       	mov %d8,%d4
8000d832:	82 14       	mov %d4,1
8000d834:	02 59       	mov %d9,%d5
8000d836:	40 5d       	mov.aa %a13,%a5
8000d838:	40 6c       	mov.aa %a12,%a6
8000d83a:	6d ff 7b fd 	call 8000d330 <_Balloc>
8000d83e:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000d842:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000d846:	40 2f       	mov.aa %a15,%a2
8000d848:	76 93       	jz %d9,8000d84e <__d2b+0x20>
8000d84a:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000d84e:	59 a2 04 00 	st.w [%sp]4,%d2
8000d852:	df 08 20 00 	jeq %d8,0,8000d892 <__d2b+0x64>
8000d856:	d9 a4 08 00 	lea %a4,[%sp]8
8000d85a:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000d85e:	40 a4       	mov.aa %a4,%sp
8000d860:	6d ff fe fd 	call 8000d45c <__lo0bits>
8000d864:	58 00       	ld.w %d15,[%sp]0
8000d866:	76 2f       	jz %d2,8000d884 <__d2b+0x56>
8000d868:	19 a4 04 00 	ld.w %d4,[%sp]4
8000d86c:	8b 02 02 31 	rsub %d3,%d2,32
8000d870:	0f 34 00 30 	sh %d3,%d4,%d3
8000d874:	a6 3f       	or %d15,%d3
8000d876:	68 5f       	st.w [%a15]20,%d15
8000d878:	8b 02 00 f1 	rsub %d15,%d2,0
8000d87c:	0f f4 00 f0 	sh %d15,%d4,%d15
8000d880:	78 01       	st.w [%sp]4,%d15
8000d882:	3c 02       	j 8000d886 <__d2b+0x58>
8000d884:	68 5f       	st.w [%a15]20,%d15
8000d886:	58 01       	ld.w %d15,[%sp]4
8000d888:	82 28       	mov %d8,2
8000d88a:	ea 18       	cmovn %d8,%d15,1
8000d88c:	68 6f       	st.w [%a15]24,%d15
8000d88e:	68 48       	st.w [%a15]16,%d8
8000d890:	3c 0c       	j 8000d8a8 <__d2b+0x7a>
8000d892:	d9 a4 04 00 	lea %a4,[%sp]4
8000d896:	6d ff e3 fd 	call 8000d45c <__lo0bits>
8000d89a:	58 01       	ld.w %d15,[%sp]4
8000d89c:	1b 02 02 20 	addi %d2,%d2,32
8000d8a0:	68 5f       	st.w [%a15]20,%d15
8000d8a2:	82 1f       	mov %d15,1
8000d8a4:	68 4f       	st.w [%a15]16,%d15
8000d8a6:	82 18       	mov %d8,1
8000d8a8:	76 98       	jz %d9,8000d8b8 <__d2b+0x8a>
8000d8aa:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000d8ae:	42 29       	add %d9,%d2
8000d8b0:	74 d9       	st.w [%a13],%d9
8000d8b2:	8b 52 03 21 	rsub %d2,%d2,53
8000d8b6:	3c 0d       	j 8000d8d0 <__d2b+0xa2>
8000d8b8:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000d8bc:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000d8c0:	74 d2       	st.w [%a13],%d2
8000d8c2:	19 24 10 00 	ld.w %d4,[%a2]16
8000d8c6:	6d ff aa fd 	call 8000d41a <__hi0bits>
8000d8ca:	06 58       	sh %d8,5
8000d8cc:	0b 28 80 20 	sub %d2,%d8,%d2
8000d8d0:	74 c2       	st.w [%a12],%d2
8000d8d2:	40 f2       	mov.aa %a2,%a15
8000d8d4:	00 90       	ret 

8000d8d6 <__fpclassifyd>:
8000d8d6:	0f 45 a0 f0 	or %d15,%d5,%d4
8000d8da:	82 22       	mov %d2,2
8000d8dc:	6e 1d       	jz %d15,8000d916 <__fpclassifyd+0x40>
8000d8de:	7b 00 00 38 	movh %d3,32768
8000d8e2:	3a 53       	eq %d15,%d3,%d5
8000d8e4:	8b 04 00 f4 	and.eq %d15,%d4,0
8000d8e8:	8b 04 00 62 	eq %d6,%d4,0
8000d8ec:	ee 15       	jnz %d15,8000d916 <__fpclassifyd+0x40>
8000d8ee:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000d8f2:	7b 00 fe f7 	movh %d15,32736
8000d8f6:	9b 05 ff 3f 	addih %d3,%d5,65520
8000d8fa:	82 42       	mov %d2,4
8000d8fc:	3f f3 0d 80 	jlt.u %d3,%d15,8000d916 <__fpclassifyd+0x40>
8000d900:	7b 00 01 f0 	movh %d15,16
8000d904:	82 32       	mov %d2,3
8000d906:	3f f5 08 80 	jlt.u %d5,%d15,8000d916 <__fpclassifyd+0x40>
8000d90a:	7b 00 ff 27 	movh %d2,32752
8000d90e:	0b 25 00 51 	eq %d5,%d5,%d2
8000d912:	0f 56 80 20 	and %d2,%d6,%d5
8000d916:	00 90       	ret 

8000d918 <__ssprint_r>:
8000d918:	4c 62       	ld.w %d15,[%a6]8
8000d91a:	20 08       	sub.a %sp,8
8000d91c:	40 4e       	mov.aa %a14,%a4
8000d91e:	40 5f       	mov.aa %a15,%a5
8000d920:	40 6c       	mov.aa %a12,%a6
8000d922:	54 6c       	ld.w %d12,[%a6]
8000d924:	6e 30       	jz %d15,8000d984 <__ssprint_r+0x6c>
8000d926:	a0 02       	mov.a %a2,0
8000d928:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d92c:	82 09       	mov %d9,0
8000d92e:	3b 00 48 e0 	mov %d14,1152
8000d932:	3b f0 b7 df 	mov %d13,-1153
8000d936:	3c 0a       	j 8000d94a <__ssprint_r+0x32>
8000d938:	60 c2       	mov.a %a2,%d12
8000d93a:	d4 22       	ld.a %a2,[%a2]
8000d93c:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d940:	60 c2       	mov.a %a2,%d12
8000d942:	1b 8c 00 c0 	addi %d12,%d12,8
8000d946:	19 29 04 00 	ld.w %d9,[%a2]4
8000d94a:	df 09 f7 7f 	jeq %d9,0,8000d938 <__ssprint_r+0x20>
8000d94e:	48 28       	ld.w %d8,[%a15]8
8000d950:	3f 89 5a 80 	jlt.u %d9,%d8,8000da04 <__ssprint_r+0xec>
8000d954:	88 62       	ld.h %d2,[%a15]12
8000d956:	0f e2 80 f0 	and %d15,%d2,%d14
8000d95a:	ee 19       	jnz %d15,8000d98c <__ssprint_r+0x74>
8000d95c:	3f 89 54 80 	jlt.u %d9,%d8,8000da04 <__ssprint_r+0xec>
8000d960:	c8 04       	ld.a %a4,[%a15]0
8000d962:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000d966:	02 84       	mov %d4,%d8
8000d968:	6d 00 81 00 	call 8000da6a <memmove>
8000d96c:	4c f2       	ld.w %d15,[%a15]8
8000d96e:	a2 8f       	sub %d15,%d8
8000d970:	68 2f       	st.w [%a15]8,%d15
8000d972:	4c f0       	ld.w %d15,[%a15]0
8000d974:	42 f8       	add %d8,%d15
8000d976:	4c c2       	ld.w %d15,[%a12]8
8000d978:	68 08       	st.w [%a15]0,%d8
8000d97a:	52 99       	sub %d9,%d15,%d9
8000d97c:	59 c9 08 00 	st.w [%a12]8,%d9
8000d980:	df 09 dc ff 	jne %d9,0,8000d938 <__ssprint_r+0x20>
8000d984:	82 0f       	mov %d15,0
8000d986:	6c c1       	st.w [%a12]4,%d15
8000d988:	82 02       	mov %d2,0
8000d98a:	00 90       	ret 
8000d98c:	c8 45       	ld.a %a5,[%a15]16
8000d98e:	48 5a       	ld.w %d10,[%a15]20
8000d990:	4c f0       	ld.w %d15,[%a15]0
8000d992:	80 53       	mov.d %d3,%a5
8000d994:	53 3a 20 a0 	mul %d10,%d10,3
8000d998:	a2 3f       	sub %d15,%d3
8000d99a:	82 23       	mov %d3,2
8000d99c:	4b 3a 01 a2 	div %e10,%d10,%d3
8000d9a0:	92 13       	add %d3,%d15,1
8000d9a2:	42 93       	add %d3,%d9
8000d9a4:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000d9a8:	40 e4       	mov.aa %a4,%a14
8000d9aa:	02 a4       	mov %d4,%d10
8000d9ac:	6f a2 12 00 	jz.t %d2,10,8000d9d0 <__ssprint_r+0xb8>
8000d9b0:	6d ff f1 e8 	call 8000ab92 <_malloc_r>
8000d9b4:	40 2d       	mov.aa %a13,%a2
8000d9b6:	bd 02 15 00 	jz.a %a2,8000d9e0 <__ssprint_r+0xc8>
8000d9ba:	c8 45       	ld.a %a5,[%a15]16
8000d9bc:	40 24       	mov.aa %a4,%a2
8000d9be:	02 f4       	mov %d4,%d15
8000d9c0:	6d ff aa fc 	call 8000d314 <memcpy>
8000d9c4:	88 62       	ld.h %d2,[%a15]12
8000d9c6:	26 d2       	and %d2,%d13
8000d9c8:	8f 02 48 21 	or %d2,%d2,128
8000d9cc:	a8 62       	st.h [%a15]12,%d2
8000d9ce:	3c 13       	j 8000d9f4 <__ssprint_r+0xdc>
8000d9d0:	6d 00 7d 00 	call 8000daca <_realloc_r>
8000d9d4:	40 2d       	mov.aa %a13,%a2
8000d9d6:	7c 2f       	jnz.a %a2,8000d9f4 <__ssprint_r+0xdc>
8000d9d8:	c8 45       	ld.a %a5,[%a15]16
8000d9da:	40 e4       	mov.aa %a4,%a14
8000d9dc:	6d ff b5 fb 	call 8000d146 <_free_r>
8000d9e0:	da 0c       	mov %d15,12
8000d9e2:	6c e0       	st.w [%a14]0,%d15
8000d9e4:	8c f6       	ld.h %d15,[%a15]12
8000d9e6:	82 f2       	mov %d2,-1
8000d9e8:	96 40       	or %d15,64
8000d9ea:	a8 6f       	st.h [%a15]12,%d15
8000d9ec:	82 0f       	mov %d15,0
8000d9ee:	6c c2       	st.w [%a12]8,%d15
8000d9f0:	6c c1       	st.w [%a12]4,%d15
8000d9f2:	00 90       	ret 
8000d9f4:	e8 4d       	st.a [%a15]16,%a13
8000d9f6:	10 dd       	addsc.a %a13,%a13,%d15,0
8000d9f8:	68 5a       	st.w [%a15]20,%d10
8000d9fa:	a2 fa       	sub %d10,%d15
8000d9fc:	e8 0d       	st.a [%a15]0,%a13
8000d9fe:	02 98       	mov %d8,%d9
8000da00:	68 2a       	st.w [%a15]8,%d10
8000da02:	3c ad       	j 8000d95c <__ssprint_r+0x44>
8000da04:	02 98       	mov %d8,%d9
8000da06:	3c ad       	j 8000d960 <__ssprint_r+0x48>

8000da08 <_calloc_r>:
8000da08:	e2 54       	mul %d4,%d5
8000da0a:	6d ff c4 e8 	call 8000ab92 <_malloc_r>
8000da0e:	40 2f       	mov.aa %a15,%a2
8000da10:	a0 02       	mov.a %a2,0
8000da12:	bd 0f 2b 00 	jz.a %a15,8000da68 <_calloc_r+0x60>
8000da16:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000da1a:	8f 35 c0 51 	andn %d5,%d5,3
8000da1e:	c2 c5       	add %d5,-4
8000da20:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000da24:	ee 1d       	jnz %d15,8000da5e <_calloc_r+0x56>
8000da26:	8b 45 61 f2 	lt.u %d15,%d5,20
8000da2a:	40 f2       	mov.aa %a2,%a15
8000da2c:	ee 14       	jnz %d15,8000da54 <_calloc_r+0x4c>
8000da2e:	82 0f       	mov %d15,0
8000da30:	68 0f       	st.w [%a15]0,%d15
8000da32:	68 1f       	st.w [%a15]4,%d15
8000da34:	8b c5 a1 22 	ge.u %d2,%d5,28
8000da38:	d9 f2 08 00 	lea %a2,[%a15]8
8000da3c:	76 2c       	jz %d2,8000da54 <_calloc_r+0x4c>
8000da3e:	68 2f       	st.w [%a15]8,%d15
8000da40:	68 3f       	st.w [%a15]12,%d15
8000da42:	8b 45 02 52 	eq %d5,%d5,36
8000da46:	d9 f2 10 00 	lea %a2,[%a15]16
8000da4a:	76 55       	jz %d5,8000da54 <_calloc_r+0x4c>
8000da4c:	68 4f       	st.w [%a15]16,%d15
8000da4e:	d9 f2 18 00 	lea %a2,[%a15]24
8000da52:	68 5f       	st.w [%a15]20,%d15
8000da54:	82 0f       	mov %d15,0
8000da56:	6c 20       	st.w [%a2]0,%d15
8000da58:	6c 21       	st.w [%a2]4,%d15
8000da5a:	6c 22       	st.w [%a2]8,%d15
8000da5c:	3c 05       	j 8000da66 <_calloc_r+0x5e>
8000da5e:	40 f4       	mov.aa %a4,%a15
8000da60:	82 04       	mov %d4,0
8000da62:	6d 00 2c 00 	call 8000daba <memset>
8000da66:	40 f2       	mov.aa %a2,%a15
8000da68:	00 90       	ret 

8000da6a <memmove>:
8000da6a:	80 46       	mov.d %d6,%a4
8000da6c:	80 52       	mov.d %d2,%a5
8000da6e:	7f 62 16 80 	jge.u %d2,%d6,8000da9a <memmove+0x30>
8000da72:	0b 42 00 50 	add %d5,%d2,%d4
8000da76:	7f 56 12 80 	jge.u %d6,%d5,8000da9a <memmove+0x30>
8000da7a:	60 4f       	mov.a %a15,%d4
8000da7c:	02 42       	mov %d2,%d4
8000da7e:	c2 f2       	add %d2,-1
8000da80:	fd f0 03 00 	loop %a15,8000da86 <memmove+0x1c>
8000da84:	3c 19       	j 8000dab6 <memmove+0x4c>
8000da86:	5a 42       	sub %d15,%d2,%d4
8000da88:	60 f2       	mov.a %a2,%d15
8000da8a:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000da8e:	1a 62       	add %d15,%d2,%d6
8000da90:	79 23 00 00 	ld.b %d3,[%a2]0
8000da94:	60 f2       	mov.a %a2,%d15
8000da96:	34 23       	st.b [%a2],%d3
8000da98:	3c f3       	j 8000da7e <memmove+0x14>
8000da9a:	60 4f       	mov.a %a15,%d4
8000da9c:	a0 02       	mov.a %a2,0
8000da9e:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000daa2:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000daa6:	fd f0 03 00 	loop %a15,8000daac <memmove+0x42>
8000daaa:	3c 06       	j 8000dab6 <memmove+0x4c>
8000daac:	79 33 00 00 	ld.b %d3,[%a3]0
8000dab0:	b0 12       	add.a %a2,1
8000dab2:	34 43       	st.b [%a4],%d3
8000dab4:	3c f5       	j 8000da9e <memmove+0x34>
8000dab6:	60 62       	mov.a %a2,%d6
8000dab8:	00 90       	ret 

8000daba <memset>:
8000daba:	40 42       	mov.aa %a2,%a4
8000dabc:	40 4f       	mov.aa %a15,%a4
8000dabe:	9f 05 03 80 	jned %d5,0,8000dac4 <memset+0xa>
8000dac2:	00 90       	ret 
8000dac4:	28 04       	st.b [%a15]0,%d4
8000dac6:	b0 1f       	add.a %a15,1
8000dac8:	3c fb       	j 8000dabe <memset+0x4>

8000daca <_realloc_r>:
8000daca:	40 4d       	mov.aa %a13,%a4
8000dacc:	40 5f       	mov.aa %a15,%a5
8000dace:	02 49       	mov %d9,%d4
8000dad0:	7c 53       	jnz.a %a5,8000dad6 <_realloc_r+0xc>
8000dad2:	1d ff 60 e8 	j 8000ab92 <_malloc_r>
8000dad6:	6d ff ab ea 	call 8000b02c <__malloc_lock>
8000dada:	1b b9 00 20 	addi %d2,%d9,11
8000dade:	8b 72 61 f2 	lt.u %d15,%d2,23
8000dae2:	8f 72 c0 21 	andn %d2,%d2,7
8000dae6:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000daea:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000daee:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000daf2:	8b 0f 20 25 	or.lt %d2,%d15,0
8000daf6:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000dafa:	8f 33 c0 81 	andn %d8,%d3,3
8000dafe:	76 25       	jz %d2,8000db08 <_realloc_r+0x3e>
8000db00:	da 0c       	mov %d15,12
8000db02:	6c d0       	st.w [%a13]0,%d15
8000db04:	1d 00 56 01 	j 8000ddb0 <_realloc_r+0x2e6>
8000db08:	7f f8 ac 01 	jge %d8,%d15,8000de60 <_realloc_r+0x396>
8000db0c:	7b 00 00 c7 	movh %d12,28672
8000db10:	60 c3       	mov.a %a3,%d12
8000db12:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000db16:	d9 34 20 30 	lea %a4,[%a3]224
8000db1a:	99 43 08 00 	ld.a %a3,[%a4]8
8000db1e:	80 4c       	mov.d %d12,%a4
8000db20:	19 2b 04 00 	ld.w %d11,[%a2]4
8000db24:	7d 32 0a 00 	jeq.a %a2,%a3,8000db38 <_realloc_r+0x6e>
8000db28:	8f 1b c0 21 	andn %d2,%d11,1
8000db2c:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000db30:	19 42 04 00 	ld.w %d2,[%a4]4
8000db34:	6f 02 2b 80 	jnz.t %d2,0,8000db8a <_realloc_r+0xc0>
8000db38:	8f 3b c0 b1 	andn %d11,%d11,3
8000db3c:	0b 8b 00 20 	add %d2,%d11,%d8
8000db40:	7d 32 1b 80 	jne.a %a2,%a3,8000db76 <_realloc_r+0xac>
8000db44:	1b 0f 01 40 	addi %d4,%d15,16
8000db48:	3f 42 23 00 	jlt %d2,%d4,8000db8e <_realloc_r+0xc4>
8000db4c:	10 ee       	addsc.a %a14,%a14,%d15,0
8000db4e:	60 c2       	mov.a %a2,%d12
8000db50:	a2 f2       	sub %d2,%d15
8000db52:	b5 2e 08 00 	st.a [%a2]8,%a14
8000db56:	8f 12 40 21 	or %d2,%d2,1
8000db5a:	59 e2 04 00 	st.w [%a14]4,%d2
8000db5e:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000db62:	40 d4       	mov.aa %a4,%a13
8000db64:	8f 12 00 21 	and %d2,%d2,1
8000db68:	a6 2f       	or %d15,%d2
8000db6a:	59 ff fc ff 	st.w [%a15]-4,%d15
8000db6e:	6d ff 60 ea 	call 8000b02e <__malloc_unlock>
8000db72:	40 f2       	mov.aa %a2,%a15
8000db74:	00 90       	ret 
8000db76:	3f f2 0c 00 	jlt %d2,%d15,8000db8e <_realloc_r+0xc4>
8000db7a:	cc 23       	ld.a %a15,[%a2]12
8000db7c:	99 22 08 00 	ld.a %a2,[%a2]8
8000db80:	02 28       	mov %d8,%d2
8000db82:	ec 23       	st.a [%a2]12,%a15
8000db84:	e8 22       	st.a [%a15]8,%a2
8000db86:	1d 00 6d 01 	j 8000de60 <_realloc_r+0x396>
8000db8a:	82 0b       	mov %d11,0
8000db8c:	a0 02       	mov.a %a2,0
8000db8e:	6f 03 08 81 	jnz.t %d3,0,8000dd9e <_realloc_r+0x2d4>
8000db92:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000db96:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000db9a:	19 ca 04 00 	ld.w %d10,[%a12]4
8000db9e:	8f 3a c0 a1 	andn %d10,%d10,3
8000dba2:	42 8a       	add %d10,%d8
8000dba4:	bd 02 b3 00 	jz.a %a2,8000dd0a <_realloc_r+0x240>
8000dba8:	42 ab       	add %d11,%d10
8000dbaa:	7d 32 5f 80 	jne.a %a2,%a3,8000dc68 <_realloc_r+0x19e>
8000dbae:	1b 0f 01 20 	addi %d2,%d15,16
8000dbb2:	3f 2b ac 00 	jlt %d11,%d2,8000dd0a <_realloc_r+0x240>
8000dbb6:	40 ce       	mov.aa %a14,%a12
8000dbb8:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000dbbc:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000dbc0:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dbc4:	8b 54 a2 22 	ge.u %d2,%d4,37
8000dbc8:	b5 32 0c 00 	st.a [%a3]12,%a2
8000dbcc:	b5 23 08 00 	st.a [%a2]8,%a3
8000dbd0:	df 02 36 80 	jne %d2,0,8000dc3c <_realloc_r+0x172>
8000dbd4:	8b 44 61 22 	lt.u %d2,%d4,20
8000dbd8:	40 e3       	mov.aa %a3,%a14
8000dbda:	df 02 28 80 	jne %d2,0,8000dc2a <_realloc_r+0x160>
8000dbde:	48 02       	ld.w %d2,[%a15]0
8000dbe0:	59 c2 08 00 	st.w [%a12]8,%d2
8000dbe4:	48 13       	ld.w %d3,[%a15]4
8000dbe6:	8b c4 a1 22 	ge.u %d2,%d4,28
8000dbea:	59 c3 0c 00 	st.w [%a12]12,%d3
8000dbee:	f6 26       	jnz %d2,8000dbfa <_realloc_r+0x130>
8000dbf0:	d9 c3 10 00 	lea %a3,[%a12]16
8000dbf4:	d9 ff 08 00 	lea %a15,[%a15]8
8000dbf8:	3c 19       	j 8000dc2a <_realloc_r+0x160>
8000dbfa:	48 22       	ld.w %d2,[%a15]8
8000dbfc:	8b 44 02 82 	eq %d8,%d4,36
8000dc00:	59 c2 10 00 	st.w [%a12]16,%d2
8000dc04:	48 33       	ld.w %d3,[%a15]12
8000dc06:	59 c3 14 00 	st.w [%a12]20,%d3
8000dc0a:	f6 86       	jnz %d8,8000dc16 <_realloc_r+0x14c>
8000dc0c:	d9 c3 18 00 	lea %a3,[%a12]24
8000dc10:	d9 ff 10 00 	lea %a15,[%a15]16
8000dc14:	3c 0b       	j 8000dc2a <_realloc_r+0x160>
8000dc16:	48 42       	ld.w %d2,[%a15]16
8000dc18:	d9 c3 20 00 	lea %a3,[%a12]32
8000dc1c:	59 c2 18 00 	st.w [%a12]24,%d2
8000dc20:	48 53       	ld.w %d3,[%a15]20
8000dc22:	d9 ff 18 00 	lea %a15,[%a15]24
8000dc26:	59 c3 1c 00 	st.w [%a12]28,%d3
8000dc2a:	48 02       	ld.w %d2,[%a15]0
8000dc2c:	74 32       	st.w [%a3],%d2
8000dc2e:	48 13       	ld.w %d3,[%a15]4
8000dc30:	59 33 04 00 	st.w [%a3]4,%d3
8000dc34:	48 22       	ld.w %d2,[%a15]8
8000dc36:	59 32 08 00 	st.w [%a3]8,%d2
8000dc3a:	3c 05       	j 8000dc44 <_realloc_r+0x17a>
8000dc3c:	40 e4       	mov.aa %a4,%a14
8000dc3e:	40 f5       	mov.aa %a5,%a15
8000dc40:	6d ff 15 ff 	call 8000da6a <memmove>
8000dc44:	10 cf       	addsc.a %a15,%a12,%d15,0
8000dc46:	60 c2       	mov.a %a2,%d12
8000dc48:	a2 fb       	sub %d11,%d15
8000dc4a:	ec 22       	st.a [%a2]8,%a15
8000dc4c:	8f 1b 40 b1 	or %d11,%d11,1
8000dc50:	68 1b       	st.w [%a15]4,%d11
8000dc52:	19 c2 04 00 	ld.w %d2,[%a12]4
8000dc56:	40 d4       	mov.aa %a4,%a13
8000dc58:	8f 12 00 21 	and %d2,%d2,1
8000dc5c:	a6 2f       	or %d15,%d2
8000dc5e:	6c c1       	st.w [%a12]4,%d15
8000dc60:	6d ff e7 e9 	call 8000b02e <__malloc_unlock>
8000dc64:	40 e2       	mov.aa %a2,%a14
8000dc66:	00 90       	ret 
8000dc68:	3f fb 51 00 	jlt %d11,%d15,8000dd0a <_realloc_r+0x240>
8000dc6c:	99 23 0c 00 	ld.a %a3,[%a2]12
8000dc70:	99 22 08 00 	ld.a %a2,[%a2]8
8000dc74:	40 c4       	mov.aa %a4,%a12
8000dc76:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dc7a:	b5 23 0c 00 	st.a [%a2]12,%a3
8000dc7e:	b5 32 08 00 	st.a [%a3]8,%a2
8000dc82:	09 43 88 05 	ld.a %a3,[+%a4]8
8000dc86:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000dc8a:	8b 54 a2 22 	ge.u %d2,%d4,37
8000dc8e:	b5 32 0c 00 	st.a [%a3]12,%a2
8000dc92:	b5 23 08 00 	st.a [%a2]8,%a3
8000dc96:	df 02 35 80 	jne %d2,0,8000dd00 <_realloc_r+0x236>
8000dc9a:	8b 44 61 22 	lt.u %d2,%d4,20
8000dc9e:	df 02 28 80 	jne %d2,0,8000dcee <_realloc_r+0x224>
8000dca2:	48 02       	ld.w %d2,[%a15]0
8000dca4:	59 c2 08 00 	st.w [%a12]8,%d2
8000dca8:	48 13       	ld.w %d3,[%a15]4
8000dcaa:	8b c4 a1 22 	ge.u %d2,%d4,28
8000dcae:	59 c3 0c 00 	st.w [%a12]12,%d3
8000dcb2:	f6 26       	jnz %d2,8000dcbe <_realloc_r+0x1f4>
8000dcb4:	d9 c4 10 00 	lea %a4,[%a12]16
8000dcb8:	d9 ff 08 00 	lea %a15,[%a15]8
8000dcbc:	3c 19       	j 8000dcee <_realloc_r+0x224>
8000dcbe:	48 22       	ld.w %d2,[%a15]8
8000dcc0:	8b 44 02 82 	eq %d8,%d4,36
8000dcc4:	59 c2 10 00 	st.w [%a12]16,%d2
8000dcc8:	48 33       	ld.w %d3,[%a15]12
8000dcca:	59 c3 14 00 	st.w [%a12]20,%d3
8000dcce:	f6 86       	jnz %d8,8000dcda <_realloc_r+0x210>
8000dcd0:	d9 c4 18 00 	lea %a4,[%a12]24
8000dcd4:	d9 ff 10 00 	lea %a15,[%a15]16
8000dcd8:	3c 0b       	j 8000dcee <_realloc_r+0x224>
8000dcda:	48 42       	ld.w %d2,[%a15]16
8000dcdc:	d9 c4 20 00 	lea %a4,[%a12]32
8000dce0:	59 c2 18 00 	st.w [%a12]24,%d2
8000dce4:	48 53       	ld.w %d3,[%a15]20
8000dce6:	d9 ff 18 00 	lea %a15,[%a15]24
8000dcea:	59 c3 1c 00 	st.w [%a12]28,%d3
8000dcee:	48 02       	ld.w %d2,[%a15]0
8000dcf0:	74 42       	st.w [%a4],%d2
8000dcf2:	48 13       	ld.w %d3,[%a15]4
8000dcf4:	59 43 04 00 	st.w [%a4]4,%d3
8000dcf8:	48 22       	ld.w %d2,[%a15]8
8000dcfa:	59 42 08 00 	st.w [%a4]8,%d2
8000dcfe:	3c 04       	j 8000dd06 <_realloc_r+0x23c>
8000dd00:	40 f5       	mov.aa %a5,%a15
8000dd02:	6d ff b4 fe 	call 8000da6a <memmove>
8000dd06:	02 b8       	mov %d8,%d11
8000dd08:	3c 45       	j 8000dd92 <_realloc_r+0x2c8>
8000dd0a:	3f fa 4a 00 	jlt %d10,%d15,8000dd9e <_realloc_r+0x2d4>
8000dd0e:	40 c4       	mov.aa %a4,%a12
8000dd10:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000dd14:	09 43 88 05 	ld.a %a3,[+%a4]8
8000dd18:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dd1c:	8b 54 a2 22 	ge.u %d2,%d4,37
8000dd20:	b5 32 0c 00 	st.a [%a3]12,%a2
8000dd24:	b5 23 08 00 	st.a [%a2]8,%a3
8000dd28:	df 02 37 80 	jne %d2,0,8000dd96 <_realloc_r+0x2cc>
8000dd2c:	8b 44 61 22 	lt.u %d2,%d4,20
8000dd30:	df 02 28 80 	jne %d2,0,8000dd80 <_realloc_r+0x2b6>
8000dd34:	48 03       	ld.w %d3,[%a15]0
8000dd36:	59 c3 08 00 	st.w [%a12]8,%d3
8000dd3a:	48 12       	ld.w %d2,[%a15]4
8000dd3c:	59 c2 0c 00 	st.w [%a12]12,%d2
8000dd40:	8b c4 a1 22 	ge.u %d2,%d4,28
8000dd44:	f6 26       	jnz %d2,8000dd50 <_realloc_r+0x286>
8000dd46:	d9 c4 10 00 	lea %a4,[%a12]16
8000dd4a:	d9 ff 08 00 	lea %a15,[%a15]8
8000dd4e:	3c 19       	j 8000dd80 <_realloc_r+0x2b6>
8000dd50:	48 23       	ld.w %d3,[%a15]8
8000dd52:	8b 44 02 82 	eq %d8,%d4,36
8000dd56:	59 c3 10 00 	st.w [%a12]16,%d3
8000dd5a:	48 32       	ld.w %d2,[%a15]12
8000dd5c:	59 c2 14 00 	st.w [%a12]20,%d2
8000dd60:	f6 86       	jnz %d8,8000dd6c <_realloc_r+0x2a2>
8000dd62:	d9 c4 18 00 	lea %a4,[%a12]24
8000dd66:	d9 ff 10 00 	lea %a15,[%a15]16
8000dd6a:	3c 0b       	j 8000dd80 <_realloc_r+0x2b6>
8000dd6c:	48 43       	ld.w %d3,[%a15]16
8000dd6e:	d9 c4 20 00 	lea %a4,[%a12]32
8000dd72:	59 c3 18 00 	st.w [%a12]24,%d3
8000dd76:	48 52       	ld.w %d2,[%a15]20
8000dd78:	d9 ff 18 00 	lea %a15,[%a15]24
8000dd7c:	59 c2 1c 00 	st.w [%a12]28,%d2
8000dd80:	48 03       	ld.w %d3,[%a15]0
8000dd82:	74 43       	st.w [%a4],%d3
8000dd84:	48 12       	ld.w %d2,[%a15]4
8000dd86:	59 42 04 00 	st.w [%a4]4,%d2
8000dd8a:	48 23       	ld.w %d3,[%a15]8
8000dd8c:	59 43 08 00 	st.w [%a4]8,%d3
8000dd90:	02 a8       	mov %d8,%d10
8000dd92:	40 ce       	mov.aa %a14,%a12
8000dd94:	3c 66       	j 8000de60 <_realloc_r+0x396>
8000dd96:	40 f5       	mov.aa %a5,%a15
8000dd98:	6d ff 69 fe 	call 8000da6a <memmove>
8000dd9c:	3c fa       	j 8000dd90 <_realloc_r+0x2c6>
8000dd9e:	40 d4       	mov.aa %a4,%a13
8000dda0:	02 94       	mov %d4,%d9
8000dda2:	6d ff f8 e6 	call 8000ab92 <_malloc_r>
8000dda6:	40 2c       	mov.aa %a12,%a2
8000dda8:	7c 26       	jnz.a %a2,8000ddb4 <_realloc_r+0x2ea>
8000ddaa:	40 d4       	mov.aa %a4,%a13
8000ddac:	6d ff 41 e9 	call 8000b02e <__malloc_unlock>
8000ddb0:	a0 02       	mov.a %a2,0
8000ddb2:	00 90       	ret 
8000ddb4:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000ddb8:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000ddbc:	8f 12 c0 21 	andn %d2,%d2,1
8000ddc0:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000ddc4:	80 32       	mov.d %d2,%a3
8000ddc6:	80 23       	mov.d %d3,%a2
8000ddc8:	5f 32 08 80 	jne %d2,%d3,8000ddd8 <_realloc_r+0x30e>
8000ddcc:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000ddd0:	8f 32 c0 21 	andn %d2,%d2,3
8000ddd4:	42 28       	add %d8,%d2
8000ddd6:	3c 45       	j 8000de60 <_realloc_r+0x396>
8000ddd8:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dddc:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000dde0:	ee 33       	jnz %d15,8000de46 <_realloc_r+0x37c>
8000dde2:	8b 44 61 f2 	lt.u %d15,%d4,20
8000dde6:	40 c3       	mov.aa %a3,%a12
8000dde8:	40 f2       	mov.aa %a2,%a15
8000ddea:	ee 23       	jnz %d15,8000de30 <_realloc_r+0x366>
8000ddec:	4c f0       	ld.w %d15,[%a15]0
8000ddee:	d9 c3 08 00 	lea %a3,[%a12]8
8000ddf2:	6c c0       	st.w [%a12]0,%d15
8000ddf4:	48 12       	ld.w %d2,[%a15]4
8000ddf6:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000ddfa:	59 c2 04 00 	st.w [%a12]4,%d2
8000ddfe:	d9 f2 08 00 	lea %a2,[%a15]8
8000de02:	6e 17       	jz %d15,8000de30 <_realloc_r+0x366>
8000de04:	48 23       	ld.w %d3,[%a15]8
8000de06:	8b 44 02 82 	eq %d8,%d4,36
8000de0a:	59 c3 08 00 	st.w [%a12]8,%d3
8000de0e:	4c f3       	ld.w %d15,[%a15]12
8000de10:	d9 c3 10 00 	lea %a3,[%a12]16
8000de14:	6c c3       	st.w [%a12]12,%d15
8000de16:	d9 f2 10 00 	lea %a2,[%a15]16
8000de1a:	76 8b       	jz %d8,8000de30 <_realloc_r+0x366>
8000de1c:	48 42       	ld.w %d2,[%a15]16
8000de1e:	d9 c3 18 00 	lea %a3,[%a12]24
8000de22:	59 c2 10 00 	st.w [%a12]16,%d2
8000de26:	48 53       	ld.w %d3,[%a15]20
8000de28:	d9 f2 18 00 	lea %a2,[%a15]24
8000de2c:	59 c3 14 00 	st.w [%a12]20,%d3
8000de30:	4c 20       	ld.w %d15,[%a2]0
8000de32:	6c 30       	st.w [%a3]0,%d15
8000de34:	19 22 04 00 	ld.w %d2,[%a2]4
8000de38:	59 32 04 00 	st.w [%a3]4,%d2
8000de3c:	19 23 08 00 	ld.w %d3,[%a2]8
8000de40:	59 33 08 00 	st.w [%a3]8,%d3
8000de44:	3c 05       	j 8000de4e <_realloc_r+0x384>
8000de46:	40 c4       	mov.aa %a4,%a12
8000de48:	40 f5       	mov.aa %a5,%a15
8000de4a:	6d ff 10 fe 	call 8000da6a <memmove>
8000de4e:	40 d4       	mov.aa %a4,%a13
8000de50:	40 f5       	mov.aa %a5,%a15
8000de52:	6d ff 7a f9 	call 8000d146 <_free_r>
8000de56:	40 d4       	mov.aa %a4,%a13
8000de58:	6d ff eb e8 	call 8000b02e <__malloc_unlock>
8000de5c:	40 c2       	mov.aa %a2,%a12
8000de5e:	00 90       	ret 
8000de60:	0b f8 80 20 	sub %d2,%d8,%d15
8000de64:	8b 02 61 42 	lt.u %d4,%d2,16
8000de68:	19 e3 04 00 	ld.w %d3,[%a14]4
8000de6c:	df 04 16 80 	jne %d4,0,8000de98 <_realloc_r+0x3ce>
8000de70:	8f 13 00 31 	and %d3,%d3,1
8000de74:	10 e5       	addsc.a %a5,%a14,%d15,0
8000de76:	a6 3f       	or %d15,%d3
8000de78:	6c e1       	st.w [%a14]4,%d15
8000de7a:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000de7e:	8f 12 40 f1 	or %d15,%d2,1
8000de82:	b7 10 21 20 	imask %e2,1,0,1
8000de86:	6c 51       	st.w [%a5]4,%d15
8000de88:	49 f2 44 08 	ldmst [%a15]4,%e2
8000de8c:	40 d4       	mov.aa %a4,%a13
8000de8e:	d9 55 08 00 	lea %a5,[%a5]8
8000de92:	6d ff 5a f9 	call 8000d146 <_free_r>
8000de96:	3c 0c       	j 8000deae <_realloc_r+0x3e4>
8000de98:	8f 13 00 31 	and %d3,%d3,1
8000de9c:	a6 83       	or %d3,%d8
8000de9e:	59 e3 04 00 	st.w [%a14]4,%d3
8000dea2:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000dea6:	b7 10 21 20 	imask %e2,1,0,1
8000deaa:	49 f2 44 08 	ldmst [%a15]4,%e2
8000deae:	40 d4       	mov.aa %a4,%a13
8000deb0:	6d ff bf e8 	call 8000b02e <__malloc_unlock>
8000deb4:	d9 e2 08 00 	lea %a2,[%a14]8
8000deb8:	00 90       	ret 

8000deba <_exit>:
8000deba:	76 43       	jz %d4,8000dec0 <_exit+0x6>
8000debc:	60 4e       	mov.a %a14,%d4
8000debe:	3c 04       	j 8000dec6 <_exit+0xc>
8000dec0:	bb d0 00 f9 	mov.u %d15,36877
8000dec4:	60 fe       	mov.a %a14,%d15
8000dec6:	00 a0       	debug 
8000dec8:	3c 00       	j 8000dec8 <_exit+0xe>

8000deca <sbrk>:
8000deca:	91 00 00 f7 	movh.a %a15,28672
8000dece:	19 ff 90 40 	ld.w %d15,[%a15]2320 <70000910 <heap_top.2289>>
8000ded2:	7b 00 00 27 	movh %d2,28672
8000ded6:	42 f4       	add %d4,%d15
8000ded8:	1b 82 c3 20 	addi %d2,%d2,3128
8000dedc:	7f 42 09 80 	jge.u %d2,%d4,8000deee <sbrk+0x24>
8000dee0:	6d 00 13 00 	call 8000df06 <__errno>
8000dee4:	da 0c       	mov %d15,12
8000dee6:	6c 20       	st.w [%a2]0,%d15
8000dee8:	a0 02       	mov.a %a2,0
8000deea:	b0 f2       	add.a %a2,-1
8000deec:	00 90       	ret 
8000deee:	7b 00 00 27 	movh %d2,28672
8000def2:	1b 82 c3 20 	addi %d2,%d2,3128
8000def6:	7f 24 04 80 	jge.u %d4,%d2,8000defe <sbrk+0x34>
8000defa:	6d 00 0b 00 	call 8000df10 <abort>
8000defe:	59 f4 90 40 	st.w [%a15]2320,%d4
8000df02:	60 f2       	mov.a %a2,%d15
8000df04:	00 90       	ret 

8000df06 <__errno>:
8000df06:	91 00 00 27 	movh.a %a2,28672
8000df0a:	d9 22 f0 00 	lea %a2,[%a2]3120 <70000c30 <_my_errno>>
8000df0e:	00 90       	ret 

8000df10 <abort>:
8000df10:	00 a0       	debug 
8000df12:	7b e0 ea fd 	movh %d15,57006
8000df16:	1b ff ee fb 	addi %d15,%d15,-16657
8000df1a:	60 fe       	mov.a %a14,%d15
8000df1c:	1d ff cf ff 	j 8000deba <_exit>
8000df20:	3c 00       	j 8000df20 <abort+0x10>

8000df22 <__eqdf2>:
8000df22:	20 38       	sub.a %sp,56
8000df24:	40 a4       	mov.aa %a4,%sp
8000df26:	d9 a5 10 00 	lea %a5,[%sp]16
8000df2a:	89 a4 40 09 	st.d [%sp],%e4
8000df2e:	89 a6 48 09 	st.d [%sp]8,%e6
8000df32:	6d ff 6a e5 	call 8000aa06 <__unpack_d>
8000df36:	d9 a4 08 00 	lea %a4,[%sp]8
8000df3a:	d9 a5 24 00 	lea %a5,[%sp]36
8000df3e:	6d ff 64 e5 	call 8000aa06 <__unpack_d>
8000df42:	39 af 10 00 	ld.bu %d15,[%sp]16
8000df46:	82 12       	mov %d2,1
8000df48:	bf 2f 0c 80 	jlt.u %d15,2,8000df60 <__eqdf2+0x3e>
8000df4c:	39 af 24 00 	ld.bu %d15,[%sp]36
8000df50:	bf 2f 08 80 	jlt.u %d15,2,8000df60 <__eqdf2+0x3e>
8000df54:	d9 a4 10 00 	lea %a4,[%sp]16
8000df58:	d9 a5 24 00 	lea %a5,[%sp]36
8000df5c:	6d 00 0d 01 	call 8000e176 <__fpcmp_parts_d>
8000df60:	00 90       	ret 

8000df62 <__nedf2>:
8000df62:	20 38       	sub.a %sp,56
8000df64:	40 a4       	mov.aa %a4,%sp
8000df66:	d9 a5 10 00 	lea %a5,[%sp]16
8000df6a:	89 a4 40 09 	st.d [%sp],%e4
8000df6e:	89 a6 48 09 	st.d [%sp]8,%e6
8000df72:	6d ff 4a e5 	call 8000aa06 <__unpack_d>
8000df76:	d9 a4 08 00 	lea %a4,[%sp]8
8000df7a:	d9 a5 24 00 	lea %a5,[%sp]36
8000df7e:	6d ff 44 e5 	call 8000aa06 <__unpack_d>
8000df82:	39 af 10 00 	ld.bu %d15,[%sp]16
8000df86:	82 12       	mov %d2,1
8000df88:	bf 2f 0c 80 	jlt.u %d15,2,8000dfa0 <__nedf2+0x3e>
8000df8c:	39 af 24 00 	ld.bu %d15,[%sp]36
8000df90:	bf 2f 08 80 	jlt.u %d15,2,8000dfa0 <__nedf2+0x3e>
8000df94:	d9 a4 10 00 	lea %a4,[%sp]16
8000df98:	d9 a5 24 00 	lea %a5,[%sp]36
8000df9c:	6d 00 ed 00 	call 8000e176 <__fpcmp_parts_d>
8000dfa0:	00 90       	ret 

8000dfa2 <__gtdf2>:
8000dfa2:	20 38       	sub.a %sp,56
8000dfa4:	40 a4       	mov.aa %a4,%sp
8000dfa6:	d9 a5 10 00 	lea %a5,[%sp]16
8000dfaa:	89 a4 40 09 	st.d [%sp],%e4
8000dfae:	89 a6 48 09 	st.d [%sp]8,%e6
8000dfb2:	6d ff 2a e5 	call 8000aa06 <__unpack_d>
8000dfb6:	d9 a4 08 00 	lea %a4,[%sp]8
8000dfba:	d9 a5 24 00 	lea %a5,[%sp]36
8000dfbe:	6d ff 24 e5 	call 8000aa06 <__unpack_d>
8000dfc2:	39 af 10 00 	ld.bu %d15,[%sp]16
8000dfc6:	82 f2       	mov %d2,-1
8000dfc8:	bf 2f 0c 80 	jlt.u %d15,2,8000dfe0 <__gtdf2+0x3e>
8000dfcc:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dfd0:	bf 2f 08 80 	jlt.u %d15,2,8000dfe0 <__gtdf2+0x3e>
8000dfd4:	d9 a4 10 00 	lea %a4,[%sp]16
8000dfd8:	d9 a5 24 00 	lea %a5,[%sp]36
8000dfdc:	6d 00 cd 00 	call 8000e176 <__fpcmp_parts_d>
8000dfe0:	00 90       	ret 

8000dfe2 <__gedf2>:
8000dfe2:	20 38       	sub.a %sp,56
8000dfe4:	40 a4       	mov.aa %a4,%sp
8000dfe6:	d9 a5 10 00 	lea %a5,[%sp]16
8000dfea:	89 a4 40 09 	st.d [%sp],%e4
8000dfee:	89 a6 48 09 	st.d [%sp]8,%e6
8000dff2:	6d ff 0a e5 	call 8000aa06 <__unpack_d>
8000dff6:	d9 a4 08 00 	lea %a4,[%sp]8
8000dffa:	d9 a5 24 00 	lea %a5,[%sp]36
8000dffe:	6d ff 04 e5 	call 8000aa06 <__unpack_d>
8000e002:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e006:	82 f2       	mov %d2,-1
8000e008:	bf 2f 0c 80 	jlt.u %d15,2,8000e020 <__gedf2+0x3e>
8000e00c:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e010:	bf 2f 08 80 	jlt.u %d15,2,8000e020 <__gedf2+0x3e>
8000e014:	d9 a4 10 00 	lea %a4,[%sp]16
8000e018:	d9 a5 24 00 	lea %a5,[%sp]36
8000e01c:	6d 00 ad 00 	call 8000e176 <__fpcmp_parts_d>
8000e020:	00 90       	ret 

8000e022 <__ltdf2>:
8000e022:	20 38       	sub.a %sp,56
8000e024:	40 a4       	mov.aa %a4,%sp
8000e026:	d9 a5 10 00 	lea %a5,[%sp]16
8000e02a:	89 a4 40 09 	st.d [%sp],%e4
8000e02e:	89 a6 48 09 	st.d [%sp]8,%e6
8000e032:	6d ff ea e4 	call 8000aa06 <__unpack_d>
8000e036:	d9 a4 08 00 	lea %a4,[%sp]8
8000e03a:	d9 a5 24 00 	lea %a5,[%sp]36
8000e03e:	6d ff e4 e4 	call 8000aa06 <__unpack_d>
8000e042:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e046:	82 12       	mov %d2,1
8000e048:	bf 2f 0c 80 	jlt.u %d15,2,8000e060 <__ltdf2+0x3e>
8000e04c:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e050:	bf 2f 08 80 	jlt.u %d15,2,8000e060 <__ltdf2+0x3e>
8000e054:	d9 a4 10 00 	lea %a4,[%sp]16
8000e058:	d9 a5 24 00 	lea %a5,[%sp]36
8000e05c:	6d 00 8d 00 	call 8000e176 <__fpcmp_parts_d>
8000e060:	00 90       	ret 

8000e062 <__fixdfsi>:
8000e062:	20 20       	sub.a %sp,32
8000e064:	d9 a4 20 00 	lea %a4,[%sp]32
8000e068:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000e06c:	d9 a5 0c 00 	lea %a5,[%sp]12
8000e070:	6d ff cb e4 	call 8000aa06 <__unpack_d>
8000e074:	0c ac       	ld.bu %d15,[%sp]12
8000e076:	82 02       	mov %d2,0
8000e078:	bf 3f 1b 80 	jlt.u %d15,3,8000e0ae <__fixdfsi+0x4c>
8000e07c:	5e 48       	jne %d15,4,8000e08c <__fixdfsi+0x2a>
8000e07e:	7b 00 00 28 	movh %d2,32768
8000e082:	58 04       	ld.w %d15,[%sp]16
8000e084:	1b f2 ff 3f 	addi %d3,%d2,-1
8000e088:	6a 32       	cmovn %d2,%d15,%d3
8000e08a:	00 90       	ret 
8000e08c:	19 a6 14 00 	ld.w %d6,[%sp]20
8000e090:	82 02       	mov %d2,0
8000e092:	0e 6e       	jltz %d6,8000e0ae <__fixdfsi+0x4c>
8000e094:	8b f6 81 f2 	ge %d15,%d6,31
8000e098:	ee f3       	jnz %d15,8000e07e <__fixdfsi+0x1c>
8000e09a:	09 a4 58 09 	ld.d %e4,[%sp]24
8000e09e:	8b c6 03 61 	rsub %d6,%d6,60
8000e0a2:	6d ff b0 e0 	call 8000a202 <__lshrdi3>
8000e0a6:	58 04       	ld.w %d15,[%sp]16
8000e0a8:	8b 02 00 41 	rsub %d4,%d2,0
8000e0ac:	2a 42       	cmov %d2,%d15,%d4
8000e0ae:	00 90       	ret 

8000e0b0 <__udivdi3>:
8000e0b0:	0f 67 a0 20 	or %d2,%d7,%d6
8000e0b4:	0b 45 10 a8 	mov %e10,%d5,%d4
8000e0b8:	02 6f       	mov %d15,%d6
8000e0ba:	02 7c       	mov %d12,%d7
8000e0bc:	d2 f8       	mov %e8,-1
8000e0be:	df 02 46 00 	jeq %d2,0,8000e14a <__udivdi3+0x9a>
8000e0c2:	8f 07 40 21 	or %d2,%d7,0
8000e0c6:	f6 2d       	jnz %d2,8000e0e0 <__udivdi3+0x30>
8000e0c8:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000e0cc:	d2 04       	mov %e4,0
8000e0ce:	02 a4       	mov %d4,%d10
8000e0d0:	42 95       	add %d5,%d9
8000e0d2:	6d 00 a5 00 	call 8000e21c <__udiv6432>
8000e0d6:	82 04       	mov %d4,0
8000e0d8:	02 85       	mov %d5,%d8
8000e0da:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000e0de:	3c 36       	j 8000e14a <__udivdi3+0x9a>
8000e0e0:	0b 7b 00 21 	eq %d2,%d11,%d7
8000e0e4:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000e0e8:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000e0ec:	d2 08       	mov %e8,0
8000e0ee:	df 02 2e 80 	jne %d2,0,8000e14a <__udivdi3+0x9a>
8000e0f2:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000e0f6:	0f 07 b0 d1 	clz %d13,%d7
8000e0fa:	60 5f       	mov.a %a15,%d5
8000e0fc:	0b 67 10 48 	mov %e4,%d7,%d6
8000e100:	02 d6       	mov %d6,%d13
8000e102:	6d ff a4 e3 	call 8000a84a <__ashldi3>
8000e106:	8f fb 1f e0 	sh %d14,%d11,-1
8000e10a:	80 f4       	mov.d %d4,%a15
8000e10c:	02 36       	mov %d6,%d3
8000e10e:	02 e5       	mov %d5,%d14
8000e110:	6d 00 86 00 	call 8000e21c <__udiv6432>
8000e114:	8b fd 01 d1 	rsub %d13,%d13,31
8000e118:	8b 0d 00 31 	rsub %d3,%d13,0
8000e11c:	0f 32 00 30 	sh %d3,%d2,%d3
8000e120:	02 32       	mov %d2,%d3
8000e122:	8b f2 9f 80 	addx %d8,%d2,-1
8000e126:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000e12a:	82 03       	mov %d3,0
8000e12c:	8b f3 bf 90 	addc %d9,%d3,-1
8000e130:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000e134:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000e138:	0b cb 00 41 	eq %d4,%d11,%d12
8000e13c:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000e140:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000e144:	f6 43       	jnz %d4,8000e14a <__udivdi3+0x9a>
8000e146:	0b 23 10 88 	mov %e8,%d3,%d2
8000e14a:	0b 89 10 28 	mov %e2,%d9,%d8
8000e14e:	00 90       	ret 

8000e150 <__umoddi3>:
8000e150:	0f 67 a0 90 	or %d9,%d7,%d6
8000e154:	02 6f       	mov %d15,%d6
8000e156:	d2 00       	mov %e0,0
8000e158:	76 9c       	jz %d9,8000e170 <__umoddi3+0x20>
8000e15a:	02 7a       	mov %d10,%d7
8000e15c:	0b 45 10 88 	mov %e8,%d5,%d4
8000e160:	6d ff a8 ff 	call 8000e0b0 <__udivdi3>
8000e164:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000e168:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000e16c:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000e170:	0b 01 10 28 	mov %e2,%d1,%d0
8000e174:	00 90       	ret 

8000e176 <__fpcmp_parts_d>:
8000e176:	14 43       	ld.bu %d3,[%a4]
8000e178:	82 12       	mov %d2,1
8000e17a:	bf 23 50 80 	jlt.u %d3,2,8000e21a <__fpcmp_parts_d+0xa4>
8000e17e:	0c 50       	ld.bu %d15,[%a5]0
8000e180:	bf 2f 4d 80 	jlt.u %d15,2,8000e21a <__fpcmp_parts_d+0xa4>
8000e184:	8b 43 00 42 	eq %d4,%d3,4
8000e188:	8b 4f 00 22 	eq %d2,%d15,4
8000e18c:	0f 24 80 50 	and %d5,%d4,%d2
8000e190:	76 56       	jz %d5,8000e19c <__fpcmp_parts_d+0x26>
8000e192:	19 52 04 00 	ld.w %d2,[%a5]4
8000e196:	4c 41       	ld.w %d15,[%a4]4
8000e198:	a2 f2       	sub %d2,%d15
8000e19a:	00 90       	ret 
8000e19c:	76 47       	jz %d4,8000e1aa <__fpcmp_parts_d+0x34>
8000e19e:	19 42 04 00 	ld.w %d2,[%a4]4
8000e1a2:	82 1f       	mov %d15,1
8000e1a4:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e1a8:	00 90       	ret 
8000e1aa:	76 27       	jz %d2,8000e1b8 <__fpcmp_parts_d+0x42>
8000e1ac:	19 52 04 00 	ld.w %d2,[%a5]4
8000e1b0:	82 ff       	mov %d15,-1
8000e1b2:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e1b6:	00 90       	ret 
8000e1b8:	df 23 06 80 	jne %d3,2,8000e1c4 <__fpcmp_parts_d+0x4e>
8000e1bc:	82 02       	mov %d2,0
8000e1be:	df 2f f7 ff 	jne %d15,2,8000e1ac <__fpcmp_parts_d+0x36>
8000e1c2:	00 90       	ret 
8000e1c4:	df 2f ed 7f 	jeq %d15,2,8000e19e <__fpcmp_parts_d+0x28>
8000e1c8:	19 45 04 00 	ld.w %d5,[%a4]4
8000e1cc:	4c 51       	ld.w %d15,[%a5]4
8000e1ce:	5f f5 19 80 	jne %d5,%d15,8000e200 <__fpcmp_parts_d+0x8a>
8000e1d2:	19 42 08 00 	ld.w %d2,[%a4]8
8000e1d6:	4c 52       	ld.w %d15,[%a5]8
8000e1d8:	3f 2f 14 00 	jlt %d15,%d2,8000e200 <__fpcmp_parts_d+0x8a>
8000e1dc:	3f f2 1c 00 	jlt %d2,%d15,8000e214 <__fpcmp_parts_d+0x9e>
8000e1e0:	19 43 10 00 	ld.w %d3,[%a4]16
8000e1e4:	19 54 10 00 	ld.w %d4,[%a5]16
8000e1e8:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e1ec:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e1f0:	0b 43 00 21 	eq %d2,%d3,%d4
8000e1f4:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e1f8:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e1fc:	3a 43       	eq %d15,%d3,%d4
8000e1fe:	f6 25       	jnz %d2,8000e208 <__fpcmp_parts_d+0x92>
8000e200:	82 12       	mov %d2,1
8000e202:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e206:	00 90       	ret 
8000e208:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e20c:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e210:	82 02       	mov %d2,0
8000e212:	ee 04       	jnz %d15,8000e21a <__fpcmp_parts_d+0xa4>
8000e214:	82 f2       	mov %d2,-1
8000e216:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e21a:	00 90       	ret 

8000e21c <__udiv6432>:
8000e21c:	02 53       	mov %d3,%d5
8000e21e:	82 f2       	mov %d2,-1
8000e220:	7f 65 4b 80 	jge.u %d5,%d6,8000e2b6 <__udiv6432+0x9a>
8000e224:	0f 06 b0 21 	clz %d2,%d6
8000e228:	0f 26 00 60 	sh %d6,%d6,%d2
8000e22c:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e230:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e234:	8f 06 1f 70 	sh %d7,%d6,-16
8000e238:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e23c:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e240:	0f 24 00 20 	sh %d2,%d4,%d2
8000e244:	02 05       	mov %d5,%d0
8000e246:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e24a:	e2 80       	mul %d0,%d8
8000e24c:	8f 02 1f b0 	sh %d11,%d2,-16
8000e250:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e254:	82 0c       	mov %d12,0
8000e256:	7b 10 00 90 	movh %d9,1
8000e25a:	7f 95 09 80 	jge.u %d5,%d9,8000e26c <__udiv6432+0x50>
8000e25e:	8f 01 01 f0 	sh %d15,%d1,16
8000e262:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e266:	42 bf       	add %d15,%d11
8000e268:	7f af 07 80 	jge.u %d15,%d10,8000e276 <__udiv6432+0x5a>
8000e26c:	42 71       	add %d1,%d7
8000e26e:	c2 f5       	add %d5,-1
8000e270:	a2 8c       	sub %d12,%d8
8000e272:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e25a <__udiv6432+0x3e>
8000e276:	8f 03 01 30 	sh %d3,%d3,16
8000e27a:	42 3b       	add %d11,%d3
8000e27c:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e280:	82 0a       	mov %d10,0
8000e282:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e286:	7b 10 00 10 	movh %d1,1
8000e28a:	02 03       	mov %d3,%d0
8000e28c:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e290:	e2 80       	mul %d0,%d8
8000e292:	7f 13 09 80 	jge.u %d3,%d1,8000e2a4 <__udiv6432+0x88>
8000e296:	8f 06 01 f0 	sh %d15,%d6,16
8000e29a:	0b 0a 00 90 	add %d9,%d10,%d0
8000e29e:	42 2f       	add %d15,%d2
8000e2a0:	7f 9f 07 80 	jge.u %d15,%d9,8000e2ae <__udiv6432+0x92>
8000e2a4:	42 76       	add %d6,%d7
8000e2a6:	c2 f3       	add %d3,-1
8000e2a8:	a2 8a       	sub %d10,%d8
8000e2aa:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e292 <__udiv6432+0x76>
8000e2ae:	8f 05 01 50 	sh %d5,%d5,16
8000e2b2:	0b 53 00 20 	add %d2,%d3,%d5
8000e2b6:	00 90       	ret 
