
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x0000e5a8 memsz 0x0000e5a8 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e5c8 align 2**14
         filesz 0x00000938 memsz 0x00000938 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00014938 vaddr 0x70000938 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000360 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001138  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000360  70000938  8000ef00  00014938  2**3
                  ALLOC
  3 .data         00000938  70000000  8000e5c8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001200  80001200  00005200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001300  80001300  00005300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001308  80001308  00005308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text         0000a5c8  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000ef00  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000ef00  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000ef00  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000ef00  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000ef00  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000ef00  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000ef00  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000ef00  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000ef00  00015c00  2**6
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014938  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000d48  00000000  00000000  00014990  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000c31d7  00000000  00000000  000156d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000c0c3  00000000  00000000  000d88af  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000e157  00000000  00000000  000e4972  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  000022e8  00000000  00000000  000f2acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00002022  00000000  00000000  000f4db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00013e6b  00000000  00000000  000f6dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001448  00000000  00000000  0010ac41  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004c67a  00000000  00000000  0010c089  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000938 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001200 l    d  .traptab	00000000 .traptab
80001300 l    d  .ctors	00000000 .ctors
80001308 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 Button_Driver.c
00000000 l    df *ABS*	00000000 asw.c
70000000 l     O .data	00000004 c.15761
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
800000e0 l     O .rodata	0000001c osEE_tdb_ptr_array
800000d4 l     O .rodata	00000004 osEE_res_db_ptr_array
800000fc l     O .rodata	000000e0 osEE_tdb_array
70000030 l     O .data	00000030 osEE_sn_array
800000d8 l     O .rodata	00000008 osEE_res_db_array
70000bf4 l     O .bss	0000000c osEE_res_cb_array
800001dc l     O .rodata	00000008 osEE_sdb_array
70000c00 l     O .bss	00000004 osEE_scb_array
70000060 l     O .data	0000008c osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
800001e4 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
700000f0 l     O .data	00000004 IfxScuCcu_xtalFrequency
80006040 l     F .text	00000034 IfxScuCcu_wait
80000ab8 l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000d54 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 infotainment_System.c
70000c08 l     O .bss	00000020 buf
70000c28 l     O .bss	00000004 infoState
70000c2c l     O .bss	0000001c infotainmentArr
80000e34 l     O .rodata	0000001c stateMaxArr
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
7000050c l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000eb0 l     O .rodata	00000010 blanks.4035
80000ea0 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000c80c l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 locale.c
80000edc l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000f14 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000930 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
80009644 l     F .text	0000000e osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 Lcd_Driver.c
8000404e l     F .text	00000060 lcd_write4bits
800040ae l     F .text	00000020 lcd_command
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 photoresistor_Driver.c
00000000 l    df *ABS*	00000000 ultrasonic_Driver.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
80009174 l     F .text	00000054 osEE_tc_stm_us_ticks
70000c48 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
80009654 l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
80009f18 l     F .text	00000022 osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
8000a40e l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a5e6 l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
800003ec g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
800088f8 g     F .text	0000001c printStateBlue
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000010 g     O .data	00000020 osEE_ccb_var
70000c98 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
80005834 g     F .text	00000062 IfxAsclin_Asc_write
80008c3a g     F .text	00000094 measureEchoTick
800050d2 g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
8000715c g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
80007390 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000f20 g     O .rodata	00000028 __mprec_tinytens
80000afc g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
8000437e g     F .text	000000e8 mdelay
8000ab8a g     F .text	0000001a .hidden __ashldi3
800070f2 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
800099c4 g     F .text	0000005a TerminateTask
8000514e g     F .text	00000006 IfxAsclin_Asc_resetSendCount
800001ec g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000bf0 g     O .bss	00000004 osEE_kcb_var
8000039c g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
8000813a g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004bfe g     F .text	00000014 IfxVadc_setScan
8000e22c g     F .text	00000040 .hidden __eqdf2
80005764 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80007086 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
80004870 g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
800083f0 g     F .text	00000176 Ifx_Fifo_read
80004c58 g     F .text	0000001c IfxAsclin_disableModule
8000073c g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
80009fee g     F .text	00000022 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
80008d08 g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
800082b6 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
800075ca g     F .text	00000108 IfxVadc_Adc_getChannelConfig
80004820 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
8000a46e g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
800068fc g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000a336 g     F .text	00000028 osEE_change_context_from_running
800050c4 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
8000075c g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
8000701c g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
80005210 g     F .text	00000014 IfxAsclin_Asc_clearTx
800058b2 g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000b36e g     F .text	00000002 __malloc_unlock
800050ae g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80004244 g     F .text	0000005a TimerISR
8000859c g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007f02 g     F .text	000000e8 IfxVadc_Adc_initModule
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
8000473a g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
8000491e g     F .text	00000028 IfxVadc_getSrcAddress
8000496a g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004d82 g     F .text	00000024 IfxAsclin_getOvsFrequency
80009dde g     F .text	00000096 SetEvent
800076d2 g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
80006fde g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
80009f3a g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000d04 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
8000050c g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000dd74 g     F .text	00000050 memmove
80008814 g     F .text	00000002 syncInfoState
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d63a g     F .text	00000056 _Balloc
80000ce4 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
800007fc g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
800005dc g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80006216 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006388 g     F .text	000003be IfxScuCcu_init
8000e2ac g     F .text	00000040 .hidden __gtdf2
8000e210  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800096a4 g     F .text	00000042 SuspendAllInterrupts
80005154 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
800007dc g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
8000a4dc g     F .text	00000066 osEE_hal_terminate_ctx
8000028c g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000a080 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009cec g     F .text	00000078 GetTaskState
800080f8 g     F .text	00000020 Ifx_CircularBuffer_get32
8000a132 g     F .text	00000022 osEE_task_event_set_mask
8000031c g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
8000074c g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
800073c6 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005b18 g     F .text	00000092 IfxPort_setGroupModeOutput
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_4
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005f66 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000c88 g     O .bss	00000004 errno
8000aafe g     F .text	0000001e .hidden __make_dp
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001260 g       .traptab	00000000 osEE_tc_trap_context
80007548 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
800006ec g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
8000088c g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
8000054c g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
8000ac1e g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
800044b6 g     F .text	0000007e initVADCChannels
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
800002bc g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000be4 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000c5c g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
8000704e g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
80009ea6 g     F .text	00000058 ClearEvent
800062da g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
80009f44 g     F .text	000000aa osEE_scheduler_task_wrapper_run
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
8000062c g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
8000095c g     O .rodata	00000080 IfxPort_cfg_indexMap
800053b6 g     F .text	000003ae IfxAsclin_Asc_initModule
8000a2d2 g     F .text	00000026 osEE_scheduler_task_preemption_point
80004214 g     F .text	00000002 FuncTaskUltrasonic
8000d61e g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
800041ec g     F .text	00000024 FuncTask1
8000b668 g     F .text	000011a4 _svfprintf_r
8000aab6 g     F .text	00000048 .hidden __floatsidf
8000770a g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006eb0 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000a0c8 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000e32c g     F .text	00000040 .hidden __ltdf2
80004914 g     F .text	0000000a IfxVadc_getScanStatus
80001310 g       .dtors	00000000 __DTOR_END__
8000690e g     F .text	00000076 IfxScuCcu_setCpuFrequency
80006ff0 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000a37e g     F .text	00000026 osEE_idle_task_terminate
80000c48 g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
80008816 g     F .text	00000002 updatePacket
8000087c g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
800006ac g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000dbe0 g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
800070be g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
80007258 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
8000a20c g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000aeb8 g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006d20 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
8000070c g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
80009552 g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001240 g       .traptab	00000000 osEE_tc_trap_instruction
80000f70 g     O .rodata	000000c8 __mprec_tens
70000008 g     O .data	00000004 g_vadcChannelIDs
800051f8 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
80004216 g     F .text	0000002e ButtonISR
80009a92 g     F .text	000000b2 GetResource
800003ac g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
8000049c g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000b3ec g     F .text	00000016 vsnprintf
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
800008dc g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
70000c80 g     O .bss	00000004 __malloc_top_pad
80004556 g     F .text	00000026 readADCValue
80008888 g     F .text	0000001c printStateOn
80006984 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005ca4 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a492 g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000bbc g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80008266 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d5fc g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004d48 g     F .text	00000022 IfxAsclin_getIndex
8000d7cc g     F .text	00000010 __i2b
80009a1e g     F .text	00000074 Schedule
80004da6 g     F .text	00000016 IfxAsclin_getShiftFrequency
80007948 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
800002ac g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006be6 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
800006cc g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
800072b4 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000b370 g     F .text	0000001e _sbrk_r
8000045c g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000c7c g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
8000046c g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
800088dc g     F .text	0000001c printStateGreen
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000958 g     O .bss	0000000c g_vadcGroup
80006e64 g     F .text	00000026 IfxScuEru_enableAutoClear
800006bc g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000ad46 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005d4a g     F .text	0000003c IfxPort_setPinPadDriver
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
8000041c g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000c7c g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800012a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
8000a5b4 g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80004cbe g     F .text	00000016 IfxAsclin_getAddress
8000a782 g     F .text	00000038 .hidden __adddf3
800041a8 g     F .text	0000000e lcd_goto
80009850 g     F .text	0000001a GetActiveApplicationMode
80006260 g     F .text	0000007a IfxScuCcu_getSriFrequency
80008c1e g     F .text	0000001c sendTrigger
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800096e6 g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006b66 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e45a g     F .text	00000026 .hidden __umoddi3
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
800008ac g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000e64 g     O .rodata	00000004 _global_impure_ptr
80006d70 g     F .text	00000036 IfxScuEru_connectTrigger
70000938 g     O .bss	00000020 g_vadcChannel
8000631c g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000ddd4 g     F .text	000003f0 _realloc_r
8000068c g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004df8 g     F .text	00000012 IfxAsclin_read16
80008818 g     F .text	0000001c printStateLv1
80005a4c g     F .text	0000003c IfxPort_enableEmergencyStop
800002dc g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000e3ba g     F .text	000000a0 .hidden __udivdi3
8000085c g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
800002ec g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
8000a010 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
800004ac g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
800040ce g     F .text	0000000a lcd_clear
80000f48 g     O .rodata	00000028 __mprec_bigtens
8000e21a g     F .text	00000012 abort
8000ab58 g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000da2c g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
80005224 g     F .text	0000001c IfxAsclin_Asc_read
8000986a g     F .text	00000084 ActivateTask
80000bf8 g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006dcc g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
800082ba g     F .text	0000003a Ifx_Fifo_init
800088c0 g     F .text	0000001c printStateRed
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000c90  w    O .bss	00000004 _my_errno
800004ec g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005978 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
8000090c g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009c94 g     F .text	00000058 GetTaskID
8000675a g     F .text	000001a2 IfxScuCcu_initErayPll
8000038c g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
8000032c g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000a64 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
80006f22 g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000ca0 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
8000970c g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000718e g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
8000aba4 g     F .text	0000007a .hidden __unpack_f
8000949a g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
80004534 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
8000a2f8 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
80009570 g     F .text	0000008e osEE_tc_stm_set_sr1
8000072c g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
8000461e g     F .text	0000000c asclin0TxISR
8000060c g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
800071e8 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
80007544 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
8000078c g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
8000063c g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d724 g     F .text	00000042 __hi0bits
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
8000082c g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
800003fc g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
8000040c g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e36c g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
8000a176 g     F .text	00000068 osEE_scheduler_task_activated
80006074 g     F .text	00000078 IfxScuCcu_getBbbFrequency
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
8000033c g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
800004bc g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
80006352 g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b0c g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
80007126 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80008cce g     F .text	00000024 getUltrasonic
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
8000065c g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004eee g     F .text	00000182 IfxAsclin_setBitTiming
80000cc4 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
800004cc g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
800002fc g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
80008834 g     F .text	0000001c printStateLv2
8000080c g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000c88 g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80007588 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a542 g     F .text	00000026 .hidden __lshrdi3
8000071c g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80008a76 g     F .text	00000008 initInfotainment
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
8000084c g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
800005ac g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007b4a g     F .text	0000038a IfxVadc_Adc_initGroup
8000d8f6 g     F .text	0000007c __pow5mult
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_10
70000968 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
80006e18 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
8000056c g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
8000a248 g     F .text	0000008a osEE_scheduler_task_terminated
8000034c g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000adf2 g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
8000815a g     F .text	0000005e Ifx_CircularBuffer_read8
8000089c g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
80007376 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
800093f6 g     F .text	000000a4 osEE_tc_get_fsource
80004e0a g     F .text	00000012 IfxAsclin_read32
80000c20 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
80007464 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
800008cc g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
8000079c g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
800094ce g     F .text	00000084 osEE_tc_stm_set_sr0
80000b1c g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
8000066c g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
8000a4be g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d606 g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000b4bc g     F .text	000001ac _free_r
800057ec g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
80009efe g     F .text	00000018 GetISRID
80008850 g     F .text	0000001c printStateLv3
8000a430 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
80001280 g       .traptab	00000000 osEE_tc_trap_bus
80005d88 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80008b1c g     F .text	00000006 getPhotoresiter
800008ec g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
700000f8 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008a7e g     F .text	0000009c updateInfoState
800082f4 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
80007346 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800012e0 g       .traptab	00000000 osEE_tc_trap_nmi
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_5
8000d972 g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
8000064c g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
800075ae g     F .text	0000001c IfxVadc_Adc_disableModule
00002000 g       *ABS*	00000000 __CSA_SIZE
8000dc22 g     F .text	000000f0 __ssprint_r
80004838 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
800046bc g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000d7dc g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006f30 g     F .text	00000012 IfxScuEru_getEventFlagStatus
800041b6 g     F .text	00000036 lcd_print
8000052c g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
8000037c g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004b84 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006df2 g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000c50 g     O .bss	00000028 __malloc_current_mallinfo
8000db38 g     F .text	000000a8 __d2b
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
800088a4 g     F .text	0000001c printStateOff
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000b58 g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80008118 g     F .text	00000022 Ifx_CircularBuffer_get16
8000044c g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005f22 g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001300 g       .ctors	00000000 __EH_FRAME_END__
80006da6 g     F .text	00000026 IfxScuEru_disableAutoClear
80006a12 g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
8000617c g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
800005ec g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000e480 g     F .text	000000a6 .hidden __fpcmp_parts_d
80004ca2 g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
8000a0d6 g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
8000a3a4 g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
80006ed6 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
800007cc g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
800059a8 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
80009e74 g     F .text	00000032 GetEvent
8000539a g     F .text	0000001c IfxAsclin_Asc_disableModule
8000a568 g     F .text	0000004c .hidden __floatundisf
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004e1c g     F .text	00000012 IfxAsclin_read8
8000a1de g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000a99e g     F .text	00000118 .hidden __divdf3
80000d24 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000cd4 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
80005896 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80007fea g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000100 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009c30 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000b3a2 g     F .text	0000004a _vsnprintf_r
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
8000a7fa g     F .text	000001a4 .hidden __muldf3
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
800006dc g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
80008bb0 g     F .text	0000006e delay_us
80000d14 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b36c g     F .text	00000002 __malloc_lock
8000e1d4 g     F .text	0000003c sbrk
80005e80 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004684 g     F .text	00000038 IfxVadc_disableAccess
80000000 g       .startup	00000000 BootModeHeader0
800012c0 g       .traptab	00000000 osEE_tc_trap_system
80000c94 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004de4 g     F .text	00000014 IfxAsclin_getSrcPointerTx
80004880 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000dd12 g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
8000619e g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
800007bc g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004776 g     F .text	000000aa IfxVadc_enableGroupSync
80006f8a g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
80005240 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
8000036c g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000ddc4 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
800040d8 g     F .text	000000d0 lcd_init
8000462a g     F .text	00000058 main
80007326 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80008b46 g     F .text	0000006a delay_ms
80006efc g     F .text	00000026 IfxScuEru_enableTriggerPulse
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000c78 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
80004c74 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e526 g     F .text	0000009c .hidden __udiv6432
00000400 g       *ABS*	00000000 __ISTACK_SIZE
8000615c g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
80008066 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000bd0 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
70000974 g     O .bss	0000027c g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000c70 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000a0fc g     F .text	00000018 osEE_task_activated
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
800000b8 g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
80007362 g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000ab1c g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000c928 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000aed2 g     F .text	0000049a _malloc_r
800004dc g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005d08 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
800007ac g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005374 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
8000059c g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
800050a8 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
8000058c g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80005084 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
80004310 g     F .text	0000006e printfSerial
80000e50 g     O .rodata	00000014 .hidden __thenan_df
8000b402 g     F .text	000000ba _malloc_trim_r
80001308 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
800003bc g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004a88 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
800046f4 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80004210 g     F .text	00000004 FuncTaskLCD
80009b44 g     F .text	000000ec ReleaseResource
80008024 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004d6a g     F .text	00000018 IfxAsclin_getPdFrequency
80004856 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001308 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
80004b32 g     F .text	00000052 IfxVadc_resetKernel
800008bc g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80000cb8 g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000e26c g     F .text	00000040 .hidden __nedf2
80004e9c g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80005fd8 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006ab2 g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80006f66 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000aec g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
800009dc g     O .rodata	00000080 IfxPort_cfg_esrMasks
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
800006fc g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
80005200 g     F .text	00000010 IfxAsclin_Asc_clearRx
8000092c g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000d44 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005a22 g     F .text	0000002a IfxPort_setESR
800004fc g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
8000043c g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
8000091c g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000b94 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
8000042c g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
70000508 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
800059ca g     F .text	00000028 IfxPort_resetESR
800050dc g     F .text	00000072 IfxAsclin_Asc_isrError
80004946 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80004dd0 g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
8000048c g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80008b22 g     F .text	00000024 initUltrasonic
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004dbc g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
800003dc g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
8000081c g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
80009672 g     F .text	00000016 DisableAllInterrupts
80008208 g     F .text	0000005e Ifx_CircularBuffer_write8
800052de g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005a88 g     F .text	00000090 IfxPort_setGroupModeInput
80008316 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
800098ee g     F .text	000000d6 ChainTask
80006faa g     F .text	00000034 IfxScuEru_selectExternalInput
80006e8a g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
800008fc g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
8000077c g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
800005fc g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
80006746 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
800002cc g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
800049b8 g     F .text	00000066 IfxVadc_initializeFAdcI
8000053c g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000b30 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
8000029c g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001200 g       .traptab	00000000 osEE_tc_trap_mmu
800081b8 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
8000515c g     F .text	0000009c IfxAsclin_Asc_flushTx
8000961c g     F .text	00000028 osEE_tc_delay
8000061c g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
80001038 g     O .rodata	00000000 __clear_table
80005ebe g     F .text	00000064 IfxScuCcu_getPllErayFrequency
800007ec g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000a114 g     F .text	0000001e osEE_task_end
800005cc g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
8000083c g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001300 g       .ctors	00000000 __EH_FRAME_BEGIN__
8000051c g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
8000601c g     F .text	00000024 IfxScuCcu_getSourceFrequency
8000047c g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000d34 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c0c g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a35e g     F .text	00000020 osEE_change_context_from_task_end
80009d64 g     F .text	0000007a WaitEvent
800059f2 g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
80008cf2 g     F .text	00000016 calculateDistanceCm
8000030c g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007ed4 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
800095fe g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
700000fc g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
80004852 g     F .text	00000004 IfxVadc_getAdcModuleFrequency
8000868c g     F .text	00000186 Ifx_Fifo_write
8000da6e g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
8000a154 g     F .text	00000022 osEE_activate_isr2
80007b34 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004cd4 g     F .text	00000074 IfxAsclin_getFaFrequency
80006a62 g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
800091c8 g     F .text	0000022e osEE_tc_set_pll_fsource
8000498e g     F .text	0000002a IfxVadc_initializeFAdcD
8000429e g     F .text	00000072 UART_init
80005baa g     F .text	000000a4 IfxPort_setGroupPadDriver
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
80000cf4 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
8000086c g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
8000886c g     F .text	0000001c printStateLv4
80005096 g     F .text	00000012 IfxAsclin_write8
80006f9c g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
800010a0 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
80005070 g     F .text	00000014 IfxAsclin_write16
80008566 g     F .text	00000036 Ifx_Fifo_clear
80000ba8 g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000e1c4 g     F .text	00000010 _exit
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001220 g       .traptab	00000000 osEE_tc_trap_protection
80001200 g     F .traptab	00000000 __TRAPTAB
80000c34 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006d48 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006e3e g     F .text	00000026 IfxScuEru_disableTriggerPulse
8000749a g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
800050b8 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000b38e g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004e7a g     F .text	00000022 IfxAsclin_setClockSource
8000e2ec g     F .text	00000040 .hidden __gedf2
80000a5c g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
8000457c g     F .text	000000a2 initPeripheralsAndERU
8000076c g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
800003cc g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
80000b6c g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004ba8 g     F .text	00000056 IfxVadc_setArbiterPriority
70000c98 g     O .text	00000001 __HEAP_END
8000055c g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
800060ec g     F .text	00000070 IfxScuCcu_getMaxFrequency
80009688 g     F .text	0000001c EnableAllInterrupts
8000057c g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004c12 g     F .text	00000044 IfxVadc_startupCalibration
70000964 g     O .bss	00000004 g_vadc
80005c4e g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000b44 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000a454 g     F .text	0000001a osEE_hal_restore_ctx
80004484 g     F .text	00000032 initVADCGroup
800005bc g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000a7ba g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
800050be g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004a1e g     F .text	0000006a IfxVadc_isPostCalibration
80004466 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006d0a g     F .text	00000016 IfxScuEru_clearEventFlag
80007468 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d766 g     F .text	00000066 __lo0bits
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
8000035c g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
80005e8e g     F .text	00000030 IfxScuCcu_getOscFrequency
80009768 g     F .text	0000003c ResumeOSInterrupts
80004000 g     F .text	0000004e readLcdButtons
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004e2e g     F .text	0000004c IfxAsclin_resetModule
80006f42 g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
8000067c g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006cf8 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
800000cc g     O .rodata	00000008 osEE_cdb_var
8000ac34 g     F .text	00000112 .hidden __pack_d
8000093c g     O .rodata	00000020 IfxAsclin_cfg_indexMap
800097a4 g     F .text	000000ac StartOS
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000cac g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000b80 g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
8000aec4 g     F .text	0000000e free
80000adc g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d6a2 g     F .text	00000082 __multadd
8000d690 g     F .text	00000012 _Bfree
8000069c g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
80008914 g     F .text	00000162 printInfoDisplay
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 84 46 	ja 80008d08 <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001200 <__TRAPTAB>:
80001200:	00 a0       	debug 
80001202:	1d ff ff ff 	j 80001200 <__TRAPTAB>
	...

80001220 <osEE_tc_trap_protection>:
80001220:	00 a0       	debug 
80001222:	1d ff ff ff 	j 80001220 <osEE_tc_trap_protection>
	...

80001240 <osEE_tc_trap_instruction>:
80001240:	00 a0       	debug 
80001242:	1d ff ff ff 	j 80001240 <osEE_tc_trap_instruction>
	...

80001260 <osEE_tc_trap_context>:
80001260:	00 a0       	debug 
80001262:	1d ff ff ff 	j 80001260 <osEE_tc_trap_context>
	...

80001280 <osEE_tc_trap_bus>:
80001280:	00 a0       	debug 
80001282:	1d ff ff ff 	j 80001280 <osEE_tc_trap_bus>
	...

800012a0 <osEE_tc_trap_assertion>:
800012a0:	00 a0       	debug 
800012a2:	1d ff ff ff 	j 800012a0 <osEE_tc_trap_assertion>
	...

800012c0 <osEE_tc_trap_system>:
800012c0:	00 a0       	debug 
800012c2:	1d ff ff ff 	j 800012c0 <osEE_tc_trap_system>
	...

800012e0 <osEE_tc_trap_nmi>:
800012e0:	00 a0       	debug 
800012e2:	1d ff ff ff 	j 800012e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001300 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001308 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 24       	mov %d4,2
80002046:	1d 00 ff 3a 	j 80009644 <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr_dummy_entry_4>:
80002080:	3c 00       	j 80002080 <osEE_tc_isr_dummy_entry_4>
	...

800020a0 <osEE_tc_isr_dummy_entry_5>:
800020a0:	3c 00       	j 800020a0 <osEE_tc_isr_dummy_entry_5>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr2_entry_10>:
80002140:	0d 00 00 02 	svlcx 
80002144:	82 14       	mov %d4,1
80002146:	1d 00 7f 3a 	j 80009644 <osEE_tc_isr2_wrapper>
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
80002266:	1d 00 ef 39 	j 80009644 <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <readLcdButtons>:
#include "Button_Driver.h"
#include "bsw.h"


int readLcdButtons(void)
{
80004000:	20 08       	sub.a %sp,8
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004002:	82 34       	mov %d4,3
80004004:	6d 00 a9 02 	call 80004556 <readADCValue>
    printfSerial("%d",adc_key_in);
80004008:	91 00 00 48 	movh.a %a4,32768
8000400c:	74 a2       	st.w [%sp],%d2
8000400e:	d9 44 28 00 	lea %a4,[%a4]40 <80000028 <_start+0x8>>

int readLcdButtons(void)
{
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004012:	02 2f       	mov %d15,%d2
    printfSerial("%d",adc_key_in);
80004014:	6d 00 7e 01 	call 80004310 <printfSerial>

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
80004018:	8b 4f 66 32 	lt.u %d3,%d15,100
        button_state = btnUP;
8000401c:	82 02       	mov %d2,0
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
    printfSerial("%d",adc_key_in);

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
8000401e:	df 03 17 80 	jne %d3,0,8000404c <readLcdButtons+0x4c>
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004022:	3b 80 3e 30 	mov %d3,1000
        button_state = btnRIGHT; 
80004026:	82 32       	mov %d2,3
    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004028:	3f 3f 12 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
8000402c:	3b 40 9c 30 	mov %d3,2500
        button_state = btnLEFT; 
80004030:	82 22       	mov %d2,2
     
    } 
    else if (adc_key_in < 1000){
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
80004032:	3f 3f 0d 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
80004036:	3b c0 da 30 	mov %d3,3500
8000403a:	3f 3f 08 80 	jlt.u %d15,%d3,8000404a <readLcdButtons+0x4a>
        button_state = btnDOWN; 
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
8000403e:	3b 00 fa 30 	mov %d3,4000
80004042:	0b 3f 30 f1 	lt.u %d15,%d15,%d3
80004046:	ea 42       	cmovn %d2,%d15,4
80004048:	00 90       	ret 
    }     
    else if (adc_key_in < 2500){ 
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
        button_state = btnDOWN; 
8000404a:	82 12       	mov %d2,1
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
    } 
    return button_state;
8000404c:	00 90       	ret 

8000404e <lcd_write4bits>:
}


static void lcd_write4bits(uint8 data)
{
    IfxPort_setPinState(LCD_D4, (data & 0x01) ? IfxPort_State_high : IfxPort_State_low);
8000404e:	8f 14 00 21 	and %d2,%d4,1
80004052:	7b 10 00 f0 	movh %d15,1
80004056:	ab 1f a0 f2 	seln %d15,%d2,%d15,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000405a:	91 40 00 ff 	movh.a %a15,61444
8000405e:	06 4f       	sh %d15,4
80004060:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004064:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D5, (data & 0x02) ? IfxPort_State_high : IfxPort_State_low);
80004066:	8f 24 00 21 	and %d2,%d4,2
8000406a:	7b 80 00 f0 	movh %d15,8
8000406e:	91 40 00 ff 	movh.a %a15,61444
80004072:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004076:	ab 8f a0 f2 	seln %d15,%d2,%d15,8
8000407a:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D6, (data & 0x04) ? IfxPort_State_high : IfxPort_State_low);
8000407c:	8f 44 00 21 	and %d2,%d4,4
80004080:	7b 00 01 f0 	movh %d15,16
80004084:	ab 0f a1 f2 	seln %d15,%d2,%d15,16
80004088:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D7, (data & 0x08) ? IfxPort_State_high : IfxPort_State_low);
8000408a:	8f 84 00 41 	and %d4,%d4,8
8000408e:	7b 00 02 f0 	movh %d15,32
80004092:	ab 0f a2 44 	seln %d4,%d4,%d15,32
80004096:	68 14       	st.w [%a15]4,%d4
80004098:	da 80       	mov %d15,128
8000409a:	68 1f       	st.w [%a15]4,%d15


static void lcd_pulse_enable(void)
{
    IfxPort_setPinHigh(LCD_E);
    delay_ms(2);       
8000409c:	82 24       	mov %d4,2
8000409e:	6d 00 54 25 	call 80008b46 <delay_ms>
800040a2:	7b 00 08 f0 	movh %d15,128
800040a6:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinLow(LCD_E);
    delay_ms(2);       
800040a8:	82 24       	mov %d4,2
800040aa:	1d 00 4e 25 	j 80008b46 <delay_ms>

800040ae <lcd_command>:
800040ae:	91 40 00 ff 	movh.a %a15,61444
800040b2:	7b 00 04 20 	movh %d2,64
800040b6:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
    lcd_pulse_enable();
}


static void lcd_command(uint8 cmd)
{
800040ba:	02 4f       	mov %d15,%d4
800040bc:	68 12       	st.w [%a15]4,%d2
    IfxPort_setPinLow(LCD_RS);
    lcd_write4bits(cmd >> 4);
800040be:	06 c4       	sh %d4,-4
800040c0:	5c c7       	call 8000404e <lcd_write4bits>
    lcd_write4bits(cmd & 0x0F);
800040c2:	8f ff 00 41 	and %d4,%d15,15
800040c6:	5c c4       	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800040c8:	82 54       	mov %d4,5
800040ca:	1d 00 3e 25 	j 80008b46 <delay_ms>

800040ce <lcd_clear>:
}


void lcd_clear(void)
{
    lcd_command(0x01);
800040ce:	82 14       	mov %d4,1
800040d0:	5c ef       	call 800040ae <lcd_command>
    delay_ms(5);       
800040d2:	82 54       	mov %d4,5
800040d4:	1d 00 39 25 	j 80008b46 <delay_ms>

800040d8 <lcd_init>:
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800040d8:	91 40 00 4f 	movh.a %a4,61444
800040dc:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040e0:	82 64       	mov %d4,6
800040e2:	3b 00 08 50 	mov %d5,128
800040e6:	6d 00 b4 0d 	call 80005c4e <IfxPort_setPinMode>
800040ea:	91 40 00 4f 	movh.a %a4,61444
800040ee:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040f2:	82 74       	mov %d4,7
800040f4:	3b 00 08 50 	mov %d5,128
800040f8:	6d 00 ab 0d 	call 80005c4e <IfxPort_setPinMode>
800040fc:	91 40 00 4f 	movh.a %a4,61444
80004100:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004104:	82 44       	mov %d4,4
80004106:	3b 00 08 50 	mov %d5,128
8000410a:	6d 00 a2 0d 	call 80005c4e <IfxPort_setPinMode>
8000410e:	91 40 00 4f 	movh.a %a4,61444
80004112:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004116:	82 34       	mov %d4,3
80004118:	3b 00 08 50 	mov %d5,128
8000411c:	6d 00 99 0d 	call 80005c4e <IfxPort_setPinMode>
80004120:	91 40 00 4f 	movh.a %a4,61444
80004124:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004128:	82 44       	mov %d4,4
8000412a:	3b 00 08 50 	mov %d5,128
8000412e:	6d 00 90 0d 	call 80005c4e <IfxPort_setPinMode>
80004132:	91 40 00 4f 	movh.a %a4,61444
80004136:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000413a:	3b 00 08 50 	mov %d5,128
8000413e:	82 54       	mov %d4,5
80004140:	6d 00 87 0d 	call 80005c4e <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(LCD_D4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D7, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    delay_ms(100);  
80004144:	3b 40 06 40 	mov %d4,100
80004148:	6d 00 ff 24 	call 80008b46 <delay_ms>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000414c:	91 40 00 ff 	movh.a %a15,61444
80004150:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004154:	7b 00 04 f0 	movh %d15,64
80004158:	68 1f       	st.w [%a15]4,%d15
8000415a:	7b 00 08 f0 	movh %d15,128
8000415e:	68 1f       	st.w [%a15]4,%d15

    IfxPort_setPinLow(LCD_RS);
    IfxPort_setPinLow(LCD_E);

    lcd_write4bits(0x03); delay_ms(10);  
80004160:	82 34       	mov %d4,3
80004162:	6d ff 76 ff 	call 8000404e <lcd_write4bits>
80004166:	3b a0 00 40 	mov %d4,10
8000416a:	6d 00 ee 24 	call 80008b46 <delay_ms>
    lcd_write4bits(0x03); delay_ms(10);  
8000416e:	82 34       	mov %d4,3
80004170:	6d ff 6f ff 	call 8000404e <lcd_write4bits>
80004174:	3b a0 00 40 	mov %d4,10
80004178:	6d 00 e7 24 	call 80008b46 <delay_ms>
    lcd_write4bits(0x03); delay_ms(5);   
8000417c:	82 34       	mov %d4,3
8000417e:	6d ff 68 ff 	call 8000404e <lcd_write4bits>
80004182:	82 54       	mov %d4,5
80004184:	6d 00 e1 24 	call 80008b46 <delay_ms>
    lcd_write4bits(0x02); delay_ms(5);   
80004188:	82 24       	mov %d4,2
8000418a:	6d ff 62 ff 	call 8000404e <lcd_write4bits>
8000418e:	82 54       	mov %d4,5
80004190:	6d 00 db 24 	call 80008b46 <delay_ms>

    lcd_command(0x28);
80004194:	3b 80 02 40 	mov %d4,40
80004198:	5c 8b       	call 800040ae <lcd_command>
    lcd_command(0x0C);
8000419a:	3b c0 00 40 	mov %d4,12
8000419e:	5c 88       	call 800040ae <lcd_command>
    lcd_command(0x06);
800041a0:	82 64       	mov %d4,6
800041a2:	5c 86       	call 800040ae <lcd_command>
    lcd_clear();
800041a4:	1d ff 95 ff 	j 800040ce <lcd_clear>

800041a8 <lcd_goto>:
}


void lcd_goto(uint8 row, uint8 col)
{
    uint8 address = (row == 0) ? 0x00 : 0x40;
800041a8:	ab 04 a4 44 	seln %d4,%d4,%d4,64
    address += col;
800041ac:	42 54       	add %d4,%d5
    lcd_command(0x80 | address);
800041ae:	b7 14 99 43 	insert %d4,%d4,1,7,25
800041b2:	1d ff 7e ff 	j 800040ae <lcd_command>

800041b6 <lcd_print>:
800041b6:	91 40 00 cf 	movh.a %a12,61444
}


void lcd_print(const char *str)
{
800041ba:	40 4f       	mov.aa %a15,%a4
800041bc:	d9 cc 00 8a 	lea %a12,[%a12]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800041c0:	3b 00 04 80 	mov %d8,64
    while (*str)
800041c4:	79 ff 00 00 	ld.b %d15,[%a15]0
800041c8:	6e 11       	jz %d15,800041ea <lcd_print+0x34>
        lcd_data(*str++);
800041ca:	16 ff       	and %d15,255


static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
800041cc:	8f cf 1f 40 	sh %d4,%d15,-4
800041d0:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x40038004>>,%d8
800041d4:	6d ff 3d ff 	call 8000404e <lcd_write4bits>
    lcd_write4bits(data & 0x0F);
800041d8:	8f ff 00 41 	and %d4,%d15,15
800041dc:	6d ff 39 ff 	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800041e0:	82 54       	mov %d4,5


void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
800041e2:	b0 1f       	add.a %a15,1
static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
    lcd_write4bits(data & 0x0F);
    delay_ms(5);       
800041e4:	6d 00 b1 24 	call 80008b46 <delay_ms>
800041e8:	3c ee       	j 800041c4 <lcd_print+0xe>

void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
}
800041ea:	00 90       	ret 

800041ec <FuncTask1>:
#include "bsw.h"

TASK(Task1)
{
    printfSerial("Task1 Begins...");
800041ec:	91 00 00 48 	movh.a %a4,32768
800041f0:	d9 44 2b 00 	lea %a4,[%a4]43 <8000002b <_start+0xb>>
800041f4:	6d 00 8e 00 	call 80004310 <printfSerial>
    mdelay(3000);
800041f8:	3b 80 bb 40 	mov %d4,3000
800041fc:	6d 00 c1 00 	call 8000437e <mdelay>
    printfSerial("Task1 Finishes...");
80004200:	91 00 00 48 	movh.a %a4,32768
80004204:	d9 44 3b 00 	lea %a4,[%a4]59 <8000003b <_start+0x1b>>
80004208:	6d 00 84 00 	call 80004310 <printfSerial>

    TerminateTask();
8000420c:	1d 00 dc 2b 	j 800099c4 <TerminateTask>

80004210 <FuncTaskLCD>:
TASK(TaskLCD)
{   
    // lcd_clear(); // LCD 출력 내용 초기화 함수
    // printInfoDisplay();  

    TerminateTask();
80004210:	1d 00 da 2b 	j 800099c4 <TerminateTask>

80004214 <FuncTaskUltrasonic>:
}

TASK(TaskUltrasonic)
{   
80004214:	00 90       	ret 

80004216 <ButtonISR>:
}

ISR2(ButtonISR)
{
    unsigned int buttonState;
    DisableAllInterrupts();
80004216:	6d 00 2e 2a 	call 80009672 <DisableAllInterrupts>
    osEE_tc_delay(5000);
8000421a:	3b 80 38 41 	mov %d4,5000
8000421e:	6d 00 ff 29 	call 8000961c <osEE_tc_delay>
    printfSerial("interuppt");
80004222:	91 00 00 48 	movh.a %a4,32768
80004226:	d9 44 0d 10 	lea %a4,[%a4]77 <8000004d <_start+0x2d>>
8000422a:	6d 00 73 00 	call 80004310 <printfSerial>
    buttonState = readLcdButtons();
8000422e:	6d ff e9 fe 	call 80004000 <readLcdButtons>
    updateInfoState(buttonState);
80004232:	02 24       	mov %d4,%d2
80004234:	6d 00 25 24 	call 80008a7e <updateInfoState>

    osEE_tc_delay(3000);
80004238:	3b 80 bb 40 	mov %d4,3000
8000423c:	6d 00 f0 29 	call 8000961c <osEE_tc_delay>
    EnableAllInterrupts();
80004240:	1d 00 24 2a 	j 80009688 <EnableAllInterrupts>

80004244 <TimerISR>:


ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004244:	7b f0 00 40 	movh %d4,15
}



ISR2(TimerISR)
{
80004248:	20 08       	sub.a %sp,8
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000424a:	1b 04 24 44 	addi %d4,%d4,16960
    if (c == 0)
8000424e:	91 00 00 f7 	movh.a %a15,28672


ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004252:	6d 00 80 29 	call 80009552 <osEE_tc_stm_set_sr0_next_match>
    if (c == 0)
80004256:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
8000425a:	ee 04       	jnz %d15,80004262 <TimerISR+0x1e>
        ActivateTask(Task1);
8000425c:	82 34       	mov %d4,3
8000425e:	6d 00 06 2b 	call 8000986a <ActivateTask>
    if (c % 2 == 0)
80004262:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004266:	ae 04       	jnz.t %d15,0,8000426e <TimerISR+0x2a>
    ActivateTask(TaskLCD);
80004268:	82 44       	mov %d4,4
8000426a:	6d 00 00 2b 	call 8000986a <ActivateTask>
    ActivateTask(TaskUltrasonic);
8000426e:	82 54       	mov %d4,5
80004270:	6d 00 fd 2a 	call 8000986a <ActivateTask>
    printfSerial("\n%4ld: ", c++);
80004274:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004278:	91 00 00 48 	movh.a %a4,32768
8000427c:	d9 44 17 10 	lea %a4,[%a4]87 <80000057 <_start+0x37>>
80004280:	78 00       	st.w [%sp]0,%d15
80004282:	c2 1f       	add %d15,1
80004284:	59 ff 00 00 	st.w [%a15]0 <70000000 <__DSPR0_START>>,%d15
80004288:	6d 00 44 00 	call 80004310 <printfSerial>
    int photoValue = getPhotoresiter();
8000428c:	6d 00 48 24 	call 80008b1c <getPhotoresiter>
    printfSerial("%d: ", photoValue);
80004290:	91 00 00 48 	movh.a %a4,32768
80004294:	74 a2       	st.w [%sp],%d2
80004296:	d9 44 1f 10 	lea %a4,[%a4]95 <8000005f <_start+0x3f>>
8000429a:	1d 00 3b 00 	j 80004310 <printfSerial>

8000429e <UART_init>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void UART_init(void)
{
8000429e:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042a0:	d9 a4 24 00 	lea %a4,[%sp]36
800042a4:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
800042a8:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042aa:	6d 00 5d 0a 	call 80005764 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
800042ae:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
800042b2:	7b 10 7e f4 	movh %d15,18401
800042b6:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
800042b8:	82 3f       	mov %d15,3
800042ba:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
800042be:	da 13       	mov %d15,19
800042c0:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800042c4:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042c8:	7b 00 00 28 	movh %d2,32768
800042cc:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800042ce:	37 0f 63 f0 	extr.u %d15,%d15,0,3
800042d2:	d9 af 04 00 	lea %a15,[%sp]4
800042d6:	40 f4       	mov.aa %a4,%a15
800042d8:	d9 32 24 10 	lea %a2,[%a3]100
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
800042dc:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042e0:	a0 33       	mov.a %a3,3
800042e2:	09 22 48 01 	ld.d %e2,[%a2+]8
800042e6:	89 42 48 01 	st.d [%a4+]8 <80000008 <BootModeHeader0+0x8>>,%e2
800042ea:	fc 3c       	loop %a3,800042e2 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800042ec:	7b 00 00 f7 	movh %d15,28672
800042f0:	1b 4f 97 f0 	addi %d15,%d15,2420
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800042f4:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800042f8:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800042fa:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
800042fe:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004302:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004306:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
8000430a:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000430c:	1d 00 55 08 	j 800053b6 <IfxAsclin_Asc_initModule>

80004310 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004310:	20 e8       	sub.a %sp,232
80004312:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80004314:	6d 00 ba 29 	call 80009688 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
80004318:	40 f5       	mov.aa %a5,%a15
8000431a:	d9 a4 28 10 	lea %a4,[%sp]104
8000431e:	3b 00 08 40 	mov %d4,128
80004322:	d9 a6 28 30 	lea %a6,[%sp]232
80004326:	6d 00 63 38 	call 8000b3ec <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
8000432a:	d9 a4 28 10 	lea %a4,[%sp]104
8000432e:	6d 00 30 38 	call 8000b38e <strlen>
80004332:	91 00 00 f7 	movh.a %a15,28672
80004336:	d9 ff b4 50 	lea %a15,[%a15]2420 <70000974 <g_AsclinAsc>>
8000433a:	f9 f2 3a 90 	st.h [%a15]634 <7000027a <__malloc_av_+0x17a>>,%d2
    unsigned int i =0;
8000433e:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80004340:	d9 a4 28 10 	lea %a4,[%sp]104
80004344:	6d 00 25 38 	call 8000b38e <strlen>
80004348:	7f 2f 0c 80 	jge.u %d15,%d2,80004360 <printfSerial+0x50>
        txData[i] = buf[i];
8000434c:	d9 a3 04 00 	lea %a3,[%sp]4
80004350:	10 32       	addsc.a %a2,%a3,%d15,0
80004352:	d9 a3 28 10 	lea %a3,[%sp]104
80004356:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80004358:	c2 1f       	add %d15,1
        txData[i] = buf[i];
8000435a:	08 02       	ld.bu %d2,[%a15]0
8000435c:	34 22       	st.b [%a2],%d2
8000435e:	3c f1       	j 80004340 <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
80004360:	91 00 00 47 	movh.a %a4,28672
80004364:	91 00 00 67 	movh.a %a6,28672
80004368:	82 f4       	mov %d4,-1
8000436a:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
8000436e:	d9 a5 04 00 	lea %a5,[%sp]4 <70000bc8 <g_AsclinAsc+0x254>>
80004372:	d9 66 ae f0 	lea %a6,[%a6]3054 <70000bee <g_AsclinAsc+0x27a>>
80004376:	9b 04 00 58 	addih %d5,%d4,32768
8000437a:	1d 00 5d 0a 	j 80005834 <IfxAsclin_Asc_write>

8000437e <mdelay>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000437e:	85 fa 10 00 	ld.w %d10,f0000010 <_SMALL_DATA4_+0x3fff8010>
}

void mdelay(unsigned long delay_ms)
{
80004382:	02 4b       	mov %d11,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80004384:	85 fc 2c 00 	ld.w %d12,f000002c <_SMALL_DATA4_+0x3fff802c>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80004388:	6d 00 4a 0e 	call 8000601c <IfxScuCcu_getSourceFrequency>
8000438c:	91 30 00 ff 	movh.a %a15,61443
80004390:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80004394:	4c f0       	ld.w %d15,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004396:	53 1a 40 80 	mul.u %e8,%d10,1
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000439a:	0b ac 10 48 	mov %e4,%d12,%d10
8000439e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800043a2:	a6 95       	or %d5,%d9
800043a4:	02 28       	mov %d8,%d2
800043a6:	6d 00 e1 30 	call 8000a568 <__floatundisf>
800043aa:	4b 0f 41 f1 	itof %d15,%d15
800043ae:	7b a0 47 a4 	movh %d10,17530
800043b2:	4b f8 51 f0 	div.f %d15,%d8,%d15
800043b6:	40 fc       	mov.aa %a12,%a15
800043b8:	40 fd       	mov.aa %a13,%a15
800043ba:	4b af 51 f0 	div.f %d15,%d15,%d10
800043be:	4b f2 51 20 	div.f %d2,%d2,%d15
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043c2:	02 ae       	mov %d14,%d10
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043c4:	4b 02 71 f1 	ftouz %d15,%d2
800043c8:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800043cc:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043d0:	6d 00 26 0e 	call 8000601c <IfxScuCcu_getSourceFrequency>
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
800043d4:	3b 40 01 40 	mov %d4,20
800043d8:	4b 4b 11 42 	div.u %e4,%d11,%d4
800043dc:	48 02       	ld.w %d2,[%a15]0
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
800043de:	82 0b       	mov %d11,0
    while (cnt < (delay_ms / period_ms)) {
800043e0:	02 4d       	mov %d13,%d4
800043e2:	5f db 41 00 	jeq %d11,%d13,80004464 <mdelay+0xe6>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043e6:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800043ea:	85 fe 2c 08 	ld.a %a14,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043ee:	53 1c 40 80 	mul.u %e8,%d12,1
800043f2:	6d 00 15 0e 	call 8000601c <IfxScuCcu_getSourceFrequency>
800043f6:	54 c3       	ld.w %d3,[%a12]
    result |= ((uint64)stm->CAP.U) << 32;
800043f8:	80 e5       	mov.d %d5,%a14
800043fa:	37 03 64 34 	extr.u %d3,%d3,8,4
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043fe:	02 c4       	mov %d4,%d12
80004400:	a6 95       	or %d5,%d9
80004402:	60 3f       	mov.a %a15,%d3
80004404:	02 28       	mov %d8,%d2
80004406:	6d 00 b1 30 	call 8000a568 <__floatundisf>
8000440a:	80 f4       	mov.d %d4,%a15
8000440c:	4b 04 41 31 	itof %d3,%d4
80004410:	4b 38 51 80 	div.f %d8,%d8,%d3
80004414:	4b a8 51 80 	div.f %d8,%d8,%d10
80004418:	4b 82 51 20 	div.f %d2,%d2,%d8
8000441c:	4b 02 71 21 	ftouz %d2,%d2
        if (current_ms - prev_ms >= period_ms) {
80004420:	a2 f2       	sub %d2,%d15
80004422:	8b 42 61 22 	lt.u %d2,%d2,20
80004426:	df 02 de ff 	jne %d2,0,800043e2 <mdelay+0x64>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000442a:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000442e:	85 ff 2c 08 	ld.a %a15,f000002c <_SMALL_DATA4_+0x3fff802c>
80004432:	6d 00 f5 0d 	call 8000601c <IfxScuCcu_getSourceFrequency>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004436:	53 1c 40 80 	mul.u %e8,%d12,1
8000443a:	4c d0       	ld.w %d15,[%a13]0
    result |= ((uint64)stm->CAP.U) << 32;
8000443c:	80 f5       	mov.d %d5,%a15
8000443e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
            cnt++;
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004442:	02 c4       	mov %d4,%d12
80004444:	a6 95       	or %d5,%d9
80004446:	02 28       	mov %d8,%d2
80004448:	6d 00 90 30 	call 8000a568 <__floatundisf>
8000444c:	4b 0f 41 f1 	itof %d15,%d15
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        if (current_ms - prev_ms >= period_ms) {
            cnt++;
80004450:	c2 1b       	add %d11,1
80004452:	4b f8 51 f0 	div.f %d15,%d8,%d15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004456:	4b ef 51 f0 	div.f %d15,%d15,%d14
8000445a:	4b f2 51 20 	div.f %d2,%d2,%d15
8000445e:	4b 02 71 f1 	ftouz %d15,%d2
80004462:	3c c0       	j 800043e2 <mdelay+0x64>
        }
    }
}
80004464:	00 90       	ret 

80004466 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
80004466:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
80004468:	d9 a4 04 00 	lea %a4,[%sp]4
8000446c:	91 20 00 5f 	movh.a %a5,61442
80004470:	6d 00 bd 1d 	call 80007fea <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
80004474:	91 00 00 47 	movh.a %a4,28672
80004478:	d9 44 a4 50 	lea %a4,[%a4]2404 <70000964 <g_vadc>>
8000447c:	d9 a5 04 00 	lea %a5,[%sp]4 <70000964 <g_vadc>>
80004480:	1d 00 41 1d 	j 80007f02 <IfxVadc_Adc_initModule>

80004484 <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
80004484:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004486:	91 00 00 57 	movh.a %a5,28672
8000448a:	40 a4       	mov.aa %a4,%sp
8000448c:	d9 55 a4 50 	lea %a5,[%a5]2404 <70000964 <g_vadc>>
80004490:	6d 00 22 1d 	call 80007ed4 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
80004494:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004496:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
8000449a:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
8000449c:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
8000449e:	d9 44 98 50 	lea %a4,[%a4]2392 <70000958 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800044a2:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044a4:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800044a6:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
800044aa:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800044ae:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044b2:	1d 00 4c 1b 	j 80007b4a <IfxVadc_Adc_initGroup>

800044b6 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044b6:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044ba:	7b 00 00 b7 	movh %d11,28672
800044be:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
800044c2:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
800044c6:	20 60       	sub.a %sp,96
800044c8:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044ca:	d9 ee 98 50 	lea %a14,[%a14]2392 <70000958 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044ce:	1b 8b 00 b0 	addi %d11,%d11,8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800044d2:	82 19       	mov %d9,1
800044d4:	1b 8a 93 a0 	addi %d10,%d10,2360
800044d8:	d9 dd a4 50 	lea %a13,[%a13]2404
800044dc:	53 8f 21 80 	mul %d8,%d15,24
800044e0:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044e2:	40 e5       	mov.aa %a5,%a14
800044e4:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044e6:	d9 af 20 10 	lea %a15,[%sp]96
800044ea:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800044ec:	40 c4       	mov.aa %a4,%a12
800044ee:	6d 00 23 1b 	call 80007b34 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044f2:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800044f4:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044f6:	30 3f       	add.a %a15,%a3
800044f8:	60 b3       	mov.a %a3,%d11
800044fa:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
800044fc:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004500:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004502:	60 a2       	mov.a %a2,%d10
80004504:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004506:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
8000450a:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000450e:	6d 00 1d 1a 	call 80007948 <IfxVadc_Adc_initChannel>
80004512:	d4 d2       	ld.a %a2,[%a13]
80004514:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <g_vadcChannelIDs>>
80004518:	c2 1f       	add %d15,1
8000451a:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000451e:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
80004522:	19 23 00 60 	ld.w %d3,[%a2]384
80004526:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
8000452a:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
8000452e:	df 4f d7 ff 	jne %d15,4,800044dc <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
80004532:	00 90       	ret 

80004534 <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
80004534:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
80004538:	6d ff 97 ff 	call 80004466 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
8000453c:	6d ff a4 ff 	call 80004484 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
80004540:	6d ff bb ff 	call 800044b6 <initVADCChannels>
80004544:	99 ff a4 50 	ld.a %a15,[%a15]2404 <70000964 <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
80004548:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000964 <g_vadc>>
8000454c:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80004550:	59 ff 04 80 	st.w [%a15]516,%d15
80004554:	00 90       	ret 

80004556 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80004556:	91 00 00 f7 	movh.a %a15,28672
8000455a:	d9 ff b8 40 	lea %a15,[%a15]2360 <70000938 <g_vadcChannel>>
8000455e:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004562:	c8 12       	ld.a %a2,[%a15]4
80004564:	0c f1       	ld.bu %d15,[%a15]1
80004566:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
8000456a:	1b 0f 0a f0 	addi %d15,%d15,160
8000456e:	90 2f       	addsc.a %a15,%a2,%d15,2
80004570:	4c f0       	ld.w %d15,[%a15]0
80004572:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
80004576:	ff 0f fd 7f 	jge %d15,0,80004570 <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
8000457a:	00 90       	ret 

8000457c <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
8000457c:	91 40 00 4f 	movh.a %a4,61444
80004580:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004584:	82 74       	mov %d4,7
80004586:	3b 00 01 50 	mov %d5,16
8000458a:	6d 00 62 0b 	call 80005c4e <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
8000458e:	91 00 00 f8 	movh.a %a15,32768
80004592:	d9 ff 98 d0 	lea %a15,[%a15]2904 <80000b58 <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80004596:	c8 24       	ld.a %a4,[%a15]8
80004598:	91 00 00 d7 	movh.a %a13,28672
8000459c:	08 c4       	ld.bu %d4,[%a15]12
8000459e:	3b 80 00 50 	mov %d5,8
800045a2:	b5 df a8 50 	st.a [%a13]2408 <70000968 <g_ERUconfig>>,%a15
800045a6:	6d 00 54 0b 	call 80005c4e <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
800045aa:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800045ae:	08 44       	ld.bu %d4,[%a15]4
800045b0:	6d 00 fd 14 	call 80006faa <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800045b4:	99 df a8 50 	ld.a %a15,[%a13]2408 <70000968 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800045b8:	d9 dc a8 50 	lea %a12,[%a13]2408 <70000968 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800045bc:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800045be:	08 44       	ld.bu %d4,[%a15]4
800045c0:	e9 c4 04 00 	st.b [%a12]4 <70000004 <__DSPR0_START+0x4>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
800045c4:	6d 00 63 14 	call 80006e8a <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800045c8:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800045cc:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
800045ce:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800045d0:	6d 00 96 14 	call 80006efc <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
800045d4:	39 c4 04 00 	ld.bu %d4,[%a12]4
800045d8:	39 c5 05 00 	ld.bu %d5,[%a12]5
800045dc:	6d 00 ca 13 	call 80006d70 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
800045e0:	39 c4 06 00 	ld.bu %d4,[%a12]6
800045e4:	82 15       	mov %d5,1
800045e6:	6d 00 1b 15 	call 8000701c <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
800045ea:	0c c6       	ld.bu %d15,[%a12]6
800045ec:	16 03       	and %d15,3
800045ee:	06 2f       	sh %d15,2
800045f0:	60 f2       	mov.a %a2,%d15
800045f2:	d9 2f d4 38 	lea %a15,[%a2]-29484
800045f6:	11 4f 00 ff 	addih.a %a15,%a15,61444
800045fa:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800045fc:	4c f0       	ld.w %d15,[%a15]0
800045fe:	b7 af 08 f0 	insert %d15,%d15,10,0,8
80004602:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004604:	4c f0       	ld.w %d15,[%a15]0
80004606:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
8000460a:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000460c:	4c f0       	ld.w %d15,[%a15]0
8000460e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80004612:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80004614:	4c f0       	ld.w %d15,[%a15]0
80004616:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
8000461a:	68 0f       	st.w [%a15]0,%d15
8000461c:	00 90       	ret 

8000461e <asclin0TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin0TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
8000461e:	91 00 00 47 	movh.a %a4,28672
80004622:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
80004626:	1d 00 0d 06 	j 80005240 <IfxAsclin_Asc_isrTransmit>

8000462a <main>:
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
8000462a:	6d 00 38 27 	call 8000949a <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
8000462e:	7b f0 00 40 	movh %d4,15
80004632:	82 15       	mov %d5,1
80004634:	1b 04 24 44 	addi %d4,%d4,16960
80004638:	6d 00 4b 27 	call 800094ce <osEE_tc_stm_set_sr0>

    UART_init();
8000463c:	6d ff 31 fe 	call 8000429e <UART_init>
    initADC();
80004640:	6d ff 7a ff 	call 80004534 <initADC>
    initPeripheralsAndERU();
80004644:	6d ff 9c ff 	call 8000457c <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
80004648:	6d ff 48 fd 	call 800040d8 <lcd_init>
    initUltrasonic();
8000464c:	6d 00 6b 22 	call 80008b22 <initUltrasonic>
    initInfotainment();
80004650:	6d 00 13 22 	call 80008a76 <initInfotainment>
    /* custom driver added end*/
    

    printfSerial("\n...............\n");
80004654:	91 00 00 48 	movh.a %a4,32768
80004658:	d9 44 04 20 	lea %a4,[%a4]132 <80000084 <_start+0x64>>
8000465c:	6d ff 5a fe 	call 80004310 <printfSerial>
    printfSerial("...OS Starts...\n");
80004660:	91 00 00 48 	movh.a %a4,32768
80004664:	d9 44 16 20 	lea %a4,[%a4]150 <80000096 <_start+0x76>>
80004668:	6d ff 54 fe 	call 80004310 <printfSerial>
    printfSerial("...............\n");
8000466c:	91 00 00 48 	movh.a %a4,32768
80004670:	d9 44 27 20 	lea %a4,[%a4]167 <800000a7 <_start+0x87>>
80004674:	6d ff 4e fe 	call 80004310 <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
80004678:	82 04       	mov %d4,0
8000467a:	6d 00 95 28 	call 800097a4 <StartOS>
    return 0;
}
8000467e:	82 02       	mov %d2,0
80004680:	00 90       	ret 
	...

80004684 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004684:	02 4f       	mov %d15,%d4
80004686:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004688:	6d 00 6d 16 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
8000468c:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000468e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004690:	6d 00 66 15 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004694:	8b 0f a2 22 	ge.u %d2,%d15,32
80004698:	f6 28       	jnz %d2,800046a8 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
8000469a:	19 f2 08 20 	ld.w %d2,[%a15]136
8000469e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046a2:	59 ff 08 20 	st.w [%a15]136,%d15
800046a6:	3c 08       	j 800046b6 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
800046a8:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046ac:	16 1f       	and %d15,31
800046ae:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046b2:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046b6:	02 84       	mov %d4,%d8
800046b8:	1d 00 d8 16 	j 80007468 <IfxScuWdt_setSafetyEndinit>

800046bc <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800046bc:	02 4f       	mov %d15,%d4
800046be:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046c0:	6d 00 51 16 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800046c4:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046c6:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800046c8:	6d 00 4a 15 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800046cc:	8b 0f a2 22 	ge.u %d2,%d15,32
800046d0:	f6 28       	jnz %d2,800046e0 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
800046d2:	19 f2 08 20 	ld.w %d2,[%a15]136
800046d6:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046da:	59 ff 08 20 	st.w [%a15]136,%d15
800046de:	3c 08       	j 800046ee <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
800046e0:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046e4:	16 1f       	and %d15,31
800046e6:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046ea:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046ee:	02 84       	mov %d4,%d8
800046f0:	1d 00 bc 16 	j 80007468 <IfxScuWdt_setSafetyEndinit>

800046f4 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
800046f4:	82 0f       	mov %d15,0
800046f6:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
800046fa:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
800046fe:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004702:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
80004704:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004708:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
8000470c:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004710:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
80004714:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004718:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
8000471a:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000471e:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004720:	6d ff ce ff 	call 800046bc <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
80004724:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004728:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000472c:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
8000472e:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004732:	3b f0 00 40 	mov %d4,15
80004736:	1d ff a7 ff 	j 80004684 <IfxVadc_disableAccess>

8000473a <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
8000473a:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
8000473c:	ff 84 1c 80 	jge.u %d4,8,80004774 <IfxVadc_disablePostCalibration+0x3a>
80004740:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004742:	3b f0 01 40 	mov %d4,31
80004746:	02 58       	mov %d8,%d5
80004748:	6d ff ba ff 	call 800046bc <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
8000474c:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
80004750:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004754:	82 1f       	mov %d15,1
80004756:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
8000475a:	df 18 04 80 	jne %d8,1,80004762 <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
8000475e:	a6 2f       	or %d15,%d2
80004760:	3c 03       	j 80004766 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
80004762:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004766:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000476a:	40 f4       	mov.aa %a4,%a15
8000476c:	3b f0 01 40 	mov %d4,31
80004770:	1d ff 8a ff 	j 80004684 <IfxVadc_disableAccess>
80004774:	00 90       	ret 

80004776 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
80004776:	40 4f       	mov.aa %a15,%a4
80004778:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000477a:	6d 00 d6 15 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
8000477e:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004780:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004782:	6d 00 d2 14 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004786:	40 f4       	mov.aa %a4,%a15
80004788:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
8000478c:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004790:	6d ff 96 ff 	call 800046bc <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
80004794:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
80004798:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000479c:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
8000479e:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047a2:	3b f0 01 40 	mov %d4,31
800047a6:	6d ff 6f ff 	call 80004684 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
800047aa:	df 08 1a 80 	jne %d8,0,800047de <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
800047ae:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
800047b2:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800047b6:	82 4f       	mov %d15,4
800047b8:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800047bc:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800047c0:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
800047c4:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800047c8:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
800047cc:	3b 00 20 f4 	mov %d15,16896
800047d0:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
800047d4:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800047d8:	8f 8f c3 f1 	andn %d15,%d15,56
800047dc:	3c 1d       	j 80004816 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
800047de:	df 18 1e 80 	jne %d8,1,8000481a <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
800047e2:	82 0f       	mov %d15,0
800047e4:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
800047e8:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
800047ec:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800047f0:	82 4f       	mov %d15,4
800047f2:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800047f6:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800047fa:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
800047fe:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004802:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004806:	3b 00 20 f4 	mov %d15,16896
8000480a:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000480e:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004812:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
80004816:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
8000481a:	02 94       	mov %d4,%d9
8000481c:	1d 00 ba 15 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004820 <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
80004820:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
80004822:	6d 00 be 0c 	call 8000619e <IfxScuCcu_getSpbFrequency>
80004826:	19 ff 00 20 	ld.w %d15,[%a15]128
8000482a:	16 1f       	and %d15,31
8000482c:	c2 1f       	add %d15,1
8000482e:	4b 0f 41 f1 	itof %d15,%d15
}
80004832:	4b f2 51 20 	div.f %d2,%d2,%d15
80004836:	00 90       	ret 

80004838 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80004838:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
8000483a:	6d 00 b2 0c 	call 8000619e <IfxScuCcu_getSpbFrequency>
8000483e:	19 ff 00 20 	ld.w %d15,[%a15]128
80004842:	37 0f 62 f4 	extr.u %d15,%d15,8,2
80004846:	c2 1f       	add %d15,1
80004848:	4b 0f 41 f1 	itof %d15,%d15
}
8000484c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004850:	00 90       	ret 

80004852 <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
80004852:	1d 00 a6 0c 	j 8000619e <IfxScuCcu_getSpbFrequency>

80004856 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
80004856:	82 0f       	mov %d15,0
80004858:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
8000485a:	1b 0f 07 20 	addi %d2,%d15,112
8000485e:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
80004862:	54 22       	ld.w %d2,[%a2]
80004864:	f6 24       	jnz %d2,8000486c <IfxVadc_getBackgroundScanStatus+0x16>
80004866:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
80004868:	fc f9       	loop %a15,8000485a <IfxVadc_getBackgroundScanStatus+0x4>
8000486a:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
8000486c:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
8000486e:	00 90       	ret 

80004870 <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
80004870:	19 42 08 20 	ld.w %d2,[%a4]136
80004874:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
80004878:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
8000487c:	06 22       	sh %d2,2
8000487e:	00 90       	ret 

80004880 <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
80004880:	df 15 09 00 	jeq %d5,1,80004892 <IfxVadc_getResultBasedOnRequestSource+0x12>
80004884:	76 54       	jz %d5,8000488c <IfxVadc_getResultBasedOnRequestSource+0xc>
80004886:	df 25 0b 00 	jeq %d5,2,8000489c <IfxVadc_getResultBasedOnRequestSource+0x1c>
8000488a:	3c 39       	j 800048fc <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
8000488c:	19 5f 00 20 	ld.w %d15,[%a5]128
80004890:	3c 03       	j 80004896 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
80004892:	19 5f 20 20 	ld.w %d15,[%a5]160
80004896:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
80004898:	ee 39       	jnz %d15,8000490a <IfxVadc_getResultBasedOnRequestSource+0x8a>
8000489a:	3c 31       	j 800048fc <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
8000489c:	19 4f 00 80 	ld.w %d15,[%a4]512
800048a0:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
800048a2:	ee 34       	jnz %d15,8000490a <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
800048a4:	1b 04 06 f0 	addi %d15,%d4,96
800048a8:	90 5f       	addsc.a %a15,%a5,%d15,2
800048aa:	4c f0       	ld.w %d15,[%a15]0
800048ac:	ef 4f 28 00 	jz.t %d15,20,800048fc <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
800048b0:	19 42 00 c0 	ld.w %d2,[%a4]768
800048b4:	82 0f       	mov %d15,0
800048b6:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
800048ba:	19 42 00 c0 	ld.w %d2,[%a4]768
800048be:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
800048c2:	19 42 00 c0 	ld.w %d2,[%a4]768
800048c6:	37 02 62 2e 	extr.u %d2,%d2,28,2
800048ca:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
800048ce:	19 42 00 c0 	ld.w %d2,[%a4]768
800048d2:	37 02 e3 2c 	extr.u %d2,%d2,25,3
800048d6:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
800048da:	19 42 00 c0 	ld.w %d2,[%a4]768
800048de:	37 02 65 2a 	extr.u %d2,%d2,20,5
800048e2:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
800048e6:	19 42 00 c0 	ld.w %d2,[%a4]768
800048ea:	37 02 64 28 	extr.u %d2,%d2,16,4
800048ee:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
800048f2:	19 42 00 c0 	ld.w %d2,[%a4]768
800048f6:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
800048fa:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
800048fc:	1b 04 06 40 	addi %d4,%d4,96
80004900:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004904:	4c f0       	ld.w %d15,[%a15]0
80004906:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000490a:	1b 0f 0a f0 	addi %d15,%d15,160
8000490e:	90 55       	addsc.a %a5,%a5,%d15,2
80004910:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
80004912:	00 90       	ret 

80004914 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
80004914:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
80004918:	ab 62 a0 22 	seln %d2,%d2,%d2,6
8000491c:	00 90       	ret 

8000491e <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
8000491e:	bf 45 0a 80 	jlt.u %d5,4,80004932 <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
80004922:	9a c5       	add %d15,%d5,-4
80004924:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004928:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
8000492c:	da 08       	mov %d15,8
8000492e:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
80004932:	13 44 20 45 	madd %d4,%d5,%d4,4
80004936:	91 00 00 f8 	movh.a %a15,32768
8000493a:	d9 ff 2c 70 	lea %a15,[%a15]492 <800001ec <IfxVadc_cfg_srcAddresses>>
8000493e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
80004942:	c8 02       	ld.a %a2,[%a15]0
80004944:	00 90       	ret 

80004946 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004946:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
8000494a:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
8000494c:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004950:	3b f0 01 40 	mov %d4,31
80004954:	6d ff b4 fe 	call 800046bc <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004958:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000495c:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000495e:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004962:	3b f0 01 40 	mov %d4,31
80004966:	1d ff 8f fe 	j 80004684 <IfxVadc_disableAccess>

8000496a <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
8000496a:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
8000496e:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80004970:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004974:	3b f0 01 40 	mov %d4,31
80004978:	6d ff a2 fe 	call 800046bc <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
8000497c:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004980:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004982:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004986:	3b f0 01 40 	mov %d4,31
8000498a:	1d ff 7d fe 	j 80004684 <IfxVadc_disableAccess>

8000498e <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
8000498e:	02 4f       	mov %d15,%d4
80004990:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004992:	6d 00 06 0c 	call 8000619e <IfxScuCcu_getSpbFrequency>
80004996:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
8000499a:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000499e:	82 3f       	mov %d15,3
800049a0:	c2 f4       	add %d4,-1
800049a2:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800049a6:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049aa:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800049ac:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049b0:	6d ff cb ff 	call 80004946 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
800049b4:	02 82       	mov %d2,%d8
800049b6:	00 90       	ret 

800049b8 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
800049b8:	02 4f       	mov %d15,%d4
800049ba:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800049bc:	6d 00 f1 0b 	call 8000619e <IfxScuCcu_getSpbFrequency>
800049c0:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
800049c4:	8f 22 00 40 	sh %d4,%d2,2
800049c8:	4b f4 11 42 	div.u %e4,%d4,%d15
800049cc:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
800049d0:	c2 24       	add %d4,2
800049d2:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
800049d4:	c2 f4       	add %d4,-1
800049d6:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
800049da:	1b 14 00 30 	addi %d3,%d4,1
800049de:	4b 32 11 62 	div.u %e6,%d2,%d3
800049e2:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
800049e4:	7b 10 13 60 	movh %d6,305
800049e8:	1b 16 d0 62 	addi %d6,%d6,11521
800049ec:	3f 6f 08 80 	jlt.u %d15,%d6,800049fc <IfxVadc_initializeFAdcI+0x44>
800049f0:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
800049f4:	9a 14       	add %d15,%d4,1
800049f6:	4b f2 11 22 	div.u %e2,%d2,%d15
800049fa:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
800049fc:	1b 0f ee 25 	addi %d2,%d15,24288
80004a00:	7b a0 12 30 	movh %d3,298
80004a04:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a08:	1b 13 be 38 	addi %d3,%d3,-29727
80004a0c:	7f 32 06 80 	jge.u %d2,%d3,80004a18 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004a10:	40 f4       	mov.aa %a4,%a15
80004a12:	6d ff ac ff 	call 8000496a <IfxVadc_initialiseAdcConverterClock>
80004a16:	3c 02       	j 80004a1a <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004a18:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004a1a:	02 f2       	mov %d2,%d15
80004a1c:	00 90       	ret 

80004a1e <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
80004a1e:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a20:	ff 84 33 80 	jge.u %d4,8,80004a86 <IfxVadc_isPostCalibration+0x68>
80004a24:	91 00 00 f8 	movh.a %a15,32768
80004a28:	d9 ff b8 84 	lea %a15,[%a15]19000 <80004a38 <IfxVadc_isPostCalibration+0x1a>>
80004a2c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a30:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a34:	dc 0f       	ji %a15
80004a36:	00 00       	nop 
80004a38:	1d 00 10 00 	j 80004a58 <IfxVadc_isPostCalibration+0x3a>
80004a3c:	1d 00 11 00 	j 80004a5e <IfxVadc_isPostCalibration+0x40>
80004a40:	1d 00 12 00 	j 80004a64 <IfxVadc_isPostCalibration+0x46>
80004a44:	1d 00 13 00 	j 80004a6a <IfxVadc_isPostCalibration+0x4c>
80004a48:	1d 00 14 00 	j 80004a70 <IfxVadc_isPostCalibration+0x52>
80004a4c:	1d 00 15 00 	j 80004a76 <IfxVadc_isPostCalibration+0x58>
80004a50:	1d 00 16 00 	j 80004a7c <IfxVadc_isPostCalibration+0x5e>
80004a54:	1d 00 17 00 	j 80004a82 <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004a58:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004a5c:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004a5e:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004a62:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004a64:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004a68:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004a6a:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004a6e:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004a70:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004a74:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004a76:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004a7a:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004a7c:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004a80:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a82:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
80004a86:	00 90       	ret 

80004a88 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
80004a88:	02 40       	mov %d0,%d4
80004a8a:	02 68       	mov %d8,%d6
80004a8c:	02 7a       	mov %d10,%d7
80004a8e:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
80004a90:	ff 25 08 80 	jge.u %d5,2,80004aa0 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004a94:	8f 80 00 f0 	sh %d15,%d0,8
80004a98:	42 f5       	add %d5,%d15
80004a9a:	1b 85 12 50 	addi %d5,%d5,296
80004a9e:	3c 03       	j 80004aa4 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004aa0:	1b 65 02 50 	addi %d5,%d5,38
80004aa4:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004aa8:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004aaa:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004aac:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
80004aae:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004ab2:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
80004ab6:	f6 24       	jnz %d2,80004abe <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004ab8:	1b 1f ff ff 	addi %d15,%d15,-15
80004abc:	06 4f       	sh %d15,4
80004abe:	ff 63 35 80 	jge.u %d3,6,80004b28 <IfxVadc_getChannelConversionTime+0xa0>
80004ac2:	91 00 00 f8 	movh.a %a15,32768
80004ac6:	d9 ff 24 70 	lea %a15,[%a15]484 <800001e4 <CSWTCH.25>>
80004aca:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004ace:	82 02       	mov %d2,0
80004ad0:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004ad2:	df 04 2f 80 	jne %d4,0,80004b30 <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004ad6:	df 53 0d 00 	jeq %d3,5,80004af0 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004ada:	02 04       	mov %d4,%d0
80004adc:	6d ff a1 ff 	call 80004a1e <IfxVadc_isPostCalibration>
80004ae0:	92 24       	add %d4,%d15,2
80004ae2:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004ae6:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004ae8:	42 24       	add %d4,%d2
80004aea:	4b 04 41 41 	itof %d4,%d4
80004aee:	3c 04       	j 80004af6 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004af0:	c2 4f       	add %d15,4
80004af2:	4b 0f 41 41 	itof %d4,%d15
80004af6:	4b 84 51 40 	div.f %d4,%d4,%d8
80004afa:	6d 00 5d 2d 	call 8000a5b4 <__extendsfdf2>
80004afe:	02 a4       	mov %d4,%d10
80004b00:	0b 23 10 88 	mov %e8,%d3,%d2
80004b04:	6d 00 58 2d 	call 8000a5b4 <__extendsfdf2>
80004b08:	b7 00 21 4f 	imask %e4,0,30,1
80004b0c:	0b 23 10 68 	mov %e6,%d3,%d2
80004b10:	6d 00 47 2f 	call 8000a99e <__divdf3>
80004b14:	0b 89 10 48 	mov %e4,%d9,%d8
80004b18:	0b 23 10 68 	mov %e6,%d3,%d2
80004b1c:	6d 00 33 2e 	call 8000a782 <__adddf3>
80004b20:	0b 23 10 48 	mov %e4,%d3,%d2
80004b24:	1d 00 fc 2f 	j 8000ab1c <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004b28:	82 09       	mov %d9,0
80004b2a:	df 04 d8 7f 	jeq %d4,0,80004ada <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004b2e:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004b30:	00 90       	ret 

80004b32 <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004b32:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b34:	6d 00 f9 13 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004b38:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b3a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004b3c:	6d 00 f5 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b40:	3b f0 01 40 	mov %d4,31
80004b44:	40 f4       	mov.aa %a4,%a15
80004b46:	6d ff bb fd 	call 800046bc <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004b4a:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004b4c:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004b4e:	8f 12 40 21 	or %d2,%d2,1
80004b52:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004b54:	48 d2       	ld.w %d2,[%a15]52
80004b56:	8f 12 40 21 	or %d2,%d2,1
80004b5a:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004b5c:	6d 00 1a 14 	call 80007390 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004b60:	48 d2       	ld.w %d2,[%a15]52
80004b62:	6f 12 ff 7f 	jz.t %d2,1,80004b60 <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004b66:	02 f4       	mov %d4,%d15
80004b68:	6d 00 df 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b6c:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b6e:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b72:	8f 12 40 21 	or %d2,%d2,1
80004b76:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b78:	40 f4       	mov.aa %a4,%a15
80004b7a:	6d ff 85 fd 	call 80004684 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004b7e:	02 f4       	mov %d4,%d15
80004b80:	1d 00 08 14 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004b84 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004b84:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80004b88:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004b8a:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b8e:	3b f0 01 40 	mov %d4,31
80004b92:	6d ff 95 fd 	call 800046bc <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
80004b96:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b9a:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004b9c:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004ba0:	3b f0 01 40 	mov %d4,31
80004ba4:	1d ff 70 fd 	j 80004684 <IfxVadc_disableAccess>

80004ba8 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80004ba8:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004bac:	df 04 23 00 	jeq %d4,0,80004bf2 <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004bb0:	19 42 04 00 	ld.w %d2,[%a4]4
80004bb4:	0f f4 00 40 	sh %d4,%d4,%d15
80004bb8:	a6 24       	or %d4,%d2
80004bba:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004bbe:	19 42 04 00 	ld.w %d2,[%a4]4
80004bc2:	06 27       	sh %d7,2
80004bc4:	82 3f       	mov %d15,3
80004bc6:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004bca:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004bce:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004bd0:	4c 41       	ld.w %d15,[%a4]4
80004bd2:	0f 75 00 50 	sh %d5,%d5,%d7
80004bd6:	a6 f5       	or %d5,%d15
80004bd8:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004bdc:	4c 41       	ld.w %d15,[%a4]4
80004bde:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004be0:	76 64       	jz %d6,80004be8 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004be2:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004be6:	3c 03       	j 80004bec <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004be8:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004bec:	59 47 04 00 	st.w [%a4]4,%d7
80004bf0:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004bf2:	19 44 04 00 	ld.w %d4,[%a4]4
80004bf6:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004bfa:	6c 41       	st.w [%a4]4,%d15
80004bfc:	00 90       	ret 

80004bfe <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004bfe:	19 4f 28 20 	ld.w %d15,[%a4]168
80004c02:	26 54       	and %d4,%d5
80004c04:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c08:	0f 4f a0 50 	or %d5,%d15,%d4
80004c0c:	59 45 28 20 	st.w [%a4]168,%d5
80004c10:	00 90       	ret 

80004c12 <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c12:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c16:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c18:	6d ff 52 fd 	call 800046bc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004c1c:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c20:	40 f4       	mov.aa %a4,%a15
80004c22:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004c26:	3b f0 01 40 	mov %d4,31
80004c2a:	59 ff 00 20 	st.w [%a15]128,%d15
80004c2e:	6d ff 2b fd 	call 80004684 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c32:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004c34:	82 0f       	mov %d15,0
80004c36:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004c38:	8f a2 00 30 	sh %d3,%d2,10
80004c3c:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004c40:	c2 12       	add %d2,1
80004c42:	19 33 40 20 	ld.w %d3,[%a3]1152
80004c46:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004c4a:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004c4e:	fc 25       	loop %a2,80004c38 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004c50:	df 1f f1 7f 	jeq %d15,1,80004c32 <IfxVadc_startupCalibration+0x20>
}
80004c54:	00 90       	ret 
	...

80004c58 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004c58:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004c5a:	6d 00 66 13 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c5e:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004c60:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c62:	6d 00 62 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004c66:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004c68:	02 f4       	mov %d4,%d15
80004c6a:	8f 12 40 21 	or %d2,%d2,1
80004c6e:	68 02       	st.w [%a15]0,%d2
80004c70:	1d 00 90 13 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004c74 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004c74:	7b 10 00 f0 	movh %d15,1
80004c78:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004c7c:	19 4f 00 10 	ld.w %d15,[%a4]64
80004c80:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004c84:	a6 f4       	or %d4,%d15
80004c86:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004c8a:	7b 00 40 f0 	movh %d15,1024
80004c8e:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004c92:	19 4f 00 10 	ld.w %d15,[%a4]64
80004c96:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004c9a:	a6 f5       	or %d5,%d15
80004c9c:	59 45 00 10 	st.w [%a4]64,%d5
80004ca0:	00 90       	ret 

80004ca2 <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004ca2:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004ca4:	6d 00 41 13 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004ca8:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004caa:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004cac:	6d 00 3d 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004cb0:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004cb2:	02 f4       	mov %d4,%d15
80004cb4:	8f 12 c0 21 	andn %d2,%d2,1
80004cb8:	68 02       	st.w [%a15]0,%d2
80004cba:	1d 00 6b 13 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004cbe <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004cbe:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004cc0:	ff 44 09 00 	jge %d4,4,80004cd2 <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004cc4:	91 00 00 f8 	movh.a %a15,32768
80004cc8:	d9 ff bc 40 	lea %a15,[%a15]2364 <8000093c <IfxAsclin_cfg_indexMap>>
80004ccc:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004cd0:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004cd2:	00 90       	ret 

80004cd4 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004cd4:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004cd8:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004cda:	c2 ff       	add %d15,-1
80004cdc:	8b 0f a1 22 	ge.u %d2,%d15,16
80004ce0:	df 02 32 80 	jne %d2,0,80004d44 <IfxAsclin_getFaFrequency+0x70>
80004ce4:	91 00 00 f8 	movh.a %a15,32768
80004ce8:	d9 ff f0 34 	lea %a15,[%a15]19696 <80004cf0 <IfxAsclin_getFaFrequency+0x1c>>
80004cec:	90 ff       	addsc.a %a15,%a15,%d15,2
80004cee:	dc 0f       	ji %a15
80004cf0:	1d 00 20 00 	j 80004d30 <IfxAsclin_getFaFrequency+0x5c>
80004cf4:	1d 00 20 00 	j 80004d34 <IfxAsclin_getFaFrequency+0x60>
80004cf8:	1d 00 26 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004cfc:	1d 00 1e 00 	j 80004d38 <IfxAsclin_getFaFrequency+0x64>
80004d00:	1d 00 22 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d04:	1d 00 20 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d08:	1d 00 1e 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d0c:	1d 00 18 00 	j 80004d3c <IfxAsclin_getFaFrequency+0x68>
80004d10:	1d 00 1a 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d14:	1d 00 18 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d18:	1d 00 16 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d1c:	1d 00 14 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d20:	1d 00 12 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d24:	1d 00 10 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d28:	1d 00 0e 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d2c:	1d 00 0a 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004d30:	1d 00 37 0a 	j 8000619e <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004d34:	1d 00 a6 08 	j 80005e80 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004d38:	1d 00 c3 08 	j 80005ebe <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004d3c:	1d 00 20 0a 	j 8000617c <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004d40:	1d 00 0e 0a 	j 8000615c <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004d44:	82 02       	mov %d2,0
80004d46:	00 90       	ret 

80004d48 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004d48:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004d4c:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004d4e:	d9 33 bc 40 	lea %a3,[%a3]2364 <8000093c <IfxAsclin_cfg_indexMap>>
80004d52:	a0 3f       	mov.a %a15,3
80004d54:	d0 32       	addsc.a %a2,%a3,%d15,3
80004d56:	d4 25       	ld.a %a5,[%a2]
80004d58:	7d 45 05 80 	jne.a %a5,%a4,80004d62 <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004d5c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004d60:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004d62:	c2 1f       	add %d15,1
80004d64:	fc f8       	loop %a15,80004d54 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004d66:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004d68:	00 90       	ret 

80004d6a <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004d6a:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004d6c:	6d ff b4 ff 	call 80004cd4 <IfxAsclin_getFaFrequency>
80004d70:	4c f5       	ld.w %d15,[%a15]20
80004d72:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004d76:	c2 1f       	add %d15,1
80004d78:	4b 0f 41 f1 	itof %d15,%d15
}
80004d7c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004d80:	00 90       	ret 

80004d82 <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004d82:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004d84:	6d ff f3 ff 	call 80004d6a <IfxAsclin_getPdFrequency>
80004d88:	48 83       	ld.w %d3,[%a15]32
80004d8a:	4c f8       	ld.w %d15,[%a15]32
80004d8c:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004d90:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004d94:	4b 03 41 31 	itof %d3,%d3
80004d98:	4b 0f 41 f1 	itof %d15,%d15
80004d9c:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004da0:	4b f2 51 20 	div.f %d2,%d2,%d15
80004da4:	00 90       	ret 

80004da6 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004da6:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004da8:	6d ff ed ff 	call 80004d82 <IfxAsclin_getOvsFrequency>
80004dac:	4c f5       	ld.w %d15,[%a15]20
80004dae:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004db2:	4b 0f 41 f1 	itof %d15,%d15
}
80004db6:	4b f2 51 20 	div.f %d2,%d2,%d15
80004dba:	00 90       	ret 

80004dbc <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004dbc:	6d ff c6 ff 	call 80004d48 <IfxAsclin_getIndex>
80004dc0:	53 c2 20 f0 	mul %d15,%d2,12
80004dc4:	60 ff       	mov.a %a15,%d15
80004dc6:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004dca:	11 42 00 2f 	addih.a %a2,%a2,61444
80004dce:	00 90       	ret 

80004dd0 <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004dd0:	6d ff bc ff 	call 80004d48 <IfxAsclin_getIndex>
80004dd4:	53 c2 20 f0 	mul %d15,%d2,12
80004dd8:	60 ff       	mov.a %a15,%d15
80004dda:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004dde:	11 42 00 2f 	addih.a %a2,%a2,61444
80004de2:	00 90       	ret 

80004de4 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004de4:	6d ff b2 ff 	call 80004d48 <IfxAsclin_getIndex>
80004de8:	53 c2 20 f0 	mul %d15,%d2,12
80004dec:	60 ff       	mov.a %a15,%d15
80004dee:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004df2:	11 42 00 2f 	addih.a %a2,%a2,61444
80004df6:	00 90       	ret 

80004df8 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004df8:	9f 04 04 80 	jned %d4,0,80004e00 <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004dfc:	82 02       	mov %d2,0
80004dfe:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004e00:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e04:	ac 50       	st.h [%a5]0,%d15
80004e06:	b0 25       	add.a %a5,2
80004e08:	3c f8       	j 80004df8 <IfxAsclin_read16>

80004e0a <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004e0a:	9f 04 04 80 	jned %d4,0,80004e12 <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004e0e:	82 02       	mov %d2,0
80004e10:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004e12:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e16:	6c 50       	st.w [%a5]0,%d15
80004e18:	b0 45       	add.a %a5,4
80004e1a:	3c f8       	j 80004e0a <IfxAsclin_read32>

80004e1c <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004e1c:	9f 04 04 80 	jned %d4,0,80004e24 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004e20:	82 02       	mov %d2,0
80004e22:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004e24:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e28:	2c 50       	st.b [%a5]0,%d15
80004e2a:	b0 15       	add.a %a5,1
80004e2c:	3c f8       	j 80004e1c <IfxAsclin_read8>

80004e2e <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004e2e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e30:	6d 00 7b 12 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004e34:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e36:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004e38:	6d 00 77 11 	call 80007126 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e3c:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004e40:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e42:	8f 12 40 21 	or %d2,%d2,1
80004e46:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004e4a:	19 f2 30 30 	ld.w %d2,[%a15]240
80004e4e:	8f 12 40 21 	or %d2,%d2,1
80004e52:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004e56:	6d 00 9d 12 	call 80007390 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004e5a:	19 f2 34 30 	ld.w %d2,[%a15]244
80004e5e:	6f 12 fe 7f 	jz.t %d2,1,80004e5a <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004e62:	02 f4       	mov %d4,%d15
80004e64:	6d 00 61 11 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004e68:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004e6c:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004e6e:	8f 12 40 21 	or %d2,%d2,1
80004e72:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004e76:	1d 00 8d 12 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004e7a <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004e7a:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004e7e:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004e82:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004e86:	f6 46       	jnz %d4,80004e92 <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004e88:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004e8c:	bf 0f fe 7f 	jlt %d15,0,80004e88 <IfxAsclin_setClockSource+0xe>
80004e90:	00 90       	ret 
80004e92:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004e96:	ff 0f fe 7f 	jge %d15,0,80004e92 <IfxAsclin_setClockSource+0x18>
80004e9a:	00 90       	ret 

80004e9c <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004e9c:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004ea0:	19 42 0c 10 	ld.w %d2,[%a4]76
80004ea4:	16 1f       	and %d15,31
80004ea6:	8f f2 c1 21 	andn %d2,%d2,31
80004eaa:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004eae:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004eb2:	bf 02 fe 7f 	jlt %d2,0,80004eae <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004eb6:	19 42 14 00 	ld.w %d2,[%a4]20
80004eba:	c2 f4       	add %d4,-1
80004ebc:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004ec0:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004ec4:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004ec8:	02 f4       	mov %d4,%d15
80004eca:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004ece:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004ed2:	19 42 20 00 	ld.w %d2,[%a4]32
80004ed6:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004eda:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004ede:	19 42 14 00 	ld.w %d2,[%a4]20
80004ee2:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004ee6:	59 47 14 00 	st.w [%a4]20,%d7
80004eea:	1d ff c8 ff 	j 80004e7a <IfxAsclin_setClockSource>

80004eee <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004eee:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004ef2:	20 08       	sub.a %sp,8
80004ef4:	8f f2 01 21 	and %d2,%d2,31
80004ef8:	02 5f       	mov %d15,%d5
80004efa:	40 4f       	mov.aa %a15,%a4
80004efc:	02 48       	mov %d8,%d4
80004efe:	02 6a       	mov %d10,%d6
80004f00:	60 7d       	mov.a %a13,%d7
80004f02:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f04:	6d ff 33 ff 	call 80004d6a <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f08:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f0a:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004f0c:	82 4f       	mov %d15,4
80004f0e:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f12:	8f ff 0f 21 	and %d2,%d15,255
80004f16:	59 a2 04 00 	st.w [%sp]4,%d2
80004f1a:	82 16       	mov %d6,1
80004f1c:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004f20:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004f22:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f26:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004f2a:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f2e:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f30:	02 f4       	mov %d4,%d15
80004f32:	6d 00 41 2b 	call 8000a5b4 <__extendsfdf2>
80004f36:	7b 00 f5 73 	movh %d7,16208
80004f3a:	0b 23 10 48 	mov %e4,%d3,%d2
80004f3e:	7b 20 2f 6d 	movh %d6,54002
80004f42:	1b d7 24 76 	addi %d7,%d7,25165
80004f46:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004f4a:	6d 00 58 2c 	call 8000a7fa <__muldf3>
80004f4e:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004f52:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f54:	6d 00 e4 2d 	call 8000ab1c <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004f58:	4b f9 51 50 	div.f %d5,%d9,%d15
80004f5c:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004f60:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004f62:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004f66:	4b 05 61 31 	utof %d3,%d5
80004f6a:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004f6e:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004f72:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004f76:	37 00 61 00 	extr.u %d0,%d0,0,1
80004f7a:	9b 03 00 48 	addih %d4,%d3,32768
80004f7e:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004f82:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004f86:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004f8a:	df 00 45 80 	jne %d0,0,80005014 <IfxAsclin_setBitTiming+0x126>
80004f8e:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80004f92:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004f94:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004f96:	82 28       	mov %d8,2
80004f98:	3b 00 00 71 	mov %d7,4096
80004f9c:	7f 76 3b 80 	jge.u %d6,%d7,80005012 <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80004fa0:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80004fa2:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80004fa4:	df 28 09 00 	jeq %d8,2,80004fb6 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004fa8:	73 8e 0a a0 	mul %d10,%d14,%d8
80004fac:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80004fb0:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004fb2:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80004fb4:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004fb6:	80 34       	mov.d %d4,%a3
80004fb8:	3f b4 25 80 	jlt.u %d4,%d11,80005002 <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80004fbc:	4b 08 61 01 	utof %d0,%d8
80004fc0:	0b 6b 00 40 	add %d4,%d11,%d6
80004fc4:	4b 04 61 d1 	utof %d13,%d4
80004fc8:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80004fcc:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
80004fce:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80004fd2:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80004fd6:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80004fda:	37 0d 61 d0 	extr.u %d13,%d13,0,1
80004fde:	9b 00 00 a8 	addih %d10,%d0,32768
80004fe2:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80004fe6:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80004fea:	37 0d 61 d1 	extr.u %d13,%d13,2,1
80004fee:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80004ff2:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80004ff6:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80004ffa:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004ffe:	c2 1b       	add %d11,1
80005000:	3c db       	j 80004fb6 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
80005002:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005006:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000500a:	f6 04       	jnz %d0,80005012 <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
8000500c:	c2 18       	add %d8,1
8000500e:	42 56       	add %d6,%d5
80005010:	3c c6       	j 80004f9c <IfxAsclin_setBitTiming+0xae>
80005012:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80005014:	19 f3 0c 10 	ld.w %d3,[%a15]76
80005018:	8f f3 c1 31 	andn %d3,%d3,31
8000501c:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80005020:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80005024:	bf 0f fe 7f 	jlt %d15,0,80005020 <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005028:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000502a:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
8000502e:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005032:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005034:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80005036:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005038:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
8000503a:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
8000503e:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80005040:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005042:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80005044:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005046:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
8000504a:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
8000504c:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000504e:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005050:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80005054:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005058:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000505a:	ab 0f 80 72 	sel %d7,%d2,%d15,0
8000505e:	4c f5       	ld.w %d15,[%a15]20
80005060:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80005064:	a6 7f       	or %d15,%d7
80005066:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80005068:	6d ff 09 ff 	call 80004e7a <IfxAsclin_setClockSource>

    return TRUE;
}
8000506c:	82 12       	mov %d2,1
8000506e:	00 90       	ret 

80005070 <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80005070:	9f 04 04 80 	jned %d4,0,80005078 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005074:	82 02       	mov %d2,0
80005076:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80005078:	b9 5f 00 00 	ld.hu %d15,[%a5]0
8000507c:	b0 25       	add.a %a5,2
8000507e:	59 4f 04 10 	st.w [%a4]68,%d15
80005082:	3c f7       	j 80005070 <IfxAsclin_write16>

80005084 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80005084:	9f 04 04 80 	jned %d4,0,8000508c <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80005088:	82 02       	mov %d2,0
8000508a:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
8000508c:	4c 50       	ld.w %d15,[%a5]0
8000508e:	b0 45       	add.a %a5,4
80005090:	59 4f 04 10 	st.w [%a4]68,%d15
80005094:	3c f8       	j 80005084 <IfxAsclin_write32>

80005096 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80005096:	9f 04 04 80 	jned %d4,0,8000509e <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
8000509a:	82 02       	mov %d2,0
8000509c:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
8000509e:	0c 50       	ld.bu %d15,[%a5]0
800050a0:	b0 15       	add.a %a5,1
800050a2:	59 4f 04 10 	st.w [%a4]68,%d15
800050a6:	3c f8       	j 80005096 <IfxAsclin_write8>

800050a8 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
800050a8:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
800050aa:	88 22       	ld.h %d2,[%a15]4
800050ac:	00 90       	ret 

800050ae <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
800050ae:	99 42 08 00 	ld.a %a2,[%a4]8
}
800050b2:	d9 22 1d 00 	lea %a2,[%a2]29
800050b6:	00 90       	ret 

800050b8 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
800050b8:	19 42 10 00 	ld.w %d2,[%a4]16
}
800050bc:	00 90       	ret 

800050be <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
800050be:	09 42 54 09 	ld.d %e2,[%a4]20
}
800050c2:	00 90       	ret 

800050c4 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
800050c4:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
800050c6:	88 c2       	ld.h %d2,[%a15]24
800050c8:	8c f2       	ld.h %d15,[%a15]4
800050ca:	a2 f2       	sub %d2,%d15
}
800050cc:	37 02 50 20 	extr %d2,%d2,0,16
800050d0:	00 90       	ret 

800050d2 <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
800050d2:	99 42 04 00 	ld.a %a2,[%a4]4
}
800050d6:	d9 22 1d 00 	lea %a2,[%a2]29
800050da:	00 90       	ret 

800050dc <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
800050dc:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
800050de:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
800050e0:	ef 0f 0a 00 	jz.t %d15,16,800050f4 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
800050e4:	4c ff       	ld.w %d15,[%a15]60
800050e6:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800050ea:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
800050ec:	0c 4e       	ld.bu %d15,[%a4]14
800050ee:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
800050f2:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
800050f4:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
800050f6:	ef 2f 0a 00 	jz.t %d15,18,8000510a <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
800050fa:	4c ff       	ld.w %d15,[%a15]60
800050fc:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005100:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80005102:	0c 4e       	ld.bu %d15,[%a4]14
80005104:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005108:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
8000510a:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
8000510c:	ef af 0a 00 	jz.t %d15,26,80005120 <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
80005110:	4c ff       	ld.w %d15,[%a15]60
80005112:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005116:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80005118:	0c 4e       	ld.bu %d15,[%a4]14
8000511a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000511e:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
80005120:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
80005122:	ef bf 0a 00 	jz.t %d15,27,80005136 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
80005126:	4c ff       	ld.w %d15,[%a15]60
80005128:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000512c:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000512e:	0c 4e       	ld.bu %d15,[%a4]14
80005130:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80005134:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80005136:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80005138:	ef ef 0a 00 	jz.t %d15,30,8000514c <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
8000513c:	4c ff       	ld.w %d15,[%a15]60
8000513e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005142:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
80005144:	0c 4e       	ld.bu %d15,[%a4]14
80005146:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
8000514a:	2c 4e       	st.b [%a4]14,%d15
8000514c:	00 90       	ret 

8000514e <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
8000514e:	82 0f       	mov %d15,0
80005150:	6c 44       	st.w [%a4]16,%d15
80005152:	00 90       	ret 

80005154 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
80005154:	99 44 08 00 	ld.a %a4,[%a4]8
80005158:	1d 00 df 18 	j 80008316 <Ifx_Fifo_canReadCount>

8000515c <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000515c:	82 f2       	mov %d2,-1
8000515e:	06 f2       	sh %d2,-1
80005160:	ba f4       	eq %d15,%d4,-1
80005162:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
80005166:	40 4f       	mov.aa %a15,%a4
80005168:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
8000516a:	82 f9       	mov %d9,-1
8000516c:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000516e:	ee 16       	jnz %d15,8000519a <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005170:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005174:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005178:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000517c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000517e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005182:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005186:	02 39       	mov %d9,%d3
80005188:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000518c:	76 23       	jz %d2,80005192 <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000518e:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80005192:	0b 69 40 90 	addx %d9,%d9,%d6
80005196:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
8000519a:	c8 14       	ld.a %a4,[%a15]4
8000519c:	02 57       	mov %d7,%d5
8000519e:	c9 44 18 00 	ld.h %d4,[%a4]24
800051a2:	6d 00 fd 19 	call 8000859c <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800051a6:	82 f4       	mov %d4,-1
800051a8:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
800051aa:	f6 23       	jnz %d2,800051b0 <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
800051ac:	82 02       	mov %d2,0
800051ae:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
800051b0:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
800051b2:	4c 23       	ld.w %d15,[%a2]12
800051b4:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
800051b8:	6e 1e       	jz %d15,800051f4 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800051ba:	ba f9       	eq %d15,%d9,-1
800051bc:	0b 84 00 f2 	and.eq %d15,%d4,%d8
800051c0:	ee f9       	jnz %d15,800051b2 <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800051c2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800051c6:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800051ca:	0d 00 40 03 	disable 
800051ce:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800051d0:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800051d4:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800051d8:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800051dc:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800051e0:	76 23       	jz %d2,800051e6 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
800051e2:	0d 00 00 03 	enable 
800051e6:	0b 8f 00 21 	eq %d2,%d15,%d8
800051ea:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
800051ee:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800051f2:	3c dc       	j 800051aa <IfxAsclin_Asc_flushTx+0x4e>
800051f4:	82 12       	mov %d2,1
    }

    return result;
}
800051f6:	00 90       	ret 

800051f8 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
800051f8:	99 44 04 00 	ld.a %a4,[%a4]4
800051fc:	1d 00 d0 19 	j 8000859c <Ifx_Fifo_canWriteCount>

80005200 <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
80005200:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005202:	4c f4       	ld.w %d15,[%a15]16
80005204:	96 01       	or %d15,1
80005206:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005208:	99 44 08 00 	ld.a %a4,[%a4]8
8000520c:	1d 00 ad 19 	j 80008566 <Ifx_Fifo_clear>

80005210 <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
80005210:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
80005212:	99 44 04 00 	ld.a %a4,[%a4]4
80005216:	6d 00 a8 19 	call 80008566 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
8000521a:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
8000521c:	4c f3       	ld.w %d15,[%a15]12
8000521e:	96 01       	or %d15,1
80005220:	68 3f       	st.w [%a15]12,%d15
80005222:	00 90       	ret 

80005224 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005224:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005228:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000522c:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000522e:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005230:	6d 00 e0 18 	call 800083f0 <Ifx_Fifo_read>

    *count -= left;
80005234:	8c f0       	ld.h %d15,[%a15]0
80005236:	a2 2f       	sub %d15,%d2
80005238:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
8000523a:	8b 02 00 22 	eq %d2,%d2,0
8000523e:	00 90       	ret 

80005240 <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
80005240:	20 18       	sub.a %sp,24
80005242:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005244:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005248:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000524c:	0d 00 40 03 	disable 
80005250:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005252:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005256:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000525a:	02 52       	mov %d2,%d5
8000525c:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005260:	76 43       	jz %d4,80005266 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
80005262:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005266:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
8000526a:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
8000526c:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
8000526e:	c9 44 04 00 	ld.h %d4,[%a4]4
80005272:	c2 1f       	add %d15,1
80005274:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005276:	df 04 32 00 	jeq %d4,0,800052da <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
8000527a:	0c ff       	ld.bu %d15,[%a15]15
8000527c:	6e 03       	jz %d15,80005282 <IfxAsclin_Asc_isrTransmit+0x42>
8000527e:	9e 1d       	jeq %d15,1,800052b8 <IfxAsclin_Asc_isrTransmit+0x78>
80005280:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005282:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
80005284:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005286:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
8000528a:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
8000528c:	d2 06       	mov %e6,0
8000528e:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005292:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80005296:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
80005298:	0c a7       	ld.bu %d15,[%sp]7
8000529a:	8b 0f 01 f1 	rsub %d15,%d15,16
8000529e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800052a2:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800052a6:	37 0f 50 40 	extr %d4,%d15,0,16
800052aa:	6d 00 a3 18 	call 800083f0 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
800052ae:	c8 04       	ld.a %a4,[%a15]0
800052b0:	d9 a5 08 00 	lea %a5,[%sp]8
800052b4:	02 f4       	mov %d4,%d15
800052b6:	3c 10       	j 800052d6 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800052b8:	d2 06       	mov %e6,0
800052ba:	d9 a5 08 00 	lea %a5,[%sp]8
800052be:	3b c0 00 40 	mov %d4,12
800052c2:	6d 00 97 18 	call 800083f0 <Ifx_Fifo_read>

            ascData = packedData.data;
800052c6:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052ca:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
800052cc:	d9 a5 18 00 	lea %a5,[%sp]24
800052d0:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052d4:	82 14       	mov %d4,1
        }
        break;
800052d6:	1d ff e0 fe 	j 80005096 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
800052da:	28 c4       	st.b [%a15]12,%d4
800052dc:	00 90       	ret 

800052de <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052de:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
800052e0:	20 20       	sub.a %sp,32
800052e2:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052e4:	6e 34       	jz %d15,8000534c <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
800052e6:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052e8:	df 1f 45 80 	jne %d15,1,80005372 <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
800052ec:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
800052ee:	4c 24       	ld.w %d15,[%a2]16
800052f0:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800052f4:	6e 2b       	jz %d15,8000534a <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800052f6:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800052fa:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800052fe:	0d 00 40 03 	disable 
80005302:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005304:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005308:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000530c:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005310:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005314:	76 33       	jz %d3,8000531a <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
80005316:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
8000531a:	c8 04       	ld.a %a4,[%a15]0
8000531c:	d9 a5 10 00 	lea %a5,[%sp]16
80005320:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
80005322:	78 02       	st.w [%sp]8,%d15
80005324:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005328:	6d ff 7a fd 	call 80004e1c <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000532c:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000532e:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005332:	d2 06       	mov %e6,0
80005334:	d9 a5 04 00 	lea %a5,[%sp]4
80005338:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000533c:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000533e:	6d 00 a7 19 	call 8000868c <Ifx_Fifo_write>
80005342:	df 02 d5 7f 	jeq %d2,0,800052ec <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005346:	28 d8       	st.b [%a15]13,%d8
80005348:	3c d2       	j 800052ec <IfxAsclin_Asc_isrReceive+0xe>
8000534a:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
8000534c:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
8000534e:	d9 a5 10 00 	lea %a5,[%sp]16
80005352:	4c 44       	ld.w %d15,[%a4]16
80005354:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005358:	02 f4       	mov %d4,%d15
8000535a:	6d ff 61 fd 	call 80004e1c <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
8000535e:	c8 24       	ld.a %a4,[%a15]8
80005360:	d2 06       	mov %e6,0
80005362:	d9 a5 10 00 	lea %a5,[%sp]16
80005366:	02 f4       	mov %d4,%d15
80005368:	6d 00 92 19 	call 8000868c <Ifx_Fifo_write>
8000536c:	76 23       	jz %d2,80005372 <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
8000536e:	82 1f       	mov %d15,1
80005370:	28 df       	st.b [%a15]13,%d15
80005372:	00 90       	ret 

80005374 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005374:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005376:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005378:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
8000537a:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
8000537c:	82 f4       	mov %d4,-1
8000537e:	40 f4       	mov.aa %a4,%a15
80005380:	d9 a5 05 00 	lea %a5,[%sp]5
80005384:	d9 a6 06 00 	lea %a6,[%sp]6
80005388:	9b 04 00 58 	addih %d5,%d4,32768
8000538c:	6d ff 4c ff 	call 80005224 <IfxAsclin_Asc_read>
80005390:	df 12 f6 ff 	jne %d2,1,8000537c <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
80005394:	39 a2 05 00 	ld.bu %d2,[%sp]5
80005398:	00 90       	ret 

8000539a <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
8000539a:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
8000539c:	6d 00 c5 0f 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053a0:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800053a2:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053a4:	6d 00 c1 0e 	call 80007126 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
800053a8:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
800053aa:	02 f4       	mov %d4,%d15
800053ac:	8f 12 40 21 	or %d2,%d2,1
800053b0:	68 02       	st.w [%a15]0,%d2
800053b2:	1d 00 ef 0f 	j 80007390 <IfxScuWdt_setCpuEndinit>

800053b6 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
800053b6:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
800053b8:	40 4e       	mov.aa %a14,%a4
800053ba:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
800053bc:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
800053be:	40 f4       	mov.aa %a4,%a15
800053c0:	6d ff 71 fc 	call 80004ca2 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
800053c4:	40 f4       	mov.aa %a4,%a15
800053c6:	82 04       	mov %d4,0
800053c8:	6d ff 59 fd 	call 80004e7a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800053cc:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800053ce:	40 f4       	mov.aa %a4,%a15
800053d0:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
800053d4:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
800053d6:	8c c4       	ld.h %d15,[%a12]8
800053d8:	48 52       	ld.w %d2,[%a15]20
800053da:	c2 ff       	add %d15,-1
800053dc:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
800053e0:	68 5f       	st.w [%a15]20,%d15
800053e2:	39 c4 28 00 	ld.bu %d4,[%a12]40
800053e6:	6d ff 4a fd 	call 80004e7a <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800053ea:	40 f4       	mov.aa %a4,%a15
800053ec:	19 c4 04 00 	ld.w %d4,[%a12]4
800053f0:	39 c5 0a 00 	ld.bu %d5,[%a12]10
800053f4:	39 c6 0d 00 	ld.bu %d6,[%a12]13
800053f8:	39 c7 0c 00 	ld.bu %d7,[%a12]12
800053fc:	6d ff 79 fd 	call 80004eee <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005400:	40 f4       	mov.aa %a4,%a15
80005402:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005404:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005406:	6d ff 3a fd 	call 80004e7a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
8000540a:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000540e:	7b 00 00 f1 	movh %d15,4096
80005412:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005416:	4c f1       	ld.w %d15,[%a15]4
80005418:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
8000541c:	a6 2f       	or %d15,%d2
8000541e:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
80005420:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005424:	7b 00 00 f4 	movh %d15,16384
80005428:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000542c:	4c f6       	ld.w %d15,[%a15]24
8000542e:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
80005432:	a6 2f       	or %d15,%d2
80005434:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
80005436:	48 62       	ld.w %d2,[%a15]24
80005438:	39 cf 12 00 	ld.bu %d15,[%a12]18
8000543c:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
80005440:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
80005442:	48 62       	ld.w %d2,[%a15]24
80005444:	0c cf       	ld.bu %d15,[%a12]15
80005446:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
8000544a:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
8000544c:	48 62       	ld.w %d2,[%a15]24
8000544e:	39 cf 11 00 	ld.bu %d15,[%a12]17
80005452:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
80005456:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
80005458:	48 72       	ld.w %d2,[%a15]28
8000545a:	39 cf 13 00 	ld.bu %d15,[%a12]19
8000545e:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
80005462:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80005464:	48 32       	ld.w %d2,[%a15]12
80005466:	39 cf 16 00 	ld.bu %d15,[%a12]22
8000546a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000546e:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
80005470:	48 42       	ld.w %d2,[%a15]16
80005472:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005476:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000547a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
8000547c:	48 62       	ld.w %d2,[%a15]24
8000547e:	0c ce       	ld.bu %d15,[%a12]14
80005480:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005484:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005486:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000548a:	da 0f       	mov %d15,15
8000548c:	0b f2 90 21 	min.u %d2,%d2,%d15
80005490:	48 33       	ld.w %d3,[%a15]12
80005492:	37 23 04 24 	insert %d2,%d3,%d2,8,4
80005496:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005498:	39 c2 19 00 	ld.bu %d2,[%a12]25
8000549c:	0b f2 90 f1 	min.u %d15,%d2,%d15
800054a0:	48 42       	ld.w %d2,[%a15]16
800054a2:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
800054a6:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800054a8:	39 cf 10 00 	ld.bu %d15,[%a12]16
800054ac:	48 62       	ld.w %d2,[%a15]24
800054ae:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800054b2:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
800054b4:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
800054b8:	bd 0d 81 00 	jz.a %a13,800055ba <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
800054bc:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
800054be:	6e 27       	jz %d15,8000550c <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
800054c0:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800054c2:	79 d5 04 00 	ld.b %d5,[%a13]4
800054c6:	99 24 04 00 	ld.a %a4,[%a2]4
800054ca:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800054ce:	bd 04 1f 00 	jz.a %a4,8000550c <IfxAsclin_Asc_initModule+0x156>
800054d2:	39 24 08 00 	ld.bu %d4,[%a2]8
800054d6:	8f f5 0f 51 	and %d5,%d5,255
800054da:	6d 00 ba 03 	call 80005c4e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
800054de:	60 f3       	mov.a %a3,%d15
800054e0:	02 85       	mov %d5,%d8
800054e2:	99 34 04 00 	ld.a %a4,[%a3]4
800054e6:	39 34 08 00 	ld.bu %d4,[%a3]8
800054ea:	6d 00 30 04 	call 80005d4a <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
800054ee:	60 f3       	mov.a %a3,%d15
800054f0:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
800054f2:	19 22 04 00 	ld.w %d2,[%a2]4
800054f6:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
800054fa:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
800054fe:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
80005500:	0c 3c       	ld.bu %d15,[%a3]12
80005502:	19 22 04 00 	ld.w %d2,[%a2]4
80005506:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000550a:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
8000550c:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000550e:	6e 20       	jz %d15,8000554e <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
80005510:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
80005512:	79 d5 0c 00 	ld.b %d5,[%a13]12
80005516:	99 24 04 00 	ld.a %a4,[%a2]4
8000551a:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000551e:	bd 04 18 00 	jz.a %a4,8000554e <IfxAsclin_Asc_initModule+0x198>
80005522:	39 24 08 00 	ld.bu %d4,[%a2]8
80005526:	8f f5 0f 51 	and %d5,%d5,255
8000552a:	6d 00 92 03 	call 80005c4e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000552e:	60 f3       	mov.a %a3,%d15
80005530:	02 85       	mov %d5,%d8
80005532:	99 34 04 00 	ld.a %a4,[%a3]4
80005536:	39 34 08 00 	ld.bu %d4,[%a3]8
8000553a:	6d 00 08 04 	call 80005d4a <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000553e:	60 f3       	mov.a %a3,%d15
80005540:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
80005542:	0c 3c       	ld.bu %d15,[%a3]12
80005544:	19 22 04 00 	ld.w %d2,[%a2]4
80005548:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
8000554c:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
8000554e:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
80005550:	6e 1a       	jz %d15,80005584 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80005552:	60 f2       	mov.a %a2,%d15
80005554:	39 d2 14 00 	ld.bu %d2,[%a13]20
80005558:	39 23 0c 00 	ld.bu %d3,[%a2]12
8000555c:	99 24 04 00 	ld.a %a4,[%a2]4
80005560:	0f 23 a0 50 	or %d5,%d3,%d2
80005564:	39 24 08 00 	ld.bu %d4,[%a2]8
80005568:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
8000556c:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005570:	6d 00 6f 03 	call 80005c4e <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
80005574:	60 f3       	mov.a %a3,%d15
80005576:	02 85       	mov %d5,%d8
80005578:	99 34 04 00 	ld.a %a4,[%a3]4
8000557c:	39 34 08 00 	ld.bu %d4,[%a3]8
80005580:	6d 00 e5 03 	call 80005d4a <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005584:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005586:	6e 1a       	jz %d15,800055ba <IfxAsclin_Asc_initModule+0x204>
80005588:	60 f2       	mov.a %a2,%d15
8000558a:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000558e:	39 23 0c 00 	ld.bu %d3,[%a2]12
80005592:	99 24 04 00 	ld.a %a4,[%a2]4
80005596:	0f 23 a0 50 	or %d5,%d3,%d2
8000559a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000559e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800055a2:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055a6:	6d 00 54 03 	call 80005c4e <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800055aa:	60 f3       	mov.a %a3,%d15
800055ac:	02 85       	mov %d5,%d8
800055ae:	99 34 04 00 	ld.a %a4,[%a3]4
800055b2:	39 34 08 00 	ld.bu %d4,[%a3]8
800055b6:	6d 00 ca 03 	call 80005d4a <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
800055ba:	40 f4       	mov.aa %a4,%a15
800055bc:	39 c4 28 00 	ld.bu %d4,[%a12]40
800055c0:	6d ff 5d fc 	call 80004e7a <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
800055c4:	82 0f       	mov %d15,0
800055c6:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
800055ca:	82 f2       	mov %d2,-1
800055cc:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
800055ce:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
800055d0:	4c ca       	ld.w %d15,[%a12]40
800055d2:	2e 87       	jz.t %d15,8,800055e0 <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800055d4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055d8:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800055dc:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
800055e0:	4c ca       	ld.w %d15,[%a12]40
800055e2:	2e 97       	jz.t %d15,9,800055f0 <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
800055e4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055e8:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800055ec:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
800055f0:	4c ca       	ld.w %d15,[%a12]40
800055f2:	2e a7       	jz.t %d15,10,80005600 <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
800055f4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055f8:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
800055fc:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
80005600:	4c ca       	ld.w %d15,[%a12]40
80005602:	2e b7       	jz.t %d15,11,80005610 <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005604:	19 ff 00 10 	ld.w %d15,[%a15]64
80005608:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000560c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
80005610:	4c ca       	ld.w %d15,[%a12]40
80005612:	2e c7       	jz.t %d15,12,80005620 <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80005614:	19 ff 00 10 	ld.w %d15,[%a15]64
80005618:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000561c:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
80005620:	82 0f       	mov %d15,0
80005622:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005624:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
80005626:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005628:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
8000562c:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
8000562e:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
80005632:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005634:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
80005638:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
8000563a:	76 34       	jz %d3,80005642 <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
8000563c:	ba 13       	eq %d15,%d3,1
8000563e:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
80005642:	99 c4 2c 00 	ld.a %a4,[%a12]44
80005646:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000564a:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
8000564c:	bc 44       	jz.a %a4,80005654 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000564e:	6d 00 36 16 	call 800082ba <Ifx_Fifo_init>
80005652:	3c 03       	j 80005658 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005654:	6d 00 50 16 	call 800082f4 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
80005658:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
8000565c:	b5 e2 04 00 	st.a [%a14]4,%a2
80005660:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005664:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
80005666:	bc 44       	jz.a %a4,8000566e <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005668:	6d 00 29 16 	call 800082ba <Ifx_Fifo_init>
8000566c:	3c 03       	j 80005672 <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000566e:	6d 00 43 16 	call 800082f4 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
80005672:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005676:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
8000567a:	8b 3f 00 82 	eq %d8,%d15,3
8000567e:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
80005680:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005684:	8b 02 00 35 	or.ne %d3,%d2,0
80005688:	df 03 1e 00 	jeq %d3,0,800056c4 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
8000568c:	40 f4       	mov.aa %a4,%a15
8000568e:	6d ff a1 fb 	call 80004dd0 <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005692:	54 22       	ld.w %d2,[%a2]
80005694:	39 c3 1e 00 	ld.bu %d3,[%a12]30
80005698:	8f f2 cf 21 	andn %d2,%d2,255
8000569c:	a6 32       	or %d2,%d3
8000569e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800056a0:	54 22       	ld.w %d2,[%a2]
800056a2:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056a6:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800056a8:	54 22       	ld.w %d2,[%a2]
800056aa:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800056ae:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800056b0:	19 f2 00 10 	ld.w %d2,[%a15]64
800056b4:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800056b8:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800056bc:	54 22       	ld.w %d2,[%a2]
800056be:	b7 f2 01 25 	insert %d2,%d2,15,10,1
800056c2:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
800056c4:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
800056c8:	8b 02 00 85 	or.ne %d8,%d2,0
800056cc:	df 08 1e 00 	jeq %d8,0,80005708 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
800056d0:	40 f4       	mov.aa %a4,%a15
800056d2:	6d ff 89 fb 	call 80004de4 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800056d6:	54 22       	ld.w %d2,[%a2]
800056d8:	39 c3 1c 00 	ld.bu %d3,[%a12]28
800056dc:	8f f2 cf 21 	andn %d2,%d2,255
800056e0:	a6 32       	or %d2,%d3
800056e2:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800056e4:	54 22       	ld.w %d2,[%a2]
800056e6:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056ea:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800056ec:	54 22       	ld.w %d2,[%a2]
800056ee:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800056f2:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
800056f4:	19 f2 00 10 	ld.w %d2,[%a15]64
800056f8:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
800056fc:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005700:	54 22       	ld.w %d2,[%a2]
80005702:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005706:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005708:	b9 c2 20 00 	ld.hu %d2,[%a12]32
8000570c:	df 02 1e 00 	jeq %d2,0,80005748 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
80005710:	40 f4       	mov.aa %a4,%a15
80005712:	6d ff 55 fb 	call 80004dbc <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005716:	54 22       	ld.w %d2,[%a2]
80005718:	39 c3 20 00 	ld.bu %d3,[%a12]32
8000571c:	8f f2 cf 21 	andn %d2,%d2,255
80005720:	a6 32       	or %d2,%d3
80005722:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005724:	54 22       	ld.w %d2,[%a2]
80005726:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
8000572a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000572c:	4c 20       	ld.w %d15,[%a2]0
8000572e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80005732:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005734:	19 ff 00 10 	ld.w %d15,[%a15]64
80005738:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000573c:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005740:	4c 20       	ld.w %d15,[%a2]0
80005742:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80005746:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
80005748:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
8000574a:	02 92       	mov %d2,%d9
8000574c:	96 02       	or %d15,2
8000574e:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
80005750:	4c f3       	ld.w %d15,[%a15]12
80005752:	96 02       	or %d15,2
80005754:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005756:	4c f4       	ld.w %d15,[%a15]16
80005758:	96 01       	or %d15,1
8000575a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
8000575c:	4c f3       	ld.w %d15,[%a15]12
8000575e:	96 01       	or %d15,1
80005760:	68 3f       	st.w [%a15]12,%d15
80005762:	00 90       	ret 

80005764 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005764:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005766:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
8000576a:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000576e:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
80005770:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
80005772:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005776:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
8000577a:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000577e:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
80005780:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80005784:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005788:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
8000578c:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000578e:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
80005792:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
80005796:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80005798:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
8000579c:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
8000579e:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
800057a2:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
800057a6:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800057aa:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
800057ac:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
800057b0:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
800057b4:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800057b8:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800057bc:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800057be:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
800057c0:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800057c2:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800057c6:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
800057c8:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
800057ca:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
800057ce:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800057d2:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
800057d6:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
800057da:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057de:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057e2:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
800057e6:	e9 4f 39 00 	st.b [%a4]57,%d15
800057ea:	00 90       	ret 

800057ec <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800057ec:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
800057ee:	20 10       	sub.a %sp,16
800057f0:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800057f2:	ee 20       	jnz %d15,80005832 <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800057f4:	99 44 04 00 	ld.a %a4,[%a4]4
800057f8:	8c 42       	ld.h %d15,[%a4]4
800057fa:	6e 1c       	jz %d15,80005832 <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
800057fc:	82 1f       	mov %d15,1
800057fe:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
80005800:	0c ff       	ld.bu %d15,[%a15]15
80005802:	6e 0c       	jz %d15,8000581a <IfxAsclin_Asc_initiateTransmission+0x2e>
80005804:	de 11       	jne %d15,1,80005826 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005806:	d2 06       	mov %e6,0
80005808:	d9 a5 04 00 	lea %a5,[%sp]4
8000580c:	3b c0 00 40 	mov %d4,12
80005810:	6d 00 f0 15 	call 800083f0 <Ifx_Fifo_read>
                data = packedData.data;
80005814:	0c ac       	ld.bu %d15,[%sp]12
80005816:	2c a3       	st.b [%sp]3,%d15
80005818:	3c 07       	j 80005826 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
8000581a:	d2 06       	mov %e6,0
8000581c:	d9 a5 03 00 	lea %a5,[%sp]3
80005820:	82 14       	mov %d4,1
80005822:	6d 00 e7 15 	call 800083f0 <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
80005826:	c8 04       	ld.a %a4,[%a15]0
80005828:	d9 a5 03 00 	lea %a5,[%sp]3
8000582c:	82 14       	mov %d4,1
8000582e:	6d ff 34 fc 	call 80005096 <IfxAsclin_write8>
80005832:	00 90       	ret 

80005834 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005834:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
80005836:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005838:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
8000583c:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000583e:	0b 45 10 88 	mov %e8,%d5,%d4
80005842:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005844:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
80005848:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
8000584a:	df 03 25 00 	jeq %d3,0,80005894 <IfxAsclin_Asc_write+0x60>
8000584e:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005850:	ee 13       	jnz %d15,80005876 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005852:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005856:	7f 3f 10 00 	jge %d15,%d3,80005876 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
8000585a:	0b 89 10 68 	mov %e6,%d9,%d8
8000585e:	6d 00 17 17 	call 8000868c <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
80005862:	40 f4       	mov.aa %a4,%a15
80005864:	6d ff c4 ff 	call 800057ec <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005868:	94 c4       	ld.h %d4,[%a12]
8000586a:	c8 14       	ld.a %a4,[%a15]4
8000586c:	a2 f4       	sub %d4,%d15
8000586e:	10 d5       	addsc.a %a5,%a13,%d15,0
80005870:	37 04 50 40 	extr %d4,%d4,0,16
80005874:	3c 03       	j 8000587a <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005876:	40 d5       	mov.aa %a5,%a13
80005878:	02 34       	mov %d4,%d3
8000587a:	0b 89 10 68 	mov %e6,%d9,%d8
8000587e:	6d 00 07 17 	call 8000868c <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
80005882:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005884:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
80005886:	6d ff b3 ff 	call 800057ec <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
8000588a:	94 c2       	ld.h %d2,[%a12]
8000588c:	a2 f2       	sub %d2,%d15
8000588e:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
80005890:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
80005894:	00 90       	ret 

80005896 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
80005896:	20 10       	sub.a %sp,16
80005898:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
8000589c:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
8000589e:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058a0:	d9 a5 07 00 	lea %a5,[%sp]7
800058a4:	d9 a6 0e 00 	lea %a6,[%sp]14
800058a8:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800058ac:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
800058ae:	1d ff c3 ff 	j 80005834 <IfxAsclin_Asc_write>

800058b2 <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
800058b2:	40 42       	mov.aa %a2,%a4
800058b4:	82 0f       	mov %d15,0
800058b6:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
800058ba:	24 2f       	st.b [%a2+],%d15
800058bc:	fc ff       	loop %a15,800058ba <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
800058be:	7b 00 00 f8 	movh %d15,32768
800058c2:	1b 4f 83 f5 	addi %d15,%d15,22580
800058c6:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
800058c8:	7b 00 00 f8 	movh %d15,32768
800058cc:	1b 4f 22 f5 	addi %d15,%d15,21028
800058d0:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
800058d2:	7b 00 00 f8 	movh %d15,32768
800058d6:	1b 8f 0a f5 	addi %d15,%d15,20648
800058da:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
800058dc:	7b 00 00 f8 	movh %d15,32768
800058e0:	1b ef 0a f5 	addi %d15,%d15,20654
800058e4:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
800058e6:	7b 00 00 f8 	movh %d15,32768
800058ea:	1b 4f 0c f5 	addi %d15,%d15,20676
800058ee:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
800058f0:	7b 00 00 f8 	movh %d15,32768
800058f4:	1b 2f 0d f5 	addi %d15,%d15,20690
800058f8:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
800058fa:	7b 00 00 f8 	movh %d15,32768
800058fe:	1b 4f 15 f5 	addi %d15,%d15,20820
80005902:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005904:	7b 00 00 f8 	movh %d15,32768
80005908:	1b 8f 1f f5 	addi %d15,%d15,20984
8000590c:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000590e:	7b 00 00 f8 	movh %d15,32768
80005912:	1b cf 15 f5 	addi %d15,%d15,20828
80005916:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005918:	7b 00 00 f8 	movh %d15,32768
8000591c:	1b 0f 21 f5 	addi %d15,%d15,21008
80005920:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
80005922:	7b 00 00 f8 	movh %d15,32768
80005926:	1b 0f 20 f5 	addi %d15,%d15,20992
8000592a:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
8000592c:	7b 00 00 f8 	movh %d15,32768
80005930:	1b ef 2d f5 	addi %d15,%d15,21214
80005934:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80005936:	7b 00 00 f8 	movh %d15,32768
8000593a:	1b 0f 24 f5 	addi %d15,%d15,21056
8000593e:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
80005940:	7b 00 00 f8 	movh %d15,32768
80005944:	1b cf 0d f5 	addi %d15,%d15,20700
80005948:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
8000594a:	7b 00 00 f8 	movh %d15,32768
8000594e:	1b 8f 0b f5 	addi %d15,%d15,20664
80005952:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80005956:	7b 00 00 f8 	movh %d15,32768
8000595a:	1b ef 0b f5 	addi %d15,%d15,20670
8000595e:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
80005962:	7b 00 00 f8 	movh %d15,32768
80005966:	1b ef 14 f5 	addi %d15,%d15,20814
8000596a:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
8000596e:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
80005970:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
80005972:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
80005974:	82 12       	mov %d2,1
80005976:	00 90       	ret 

80005978 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005978:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
8000597c:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
8000597e:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005980:	d9 22 9c 50 	lea %a2,[%a2]2396 <8000095c <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005984:	8f f5 0f f1 	and %d15,%d5,255
80005988:	8b 02 00 32 	eq %d3,%d2,0
8000598c:	8b 0f 61 34 	and.lt.u %d3,%d15,16
80005990:	76 3a       	jz %d3,800059a4 <IfxPort_getAddress+0x2c>
80005992:	02 5f       	mov %d15,%d5
80005994:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005996:	d0 2f       	addsc.a %a15,%a2,%d15,3
80005998:	82 02       	mov %d2,0
8000599a:	4c f1       	ld.w %d15,[%a15]4
8000599c:	7e 42       	jne %d15,%d4,800059a0 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
8000599e:	48 02       	ld.w %d2,[%a15]0
800059a0:	c2 15       	add %d5,1
800059a2:	3c f1       	j 80005984 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
800059a4:	60 22       	mov.a %a2,%d2
800059a6:	00 90       	ret 

800059a8 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800059a8:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800059ac:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800059ae:	d9 33 9c 50 	lea %a3,[%a3]2396 <8000095c <IfxPort_cfg_indexMap>>
800059b2:	a0 ff       	mov.a %a15,15
800059b4:	d0 32       	addsc.a %a2,%a3,%d15,3
800059b6:	d4 25       	ld.a %a5,[%a2]
800059b8:	7d 45 05 80 	jne.a %a5,%a4,800059c2 <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
800059bc:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
800059c0:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800059c2:	c2 1f       	add %d15,1
800059c4:	fc f8       	loop %a15,800059b4 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
800059c6:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
800059c8:	00 90       	ret 

800059ca <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
800059ca:	40 4f       	mov.aa %a15,%a4
800059cc:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059ce:	6d 00 ac 0c 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
800059d2:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059d4:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
800059d6:	6d 00 a8 0b 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
800059da:	82 12       	mov %d2,1
800059dc:	d9 f4 10 10 	lea %a4,[%a15]80
800059e0:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
800059e4:	d2 06       	mov %e6,0
800059e6:	02 27       	mov %d7,%d2
800059e8:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
800059ec:	02 f4       	mov %d4,%d15
800059ee:	1d 00 d1 0c 	j 80007390 <IfxScuWdt_setCpuEndinit>

800059f2 <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
800059f2:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
800059f6:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
800059f8:	d9 33 9c 70 	lea %a3,[%a3]2524 <800009dc <IfxPort_cfg_esrMasks>>
800059fc:	a0 ff       	mov.a %a15,15
800059fe:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a00:	d4 25       	ld.a %a5,[%a2]
80005a02:	7d 54 0c 80 	jne.a %a4,%a5,80005a1a <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a06:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a0a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a0c:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005a10:	6e 08       	jz %d15,80005a20 <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005a12:	6d ff dc ff 	call 800059ca <IfxPort_resetESR>
                result = TRUE;
80005a16:	82 12       	mov %d2,1
80005a18:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a1a:	c2 1f       	add %d15,1
80005a1c:	fc f1       	loop %a15,800059fe <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a1e:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005a20:	00 90       	ret 

80005a22 <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
80005a22:	40 4f       	mov.aa %a15,%a4
80005a24:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a26:	6d 00 80 0c 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a2a:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a2c:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a2e:	6d 00 7c 0b 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005a32:	82 12       	mov %d2,1
80005a34:	0f 82 00 20 	sh %d2,%d2,%d8
80005a38:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a3c:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a40:	02 27       	mov %d7,%d2
80005a42:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005a46:	02 f4       	mov %d4,%d15
80005a48:	1d 00 a4 0c 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005a4c <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005a4c:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a4e:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005a52:	40 4c       	mov.aa %a12,%a4
80005a54:	02 48       	mov %d8,%d4
80005a56:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005a5a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a5c:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a5e:	d9 dd 9c 70 	lea %a13,[%a13]2524 <800009dc <IfxPort_cfg_esrMasks>>
80005a62:	d0 df       	addsc.a %a15,%a13,%d15,3
80005a64:	c8 02       	ld.a %a2,[%a15]0
80005a66:	7d 2c 0b 80 	jne.a %a12,%a2,80005a7c <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a6a:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005a6e:	26 93       	and %d3,%d9
80005a70:	76 36       	jz %d3,80005a7c <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005a72:	40 c4       	mov.aa %a4,%a12
80005a74:	02 84       	mov %d4,%d8
80005a76:	6d ff d6 ff 	call 80005a22 <IfxPort_setESR>
                result = TRUE;
80005a7a:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a7c:	c2 1f       	add %d15,1
80005a7e:	8b 0f 21 32 	ne %d3,%d15,16
80005a82:	df 03 f0 ff 	jne %d3,0,80005a62 <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
80005a86:	00 90       	ret 

80005a88 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a88:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
80005a8a:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a8c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005a8e:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a90:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005a92:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a94:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005a96:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a98:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005a9a:	78 07       	st.w [%sp]28,%d15
80005a9c:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005aa0:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005aa4:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005aa8:	3b 80 0f 70 	mov %d7,248
80005aac:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005ab0:	9f 0f 07 80 	jned %d15,0,80005abe <IfxPort_setGroupModeInput+0x36>
80005ab4:	d9 44 10 00 	lea %a4,[%a4]16
80005ab8:	82 0f       	mov %d15,0
80005aba:	a0 3f       	mov.a %a15,3
80005abc:	3c 1e       	j 80005af8 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005abe:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005ac2:	df 02 19 00 	jeq %d2,0,80005af4 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ac6:	8f 34 c0 31 	andn %d3,%d4,3
80005aca:	60 32       	mov.a %a2,%d3
80005acc:	d9 af 20 00 	lea %a15,[%sp]32
80005ad0:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005ad2:	8f 34 00 21 	and %d2,%d4,3
80005ad6:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ad8:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005adc:	0f 27 00 30 	sh %d3,%d7,%d2
80005ae0:	a6 03       	or %d3,%d0
80005ae2:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005ae6:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005aea:	0f 26 00 20 	sh %d2,%d6,%d2
80005aee:	a6 32       	or %d2,%d3
80005af0:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005af4:	c2 14       	add %d4,1
80005af6:	3c dd       	j 80005ab0 <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005af8:	d9 a3 20 00 	lea %a3,[%sp]32
80005afc:	90 32       	addsc.a %a2,%a3,%d15,2
80005afe:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b02:	76 47       	jz %d4,80005b10 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b04:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b08:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b0a:	02 43       	mov %d3,%d4
80005b0c:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005b10:	c2 1f       	add %d15,1
80005b12:	b0 44       	add.a %a4,4
80005b14:	fc f2       	loop %a15,80005af8 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005b16:	00 90       	ret 

80005b18 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b18:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005b1a:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b1c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b1e:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b20:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b22:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b24:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b26:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b28:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b2a:	78 07       	st.w [%sp]28,%d15
80005b2c:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b30:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005b34:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b38:	3b 80 0f 00 	mov %d0,248
80005b3c:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b40:	9f 0f 07 80 	jned %d15,0,80005b4e <IfxPort_setGroupModeOutput+0x36>
80005b44:	d9 44 10 00 	lea %a4,[%a4]16
80005b48:	82 0f       	mov %d15,0
80005b4a:	a0 3f       	mov.a %a15,3
80005b4c:	3c 1f       	j 80005b8a <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005b4e:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b52:	df 02 1a 00 	jeq %d2,0,80005b86 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005b56:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b5a:	d9 a2 20 00 	lea %a2,[%sp]32
80005b5e:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005b62:	8f 34 00 21 	and %d2,%d4,3
80005b66:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005b68:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b6a:	0f 20 00 70 	sh %d7,%d0,%d2
80005b6e:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005b72:	0f 23 00 20 	sh %d2,%d3,%d2
80005b76:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b7a:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005b7c:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b7e:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005b82:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b86:	c2 14       	add %d4,1
80005b88:	3c dc       	j 80005b40 <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005b8a:	d9 a3 20 00 	lea %a3,[%sp]32
80005b8e:	90 32       	addsc.a %a2,%a3,%d15,2
80005b90:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b94:	76 47       	jz %d4,80005ba2 <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b96:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b9a:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b9c:	02 43       	mov %d3,%d4
80005b9e:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005ba2:	c2 1f       	add %d15,1
80005ba4:	b0 44       	add.a %a4,4
80005ba6:	fc f2       	loop %a15,80005b8a <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005ba8:	00 90       	ret 

80005baa <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
80005baa:	20 10       	sub.a %sp,16
80005bac:	02 4f       	mov %d15,%d4
80005bae:	02 5a       	mov %d10,%d5
80005bb0:	40 4c       	mov.aa %a12,%a4
80005bb2:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bb4:	6d 00 b9 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005bb8:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bba:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005bbc:	6d 00 b5 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005bc0:	82 03       	mov %d3,0
80005bc2:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005bc4:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005bc8:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005bcc:	59 a3 0c 00 	st.w [%sp]12,%d3
80005bd0:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005bd4:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005bd8:	0f fa 00 50 	sh %d5,%d10,%d15
80005bdc:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005be0:	9f 03 03 80 	jned %d3,0,80005be6 <IfxPort_setGroupPadDriver+0x3c>
80005be4:	3c 1d       	j 80005c1e <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005be6:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005bea:	df 02 18 00 	jeq %d2,0,80005c1a <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005bee:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005bf2:	d9 a2 10 00 	lea %a2,[%sp]16
80005bf6:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005bfa:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005bfe:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005c02:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005c04:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005c08:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c0c:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005c10:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005c14:	a6 42       	or %d2,%d4
80005c16:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005c1a:	c2 1f       	add %d15,1
80005c1c:	3c e2       	j 80005be0 <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c1e:	58 02       	ld.w %d15,[%sp]8
80005c20:	6e 08       	jz %d15,80005c30 <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c22:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c26:	54 a6       	ld.w %d6,[%sp]
80005c28:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c2a:	02 f7       	mov %d7,%d15
80005c2c:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c30:	58 03       	ld.w %d15,[%sp]12
80005c32:	6e 09       	jz %d15,80005c44 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c34:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c38:	19 a6 04 00 	ld.w %d6,[%sp]4
80005c3c:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c3e:	02 f7       	mov %d7,%d15
80005c40:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c44:	02 84       	mov %d4,%d8
}
80005c46:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c4a:	1d 00 a3 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005c4e <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005c4e:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005c52:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005c56:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005c5a:	40 4f       	mov.aa %a15,%a4
80005c5c:	02 4f       	mov %d15,%d4
80005c5e:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005c60:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005c64:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005c68:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005c6a:	7d 24 11 80 	jne.a %a4,%a2,80005c8c <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c6e:	6d 00 5c 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005c72:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c74:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005c76:	6d 00 58 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005c7a:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005c7e:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005c80:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005c84:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005c88:	6d 00 84 0b 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005c8c:	da ff       	mov %d15,255
80005c8e:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005c92:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005c96:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c9a:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c9c:	02 f3       	mov %d3,%d15
80005c9e:	49 f2 40 08 	ldmst [%a15]0,%e2
80005ca2:	00 90       	ret 

80005ca4 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005ca4:	02 5a       	mov %d10,%d5
80005ca6:	40 4f       	mov.aa %a15,%a4
80005ca8:	02 49       	mov %d9,%d4
80005caa:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cac:	6d 00 3d 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005cb0:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cb2:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005cb4:	6d 00 39 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005cb8:	37 0a 48 50 	extr %d5,%d10,0,8
80005cbc:	bf 05 11 00 	jlt %d5,0,80005cde <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005cc0:	bf 29 21 80 	jlt.u %d9,2,80005d02 <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005cc4:	19 f2 24 20 	ld.w %d2,[%a15]164
80005cc8:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005ccc:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005cd0:	19 ff 24 20 	ld.w %d15,[%a15]164
80005cd4:	8f 2f c0 f1 	andn %d15,%d15,2
80005cd8:	59 ff 24 20 	st.w [%a15]164,%d15
80005cdc:	3c 13       	j 80005d02 <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005cde:	19 f2 28 20 	ld.w %d2,[%a15]168
80005ce2:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005ce6:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005cea:	19 ff 28 20 	ld.w %d15,[%a15]168
80005cee:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005cf2:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005cf6:	19 ff 28 20 	ld.w %d15,[%a15]168
80005cfa:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005cfe:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005d02:	02 84       	mov %d4,%d8
80005d04:	1d 00 46 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005d08 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d08:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d0c:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d0e:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d12:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d14:	6d 00 09 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d18:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d1a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d1c:	6d 00 05 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005d20:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005d22:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d26:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d2a:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005d2e:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d32:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d36:	0f 2b 00 50 	sh %d5,%d11,%d2
80005d3a:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d3c:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d3e:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d40:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005d44:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d46:	1d 00 25 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005d4a <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005d4a:	0b 45 10 88 	mov %e8,%d5,%d4
80005d4e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d50:	6d 00 eb 0a 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d54:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d56:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d58:	6d 00 e7 09 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005d5c:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d60:	06 22       	sh %d2,2
80005d62:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005d64:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d68:	3b f0 00 30 	mov %d3,15
80005d6c:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005d70:	0f 23 00 30 	sh %d3,%d3,%d2
80005d74:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005d78:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005d7a:	02 37       	mov %d7,%d3
80005d7c:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d80:	02 f4       	mov %d4,%d15
80005d82:	1d 00 07 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>
	...

80005d88 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005d88:	7b e0 e4 30 	movh %d3,3662
80005d8c:	1b 13 c0 31 	addi %d3,%d3,7169
80005d90:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005d94:	82 2f       	mov %d15,2
80005d96:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005d9a:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005d9e:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005da2:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005da6:	7b 80 82 6e 	movh %d6,59432
80005daa:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005dae:	19 4e 10 10 	ld.w %d14,[%a4]80
80005db2:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005db4:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005db8:	d2 0a       	mov %e10,0
80005dba:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005dbc:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dc0:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005dc4:	82 f7       	mov %d7,-1
80005dc6:	1b 06 c0 67 	addi %d6,%d6,31744
80005dca:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005dce:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005dd0:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dd4:	7b 60 f8 1f 	movh %d1,65414
80005dd8:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005ddc:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dde:	0b 12 40 10 	addx %d1,%d2,%d1
80005de2:	8b f3 bf 20 	addc %d2,%d3,-1
80005de6:	80 53       	mov.d %d3,%a5
80005de8:	ba 02       	eq %d15,%d2,0
80005dea:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005dee:	8b 02 00 f5 	or.ne %d15,%d2,0
80005df2:	ee 24       	jnz %d15,80005e3a <IfxScuCcu_calculateSysPllDividers+0xb2>
80005df4:	02 5d       	mov %d13,%d5
80005df6:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005df8:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005dfc:	80 68       	mov.d %d8,%a6
80005dfe:	ba 03       	eq %d15,%d3,0
80005e00:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e04:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e08:	ee 13       	jnz %d15,80005e2e <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e0a:	82 18       	mov %d8,1
80005e0c:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005e10:	4b d8 11 22 	div.u %e2,%d8,%d13
80005e14:	e2 e2       	mul %d2,%d14
80005e16:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005e18:	df 02 18 00 	jeq %d2,0,80005e48 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005e1c:	82 1f       	mov %d15,1
80005e1e:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005e22:	6a 8b       	cmovn %d11,%d15,%d8
80005e24:	6a 20       	cmovn %d0,%d15,%d2
80005e26:	6a 5a       	cmovn %d10,%d15,%d5
80005e28:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005e2a:	c2 18       	add %d8,1
80005e2c:	fc 22       	loop %a2,80005e10 <IfxScuCcu_calculateSysPllDividers+0x88>
80005e2e:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005e30:	42 c1       	add %d1,%d12
80005e32:	42 fd       	add %d13,%d15
80005e34:	8b 11 68 f2 	lt.u %d15,%d1,129
80005e38:	ee e0       	jnz %d15,80005df8 <IfxScuCcu_calculateSysPllDividers+0x70>
80005e3a:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005e3c:	c2 f5       	add %d5,-1
80005e3e:	01 23 20 30 	sub.a %a3,%a3,%a2
80005e42:	fd f0 c7 7f 	loop %a15,80005dd0 <IfxScuCcu_calculateSysPllDividers+0x48>
80005e46:	3c 05       	j 80005e50 <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005e48:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005e4c:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005e4e:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005e50:	da 64       	mov %d15,100
80005e52:	06 14       	sh %d4,1
80005e54:	4b f4 11 42 	div.u %e4,%d4,%d15
80005e58:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005e5a:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005e5c:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005e60:	ee 0f       	jnz %d15,80005e7e <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005e62:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005e64:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e66:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e68:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005e6a:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005e6e:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e72:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e76:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005e7a:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005e7c:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005e7e:	00 90       	ret 

80005e80 <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005e80:	91 00 00 f7 	movh.a %a15,28672
80005e84:	19 f2 30 30 	ld.w %d2,[%a15]240 <700000f0 <IfxScuCcu_xtalFrequency>>
}
80005e88:	4b 02 61 21 	utof %d2,%d2
80005e8c:	00 90       	ret 

80005e8e <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005e8e:	91 30 00 ff 	movh.a %a15,61443
80005e92:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005e96:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005e98:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005e9c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005ea0:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005ea4:	6e 0c       	jz %d15,80005ebc <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005ea6:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005ea8:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005eaa:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005eae:	5e 17       	jne %d15,1,80005ebc <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005eb0:	91 00 00 f7 	movh.a %a15,28672
80005eb4:	19 f2 30 30 	ld.w %d2,[%a15]240 <700000f0 <IfxScuCcu_xtalFrequency>>
80005eb8:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005ebc:	00 90       	ret 

80005ebe <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005ebe:	91 30 00 ff 	movh.a %a15,61443
80005ec2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005ec6:	6d ff e4 ff 	call 80005e8e <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005eca:	4c f9       	ld.w %d15,[%a15]36
80005ecc:	2e 05       	jz.t %d15,0,80005ed6 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005ece:	4c fb       	ld.w %d15,[%a15]44
80005ed0:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005ed4:	3c 21       	j 80005f16 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005ed6:	4c f9       	ld.w %d15,[%a15]36
80005ed8:	6f 3f 15 00 	jz.t %d15,3,80005f02 <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005edc:	48 b4       	ld.w %d4,[%a15]44
80005ede:	8f f4 07 41 	and %d4,%d4,127
80005ee2:	c2 14       	add %d4,1
80005ee4:	6d 00 e9 25 	call 8000aab6 <__floatsidf>
80005ee8:	7b 80 19 54 	movh %d5,16792
80005eec:	0b 23 10 68 	mov %e6,%d3,%d2
80005ef0:	82 04       	mov %d4,0
80005ef2:	1b 45 78 5d 	addi %d5,%d5,-10364
80005ef6:	6d 00 54 25 	call 8000a99e <__divdf3>
80005efa:	0b 23 10 48 	mov %e4,%d3,%d2
80005efe:	1d 00 0f 26 	j 8000ab1c <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005f02:	48 a3       	ld.w %d3,[%a15]40
80005f04:	4c fb       	ld.w %d15,[%a15]44
80005f06:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f0a:	16 7f       	and %d15,127
80005f0c:	c2 13       	add %d3,1
80005f0e:	4b 03 41 31 	itof %d3,%d3
80005f12:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f16:	c2 1f       	add %d15,1
80005f18:	4b 0f 41 f1 	itof %d15,%d15
80005f1c:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005f20:	00 90       	ret 

80005f22 <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f22:	91 30 00 ff 	movh.a %a15,61443
80005f26:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005f2a:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005f2c:	7b f0 cb 24 	movh %d2,19647
80005f30:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f34:	6f 3f 18 80 	jnz.t %d15,3,80005f64 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005f38:	6d ff ab ff 	call 80005e8e <IfxScuCcu_getOscFrequency>
80005f3c:	91 30 00 ff 	movh.a %a15,61443
80005f40:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005f44:	48 03       	ld.w %d3,[%a15]0
80005f46:	4c f0       	ld.w %d15,[%a15]0
80005f48:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f4c:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005f50:	c2 13       	add %d3,1
80005f52:	4b 03 41 31 	itof %d3,%d3
80005f56:	c2 1f       	add %d15,1
80005f58:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f5c:	4b 0f 41 f1 	itof %d15,%d15
80005f60:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005f64:	00 90       	ret 

80005f66 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005f66:	91 30 00 ff 	movh.a %a15,61443
80005f6a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005f6e:	6d ff 90 ff 	call 80005e8e <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005f72:	4c f5       	ld.w %d15,[%a15]20
80005f74:	2e 06       	jz.t %d15,0,80005f80 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005f76:	4c f7       	ld.w %d15,[%a15]28
80005f78:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f7c:	c2 1f       	add %d15,1
80005f7e:	3c 28       	j 80005fce <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005f80:	4c f5       	ld.w %d15,[%a15]20
80005f82:	6f 3f 15 00 	jz.t %d15,3,80005fac <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005f86:	48 74       	ld.w %d4,[%a15]28
80005f88:	8f f4 07 41 	and %d4,%d4,127
80005f8c:	c2 14       	add %d4,1
80005f8e:	6d 00 94 25 	call 8000aab6 <__floatsidf>
80005f92:	7b 80 19 54 	movh %d5,16792
80005f96:	0b 23 10 68 	mov %e6,%d3,%d2
80005f9a:	82 04       	mov %d4,0
80005f9c:	1b 45 78 5d 	addi %d5,%d5,-10364
80005fa0:	6d 00 ff 24 	call 8000a99e <__divdf3>
80005fa4:	0b 23 10 48 	mov %e4,%d3,%d2
80005fa8:	1d 00 ba 25 	j 8000ab1c <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80005fac:	48 64       	ld.w %d4,[%a15]24
80005fae:	4c f7       	ld.w %d15,[%a15]28
80005fb0:	37 04 e7 44 	extr.u %d4,%d4,9,7
80005fb4:	8f ff 07 31 	and %d3,%d15,127
80005fb8:	4c f6       	ld.w %d15,[%a15]24
80005fba:	c2 14       	add %d4,1
80005fbc:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fc0:	4b 04 41 41 	itof %d4,%d4
80005fc4:	c2 1f       	add %d15,1
80005fc6:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80005fca:	4b 42 41 20 	mul.f %d2,%d2,%d4
80005fce:	4b 0f 41 f1 	itof %d15,%d15
80005fd2:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005fd6:	00 90       	ret 

80005fd8 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005fd8:	91 30 00 ff 	movh.a %a15,61443
80005fdc:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80005fe0:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005fe2:	7b f0 cb 24 	movh %d2,19647
80005fe6:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005fea:	6f 3f 18 80 	jnz.t %d15,3,8000601a <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
80005fee:	6d ff 50 ff 	call 80005e8e <IfxScuCcu_getOscFrequency>
80005ff2:	91 30 00 ff 	movh.a %a15,61443
80005ff6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80005ffa:	48 03       	ld.w %d3,[%a15]0
80005ffc:	4c f0       	ld.w %d15,[%a15]0
80005ffe:	37 03 e7 34 	extr.u %d3,%d3,9,7
80006002:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006006:	c2 13       	add %d3,1
80006008:	4b 03 41 31 	itof %d3,%d3
8000600c:	c2 1f       	add %d15,1
8000600e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80006012:	4b 0f 41 f1 	itof %d15,%d15
80006016:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
8000601a:	00 90       	ret 

8000601c <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
8000601c:	91 30 00 ff 	movh.a %a15,61443
80006020:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006024:	4c f0       	ld.w %d15,[%a15]0
80006026:	37 0f 62 fe 	extr.u %d15,%d15,28,2
8000602a:	6e 06       	jz %d15,80006036 <IfxScuCcu_getSourceFrequency+0x1a>
8000602c:	1e 13       	jeq %d15,1,80006032 <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
8000602e:	82 02       	mov %d2,0
80006030:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
80006032:	1d ff 9a ff 	j 80005f66 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80006036:	7b f0 cb 24 	movh %d2,19647
8000603a:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
8000603e:	00 90       	ret 

80006040 <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80006040:	02 4f       	mov %d15,%d4
80006042:	6d ff ed ff 	call 8000601c <IfxScuCcu_getSourceFrequency>
80006046:	91 30 00 ff 	movh.a %a15,61443
8000604a:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000604e:	48 03       	ld.w %d3,[%a15]0
80006050:	37 03 64 34 	extr.u %d3,%d3,8,4
80006054:	4b 03 41 31 	itof %d3,%d3
80006058:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
8000605c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80006060:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006064:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80006068:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
8000606c:	a2 3f       	sub %d15,%d3
8000606e:	3f 2f fd ff 	jlt.u %d15,%d2,80006068 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80006072:	00 90       	ret 

80006074 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006074:	6d ff d4 ff 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006078:	91 30 00 ff 	movh.a %a15,61443
8000607c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006080:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
80006082:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006084:	37 03 64 36 	extr.u %d3,%d3,12,4
80006088:	ff 53 30 80 	jge.u %d3,5,800060e8 <IfxScuCcu_getBbbFrequency+0x74>
8000608c:	91 00 00 f8 	movh.a %a15,32768
80006090:	d9 ff 1c 26 	lea %a15,[%a15]24732 <8000609c <IfxScuCcu_getBbbFrequency+0x28>>
80006094:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006098:	dc 0f       	ji %a15
8000609a:	00 00       	nop 
8000609c:	1d 00 0a 00 	j 800060b0 <IfxScuCcu_getBbbFrequency+0x3c>
800060a0:	1d 00 17 00 	j 800060ce <IfxScuCcu_getBbbFrequency+0x5a>
800060a4:	1d 00 18 00 	j 800060d4 <IfxScuCcu_getBbbFrequency+0x60>
800060a8:	1d 00 19 00 	j 800060da <IfxScuCcu_getBbbFrequency+0x66>
800060ac:	1d 00 1a 00 	j 800060e0 <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
800060b0:	91 30 00 ff 	movh.a %a15,61443
800060b4:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800060b8:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
800060ba:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
800060bc:	8f f3 00 31 	and %d3,%d3,15
800060c0:	df 03 14 00 	jeq %d3,0,800060e8 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
800060c4:	4c f0       	ld.w %d15,[%a15]0
800060c6:	16 0f       	and %d15,15
800060c8:	4b 0f 41 f1 	itof %d15,%d15
800060cc:	3c 0c       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
800060ce:	7b 00 1f f4 	movh %d15,16880
800060d2:	3c 09       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
800060d4:	7b 00 27 f4 	movh %d15,17008
800060d8:	3c 06       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
800060da:	7b 00 2f f4 	movh %d15,17136
800060de:	3c 03       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
800060e0:	7b 00 37 f4 	movh %d15,17264
800060e4:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
800060e8:	02 f2       	mov %d2,%d15
800060ea:	00 90       	ret 

800060ec <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800060ec:	91 30 00 ff 	movh.a %a15,61443
800060f0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
800060f4:	6d ff 94 ff 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800060f8:	4c f0       	ld.w %d15,[%a15]0
800060fa:	37 0f 64 f6 	extr.u %d15,%d15,12,4
800060fe:	ff 5f 2d 80 	jge.u %d15,5,80006158 <IfxScuCcu_getMaxFrequency+0x6c>
80006102:	91 00 00 f8 	movh.a %a15,32768
80006106:	d9 ff 10 46 	lea %a15,[%a15]24848 <80006110 <IfxScuCcu_getMaxFrequency+0x24>>
8000610a:	90 ff       	addsc.a %a15,%a15,%d15,2
8000610c:	dc 0f       	ji %a15
8000610e:	00 00       	nop 
80006110:	1d 00 0a 00 	j 80006124 <IfxScuCcu_getMaxFrequency+0x38>
80006114:	1d 00 14 00 	j 8000613c <IfxScuCcu_getMaxFrequency+0x50>
80006118:	1d 00 15 00 	j 80006142 <IfxScuCcu_getMaxFrequency+0x56>
8000611c:	1d 00 16 00 	j 80006148 <IfxScuCcu_getMaxFrequency+0x5c>
80006120:	1d 00 17 00 	j 8000614e <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
80006124:	91 30 00 ff 	movh.a %a15,61443
80006128:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000612c:	4c f0       	ld.w %d15,[%a15]0
8000612e:	16 0f       	and %d15,15
80006130:	6e 15       	jz %d15,8000615a <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
80006132:	4c f0       	ld.w %d15,[%a15]0
80006134:	16 0f       	and %d15,15
80006136:	4b 0f 41 f1 	itof %d15,%d15
8000613a:	3c 0c       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
8000613c:	7b 00 17 f4 	movh %d15,16752
80006140:	3c 09       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
80006142:	7b 00 1f f4 	movh %d15,16880
80006146:	3c 06       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
80006148:	7b 00 27 f4 	movh %d15,17008
8000614c:	3c 03       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
8000614e:	7b 00 2f f4 	movh %d15,17136
80006152:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80006156:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80006158:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
8000615a:	00 90       	ret 

8000615c <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000615c:	91 30 00 ff 	movh.a %a15,61443
80006160:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006164:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
80006166:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006168:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
8000616c:	76 87       	jz %d8,8000617a <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
8000616e:	6d ff bf ff 	call 800060ec <IfxScuCcu_getMaxFrequency>
80006172:	4b 08 41 f1 	itof %d15,%d8
80006176:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
8000617a:	00 90       	ret 

8000617c <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000617c:	91 30 00 ff 	movh.a %a15,61443
80006180:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006184:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80006186:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006188:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
8000618c:	16 f0       	and %d15,240
8000618e:	6e 07       	jz %d15,8000619c <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
80006190:	6d ff ae ff 	call 800060ec <IfxScuCcu_getMaxFrequency>
80006194:	4b 08 41 f1 	itof %d15,%d8
80006198:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
8000619c:	00 90       	ret 

8000619e <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
8000619e:	6d ff 3f ff 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800061a2:	91 30 00 ff 	movh.a %a15,61443
800061a6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061aa:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
800061ac:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800061ae:	37 03 64 36 	extr.u %d3,%d3,12,4
800061b2:	ff 53 30 80 	jge.u %d3,5,80006212 <IfxScuCcu_getSpbFrequency+0x74>
800061b6:	91 00 00 f8 	movh.a %a15,32768
800061ba:	d9 ff 04 76 	lea %a15,[%a15]25028 <800061c4 <IfxScuCcu_getSpbFrequency+0x26>>
800061be:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800061c2:	dc 0f       	ji %a15
800061c4:	1d 00 0a 00 	j 800061d8 <IfxScuCcu_getSpbFrequency+0x3a>
800061c8:	1d 00 18 00 	j 800061f8 <IfxScuCcu_getSpbFrequency+0x5a>
800061cc:	1d 00 19 00 	j 800061fe <IfxScuCcu_getSpbFrequency+0x60>
800061d0:	1d 00 1a 00 	j 80006204 <IfxScuCcu_getSpbFrequency+0x66>
800061d4:	1d 00 1b 00 	j 8000620a <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800061d8:	91 30 00 ff 	movh.a %a15,61443
800061dc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061e0:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
800061e2:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800061e4:	37 03 64 38 	extr.u %d3,%d3,16,4
800061e8:	df 03 15 00 	jeq %d3,0,80006212 <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
800061ec:	4c f0       	ld.w %d15,[%a15]0
800061ee:	37 0f 64 f8 	extr.u %d15,%d15,16,4
800061f2:	4b 0f 41 f1 	itof %d15,%d15
800061f6:	3c 0c       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
800061f8:	7b 00 1f f4 	movh %d15,16880
800061fc:	3c 09       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
800061fe:	7b 00 27 f4 	movh %d15,17008
80006202:	3c 06       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006204:	7b 00 2f f4 	movh %d15,17136
80006208:	3c 03       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
8000620a:	7b 00 37 f4 	movh %d15,17264
8000620e:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
80006212:	02 f2       	mov %d2,%d15
80006214:	00 90       	ret 

80006216 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006216:	91 30 00 ff 	movh.a %a15,61443
8000621a:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000621e:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
80006220:	6d ff bf ff 	call 8000619e <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
80006224:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
80006228:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
8000622a:	26 9f       	and %d15,%d9
8000622c:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006230:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
80006234:	7e 29       	jne %d15,%d2,80006246 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
80006236:	3b 00 40 20 	mov %d2,1024
8000623a:	a2 82       	sub %d2,%d8
8000623c:	4b 02 41 21 	itof %d2,%d2
80006240:	4b 23 51 20 	div.f %d2,%d3,%d2
80006244:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
80006246:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
8000624a:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
8000624c:	7e 49       	jne %d15,%d4,8000625e <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
8000624e:	4b 08 41 21 	itof %d2,%d8
80006252:	7b 00 a8 f3 	movh %d15,14976
80006256:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000625a:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
8000625e:	00 90       	ret 

80006260 <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006260:	6d ff de fe 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006264:	91 30 00 ff 	movh.a %a15,61443
80006268:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000626c:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
8000626e:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006270:	37 03 64 36 	extr.u %d3,%d3,12,4
80006274:	ff 53 31 80 	jge.u %d3,5,800062d6 <IfxScuCcu_getSriFrequency+0x76>
80006278:	91 00 00 f8 	movh.a %a15,32768
8000627c:	d9 ff 08 a6 	lea %a15,[%a15]25224 <80006288 <IfxScuCcu_getSriFrequency+0x28>>
80006280:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006284:	dc 0f       	ji %a15
80006286:	00 00       	nop 
80006288:	1d 00 0a 00 	j 8000629c <IfxScuCcu_getSriFrequency+0x3c>
8000628c:	1d 00 18 00 	j 800062bc <IfxScuCcu_getSriFrequency+0x5c>
80006290:	1d 00 19 00 	j 800062c2 <IfxScuCcu_getSriFrequency+0x62>
80006294:	1d 00 1a 00 	j 800062c8 <IfxScuCcu_getSriFrequency+0x68>
80006298:	1d 00 1b 00 	j 800062ce <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
8000629c:	91 30 00 ff 	movh.a %a15,61443
800062a0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062a4:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
800062a6:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800062a8:	37 03 64 34 	extr.u %d3,%d3,8,4
800062ac:	df 03 15 00 	jeq %d3,0,800062d6 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
800062b0:	4c f0       	ld.w %d15,[%a15]0
800062b2:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800062b6:	4b 0f 41 f1 	itof %d15,%d15
800062ba:	3c 0c       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
800062bc:	7b 00 1f f4 	movh %d15,16880
800062c0:	3c 09       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
800062c2:	7b 00 27 f4 	movh %d15,17008
800062c6:	3c 06       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
800062c8:	7b 00 2f f4 	movh %d15,17136
800062cc:	3c 03       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
800062ce:	7b 00 37 f4 	movh %d15,17264
800062d2:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
800062d6:	02 f2       	mov %d2,%d15
800062d8:	00 90       	ret 

800062da <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
800062da:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
800062dc:	6d ff c2 ff 	call 80006260 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
800062e0:	1e 1d       	jeq %d15,1,800062fa <IfxScuCcu_getCpuFrequency+0x20>
800062e2:	6e 07       	jz %d15,800062f0 <IfxScuCcu_getCpuFrequency+0x16>
800062e4:	de 2a       	jne %d15,2,80006318 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
800062e6:	91 30 00 ff 	movh.a %a15,61443
800062ea:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800062ee:	3c 0a       	j 80006302 <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
800062f0:	91 30 00 ff 	movh.a %a15,61443
800062f4:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800062f8:	3c 05       	j 80006302 <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
800062fa:	91 30 00 ff 	movh.a %a15,61443
800062fe:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006302:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
80006304:	6e 0b       	jz %d15,8000631a <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006306:	4b 0f 61 f1 	utof %d15,%d15
8000630a:	7b 00 c8 33 	movh %d3,15488
8000630e:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
80006312:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006316:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
80006318:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
8000631a:	00 90       	ret 

8000631c <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000631c:	91 30 00 ff 	movh.a %a15,61443
80006320:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006324:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006326:	7b 00 03 30 	movh %d3,48
8000632a:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000632c:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
80006330:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
80006332:	76 3f       	jz %d3,80006350 <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006334:	6d ff 96 ff 	call 80006260 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006338:	3b 00 f0 30 	mov %d3,3840
8000633c:	26 3f       	and %d15,%d3
8000633e:	1b 0f f0 ff 	addi %d15,%d15,-256
80006342:	8f 0f d0 f1 	andn %d15,%d15,256
80006346:	ee 05       	jnz %d15,80006350 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
80006348:	4b 08 41 f1 	itof %d15,%d8
8000634c:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006350:	00 90       	ret 

80006352 <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006352:	91 30 00 ff 	movh.a %a15,61443
80006356:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000635a:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
8000635c:	7b 00 30 30 	movh %d3,768
80006360:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006362:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
80006366:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
80006368:	76 3f       	jz %d3,80006386 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
8000636a:	6d ff 7b ff 	call 80006260 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
8000636e:	3b 00 f0 30 	mov %d3,3840
80006372:	26 3f       	and %d15,%d3
80006374:	1b 0f f0 ff 	addi %d15,%d15,-256
80006378:	8f 0f d0 f1 	andn %d15,%d15,256
8000637c:	ee 05       	jnz %d15,80006386 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
8000637e:	4b 08 41 f1 	itof %d15,%d8
80006382:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006386:	00 90       	ret 

80006388 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006388:	19 4f 10 10 	ld.w %d15,[%a4]80
8000638c:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
80006390:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006392:	59 cf 30 30 	st.w [%a12]240 <700000f0 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80006396:	6d 00 c8 07 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
8000639a:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
8000639c:	6d 00 e3 07 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800063a0:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800063a2:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800063a4:	6d 00 c1 06 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800063a8:	91 30 00 2f 	movh.a %a2,61443
800063ac:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800063b0:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
800063b2:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063b4:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800063b6:	96 08       	or %d15,8
800063b8:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063ba:	6d 00 eb 07 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800063be:	02 84       	mov %d4,%d8
800063c0:	6d 00 ce 06 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800063c4:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
800063c8:	91 30 00 3f 	movh.a %a3,61443
800063cc:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063d0:	4c 30       	ld.w %d15,[%a3]0
800063d2:	91 30 00 2f 	movh.a %a2,61443
800063d6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063da:	bf 0f fb 7f 	jlt %d15,0,800063d0 <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
800063de:	4c 20       	ld.w %d15,[%a2]0
800063e0:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
800063e4:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800063e6:	4c 20       	ld.w %d15,[%a2]0
800063e8:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800063ec:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
800063ee:	91 30 00 2f 	movh.a %a2,61443
800063f2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800063f6:	4c 20       	ld.w %d15,[%a2]0
800063f8:	96 10       	or %d15,16
800063fa:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
800063fc:	91 30 00 2f 	movh.a %a2,61443
80006400:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006404:	4c 20       	ld.w %d15,[%a2]0
80006406:	bf 0f ff 7f 	jlt %d15,0,80006404 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
8000640a:	91 30 00 2f 	movh.a %a2,61443
8000640e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006412:	4c 20       	ld.w %d15,[%a2]0
80006414:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006418:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
8000641a:	4c 20       	ld.w %d15,[%a2]0
8000641c:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006420:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
80006422:	6d 00 82 07 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006426:	91 30 00 2f 	movh.a %a2,61443
8000642a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000642e:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006430:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80006432:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006434:	8f 02 c6 21 	andn %d2,%d2,96
80006438:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
8000643a:	19 c6 30 30 	ld.w %d6,[%a12]240 <700000f0 <IfxScuCcu_xtalFrequency>>
8000643e:	7b 60 02 20 	movh %d2,38
80006442:	1b 02 5a 22 	addi %d2,%d2,9632
80006446:	4b 26 11 62 	div.u %e6,%d6,%d2
8000644a:	54 22       	ld.w %d2,[%a2]
8000644c:	c2 f6       	add %d6,-1
8000644e:	37 62 05 68 	insert %d6,%d2,%d6,16,5
80006452:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80006454:	54 22       	ld.w %d2,[%a2]
80006456:	8f 42 40 21 	or %d2,%d2,4
8000645a:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000645c:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
80006460:	54 32       	ld.w %d2,[%a3]
80006462:	6f 12 05 80 	jnz.t %d2,1,8000646c <IfxScuCcu_init+0xe4>
80006466:	fc 2d       	loop %a2,80006460 <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
80006468:	82 1b       	mov %d11,1
8000646a:	3c 05       	j 80006474 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000646c:	54 32       	ld.w %d2,[%a3]
8000646e:	6f 82 fc 7f 	jz.t %d2,8,80006466 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
80006472:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80006474:	02 f4       	mov %d4,%d15
80006476:	6d 00 58 06 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000647a:	91 30 00 2f 	movh.a %a2,61443
8000647e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006482:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
80006484:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006486:	8f 82 40 21 	or %d2,%d2,8
8000648a:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000648c:	91 30 00 2f 	movh.a %a2,61443
80006490:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006494:	54 22       	ld.w %d2,[%a2]
80006496:	8f 82 40 21 	or %d2,%d2,8
8000649a:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
8000649c:	6d 00 7a 07 	call 80007390 <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800064a0:	02 84       	mov %d4,%d8
800064a2:	6d 00 e3 07 	call 80007468 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
800064a6:	df 0b 29 81 	jne %d11,0,800066f8 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800064aa:	02 84       	mov %d4,%d8
800064ac:	6d 00 58 06 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064b0:	91 30 00 2f 	movh.a %a2,61443
800064b4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800064b8:	4c 20       	ld.w %d15,[%a2]0
800064ba:	6f 5f ff 7f 	jz.t %d15,5,800064b8 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064be:	91 30 00 2f 	movh.a %a2,61443
800064c2:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800064c6:	54 22       	ld.w %d2,[%a2]
800064c8:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800064ca:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064ce:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800064d2:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800064d6:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
800064d8:	91 30 00 2f 	movh.a %a2,61443
800064dc:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800064e0:	54 22       	ld.w %d2,[%a2]
800064e2:	0c f8       	ld.bu %d15,[%a15]8
800064e4:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
800064e8:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
800064ea:	54 22       	ld.w %d2,[%a2]
800064ec:	0c f9       	ld.bu %d15,[%a15]9
800064ee:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
800064f2:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
800064f4:	4c 20       	ld.w %d15,[%a2]0
800064f6:	96 40       	or %d15,64
800064f8:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
800064fa:	4c 20       	ld.w %d15,[%a2]0
800064fc:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80006500:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80006502:	4c 20       	ld.w %d15,[%a2]0
80006504:	96 20       	or %d15,32
80006506:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006508:	4c 20       	ld.w %d15,[%a2]0
8000650a:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000650e:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
80006510:	4c 20       	ld.w %d15,[%a2]0
80006512:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80006516:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006518:	6d ff 94 fd 	call 80006040 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
8000651c:	91 30 00 2f 	movh.a %a2,61443
80006520:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006524:	4c 20       	ld.w %d15,[%a2]0
80006526:	6f 2f ff 7f 	jz.t %d15,2,80006524 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
8000652a:	91 30 00 2f 	movh.a %a2,61443
8000652e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006532:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006534:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006538:	8f 1f c0 f1 	andn %d15,%d15,1
8000653c:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000653e:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006542:	4c 30       	ld.w %d15,[%a3]0
80006544:	91 30 00 2f 	movh.a %a2,61443
80006548:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000654c:	bf 0f fb 7f 	jlt %d15,0,80006542 <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
80006550:	4c 20       	ld.w %d15,[%a2]0
80006552:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006556:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
80006558:	4c 20       	ld.w %d15,[%a2]0
8000655a:	91 30 00 cf 	movh.a %a12,61443
8000655e:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006562:	bf 0f fb 7f 	jlt %d15,0,80006558 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80006566:	48 34       	ld.w %d4,[%a15]12
80006568:	6d ff 6c fd 	call 80006040 <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
8000656c:	4c f5       	ld.w %d15,[%a15]20
8000656e:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006570:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80006572:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006576:	26 f2       	and %d2,%d15
80006578:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
8000657c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
80006580:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006584:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80006588:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
8000658a:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000658e:	4c 30       	ld.w %d15,[%a3]0
80006590:	91 30 00 2f 	movh.a %a2,61443
80006594:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006598:	bf 0f fb 7f 	jlt %d15,0,8000658e <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
8000659c:	4c f7       	ld.w %d15,[%a15]28
8000659e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065a0:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800065a2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065a6:	26 f2       	and %d2,%d15
800065a8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
800065ac:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
800065b0:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800065b4:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
800065b8:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800065ba:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065be:	4c 30       	ld.w %d15,[%a3]0
800065c0:	91 30 00 2f 	movh.a %a2,61443
800065c4:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065c8:	bf 0f fb 7f 	jlt %d15,0,800065be <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800065cc:	4c f9       	ld.w %d15,[%a15]36
800065ce:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065d0:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800065d2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065d6:	26 f2       	and %d2,%d15
800065d8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
800065dc:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800065e0:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
800065e4:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800065e6:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800065ea:	4c 30       	ld.w %d15,[%a3]0
800065ec:	91 30 00 2f 	movh.a %a2,61443
800065f0:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800065f4:	bf 0f fb 7f 	jlt %d15,0,800065ea <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800065f8:	54 23       	ld.w %d3,[%a2]
800065fa:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800065fc:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800065fe:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006602:	26 f2       	and %d2,%d15
80006604:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006608:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000660c:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000660e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80006610:	91 30 00 2f 	movh.a %a2,61443
80006614:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006618:	54 23       	ld.w %d3,[%a2]
8000661a:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000661c:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000661e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006622:	26 f2       	and %d2,%d15
80006624:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006628:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
8000662a:	91 30 00 2f 	movh.a %a2,61443
8000662e:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
80006632:	54 23       	ld.w %d3,[%a2]
80006634:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006636:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006638:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
8000663c:	26 f2       	and %d2,%d15
8000663e:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
80006642:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006644:	91 30 00 2f 	movh.a %a2,61443
80006648:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000664c:	54 23       	ld.w %d3,[%a2]
8000664e:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80006652:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006656:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000665a:	26 f2       	and %d2,%d15
8000665c:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
80006660:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006662:	6d 00 03 07 	call 80007468 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80006666:	91 00 80 cf 	movh.a %a12,63488
8000666a:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000666e:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
80006672:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006674:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
80006678:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000667c:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
8000667e:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006680:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006684:	6d 00 51 05 	call 80007126 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006688:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
8000668a:	02 94       	mov %d4,%d9
8000668c:	6d 00 82 06 	call 80007390 <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006690:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006694:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80006698:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000669a:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
8000669e:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800066a2:	0c f0       	ld.bu %d15,[%a15]0
800066a4:	8f fd 0f 21 	and %d2,%d13,255
800066a8:	7f f2 28 80 	jge.u %d2,%d15,800066f8 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066ac:	02 84       	mov %d4,%d8
800066ae:	6d 00 57 05 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066b2:	4c d0       	ld.w %d15,[%a13]0
800066b4:	6f 5f ff 7f 	jz.t %d15,5,800066b2 <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066b8:	02 df       	mov %d15,%d13
800066ba:	16 ff       	and %d15,255
800066bc:	53 cf 20 a0 	mul %d10,%d15,12
800066c0:	c8 12       	ld.a %a2,[%a15]4
800066c2:	4c c0       	ld.w %d15,[%a12]0
800066c4:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066c6:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066c8:	30 32       	add.a %a2,%a3
800066ca:	14 22       	ld.bu %d2,[%a2]
800066cc:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
800066d0:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066d2:	6d 00 cb 06 	call 80007468 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
800066d6:	c8 12       	ld.a %a2,[%a15]4
800066d8:	60 a3       	mov.a %a3,%d10
800066da:	30 32       	add.a %a2,%a3
800066dc:	99 22 08 00 	ld.a %a2,[%a2]8
800066e0:	bc 23       	jz.a %a2,800066e6 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
800066e2:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
800066e6:	c8 12       	ld.a %a2,[%a15]4
800066e8:	60 a3       	mov.a %a3,%d10
800066ea:	c2 1d       	add %d13,1
800066ec:	30 32       	add.a %a2,%a3
800066ee:	19 24 04 00 	ld.w %d4,[%a2]4
800066f2:	6d ff a7 fc 	call 80006040 <IfxScuCcu_wait>
800066f6:	3c d6       	j 800066a2 <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066f8:	02 84       	mov %d4,%d8
800066fa:	6d 00 31 05 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
800066fe:	91 30 00 ff 	movh.a %a15,61443
80006702:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006706:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006708:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000670a:	8f 0f c4 f1 	andn %d15,%d15,64
8000670e:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006710:	6d 00 ac 06 	call 80007468 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006714:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006718:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
8000671a:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000671e:	6d 00 04 05 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006722:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006724:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006726:	96 08       	or %d15,8
80006728:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000672a:	91 30 00 ff 	movh.a %a15,61443
8000672e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006732:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006734:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006736:	8f 8f c0 f1 	andn %d15,%d15,8
8000673a:	a6 fc       	or %d12,%d15
8000673c:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000673e:	6d 00 29 06 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006742:	02 b2       	mov %d2,%d11
80006744:	00 90       	ret 

80006746 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
80006746:	91 00 00 f8 	movh.a %a15,32768
8000674a:	d9 ff a4 90 	lea %a15,[%a15]2660 <80000a64 <IfxScuCcu_defaultClockConfig>>
8000674e:	c5 02 14 00 	lea %a2,14 <_.+0x13>
80006752:	44 ff       	ld.w %d15,[%a15+]
80006754:	64 4f       	st.w [%a4+],%d15
80006756:	fc 2e       	loop %a2,80006752 <IfxScuCcu_initConfig+0xc>
80006758:	00 90       	ret 

8000675a <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
8000675a:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
8000675c:	6d 00 e5 05 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
80006760:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006762:	6d 00 00 06 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006766:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006768:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000676a:	6d 00 de 04 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000676e:	91 30 00 ff 	movh.a %a15,61443
80006772:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006776:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006778:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000677a:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
8000677c:	8f 82 40 21 	or %d2,%d2,8
80006780:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006782:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006786:	6d 00 05 06 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000678a:	02 84       	mov %d4,%d8
8000678c:	6d 00 e8 04 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
80006790:	91 30 00 ff 	movh.a %a15,61443
80006794:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006798:	48 02       	ld.w %d2,[%a15]0
8000679a:	ef 02 0c 00 	jz.t %d2,16,800067b2 <IfxScuCcu_initErayPll+0x58>
8000679e:	48 02       	ld.w %d2,[%a15]0
800067a0:	6f 12 09 80 	jnz.t %d2,1,800067b2 <IfxScuCcu_initErayPll+0x58>
800067a4:	91 30 00 ff 	movh.a %a15,61443
800067a8:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067ac:	48 02       	ld.w %d2,[%a15]0
800067ae:	6f 12 19 00 	jz.t %d2,1,800067e0 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
800067b2:	91 30 00 ff 	movh.a %a15,61443
800067b6:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800067ba:	48 02       	ld.w %d2,[%a15]0
800067bc:	b7 f2 01 28 	insert %d2,%d2,15,16,1
800067c0:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
800067c2:	48 02       	ld.w %d2,[%a15]0
800067c4:	8f 22 c0 21 	andn %d2,%d2,2
800067c8:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
800067ca:	91 30 00 ff 	movh.a %a15,61443
800067ce:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067d2:	48 02       	ld.w %d2,[%a15]0
800067d4:	6f 12 ff ff 	jnz.t %d2,1,800067d2 <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
800067d8:	19 c4 04 00 	ld.w %d4,[%a12]4
800067dc:	6d ff 32 fc 	call 80006040 <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
800067e0:	91 30 00 ff 	movh.a %a15,61443
800067e4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067e8:	48 02       	ld.w %d2,[%a15]0
800067ea:	6f 02 15 80 	jnz.t %d2,0,80006814 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
800067ee:	48 02       	ld.w %d2,[%a15]0
800067f0:	6f 42 ff 7f 	jz.t %d2,4,800067ee <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
800067f4:	91 30 00 ff 	movh.a %a15,61443
800067f8:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
800067fc:	48 02       	ld.w %d2,[%a15]0
800067fe:	b7 32 07 28 	insert %d2,%d2,3,16,7
80006802:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006804:	91 30 00 ff 	movh.a %a15,61443
80006808:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000680c:	48 02       	ld.w %d2,[%a15]0
8000680e:	8f 12 40 21 	or %d2,%d2,1
80006812:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
80006814:	91 30 00 ff 	movh.a %a15,61443
80006818:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000681c:	48 02       	ld.w %d2,[%a15]0
8000681e:	6f 52 ff 7f 	jz.t %d2,5,8000681c <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
80006822:	91 30 00 ff 	movh.a %a15,61443
80006826:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000682a:	48 03       	ld.w %d3,[%a15]0
8000682c:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006830:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
80006832:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006836:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006838:	91 30 00 ff 	movh.a %a15,61443
8000683c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006840:	48 03       	ld.w %d3,[%a15]0
80006842:	14 c2       	ld.bu %d2,[%a12]
80006844:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
80006848:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
8000684a:	48 03       	ld.w %d3,[%a15]0
8000684c:	39 c2 01 00 	ld.bu %d2,[%a12]1
80006850:	37 23 85 24 	insert %d2,%d3,%d2,9,5
80006854:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
80006856:	48 02       	ld.w %d2,[%a15]0
80006858:	b7 f2 01 29 	insert %d2,%d2,15,18,1
8000685c:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
8000685e:	48 02       	ld.w %d2,[%a15]0
80006860:	8f 02 42 21 	or %d2,%d2,32
80006864:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006866:	6d 00 01 06 	call 80007468 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
8000686a:	91 10 00 f0 	movh.a %a15,1
8000686e:	91 30 00 2f 	movh.a %a2,61443
80006872:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006876:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
8000687a:	fd f0 04 00 	loop %a15,80006882 <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
8000687e:	82 19       	mov %d9,1
80006880:	3c 05       	j 8000688a <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
80006882:	54 22       	ld.w %d2,[%a2]
80006884:	6f 22 fb 7f 	jz.t %d2,2,8000687a <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
80006888:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000688a:	02 84       	mov %d4,%d8
8000688c:	6d 00 68 04 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
80006890:	91 30 00 ff 	movh.a %a15,61443
80006894:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006898:	48 02       	ld.w %d2,[%a15]0
8000689a:	8f 12 c0 21 	andn %d2,%d2,1
8000689e:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
800068a0:	91 30 00 ff 	movh.a %a15,61443
800068a4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068a8:	48 02       	ld.w %d2,[%a15]0
800068aa:	6f 02 ff ff 	jnz.t %d2,0,800068a8 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800068ae:	91 30 00 ff 	movh.a %a15,61443
800068b2:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068b6:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068b8:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800068ba:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800068be:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
800068c2:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068c6:	6d 00 d1 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800068ca:	02 f4       	mov %d4,%d15
800068cc:	6d 00 2d 04 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
800068d0:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800068d4:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068d6:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800068da:	8f 82 40 21 	or %d2,%d2,8
800068de:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068e0:	91 30 00 ff 	movh.a %a15,61443
800068e4:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800068e8:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800068ea:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068ec:	8f 82 c0 21 	andn %d2,%d2,8
800068f0:	a6 32       	or %d2,%d3
800068f2:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
800068f4:	6d 00 4e 05 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
800068f8:	02 92       	mov %d2,%d9
800068fa:	00 90       	ret 

800068fc <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
800068fc:	91 00 00 f8 	movh.a %a15,32768
80006900:	d9 ff 9c 90 	lea %a15,[%a15]2652 <80000a5c <IfxScuCcu_defaultErayPllConfig>>
80006904:	09 f2 40 09 	ld.d %e2,[%a15]
80006908:	89 42 40 09 	st.d [%a4],%e2
8000690c:	00 90       	ret 

8000690e <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
8000690e:	02 5a       	mov %d10,%d5
80006910:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
80006912:	6d ff a7 fc 	call 80006260 <IfxScuCcu_getSriFrequency>
80006916:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006918:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
8000691c:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
80006920:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
80006922:	f6 29       	jnz %d2,80006934 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
80006924:	7b 00 28 84 	movh %d8,17024
80006928:	4b 8a 41 80 	mul.f %d8,%d10,%d8
8000692c:	4b f8 51 80 	div.f %d8,%d8,%d15
80006930:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006934:	6d 00 17 05 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006938:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
8000693a:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000693c:	6d 00 10 04 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
80006940:	df 19 0f 00 	jeq %d9,1,8000695e <IfxScuCcu_setCpuFrequency+0x50>
80006944:	76 98       	jz %d9,80006954 <IfxScuCcu_setCpuFrequency+0x46>
80006946:	df 29 11 80 	jne %d9,2,80006968 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
8000694a:	91 30 00 ff 	movh.a %a15,61443
8000694e:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006952:	3c 0a       	j 80006966 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
80006954:	91 30 00 ff 	movh.a %a15,61443
80006958:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
8000695c:	3c 05       	j 80006966 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
8000695e:	91 30 00 ff 	movh.a %a15,61443
80006962:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006966:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006968:	02 a4       	mov %d4,%d10
8000696a:	6d 00 7f 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
8000696e:	76 89       	jz %d8,80006980 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
80006970:	4b 08 61 81 	utof %d8,%d8
80006974:	7b 00 c8 23 	movh %d2,15488
80006978:	4b 28 41 80 	mul.f %d8,%d8,%d2
8000697c:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
80006980:	02 f2       	mov %d2,%d15
80006982:	00 90       	ret 

80006984 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006984:	91 30 00 ff 	movh.a %a15,61443
80006988:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
8000698c:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
8000698e:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006990:	6d ff 46 fb 	call 8000601c <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
80006994:	4b 82 51 20 	div.f %d2,%d2,%d8
80006998:	4b 02 31 31 	ftoiz %d3,%d2
8000699c:	4b 03 41 41 	itof %d4,%d3
800069a0:	6b 04 31 22 	sub.f %d2,%d2,%d4
800069a4:	7b 00 f0 43 	movh %d4,16128
800069a8:	4b 42 01 20 	cmp.f %d2,%d2,%d4
800069ac:	37 02 61 21 	extr.u %d2,%d2,2,1
800069b0:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800069b2:	82 13       	mov %d3,1
800069b4:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
800069b8:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
800069bc:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
800069c0:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
800069c4:	8f 12 c0 31 	andn %d3,%d2,1
800069c8:	02 92       	mov %d2,%d9
800069ca:	8b 74 a0 92 	ge.u %d9,%d4,7
800069ce:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069d2:	6d 00 c8 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069d6:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069d8:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069da:	6d 00 c1 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
800069de:	40 f2       	mov.aa %a2,%a15
800069e0:	54 22       	ld.w %d2,[%a2]
800069e2:	91 30 00 ff 	movh.a %a15,61443
800069e6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800069ea:	bf 02 fb 7f 	jlt %d2,0,800069e0 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
800069ee:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
800069f2:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
800069f6:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
800069f8:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
800069fa:	6d 00 37 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
800069fe:	6d ff 0f fb 	call 8000601c <IfxScuCcu_getSourceFrequency>
80006a02:	4c f0       	ld.w %d15,[%a15]0
80006a04:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a08:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006a0c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a10:	00 90       	ret 

80006a12 <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
80006a12:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006a14:	6d 00 a7 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
80006a18:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a1a:	6d ff 84 fa 	call 80005f22 <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a1e:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a20:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a22:	6d 00 9d 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a26:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a2a:	91 30 00 ff 	movh.a %a15,61443
80006a2e:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006a32:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a34:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006a38:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a3a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a3e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a42:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006a46:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006a48:	6d 00 10 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006a4c:	6d ff 6b fa 	call 80005f22 <IfxScuCcu_getPllErayVcoFrequency>
80006a50:	4c f0       	ld.w %d15,[%a15]0
80006a52:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006a56:	c2 1f       	add %d15,1
80006a58:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006a5c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a60:	00 90       	ret 

80006a62 <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
80006a62:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006a64:	6d 00 7f 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
80006a68:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a6a:	6d ff b7 fa 	call 80005fd8 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a6e:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a70:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a72:	6d 00 75 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a76:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006a7a:	91 30 00 ff 	movh.a %a15,61443
80006a7e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006a82:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a84:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a88:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a8a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a8e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006a92:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006a96:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a98:	6d 00 e8 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
80006a9c:	6d ff 9e fa 	call 80005fd8 <IfxScuCcu_getPllVcoFrequency>
80006aa0:	4c f0       	ld.w %d15,[%a15]0
80006aa2:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006aa6:	c2 1f       	add %d15,1
80006aa8:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
80006aac:	4b f2 51 20 	div.f %d2,%d2,%d15
80006ab0:	00 90       	ret 

80006ab2 <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
80006ab2:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006ab4:	6d ff b4 fa 	call 8000601c <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006ab8:	4b f2 51 20 	div.f %d2,%d2,%d15
80006abc:	82 24       	mov %d4,2
80006abe:	4b 02 71 21 	ftouz %d2,%d2
80006ac2:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
80006ac6:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006aca:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
80006ace:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006ad2:	8f 14 c0 f1 	andn %d15,%d4,1
80006ad6:	02 a4       	mov %d4,%d10
80006ad8:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006adc:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006ae0:	6d 00 23 04 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
80006ae4:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006ae6:	6d 00 3e 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006aea:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006aec:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006aee:	6d 00 1c 03 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006af2:	91 30 00 ff 	movh.a %a15,61443
80006af6:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006afa:	48 02       	ld.w %d2,[%a15]0
80006afc:	3b 00 3e f0 	mov %d15,992
80006b00:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b02:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b04:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b06:	6d 00 45 04 	call 80007390 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006b0a:	02 94       	mov %d4,%d9
80006b0c:	6d 00 28 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b10:	91 30 00 2f 	movh.a %a2,61443
80006b14:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b18:	4c 20       	ld.w %d15,[%a2]0
80006b1a:	91 30 00 ff 	movh.a %a15,61443
80006b1e:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b22:	bf 0f fb 7f 	jlt %d15,0,80006b18 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006b26:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b28:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006b2a:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006b2e:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006b32:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b34:	6d 00 9a 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b38:	02 84       	mov %d4,%d8
80006b3a:	6d 00 f6 02 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b3e:	91 30 00 ff 	movh.a %a15,61443
80006b42:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b46:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b48:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b4a:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006b4e:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b50:	6d 00 20 04 	call 80007390 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b54:	91 30 00 ff 	movh.a %a15,61443
80006b58:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b5c:	4c f0       	ld.w %d15,[%a15]0
80006b5e:	bf 0f ff 7f 	jlt %d15,0,80006b5c <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006b62:	1d ff 1e fb 	j 8000619e <IfxScuCcu_getSpbFrequency>

80006b66 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006b66:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006b68:	6d ff 5a fa 	call 8000601c <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006b6c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b70:	4b 02 31 31 	ftoiz %d3,%d2
80006b74:	4b 03 41 f1 	itof %d15,%d3
80006b78:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006b7c:	7b 00 f0 f3 	movh %d15,16128
80006b80:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006b84:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006b88:	82 12       	mov %d2,1
80006b8a:	42 3f       	add %d15,%d3
80006b8c:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
80006b90:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
80006b94:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
80006b96:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
80006b9a:	8f 1f c0 21 	andn %d2,%d15,1
80006b9e:	02 9f       	mov %d15,%d9
80006ba0:	8b 73 a0 92 	ge.u %d9,%d3,7
80006ba4:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006ba8:	6d 00 dd 03 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bac:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006bae:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bb0:	6d 00 d6 02 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bb4:	91 30 00 2f 	movh.a %a2,61443
80006bb8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bbc:	4c 20       	ld.w %d15,[%a2]0
80006bbe:	91 30 00 ff 	movh.a %a15,61443
80006bc2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bc6:	bf 0f fb 7f 	jlt %d15,0,80006bbc <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006bca:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bcc:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006bce:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006bd2:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006bd6:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bd8:	6d 00 48 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bdc:	4c f0       	ld.w %d15,[%a15]0
80006bde:	bf 0f ff 7f 	jlt %d15,0,80006bdc <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006be2:	1d ff 3f fb 	j 80006260 <IfxScuCcu_getSriFrequency>

80006be6 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006be6:	91 30 00 ff 	movh.a %a15,61443
80006bea:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bee:	4c f0       	ld.w %d15,[%a15]0
80006bf0:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006bf4:	df 0f 81 00 	jeq %d15,0,80006cf6 <IfxScuCcu_switchToBackupClock+0x110>
80006bf8:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006bfa:	6d 00 b4 03 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
80006bfe:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c00:	6d 00 93 03 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c04:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c06:	02 28       	mov %d8,%d2
80006c08:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c0c:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c10:	91 30 00 df 	movh.a %a13,61443
80006c14:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c16:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006c1a:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c1e:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c22:	6e 1b       	jz %d15,80006c58 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c24:	02 94       	mov %d4,%d9
80006c26:	6d 00 9b 02 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c2a:	54 e2       	ld.w %d2,[%a14]
80006c2c:	6f 52 ff 7f 	jz.t %d2,5,80006c2a <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c30:	c8 12       	ld.a %a2,[%a15]4
80006c32:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c34:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c36:	30 c2       	add.a %a2,%a12
80006c38:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c3a:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c3c:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006c40:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c42:	6d 00 13 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006c46:	c8 12       	ld.a %a2,[%a15]4
80006c48:	30 c2       	add.a %a2,%a12
80006c4a:	19 24 04 00 	ld.w %d4,[%a2]4
80006c4e:	6d ff f9 f9 	call 80006040 <IfxScuCcu_wait>
80006c52:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006c56:	3c e6       	j 80006c22 <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006c58:	02 84       	mov %d4,%d8
80006c5a:	6d 00 66 02 	call 80007126 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006c5e:	91 30 00 ff 	movh.a %a15,61443
80006c62:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006c66:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006c68:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c6a:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006c6c:	96 08       	or %d15,8
80006c6e:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006c70:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c74:	6d 00 8e 03 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c78:	02 94       	mov %d4,%d9
80006c7a:	6d 00 71 02 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006c7e:	91 30 00 2f 	movh.a %a2,61443
80006c82:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c86:	4c 20       	ld.w %d15,[%a2]0
80006c88:	91 30 00 ff 	movh.a %a15,61443
80006c8c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c90:	bf 0f fb 7f 	jlt %d15,0,80006c86 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006c94:	4c f0       	ld.w %d15,[%a15]0
80006c96:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006c9a:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006c9c:	4c f0       	ld.w %d15,[%a15]0
80006c9e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006ca2:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006ca4:	4c f0       	ld.w %d15,[%a15]0
80006ca6:	bf 0f ff 7f 	jlt %d15,0,80006ca4 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006caa:	91 30 00 ff 	movh.a %a15,61443
80006cae:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006cb2:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cb4:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006cb6:	96 10       	or %d15,16
80006cb8:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006cba:	4c f0       	ld.w %d15,[%a15]0
80006cbc:	8f 0f c4 f1 	andn %d15,%d15,64
80006cc0:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cc2:	6d 00 d3 03 	call 80007468 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006cc6:	91 30 00 ff 	movh.a %a15,61443
80006cca:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006cce:	02 84       	mov %d4,%d8
80006cd0:	6d 00 2b 02 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006cd4:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cd6:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006cda:	96 08       	or %d15,8
80006cdc:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cde:	91 30 00 ff 	movh.a %a15,61443
80006ce2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006ce6:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006ce8:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cea:	8f 8f c0 f1 	andn %d15,%d15,8
80006cee:	a6 2f       	or %d15,%d2
80006cf0:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cf2:	1d 00 4f 03 	j 80007390 <IfxScuWdt_setCpuEndinit>
80006cf6:	00 90       	ret 

80006cf8 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006cf8:	91 30 00 ff 	movh.a %a15,61443
80006cfc:	7b f0 0f f0 	movh %d15,255
80006d00:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d04:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d08:	00 90       	ret 

80006d0a <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d0a:	1b 04 01 40 	addi %d4,%d4,16
80006d0e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006d10:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d14:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006d18:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006d1c:	68 0f       	st.w [%a15]0,%d15
80006d1e:	00 90       	ret 

80006d20 <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d20:	8f f4 1f f0 	sh %d15,%d4,-1
80006d24:	06 2f       	sh %d15,2
80006d26:	60 ff       	mov.a %a15,%d15
80006d28:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d2c:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d30:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d34:	6f 04 05 00 	jz.t %d4,0,80006d3e <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d38:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d3c:	3c 03       	j 80006d42 <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d3e:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d42:	59 ff 10 80 	st.w [%a15]528,%d15
80006d46:	00 90       	ret 

80006d48 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d48:	8f f4 1f f0 	sh %d15,%d4,-1
80006d4c:	06 2f       	sh %d15,2
80006d4e:	60 ff       	mov.a %a15,%d15
80006d50:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d54:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d58:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d5c:	6f 04 05 00 	jz.t %d4,0,80006d66 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d60:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d64:	3c 03       	j 80006d6a <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d66:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d6a:	59 ff 2c 80 	st.w [%a15]556,%d15
80006d6e:	00 90       	ret 

80006d70 <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d70:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006d74:	91 30 00 ff 	movh.a %a15,61443
80006d78:	1b 4f 08 f0 	addi %d15,%d15,132
80006d7c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d80:	8f 75 00 51 	and %d5,%d5,7
80006d84:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d86:	6f 04 08 00 	jz.t %d4,0,80006d96 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006d8a:	4c f0       	ld.w %d15,[%a15]0
80006d8c:	8f c5 01 50 	sh %d5,%d5,28
80006d90:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006d94:	3c 06       	j 80006da0 <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006d96:	4c f0       	ld.w %d15,[%a15]0
80006d98:	8f c5 00 50 	sh %d5,%d5,12
80006d9c:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006da0:	a6 f5       	or %d5,%d15
80006da2:	68 05       	st.w [%a15]0,%d5
80006da4:	00 90       	ret 

80006da6 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006da6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006daa:	91 30 00 ff 	movh.a %a15,61443
80006dae:	1b 4f 08 f0 	addi %d15,%d15,132
80006db2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006db6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006db8:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006dba:	6f 04 05 00 	jz.t %d4,0,80006dc4 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006dbe:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006dc2:	3c 03       	j 80006dc8 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006dc4:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006dc8:	68 0f       	st.w [%a15]0,%d15
80006dca:	00 90       	ret 

80006dcc <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dcc:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006dd0:	91 30 00 ff 	movh.a %a15,61443
80006dd4:	1b 4f 08 f0 	addi %d15,%d15,132
80006dd8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ddc:	90 ff       	addsc.a %a15,%a15,%d15,2
80006dde:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006de0:	6f 04 05 00 	jz.t %d4,0,80006dea <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006de4:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006de8:	3c 03       	j 80006dee <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006dea:	8f 0f d0 f1 	andn %d15,%d15,256
80006dee:	68 0f       	st.w [%a15]0,%d15
80006df0:	00 90       	ret 

80006df2 <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006df2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006df6:	91 30 00 ff 	movh.a %a15,61443
80006dfa:	1b bf 08 f0 	addi %d15,%d15,139
80006dfe:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e02:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e04:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e06:	6f 04 05 00 	jz.t %d4,0,80006e10 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e0a:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e0e:	3c 03       	j 80006e14 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006e10:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006e14:	68 0f       	st.w [%a15]0,%d15
80006e16:	00 90       	ret 

80006e18 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e18:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e1c:	91 30 00 ff 	movh.a %a15,61443
80006e20:	1b 4f 08 f0 	addi %d15,%d15,132
80006e24:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e28:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e2a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e2c:	6f 04 05 00 	jz.t %d4,0,80006e36 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e30:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006e34:	3c 03       	j 80006e3a <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006e36:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006e3a:	68 0f       	st.w [%a15]0,%d15
80006e3c:	00 90       	ret 

80006e3e <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e3e:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e42:	91 30 00 ff 	movh.a %a15,61443
80006e46:	1b 4f 08 f0 	addi %d15,%d15,132
80006e4a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e4e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e50:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e52:	6f 04 05 00 	jz.t %d4,0,80006e5c <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e56:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006e5a:	3c 03       	j 80006e60 <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006e5c:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006e60:	68 0f       	st.w [%a15]0,%d15
80006e62:	00 90       	ret 

80006e64 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e64:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006e68:	91 30 00 ff 	movh.a %a15,61443
80006e6c:	1b 4f 08 f0 	addi %d15,%d15,132
80006e70:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e74:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e76:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e78:	6f 04 05 00 	jz.t %d4,0,80006e82 <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006e7c:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006e80:	3c 03       	j 80006e86 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006e82:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006e86:	68 0f       	st.w [%a15]0,%d15
80006e88:	00 90       	ret 

80006e8a <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e8a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006e8e:	91 30 00 ff 	movh.a %a15,61443
80006e92:	1b 4f 08 f0 	addi %d15,%d15,132
80006e96:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e9a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e9c:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e9e:	6f 04 05 00 	jz.t %d4,0,80006ea8 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006ea2:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006ea6:	3c 03       	j 80006eac <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006ea8:	8f 0f 50 f1 	or %d15,%d15,256
80006eac:	68 0f       	st.w [%a15]0,%d15
80006eae:	00 90       	ret 

80006eb0 <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006eb0:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006eb4:	91 30 00 ff 	movh.a %a15,61443
80006eb8:	1b bf 08 f0 	addi %d15,%d15,139
80006ebc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ec0:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ec2:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006ec4:	6f 04 05 00 	jz.t %d4,0,80006ece <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006ec8:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006ecc:	3c 03       	j 80006ed2 <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006ece:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006ed2:	68 0f       	st.w [%a15]0,%d15
80006ed4:	00 90       	ret 

80006ed6 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ed6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006eda:	91 30 00 ff 	movh.a %a15,61443
80006ede:	1b 4f 08 f0 	addi %d15,%d15,132
80006ee2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ee6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ee8:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006eea:	6f 04 05 00 	jz.t %d4,0,80006ef4 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006eee:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006ef2:	3c 03       	j 80006ef8 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006ef4:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006ef8:	68 0f       	st.w [%a15]0,%d15
80006efa:	00 90       	ret 

80006efc <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006efc:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f00:	91 30 00 ff 	movh.a %a15,61443
80006f04:	1b 4f 08 f0 	addi %d15,%d15,132
80006f08:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f0c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f0e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f10:	6f 04 05 00 	jz.t %d4,0,80006f1a <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f14:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006f18:	3c 03       	j 80006f1e <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006f1a:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006f1e:	68 0f       	st.w [%a15]0,%d15
80006f20:	00 90       	ret 

80006f22 <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006f22:	91 30 00 ff 	movh.a %a15,61443
80006f26:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f2a:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f2e:	00 90       	ret 

80006f30 <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006f30:	91 30 00 ff 	movh.a %a15,61443
80006f34:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f38:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f3c:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f40:	00 90       	ret 

80006f42 <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f42:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006f46:	91 30 00 ff 	movh.a %a15,61443
80006f4a:	1b 4f 08 f0 	addi %d15,%d15,132
80006f4e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f52:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f54:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f56:	6f 04 05 00 	jz.t %d4,0,80006f60 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006f5a:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f5e:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006f60:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006f64:	00 90       	ret 

80006f66 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f66:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f6a:	91 30 00 ff 	movh.a %a15,61443
80006f6e:	1b bf 08 f0 	addi %d15,%d15,139
80006f72:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f76:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f78:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f7a:	6f 04 05 00 	jz.t %d4,0,80006f84 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f7e:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f82:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f84:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006f88:	00 90       	ret 

80006f8a <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
80006f8a:	91 30 00 ff 	movh.a %a15,61443
80006f8e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f92:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006f96:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f9a:	00 90       	ret 

80006f9c <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
80006f9c:	91 30 00 ff 	movh.a %a15,61443
80006fa0:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fa4:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006fa8:	00 90       	ret 

80006faa <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006faa:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006fae:	91 30 00 ff 	movh.a %a15,61443
80006fb2:	1b 4f 08 f0 	addi %d15,%d15,132
80006fb6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fba:	8f 75 00 51 	and %d5,%d5,7
80006fbe:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006fc0:	6f 04 08 00 	jz.t %d4,0,80006fd0 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006fc4:	4c f0       	ld.w %d15,[%a15]0
80006fc6:	8f 45 01 50 	sh %d5,%d5,20
80006fca:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
80006fce:	3c 05       	j 80006fd8 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80006fd0:	4c f0       	ld.w %d15,[%a15]0
80006fd2:	06 45       	sh %d5,4
80006fd4:	8f 0f c7 f1 	andn %d15,%d15,112
80006fd8:	a6 f5       	or %d5,%d15
80006fda:	68 05       	st.w [%a15]0,%d5
80006fdc:	00 90       	ret 

80006fde <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006fde:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006fe0:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006fe4:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80006fe8:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006fec:	68 04       	st.w [%a15]0,%d4
80006fee:	00 90       	ret 

80006ff0 <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
80006ff0:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80006ff4:	6f 04 04 00 	jz.t %d4,0,80006ffc <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80006ff8:	1b 05 01 50 	addi %d5,%d5,16
80006ffc:	06 2f       	sh %d15,2
80006ffe:	60 f2       	mov.a %a2,%d15
80007000:	d9 2f 00 06 	lea %a15,[%a2]24576
80007004:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80007008:	19 ff 2c 80 	ld.w %d15,[%a15]556
8000700c:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
80007010:	0f 56 00 50 	sh %d5,%d6,%d5
80007014:	a6 f5       	or %d5,%d15
80007016:	59 f5 2c 80 	st.w [%a15]556,%d5
8000701a:	00 90       	ret 

8000701c <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
8000701c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007020:	91 30 00 ff 	movh.a %a15,61443
80007024:	1b bf 08 f0 	addi %d15,%d15,139
80007028:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
8000702c:	8f 35 00 51 	and %d5,%d5,3
80007030:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80007032:	6f 04 06 00 	jz.t %d4,0,8000703e <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007036:	4c f0       	ld.w %d15,[%a15]0
80007038:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
8000703c:	3c 07       	j 8000704a <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
8000703e:	4c f0       	ld.w %d15,[%a15]0
80007040:	8f e5 00 50 	sh %d5,%d5,14
80007044:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
80007048:	a6 f5       	or %d5,%d15
8000704a:	68 05       	st.w [%a15]0,%d5
8000704c:	00 90       	ret 

8000704e <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000704e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007052:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
80007054:	53 cf 20 f0 	mul %d15,%d15,12
80007058:	60 f2       	mov.a %a2,%d15
8000705a:	d9 2f 00 46 	lea %a15,[%a2]24832
8000705e:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80007062:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007064:	2e 16       	jz.t %d15,1,80007070 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007066:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000706a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
8000706e:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007070:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007074:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007078:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000707c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000707e:	4c f0       	ld.w %d15,[%a15]0
80007080:	6f 0f ff 7f 	jz.t %d15,0,8000707e <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80007084:	00 90       	ret 

80007086 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007086:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000708a:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000708c:	53 cf 20 f0 	mul %d15,%d15,12
80007090:	60 f2       	mov.a %a2,%d15
80007092:	d9 2f 00 46 	lea %a15,[%a2]24832
80007096:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
8000709a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000709c:	2e 16       	jz.t %d15,1,800070a8 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000709e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070a2:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800070a6:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800070a8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070ac:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
800070b0:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
800070b4:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
800070b6:	4c f0       	ld.w %d15,[%a15]0
800070b8:	6f 0f ff 7f 	jz.t %d15,0,800070b6 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
800070bc:	00 90       	ret 

800070be <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
800070be:	91 30 00 ff 	movh.a %a15,61443
800070c2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070c6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070c8:	2e 16       	jz.t %d15,1,800070d4 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070ca:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070ce:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
800070d2:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800070d4:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070d8:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
800070dc:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
800070e0:	91 30 00 ff 	movh.a %a15,61443
800070e4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070e8:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070ea:	4c f0       	ld.w %d15,[%a15]0
800070ec:	6f 0f ff 7f 	jz.t %d15,0,800070ea <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
800070f0:	00 90       	ret 

800070f2 <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
800070f2:	91 30 00 ff 	movh.a %a15,61443
800070f6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070fa:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070fc:	2e 16       	jz.t %d15,1,80007108 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070fe:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007102:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007106:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007108:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
8000710c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80007110:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007114:	91 30 00 ff 	movh.a %a15,61443
80007118:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000711c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
8000711e:	4c f0       	ld.w %d15,[%a15]0
80007120:	6f 0f ff 7f 	jz.t %d15,0,8000711e <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80007124:	00 90       	ret 

80007126 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007126:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000712a:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
8000712c:	53 cf 20 f0 	mul %d15,%d15,12
80007130:	06 24       	sh %d4,2
80007132:	60 f2       	mov.a %a2,%d15
80007134:	d9 2f 00 46 	lea %a15,[%a2]24832
80007138:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000713c:	4c f0       	ld.w %d15,[%a15]0
8000713e:	2e 16       	jz.t %d15,1,8000714a <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007140:	4c f0       	ld.w %d15,[%a15]0
80007142:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007146:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007148:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000714a:	4c f0       	ld.w %d15,[%a15]0
8000714c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007150:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007152:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007154:	4c f0       	ld.w %d15,[%a15]0
80007156:	6f 0f ff ff 	jnz.t %d15,0,80007154 <IfxScuWdt_clearCpuEndinit+0x2e>
}
8000715a:	00 90       	ret 

8000715c <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000715c:	91 30 00 ff 	movh.a %a15,61443
80007160:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007164:	4c f0       	ld.w %d15,[%a15]0
80007166:	06 24       	sh %d4,2
80007168:	2e 16       	jz.t %d15,1,80007174 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000716a:	4c f0       	ld.w %d15,[%a15]0
8000716c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007170:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007172:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007174:	91 30 00 ff 	movh.a %a15,61443
80007178:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000717c:	4c f0       	ld.w %d15,[%a15]0
8000717e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007182:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007184:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007186:	4c f0       	ld.w %d15,[%a15]0
80007188:	6f 0f ff ff 	jnz.t %d15,0,80007186 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
8000718c:	00 90       	ret 

8000718e <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000718e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007192:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80007194:	53 cf 20 f0 	mul %d15,%d15,12
80007198:	06 24       	sh %d4,2
8000719a:	60 f2       	mov.a %a2,%d15
8000719c:	d9 2f 00 46 	lea %a15,[%a2]24832
800071a0:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071a4:	4c f0       	ld.w %d15,[%a15]0
800071a6:	2e 16       	jz.t %d15,1,800071b2 <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071a8:	4c f0       	ld.w %d15,[%a15]0
800071aa:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071ae:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071b0:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071b2:	4c f0       	ld.w %d15,[%a15]0
800071b4:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071b8:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071ba:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800071bc:	4c f0       	ld.w %d15,[%a15]0
800071be:	6f 0f ff ff 	jnz.t %d15,0,800071bc <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
800071c2:	4c f1       	ld.w %d15,[%a15]4
800071c4:	96 08       	or %d15,8
800071c6:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071c8:	4c f0       	ld.w %d15,[%a15]0
800071ca:	2e 16       	jz.t %d15,1,800071d6 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071cc:	4c f0       	ld.w %d15,[%a15]0
800071ce:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071d2:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071d4:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071d6:	4c f0       	ld.w %d15,[%a15]0
800071d8:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071dc:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071de:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800071e0:	4c f0       	ld.w %d15,[%a15]0
800071e2:	6f 0f ff 7f 	jz.t %d15,0,800071e0 <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800071e6:	00 90       	ret 

800071e8 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800071e8:	91 30 00 ff 	movh.a %a15,61443
800071ec:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071f0:	4c f0       	ld.w %d15,[%a15]0
800071f2:	06 24       	sh %d4,2
800071f4:	2e 16       	jz.t %d15,1,80007200 <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071f6:	4c f0       	ld.w %d15,[%a15]0
800071f8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800071fc:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800071fe:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007200:	91 30 00 ff 	movh.a %a15,61443
80007204:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007208:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000720a:	40 f2       	mov.aa %a2,%a15
8000720c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007210:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007212:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007214:	4c 20       	ld.w %d15,[%a2]0
80007216:	91 30 00 ff 	movh.a %a15,61443
8000721a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000721e:	6f 0f fb ff 	jnz.t %d15,0,80007214 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80007222:	91 30 00 2f 	movh.a %a2,61443
80007226:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
8000722a:	4c 20       	ld.w %d15,[%a2]0
8000722c:	96 08       	or %d15,8
8000722e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007230:	4c f0       	ld.w %d15,[%a15]0
80007232:	2e 16       	jz.t %d15,1,8000723e <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007234:	4c f0       	ld.w %d15,[%a15]0
80007236:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000723a:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000723c:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000723e:	91 30 00 ff 	movh.a %a15,61443
80007242:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007246:	4c f0       	ld.w %d15,[%a15]0
80007248:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000724c:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000724e:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007250:	4c f0       	ld.w %d15,[%a15]0
80007252:	6f 0f ff 7f 	jz.t %d15,0,80007250 <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007256:	00 90       	ret 

80007258 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007258:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000725c:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000725e:	53 cf 20 f0 	mul %d15,%d15,12
80007262:	06 24       	sh %d4,2
80007264:	60 f2       	mov.a %a2,%d15
80007266:	d9 2f 00 46 	lea %a15,[%a2]24832
8000726a:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000726e:	4c f0       	ld.w %d15,[%a15]0
80007270:	2e 16       	jz.t %d15,1,8000727c <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007272:	4c f0       	ld.w %d15,[%a15]0
80007274:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007278:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000727a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000727c:	4c f0       	ld.w %d15,[%a15]0
8000727e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007282:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007284:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007286:	4c f0       	ld.w %d15,[%a15]0
80007288:	6f 0f ff ff 	jnz.t %d15,0,80007286 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
8000728c:	4c f1       	ld.w %d15,[%a15]4
8000728e:	8f 8f c0 f1 	andn %d15,%d15,8
80007292:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007294:	4c f0       	ld.w %d15,[%a15]0
80007296:	2e 16       	jz.t %d15,1,800072a2 <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007298:	4c f0       	ld.w %d15,[%a15]0
8000729a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000729e:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072a0:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072a2:	4c f0       	ld.w %d15,[%a15]0
800072a4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072a8:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072aa:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800072ac:	4c f0       	ld.w %d15,[%a15]0
800072ae:	6f 0f ff 7f 	jz.t %d15,0,800072ac <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800072b2:	00 90       	ret 

800072b4 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072b4:	91 30 00 ff 	movh.a %a15,61443
800072b8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072bc:	4c f0       	ld.w %d15,[%a15]0
800072be:	06 24       	sh %d4,2
800072c0:	2e 16       	jz.t %d15,1,800072cc <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072c2:	4c f0       	ld.w %d15,[%a15]0
800072c4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072c8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072ca:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800072cc:	91 30 00 ff 	movh.a %a15,61443
800072d0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072d4:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072d6:	40 f2       	mov.aa %a2,%a15
800072d8:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072dc:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072de:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072e0:	4c 20       	ld.w %d15,[%a2]0
800072e2:	91 30 00 ff 	movh.a %a15,61443
800072e6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072ea:	6f 0f fb ff 	jnz.t %d15,0,800072e0 <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
800072ee:	91 30 00 2f 	movh.a %a2,61443
800072f2:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
800072f6:	4c 20       	ld.w %d15,[%a2]0
800072f8:	8f 8f c0 f1 	andn %d15,%d15,8
800072fc:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800072fe:	4c f0       	ld.w %d15,[%a15]0
80007300:	2e 16       	jz.t %d15,1,8000730c <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007302:	4c f0       	ld.w %d15,[%a15]0
80007304:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007308:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000730a:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000730c:	91 30 00 ff 	movh.a %a15,61443
80007310:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007314:	4c f0       	ld.w %d15,[%a15]0
80007316:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000731a:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000731c:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000731e:	4c f0       	ld.w %d15,[%a15]0
80007320:	6f 0f ff 7f 	jz.t %d15,0,8000731e <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007324:	00 90       	ret 

80007326 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007326:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000732a:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000732c:	53 cf 20 f0 	mul %d15,%d15,12
80007330:	60 f2       	mov.a %a2,%d15
80007332:	d9 2f 00 46 	lea %a15,[%a2]24832
80007336:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
8000733a:	48 02       	ld.w %d2,[%a15]0
8000733c:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80007340:	8f f2 83 21 	xor %d2,%d2,63
80007344:	00 90       	ret 

80007346 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007346:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000734a:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
8000734c:	53 cf 20 f0 	mul %d15,%d15,12
80007350:	60 f2       	mov.a %a2,%d15
80007352:	d9 2f 00 46 	lea %a15,[%a2]24832
80007356:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
8000735a:	48 02       	ld.w %d2,[%a15]0
}
8000735c:	8f 12 00 21 	and %d2,%d2,1
80007360:	00 90       	ret 

80007362 <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007362:	91 30 00 ff 	movh.a %a15,61443
80007366:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000736a:	48 02       	ld.w %d2,[%a15]0
8000736c:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80007370:	8f f2 83 21 	xor %d2,%d2,63
80007374:	00 90       	ret 

80007376 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
80007376:	da 3c       	mov %d15,60
80007378:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
8000737a:	82 cf       	mov %d15,-4
8000737c:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000737e:	82 0f       	mov %d15,0
80007380:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
80007382:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007384:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007386:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007388:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
8000738a:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
8000738c:	2c 4a       	st.b [%a4]10,%d15
8000738e:	00 90       	ret 

80007390 <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007390:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007394:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80007396:	53 cf 20 f0 	mul %d15,%d15,12
8000739a:	06 24       	sh %d4,2
8000739c:	60 f2       	mov.a %a2,%d15
8000739e:	d9 2f 00 46 	lea %a15,[%a2]24832
800073a2:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800073a6:	4c f0       	ld.w %d15,[%a15]0
800073a8:	2e 16       	jz.t %d15,1,800073b4 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800073aa:	4c f0       	ld.w %d15,[%a15]0
800073ac:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800073b0:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800073b2:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800073b4:	4c f0       	ld.w %d15,[%a15]0
800073b6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800073ba:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800073bc:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800073be:	4c f0       	ld.w %d15,[%a15]0
800073c0:	6f 0f ff 7f 	jz.t %d15,0,800073be <IfxScuWdt_setCpuEndinit+0x2e>
}
800073c4:	00 90       	ret 

800073c6 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800073c6:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800073c8:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800073ca:	6f 12 0b 00 	jz.t %d2,1,800073e0 <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800073ce:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800073d2:	37 02 6e 31 	extr.u %d3,%d2,2,14
800073d6:	8f f3 83 31 	xor %d3,%d3,63
800073da:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800073de:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800073e0:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800073e2:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800073e6:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800073ea:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800073ee:	b9 53 02 00 	ld.hu %d3,[%a5]2
800073f2:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800073f6:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800073f8:	54 42       	ld.w %d2,[%a4]
800073fa:	6f 02 ff ff 	jnz.t %d2,0,800073f8 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
800073fe:	39 52 04 00 	ld.bu %d2,[%a5]4
80007402:	df 12 0a 00 	jeq %d2,1,80007416 <IfxScuWdt_initCpuWatchdog+0x50>
80007406:	76 26       	jz %d2,80007412 <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007408:	8b 22 20 22 	ne %d2,%d2,2
8000740c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007410:	3c 07       	j 8000741e <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
80007412:	82 0f       	mov %d15,0
        break;
80007414:	3c 05       	j 8000741e <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007416:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000741a:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
8000741e:	39 52 05 00 	ld.bu %d2,[%a5]5
80007422:	8b 02 20 22 	ne %d2,%d2,0
80007426:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
8000742a:	39 52 06 00 	ld.bu %d2,[%a5]6
8000742e:	8b 02 20 22 	ne %d2,%d2,0
80007432:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
80007436:	39 52 07 00 	ld.bu %d2,[%a5]7
8000743a:	8b 02 20 22 	ne %d2,%d2,0
8000743e:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
80007442:	39 52 08 00 	ld.bu %d2,[%a5]8
80007446:	8b 02 20 22 	ne %d2,%d2,0
8000744a:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
8000744e:	39 52 09 00 	ld.bu %d2,[%a5]9
80007452:	8b 02 20 22 	ne %d2,%d2,0
80007456:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000745a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
8000745c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007460:	1d ff 98 ff 	j 80007390 <IfxScuWdt_setCpuEndinit>

80007464 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
80007464:	1d ff 96 ff 	j 80007390 <IfxScuWdt_setCpuEndinit>

80007468 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007468:	91 30 00 ff 	movh.a %a15,61443
8000746c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007470:	4c f0       	ld.w %d15,[%a15]0
80007472:	06 24       	sh %d4,2
80007474:	2e 16       	jz.t %d15,1,80007480 <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007476:	4c f0       	ld.w %d15,[%a15]0
80007478:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000747c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000747e:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007480:	91 30 00 ff 	movh.a %a15,61443
80007484:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007488:	4c f0       	ld.w %d15,[%a15]0
8000748a:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000748e:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007490:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80007492:	4c f0       	ld.w %d15,[%a15]0
80007494:	6f 0f ff 7f 	jz.t %d15,0,80007492 <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007498:	00 90       	ret 

8000749a <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
8000749a:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
8000749c:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
8000749e:	6f 12 0b 00 	jz.t %d2,1,800074b4 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800074a2:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800074a6:	37 02 6e 31 	extr.u %d3,%d2,2,14
800074aa:	8f f3 83 31 	xor %d3,%d3,63
800074ae:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800074b2:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800074b4:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800074b6:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800074ba:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800074be:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800074c2:	b9 53 02 00 	ld.hu %d3,[%a5]2
800074c6:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800074ca:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800074cc:	54 42       	ld.w %d2,[%a4]
800074ce:	6f 02 ff ff 	jnz.t %d2,0,800074cc <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
800074d2:	39 52 04 00 	ld.bu %d2,[%a5]4
800074d6:	df 12 0a 00 	jeq %d2,1,800074ea <IfxScuWdt_initSafetyWatchdog+0x50>
800074da:	76 26       	jz %d2,800074e6 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
800074dc:	8b 22 20 22 	ne %d2,%d2,2
800074e0:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800074e4:	3c 07       	j 800074f2 <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
800074e6:	82 0f       	mov %d15,0
        break;
800074e8:	3c 05       	j 800074f2 <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800074ea:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
800074ee:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
800074f2:	39 52 05 00 	ld.bu %d2,[%a5]5
800074f6:	8b 02 20 22 	ne %d2,%d2,0
800074fa:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
800074fe:	39 52 06 00 	ld.bu %d2,[%a5]6
80007502:	8b 02 20 22 	ne %d2,%d2,0
80007506:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
8000750a:	39 52 07 00 	ld.bu %d2,[%a5]7
8000750e:	8b 02 20 22 	ne %d2,%d2,0
80007512:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
80007516:	39 52 08 00 	ld.bu %d2,[%a5]8
8000751a:	8b 02 20 22 	ne %d2,%d2,0
8000751e:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
80007522:	39 52 09 00 	ld.bu %d2,[%a5]9
80007526:	8b 02 20 22 	ne %d2,%d2,0
8000752a:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
8000752e:	39 52 0a 00 	ld.bu %d2,[%a5]10
80007532:	8b 02 00 22 	eq %d2,%d2,0
80007536:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000753a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
8000753c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007540:	1d ff 94 ff 	j 80007468 <IfxScuWdt_setSafetyEndinit>

80007544 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
80007544:	1d ff 92 ff 	j 80007468 <IfxScuWdt_setSafetyEndinit>

80007548 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
80007548:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
8000754c:	2e 07       	jz.t %d15,0,8000755a <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
8000754e:	3b 00 00 f3 	mov %d15,12288
80007552:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
80007556:	82 0f       	mov %d15,0
80007558:	3c 11       	j 8000757a <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
8000755a:	3b 10 0a 20 	mov %d2,161
8000755e:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
80007562:	da 5e       	mov %d15,94
80007564:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
80007568:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
8000756c:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
80007570:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
80007574:	6f 0f ed ff 	jnz.t %d15,0,8000754e <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
80007578:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
8000757a:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000757e:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
80007582:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007586:	00 90       	ret 

80007588 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007588:	0c 48       	ld.bu %d15,[%a4]8
8000758a:	d4 4c       	ld.a %a12,[%a4]
8000758c:	1b 0f 01 f0 	addi %d15,%d15,16
80007590:	16 ff       	and %d15,255
80007592:	99 4d 04 00 	ld.a %a13,[%a4]4
80007596:	02 f4       	mov %d4,%d15
80007598:	40 c4       	mov.aa %a4,%a12
8000759a:	6d ff 91 e8 	call 800046bc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
8000759e:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800075a0:	40 c4       	mov.aa %a4,%a12
800075a2:	8f 32 c0 21 	andn %d2,%d2,3
800075a6:	74 d2       	st.w [%a13],%d2
800075a8:	02 f4       	mov %d4,%d15
800075aa:	1d ff 6d e8 	j 80004684 <IfxVadc_disableAccess>

800075ae <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
800075ae:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800075b0:	6d ff bb fe 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800075b4:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800075b6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800075b8:	6d ff b7 fd 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
800075bc:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
800075be:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
800075c0:	8f 12 40 21 	or %d2,%d2,1
800075c4:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
800075c6:	1d ff e5 fe 	j 80007390 <IfxScuWdt_setCpuEndinit>

800075ca <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
800075ca:	99 42 04 00 	ld.a %a2,[%a4]4
800075ce:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
800075d2:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
800075d6:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
800075da:	1b 02 06 f0 	addi %d15,%d2,96
800075de:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
800075e0:	e9 52 0c 00 	st.b [%a5]12,%d2
800075e4:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800075e6:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800075e8:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800075ec:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800075ee:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
800075f2:	37 0f e1 35 	extr.u %d3,%d15,11,1
800075f6:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
800075fa:	37 0f 64 38 	extr.u %d3,%d15,16,4
800075fe:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
80007602:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007606:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007608:	37 0f 62 32 	extr.u %d3,%d15,4,2
8000760c:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
80007610:	37 0f 62 33 	extr.u %d3,%d15,6,2
80007614:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007618:	37 0f 64 36 	extr.u %d3,%d15,12,4
8000761c:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
80007620:	37 0f 62 34 	extr.u %d3,%d15,8,2
80007624:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007628:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
8000762c:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
80007630:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007634:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
80007636:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007638:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
8000763c:	8f 12 80 21 	xor %d2,%d2,1
80007640:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007644:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007648:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
8000764c:	19 d2 20 40 	ld.w %d2,[%a13]288
80007650:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
80007652:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007656:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000765a:	0b 8f 10 48 	mov %e4,%d15,%d8
8000765e:	6d ff 60 e9 	call 8000491e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007662:	54 22       	ld.w %d2,[%a2]
80007664:	6f a2 0a 00 	jz.t %d2,10,80007678 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
80007668:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
8000766a:	4c 20       	ld.w %d15,[%a2]0
8000766c:	16 ff       	and %d15,255
8000766e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
80007670:	4c 20       	ld.w %d15,[%a2]0
80007672:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007676:	3c 05       	j 80007680 <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
80007678:	82 0f       	mov %d15,0
8000767a:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
8000767c:	82 0f       	mov %d15,0
8000767e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
80007680:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007682:	0c ff       	ld.bu %d15,[%a15]15
80007684:	79 c2 00 00 	ld.b %d2,[%a12]0
80007688:	ff 8f 08 80 	jge.u %d15,8,80007698 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
8000768c:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007690:	06 22       	sh %d2,2
80007692:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
80007696:	3c 08       	j 800076a6 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
80007698:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
8000769a:	19 d3 34 40 	ld.w %d3,[%a13]308
8000769e:	8f 2f 00 20 	sh %d2,%d15,2
800076a2:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
800076a6:	16 ff       	and %d15,255
800076a8:	0b 8f 10 48 	mov %e4,%d15,%d8
800076ac:	6d ff 39 e9 	call 8000491e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800076b0:	54 22       	ld.w %d2,[%a2]
800076b2:	6f a2 0a 00 	jz.t %d2,10,800076c6 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
800076b6:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
800076b8:	4c 20       	ld.w %d15,[%a2]0
800076ba:	16 ff       	and %d15,255
800076bc:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
800076be:	4c 20       	ld.w %d15,[%a2]0
800076c0:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800076c4:	3c 05       	j 800076ce <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
800076c6:	82 0f       	mov %d15,0
800076c8:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
800076ca:	82 0f       	mov %d15,0
800076cc:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
800076ce:	28 8f       	st.b [%a15]8,%d15
800076d0:	00 90       	ret 

800076d2 <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076d2:	cc 41       	ld.a %a15,[%a4]4
800076d4:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
800076d6:	79 4f 00 00 	ld.b %d15,[%a4]0
800076da:	08 8a       	ld.bu %d10,[%a15]8
800076dc:	c8 0f       	ld.a %a15,[%a15]0
800076de:	1b 0f 06 f0 	addi %d15,%d15,96
800076e2:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800076e4:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076e6:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800076e8:	02 49       	mov %d9,%d4
800076ea:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076ec:	6d ff 9a e8 	call 80004820 <IfxVadc_getAdcAnalogFrequency>
800076f0:	02 2f       	mov %d15,%d2
800076f2:	6d ff b0 e8 	call 80004852 <IfxVadc_getAdcModuleFrequency>
800076f6:	8f 38 00 81 	and %d8,%d8,3
800076fa:	74 a9       	st.w [%sp],%d9
800076fc:	40 f4       	mov.aa %a4,%a15
800076fe:	0b a8 10 48 	mov %e4,%d8,%d10
80007702:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007706:	1d ff c1 e9 	j 80004a88 <IfxVadc_getChannelConversionTime>

8000770a <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
8000770a:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
8000770c:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000770e:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007712:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007714:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007716:	6d ff 85 e8 	call 80004820 <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
8000771a:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
8000771c:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
8000771e:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
80007720:	4c c0       	ld.w %d15,[%a12]0
80007722:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007726:	e9 ff 32 00 	st.b [%a15]50,%d15
8000772a:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
8000772c:	1b 8f 00 30 	addi %d3,%d15,8
80007730:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
80007734:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007736:	54 23       	ld.w %d3,[%a2]
80007738:	37 03 63 34 	extr.u %d3,%d3,8,3
8000773c:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
80007740:	54 23       	ld.w %d3,[%a2]
80007742:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
80007746:	8b 13 61 42 	lt.u %d4,%d3,17
8000774a:	f6 44       	jnz %d4,80007752 <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
8000774c:	1b 13 ff 3f 	addi %d3,%d3,-15
80007750:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
80007752:	c2 23       	add %d3,2
80007754:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
80007758:	92 14       	add %d4,%d15,1
8000775a:	4b 23 51 30 	div.f %d3,%d3,%d2
8000775e:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
80007762:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007764:	1e 13       	jeq %d15,1,8000776a <IfxVadc_Adc_getGroupConfig+0x60>
80007766:	82 1f       	mov %d15,1
80007768:	3c e2       	j 8000772c <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
8000776a:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
8000776e:	ef 92 33 00 	jz.t %d2,25,800077d4 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
80007772:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
80007776:	19 c2 04 00 	ld.w %d2,[%a12]4
8000777a:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000777e:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
80007782:	19 c2 04 00 	ld.w %d2,[%a12]4
80007786:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
8000778a:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
8000778e:	19 c3 20 20 	ld.w %d3,[%a12]160
80007792:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
80007796:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
8000779a:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000779e:	8b f3 00 32 	eq %d3,%d3,15
800077a2:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
800077a6:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077aa:	f6 35       	jnz %d3,800077b4 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
800077ac:	19 cf 24 20 	ld.w %d15,[%a12]164
800077b0:	16 03       	and %d15,3
800077b2:	3c 02       	j 800077b6 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800077b4:	76 23       	jz %d2,800077ba <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800077b6:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
800077ba:	19 cf 20 20 	ld.w %d15,[%a12]160
800077be:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
800077c2:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
800077c6:	19 cf 24 20 	ld.w %d15,[%a12]164
800077ca:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
800077ce:	e9 ff 18 00 	st.b [%a15]24,%d15
800077d2:	3c 0c       	j 800077ea <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
800077d4:	82 0f       	mov %d15,0
800077d6:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800077da:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
800077de:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800077e2:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
800077e6:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
800077ea:	4c c1       	ld.w %d15,[%a12]4
800077ec:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
800077f0:	df 1f 30 80 	jne %d15,1,80007850 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
800077f4:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
800077f8:	19 c2 04 00 	ld.w %d2,[%a12]4
800077fc:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
80007800:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
80007804:	19 c2 04 00 	ld.w %d2,[%a12]4
80007808:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
8000780c:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
80007810:	19 c3 00 20 	ld.w %d3,[%a12]128
80007814:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007818:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
8000781c:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007820:	8b f3 00 32 	eq %d3,%d3,15
80007824:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
80007828:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000782c:	f6 35       	jnz %d3,80007836 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
8000782e:	19 cf 04 20 	ld.w %d15,[%a12]132
80007832:	16 03       	and %d15,3
80007834:	3c 02       	j 80007838 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007836:	76 23       	jz %d2,8000783c <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007838:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
8000783c:	19 cf 00 20 	ld.w %d15,[%a12]128
80007840:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
80007844:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
80007848:	82 0f       	mov %d15,0
8000784a:	e9 ff 20 00 	st.b [%a15]32,%d15
8000784e:	3c 0c       	j 80007866 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
80007850:	82 0f       	mov %d15,0
80007852:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007856:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
8000785a:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000785e:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
80007862:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
80007866:	4c c1       	ld.w %d15,[%a12]4
80007868:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
8000786c:	df 1f 33 80 	jne %d15,1,800078d2 <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
80007870:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
80007874:	19 c2 04 00 	ld.w %d2,[%a12]4
80007878:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
8000787c:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
80007880:	19 c2 04 00 	ld.w %d2,[%a12]4
80007884:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007888:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
8000788c:	19 d3 00 80 	ld.w %d3,[%a13]512
80007890:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
80007894:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
80007898:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000789c:	8b f3 00 32 	eq %d3,%d3,15
800078a0:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
800078a4:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078a8:	f6 35       	jnz %d3,800078b2 <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
800078aa:	19 df 04 80 	ld.w %d15,[%a13]516
800078ae:	16 03       	and %d15,3
800078b0:	3c 02       	j 800078b4 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800078b2:	76 23       	jz %d2,800078b8 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800078b4:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
800078b8:	19 df 00 80 	ld.w %d15,[%a13]512
800078bc:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
800078c0:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
800078c4:	19 df 04 80 	ld.w %d15,[%a13]516
800078c8:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
800078cc:	e9 ff 28 00 	st.b [%a15]40,%d15
800078d0:	3c 0c       	j 800078e8 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
800078d2:	82 0f       	mov %d15,0
800078d4:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800078d8:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
800078dc:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800078e0:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
800078e4:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
800078e8:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
800078ec:	39 e7 08 00 	ld.bu %d7,[%a14]8
800078f0:	8f 33 00 31 	and %d3,%d3,3
800078f4:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
800078f6:	df 03 1f 00 	jeq %d3,0,80007934 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
800078fa:	7b 00 00 58 	movh %d5,32768
800078fe:	1b 45 d5 50 	addi %d5,%d5,3412
80007902:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007906:	8b 47 60 42 	lt.u %d4,%d7,4
8000790a:	82 02       	mov %d2,0
8000790c:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007910:	1a 25       	add %d15,%d5,%d2
80007912:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007914:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007916:	a0 32       	mov.a %a2,3
80007918:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
8000791c:	8f f4 0f 61 	and %d6,%d4,255
80007920:	14 35       	ld.bu %d5,[%a3]
80007922:	5f 35 06 80 	jne %d5,%d3,8000792e <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007926:	42 62       	add %d2,%d6
80007928:	8f f2 0f 21 	and %d2,%d2,255
8000792c:	3c 04       	j 80007934 <IfxVadc_Adc_getGroupConfig+0x22a>
8000792e:	c2 14       	add %d4,1
80007930:	fc 24       	loop %a2,80007918 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
80007932:	02 72       	mov %d2,%d7
80007934:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
80007936:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
8000793a:	1b 07 01 f0 	addi %d15,%d7,16
8000793e:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
80007942:	e9 ff 30 00 	st.b [%a15]48,%d15
80007946:	00 90       	ret 

80007948 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80007948:	99 52 14 00 	ld.a %a2,[%a5]20
8000794c:	d4 2e       	ld.a %a14,[%a2]
8000794e:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
80007952:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80007956:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000795a:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
8000795c:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000795e:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80007960:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
80007962:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007966:	6d ff ab e6 	call 800046bc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
8000796a:	1b 09 06 20 	addi %d2,%d9,96
8000796e:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007972:	0c fe       	ld.bu %d15,[%a15]14
80007974:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007976:	40 e4       	mov.aa %a4,%a14
80007978:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
8000797c:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
8000797e:	54 22       	ld.w %d2,[%a2]
80007980:	0c ff       	ld.bu %d15,[%a15]15
80007982:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007986:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80007988:	54 22       	ld.w %d2,[%a2]
8000798a:	39 ff 10 00 	ld.bu %d15,[%a15]16
8000798e:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007992:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
80007994:	54 22       	ld.w %d2,[%a2]
80007996:	39 ff 11 00 	ld.bu %d15,[%a15]17
8000799a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000799e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
800079a0:	54 22       	ld.w %d2,[%a2]
800079a2:	0c f1       	ld.bu %d15,[%a15]1
800079a4:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
800079a8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
800079aa:	54 22       	ld.w %d2,[%a2]
800079ac:	0c fd       	ld.bu %d15,[%a15]13
800079ae:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
800079b2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
800079b4:	54 22       	ld.w %d2,[%a2]
800079b6:	39 ff 13 00 	ld.bu %d15,[%a15]19
800079ba:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
800079be:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
800079c0:	54 22       	ld.w %d2,[%a2]
800079c2:	0c f3       	ld.bu %d15,[%a15]3
800079c4:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
800079c8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
800079ca:	54 22       	ld.w %d2,[%a2]
800079cc:	0c f0       	ld.bu %d15,[%a15]0
800079ce:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
800079d2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
800079d4:	54 22       	ld.w %d2,[%a2]
800079d6:	39 ff 12 00 	ld.bu %d15,[%a15]18
800079da:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
800079de:	6c 20       	st.w [%a2]0,%d15
800079e0:	1b 08 01 f0 	addi %d15,%d8,16
800079e4:	16 ff       	and %d15,255
800079e6:	02 f4       	mov %d4,%d15
800079e8:	6d ff 6a e6 	call 800046bc <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
800079ec:	08 23       	ld.bu %d3,[%a15]2
800079ee:	82 12       	mov %d2,1
800079f0:	0f 92 00 20 	sh %d2,%d2,%d9
800079f4:	f6 35       	jnz %d3,800079fe <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
800079f6:	19 c3 08 00 	ld.w %d3,[%a12]8
800079fa:	a6 32       	or %d2,%d3
800079fc:	3c 05       	j 80007a06 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
800079fe:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a02:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a06:	02 f4       	mov %d4,%d15
80007a08:	59 c2 08 00 	st.w [%a12]8,%d2
80007a0c:	40 e4       	mov.aa %a4,%a14
80007a0e:	6d ff 3b e6 	call 80004684 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80007a12:	79 d3 00 00 	ld.b %d3,[%a13]0
80007a16:	19 c5 20 40 	ld.w %d5,[%a12]288
80007a1a:	8f 23 00 f0 	sh %d15,%d3,2
80007a1e:	3b f0 00 20 	mov %d2,15
80007a22:	0f f2 00 20 	sh %d2,%d2,%d15
80007a26:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007a2a:	08 b4       	ld.bu %d4,[%a15]11
80007a2c:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007a30:	19 c2 20 40 	ld.w %d2,[%a12]288
80007a34:	0f f4 00 f0 	sh %d15,%d4,%d15
80007a38:	a6 2f       	or %d15,%d2
80007a3a:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007a3e:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007a42:	6e 1f       	jz %d15,80007a80 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007a44:	02 84       	mov %d4,%d8
80007a46:	08 b5       	ld.bu %d5,[%a15]11
80007a48:	6d ff 6b e7 	call 8000491e <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007a4c:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007a50:	82 1f       	mov %d15,1
80007a52:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007a56:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007a5a:	54 22       	ld.w %d2,[%a2]
80007a5c:	08 63       	ld.bu %d3,[%a15]6
80007a5e:	8f f2 cf 21 	andn %d2,%d2,255
80007a62:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007a64:	0c f9       	ld.bu %d15,[%a15]9
80007a66:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007a68:	54 22       	ld.w %d2,[%a2]
80007a6a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007a6e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007a70:	4c 20       	ld.w %d15,[%a2]0
80007a72:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007a76:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007a78:	4c 20       	ld.w %d15,[%a2]0
80007a7a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007a7e:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007a80:	0c ff       	ld.bu %d15,[%a15]15
80007a82:	08 a2       	ld.bu %d2,[%a15]10
80007a84:	ff 8f 15 80 	jge.u %d15,8,80007aae <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80007a88:	19 c4 30 40 	ld.w %d4,[%a12]304
80007a8c:	06 2f       	sh %d15,2
80007a8e:	3b f0 00 30 	mov %d3,15
80007a92:	0f f3 00 30 	sh %d3,%d3,%d15
80007a96:	0f 34 e0 30 	andn %d3,%d4,%d3
80007a9a:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007a9e:	19 c3 30 40 	ld.w %d3,[%a12]304
80007aa2:	0f f2 00 f0 	sh %d15,%d2,%d15
80007aa6:	a6 3f       	or %d15,%d3
80007aa8:	59 cf 30 40 	st.w [%a12]304,%d15
80007aac:	3c 14       	j 80007ad4 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007aae:	c2 8f       	add %d15,-8
80007ab0:	19 c4 34 40 	ld.w %d4,[%a12]308
80007ab4:	06 2f       	sh %d15,2
80007ab6:	3b f0 00 30 	mov %d3,15
80007aba:	0f f3 00 30 	sh %d3,%d3,%d15
80007abe:	0f 34 e0 30 	andn %d3,%d4,%d3
80007ac2:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007ac6:	19 c3 34 40 	ld.w %d3,[%a12]308
80007aca:	0f f2 00 f0 	sh %d15,%d2,%d15
80007ace:	a6 3f       	or %d15,%d3
80007ad0:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80007ad4:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007ad8:	6e 24       	jz %d15,80007b20 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007ada:	02 84       	mov %d4,%d8
80007adc:	08 a5       	ld.bu %d5,[%a15]10
80007ade:	6d ff 20 e7 	call 8000491e <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80007ae2:	0c ff       	ld.bu %d15,[%a15]15
80007ae4:	1b 0f 08 f0 	addi %d15,%d15,128
80007ae8:	90 c3       	addsc.a %a3,%a12,%d15,2
80007aea:	4c 30       	ld.w %d15,[%a3]0
80007aec:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007af0:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
80007af2:	bb f0 ff ff 	mov.u %d15,65535
80007af6:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007afa:	54 22       	ld.w %d2,[%a2]
80007afc:	08 43       	ld.bu %d3,[%a15]4
80007afe:	8f f2 cf 21 	andn %d2,%d2,255
80007b02:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007b04:	0c f8       	ld.bu %d15,[%a15]8
80007b06:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b08:	54 22       	ld.w %d2,[%a2]
80007b0a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b0e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007b10:	4c 20       	ld.w %d15,[%a2]0
80007b12:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b16:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007b18:	4c 20       	ld.w %d15,[%a2]0
80007b1a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b1e:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007b20:	40 e4       	mov.aa %a4,%a14
80007b22:	02 84       	mov %d4,%d8
80007b24:	6d ff b0 e5 	call 80004684 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b28:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007b2a:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b2c:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007b2e:	0c fc       	ld.bu %d15,[%a15]12
80007b30:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007b32:	00 90       	ret 

80007b34 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007b34:	40 42       	mov.aa %a2,%a4
80007b36:	d2 02       	mov %e2,0
80007b38:	89 22 48 01 	st.d [%a2+]8,%e2
80007b3c:	89 22 48 01 	st.d [%a2+]8,%e2
80007b40:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007b44:	b5 45 14 00 	st.a [%a4]20,%a5
80007b48:	00 90       	ret 

80007b4a <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007b4a:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b4c:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007b50:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b52:	8f a8 00 90 	sh %d9,%d8,10
80007b56:	1b 09 48 f0 	addi %d15,%d9,1152
80007b5a:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
80007b5c:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
80007b5e:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007b62:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007b64:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b68:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80007b6a:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b6c:	6d ff 5a e6 	call 80004820 <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007b70:	1b 08 01 f0 	addi %d15,%d8,16
80007b74:	8f ff 0f a1 	and %d10,%d15,255
80007b78:	40 c4       	mov.aa %a4,%a12
80007b7a:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b7c:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007b7e:	6d ff 9f e5 	call 800046bc <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b82:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b86:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b88:	5e 17       	jne %d15,1,80007b96 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b8a:	82 14       	mov %d4,1
80007b8c:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007b90:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007b94:	3c 03       	j 80007b9a <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80007b96:	d2 04       	mov %e4,0
80007b98:	82 06       	mov %d6,0
80007b9a:	82 07       	mov %d7,0
80007b9c:	6d ff 06 e8 	call 80004ba8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007ba0:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007ba4:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007ba6:	5e 17       	jne %d15,1,80007bb4 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007ba8:	82 14       	mov %d4,1
80007baa:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007bae:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007bb2:	3c 03       	j 80007bb8 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80007bb4:	d2 04       	mov %e4,0
80007bb6:	82 06       	mov %d6,0
80007bb8:	82 17       	mov %d7,1
80007bba:	6d ff f7 e7 	call 80004ba8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bbe:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007bc2:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bc4:	5e 17       	jne %d15,1,80007bd2 <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007bc6:	82 14       	mov %d4,1
80007bc8:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007bcc:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007bd0:	3c 03       	j 80007bd6 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007bd2:	d2 04       	mov %e4,0
80007bd4:	82 06       	mov %d6,0
80007bd6:	82 27       	mov %d7,2
80007bd8:	6d ff e8 e7 	call 80004ba8 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007bdc:	0c f5       	ld.bu %d15,[%a15]5
80007bde:	be 8b       	jeq %d15,%d8,80007c14 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007be0:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007be4:	91 00 00 28 	movh.a %a2,32768
80007be8:	d9 22 d4 50 	lea %a2,[%a2]3412 <80000d54 <IfxVadc_Adc_masterIndex>>
80007bec:	10 22       	addsc.a %a2,%a2,%d15,0
80007bee:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007bf0:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007bf4:	8f 3f 00 21 	and %d2,%d15,3
80007bf8:	19 23 40 30 	ld.w %d3,[%a2]1216
80007bfc:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007c00:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c04:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c08:	da 08       	mov %d15,8
80007c0a:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c0e:	a6 3f       	or %d15,%d3
80007c10:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007c14:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c18:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007c1c:	8f 3f c0 f1 	andn %d15,%d15,3
80007c20:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007c24:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007c28:	19 22 40 20 	ld.w %d2,[%a2]1152
80007c2c:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007c30:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c34:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007c38:	df 1f 5a 80 	jne %d15,1,80007cec <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007c3c:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007c40:	6e 28       	jz %d15,80007c90 <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007c42:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c46:	96 04       	or %d15,4
80007c48:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007c4c:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007c50:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007c54:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007c58:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007c5c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007c60:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007c64:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007c68:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007c6c:	8b ff 20 f2 	ne %d15,%d15,15
80007c70:	ee 16       	jnz %d15,80007c9c <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007c72:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007c76:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007c7a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007c7e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007c82:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007c86:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c8a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007c8e:	3c 05       	j 80007c98 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007c90:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c94:	8f 4f c0 f1 	andn %d15,%d15,4
80007c98:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007c9c:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007ca0:	8b ff 00 f2 	eq %d15,%d15,15
80007ca4:	ee 15       	jnz %d15,80007cce <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007ca6:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007caa:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007cae:	19 23 40 40 	ld.w %d3,[%a2]1280
80007cb2:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007cb6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007cba:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007cbe:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007cc2:	19 22 44 40 	ld.w %d2,[%a2]1284
80007cc6:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007cca:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007cce:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007cd2:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007cd6:	3b 00 40 f0 	mov %d15,1024
80007cda:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007cde:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ce2:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007ce6:	a6 2f       	or %d15,%d2
80007ce8:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007cec:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007cf0:	df 1f 5a 80 	jne %d15,1,80007da4 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007cf4:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007cf8:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007cfc:	6e 28       	jz %d15,80007d4c <IfxVadc_Adc_initGroup+0x202>
80007cfe:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d02:	96 04       	or %d15,4
80007d04:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007d08:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007d0c:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007d10:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007d14:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007d18:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007d1c:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007d20:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007d24:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d28:	8b ff 20 f2 	ne %d15,%d15,15
80007d2c:	ee 16       	jnz %d15,80007d58 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007d2e:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d32:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007d36:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d3a:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d3e:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d42:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d46:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d4a:	3c 05       	j 80007d54 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007d4c:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d50:	8f 4f c0 f1 	andn %d15,%d15,4
80007d54:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007d58:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d5c:	8b ff 00 f2 	eq %d15,%d15,15
80007d60:	ee 15       	jnz %d15,80007d8a <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007d62:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007d66:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007d6a:	19 23 60 40 	ld.w %d3,[%a2]1312
80007d6e:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007d72:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d76:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d7a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d7e:	19 22 64 40 	ld.w %d2,[%a2]1316
80007d82:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d86:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007d8a:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007d8e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d92:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007d96:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d9a:	8f 0f c1 f1 	andn %d15,%d15,16
80007d9e:	a6 2f       	or %d15,%d2
80007da0:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007da4:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007da8:	df 1f 4f 80 	jne %d15,1,80007e46 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007dac:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007db0:	6e 29       	jz %d15,80007e02 <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007db2:	19 cf 04 80 	ld.w %d15,[%a12]516
80007db6:	96 04       	or %d15,4
80007db8:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007dbc:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007dc0:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007dc4:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007dc8:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007dcc:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007dd0:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007dd4:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007dd8:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007ddc:	8b ff 20 f2 	ne %d15,%d15,15
80007de0:	ee 11       	jnz %d15,80007e02 <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007de2:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007de6:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007dea:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007dee:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007df2:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007df6:	19 cf 04 80 	ld.w %d15,[%a12]516
80007dfa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007dfe:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007e02:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e06:	8b ff 00 f2 	eq %d15,%d15,15
80007e0a:	ee 13       	jnz %d15,80007e30 <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e0c:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007e10:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e14:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e18:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007e1c:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007e20:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e24:	19 c2 04 80 	ld.w %d2,[%a12]516
80007e28:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e2c:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007e30:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007e34:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e38:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e3c:	8f 0f c1 f1 	andn %d15,%d15,16
80007e40:	a6 2f       	or %d15,%d2
80007e42:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007e46:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007e48:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007e4c:	3a 8f       	eq %d15,%d15,%d8
80007e4e:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007e52:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007e56:	02 84       	mov %d4,%d8
80007e58:	8f 3f c0 f1 	andn %d15,%d15,3
80007e5c:	a6 2f       	or %d15,%d2
80007e5e:	59 2f 40 20 	st.w [%a2]1152,%d15
80007e62:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007e66:	40 c4       	mov.aa %a4,%a12
80007e68:	6d ff 69 e4 	call 8000473a <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007e6c:	8f 88 00 80 	sh %d8,%d8,8
80007e70:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007e72:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007e76:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007e7a:	0b 58 00 20 	add %d2,%d8,%d5
80007e7e:	1b 82 12 20 	addi %d2,%d2,296
80007e82:	0c 2c       	ld.bu %d15,[%a2]12
80007e84:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007e88:	54 22       	ld.w %d2,[%a2]
80007e8a:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007e8e:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007e90:	9a 15       	add %d15,%d5,1
80007e92:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007e94:	54 23       	ld.w %d3,[%a2]
80007e96:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007e9a:	4b 03 71 31 	ftouz %d3,%d3
80007e9e:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007ea0:	8b 03 62 f2 	lt.u %d15,%d3,32
80007ea4:	ee 04       	jnz %d15,80007eac <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007ea6:	06 c3       	sh %d3,-4
80007ea8:	1b f3 00 30 	addi %d3,%d3,15
80007eac:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007eb0:	1a 58       	add %d15,%d8,%d5
80007eb2:	1b 8f 12 f0 	addi %d15,%d15,296
80007eb6:	90 c2       	addsc.a %a2,%a12,%d15,2
80007eb8:	4c 20       	ld.w %d15,[%a2]0
80007eba:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007ebe:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007ec0:	df 15 04 00 	jeq %d5,1,80007ec8 <IfxVadc_Adc_initGroup+0x37e>
80007ec4:	82 15       	mov %d5,1
80007ec6:	3c d8       	j 80007e76 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007ec8:	40 c4       	mov.aa %a4,%a12
80007eca:	02 a4       	mov %d4,%d10
80007ecc:	6d ff dc e3 	call 80004684 <IfxVadc_disableAccess>

    return status;
}
80007ed0:	82 02       	mov %d2,0
80007ed2:	00 90       	ret 

80007ed4 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007ed4:	40 42       	mov.aa %a2,%a4
80007ed6:	7b 60 58 f3 	movh %d15,13702
80007eda:	d2 02       	mov %e2,0
80007edc:	a0 6f       	mov.a %a15,6
80007ede:	89 22 48 01 	st.d [%a2+]8,%e2
80007ee2:	fc fe       	loop %a15,80007ede <IfxVadc_Adc_initGroupConfig+0xa>
80007ee4:	1b df 7b f3 	addi %d15,%d15,14269
80007ee8:	6c 42       	st.w [%a4]8,%d15
80007eea:	6c 44       	st.w [%a4]16,%d15
80007eec:	82 1f       	mov %d15,1
80007eee:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007ef2:	e9 4f 20 00 	st.b [%a4]32,%d15
80007ef6:	e9 4f 26 00 	st.b [%a4]38,%d15
80007efa:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007efe:	f4 45       	st.a [%a4],%a5
80007f00:	00 90       	ret 

80007f02 <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007f02:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007f04:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f06:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f08:	6d ff 0f fa 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f0c:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f0e:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007f10:	6d ff 0b f9 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007f14:	82 02       	mov %d2,0
80007f16:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007f18:	02 f4       	mov %d4,%d15
80007f1a:	6d ff 3b fa 	call 80007390 <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007f1e:	40 f4       	mov.aa %a4,%a15
80007f20:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007f24:	6d ff 30 e6 	call 80004b84 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f28:	19 c4 18 00 	ld.w %d4,[%a12]24
80007f2c:	40 f4       	mov.aa %a4,%a15
80007f2e:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007f32:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f34:	6d ff 42 e5 	call 800049b8 <IfxVadc_initializeFAdcI>
80007f38:	df 02 57 00 	jeq %d2,0,80007fe6 <IfxVadc_Adc_initModule+0xe4>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007f3c:	19 c4 14 00 	ld.w %d4,[%a12]20
80007f40:	40 f4       	mov.aa %a4,%a15
80007f42:	4b 04 71 41 	ftouz %d4,%d4
80007f46:	6d ff 24 e5 	call 8000498e <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007f4a:	40 f4       	mov.aa %a4,%a15
80007f4c:	6d ff 6a e4 	call 80004820 <IfxVadc_getAdcAnalogFrequency>
80007f50:	82 03       	mov %d3,0
80007f52:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007f56:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007f58:	1b 83 02 40 	addi %d4,%d3,40
80007f5c:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007f5e:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007f62:	0c 20       	ld.bu %d15,[%a2]0
80007f64:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007f66:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007f6a:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007f6e:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007f70:	4c 21       	ld.w %d15,[%a2]4
80007f72:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007f76:	4b 0f 71 f1 	ftouz %d15,%d15
80007f7a:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007f7c:	8b 0f 62 52 	lt.u %d5,%d15,32
80007f80:	f6 54       	jnz %d5,80007f88 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007f82:	06 cf       	sh %d15,-4
80007f84:	1b ff 00 f0 	addi %d15,%d15,15
80007f88:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007f8c:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007f90:	54 24       	ld.w %d4,[%a2]
80007f92:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007f96:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80007f98:	df 13 04 00 	jeq %d3,1,80007fa0 <IfxVadc_Adc_initModule+0x9e>
80007f9c:	82 13       	mov %d3,1
80007f9e:	3c dc       	j 80007f56 <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007fa0:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80007fa4:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007fa6:	df 12 20 80 	jne %d2,1,80007fe6 <IfxVadc_Adc_initModule+0xe4>
80007faa:	82 08       	mov %d8,0
80007fac:	1b 08 01 f0 	addi %d15,%d8,16
80007fb0:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fb2:	02 f4       	mov %d4,%d15
80007fb4:	40 f4       	mov.aa %a4,%a15
80007fb6:	6d ff 83 e3 	call 800046bc <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007fba:	8f a8 00 20 	sh %d2,%d8,10
80007fbe:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80007fc2:	c2 18       	add %d8,1
80007fc4:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fc8:	02 f4       	mov %d4,%d15
80007fca:	8f 32 40 21 	or %d2,%d2,3
80007fce:	59 22 40 20 	st.w [%a2]1152,%d2
80007fd2:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007fd4:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fd8:	6d ff 56 e3 	call 80004684 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007fdc:	ee e8       	jnz %d15,80007fac <IfxVadc_Adc_initModule+0xaa>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
80007fde:	40 f4       	mov.aa %a4,%a15
80007fe0:	6d ff 19 e6 	call 80004c12 <IfxVadc_startupCalibration>
    }

    return status;
80007fe4:	82 0f       	mov %d15,0
}
80007fe6:	02 f2       	mov %d2,%d15
80007fe8:	00 90       	ret 

80007fea <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007fea:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007fee:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007ff0:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007ff4:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80007ff6:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007ff8:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80007ffa:	6d ff 1f e4 	call 80004838 <IfxVadc_getAdcDigitalFrequency>
80007ffe:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80008000:	6d ff cf f0 	call 8000619e <IfxScuCcu_getSpbFrequency>
80008004:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008006:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
8000800a:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
8000800c:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80008010:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008012:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80008014:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80008018:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
8000801a:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
8000801e:	e9 ff 21 00 	st.b [%a15]33,%d15
80008022:	00 90       	ret 

80008024 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
80008024:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008026:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80008028:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
8000802a:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
8000802c:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
8000802e:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
80008030:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
80008032:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80008034:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80008036:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80008038:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
8000803c:	d2 02       	mov %e2,0
8000803e:	89 22 48 01 	st.d [%a2+]8,%e2
80008042:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80008046:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
8000804a:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
8000804c:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
8000804e:	2c ac       	st.b [%sp]12,%d15
80008050:	d9 44 0c 00 	lea %a4,[%a4]12
80008054:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008058:	89 42 48 01 	st.d [%a4+]8,%e2
8000805c:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008060:	89 42 48 01 	st.d [%a4+]8,%e2
80008064:	00 90       	ret 

80008066 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80008066:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80008068:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
8000806a:	8f af 00 20 	sh %d2,%d15,10
8000806e:	1b 02 48 20 	addi %d2,%d2,1152
80008072:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80008076:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
8000807a:	40 4c       	mov.aa %a12,%a4
8000807c:	40 5f       	mov.aa %a15,%a5
8000807e:	16 0f       	and %d15,15
80008080:	f6 2a       	jnz %d2,80008094 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80008082:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008086:	8f f2 c0 21 	andn %d2,%d2,15
8000808a:	a6 2f       	or %d15,%d2
8000808c:	59 cf 30 f0 	st.w [%a12]1008,%d15
80008090:	82 0f       	mov %d15,0
80008092:	3c 07       	j 800080a0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
80008094:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008098:	06 4f       	sh %d15,4
8000809a:	8f 02 cf 21 	andn %d2,%d2,240
8000809e:	3c f6       	j 8000808a <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
800080a0:	90 f2       	addsc.a %a2,%a15,%d15,2
800080a2:	99 2d 0c 00 	ld.a %a13,[%a2]12
800080a6:	bd 0d 19 00 	jz.a %a13,800080d8 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
800080aa:	39 d3 0c 00 	ld.bu %d3,[%a13]12
800080ae:	39 f2 18 00 	ld.bu %d2,[%a15]24
800080b2:	99 d4 04 00 	ld.a %a4,[%a13]4
800080b6:	0f 23 a0 50 	or %d5,%d3,%d2
800080ba:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080be:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
800080c2:	39 f8 19 00 	ld.bu %d8,[%a15]25
800080c6:	6d ff c4 ed 	call 80005c4e <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
800080ca:	99 d4 04 00 	ld.a %a4,[%a13]4
800080ce:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080d2:	02 85       	mov %d5,%d8
800080d4:	6d ff 3b ee 	call 80005d4a <IfxPort_setPinPadDriver>
800080d8:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
800080da:	df 3f e3 ff 	jne %d15,3,800080a0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
800080de:	0c f7       	ld.bu %d15,[%a15]7
800080e0:	08 44       	ld.bu %d4,[%a15]4
800080e2:	78 00       	st.w [%sp]0,%d15
800080e4:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800080e8:	08 95       	ld.bu %d5,[%a15]9
800080ea:	08 56       	ld.bu %d6,[%a15]5
800080ec:	08 67       	ld.bu %d7,[%a15]6
800080ee:	78 01       	st.w [%sp]4,%d15
800080f0:	40 c4       	mov.aa %a4,%a12
800080f2:	40 e5       	mov.aa %a5,%a14
800080f4:	1d ff 00 e3 	j 800046f4 <IfxVadc_configExternalMultiplexerMode>

800080f8 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
800080f8:	cc 40       	ld.a %a15,[%a4]0
800080fa:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
800080fe:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008102:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008104:	c2 4f       	add %d15,4
80008106:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
8000810a:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
8000810c:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000810e:	3f 3f 04 80 	jlt.u %d15,%d3,80008116 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
80008112:	82 0f       	mov %d15,0
80008114:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008116:	00 90       	ret 

80008118 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008118:	cc 40       	ld.a %a15,[%a4]0
8000811a:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
8000811e:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008122:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80008124:	c2 2f       	add %d15,2
80008126:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
8000812a:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
8000812e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80008130:	3f 3f 04 80 	jlt.u %d15,%d3,80008138 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80008134:	82 0f       	mov %d15,0
80008136:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008138:	00 90       	ret 

8000813a <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
8000813a:	cc 40       	ld.a %a15,[%a4]0
8000813c:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
80008140:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008144:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
80008146:	c2 4f       	add %d15,4
80008148:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
8000814c:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
8000814e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80008150:	3f 2f 04 80 	jlt.u %d15,%d2,80008158 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80008154:	82 0f       	mov %d15,0
80008156:	ac 42       	st.h [%a4]4,%d15
80008158:	00 90       	ret 

8000815a <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
8000815a:	80 52       	mov.d %d2,%a5
8000815c:	37 04 70 40 	extr.u %d4,%d4,0,16
80008160:	8f 02 60 31 	nor %d3,%d2,0
80008164:	1a 42       	add %d15,%d2,%d4
80008166:	42 3f       	add %d15,%d3
80008168:	42 23       	add %d3,%d2
8000816a:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
8000816c:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000816e:	82 06       	mov %d6,0
80008170:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008174:	6f f3 03 00 	jz.t %d3,15,8000817a <Ifx_CircularBuffer_read8+0x20>
80008178:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
8000817a:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000817e:	d4 42       	ld.a %a2,[%a4]
80008180:	60 33       	mov.a %a3,%d3
80008182:	30 32       	add.a %a2,%a3
80008184:	14 23       	ld.bu %d3,[%a2]
80008186:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80008188:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000818c:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
80008190:	c2 13       	add %d3,1
80008192:	37 03 70 30 	extr.u %d3,%d3,0,16
80008196:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
8000819a:	3f 53 04 80 	jlt.u %d3,%d5,800081a2 <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
8000819e:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800081a2:	9f 0f ec ff 	jned %d15,0,8000817a <Ifx_CircularBuffer_read8+0x20>
800081a6:	c2 f4       	add %d4,-1
800081a8:	37 04 50 40 	extr %d4,%d4,0,16
800081ac:	8b 04 40 43 	max %d4,%d4,0
800081b0:	c2 14       	add %d4,1

    return Dest;
}
800081b2:	1a 42       	add %d15,%d2,%d4
800081b4:	60 f2       	mov.a %a2,%d15
800081b6:	00 90       	ret 

800081b8 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
800081b8:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
800081bc:	d4 42       	ld.a %a2,[%a4]
800081be:	1b f4 ff 5f 	addi %d5,%d4,-1
800081c2:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
800081c6:	b9 46 06 00 	ld.hu %d6,[%a4]6
800081ca:	82 03       	mov %d3,0
800081cc:	37 05 70 20 	extr.u %d2,%d5,0,16
800081d0:	6f f5 03 00 	jz.t %d5,15,800081d6 <Ifx_CircularBuffer_read32+0x1e>
800081d4:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081d6:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081d8:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081da:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081dc:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800081e0:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800081e4:	c2 13       	add %d3,1
800081e6:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800081e8:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800081ec:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800081f0:	9f 02 f3 ff 	jned %d2,0,800081d6 <Ifx_CircularBuffer_read32+0x1e>
800081f4:	c2 f4       	add %d4,-1
800081f6:	37 04 50 40 	extr %d4,%d4,0,16
800081fa:	ac 42       	st.h [%a4]4,%d15
800081fc:	8b 04 40 43 	max %d4,%d4,0
80008200:	c2 14       	add %d4,1

    return Dest;
}
80008202:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008206:	00 90       	ret 

80008208 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008208:	80 52       	mov.d %d2,%a5
8000820a:	37 04 70 40 	extr.u %d4,%d4,0,16
8000820e:	8f 02 60 31 	nor %d3,%d2,0
80008212:	1a 42       	add %d15,%d2,%d4
80008214:	42 3f       	add %d15,%d3
80008216:	42 23       	add %d3,%d2
80008218:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
8000821a:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000821c:	82 06       	mov %d6,0
8000821e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008222:	6f f3 03 00 	jz.t %d3,15,80008228 <Ifx_CircularBuffer_write8+0x20>
80008226:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
80008228:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000822c:	d4 42       	ld.a %a2,[%a4]
8000822e:	60 33       	mov.a %a3,%d3
80008230:	04 f5       	ld.bu %d5,[%a15+]
80008232:	30 32       	add.a %a2,%a3
80008234:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
80008236:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000823a:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
8000823e:	c2 13       	add %d3,1
80008240:	37 03 70 30 	extr.u %d3,%d3,0,16
80008244:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008248:	3f 53 04 80 	jlt.u %d3,%d5,80008250 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
8000824c:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008250:	9f 0f ec ff 	jned %d15,0,80008228 <Ifx_CircularBuffer_write8+0x20>
80008254:	c2 f4       	add %d4,-1
80008256:	37 04 50 40 	extr %d4,%d4,0,16
8000825a:	8b 04 40 43 	max %d4,%d4,0
8000825e:	c2 14       	add %d4,1

    return source;
}
80008260:	1a 42       	add %d15,%d2,%d4
80008262:	60 f2       	mov.a %a2,%d15
80008264:	00 90       	ret 

80008266 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008266:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
8000826a:	d4 42       	ld.a %a2,[%a4]
8000826c:	1b f4 ff 5f 	addi %d5,%d4,-1
80008270:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008274:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008278:	82 03       	mov %d3,0
8000827a:	37 05 70 20 	extr.u %d2,%d5,0,16
8000827e:	6f f5 03 00 	jz.t %d5,15,80008284 <Ifx_CircularBuffer_write32+0x1e>
80008282:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008284:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008288:	c2 13       	add %d3,1
8000828a:	48 05       	ld.w %d5,[%a15]0
8000828c:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000828e:	c2 4f       	add %d15,4
80008290:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008294:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008296:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000829a:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
8000829e:	9f 02 f3 ff 	jned %d2,0,80008284 <Ifx_CircularBuffer_write32+0x1e>
800082a2:	c2 f4       	add %d4,-1
800082a4:	37 04 50 40 	extr %d4,%d4,0,16
800082a8:	ac 42       	st.h [%a4]4,%d15
800082aa:	8b 04 40 43 	max %d4,%d4,0
800082ae:	c2 14       	add %d4,1

    return source;
}
800082b0:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800082b4:	00 90       	ret 

800082b6 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
800082b6:	1d 00 07 16 	j 8000aec4 <free>

800082ba <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800082ba:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082bc:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800082be:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
800082c2:	82 1f       	mov %d15,1
800082c4:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082c8:	1b 72 02 f0 	addi %d15,%d2,39
800082cc:	8f 7f c0 f1 	andn %d15,%d15,7
800082d0:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800082d2:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
800082d4:	82 0f       	mov %d15,0
800082d6:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
800082d8:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800082da:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800082de:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
800082e0:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800082e2:	6c 43       	st.w [%a4]12,%d15
800082e4:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
800082e6:	ac 4b       	st.h [%a4]22,%d15
800082e8:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
800082ea:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
800082ee:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
800082f2:	00 90       	ret 

800082f4 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800082f4:	c2 34       	add %d4,3
800082f6:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
800082fa:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800082fc:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80008300:	1b 8f 02 40 	addi %d4,%d15,40
80008304:	6d 00 da 15 	call 8000aeb8 <malloc>
80008308:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
8000830a:	bc 25       	jz.a %a2,80008314 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
8000830c:	0b f8 10 48 	mov %e4,%d8,%d15
80008310:	1d ff d5 ff 	j 800082ba <Ifx_Fifo_init>
    }

    return fifo;
}
80008314:	00 90       	ret 

80008316 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008316:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008318:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
8000831a:	3f f4 6a 00 	jlt %d4,%d15,800083ee <Ifx_Fifo_canReadCount+0xd8>
8000831e:	8c 4c       	ld.h %d15,[%a4]24
80008320:	3f 4f 67 00 	jlt %d15,%d4,800083ee <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008324:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008328:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000832c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008330:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
80008332:	8c 42       	ld.h %d15,[%a4]4
80008334:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
80008336:	4e 4c       	jgtz %d4,8000834e <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008338:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
8000833a:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
8000833e:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
80008342:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008344:	df 00 55 00 	jeq %d0,0,800083ee <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
80008348:	0d 00 00 03 	enable 
8000834c:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000834e:	82 f2       	mov %d2,-1
80008350:	06 f2       	sh %d2,-1
80008352:	ba f6       	eq %d15,%d6,-1
80008354:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008358:	82 f5       	mov %d5,-1
8000835a:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000835c:	ee 16       	jnz %d15,80008388 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000835e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008362:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008366:	0d 00 40 03 	disable 
8000836a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000836c:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008370:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008374:	02 15       	mov %d5,%d1
80008376:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000837a:	76 23       	jz %d2,80008380 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
8000837c:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008380:	0b 65 40 50 	addx %d5,%d5,%d6
80008384:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
80008388:	82 0f       	mov %d15,0
8000838a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000838e:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008392:	76 03       	jz %d0,80008398 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
80008394:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008398:	82 f6       	mov %d6,-1
8000839a:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000839c:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800083a0:	6e 08       	jz %d15,800083b0 <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
800083a2:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
800083a6:	82 0f       	mov %d15,0
800083a8:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
800083aa:	8b 12 00 22 	eq %d2,%d2,1
800083ae:	00 90       	ret 
800083b0:	ba f5       	eq %d15,%d5,-1
800083b2:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800083b6:	ee f3       	jnz %d15,8000839c <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083b8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083bc:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083c0:	0d 00 40 03 	disable 
800083c4:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800083c6:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800083ca:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800083ce:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800083d2:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083d6:	76 23       	jz %d2,800083dc <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
800083d8:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800083dc:	0b 3f 00 21 	eq %d2,%d15,%d3
800083e0:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800083e4:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800083e8:	df 02 da ff 	jne %d2,0,8000839c <Ifx_Fifo_canReadCount+0x86>
800083ec:	3c db       	j 800083a2 <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
800083ee:	00 90       	ret 

800083f0 <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
800083f0:	20 08       	sub.a %sp,8
800083f2:	40 4f       	mov.aa %a15,%a4
800083f4:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
800083f6:	df 04 b6 00 	jeq %d4,0,80008562 <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
800083fa:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800083fc:	82 f2       	mov %d2,-1
800083fe:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80008400:	8c 4c       	ld.h %d15,[%a4]24
80008402:	06 f2       	sh %d2,-1
80008404:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008406:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008408:	82 fa       	mov %d10,-1
8000840a:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000840c:	ba f6       	eq %d15,%d6,-1
8000840e:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008412:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008414:	ee 16       	jnz %d15,80008440 <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008416:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000841a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000841e:	0d 00 40 03 	disable 
80008422:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008424:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008428:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000842c:	02 3a       	mov %d10,%d3
8000842e:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008432:	76 23       	jz %d2,80008438 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008434:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008438:	0b 6a 40 a0 	addx %d10,%d10,%d6
8000843c:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008440:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
80008442:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
80008444:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008446:	a0 0c       	mov.a %a12,0
80008448:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000844a:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000844e:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008452:	0d 00 40 03 	disable 
80008456:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
80008458:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000845a:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000845e:	8c fd       	ld.h %d15,[%a15]26
80008460:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
80008464:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008468:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
8000846c:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000846e:	a2 3b       	sub %d11,%d3
80008470:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008474:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008478:	0b f9 80 30 	sub %d3,%d9,%d15
8000847c:	0b 23 80 21 	min %d2,%d3,%d2
80008480:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008482:	76 43       	jz %d4,80008488 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008484:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
80008488:	6e 20       	jz %d15,800084c8 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
8000848a:	40 a4       	mov.aa %a4,%sp
8000848c:	02 f4       	mov %d4,%d15
8000848e:	6d ff 66 fe 	call 8000815a <Ifx_CircularBuffer_read8>
80008492:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008494:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008498:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000849c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800084a0:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800084a2:	88 23       	ld.h %d3,[%a15]4
800084a4:	a2 b3       	sub %d3,%d11
800084a6:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
800084a8:	48 33       	ld.w %d3,[%a15]12
800084aa:	76 39       	jz %d3,800084bc <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
800084ac:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
800084ae:	8e f3       	jlez %d15,800084b4 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
800084b0:	68 3f       	st.w [%a15]12,%d15
800084b2:	3c 05       	j 800084bc <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084b4:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084b6:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084b8:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084bc:	76 23       	jz %d2,800084c2 <Ifx_Fifo_read+0xd2>
    {
        __enable();
800084be:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800084c2:	a2 b9       	sub %d9,%d11
800084c4:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800084c8:	76 d4       	jz %d13,800084d0 <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
800084ca:	82 0f       	mov %d15,0
800084cc:	68 2f       	st.w [%a15]8,%d15
                break;
800084ce:	3c 48       	j 8000855e <Ifx_Fifo_read+0x16e>
800084d0:	ba fa       	eq %d15,%d10,-1
800084d2:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800084d6:	ee 1b       	jnz %d15,8000850c <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084d8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084dc:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084e0:	0d 00 40 03 	disable 
800084e4:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084e6:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084ea:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800084ee:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084f2:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084f6:	76 23       	jz %d2,800084fc <Ifx_Fifo_read+0x10c>
    {
        __enable();
800084f8:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800084fc:	0b 8f 00 21 	eq %d2,%d15,%d8
80008500:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008504:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008508:	df 02 e1 ff 	jne %d2,0,800084ca <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
8000850c:	df 09 29 00 	jeq %d9,0,8000855e <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008510:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008514:	ee 1f       	jnz %d15,80008552 <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008516:	ba fa       	eq %d15,%d10,-1
80008518:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
8000851c:	ee fa       	jnz %d15,80008510 <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000851e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008522:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008526:	0d 00 40 03 	disable 
8000852a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000852c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008530:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008534:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008538:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000853c:	76 23       	jz %d2,80008542 <Ifx_Fifo_read+0x152>
    {
        __enable();
8000853e:	0d 00 00 03 	enable 
80008542:	0b 8f 00 21 	eq %d2,%d15,%d8
80008546:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
8000854a:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000854e:	df 02 e1 ff 	jne %d2,0,80008510 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
80008552:	39 fd 1c 00 	ld.bu %d13,[%a15]28
80008556:	8b 0d 00 d2 	eq %d13,%d13,0
8000855a:	1d ff 78 ff 	j 8000844a <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
8000855e:	8c a2       	ld.h %d15,[%sp]4
80008560:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
80008562:	02 92       	mov %d2,%d9
80008564:	00 90       	ret 

80008566 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008566:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000856a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000856e:	0d 00 40 03 	disable 
80008572:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
80008574:	4c 43       	ld.w %d15,[%a4]12
80008576:	6e 06       	jz %d15,80008582 <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
80008578:	82 0f       	mov %d15,0
8000857a:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
8000857c:	82 1f       	mov %d15,1
8000857e:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
80008582:	82 0f       	mov %d15,0
80008584:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008588:	82 0f       	mov %d15,0
8000858a:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
8000858c:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000858e:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
80008590:	8c 4b       	ld.h %d15,[%a4]22
80008592:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008594:	76 23       	jz %d2,8000859a <Ifx_Fifo_clear+0x34>
    {
        __enable();
80008596:	0d 00 00 03 	enable 
8000859a:	00 90       	ret 

8000859c <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
8000859c:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
8000859e:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800085a0:	3f f4 75 00 	jlt %d4,%d15,8000868a <Ifx_Fifo_canWriteCount+0xee>
800085a4:	8c 4c       	ld.h %d15,[%a4]24
800085a6:	3f 4f 72 00 	jlt %d15,%d4,8000868a <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085aa:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800085ae:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085b2:	0d 00 40 03 	disable 
800085b6:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
800085b8:	c9 43 18 00 	ld.h %d3,[%a4]24
800085bc:	8c 42       	ld.h %d15,[%a4]4
800085be:	5a f3       	sub %d15,%d3,%d15
800085c0:	3f 4f 0d 00 	jlt %d15,%d4,800085da <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
800085c4:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
800085c6:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
800085ca:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800085ce:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085d0:	df 00 5d 00 	jeq %d0,0,8000868a <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
800085d4:	0d 00 00 03 	enable 
800085d8:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085da:	82 f2       	mov %d2,-1
800085dc:	06 f2       	sh %d2,-1
800085de:	ba f6       	eq %d15,%d6,-1
800085e0:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800085e4:	82 f5       	mov %d5,-1
800085e6:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085e8:	ee 16       	jnz %d15,80008614 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085ea:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085ee:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085f2:	0d 00 40 03 	disable 
800085f6:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800085f8:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085fc:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008600:	02 15       	mov %d5,%d1
80008602:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008606:	76 23       	jz %d2,8000860c <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008608:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000860c:	0b 65 40 50 	addx %d5,%d5,%d6
80008610:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008614:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008616:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
8000861a:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000861e:	8c 4c       	ld.h %d15,[%a4]24
80008620:	5a f2       	sub %d15,%d2,%d15
80008622:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008624:	82 02       	mov %d2,0
80008626:	0b 42 a0 41 	max %d4,%d2,%d4
8000862a:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000862e:	76 03       	jz %d0,80008634 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
80008630:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008634:	82 f6       	mov %d6,-1
80008636:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008638:	39 4f 1d 00 	ld.bu %d15,[%a4]29
8000863c:	6e 08       	jz %d15,8000864c <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
8000863e:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
80008642:	82 0f       	mov %d15,0
80008644:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
80008646:	8b 12 00 22 	eq %d2,%d2,1
8000864a:	00 90       	ret 
8000864c:	ba f5       	eq %d15,%d5,-1
8000864e:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008652:	ee f3       	jnz %d15,80008638 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008654:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008658:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000865c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008660:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008662:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008666:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000866a:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000866e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008672:	76 23       	jz %d2,80008678 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008674:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008678:	0b 3f 00 21 	eq %d2,%d15,%d3
8000867c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008680:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008684:	df 02 da ff 	jne %d2,0,80008638 <Ifx_Fifo_canWriteCount+0x9c>
80008688:	3c db       	j 8000863e <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
8000868a:	00 90       	ret 

8000868c <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
8000868c:	20 08       	sub.a %sp,8
8000868e:	40 4f       	mov.aa %a15,%a4
80008690:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008692:	df 04 be 00 	jeq %d4,0,8000880e <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
80008696:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008698:	82 f2       	mov %d2,-1
8000869a:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
8000869c:	8c 4c       	ld.h %d15,[%a4]24
8000869e:	06 f2       	sh %d2,-1
800086a0:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
800086a2:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
800086a4:	82 fa       	mov %d10,-1
800086a6:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086a8:	ba f6       	eq %d15,%d6,-1
800086aa:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800086ae:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086b0:	ee 16       	jnz %d15,800086dc <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086b2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086b6:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086ba:	0d 00 40 03 	disable 
800086be:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800086c0:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086c4:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086c8:	02 3a       	mov %d10,%d3
800086ca:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086ce:	76 23       	jz %d2,800086d4 <Ifx_Fifo_write+0x48>
    {
        __enable();
800086d0:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800086d4:	0b 6a 40 a0 	addx %d10,%d10,%d6
800086d8:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800086dc:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
800086de:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
800086e0:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800086e2:	a0 0c       	mov.a %a12,0
800086e4:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086e6:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800086ea:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086ee:	0d 00 40 03 	disable 
800086f2:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
800086f4:	88 c4       	ld.h %d4,[%a15]24
800086f6:	88 2b       	ld.h %d11,[%a15]4
800086f8:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800086fc:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
80008700:	8c fd       	ld.h %d15,[%a15]26
80008702:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008706:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000870a:	4b f2 01 22 	div %e2,%d2,%d15
8000870e:	a2 3b       	sub %d11,%d3
80008710:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008714:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008718:	0b f9 80 20 	sub %d2,%d9,%d15
8000871c:	0b 42 80 41 	min %d4,%d2,%d4
80008720:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008722:	76 53       	jz %d5,80008728 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008724:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
80008728:	6e 26       	jz %d15,80008774 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
8000872a:	40 a4       	mov.aa %a4,%sp
8000872c:	02 f4       	mov %d4,%d15
8000872e:	6d ff 6d fd 	call 80008208 <Ifx_CircularBuffer_write8>
80008732:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008734:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008738:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000873c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008740:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008742:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008744:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008746:	42 b2       	add %d2,%d11
80008748:	37 02 50 20 	extr %d2,%d2,0,16
8000874c:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000874e:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008752:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
80008754:	48 22       	ld.w %d2,[%a15]8
80008756:	76 29       	jz %d2,80008768 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
80008758:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
8000875a:	8e f3       	jlez %d15,80008760 <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
8000875c:	68 2f       	st.w [%a15]8,%d15
8000875e:	3c 05       	j 80008768 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008760:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008762:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008764:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008768:	76 33       	jz %d3,8000876e <Ifx_Fifo_write+0xe2>
    {
        __enable();
8000876a:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000876e:	a2 b9       	sub %d9,%d11
80008770:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008774:	76 d4       	jz %d13,8000877c <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008776:	82 0f       	mov %d15,0
80008778:	68 3f       	st.w [%a15]12,%d15
                break;
8000877a:	3c 48       	j 8000880a <Ifx_Fifo_write+0x17e>
8000877c:	ba fa       	eq %d15,%d10,-1
8000877e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008782:	ee 1b       	jnz %d15,800087b8 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008784:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008788:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000878c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008790:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008792:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008796:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000879a:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000879e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087a2:	76 23       	jz %d2,800087a8 <Ifx_Fifo_write+0x11c>
    {
        __enable();
800087a4:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800087a8:	0b 8f 00 21 	eq %d2,%d15,%d8
800087ac:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800087b0:	0b f8 90 22 	or.lt %d2,%d8,%d15
800087b4:	df 02 e1 ff 	jne %d2,0,80008776 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
800087b8:	df 09 29 00 	jeq %d9,0,8000880a <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800087bc:	39 ff 1d 00 	ld.bu %d15,[%a15]29
800087c0:	ee 1f       	jnz %d15,800087fe <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800087c2:	ba fa       	eq %d15,%d10,-1
800087c4:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800087c8:	ee fa       	jnz %d15,800087bc <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800087ca:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800087ce:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800087d2:	0d 00 40 03 	disable 
800087d6:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800087d8:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800087dc:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800087e0:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800087e4:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087e8:	76 23       	jz %d2,800087ee <Ifx_Fifo_write+0x162>
    {
        __enable();
800087ea:	0d 00 00 03 	enable 
800087ee:	0b 8f 00 21 	eq %d2,%d15,%d8
800087f2:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800087f6:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800087fa:	df 02 e1 ff 	jne %d2,0,800087bc <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
800087fe:	39 fd 1d 00 	ld.bu %d13,[%a15]29
80008802:	8b 0d 00 d2 	eq %d13,%d13,0
80008806:	1d ff 70 ff 	j 800086e6 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
8000880a:	8c a2       	ld.h %d15,[%sp]4
8000880c:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
8000880e:	02 92       	mov %d2,%d9
80008810:	00 90       	ret 
	...

80008814 <syncInfoState>:
void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
    printInfoDisplay(); 
}

void syncInfoState(void){
80008814:	00 90       	ret 

80008816 <updatePacket>:


}

void updatePacket(void){
80008816:	00 90       	ret 

80008818 <printStateLv1>:
    }

}

void printStateLv1(){
    sprintf(buf, "\xDB\xDB");
80008818:	91 00 00 f7 	movh.a %a15,28672
8000881c:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008820:	91 00 00 28 	movh.a %a2,32768
80008824:	d9 22 d4 60 	lea %a2,[%a2]3476 <80000d94 <IfxVadc_Adc_masterIndex+0x40>>
80008828:	40 f4       	mov.aa %a4,%a15
8000882a:	04 2f       	ld.bu %d15,[%a2+]
8000882c:	24 ff       	st.b [%a15+],%d15
8000882e:	ee fe       	jnz %d15,8000882a <printStateLv1+0x12>
    lcd_print(buf);
80008830:	1d ff c3 dc 	j 800041b6 <lcd_print>

80008834 <printStateLv2>:
}
void printStateLv2(){
    sprintf(buf, "\xDB\xDB\xDB\xDB");
80008834:	91 00 00 f7 	movh.a %a15,28672
80008838:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
8000883c:	91 00 00 28 	movh.a %a2,32768
80008840:	d9 22 d7 60 	lea %a2,[%a2]3479 <80000d97 <IfxVadc_Adc_masterIndex+0x43>>
80008844:	40 f4       	mov.aa %a4,%a15
80008846:	04 2f       	ld.bu %d15,[%a2+]
80008848:	24 ff       	st.b [%a15+],%d15
8000884a:	ee fe       	jnz %d15,80008846 <printStateLv2+0x12>
    lcd_print(buf);
8000884c:	1d ff b5 dc 	j 800041b6 <lcd_print>

80008850 <printStateLv3>:
}
void printStateLv3(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB");
80008850:	91 00 00 f7 	movh.a %a15,28672
80008854:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008858:	91 00 00 28 	movh.a %a2,32768
8000885c:	d9 22 dc 60 	lea %a2,[%a2]3484 <80000d9c <IfxVadc_Adc_masterIndex+0x48>>
80008860:	40 f4       	mov.aa %a4,%a15
80008862:	04 2f       	ld.bu %d15,[%a2+]
80008864:	24 ff       	st.b [%a15+],%d15
80008866:	ee fe       	jnz %d15,80008862 <printStateLv3+0x12>
    lcd_print(buf);
80008868:	1d ff a7 dc 	j 800041b6 <lcd_print>

8000886c <printStateLv4>:
}
void printStateLv4(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB\xDB\xDB");
8000886c:	91 00 00 f7 	movh.a %a15,28672
80008870:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008874:	91 00 00 28 	movh.a %a2,32768
80008878:	d9 22 e3 60 	lea %a2,[%a2]3491 <80000da3 <IfxVadc_Adc_masterIndex+0x4f>>
8000887c:	40 f4       	mov.aa %a4,%a15
8000887e:	04 2f       	ld.bu %d15,[%a2+]
80008880:	24 ff       	st.b [%a15+],%d15
80008882:	ee fe       	jnz %d15,8000887e <printStateLv4+0x12>
    lcd_print(buf);
80008884:	1d ff 99 dc 	j 800041b6 <lcd_print>

80008888 <printStateOn>:
}
void printStateOn(){
    sprintf(buf, "mode on");
80008888:	91 00 00 f7 	movh.a %a15,28672
8000888c:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008890:	91 00 00 28 	movh.a %a2,32768
80008894:	d9 22 ec 60 	lea %a2,[%a2]3500 <80000dac <IfxVadc_Adc_masterIndex+0x58>>
80008898:	40 f4       	mov.aa %a4,%a15
8000889a:	04 2f       	ld.bu %d15,[%a2+]
8000889c:	24 ff       	st.b [%a15+],%d15
8000889e:	ee fe       	jnz %d15,8000889a <printStateOn+0x12>
    lcd_print(buf);
800088a0:	1d ff 8b dc 	j 800041b6 <lcd_print>

800088a4 <printStateOff>:
}
void printStateOff(){
    sprintf(buf, "mode off");
800088a4:	91 00 00 f7 	movh.a %a15,28672
800088a8:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088ac:	91 00 00 28 	movh.a %a2,32768
800088b0:	d9 22 f4 60 	lea %a2,[%a2]3508 <80000db4 <IfxVadc_Adc_masterIndex+0x60>>
800088b4:	40 f4       	mov.aa %a4,%a15
800088b6:	04 2f       	ld.bu %d15,[%a2+]
800088b8:	24 ff       	st.b [%a15+],%d15
800088ba:	ee fe       	jnz %d15,800088b6 <printStateOff+0x12>
    lcd_print(buf);
800088bc:	1d ff 7d dc 	j 800041b6 <lcd_print>

800088c0 <printStateRed>:
}
void printStateRed(){
    sprintf(buf, "light red");
800088c0:	91 00 00 f7 	movh.a %a15,28672
800088c4:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088c8:	91 00 00 28 	movh.a %a2,32768
800088cc:	d9 22 fd 60 	lea %a2,[%a2]3517 <80000dbd <IfxVadc_Adc_masterIndex+0x69>>
800088d0:	40 f4       	mov.aa %a4,%a15
800088d2:	04 2f       	ld.bu %d15,[%a2+]
800088d4:	24 ff       	st.b [%a15+],%d15
800088d6:	ee fe       	jnz %d15,800088d2 <printStateRed+0x12>
    lcd_print(buf);
800088d8:	1d ff 6f dc 	j 800041b6 <lcd_print>

800088dc <printStateGreen>:
}
void printStateGreen(){
    sprintf(buf, "light green");
800088dc:	91 00 00 f7 	movh.a %a15,28672
800088e0:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088e4:	91 00 00 28 	movh.a %a2,32768
800088e8:	d9 22 c7 70 	lea %a2,[%a2]3527 <80000dc7 <IfxVadc_Adc_masterIndex+0x73>>
800088ec:	40 f4       	mov.aa %a4,%a15
800088ee:	04 2f       	ld.bu %d15,[%a2+]
800088f0:	24 ff       	st.b [%a15+],%d15
800088f2:	ee fe       	jnz %d15,800088ee <printStateGreen+0x12>
    lcd_print(buf);
800088f4:	1d ff 61 dc 	j 800041b6 <lcd_print>

800088f8 <printStateBlue>:
}
void printStateBlue(){
    sprintf(buf, "light blue");
800088f8:	91 00 00 f7 	movh.a %a15,28672
800088fc:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008900:	91 00 00 28 	movh.a %a2,32768
80008904:	d9 22 d3 70 	lea %a2,[%a2]3539 <80000dd3 <IfxVadc_Adc_masterIndex+0x7f>>
80008908:	40 f4       	mov.aa %a4,%a15
8000890a:	04 2f       	ld.bu %d15,[%a2+]
8000890c:	24 ff       	st.b [%a15+],%d15
8000890e:	ee fe       	jnz %d15,8000890a <printStateBlue+0x12>
    lcd_print(buf);
80008910:	1d ff 53 dc 	j 800041b6 <lcd_print>

80008914 <printInfoDisplay>:
    printInfoDisplay(); 
}


void printInfoDisplay(){
    lcd_goto(0,0);
80008914:	d2 04       	mov %e4,0
80008916:	6d ff 49 dc 	call 800041a8 <lcd_goto>
    switch (infoState) {
8000891a:	91 00 00 c7 	movh.a %a12,28672
8000891e:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <infoState>>
80008922:	91 00 00 47 	movh.a %a4,28672
80008926:	d9 44 c8 00 	lea %a4,[%a4]3080 <70000c08 <buf>>
8000892a:	ff 7f 55 80 	jge.u %d15,7,800089d4 <printInfoDisplay+0xc0>
8000892e:	91 10 00 f8 	movh.a %a15,32769
80008932:	d9 ff bc 48 	lea %a15,[%a15]-30404 <8000893c <printInfoDisplay+0x28>>
80008936:	90 ff       	addsc.a %a15,%a15,%d15,2
80008938:	dc 0f       	ji %a15
8000893a:	00 00       	nop 
8000893c:	1d 00 0e 00 	j 80008958 <printInfoDisplay+0x44>
80008940:	1d 00 15 00 	j 8000896a <printInfoDisplay+0x56>
80008944:	1d 00 1c 00 	j 8000897c <printInfoDisplay+0x68>
80008948:	1d 00 23 00 	j 8000898e <printInfoDisplay+0x7a>
8000894c:	1d 00 2a 00 	j 800089a0 <printInfoDisplay+0x8c>
80008950:	1d 00 31 00 	j 800089b2 <printInfoDisplay+0x9e>
80008954:	1d 00 38 00 	j 800089c4 <printInfoDisplay+0xb0>
        case tunnelMode:
            sprintf(buf, "Tunnel Mode");
80008958:	91 00 00 28 	movh.a %a2,32768
8000895c:	40 4f       	mov.aa %a15,%a4
8000895e:	d9 22 de 70 	lea %a2,[%a2]3550 <80000dde <IfxVadc_Adc_masterIndex+0x8a>>
80008962:	04 2f       	ld.bu %d15,[%a2+]
80008964:	24 ff       	st.b [%a15+],%d15
80008966:	ee fe       	jnz %d15,80008962 <printInfoDisplay+0x4e>
80008968:	3c 36       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case airConditionMode:
            sprintf(buf,"Air Conditional");
8000896a:	91 00 00 28 	movh.a %a2,32768
8000896e:	40 4f       	mov.aa %a15,%a4
80008970:	d9 22 ea 70 	lea %a2,[%a2]3562 <80000dea <IfxVadc_Adc_masterIndex+0x96>>
80008974:	04 2f       	ld.bu %d15,[%a2+]
80008976:	24 ff       	st.b [%a15+],%d15
80008978:	ee fe       	jnz %d15,80008974 <printInfoDisplay+0x60>
8000897a:	3c 2d       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case chairDegree:
            sprintf(buf,"Chair Degree");
8000897c:	91 00 00 28 	movh.a %a2,32768
80008980:	40 4f       	mov.aa %a15,%a4
80008982:	d9 22 fa 70 	lea %a2,[%a2]3578 <80000dfa <IfxVadc_Adc_masterIndex+0xa6>>
80008986:	04 2f       	ld.bu %d15,[%a2+]
80008988:	24 ff       	st.b [%a15+],%d15
8000898a:	ee fe       	jnz %d15,80008986 <printInfoDisplay+0x72>
8000898c:	3c 24       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case window:
            sprintf(buf,"window");
8000898e:	91 00 00 28 	movh.a %a2,32768
80008992:	40 4f       	mov.aa %a15,%a4
80008994:	d9 22 c7 80 	lea %a2,[%a2]3591 <80000e07 <IfxVadc_Adc_masterIndex+0xb3>>
80008998:	04 2f       	ld.bu %d15,[%a2+]
8000899a:	24 ff       	st.b [%a15+],%d15
8000899c:	ee fe       	jnz %d15,80008998 <printInfoDisplay+0x84>
8000899e:	3c 1b       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case embientLight:
            sprintf(buf,"embient light");
800089a0:	91 00 00 28 	movh.a %a2,32768
800089a4:	40 4f       	mov.aa %a15,%a4
800089a6:	d9 22 ce 80 	lea %a2,[%a2]3598 <80000e0e <IfxVadc_Adc_masterIndex+0xba>>
800089aa:	04 2f       	ld.bu %d15,[%a2+]
800089ac:	24 ff       	st.b [%a15+],%d15
800089ae:	ee fe       	jnz %d15,800089aa <printInfoDisplay+0x96>
800089b0:	3c 12       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case adasSensor:
            sprintf(buf,"adas sensor");
800089b2:	91 00 00 28 	movh.a %a2,32768
800089b6:	40 4f       	mov.aa %a15,%a4
800089b8:	d9 22 dc 80 	lea %a2,[%a2]3612 <80000e1c <IfxVadc_Adc_masterIndex+0xc8>>
800089bc:	04 2f       	ld.bu %d15,[%a2+]
800089be:	24 ff       	st.b [%a15+],%d15
800089c0:	ee fe       	jnz %d15,800089bc <printInfoDisplay+0xa8>
800089c2:	3c 09       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case driveLight:
            sprintf(buf,"Drive Light");
800089c4:	91 00 00 28 	movh.a %a2,32768
800089c8:	40 4f       	mov.aa %a15,%a4
800089ca:	d9 22 e8 80 	lea %a2,[%a2]3624 <80000e28 <IfxVadc_Adc_masterIndex+0xd4>>
800089ce:	04 2f       	ld.bu %d15,[%a2+]
800089d0:	24 ff       	st.b [%a15+],%d15
800089d2:	ee fe       	jnz %d15,800089ce <printInfoDisplay+0xba>
            break;
    }
    lcd_print(buf); 
800089d4:	6d ff f1 db 	call 800041b6 <lcd_print>
    lcd_goto(1,0);
800089d8:	d2 14       	mov %e4,1
800089da:	6d ff e7 db 	call 800041a8 <lcd_goto>
    // sprintf(buf, "state = %u", infotainmentArr[infoState]); 
    // lcd_print(buf); 

    if(infoState == tunnelMode || infoState == driveLight ){
800089de:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <infoState>>
800089e2:	91 00 00 f7 	movh.a %a15,28672
800089e6:	8b 6f 00 22 	eq %d2,%d15,6
800089ea:	8b 0f e0 24 	or.eq %d2,%d15,0
800089ee:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
800089f2:	76 26       	jz %d2,800089fe <printInfoDisplay+0xea>
        if (infotainmentArr[infoState] == 0) { //mode on
800089f4:	90 ff       	addsc.a %a15,%a15,%d15,2
800089f6:	4c f0       	ld.w %d15,[%a15]0
800089f8:	6e 36       	jz %d15,80008a64 <printInfoDisplay+0x150>
            printStateOff();
        }
        else{ //mode off
            printStateOn();
800089fa:	1d ff 47 ff 	j 80008888 <printStateOn>
        } 
    }
    else if(infoState == embientLight){
800089fe:	5e 4b       	jne %d15,4,80008a14 <printInfoDisplay+0x100>
        switch(infotainmentArr[infoState]){
80008a00:	4c f4       	ld.w %d15,[%a15]16
80008a02:	1e 15       	jeq %d15,1,80008a0c <printInfoDisplay+0xf8>
80008a04:	1e 26       	jeq %d15,2,80008a10 <printInfoDisplay+0xfc>
80008a06:	ee 37       	jnz %d15,80008a74 <printInfoDisplay+0x160>
            case 0:
                printStateRed();
80008a08:	1d ff 5c ff 	j 800088c0 <printStateRed>
                break;
            case 1:
                printStateGreen();
80008a0c:	1d ff 68 ff 	j 800088dc <printStateGreen>
                break;  
            case 2:
                printStateBlue();
80008a10:	1d ff 74 ff 	j 800088f8 <printStateBlue>
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008a14:	92 e2       	add %d2,%d15,-2
80008a16:	06 2f       	sh %d15,2
        switch(infotainmentArr[infoState]){
80008a18:	10 ff       	addsc.a %a15,%a15,%d15,0
80008a1a:	4c f0       	ld.w %d15,[%a15]0
            case 2:
                printStateBlue();
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008a1c:	ff 22 14 80 	jge.u %d2,2,80008a44 <printInfoDisplay+0x130>
        switch(infotainmentArr[infoState]){
80008a20:	ff 4f 2a 80 	jge.u %d15,4,80008a74 <printInfoDisplay+0x160>
80008a24:	91 10 00 f8 	movh.a %a15,32769
80008a28:	d9 ff b0 88 	lea %a15,[%a15]-30160 <80008a30 <printInfoDisplay+0x11c>>
80008a2c:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a2e:	dc 0f       	ji %a15
80008a30:	1d 00 1c 00 	j 80008a68 <printInfoDisplay+0x154>
80008a34:	1d 00 1c 00 	j 80008a6c <printInfoDisplay+0x158>
80008a38:	1d 00 1c 00 	j 80008a70 <printInfoDisplay+0x15c>
80008a3c:	1d 00 02 00 	j 80008a40 <printInfoDisplay+0x12c>
                break;  
            case 2:
                printStateLv3();
                break;
            case 3:
                printStateLv4();
80008a40:	1d ff 16 ff 	j 8000886c <printStateLv4>
                break;
        }
    }
    else{
        switch(infotainmentArr[infoState]){
80008a44:	ff 4f 18 80 	jge.u %d15,4,80008a74 <printInfoDisplay+0x160>
80008a48:	91 10 00 f8 	movh.a %a15,32769
80008a4c:	d9 ff 94 98 	lea %a15,[%a15]-30124 <80008a54 <printInfoDisplay+0x140>>
80008a50:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a52:	dc 0f       	ji %a15
80008a54:	1d 00 08 00 	j 80008a64 <printInfoDisplay+0x150>
80008a58:	1d 00 08 00 	j 80008a68 <printInfoDisplay+0x154>
80008a5c:	1d 00 08 00 	j 80008a6c <printInfoDisplay+0x158>
80008a60:	1d 00 08 00 	j 80008a70 <printInfoDisplay+0x15c>
            case 0:
                printStateOff();
80008a64:	1d ff 20 ff 	j 800088a4 <printStateOff>
                break;
            case 1:
                printStateLv1();
80008a68:	1d ff d8 fe 	j 80008818 <printStateLv1>
                break;  
            case 2:
                printStateLv2();
80008a6c:	1d ff e4 fe 	j 80008834 <printStateLv2>
                break;
            case 3:
                printStateLv3();
80008a70:	1d ff f0 fe 	j 80008850 <printStateLv3>
80008a74:	00 90       	ret 

80008a76 <initInfotainment>:
#include "infotainment_System.h"
#include "bsw.h"


void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008a76:	6d ff 2c db 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008a7a:	1d ff 4d ff 	j 80008914 <printInfoDisplay>

80008a7e <updateInfoState>:


}

void updateInfoState(unsigned int buttonState){
    switch (buttonState) {
80008a7e:	ff 44 4a 80 	jge.u %d4,4,80008b12 <updateInfoState+0x94>
80008a82:	91 10 00 28 	movh.a %a2,32769
80008a86:	d9 22 94 a8 	lea %a2,[%a2]-30060 <80008a94 <updateInfoState+0x16>>
80008a8a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80008a8e:	91 00 00 f7 	movh.a %a15,28672
80008a92:	dc 02       	ji %a2
80008a94:	1d 00 08 00 	j 80008aa4 <updateInfoState+0x26>
80008a98:	1d 00 10 00 	j 80008ab8 <updateInfoState+0x3a>
80008a9c:	1d 00 19 00 	j 80008ace <updateInfoState+0x50>
80008aa0:	1d 00 24 00 	j 80008ae8 <updateInfoState+0x6a>
        case btnUP:
            if (infoState + 1 <= driveLight) {
80008aa4:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008aa8:	91 00 00 27 	movh.a %a2,28672
80008aac:	ff 6f 04 00 	jge %d15,6,80008ab4 <updateInfoState+0x36>
                infoState = infoState + 1;
80008ab0:	c2 1f       	add %d15,1
80008ab2:	3c 09       	j 80008ac4 <updateInfoState+0x46>
            }
            else {
                infoState = tunnelMode;
80008ab4:	82 0f       	mov %d15,0
80008ab6:	3c 07       	j 80008ac4 <updateInfoState+0x46>
            }
            break;
        case btnDOWN:
            if (infoState - 1 >= tunnelMode) {
80008ab8:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008abc:	91 00 00 27 	movh.a %a2,28672
80008ac0:	8e f5       	jlez %d15,80008aca <updateInfoState+0x4c>
                infoState = infoState - 1;
80008ac2:	c2 ff       	add %d15,-1
80008ac4:	59 2f e8 00 	st.w [%a2]3112 <70000c28 <infoState>>,%d15
80008ac8:	3c 25       	j 80008b12 <updateInfoState+0x94>
            }
            else {
                infoState = driveLight;
80008aca:	82 6f       	mov %d15,6
80008acc:	3c fc       	j 80008ac4 <updateInfoState+0x46>
            }
            break;
        case btnLEFT:
            if(infotainmentArr[infoState] -1 >= 0){
80008ace:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008ad2:	91 00 00 f7 	movh.a %a15,28672
80008ad6:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008ada:	90 ff       	addsc.a %a15,%a15,%d15,2
80008adc:	4c f0       	ld.w %d15,[%a15]0
80008ade:	8e f3       	jlez %d15,80008ae4 <updateInfoState+0x66>
                infotainmentArr[infoState] = infotainmentArr[infoState] - 1;
80008ae0:	c2 ff       	add %d15,-1
80008ae2:	3c 17       	j 80008b10 <updateInfoState+0x92>
            }
            else{
                infotainmentArr[infoState] = 0;
80008ae4:	82 0f       	mov %d15,0
80008ae6:	3c 15       	j 80008b10 <updateInfoState+0x92>
            }
            break;
        case btnRIGHT:
            if(infotainmentArr[infoState] +1 <=  stateMaxArr[infoState]){
80008ae8:	19 ff e8 00 	ld.w %d15,[%a15]3112
80008aec:	91 00 00 28 	movh.a %a2,32768
80008af0:	91 00 00 f7 	movh.a %a15,28672
80008af4:	06 2f       	sh %d15,2
80008af6:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008afa:	d9 22 f4 80 	lea %a2,[%a2]3636 <80000e34 <stateMaxArr>>
80008afe:	10 ff       	addsc.a %a15,%a15,%d15,0
80008b00:	10 22       	addsc.a %a2,%a2,%d15,0
80008b02:	48 02       	ld.w %d2,[%a15]0
80008b04:	4c 20       	ld.w %d15,[%a2]0
80008b06:	7f f2 05 00 	jge %d2,%d15,80008b10 <updateInfoState+0x92>
                infotainmentArr[infoState] = infotainmentArr[infoState] +1;
80008b0a:	c2 12       	add %d2,1
80008b0c:	68 02       	st.w [%a15]0,%d2
80008b0e:	3c 02       	j 80008b12 <updateInfoState+0x94>
            }
            else{
                infotainmentArr[infoState] = stateMaxArr[infoState];
80008b10:	68 0f       	st.w [%a15]0,%d15
            }
            break;
        
    }
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008b12:	6d ff de da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008b16:	1d ff ff fe 	j 80008914 <printInfoDisplay>
	...

80008b1c <getPhotoresiter>:
#include "photoresistor_Driver.h"
#include "bsw.h"

int getPhotoresiter(){
    int adc_in;
    adc_in = readADCValue(PHOTO_CH);
80008b1c:	82 24       	mov %d4,2
    return adc_in;
80008b1e:	1d ff 1c dd 	j 80004556 <readADCValue>

80008b22 <initUltrasonic>:
80008b22:	91 40 00 4f 	movh.a %a4,61444
80008b26:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008b2a:	82 14       	mov %d4,1
80008b2c:	3b 00 08 50 	mov %d5,128
80008b30:	6d ff 8f e8 	call 80005c4e <IfxPort_setPinMode>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80008b34:	91 40 00 4f 	movh.a %a4,61444
80008b38:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008b3c:	82 24       	mov %d4,2
80008b3e:	3b 80 00 50 	mov %d5,8
80008b42:	1d ff 86 e8 	j 80005c4e <IfxPort_setPinMode>

80008b46 <delay_ms>:
    IfxPort_setPinModeOutput(TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

void delay_ms(unsigned long delay)
{
80008b46:	02 4a       	mov %d10,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80008b48:	6d ff 6a ea 	call 8000601c <IfxScuCcu_getSourceFrequency>
80008b4c:	91 30 00 ff 	movh.a %a15,61443
80008b50:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008b54:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008b56:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008b5a:	37 04 64 44 	extr.u %d4,%d4,8,4
80008b5e:	53 1f 40 00 	mul.u %e0,%d15,1
80008b62:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80008b66:	8f 0f 40 61 	or %d6,%d15,0
80008b6a:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
80008b6e:	3b 80 3e 40 	mov %d4,1000
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
80008b72:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
80008b76:	4b 42 11 22 	div.u %e2,%d2,%d4
80008b7a:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
80008b7e:	73 a2 68 40 	mul.u %e4,%d2,%d10
80008b82:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008b86:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008b8a:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008b8e:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008b92:	8f 0f 40 81 	or %d8,%d15,0
80008b96:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80008b9a:	0b 68 c0 20 	subx %d2,%d8,%d6
80008b9e:	0b 79 d0 30 	subc %d3,%d9,%d7
80008ba2:	3a 53       	eq %d15,%d3,%d5
80008ba4:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80008ba8:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80008bac:	ee ed       	jnz %d15,80008b86 <delay_ms+0x40>
}
80008bae:	00 90       	ret 

80008bb0 <delay_us>:

void delay_us(unsigned long delay)
{
80008bb0:	02 4a       	mov %d10,%d4
80008bb2:	6d ff 35 ea 	call 8000601c <IfxScuCcu_getSourceFrequency>
80008bb6:	91 30 00 ff 	movh.a %a15,61443
80008bba:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008bbe:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008bc0:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008bc4:	37 04 64 44 	extr.u %d4,%d4,8,4
80008bc8:	53 1f 40 00 	mul.u %e0,%d15,1
80008bcc:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80008bd0:	8f 0f 40 61 	or %d6,%d15,0
80008bd4:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_us = freq / 1000000;
80008bd8:	7b f0 00 40 	movh %d4,15
80008bdc:	1b 04 24 44 	addi %d4,%d4,16960
    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

void delay_us(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
80008be0:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_us = freq / 1000000;
80008be4:	4b 42 11 22 	div.u %e2,%d2,%d4
80008be8:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_us;
80008bec:	73 a2 68 40 	mul.u %e4,%d2,%d10
80008bf0:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008bf4:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008bf8:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008bfc:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008c00:	8f 0f 40 81 	or %d8,%d15,0
80008c04:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80008c08:	0b 68 c0 20 	subx %d2,%d8,%d6
80008c0c:	0b 79 d0 30 	subc %d3,%d9,%d7
80008c10:	3a 53       	eq %d15,%d3,%d5
80008c12:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80008c16:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80008c1a:	ee ed       	jnz %d15,80008bf4 <delay_us+0x44>
}
80008c1c:	00 90       	ret 

80008c1e <sendTrigger>:
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80008c1e:	91 40 00 ff 	movh.a %a15,61444
80008c22:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008c26:	82 2f       	mov %d15,2
80008c28:	68 1f       	st.w [%a15]4,%d15
}

void sendTrigger()
{
    IfxPort_setPinHigh(TRIG_PIN);
    delay_us(10);
80008c2a:	3b a0 00 40 	mov %d4,10
80008c2e:	7b 20 00 f0 	movh %d15,2
80008c32:	6d ff bf ff 	call 80008bb0 <delay_us>
80008c36:	68 1f       	st.w [%a15]4,%d15
80008c38:	00 90       	ret 

80008c3a <measureEchoTick>:
}


IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
{
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80008c3a:	91 40 00 ff 	movh.a %a15,61444
long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008c3e:	7b 40 07 10 	movh %d1,116
    IfxPort_setPinLow(TRIG_PIN);
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
80008c42:	d2 02       	mov %e2,0
80008c44:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008c48:	1b 01 78 1f 	addi %d1,%d1,-2176
80008c4c:	4c f9       	ld.w %d15,[%a15]36
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0){
80008c4e:	6f 2f 13 80 	jnz.t %d15,2,80008c74 <measureEchoTick+0x3a>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008c52:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008c56:	85 f0 2c 00 	ld.w %d0,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008c5a:	53 1f 40 40 	mul.u %e4,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008c5e:	8f 0f 40 21 	or %d2,%d15,0
80008c62:	0f 50 a0 30 	or %d3,%d0,%d5
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008c66:	ba 03       	eq %d15,%d3,0
80008c68:	0b 12 50 f2 	and.ge.u %d15,%d2,%d1
80008c6c:	8b 03 00 f5 	or.ne %d15,%d3,0
80008c70:	6e ee       	jz %d15,80008c4c <measureEchoTick+0x12>
80008c72:	3c 2c       	j 80008cca <measureEchoTick+0x90>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008c74:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008c78:	85 f8 2c 00 	ld.w %d8,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008c7c:	53 1f 40 00 	mul.u %e0,%d15,1
80008c80:	91 40 00 ff 	movh.a %a15,61444
    };
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008c84:	7b 40 07 00 	movh %d0,116
    result |= ((uint64)stm->CAP.U) << 32;
80008c88:	8f 0f 40 41 	or %d4,%d15,0
80008c8c:	0f 18 a0 50 	or %d5,%d8,%d1
80008c90:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008c94:	1b 00 78 0f 	addi %d0,%d0,-2176
80008c98:	4c f9       	ld.w %d15,[%a15]36
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
80008c9a:	6f 2f 17 00 	jz.t %d15,2,80008cc8 <measureEchoTick+0x8e>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008c9e:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008ca2:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008ca6:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008caa:	8f 0f 40 61 	or %d6,%d15,0
80008cae:	0f 32 a0 70 	or %d7,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008cb2:	0b 46 c0 20 	subx %d2,%d6,%d4
80008cb6:	0b 57 d0 30 	subc %d3,%d7,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008cba:	ba 03       	eq %d15,%d3,0
80008cbc:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80008cc0:	8b 03 00 f5 	or.ne %d15,%d3,0
80008cc4:	6e ea       	jz %d15,80008c98 <measureEchoTick+0x5e>
80008cc6:	3c 02       	j 80008cca <measureEchoTick+0x90>
    };
    return (long)elapsedTick;
80008cc8:	00 90       	ret 
long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008cca:	82 f2       	mov %d2,-1
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    return (long)elapsedTick;
}
80008ccc:	00 90       	ret 

80008cce <getUltrasonic>:

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

int getUltrasonic(){
    sendTrigger();
80008cce:	6d ff a8 ff 	call 80008c1e <sendTrigger>
    long echoTicks = measureEchoTick();
80008cd2:	6d ff b4 ff 	call 80008c3a <measureEchoTick>
80008cd6:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008cd8:	82 f2       	mov %d2,-1
80008cda:	1e fb       	jeq %d15,-1,80008cf0 <getUltrasonic+0x22>
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008cdc:	3b 80 0c 20 	mov %d2,200
80008ce0:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008ce4:	3b 80 3e f0 	mov %d15,1000
80008ce8:	53 12 21 20 	mul %d2,%d2,17
80008cec:	4b f2 01 22 	div %e2,%d2,%d15
    sendTrigger();
    long echoTicks = measureEchoTick();
    if(echoTicks==-1)return -1;
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}
80008cf0:	00 90       	ret 

80008cf2 <calculateDistanceCm>:
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008cf2:	3b 80 0c 20 	mov %d2,200
80008cf6:	4b 24 01 42 	div %e4,%d4,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008cfa:	3b 80 3e 20 	mov %d2,1000
80008cfe:	53 14 21 40 	mul %d4,%d4,17
80008d02:	4b 24 01 22 	div %e2,%d4,%d2
    return (int) distanceCm;
}
80008d06:	00 90       	ret 

80008d08 <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008d08:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008d0c:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008d10:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008d14:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008d18:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008d1a:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008d1c:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008d20:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80008d24:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008d28:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008d2c:	8f f8 83 81 	xor %d8,%d8,63
80008d30:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
80008d34:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008d36:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008d3a:	3b 00 b8 f0 	mov %d15,2944
80008d3e:	cd 4f e0 0f 	mtcr $psw,%d15
80008d42:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008d46:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008d4a:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008d4e:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008d52:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008d56:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008d5a:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008d5c:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008d60:	cd 42 20 09 	mtcr $pcon1,%d2
80008d64:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008d68:	53 cf 20 f0 	mul %d15,%d15,12
80008d6c:	10 22       	addsc.a %a2,%a2,%d15,0
80008d6e:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008d70:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008d72:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008d76:	d9 2f 00 46 	lea %a15,[%a2]24832
80008d7a:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008d7e:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008d80:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008d84:	2e 16       	jz.t %d15,1,80008d90 <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008d86:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008d8a:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008d8e:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008d90:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008d94:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008d98:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008d9a:	4c f0       	ld.w %d15,[%a15]0
80008d9c:	6f 0f ff ff 	jnz.t %d15,0,80008d9a <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008da0:	82 0f       	mov %d15,0
80008da2:	cd cf 20 09 	mtcr $pcon0,%d15
80008da6:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008daa:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008dac:	2e 16       	jz.t %d15,1,80008db8 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008dae:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008db2:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008db6:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008db8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008dbc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008dc0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008dc2:	4c f0       	ld.w %d15,[%a15]0
80008dc4:	6f 0f ff 7f 	jz.t %d15,0,80008dc2 <osEE_tc_core0_start+0xba>
80008dc8:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008dcc:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008dd0:	91 30 00 ff 	movh.a %a15,61443
80008dd4:	53 cf 20 f0 	mul %d15,%d15,12
80008dd8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008ddc:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008dde:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008de0:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008de2:	d9 2f 00 46 	lea %a15,[%a2]24832
80008de6:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008dea:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008dee:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008df0:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008df4:	2e 16       	jz.t %d15,1,80008e00 <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008df6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008dfa:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008dfe:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008e00:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e04:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e08:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008e0a:	4c f0       	ld.w %d15,[%a15]0
80008e0c:	6f 0f ff ff 	jnz.t %d15,0,80008e0a <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008e10:	82 0f       	mov %d15,0
80008e12:	cd 0f 04 09 	mtcr $dcon0,%d15
80008e16:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008e1a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e1c:	2e 16       	jz.t %d15,1,80008e28 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e1e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008e22:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008e26:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008e28:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e2c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e30:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008e32:	4c f0       	ld.w %d15,[%a15]0
80008e34:	6f 0f ff 7f 	jz.t %d15,0,80008e32 <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008e38:	91 30 00 ff 	movh.a %a15,61443
80008e3c:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008e40:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e42:	2e 16       	jz.t %d15,1,80008e4e <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e44:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008e48:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008e4c:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008e4e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e52:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e56:	91 30 00 ff 	movh.a %a15,61443
80008e5a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008e5e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008e60:	4c f0       	ld.w %d15,[%a15]0
80008e62:	91 30 00 2f 	movh.a %a2,61443
80008e66:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008e6a:	6f 0f fb ff 	jnz.t %d15,0,80008e60 <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
80008e6e:	7b 00 00 f8 	movh %d15,32768
80008e72:	1b 0f 20 f1 	addi %d15,%d15,4608
80008e76:	cd 4f e2 0f 	mtcr $btv,%d15
80008e7a:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80008e7e:	7b 00 00 f8 	movh %d15,32768
80008e82:	1b 0f 00 f2 	addi %d15,%d15,8192
80008e86:	cd 0f e2 0f 	mtcr $biv,%d15
80008e8a:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
80008e8e:	7b 20 00 f7 	movh %d15,28674
80008e92:	1b 0f b0 f9 	addi %d15,%d15,-25856
80008e96:	cd 8f e2 0f 	mtcr $isp,%d15
80008e9a:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008e9e:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008ea0:	2e 16       	jz.t %d15,1,80008eac <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008ea2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008ea6:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008eaa:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008eac:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008eb0:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008eb4:	91 30 00 ff 	movh.a %a15,61443
80008eb8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008ebc:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008ebe:	4c f0       	ld.w %d15,[%a15]0
80008ec0:	6f 0f ff 7f 	jz.t %d15,0,80008ebe <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
80008ec4:	91 10 00 f7 	movh.a %a15,28673
80008ec8:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008ecc:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008ece:	91 10 00 f8 	movh.a %a15,32769
80008ed2:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008ed6:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008ed8:	91 10 00 f8 	movh.a %a15,32769
80008edc:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008ee0:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
80008ee2:	91 10 00 fb 	movh.a %a15,45057
80008ee6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
80008eea:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008eec:	7b 20 00 f7 	movh %d15,28674
80008ef0:	7b 20 00 47 	movh %d4,28674
80008ef4:	1b 0f c0 69 	addi %d6,%d15,-25600
80008ef8:	1b 04 c0 4b 	addi %d4,%d4,-17408
80008efc:	a2 64       	sub %d4,%d6
80008efe:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008f00:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008f02:	df 04 16 00 	jeq %d4,0,80008f2e <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80008f06:	9a f4       	add %d15,%d4,-1
80008f08:	06 6f       	sh %d15,6
80008f0a:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008f0c:	60 3f       	mov.a %a15,%d3
80008f0e:	82 00       	mov %d0,0
80008f10:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008f12:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008f14:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008f18:	37 03 70 73 	extr.u %d7,%d3,6,16
80008f1c:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008f20:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008f22:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80008f26:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008f28:	82 53       	mov %d3,5
80008f2a:	fd f0 11 01 	loop %a15,8000914c <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008f2e:	cd 82 e3 0f 	mtcr $fcx,%d2
80008f32:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f36:	91 30 00 ff 	movh.a %a15,61443
80008f3a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f3e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f40:	2e 16       	jz.t %d15,1,80008f4c <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f42:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f46:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f4a:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008f4c:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f50:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f54:	91 30 00 ff 	movh.a %a15,61443
80008f58:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f5c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008f5e:	40 f2       	mov.aa %a2,%a15
80008f60:	4c 20       	ld.w %d15,[%a2]0
80008f62:	91 30 00 ff 	movh.a %a15,61443
80008f66:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f6a:	6f 0f fb ff 	jnz.t %d15,0,80008f60 <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80008f6e:	4c f1       	ld.w %d15,[%a15]4
80008f70:	96 08       	or %d15,8
80008f72:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f74:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f76:	2e 16       	jz.t %d15,1,80008f82 <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f78:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f7c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f80:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008f82:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f86:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f8a:	91 30 00 ff 	movh.a %a15,61443
80008f8e:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f92:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008f94:	4c f0       	ld.w %d15,[%a15]0
80008f96:	6f 0f ff 7f 	jz.t %d15,0,80008f94 <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008f9a:	91 30 00 ff 	movh.a %a15,61443
80008f9e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008fa2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008fa4:	2e 16       	jz.t %d15,1,80008fb0 <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008fa6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008faa:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008fae:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008fb0:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008fb4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008fb8:	91 30 00 ff 	movh.a %a15,61443
80008fbc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008fc0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008fc2:	40 f2       	mov.aa %a2,%a15
80008fc4:	4c 20       	ld.w %d15,[%a2]0
80008fc6:	91 30 00 ff 	movh.a %a15,61443
80008fca:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008fce:	6f 0f fb ff 	jnz.t %d15,0,80008fc4 <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
80008fd2:	4c f1       	ld.w %d15,[%a15]4
80008fd4:	96 08       	or %d15,8
80008fd6:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008fd8:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008fda:	2e 16       	jz.t %d15,1,80008fe6 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008fdc:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008fe0:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008fe4:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008fe6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008fea:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008fee:	91 30 00 ff 	movh.a %a15,61443
80008ff2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008ff6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008ff8:	4c f0       	ld.w %d15,[%a15]0
80008ffa:	6f 0f ff 7f 	jz.t %d15,0,80008ff8 <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008ffe:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
80009002:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80009004:	d9 44 38 01 	lea %a4,[%a4]4152 <80001038 <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
80009008:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
8000900a:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
8000900c:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
8000900e:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
80009010:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80009012:	9e f6       	jeq %d15,-1,8000903e <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009014:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009018:	76 49       	jz %d4,8000902a <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
8000901a:	60 4f       	mov.a %a15,%d4
8000901c:	40 32       	mov.aa %a2,%a3
8000901e:	b0 ff       	add.a %a15,-1
80009020:	89 22 48 01 	st.d [%a2+]8,%e2
80009024:	fc fe       	loop %a15,80009020 <osEE_tc_core0_start+0x318>
80009026:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
8000902a:	2e 22       	jz.t %d15,2,8000902e <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
8000902c:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
8000902e:	2e 12       	jz.t %d15,1,80009032 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
80009030:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80009032:	2e 02       	jz.t %d15,0,80009036 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80009034:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80009036:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
8000903a:	bd 04 ea ff 	jnz.a %a4,8000900e <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
8000903e:	91 00 00 68 	movh.a %a6,32768
80009042:	d9 66 20 21 	lea %a6,[%a6]4256 <800010a0 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80009046:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
80009048:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
8000904a:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
8000904e:	df ff 21 00 	jeq %d15,-1,80009090 <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009052:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009056:	76 4f       	jz %d4,80009074 <osEE_tc_core0_start+0x36c>
80009058:	60 4f       	mov.a %a15,%d4
8000905a:	40 43       	mov.aa %a3,%a4
8000905c:	40 52       	mov.aa %a2,%a5
8000905e:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
80009060:	09 22 48 01 	ld.d %e2,[%a2+]8
80009064:	89 32 48 01 	st.d [%a3+]8,%e2
80009068:	fc fc       	loop %a15,80009060 <osEE_tc_core0_start+0x358>
8000906a:	06 34       	sh %d4,3
8000906c:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
80009070:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80009074:	2e 23       	jz.t %d15,2,8000907a <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80009076:	44 52       	ld.w %d2,[%a5+]
80009078:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
8000907a:	2e 14       	jz.t %d15,1,80009082 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
8000907c:	09 52 c2 00 	ld.hu %d2,[%a5+]2
80009080:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80009082:	2e 03       	jz.t %d15,0,80009088 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
80009084:	0c 50       	ld.bu %d15,[%a5]0
80009086:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
80009088:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
8000908c:	bd 06 dd ff 	jnz.a %a6,80009046 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80009090:	91 30 00 ff 	movh.a %a15,61443
80009094:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009098:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
8000909a:	2e 16       	jz.t %d15,1,800090a6 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
8000909c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800090a0:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800090a4:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800090a6:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800090aa:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800090ae:	91 30 00 ff 	movh.a %a15,61443
800090b2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090b6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800090b8:	4c f0       	ld.w %d15,[%a15]0
800090ba:	6f 0f ff ff 	jnz.t %d15,0,800090b8 <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
800090be:	7b 20 22 f1 	movh %d15,4642
800090c2:	91 30 00 ff 	movh.a %a15,61443
800090c6:	1b 1f 10 f0 	addi %d15,%d15,257
800090ca:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800090ce:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
800090d0:	7b 00 00 f5 	movh %d15,20480
800090d4:	91 30 00 ff 	movh.a %a15,61443
800090d8:	1b 0f 10 f1 	addi %d15,%d15,4352
800090dc:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800090e0:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
800090e2:	7b 70 00 f0 	movh %d15,7
800090e6:	91 30 00 ff 	movh.a %a15,61443
800090ea:	1b cf 01 f0 	addi %d15,%d15,28
800090ee:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
800090f2:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
800090f4:	4c f0       	ld.w %d15,[%a15]0
800090f6:	6f 1f ff 7f 	jz.t %d15,1,800090f4 <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
800090fa:	91 30 00 ff 	movh.a %a15,61443
800090fe:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009102:	4c f0       	ld.w %d15,[%a15]0
80009104:	6f 8f ff 7f 	jz.t %d15,8,80009102 <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80009108:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
8000910c:	91 30 00 ff 	movh.a %a15,61443
80009110:	1b 04 20 4c 	addi %d4,%d4,-15872
80009114:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009118:	6d 00 58 00 	call 800091c8 <osEE_tc_set_pll_fsource>
8000911c:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
8000911e:	2e 16       	jz.t %d15,1,8000912a <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80009120:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80009124:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80009128:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
8000912a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
8000912e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80009132:	91 30 00 ff 	movh.a %a15,61443
80009136:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000913a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
8000913c:	4c f0       	ld.w %d15,[%a15]0
8000913e:	6f 0f ff 7f 	jz.t %d15,0,8000913c <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80009142:	6d ff 74 da 	call 8000462a <main>
80009146:	02 24       	mov %d4,%d2
80009148:	6d 00 3e 28 	call 8000e1c4 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000914c:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
8000914e:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80009152:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009154:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009156:	37 0f 70 23 	extr.u %d2,%d15,6,16
8000915a:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
8000915e:	76 36       	jz %d3,8000916a <osEE_tc_core0_start+0x462>
80009160:	1b 0f fc ff 	addi %d15,%d15,-64
80009164:	fc f4       	loop %a15,8000914c <osEE_tc_core0_start+0x444>
80009166:	1d ff e4 fe 	j 80008f2e <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
8000916a:	cd c2 e3 0f 	mtcr $lcx,%d2
8000916e:	0d 00 c0 04 	isync 
80009172:	3c f7       	j 80009160 <osEE_tc_core0_start+0x458>

80009174 <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
80009174:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009176:	91 00 00 f7 	movh.a %a15,28672
8000917a:	19 ff c8 10 	ld.w %d15,[%a15]3144 <70000c48 <osEE_tc_stm_freq_khz>>
8000917e:	3b 80 3e 20 	mov %d2,1000
80009182:	3f 2f 0c 80 	jlt.u %d15,%d2,8000919a <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80009186:	7b 20 06 21 	movh %d2,4194
8000918a:	1b 32 dd 24 	addi %d2,%d2,19923
8000918e:	73 2f 68 20 	mul.u %e2,%d15,%d2
80009192:	8f a3 1f 20 	sh %d2,%d3,-6
80009196:	e2 42       	mul %d2,%d4
80009198:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
8000919a:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
8000919c:	73 f4 0a 20 	mul %d2,%d4,%d15
800091a0:	7b 20 06 31 	movh %d3,4194
800091a4:	1b 33 dd 34 	addi %d3,%d3,19923
800091a8:	73 32 68 20 	mul.u %e2,%d2,%d3
800091ac:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
800091b0:	3f 54 0b 80 	jlt.u %d4,%d5,800091c6 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
800091b4:	7b 20 06 21 	movh %d2,4194
800091b8:	1b 32 dd 24 	addi %d2,%d2,19923
800091bc:	73 24 68 40 	mul.u %e4,%d4,%d2
800091c0:	8f a5 1f 20 	sh %d2,%d5,-6
800091c4:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
800091c6:	00 90       	ret 

800091c8 <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
800091c8:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
800091ca:	7b e0 e4 20 	movh %d2,3662
800091ce:	1b 12 c0 21 	addi %d2,%d2,7169
800091d2:	0b 24 30 f1 	lt.u %d15,%d4,%d2
800091d6:	82 22       	mov %d2,2
800091d8:	ab 12 80 ff 	sel %d15,%d15,%d2,1
800091dc:	60 f4       	mov.a %a4,%d15
800091de:	53 ff 20 f0 	mul %d15,%d15,15
800091e2:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800091e4:	3b 00 01 e0 	mov %d14,16
800091e8:	82 03       	mov %d3,0
800091ea:	7b c0 be 20 	movh %d2,3052
800091ee:	1b 02 20 2c 	addi %d2,%d2,-15872
800091f2:	02 28       	mov %d8,%d2
800091f4:	82 01       	mov %d1,0
800091f6:	82 0b       	mov %d11,0
800091f8:	82 0d       	mov %d13,0
800091fa:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
800091fc:	7b 10 13 a0 	movh %d10,305
80009200:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009204:	91 40 0f 60 	movh.a %a6,244
80009208:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
8000920c:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
8000920e:	53 14 40 60 	mul.u %e6,%d4,1
80009212:	60 62       	mov.a %a2,%d6
80009214:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009216:	91 80 7d f1 	movh.a %a15,6104
8000921a:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
8000921e:	a0 1c       	mov.a %a12,1
80009220:	3c 5e       	j 800092dc <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80009222:	4b ea 11 62 	div.u %e6,%d10,%d14
80009226:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009228:	7b 60 f8 ff 	movh %d15,65414
8000922c:	1b 0f e0 fe 	addi %d15,%d15,-4608
80009230:	0b f6 40 60 	addx %d6,%d6,%d15
80009234:	8b f7 bf 50 	addc %d5,%d7,-1
80009238:	ba 05       	eq %d15,%d5,0
8000923a:	80 67       	mov.d %d7,%a6
8000923c:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009240:	8b 05 00 f5 	or.ne %d15,%d5,0
80009244:	ee 4a       	jnz %d15,800092d8 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80009246:	df 00 56 00 	jeq %d0,0,800092f2 <osEE_tc_set_pll_fsource+0x12a>
8000924a:	02 e9       	mov %d9,%d14
8000924c:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
8000924e:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80009250:	80 2f       	mov.d %d15,%a2
80009252:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009256:	80 3f       	mov.d %d15,%a3
80009258:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
8000925c:	7b 80 82 fe 	movh %d15,59432
80009260:	1b 0f c0 f7 	addi %d15,%d15,31744
80009264:	0b f6 40 60 	addx %d6,%d6,%d15
80009268:	8b f7 bf 50 	addc %d5,%d7,-1
8000926c:	ba 05       	eq %d15,%d5,0
8000926e:	80 f7       	mov.d %d7,%a15
80009270:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009274:	8b 05 00 f5 	or.ne %d15,%d5,0
80009278:	ee 25       	jnz %d15,800092c2 <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
8000927a:	0f 23 a0 f0 	or %d15,%d3,%d2
8000927e:	6e 2d       	jz %d15,800092d8 <osEE_tc_set_pll_fsource+0x110>
80009280:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
80009282:	4b 96 11 22 	div.u %e2,%d6,%d9
80009286:	02 2f       	mov %d15,%d2
80009288:	e2 af       	mul %d15,%d10
8000928a:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
8000928c:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80009290:	df 0f ac 00 	jeq %d15,0,800093e8 <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
80009294:	0b 13 00 51 	eq %d5,%d3,%d1
80009298:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
8000929c:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
800092a0:	ab 01 80 15 	sel %d1,%d5,%d1,0
800092a4:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
800092a8:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
800092ac:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
800092b0:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
800092b2:	8b 16 68 52 	lt.u %d5,%d6,129
800092b6:	8b 0f 20 54 	and.ne %d5,%d15,0
800092ba:	df 05 e4 ff 	jne %d5,0,80009282 <osEE_tc_set_pll_fsource+0xba>
800092be:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800092c0:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
800092c2:	80 4f       	mov.d %d15,%a4
800092c4:	42 f0       	add %d0,%d15
800092c6:	80 56       	mov.d %d6,%a5
800092c8:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
800092ca:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
800092ce:	8b d0 61 f2 	lt.u %d15,%d0,29
800092d2:	8b 05 20 f4 	and.ne %d15,%d5,0
800092d6:	ee bd       	jnz %d15,80009250 <osEE_tc_set_pll_fsource+0x88>
800092d8:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800092dc:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
800092de:	0f 32 a0 f0 	or %d15,%d2,%d3
800092e2:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
800092e6:	8b 0e 20 52 	ne %d5,%d14,0
800092ea:	8b 0f 20 54 	and.ne %d5,%d15,0
800092ee:	df 05 9a ff 	jne %d5,0,80009222 <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
800092f2:	06 14       	sh %d4,1
800092f4:	7b c0 1e f5 	movh %d15,20972
800092f8:	1b ff 51 f8 	addi %d15,%d15,-31457
800092fc:	73 f4 68 40 	mul.u %e4,%d4,%d15
80009300:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
80009304:	ba 01       	eq %d15,%d1,0
80009306:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
8000930a:	8b 01 00 f5 	or.ne %d15,%d1,0
8000930e:	ee 73       	jnz %d15,800093f4 <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
80009310:	c2 fc       	add %d12,-1
80009312:	91 30 00 ff 	movh.a %a15,61443
80009316:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000931a:	4c f0       	ld.w %d15,[%a15]0
8000931c:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
80009320:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
80009322:	91 30 00 ff 	movh.a %a15,61443
80009326:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000932a:	4c f0       	ld.w %d15,[%a15]0
8000932c:	6f 5f ff 7f 	jz.t %d15,5,8000932a <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
80009330:	91 30 00 ff 	movh.a %a15,61443
80009334:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009338:	4c f0       	ld.w %d15,[%a15]0
8000933a:	96 01       	or %d15,1
8000933c:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
8000933e:	91 30 00 ff 	movh.a %a15,61443
80009342:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009346:	4c f0       	ld.w %d15,[%a15]0
80009348:	6f 0f ff 7f 	jz.t %d15,0,80009346 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
8000934c:	9a fb       	add %d15,%d11,-1
8000934e:	91 30 00 ff 	movh.a %a15,61443
80009352:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009356:	16 0f       	and %d15,15
80009358:	8f 8f 01 f0 	sh %d15,%d15,24
8000935c:	48 02       	ld.w %d2,[%a15]0
8000935e:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80009362:	a6 2f       	or %d15,%d2
80009364:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009366:	9a fd       	add %d15,%d13,-1
80009368:	16 7f       	and %d15,127
8000936a:	8f 9f 00 f0 	sh %d15,%d15,9
8000936e:	48 02       	ld.w %d2,[%a15]0
80009370:	b7 02 87 24 	insert %d2,%d2,0,9,7
80009374:	a6 2f       	or %d15,%d2
80009376:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80009378:	4c f0       	ld.w %d15,[%a15]0
8000937a:	8f 2f c0 f1 	andn %d15,%d15,2
8000937e:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
80009380:	4c f0       	ld.w %d15,[%a15]0
80009382:	96 40       	or %d15,64
80009384:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009386:	4c f0       	ld.w %d15,[%a15]0
80009388:	96 20       	or %d15,32
8000938a:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
8000938c:	91 30 00 ff 	movh.a %a15,61443
80009390:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009394:	4c f0       	ld.w %d15,[%a15]0
80009396:	6f 3f ff ff 	jnz.t %d15,3,80009394 <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
8000939a:	91 30 00 ff 	movh.a %a15,61443
8000939e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800093a2:	4c f0       	ld.w %d15,[%a15]0
800093a4:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800093a8:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
800093aa:	91 30 00 ff 	movh.a %a15,61443
800093ae:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800093b2:	4c f0       	ld.w %d15,[%a15]0
800093b4:	6f 2f ff 7f 	jz.t %d15,2,800093b2 <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
800093b8:	91 30 00 ff 	movh.a %a15,61443
800093bc:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800093c0:	4c f0       	ld.w %d15,[%a15]0
800093c2:	8f 1f c0 f1 	andn %d15,%d15,1
800093c6:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
800093c8:	91 30 00 ff 	movh.a %a15,61443
800093cc:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800093d0:	4c f0       	ld.w %d15,[%a15]0
800093d2:	6f 0f ff ff 	jnz.t %d15,0,800093d0 <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
800093d6:	91 30 00 ff 	movh.a %a15,61443
800093da:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800093de:	4c f0       	ld.w %d15,[%a15]0
800093e0:	8f 0f c4 f1 	andn %d15,%d15,64
800093e4:	68 0f       	st.w [%a15]0,%d15
800093e6:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
800093e8:	02 28       	mov %d8,%d2
800093ea:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800093ec:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800093ee:	02 0c       	mov %d12,%d0
800093f0:	1d ff 68 ff 	j 800092c0 <osEE_tc_set_pll_fsource+0xf8>
800093f4:	00 90       	ret 

800093f6 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
800093f6:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
800093f8:	91 30 00 ff 	movh.a %a15,61443
800093fc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80009400:	4c f0       	ld.w %d15,[%a15]0
80009402:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
80009406:	7b 60 5f 20 	movh %d2,1526
8000940a:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
8000940e:	6e 45       	jz %d15,80009498 <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
80009410:	91 30 00 ff 	movh.a %a15,61443
80009414:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009418:	4c f0       	ld.w %d15,[%a15]0
8000941a:	6f 0f 11 00 	jz.t %d15,0,8000943c <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
8000941e:	91 30 00 ff 	movh.a %a15,61443
80009422:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009426:	48 02       	ld.w %d2,[%a15]0
80009428:	37 02 67 28 	extr.u %d2,%d2,16,7
8000942c:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
8000942e:	7b 10 13 f0 	movh %d15,305
80009432:	1b 0f d0 f2 	addi %d15,%d15,11520
80009436:	4b 2f 11 22 	div.u %e2,%d15,%d2
8000943a:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
8000943c:	4c f0       	ld.w %d15,[%a15]0
8000943e:	6f 3f 11 00 	jz.t %d15,3,80009460 <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009442:	91 30 00 ff 	movh.a %a15,61443
80009446:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000944a:	48 02       	ld.w %d2,[%a15]0
8000944c:	8f f2 07 21 	and %d2,%d2,127
80009450:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80009452:	7b 10 13 20 	movh %d2,305
80009456:	1b 02 d0 22 	addi %d2,%d2,11520
8000945a:	4b f2 11 22 	div.u %e2,%d2,%d15
8000945e:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009460:	91 30 00 ff 	movh.a %a15,61443
80009464:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009468:	4c f0       	ld.w %d15,[%a15]0
8000946a:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
8000946e:	91 30 00 ff 	movh.a %a15,61443
80009472:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009476:	4c f0       	ld.w %d15,[%a15]0
80009478:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
8000947c:	48 02       	ld.w %d2,[%a15]0
8000947e:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009482:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
80009484:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80009488:	7b 10 13 20 	movh %d2,305
8000948c:	1b 02 d0 22 	addi %d2,%d2,11520
80009490:	4b f2 11 22 	div.u %e2,%d2,%d15
80009494:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
80009498:	00 90       	ret 

8000949a <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
8000949a:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
8000949c:	6d ff ad ff 	call 800093f6 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
800094a0:	91 30 00 ff 	movh.a %a15,61443
800094a4:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800094a8:	4c f0       	ld.w %d15,[%a15]0
800094aa:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800094ae:	c2 12       	add %d2,1
800094b0:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
800094b4:	7b 20 06 f1 	movh %d15,4194
800094b8:	1b 3f dd f4 	addi %d15,%d15,19923
800094bc:	73 f2 68 20 	mul.u %e2,%d2,%d15
800094c0:	8f a3 1f f0 	sh %d15,%d3,-6
800094c4:	91 00 00 f7 	movh.a %a15,28672
800094c8:	59 ff c8 10 	st.w [%a15]3144 <70000c48 <osEE_tc_stm_freq_khz>>,%d15
800094cc:	00 90       	ret 

800094ce <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
800094ce:	40 ae       	mov.aa %a14,%sp
800094d0:	02 59       	mov %d9,%d5
800094d2:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
800094d6:	6d ff 4f fe 	call 80009174 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
800094da:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800094de:	8f 38 00 f1 	and %d15,%d8,3
800094e2:	9b 0f 0f 40 	addih %d4,%d15,240
800094e6:	8f 84 00 40 	sh %d4,%d4,8
800094ea:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
800094ec:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800094ee:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800094f0:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800094f2:	df 09 23 00 	jeq %d9,0,80009538 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
800094f6:	48 e2       	ld.w %d2,[%a15]56
800094f8:	b7 02 05 24 	insert %d2,%d2,0,8,5
800094fc:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800094fe:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
80009502:	48 e2       	ld.w %d2,[%a15]56
80009504:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80009508:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
8000950a:	48 f2       	ld.w %d2,[%a15]60
8000950c:	8f 42 c0 21 	andn %d2,%d2,4
80009510:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
80009512:	48 f2       	ld.w %d2,[%a15]60
80009514:	8f 12 40 21 	or %d2,%d2,1
80009518:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
8000951a:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000951c:	60 f2       	mov.a %a2,%d15
8000951e:	d9 2f 50 28 	lea %a15,[%a2]-31600
80009522:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009526:	b7 89 99 93 	insert %d9,%d9,8,7,25
8000952a:	8f 38 00 81 	and %d8,%d8,3
8000952e:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009532:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009534:	68 09       	st.w [%a15]0,%d9
80009536:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
80009538:	48 f2       	ld.w %d2,[%a15]60
8000953a:	8f 12 c0 21 	andn %d2,%d2,1
8000953e:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
80009540:	1b 2f 09 f7 	addi %d15,%d15,28818
80009544:	9b 0f e0 f1 	addih %d15,%d15,7680
80009548:	06 3f       	sh %d15,3
8000954a:	82 02       	mov %d2,0
8000954c:	60 ff       	mov.a %a15,%d15
8000954e:	68 02       	st.w [%a15]0,%d2
80009550:	00 90       	ret 

80009552 <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
80009552:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009554:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
80009558:	6d ff 0e fe 	call 80009174 <osEE_tc_stm_us_ticks>
8000955c:	16 03       	and %d15,3
8000955e:	9b 0f 0f f0 	addih %d15,%d15,240
80009562:	8f 8f 00 f0 	sh %d15,%d15,8
80009566:	60 ff       	mov.a %a15,%d15
80009568:	4c fc       	ld.w %d15,[%a15]48
8000956a:	42 f2       	add %d2,%d15
8000956c:	68 c2       	st.w [%a15]48,%d2
8000956e:	00 90       	ret 

80009570 <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
80009570:	40 ae       	mov.aa %a14,%sp
80009572:	02 59       	mov %d9,%d5
80009574:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009578:	6d ff fe fd 	call 80009174 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
8000957c:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80009580:	8f 38 00 f1 	and %d15,%d8,3
80009584:	9b 0f 0f 40 	addih %d4,%d15,240
80009588:	8f 84 00 40 	sh %d4,%d4,8
8000958c:	60 4f       	mov.a %a15,%d4
8000958e:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80009590:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80009592:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80009594:	df 09 28 00 	jeq %d9,0,800095e4 <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
80009598:	48 e2       	ld.w %d2,[%a15]56
8000959a:	b7 02 05 2c 	insert %d2,%d2,0,24,5
8000959e:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800095a0:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
800095a4:	8f f3 01 31 	and %d3,%d3,31
800095a8:	8f 03 01 30 	sh %d3,%d3,16
800095ac:	48 e2       	ld.w %d2,[%a15]56
800095ae:	b7 02 05 28 	insert %d2,%d2,0,16,5
800095b2:	a6 23       	or %d3,%d2
800095b4:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
800095b6:	48 f2       	ld.w %d2,[%a15]60
800095b8:	8f 02 44 21 	or %d2,%d2,64
800095bc:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
800095be:	48 f2       	ld.w %d2,[%a15]60
800095c0:	8f 02 41 21 	or %d2,%d2,16
800095c4:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
800095c6:	06 3f       	sh %d15,3
800095c8:	60 f2       	mov.a %a2,%d15
800095ca:	d9 2f 54 28 	lea %a15,[%a2]-31596
800095ce:	11 4f 00 ff 	addih.a %a15,%a15,61444
800095d2:	b7 89 99 93 	insert %d9,%d9,8,7,25
800095d6:	8f 38 00 81 	and %d8,%d8,3
800095da:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800095de:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800095e0:	68 09       	st.w [%a15]0,%d9
800095e2:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
800095e4:	48 f2       	ld.w %d2,[%a15]60
800095e6:	8f 02 c1 21 	andn %d2,%d2,16
800095ea:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
800095ec:	06 3f       	sh %d15,3
800095ee:	60 f2       	mov.a %a2,%d15
800095f0:	d9 2f 54 28 	lea %a15,[%a2]-31596
800095f4:	11 4f 00 ff 	addih.a %a15,%a15,61444
800095f8:	82 0f       	mov %d15,0
800095fa:	68 0f       	st.w [%a15]0,%d15
800095fc:	00 90       	ret 

800095fe <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
800095fe:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009600:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
80009604:	6d ff b8 fd 	call 80009174 <osEE_tc_stm_us_ticks>
80009608:	16 03       	and %d15,3
8000960a:	9b 0f 0f f0 	addih %d15,%d15,240
8000960e:	8f 8f 00 f0 	sh %d15,%d15,8
80009612:	60 ff       	mov.a %a15,%d15
80009614:	4c fd       	ld.w %d15,[%a15]52
80009616:	42 f2       	add %d2,%d15
80009618:	68 d2       	st.w [%a15]52,%d2
8000961a:	00 90       	ret 

8000961c <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
8000961c:	40 ae       	mov.aa %a14,%sp
8000961e:	4d c0 e1 ff 	mfcr %d15,$core_id
80009622:	16 03       	and %d15,3
80009624:	9b 0f 0f f0 	addih %d15,%d15,240
80009628:	8f 8f 00 f0 	sh %d15,%d15,8
8000962c:	60 f2       	mov.a %a2,%d15
8000962e:	d9 2f 10 00 	lea %a15,[%a2]16
80009632:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
80009636:	6d ff 9f fd 	call 80009174 <osEE_tc_stm_us_ticks>
8000963a:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
8000963c:	a2 8f       	sub %d15,%d8
8000963e:	3f 2f fe ff 	jlt.u %d15,%d2,8000963a <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
80009642:	00 90       	ret 

80009644 <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
80009644:	40 ae       	mov.aa %a14,%sp
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
80009646:	6d 00 87 05 	call 8000a154 <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
8000964a:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000964e:	00 80       	rfe 
80009650:	00 90       	ret 
	...

80009654 <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
80009654:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009656:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009658:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
8000965c:	82 32       	mov %d2,3
8000965e:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
80009662:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
80009666:	5e 25       	jne %d15,2,80009670 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009668:	99 44 04 00 	ld.a %a4,[%a4]4
8000966c:	6d 00 89 06 	call 8000a37e <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
80009670:	3c 00       	j 80009670 <osEE_shutdown_os+0x1c>

80009672 <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
80009672:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009674:	91 00 00 f8 	movh.a %a15,32768
80009678:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
8000967c:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
80009680:	82 1f       	mov %d15,1
80009682:	e9 ff 1e 00 	st.b [%a15]30,%d15
80009686:	00 90       	ret 

80009688 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
80009688:	40 ae       	mov.aa %a14,%sp
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000968a:	91 00 00 f8 	movh.a %a15,32768
8000968e:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
80009692:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <800000cc <osEE_cdb_var>>
80009696:	6e 06       	jz %d15,800096a2 <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
80009698:	82 0f       	mov %d15,0
8000969a:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000969e:	0d 00 00 03 	enable 
800096a2:	00 90       	ret 

800096a4 <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
800096a4:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096a6:	91 00 00 f8 	movh.a %a15,32768
800096aa:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
800096ae:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000cc <osEE_cdb_var>>
800096b2:	ee 0c       	jnz %d15,800096ca <SuspendAllInterrupts+0x26>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800096b4:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800096b8:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800096bc:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800096be:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800096c2:	c2 1f       	add %d15,1
800096c4:	e9 ff 1c 00 	st.b [%a15]28,%d15
800096c8:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800096ca:	8b ff 0f 22 	eq %d2,%d15,255
800096ce:	f6 25       	jnz %d2,800096d8 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
800096d0:	c2 1f       	add %d15,1
800096d2:	e9 ff 1c 00 	st.b [%a15]28,%d15
800096d6:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
800096d8:	91 00 00 48 	movh.a %a4,32768
800096dc:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
800096e0:	3b 90 01 40 	mov %d4,25
800096e4:	3c b8       	j 80009654 <osEE_shutdown_os>

800096e6 <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
800096e6:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096e8:	91 00 00 f8 	movh.a %a15,32768
800096ec:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
800096f0:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000cc <osEE_cdb_var>>
800096f4:	6e 0b       	jz %d15,8000970a <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
800096f6:	c2 ff       	add %d15,-1
800096f8:	16 ff       	and %d15,255
800096fa:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
800096fe:	ee 06       	jnz %d15,8000970a <ResumeAllInterrupts+0x24>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009700:	4c f5       	ld.w %d15,[%a15]20
80009702:	cd cf e2 0f 	mtcr $icr,%d15
80009706:	0d 00 c0 04 	isync 
8000970a:	00 90       	ret 

8000970c <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
8000970c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000970e:	91 00 00 f8 	movh.a %a15,32768
80009712:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
80009716:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000cc <osEE_cdb_var>>
8000971a:	ee 18       	jnz %d15,8000974a <SuspendOSInterrupts+0x3e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000971c:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009720:	8f f2 0f f1 	and %d15,%d2,255
80009724:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009728:	ee 0a       	jnz %d15,8000973c <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
8000972a:	02 2f       	mov %d15,%d2
8000972c:	3b 30 01 30 	mov %d3,19
80009730:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009734:	cd cf e2 0f 	mtcr $icr,%d15
80009738:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
8000973c:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
8000973e:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009742:	c2 1f       	add %d15,1
80009744:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009748:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
8000974a:	8b ff 0f 22 	eq %d2,%d15,255
8000974e:	f6 25       	jnz %d2,80009758 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
80009750:	c2 1f       	add %d15,1
80009752:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009756:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009758:	91 00 00 48 	movh.a %a4,32768
8000975c:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
80009760:	3b 90 01 40 	mov %d4,25
80009764:	1d ff 78 ff 	j 80009654 <osEE_shutdown_os>

80009768 <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
80009768:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000976a:	91 00 00 f8 	movh.a %a15,32768
8000976e:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
80009772:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000cc <osEE_cdb_var>>
80009776:	6e 16       	jz %d15,800097a2 <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
80009778:	c2 ff       	add %d15,-1
8000977a:	16 ff       	and %d15,255
8000977c:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009780:	ee 11       	jnz %d15,800097a2 <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
80009782:	48 62       	ld.w %d2,[%a15]24
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009784:	4d c0 e2 3f 	mfcr %d3,$icr
80009788:	02 3f       	mov %d15,%d3
8000978a:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000978e:	8f f2 0f 21 	and %d2,%d2,255
80009792:	5f 23 08 00 	jeq %d3,%d2,800097a2 <ResumeOSInterrupts+0x3a>
80009796:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000979a:	cd cf e2 0f 	mtcr $icr,%d15
8000979e:	0d 00 c0 04 	isync 
800097a2:	00 90       	ret 

800097a4 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
800097a4:	40 ae       	mov.aa %a14,%sp
800097a6:	02 49       	mov %d9,%d4
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800097a8:	91 00 00 f8 	movh.a %a15,32768
800097ac:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800097b0:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800097b4:	8f f8 0f f1 	and %d15,%d8,255
800097b8:	8b 3f a1 f2 	ge.u %d15,%d15,19
800097bc:	ee 0a       	jnz %d15,800097d0 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
800097be:	02 8f       	mov %d15,%d8
800097c0:	3b 30 01 20 	mov %d2,19
800097c4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800097c8:	cd cf e2 0f 	mtcr $icr,%d15
800097cc:	0d 00 c0 04 	isync 
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800097d0:	39 ff 10 00 	ld.bu %d15,[%a15]16
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
800097d4:	82 15       	mov %d5,1
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800097d6:	ee 21       	jnz %d15,80009818 <StartOS+0x74>
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800097d8:	6d 00 e6 05 	call 8000a3a4 <osEE_cpu_startos>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
800097dc:	3b 80 01 50 	mov %d5,24
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800097e0:	df 02 1c 00 	jeq %d2,0,80009818 <StartOS+0x74>
800097e4:	3c 24       	j 8000982c <StartOS+0x88>
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
800097e6:	82 2f       	mov %d15,2
800097e8:	e9 ff 10 00 	st.b [%a15]16,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
800097ec:	39 ff 10 00 	ld.bu %d15,[%a15]16
800097f0:	5e 2a       	jne %d15,2,80009804 <StartOS+0x60>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
800097f2:	40 c4       	mov.aa %a4,%a12
800097f4:	99 c5 04 00 	ld.a %a5,[%a12]4
800097f8:	40 56       	mov.aa %a6,%a5
800097fa:	6d 00 3a 06 	call 8000a46e <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
800097fe:	40 c4       	mov.aa %a4,%a12
80009800:	6d 00 8a 04 	call 8000a114 <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009804:	0d 00 40 03 	disable 
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
80009808:	3c 00       	j 80009808 <StartOS+0x64>
8000980a:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000980e:	cd cf e2 0f 	mtcr $icr,%d15
80009812:	0d 00 c0 04 	isync 
80009816:	3c 1b       	j 8000984c <StartOS+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009818:	4d c0 e2 4f 	mfcr %d4,$icr
8000981c:	02 4f       	mov %d15,%d4
8000981e:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009822:	8f f8 0f 31 	and %d3,%d8,255
80009826:	5f 34 f2 ff 	jne %d4,%d3,8000980a <StartOS+0x66>
8000982a:	3c 11       	j 8000984c <StartOS+0xa8>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
8000982c:	91 00 00 28 	movh.a %a2,32768
80009830:	d9 22 0c 30 	lea %a2,[%a2]204 <800000cc <osEE_cdb_var>>
80009834:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009838:	82 1f       	mov %d15,1
8000983a:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
8000983e:	e9 f9 11 00 	st.b [%a15]17,%d9
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
80009842:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009846:	df 1f d3 ff 	jne %d15,1,800097ec <StartOS+0x48>
8000984a:	3c ce       	j 800097e6 <StartOS+0x42>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
8000984c:	02 52       	mov %d2,%d5
8000984e:	00 90       	ret 

80009850 <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009850:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009852:	91 00 00 f8 	movh.a %a15,32768
80009856:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
8000985a:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000cc <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
8000985e:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009862:	6e 03       	jz %d15,80009868 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009864:	39 f2 11 00 	ld.bu %d2,[%a15]17
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009868:	00 90       	ret 

8000986a <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
8000986a:	40 ae       	mov.aa %a14,%sp
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000986c:	91 00 00 f8 	movh.a %a15,32768
80009870:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009874:	4c f2       	ld.w %d15,[%a15]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009876:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009878:	7f f4 39 80 	jge.u %d4,%d15,800098ea <ActivateTask+0x80>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000987c:	91 00 00 f8 	movh.a %a15,32768
80009880:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009884:	c8 1f       	ld.a %a15,[%a15]4
80009886:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000988a:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
8000988c:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009890:	ff 2f 2d 80 	jge.u %d15,2,800098ea <ActivateTask+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009894:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009898:	8f f9 0f f1 	and %d15,%d9,255
8000989c:	8b 3f a1 f2 	ge.u %d15,%d15,19
800098a0:	ee 0a       	jnz %d15,800098b4 <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
800098a2:	02 9f       	mov %d15,%d9
800098a4:	3b 30 01 20 	mov %d2,19
800098a8:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098ac:	cd cf e2 0f 	mtcr $icr,%d15
800098b0:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
800098b4:	40 f4       	mov.aa %a4,%a15
800098b6:	6d 00 23 04 	call 8000a0fc <osEE_task_activated>
800098ba:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
800098bc:	f6 28       	jnz %d2,800098cc <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
800098be:	91 00 00 48 	movh.a %a4,32768
800098c2:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
800098c6:	40 f5       	mov.aa %a5,%a15
800098c8:	6d 00 57 04 	call 8000a176 <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098cc:	4d c0 e2 3f 	mfcr %d3,$icr
800098d0:	02 3f       	mov %d15,%d3
800098d2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800098d6:	8f f9 0f 21 	and %d2,%d9,255
800098da:	5f 23 08 00 	jeq %d3,%d2,800098ea <ActivateTask+0x80>
800098de:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098e2:	cd cf e2 0f 	mtcr $icr,%d15
800098e6:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
800098ea:	02 82       	mov %d2,%d8
800098ec:	00 90       	ret 

800098ee <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
800098ee:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
800098f0:	91 00 00 f8 	movh.a %a15,32768
800098f4:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
800098f8:	48 03       	ld.w %d3,[%a15]0
800098fa:	91 00 00 28 	movh.a %a2,32768
800098fe:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
80009902:	4c 22       	ld.w %d15,[%a2]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009904:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009906:	7f f4 5e 80 	jge.u %d4,%d15,800099c2 <ChainTask+0xd4>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000990a:	91 00 00 28 	movh.a %a2,32768
8000990e:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
80009912:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
80009916:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000991a:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
8000991c:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009920:	ff 2f 51 80 	jge.u %d15,2,800099c2 <ChainTask+0xd4>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009924:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009928:	6e 09       	jz %d15,8000993a <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
8000992a:	82 0f       	mov %d15,0
8000992c:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009930:	4c f5       	ld.w %d15,[%a15]20
80009932:	cd cf e2 0f 	mtcr $icr,%d15
80009936:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
8000993a:	39 ff 1e 00 	ld.bu %d15,[%a15]30
8000993e:	6e 06       	jz %d15,8000994a <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009940:	82 0f       	mov %d15,0
80009942:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009946:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000994a:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000994e:	8f f8 0f f1 	and %d15,%d8,255
80009952:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009956:	ee 0a       	jnz %d15,8000996a <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009958:	02 8f       	mov %d15,%d8
8000995a:	3b 30 01 20 	mov %d2,19
8000995e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009962:	cd cf e2 0f 	mtcr $icr,%d15
80009966:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
8000996a:	80 cf       	mov.d %d15,%a12
8000996c:	7e 35       	jne %d15,%d3,80009976 <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
8000996e:	cc c3       	ld.a %a15,[%a12]12
80009970:	82 5f       	mov %d15,5
80009972:	28 2f       	st.b [%a15]2,%d15
80009974:	3c 15       	j 8000999e <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009976:	40 c4       	mov.aa %a4,%a12
80009978:	6d 00 c2 03 	call 8000a0fc <osEE_task_activated>
        if (ev == E_OK) {
8000997c:	df 02 1a 80 	jne %d2,0,800099b0 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009980:	91 00 00 48 	movh.a %a4,32768
80009984:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009988:	40 c5       	mov.aa %a5,%a12
8000998a:	6d 00 2a 04 	call 8000a1de <osEE_scheduler_task_insert>
8000998e:	3c 08       	j 8000999e <ChainTask+0xb0>
80009990:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009994:	cd cf e2 0f 	mtcr $icr,%d15
80009998:	0d 00 c0 04 	isync 
8000999c:	00 90       	ret 
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000999e:	91 00 00 f8 	movh.a %a15,32768
800099a2:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
800099a6:	c8 0f       	ld.a %a15,[%a15]0
800099a8:	c8 14       	ld.a %a4,[%a15]4
800099aa:	a0 05       	mov.a %a5,0
800099ac:	1d 00 98 05 	j 8000a4dc <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099b0:	4d c0 e2 3f 	mfcr %d3,$icr
800099b4:	02 3f       	mov %d15,%d3
800099b6:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800099ba:	8f f8 0f 81 	and %d8,%d8,255
800099be:	5f 83 e9 ff 	jne %d3,%d8,80009990 <ChainTask+0xa2>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
800099c2:	00 90       	ret 

800099c4 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
800099c4:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
800099c6:	91 00 00 f8 	movh.a %a15,32768
800099ca:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
800099ce:	c8 02       	ld.a %a2,[%a15]0
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
800099d0:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000cc <osEE_cdb_var>>
800099d4:	6e 09       	jz %d15,800099e6 <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
800099d6:	82 0f       	mov %d15,0
800099d8:	e9 ff 1c 00 	st.b [%a15]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099dc:	4c f5       	ld.w %d15,[%a15]20
800099de:	cd cf e2 0f 	mtcr $icr,%d15
800099e2:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
800099e6:	39 ff 1e 00 	ld.bu %d15,[%a15]30
800099ea:	6e 06       	jz %d15,800099f6 <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
800099ec:	82 0f       	mov %d15,0
800099ee:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800099f2:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099f6:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800099fa:	8f ff 0f 21 	and %d2,%d15,255
800099fe:	8b 32 a1 22 	ge.u %d2,%d2,19
80009a02:	f6 29       	jnz %d2,80009a14 <TerminateTask+0x50>
80009a04:	3b 30 01 20 	mov %d2,19
80009a08:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a0c:	cd cf e2 0f 	mtcr $icr,%d15
80009a10:	0d 00 c0 04 	isync 
80009a14:	99 24 04 00 	ld.a %a4,[%a2]4
80009a18:	a0 05       	mov.a %a5,0
80009a1a:	1d 00 61 05 	j 8000a4dc <osEE_hal_terminate_ctx>

80009a1e <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009a1e:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009a20:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009a24:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009a28:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009a2a:	c8 3c       	ld.a %a12,[%a15]12
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009a2c:	39 c2 01 00 	ld.bu %d2,[%a12]1 <800000cc <osEE_cdb_var>>
80009a30:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000cc <osEE_cdb_var>>
80009a34:	5f f2 2d 80 	jne %d2,%d15,80009a8e <Schedule+0x70>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a38:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009a3c:	8f f8 0f f1 	and %d15,%d8,255
80009a40:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009a44:	ee 0a       	jnz %d15,80009a58 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009a46:	02 8f       	mov %d15,%d8
80009a48:	3b 30 01 20 	mov %d2,19
80009a4c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a50:	cd cf e2 0f 	mtcr $icr,%d15
80009a54:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009a58:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009a5c:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009a5e:	91 00 00 48 	movh.a %a4,32768
80009a62:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009a66:	6d 00 36 04 	call 8000a2d2 <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009a6a:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009a6e:	2c c1       	st.b [%a12]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a70:	4d c0 e2 3f 	mfcr %d3,$icr
80009a74:	02 3f       	mov %d15,%d3
80009a76:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009a7a:	8f f8 0f 21 	and %d2,%d8,255
80009a7e:	5f 23 08 00 	jeq %d3,%d2,80009a8e <Schedule+0x70>
80009a82:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a86:	cd cf e2 0f 	mtcr $icr,%d15
80009a8a:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
80009a8e:	82 02       	mov %d2,0
80009a90:	00 90       	ret 

80009a92 <GetResource>:
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009a92:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009a94:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009a98:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009a9c:	c8 04       	ld.a %a4,[%a15]0
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
80009a9e:	91 00 00 f8 	movh.a %a15,32768
80009aa2:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009aa6:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009aa8:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009aaa:	7f f4 4c 80 	jge.u %d4,%d15,80009b42 <GetResource+0xb0>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
80009aae:	91 00 00 f8 	movh.a %a15,32768
80009ab2:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009ab6:	c8 3f       	ld.a %a15,[%a15]12
80009ab8:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009abc:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
80009abe:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
80009ac0:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
80009ac2:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
80009ac4:	08 14       	ld.bu %d4,[%a15]1
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ac6:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009aca:	8f f2 0f 31 	and %d3,%d2,255
80009ace:	8b 33 a1 32 	ge.u %d3,%d3,19
80009ad2:	f6 3a       	jnz %d3,80009ae6 <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009ad4:	02 23       	mov %d3,%d2
80009ad6:	3b 30 01 50 	mov %d5,19
80009ada:	37 53 08 30 	insert %d3,%d3,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ade:	cd c3 e2 0f 	mtcr $icr,%d3
80009ae2:	0d 00 c0 04 	isync 
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
80009ae6:	02 23       	mov %d3,%d2
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
80009ae8:	7f f4 16 80 	jge.u %d4,%d15,80009b14 <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009aec:	28 1f       	st.b [%a15]1,%d15

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009aee:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009af2:	8b ff 2f 72 	ne %d7,%d15,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009af6:	16 7f       	and %d15,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009af8:	c2 1f       	add %d15,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009afa:	8f 02 d0 61 	andn %d6,%d2,256
80009afe:	8f f2 cf 31 	andn %d3,%d2,255
80009b02:	a6 f3       	or %d3,%d15
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009b04:	8f f2 cf 21 	andn %d2,%d2,255
80009b08:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009b0c:	8b 05 40 52 	lt %d5,%d5,0
80009b10:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
80009b14:	b5 24 08 00 	st.a [%a2]8,%a4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b18:	4d c0 e2 5f 	mfcr %d5,$icr
80009b1c:	02 5f       	mov %d15,%d5
80009b1e:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009b22:	8f f3 0f 21 	and %d2,%d3,255
80009b26:	5f 25 08 00 	jeq %d5,%d2,80009b36 <GetResource+0xa4>
80009b2a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009b2e:	cd cf e2 0f 	mtcr $icr,%d15
80009b32:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
80009b36:	4c f1       	ld.w %d15,[%a15]4
80009b38:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
80009b3a:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009b3e:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009b40:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
80009b42:	00 90       	ret 

80009b44 <ReleaseResource>:
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009b44:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009b46:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009b4a:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009b4e:	c8 03       	ld.a %a3,[%a15]0
80009b50:	91 00 00 f8 	movh.a %a15,32768
80009b54:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009b58:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009b5a:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009b5c:	7f f4 69 80 	jge.u %d4,%d15,80009c2e <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009b60:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009b62:	91 00 00 28 	movh.a %a2,32768
80009b66:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
80009b6a:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009b6e:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009b72:	d4 22       	ld.a %a2,[%a2]
80009b74:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b76:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009b7a:	8f ff 0f 21 	and %d2,%d15,255
80009b7e:	8b 32 a1 22 	ge.u %d2,%d2,19
80009b82:	f6 2a       	jnz %d2,80009b96 <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009b84:	02 f2       	mov %d2,%d15
80009b86:	3b 30 01 30 	mov %d3,19
80009b8a:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009b8e:	cd c2 e2 0f 	mtcr $icr,%d2
80009b92:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
80009b96:	c8 14       	ld.a %a4,[%a15]4
80009b98:	d4 44       	ld.a %a4,[%a4]
80009b9a:	54 42       	ld.w %d2,[%a4]
80009b9c:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
80009b9e:	df 02 1a 00 	jeq %d2,0,80009bd2 <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009ba2:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009ba6:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009ba8:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009bac:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009bb0:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009bb4:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009bb6:	8f 0f d0 51 	andn %d5,%d15,256
80009bba:	8f ff cf 21 	andn %d2,%d15,255
80009bbe:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009bc0:	8f ff cf f1 	andn %d15,%d15,255
80009bc4:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009bc8:	8b 04 40 42 	lt %d4,%d4,0
80009bcc:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009bd0:	3c 17       	j 80009bfe <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
80009bd2:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009bd6:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009bd8:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009bdc:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009be0:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009be4:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009be6:	8f 0f d0 21 	andn %d2,%d15,256
80009bea:	8f ff cf 31 	andn %d3,%d15,255
80009bee:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009bf0:	8f ff cf 51 	andn %d5,%d15,255
80009bf4:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009bf8:	fa 06       	lt %d15,%d6,0
80009bfa:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
80009bfe:	82 02       	mov %d2,0
80009c00:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009c04:	91 00 00 48 	movh.a %a4,32768
80009c08:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009c0c:	6d 00 63 03 	call 8000a2d2 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c10:	4d c0 e2 5f 	mfcr %d5,$icr
80009c14:	02 53       	mov %d3,%d5
80009c16:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009c1a:	16 ff       	and %d15,255
80009c1c:	5f f5 08 00 	jeq %d5,%d15,80009c2c <ReleaseResource+0xe8>
80009c20:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c24:	cd c3 e2 0f 	mtcr $icr,%d3
80009c28:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
80009c2c:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
80009c2e:	00 90       	ret 

80009c30 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009c30:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009c32:	91 00 00 f8 	movh.a %a15,32768
80009c36:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c3a:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c3e:	8f f2 0f f1 	and %d15,%d2,255
80009c42:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c46:	ee 0a       	jnz %d15,80009c5a <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009c48:	02 2f       	mov %d15,%d2
80009c4a:	3b 30 01 30 	mov %d3,19
80009c4e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c52:	cd cf e2 0f 	mtcr $icr,%d15
80009c56:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009c5a:	39 ff 10 00 	ld.bu %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009c5e:	c2 ff       	add %d15,-1
80009c60:	16 ff       	and %d15,255
80009c62:	ff 2f 08 80 	jge.u %d15,2,80009c72 <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009c66:	91 00 00 48 	movh.a %a4,32768
80009c6a:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
80009c6e:	1d ff f3 fc 	j 80009654 <osEE_shutdown_os>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c72:	4d c0 e2 3f 	mfcr %d3,$icr
80009c76:	02 3f       	mov %d15,%d3
80009c78:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009c7c:	8f f2 0f 21 	and %d2,%d2,255
80009c80:	5f 23 08 00 	jeq %d3,%d2,80009c90 <ShutdownOS+0x60>
80009c84:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c88:	cd cf e2 0f 	mtcr $icr,%d15
80009c8c:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
80009c90:	82 72       	mov %d2,7
80009c92:	00 90       	ret 

80009c94 <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
80009c94:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009c96:	91 00 00 f8 	movh.a %a15,32768
80009c9a:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
80009c9e:	3b e0 00 20 	mov %d2,14
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
80009ca2:	bd 04 24 00 	jz.a %a4,80009cea <GetTaskID+0x56>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
80009ca6:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ca8:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009cac:	ff 2f 05 80 	jge.u %d15,2,80009cb6 <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009cb0:	19 22 10 00 	ld.w %d2,[%a2]16
80009cb4:	3c 19       	j 80009ce6 <GetTaskID+0x52>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009cb6:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009cb8:	de 27       	jne %d15,2,80009ce6 <GetTaskID+0x52>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
80009cba:	c8 3f       	ld.a %a15,[%a15]12
80009cbc:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
80009cbe:	bd 0f 14 00 	jz.a %a15,80009ce6 <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009cc2:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009cc4:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009cc8:	ff 2f 0b 80 	jge.u %d15,2,80009cde <GetTaskID+0x4a>
80009ccc:	3c 06       	j 80009cd8 <GetTaskID+0x44>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009cce:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009cd0:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009cd4:	ff 2f 05 80 	jge.u %d15,2,80009cde <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
80009cd8:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
80009cdc:	3c 05       	j 80009ce6 <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
80009cde:	c8 0f       	ld.a %a15,[%a15]0
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
80009ce0:	bd 0f f7 ff 	jnz.a %a15,80009cce <GetTaskID+0x3a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009ce4:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
80009ce6:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009ce8:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
80009cea:	00 90       	ret 

80009cec <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009cec:	40 ae       	mov.aa %a14,%sp
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009cee:	3b e0 00 20 	mov %d2,14
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
80009cf2:	bd 04 38 00 	jz.a %a4,80009d62 <GetTaskState+0x76>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009cf6:	91 00 00 f8 	movh.a %a15,32768
80009cfa:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009cfe:	4c f2       	ld.w %d15,[%a15]8
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009d00:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009d02:	7f f4 30 80 	jge.u %d4,%d15,80009d62 <GetTaskState+0x76>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009d06:	91 00 00 f8 	movh.a %a15,32768
80009d0a:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009d0e:	c8 1f       	ld.a %a15,[%a15]4
80009d10:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
80009d14:	c8 0f       	ld.a %a15,[%a15]0
80009d16:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
80009d18:	0c f2       	ld.bu %d15,[%a15]2
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009d1a:	82 02       	mov %d2,0
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
80009d1c:	ff 6f 23 80 	jge.u %d15,6,80009d62 <GetTaskState+0x76>
80009d20:	91 10 00 f8 	movh.a %a15,32769
80009d24:	d9 ff ec 49 	lea %a15,[%a15]-25300 <80009d2c <GetTaskState+0x40>>
80009d28:	90 ff       	addsc.a %a15,%a15,%d15,2
80009d2a:	dc 0f       	ji %a15
80009d2c:	1d 00 0c 00 	j 80009d44 <GetTaskState+0x58>
80009d30:	1d 00 0e 00 	j 80009d4c <GetTaskState+0x60>
80009d34:	1d 00 0c 00 	j 80009d4c <GetTaskState+0x60>
80009d38:	1d 00 0e 00 	j 80009d54 <GetTaskState+0x68>
80009d3c:	1d 00 10 00 	j 80009d5c <GetTaskState+0x70>
80009d40:	1d 00 0e 00 	j 80009d5c <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009d44:	82 0f       	mov %d15,0
80009d46:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009d48:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
80009d4a:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009d4c:	82 1f       	mov %d15,1
80009d4e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009d50:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
80009d52:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009d54:	82 3f       	mov %d15,3
80009d56:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009d58:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
80009d5a:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009d5c:	82 4f       	mov %d15,4
80009d5e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009d60:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
80009d62:	00 90       	ret 

80009d64 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009d64:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
80009d66:	91 00 00 f8 	movh.a %a15,32768
80009d6a:	99 fc 0c 30 	ld.a %a12,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009d6e:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009d70:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d72:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d76:	8f f8 0f f1 	and %d15,%d8,255
80009d7a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009d7e:	ee 0a       	jnz %d15,80009d92 <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009d80:	02 8f       	mov %d15,%d8
80009d82:	3b 30 01 20 	mov %d2,19
80009d86:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d8a:	cd cf e2 0f 	mtcr $icr,%d15
80009d8e:	0d 00 c0 04 	isync 
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
80009d92:	4c f3       	ld.w %d15,[%a15]12
80009d94:	26 4f       	and %d15,%d4
80009d96:	ee 13       	jnz %d15,80009dbc <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
80009d98:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009d9a:	91 00 00 48 	movh.a %a4,32768
80009d9e:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
80009da2:	d9 c5 04 00 	lea %a5,[%a12]4 <800000cc <osEE_cdb_var>>
80009da6:	6d 00 98 01 	call 8000a0d6 <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
80009daa:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
80009dac:	82 3f       	mov %d15,3
80009dae:	28 2f       	st.b [%a15]2,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
80009db0:	40 d4       	mov.aa %a4,%a13
80009db2:	d4 c5       	ld.a %a5,[%a12]
80009db4:	6d 00 c1 02 	call 8000a336 <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
80009db8:	82 0f       	mov %d15,0
80009dba:	68 2f       	st.w [%a15]8,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009dbc:	4d c0 e2 3f 	mfcr %d3,$icr
80009dc0:	02 3f       	mov %d15,%d3
80009dc2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009dc6:	8f f8 0f 21 	and %d2,%d8,255
80009dca:	5f 23 08 00 	jeq %d3,%d2,80009dda <WaitEvent+0x76>
80009dce:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009dd2:	cd cf e2 0f 	mtcr $icr,%d15
80009dd6:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
80009dda:	82 02       	mov %d2,0
80009ddc:	00 90       	ret 

80009dde <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009dde:	40 ae       	mov.aa %a14,%sp
80009de0:	20 08       	sub.a %sp,8
80009de2:	91 00 00 f8 	movh.a %a15,32768
80009de6:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009dea:	4c f2       	ld.w %d15,[%a15]8
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009dec:	3f f4 06 80 	jlt.u %d4,%d15,80009df8 <SetEvent+0x1a>
    ev = E_OS_ID;
80009df0:	82 3f       	mov %d15,3
80009df2:	e9 ef ff ff 	st.b [%a14]-1,%d15
80009df6:	3c 3c       	j 80009e6e <SetEvent+0x90>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009df8:	91 00 00 f8 	movh.a %a15,32768
80009dfc:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009e00:	c8 1f       	ld.a %a15,[%a15]4
80009e02:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009e06:	c8 04       	ld.a %a4,[%a15]0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e08:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009e0c:	8f f8 0f f1 	and %d15,%d8,255
80009e10:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009e14:	ee 0a       	jnz %d15,80009e28 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
80009e16:	02 8f       	mov %d15,%d8
80009e18:	3b 30 01 20 	mov %d2,19
80009e1c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e20:	cd cf e2 0f 	mtcr $icr,%d15
80009e24:	0d 00 c0 04 	isync 
80009e28:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
80009e2a:	d9 e5 ff ff 	lea %a5,[%a14]-1
80009e2e:	6d 00 82 01 	call 8000a132 <osEE_task_event_set_mask>

    if (p_sn != NULL) {
80009e32:	bc 2f       	jz.a %a2,80009e50 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
80009e34:	91 00 00 48 	movh.a %a4,32768
80009e38:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009e3c:	40 25       	mov.aa %a5,%a2
80009e3e:	6d 00 e7 01 	call 8000a20c <osEE_scheduler_task_unblocked>
80009e42:	76 27       	jz %d2,80009e50 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
80009e44:	91 00 00 48 	movh.a %a4,32768
80009e48:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009e4c:	6d 00 43 02 	call 8000a2d2 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e50:	4d c0 e2 3f 	mfcr %d3,$icr
80009e54:	02 3f       	mov %d15,%d3
80009e56:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e5a:	8f f8 0f 21 	and %d2,%d8,255
80009e5e:	5f 23 08 00 	jeq %d3,%d2,80009e6e <SetEvent+0x90>
80009e62:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e66:	cd cf e2 0f 	mtcr $icr,%d15
80009e6a:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009e6e:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
80009e72:	00 90       	ret 

80009e74 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
80009e74:	40 ae       	mov.aa %a14,%sp
80009e76:	91 00 00 f8 	movh.a %a15,32768
80009e7a:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009e7e:	4c f2       	ld.w %d15,[%a15]8
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009e80:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009e82:	7f f4 11 80 	jge.u %d4,%d15,80009ea4 <GetEvent+0x30>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009e86:	91 00 00 f8 	movh.a %a15,32768
80009e8a:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009e8e:	c8 1f       	ld.a %a15,[%a15]4
80009e90:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
80009e94:	c8 0f       	ld.a %a15,[%a15]0
80009e96:	c8 3f       	ld.a %a15,[%a15]12
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
80009e98:	3b e0 00 20 	mov %d2,14
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
80009e9c:	bc 44       	jz.a %a4,80009ea4 <GetEvent+0x30>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
80009e9e:	4c f3       	ld.w %d15,[%a15]12
80009ea0:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
80009ea2:	82 02       	mov %d2,0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009ea4:	00 90       	ret 

80009ea6 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009ea6:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
80009ea8:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009eac:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009eb0:	c8 0f       	ld.a %a15,[%a15]0
80009eb2:	c8 3f       	ld.a %a15,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009eb4:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009eb8:	8f f2 0f f1 	and %d15,%d2,255
80009ebc:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ec0:	ee 0a       	jnz %d15,80009ed4 <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009ec2:	02 2f       	mov %d15,%d2
80009ec4:	3b 30 01 30 	mov %d3,19
80009ec8:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ecc:	cd cf e2 0f 	mtcr $icr,%d15
80009ed0:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
80009ed4:	4c f3       	ld.w %d15,[%a15]12
80009ed6:	0f 4f e0 40 	andn %d4,%d15,%d4
80009eda:	68 34       	st.w [%a15]12,%d4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009edc:	4d c0 e2 3f 	mfcr %d3,$icr
80009ee0:	02 3f       	mov %d15,%d3
80009ee2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009ee6:	8f f2 0f 21 	and %d2,%d2,255
80009eea:	5f 23 08 00 	jeq %d3,%d2,80009efa <ClearEvent+0x54>
80009eee:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ef2:	cd cf e2 0f 	mtcr $icr,%d15
80009ef6:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
80009efa:	82 02       	mov %d2,0
80009efc:	00 90       	ret 

80009efe <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
80009efe:	40 ae       	mov.aa %a14,%sp
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009f00:	91 00 00 f8 	movh.a %a15,32768
80009f04:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009f08:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009f0a:	39 ff 14 00 	ld.bu %d15,[%a15]20 <800000cc <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
80009f0e:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009f10:	5e 22       	jne %d15,2,80009f14 <GetISRID+0x16>
    isr_id = p_tdb->tid;
80009f12:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
80009f14:	00 90       	ret 
	...

80009f18 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
80009f18:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009f1a:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
80009f1e:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
80009f20:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009f22:	bc fb       	jz.a %a15,80009f38 <osEE_release_all_m+0x20>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009f24:	82 0f       	mov %d15,0
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
80009f26:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009f28:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
80009f2a:	7c 23       	jnz.a %a2,80009f30 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
80009f2c:	99 32 04 00 	ld.a %a2,[%a3]4
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
80009f30:	c8 0f       	ld.a %a15,[%a15]0
80009f32:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009f34:	bd 0f f9 ff 	jnz.a %a15,80009f26 <osEE_release_all_m+0xe>
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
80009f38:	00 90       	ret 

80009f3a <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
80009f3a:	40 ae       	mov.aa %a14,%sp
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009f3c:	cc 43       	ld.a %a15,[%a4]12
80009f3e:	82 4f       	mov %d15,4
80009f40:	28 2f       	st.b [%a15]2,%d15
80009f42:	00 90       	ret 

80009f44 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
80009f44:	40 ae       	mov.aa %a14,%sp
80009f46:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
80009f48:	99 42 0c 00 	ld.a %a2,[%a4]12
80009f4c:	39 22 01 00 	ld.bu %d2,[%a2]1
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009f50:	82 4f       	mov %d15,4
80009f52:	2c 22       	st.b [%a2]2,%d15
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
80009f54:	8b f2 0f f2 	eq %d15,%d2,255
80009f58:	ee 13       	jnz %d15,80009f7e <osEE_scheduler_task_wrapper_run+0x3a>
80009f5a:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
80009f5e:	37 02 48 40 	extr %d4,%d2,0,8
80009f62:	82 03       	mov %d3,0
80009f64:	ce 45       	jgez %d4,80009f6e <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
80009f66:	8f f2 07 21 	and %d2,%d2,127
80009f6a:	1b 12 00 30 	addi %d3,%d2,1
80009f6e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f72:	cd cf e2 0f 	mtcr $icr,%d15
80009f76:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009f7a:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
80009f7e:	c8 62       	ld.a %a2,[%a15]24
80009f80:	2d 02 00 00 	calli %a2
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
80009f84:	91 00 00 28 	movh.a %a2,32768
80009f88:	99 22 0c 30 	ld.a %a2,[%a2]204 <800000cc <osEE_cdb_var>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
80009f8c:	82 0f       	mov %d15,0
80009f8e:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
80009f92:	39 2f 1c 00 	ld.bu %d15,[%a2]28
80009f96:	6e 09       	jz %d15,80009fa8 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
80009f98:	82 0f       	mov %d15,0
80009f9a:	e9 2f 1c 00 	st.b [%a2]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f9e:	4c 25       	ld.w %d15,[%a2]20
80009fa0:	cd cf e2 0f 	mtcr $icr,%d15
80009fa4:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
80009fa8:	39 2f 1e 00 	ld.bu %d15,[%a2]30
80009fac:	6e 06       	jz %d15,80009fb8 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
80009fae:	82 0f       	mov %d15,0
80009fb0:	e9 2f 1e 00 	st.b [%a2]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009fb4:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009fb8:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009fbc:	8f ff 0f 21 	and %d2,%d15,255
80009fc0:	8b 32 a1 22 	ge.u %d2,%d2,19
80009fc4:	f6 29       	jnz %d2,80009fd6 <osEE_scheduler_task_wrapper_run+0x92>
80009fc6:	3b 30 01 20 	mov %d2,19
80009fca:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009fce:	cd cf e2 0f 	mtcr $icr,%d15
80009fd2:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
80009fd6:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009fda:	5e 24       	jne %d15,2,80009fe2 <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
80009fdc:	40 f4       	mov.aa %a4,%a15
80009fde:	5c 9d       	call 80009f18 <osEE_release_all_m>
80009fe0:	3c 03       	j 80009fe6 <osEE_scheduler_task_wrapper_run+0xa2>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
80009fe2:	40 f4       	mov.aa %a4,%a15
80009fe4:	5c 9a       	call 80009f18 <osEE_release_all_m>
80009fe6:	c8 14       	ld.a %a4,[%a15]4
80009fe8:	a0 05       	mov.a %a5,0
80009fea:	1d 00 79 02 	j 8000a4dc <osEE_hal_terminate_ctx>

80009fee <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
80009fee:	40 ae       	mov.aa %a14,%sp
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009ff0:	91 00 00 f8 	movh.a %a15,32768
80009ff4:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009ff8:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000cc <osEE_cdb_var>>
80009ffc:	df 2f fe 7f 	jeq %d15,2,80009ff8 <osEE_idle_hook_wrapper+0xa>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
8000a000:	91 00 00 f8 	movh.a %a15,32768
8000a004:	d9 ff 0c 30 	lea %a15,[%a15]204 <800000cc <osEE_cdb_var>>
8000a008:	c8 14       	ld.a %a4,[%a15]4
8000a00a:	6d 00 ba 01 	call 8000a37e <osEE_idle_task_terminate>
8000a00e:	00 90       	ret 

8000a010 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a010:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a012:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000a014:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
8000a016:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
8000a01a:	bd 02 13 00 	jz.a %a2,8000a040 <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
8000a01e:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000a022:	bd 0f 1b 00 	jz.a %a15,8000a058 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000a026:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
8000a02a:	c8 16       	ld.a %a6,[%a15]4
8000a02c:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
8000a030:	39 42 01 00 	ld.bu %d2,[%a4]1
8000a034:	0c 61       	ld.bu %d15,[%a6]1
8000a036:	7f f2 13 80 	jge.u %d2,%d15,8000a05c <osEE_scheduler_core_rq_preempt_stk+0x4c>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
8000a03a:	82 2f       	mov %d15,2
8000a03c:	2c 42       	st.b [%a4]2,%d15
8000a03e:	3c 11       	j 8000a060 <osEE_scheduler_core_rq_preempt_stk+0x50>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a040:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
8000a042:	bd 0f 1e 00 	jz.a %a15,8000a07e <osEE_scheduler_core_rq_preempt_stk+0x6e>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
8000a046:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a04a:	99 24 0c 00 	ld.a %a4,[%a2]12
8000a04e:	82 2f       	mov %d15,2
8000a050:	2c 42       	st.b [%a4]2,%d15
8000a052:	3c 07       	j 8000a060 <osEE_scheduler_core_rq_preempt_stk+0x50>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
8000a054:	2c 51       	st.b [%a5]1,%d15
8000a056:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a058:	a0 02       	mov.a %a2,0
8000a05a:	00 90       	ret 
8000a05c:	a0 02       	mov.a %a2,0
8000a05e:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
8000a060:	4c f0       	ld.w %d15,[%a15]0
8000a062:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
8000a064:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a066:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
8000a06a:	4c 33       	ld.w %d15,[%a3]12
8000a06c:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000a06e:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
8000a070:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
8000a072:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000a076:	39 52 01 00 	ld.bu %d2,[%a5]1
8000a07a:	3f f2 ed ff 	jlt.u %d2,%d15,8000a054 <osEE_scheduler_core_rq_preempt_stk+0x44>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
8000a07e:	00 90       	ret 

8000a080 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
8000a080:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000a082:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000a084:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
8000a086:	76 44       	jz %d4,8000a08e <osEE_sn_priority_insert+0xe>
8000a088:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000a08c:	3c 03       	j 8000a092 <osEE_sn_priority_insert+0x12>
8000a08e:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
8000a092:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a094:	a0 06       	mov.a %a6,0
8000a096:	7c f3       	jnz.a %a15,8000a09c <osEE_sn_priority_insert+0x1c>
8000a098:	3c 14       	j 8000a0c0 <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a09a:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
8000a09c:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000a09e:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000a0a2:	76 44       	jz %d4,8000a0aa <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000a0a4:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a0a8:	3c 02       	j 8000a0ac <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000a0aa:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000a0ac:	3f 2f 06 80 	jlt.u %d15,%d2,8000a0b8 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a0b0:	4c f0       	ld.w %d15,[%a15]0
8000a0b2:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a0b4:	ee f3       	jnz %d15,8000a09a <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a0b6:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
8000a0b8:	bc 64       	jz.a %a6,8000a0c0 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000a0ba:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
8000a0bc:	82 02       	mov %d2,0
8000a0be:	3c 03       	j 8000a0c4 <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
8000a0c0:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
8000a0c2:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000a0c4:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000a0c6:	00 90       	ret 

8000a0c8 <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
8000a0c8:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
8000a0ca:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
8000a0ce:	82 14       	mov %d4,1
8000a0d0:	6d ff d8 ff 	call 8000a080 <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
8000a0d4:	00 90       	ret 

8000a0d6 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a0d6:	40 ae       	mov.aa %a14,%sp
8000a0d8:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000a0da:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
8000a0dc:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
8000a0de:	4c c0       	ld.w %d15,[%a12]0
8000a0e0:	68 3f       	st.w [%a15]12,%d15
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
8000a0e2:	6d ff 97 ff 	call 8000a010 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000a0e6:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
8000a0e8:	7c 28       	jnz.a %a2,8000a0f8 <osEE_scheduler_core_pop_running+0x22>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
8000a0ea:	80 d3       	mov.d %d3,%a13
8000a0ec:	c2 43       	add %d3,4
8000a0ee:	92 42       	add %d2,%d15,4
8000a0f0:	6a 32       	cmovn %d2,%d15,%d3
8000a0f2:	60 2d       	mov.a %a13,%d2
8000a0f4:	4c d0       	ld.w %d15,[%a13]0
8000a0f6:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
8000a0f8:	40 c2       	mov.aa %a2,%a12
8000a0fa:	00 90       	ret 

8000a0fc <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a0fc:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000a0fe:	cc 43       	ld.a %a15,[%a4]12
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a100:	0c f0       	ld.bu %d15,[%a15]0
8000a102:	39 43 1e 00 	ld.bu %d3,[%a4]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
8000a106:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a108:	7f 3f 05 80 	jge.u %d15,%d3,8000a112 <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
8000a10c:	c2 1f       	add %d15,1
8000a10e:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
8000a110:	82 02       	mov %d2,0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
8000a112:	00 90       	ret 

8000a114 <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
8000a114:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a116:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000a118:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000a11c:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000a11e:	0c f0       	ld.bu %d15,[%a15]0
8000a120:	c2 ff       	add %d15,-1
8000a122:	16 ff       	and %d15,255
8000a124:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000a126:	ee 03       	jnz %d15,8000a12c <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000a128:	28 2f       	st.b [%a15]2,%d15
8000a12a:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000a12c:	82 1f       	mov %d15,1
8000a12e:	28 2f       	st.b [%a15]2,%d15
8000a130:	00 90       	ret 

8000a132 <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
8000a132:	40 ae       	mov.aa %a14,%sp
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
8000a134:	cc 43       	ld.a %a15,[%a4]12
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
8000a136:	02 42       	mov %d2,%d4
8000a138:	02 43       	mov %d3,%d4
8000a13a:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
8000a13e:	82 0f       	mov %d15,0
8000a140:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a142:	4c f2       	ld.w %d15,[%a15]8
8000a144:	26 f4       	and %d4,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
8000a146:	a0 02       	mov.a %a2,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a148:	76 45       	jz %d4,8000a152 <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000a14a:	c8 42       	ld.a %a2,[%a15]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
8000a14c:	bc 23       	jz.a %a2,8000a152 <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
8000a14e:	82 0f       	mov %d15,0
8000a150:	68 4f       	st.w [%a15]16,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
8000a152:	00 90       	ret 

8000a154 <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
8000a154:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
8000a156:	91 00 00 48 	movh.a %a4,32768
8000a15a:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
8000a15e:	cc 41       	ld.a %a15,[%a4]4
8000a160:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a164:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
8000a166:	cc 53       	ld.a %a15,[%a5]12
8000a168:	0c f0       	ld.bu %d15,[%a15]0
8000a16a:	c2 1f       	add %d15,1
8000a16c:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000a16e:	a0 06       	mov.a %a6,0
8000a170:	6d 00 c4 00 	call 8000a2f8 <osEE_scheduler_task_set_running>
8000a174:	00 90       	ret 

8000a176 <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a176:	40 ae       	mov.aa %a14,%sp
8000a178:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000a17a:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000a17e:	91 00 00 f8 	movh.a %a15,32768
8000a182:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000a186:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
8000a188:	99 43 0c 00 	ld.a %a3,[%a4]12 <800000cc <osEE_cdb_var>>
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
8000a18c:	39 32 01 00 	ld.bu %d2,[%a3]1 <800000cc <osEE_cdb_var>>
8000a190:	0c 21       	ld.bu %d15,[%a2]1
8000a192:	7f f2 15 80 	jge.u %d2,%d15,8000a1bc <osEE_scheduler_task_activated+0x46>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a196:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a198:	4c 20       	ld.w %d15,[%a2]0
8000a19a:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a19c:	82 02       	mov %d2,0
8000a19e:	74 22       	st.w [%a2],%d2
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
8000a1a0:	82 2f       	mov %d15,2
8000a1a2:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000a1a4:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000a1a8:	4c f3       	ld.w %d15,[%a15]12
8000a1aa:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
8000a1ac:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
8000a1ae:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
8000a1b0:	cc 53       	ld.a %a15,[%a5]12
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
8000a1b2:	68 32       	st.w [%a15]12,%d2

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
8000a1b4:	6d 00 c1 00 	call 8000a336 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a1b8:	82 12       	mov %d2,1
8000a1ba:	00 90       	ret 
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a1bc:	0c 22       	ld.bu %d15,[%a2]2
8000a1be:	ee 05       	jnz %d15,8000a1c8 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
8000a1c0:	82 1f       	mov %d15,1
8000a1c2:	2c 22       	st.b [%a2]2,%d15
8000a1c4:	82 0f       	mov %d15,0
8000a1c6:	6c 23       	st.w [%a2]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a1c8:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a1ca:	4c 50       	ld.w %d15,[%a5]0
8000a1cc:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a1ce:	82 0f       	mov %d15,0
8000a1d0:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a1d2:	d9 f4 04 00 	lea %a4,[%a15]4
8000a1d6:	6d ff 79 ff 	call 8000a0c8 <osEE_scheduler_rq_insert>
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
8000a1da:	82 02       	mov %d2,0
  }

  return is_preemption;
}
8000a1dc:	00 90       	ret 

8000a1de <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a1de:	40 ae       	mov.aa %a14,%sp
8000a1e0:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000a1e2:	cc 53       	ld.a %a15,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
8000a1e4:	91 00 00 28 	movh.a %a2,32768
8000a1e8:	99 24 0c 30 	ld.a %a4,[%a2]204 <800000cc <osEE_cdb_var>>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a1ec:	0c f2       	ld.bu %d15,[%a15]2
8000a1ee:	ee 05       	jnz %d15,8000a1f8 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
8000a1f0:	82 1f       	mov %d15,1
8000a1f2:	28 2f       	st.b [%a15]2,%d15
8000a1f4:	82 0f       	mov %d15,0
8000a1f6:	68 3f       	st.w [%a15]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a1f8:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a1fc:	4c 50       	ld.w %d15,[%a5]0
8000a1fe:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a200:	82 0f       	mov %d15,0
8000a202:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a204:	b0 44       	add.a %a4,4
8000a206:	6d ff 61 ff 	call 8000a0c8 <osEE_scheduler_rq_insert>

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
8000a20a:	00 90       	ret 

8000a20c <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
8000a20c:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
8000a20e:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000a212:	cc 63       	ld.a %a15,[%a6]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a214:	91 00 00 28 	movh.a %a2,32768
8000a218:	99 2c 0c 30 	ld.a %a12,[%a2]204 <800000cc <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000a21c:	82 2f       	mov %d15,2
8000a21e:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
8000a220:	39 6f 1c 00 	ld.bu %d15,[%a6]28
8000a224:	28 1f       	st.b [%a15]1,%d15
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a226:	d9 c4 04 00 	lea %a4,[%a12]4
8000a22a:	6d ff 4f ff 	call 8000a0c8 <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
8000a22e:	82 0f       	mov %d15,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
8000a230:	df 12 0a 80 	jne %d2,1,8000a244 <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000a234:	d4 c2       	ld.a %a2,[%a12]
8000a236:	99 22 0c 00 	ld.a %a2,[%a2]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
8000a23a:	0c f1       	ld.bu %d15,[%a15]1
8000a23c:	39 22 01 00 	ld.bu %d2,[%a2]1
8000a240:	0b f2 30 f1 	lt.u %d15,%d2,%d15
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
8000a244:	02 f2       	mov %d2,%d15
8000a246:	00 90       	ret 

8000a248 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
8000a248:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a24a:	91 00 00 f8 	movh.a %a15,32768
8000a24e:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
8000a252:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000a254:	99 dc 0c 00 	ld.a %a12,[%a13]12 <800000cc <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000a258:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000a25a:	0c c2       	ld.bu %d15,[%a12]2
8000a25c:	de 4a       	jne %d15,4,8000a290 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a25e:	91 00 00 48 	movh.a %a4,32768
8000a262:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
8000a266:	d9 f5 04 00 	lea %a5,[%a15]4 <800000cc <osEE_cdb_var>>
8000a26a:	6d ff 36 ff 	call 8000a0d6 <osEE_scheduler_core_pop_running>
8000a26e:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
8000a270:	4c f0       	ld.w %d15,[%a15]0

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
8000a272:	80 d2       	mov.d %d2,%a13
8000a274:	5f f2 06 00 	jeq %d2,%d15,8000a280 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
8000a278:	40 d4       	mov.aa %a4,%a13
8000a27a:	6d ff 4d ff 	call 8000a114 <osEE_task_end>
8000a27e:	3c 04       	j 8000a286 <osEE_scheduler_task_terminated+0x3e>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
8000a280:	14 c2       	ld.bu %d2,[%a12]
8000a282:	c2 f2       	add %d2,-1
8000a284:	34 c2       	st.b [%a12],%d2
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
8000a286:	48 22       	ld.w %d2,[%a15]8
8000a288:	60 82       	mov.a %a2,%d8
8000a28a:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000a28c:	68 28       	st.w [%a15]8,%d8
8000a28e:	3c 20       	j 8000a2ce <osEE_scheduler_task_terminated+0x86>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
8000a290:	c8 35       	ld.a %a5,[%a15]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
8000a292:	54 52       	ld.w %d2,[%a5]
8000a294:	68 32       	st.w [%a15]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
8000a296:	39 df 1c 00 	ld.bu %d15,[%a13]28
8000a29a:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
8000a29c:	82 1f       	mov %d15,1
8000a29e:	2c c2       	st.b [%a12]2,%d15
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
8000a2a0:	0c c0       	ld.bu %d15,[%a12]0
8000a2a2:	5e 13       	jne %d15,1,8000a2a8 <osEE_scheduler_task_terminated+0x60>
8000a2a4:	82 0f       	mov %d15,0
8000a2a6:	6c c3       	st.w [%a12]12,%d15
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
8000a2a8:	d9 fc 04 00 	lea %a12,[%a15]4
8000a2ac:	40 c4       	mov.aa %a4,%a12
8000a2ae:	40 d6       	mov.aa %a6,%a13
8000a2b0:	6d ff 0c ff 	call 8000a0c8 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a2b4:	91 00 00 48 	movh.a %a4,32768
8000a2b8:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
8000a2bc:	40 c5       	mov.aa %a5,%a12
8000a2be:	6d ff a9 fe 	call 8000a010 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000a2c2:	7c 25       	jnz.a %a2,8000a2cc <osEE_scheduler_task_terminated+0x84>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
8000a2c4:	c8 32       	ld.a %a2,[%a15]12
8000a2c6:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
8000a2c8:	68 0f       	st.w [%a15]0,%d15
8000a2ca:	3c 02       	j 8000a2ce <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
8000a2cc:	4c f0       	ld.w %d15,[%a15]0
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
8000a2ce:	60 f2       	mov.a %a2,%d15
8000a2d0:	00 90       	ret 

8000a2d2 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
8000a2d2:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a2d4:	91 00 00 48 	movh.a %a4,32768
8000a2d8:	99 4f 0c 30 	ld.a %a15,[%a4]204 <800000cc <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a2dc:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
8000a2e0:	d9 f5 04 00 	lea %a5,[%a15]4 <800000cc <osEE_cdb_var>>
8000a2e4:	6d ff 96 fe 	call 8000a010 <osEE_scheduler_core_rq_preempt_stk>

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
8000a2e8:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
8000a2ea:	bc 26       	jz.a %a2,8000a2f6 <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000a2ec:	40 24       	mov.aa %a4,%a2
8000a2ee:	c8 05       	ld.a %a5,[%a15]0
8000a2f0:	6d 00 23 00 	call 8000a336 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a2f4:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
8000a2f6:	00 90       	ret 

8000a2f8 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
8000a2f8:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a2fa:	91 00 00 f8 	movh.a %a15,32768
8000a2fe:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000a302:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000a304:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000a306:	99 42 0c 00 	ld.a %a2,[%a4]12 <800000cc <osEE_cdb_var>>
8000a30a:	0c 22       	ld.bu %d15,[%a2]2
8000a30c:	5e 43       	jne %d15,4,8000a312 <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a30e:	82 2f       	mov %d15,2
8000a310:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
8000a312:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
8000a314:	7c 68       	jnz.a %a6,8000a324 <osEE_scheduler_task_set_running+0x2c>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a316:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a318:	4c 20       	ld.w %d15,[%a2]0
8000a31a:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a31c:	82 0f       	mov %d15,0
8000a31e:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000a320:	e8 32       	st.a [%a15]12,%a2
8000a322:	3c 02       	j 8000a326 <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
8000a324:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
8000a326:	c8 32       	ld.a %a2,[%a15]12
8000a328:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000a32c:	c8 3f       	ld.a %a15,[%a15]12
8000a32e:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
8000a330:	6d 00 03 00 	call 8000a336 <osEE_change_context_from_running>
8000a334:	00 90       	ret 

8000a336 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a336:	40 ae       	mov.aa %a14,%sp
8000a338:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a33a:	99 52 0c 00 	ld.a %a2,[%a5]12
8000a33e:	0c 22       	ld.bu %d15,[%a2]2
8000a340:	5e 28       	jne %d15,2,8000a350 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000a342:	40 54       	mov.aa %a4,%a5
8000a344:	99 55 04 00 	ld.a %a5,[%a5]4
8000a348:	c8 16       	ld.a %a6,[%a15]4
8000a34a:	6d 00 73 00 	call 8000a430 <osEE_hal_save_ctx_and_restore_ctx>
8000a34e:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000a350:	40 54       	mov.aa %a4,%a5
8000a352:	99 55 04 00 	ld.a %a5,[%a5]4
8000a356:	c8 16       	ld.a %a6,[%a15]4
8000a358:	6d 00 8b 00 	call 8000a46e <osEE_hal_save_ctx_and_ready2stacked>
8000a35c:	00 90       	ret 

8000a35e <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a35e:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a360:	cc 53       	ld.a %a15,[%a5]12
8000a362:	0c f2       	ld.bu %d15,[%a15]2
8000a364:	5e 27       	jne %d15,2,8000a372 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000a366:	40 54       	mov.aa %a4,%a5
8000a368:	99 55 04 00 	ld.a %a5,[%a5]4
8000a36c:	6d 00 74 00 	call 8000a454 <osEE_hal_restore_ctx>
8000a370:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000a372:	40 54       	mov.aa %a4,%a5
8000a374:	99 55 04 00 	ld.a %a5,[%a5]4
8000a378:	6d 00 8d 00 	call 8000a492 <osEE_hal_ready2stacked>
8000a37c:	00 90       	ret 

8000a37e <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
8000a37e:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
8000a380:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000a384:	cc 40       	ld.a %a15,[%a4]0
8000a386:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000a388:	cc 50       	ld.a %a15,[%a5]0
8000a38a:	3c 02       	j 8000a38e <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
8000a38c:	60 ff       	mov.a %a15,%d15
8000a38e:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000a390:	8b 0f 20 22 	ne %d2,%d15,0
8000a394:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000a398:	df 02 fa ff 	jne %d2,0,8000a38c <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000a39c:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000a39e:	6d 00 5b 00 	call 8000a454 <osEE_hal_restore_ctx>
8000a3a2:	00 90       	ret 

8000a3a4 <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
8000a3a4:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a3a6:	4d c0 e1 5f 	mfcr %d5,$core_id
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
8000a3aa:	91 00 00 f8 	movh.a %a15,32768
8000a3ae:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
8000a3b2:	c8 2f       	ld.a %a15,[%a15]8
8000a3b4:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000a3b6:	bd 0f 2a 00 	jz.a %a15,8000a40a <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a3ba:	91 00 00 28 	movh.a %a2,32768
8000a3be:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
8000a3c2:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a3c6:	8f 35 00 51 	and %d5,%d5,3
8000a3ca:	8f b5 00 50 	sh %d5,%d5,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a3ce:	bb f0 ff 4f 	mov.u %d4,65535
8000a3d2:	82 0f       	mov %d15,0
8000a3d4:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a3d6:	60 33       	mov.a %a3,%d3
8000a3d8:	90 32       	addsc.a %a2,%a3,%d15,2
8000a3da:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a3dc:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a3e0:	df 22 12 80 	jne %d2,2,8000a404 <osEE_cpu_startos+0x60>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a3e4:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a3e8:	5f 42 0e 00 	jeq %d2,%d4,8000a404 <osEE_cpu_startos+0x60>
8000a3ec:	60 24       	mov.a %a4,%d2
8000a3ee:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a3f2:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a3f6:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a3fa:	c2 12       	add %d2,1
8000a3fc:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000a400:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a402:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
8000a404:	c2 1f       	add %d15,1
8000a406:	fd f0 e8 7f 	loop %a15,8000a3d6 <osEE_cpu_startos+0x32>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
8000a40a:	82 12       	mov %d2,1
8000a40c:	00 90       	ret 

8000a40e <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a40e:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a412:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a414:	0c 22       	ld.bu %d15,[%a2]2
8000a416:	1e 27       	jeq %d15,2,8000a424 <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
8000a418:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a41a:	c8 1f       	ld.a %a15,[%a15]4
8000a41c:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000a41e:	1d 00 3a 00 	j 8000a492 <osEE_hal_ready2stacked>
8000a422:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
8000a424:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a426:	c8 1f       	ld.a %a15,[%a15]4
8000a428:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000a42a:	1d 00 15 00 	j 8000a454 <osEE_hal_restore_ctx>
8000a42e:	00 90       	ret 

8000a430 <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a430:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a432:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a436:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a438:	4c 60       	ld.w %d15,[%a6]0
8000a43a:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a43e:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a442:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a446:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a448:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a44c:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
8000a44e:	1d 00 03 00 	j 8000a454 <osEE_hal_restore_ctx>
8000a452:	00 90       	ret 

8000a454 <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
8000a454:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a456:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a458:	4c f2       	ld.w %d15,[%a15]8
8000a45a:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a45c:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a460:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
8000a464:	4c f0       	ld.w %d15,[%a15]0
8000a466:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
8000a468:	1d ff 69 fd 	j 80009f3a <osEE_scheduler_task_wrapper_restore>
8000a46c:	00 90       	ret 

8000a46e <osEE_hal_save_ctx_and_ready2stacked>:
8000a46e:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a470:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a474:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a476:	4c 60       	ld.w %d15,[%a6]0
8000a478:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a47c:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a480:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a484:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a486:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a48a:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
8000a48c:	1d 00 03 00 	j 8000a492 <osEE_hal_ready2stacked>
8000a490:	00 90       	ret 

8000a492 <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a492:	cc 50       	ld.a %a15,[%a5]0
8000a494:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
8000a496:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a49a:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a49c:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a4a0:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a4a2:	4c 50       	ld.w %d15,[%a5]0
8000a4a4:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a4a8:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a4ac:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a4b0:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a4b2:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a4b6:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
8000a4b8:	1d ff 46 fd 	j 80009f44 <osEE_scheduler_task_wrapper_run>
8000a4bc:	00 90       	ret 

8000a4be <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
8000a4be:	4d 40 e0 ff 	mfcr %d15,$psw
8000a4c2:	8f ff c7 f1 	andn %d15,%d15,127
8000a4c6:	cd 4f e0 0f 	mtcr $psw,%d15
8000a4ca:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a4ce:	91 10 00 f8 	movh.a %a15,32769
8000a4d2:	d9 ff 4e 0a 	lea %a15,[%a15]-23538 <8000a40e <osEE_tc_change_context_from_task_end>>
8000a4d6:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000a4d8:	00 80       	rfe 
8000a4da:	00 90       	ret 

8000a4dc <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
8000a4dc:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
8000a4de:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a4e2:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
8000a4e6:	cc 40       	ld.a %a15,[%a4]0
8000a4e8:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a4ea:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a4ee:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a4f2:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a4f4:	8f c3 01 30 	sh %d3,%d3,28
8000a4f8:	a6 43       	or %d3,%d4
8000a4fa:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000a4fc:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000a4fe:	bc f3       	jz.a %a15,8000a504 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a500:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000a502:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000a504:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a508:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a50c:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a510:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000a514:	cc 40       	ld.a %a15,[%a4]0
8000a516:	4c f0       	ld.w %d15,[%a15]0
8000a518:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000a51a:	91 00 00 48 	movh.a %a4,32768
8000a51e:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
8000a522:	d9 a5 04 00 	lea %a5,[%sp]4 <800000b8 <osEE_kdb_var>>
8000a526:	6d ff 91 fe 	call 8000a248 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a52a:	d8 01       	ld.a %a15,[%sp]4
8000a52c:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a530:	1e 25       	jeq %d15,2,8000a53a <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000a532:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a534:	1d ff 6d ff 	j 8000a40e <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000a538:	3c 00       	j 8000a538 <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000a53a:	40 24       	mov.aa %a4,%a2
8000a53c:	6d ff c1 ff 	call 8000a4be <osEE_tc_change_context_from_isr2_end>
8000a540:	3c fc       	j 8000a538 <osEE_hal_terminate_ctx+0x5c>

8000a542 <__lshrdi3>:
8000a542:	6f 56 0c 80 	jnz.t %d6,5,8000a55a <__lshrdi3+0x18>
8000a546:	8b 06 02 71 	rsub %d7,%d6,32
8000a54a:	32 56       	rsub %d6
8000a54c:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a550:	0f 65 00 30 	sh %d3,%d5,%d6
8000a554:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a558:	00 90       	ret 
8000a55a:	8b 06 02 60 	add %d6,%d6,32
8000a55e:	32 56       	rsub %d6
8000a560:	0f 65 00 20 	sh %d2,%d5,%d6
8000a564:	82 03       	mov %d3,0
8000a566:	00 90       	ret 

8000a568 <__floatundisf>:
8000a568:	7b 00 02 20 	movh %d2,32
8000a56c:	0b 25 30 f1 	lt.u %d15,%d5,%d2
8000a570:	02 4a       	mov %d10,%d4
8000a572:	02 54       	mov %d4,%d5
8000a574:	ee 08       	jnz %d15,8000a584 <__floatundisf+0x1c>
8000a576:	b7 0a 95 f5 	insert %d15,%d10,0,11,21
8000a57a:	6e 05       	jz %d15,8000a584 <__floatundisf+0x1c>
8000a57c:	b7 0a 0b a0 	insert %d10,%d10,0,0,11
8000a580:	b7 fa 81 a5 	insert %d10,%d10,15,11,1
8000a584:	6d 00 ea 02 	call 8000ab58 <__floatunsidf>
8000a588:	0b 23 10 48 	mov %e4,%d3,%d2
8000a58c:	82 06       	mov %d6,0
8000a58e:	7b 00 1f 74 	movh %d7,16880
8000a592:	6d 00 34 01 	call 8000a7fa <__muldf3>
8000a596:	02 a4       	mov %d4,%d10
8000a598:	0b 23 10 88 	mov %e8,%d3,%d2
8000a59c:	6d 00 de 02 	call 8000ab58 <__floatunsidf>
8000a5a0:	0b 89 10 48 	mov %e4,%d9,%d8
8000a5a4:	0b 23 10 68 	mov %e6,%d3,%d2
8000a5a8:	6d 00 ed 00 	call 8000a782 <__adddf3>
8000a5ac:	0b 23 10 48 	mov %e4,%d3,%d2
8000a5b0:	1d 00 b6 02 	j 8000ab1c <__truncdfsf2>

8000a5b4 <__extendsfdf2>:
8000a5b4:	20 20       	sub.a %sp,32
8000a5b6:	d9 a4 20 00 	lea %a4,[%sp]32
8000a5ba:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a5be:	d9 a5 10 00 	lea %a5,[%sp]16
8000a5c2:	6d 00 f1 02 	call 8000aba4 <__unpack_f>
8000a5c6:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a5ca:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a5ce:	8f e2 1f f0 	sh %d15,%d2,-2
8000a5d2:	8f e2 01 20 	sh %d2,%d2,30
8000a5d6:	74 a2       	st.w [%sp],%d2
8000a5d8:	78 01       	st.w [%sp]4,%d15
8000a5da:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a5de:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a5e2:	1d 00 8e 02 	j 8000aafe <__make_dp>

8000a5e6 <_fpadd_parts>:
8000a5e6:	0c 40       	ld.bu %d15,[%a4]0
8000a5e8:	40 42       	mov.aa %a2,%a4
8000a5ea:	bf 2f cb 80 	jlt.u %d15,2,8000a780 <_fpadd_parts+0x19a>
8000a5ee:	14 52       	ld.bu %d2,[%a5]
8000a5f0:	40 52       	mov.aa %a2,%a5
8000a5f2:	bf 22 c7 80 	jlt.u %d2,2,8000a780 <_fpadd_parts+0x19a>
8000a5f6:	5e 4e       	jne %d15,4,8000a612 <_fpadd_parts+0x2c>
8000a5f8:	40 42       	mov.aa %a2,%a4
8000a5fa:	df 42 c3 80 	jne %d2,4,8000a780 <_fpadd_parts+0x19a>
8000a5fe:	19 42 04 00 	ld.w %d2,[%a4]4
8000a602:	4c 51       	ld.w %d15,[%a5]4
8000a604:	5f f2 be 00 	jeq %d2,%d15,8000a780 <_fpadd_parts+0x19a>
8000a608:	91 00 00 f8 	movh.a %a15,32768
8000a60c:	d9 f2 d0 90 	lea %a2,[%a15]3664 <80000e50 <__thenan_df>>
8000a610:	00 90       	ret 
8000a612:	40 52       	mov.aa %a2,%a5
8000a614:	df 42 b6 00 	jeq %d2,4,8000a780 <_fpadd_parts+0x19a>
8000a618:	df 22 11 80 	jne %d2,2,8000a63a <_fpadd_parts+0x54>
8000a61c:	40 42       	mov.aa %a2,%a4
8000a61e:	df 2f b1 80 	jne %d15,2,8000a780 <_fpadd_parts+0x19a>
8000a622:	40 63       	mov.aa %a3,%a6
8000a624:	a0 4f       	mov.a %a15,4
8000a626:	44 4f       	ld.w %d15,[%a4+]
8000a628:	64 3f       	st.w [%a3+],%d15
8000a62a:	fc fe       	loop %a15,8000a626 <_fpadd_parts+0x40>
8000a62c:	4c 21       	ld.w %d15,[%a2]4
8000a62e:	19 52 04 00 	ld.w %d2,[%a5]4
8000a632:	40 62       	mov.aa %a2,%a6
8000a634:	26 2f       	and %d15,%d2
8000a636:	6c 61       	st.w [%a6]4,%d15
8000a638:	00 90       	ret 
8000a63a:	40 52       	mov.aa %a2,%a5
8000a63c:	df 2f a2 00 	jeq %d15,2,8000a780 <_fpadd_parts+0x19a>
8000a640:	4c 42       	ld.w %d15,[%a4]8
8000a642:	19 52 08 00 	ld.w %d2,[%a5]8
8000a646:	40 6f       	mov.aa %a15,%a6
8000a648:	52 23       	sub %d3,%d15,%d2
8000a64a:	0b 30 c0 c1 	abs %d12,%d3
8000a64e:	8b 0c 84 42 	ge %d4,%d12,64
8000a652:	40 5c       	mov.aa %a12,%a5
8000a654:	40 4d       	mov.aa %a13,%a4
8000a656:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a65a:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a65e:	df 04 35 80 	jne %d4,0,8000a6c8 <_fpadd_parts+0xe2>
8000a662:	bf 13 19 00 	jlt %d3,1,8000a694 <_fpadd_parts+0xae>
8000a666:	0b 89 10 48 	mov %e4,%d9,%d8
8000a66a:	02 c6       	mov %d6,%d12
8000a66c:	6d ff 6b ff 	call 8000a542 <__lshrdi3>
8000a670:	d2 14       	mov %e4,1
8000a672:	02 c6       	mov %d6,%d12
8000a674:	02 2e       	mov %d14,%d2
8000a676:	02 3d       	mov %d13,%d3
8000a678:	6d 00 89 02 	call 8000ab8a <__ashldi3>
8000a67c:	8b f2 9f 20 	addx %d2,%d2,-1
8000a680:	8b f3 bf 30 	addc %d3,%d3,-1
8000a684:	26 82       	and %d2,%d8
8000a686:	26 93       	and %d3,%d9
8000a688:	a6 23       	or %d3,%d2
8000a68a:	02 e8       	mov %d8,%d14
8000a68c:	8b 03 00 85 	or.ne %d8,%d3,0
8000a690:	02 d9       	mov %d9,%d13
8000a692:	3c 21       	j 8000a6d4 <_fpadd_parts+0xee>
8000a694:	df 03 20 00 	jeq %d3,0,8000a6d4 <_fpadd_parts+0xee>
8000a698:	0b ab 10 48 	mov %e4,%d11,%d10
8000a69c:	02 c6       	mov %d6,%d12
8000a69e:	6d ff 52 ff 	call 8000a542 <__lshrdi3>
8000a6a2:	d2 14       	mov %e4,1
8000a6a4:	02 c6       	mov %d6,%d12
8000a6a6:	02 2e       	mov %d14,%d2
8000a6a8:	02 3d       	mov %d13,%d3
8000a6aa:	6d 00 70 02 	call 8000ab8a <__ashldi3>
8000a6ae:	8b f2 9f 20 	addx %d2,%d2,-1
8000a6b2:	8b f3 bf 30 	addc %d3,%d3,-1
8000a6b6:	26 a2       	and %d2,%d10
8000a6b8:	26 b3       	and %d3,%d11
8000a6ba:	a6 23       	or %d3,%d2
8000a6bc:	02 ea       	mov %d10,%d14
8000a6be:	42 cf       	add %d15,%d12
8000a6c0:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a6c4:	02 db       	mov %d11,%d13
8000a6c6:	3c 07       	j 8000a6d4 <_fpadd_parts+0xee>
8000a6c8:	3f f2 05 00 	jlt %d2,%d15,8000a6d2 <_fpadd_parts+0xec>
8000a6cc:	02 2f       	mov %d15,%d2
8000a6ce:	d2 0a       	mov %e10,0
8000a6d0:	3c 02       	j 8000a6d4 <_fpadd_parts+0xee>
8000a6d2:	d2 08       	mov %e8,0
8000a6d4:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a6d8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a6dc:	5f 24 34 00 	jeq %d4,%d2,8000a744 <_fpadd_parts+0x15e>
8000a6e0:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a6e4:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a6e8:	76 45       	jz %d4,8000a6f2 <_fpadd_parts+0x10c>
8000a6ea:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a6ee:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a6f2:	0e 37       	jltz %d3,8000a700 <_fpadd_parts+0x11a>
8000a6f4:	82 04       	mov %d4,0
8000a6f6:	68 14       	st.w [%a15]4,%d4
8000a6f8:	68 2f       	st.w [%a15]8,%d15
8000a6fa:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a6fe:	3c 0c       	j 8000a716 <_fpadd_parts+0x130>
8000a700:	68 2f       	st.w [%a15]8,%d15
8000a702:	8b 03 00 f1 	rsub %d15,%d3,0
8000a706:	82 14       	mov %d4,1
8000a708:	8b 02 00 31 	rsub %d3,%d2,0
8000a70c:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a710:	68 14       	st.w [%a15]4,%d4
8000a712:	68 33       	st.w [%a15]12,%d3
8000a714:	68 4f       	st.w [%a15]16,%d15
8000a716:	82 f5       	mov %d5,-1
8000a718:	06 c5       	sh %d5,-4
8000a71a:	48 32       	ld.w %d2,[%a15]12
8000a71c:	48 43       	ld.w %d3,[%a15]16
8000a71e:	8b f2 9f 60 	addx %d6,%d2,-1
8000a722:	8b f3 bf 40 	addc %d4,%d3,-1
8000a726:	3a 54       	eq %d15,%d4,%d5
8000a728:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a72c:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a730:	6e 12       	jz %d15,8000a754 <_fpadd_parts+0x16e>
8000a732:	4c f2       	ld.w %d15,[%a15]8
8000a734:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a738:	c2 ff       	add %d15,-1
8000a73a:	06 12       	sh %d2,1
8000a73c:	68 32       	st.w [%a15]12,%d2
8000a73e:	68 43       	st.w [%a15]16,%d3
8000a740:	68 2f       	st.w [%a15]8,%d15
8000a742:	3c ec       	j 8000a71a <_fpadd_parts+0x134>
8000a744:	0b a8 40 20 	addx %d2,%d8,%d10
8000a748:	68 2f       	st.w [%a15]8,%d15
8000a74a:	0b b9 50 f0 	addc %d15,%d9,%d11
8000a74e:	68 14       	st.w [%a15]4,%d4
8000a750:	68 32       	st.w [%a15]12,%d2
8000a752:	68 4f       	st.w [%a15]16,%d15
8000a754:	82 3f       	mov %d15,3
8000a756:	28 0f       	st.b [%a15]0,%d15
8000a758:	4c f4       	ld.w %d15,[%a15]16
8000a75a:	7b 00 00 42 	movh %d4,8192
8000a75e:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000a762:	48 32       	ld.w %d2,[%a15]12
8000a764:	40 f2       	mov.aa %a2,%a15
8000a766:	f6 3d       	jnz %d3,8000a780 <_fpadd_parts+0x19a>
8000a768:	8f 12 00 31 	and %d3,%d2,1
8000a76c:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000a770:	06 ff       	sh %d15,-1
8000a772:	96 00       	or %d15,0
8000a774:	68 4f       	st.w [%a15]16,%d15
8000a776:	4c f2       	ld.w %d15,[%a15]8
8000a778:	a6 32       	or %d2,%d3
8000a77a:	c2 1f       	add %d15,1
8000a77c:	68 32       	st.w [%a15]12,%d2
8000a77e:	68 2f       	st.w [%a15]8,%d15
8000a780:	00 90       	ret 

8000a782 <__adddf3>:
8000a782:	20 50       	sub.a %sp,80
8000a784:	d9 a4 04 00 	lea %a4,[%sp]4
8000a788:	d9 a5 14 00 	lea %a5,[%sp]20
8000a78c:	89 a4 44 09 	st.d [%sp]4,%e4
8000a790:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a794:	6d 00 d9 02 	call 8000ad46 <__unpack_d>
8000a798:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a79c:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7a0:	6d 00 d3 02 	call 8000ad46 <__unpack_d>
8000a7a4:	d9 a4 14 00 	lea %a4,[%sp]20
8000a7a8:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7ac:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a7b0:	6d ff 1b ff 	call 8000a5e6 <_fpadd_parts>
8000a7b4:	40 24       	mov.aa %a4,%a2
8000a7b6:	1d 00 3f 02 	j 8000ac34 <__pack_d>

8000a7ba <__subdf3>:
8000a7ba:	20 50       	sub.a %sp,80
8000a7bc:	d9 a4 04 00 	lea %a4,[%sp]4
8000a7c0:	d9 a5 14 00 	lea %a5,[%sp]20
8000a7c4:	89 a4 44 09 	st.d [%sp]4,%e4
8000a7c8:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a7cc:	6d 00 bd 02 	call 8000ad46 <__unpack_d>
8000a7d0:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a7d4:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7d8:	6d 00 b7 02 	call 8000ad46 <__unpack_d>
8000a7dc:	58 0b       	ld.w %d15,[%sp]44
8000a7de:	d9 a4 14 00 	lea %a4,[%sp]20
8000a7e2:	8f 1f 80 f1 	xor %d15,%d15,1
8000a7e6:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7ea:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a7ee:	78 0b       	st.w [%sp]44,%d15
8000a7f0:	6d ff fb fe 	call 8000a5e6 <_fpadd_parts>
8000a7f4:	40 24       	mov.aa %a4,%a2
8000a7f6:	1d 00 1f 02 	j 8000ac34 <__pack_d>

8000a7fa <__muldf3>:
8000a7fa:	20 50       	sub.a %sp,80
8000a7fc:	d9 a4 04 00 	lea %a4,[%sp]4
8000a800:	d9 a5 14 00 	lea %a5,[%sp]20
8000a804:	89 a4 44 09 	st.d [%sp]4,%e4
8000a808:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a80c:	6d 00 9d 02 	call 8000ad46 <__unpack_d>
8000a810:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a814:	d9 a5 28 00 	lea %a5,[%sp]40
8000a818:	6d 00 97 02 	call 8000ad46 <__unpack_d>
8000a81c:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000a820:	ff 23 0c 80 	jge.u %d3,2,8000a838 <__muldf3+0x3e>
8000a824:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a828:	58 0b       	ld.w %d15,[%sp]44
8000a82a:	d9 a4 14 00 	lea %a4,[%sp]20
8000a82e:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a832:	78 06       	st.w [%sp]24,%d15
8000a834:	1d 00 b3 00 	j 8000a99a <__muldf3+0x1a0>
8000a838:	39 af 28 00 	ld.bu %d15,[%sp]40
8000a83c:	ff 2f 0c 80 	jge.u %d15,2,8000a854 <__muldf3+0x5a>
8000a840:	58 0b       	ld.w %d15,[%sp]44
8000a842:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a846:	d9 a4 28 00 	lea %a4,[%sp]40
8000a84a:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a84e:	78 0b       	st.w [%sp]44,%d15
8000a850:	1d 00 a5 00 	j 8000a99a <__muldf3+0x1a0>
8000a854:	df 43 09 80 	jne %d3,4,8000a866 <__muldf3+0x6c>
8000a858:	91 00 00 48 	movh.a %a4,32768
8000a85c:	d9 44 d0 90 	lea %a4,[%a4]3664 <80000e50 <__thenan_df>>
8000a860:	df 2f 9d 00 	jeq %d15,2,8000a99a <__muldf3+0x1a0>
8000a864:	3c e0       	j 8000a824 <__muldf3+0x2a>
8000a866:	5e 48       	jne %d15,4,8000a876 <__muldf3+0x7c>
8000a868:	91 00 00 48 	movh.a %a4,32768
8000a86c:	d9 44 d0 90 	lea %a4,[%a4]3664 <80000e50 <__thenan_df>>
8000a870:	df 23 95 00 	jeq %d3,2,8000a99a <__muldf3+0x1a0>
8000a874:	3c e6       	j 8000a840 <__muldf3+0x46>
8000a876:	df 23 d7 7f 	jeq %d3,2,8000a824 <__muldf3+0x2a>
8000a87a:	df 2f e3 7f 	jeq %d15,2,8000a840 <__muldf3+0x46>
8000a87e:	58 08       	ld.w %d15,[%sp]32
8000a880:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000a884:	d2 00       	mov %e0,0
8000a886:	19 a0 34 00 	ld.w %d0,[%sp]52
8000a88a:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000a88e:	82 0c       	mov %d12,0
8000a890:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000a894:	19 aa 24 00 	ld.w %d10,[%sp]36
8000a898:	82 02       	mov %d2,0
8000a89a:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000a89e:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000a8a2:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000a8a6:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000a8aa:	82 0d       	mov %d13,0
8000a8ac:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000a8b0:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000a8b4:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000a8b8:	0b 54 10 08 	mov %e0,%d4,%d5
8000a8bc:	42 20       	add %d0,%d2
8000a8be:	3a 73       	eq %d15,%d3,%d7
8000a8c0:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000a8c4:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000a8c8:	8b 0f 00 62 	eq %d6,%d15,0
8000a8cc:	3a 50       	eq %d15,%d0,%d5
8000a8ce:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000a8d2:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000a8d6:	ba 0f       	eq %d15,%d15,0
8000a8d8:	53 1f 40 40 	mul.u %e4,%d15,1
8000a8dc:	02 38       	mov %d8,%d3
8000a8de:	82 09       	mov %d9,0
8000a8e0:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000a8e4:	02 5f       	mov %d15,%d5
8000a8e6:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000a8ea:	42 6f       	add %d15,%d6
8000a8ec:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000a8f0:	0b 4f 10 68 	mov %e6,%d15,%d4
8000a8f4:	0b 62 40 40 	addx %d4,%d2,%d6
8000a8f8:	0b 73 50 20 	addc %d2,%d3,%d7
8000a8fc:	58 07       	ld.w %d15,[%sp]28
8000a8fe:	19 a3 30 00 	ld.w %d3,[%sp]48
8000a902:	19 a5 18 00 	ld.w %d5,[%sp]24
8000a906:	42 3f       	add %d15,%d3
8000a908:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000a90c:	c2 4f       	add %d15,4
8000a90e:	0b 35 10 31 	ne %d3,%d5,%d3
8000a912:	59 a3 00 10 	st.w [%sp]64,%d3
8000a916:	7b 00 00 52 	movh %d5,8192
8000a91a:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000a91e:	df 03 1b 00 	jeq %d3,0,8000a954 <__muldf3+0x15a>
8000a922:	8f 14 00 31 	and %d3,%d4,1
8000a926:	76 37       	jz %d3,8000a934 <__muldf3+0x13a>
8000a928:	8f f0 1f 30 	sh %d3,%d0,-1
8000a92c:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000a930:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000a934:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000a938:	c2 1f       	add %d15,1
8000a93a:	06 f2       	sh %d2,-1
8000a93c:	3c ed       	j 8000a916 <__muldf3+0x11c>
8000a93e:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000a942:	06 14       	sh %d4,1
8000a944:	ce 04       	jgez %d0,8000a94c <__muldf3+0x152>
8000a946:	8f 14 40 51 	or %d5,%d4,1
8000a94a:	02 54       	mov %d4,%d5
8000a94c:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000a950:	c2 ff       	add %d15,-1
8000a952:	06 11       	sh %d1,1
8000a954:	7b 00 00 51 	movh %d5,4096
8000a958:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000a95c:	df 03 f1 ff 	jne %d3,0,8000a93e <__muldf3+0x144>
8000a960:	78 11       	st.w [%sp]68,%d15
8000a962:	02 4f       	mov %d15,%d4
8000a964:	16 ff       	and %d15,255
8000a966:	8b 0f 28 f2 	ne %d15,%d15,128
8000a96a:	ee 0f       	jnz %d15,8000a988 <__muldf3+0x18e>
8000a96c:	a6 10       	or %d0,%d1
8000a96e:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000a972:	8b 00 20 02 	ne %d0,%d0,0
8000a976:	0f f0 e0 00 	andn %d0,%d0,%d15
8000a97a:	76 07       	jz %d0,8000a988 <__muldf3+0x18e>
8000a97c:	8b 04 88 40 	addx %d4,%d4,128
8000a980:	8b 02 a0 20 	addc %d2,%d2,0
8000a984:	8f f4 cf 41 	andn %d4,%d4,255
8000a988:	d9 a4 10 10 	lea %a4,[%sp]80
8000a98c:	82 3f       	mov %d15,3
8000a98e:	59 a4 08 10 	st.w [%sp]72,%d4
8000a992:	59 a2 0c 10 	st.w [%sp]76,%d2
8000a996:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin1_TX_P33_12_OUT>>,%d15
8000a99a:	1d 00 4d 01 	j 8000ac34 <__pack_d>

8000a99e <__divdf3>:
8000a99e:	20 38       	sub.a %sp,56
8000a9a0:	40 a4       	mov.aa %a4,%sp
8000a9a2:	d9 a5 10 00 	lea %a5,[%sp]16
8000a9a6:	89 a4 40 09 	st.d [%sp],%e4
8000a9aa:	89 a6 48 09 	st.d [%sp]8,%e6
8000a9ae:	6d 00 cc 01 	call 8000ad46 <__unpack_d>
8000a9b2:	d9 a4 08 00 	lea %a4,[%sp]8
8000a9b6:	d9 a5 24 00 	lea %a5,[%sp]36
8000a9ba:	6d 00 c6 01 	call 8000ad46 <__unpack_d>
8000a9be:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000a9c2:	bf 22 76 80 	jlt.u %d2,2,8000aaae <__divdf3+0x110>
8000a9c6:	39 af 24 00 	ld.bu %d15,[%sp]36
8000a9ca:	d9 a4 24 00 	lea %a4,[%sp]36
8000a9ce:	bf 2f 72 80 	jlt.u %d15,2,8000aab2 <__divdf3+0x114>
8000a9d2:	19 a4 14 00 	ld.w %d4,[%sp]20
8000a9d6:	19 a3 28 00 	ld.w %d3,[%sp]40
8000a9da:	c6 43       	xor %d3,%d4
8000a9dc:	59 a3 14 00 	st.w [%sp]20,%d3
8000a9e0:	1b e2 ff 3f 	addi %d3,%d2,-2
8000a9e4:	8f d3 0f 31 	and %d3,%d3,253
8000a9e8:	f6 38       	jnz %d3,8000a9f8 <__divdf3+0x5a>
8000a9ea:	91 00 00 48 	movh.a %a4,32768
8000a9ee:	d9 44 d0 90 	lea %a4,[%a4]3664 <80000e50 <__thenan_df>>
8000a9f2:	5f f2 5e 80 	jne %d2,%d15,8000aaae <__divdf3+0x110>
8000a9f6:	3c 5e       	j 8000aab2 <__divdf3+0x114>
8000a9f8:	5e 47       	jne %d15,4,8000aa06 <__divdf3+0x68>
8000a9fa:	d2 02       	mov %e2,0
8000a9fc:	82 0f       	mov %d15,0
8000a9fe:	89 a2 5c 09 	st.d [%sp]28,%e2
8000aa02:	78 06       	st.w [%sp]24,%d15
8000aa04:	3c 55       	j 8000aaae <__divdf3+0x110>
8000aa06:	5e 25       	jne %d15,2,8000aa10 <__divdf3+0x72>
8000aa08:	82 4f       	mov %d15,4
8000aa0a:	e9 af 10 00 	st.b [%sp]16,%d15
8000aa0e:	3c 50       	j 8000aaae <__divdf3+0x110>
8000aa10:	58 06       	ld.w %d15,[%sp]24
8000aa12:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000aa16:	09 a4 70 09 	ld.d %e4,[%sp]48
8000aa1a:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000aa1e:	52 66       	sub %d6,%d15,%d6
8000aa20:	3a 53       	eq %d15,%d3,%d5
8000aa22:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000aa26:	59 a6 18 00 	st.w [%sp]24,%d6
8000aa2a:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000aa2e:	ee 07       	jnz %d15,8000aa3c <__divdf3+0x9e>
8000aa30:	c2 f6       	add %d6,-1
8000aa32:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000aa36:	59 a6 18 00 	st.w [%sp]24,%d6
8000aa3a:	06 12       	sh %d2,1
8000aa3c:	82 01       	mov %d1,0
8000aa3e:	7b 00 00 f1 	movh %d15,4096
8000aa42:	82 00       	mov %d0,0
8000aa44:	82 07       	mov %d7,0
8000aa46:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000aa4a:	0b 53 00 61 	eq %d6,%d3,%d5
8000aa4e:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000aa52:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000aa56:	f6 6b       	jnz %d6,8000aa6c <__divdf3+0xce>
8000aa58:	0f 10 a0 80 	or %d8,%d0,%d1
8000aa5c:	0f f7 a0 60 	or %d6,%d7,%d15
8000aa60:	0b 42 c0 20 	subx %d2,%d2,%d4
8000aa64:	02 80       	mov %d0,%d8
8000aa66:	02 67       	mov %d7,%d6
8000aa68:	0b 53 d0 30 	subc %d3,%d3,%d5
8000aa6c:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000aa70:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000aa74:	06 ff       	sh %d15,-1
8000aa76:	06 12       	sh %d2,1
8000aa78:	fd f0 e9 7f 	loop %a15,8000aa4a <__divdf3+0xac>
8000aa7c:	02 0f       	mov %d15,%d0
8000aa7e:	16 ff       	and %d15,255
8000aa80:	8b 0f 28 f2 	ne %d15,%d15,128
8000aa84:	0b 70 10 48 	mov %e4,%d0,%d7
8000aa88:	ee 0f       	jnz %d15,8000aaa6 <__divdf3+0x108>
8000aa8a:	a6 32       	or %d2,%d3
8000aa8c:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000aa90:	8b 02 20 22 	ne %d2,%d2,0
8000aa94:	0f f2 e0 20 	andn %d2,%d2,%d15
8000aa98:	76 27       	jz %d2,8000aaa6 <__divdf3+0x108>
8000aa9a:	8b 00 88 00 	addx %d0,%d0,128
8000aa9e:	8b 07 a0 40 	addc %d4,%d7,0
8000aaa2:	8f f0 cf 51 	andn %d5,%d0,255
8000aaa6:	59 a5 1c 00 	st.w [%sp]28,%d5
8000aaaa:	59 a4 20 00 	st.w [%sp]32,%d4
8000aaae:	d9 a4 10 00 	lea %a4,[%sp]16
8000aab2:	1d 00 c1 00 	j 8000ac34 <__pack_d>

8000aab6 <__floatsidf>:
8000aab6:	20 18       	sub.a %sp,24
8000aab8:	82 3f       	mov %d15,3
8000aaba:	2c a4       	st.b [%sp]4,%d15
8000aabc:	8f 14 1e f0 	sh %d15,%d4,-31
8000aac0:	78 02       	st.w [%sp]8,%d15
8000aac2:	f6 44       	jnz %d4,8000aaca <__floatsidf+0x14>
8000aac4:	82 2f       	mov %d15,2
8000aac6:	2c a4       	st.b [%sp]4,%d15
8000aac8:	3c 16       	j 8000aaf4 <__floatsidf+0x3e>
8000aaca:	6e 09       	jz %d15,8000aadc <__floatsidf+0x26>
8000aacc:	7b 00 00 f8 	movh %d15,32768
8000aad0:	82 02       	mov %d2,0
8000aad2:	7b 00 1e 3c 	movh %d3,49632
8000aad6:	5f f4 13 00 	jeq %d4,%d15,8000aafc <__floatsidf+0x46>
8000aada:	32 54       	rsub %d4
8000aadc:	0f 04 b0 f1 	clz %d15,%d4
8000aae0:	1b df 01 60 	addi %d6,%d15,29
8000aae4:	82 05       	mov %d5,0
8000aae6:	6d 00 52 00 	call 8000ab8a <__ashldi3>
8000aaea:	8b ff 01 f1 	rsub %d15,%d15,31
8000aaee:	89 a2 50 09 	st.d [%sp]16,%e2
8000aaf2:	78 03       	st.w [%sp]12,%d15
8000aaf4:	d9 a4 04 00 	lea %a4,[%sp]4
8000aaf8:	6d 00 9e 00 	call 8000ac34 <__pack_d>
8000aafc:	00 90       	ret 

8000aafe <__make_dp>:
8000aafe:	20 18       	sub.a %sp,24
8000ab00:	09 a2 58 09 	ld.d %e2,[%sp]24
8000ab04:	d9 a4 04 00 	lea %a4,[%sp]4
8000ab08:	e9 a4 04 00 	st.b [%sp]4,%d4
8000ab0c:	59 a5 08 00 	st.w [%sp]8,%d5
8000ab10:	59 a6 0c 00 	st.w [%sp]12,%d6
8000ab14:	89 a2 50 09 	st.d [%sp]16,%e2
8000ab18:	1d 00 8e 00 	j 8000ac34 <__pack_d>

8000ab1c <__truncdfsf2>:
8000ab1c:	20 20       	sub.a %sp,32
8000ab1e:	d9 a4 20 00 	lea %a4,[%sp]32
8000ab22:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000ab26:	d9 a5 0c 00 	lea %a5,[%sp]12
8000ab2a:	6d 00 0e 01 	call 8000ad46 <__unpack_d>
8000ab2e:	19 a7 18 00 	ld.w %d7,[%sp]24
8000ab32:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ab36:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000ab3a:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000ab3e:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000ab42:	02 23       	mov %d3,%d2
8000ab44:	8f 12 40 21 	or %d2,%d2,1
8000ab48:	19 a5 10 00 	ld.w %d5,[%sp]16
8000ab4c:	19 a6 14 00 	ld.w %d6,[%sp]20
8000ab50:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000ab54:	1d 00 65 00 	j 8000ac1e <__make_fp>

8000ab58 <__floatunsidf>:
8000ab58:	20 18       	sub.a %sp,24
8000ab5a:	82 0f       	mov %d15,0
8000ab5c:	78 02       	st.w [%sp]8,%d15
8000ab5e:	f6 44       	jnz %d4,8000ab66 <__floatunsidf+0xe>
8000ab60:	82 2f       	mov %d15,2
8000ab62:	2c a4       	st.b [%sp]4,%d15
8000ab64:	3c 0f       	j 8000ab82 <__floatunsidf+0x2a>
8000ab66:	82 3f       	mov %d15,3
8000ab68:	2c a4       	st.b [%sp]4,%d15
8000ab6a:	0f 04 b0 f1 	clz %d15,%d4
8000ab6e:	1b df 01 60 	addi %d6,%d15,29
8000ab72:	82 05       	mov %d5,0
8000ab74:	6d 00 0b 00 	call 8000ab8a <__ashldi3>
8000ab78:	8b ff 01 f1 	rsub %d15,%d15,31
8000ab7c:	89 a2 50 09 	st.d [%sp]16,%e2
8000ab80:	78 03       	st.w [%sp]12,%d15
8000ab82:	d9 a4 04 00 	lea %a4,[%sp]4
8000ab86:	1d 00 57 00 	j 8000ac34 <__pack_d>

8000ab8a <__ashldi3>:
8000ab8a:	6f 56 07 80 	jnz.t %d6,5,8000ab98 <__ashldi3+0xe>
8000ab8e:	0f 64 00 20 	sh %d2,%d4,%d6
8000ab92:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000ab96:	00 90       	ret 
8000ab98:	8b 06 1e 60 	add %d6,%d6,-32
8000ab9c:	82 02       	mov %d2,0
8000ab9e:	0f 64 00 30 	sh %d3,%d4,%d6
8000aba2:	00 90       	ret 

8000aba4 <__unpack_f>:
8000aba4:	54 43       	ld.w %d3,[%a4]
8000aba6:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000abaa:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000abae:	8f 13 1e 30 	sh %d3,%d3,-31
8000abb2:	59 53 04 00 	st.w [%a5]4,%d3
8000abb6:	df 02 18 80 	jne %d2,0,8000abe6 <__unpack_f+0x42>
8000abba:	ee 03       	jnz %d15,8000abc0 <__unpack_f+0x1c>
8000abbc:	82 2f       	mov %d15,2
8000abbe:	3c 19       	j 8000abf0 <__unpack_f+0x4c>
8000abc0:	3b 20 f8 2f 	mov %d2,-126
8000abc4:	59 52 08 00 	st.w [%a5]8,%d2
8000abc8:	82 32       	mov %d2,3
8000abca:	34 52       	st.b [%a5],%d2
8000abcc:	06 7f       	sh %d15,7
8000abce:	3b 10 f8 2f 	mov %d2,-127
8000abd2:	7b 00 00 44 	movh %d4,16384
8000abd6:	06 1f       	sh %d15,1
8000abd8:	02 23       	mov %d3,%d2
8000abda:	c2 f2       	add %d2,-1
8000abdc:	3f 4f fd ff 	jlt.u %d15,%d4,8000abd6 <__unpack_f+0x32>
8000abe0:	59 53 08 00 	st.w [%a5]8,%d3
8000abe4:	3c 1b       	j 8000ac1a <__unpack_f+0x76>
8000abe6:	8b f2 2f 32 	ne %d3,%d2,255
8000abea:	f6 3f       	jnz %d3,8000ac08 <__unpack_f+0x64>
8000abec:	ee 04       	jnz %d15,8000abf4 <__unpack_f+0x50>
8000abee:	82 4f       	mov %d15,4
8000abf0:	2c 50       	st.b [%a5]0,%d15
8000abf2:	00 90       	ret 
8000abf4:	7b 00 04 20 	movh %d2,64
8000abf8:	26 f2       	and %d2,%d15
8000abfa:	76 22       	jz %d2,8000abfe <__unpack_f+0x5a>
8000abfc:	82 12       	mov %d2,1
8000abfe:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000ac02:	34 52       	st.b [%a5],%d2
8000ac04:	06 7f       	sh %d15,7
8000ac06:	3c 0a       	j 8000ac1a <__unpack_f+0x76>
8000ac08:	1b 12 f8 2f 	addi %d2,%d2,-127
8000ac0c:	06 7f       	sh %d15,7
8000ac0e:	59 52 08 00 	st.w [%a5]8,%d2
8000ac12:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000ac16:	82 32       	mov %d2,3
8000ac18:	34 52       	st.b [%a5],%d2
8000ac1a:	6c 53       	st.w [%a5]12,%d15
8000ac1c:	00 90       	ret 

8000ac1e <__make_fp>:
8000ac1e:	20 10       	sub.a %sp,16
8000ac20:	40 a4       	mov.aa %a4,%sp
8000ac22:	34 a4       	st.b [%sp],%d4
8000ac24:	59 a5 04 00 	st.w [%sp]4,%d5
8000ac28:	59 a6 08 00 	st.w [%sp]8,%d6
8000ac2c:	59 a7 0c 00 	st.w [%sp]12,%d7
8000ac30:	1d 00 e1 00 	j 8000adf2 <__pack_f>

8000ac34 <__pack_d>:
8000ac34:	14 42       	ld.bu %d2,[%a4]
8000ac36:	19 49 0c 00 	ld.w %d9,[%a4]12
8000ac3a:	19 48 10 00 	ld.w %d8,[%a4]16
8000ac3e:	19 4c 04 00 	ld.w %d12,[%a4]4
8000ac42:	ff 22 0b 80 	jge.u %d2,2,8000ac58 <__pack_d+0x24>
8000ac46:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000ac4a:	06 88       	sh %d8,-8
8000ac4c:	02 95       	mov %d5,%d9
8000ac4e:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000ac52:	3b f0 7f f0 	mov %d15,2047
8000ac56:	3c 6f       	j 8000ad34 <__pack_d+0x100>
8000ac58:	3b f0 7f f0 	mov %d15,2047
8000ac5c:	d2 04       	mov %e4,0
8000ac5e:	df 42 6b 00 	jeq %d2,4,8000ad34 <__pack_d+0x100>
8000ac62:	0f 89 a0 f0 	or %d15,%d9,%d8
8000ac66:	8b 22 00 32 	eq %d3,%d2,2
8000ac6a:	8b 0f e0 34 	or.eq %d3,%d15,0
8000ac6e:	82 0f       	mov %d15,0
8000ac70:	df 03 62 80 	jne %d3,0,8000ad34 <__pack_d+0x100>
8000ac74:	19 42 08 00 	ld.w %d2,[%a4]8
8000ac78:	3b 20 c0 ff 	mov %d15,-1022
8000ac7c:	7f f2 36 00 	jge %d2,%d15,8000ace8 <__pack_d+0xb4>
8000ac80:	a2 2f       	sub %d15,%d2
8000ac82:	8b 9f 83 42 	ge %d4,%d15,57
8000ac86:	82 02       	mov %d2,0
8000ac88:	df 04 18 80 	jne %d4,0,8000acb8 <__pack_d+0x84>
8000ac8c:	0b 98 10 48 	mov %e4,%d8,%d9
8000ac90:	02 f6       	mov %d6,%d15
8000ac92:	6d ff 58 fc 	call 8000a542 <__lshrdi3>
8000ac96:	d2 14       	mov %e4,1
8000ac98:	02 f6       	mov %d6,%d15
8000ac9a:	0b 32 10 a8 	mov %e10,%d2,%d3
8000ac9e:	6d ff 76 ff 	call 8000ab8a <__ashldi3>
8000aca2:	8b f2 9f 20 	addx %d2,%d2,-1
8000aca6:	8b f3 bf 30 	addc %d3,%d3,-1
8000acaa:	26 29       	and %d9,%d2
8000acac:	26 38       	and %d8,%d3
8000acae:	a6 98       	or %d8,%d9
8000acb0:	02 b2       	mov %d2,%d11
8000acb2:	8b 08 00 25 	or.ne %d2,%d8,0
8000acb6:	02 a3       	mov %d3,%d10
8000acb8:	02 2f       	mov %d15,%d2
8000acba:	16 ff       	and %d15,255
8000acbc:	8b 0f 28 f2 	ne %d15,%d15,128
8000acc0:	ee 07       	jnz %d15,8000acce <__pack_d+0x9a>
8000acc2:	8f 02 10 f1 	and %d15,%d2,256
8000acc6:	6e 08       	jz %d15,8000acd6 <__pack_d+0xa2>
8000acc8:	8b 02 88 20 	addx %d2,%d2,128
8000accc:	3c 03       	j 8000acd2 <__pack_d+0x9e>
8000acce:	8b f2 87 20 	addx %d2,%d2,127
8000acd2:	8b 03 a0 30 	addc %d3,%d3,0
8000acd6:	7b 00 00 41 	movh %d4,4096
8000acda:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000acde:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000ace2:	8f 83 1f 40 	sh %d4,%d3,-8
8000ace6:	3c 27       	j 8000ad34 <__pack_d+0x100>
8000ace8:	3b 00 40 30 	mov %d3,1024
8000acec:	3b f0 7f f0 	mov %d15,2047
8000acf0:	7f 32 22 00 	jge %d2,%d3,8000ad34 <__pack_d+0x100>
8000acf4:	02 9f       	mov %d15,%d9
8000acf6:	16 ff       	and %d15,255
8000acf8:	8b 0f 28 f2 	ne %d15,%d15,128
8000acfc:	ee 07       	jnz %d15,8000ad0a <__pack_d+0xd6>
8000acfe:	8f 09 10 f1 	and %d15,%d9,256
8000ad02:	6e 08       	jz %d15,8000ad12 <__pack_d+0xde>
8000ad04:	8b 09 88 90 	addx %d9,%d9,128
8000ad08:	3c 03       	j 8000ad0e <__pack_d+0xda>
8000ad0a:	8b f9 87 90 	addx %d9,%d9,127
8000ad0e:	8b 08 a0 80 	addc %d8,%d8,0
8000ad12:	7b 00 00 32 	movh %d3,8192
8000ad16:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000ad1a:	ee 04       	jnz %d15,8000ad22 <__pack_d+0xee>
8000ad1c:	1b f2 3f f0 	addi %d15,%d2,1023
8000ad20:	3c 06       	j 8000ad2c <__pack_d+0xf8>
8000ad22:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000ad26:	1b 02 40 f0 	addi %d15,%d2,1024
8000ad2a:	06 f8       	sh %d8,-1
8000ad2c:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000ad30:	8f 88 1f 40 	sh %d4,%d8,-8
8000ad34:	d2 02       	mov %e2,0
8000ad36:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000ad3a:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000ad3e:	02 52       	mov %d2,%d5
8000ad40:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000ad44:	00 90       	ret 

8000ad46 <__unpack_d>:
8000ad46:	19 44 04 00 	ld.w %d4,[%a4]4
8000ad4a:	54 42       	ld.w %d2,[%a4]
8000ad4c:	37 04 74 50 	extr.u %d5,%d4,0,20
8000ad50:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000ad54:	8f 14 1e 40 	sh %d4,%d4,-31
8000ad58:	59 54 04 00 	st.w [%a5]4,%d4
8000ad5c:	02 53       	mov %d3,%d5
8000ad5e:	ee 21       	jnz %d15,8000ada0 <__unpack_d+0x5a>
8000ad60:	0f 25 a0 f0 	or %d15,%d5,%d2
8000ad64:	ee 03       	jnz %d15,8000ad6a <__unpack_d+0x24>
8000ad66:	82 2f       	mov %d15,2
8000ad68:	3c 23       	j 8000adae <__unpack_d+0x68>
8000ad6a:	3b 20 c0 ff 	mov %d15,-1022
8000ad6e:	6c 52       	st.w [%a5]8,%d15
8000ad70:	82 3f       	mov %d15,3
8000ad72:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000ad76:	2c 50       	st.b [%a5]0,%d15
8000ad78:	8f 82 00 20 	sh %d2,%d2,8
8000ad7c:	3b 10 c0 ff 	mov %d15,-1023
8000ad80:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000ad84:	7b 00 00 61 	movh %d6,4096
8000ad88:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000ad8c:	02 f4       	mov %d4,%d15
8000ad8e:	06 12       	sh %d2,1
8000ad90:	c2 ff       	add %d15,-1
8000ad92:	df 05 f7 ff 	jne %d5,0,8000ad80 <__unpack_d+0x3a>
8000ad96:	59 54 08 00 	st.w [%a5]8,%d4
8000ad9a:	59 52 0c 00 	st.w [%a5]12,%d2
8000ad9e:	3c 27       	j 8000adec <__unpack_d+0xa6>
8000ada0:	3b f0 7f 40 	mov %d4,2047
8000ada4:	fe 47       	jne %d15,%d4,8000add2 <__unpack_d+0x8c>
8000ada6:	0f 25 a0 f0 	or %d15,%d5,%d2
8000adaa:	ee 04       	jnz %d15,8000adb2 <__unpack_d+0x6c>
8000adac:	82 4f       	mov %d15,4
8000adae:	2c 50       	st.b [%a5]0,%d15
8000adb0:	00 90       	ret 
8000adb2:	7b 80 00 f0 	movh %d15,8
8000adb6:	26 5f       	and %d15,%d5
8000adb8:	6e 02       	jz %d15,8000adbc <__unpack_d+0x76>
8000adba:	82 1f       	mov %d15,1
8000adbc:	2c 50       	st.b [%a5]0,%d15
8000adbe:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000adc2:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000adc6:	8f 82 00 40 	sh %d4,%d2,8
8000adca:	59 54 0c 00 	st.w [%a5]12,%d4
8000adce:	6c 54       	st.w [%a5]16,%d15
8000add0:	00 90       	ret 
8000add2:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000add6:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000adda:	6c 52       	st.w [%a5]8,%d15
8000addc:	8f 82 00 20 	sh %d2,%d2,8
8000ade0:	82 3f       	mov %d15,3
8000ade2:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000ade6:	2c 50       	st.b [%a5]0,%d15
8000ade8:	59 52 0c 00 	st.w [%a5]12,%d2
8000adec:	59 53 10 00 	st.w [%a5]16,%d3
8000adf0:	00 90       	ret 

8000adf2 <__pack_f>:
8000adf2:	14 45       	ld.bu %d5,[%a4]
8000adf4:	4c 43       	ld.w %d15,[%a4]12
8000adf6:	19 47 04 00 	ld.w %d7,[%a4]4
8000adfa:	ff 25 09 80 	jge.u %d5,2,8000ae0c <__pack_f+0x1a>
8000adfe:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000ae02:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000ae06:	3b f0 0f 40 	mov %d4,255
8000ae0a:	3c 4f       	j 8000aea8 <__pack_f+0xb6>
8000ae0c:	3b f0 0f 40 	mov %d4,255
8000ae10:	82 03       	mov %d3,0
8000ae12:	df 45 4b 00 	jeq %d5,4,8000aea8 <__pack_f+0xb6>
8000ae16:	8b 25 00 62 	eq %d6,%d5,2
8000ae1a:	8b 0f e0 64 	or.eq %d6,%d15,0
8000ae1e:	82 04       	mov %d4,0
8000ae20:	df 06 44 80 	jne %d6,0,8000aea8 <__pack_f+0xb6>
8000ae24:	19 45 08 00 	ld.w %d5,[%a4]8
8000ae28:	8b 25 98 42 	ge %d4,%d5,-126
8000ae2c:	df 04 24 80 	jne %d4,0,8000ae74 <__pack_f+0x82>
8000ae30:	8b 25 18 51 	rsub %d5,%d5,-126
8000ae34:	8b a5 81 42 	ge %d4,%d5,26
8000ae38:	f6 4c       	jnz %d4,8000ae50 <__pack_f+0x5e>
8000ae3a:	82 12       	mov %d2,1
8000ae3c:	0f 52 00 20 	sh %d2,%d2,%d5
8000ae40:	8b 05 00 31 	rsub %d3,%d5,0
8000ae44:	c2 f2       	add %d2,-1
8000ae46:	0f 3f 00 30 	sh %d3,%d15,%d3
8000ae4a:	26 2f       	and %d15,%d2
8000ae4c:	8b 0f 00 35 	or.ne %d3,%d15,0
8000ae50:	8f f3 07 f1 	and %d15,%d3,127
8000ae54:	8b 0f 24 f2 	ne %d15,%d15,64
8000ae58:	ee 06       	jnz %d15,8000ae64 <__pack_f+0x72>
8000ae5a:	8f 03 08 f1 	and %d15,%d3,128
8000ae5e:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000ae62:	3c 03       	j 8000ae68 <__pack_f+0x76>
8000ae64:	1b f3 03 30 	addi %d3,%d3,63
8000ae68:	7b 00 00 f4 	movh %d15,16384
8000ae6c:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000ae70:	06 93       	sh %d3,-7
8000ae72:	3c 1b       	j 8000aea8 <__pack_f+0xb6>
8000ae74:	8b 05 88 62 	ge %d6,%d5,128
8000ae78:	3b f0 0f 40 	mov %d4,255
8000ae7c:	df 06 16 80 	jne %d6,0,8000aea8 <__pack_f+0xb6>
8000ae80:	8f ff 07 31 	and %d3,%d15,127
8000ae84:	8b 03 24 32 	ne %d3,%d3,64
8000ae88:	f6 36       	jnz %d3,8000ae94 <__pack_f+0xa2>
8000ae8a:	8f 0f 08 31 	and %d3,%d15,128
8000ae8e:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000ae92:	3c 03       	j 8000ae98 <__pack_f+0xa6>
8000ae94:	1b ff 03 f0 	addi %d15,%d15,63
8000ae98:	1b f5 07 40 	addi %d4,%d5,127
8000ae9c:	ce f4       	jgez %d15,8000aea4 <__pack_f+0xb2>
8000ae9e:	06 ff       	sh %d15,-1
8000aea0:	1b 05 08 40 	addi %d4,%d5,128
8000aea4:	8f 9f 1f 30 	sh %d3,%d15,-7
8000aea8:	82 02       	mov %d2,0
8000aeaa:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000aeae:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000aeb2:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000aeb6:	00 90       	ret 

8000aeb8 <malloc>:
8000aeb8:	91 00 00 f7 	movh.a %a15,28672
8000aebc:	99 f4 48 40 	ld.a %a4,[%a15]1288 <70000508 <_impure_ptr>>
8000aec0:	1d 00 09 00 	j 8000aed2 <_malloc_r>

8000aec4 <free>:
8000aec4:	91 00 00 f7 	movh.a %a15,28672
8000aec8:	40 45       	mov.aa %a5,%a4
8000aeca:	99 f4 48 40 	ld.a %a4,[%a15]1288 <70000508 <_impure_ptr>>
8000aece:	1d 00 f7 02 	j 8000b4bc <_free_r>

8000aed2 <_malloc_r>:
8000aed2:	1b b4 00 f0 	addi %d15,%d4,11
8000aed6:	8b 7f 61 82 	lt.u %d8,%d15,23
8000aeda:	8f 7f c0 f1 	andn %d15,%d15,7
8000aede:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000aee2:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000aee6:	8b 08 20 45 	or.lt %d4,%d8,0
8000aeea:	40 4d       	mov.aa %a13,%a4
8000aeec:	76 45       	jz %d4,8000aef6 <_malloc_r+0x24>
8000aeee:	da 0c       	mov %d15,12
8000aef0:	6c 40       	st.w [%a4]0,%d15
8000aef2:	1d 00 2a 02 	j 8000b346 <_malloc_r+0x474>
8000aef6:	91 00 00 f7 	movh.a %a15,28672
8000aefa:	8b 88 bf f2 	ge.u %d15,%d8,504
8000aefe:	6d 00 37 02 	call 8000b36c <__malloc_lock>
8000af02:	d9 ff 00 40 	lea %a15,[%a15]256 <70000100 <__malloc_av_>>
8000af06:	ee 19       	jnz %d15,8000af38 <_malloc_r+0x66>
8000af08:	8f d8 1f 20 	sh %d2,%d8,-3
8000af0c:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000af10:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000af14:	7d 2c 09 80 	jne.a %a12,%a2,8000af26 <_malloc_r+0x54>
8000af18:	d9 c2 08 00 	lea %a2,[%a12]8
8000af1c:	99 cc 14 00 	ld.a %a12,[%a12]20
8000af20:	c2 22       	add %d2,2
8000af22:	7d 2c 58 00 	jeq.a %a12,%a2,8000afd2 <_malloc_r+0x100>
8000af26:	cc c3       	ld.a %a15,[%a12]12
8000af28:	99 c2 08 00 	ld.a %a2,[%a12]8
8000af2c:	4c c1       	ld.w %d15,[%a12]4
8000af2e:	ec 23       	st.a [%a2]12,%a15
8000af30:	8f 3f c0 f1 	andn %d15,%d15,3
8000af34:	e8 22       	st.a [%a15]8,%a2
8000af36:	3c 74       	j 8000b01e <_malloc_r+0x14c>
8000af38:	8f 78 1f f0 	sh %d15,%d8,-9
8000af3c:	3b f0 03 20 	mov %d2,63
8000af40:	6e 27       	jz %d15,8000af8e <_malloc_r+0xbc>
8000af42:	8f a8 1f 20 	sh %d2,%d8,-6
8000af46:	1b 82 03 20 	addi %d2,%d2,56
8000af4a:	bf 5f 22 80 	jlt.u %d15,5,8000af8e <_malloc_r+0xbc>
8000af4e:	8b 5f a1 22 	ge.u %d2,%d15,21
8000af52:	f6 24       	jnz %d2,8000af5a <_malloc_r+0x88>
8000af54:	1b bf 05 20 	addi %d2,%d15,91
8000af58:	3c 1b       	j 8000af8e <_malloc_r+0xbc>
8000af5a:	8b 5f a5 22 	ge.u %d2,%d15,85
8000af5e:	f6 26       	jnz %d2,8000af6a <_malloc_r+0x98>
8000af60:	8f 48 1f 20 	sh %d2,%d8,-12
8000af64:	1b e2 06 20 	addi %d2,%d2,110
8000af68:	3c 13       	j 8000af8e <_malloc_r+0xbc>
8000af6a:	8b 5f b5 22 	ge.u %d2,%d15,341
8000af6e:	f6 26       	jnz %d2,8000af7a <_malloc_r+0xa8>
8000af70:	8f 18 1f 20 	sh %d2,%d8,-15
8000af74:	1b 72 07 20 	addi %d2,%d2,119
8000af78:	3c 0b       	j 8000af8e <_malloc_r+0xbc>
8000af7a:	3b 50 55 30 	mov %d3,1365
8000af7e:	3b e0 07 20 	mov %d2,126
8000af82:	7f 3f 06 80 	jge.u %d15,%d3,8000af8e <_malloc_r+0xbc>
8000af86:	8f e8 1e 20 	sh %d2,%d8,-18
8000af8a:	1b c2 07 20 	addi %d2,%d2,124
8000af8e:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000af92:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000af96:	7d 2c 1d 00 	jeq.a %a12,%a2,8000afd0 <_malloc_r+0xfe>
8000af9a:	19 c4 04 00 	ld.w %d4,[%a12]4
8000af9e:	8f 34 c0 41 	andn %d4,%d4,3
8000afa2:	5a 84       	sub %d15,%d4,%d8
8000afa4:	8b 0f 41 32 	lt %d3,%d15,16
8000afa8:	f6 33       	jnz %d3,8000afae <_malloc_r+0xdc>
8000afaa:	c2 f2       	add %d2,-1
8000afac:	3c 12       	j 8000afd0 <_malloc_r+0xfe>
8000afae:	0e fe       	jltz %d15,8000afca <_malloc_r+0xf8>
8000afb0:	cc c3       	ld.a %a15,[%a12]12
8000afb2:	99 c2 08 00 	ld.a %a2,[%a12]8
8000afb6:	ec 23       	st.a [%a2]12,%a15
8000afb8:	e8 22       	st.a [%a15]8,%a2
8000afba:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000afbe:	b7 10 21 20 	imask %e2,1,0,1
8000afc2:	49 f2 44 08 	ldmst [%a15]4,%e2
8000afc6:	1d 00 cc 01 	j 8000b35e <_malloc_r+0x48c>
8000afca:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000afce:	3c e4       	j 8000af96 <_malloc_r+0xc4>
8000afd0:	c2 12       	add %d2,1
8000afd2:	c8 4c       	ld.a %a12,[%a15]16
8000afd4:	91 00 00 37 	movh.a %a3,28672
8000afd8:	d9 33 08 40 	lea %a3,[%a3]264 <70000108 <__malloc_av_+0x8>>
8000afdc:	7d 3c 83 00 	jeq.a %a12,%a3,8000b0e2 <_malloc_r+0x210>
8000afe0:	4c c1       	ld.w %d15,[%a12]4
8000afe2:	8f 3f c0 f1 	andn %d15,%d15,3
8000afe6:	52 83       	sub %d3,%d15,%d8
8000afe8:	8b 03 41 42 	lt %d4,%d3,16
8000afec:	df 04 16 80 	jne %d4,0,8000b018 <_malloc_r+0x146>
8000aff0:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000aff4:	8f 18 40 81 	or %d8,%d8,1
8000aff8:	59 c8 04 00 	st.w [%a12]4,%d8
8000affc:	e8 52       	st.a [%a15]20,%a2
8000affe:	e8 42       	st.a [%a15]16,%a2
8000b000:	8f 13 40 f1 	or %d15,%d3,1
8000b004:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b008:	b5 23 08 00 	st.a [%a2]8,%a3
8000b00c:	6c 21       	st.w [%a2]4,%d15
8000b00e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b012:	74 23       	st.w [%a2],%d3
8000b014:	1d 00 a5 01 	j 8000b35e <_malloc_r+0x48c>
8000b018:	e8 53       	st.a [%a15]20,%a3
8000b01a:	e8 43       	st.a [%a15]16,%a3
8000b01c:	0e 33       	jltz %d3,8000b022 <_malloc_r+0x150>
8000b01e:	10 cf       	addsc.a %a15,%a12,%d15,0
8000b020:	3c cf       	j 8000afbe <_malloc_r+0xec>
8000b022:	3b 00 20 30 	mov %d3,512
8000b026:	7f 3f 15 80 	jge.u %d15,%d3,8000b050 <_malloc_r+0x17e>
8000b02a:	06 df       	sh %d15,-3
8000b02c:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000b02e:	48 14       	ld.w %d4,[%a15]4
8000b030:	99 24 08 00 	ld.a %a4,[%a2]8
8000b034:	8f ef 3f 30 	sha %d3,%d15,-2
8000b038:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000b03c:	b5 c4 08 00 	st.a [%a12]8,%a4
8000b040:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000b044:	b5 2c 08 00 	st.a [%a2]8,%a12
8000b048:	68 13       	st.w [%a15]4,%d3
8000b04a:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000b04e:	3c 4a       	j 8000b0e2 <_malloc_r+0x210>
8000b050:	8f af 1f 40 	sh %d4,%d15,-6
8000b054:	8f 7f 1f 30 	sh %d3,%d15,-9
8000b058:	1b 84 03 40 	addi %d4,%d4,56
8000b05c:	bf 53 22 80 	jlt.u %d3,5,8000b0a0 <_malloc_r+0x1ce>
8000b060:	8b 53 a1 42 	ge.u %d4,%d3,21
8000b064:	f6 44       	jnz %d4,8000b06c <_malloc_r+0x19a>
8000b066:	1b b3 05 40 	addi %d4,%d3,91
8000b06a:	3c 1b       	j 8000b0a0 <_malloc_r+0x1ce>
8000b06c:	8b 53 a5 42 	ge.u %d4,%d3,85
8000b070:	f6 46       	jnz %d4,8000b07c <_malloc_r+0x1aa>
8000b072:	8f 4f 1f 40 	sh %d4,%d15,-12
8000b076:	1b e4 06 40 	addi %d4,%d4,110
8000b07a:	3c 13       	j 8000b0a0 <_malloc_r+0x1ce>
8000b07c:	8b 53 b5 42 	ge.u %d4,%d3,341
8000b080:	f6 46       	jnz %d4,8000b08c <_malloc_r+0x1ba>
8000b082:	8f 1f 1f 40 	sh %d4,%d15,-15
8000b086:	1b 74 07 40 	addi %d4,%d4,119
8000b08a:	3c 0b       	j 8000b0a0 <_malloc_r+0x1ce>
8000b08c:	3b 50 55 50 	mov %d5,1365
8000b090:	3b e0 07 40 	mov %d4,126
8000b094:	7f 53 06 80 	jge.u %d3,%d5,8000b0a0 <_malloc_r+0x1ce>
8000b098:	8f ef 1e 40 	sh %d4,%d15,-18
8000b09c:	1b c4 07 40 	addi %d4,%d4,124
8000b0a0:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000b0a4:	99 42 08 00 	ld.a %a2,[%a4]8
8000b0a8:	7d 42 0d 80 	jne.a %a2,%a4,8000b0c2 <_malloc_r+0x1f0>
8000b0ac:	4c f1       	ld.w %d15,[%a15]4
8000b0ae:	86 e4       	sha %d4,-2
8000b0b0:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000b0b4:	40 24       	mov.aa %a4,%a2
8000b0b6:	68 14       	st.w [%a15]4,%d4
8000b0b8:	3c 0d       	j 8000b0d2 <_malloc_r+0x200>
8000b0ba:	99 22 08 00 	ld.a %a2,[%a2]8
8000b0be:	7d 42 08 00 	jeq.a %a2,%a4,8000b0ce <_malloc_r+0x1fc>
8000b0c2:	19 23 04 00 	ld.w %d3,[%a2]4
8000b0c6:	8f 33 c0 31 	andn %d3,%d3,3
8000b0ca:	3f 3f f8 ff 	jlt.u %d15,%d3,8000b0ba <_malloc_r+0x1e8>
8000b0ce:	99 24 0c 00 	ld.a %a4,[%a2]12
8000b0d2:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000b0d6:	b5 c2 08 00 	st.a [%a12]8,%a2
8000b0da:	b5 4c 08 00 	st.a [%a4]8,%a12
8000b0de:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000b0e2:	8f e2 3f 30 	sha %d3,%d2,-2
8000b0e6:	82 1f       	mov %d15,1
8000b0e8:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000b0ec:	48 13       	ld.w %d3,[%a15]4
8000b0ee:	3f f3 73 80 	jlt.u %d3,%d15,8000b1d4 <_malloc_r+0x302>
8000b0f2:	0f 3f 80 40 	and %d4,%d15,%d3
8000b0f6:	f6 49       	jnz %d4,8000b108 <_malloc_r+0x236>
8000b0f8:	8f 32 c0 21 	andn %d2,%d2,3
8000b0fc:	06 1f       	sh %d15,1
8000b0fe:	0f 3f 80 40 	and %d4,%d15,%d3
8000b102:	c2 42       	add %d2,4
8000b104:	df 04 fc 7f 	jeq %d4,0,8000b0fc <_malloc_r+0x22a>
8000b108:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b10c:	02 24       	mov %d4,%d2
8000b10e:	40 24       	mov.aa %a4,%a2
8000b110:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000b114:	7d 4c 3c 00 	jeq.a %a12,%a4,8000b18c <_malloc_r+0x2ba>
8000b118:	19 c6 04 00 	ld.w %d6,[%a12]4
8000b11c:	8f 36 c0 61 	andn %d6,%d6,3
8000b120:	0b 86 80 30 	sub %d3,%d6,%d8
8000b124:	8b 03 41 52 	lt %d5,%d3,16
8000b128:	df 05 1d 80 	jne %d5,0,8000b162 <_malloc_r+0x290>
8000b12c:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b130:	8f 18 40 81 	or %d8,%d8,1
8000b134:	59 c8 04 00 	st.w [%a12]4,%d8
8000b138:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b13c:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000b140:	8f 13 40 f1 	or %d15,%d3,1
8000b144:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b148:	b5 45 08 00 	st.a [%a4]8,%a5
8000b14c:	e8 52       	st.a [%a15]20,%a2
8000b14e:	e8 42       	st.a [%a15]16,%a2
8000b150:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b154:	b5 23 08 00 	st.a [%a2]8,%a3
8000b158:	6c 21       	st.w [%a2]4,%d15
8000b15a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b15e:	74 23       	st.w [%a2],%d3
8000b160:	3c 0e       	j 8000b17c <_malloc_r+0x2aa>
8000b162:	bf 03 12 00 	jlt %d3,0,8000b186 <_malloc_r+0x2b4>
8000b166:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000b16a:	b7 10 21 20 	imask %e2,1,0,1
8000b16e:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b172:	cc c3       	ld.a %a15,[%a12]12
8000b174:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000b178:	ec 23       	st.a [%a2]12,%a15
8000b17a:	e8 22       	st.a [%a15]8,%a2
8000b17c:	40 d4       	mov.aa %a4,%a13
8000b17e:	6d 00 f8 00 	call 8000b36e <__malloc_unlock>
8000b182:	1d 00 f3 00 	j 8000b368 <_malloc_r+0x496>
8000b186:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b18a:	3c c5       	j 8000b114 <_malloc_r+0x242>
8000b18c:	c2 14       	add %d4,1
8000b18e:	8f 34 00 31 	and %d3,%d4,3
8000b192:	d9 44 08 00 	lea %a4,[%a4]8
8000b196:	df 03 bd ff 	jne %d3,0,8000b110 <_malloc_r+0x23e>
8000b19a:	8f 32 00 31 	and %d3,%d2,3
8000b19e:	f6 36       	jnz %d3,8000b1aa <_malloc_r+0x2d8>
8000b1a0:	48 12       	ld.w %d2,[%a15]4
8000b1a2:	0f f2 e0 20 	andn %d2,%d2,%d15
8000b1a6:	68 12       	st.w [%a15]4,%d2
8000b1a8:	3c 07       	j 8000b1b6 <_malloc_r+0x2e4>
8000b1aa:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000b1ae:	d4 22       	ld.a %a2,[%a2]
8000b1b0:	c2 f2       	add %d2,-1
8000b1b2:	7d 42 f4 7f 	jeq.a %a2,%a4,8000b19a <_malloc_r+0x2c8>
8000b1b6:	06 1f       	sh %d15,1
8000b1b8:	48 12       	ld.w %d2,[%a15]4
8000b1ba:	8b 0f 20 32 	ne %d3,%d15,0
8000b1be:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000b1c2:	76 39       	jz %d3,8000b1d4 <_malloc_r+0x302>
8000b1c4:	0f 2f 80 30 	and %d3,%d15,%d2
8000b1c8:	f6 34       	jnz %d3,8000b1d0 <_malloc_r+0x2fe>
8000b1ca:	c2 44       	add %d4,4
8000b1cc:	06 1f       	sh %d15,1
8000b1ce:	3c fb       	j 8000b1c4 <_malloc_r+0x2f2>
8000b1d0:	02 42       	mov %d2,%d4
8000b1d2:	3c 9b       	j 8000b108 <_malloc_r+0x236>
8000b1d4:	c8 2c       	ld.a %a12,[%a15]8
8000b1d6:	19 ca 04 00 	ld.w %d10,[%a12]4
8000b1da:	8f 3a c0 a1 	andn %d10,%d10,3
8000b1de:	5a 8a       	sub %d15,%d10,%d8
8000b1e0:	8b 0f 41 22 	lt %d2,%d15,16
8000b1e4:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000b1e8:	df 02 b1 00 	jeq %d2,0,8000b34a <_malloc_r+0x478>
8000b1ec:	91 00 00 27 	movh.a %a2,28672
8000b1f0:	19 2b c0 20 	ld.w %d11,[%a2]3200 <70000c80 <__malloc_top_pad>>
8000b1f4:	91 00 00 27 	movh.a %a2,28672
8000b1f8:	42 8b       	add %d11,%d8
8000b1fa:	19 23 38 30 	ld.w %d3,[%a2]248 <700000f8 <__malloc_sbrk_base>>
8000b1fe:	1b fb 00 f1 	addi %d15,%d11,4111
8000b202:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b206:	1b 0b 01 20 	addi %d2,%d11,16
8000b20a:	8b f3 3f b2 	ne %d11,%d3,-1
8000b20e:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000b212:	40 d4       	mov.aa %a4,%a13
8000b214:	02 b4       	mov %d4,%d11
8000b216:	80 2c       	mov.d %d12,%a2
8000b218:	6d 00 ac 00 	call 8000b370 <_sbrk_r>
8000b21c:	80 29       	mov.d %d9,%a2
8000b21e:	df f9 86 00 	jeq %d9,-1,8000b32a <_malloc_r+0x458>
8000b222:	80 c2       	mov.d %d2,%a12
8000b224:	80 c3       	mov.d %d3,%a12
8000b226:	42 a2       	add %d2,%d10
8000b228:	80 f4       	mov.d %d4,%a15
8000b22a:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000b22e:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000b232:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000b236:	ee 7a       	jnz %d15,8000b32a <_malloc_r+0x458>
8000b238:	91 00 00 e7 	movh.a %a14,28672
8000b23c:	19 e3 d0 10 	ld.w %d3,[%a14]3152 <70000c50 <__malloc_current_mallinfo>>
8000b240:	42 b3       	add %d3,%d11
8000b242:	59 e3 d0 10 	st.w [%a14]3152 <70000c50 <__malloc_current_mallinfo>>,%d3
8000b246:	5f 29 0c 80 	jne %d9,%d2,8000b25e <_malloc_r+0x38c>
8000b24a:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000b24e:	ee 08       	jnz %d15,8000b25e <_malloc_r+0x38c>
8000b250:	c8 22       	ld.a %a2,[%a15]8
8000b252:	42 ba       	add %d10,%d11
8000b254:	8f 1a 40 a1 	or %d10,%d10,1
8000b258:	59 2a 04 00 	st.w [%a2]4,%d10
8000b25c:	3c 55       	j 8000b306 <_malloc_r+0x434>
8000b25e:	60 c2       	mov.a %a2,%d12
8000b260:	19 2f 38 30 	ld.w %d15,[%a2]248
8000b264:	5e f6       	jne %d15,-1,8000b270 <_malloc_r+0x39e>
8000b266:	91 00 00 27 	movh.a %a2,28672
8000b26a:	59 29 38 30 	st.w [%a2]248 <700000f8 <__malloc_sbrk_base>>,%d9
8000b26e:	3c 06       	j 8000b27a <_malloc_r+0x3a8>
8000b270:	0b 29 80 20 	sub %d2,%d9,%d2
8000b274:	42 23       	add %d3,%d2
8000b276:	59 e3 d0 10 	st.w [%a14]3152 <70000c50 <__malloc_current_mallinfo>>,%d3
8000b27a:	8f 79 00 21 	and %d2,%d9,7
8000b27e:	82 0f       	mov %d15,0
8000b280:	76 24       	jz %d2,8000b288 <_malloc_r+0x3b6>
8000b282:	8b 82 00 f1 	rsub %d15,%d2,8
8000b286:	42 f9       	add %d9,%d15
8000b288:	42 9b       	add %d11,%d9
8000b28a:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000b28e:	1b 0f 00 21 	addi %d2,%d15,4096
8000b292:	5a b2       	sub %d15,%d2,%d11
8000b294:	40 d4       	mov.aa %a4,%a13
8000b296:	02 f4       	mov %d4,%d15
8000b298:	6d 00 6c 00 	call 8000b370 <_sbrk_r>
8000b29c:	80 22       	mov.d %d2,%a2
8000b29e:	df f2 04 80 	jne %d2,-1,8000b2a6 <_malloc_r+0x3d4>
8000b2a2:	60 92       	mov.a %a2,%d9
8000b2a4:	82 0f       	mov %d15,0
8000b2a6:	80 2b       	mov.d %d11,%a2
8000b2a8:	19 e2 d0 10 	ld.w %d2,[%a14]3152 <70000c50 <__malloc_current_mallinfo>>
8000b2ac:	a2 9b       	sub %d11,%d9
8000b2ae:	42 f2       	add %d2,%d15
8000b2b0:	60 92       	mov.a %a2,%d9
8000b2b2:	42 bf       	add %d15,%d11
8000b2b4:	68 29       	st.w [%a15]8,%d9
8000b2b6:	8f 1f 40 31 	or %d3,%d15,1
8000b2ba:	59 e2 d0 10 	st.w [%a14]3152 <70000c50 <__malloc_current_mallinfo>>,%d2
8000b2be:	59 23 04 00 	st.w [%a2]4 <70000c50 <__malloc_current_mallinfo>>,%d3
8000b2c2:	df 0d 22 00 	jeq %d13,0,8000b306 <_malloc_r+0x434>
8000b2c6:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000b2ca:	ee 05       	jnz %d15,8000b2d4 <_malloc_r+0x402>
8000b2cc:	82 12       	mov %d2,1
8000b2ce:	59 22 04 00 	st.w [%a2]4,%d2
8000b2d2:	3c 2c       	j 8000b32a <_malloc_r+0x458>
8000b2d4:	1b 4a ff af 	addi %d10,%d10,-12
8000b2d8:	8f 7a c0 f1 	andn %d15,%d10,7
8000b2dc:	10 c2       	addsc.a %a2,%a12,%d15,0
8000b2de:	82 52       	mov %d2,5
8000b2e0:	59 22 04 00 	st.w [%a2]4,%d2
8000b2e4:	59 22 08 00 	st.w [%a2]8,%d2
8000b2e8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000b2ec:	8f 12 00 21 	and %d2,%d2,1
8000b2f0:	a6 f2       	or %d2,%d15
8000b2f2:	59 c2 04 00 	st.w [%a12]4,%d2
8000b2f6:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000b2fa:	ee 06       	jnz %d15,8000b306 <_malloc_r+0x434>
8000b2fc:	40 d4       	mov.aa %a4,%a13
8000b2fe:	d9 c5 08 00 	lea %a5,[%a12]8
8000b302:	6d 00 dd 00 	call 8000b4bc <_free_r>
8000b306:	91 00 00 27 	movh.a %a2,28672
8000b30a:	19 ef d0 10 	ld.w %d15,[%a14]3152 <70000c50 <__malloc_current_mallinfo>>
8000b30e:	19 22 fc 10 	ld.w %d2,[%a2]3196 <70000c7c <__malloc_max_sbrked_mem>>
8000b312:	7f f2 04 80 	jge.u %d2,%d15,8000b31a <_malloc_r+0x448>
8000b316:	59 2f fc 10 	st.w [%a2]3196 <70000c7c <__malloc_max_sbrked_mem>>,%d15
8000b31a:	91 00 00 27 	movh.a %a2,28672
8000b31e:	19 22 f8 10 	ld.w %d2,[%a2]3192 <70000c78 <__malloc_max_total_mem>>
8000b322:	7f f2 04 80 	jge.u %d2,%d15,8000b32a <_malloc_r+0x458>
8000b326:	59 2f f8 10 	st.w [%a2]3192 <70000c78 <__malloc_max_total_mem>>,%d15
8000b32a:	c8 22       	ld.a %a2,[%a15]8
8000b32c:	19 22 04 00 	ld.w %d2,[%a2]4 <70000c78 <__malloc_max_total_mem>>
8000b330:	8f 32 c0 21 	andn %d2,%d2,3
8000b334:	5a 82       	sub %d15,%d2,%d8
8000b336:	8b 0f 41 32 	lt %d3,%d15,16
8000b33a:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000b33e:	76 36       	jz %d3,8000b34a <_malloc_r+0x478>
8000b340:	40 d4       	mov.aa %a4,%a13
8000b342:	6d 00 16 00 	call 8000b36e <__malloc_unlock>
8000b346:	a0 0c       	mov.a %a12,0
8000b348:	3c 10       	j 8000b368 <_malloc_r+0x496>
8000b34a:	c8 2c       	ld.a %a12,[%a15]8
8000b34c:	8f 18 40 21 	or %d2,%d8,1
8000b350:	96 01       	or %d15,1
8000b352:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b356:	59 c2 04 00 	st.w [%a12]4,%d2
8000b35a:	e8 22       	st.a [%a15]8,%a2
8000b35c:	6c 21       	st.w [%a2]4,%d15
8000b35e:	40 d4       	mov.aa %a4,%a13
8000b360:	6d 00 07 00 	call 8000b36e <__malloc_unlock>
8000b364:	d9 cc 08 00 	lea %a12,[%a12]8
8000b368:	40 c2       	mov.aa %a2,%a12
8000b36a:	00 90       	ret 

8000b36c <__malloc_lock>:
8000b36c:	00 90       	ret 

8000b36e <__malloc_unlock>:
8000b36e:	00 90       	ret 

8000b370 <_sbrk_r>:
8000b370:	82 0f       	mov %d15,0
8000b372:	91 00 00 c7 	movh.a %a12,28672
8000b376:	59 cf c8 20 	st.w [%a12]3208 <70000c88 <errno>>,%d15
8000b37a:	40 4f       	mov.aa %a15,%a4
8000b37c:	6d 00 2c 17 	call 8000e1d4 <sbrk>
8000b380:	80 2f       	mov.d %d15,%a2
8000b382:	5e f5       	jne %d15,-1,8000b38c <_sbrk_r+0x1c>
8000b384:	19 cf c8 20 	ld.w %d15,[%a12]3208 <70000c88 <errno>>
8000b388:	6e 02       	jz %d15,8000b38c <_sbrk_r+0x1c>
8000b38a:	68 0f       	st.w [%a15]0,%d15
8000b38c:	00 90       	ret 

8000b38e <strlen>:
8000b38e:	80 42       	mov.d %d2,%a4
8000b390:	80 4f       	mov.d %d15,%a4
8000b392:	60 ff       	mov.a %a15,%d15
8000b394:	79 f3 00 00 	ld.b %d3,[%a15]0
8000b398:	76 33       	jz %d3,8000b39e <strlen+0x10>
8000b39a:	c2 1f       	add %d15,1
8000b39c:	3c fb       	j 8000b392 <strlen+0x4>
8000b39e:	52 22       	sub %d2,%d15,%d2
8000b3a0:	00 90       	ret 

8000b3a2 <_vsnprintf_r>:
8000b3a2:	20 68       	sub.a %sp,104
8000b3a4:	40 4f       	mov.aa %a15,%a4
8000b3a6:	ce 45       	jgez %d4,8000b3b0 <_vsnprintf_r+0xe>
8000b3a8:	da 8b       	mov %d15,139
8000b3aa:	6c 40       	st.w [%a4]0,%d15
8000b3ac:	82 f2       	mov %d2,-1
8000b3ae:	00 90       	ret 
8000b3b0:	02 4f       	mov %d15,%d4
8000b3b2:	3b 80 20 20 	mov %d2,520
8000b3b6:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000b3ba:	92 f2       	add %d2,%d15,-1
8000b3bc:	ea 02       	cmovn %d2,%d15,0
8000b3be:	f4 a5       	st.a [%sp],%a5
8000b3c0:	b5 a5 10 00 	st.a [%sp]16,%a5
8000b3c4:	59 a2 08 00 	st.w [%sp]8,%d2
8000b3c8:	59 a2 14 00 	st.w [%sp]20,%d2
8000b3cc:	40 a5       	mov.aa %a5,%sp
8000b3ce:	82 f2       	mov %d2,-1
8000b3d0:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000b3d4:	6d 00 4a 01 	call 8000b668 <_svfprintf_r>
8000b3d8:	ff f2 05 00 	jge %d2,-1,8000b3e2 <_vsnprintf_r+0x40>
8000b3dc:	3b b0 08 30 	mov %d3,139
8000b3e0:	68 03       	st.w [%a15]0,%d3
8000b3e2:	6e 04       	jz %d15,8000b3ea <_vsnprintf_r+0x48>
8000b3e4:	d8 00       	ld.a %a15,[%sp]0
8000b3e6:	82 0f       	mov %d15,0
8000b3e8:	28 0f       	st.b [%a15]0,%d15
8000b3ea:	00 90       	ret 

8000b3ec <vsnprintf>:
8000b3ec:	91 00 00 37 	movh.a %a3,28672
8000b3f0:	40 42       	mov.aa %a2,%a4
8000b3f2:	99 34 48 40 	ld.a %a4,[%a3]1288 <70000508 <_impure_ptr>>
8000b3f6:	40 5f       	mov.aa %a15,%a5
8000b3f8:	40 67       	mov.aa %a7,%a6
8000b3fa:	40 25       	mov.aa %a5,%a2
8000b3fc:	40 f6       	mov.aa %a6,%a15
8000b3fe:	1d ff d2 ff 	j 8000b3a2 <_vsnprintf_r>

8000b402 <_malloc_trim_r>:
8000b402:	02 4f       	mov %d15,%d4
8000b404:	40 4f       	mov.aa %a15,%a4
8000b406:	6d ff b3 ff 	call 8000b36c <__malloc_lock>
8000b40a:	91 00 00 c7 	movh.a %a12,28672
8000b40e:	d9 cc 00 40 	lea %a12,[%a12]256 <70000100 <__malloc_av_>>
8000b412:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <g_vadcChannelIDs>>
8000b416:	3b 00 00 21 	mov %d2,4096
8000b41a:	19 28 04 00 	ld.w %d8,[%a2]4
8000b41e:	8f 38 c0 81 	andn %d8,%d8,3
8000b422:	5a f8       	sub %d15,%d8,%d15
8000b424:	1b ff fe f0 	addi %d15,%d15,4079
8000b428:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b42c:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000b430:	7f 2f 07 00 	jge %d15,%d2,8000b43e <_malloc_trim_r+0x3c>
8000b434:	40 f4       	mov.aa %a4,%a15
8000b436:	6d ff 9c ff 	call 8000b36e <__malloc_unlock>
8000b43a:	82 02       	mov %d2,0
8000b43c:	00 90       	ret 
8000b43e:	40 f4       	mov.aa %a4,%a15
8000b440:	82 04       	mov %d4,0
8000b442:	6d ff 97 ff 	call 8000b370 <_sbrk_r>
8000b446:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b44a:	60 84       	mov.a %a4,%d8
8000b44c:	30 43       	add.a %a3,%a4
8000b44e:	7d 32 f3 ff 	jne.a %a2,%a3,8000b434 <_malloc_trim_r+0x32>
8000b452:	40 f4       	mov.aa %a4,%a15
8000b454:	8b 0f 00 41 	rsub %d4,%d15,0
8000b458:	6d ff 8c ff 	call 8000b370 <_sbrk_r>
8000b45c:	80 22       	mov.d %d2,%a2
8000b45e:	df f2 1c 80 	jne %d2,-1,8000b496 <_malloc_trim_r+0x94>
8000b462:	40 f4       	mov.aa %a4,%a15
8000b464:	82 04       	mov %d4,0
8000b466:	6d ff 85 ff 	call 8000b370 <_sbrk_r>
8000b46a:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b46e:	01 32 20 40 	sub.a %a4,%a2,%a3
8000b472:	80 4f       	mov.d %d15,%a4
8000b474:	8b 0f 41 22 	lt %d2,%d15,16
8000b478:	df 02 de ff 	jne %d2,0,8000b434 <_malloc_trim_r+0x32>
8000b47c:	91 00 00 47 	movh.a %a4,28672
8000b480:	99 44 38 30 	ld.a %a4,[%a4]248 <700000f8 <__malloc_sbrk_base>>
8000b484:	96 01       	or %d15,1
8000b486:	6c 31       	st.w [%a3]4,%d15
8000b488:	01 42 20 20 	sub.a %a2,%a2,%a4
8000b48c:	91 00 00 47 	movh.a %a4,28672
8000b490:	b5 42 d0 10 	st.a [%a4]3152 <70000c50 <__malloc_current_mallinfo>>,%a2
8000b494:	3c d0       	j 8000b434 <_malloc_trim_r+0x32>
8000b496:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b49a:	a2 f8       	sub %d8,%d15
8000b49c:	8f 18 40 81 	or %d8,%d8,1
8000b4a0:	59 28 04 00 	st.w [%a2]4,%d8
8000b4a4:	91 00 00 27 	movh.a %a2,28672
8000b4a8:	19 22 d0 10 	ld.w %d2,[%a2]3152 <70000c50 <__malloc_current_mallinfo>>
8000b4ac:	40 f4       	mov.aa %a4,%a15
8000b4ae:	5a f2       	sub %d15,%d2,%d15
8000b4b0:	59 2f d0 10 	st.w [%a2]3152 <70000c50 <__malloc_current_mallinfo>>,%d15
8000b4b4:	6d ff 5d ff 	call 8000b36e <__malloc_unlock>
8000b4b8:	82 12       	mov %d2,1
8000b4ba:	00 90       	ret 

8000b4bc <_free_r>:
8000b4bc:	40 4d       	mov.aa %a13,%a4
8000b4be:	bd 05 d4 00 	jz.a %a5,8000b666 <_free_r+0x1aa>
8000b4c2:	40 5c       	mov.aa %a12,%a5
8000b4c4:	6d ff 54 ff 	call 8000b36c <__malloc_lock>
8000b4c8:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000b4cc:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000b4d0:	8f 14 c0 f1 	andn %d15,%d4,1
8000b4d4:	91 00 00 27 	movh.a %a2,28672
8000b4d8:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b4da:	d9 22 00 40 	lea %a2,[%a2]256 <70000100 <__malloc_av_>>
8000b4de:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <g_vadcChannelIDs>>
8000b4e2:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <g_vadcChannelIDs>>
8000b4e6:	8f 14 00 41 	and %d4,%d4,1
8000b4ea:	8f 33 c0 31 	andn %d3,%d3,3
8000b4ee:	7d 43 24 80 	jne.a %a3,%a4,8000b536 <_free_r+0x7a>
8000b4f2:	42 3f       	add %d15,%d3
8000b4f4:	f6 4d       	jnz %d4,8000b50e <_free_r+0x52>
8000b4f6:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b4fa:	60 23       	mov.a %a3,%d2
8000b4fc:	42 2f       	add %d15,%d2
8000b4fe:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000b502:	c8 33       	ld.a %a3,[%a15]12
8000b504:	c8 24       	ld.a %a4,[%a15]8
8000b506:	b5 43 0c 00 	st.a [%a4]12,%a3
8000b50a:	b5 34 08 00 	st.a [%a3]8,%a4
8000b50e:	8f 1f 40 21 	or %d2,%d15,1
8000b512:	68 12       	st.w [%a15]4,%d2
8000b514:	ec 22       	st.a [%a2]8,%a15
8000b516:	91 00 00 f7 	movh.a %a15,28672
8000b51a:	19 f2 3c 30 	ld.w %d2,[%a15]252 <700000fc <__malloc_trim_threshold>>
8000b51e:	3f 2f 09 80 	jlt.u %d15,%d2,8000b530 <_free_r+0x74>
8000b522:	91 00 00 f7 	movh.a %a15,28672
8000b526:	40 d4       	mov.aa %a4,%a13
8000b528:	19 f4 c0 20 	ld.w %d4,[%a15]3200 <70000c80 <__malloc_top_pad>>
8000b52c:	6d ff 6b ff 	call 8000b402 <_malloc_trim_r>
8000b530:	40 d4       	mov.aa %a4,%a13
8000b532:	1d ff 1e ff 	j 8000b36e <__malloc_unlock>
8000b536:	59 33 04 00 	st.w [%a3]4,%d3
8000b53a:	82 02       	mov %d2,0
8000b53c:	df 04 16 80 	jne %d4,0,8000b568 <_free_r+0xac>
8000b540:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b544:	60 24       	mov.a %a4,%d2
8000b546:	42 2f       	add %d15,%d2
8000b548:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000b54c:	c8 25       	ld.a %a5,[%a15]8
8000b54e:	91 00 00 47 	movh.a %a4,28672
8000b552:	d9 44 08 40 	lea %a4,[%a4]264 <70000108 <__malloc_av_+0x8>>
8000b556:	82 12       	mov %d2,1
8000b558:	7d 45 08 00 	jeq.a %a5,%a4,8000b568 <_free_r+0xac>
8000b55c:	c8 34       	ld.a %a4,[%a15]12
8000b55e:	82 02       	mov %d2,0
8000b560:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b564:	b5 45 08 00 	st.a [%a4]8,%a5
8000b568:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000b56c:	19 44 04 00 	ld.w %d4,[%a4]4
8000b570:	6f 04 18 80 	jnz.t %d4,0,8000b5a0 <_free_r+0xe4>
8000b574:	42 3f       	add %d15,%d3
8000b576:	99 35 08 00 	ld.a %a5,[%a3]8
8000b57a:	f6 2d       	jnz %d2,8000b594 <_free_r+0xd8>
8000b57c:	91 00 00 47 	movh.a %a4,28672
8000b580:	d9 44 08 40 	lea %a4,[%a4]264 <70000108 <__malloc_av_+0x8>>
8000b584:	7d 45 08 80 	jne.a %a5,%a4,8000b594 <_free_r+0xd8>
8000b588:	ec 25       	st.a [%a2]20,%a15
8000b58a:	ec 24       	st.a [%a2]16,%a15
8000b58c:	e8 35       	st.a [%a15]12,%a5
8000b58e:	e8 25       	st.a [%a15]8,%a5
8000b590:	82 12       	mov %d2,1
8000b592:	3c 07       	j 8000b5a0 <_free_r+0xe4>
8000b594:	99 33 0c 00 	ld.a %a3,[%a3]12
8000b598:	b5 53 0c 00 	st.a [%a5]12,%a3
8000b59c:	b5 35 08 00 	st.a [%a3]8,%a5
8000b5a0:	8f 1f 40 31 	or %d3,%d15,1
8000b5a4:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b5a6:	68 13       	st.w [%a15]4,%d3
8000b5a8:	6c 30       	st.w [%a3]0,%d15
8000b5aa:	df 02 c3 ff 	jne %d2,0,8000b530 <_free_r+0x74>
8000b5ae:	3b 00 20 20 	mov %d2,512
8000b5b2:	7f 2f 12 80 	jge.u %d15,%d2,8000b5d6 <_free_r+0x11a>
8000b5b6:	19 23 04 00 	ld.w %d3,[%a2]4
8000b5ba:	06 df       	sh %d15,-3
8000b5bc:	8f ef 3f 20 	sha %d2,%d15,-2
8000b5c0:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000b5c4:	59 22 04 00 	st.w [%a2]4,%d2
8000b5c8:	d0 22       	addsc.a %a2,%a2,%d15,3
8000b5ca:	99 23 08 00 	ld.a %a3,[%a2]8
8000b5ce:	e8 32       	st.a [%a15]12,%a2
8000b5d0:	e8 23       	st.a [%a15]8,%a3
8000b5d2:	ec 22       	st.a [%a2]8,%a15
8000b5d4:	3c 46       	j 8000b660 <_free_r+0x1a4>
8000b5d6:	8f af 1f 30 	sh %d3,%d15,-6
8000b5da:	8f 7f 1f 20 	sh %d2,%d15,-9
8000b5de:	1b 83 03 30 	addi %d3,%d3,56
8000b5e2:	bf 52 22 80 	jlt.u %d2,5,8000b626 <_free_r+0x16a>
8000b5e6:	8b 52 a1 32 	ge.u %d3,%d2,21
8000b5ea:	f6 34       	jnz %d3,8000b5f2 <_free_r+0x136>
8000b5ec:	1b b2 05 30 	addi %d3,%d2,91
8000b5f0:	3c 1b       	j 8000b626 <_free_r+0x16a>
8000b5f2:	8b 52 a5 32 	ge.u %d3,%d2,85
8000b5f6:	f6 36       	jnz %d3,8000b602 <_free_r+0x146>
8000b5f8:	8f 4f 1f 30 	sh %d3,%d15,-12
8000b5fc:	1b e3 06 30 	addi %d3,%d3,110
8000b600:	3c 13       	j 8000b626 <_free_r+0x16a>
8000b602:	8b 52 b5 32 	ge.u %d3,%d2,341
8000b606:	f6 36       	jnz %d3,8000b612 <_free_r+0x156>
8000b608:	8f 1f 1f 30 	sh %d3,%d15,-15
8000b60c:	1b 73 07 30 	addi %d3,%d3,119
8000b610:	3c 0b       	j 8000b626 <_free_r+0x16a>
8000b612:	3b 50 55 40 	mov %d4,1365
8000b616:	3b e0 07 30 	mov %d3,126
8000b61a:	7f 42 06 80 	jge.u %d2,%d4,8000b626 <_free_r+0x16a>
8000b61e:	8f ef 1e 30 	sh %d3,%d15,-18
8000b622:	1b c3 07 30 	addi %d3,%d3,124
8000b626:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000b62a:	99 65 08 00 	ld.a %a5,[%a6]8
8000b62e:	40 53       	mov.aa %a3,%a5
8000b630:	7d 65 0d 80 	jne.a %a5,%a6,8000b64a <_free_r+0x18e>
8000b634:	4c 21       	ld.w %d15,[%a2]4
8000b636:	86 e3       	sha %d3,-2
8000b638:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000b63c:	59 23 04 00 	st.w [%a2]4,%d3
8000b640:	3c 0d       	j 8000b65a <_free_r+0x19e>
8000b642:	99 33 08 00 	ld.a %a3,[%a3]8
8000b646:	7d 63 08 00 	jeq.a %a3,%a6,8000b656 <_free_r+0x19a>
8000b64a:	19 32 04 00 	ld.w %d2,[%a3]4
8000b64e:	8f 32 c0 21 	andn %d2,%d2,3
8000b652:	3f 2f f8 ff 	jlt.u %d15,%d2,8000b642 <_free_r+0x186>
8000b656:	99 35 0c 00 	ld.a %a5,[%a3]12
8000b65a:	e8 35       	st.a [%a15]12,%a5
8000b65c:	e8 23       	st.a [%a15]8,%a3
8000b65e:	ec 52       	st.a [%a5]8,%a15
8000b660:	ec 33       	st.a [%a3]12,%a15
8000b662:	1d ff 67 ff 	j 8000b530 <_free_r+0x74>
8000b666:	00 90       	ret 

8000b668 <_svfprintf_r>:
8000b668:	20 d0       	sub.a %sp,208
8000b66a:	80 5b       	mov.d %d11,%a5
8000b66c:	80 4c       	mov.d %d12,%a4
8000b66e:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b672:	40 7f       	mov.aa %a15,%a7
8000b674:	6d 00 c4 0f 	call 8000d5fc <_localeconv_r>
8000b678:	d4 22       	ld.a %a2,[%a2]
8000b67a:	40 24       	mov.aa %a4,%a2
8000b67c:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b680:	6d ff 87 fe 	call 8000b38e <strlen>
8000b684:	60 b2       	mov.a %a2,%d11
8000b686:	59 a2 20 00 	st.w [%sp]32,%d2
8000b68a:	8c 26       	ld.h %d15,[%a2]12
8000b68c:	6f 7f 16 00 	jz.t %d15,7,8000b6b8 <_svfprintf_r+0x50>
8000b690:	4c 24       	ld.w %d15,[%a2]16
8000b692:	ee 13       	jnz %d15,8000b6b8 <_svfprintf_r+0x50>
8000b694:	60 c4       	mov.a %a4,%d12
8000b696:	3b 00 04 40 	mov %d4,64
8000b69a:	6d ff 1c fc 	call 8000aed2 <_malloc_r>
8000b69e:	60 b3       	mov.a %a3,%d11
8000b6a0:	f4 32       	st.a [%a3],%a2
8000b6a2:	b5 32 10 00 	st.a [%a3]16,%a2
8000b6a6:	7c 26       	jnz.a %a2,8000b6b2 <_svfprintf_r+0x4a>
8000b6a8:	60 cf       	mov.a %a15,%d12
8000b6aa:	da 0c       	mov %d15,12
8000b6ac:	68 0f       	st.w [%a15]0,%d15
8000b6ae:	82 f2       	mov %d2,-1
8000b6b0:	00 90       	ret 
8000b6b2:	60 b2       	mov.a %a2,%d11
8000b6b4:	da 40       	mov %d15,64
8000b6b6:	6c 25       	st.w [%a2]20,%d15
8000b6b8:	82 0f       	mov %d15,0
8000b6ba:	d9 a2 10 20 	lea %a2,[%sp]144
8000b6be:	a0 03       	mov.a %a3,0
8000b6c0:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b6c4:	78 19       	st.w [%sp]100,%d15
8000b6c6:	78 18       	st.w [%sp]96,%d15
8000b6c8:	78 05       	st.w [%sp]20,%d15
8000b6ca:	78 0b       	st.w [%sp]44,%d15
8000b6cc:	78 0c       	st.w [%sp]48,%d15
8000b6ce:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b6d2:	78 0e       	st.w [%sp]56,%d15
8000b6d4:	78 0a       	st.w [%sp]40,%d15
8000b6d6:	40 2e       	mov.aa %a14,%a2
8000b6d8:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b6dc:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b6e0:	8b 0f 20 32 	ne %d3,%d15,0
8000b6e4:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b6e8:	76 33       	jz %d3,8000b6ee <_svfprintf_r+0x86>
8000b6ea:	b0 1c       	add.a %a12,1
8000b6ec:	3c f8       	j 8000b6dc <_svfprintf_r+0x74>
8000b6ee:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b6f2:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b6f6:	80 3f       	mov.d %d15,%a3
8000b6f8:	6e 23       	jz %d15,8000b73e <_svfprintf_r+0xd6>
8000b6fa:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b6fe:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b702:	42 f3       	add %d3,%d15
8000b704:	59 a3 24 10 	st.w [%sp]100,%d3
8000b708:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b70c:	f4 e3       	st.a [%a14],%a3
8000b70e:	c2 13       	add %d3,1
8000b710:	6c e1       	st.w [%a14]4,%d15
8000b712:	59 a3 20 10 	st.w [%sp]96,%d3
8000b716:	8b 83 80 32 	ge %d3,%d3,8
8000b71a:	d9 ee 08 00 	lea %a14,[%a14]8
8000b71e:	76 3b       	jz %d3,8000b734 <_svfprintf_r+0xcc>
8000b720:	60 c4       	mov.a %a4,%d12
8000b722:	60 b5       	mov.a %a5,%d11
8000b724:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b728:	6d 00 7d 12 	call 8000dc22 <__ssprint_r>
8000b72c:	df 02 69 88 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000b730:	d9 ae 10 20 	lea %a14,[%sp]144
8000b734:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b738:	42 f2       	add %d2,%d15
8000b73a:	59 a2 28 00 	st.w [%sp]40,%d2
8000b73e:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b742:	df 0f 56 08 	jeq %d15,0,8000c7ee <_svfprintf_r+0x1186>
8000b746:	82 0f       	mov %d15,0
8000b748:	82 02       	mov %d2,0
8000b74a:	e9 af 01 10 	st.b [%sp]65,%d15
8000b74e:	d9 c2 01 00 	lea %a2,[%a12]1
8000b752:	82 0f       	mov %d15,0
8000b754:	82 fe       	mov %d14,-1
8000b756:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b75a:	82 0a       	mov %d10,0
8000b75c:	79 22 00 00 	ld.b %d2,[%a2]0
8000b760:	d9 23 01 00 	lea %a3,[%a2]1
8000b764:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b768:	59 a2 10 00 	st.w [%sp]16,%d2
8000b76c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b770:	1b 02 fe 3f 	addi %d3,%d2,-32
8000b774:	8b 93 a5 42 	ge.u %d4,%d3,89
8000b778:	df 04 19 84 	jne %d4,0,8000bfaa <_svfprintf_r+0x942>
8000b77c:	91 10 00 28 	movh.a %a2,32769
8000b780:	d9 22 4c eb 	lea %a2,[%a2]-18548 <8000b78c <_svfprintf_r+0x124>>
8000b784:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000b788:	dc 07       	ji %a7
8000b78a:	00 00       	nop 
8000b78c:	1d 00 c3 00 	j 8000b912 <_svfprintf_r+0x2aa>
8000b790:	1d 00 0d 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b794:	1d 00 0b 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b798:	1d 00 c0 00 	j 8000b918 <_svfprintf_r+0x2b0>
8000b79c:	1d 00 07 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7a0:	1d 00 05 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7a4:	1d 00 03 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7a8:	1d 00 01 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7ac:	1d 00 ff 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7b0:	1d 00 fd 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7b4:	1d 00 b5 00 	j 8000b91e <_svfprintf_r+0x2b6>
8000b7b8:	1d 00 9c 00 	j 8000b8f0 <_svfprintf_r+0x288>
8000b7bc:	1d 00 f7 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7c0:	1d 00 b8 00 	j 8000b930 <_svfprintf_r+0x2c8>
8000b7c4:	1d 00 b9 00 	j 8000b936 <_svfprintf_r+0x2ce>
8000b7c8:	1d 00 f1 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7cc:	1d 00 de 00 	j 8000b988 <_svfprintf_r+0x320>
8000b7d0:	1d 00 df 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7d4:	1d 00 dd 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7d8:	1d 00 db 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7dc:	1d 00 d9 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7e0:	1d 00 d7 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7e4:	1d 00 d5 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7e8:	1d 00 d3 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7ec:	1d 00 d1 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7f0:	1d 00 cf 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7f4:	1d 00 db 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7f8:	1d 00 d9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7fc:	1d 00 d7 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b800:	1d 00 d5 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b804:	1d 00 d3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b808:	1d 00 d1 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b80c:	1d 00 cf 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b810:	1d 00 cd 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b814:	1d 00 cb 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b818:	1d 00 c9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b81c:	1d 00 f9 00 	j 8000ba0e <_svfprintf_r+0x3a6>
8000b820:	1d 00 21 01 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b824:	1d 00 c3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b828:	1d 00 1d 01 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b82c:	1d 00 bf 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b830:	1d 00 bd 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b834:	1d 00 bb 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b838:	1d 00 b9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b83c:	1d 00 c6 00 	j 8000b9c8 <_svfprintf_r+0x360>
8000b840:	1d 00 b5 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b844:	1d 00 b3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b848:	1d 00 92 02 	j 8000bd6c <_svfprintf_r+0x704>
8000b84c:	1d 00 af 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b850:	1d 00 ad 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b854:	1d 00 ab 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b858:	1d 00 a9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b85c:	1d 00 a7 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b860:	1d 00 d0 02 	j 8000be00 <_svfprintf_r+0x798>
8000b864:	1d 00 a3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b868:	1d 00 a1 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b86c:	1d 00 4b 00 	j 8000b902 <_svfprintf_r+0x29a>
8000b870:	1d 00 9d 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b874:	1d 00 9b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b878:	1d 00 99 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b87c:	1d 00 97 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b880:	1d 00 95 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b884:	1d 00 93 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b888:	1d 00 91 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b88c:	1d 00 8f 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b890:	1d 00 8d 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b894:	1d 00 8b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b898:	1d 00 b0 00 	j 8000b9f8 <_svfprintf_r+0x390>
8000b89c:	1d 00 2f 00 	j 8000b8fa <_svfprintf_r+0x292>
8000b8a0:	1d 00 e1 00 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b8a4:	1d 00 df 00 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b8a8:	1d 00 dd 00 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b8ac:	1d 00 91 00 	j 8000b9ce <_svfprintf_r+0x366>
8000b8b0:	1d 00 25 00 	j 8000b8fa <_svfprintf_r+0x292>
8000b8b4:	1d 00 7b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8b8:	1d 00 79 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8bc:	1d 00 8c 00 	j 8000b9d4 <_svfprintf_r+0x36c>
8000b8c0:	1d 00 75 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8c4:	1d 00 39 02 	j 8000bd36 <_svfprintf_r+0x6ce>
8000b8c8:	1d 00 54 02 	j 8000bd70 <_svfprintf_r+0x708>
8000b8cc:	1d 00 66 02 	j 8000bd98 <_svfprintf_r+0x730>
8000b8d0:	1d 00 90 00 	j 8000b9f0 <_svfprintf_r+0x388>
8000b8d4:	1d 00 6b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8d8:	1d 00 77 02 	j 8000bdc6 <_svfprintf_r+0x75e>
8000b8dc:	1d 00 67 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8e0:	1d 00 92 02 	j 8000be04 <_svfprintf_r+0x79c>
8000b8e4:	1d 00 63 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8e8:	1d 00 61 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8ec:	1d 00 a0 02 	j 8000be2c <_svfprintf_r+0x7c4>
8000b8f0:	da 2b       	mov %d15,43
8000b8f2:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b8f6:	1d ff 33 ff 	j 8000b75c <_svfprintf_r+0xf4>
8000b8fa:	e9 af 01 10 	st.b [%sp]65,%d15
8000b8fe:	1d 00 8c 00 	j 8000ba16 <_svfprintf_r+0x3ae>
8000b902:	e9 af 01 10 	st.b [%sp]65,%d15
8000b906:	7b 00 00 f8 	movh %d15,32768
8000b90a:	1b cf e7 f0 	addi %d15,%d15,3708
8000b90e:	1d 00 95 02 	j 8000be38 <_svfprintf_r+0x7d0>
8000b912:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000b916:	3c ee       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b918:	8f 1a 40 a1 	or %d10,%d10,1
8000b91c:	3c eb       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b91e:	48 02       	ld.w %d2,[%a15]0
8000b920:	b0 4f       	add.a %a15,4
8000b922:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b926:	ff 02 e6 7f 	jge %d2,0,8000b8f2 <_svfprintf_r+0x28a>
8000b92a:	32 52       	rsub %d2
8000b92c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b930:	8f 4a 40 a1 	or %d10,%d10,4
8000b934:	3c df       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b936:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b93a:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b93e:	79 32 00 00 	ld.b %d2,[%a3]0
8000b942:	b0 12       	add.a %a2,1
8000b944:	59 a2 10 00 	st.w [%sp]16,%d2
8000b948:	8b a2 02 32 	eq %d3,%d2,42
8000b94c:	f6 33       	jnz %d3,8000b952 <_svfprintf_r+0x2ea>
8000b94e:	82 05       	mov %d5,0
8000b950:	3c 08       	j 8000b960 <_svfprintf_r+0x2f8>
8000b952:	48 0e       	ld.w %d14,[%a15]0
8000b954:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b958:	b0 4f       	add.a %a15,4
8000b95a:	8b fe 5f e3 	max %d14,%d14,-1
8000b95e:	3c ca       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b960:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b964:	1b 02 fd 3f 	addi %d3,%d2,-48
8000b968:	ff a3 0a 80 	jge.u %d3,10,8000b97c <_svfprintf_r+0x314>
8000b96c:	79 22 00 00 	ld.b %d2,[%a2]0
8000b970:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000b974:	59 a2 10 00 	st.w [%sp]16,%d2
8000b978:	b0 12       	add.a %a2,1
8000b97a:	3c f3       	j 8000b960 <_svfprintf_r+0x2f8>
8000b97c:	8b f5 5f e3 	max %d14,%d5,-1
8000b980:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b984:	1d ff f4 fe 	j 8000b76c <_svfprintf_r+0x104>
8000b988:	8f 0a 48 a1 	or %d10,%d10,128
8000b98c:	3c b3       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b98e:	82 02       	mov %d2,0
8000b990:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b994:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b998:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b99c:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b9a0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000b9a4:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b9a8:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000b9ac:	b0 12       	add.a %a2,1
8000b9ae:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b9b2:	79 32 00 00 	ld.b %d2,[%a3]0
8000b9b6:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b9ba:	59 a2 10 00 	st.w [%sp]16,%d2
8000b9be:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b9c2:	bf a4 e9 ff 	jlt.u %d4,10,8000b994 <_svfprintf_r+0x32c>
8000b9c6:	3c dd       	j 8000b980 <_svfprintf_r+0x318>
8000b9c8:	8f 8a 40 a1 	or %d10,%d10,8
8000b9cc:	3c 93       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9ce:	8f 0a 44 a1 	or %d10,%d10,64
8000b9d2:	3c 90       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9d4:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b9d8:	79 33 00 00 	ld.b %d3,[%a3]0
8000b9dc:	8b c3 26 32 	ne %d3,%d3,108
8000b9e0:	f6 35       	jnz %d3,8000b9ea <_svfprintf_r+0x382>
8000b9e2:	b0 13       	add.a %a3,1
8000b9e4:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b9e8:	3c 04       	j 8000b9f0 <_svfprintf_r+0x388>
8000b9ea:	8f 0a 41 a1 	or %d10,%d10,16
8000b9ee:	3c 82       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9f0:	8f 0a 42 a1 	or %d10,%d10,32
8000b9f4:	1d ff 7f ff 	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9f8:	48 03       	ld.w %d3,[%a15]0
8000b9fa:	d9 fc 04 00 	lea %a12,[%a15]4
8000b9fe:	e9 a3 28 10 	st.b [%sp]104,%d3
8000ba02:	82 03       	mov %d3,0
8000ba04:	e9 a3 01 10 	st.b [%sp]65,%d3
8000ba08:	60 ad       	mov.a %a13,%d10
8000ba0a:	1d 00 dc 02 	j 8000bfc2 <_svfprintf_r+0x95a>
8000ba0e:	e9 af 01 10 	st.b [%sp]65,%d15
8000ba12:	8f 0a 41 a1 	or %d10,%d10,16
8000ba16:	60 ad       	mov.a %a13,%d10
8000ba18:	6f 5a 07 00 	jz.t %d10,5,8000ba26 <_svfprintf_r+0x3be>
8000ba1c:	d9 fc 08 00 	lea %a12,[%a15]8
8000ba20:	09 f8 40 09 	ld.d %e8,[%a15]
8000ba24:	3c 12       	j 8000ba48 <_svfprintf_r+0x3e0>
8000ba26:	d9 f2 04 00 	lea %a2,[%a15]4
8000ba2a:	6f 4a 05 00 	jz.t %d10,4,8000ba34 <_svfprintf_r+0x3cc>
8000ba2e:	40 2c       	mov.aa %a12,%a2
8000ba30:	48 08       	ld.w %d8,[%a15]0
8000ba32:	3c 09       	j 8000ba44 <_svfprintf_r+0x3dc>
8000ba34:	48 03       	ld.w %d3,[%a15]0
8000ba36:	40 2c       	mov.aa %a12,%a2
8000ba38:	0b 30 00 88 	mov %e8,%d3
8000ba3c:	6f 6a 06 00 	jz.t %d10,6,8000ba48 <_svfprintf_r+0x3e0>
8000ba40:	37 03 50 80 	extr %d8,%d3,0,16
8000ba44:	0b 80 00 88 	mov %e8,%d8
8000ba48:	82 13       	mov %d3,1
8000ba4a:	ff 09 1d 02 	jge %d9,0,8000be84 <_svfprintf_r+0x81c>
8000ba4e:	32 59       	rsub %d9
8000ba50:	32 58       	rsub %d8
8000ba52:	3b d0 02 70 	mov %d7,45
8000ba56:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000ba5a:	e9 a7 01 10 	st.b [%sp]65,%d7
8000ba5e:	1d 00 13 02 	j 8000be84 <_svfprintf_r+0x81c>
8000ba62:	e9 af 01 10 	st.b [%sp]65,%d15
8000ba66:	4c f0       	ld.w %d15,[%a15]0
8000ba68:	d9 fc 08 00 	lea %a12,[%a15]8
8000ba6c:	78 0b       	st.w [%sp]44,%d15
8000ba6e:	4c f1       	ld.w %d15,[%a15]4
8000ba70:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ba74:	78 0c       	st.w [%sp]48,%d15
8000ba76:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ba7a:	6d 00 b3 10 	call 8000dbe0 <__fpclassifyd>
8000ba7e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ba82:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ba86:	df 12 18 80 	jne %d2,1,8000bab6 <_svfprintf_r+0x44e>
8000ba8a:	d2 06       	mov %e6,0
8000ba8c:	6d 00 50 14 	call 8000e32c <__ltdf2>
8000ba90:	ce 25       	jgez %d2,8000ba9a <_svfprintf_r+0x432>
8000ba92:	3b d0 02 30 	mov %d3,45
8000ba96:	e9 a3 01 10 	st.b [%sp]65,%d3
8000ba9a:	58 04       	ld.w %d15,[%sp]16
8000ba9c:	7b 00 00 78 	movh %d7,32768
8000baa0:	8b 8f 84 32 	ge %d3,%d15,72
8000baa4:	1b 07 e7 d0 	addi %d13,%d7,3696
8000baa8:	df 03 17 80 	jne %d3,0,8000bad6 <_svfprintf_r+0x46e>
8000baac:	7b 00 00 78 	movh %d7,32768
8000bab0:	1b c7 e6 d0 	addi %d13,%d7,3692
8000bab4:	3c 11       	j 8000bad6 <_svfprintf_r+0x46e>
8000bab6:	6d 00 95 10 	call 8000dbe0 <__fpclassifyd>
8000baba:	58 04       	ld.w %d15,[%sp]16
8000babc:	df 02 13 80 	jne %d2,0,8000bae2 <_svfprintf_r+0x47a>
8000bac0:	7b 00 00 78 	movh %d7,32768
8000bac4:	8b 8f 84 32 	ge %d3,%d15,72
8000bac8:	1b 87 e7 d0 	addi %d13,%d7,3704
8000bacc:	f6 35       	jnz %d3,8000bad6 <_svfprintf_r+0x46e>
8000bace:	7b 00 00 78 	movh %d7,32768
8000bad2:	1b 47 e7 d0 	addi %d13,%d7,3700
8000bad6:	8f 0a c8 a1 	andn %d10,%d10,128
8000bada:	60 ad       	mov.a %a13,%d10
8000badc:	82 39       	mov %d9,3
8000bade:	1d 00 78 02 	j 8000bfce <_svfprintf_r+0x966>
8000bae2:	8f 0f c2 f1 	andn %d15,%d15,32
8000bae6:	78 01       	st.w [%sp]4,%d15
8000bae8:	df fe 09 00 	jeq %d14,-1,8000bafa <_svfprintf_r+0x492>
8000baec:	8b 0e 00 72 	eq %d7,%d14,0
8000baf0:	8b 7f 04 74 	and.eq %d7,%d15,71
8000baf4:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000baf8:	3c 02       	j 8000bafc <_svfprintf_r+0x494>
8000bafa:	82 6e       	mov %d14,6
8000bafc:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bb00:	8f 0a 50 21 	or %d2,%d10,256
8000bb04:	60 2d       	mov.a %a13,%d2
8000bb06:	d8 0b       	ld.a %a15,[%sp]44
8000bb08:	82 0f       	mov %d15,0
8000bb0a:	ce 34       	jgez %d3,8000bb12 <_svfprintf_r+0x4aa>
8000bb0c:	9b 03 00 38 	addih %d3,%d3,32768
8000bb10:	da 2d       	mov %d15,45
8000bb12:	78 09       	st.w [%sp]36,%d15
8000bb14:	58 01       	ld.w %d15,[%sp]4
8000bb16:	02 e9       	mov %d9,%d14
8000bb18:	8b 6f 04 22 	eq %d2,%d15,70
8000bb1c:	82 36       	mov %d6,3
8000bb1e:	f6 28       	jnz %d2,8000bb2e <_svfprintf_r+0x4c6>
8000bb20:	8b 5f 24 12 	ne %d1,%d15,69
8000bb24:	1b 1e 00 50 	addi %d5,%d14,1
8000bb28:	82 26       	mov %d6,2
8000bb2a:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000bb2e:	60 c4       	mov.a %a4,%d12
8000bb30:	80 f4       	mov.d %d4,%a15
8000bb32:	02 35       	mov %d5,%d3
8000bb34:	02 97       	mov %d7,%d9
8000bb36:	d9 a5 04 10 	lea %a5,[%sp]68
8000bb3a:	d9 a6 08 10 	lea %a6,[%sp]72
8000bb3e:	d9 a7 14 10 	lea %a7,[%sp]84
8000bb42:	59 a2 0c 00 	st.w [%sp]12,%d2
8000bb46:	59 a3 08 00 	st.w [%sp]8,%d3
8000bb4a:	6d 00 ef 06 	call 8000c928 <_dtoa_r>
8000bb4e:	58 01       	ld.w %d15,[%sp]4
8000bb50:	80 2d       	mov.d %d13,%a2
8000bb52:	8b 7f 24 12 	ne %d1,%d15,71
8000bb56:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000bb5a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bb5e:	df 01 11 80 	jne %d1,0,8000bb80 <_svfprintf_r+0x518>
8000bb62:	6f 0a 0f 80 	jnz.t %d10,0,8000bb80 <_svfprintf_r+0x518>
8000bb66:	19 a2 14 10 	ld.w %d2,[%sp]84
8000bb6a:	58 01       	ld.w %d15,[%sp]4
8000bb6c:	a2 d2       	sub %d2,%d13
8000bb6e:	59 a2 14 00 	st.w [%sp]20,%d2
8000bb72:	8b 7f 04 42 	eq %d4,%d15,71
8000bb76:	19 a5 04 10 	ld.w %d5,[%sp]68
8000bb7a:	df 04 36 80 	jne %d4,0,8000bbe6 <_svfprintf_r+0x57e>
8000bb7e:	3c 3e       	j 8000bbfa <_svfprintf_r+0x592>
8000bb80:	0b 9d 00 80 	add %d8,%d13,%d9
8000bb84:	df 02 1c 00 	jeq %d2,0,8000bbbc <_svfprintf_r+0x554>
8000bb88:	60 d2       	mov.a %a2,%d13
8000bb8a:	80 f4       	mov.d %d4,%a15
8000bb8c:	79 20 00 00 	ld.b %d0,[%a2]0
8000bb90:	d2 06       	mov %e6,0
8000bb92:	02 35       	mov %d5,%d3
8000bb94:	8b 00 03 f2 	eq %d15,%d0,48
8000bb98:	59 a3 08 00 	st.w [%sp]8,%d3
8000bb9c:	6d 00 68 13 	call 8000e26c <__nedf2>
8000bba0:	8b 02 20 22 	ne %d2,%d2,0
8000bba4:	0f 2f 80 00 	and %d0,%d15,%d2
8000bba8:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bbac:	76 05       	jz %d0,8000bbb6 <_svfprintf_r+0x54e>
8000bbae:	8b 19 00 01 	rsub %d0,%d9,1
8000bbb2:	59 a0 04 10 	st.w [%sp]68,%d0
8000bbb6:	19 a2 04 10 	ld.w %d2,[%sp]68
8000bbba:	42 28       	add %d8,%d2
8000bbbc:	80 f4       	mov.d %d4,%a15
8000bbbe:	d2 06       	mov %e6,0
8000bbc0:	02 35       	mov %d5,%d3
8000bbc2:	6d 00 35 13 	call 8000e22c <__eqdf2>
8000bbc6:	f6 23       	jnz %d2,8000bbcc <_svfprintf_r+0x564>
8000bbc8:	59 a8 14 10 	st.w [%sp]84,%d8
8000bbcc:	3b 00 03 00 	mov %d0,48
8000bbd0:	19 a3 14 10 	ld.w %d3,[%sp]84
8000bbd4:	7f 83 c9 ff 	jge.u %d3,%d8,8000bb66 <_svfprintf_r+0x4fe>
8000bbd8:	1b 13 00 10 	addi %d1,%d3,1
8000bbdc:	60 32       	mov.a %a2,%d3
8000bbde:	59 a1 14 10 	st.w [%sp]84,%d1
8000bbe2:	34 20       	st.b [%a2],%d0
8000bbe4:	3c f6       	j 8000bbd0 <_svfprintf_r+0x568>
8000bbe6:	0b 5e 20 31 	lt %d3,%d14,%d5
8000bbea:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000bbee:	df 03 88 00 	jeq %d3,0,8000bcfe <_svfprintf_r+0x696>
8000bbf2:	58 04       	ld.w %d15,[%sp]16
8000bbf4:	c2 ef       	add %d15,-2
8000bbf6:	78 04       	st.w [%sp]16,%d15
8000bbf8:	3c 06       	j 8000bc04 <_svfprintf_r+0x59c>
8000bbfa:	58 04       	ld.w %d15,[%sp]16
8000bbfc:	8b 6f 86 32 	ge %d3,%d15,102
8000bc00:	df 03 69 80 	jne %d3,0,8000bcd2 <_svfprintf_r+0x66a>
8000bc04:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bc08:	9a f5       	add %d15,%d5,-1
8000bc0a:	78 11       	st.w [%sp]68,%d15
8000bc0c:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000bc10:	3b b0 02 30 	mov %d3,43
8000bc14:	ce f4       	jgez %d15,8000bc1c <_svfprintf_r+0x5b4>
8000bc16:	32 5f       	rsub %d15
8000bc18:	3b d0 02 30 	mov %d3,45
8000bc1c:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000bc20:	8b af 40 32 	lt %d3,%d15,10
8000bc24:	df 03 3e 80 	jne %d3,0,8000bca0 <_svfprintf_r+0x638>
8000bc28:	82 06       	mov %d6,0
8000bc2a:	3b a0 00 00 	mov %d0,10
8000bc2e:	4b 0f 01 42 	div %e4,%d15,%d0
8000bc32:	8b 66 00 71 	rsub %d7,%d6,6
8000bc36:	60 72       	mov.a %a2,%d7
8000bc38:	d9 af 14 10 	lea %a15,[%sp]84
8000bc3c:	1b 05 03 30 	addi %d3,%d5,48
8000bc40:	30 2f       	add.a %a15,%a2
8000bc42:	28 03       	st.b [%a15]0,%d3
8000bc44:	8b a4 80 32 	ge %d3,%d4,10
8000bc48:	02 4f       	mov %d15,%d4
8000bc4a:	c2 16       	add %d6,1
8000bc4c:	df 03 f1 ff 	jne %d3,0,8000bc2e <_svfprintf_r+0x5c6>
8000bc50:	60 74       	mov.a %a4,%d7
8000bc52:	d9 a2 10 30 	lea %a2,[%sp]208
8000bc56:	1b 04 03 f0 	addi %d15,%d4,48
8000bc5a:	30 42       	add.a %a2,%a4
8000bc5c:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000bc60:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000bc64:	80 22       	mov.d %d2,%a2
8000bc66:	d9 af 1b 10 	lea %a15,[%sp]91
8000bc6a:	80 ff       	mov.d %d15,%a15
8000bc6c:	1b 32 f8 4f 	addi %d4,%d2,-125
8000bc70:	82 03       	mov %d3,0
8000bc72:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000bc76:	3f 4f 08 80 	jlt.u %d15,%d4,8000bc86 <_svfprintf_r+0x61e>
8000bc7a:	80 a2       	mov.d %d2,%sp
8000bc7c:	1b 02 0d 20 	addi %d2,%d2,208
8000bc80:	8b 52 07 42 	eq %d4,%d2,117
8000bc84:	76 46       	jz %d4,8000bc90 <_svfprintf_r+0x628>
8000bc86:	a0 03       	mov.a %a3,0
8000bc88:	3c 04       	j 8000bc90 <_svfprintf_r+0x628>
8000bc8a:	0c 70       	ld.bu %d15,[%a7]0
8000bc8c:	b0 17       	add.a %a7,1
8000bc8e:	28 0f       	st.b [%a15]0,%d15
8000bc90:	60 3f       	mov.a %a15,%d3
8000bc92:	d9 a2 0d 10 	lea %a2,[%sp]77
8000bc96:	b0 2f       	add.a %a15,2
8000bc98:	30 2f       	add.a %a15,%a2
8000bc9a:	c2 13       	add %d3,1
8000bc9c:	fc 37       	loop %a3,8000bc8a <_svfprintf_r+0x622>
8000bc9e:	3c 0b       	j 8000bcb4 <_svfprintf_r+0x64c>
8000bca0:	3b 00 03 30 	mov %d3,48
8000bca4:	1b 0f 03 f0 	addi %d15,%d15,48
8000bca8:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000bcac:	e9 af 10 10 	st.b [%sp]80,%d15
8000bcb0:	d9 af 11 10 	lea %a15,[%sp]81
8000bcb4:	d9 a7 0d 10 	lea %a7,[%sp]77
8000bcb8:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000bcbc:	80 79       	mov.d %d9,%a7
8000bcbe:	58 05       	ld.w %d15,[%sp]20
8000bcc0:	b5 a7 38 00 	st.a [%sp]56,%a7
8000bcc4:	42 f9       	add %d9,%d15
8000bcc6:	ff 2f 04 00 	jge %d15,2,8000bcce <_svfprintf_r+0x666>
8000bcca:	6f 0a 2c 00 	jz.t %d10,0,8000bd22 <_svfprintf_r+0x6ba>
8000bcce:	c2 19       	add %d9,1
8000bcd0:	3c 29       	j 8000bd22 <_svfprintf_r+0x6ba>
8000bcd2:	58 04       	ld.w %d15,[%sp]16
8000bcd4:	8b 6f 26 42 	ne %d4,%d15,102
8000bcd8:	df 04 15 80 	jne %d4,0,8000bd02 <_svfprintf_r+0x69a>
8000bcdc:	02 59       	mov %d9,%d5
8000bcde:	8e 59       	jlez %d5,8000bcf0 <_svfprintf_r+0x688>
8000bce0:	f6 e3       	jnz %d14,8000bce6 <_svfprintf_r+0x67e>
8000bce2:	6f 0a 20 00 	jz.t %d10,0,8000bd22 <_svfprintf_r+0x6ba>
8000bce6:	1b 1e 00 30 	addi %d3,%d14,1
8000bcea:	0b 35 00 90 	add %d9,%d5,%d3
8000bcee:	3c 1a       	j 8000bd22 <_svfprintf_r+0x6ba>
8000bcf0:	f6 e4       	jnz %d14,8000bcf8 <_svfprintf_r+0x690>
8000bcf2:	82 19       	mov %d9,1
8000bcf4:	6f 0a 17 00 	jz.t %d10,0,8000bd22 <_svfprintf_r+0x6ba>
8000bcf8:	1b 2e 00 90 	addi %d9,%d14,2
8000bcfc:	3c 13       	j 8000bd22 <_svfprintf_r+0x6ba>
8000bcfe:	da 67       	mov %d15,103
8000bd00:	78 04       	st.w [%sp]16,%d15
8000bd02:	58 05       	ld.w %d15,[%sp]20
8000bd04:	8f 1a 00 a1 	and %d10,%d10,1
8000bd08:	0b a5 00 90 	add %d9,%d5,%d10
8000bd0c:	7f f5 0b 00 	jge %d5,%d15,8000bd22 <_svfprintf_r+0x6ba>
8000bd10:	8b 15 40 92 	lt %d9,%d5,1
8000bd14:	8b 25 00 31 	rsub %d3,%d5,2
8000bd18:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000bd1c:	19 a9 14 00 	ld.w %d9,[%sp]20
8000bd20:	42 39       	add %d9,%d3
8000bd22:	58 09       	ld.w %d15,[%sp]36
8000bd24:	82 0e       	mov %d14,0
8000bd26:	df 0f 55 01 	jeq %d15,0,8000bfd0 <_svfprintf_r+0x968>
8000bd2a:	3b d0 02 70 	mov %d7,45
8000bd2e:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bd32:	1d 00 4f 01 	j 8000bfd0 <_svfprintf_r+0x968>
8000bd36:	e9 af 01 10 	st.b [%sp]65,%d15
8000bd3a:	d9 f2 04 00 	lea %a2,[%a15]4
8000bd3e:	6f 5a 09 00 	jz.t %d10,5,8000bd50 <_svfprintf_r+0x6e8>
8000bd42:	58 0a       	ld.w %d15,[%sp]40
8000bd44:	c8 03       	ld.a %a3,[%a15]0
8000bd46:	0b f0 00 48 	mov %e4,%d15
8000bd4a:	89 34 40 09 	st.d [%a3],%e4
8000bd4e:	3c 0c       	j 8000bd66 <_svfprintf_r+0x6fe>
8000bd50:	6f 4a 08 80 	jnz.t %d10,4,8000bd60 <_svfprintf_r+0x6f8>
8000bd54:	6f 6a 06 00 	jz.t %d10,6,8000bd60 <_svfprintf_r+0x6f8>
8000bd58:	c8 03       	ld.a %a3,[%a15]0
8000bd5a:	58 0a       	ld.w %d15,[%sp]40
8000bd5c:	ac 30       	st.h [%a3]0,%d15
8000bd5e:	3c 04       	j 8000bd66 <_svfprintf_r+0x6fe>
8000bd60:	c8 03       	ld.a %a3,[%a15]0
8000bd62:	58 0a       	ld.w %d15,[%sp]40
8000bd64:	6c 30       	st.w [%a3]0,%d15
8000bd66:	40 2f       	mov.aa %a15,%a2
8000bd68:	1d ff b8 fc 	j 8000b6d8 <_svfprintf_r+0x70>
8000bd6c:	8f 0a 41 a1 	or %d10,%d10,16
8000bd70:	6f 5a 07 00 	jz.t %d10,5,8000bd7e <_svfprintf_r+0x716>
8000bd74:	d9 fc 08 00 	lea %a12,[%a15]8
8000bd78:	09 f8 40 09 	ld.d %e8,[%a15]
8000bd7c:	3c 0c       	j 8000bd94 <_svfprintf_r+0x72c>
8000bd7e:	d9 fc 04 00 	lea %a12,[%a15]4
8000bd82:	6f 4a 07 80 	jnz.t %d10,4,8000bd90 <_svfprintf_r+0x728>
8000bd86:	6f 6a 05 00 	jz.t %d10,6,8000bd90 <_svfprintf_r+0x728>
8000bd8a:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bd8e:	3c 02       	j 8000bd92 <_svfprintf_r+0x72a>
8000bd90:	48 08       	ld.w %d8,[%a15]0
8000bd92:	82 09       	mov %d9,0
8000bd94:	82 03       	mov %d3,0
8000bd96:	3c 73       	j 8000be7c <_svfprintf_r+0x814>
8000bd98:	3b 00 03 40 	mov %d4,48
8000bd9c:	7b 00 00 f8 	movh %d15,32768
8000bda0:	1b df e8 f0 	addi %d15,%d15,3725
8000bda4:	e9 a4 02 10 	st.b [%sp]66,%d4
8000bda8:	3b 80 07 40 	mov %d4,120
8000bdac:	78 0f       	st.w [%sp]60,%d15
8000bdae:	02 4f       	mov %d15,%d4
8000bdb0:	d9 fc 04 00 	lea %a12,[%a15]4
8000bdb4:	48 08       	ld.w %d8,[%a15]0
8000bdb6:	82 09       	mov %d9,0
8000bdb8:	8f 2a 40 a1 	or %d10,%d10,2
8000bdbc:	e9 a4 03 10 	st.b [%sp]67,%d4
8000bdc0:	82 23       	mov %d3,2
8000bdc2:	78 04       	st.w [%sp]16,%d15
8000bdc4:	3c 5c       	j 8000be7c <_svfprintf_r+0x814>
8000bdc6:	82 07       	mov %d7,0
8000bdc8:	48 0d       	ld.w %d13,[%a15]0
8000bdca:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bdce:	02 e9       	mov %d9,%d14
8000bdd0:	60 ad       	mov.a %a13,%d10
8000bdd2:	d9 fc 04 00 	lea %a12,[%a15]4
8000bdd6:	60 d4       	mov.a %a4,%d13
8000bdd8:	0e ef       	jltz %d14,8000bdf6 <_svfprintf_r+0x78e>
8000bdda:	82 04       	mov %d4,0
8000bddc:	02 e5       	mov %d5,%d14
8000bdde:	6d 00 14 0c 	call 8000d606 <memchr>
8000bde2:	bd 02 f6 00 	jz.a %a2,8000bfce <_svfprintf_r+0x966>
8000bde6:	60 d4       	mov.a %a4,%d13
8000bde8:	01 42 20 30 	sub.a %a3,%a2,%a4
8000bdec:	80 32       	mov.d %d2,%a3
8000bdee:	0b e2 80 91 	min %d9,%d2,%d14
8000bdf2:	1d 00 ee 00 	j 8000bfce <_svfprintf_r+0x966>
8000bdf6:	6d ff cc fa 	call 8000b38e <strlen>
8000bdfa:	02 29       	mov %d9,%d2
8000bdfc:	1d 00 e9 00 	j 8000bfce <_svfprintf_r+0x966>
8000be00:	8f 0a 41 a1 	or %d10,%d10,16
8000be04:	6f 5a 07 00 	jz.t %d10,5,8000be12 <_svfprintf_r+0x7aa>
8000be08:	d9 fc 08 00 	lea %a12,[%a15]8
8000be0c:	09 f8 40 09 	ld.d %e8,[%a15]
8000be10:	3c 0c       	j 8000be28 <_svfprintf_r+0x7c0>
8000be12:	d9 fc 04 00 	lea %a12,[%a15]4
8000be16:	6f 4a 07 80 	jnz.t %d10,4,8000be24 <_svfprintf_r+0x7bc>
8000be1a:	6f 6a 05 00 	jz.t %d10,6,8000be24 <_svfprintf_r+0x7bc>
8000be1e:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000be22:	3c 02       	j 8000be26 <_svfprintf_r+0x7be>
8000be24:	48 08       	ld.w %d8,[%a15]0
8000be26:	82 09       	mov %d9,0
8000be28:	82 13       	mov %d3,1
8000be2a:	3c 29       	j 8000be7c <_svfprintf_r+0x814>
8000be2c:	e9 af 01 10 	st.b [%sp]65,%d15
8000be30:	7b 00 00 f8 	movh %d15,32768
8000be34:	1b df e8 f0 	addi %d15,%d15,3725
8000be38:	78 0f       	st.w [%sp]60,%d15
8000be3a:	6f 5a 07 00 	jz.t %d10,5,8000be48 <_svfprintf_r+0x7e0>
8000be3e:	d9 fc 08 00 	lea %a12,[%a15]8
8000be42:	09 f8 40 09 	ld.d %e8,[%a15]
8000be46:	3c 0c       	j 8000be5e <_svfprintf_r+0x7f6>
8000be48:	d9 fc 04 00 	lea %a12,[%a15]4
8000be4c:	6f 4a 07 80 	jnz.t %d10,4,8000be5a <_svfprintf_r+0x7f2>
8000be50:	6f 6a 05 00 	jz.t %d10,6,8000be5a <_svfprintf_r+0x7f2>
8000be54:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000be58:	3c 02       	j 8000be5c <_svfprintf_r+0x7f4>
8000be5a:	48 08       	ld.w %d8,[%a15]0
8000be5c:	82 09       	mov %d9,0
8000be5e:	82 23       	mov %d3,2
8000be60:	6f 0a 0e 00 	jz.t %d10,0,8000be7c <_svfprintf_r+0x814>
8000be64:	0f 89 a0 40 	or %d4,%d9,%d8
8000be68:	76 4a       	jz %d4,8000be7c <_svfprintf_r+0x814>
8000be6a:	58 04       	ld.w %d15,[%sp]16
8000be6c:	3b 00 03 70 	mov %d7,48
8000be70:	e9 a7 02 10 	st.b [%sp]66,%d7
8000be74:	e9 af 03 10 	st.b [%sp]67,%d15
8000be78:	8f 2a 40 a1 	or %d10,%d10,2
8000be7c:	82 07       	mov %d7,0
8000be7e:	60 ad       	mov.a %a13,%d10
8000be80:	e9 a7 01 10 	st.b [%sp]65,%d7
8000be84:	80 d2       	mov.d %d2,%a13
8000be86:	8b 0e 80 72 	ge %d7,%d14,0
8000be8a:	8f 02 c8 41 	andn %d4,%d2,128
8000be8e:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000be92:	0f 98 a0 60 	or %d6,%d8,%d9
8000be96:	8b 0e 20 42 	ne %d4,%d14,0
8000be9a:	8b 06 00 45 	or.ne %d4,%d6,0
8000be9e:	60 2d       	mov.a %a13,%d2
8000bea0:	df 04 72 00 	jeq %d4,0,8000bf84 <_svfprintf_r+0x91c>
8000bea4:	df 13 06 00 	jeq %d3,1,8000beb0 <_svfprintf_r+0x848>
8000bea8:	df 23 57 00 	jeq %d3,2,8000bf56 <_svfprintf_r+0x8ee>
8000beac:	82 03       	mov %d3,0
8000beae:	3c 03       	j 8000beb4 <_svfprintf_r+0x84c>
8000beb0:	82 04       	mov %d4,0
8000beb2:	3c 22       	j 8000bef6 <_svfprintf_r+0x88e>
8000beb4:	8b 73 02 71 	rsub %d7,%d3,39
8000beb8:	60 72       	mov.a %a2,%d7
8000beba:	8f 78 00 41 	and %d4,%d8,7
8000bebe:	d9 a3 28 10 	lea %a3,[%sp]104
8000bec2:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000bec6:	30 23       	add.a %a3,%a2
8000bec8:	1b 04 03 40 	addi %d4,%d4,48
8000becc:	06 d9       	sh %d9,-3
8000bece:	34 34       	st.b [%a3],%d4
8000bed0:	0f 89 a0 60 	or %d6,%d9,%d8
8000bed4:	c2 13       	add %d3,1
8000bed6:	df 06 ef ff 	jne %d6,0,8000beb4 <_svfprintf_r+0x84c>
8000beda:	80 d2       	mov.d %d2,%a13
8000bedc:	80 3d       	mov.d %d13,%a3
8000bede:	6f 02 61 00 	jz.t %d2,0,8000bfa0 <_svfprintf_r+0x938>
8000bee2:	8b 04 03 42 	eq %d4,%d4,48
8000bee6:	df 04 5d 80 	jne %d4,0,8000bfa0 <_svfprintf_r+0x938>
8000beea:	3b 00 03 70 	mov %d7,48
8000beee:	c2 fd       	add %d13,-1
8000bef0:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000bef4:	3c 56       	j 8000bfa0 <_svfprintf_r+0x938>
8000bef6:	8b 84 02 71 	rsub %d7,%d4,40
8000befa:	8b 09 00 32 	eq %d3,%d9,0
8000befe:	60 73       	mov.a %a3,%d7
8000bf00:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000bf04:	d9 a7 28 10 	lea %a7,[%sp]104
8000bf08:	8b 09 00 35 	or.ne %d3,%d9,0
8000bf0c:	30 37       	add.a %a7,%a3
8000bf0e:	1b 14 00 d0 	addi %d13,%d4,1
8000bf12:	df 03 1b 00 	jeq %d3,0,8000bf48 <_svfprintf_r+0x8e0>
8000bf16:	8b 74 02 41 	rsub %d4,%d4,39
8000bf1a:	60 42       	mov.a %a2,%d4
8000bf1c:	fb a0 00 60 	mov %e6,10
8000bf20:	0b 89 10 48 	mov %e4,%d9,%d8
8000bf24:	d9 af 28 10 	lea %a15,[%sp]104
8000bf28:	30 2f       	add.a %a15,%a2
8000bf2a:	6d 00 98 12 	call 8000e45a <__umoddi3>
8000bf2e:	0b 89 10 48 	mov %e4,%d9,%d8
8000bf32:	1b 02 03 20 	addi %d2,%d2,48
8000bf36:	fb a0 00 60 	mov %e6,10
8000bf3a:	28 02       	st.b [%a15]0,%d2
8000bf3c:	6d 00 3f 12 	call 8000e3ba <__udivdi3>
8000bf40:	02 d4       	mov %d4,%d13
8000bf42:	0b 23 10 88 	mov %e8,%d3,%d2
8000bf46:	3c d8       	j 8000bef6 <_svfprintf_r+0x88e>
8000bf48:	80 7d       	mov.d %d13,%a7
8000bf4a:	1b 08 03 80 	addi %d8,%d8,48
8000bf4e:	c2 fd       	add %d13,-1
8000bf50:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000bf54:	3c 26       	j 8000bfa0 <_svfprintf_r+0x938>
8000bf56:	82 03       	mov %d3,0
8000bf58:	d8 0f       	ld.a %a15,[%sp]60
8000bf5a:	80 ad       	mov.d %d13,%sp
8000bf5c:	8f f8 00 f1 	and %d15,%d8,15
8000bf60:	8b 73 02 71 	rsub %d7,%d3,39
8000bf64:	1b 8d 06 d0 	addi %d13,%d13,104
8000bf68:	10 f7       	addsc.a %a7,%a15,%d15,0
8000bf6a:	42 7d       	add %d13,%d7
8000bf6c:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000bf70:	0c 70       	ld.bu %d15,[%a7]0
8000bf72:	60 d2       	mov.a %a2,%d13
8000bf74:	06 c9       	sh %d9,-4
8000bf76:	2c 20       	st.b [%a2]0,%d15
8000bf78:	0f 89 a0 40 	or %d4,%d9,%d8
8000bf7c:	c2 13       	add %d3,1
8000bf7e:	df 04 ed ff 	jne %d4,0,8000bf58 <_svfprintf_r+0x8f0>
8000bf82:	3c 0f       	j 8000bfa0 <_svfprintf_r+0x938>
8000bf84:	80 a2       	mov.d %d2,%sp
8000bf86:	1b 02 09 d0 	addi %d13,%d2,144
8000bf8a:	f6 3b       	jnz %d3,8000bfa0 <_svfprintf_r+0x938>
8000bf8c:	80 df       	mov.d %d15,%a13
8000bf8e:	2e 09       	jz.t %d15,0,8000bfa0 <_svfprintf_r+0x938>
8000bf90:	1b 02 0d d0 	addi %d13,%d2,208
8000bf94:	60 d2       	mov.a %a2,%d13
8000bf96:	3b 00 03 70 	mov %d7,48
8000bf9a:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000bf9e:	80 2d       	mov.d %d13,%a2
8000bfa0:	d9 a3 10 20 	lea %a3,[%sp]144
8000bfa4:	80 39       	mov.d %d9,%a3
8000bfa6:	a2 d9       	sub %d9,%d13
8000bfa8:	3c 14       	j 8000bfd0 <_svfprintf_r+0x968>
8000bfaa:	e9 af 01 10 	st.b [%sp]65,%d15
8000bfae:	58 04       	ld.w %d15,[%sp]16
8000bfb0:	df 0f 1f 04 	jeq %d15,0,8000c7ee <_svfprintf_r+0x1186>
8000bfb4:	82 03       	mov %d3,0
8000bfb6:	60 ad       	mov.a %a13,%d10
8000bfb8:	e9 af 28 10 	st.b [%sp]104,%d15
8000bfbc:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bfc0:	40 fc       	mov.aa %a12,%a15
8000bfc2:	80 a2       	mov.d %d2,%sp
8000bfc4:	82 19       	mov %d9,1
8000bfc6:	82 0e       	mov %d14,0
8000bfc8:	1b 82 06 d0 	addi %d13,%d2,104
8000bfcc:	3c 02       	j 8000bfd0 <_svfprintf_r+0x968>
8000bfce:	82 0e       	mov %d14,0
8000bfd0:	79 a7 01 10 	ld.b %d7,[%sp]65
8000bfd4:	80 df       	mov.d %d15,%a13
8000bfd6:	0b e9 a0 a1 	max %d10,%d9,%d14
8000bfda:	80 d2       	mov.d %d2,%a13
8000bfdc:	16 02       	and %d15,2
8000bfde:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000bfe2:	60 ff       	mov.a %a15,%d15
8000bfe4:	8a 2a       	cadd %d10,%d15,2
8000bfe6:	8f 42 08 f1 	and %d15,%d2,132
8000bfea:	ee 48       	jnz %d15,8000c07a <_svfprintf_r+0xa12>
8000bfec:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000bff0:	a2 a8       	sub %d8,%d10
8000bff2:	bf 18 44 00 	jlt %d8,1,8000c07a <_svfprintf_r+0xa12>
8000bff6:	91 00 00 28 	movh.a %a2,32768
8000bffa:	d9 22 f0 a0 	lea %a2,[%a2]3760 <80000eb0 <blanks.4035>>
8000bffe:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000eb0 <blanks.4035>>
8000c002:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000eb0 <blanks.4035>>
8000c006:	8b 18 81 72 	ge %d7,%d8,17
8000c00a:	f4 e2       	st.a [%a14],%a2
8000c00c:	df 07 20 00 	jeq %d7,0,8000c04c <_svfprintf_r+0x9e4>
8000c010:	1b 14 00 00 	addi %d0,%d4,1
8000c014:	3b 00 01 20 	mov %d2,16
8000c018:	1b 01 01 10 	addi %d1,%d1,16
8000c01c:	59 e2 04 00 	st.w [%a14]4,%d2
8000c020:	59 a0 20 10 	st.w [%sp]96,%d0
8000c024:	59 a1 24 10 	st.w [%sp]100,%d1
8000c028:	8b 80 80 02 	ge %d0,%d0,8
8000c02c:	d9 ee 08 00 	lea %a14,[%a14]8
8000c030:	76 0b       	jz %d0,8000c046 <_svfprintf_r+0x9de>
8000c032:	60 c4       	mov.a %a4,%d12
8000c034:	60 b5       	mov.a %a5,%d11
8000c036:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c03a:	6d 00 f4 0d 	call 8000dc22 <__ssprint_r>
8000c03e:	df 02 e0 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c042:	d9 ae 10 20 	lea %a14,[%sp]144
8000c046:	1b 08 ff 8f 	addi %d8,%d8,-16
8000c04a:	3c d6       	j 8000bff6 <_svfprintf_r+0x98e>
8000c04c:	c2 14       	add %d4,1
8000c04e:	42 81       	add %d1,%d8
8000c050:	59 e8 04 00 	st.w [%a14]4,%d8
8000c054:	59 a4 20 10 	st.w [%sp]96,%d4
8000c058:	59 a1 24 10 	st.w [%sp]100,%d1
8000c05c:	8b 84 80 42 	ge %d4,%d4,8
8000c060:	d9 ee 08 00 	lea %a14,[%a14]8
8000c064:	76 4b       	jz %d4,8000c07a <_svfprintf_r+0xa12>
8000c066:	60 c4       	mov.a %a4,%d12
8000c068:	60 b5       	mov.a %a5,%d11
8000c06a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c06e:	6d 00 da 0d 	call 8000dc22 <__ssprint_r>
8000c072:	df 02 c6 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c076:	d9 ae 10 20 	lea %a14,[%sp]144
8000c07a:	79 a4 01 10 	ld.b %d4,[%sp]65
8000c07e:	df 04 21 00 	jeq %d4,0,8000c0c0 <_svfprintf_r+0xa58>
8000c082:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c086:	d9 a7 01 10 	lea %a7,[%sp]65
8000c08a:	c2 14       	add %d4,1
8000c08c:	59 a4 24 10 	st.w [%sp]100,%d4
8000c090:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c094:	82 17       	mov %d7,1
8000c096:	c2 14       	add %d4,1
8000c098:	f4 e7       	st.a [%a14],%a7
8000c09a:	59 e7 04 00 	st.w [%a14]4,%d7
8000c09e:	59 a4 20 10 	st.w [%sp]96,%d4
8000c0a2:	8b 84 80 42 	ge %d4,%d4,8
8000c0a6:	d9 ee 08 00 	lea %a14,[%a14]8
8000c0aa:	76 4b       	jz %d4,8000c0c0 <_svfprintf_r+0xa58>
8000c0ac:	60 c4       	mov.a %a4,%d12
8000c0ae:	60 b5       	mov.a %a5,%d11
8000c0b0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c0b4:	6d 00 b7 0d 	call 8000dc22 <__ssprint_r>
8000c0b8:	df 02 a3 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c0bc:	d9 ae 10 20 	lea %a14,[%sp]144
8000c0c0:	bd 0f 21 00 	jz.a %a15,8000c102 <_svfprintf_r+0xa9a>
8000c0c4:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c0c8:	d9 a7 02 10 	lea %a7,[%sp]66
8000c0cc:	c2 24       	add %d4,2
8000c0ce:	59 a4 24 10 	st.w [%sp]100,%d4
8000c0d2:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c0d6:	82 27       	mov %d7,2
8000c0d8:	c2 14       	add %d4,1
8000c0da:	f4 e7       	st.a [%a14],%a7
8000c0dc:	59 e7 04 00 	st.w [%a14]4,%d7
8000c0e0:	59 a4 20 10 	st.w [%sp]96,%d4
8000c0e4:	8b 84 80 42 	ge %d4,%d4,8
8000c0e8:	d9 ee 08 00 	lea %a14,[%a14]8
8000c0ec:	76 4b       	jz %d4,8000c102 <_svfprintf_r+0xa9a>
8000c0ee:	60 c4       	mov.a %a4,%d12
8000c0f0:	60 b5       	mov.a %a5,%d11
8000c0f2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c0f6:	6d 00 96 0d 	call 8000dc22 <__ssprint_r>
8000c0fa:	df 02 82 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c0fe:	d9 ae 10 20 	lea %a14,[%sp]144
8000c102:	8b 0f 28 42 	ne %d4,%d15,128
8000c106:	df 04 48 80 	jne %d4,0,8000c196 <_svfprintf_r+0xb2e>
8000c10a:	58 07       	ld.w %d15,[%sp]28
8000c10c:	7b 00 00 28 	movh %d2,32768
8000c110:	60 23       	mov.a %a3,%d2
8000c112:	a2 af       	sub %d15,%d10
8000c114:	d9 3f e0 a0 	lea %a15,[%a3]3744
8000c118:	bf 1f 3f 00 	jlt %d15,1,8000c196 <_svfprintf_r+0xb2e>
8000c11c:	19 a7 24 10 	ld.w %d7,[%sp]100
8000c120:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c124:	8b 1f 81 82 	ge %d8,%d15,17
8000c128:	ec e0       	st.a [%a14]0,%a15
8000c12a:	df 08 20 00 	jeq %d8,0,8000c16a <_svfprintf_r+0xb02>
8000c12e:	1b 14 00 00 	addi %d0,%d4,1
8000c132:	3b 00 01 20 	mov %d2,16
8000c136:	1b 07 01 10 	addi %d1,%d7,16
8000c13a:	59 e2 04 00 	st.w [%a14]4,%d2
8000c13e:	59 a0 20 10 	st.w [%sp]96,%d0
8000c142:	59 a1 24 10 	st.w [%sp]100,%d1
8000c146:	8b 80 80 02 	ge %d0,%d0,8
8000c14a:	d9 ee 08 00 	lea %a14,[%a14]8
8000c14e:	76 0b       	jz %d0,8000c164 <_svfprintf_r+0xafc>
8000c150:	60 c4       	mov.a %a4,%d12
8000c152:	60 b5       	mov.a %a5,%d11
8000c154:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c158:	6d 00 65 0d 	call 8000dc22 <__ssprint_r>
8000c15c:	df 02 51 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c160:	d9 ae 10 20 	lea %a14,[%sp]144
8000c164:	1b 0f ff ff 	addi %d15,%d15,-16
8000c168:	3c da       	j 8000c11c <_svfprintf_r+0xab4>
8000c16a:	c2 14       	add %d4,1
8000c16c:	42 f7       	add %d7,%d15
8000c16e:	6c e1       	st.w [%a14]4,%d15
8000c170:	59 a4 20 10 	st.w [%sp]96,%d4
8000c174:	59 a7 24 10 	st.w [%sp]100,%d7
8000c178:	8b 84 80 42 	ge %d4,%d4,8
8000c17c:	d9 ee 08 00 	lea %a14,[%a14]8
8000c180:	76 4b       	jz %d4,8000c196 <_svfprintf_r+0xb2e>
8000c182:	60 c4       	mov.a %a4,%d12
8000c184:	60 b5       	mov.a %a5,%d11
8000c186:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c18a:	6d 00 4c 0d 	call 8000dc22 <__ssprint_r>
8000c18e:	df 02 38 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c192:	d9 ae 10 20 	lea %a14,[%sp]144
8000c196:	7b 00 00 88 	movh %d8,32768
8000c19a:	a2 9e       	sub %d14,%d9
8000c19c:	1b 08 ea 80 	addi %d8,%d8,3744
8000c1a0:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000c1a4:	bf 1e 3c 00 	jlt %d14,1,8000c21c <_svfprintf_r+0xbb4>
8000c1a8:	19 a6 24 10 	ld.w %d6,[%sp]100
8000c1ac:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c1b0:	8b 1e 81 02 	ge %d0,%d14,17
8000c1b4:	74 e8       	st.w [%a14],%d8
8000c1b6:	df 00 1c 00 	jeq %d0,0,8000c1ee <_svfprintf_r+0xb86>
8000c1ba:	c2 14       	add %d4,1
8000c1bc:	1b 06 01 00 	addi %d0,%d6,16
8000c1c0:	ec e1       	st.a [%a14]4,%a15
8000c1c2:	59 a4 20 10 	st.w [%sp]96,%d4
8000c1c6:	59 a0 24 10 	st.w [%sp]100,%d0
8000c1ca:	8b 84 80 42 	ge %d4,%d4,8
8000c1ce:	d9 ee 08 00 	lea %a14,[%a14]8
8000c1d2:	76 4b       	jz %d4,8000c1e8 <_svfprintf_r+0xb80>
8000c1d4:	60 c4       	mov.a %a4,%d12
8000c1d6:	60 b5       	mov.a %a5,%d11
8000c1d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1dc:	6d 00 23 0d 	call 8000dc22 <__ssprint_r>
8000c1e0:	df 02 0f 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c1e4:	d9 ae 10 20 	lea %a14,[%sp]144
8000c1e8:	1b 0e ff ef 	addi %d14,%d14,-16
8000c1ec:	3c de       	j 8000c1a8 <_svfprintf_r+0xb40>
8000c1ee:	c2 14       	add %d4,1
8000c1f0:	42 e6       	add %d6,%d14
8000c1f2:	59 ee 04 00 	st.w [%a14]4,%d14
8000c1f6:	59 a4 20 10 	st.w [%sp]96,%d4
8000c1fa:	59 a6 24 10 	st.w [%sp]100,%d6
8000c1fe:	8b 84 80 42 	ge %d4,%d4,8
8000c202:	d9 ee 08 00 	lea %a14,[%a14]8
8000c206:	76 4b       	jz %d4,8000c21c <_svfprintf_r+0xbb4>
8000c208:	60 c4       	mov.a %a4,%d12
8000c20a:	60 b5       	mov.a %a5,%d11
8000c20c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c210:	6d 00 09 0d 	call 8000dc22 <__ssprint_r>
8000c214:	df 02 f5 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c218:	d9 ae 10 20 	lea %a14,[%sp]144
8000c21c:	80 df       	mov.d %d15,%a13
8000c21e:	19 ae 24 10 	ld.w %d14,[%sp]100
8000c222:	19 a8 20 10 	ld.w %d8,[%sp]96
8000c226:	6f 8f 1d 80 	jnz.t %d15,8,8000c260 <_svfprintf_r+0xbf8>
8000c22a:	c2 18       	add %d8,1
8000c22c:	59 e9 04 00 	st.w [%a14]4,%d9
8000c230:	42 e9       	add %d9,%d14
8000c232:	59 a8 20 10 	st.w [%sp]96,%d8
8000c236:	74 ed       	st.w [%a14],%d13
8000c238:	59 a9 24 10 	st.w [%sp]100,%d9
8000c23c:	8b 88 80 82 	ge %d8,%d8,8
8000c240:	d9 ef 08 00 	lea %a15,[%a14]8
8000c244:	df 08 79 02 	jeq %d8,0,8000c736 <_svfprintf_r+0x10ce>
8000c248:	60 c4       	mov.a %a4,%d12
8000c24a:	60 b5       	mov.a %a5,%d11
8000c24c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c250:	6d 00 e9 0c 	call 8000dc22 <__ssprint_r>
8000c254:	df 02 d5 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c258:	d9 af 10 20 	lea %a15,[%sp]144
8000c25c:	1d 00 6d 02 	j 8000c736 <_svfprintf_r+0x10ce>
8000c260:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c264:	8b 62 46 f2 	lt %d15,%d2,102
8000c268:	df 0f be 81 	jne %d15,0,8000c5e4 <_svfprintf_r+0xf7c>
8000c26c:	d2 06       	mov %e6,0
8000c26e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c272:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c276:	6d 00 db 0f 	call 8000e22c <__eqdf2>
8000c27a:	df 02 78 80 	jne %d2,0,8000c36a <_svfprintf_r+0xd02>
8000c27e:	7b 00 00 38 	movh %d3,32768
8000c282:	1b e3 e9 30 	addi %d3,%d3,3742
8000c286:	c2 18       	add %d8,1
8000c288:	74 e3       	st.w [%a14],%d3
8000c28a:	1b 1e 00 90 	addi %d9,%d14,1
8000c28e:	82 13       	mov %d3,1
8000c290:	59 a8 20 10 	st.w [%sp]96,%d8
8000c294:	59 e3 04 00 	st.w [%a14]4,%d3
8000c298:	59 a9 24 10 	st.w [%sp]100,%d9
8000c29c:	8b 88 80 82 	ge %d8,%d8,8
8000c2a0:	d9 ef 08 00 	lea %a15,[%a14]8
8000c2a4:	76 8b       	jz %d8,8000c2ba <_svfprintf_r+0xc52>
8000c2a6:	60 c4       	mov.a %a4,%d12
8000c2a8:	60 b5       	mov.a %a5,%d11
8000c2aa:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2ae:	6d 00 ba 0c 	call 8000dc22 <__ssprint_r>
8000c2b2:	df 02 a6 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c2b6:	d9 af 10 20 	lea %a15,[%sp]144
8000c2ba:	58 11       	ld.w %d15,[%sp]68
8000c2bc:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c2c0:	3f 2f 05 00 	jlt %d15,%d2,8000c2ca <_svfprintf_r+0xc62>
8000c2c4:	80 df       	mov.d %d15,%a13
8000c2c6:	6f 0f 38 02 	jz.t %d15,0,8000c736 <_svfprintf_r+0x10ce>
8000c2ca:	58 08       	ld.w %d15,[%sp]32
8000c2cc:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c2d0:	68 1f       	st.w [%a15]4,%d15
8000c2d2:	58 19       	ld.w %d15,[%sp]100
8000c2d4:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c2d8:	42 2f       	add %d15,%d2
8000c2da:	78 19       	st.w [%sp]100,%d15
8000c2dc:	58 18       	ld.w %d15,[%sp]96
8000c2de:	e8 03       	st.a [%a15]0,%a3
8000c2e0:	c2 1f       	add %d15,1
8000c2e2:	78 18       	st.w [%sp]96,%d15
8000c2e4:	8b 8f 80 f2 	ge %d15,%d15,8
8000c2e8:	d9 ff 08 00 	lea %a15,[%a15]8
8000c2ec:	6e 0b       	jz %d15,8000c302 <_svfprintf_r+0xc9a>
8000c2ee:	60 c4       	mov.a %a4,%d12
8000c2f0:	60 b5       	mov.a %a5,%d11
8000c2f2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2f6:	6d 00 96 0c 	call 8000dc22 <__ssprint_r>
8000c2fa:	df 02 82 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c2fe:	d9 af 10 20 	lea %a15,[%sp]144
8000c302:	58 05       	ld.w %d15,[%sp]20
8000c304:	7b 00 00 88 	movh %d8,32768
8000c308:	c2 ff       	add %d15,-1
8000c30a:	1b 08 ea 80 	addi %d8,%d8,3744
8000c30e:	3b 00 01 90 	mov %d9,16
8000c312:	bf 1f 12 02 	jlt %d15,1,8000c736 <_svfprintf_r+0x10ce>
8000c316:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c31a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c31e:	8b 1f 81 42 	ge %d4,%d15,17
8000c322:	68 08       	st.w [%a15]0,%d8
8000c324:	df 04 1c 00 	jeq %d4,0,8000c35c <_svfprintf_r+0xcf4>
8000c328:	c2 13       	add %d3,1
8000c32a:	1b 05 01 40 	addi %d4,%d5,16
8000c32e:	68 19       	st.w [%a15]4,%d9
8000c330:	59 a3 20 10 	st.w [%sp]96,%d3
8000c334:	59 a4 24 10 	st.w [%sp]100,%d4
8000c338:	8b 83 80 32 	ge %d3,%d3,8
8000c33c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c340:	76 3b       	jz %d3,8000c356 <_svfprintf_r+0xcee>
8000c342:	60 c4       	mov.a %a4,%d12
8000c344:	60 b5       	mov.a %a5,%d11
8000c346:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c34a:	6d 00 6c 0c 	call 8000dc22 <__ssprint_r>
8000c34e:	df 02 58 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c352:	d9 af 10 20 	lea %a15,[%sp]144
8000c356:	1b 0f ff ff 	addi %d15,%d15,-16
8000c35a:	3c de       	j 8000c316 <_svfprintf_r+0xcae>
8000c35c:	12 54       	add %d4,%d15,%d5
8000c35e:	68 1f       	st.w [%a15]4,%d15
8000c360:	59 a4 24 10 	st.w [%sp]100,%d4
8000c364:	9a 13       	add %d15,%d3,1
8000c366:	1d 00 e1 01 	j 8000c728 <_svfprintf_r+0x10c0>
8000c36a:	19 a3 04 10 	ld.w %d3,[%sp]68
8000c36e:	ff 13 8e 00 	jge %d3,1,8000c48a <_svfprintf_r+0xe22>
8000c372:	7b 00 00 38 	movh %d3,32768
8000c376:	1b e3 e9 30 	addi %d3,%d3,3742
8000c37a:	c2 18       	add %d8,1
8000c37c:	74 e3       	st.w [%a14],%d3
8000c37e:	1b 1e 00 90 	addi %d9,%d14,1
8000c382:	82 13       	mov %d3,1
8000c384:	59 a8 20 10 	st.w [%sp]96,%d8
8000c388:	59 e3 04 00 	st.w [%a14]4,%d3
8000c38c:	59 a9 24 10 	st.w [%sp]100,%d9
8000c390:	8b 88 80 82 	ge %d8,%d8,8
8000c394:	d9 ef 08 00 	lea %a15,[%a14]8
8000c398:	76 8b       	jz %d8,8000c3ae <_svfprintf_r+0xd46>
8000c39a:	60 c4       	mov.a %a4,%d12
8000c39c:	60 b5       	mov.a %a5,%d11
8000c39e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3a2:	6d 00 40 0c 	call 8000dc22 <__ssprint_r>
8000c3a6:	df 02 2c 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c3aa:	d9 af 10 20 	lea %a15,[%sp]144
8000c3ae:	58 11       	ld.w %d15,[%sp]68
8000c3b0:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c3b4:	a6 2f       	or %d15,%d2
8000c3b6:	ee 04       	jnz %d15,8000c3be <_svfprintf_r+0xd56>
8000c3b8:	80 df       	mov.d %d15,%a13
8000c3ba:	6f 0f be 01 	jz.t %d15,0,8000c736 <_svfprintf_r+0x10ce>
8000c3be:	58 08       	ld.w %d15,[%sp]32
8000c3c0:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c3c4:	68 1f       	st.w [%a15]4,%d15
8000c3c6:	58 19       	ld.w %d15,[%sp]100
8000c3c8:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c3cc:	42 2f       	add %d15,%d2
8000c3ce:	78 19       	st.w [%sp]100,%d15
8000c3d0:	58 18       	ld.w %d15,[%sp]96
8000c3d2:	e8 03       	st.a [%a15]0,%a3
8000c3d4:	c2 1f       	add %d15,1
8000c3d6:	78 18       	st.w [%sp]96,%d15
8000c3d8:	8b 8f 80 f2 	ge %d15,%d15,8
8000c3dc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c3e0:	6e 0b       	jz %d15,8000c3f6 <_svfprintf_r+0xd8e>
8000c3e2:	60 c4       	mov.a %a4,%d12
8000c3e4:	60 b5       	mov.a %a5,%d11
8000c3e6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3ea:	6d 00 1c 0c 	call 8000dc22 <__ssprint_r>
8000c3ee:	df 02 08 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c3f2:	d9 af 10 20 	lea %a15,[%sp]144
8000c3f6:	58 11       	ld.w %d15,[%sp]68
8000c3f8:	7b 00 00 88 	movh %d8,32768
8000c3fc:	32 5f       	rsub %d15
8000c3fe:	1b 08 ea 80 	addi %d8,%d8,3744
8000c402:	3b 00 01 90 	mov %d9,16
8000c406:	bf 1f 3a 00 	jlt %d15,1,8000c47a <_svfprintf_r+0xe12>
8000c40a:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c40e:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c412:	8b 1f 81 42 	ge %d4,%d15,17
8000c416:	68 08       	st.w [%a15]0,%d8
8000c418:	df 04 1c 00 	jeq %d4,0,8000c450 <_svfprintf_r+0xde8>
8000c41c:	c2 13       	add %d3,1
8000c41e:	1b 05 01 40 	addi %d4,%d5,16
8000c422:	68 19       	st.w [%a15]4,%d9
8000c424:	59 a3 20 10 	st.w [%sp]96,%d3
8000c428:	59 a4 24 10 	st.w [%sp]100,%d4
8000c42c:	8b 83 80 32 	ge %d3,%d3,8
8000c430:	d9 ff 08 00 	lea %a15,[%a15]8
8000c434:	76 3b       	jz %d3,8000c44a <_svfprintf_r+0xde2>
8000c436:	60 c4       	mov.a %a4,%d12
8000c438:	60 b5       	mov.a %a5,%d11
8000c43a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c43e:	6d 00 f2 0b 	call 8000dc22 <__ssprint_r>
8000c442:	df 02 de 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c446:	d9 af 10 20 	lea %a15,[%sp]144
8000c44a:	1b 0f ff ff 	addi %d15,%d15,-16
8000c44e:	3c de       	j 8000c40a <_svfprintf_r+0xda2>
8000c450:	68 1f       	st.w [%a15]4,%d15
8000c452:	12 54       	add %d4,%d15,%d5
8000c454:	9a 13       	add %d15,%d3,1
8000c456:	78 18       	st.w [%sp]96,%d15
8000c458:	59 a4 24 10 	st.w [%sp]100,%d4
8000c45c:	8b 8f 80 f2 	ge %d15,%d15,8
8000c460:	d9 ff 08 00 	lea %a15,[%a15]8
8000c464:	6e 0b       	jz %d15,8000c47a <_svfprintf_r+0xe12>
8000c466:	60 c4       	mov.a %a4,%d12
8000c468:	60 b5       	mov.a %a5,%d11
8000c46a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c46e:	6d 00 da 0b 	call 8000dc22 <__ssprint_r>
8000c472:	df 02 c6 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c476:	d9 af 10 20 	lea %a15,[%sp]144
8000c47a:	58 05       	ld.w %d15,[%sp]20
8000c47c:	68 0d       	st.w [%a15]0,%d13
8000c47e:	68 1f       	st.w [%a15]4,%d15
8000c480:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c484:	58 19       	ld.w %d15,[%sp]100
8000c486:	1d 00 4d 01 	j 8000c720 <_svfprintf_r+0x10b8>
8000c48a:	58 05       	ld.w %d15,[%sp]20
8000c48c:	74 ed       	st.w [%a14],%d13
8000c48e:	3f f3 6a 00 	jlt %d3,%d15,8000c562 <_svfprintf_r+0xefa>
8000c492:	02 f9       	mov %d9,%d15
8000c494:	c2 18       	add %d8,1
8000c496:	42 e9       	add %d9,%d14
8000c498:	59 a8 20 10 	st.w [%sp]96,%d8
8000c49c:	6c e1       	st.w [%a14]4,%d15
8000c49e:	59 a9 24 10 	st.w [%sp]100,%d9
8000c4a2:	8b 88 80 82 	ge %d8,%d8,8
8000c4a6:	d9 ef 08 00 	lea %a15,[%a14]8
8000c4aa:	76 8b       	jz %d8,8000c4c0 <_svfprintf_r+0xe58>
8000c4ac:	60 c4       	mov.a %a4,%d12
8000c4ae:	60 b5       	mov.a %a5,%d11
8000c4b0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c4b4:	6d 00 b7 0b 	call 8000dc22 <__ssprint_r>
8000c4b8:	df 02 a3 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c4bc:	d9 af 10 20 	lea %a15,[%sp]144
8000c4c0:	58 11       	ld.w %d15,[%sp]68
8000c4c2:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c4c6:	7b 00 00 88 	movh %d8,32768
8000c4ca:	a2 2f       	sub %d15,%d2
8000c4cc:	1b 08 ea 80 	addi %d8,%d8,3744
8000c4d0:	3b 00 01 90 	mov %d9,16
8000c4d4:	bf 1f 3a 00 	jlt %d15,1,8000c548 <_svfprintf_r+0xee0>
8000c4d8:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c4dc:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c4e0:	8b 1f 81 42 	ge %d4,%d15,17
8000c4e4:	68 08       	st.w [%a15]0,%d8
8000c4e6:	df 04 1c 00 	jeq %d4,0,8000c51e <_svfprintf_r+0xeb6>
8000c4ea:	c2 13       	add %d3,1
8000c4ec:	1b 05 01 40 	addi %d4,%d5,16
8000c4f0:	68 19       	st.w [%a15]4,%d9
8000c4f2:	59 a3 20 10 	st.w [%sp]96,%d3
8000c4f6:	59 a4 24 10 	st.w [%sp]100,%d4
8000c4fa:	8b 83 80 32 	ge %d3,%d3,8
8000c4fe:	d9 ff 08 00 	lea %a15,[%a15]8
8000c502:	76 3b       	jz %d3,8000c518 <_svfprintf_r+0xeb0>
8000c504:	60 c4       	mov.a %a4,%d12
8000c506:	60 b5       	mov.a %a5,%d11
8000c508:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c50c:	6d 00 8b 0b 	call 8000dc22 <__ssprint_r>
8000c510:	df 02 77 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c514:	d9 af 10 20 	lea %a15,[%sp]144
8000c518:	1b 0f ff ff 	addi %d15,%d15,-16
8000c51c:	3c de       	j 8000c4d8 <_svfprintf_r+0xe70>
8000c51e:	68 1f       	st.w [%a15]4,%d15
8000c520:	12 54       	add %d4,%d15,%d5
8000c522:	9a 13       	add %d15,%d3,1
8000c524:	78 18       	st.w [%sp]96,%d15
8000c526:	59 a4 24 10 	st.w [%sp]100,%d4
8000c52a:	8b 8f 80 f2 	ge %d15,%d15,8
8000c52e:	d9 ff 08 00 	lea %a15,[%a15]8
8000c532:	6e 0b       	jz %d15,8000c548 <_svfprintf_r+0xee0>
8000c534:	60 c4       	mov.a %a4,%d12
8000c536:	60 b5       	mov.a %a5,%d11
8000c538:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c53c:	6d 00 73 0b 	call 8000dc22 <__ssprint_r>
8000c540:	df 02 5f 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c544:	d9 af 10 20 	lea %a15,[%sp]144
8000c548:	80 df       	mov.d %d15,%a13
8000c54a:	6f 0f f6 00 	jz.t %d15,0,8000c736 <_svfprintf_r+0x10ce>
8000c54e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c552:	58 08       	ld.w %d15,[%sp]32
8000c554:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c558:	68 1f       	st.w [%a15]4,%d15
8000c55a:	e8 03       	st.a [%a15]0,%a3
8000c55c:	58 19       	ld.w %d15,[%sp]100
8000c55e:	1d 00 e1 00 	j 8000c720 <_svfprintf_r+0x10b8>
8000c562:	c2 18       	add %d8,1
8000c564:	59 e3 04 00 	st.w [%a14]4,%d3
8000c568:	42 e3       	add %d3,%d14
8000c56a:	59 a8 20 10 	st.w [%sp]96,%d8
8000c56e:	59 a3 24 10 	st.w [%sp]100,%d3
8000c572:	8b 88 80 82 	ge %d8,%d8,8
8000c576:	d9 ef 08 00 	lea %a15,[%a14]8
8000c57a:	76 8b       	jz %d8,8000c590 <_svfprintf_r+0xf28>
8000c57c:	60 c4       	mov.a %a4,%d12
8000c57e:	60 b5       	mov.a %a5,%d11
8000c580:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c584:	6d 00 4f 0b 	call 8000dc22 <__ssprint_r>
8000c588:	df 02 3b 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c58c:	d9 af 10 20 	lea %a15,[%sp]144
8000c590:	58 08       	ld.w %d15,[%sp]32
8000c592:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c596:	68 1f       	st.w [%a15]4,%d15
8000c598:	58 19       	ld.w %d15,[%sp]100
8000c59a:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c59e:	42 2f       	add %d15,%d2
8000c5a0:	78 19       	st.w [%sp]100,%d15
8000c5a2:	58 18       	ld.w %d15,[%sp]96
8000c5a4:	99 ae 04 10 	ld.a %a14,[%sp]68
8000c5a8:	c2 1f       	add %d15,1
8000c5aa:	60 d2       	mov.a %a2,%d13
8000c5ac:	e8 03       	st.a [%a15]0,%a3
8000c5ae:	78 18       	st.w [%sp]96,%d15
8000c5b0:	8b 8f 80 f2 	ge %d15,%d15,8
8000c5b4:	30 2e       	add.a %a14,%a2
8000c5b6:	d9 ff 08 00 	lea %a15,[%a15]8
8000c5ba:	6e 0b       	jz %d15,8000c5d0 <_svfprintf_r+0xf68>
8000c5bc:	60 c4       	mov.a %a4,%d12
8000c5be:	60 b5       	mov.a %a5,%d11
8000c5c0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c5c4:	6d 00 2f 0b 	call 8000dc22 <__ssprint_r>
8000c5c8:	df 02 1b 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c5cc:	d9 af 10 20 	lea %a15,[%sp]144
8000c5d0:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c5d4:	58 11       	ld.w %d15,[%sp]68
8000c5d6:	e8 0e       	st.a [%a15]0,%a14
8000c5d8:	5a f2       	sub %d15,%d2,%d15
8000c5da:	68 1f       	st.w [%a15]4,%d15
8000c5dc:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c5e0:	1d 00 a0 00 	j 8000c720 <_svfprintf_r+0x10b8>
8000c5e4:	c2 18       	add %d8,1
8000c5e6:	82 13       	mov %d3,1
8000c5e8:	1b 1e 00 90 	addi %d9,%d14,1
8000c5ec:	58 05       	ld.w %d15,[%sp]20
8000c5ee:	59 a8 20 10 	st.w [%sp]96,%d8
8000c5f2:	74 ed       	st.w [%a14],%d13
8000c5f4:	59 e3 04 00 	st.w [%a14]4,%d3
8000c5f8:	59 a9 24 10 	st.w [%sp]100,%d9
8000c5fc:	8b 88 80 82 	ge %d8,%d8,8
8000c600:	ff 2f 05 00 	jge %d15,2,8000c60a <_svfprintf_r+0xfa2>
8000c604:	80 d2       	mov.d %d2,%a13
8000c606:	6f 02 81 00 	jz.t %d2,0,8000c708 <_svfprintf_r+0x10a0>
8000c60a:	d9 ef 08 00 	lea %a15,[%a14]8
8000c60e:	76 8b       	jz %d8,8000c624 <_svfprintf_r+0xfbc>
8000c610:	60 c4       	mov.a %a4,%d12
8000c612:	60 b5       	mov.a %a5,%d11
8000c614:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c618:	6d 00 05 0b 	call 8000dc22 <__ssprint_r>
8000c61c:	df 02 f1 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c620:	d9 af 10 20 	lea %a15,[%sp]144
8000c624:	58 08       	ld.w %d15,[%sp]32
8000c626:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c62a:	68 1f       	st.w [%a15]4,%d15
8000c62c:	58 19       	ld.w %d15,[%sp]100
8000c62e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c632:	42 2f       	add %d15,%d2
8000c634:	78 19       	st.w [%sp]100,%d15
8000c636:	58 18       	ld.w %d15,[%sp]96
8000c638:	e8 03       	st.a [%a15]0,%a3
8000c63a:	c2 1f       	add %d15,1
8000c63c:	78 18       	st.w [%sp]96,%d15
8000c63e:	8b 8f 80 f2 	ge %d15,%d15,8
8000c642:	d9 ff 08 00 	lea %a15,[%a15]8
8000c646:	6e 0b       	jz %d15,8000c65c <_svfprintf_r+0xff4>
8000c648:	60 c4       	mov.a %a4,%d12
8000c64a:	60 b5       	mov.a %a5,%d11
8000c64c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c650:	6d 00 e9 0a 	call 8000dc22 <__ssprint_r>
8000c654:	df 02 d5 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c658:	d9 af 10 20 	lea %a15,[%sp]144
8000c65c:	d2 06       	mov %e6,0
8000c65e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c662:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c666:	6d 00 03 0e 	call 8000e26c <__nedf2>
8000c66a:	58 05       	ld.w %d15,[%sp]20
8000c66c:	c2 ff       	add %d15,-1
8000c66e:	76 2c       	jz %d2,8000c686 <_svfprintf_r+0x101e>
8000c670:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c674:	60 de       	mov.a %a14,%d13
8000c676:	68 1f       	st.w [%a15]4,%d15
8000c678:	42 2f       	add %d15,%d2
8000c67a:	78 19       	st.w [%sp]100,%d15
8000c67c:	58 18       	ld.w %d15,[%sp]96
8000c67e:	b0 1e       	add.a %a14,1
8000c680:	e8 0e       	st.a [%a15]0,%a14
8000c682:	c2 1f       	add %d15,1
8000c684:	3c 31       	j 8000c6e6 <_svfprintf_r+0x107e>
8000c686:	7b 00 00 88 	movh %d8,32768
8000c68a:	1b 08 ea 80 	addi %d8,%d8,3744
8000c68e:	3b 00 01 90 	mov %d9,16
8000c692:	bf 1f 3f 00 	jlt %d15,1,8000c710 <_svfprintf_r+0x10a8>
8000c696:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c69a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c69e:	8b 1f 81 42 	ge %d4,%d15,17
8000c6a2:	68 08       	st.w [%a15]0,%d8
8000c6a4:	df 04 1c 00 	jeq %d4,0,8000c6dc <_svfprintf_r+0x1074>
8000c6a8:	c2 13       	add %d3,1
8000c6aa:	1b 05 01 40 	addi %d4,%d5,16
8000c6ae:	68 19       	st.w [%a15]4,%d9
8000c6b0:	59 a3 20 10 	st.w [%sp]96,%d3
8000c6b4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6b8:	8b 83 80 32 	ge %d3,%d3,8
8000c6bc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6c0:	76 3b       	jz %d3,8000c6d6 <_svfprintf_r+0x106e>
8000c6c2:	60 c4       	mov.a %a4,%d12
8000c6c4:	60 b5       	mov.a %a5,%d11
8000c6c6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6ca:	6d 00 ac 0a 	call 8000dc22 <__ssprint_r>
8000c6ce:	df 02 98 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c6d2:	d9 af 10 20 	lea %a15,[%sp]144
8000c6d6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c6da:	3c de       	j 8000c696 <_svfprintf_r+0x102e>
8000c6dc:	12 54       	add %d4,%d15,%d5
8000c6de:	68 1f       	st.w [%a15]4,%d15
8000c6e0:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6e4:	9a 13       	add %d15,%d3,1
8000c6e6:	78 18       	st.w [%sp]96,%d15
8000c6e8:	8b 8f 80 f2 	ge %d15,%d15,8
8000c6ec:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6f0:	6e 10       	jz %d15,8000c710 <_svfprintf_r+0x10a8>
8000c6f2:	60 c4       	mov.a %a4,%d12
8000c6f4:	60 b5       	mov.a %a5,%d11
8000c6f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6fa:	6d 00 94 0a 	call 8000dc22 <__ssprint_r>
8000c6fe:	df 02 80 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c702:	d9 af 10 20 	lea %a15,[%sp]144
8000c706:	3c 05       	j 8000c710 <_svfprintf_r+0x10a8>
8000c708:	df 08 f5 ff 	jne %d8,0,8000c6f2 <_svfprintf_r+0x108a>
8000c70c:	d9 ef 08 00 	lea %a15,[%a14]8
8000c710:	58 0e       	ld.w %d15,[%sp]56
8000c712:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c716:	68 1f       	st.w [%a15]4,%d15
8000c718:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c71c:	58 19       	ld.w %d15,[%sp]100
8000c71e:	e8 03       	st.a [%a15]0,%a3
8000c720:	42 2f       	add %d15,%d2
8000c722:	78 19       	st.w [%sp]100,%d15
8000c724:	58 18       	ld.w %d15,[%sp]96
8000c726:	c2 1f       	add %d15,1
8000c728:	78 18       	st.w [%sp]96,%d15
8000c72a:	8b 8f 80 f2 	ge %d15,%d15,8
8000c72e:	df 0f 8d fd 	jne %d15,0,8000c248 <_svfprintf_r+0xbe0>
8000c732:	d9 ff 08 00 	lea %a15,[%a15]8
8000c736:	80 df       	mov.d %d15,%a13
8000c738:	ae 2d       	jnz.t %d15,2,8000c752 <_svfprintf_r+0x10ea>
8000c73a:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c73e:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c742:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c746:	42 f2       	add %d2,%d15
8000c748:	58 19       	ld.w %d15,[%sp]100
8000c74a:	59 a2 28 00 	st.w [%sp]40,%d2
8000c74e:	6e 49       	jz %d15,8000c7e0 <_svfprintf_r+0x1178>
8000c750:	3c 40       	j 8000c7d0 <_svfprintf_r+0x1168>
8000c752:	58 07       	ld.w %d15,[%sp]28
8000c754:	3b 00 01 80 	mov %d8,16
8000c758:	a2 af       	sub %d15,%d10
8000c75a:	bf 1f f0 7f 	jlt %d15,1,8000c73a <_svfprintf_r+0x10d2>
8000c75e:	91 00 00 28 	movh.a %a2,32768
8000c762:	d9 22 f0 a0 	lea %a2,[%a2]3760 <80000eb0 <blanks.4035>>
8000c766:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000eb0 <blanks.4035>>
8000c76a:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000eb0 <blanks.4035>>
8000c76e:	8b 1f 81 42 	ge %d4,%d15,17
8000c772:	e8 02       	st.a [%a15]0,%a2
8000c774:	df 04 1c 00 	jeq %d4,0,8000c7ac <_svfprintf_r+0x1144>
8000c778:	c2 13       	add %d3,1
8000c77a:	1b 05 01 40 	addi %d4,%d5,16
8000c77e:	68 18       	st.w [%a15]4,%d8
8000c780:	59 a3 20 10 	st.w [%sp]96,%d3
8000c784:	59 a4 24 10 	st.w [%sp]100,%d4
8000c788:	8b 83 80 32 	ge %d3,%d3,8
8000c78c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c790:	76 3b       	jz %d3,8000c7a6 <_svfprintf_r+0x113e>
8000c792:	60 c4       	mov.a %a4,%d12
8000c794:	60 b5       	mov.a %a5,%d11
8000c796:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c79a:	6d 00 44 0a 	call 8000dc22 <__ssprint_r>
8000c79e:	df 02 30 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c7a2:	d9 af 10 20 	lea %a15,[%sp]144
8000c7a6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c7aa:	3c da       	j 8000c75e <_svfprintf_r+0x10f6>
8000c7ac:	12 54       	add %d4,%d15,%d5
8000c7ae:	68 1f       	st.w [%a15]4,%d15
8000c7b0:	9a 13       	add %d15,%d3,1
8000c7b2:	78 18       	st.w [%sp]96,%d15
8000c7b4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c7b8:	8b 8f 40 f2 	lt %d15,%d15,8
8000c7bc:	ee bf       	jnz %d15,8000c73a <_svfprintf_r+0x10d2>
8000c7be:	60 c4       	mov.a %a4,%d12
8000c7c0:	60 b5       	mov.a %a5,%d11
8000c7c2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7c6:	6d 00 2e 0a 	call 8000dc22 <__ssprint_r>
8000c7ca:	df 02 b8 7f 	jeq %d2,0,8000c73a <_svfprintf_r+0x10d2>
8000c7ce:	3c 18       	j 8000c7fe <_svfprintf_r+0x1196>
8000c7d0:	60 c4       	mov.a %a4,%d12
8000c7d2:	60 b5       	mov.a %a5,%d11
8000c7d4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7d8:	6d 00 25 0a 	call 8000dc22 <__ssprint_r>
8000c7dc:	df 02 11 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c7e0:	82 0f       	mov %d15,0
8000c7e2:	78 18       	st.w [%sp]96,%d15
8000c7e4:	40 cf       	mov.aa %a15,%a12
8000c7e6:	d9 ae 10 20 	lea %a14,[%sp]144
8000c7ea:	1d ff 77 f7 	j 8000b6d8 <_svfprintf_r+0x70>
8000c7ee:	58 19       	ld.w %d15,[%sp]100
8000c7f0:	6e 07       	jz %d15,8000c7fe <_svfprintf_r+0x1196>
8000c7f2:	60 c4       	mov.a %a4,%d12
8000c7f4:	60 b5       	mov.a %a5,%d11
8000c7f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7fa:	6d 00 14 0a 	call 8000dc22 <__ssprint_r>
8000c7fe:	60 b3       	mov.a %a3,%d11
8000c800:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c804:	8c 36       	ld.h %d15,[%a3]12
8000c806:	16 40       	and %d15,64
8000c808:	aa f2       	cmov %d2,%d15,-1
8000c80a:	00 90       	ret 

8000c80c <quorem>:
8000c80c:	19 58 10 00 	ld.w %d8,[%a5]16
8000c810:	4c 44       	ld.w %d15,[%a4]16
8000c812:	82 02       	mov %d2,0
8000c814:	3f 8f 88 00 	jlt %d15,%d8,8000c924 <quorem+0x118>
8000c818:	c2 f8       	add %d8,-1
8000c81a:	80 4f       	mov.d %d15,%a4
8000c81c:	8f 28 00 20 	sh %d2,%d8,2
8000c820:	60 2f       	mov.a %a15,%d2
8000c822:	1b 4f 01 90 	addi %d9,%d15,20
8000c826:	d9 5c 14 00 	lea %a12,[%a5]20
8000c82a:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000c82e:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000c832:	54 dc       	ld.w %d12,[%a13]
8000c834:	4c f0       	ld.w %d15,[%a15]0
8000c836:	c2 1c       	add %d12,1
8000c838:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000c83c:	02 ca       	mov %d10,%d12
8000c83e:	df 0c 3d 00 	jeq %d12,0,8000c8b8 <quorem+0xac>
8000c842:	60 96       	mov.a %a6,%d9
8000c844:	40 c2       	mov.aa %a2,%a12
8000c846:	82 05       	mov %d5,0
8000c848:	82 06       	mov %d6,0
8000c84a:	54 22       	ld.w %d2,[%a2]
8000c84c:	40 63       	mov.aa %a3,%a6
8000c84e:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c852:	8f 02 1f 20 	sh %d2,%d2,-16
8000c856:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000c85a:	b0 42       	add.a %a2,4
8000c85c:	8f 03 1f 40 	sh %d4,%d3,-16
8000c860:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000c864:	44 34       	ld.w %d4,[%a3+]
8000c866:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000c86a:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000c86e:	8f 02 1f 50 	sh %d5,%d2,-16
8000c872:	42 f6       	add %d6,%d15
8000c874:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000c878:	0b 36 80 30 	sub %d3,%d6,%d3
8000c87c:	8f 04 1f 40 	sh %d4,%d4,-16
8000c880:	8f 03 3f f0 	sha %d15,%d3,-16
8000c884:	0b 24 80 20 	sub %d2,%d4,%d2
8000c888:	42 f2       	add %d2,%d15
8000c88a:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000c88e:	8f 02 3f 60 	sha %d6,%d2,-16
8000c892:	80 2f       	mov.d %d15,%a2
8000c894:	80 d2       	mov.d %d2,%a13
8000c896:	74 63       	st.w [%a6],%d3
8000c898:	40 36       	mov.aa %a6,%a3
8000c89a:	7f f2 d8 ff 	jge.u %d2,%d15,8000c84a <quorem+0x3e>
8000c89e:	4c f0       	ld.w %d15,[%a15]0
8000c8a0:	ee 0c       	jnz %d15,8000c8b8 <quorem+0xac>
8000c8a2:	b0 cf       	add.a %a15,-4
8000c8a4:	80 f2       	mov.d %d2,%a15
8000c8a6:	3f 29 05 80 	jlt.u %d9,%d2,8000c8b0 <quorem+0xa4>
8000c8aa:	59 48 10 00 	st.w [%a4]16,%d8
8000c8ae:	3c 05       	j 8000c8b8 <quorem+0xac>
8000c8b0:	4c f0       	ld.w %d15,[%a15]0
8000c8b2:	ee fc       	jnz %d15,8000c8aa <quorem+0x9e>
8000c8b4:	c2 f8       	add %d8,-1
8000c8b6:	3c f6       	j 8000c8a2 <quorem+0x96>
8000c8b8:	40 4e       	mov.aa %a14,%a4
8000c8ba:	6d 00 b9 08 	call 8000da2c <__mcmp>
8000c8be:	bf 02 32 00 	jlt %d2,0,8000c922 <quorem+0x116>
8000c8c2:	60 92       	mov.a %a2,%d9
8000c8c4:	1b 1c 00 a0 	addi %d10,%d12,1
8000c8c8:	82 04       	mov %d4,0
8000c8ca:	40 2f       	mov.aa %a15,%a2
8000c8cc:	44 f3       	ld.w %d3,[%a15+]
8000c8ce:	54 c5       	ld.w %d5,[%a12]
8000c8d0:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000c8d4:	8f 05 1f f0 	sh %d15,%d5,-16
8000c8d8:	42 42       	add %d2,%d4
8000c8da:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000c8de:	8f 03 1f 30 	sh %d3,%d3,-16
8000c8e2:	a2 42       	sub %d2,%d4
8000c8e4:	8f 02 3f 40 	sha %d4,%d2,-16
8000c8e8:	a2 f3       	sub %d3,%d15
8000c8ea:	42 43       	add %d3,%d4
8000c8ec:	8f 03 3f 40 	sha %d4,%d3,-16
8000c8f0:	b0 4c       	add.a %a12,4
8000c8f2:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000c8f6:	80 df       	mov.d %d15,%a13
8000c8f8:	80 c2       	mov.d %d2,%a12
8000c8fa:	74 23       	st.w [%a2],%d3
8000c8fc:	40 f2       	mov.aa %a2,%a15
8000c8fe:	7f 2f e6 ff 	jge.u %d15,%d2,8000c8ca <quorem+0xbe>
8000c902:	60 92       	mov.a %a2,%d9
8000c904:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000c908:	4c f0       	ld.w %d15,[%a15]0
8000c90a:	ee 0c       	jnz %d15,8000c922 <quorem+0x116>
8000c90c:	b0 cf       	add.a %a15,-4
8000c90e:	80 f2       	mov.d %d2,%a15
8000c910:	3f 29 05 80 	jlt.u %d9,%d2,8000c91a <quorem+0x10e>
8000c914:	59 e8 10 00 	st.w [%a14]16,%d8
8000c918:	3c 05       	j 8000c922 <quorem+0x116>
8000c91a:	4c f0       	ld.w %d15,[%a15]0
8000c91c:	ee fc       	jnz %d15,8000c914 <quorem+0x108>
8000c91e:	c2 f8       	add %d8,-1
8000c920:	3c f6       	j 8000c90c <quorem+0x100>
8000c922:	02 a2       	mov %d2,%d10
8000c924:	00 90       	ret 
	...

8000c928 <_dtoa_r>:
8000c928:	20 58       	sub.a %sp,88
8000c92a:	b5 a5 08 10 	st.a [%sp]72,%a5
8000c92e:	99 45 00 10 	ld.a %a5,[%a4]64
8000c932:	59 a6 1c 00 	st.w [%sp]28,%d6
8000c936:	59 a7 28 00 	st.w [%sp]40,%d7
8000c93a:	b5 a7 38 00 	st.a [%sp]56,%a7
8000c93e:	40 4d       	mov.aa %a13,%a4
8000c940:	0b 45 10 88 	mov %e8,%d5,%d4
8000c944:	40 6c       	mov.aa %a12,%a6
8000c946:	0b 45 10 c8 	mov %e12,%d5,%d4
8000c94a:	bc 5e       	jz.a %a5,8000c966 <_dtoa_r+0x3e>
8000c94c:	19 4f 04 10 	ld.w %d15,[%a4]68
8000c950:	82 12       	mov %d2,1
8000c952:	0f f2 00 20 	sh %d2,%d2,%d15
8000c956:	6c 51       	st.w [%a5]4,%d15
8000c958:	59 52 08 00 	st.w [%a5]8,%d2
8000c95c:	82 0f       	mov %d15,0
8000c95e:	6d 00 99 06 	call 8000d690 <_Bfree>
8000c962:	59 df 00 10 	st.w [%a13]64,%d15
8000c966:	ce 96       	jgez %d9,8000c972 <_dtoa_r+0x4a>
8000c968:	82 1f       	mov %d15,1
8000c96a:	6c c0       	st.w [%a12]0,%d15
8000c96c:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000c970:	3c 03       	j 8000c976 <_dtoa_r+0x4e>
8000c972:	82 0f       	mov %d15,0
8000c974:	6c c0       	st.w [%a12]0,%d15
8000c976:	7b 00 ff 27 	movh %d2,32752
8000c97a:	26 d2       	and %d2,%d13
8000c97c:	7b 00 ff 37 	movh %d3,32752
8000c980:	5f 32 22 80 	jne %d2,%d3,8000c9c4 <_dtoa_r+0x9c>
8000c984:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c988:	3b f0 70 22 	mov %d2,9999
8000c98c:	91 00 00 f8 	movh.a %a15,32768
8000c990:	74 32       	st.w [%a3],%d2
8000c992:	d9 ff c9 b0 	lea %a15,[%a15]3785 <80000ec9 <blanks.4035+0x19>>
8000c996:	f6 c8       	jnz %d12,8000c9a6 <_dtoa_r+0x7e>
8000c998:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000c99c:	ee 05       	jnz %d15,8000c9a6 <_dtoa_r+0x7e>
8000c99e:	91 00 00 f8 	movh.a %a15,32768
8000c9a2:	d9 ff c0 b0 	lea %a15,[%a15]3776 <80000ec0 <blanks.4035+0x10>>
8000c9a6:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000ec0 <blanks.4035+0x10>>
8000c9aa:	40 f2       	mov.aa %a2,%a15
8000c9ac:	bd 03 26 06 	jz.a %a3,8000d5f8 <_dtoa_r+0xcd0>
8000c9b0:	80 ff       	mov.d %d15,%a15
8000c9b2:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000c9b6:	1b 8f 00 20 	addi %d2,%d15,8
8000c9ba:	c2 3f       	add %d15,3
8000c9bc:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000c9c0:	6c 30       	st.w [%a3]0,%d15
8000c9c2:	00 90       	ret 
8000c9c4:	0b cd 10 48 	mov %e4,%d13,%d12
8000c9c8:	d2 06       	mov %e6,0
8000c9ca:	0b cd 10 88 	mov %e8,%d13,%d12
8000c9ce:	6d 00 2f 0c 	call 8000e22c <__eqdf2>
8000c9d2:	df 02 13 80 	jne %d2,0,8000c9f8 <_dtoa_r+0xd0>
8000c9d6:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c9da:	d8 0e       	ld.a %a15,[%sp]56
8000c9dc:	82 1f       	mov %d15,1
8000c9de:	91 00 00 28 	movh.a %a2,32768
8000c9e2:	6c 30       	st.w [%a3]0,%d15
8000c9e4:	d9 22 cd b0 	lea %a2,[%a2]3789 <80000ecd <blanks.4035+0x1d>>
8000c9e8:	bd 0f 08 06 	jz.a %a15,8000d5f8 <_dtoa_r+0xcd0>
8000c9ec:	7b 00 00 f8 	movh %d15,32768
8000c9f0:	1b ef ec f0 	addi %d15,%d15,3790
8000c9f4:	68 0f       	st.w [%a15]0,%d15
8000c9f6:	00 90       	ret 
8000c9f8:	0b cd 10 48 	mov %e4,%d13,%d12
8000c9fc:	40 d4       	mov.aa %a4,%a13
8000c9fe:	d9 a5 14 10 	lea %a5,[%sp]84
8000ca02:	d9 a6 10 10 	lea %a6,[%sp]80
8000ca06:	6d 00 99 08 	call 8000db38 <__d2b>
8000ca0a:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000ca0e:	40 2e       	mov.aa %a14,%a2
8000ca10:	19 aa 10 10 	ld.w %d10,[%sp]80
8000ca14:	76 bd       	jz %d11,8000ca2e <_dtoa_r+0x106>
8000ca16:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000ca1a:	0b cd 10 48 	mov %e4,%d13,%d12
8000ca1e:	7b 00 ff 23 	movh %d2,16368
8000ca22:	0f 2f a0 50 	or %d5,%d15,%d2
8000ca26:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000ca2a:	82 0f       	mov %d15,0
8000ca2c:	3c 22       	j 8000ca70 <_dtoa_r+0x148>
8000ca2e:	19 ab 14 10 	ld.w %d11,[%sp]84
8000ca32:	3b e0 be 4f 	mov %d4,-1042
8000ca36:	42 ab       	add %d11,%d10
8000ca38:	a2 b4       	sub %d4,%d11
8000ca3a:	3b f0 be 2f 	mov %d2,-1041
8000ca3e:	0f 4c 00 40 	sh %d4,%d12,%d4
8000ca42:	3f 2b 0f 00 	jlt %d11,%d2,8000ca60 <_dtoa_r+0x138>
8000ca46:	1b 2b 41 30 	addi %d3,%d11,1042
8000ca4a:	3b e0 c0 4f 	mov %d4,-1010
8000ca4e:	a2 b4       	sub %d4,%d11
8000ca50:	8b 03 00 21 	rsub %d2,%d3,0
8000ca54:	0f 2c 00 20 	sh %d2,%d12,%d2
8000ca58:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000ca5c:	0f f2 a0 40 	or %d4,%d2,%d15
8000ca60:	6d ff 7c f0 	call 8000ab58 <__floatunsidf>
8000ca64:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca68:	9b 03 e1 5f 	addih %d5,%d3,65040
8000ca6c:	c2 fb       	add %d11,-1
8000ca6e:	82 1f       	mov %d15,1
8000ca70:	b7 00 ab 69 	imask %e6,0,19,11
8000ca74:	78 13       	st.w [%sp]76,%d15
8000ca76:	6d ff a2 ee 	call 8000a7ba <__subdf3>
8000ca7a:	7b 30 fd 73 	movh %d7,16339
8000ca7e:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca82:	7b f0 36 66 	movh %d6,25455
8000ca86:	1b 77 7a 78 	addi %d7,%d7,-30809
8000ca8a:	1b 16 36 64 	addi %d6,%d6,17249
8000ca8e:	6d ff b6 ee 	call 8000a7fa <__muldf3>
8000ca92:	7b 70 fc 73 	movh %d7,16327
8000ca96:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca9a:	7b 10 b6 68 	movh %d6,35681
8000ca9e:	1b 87 a2 78 	addi %d7,%d7,-30168
8000caa2:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000caa6:	6d ff 6e ee 	call 8000a782 <__adddf3>
8000caaa:	02 b4       	mov %d4,%d11
8000caac:	0b 23 10 88 	mov %e8,%d3,%d2
8000cab0:	6d ff 03 f0 	call 8000aab6 <__floatsidf>
8000cab4:	7b 30 fd 73 	movh %d7,16339
8000cab8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cabc:	7b f0 09 65 	movh %d6,20639
8000cac0:	1b 37 41 74 	addi %d7,%d7,17427
8000cac4:	1b b6 9f 67 	addi %d6,%d6,31227
8000cac8:	6d ff 99 ee 	call 8000a7fa <__muldf3>
8000cacc:	0b 89 10 48 	mov %e4,%d9,%d8
8000cad0:	0b 23 10 68 	mov %e6,%d3,%d2
8000cad4:	6d ff 57 ee 	call 8000a782 <__adddf3>
8000cad8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cadc:	0b 23 10 88 	mov %e8,%d3,%d2
8000cae0:	6d 00 46 0c 	call 8000e36c <__fixdfsi>
8000cae4:	0b 89 10 48 	mov %e4,%d9,%d8
8000cae8:	d2 06       	mov %e6,0
8000caea:	59 a2 08 00 	st.w [%sp]8,%d2
8000caee:	6d 00 1f 0c 	call 8000e32c <__ltdf2>
8000caf2:	ff 02 12 00 	jge %d2,0,8000cb16 <_dtoa_r+0x1ee>
8000caf6:	19 a4 08 00 	ld.w %d4,[%sp]8
8000cafa:	6d ff de ef 	call 8000aab6 <__floatsidf>
8000cafe:	0b 89 10 48 	mov %e4,%d9,%d8
8000cb02:	0b 23 10 68 	mov %e6,%d3,%d2
8000cb06:	6d 00 b3 0b 	call 8000e26c <__nedf2>
8000cb0a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cb0e:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000cb12:	59 a3 08 00 	st.w [%sp]8,%d3
8000cb16:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cb1a:	82 13       	mov %d3,1
8000cb1c:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000cb20:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cb24:	ee 18       	jnz %d15,8000cb54 <_dtoa_r+0x22c>
8000cb26:	91 00 00 f8 	movh.a %a15,32768
8000cb2a:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000cb2e:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000cb32:	0b cd 10 68 	mov %e6,%d13,%d12
8000cb36:	09 f4 40 09 	ld.d %e4,[%a15]
8000cb3a:	6d 00 b9 0b 	call 8000e2ac <__gtdf2>
8000cb3e:	8e 28       	jlez %d2,8000cb4e <_dtoa_r+0x226>
8000cb40:	58 02       	ld.w %d15,[%sp]8
8000cb42:	82 02       	mov %d2,0
8000cb44:	c2 ff       	add %d15,-1
8000cb46:	78 02       	st.w [%sp]8,%d15
8000cb48:	59 a2 3c 00 	st.w [%sp]60,%d2
8000cb4c:	3c 04       	j 8000cb54 <_dtoa_r+0x22c>
8000cb4e:	82 03       	mov %d3,0
8000cb50:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cb54:	0b ba 80 b0 	sub %d11,%d10,%d11
8000cb58:	9a fb       	add %d15,%d11,-1
8000cb5a:	82 02       	mov %d2,0
8000cb5c:	78 06       	st.w [%sp]24,%d15
8000cb5e:	59 a2 14 00 	st.w [%sp]20,%d2
8000cb62:	ce f6       	jgez %d15,8000cb6e <_dtoa_r+0x246>
8000cb64:	32 5f       	rsub %d15
8000cb66:	82 03       	mov %d3,0
8000cb68:	78 05       	st.w [%sp]20,%d15
8000cb6a:	59 a3 18 00 	st.w [%sp]24,%d3
8000cb6e:	58 02       	ld.w %d15,[%sp]8
8000cb70:	0e fa       	jltz %d15,8000cb84 <_dtoa_r+0x25c>
8000cb72:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cb76:	78 0d       	st.w [%sp]52,%d15
8000cb78:	42 f2       	add %d2,%d15
8000cb7a:	82 0f       	mov %d15,0
8000cb7c:	59 a2 18 00 	st.w [%sp]24,%d2
8000cb80:	78 08       	st.w [%sp]32,%d15
8000cb82:	3c 0d       	j 8000cb9c <_dtoa_r+0x274>
8000cb84:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cb88:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cb8c:	82 0f       	mov %d15,0
8000cb8e:	a2 32       	sub %d2,%d3
8000cb90:	32 53       	rsub %d3
8000cb92:	59 a2 14 00 	st.w [%sp]20,%d2
8000cb96:	59 a3 20 00 	st.w [%sp]32,%d3
8000cb9a:	78 0d       	st.w [%sp]52,%d15
8000cb9c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cba0:	82 18       	mov %d8,1
8000cba2:	ff a2 46 80 	jge.u %d2,10,8000cc2e <_dtoa_r+0x306>
8000cba6:	bf 62 06 00 	jlt %d2,6,8000cbb2 <_dtoa_r+0x28a>
8000cbaa:	c2 c2       	add %d2,-4
8000cbac:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cbb0:	82 08       	mov %d8,0
8000cbb2:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000cbb6:	c2 e3       	add %d3,-2
8000cbb8:	ff 43 4b 80 	jge.u %d3,4,8000cc4e <_dtoa_r+0x326>
8000cbbc:	91 10 00 f8 	movh.a %a15,32769
8000cbc0:	d9 ff 8c fc 	lea %a15,[%a15]-13364 <8000cbcc <_dtoa_r+0x2a4>>
8000cbc4:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000cbc8:	dc 0f       	ji %a15
8000cbca:	00 00       	nop 
8000cbcc:	1d 00 08 00 	j 8000cbdc <_dtoa_r+0x2b4>
8000cbd0:	1d 00 1c 00 	j 8000cc08 <_dtoa_r+0x2e0>
8000cbd4:	1d 00 08 00 	j 8000cbe4 <_dtoa_r+0x2bc>
8000cbd8:	1d 00 1c 00 	j 8000cc10 <_dtoa_r+0x2e8>
8000cbdc:	82 03       	mov %d3,0
8000cbde:	59 a3 24 00 	st.w [%sp]36,%d3
8000cbe2:	3c 03       	j 8000cbe8 <_dtoa_r+0x2c0>
8000cbe4:	82 1f       	mov %d15,1
8000cbe6:	78 09       	st.w [%sp]36,%d15
8000cbe8:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cbec:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cbf0:	59 a2 10 00 	st.w [%sp]16,%d2
8000cbf4:	02 23       	mov %d3,%d2
8000cbf6:	ff 12 38 00 	jge %d2,1,8000cc66 <_dtoa_r+0x33e>
8000cbfa:	82 13       	mov %d3,1
8000cbfc:	82 1f       	mov %d15,1
8000cbfe:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cc02:	78 04       	st.w [%sp]16,%d15
8000cc04:	82 12       	mov %d2,1
8000cc06:	3c 21       	j 8000cc48 <_dtoa_r+0x320>
8000cc08:	82 03       	mov %d3,0
8000cc0a:	59 a3 24 00 	st.w [%sp]36,%d3
8000cc0e:	3c 03       	j 8000cc14 <_dtoa_r+0x2ec>
8000cc10:	82 1f       	mov %d15,1
8000cc12:	78 09       	st.w [%sp]36,%d15
8000cc14:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cc18:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cc1c:	42 32       	add %d2,%d3
8000cc1e:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cc22:	c2 12       	add %d2,1
8000cc24:	59 a2 10 00 	st.w [%sp]16,%d2
8000cc28:	8b 12 40 33 	max %d3,%d2,1
8000cc2c:	3c 1d       	j 8000cc66 <_dtoa_r+0x33e>
8000cc2e:	82 0f       	mov %d15,0
8000cc30:	82 12       	mov %d2,1
8000cc32:	82 f3       	mov %d3,-1
8000cc34:	78 07       	st.w [%sp]28,%d15
8000cc36:	82 ff       	mov %d15,-1
8000cc38:	59 a2 24 00 	st.w [%sp]36,%d2
8000cc3c:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cc40:	78 04       	st.w [%sp]16,%d15
8000cc42:	3b 20 01 30 	mov %d3,18
8000cc46:	82 02       	mov %d2,0
8000cc48:	59 a2 28 00 	st.w [%sp]40,%d2
8000cc4c:	3c 0d       	j 8000cc66 <_dtoa_r+0x33e>
8000cc4e:	82 ff       	mov %d15,-1
8000cc50:	82 13       	mov %d3,1
8000cc52:	78 0b       	st.w [%sp]44,%d15
8000cc54:	82 f2       	mov %d2,-1
8000cc56:	82 0f       	mov %d15,0
8000cc58:	59 a3 24 00 	st.w [%sp]36,%d3
8000cc5c:	59 a2 10 00 	st.w [%sp]16,%d2
8000cc60:	3b 20 01 30 	mov %d3,18
8000cc64:	78 0a       	st.w [%sp]40,%d15
8000cc66:	82 05       	mov %d5,0
8000cc68:	59 d5 04 10 	st.w [%a13]68,%d5
8000cc6c:	82 45       	mov %d5,4
8000cc6e:	1b 45 01 00 	addi %d0,%d5,20
8000cc72:	3f 03 09 80 	jlt.u %d3,%d0,8000cc84 <_dtoa_r+0x35c>
8000cc76:	19 d0 04 10 	ld.w %d0,[%a13]68
8000cc7a:	06 15       	sh %d5,1
8000cc7c:	c2 10       	add %d0,1
8000cc7e:	59 d0 04 10 	st.w [%a13]68,%d0
8000cc82:	3c f6       	j 8000cc6e <_dtoa_r+0x346>
8000cc84:	40 d4       	mov.aa %a4,%a13
8000cc86:	19 d4 04 10 	ld.w %d4,[%a13]68
8000cc8a:	6d 00 d8 04 	call 8000d63a <_Balloc>
8000cc8e:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cc92:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000cc96:	8b f2 60 32 	lt.u %d3,%d2,15
8000cc9a:	b5 d2 00 10 	st.a [%a13]64,%a2
8000cc9e:	26 38       	and %d8,%d3
8000cca0:	df 08 97 01 	jeq %d8,0,8000cfce <_dtoa_r+0x6a6>
8000cca4:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cca8:	89 ac 40 19 	st.d [%sp]64,%e12
8000ccac:	bf 13 3f 00 	jlt %d3,1,8000cd2a <_dtoa_r+0x402>
8000ccb0:	91 00 00 f8 	movh.a %a15,32768
8000ccb4:	8f f3 00 31 	and %d3,%d3,15
8000ccb8:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000ccbc:	19 ae 08 00 	ld.w %d14,[%sp]8 <80000f70 <__mprec_tens>>
8000ccc0:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000ccc4:	86 ce       	sha %d14,-4
8000ccc6:	09 f8 40 09 	ld.d %e8,[%a15]
8000ccca:	82 2a       	mov %d10,2
8000cccc:	6f 4e 11 00 	jz.t %d14,4,8000ccee <_dtoa_r+0x3c6>
8000ccd0:	91 00 00 f8 	movh.a %a15,32768
8000ccd4:	0b cd 10 48 	mov %e4,%d13,%d12
8000ccd8:	d9 ff c8 d0 	lea %a15,[%a15]3912 <80000f48 <__mprec_bigtens>>
8000ccdc:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000cce0:	6d ff 5f ee 	call 8000a99e <__divdf3>
8000cce4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cce8:	8f fe 00 e1 	and %d14,%d14,15
8000ccec:	82 3a       	mov %d10,3
8000ccee:	7b 00 00 b8 	movh %d11,32768
8000ccf2:	82 0f       	mov %d15,0
8000ccf4:	1b 8b f4 b0 	addi %d11,%d11,3912
8000ccf8:	df 0e 12 00 	jeq %d14,0,8000cd1c <_dtoa_r+0x3f4>
8000ccfc:	6f 0e 0d 00 	jz.t %d14,0,8000cd16 <_dtoa_r+0x3ee>
8000cd00:	60 b2       	mov.a %a2,%d11
8000cd02:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000cd04:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd08:	09 f6 40 09 	ld.d %e6,[%a15]
8000cd0c:	6d ff 77 ed 	call 8000a7fa <__muldf3>
8000cd10:	0b 23 10 88 	mov %e8,%d3,%d2
8000cd14:	c2 1a       	add %d10,1
8000cd16:	86 fe       	sha %d14,-1
8000cd18:	c2 1f       	add %d15,1
8000cd1a:	3c ef       	j 8000ccf8 <_dtoa_r+0x3d0>
8000cd1c:	0b cd 10 48 	mov %e4,%d13,%d12
8000cd20:	0b 89 10 68 	mov %e6,%d9,%d8
8000cd24:	6d ff 3d ee 	call 8000a99e <__divdf3>
8000cd28:	3c 2c       	j 8000cd80 <_dtoa_r+0x458>
8000cd2a:	19 a8 08 00 	ld.w %d8,[%sp]8
8000cd2e:	82 2a       	mov %d10,2
8000cd30:	32 58       	rsub %d8
8000cd32:	df 08 29 00 	jeq %d8,0,8000cd84 <_dtoa_r+0x45c>
8000cd36:	91 00 00 f8 	movh.a %a15,32768
8000cd3a:	8f f8 00 31 	and %d3,%d8,15
8000cd3e:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000cd42:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000cd46:	09 a4 40 19 	ld.d %e4,[%sp]64
8000cd4a:	09 f6 40 09 	ld.d %e6,[%a15]
8000cd4e:	7b 00 00 c8 	movh %d12,32768
8000cd52:	6d ff 54 ed 	call 8000a7fa <__muldf3>
8000cd56:	82 09       	mov %d9,0
8000cd58:	86 c8       	sha %d8,-4
8000cd5a:	1b 8c f4 c0 	addi %d12,%d12,3912
8000cd5e:	df 08 11 00 	jeq %d8,0,8000cd80 <_dtoa_r+0x458>
8000cd62:	6f 08 0c 00 	jz.t %d8,0,8000cd7a <_dtoa_r+0x452>
8000cd66:	60 c3       	mov.a %a3,%d12
8000cd68:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000cd6c:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd70:	09 f6 40 09 	ld.d %e6,[%a15]
8000cd74:	c2 1a       	add %d10,1
8000cd76:	6d ff 42 ed 	call 8000a7fa <__muldf3>
8000cd7a:	86 f8       	sha %d8,-1
8000cd7c:	c2 19       	add %d9,1
8000cd7e:	3c f0       	j 8000cd5e <_dtoa_r+0x436>
8000cd80:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cd84:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000cd88:	df 02 23 00 	jeq %d2,0,8000cdce <_dtoa_r+0x4a6>
8000cd8c:	0b cd 10 48 	mov %e4,%d13,%d12
8000cd90:	b7 00 2a 6a 	imask %e6,0,20,10
8000cd94:	6d 00 cc 0a 	call 8000e32c <__ltdf2>
8000cd98:	ff 02 20 00 	jge %d2,0,8000cdd8 <_dtoa_r+0x4b0>
8000cd9c:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cda0:	df 03 21 00 	jeq %d3,0,8000cde2 <_dtoa_r+0x4ba>
8000cda4:	58 0b       	ld.w %d15,[%sp]44
8000cda6:	bf 1f 12 01 	jlt %d15,1,8000cfca <_dtoa_r+0x6a2>
8000cdaa:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cdae:	0b cd 10 48 	mov %e4,%d13,%d12
8000cdb2:	c2 f2       	add %d2,-1
8000cdb4:	82 06       	mov %d6,0
8000cdb6:	7b 40 02 74 	movh %d7,16420
8000cdba:	59 a2 30 00 	st.w [%sp]48,%d2
8000cdbe:	6d ff 1e ed 	call 8000a7fa <__muldf3>
8000cdc2:	c2 1a       	add %d10,1
8000cdc4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cdc8:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000cdcc:	3c 10       	j 8000cdec <_dtoa_r+0x4c4>
8000cdce:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cdd2:	59 a3 30 00 	st.w [%sp]48,%d3
8000cdd6:	3c 03       	j 8000cddc <_dtoa_r+0x4b4>
8000cdd8:	58 02       	ld.w %d15,[%sp]8
8000cdda:	78 0c       	st.w [%sp]48,%d15
8000cddc:	99 ac 10 00 	ld.a %a12,[%sp]16
8000cde0:	3c 06       	j 8000cdec <_dtoa_r+0x4c4>
8000cde2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cde6:	a0 0c       	mov.a %a12,0
8000cde8:	59 a2 30 00 	st.w [%sp]48,%d2
8000cdec:	02 a4       	mov %d4,%d10
8000cdee:	6d ff 64 ee 	call 8000aab6 <__floatsidf>
8000cdf2:	0b cd 10 68 	mov %e6,%d13,%d12
8000cdf6:	0b 23 10 48 	mov %e4,%d3,%d2
8000cdfa:	6d ff 00 ed 	call 8000a7fa <__muldf3>
8000cdfe:	0b 23 10 48 	mov %e4,%d3,%d2
8000ce02:	82 06       	mov %d6,0
8000ce04:	7b c0 01 74 	movh %d7,16412
8000ce08:	6d ff bd ec 	call 8000a782 <__adddf3>
8000ce0c:	0b 23 10 a8 	mov %e10,%d3,%d2
8000ce10:	0b 23 10 e8 	mov %e14,%d3,%d2
8000ce14:	60 b2       	mov.a %a2,%d11
8000ce16:	11 02 cc ff 	addih.a %a15,%a2,64704
8000ce1a:	80 ff       	mov.d %d15,%a15
8000ce1c:	bd 0c 1e 80 	jnz.a %a12,8000ce58 <_dtoa_r+0x530>
8000ce20:	0b cd 10 48 	mov %e4,%d13,%d12
8000ce24:	82 06       	mov %d6,0
8000ce26:	7b 40 01 74 	movh %d7,16404
8000ce2a:	6d ff c8 ec 	call 8000a7ba <__subdf3>
8000ce2e:	80 f7       	mov.d %d7,%a15
8000ce30:	0b 23 10 48 	mov %e4,%d3,%d2
8000ce34:	02 e6       	mov %d6,%d14
8000ce36:	0b 23 10 88 	mov %e8,%d3,%d2
8000ce3a:	6d 00 39 0a 	call 8000e2ac <__gtdf2>
8000ce3e:	ff 12 8e 02 	jge %d2,1,8000d35a <_dtoa_r+0xa32>
8000ce42:	0b 89 10 48 	mov %e4,%d9,%d8
8000ce46:	02 e6       	mov %d6,%d14
8000ce48:	9b 0b cc 77 	addih %d7,%d11,31936
8000ce4c:	6d 00 70 0a 	call 8000e32c <__ltdf2>
8000ce50:	bf 02 7d 02 	jlt %d2,0,8000d34a <_dtoa_r+0xa22>
8000ce54:	1d 00 bb 00 	j 8000cfca <_dtoa_r+0x6a2>
8000ce58:	80 c5       	mov.d %d5,%a12
8000ce5a:	91 00 00 f8 	movh.a %a15,32768
8000ce5e:	19 a2 24 00 	ld.w %d2,[%sp]36
8000ce62:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000ce66:	c2 f5       	add %d5,-1
8000ce68:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000ce6c:	df 02 57 00 	jeq %d2,0,8000cf1a <_dtoa_r+0x5f2>
8000ce70:	b7 00 a9 4a 	imask %e4,0,21,9
8000ce74:	09 f6 40 09 	ld.d %e6,[%a15]
8000ce78:	6d ff 93 ed 	call 8000a99e <__divdf3>
8000ce7c:	0b ef 10 68 	mov %e6,%d15,%d14
8000ce80:	0b 23 10 48 	mov %e4,%d3,%d2
8000ce84:	6d ff 9b ec 	call 8000a7ba <__subdf3>
8000ce88:	d8 03       	ld.a %a15,[%sp]12
8000ce8a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000ce8e:	0b cd 10 48 	mov %e4,%d13,%d12
8000ce92:	80 fe       	mov.d %d14,%a15
8000ce94:	6d 00 6c 0a 	call 8000e36c <__fixdfsi>
8000ce98:	02 24       	mov %d4,%d2
8000ce9a:	02 2f       	mov %d15,%d2
8000ce9c:	6d ff 0d ee 	call 8000aab6 <__floatsidf>
8000cea0:	0b cd 10 48 	mov %e4,%d13,%d12
8000cea4:	0b 23 10 68 	mov %e6,%d3,%d2
8000cea8:	c2 1e       	add %d14,1
8000ceaa:	6d ff 88 ec 	call 8000a7ba <__subdf3>
8000ceae:	1b 0f 03 50 	addi %d5,%d15,48
8000ceb2:	28 05       	st.b [%a15]0,%d5
8000ceb4:	0b ab 10 68 	mov %e6,%d11,%d10
8000ceb8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cebc:	0b 23 10 88 	mov %e8,%d3,%d2
8000cec0:	6d 00 36 0a 	call 8000e32c <__ltdf2>
8000cec4:	bf 02 86 03 	jlt %d2,0,8000d5d0 <_dtoa_r+0xca8>
8000cec8:	b7 00 2a 4a 	imask %e4,0,20,10
8000cecc:	0b 89 10 68 	mov %e6,%d9,%d8
8000ced0:	6d ff 75 ec 	call 8000a7ba <__subdf3>
8000ced4:	0b ab 10 68 	mov %e6,%d11,%d10
8000ced8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cedc:	6d 00 28 0a 	call 8000e32c <__ltdf2>
8000cee0:	bf 02 ea 00 	jlt %d2,0,8000d0b4 <_dtoa_r+0x78c>
8000cee4:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000cee8:	02 e5       	mov %d5,%d14
8000ceea:	80 cf       	mov.d %d15,%a12
8000ceec:	a2 35       	sub %d5,%d3
8000ceee:	7f f5 6e 00 	jge %d5,%d15,8000cfca <_dtoa_r+0x6a2>
8000cef2:	0b ab 10 48 	mov %e4,%d11,%d10
8000cef6:	82 06       	mov %d6,0
8000cef8:	7b 40 02 74 	movh %d7,16420
8000cefc:	6d ff 7f ec 	call 8000a7fa <__muldf3>
8000cf00:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf04:	82 06       	mov %d6,0
8000cf06:	7b 40 02 74 	movh %d7,16420
8000cf0a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cf0e:	6d ff 76 ec 	call 8000a7fa <__muldf3>
8000cf12:	60 ef       	mov.a %a15,%d14
8000cf14:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf18:	3c bb       	j 8000ce8e <_dtoa_r+0x566>
8000cf1a:	0b ef 10 68 	mov %e6,%d15,%d14
8000cf1e:	09 f4 40 09 	ld.d %e4,[%a15]
8000cf22:	6d ff 6c ec 	call 8000a7fa <__muldf3>
8000cf26:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000cf2a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cf2e:	30 c3       	add.a %a3,%a12
8000cf30:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000cf34:	80 3e       	mov.d %d14,%a3
8000cf36:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf3a:	d9 cf 01 00 	lea %a15,[%a12]1
8000cf3e:	6d 00 17 0a 	call 8000e36c <__fixdfsi>
8000cf42:	02 24       	mov %d4,%d2
8000cf44:	02 2f       	mov %d15,%d2
8000cf46:	6d ff b8 ed 	call 8000aab6 <__floatsidf>
8000cf4a:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf4e:	0b 23 10 68 	mov %e6,%d3,%d2
8000cf52:	6d ff 34 ec 	call 8000a7ba <__subdf3>
8000cf56:	1b 0f 03 50 	addi %d5,%d15,48
8000cf5a:	0b 23 10 88 	mov %e8,%d3,%d2
8000cf5e:	80 f2       	mov.d %d2,%a15
8000cf60:	34 c5       	st.b [%a12],%d5
8000cf62:	5f e2 29 80 	jne %d2,%d14,8000cfb4 <_dtoa_r+0x68c>
8000cf66:	0b ab 10 48 	mov %e4,%d11,%d10
8000cf6a:	b7 00 a9 6a 	imask %e6,0,21,9
8000cf6e:	6d ff 0a ec 	call 8000a782 <__adddf3>
8000cf72:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf76:	0b 23 10 68 	mov %e6,%d3,%d2
8000cf7a:	6d 00 99 09 	call 8000e2ac <__gtdf2>
8000cf7e:	ff 12 9b 00 	jge %d2,1,8000d0b4 <_dtoa_r+0x78c>
8000cf82:	b7 00 a9 4a 	imask %e4,0,21,9
8000cf86:	0b ab 10 68 	mov %e6,%d11,%d10
8000cf8a:	6d ff 18 ec 	call 8000a7ba <__subdf3>
8000cf8e:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf92:	0b 23 10 68 	mov %e6,%d3,%d2
8000cf96:	6d 00 cb 09 	call 8000e32c <__ltdf2>
8000cf9a:	ff 02 18 00 	jge %d2,0,8000cfca <_dtoa_r+0x6a2>
8000cf9e:	60 e2       	mov.a %a2,%d14
8000cfa0:	60 ef       	mov.a %a15,%d14
8000cfa2:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000cfa6:	b0 ff       	add.a %a15,-1
8000cfa8:	8b 0f 03 f2 	eq %d15,%d15,48
8000cfac:	df 0f 12 03 	jeq %d15,0,8000d5d0 <_dtoa_r+0xca8>
8000cfb0:	80 fe       	mov.d %d14,%a15
8000cfb2:	3c f6       	j 8000cf9e <_dtoa_r+0x676>
8000cfb4:	0b 89 10 48 	mov %e4,%d9,%d8
8000cfb8:	82 06       	mov %d6,0
8000cfba:	7b 40 02 74 	movh %d7,16420
8000cfbe:	6d ff 1e ec 	call 8000a7fa <__muldf3>
8000cfc2:	40 fc       	mov.aa %a12,%a15
8000cfc4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cfc8:	3c b7       	j 8000cf36 <_dtoa_r+0x60e>
8000cfca:	09 ac 40 19 	ld.d %e12,[%sp]64
8000cfce:	19 a3 14 10 	ld.w %d3,[%sp]84
8000cfd2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cfd6:	8b 03 80 52 	ge %d5,%d3,0
8000cfda:	8b f2 40 54 	and.lt %d5,%d2,15
8000cfde:	df 05 9e 00 	jeq %d5,0,8000d11a <_dtoa_r+0x7f2>
8000cfe2:	91 00 00 f8 	movh.a %a15,32768
8000cfe6:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000cfea:	19 a3 10 00 	ld.w %d3,[%sp]16 <80000f70 <__mprec_tens>>
8000cfee:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000cff2:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cff6:	fa 13       	lt %d15,%d3,1
8000cff8:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000cffc:	09 f8 40 09 	ld.d %e8,[%a15]
8000d000:	6e 16       	jz %d15,8000d02c <_dtoa_r+0x704>
8000d002:	df 03 a4 81 	jne %d3,0,8000d34a <_dtoa_r+0xa22>
8000d006:	0b 89 10 48 	mov %e4,%d9,%d8
8000d00a:	82 06       	mov %d6,0
8000d00c:	7b 40 01 74 	movh %d7,16404
8000d010:	6d ff f5 eb 	call 8000a7fa <__muldf3>
8000d014:	0b cd 10 68 	mov %e6,%d13,%d12
8000d018:	0b 23 10 48 	mov %e4,%d3,%d2
8000d01c:	a0 0c       	mov.a %a12,0
8000d01e:	6d 00 67 09 	call 8000e2ec <__gedf2>
8000d022:	a0 0f       	mov.a %a15,0
8000d024:	ff 02 95 01 	jge %d2,0,8000d34e <_dtoa_r+0xa26>
8000d028:	1d 00 9d 01 	j 8000d362 <_dtoa_r+0xa3a>
8000d02c:	d8 03       	ld.a %a15,[%sp]12
8000d02e:	0b cd 10 a8 	mov %e10,%d13,%d12
8000d032:	0b 89 10 68 	mov %e6,%d9,%d8
8000d036:	0b ab 10 48 	mov %e4,%d11,%d10
8000d03a:	80 fe       	mov.d %d14,%a15
8000d03c:	6d ff b1 ec 	call 8000a99e <__divdf3>
8000d040:	0b 23 10 48 	mov %e4,%d3,%d2
8000d044:	c2 1e       	add %d14,1
8000d046:	6d 00 93 09 	call 8000e36c <__fixdfsi>
8000d04a:	02 24       	mov %d4,%d2
8000d04c:	02 2f       	mov %d15,%d2
8000d04e:	6d ff 34 ed 	call 8000aab6 <__floatsidf>
8000d052:	0b 89 10 68 	mov %e6,%d9,%d8
8000d056:	0b 23 10 48 	mov %e4,%d3,%d2
8000d05a:	6d ff d0 eb 	call 8000a7fa <__muldf3>
8000d05e:	0b ab 10 48 	mov %e4,%d11,%d10
8000d062:	0b 23 10 68 	mov %e6,%d3,%d2
8000d066:	6d ff aa eb 	call 8000a7ba <__subdf3>
8000d06a:	0b 23 10 48 	mov %e4,%d3,%d2
8000d06e:	1b 0f 03 30 	addi %d3,%d15,48
8000d072:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d076:	28 03       	st.b [%a15]0,%d3
8000d078:	02 e3       	mov %d3,%d14
8000d07a:	a2 23       	sub %d3,%d2
8000d07c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d080:	5f 23 3c 80 	jne %d3,%d2,8000d0f8 <_dtoa_r+0x7d0>
8000d084:	0b 45 10 68 	mov %e6,%d5,%d4
8000d088:	6d ff 7d eb 	call 8000a782 <__adddf3>
8000d08c:	0b 89 10 68 	mov %e6,%d9,%d8
8000d090:	0b 23 10 48 	mov %e4,%d3,%d2
8000d094:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d098:	6d 00 0a 09 	call 8000e2ac <__gtdf2>
8000d09c:	4e 2e       	jgtz %d2,8000d0b8 <_dtoa_r+0x790>
8000d09e:	0b ab 10 48 	mov %e4,%d11,%d10
8000d0a2:	0b 89 10 68 	mov %e6,%d9,%d8
8000d0a6:	6d 00 c3 08 	call 8000e22c <__eqdf2>
8000d0aa:	df 02 95 82 	jne %d2,0,8000d5d4 <_dtoa_r+0xcac>
8000d0ae:	ae 05       	jnz.t %d15,0,8000d0b8 <_dtoa_r+0x790>
8000d0b0:	1d 00 92 02 	j 8000d5d4 <_dtoa_r+0xcac>
8000d0b4:	58 0c       	ld.w %d15,[%sp]48
8000d0b6:	78 02       	st.w [%sp]8,%d15
8000d0b8:	58 03       	ld.w %d15,[%sp]12
8000d0ba:	a2 ef       	sub %d15,%d14
8000d0bc:	46 0f       	not %d15
8000d0be:	60 e2       	mov.a %a2,%d14
8000d0c0:	60 ef       	mov.a %a15,%d14
8000d0c2:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d0c6:	b0 ff       	add.a %a15,-1
8000d0c8:	8b 93 03 32 	eq %d3,%d3,57
8000d0cc:	df 03 11 00 	jeq %d3,0,8000d0ee <_dtoa_r+0x7c6>
8000d0d0:	9f 0f 0d 80 	jned %d15,0,8000d0ea <_dtoa_r+0x7c2>
8000d0d4:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d0d8:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d0dc:	c2 13       	add %d3,1
8000d0de:	da 30       	mov %d15,48
8000d0e0:	59 a3 08 00 	st.w [%sp]8,%d3
8000d0e4:	2c 30       	st.b [%a3]0,%d15
8000d0e6:	40 3f       	mov.aa %a15,%a3
8000d0e8:	3c 03       	j 8000d0ee <_dtoa_r+0x7c6>
8000d0ea:	80 fe       	mov.d %d14,%a15
8000d0ec:	3c e9       	j 8000d0be <_dtoa_r+0x796>
8000d0ee:	0c f0       	ld.bu %d15,[%a15]0
8000d0f0:	c2 1f       	add %d15,1
8000d0f2:	28 0f       	st.b [%a15]0,%d15
8000d0f4:	1d 00 70 02 	j 8000d5d4 <_dtoa_r+0xcac>
8000d0f8:	82 06       	mov %d6,0
8000d0fa:	7b 40 02 74 	movh %d7,16420
8000d0fe:	6d ff 7e eb 	call 8000a7fa <__muldf3>
8000d102:	d2 06       	mov %e6,0
8000d104:	0b 23 10 48 	mov %e4,%d3,%d2
8000d108:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d10c:	60 ef       	mov.a %a15,%d14
8000d10e:	6d 00 8f 08 	call 8000e22c <__eqdf2>
8000d112:	df 02 90 ff 	jne %d2,0,8000d032 <_dtoa_r+0x70a>
8000d116:	1d 00 5f 02 	j 8000d5d4 <_dtoa_r+0xcac>
8000d11a:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d11e:	58 08       	ld.w %d15,[%sp]32
8000d120:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d124:	a0 0f       	mov.a %a15,0
8000d126:	df 02 3b 00 	jeq %d2,0,8000d19c <_dtoa_r+0x874>
8000d12a:	58 07       	ld.w %d15,[%sp]28
8000d12c:	ff 2f 10 00 	jge %d15,2,8000d14c <_dtoa_r+0x824>
8000d130:	58 13       	ld.w %d15,[%sp]76
8000d132:	6e 05       	jz %d15,8000d13c <_dtoa_r+0x814>
8000d134:	1b 33 43 30 	addi %d3,%d3,1075
8000d138:	58 08       	ld.w %d15,[%sp]32
8000d13a:	3c 22       	j 8000d17e <_dtoa_r+0x856>
8000d13c:	19 a3 10 10 	ld.w %d3,[%sp]80
8000d140:	58 08       	ld.w %d15,[%sp]32
8000d142:	8b 63 03 31 	rsub %d3,%d3,54
8000d146:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d14a:	3c 1a       	j 8000d17e <_dtoa_r+0x856>
8000d14c:	58 04       	ld.w %d15,[%sp]16
8000d14e:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d152:	c2 ff       	add %d15,-1
8000d154:	3f f2 04 00 	jlt %d2,%d15,8000d15c <_dtoa_r+0x834>
8000d158:	5a f2       	sub %d15,%d2,%d15
8000d15a:	3c 0b       	j 8000d170 <_dtoa_r+0x848>
8000d15c:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d160:	78 08       	st.w [%sp]32,%d15
8000d162:	52 32       	sub %d2,%d15,%d3
8000d164:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d168:	82 0f       	mov %d15,0
8000d16a:	42 23       	add %d3,%d2
8000d16c:	59 a3 34 00 	st.w [%sp]52,%d3
8000d170:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d174:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d178:	ce 33       	jgez %d3,8000d17e <_dtoa_r+0x856>
8000d17a:	a2 38       	sub %d8,%d3
8000d17c:	82 03       	mov %d3,0
8000d17e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d182:	40 d4       	mov.aa %a4,%a13
8000d184:	42 32       	add %d2,%d3
8000d186:	59 a2 14 00 	st.w [%sp]20,%d2
8000d18a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d18e:	82 14       	mov %d4,1
8000d190:	42 32       	add %d2,%d3
8000d192:	59 a2 18 00 	st.w [%sp]24,%d2
8000d196:	6d 00 1b 03 	call 8000d7cc <__i2b>
8000d19a:	40 2f       	mov.aa %a15,%a2
8000d19c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d1a0:	8b 18 80 32 	ge %d3,%d8,1
8000d1a4:	8b 12 80 34 	and.ge %d3,%d2,1
8000d1a8:	76 3e       	jz %d3,8000d1c4 <_dtoa_r+0x89c>
8000d1aa:	0b 82 80 31 	min %d3,%d2,%d8
8000d1ae:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d1b2:	a2 38       	sub %d8,%d3
8000d1b4:	a2 32       	sub %d2,%d3
8000d1b6:	59 a2 14 00 	st.w [%sp]20,%d2
8000d1ba:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d1be:	a2 32       	sub %d2,%d3
8000d1c0:	59 a2 18 00 	st.w [%sp]24,%d2
8000d1c4:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d1c8:	bf 13 27 00 	jlt %d3,1,8000d216 <_dtoa_r+0x8ee>
8000d1cc:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d1d0:	df 02 1c 00 	jeq %d2,0,8000d208 <_dtoa_r+0x8e0>
8000d1d4:	bf 1f 13 00 	jlt %d15,1,8000d1fa <_dtoa_r+0x8d2>
8000d1d8:	40 f5       	mov.aa %a5,%a15
8000d1da:	02 f4       	mov %d4,%d15
8000d1dc:	40 d4       	mov.aa %a4,%a13
8000d1de:	6d 00 8c 03 	call 8000d8f6 <__pow5mult>
8000d1e2:	40 e6       	mov.aa %a6,%a14
8000d1e4:	40 d4       	mov.aa %a4,%a13
8000d1e6:	40 25       	mov.aa %a5,%a2
8000d1e8:	40 2f       	mov.aa %a15,%a2
8000d1ea:	6d 00 f9 02 	call 8000d7dc <__multiply>
8000d1ee:	40 e5       	mov.aa %a5,%a14
8000d1f0:	40 2c       	mov.aa %a12,%a2
8000d1f2:	40 d4       	mov.aa %a4,%a13
8000d1f4:	6d 00 4e 02 	call 8000d690 <_Bfree>
8000d1f8:	40 ce       	mov.aa %a14,%a12
8000d1fa:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d1fe:	40 d4       	mov.aa %a4,%a13
8000d200:	a2 f4       	sub %d4,%d15
8000d202:	40 e5       	mov.aa %a5,%a14
8000d204:	76 49       	jz %d4,8000d216 <_dtoa_r+0x8ee>
8000d206:	3c 05       	j 8000d210 <_dtoa_r+0x8e8>
8000d208:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d20c:	40 d4       	mov.aa %a4,%a13
8000d20e:	40 e5       	mov.aa %a5,%a14
8000d210:	6d 00 73 03 	call 8000d8f6 <__pow5mult>
8000d214:	40 2e       	mov.aa %a14,%a2
8000d216:	40 d4       	mov.aa %a4,%a13
8000d218:	82 14       	mov %d4,1
8000d21a:	6d 00 d9 02 	call 8000d7cc <__i2b>
8000d21e:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d222:	40 2c       	mov.aa %a12,%a2
8000d224:	8e 3c       	jlez %d3,8000d23c <_dtoa_r+0x914>
8000d226:	40 d4       	mov.aa %a4,%a13
8000d228:	40 25       	mov.aa %a5,%a2
8000d22a:	02 34       	mov %d4,%d3
8000d22c:	6d 00 65 03 	call 8000d8f6 <__pow5mult>
8000d230:	58 07       	ld.w %d15,[%sp]28
8000d232:	40 2c       	mov.aa %a12,%a2
8000d234:	82 09       	mov %d9,0
8000d236:	ff 2f 1f 00 	jge %d15,2,8000d274 <_dtoa_r+0x94c>
8000d23a:	3c 06       	j 8000d246 <_dtoa_r+0x91e>
8000d23c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d240:	82 09       	mov %d9,0
8000d242:	ff 22 15 00 	jge %d2,2,8000d26c <_dtoa_r+0x944>
8000d246:	82 09       	mov %d9,0
8000d248:	df 0c 12 80 	jne %d12,0,8000d26c <_dtoa_r+0x944>
8000d24c:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000d250:	ee 0e       	jnz %d15,8000d26c <_dtoa_r+0x944>
8000d252:	7b 00 ff f7 	movh %d15,32752
8000d256:	26 df       	and %d15,%d13
8000d258:	6e 0a       	jz %d15,8000d26c <_dtoa_r+0x944>
8000d25a:	19 a3 14 00 	ld.w %d3,[%sp]20
8000d25e:	58 06       	ld.w %d15,[%sp]24
8000d260:	c2 13       	add %d3,1
8000d262:	c2 1f       	add %d15,1
8000d264:	59 a3 14 00 	st.w [%sp]20,%d3
8000d268:	78 06       	st.w [%sp]24,%d15
8000d26a:	82 19       	mov %d9,1
8000d26c:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d270:	82 12       	mov %d2,1
8000d272:	76 39       	jz %d3,8000d284 <_dtoa_r+0x95c>
8000d274:	4c c4       	ld.w %d15,[%a12]16
8000d276:	90 c3       	addsc.a %a3,%a12,%d15,2
8000d278:	19 34 10 00 	ld.w %d4,[%a3]16
8000d27c:	6d 00 54 02 	call 8000d724 <__hi0bits>
8000d280:	8b 02 02 21 	rsub %d2,%d2,32
8000d284:	58 06       	ld.w %d15,[%sp]24
8000d286:	42 2f       	add %d15,%d2
8000d288:	16 1f       	and %d15,31
8000d28a:	6e 0a       	jz %d15,8000d29e <_dtoa_r+0x976>
8000d28c:	8b 0f 02 31 	rsub %d3,%d15,32
8000d290:	8b cf 01 f1 	rsub %d15,%d15,28
8000d294:	ff 53 07 00 	jge %d3,5,8000d2a2 <_dtoa_r+0x97a>
8000d298:	df 43 10 00 	jeq %d3,4,8000d2b8 <_dtoa_r+0x990>
8000d29c:	02 3f       	mov %d15,%d3
8000d29e:	1b cf 01 f0 	addi %d15,%d15,28
8000d2a2:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d2a6:	19 a3 18 00 	ld.w %d3,[%sp]24
8000d2aa:	42 f2       	add %d2,%d15
8000d2ac:	42 f3       	add %d3,%d15
8000d2ae:	59 a2 14 00 	st.w [%sp]20,%d2
8000d2b2:	42 f8       	add %d8,%d15
8000d2b4:	59 a3 18 00 	st.w [%sp]24,%d3
8000d2b8:	58 05       	ld.w %d15,[%sp]20
8000d2ba:	8e f7       	jlez %d15,8000d2c8 <_dtoa_r+0x9a0>
8000d2bc:	40 e5       	mov.aa %a5,%a14
8000d2be:	40 d4       	mov.aa %a4,%a13
8000d2c0:	02 f4       	mov %d4,%d15
8000d2c2:	6d 00 58 03 	call 8000d972 <__lshift>
8000d2c6:	40 2e       	mov.aa %a14,%a2
8000d2c8:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d2cc:	8e 27       	jlez %d2,8000d2da <_dtoa_r+0x9b2>
8000d2ce:	40 c5       	mov.aa %a5,%a12
8000d2d0:	40 d4       	mov.aa %a4,%a13
8000d2d2:	02 24       	mov %d4,%d2
8000d2d4:	6d 00 4f 03 	call 8000d972 <__lshift>
8000d2d8:	40 2c       	mov.aa %a12,%a2
8000d2da:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000d2de:	df 03 20 00 	jeq %d3,0,8000d31e <_dtoa_r+0x9f6>
8000d2e2:	40 e4       	mov.aa %a4,%a14
8000d2e4:	40 c5       	mov.aa %a5,%a12
8000d2e6:	6d 00 a3 03 	call 8000da2c <__mcmp>
8000d2ea:	ff 02 1a 00 	jge %d2,0,8000d31e <_dtoa_r+0x9f6>
8000d2ee:	58 02       	ld.w %d15,[%sp]8
8000d2f0:	40 e5       	mov.aa %a5,%a14
8000d2f2:	c2 ff       	add %d15,-1
8000d2f4:	40 d4       	mov.aa %a4,%a13
8000d2f6:	fb a0 00 40 	mov %e4,10
8000d2fa:	78 02       	st.w [%sp]8,%d15
8000d2fc:	6d 00 d3 01 	call 8000d6a2 <__multadd>
8000d300:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000d304:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d308:	59 a2 10 00 	st.w [%sp]16,%d2
8000d30c:	40 2e       	mov.aa %a14,%a2
8000d30e:	76 38       	jz %d3,8000d31e <_dtoa_r+0x9f6>
8000d310:	40 f5       	mov.aa %a5,%a15
8000d312:	40 d4       	mov.aa %a4,%a13
8000d314:	fb a0 00 40 	mov %e4,10
8000d318:	6d 00 c5 01 	call 8000d6a2 <__multadd>
8000d31c:	40 2f       	mov.aa %a15,%a2
8000d31e:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d322:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d326:	8b 32 80 f2 	ge %d15,%d2,3
8000d32a:	8b 13 40 f4 	and.lt %d15,%d3,1
8000d32e:	6e 2a       	jz %d15,8000d382 <_dtoa_r+0xa5a>
8000d330:	f6 3f       	jnz %d3,8000d34e <_dtoa_r+0xa26>
8000d332:	40 c5       	mov.aa %a5,%a12
8000d334:	40 d4       	mov.aa %a4,%a13
8000d336:	d2 54       	mov %e4,5
8000d338:	6d 00 b5 01 	call 8000d6a2 <__multadd>
8000d33c:	40 e4       	mov.aa %a4,%a14
8000d33e:	40 25       	mov.aa %a5,%a2
8000d340:	40 2c       	mov.aa %a12,%a2
8000d342:	6d 00 75 03 	call 8000da2c <__mcmp>
8000d346:	4e 2e       	jgtz %d2,8000d362 <_dtoa_r+0xa3a>
8000d348:	3c 03       	j 8000d34e <_dtoa_r+0xa26>
8000d34a:	a0 0c       	mov.a %a12,0
8000d34c:	a0 0f       	mov.a %a15,0
8000d34e:	58 0a       	ld.w %d15,[%sp]40
8000d350:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d354:	46 0f       	not %d15
8000d356:	78 02       	st.w [%sp]8,%d15
8000d358:	3c 11       	j 8000d37a <_dtoa_r+0xa52>
8000d35a:	58 0c       	ld.w %d15,[%sp]48
8000d35c:	a0 0c       	mov.a %a12,0
8000d35e:	78 02       	st.w [%sp]8,%d15
8000d360:	a0 0f       	mov.a %a15,0
8000d362:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d366:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d36a:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d36e:	da 31       	mov %d15,49
8000d370:	c2 12       	add %d2,1
8000d372:	c2 1e       	add %d14,1
8000d374:	2c 30       	st.b [%a3]0,%d15
8000d376:	59 a2 08 00 	st.w [%sp]8,%d2
8000d37a:	80 f8       	mov.d %d8,%a15
8000d37c:	a0 0f       	mov.a %a15,0
8000d37e:	1d 00 14 01 	j 8000d5a6 <_dtoa_r+0xc7e>
8000d382:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d386:	f6 35       	jnz %d3,8000d390 <_dtoa_r+0xa68>
8000d388:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000d38c:	1d 00 c2 00 	j 8000d510 <_dtoa_r+0xbe8>
8000d390:	8e 87       	jlez %d8,8000d39e <_dtoa_r+0xa76>
8000d392:	40 f5       	mov.aa %a5,%a15
8000d394:	40 d4       	mov.aa %a4,%a13
8000d396:	02 84       	mov %d4,%d8
8000d398:	6d 00 ed 02 	call 8000d972 <__lshift>
8000d39c:	40 2f       	mov.aa %a15,%a2
8000d39e:	80 f8       	mov.d %d8,%a15
8000d3a0:	df 09 16 00 	jeq %d9,0,8000d3cc <_dtoa_r+0xaa4>
8000d3a4:	40 d4       	mov.aa %a4,%a13
8000d3a6:	48 14       	ld.w %d4,[%a15]4
8000d3a8:	6d 00 49 01 	call 8000d63a <_Balloc>
8000d3ac:	48 44       	ld.w %d4,[%a15]16
8000d3ae:	d9 24 0c 00 	lea %a4,[%a2]12
8000d3b2:	c2 24       	add %d4,2
8000d3b4:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d3b8:	06 24       	sh %d4,2
8000d3ba:	80 2f       	mov.d %d15,%a2
8000d3bc:	6d 00 31 01 	call 8000d61e <memcpy>
8000d3c0:	60 f5       	mov.a %a5,%d15
8000d3c2:	40 d4       	mov.aa %a4,%a13
8000d3c4:	82 14       	mov %d4,1
8000d3c6:	6d 00 d6 02 	call 8000d972 <__lshift>
8000d3ca:	80 28       	mov.d %d8,%a2
8000d3cc:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000d3d0:	8f 1c 00 a1 	and %d10,%d12,1
8000d3d4:	40 e4       	mov.aa %a4,%a14
8000d3d6:	40 c5       	mov.aa %a5,%a12
8000d3d8:	6d ff 1a fa 	call 8000c80c <quorem>
8000d3dc:	40 e4       	mov.aa %a4,%a14
8000d3de:	40 f5       	mov.aa %a5,%a15
8000d3e0:	02 2e       	mov %d14,%d2
8000d3e2:	1b 02 03 f0 	addi %d15,%d2,48
8000d3e6:	6d 00 23 03 	call 8000da2c <__mcmp>
8000d3ea:	60 86       	mov.a %a6,%d8
8000d3ec:	40 d4       	mov.aa %a4,%a13
8000d3ee:	40 c5       	mov.aa %a5,%a12
8000d3f0:	02 2b       	mov %d11,%d2
8000d3f2:	6d 00 3e 03 	call 8000da6e <__mdiff>
8000d3f6:	19 22 0c 00 	ld.w %d2,[%a2]12
8000d3fa:	80 2d       	mov.d %d13,%a2
8000d3fc:	82 1c       	mov %d12,1
8000d3fe:	f6 26       	jnz %d2,8000d40a <_dtoa_r+0xae2>
8000d400:	40 e4       	mov.aa %a4,%a14
8000d402:	40 25       	mov.aa %a5,%a2
8000d404:	6d 00 14 03 	call 8000da2c <__mcmp>
8000d408:	02 2c       	mov %d12,%d2
8000d40a:	60 d5       	mov.a %a5,%d13
8000d40c:	40 d4       	mov.aa %a4,%a13
8000d40e:	6d 00 41 01 	call 8000d690 <_Bfree>
8000d412:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000d416:	1b 19 00 d0 	addi %d13,%d9,1
8000d41a:	a6 c3       	or %d3,%d12
8000d41c:	f6 3f       	jnz %d3,8000d43a <_dtoa_r+0xb12>
8000d41e:	f6 ae       	jnz %d10,8000d43a <_dtoa_r+0xb12>
8000d420:	8b 9f 03 32 	eq %d3,%d15,57
8000d424:	40 e2       	mov.aa %a2,%a14
8000d426:	df 03 3a 80 	jne %d3,0,8000d49a <_dtoa_r+0xb72>
8000d42a:	1b 1e 03 20 	addi %d2,%d14,49
8000d42e:	8b 1b 80 b2 	ge %d11,%d11,1
8000d432:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000d436:	02 de       	mov %d14,%d13
8000d438:	3c 37       	j 8000d4a6 <_dtoa_r+0xb7e>
8000d43a:	ce b5       	jgez %d11,8000d444 <_dtoa_r+0xb1c>
8000d43c:	02 fa       	mov %d10,%d15
8000d43e:	40 e2       	mov.aa %a2,%a14
8000d440:	4e ca       	jgtz %d12,8000d454 <_dtoa_r+0xb2c>
8000d442:	3c 1e       	j 8000d47e <_dtoa_r+0xb56>
8000d444:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d448:	a6 2b       	or %d11,%d2
8000d44a:	df 0b 20 80 	jne %d11,0,8000d48a <_dtoa_r+0xb62>
8000d44e:	df 0a 1e 80 	jne %d10,0,8000d48a <_dtoa_r+0xb62>
8000d452:	3c f5       	j 8000d43c <_dtoa_r+0xb14>
8000d454:	40 d4       	mov.aa %a4,%a13
8000d456:	40 e5       	mov.aa %a5,%a14
8000d458:	82 14       	mov %d4,1
8000d45a:	6d 00 8c 02 	call 8000d972 <__lshift>
8000d45e:	40 c5       	mov.aa %a5,%a12
8000d460:	40 24       	mov.aa %a4,%a2
8000d462:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d466:	6d 00 e3 02 	call 8000da2c <__mcmp>
8000d46a:	99 a2 04 00 	ld.a %a2,[%sp]4
8000d46e:	4e 23       	jgtz %d2,8000d474 <_dtoa_r+0xb4c>
8000d470:	f6 27       	jnz %d2,8000d47e <_dtoa_r+0xb56>
8000d472:	2e 06       	jz.t %d15,0,8000d47e <_dtoa_r+0xb56>
8000d474:	8b 9f 03 32 	eq %d3,%d15,57
8000d478:	df 03 11 80 	jne %d3,0,8000d49a <_dtoa_r+0xb72>
8000d47c:	92 1a       	add %d10,%d15,1
8000d47e:	60 93       	mov.a %a3,%d9
8000d480:	02 de       	mov %d14,%d13
8000d482:	34 3a       	st.b [%a3],%d10
8000d484:	40 2e       	mov.aa %a14,%a2
8000d486:	1d 00 90 00 	j 8000d5a6 <_dtoa_r+0xc7e>
8000d48a:	bf 1c 11 00 	jlt %d12,1,8000d4ac <_dtoa_r+0xb84>
8000d48e:	8b 9f 23 32 	ne %d3,%d15,57
8000d492:	40 e2       	mov.aa %a2,%a14
8000d494:	02 de       	mov %d14,%d13
8000d496:	c2 1f       	add %d15,1
8000d498:	f6 37       	jnz %d3,8000d4a6 <_dtoa_r+0xb7e>
8000d49a:	60 93       	mov.a %a3,%d9
8000d49c:	da 39       	mov %d15,57
8000d49e:	02 de       	mov %d14,%d13
8000d4a0:	2c 30       	st.b [%a3]0,%d15
8000d4a2:	40 2e       	mov.aa %a14,%a2
8000d4a4:	3c 5d       	j 8000d55e <_dtoa_r+0xc36>
8000d4a6:	60 92       	mov.a %a2,%d9
8000d4a8:	2c 20       	st.b [%a2]0,%d15
8000d4aa:	3c 7e       	j 8000d5a6 <_dtoa_r+0xc7e>
8000d4ac:	60 93       	mov.a %a3,%d9
8000d4ae:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d4b2:	02 d5       	mov %d5,%d13
8000d4b4:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d4b8:	2c 30       	st.b [%a3]0,%d15
8000d4ba:	a2 25       	sub %d5,%d2
8000d4bc:	02 de       	mov %d14,%d13
8000d4be:	5f 35 41 00 	jeq %d5,%d3,8000d540 <_dtoa_r+0xc18>
8000d4c2:	40 e5       	mov.aa %a5,%a14
8000d4c4:	40 d4       	mov.aa %a4,%a13
8000d4c6:	fb a0 00 40 	mov %e4,10
8000d4ca:	6d 00 ec 00 	call 8000d6a2 <__multadd>
8000d4ce:	80 ff       	mov.d %d15,%a15
8000d4d0:	40 2e       	mov.aa %a14,%a2
8000d4d2:	40 d4       	mov.aa %a4,%a13
8000d4d4:	40 f5       	mov.aa %a5,%a15
8000d4d6:	fb a0 00 40 	mov %e4,10
8000d4da:	7e 86       	jne %d15,%d8,8000d4e6 <_dtoa_r+0xbbe>
8000d4dc:	6d 00 e3 00 	call 8000d6a2 <__multadd>
8000d4e0:	40 2f       	mov.aa %a15,%a2
8000d4e2:	80 28       	mov.d %d8,%a2
8000d4e4:	3c 0b       	j 8000d4fa <_dtoa_r+0xbd2>
8000d4e6:	6d 00 de 00 	call 8000d6a2 <__multadd>
8000d4ea:	60 85       	mov.a %a5,%d8
8000d4ec:	40 d4       	mov.aa %a4,%a13
8000d4ee:	fb a0 00 40 	mov %e4,10
8000d4f2:	40 2f       	mov.aa %a15,%a2
8000d4f4:	6d 00 d7 00 	call 8000d6a2 <__multadd>
8000d4f8:	80 28       	mov.d %d8,%a2
8000d4fa:	02 d9       	mov %d9,%d13
8000d4fc:	1d ff 6c ff 	j 8000d3d4 <_dtoa_r+0xaac>
8000d500:	40 e5       	mov.aa %a5,%a14
8000d502:	40 d4       	mov.aa %a4,%a13
8000d504:	fb a0 00 40 	mov %e4,10
8000d508:	6d 00 cd 00 	call 8000d6a2 <__multadd>
8000d50c:	02 98       	mov %d8,%d9
8000d50e:	40 2e       	mov.aa %a14,%a2
8000d510:	40 e4       	mov.aa %a4,%a14
8000d512:	40 c5       	mov.aa %a5,%a12
8000d514:	6d ff 7c f9 	call 8000c80c <quorem>
8000d518:	1b 18 00 90 	addi %d9,%d8,1
8000d51c:	1b 02 03 f0 	addi %d15,%d2,48
8000d520:	60 82       	mov.a %a2,%d8
8000d522:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d526:	02 95       	mov %d5,%d9
8000d528:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d52c:	2c 20       	st.b [%a2]0,%d15
8000d52e:	a2 25       	sub %d5,%d2
8000d530:	3f 35 e8 7f 	jlt %d5,%d3,8000d500 <_dtoa_r+0xbd8>
8000d534:	8b 13 40 33 	max %d3,%d3,1
8000d538:	02 2e       	mov %d14,%d2
8000d53a:	80 f8       	mov.d %d8,%a15
8000d53c:	42 3e       	add %d14,%d3
8000d53e:	a0 0f       	mov.a %a15,0
8000d540:	40 e5       	mov.aa %a5,%a14
8000d542:	40 d4       	mov.aa %a4,%a13
8000d544:	82 14       	mov %d4,1
8000d546:	6d 00 16 02 	call 8000d972 <__lshift>
8000d54a:	40 c5       	mov.aa %a5,%a12
8000d54c:	40 2e       	mov.aa %a14,%a2
8000d54e:	40 24       	mov.aa %a4,%a2
8000d550:	6d 00 6e 02 	call 8000da2c <__mcmp>
8000d554:	4e 25       	jgtz %d2,8000d55e <_dtoa_r+0xc36>
8000d556:	df 02 1e 80 	jne %d2,0,8000d592 <_dtoa_r+0xc6a>
8000d55a:	6f 0f 1c 00 	jz.t %d15,0,8000d592 <_dtoa_r+0xc6a>
8000d55e:	58 03       	ld.w %d15,[%sp]12
8000d560:	a2 ef       	sub %d15,%d14
8000d562:	46 0f       	not %d15
8000d564:	60 e2       	mov.a %a2,%d14
8000d566:	60 e3       	mov.a %a3,%d14
8000d568:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d56c:	b0 f3       	add.a %a3,-1
8000d56e:	8b 93 03 52 	eq %d5,%d3,57
8000d572:	76 5d       	jz %d5,8000d58c <_dtoa_r+0xc64>
8000d574:	9f 0f 0a 80 	jned %d15,0,8000d588 <_dtoa_r+0xc60>
8000d578:	58 02       	ld.w %d15,[%sp]8
8000d57a:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d57e:	c2 1f       	add %d15,1
8000d580:	78 02       	st.w [%sp]8,%d15
8000d582:	da 31       	mov %d15,49
8000d584:	2c 30       	st.b [%a3]0,%d15
8000d586:	3c 10       	j 8000d5a6 <_dtoa_r+0xc7e>
8000d588:	80 3e       	mov.d %d14,%a3
8000d58a:	3c ed       	j 8000d564 <_dtoa_r+0xc3c>
8000d58c:	c2 13       	add %d3,1
8000d58e:	34 33       	st.b [%a3],%d3
8000d590:	3c 0b       	j 8000d5a6 <_dtoa_r+0xc7e>
8000d592:	60 e2       	mov.a %a2,%d14
8000d594:	60 e3       	mov.a %a3,%d14
8000d596:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d59a:	b0 f3       	add.a %a3,-1
8000d59c:	8b 0f 03 f2 	eq %d15,%d15,48
8000d5a0:	6e 03       	jz %d15,8000d5a6 <_dtoa_r+0xc7e>
8000d5a2:	80 3e       	mov.d %d14,%a3
8000d5a4:	3c f7       	j 8000d592 <_dtoa_r+0xc6a>
8000d5a6:	40 d4       	mov.aa %a4,%a13
8000d5a8:	40 c5       	mov.aa %a5,%a12
8000d5aa:	6d 00 73 00 	call 8000d690 <_Bfree>
8000d5ae:	df 08 13 00 	jeq %d8,0,8000d5d4 <_dtoa_r+0xcac>
8000d5b2:	80 f2       	mov.d %d2,%a15
8000d5b4:	8b 02 20 f2 	ne %d15,%d2,0
8000d5b8:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000d5bc:	6e 05       	jz %d15,8000d5c6 <_dtoa_r+0xc9e>
8000d5be:	40 d4       	mov.aa %a4,%a13
8000d5c0:	40 f5       	mov.aa %a5,%a15
8000d5c2:	6d 00 67 00 	call 8000d690 <_Bfree>
8000d5c6:	60 85       	mov.a %a5,%d8
8000d5c8:	40 d4       	mov.aa %a4,%a13
8000d5ca:	6d 00 63 00 	call 8000d690 <_Bfree>
8000d5ce:	3c 03       	j 8000d5d4 <_dtoa_r+0xcac>
8000d5d0:	58 0c       	ld.w %d15,[%sp]48
8000d5d2:	78 02       	st.w [%sp]8,%d15
8000d5d4:	40 d4       	mov.aa %a4,%a13
8000d5d6:	40 e5       	mov.aa %a5,%a14
8000d5d8:	6d 00 5c 00 	call 8000d690 <_Bfree>
8000d5dc:	60 e2       	mov.a %a2,%d14
8000d5de:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d5e2:	99 a3 08 10 	ld.a %a3,[%sp]72
8000d5e6:	82 0f       	mov %d15,0
8000d5e8:	d8 0e       	ld.a %a15,[%sp]56
8000d5ea:	2c 20       	st.b [%a2]0,%d15
8000d5ec:	c2 12       	add %d2,1
8000d5ee:	74 32       	st.w [%a3],%d2
8000d5f0:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d5f4:	bc f2       	jz.a %a15,8000d5f8 <_dtoa_r+0xcd0>
8000d5f6:	68 0e       	st.w [%a15]0,%d14
8000d5f8:	00 90       	ret 
	...

8000d5fc <_localeconv_r>:
8000d5fc:	91 00 00 28 	movh.a %a2,32768
8000d600:	d9 22 dc b0 	lea %a2,[%a2]3804 <80000edc <lconv>>
8000d604:	00 90       	ret 

8000d606 <memchr>:
8000d606:	8f f4 0f 41 	and %d4,%d4,255
8000d60a:	9f 05 04 80 	jned %d5,0,8000d612 <memchr+0xc>
8000d60e:	a0 02       	mov.a %a2,0
8000d610:	00 90       	ret 
8000d612:	0c 40       	ld.bu %d15,[%a4]0
8000d614:	3e 43       	jeq %d15,%d4,8000d61a <memchr+0x14>
8000d616:	b0 14       	add.a %a4,1
8000d618:	3c f9       	j 8000d60a <memchr+0x4>
8000d61a:	40 42       	mov.aa %a2,%a4
8000d61c:	00 90       	ret 

8000d61e <memcpy>:
8000d61e:	40 42       	mov.aa %a2,%a4
8000d620:	a0 0f       	mov.a %a15,0
8000d622:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d626:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d62a:	9f 04 03 80 	jned %d4,0,8000d630 <memcpy+0x12>
8000d62e:	00 90       	ret 
8000d630:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d634:	b0 1f       	add.a %a15,1
8000d636:	2c 40       	st.b [%a4]0,%d15
8000d638:	3c f5       	j 8000d622 <memcpy+0x4>

8000d63a <_Balloc>:
8000d63a:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d63e:	40 4f       	mov.aa %a15,%a4
8000d640:	02 4f       	mov %d15,%d4
8000d642:	76 29       	jz %d2,8000d654 <_Balloc+0x1a>
8000d644:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d648:	90 33       	addsc.a %a3,%a3,%d15,2
8000d64a:	d4 32       	ld.a %a2,[%a3]
8000d64c:	bc 2f       	jz.a %a2,8000d66a <_Balloc+0x30>
8000d64e:	4c 20       	ld.w %d15,[%a2]0
8000d650:	6c 30       	st.w [%a3]0,%d15
8000d652:	3c 1b       	j 8000d688 <_Balloc+0x4e>
8000d654:	82 44       	mov %d4,4
8000d656:	3b 10 02 50 	mov %d5,33
8000d65a:	6d 00 5c 03 	call 8000dd12 <_calloc_r>
8000d65e:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d662:	bd 02 f1 ff 	jnz.a %a2,8000d644 <_Balloc+0xa>
8000d666:	a0 02       	mov.a %a2,0
8000d668:	00 90       	ret 
8000d66a:	82 18       	mov %d8,1
8000d66c:	0f f8 00 80 	sh %d8,%d8,%d15
8000d670:	1b 58 00 50 	addi %d5,%d8,5
8000d674:	40 f4       	mov.aa %a4,%a15
8000d676:	82 14       	mov %d4,1
8000d678:	06 25       	sh %d5,2
8000d67a:	6d 00 4c 03 	call 8000dd12 <_calloc_r>
8000d67e:	bd 02 f4 7f 	jz.a %a2,8000d666 <_Balloc+0x2c>
8000d682:	6c 21       	st.w [%a2]4,%d15
8000d684:	59 28 08 00 	st.w [%a2]8,%d8
8000d688:	82 0f       	mov %d15,0
8000d68a:	6c 24       	st.w [%a2]16,%d15
8000d68c:	6c 23       	st.w [%a2]12,%d15
8000d68e:	00 90       	ret 

8000d690 <_Bfree>:
8000d690:	bc 58       	jz.a %a5,8000d6a0 <_Bfree+0x10>
8000d692:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d696:	4c 51       	ld.w %d15,[%a5]4
8000d698:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d69a:	4c f0       	ld.w %d15,[%a15]0
8000d69c:	6c 50       	st.w [%a5]0,%d15
8000d69e:	e8 05       	st.a [%a15]0,%a5
8000d6a0:	00 90       	ret 

8000d6a2 <__multadd>:
8000d6a2:	19 59 10 00 	ld.w %d9,[%a5]16
8000d6a6:	40 4c       	mov.aa %a12,%a4
8000d6a8:	9a f9       	add %d15,%d9,-1
8000d6aa:	8b 19 80 22 	ge %d2,%d9,1
8000d6ae:	40 5f       	mov.aa %a15,%a5
8000d6b0:	02 58       	mov %d8,%d5
8000d6b2:	d9 53 14 00 	lea %a3,[%a5]20
8000d6b6:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d6ba:	40 32       	mov.aa %a2,%a3
8000d6bc:	44 25       	ld.w %d5,[%a2+]
8000d6be:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d6c2:	8f 05 1f f0 	sh %d15,%d5,-16
8000d6c6:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d6ca:	8f 03 1f 60 	sh %d6,%d3,-16
8000d6ce:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d6d2:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d6d6:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d6da:	74 33       	st.w [%a3],%d3
8000d6dc:	40 23       	mov.aa %a3,%a2
8000d6de:	9f 02 ee ff 	jned %d2,0,8000d6ba <__multadd+0x18>
8000d6e2:	df 08 1f 00 	jeq %d8,0,8000d720 <__multadd+0x7e>
8000d6e6:	4c f2       	ld.w %d15,[%a15]8
8000d6e8:	3f f9 16 00 	jlt %d9,%d15,8000d714 <__multadd+0x72>
8000d6ec:	48 14       	ld.w %d4,[%a15]4
8000d6ee:	40 c4       	mov.aa %a4,%a12
8000d6f0:	c2 14       	add %d4,1
8000d6f2:	6d ff a4 ff 	call 8000d63a <_Balloc>
8000d6f6:	48 44       	ld.w %d4,[%a15]16
8000d6f8:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d6fc:	c2 24       	add %d4,2
8000d6fe:	d9 24 0c 00 	lea %a4,[%a2]12
8000d702:	06 24       	sh %d4,2
8000d704:	40 2d       	mov.aa %a13,%a2
8000d706:	6d ff 8c ff 	call 8000d61e <memcpy>
8000d70a:	40 f5       	mov.aa %a5,%a15
8000d70c:	40 c4       	mov.aa %a4,%a12
8000d70e:	6d ff c1 ff 	call 8000d690 <_Bfree>
8000d712:	40 df       	mov.aa %a15,%a13
8000d714:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d718:	c2 19       	add %d9,1
8000d71a:	59 28 14 00 	st.w [%a2]20,%d8
8000d71e:	68 49       	st.w [%a15]16,%d9
8000d720:	40 f2       	mov.aa %a2,%a15
8000d722:	00 90       	ret 

8000d724 <__hi0bits>:
8000d724:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d728:	82 02       	mov %d2,0
8000d72a:	ee 05       	jnz %d15,8000d734 <__hi0bits+0x10>
8000d72c:	8f 04 01 40 	sh %d4,%d4,16
8000d730:	3b 00 01 20 	mov %d2,16
8000d734:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d738:	ee 05       	jnz %d15,8000d742 <__hi0bits+0x1e>
8000d73a:	1b 82 00 20 	addi %d2,%d2,8
8000d73e:	8f 84 00 40 	sh %d4,%d4,8
8000d742:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d746:	ee 03       	jnz %d15,8000d74c <__hi0bits+0x28>
8000d748:	c2 42       	add %d2,4
8000d74a:	06 44       	sh %d4,4
8000d74c:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d750:	ee 03       	jnz %d15,8000d756 <__hi0bits+0x32>
8000d752:	c2 22       	add %d2,2
8000d754:	06 24       	sh %d4,2
8000d756:	0e 47       	jltz %d4,8000d764 <__hi0bits+0x40>
8000d758:	7b 00 00 f4 	movh %d15,16384
8000d75c:	26 f4       	and %d4,%d15
8000d75e:	c2 12       	add %d2,1
8000d760:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d764:	00 90       	ret 

8000d766 <__lo0bits>:
8000d766:	54 43       	ld.w %d3,[%a4]
8000d768:	8f 73 00 f1 	and %d15,%d3,7
8000d76c:	6e 0e       	jz %d15,8000d788 <__lo0bits+0x22>
8000d76e:	82 02       	mov %d2,0
8000d770:	6f 03 2d 80 	jnz.t %d3,0,8000d7ca <__lo0bits+0x64>
8000d774:	6f 13 06 00 	jz.t %d3,1,8000d780 <__lo0bits+0x1a>
8000d778:	06 f3       	sh %d3,-1
8000d77a:	74 43       	st.w [%a4],%d3
8000d77c:	82 12       	mov %d2,1
8000d77e:	00 90       	ret 
8000d780:	06 e3       	sh %d3,-2
8000d782:	74 43       	st.w [%a4],%d3
8000d784:	82 22       	mov %d2,2
8000d786:	00 90       	ret 
8000d788:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000d78c:	82 04       	mov %d4,0
8000d78e:	ee 05       	jnz %d15,8000d798 <__lo0bits+0x32>
8000d790:	8f 03 1f 30 	sh %d3,%d3,-16
8000d794:	3b 00 01 40 	mov %d4,16
8000d798:	02 3f       	mov %d15,%d3
8000d79a:	16 ff       	and %d15,255
8000d79c:	ee 04       	jnz %d15,8000d7a4 <__lo0bits+0x3e>
8000d79e:	1b 84 00 40 	addi %d4,%d4,8
8000d7a2:	06 83       	sh %d3,-8
8000d7a4:	8f f3 00 f1 	and %d15,%d3,15
8000d7a8:	ee 03       	jnz %d15,8000d7ae <__lo0bits+0x48>
8000d7aa:	c2 44       	add %d4,4
8000d7ac:	06 c3       	sh %d3,-4
8000d7ae:	8f 33 00 f1 	and %d15,%d3,3
8000d7b2:	ee 03       	jnz %d15,8000d7b8 <__lo0bits+0x52>
8000d7b4:	c2 24       	add %d4,2
8000d7b6:	06 e3       	sh %d3,-2
8000d7b8:	6f 03 07 80 	jnz.t %d3,0,8000d7c6 <__lo0bits+0x60>
8000d7bc:	06 f3       	sh %d3,-1
8000d7be:	3b 00 02 20 	mov %d2,32
8000d7c2:	76 34       	jz %d3,8000d7ca <__lo0bits+0x64>
8000d7c4:	c2 14       	add %d4,1
8000d7c6:	74 43       	st.w [%a4],%d3
8000d7c8:	02 42       	mov %d2,%d4
8000d7ca:	00 90       	ret 

8000d7cc <__i2b>:
8000d7cc:	02 4f       	mov %d15,%d4
8000d7ce:	82 14       	mov %d4,1
8000d7d0:	6d ff 35 ff 	call 8000d63a <_Balloc>
8000d7d4:	6c 25       	st.w [%a2]20,%d15
8000d7d6:	82 1f       	mov %d15,1
8000d7d8:	6c 24       	st.w [%a2]16,%d15
8000d7da:	00 90       	ret 

8000d7dc <__multiply>:
8000d7dc:	19 52 10 00 	ld.w %d2,[%a5]16
8000d7e0:	4c 64       	ld.w %d15,[%a6]16
8000d7e2:	40 5f       	mov.aa %a15,%a5
8000d7e4:	40 6c       	mov.aa %a12,%a6
8000d7e6:	7f f2 04 00 	jge %d2,%d15,8000d7ee <__multiply+0x12>
8000d7ea:	40 6f       	mov.aa %a15,%a6
8000d7ec:	40 5c       	mov.aa %a12,%a5
8000d7ee:	48 4a       	ld.w %d10,[%a15]16
8000d7f0:	19 c9 10 00 	ld.w %d9,[%a12]16
8000d7f4:	4c f2       	ld.w %d15,[%a15]8
8000d7f6:	0b 9a 00 80 	add %d8,%d10,%d9
8000d7fa:	48 12       	ld.w %d2,[%a15]4
8000d7fc:	0b 8f 20 41 	lt %d4,%d15,%d8
8000d800:	42 24       	add %d4,%d2
8000d802:	6d ff 1c ff 	call 8000d63a <_Balloc>
8000d806:	d9 23 14 00 	lea %a3,[%a2]20
8000d80a:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000d80e:	40 34       	mov.aa %a4,%a3
8000d810:	82 0f       	mov %d15,0
8000d812:	80 43       	mov.d %d3,%a4
8000d814:	80 d2       	mov.d %d2,%a13
8000d816:	7f 23 04 80 	jge.u %d3,%d2,8000d81e <__multiply+0x42>
8000d81a:	64 4f       	st.w [%a4+],%d15
8000d81c:	3c fb       	j 8000d812 <__multiply+0x36>
8000d81e:	d9 ff 14 00 	lea %a15,[%a15]20
8000d822:	d9 cc 14 00 	lea %a12,[%a12]20
8000d826:	80 f3       	mov.d %d3,%a15
8000d828:	80 cf       	mov.d %d15,%a12
8000d82a:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000d82e:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000d832:	80 c2       	mov.d %d2,%a12
8000d834:	7f 02 54 80 	jge.u %d2,%d0,8000d8dc <__multiply+0x100>
8000d838:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000d83c:	40 34       	mov.aa %a4,%a3
8000d83e:	40 f6       	mov.aa %a6,%a15
8000d840:	82 03       	mov %d3,0
8000d842:	df 02 21 00 	jeq %d2,0,8000d884 <__multiply+0xa8>
8000d846:	40 45       	mov.aa %a5,%a4
8000d848:	44 67       	ld.w %d7,[%a6+]
8000d84a:	44 56       	ld.w %d6,[%a5+]
8000d84c:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000d850:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000d854:	8f 07 1f 70 	sh %d7,%d7,-16
8000d858:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000d85c:	8f 06 1f 60 	sh %d6,%d6,-16
8000d860:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000d864:	42 35       	add %d5,%d3
8000d866:	8f 05 1f 30 	sh %d3,%d5,-16
8000d86a:	1a 36       	add %d15,%d6,%d3
8000d86c:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000d870:	8f 0f 1f 30 	sh %d3,%d15,-16
8000d874:	80 6f       	mov.d %d15,%a6
8000d876:	74 45       	st.w [%a4],%d5
8000d878:	7f 4f 04 80 	jge.u %d15,%d4,8000d880 <__multiply+0xa4>
8000d87c:	40 54       	mov.aa %a4,%a5
8000d87e:	3c e4       	j 8000d846 <__multiply+0x6a>
8000d880:	59 43 04 00 	st.w [%a4]4,%d3
8000d884:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000d888:	df 02 27 00 	jeq %d2,0,8000d8d6 <__multiply+0xfa>
8000d88c:	54 33       	ld.w %d3,[%a3]
8000d88e:	40 34       	mov.aa %a4,%a3
8000d890:	40 f5       	mov.aa %a5,%a15
8000d892:	82 07       	mov %d7,0
8000d894:	40 56       	mov.aa %a6,%a5
8000d896:	44 66       	ld.w %d6,[%a6+]
8000d898:	40 47       	mov.aa %a7,%a4
8000d89a:	44 75       	ld.w %d5,[%a7+]
8000d89c:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000d8a0:	8f 05 1f 50 	sh %d5,%d5,-16
8000d8a4:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000d8a8:	42 7f       	add %d15,%d7
8000d8aa:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d8ae:	8f 0f 1f f0 	sh %d15,%d15,-16
8000d8b2:	74 43       	st.w [%a4],%d3
8000d8b4:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000d8b8:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000d8bc:	40 65       	mov.aa %a5,%a6
8000d8be:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000d8c2:	42 f3       	add %d3,%d15
8000d8c4:	80 6f       	mov.d %d15,%a6
8000d8c6:	8f 03 1f 70 	sh %d7,%d3,-16
8000d8ca:	7f 4f 04 80 	jge.u %d15,%d4,8000d8d2 <__multiply+0xf6>
8000d8ce:	40 74       	mov.aa %a4,%a7
8000d8d0:	3c e2       	j 8000d894 <__multiply+0xb8>
8000d8d2:	59 43 04 00 	st.w [%a4]4,%d3
8000d8d6:	b0 4c       	add.a %a12,4
8000d8d8:	b0 43       	add.a %a3,4
8000d8da:	3c ac       	j 8000d832 <__multiply+0x56>
8000d8dc:	8b 08 40 f3 	max %d15,%d8,0
8000d8e0:	9f 0f 05 80 	jned %d15,0,8000d8ea <__multiply+0x10e>
8000d8e4:	59 28 10 00 	st.w [%a2]16,%d8
8000d8e8:	00 90       	ret 
8000d8ea:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000d8ee:	df 02 fb ff 	jne %d2,0,8000d8e4 <__multiply+0x108>
8000d8f2:	c2 f8       	add %d8,-1
8000d8f4:	3c f6       	j 8000d8e0 <__multiply+0x104>

8000d8f6 <__pow5mult>:
8000d8f6:	8f 34 00 21 	and %d2,%d4,3
8000d8fa:	40 4c       	mov.aa %a12,%a4
8000d8fc:	40 5d       	mov.aa %a13,%a5
8000d8fe:	02 4f       	mov %d15,%d4
8000d900:	76 2d       	jz %d2,8000d91a <__pow5mult+0x24>
8000d902:	91 00 00 f8 	movh.a %a15,32768
8000d906:	d9 ff d4 c0 	lea %a15,[%a15]3860 <80000f14 <p05.2553>>
8000d90a:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000d90e:	82 05       	mov %d5,0
8000d910:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000d914:	6d ff c7 fe 	call 8000d6a2 <__multadd>
8000d918:	40 2d       	mov.aa %a13,%a2
8000d91a:	86 ef       	sha %d15,-2
8000d91c:	6e 29       	jz %d15,8000d96e <__pow5mult+0x78>
8000d91e:	99 cf 08 10 	ld.a %a15,[%a12]72
8000d922:	7c fb       	jnz.a %a15,8000d938 <__pow5mult+0x42>
8000d924:	40 c4       	mov.aa %a4,%a12
8000d926:	3b 10 27 40 	mov %d4,625
8000d92a:	6d ff 51 ff 	call 8000d7cc <__i2b>
8000d92e:	82 02       	mov %d2,0
8000d930:	b5 c2 08 10 	st.a [%a12]72,%a2
8000d934:	40 2f       	mov.aa %a15,%a2
8000d936:	74 22       	st.w [%a2],%d2
8000d938:	82 08       	mov %d8,0
8000d93a:	2e 0c       	jz.t %d15,0,8000d952 <__pow5mult+0x5c>
8000d93c:	40 d5       	mov.aa %a5,%a13
8000d93e:	40 c4       	mov.aa %a4,%a12
8000d940:	40 f6       	mov.aa %a6,%a15
8000d942:	6d ff 4d ff 	call 8000d7dc <__multiply>
8000d946:	40 d5       	mov.aa %a5,%a13
8000d948:	40 2e       	mov.aa %a14,%a2
8000d94a:	40 c4       	mov.aa %a4,%a12
8000d94c:	6d ff a2 fe 	call 8000d690 <_Bfree>
8000d950:	40 ed       	mov.aa %a13,%a14
8000d952:	86 ff       	sha %d15,-1
8000d954:	6e 0d       	jz %d15,8000d96e <__pow5mult+0x78>
8000d956:	c8 02       	ld.a %a2,[%a15]0
8000d958:	bc 23       	jz.a %a2,8000d95e <__pow5mult+0x68>
8000d95a:	40 2f       	mov.aa %a15,%a2
8000d95c:	3c ef       	j 8000d93a <__pow5mult+0x44>
8000d95e:	40 c4       	mov.aa %a4,%a12
8000d960:	40 f5       	mov.aa %a5,%a15
8000d962:	40 f6       	mov.aa %a6,%a15
8000d964:	6d ff 3c ff 	call 8000d7dc <__multiply>
8000d968:	e8 02       	st.a [%a15]0,%a2
8000d96a:	74 28       	st.w [%a2],%d8
8000d96c:	3c f7       	j 8000d95a <__pow5mult+0x64>
8000d96e:	40 d2       	mov.aa %a2,%a13
8000d970:	00 90       	ret 

8000d972 <__lshift>:
8000d972:	19 5b 10 00 	ld.w %d11,[%a5]16
8000d976:	8f b4 3f 80 	sha %d8,%d4,-5
8000d97a:	02 4a       	mov %d10,%d4
8000d97c:	42 8b       	add %d11,%d8
8000d97e:	19 54 04 00 	ld.w %d4,[%a5]4
8000d982:	4c 52       	ld.w %d15,[%a5]8
8000d984:	40 4e       	mov.aa %a14,%a4
8000d986:	40 5c       	mov.aa %a12,%a5
8000d988:	1b 1b 00 90 	addi %d9,%d11,1
8000d98c:	7f 9f 05 00 	jge %d15,%d9,8000d996 <__lshift+0x24>
8000d990:	c2 14       	add %d4,1
8000d992:	06 1f       	sh %d15,1
8000d994:	3c fc       	j 8000d98c <__lshift+0x1a>
8000d996:	40 e4       	mov.aa %a4,%a14
8000d998:	6d ff 51 fe 	call 8000d63a <_Balloc>
8000d99c:	8b 08 40 f3 	max %d15,%d8,0
8000d9a0:	40 2d       	mov.aa %a13,%a2
8000d9a2:	d9 2f 14 00 	lea %a15,[%a2]20
8000d9a6:	d2 02       	mov %e2,0
8000d9a8:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000d9ac:	9f 0f 03 80 	jned %d15,0,8000d9b2 <__lshift+0x40>
8000d9b0:	3c 04       	j 8000d9b8 <__lshift+0x46>
8000d9b2:	74 23       	st.w [%a2],%d3
8000d9b4:	c2 12       	add %d2,1
8000d9b6:	3c f9       	j 8000d9a8 <__lshift+0x36>
8000d9b8:	8b 08 40 83 	max %d8,%d8,0
8000d9bc:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000d9c0:	d9 cf 14 00 	lea %a15,[%a12]20
8000d9c4:	19 c2 10 00 	ld.w %d2,[%a12]16
8000d9c8:	80 f3       	mov.d %d3,%a15
8000d9ca:	8f fa 01 41 	and %d4,%d10,31
8000d9ce:	13 42 20 23 	madd %d2,%d3,%d2,4
8000d9d2:	8b 04 02 51 	rsub %d5,%d4,32
8000d9d6:	82 0f       	mov %d15,0
8000d9d8:	df 04 1a 00 	jeq %d4,0,8000da0c <__lshift+0x9a>
8000d9dc:	40 f5       	mov.aa %a5,%a15
8000d9de:	44 53       	ld.w %d3,[%a5+]
8000d9e0:	d9 32 04 00 	lea %a2,[%a3]4
8000d9e4:	0f 43 00 30 	sh %d3,%d3,%d4
8000d9e8:	a6 3f       	or %d15,%d3
8000d9ea:	6c 30       	st.w [%a3]0,%d15
8000d9ec:	4c f0       	ld.w %d15,[%a15]0
8000d9ee:	8b 05 00 31 	rsub %d3,%d5,0
8000d9f2:	0f 3f 00 30 	sh %d3,%d15,%d3
8000d9f6:	02 3f       	mov %d15,%d3
8000d9f8:	80 53       	mov.d %d3,%a5
8000d9fa:	40 5f       	mov.aa %a15,%a5
8000d9fc:	7f 23 04 80 	jge.u %d3,%d2,8000da04 <__lshift+0x92>
8000da00:	40 23       	mov.aa %a3,%a2
8000da02:	3c ed       	j 8000d9dc <__lshift+0x6a>
8000da04:	c2 2b       	add %d11,2
8000da06:	6c 31       	st.w [%a3]4,%d15
8000da08:	2a b9       	cmov %d9,%d15,%d11
8000da0a:	3c 08       	j 8000da1a <__lshift+0xa8>
8000da0c:	4c f0       	ld.w %d15,[%a15]0
8000da0e:	b0 4f       	add.a %a15,4
8000da10:	80 f3       	mov.d %d3,%a15
8000da12:	6c 30       	st.w [%a3]0,%d15
8000da14:	b0 43       	add.a %a3,4
8000da16:	3f 23 fb ff 	jlt.u %d3,%d2,8000da0c <__lshift+0x9a>
8000da1a:	c2 f9       	add %d9,-1
8000da1c:	59 d9 10 00 	st.w [%a13]16,%d9
8000da20:	40 e4       	mov.aa %a4,%a14
8000da22:	40 c5       	mov.aa %a5,%a12
8000da24:	6d ff 36 fe 	call 8000d690 <_Bfree>
8000da28:	40 d2       	mov.aa %a2,%a13
8000da2a:	00 90       	ret 

8000da2c <__mcmp>:
8000da2c:	4c 54       	ld.w %d15,[%a5]16
8000da2e:	19 42 10 00 	ld.w %d2,[%a4]16
8000da32:	a2 f2       	sub %d2,%d15
8000da34:	df 02 1c 80 	jne %d2,0,8000da6c <__mcmp+0x40>
8000da38:	80 42       	mov.d %d2,%a4
8000da3a:	06 2f       	sh %d15,2
8000da3c:	60 f2       	mov.a %a2,%d15
8000da3e:	1b 42 01 30 	addi %d3,%d2,20
8000da42:	d9 55 14 00 	lea %a5,[%a5]20
8000da46:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000da4a:	30 25       	add.a %a5,%a2
8000da4c:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000da50:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000da54:	5f f2 08 00 	jeq %d2,%d15,8000da64 <__mcmp+0x38>
8000da58:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000da5c:	82 f3       	mov %d3,-1
8000da5e:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000da62:	00 90       	ret 
8000da64:	80 ff       	mov.d %d15,%a15
8000da66:	3f f3 f3 ff 	jlt.u %d3,%d15,8000da4c <__mcmp+0x20>
8000da6a:	82 02       	mov %d2,0
8000da6c:	00 90       	ret 

8000da6e <__mdiff>:
8000da6e:	40 4d       	mov.aa %a13,%a4
8000da70:	40 5f       	mov.aa %a15,%a5
8000da72:	40 54       	mov.aa %a4,%a5
8000da74:	40 65       	mov.aa %a5,%a6
8000da76:	40 6c       	mov.aa %a12,%a6
8000da78:	6d ff da ff 	call 8000da2c <__mcmp>
8000da7c:	02 2f       	mov %d15,%d2
8000da7e:	f6 2a       	jnz %d2,8000da92 <__mdiff+0x24>
8000da80:	40 d4       	mov.aa %a4,%a13
8000da82:	82 04       	mov %d4,0
8000da84:	6d ff db fd 	call 8000d63a <_Balloc>
8000da88:	82 12       	mov %d2,1
8000da8a:	59 22 10 00 	st.w [%a2]16,%d2
8000da8e:	6c 25       	st.w [%a2]20,%d15
8000da90:	00 90       	ret 
8000da92:	82 08       	mov %d8,0
8000da94:	ce 25       	jgez %d2,8000da9e <__mdiff+0x30>
8000da96:	40 f2       	mov.aa %a2,%a15
8000da98:	82 18       	mov %d8,1
8000da9a:	40 cf       	mov.aa %a15,%a12
8000da9c:	40 2c       	mov.aa %a12,%a2
8000da9e:	40 d4       	mov.aa %a4,%a13
8000daa0:	48 14       	ld.w %d4,[%a15]4
8000daa2:	6d ff cc fd 	call 8000d63a <_Balloc>
8000daa6:	48 42       	ld.w %d2,[%a15]16
8000daa8:	d9 ff 14 00 	lea %a15,[%a15]20
8000daac:	80 ff       	mov.d %d15,%a15
8000daae:	d9 c4 14 00 	lea %a4,[%a12]20
8000dab2:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000dab6:	19 c0 10 00 	ld.w %d0,[%a12]16
8000daba:	80 4f       	mov.d %d15,%a4
8000dabc:	59 28 0c 00 	st.w [%a2]12,%d8
8000dac0:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000dac4:	d9 25 14 00 	lea %a5,[%a2]20
8000dac8:	82 03       	mov %d3,0
8000daca:	44 f6       	ld.w %d6,[%a15+]
8000dacc:	44 45       	ld.w %d5,[%a4+]
8000dace:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000dad2:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000dad6:	42 34       	add %d4,%d3
8000dad8:	a2 14       	sub %d4,%d1
8000dada:	8f 06 1f 60 	sh %d6,%d6,-16
8000dade:	8f 05 1f 50 	sh %d5,%d5,-16
8000dae2:	8f 04 3f 30 	sha %d3,%d4,-16
8000dae6:	0b 56 80 50 	sub %d5,%d6,%d5
8000daea:	1a 35       	add %d15,%d5,%d3
8000daec:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000daf0:	8f 0f 3f 30 	sha %d3,%d15,-16
8000daf4:	80 4f       	mov.d %d15,%a4
8000daf6:	d9 53 04 00 	lea %a3,[%a5]4
8000dafa:	74 54       	st.w [%a5],%d4
8000dafc:	40 35       	mov.aa %a5,%a3
8000dafe:	3f 0f e6 ff 	jlt.u %d15,%d0,8000daca <__mdiff+0x5c>
8000db02:	80 ff       	mov.d %d15,%a15
8000db04:	7f 7f 12 80 	jge.u %d15,%d7,8000db28 <__mdiff+0xba>
8000db08:	44 f5       	ld.w %d5,[%a15+]
8000db0a:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000db0e:	8f 05 1f 50 	sh %d5,%d5,-16
8000db12:	42 34       	add %d4,%d3
8000db14:	8f 04 3f f0 	sha %d15,%d4,-16
8000db18:	42 5f       	add %d15,%d5
8000db1a:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000db1e:	8f 0f 3f 30 	sha %d3,%d15,-16
8000db22:	74 34       	st.w [%a3],%d4
8000db24:	b0 43       	add.a %a3,4
8000db26:	3c ee       	j 8000db02 <__mdiff+0x94>
8000db28:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000db2c:	ee 03       	jnz %d15,8000db32 <__mdiff+0xc4>
8000db2e:	c2 f2       	add %d2,-1
8000db30:	3c fc       	j 8000db28 <__mdiff+0xba>
8000db32:	59 22 10 00 	st.w [%a2]16,%d2
8000db36:	00 90       	ret 

8000db38 <__d2b>:
8000db38:	20 08       	sub.a %sp,8
8000db3a:	02 48       	mov %d8,%d4
8000db3c:	82 14       	mov %d4,1
8000db3e:	02 59       	mov %d9,%d5
8000db40:	40 5d       	mov.aa %a13,%a5
8000db42:	40 6c       	mov.aa %a12,%a6
8000db44:	6d ff 7b fd 	call 8000d63a <_Balloc>
8000db48:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000db4c:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000db50:	40 2f       	mov.aa %a15,%a2
8000db52:	76 93       	jz %d9,8000db58 <__d2b+0x20>
8000db54:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000db58:	59 a2 04 00 	st.w [%sp]4,%d2
8000db5c:	df 08 20 00 	jeq %d8,0,8000db9c <__d2b+0x64>
8000db60:	d9 a4 08 00 	lea %a4,[%sp]8
8000db64:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000db68:	40 a4       	mov.aa %a4,%sp
8000db6a:	6d ff fe fd 	call 8000d766 <__lo0bits>
8000db6e:	58 00       	ld.w %d15,[%sp]0
8000db70:	76 2f       	jz %d2,8000db8e <__d2b+0x56>
8000db72:	19 a4 04 00 	ld.w %d4,[%sp]4
8000db76:	8b 02 02 31 	rsub %d3,%d2,32
8000db7a:	0f 34 00 30 	sh %d3,%d4,%d3
8000db7e:	a6 3f       	or %d15,%d3
8000db80:	68 5f       	st.w [%a15]20,%d15
8000db82:	8b 02 00 f1 	rsub %d15,%d2,0
8000db86:	0f f4 00 f0 	sh %d15,%d4,%d15
8000db8a:	78 01       	st.w [%sp]4,%d15
8000db8c:	3c 02       	j 8000db90 <__d2b+0x58>
8000db8e:	68 5f       	st.w [%a15]20,%d15
8000db90:	58 01       	ld.w %d15,[%sp]4
8000db92:	82 28       	mov %d8,2
8000db94:	ea 18       	cmovn %d8,%d15,1
8000db96:	68 6f       	st.w [%a15]24,%d15
8000db98:	68 48       	st.w [%a15]16,%d8
8000db9a:	3c 0c       	j 8000dbb2 <__d2b+0x7a>
8000db9c:	d9 a4 04 00 	lea %a4,[%sp]4
8000dba0:	6d ff e3 fd 	call 8000d766 <__lo0bits>
8000dba4:	58 01       	ld.w %d15,[%sp]4
8000dba6:	1b 02 02 20 	addi %d2,%d2,32
8000dbaa:	68 5f       	st.w [%a15]20,%d15
8000dbac:	82 1f       	mov %d15,1
8000dbae:	68 4f       	st.w [%a15]16,%d15
8000dbb0:	82 18       	mov %d8,1
8000dbb2:	76 98       	jz %d9,8000dbc2 <__d2b+0x8a>
8000dbb4:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000dbb8:	42 29       	add %d9,%d2
8000dbba:	74 d9       	st.w [%a13],%d9
8000dbbc:	8b 52 03 21 	rsub %d2,%d2,53
8000dbc0:	3c 0d       	j 8000dbda <__d2b+0xa2>
8000dbc2:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000dbc6:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000dbca:	74 d2       	st.w [%a13],%d2
8000dbcc:	19 24 10 00 	ld.w %d4,[%a2]16
8000dbd0:	6d ff aa fd 	call 8000d724 <__hi0bits>
8000dbd4:	06 58       	sh %d8,5
8000dbd6:	0b 28 80 20 	sub %d2,%d8,%d2
8000dbda:	74 c2       	st.w [%a12],%d2
8000dbdc:	40 f2       	mov.aa %a2,%a15
8000dbde:	00 90       	ret 

8000dbe0 <__fpclassifyd>:
8000dbe0:	0f 45 a0 f0 	or %d15,%d5,%d4
8000dbe4:	82 22       	mov %d2,2
8000dbe6:	6e 1d       	jz %d15,8000dc20 <__fpclassifyd+0x40>
8000dbe8:	7b 00 00 38 	movh %d3,32768
8000dbec:	3a 53       	eq %d15,%d3,%d5
8000dbee:	8b 04 00 f4 	and.eq %d15,%d4,0
8000dbf2:	8b 04 00 62 	eq %d6,%d4,0
8000dbf6:	ee 15       	jnz %d15,8000dc20 <__fpclassifyd+0x40>
8000dbf8:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000dbfc:	7b 00 fe f7 	movh %d15,32736
8000dc00:	9b 05 ff 3f 	addih %d3,%d5,65520
8000dc04:	82 42       	mov %d2,4
8000dc06:	3f f3 0d 80 	jlt.u %d3,%d15,8000dc20 <__fpclassifyd+0x40>
8000dc0a:	7b 00 01 f0 	movh %d15,16
8000dc0e:	82 32       	mov %d2,3
8000dc10:	3f f5 08 80 	jlt.u %d5,%d15,8000dc20 <__fpclassifyd+0x40>
8000dc14:	7b 00 ff 27 	movh %d2,32752
8000dc18:	0b 25 00 51 	eq %d5,%d5,%d2
8000dc1c:	0f 56 80 20 	and %d2,%d6,%d5
8000dc20:	00 90       	ret 

8000dc22 <__ssprint_r>:
8000dc22:	4c 62       	ld.w %d15,[%a6]8
8000dc24:	20 08       	sub.a %sp,8
8000dc26:	40 4e       	mov.aa %a14,%a4
8000dc28:	40 5f       	mov.aa %a15,%a5
8000dc2a:	40 6c       	mov.aa %a12,%a6
8000dc2c:	54 6c       	ld.w %d12,[%a6]
8000dc2e:	6e 30       	jz %d15,8000dc8e <__ssprint_r+0x6c>
8000dc30:	a0 02       	mov.a %a2,0
8000dc32:	b5 a2 04 00 	st.a [%sp]4,%a2
8000dc36:	82 09       	mov %d9,0
8000dc38:	3b 00 48 e0 	mov %d14,1152
8000dc3c:	3b f0 b7 df 	mov %d13,-1153
8000dc40:	3c 0a       	j 8000dc54 <__ssprint_r+0x32>
8000dc42:	60 c2       	mov.a %a2,%d12
8000dc44:	d4 22       	ld.a %a2,[%a2]
8000dc46:	b5 a2 04 00 	st.a [%sp]4,%a2
8000dc4a:	60 c2       	mov.a %a2,%d12
8000dc4c:	1b 8c 00 c0 	addi %d12,%d12,8
8000dc50:	19 29 04 00 	ld.w %d9,[%a2]4
8000dc54:	df 09 f7 7f 	jeq %d9,0,8000dc42 <__ssprint_r+0x20>
8000dc58:	48 28       	ld.w %d8,[%a15]8
8000dc5a:	3f 89 5a 80 	jlt.u %d9,%d8,8000dd0e <__ssprint_r+0xec>
8000dc5e:	88 62       	ld.h %d2,[%a15]12
8000dc60:	0f e2 80 f0 	and %d15,%d2,%d14
8000dc64:	ee 19       	jnz %d15,8000dc96 <__ssprint_r+0x74>
8000dc66:	3f 89 54 80 	jlt.u %d9,%d8,8000dd0e <__ssprint_r+0xec>
8000dc6a:	c8 04       	ld.a %a4,[%a15]0
8000dc6c:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000dc70:	02 84       	mov %d4,%d8
8000dc72:	6d 00 81 00 	call 8000dd74 <memmove>
8000dc76:	4c f2       	ld.w %d15,[%a15]8
8000dc78:	a2 8f       	sub %d15,%d8
8000dc7a:	68 2f       	st.w [%a15]8,%d15
8000dc7c:	4c f0       	ld.w %d15,[%a15]0
8000dc7e:	42 f8       	add %d8,%d15
8000dc80:	4c c2       	ld.w %d15,[%a12]8
8000dc82:	68 08       	st.w [%a15]0,%d8
8000dc84:	52 99       	sub %d9,%d15,%d9
8000dc86:	59 c9 08 00 	st.w [%a12]8,%d9
8000dc8a:	df 09 dc ff 	jne %d9,0,8000dc42 <__ssprint_r+0x20>
8000dc8e:	82 0f       	mov %d15,0
8000dc90:	6c c1       	st.w [%a12]4,%d15
8000dc92:	82 02       	mov %d2,0
8000dc94:	00 90       	ret 
8000dc96:	c8 45       	ld.a %a5,[%a15]16
8000dc98:	48 5a       	ld.w %d10,[%a15]20
8000dc9a:	4c f0       	ld.w %d15,[%a15]0
8000dc9c:	80 53       	mov.d %d3,%a5
8000dc9e:	53 3a 20 a0 	mul %d10,%d10,3
8000dca2:	a2 3f       	sub %d15,%d3
8000dca4:	82 23       	mov %d3,2
8000dca6:	4b 3a 01 a2 	div %e10,%d10,%d3
8000dcaa:	92 13       	add %d3,%d15,1
8000dcac:	42 93       	add %d3,%d9
8000dcae:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000dcb2:	40 e4       	mov.aa %a4,%a14
8000dcb4:	02 a4       	mov %d4,%d10
8000dcb6:	6f a2 12 00 	jz.t %d2,10,8000dcda <__ssprint_r+0xb8>
8000dcba:	6d ff 0c e9 	call 8000aed2 <_malloc_r>
8000dcbe:	40 2d       	mov.aa %a13,%a2
8000dcc0:	bd 02 15 00 	jz.a %a2,8000dcea <__ssprint_r+0xc8>
8000dcc4:	c8 45       	ld.a %a5,[%a15]16
8000dcc6:	40 24       	mov.aa %a4,%a2
8000dcc8:	02 f4       	mov %d4,%d15
8000dcca:	6d ff aa fc 	call 8000d61e <memcpy>
8000dcce:	88 62       	ld.h %d2,[%a15]12
8000dcd0:	26 d2       	and %d2,%d13
8000dcd2:	8f 02 48 21 	or %d2,%d2,128
8000dcd6:	a8 62       	st.h [%a15]12,%d2
8000dcd8:	3c 13       	j 8000dcfe <__ssprint_r+0xdc>
8000dcda:	6d 00 7d 00 	call 8000ddd4 <_realloc_r>
8000dcde:	40 2d       	mov.aa %a13,%a2
8000dce0:	7c 2f       	jnz.a %a2,8000dcfe <__ssprint_r+0xdc>
8000dce2:	c8 45       	ld.a %a5,[%a15]16
8000dce4:	40 e4       	mov.aa %a4,%a14
8000dce6:	6d ff eb eb 	call 8000b4bc <_free_r>
8000dcea:	da 0c       	mov %d15,12
8000dcec:	6c e0       	st.w [%a14]0,%d15
8000dcee:	8c f6       	ld.h %d15,[%a15]12
8000dcf0:	82 f2       	mov %d2,-1
8000dcf2:	96 40       	or %d15,64
8000dcf4:	a8 6f       	st.h [%a15]12,%d15
8000dcf6:	82 0f       	mov %d15,0
8000dcf8:	6c c2       	st.w [%a12]8,%d15
8000dcfa:	6c c1       	st.w [%a12]4,%d15
8000dcfc:	00 90       	ret 
8000dcfe:	e8 4d       	st.a [%a15]16,%a13
8000dd00:	10 dd       	addsc.a %a13,%a13,%d15,0
8000dd02:	68 5a       	st.w [%a15]20,%d10
8000dd04:	a2 fa       	sub %d10,%d15
8000dd06:	e8 0d       	st.a [%a15]0,%a13
8000dd08:	02 98       	mov %d8,%d9
8000dd0a:	68 2a       	st.w [%a15]8,%d10
8000dd0c:	3c ad       	j 8000dc66 <__ssprint_r+0x44>
8000dd0e:	02 98       	mov %d8,%d9
8000dd10:	3c ad       	j 8000dc6a <__ssprint_r+0x48>

8000dd12 <_calloc_r>:
8000dd12:	e2 54       	mul %d4,%d5
8000dd14:	6d ff df e8 	call 8000aed2 <_malloc_r>
8000dd18:	40 2f       	mov.aa %a15,%a2
8000dd1a:	a0 02       	mov.a %a2,0
8000dd1c:	bd 0f 2b 00 	jz.a %a15,8000dd72 <_calloc_r+0x60>
8000dd20:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000dd24:	8f 35 c0 51 	andn %d5,%d5,3
8000dd28:	c2 c5       	add %d5,-4
8000dd2a:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000dd2e:	ee 1d       	jnz %d15,8000dd68 <_calloc_r+0x56>
8000dd30:	8b 45 61 f2 	lt.u %d15,%d5,20
8000dd34:	40 f2       	mov.aa %a2,%a15
8000dd36:	ee 14       	jnz %d15,8000dd5e <_calloc_r+0x4c>
8000dd38:	82 0f       	mov %d15,0
8000dd3a:	68 0f       	st.w [%a15]0,%d15
8000dd3c:	68 1f       	st.w [%a15]4,%d15
8000dd3e:	8b c5 a1 22 	ge.u %d2,%d5,28
8000dd42:	d9 f2 08 00 	lea %a2,[%a15]8
8000dd46:	76 2c       	jz %d2,8000dd5e <_calloc_r+0x4c>
8000dd48:	68 2f       	st.w [%a15]8,%d15
8000dd4a:	68 3f       	st.w [%a15]12,%d15
8000dd4c:	8b 45 02 52 	eq %d5,%d5,36
8000dd50:	d9 f2 10 00 	lea %a2,[%a15]16
8000dd54:	76 55       	jz %d5,8000dd5e <_calloc_r+0x4c>
8000dd56:	68 4f       	st.w [%a15]16,%d15
8000dd58:	d9 f2 18 00 	lea %a2,[%a15]24
8000dd5c:	68 5f       	st.w [%a15]20,%d15
8000dd5e:	82 0f       	mov %d15,0
8000dd60:	6c 20       	st.w [%a2]0,%d15
8000dd62:	6c 21       	st.w [%a2]4,%d15
8000dd64:	6c 22       	st.w [%a2]8,%d15
8000dd66:	3c 05       	j 8000dd70 <_calloc_r+0x5e>
8000dd68:	40 f4       	mov.aa %a4,%a15
8000dd6a:	82 04       	mov %d4,0
8000dd6c:	6d 00 2c 00 	call 8000ddc4 <memset>
8000dd70:	40 f2       	mov.aa %a2,%a15
8000dd72:	00 90       	ret 

8000dd74 <memmove>:
8000dd74:	80 46       	mov.d %d6,%a4
8000dd76:	80 52       	mov.d %d2,%a5
8000dd78:	7f 62 16 80 	jge.u %d2,%d6,8000dda4 <memmove+0x30>
8000dd7c:	0b 42 00 50 	add %d5,%d2,%d4
8000dd80:	7f 56 12 80 	jge.u %d6,%d5,8000dda4 <memmove+0x30>
8000dd84:	60 4f       	mov.a %a15,%d4
8000dd86:	02 42       	mov %d2,%d4
8000dd88:	c2 f2       	add %d2,-1
8000dd8a:	fd f0 03 00 	loop %a15,8000dd90 <memmove+0x1c>
8000dd8e:	3c 19       	j 8000ddc0 <memmove+0x4c>
8000dd90:	5a 42       	sub %d15,%d2,%d4
8000dd92:	60 f2       	mov.a %a2,%d15
8000dd94:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000dd98:	1a 62       	add %d15,%d2,%d6
8000dd9a:	79 23 00 00 	ld.b %d3,[%a2]0
8000dd9e:	60 f2       	mov.a %a2,%d15
8000dda0:	34 23       	st.b [%a2],%d3
8000dda2:	3c f3       	j 8000dd88 <memmove+0x14>
8000dda4:	60 4f       	mov.a %a15,%d4
8000dda6:	a0 02       	mov.a %a2,0
8000dda8:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000ddac:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000ddb0:	fd f0 03 00 	loop %a15,8000ddb6 <memmove+0x42>
8000ddb4:	3c 06       	j 8000ddc0 <memmove+0x4c>
8000ddb6:	79 33 00 00 	ld.b %d3,[%a3]0
8000ddba:	b0 12       	add.a %a2,1
8000ddbc:	34 43       	st.b [%a4],%d3
8000ddbe:	3c f5       	j 8000dda8 <memmove+0x34>
8000ddc0:	60 62       	mov.a %a2,%d6
8000ddc2:	00 90       	ret 

8000ddc4 <memset>:
8000ddc4:	40 42       	mov.aa %a2,%a4
8000ddc6:	40 4f       	mov.aa %a15,%a4
8000ddc8:	9f 05 03 80 	jned %d5,0,8000ddce <memset+0xa>
8000ddcc:	00 90       	ret 
8000ddce:	28 04       	st.b [%a15]0,%d4
8000ddd0:	b0 1f       	add.a %a15,1
8000ddd2:	3c fb       	j 8000ddc8 <memset+0x4>

8000ddd4 <_realloc_r>:
8000ddd4:	40 4d       	mov.aa %a13,%a4
8000ddd6:	40 5f       	mov.aa %a15,%a5
8000ddd8:	02 49       	mov %d9,%d4
8000ddda:	7c 53       	jnz.a %a5,8000dde0 <_realloc_r+0xc>
8000dddc:	1d ff 7b e8 	j 8000aed2 <_malloc_r>
8000dde0:	6d ff c6 ea 	call 8000b36c <__malloc_lock>
8000dde4:	1b b9 00 20 	addi %d2,%d9,11
8000dde8:	8b 72 61 f2 	lt.u %d15,%d2,23
8000ddec:	8f 72 c0 21 	andn %d2,%d2,7
8000ddf0:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000ddf4:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000ddf8:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000ddfc:	8b 0f 20 25 	or.lt %d2,%d15,0
8000de00:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000de04:	8f 33 c0 81 	andn %d8,%d3,3
8000de08:	76 25       	jz %d2,8000de12 <_realloc_r+0x3e>
8000de0a:	da 0c       	mov %d15,12
8000de0c:	6c d0       	st.w [%a13]0,%d15
8000de0e:	1d 00 56 01 	j 8000e0ba <_realloc_r+0x2e6>
8000de12:	7f f8 ac 01 	jge %d8,%d15,8000e16a <_realloc_r+0x396>
8000de16:	7b 00 00 c7 	movh %d12,28672
8000de1a:	60 c3       	mov.a %a3,%d12
8000de1c:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000de20:	d9 34 00 40 	lea %a4,[%a3]256
8000de24:	99 43 08 00 	ld.a %a3,[%a4]8
8000de28:	80 4c       	mov.d %d12,%a4
8000de2a:	19 2b 04 00 	ld.w %d11,[%a2]4
8000de2e:	7d 32 0a 00 	jeq.a %a2,%a3,8000de42 <_realloc_r+0x6e>
8000de32:	8f 1b c0 21 	andn %d2,%d11,1
8000de36:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000de3a:	19 42 04 00 	ld.w %d2,[%a4]4
8000de3e:	6f 02 2b 80 	jnz.t %d2,0,8000de94 <_realloc_r+0xc0>
8000de42:	8f 3b c0 b1 	andn %d11,%d11,3
8000de46:	0b 8b 00 20 	add %d2,%d11,%d8
8000de4a:	7d 32 1b 80 	jne.a %a2,%a3,8000de80 <_realloc_r+0xac>
8000de4e:	1b 0f 01 40 	addi %d4,%d15,16
8000de52:	3f 42 23 00 	jlt %d2,%d4,8000de98 <_realloc_r+0xc4>
8000de56:	10 ee       	addsc.a %a14,%a14,%d15,0
8000de58:	60 c2       	mov.a %a2,%d12
8000de5a:	a2 f2       	sub %d2,%d15
8000de5c:	b5 2e 08 00 	st.a [%a2]8,%a14
8000de60:	8f 12 40 21 	or %d2,%d2,1
8000de64:	59 e2 04 00 	st.w [%a14]4,%d2
8000de68:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000de6c:	40 d4       	mov.aa %a4,%a13
8000de6e:	8f 12 00 21 	and %d2,%d2,1
8000de72:	a6 2f       	or %d15,%d2
8000de74:	59 ff fc ff 	st.w [%a15]-4,%d15
8000de78:	6d ff 7b ea 	call 8000b36e <__malloc_unlock>
8000de7c:	40 f2       	mov.aa %a2,%a15
8000de7e:	00 90       	ret 
8000de80:	3f f2 0c 00 	jlt %d2,%d15,8000de98 <_realloc_r+0xc4>
8000de84:	cc 23       	ld.a %a15,[%a2]12
8000de86:	99 22 08 00 	ld.a %a2,[%a2]8
8000de8a:	02 28       	mov %d8,%d2
8000de8c:	ec 23       	st.a [%a2]12,%a15
8000de8e:	e8 22       	st.a [%a15]8,%a2
8000de90:	1d 00 6d 01 	j 8000e16a <_realloc_r+0x396>
8000de94:	82 0b       	mov %d11,0
8000de96:	a0 02       	mov.a %a2,0
8000de98:	6f 03 08 81 	jnz.t %d3,0,8000e0a8 <_realloc_r+0x2d4>
8000de9c:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000dea0:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000dea4:	19 ca 04 00 	ld.w %d10,[%a12]4
8000dea8:	8f 3a c0 a1 	andn %d10,%d10,3
8000deac:	42 8a       	add %d10,%d8
8000deae:	bd 02 b3 00 	jz.a %a2,8000e014 <_realloc_r+0x240>
8000deb2:	42 ab       	add %d11,%d10
8000deb4:	7d 32 5f 80 	jne.a %a2,%a3,8000df72 <_realloc_r+0x19e>
8000deb8:	1b 0f 01 20 	addi %d2,%d15,16
8000debc:	3f 2b ac 00 	jlt %d11,%d2,8000e014 <_realloc_r+0x240>
8000dec0:	40 ce       	mov.aa %a14,%a12
8000dec2:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000dec6:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000deca:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dece:	8b 54 a2 22 	ge.u %d2,%d4,37
8000ded2:	b5 32 0c 00 	st.a [%a3]12,%a2
8000ded6:	b5 23 08 00 	st.a [%a2]8,%a3
8000deda:	df 02 36 80 	jne %d2,0,8000df46 <_realloc_r+0x172>
8000dede:	8b 44 61 22 	lt.u %d2,%d4,20
8000dee2:	40 e3       	mov.aa %a3,%a14
8000dee4:	df 02 28 80 	jne %d2,0,8000df34 <_realloc_r+0x160>
8000dee8:	48 02       	ld.w %d2,[%a15]0
8000deea:	59 c2 08 00 	st.w [%a12]8,%d2
8000deee:	48 13       	ld.w %d3,[%a15]4
8000def0:	8b c4 a1 22 	ge.u %d2,%d4,28
8000def4:	59 c3 0c 00 	st.w [%a12]12,%d3
8000def8:	f6 26       	jnz %d2,8000df04 <_realloc_r+0x130>
8000defa:	d9 c3 10 00 	lea %a3,[%a12]16
8000defe:	d9 ff 08 00 	lea %a15,[%a15]8
8000df02:	3c 19       	j 8000df34 <_realloc_r+0x160>
8000df04:	48 22       	ld.w %d2,[%a15]8
8000df06:	8b 44 02 82 	eq %d8,%d4,36
8000df0a:	59 c2 10 00 	st.w [%a12]16,%d2
8000df0e:	48 33       	ld.w %d3,[%a15]12
8000df10:	59 c3 14 00 	st.w [%a12]20,%d3
8000df14:	f6 86       	jnz %d8,8000df20 <_realloc_r+0x14c>
8000df16:	d9 c3 18 00 	lea %a3,[%a12]24
8000df1a:	d9 ff 10 00 	lea %a15,[%a15]16
8000df1e:	3c 0b       	j 8000df34 <_realloc_r+0x160>
8000df20:	48 42       	ld.w %d2,[%a15]16
8000df22:	d9 c3 20 00 	lea %a3,[%a12]32
8000df26:	59 c2 18 00 	st.w [%a12]24,%d2
8000df2a:	48 53       	ld.w %d3,[%a15]20
8000df2c:	d9 ff 18 00 	lea %a15,[%a15]24
8000df30:	59 c3 1c 00 	st.w [%a12]28,%d3
8000df34:	48 02       	ld.w %d2,[%a15]0
8000df36:	74 32       	st.w [%a3],%d2
8000df38:	48 13       	ld.w %d3,[%a15]4
8000df3a:	59 33 04 00 	st.w [%a3]4,%d3
8000df3e:	48 22       	ld.w %d2,[%a15]8
8000df40:	59 32 08 00 	st.w [%a3]8,%d2
8000df44:	3c 05       	j 8000df4e <_realloc_r+0x17a>
8000df46:	40 e4       	mov.aa %a4,%a14
8000df48:	40 f5       	mov.aa %a5,%a15
8000df4a:	6d ff 15 ff 	call 8000dd74 <memmove>
8000df4e:	10 cf       	addsc.a %a15,%a12,%d15,0
8000df50:	60 c2       	mov.a %a2,%d12
8000df52:	a2 fb       	sub %d11,%d15
8000df54:	ec 22       	st.a [%a2]8,%a15
8000df56:	8f 1b 40 b1 	or %d11,%d11,1
8000df5a:	68 1b       	st.w [%a15]4,%d11
8000df5c:	19 c2 04 00 	ld.w %d2,[%a12]4
8000df60:	40 d4       	mov.aa %a4,%a13
8000df62:	8f 12 00 21 	and %d2,%d2,1
8000df66:	a6 2f       	or %d15,%d2
8000df68:	6c c1       	st.w [%a12]4,%d15
8000df6a:	6d ff 02 ea 	call 8000b36e <__malloc_unlock>
8000df6e:	40 e2       	mov.aa %a2,%a14
8000df70:	00 90       	ret 
8000df72:	3f fb 51 00 	jlt %d11,%d15,8000e014 <_realloc_r+0x240>
8000df76:	99 23 0c 00 	ld.a %a3,[%a2]12
8000df7a:	99 22 08 00 	ld.a %a2,[%a2]8
8000df7e:	40 c4       	mov.aa %a4,%a12
8000df80:	1b c8 ff 4f 	addi %d4,%d8,-4
8000df84:	b5 23 0c 00 	st.a [%a2]12,%a3
8000df88:	b5 32 08 00 	st.a [%a3]8,%a2
8000df8c:	09 43 88 05 	ld.a %a3,[+%a4]8
8000df90:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000df94:	8b 54 a2 22 	ge.u %d2,%d4,37
8000df98:	b5 32 0c 00 	st.a [%a3]12,%a2
8000df9c:	b5 23 08 00 	st.a [%a2]8,%a3
8000dfa0:	df 02 35 80 	jne %d2,0,8000e00a <_realloc_r+0x236>
8000dfa4:	8b 44 61 22 	lt.u %d2,%d4,20
8000dfa8:	df 02 28 80 	jne %d2,0,8000dff8 <_realloc_r+0x224>
8000dfac:	48 02       	ld.w %d2,[%a15]0
8000dfae:	59 c2 08 00 	st.w [%a12]8,%d2
8000dfb2:	48 13       	ld.w %d3,[%a15]4
8000dfb4:	8b c4 a1 22 	ge.u %d2,%d4,28
8000dfb8:	59 c3 0c 00 	st.w [%a12]12,%d3
8000dfbc:	f6 26       	jnz %d2,8000dfc8 <_realloc_r+0x1f4>
8000dfbe:	d9 c4 10 00 	lea %a4,[%a12]16
8000dfc2:	d9 ff 08 00 	lea %a15,[%a15]8
8000dfc6:	3c 19       	j 8000dff8 <_realloc_r+0x224>
8000dfc8:	48 22       	ld.w %d2,[%a15]8
8000dfca:	8b 44 02 82 	eq %d8,%d4,36
8000dfce:	59 c2 10 00 	st.w [%a12]16,%d2
8000dfd2:	48 33       	ld.w %d3,[%a15]12
8000dfd4:	59 c3 14 00 	st.w [%a12]20,%d3
8000dfd8:	f6 86       	jnz %d8,8000dfe4 <_realloc_r+0x210>
8000dfda:	d9 c4 18 00 	lea %a4,[%a12]24
8000dfde:	d9 ff 10 00 	lea %a15,[%a15]16
8000dfe2:	3c 0b       	j 8000dff8 <_realloc_r+0x224>
8000dfe4:	48 42       	ld.w %d2,[%a15]16
8000dfe6:	d9 c4 20 00 	lea %a4,[%a12]32
8000dfea:	59 c2 18 00 	st.w [%a12]24,%d2
8000dfee:	48 53       	ld.w %d3,[%a15]20
8000dff0:	d9 ff 18 00 	lea %a15,[%a15]24
8000dff4:	59 c3 1c 00 	st.w [%a12]28,%d3
8000dff8:	48 02       	ld.w %d2,[%a15]0
8000dffa:	74 42       	st.w [%a4],%d2
8000dffc:	48 13       	ld.w %d3,[%a15]4
8000dffe:	59 43 04 00 	st.w [%a4]4,%d3
8000e002:	48 22       	ld.w %d2,[%a15]8
8000e004:	59 42 08 00 	st.w [%a4]8,%d2
8000e008:	3c 04       	j 8000e010 <_realloc_r+0x23c>
8000e00a:	40 f5       	mov.aa %a5,%a15
8000e00c:	6d ff b4 fe 	call 8000dd74 <memmove>
8000e010:	02 b8       	mov %d8,%d11
8000e012:	3c 45       	j 8000e09c <_realloc_r+0x2c8>
8000e014:	3f fa 4a 00 	jlt %d10,%d15,8000e0a8 <_realloc_r+0x2d4>
8000e018:	40 c4       	mov.aa %a4,%a12
8000e01a:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e01e:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e022:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e026:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e02a:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e02e:	b5 23 08 00 	st.a [%a2]8,%a3
8000e032:	df 02 37 80 	jne %d2,0,8000e0a0 <_realloc_r+0x2cc>
8000e036:	8b 44 61 22 	lt.u %d2,%d4,20
8000e03a:	df 02 28 80 	jne %d2,0,8000e08a <_realloc_r+0x2b6>
8000e03e:	48 03       	ld.w %d3,[%a15]0
8000e040:	59 c3 08 00 	st.w [%a12]8,%d3
8000e044:	48 12       	ld.w %d2,[%a15]4
8000e046:	59 c2 0c 00 	st.w [%a12]12,%d2
8000e04a:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e04e:	f6 26       	jnz %d2,8000e05a <_realloc_r+0x286>
8000e050:	d9 c4 10 00 	lea %a4,[%a12]16
8000e054:	d9 ff 08 00 	lea %a15,[%a15]8
8000e058:	3c 19       	j 8000e08a <_realloc_r+0x2b6>
8000e05a:	48 23       	ld.w %d3,[%a15]8
8000e05c:	8b 44 02 82 	eq %d8,%d4,36
8000e060:	59 c3 10 00 	st.w [%a12]16,%d3
8000e064:	48 32       	ld.w %d2,[%a15]12
8000e066:	59 c2 14 00 	st.w [%a12]20,%d2
8000e06a:	f6 86       	jnz %d8,8000e076 <_realloc_r+0x2a2>
8000e06c:	d9 c4 18 00 	lea %a4,[%a12]24
8000e070:	d9 ff 10 00 	lea %a15,[%a15]16
8000e074:	3c 0b       	j 8000e08a <_realloc_r+0x2b6>
8000e076:	48 43       	ld.w %d3,[%a15]16
8000e078:	d9 c4 20 00 	lea %a4,[%a12]32
8000e07c:	59 c3 18 00 	st.w [%a12]24,%d3
8000e080:	48 52       	ld.w %d2,[%a15]20
8000e082:	d9 ff 18 00 	lea %a15,[%a15]24
8000e086:	59 c2 1c 00 	st.w [%a12]28,%d2
8000e08a:	48 03       	ld.w %d3,[%a15]0
8000e08c:	74 43       	st.w [%a4],%d3
8000e08e:	48 12       	ld.w %d2,[%a15]4
8000e090:	59 42 04 00 	st.w [%a4]4,%d2
8000e094:	48 23       	ld.w %d3,[%a15]8
8000e096:	59 43 08 00 	st.w [%a4]8,%d3
8000e09a:	02 a8       	mov %d8,%d10
8000e09c:	40 ce       	mov.aa %a14,%a12
8000e09e:	3c 66       	j 8000e16a <_realloc_r+0x396>
8000e0a0:	40 f5       	mov.aa %a5,%a15
8000e0a2:	6d ff 69 fe 	call 8000dd74 <memmove>
8000e0a6:	3c fa       	j 8000e09a <_realloc_r+0x2c6>
8000e0a8:	40 d4       	mov.aa %a4,%a13
8000e0aa:	02 94       	mov %d4,%d9
8000e0ac:	6d ff 13 e7 	call 8000aed2 <_malloc_r>
8000e0b0:	40 2c       	mov.aa %a12,%a2
8000e0b2:	7c 26       	jnz.a %a2,8000e0be <_realloc_r+0x2ea>
8000e0b4:	40 d4       	mov.aa %a4,%a13
8000e0b6:	6d ff 5c e9 	call 8000b36e <__malloc_unlock>
8000e0ba:	a0 02       	mov.a %a2,0
8000e0bc:	00 90       	ret 
8000e0be:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e0c2:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000e0c6:	8f 12 c0 21 	andn %d2,%d2,1
8000e0ca:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000e0ce:	80 32       	mov.d %d2,%a3
8000e0d0:	80 23       	mov.d %d3,%a2
8000e0d2:	5f 32 08 80 	jne %d2,%d3,8000e0e2 <_realloc_r+0x30e>
8000e0d6:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e0da:	8f 32 c0 21 	andn %d2,%d2,3
8000e0de:	42 28       	add %d8,%d2
8000e0e0:	3c 45       	j 8000e16a <_realloc_r+0x396>
8000e0e2:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e0e6:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000e0ea:	ee 33       	jnz %d15,8000e150 <_realloc_r+0x37c>
8000e0ec:	8b 44 61 f2 	lt.u %d15,%d4,20
8000e0f0:	40 c3       	mov.aa %a3,%a12
8000e0f2:	40 f2       	mov.aa %a2,%a15
8000e0f4:	ee 23       	jnz %d15,8000e13a <_realloc_r+0x366>
8000e0f6:	4c f0       	ld.w %d15,[%a15]0
8000e0f8:	d9 c3 08 00 	lea %a3,[%a12]8
8000e0fc:	6c c0       	st.w [%a12]0,%d15
8000e0fe:	48 12       	ld.w %d2,[%a15]4
8000e100:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000e104:	59 c2 04 00 	st.w [%a12]4,%d2
8000e108:	d9 f2 08 00 	lea %a2,[%a15]8
8000e10c:	6e 17       	jz %d15,8000e13a <_realloc_r+0x366>
8000e10e:	48 23       	ld.w %d3,[%a15]8
8000e110:	8b 44 02 82 	eq %d8,%d4,36
8000e114:	59 c3 08 00 	st.w [%a12]8,%d3
8000e118:	4c f3       	ld.w %d15,[%a15]12
8000e11a:	d9 c3 10 00 	lea %a3,[%a12]16
8000e11e:	6c c3       	st.w [%a12]12,%d15
8000e120:	d9 f2 10 00 	lea %a2,[%a15]16
8000e124:	76 8b       	jz %d8,8000e13a <_realloc_r+0x366>
8000e126:	48 42       	ld.w %d2,[%a15]16
8000e128:	d9 c3 18 00 	lea %a3,[%a12]24
8000e12c:	59 c2 10 00 	st.w [%a12]16,%d2
8000e130:	48 53       	ld.w %d3,[%a15]20
8000e132:	d9 f2 18 00 	lea %a2,[%a15]24
8000e136:	59 c3 14 00 	st.w [%a12]20,%d3
8000e13a:	4c 20       	ld.w %d15,[%a2]0
8000e13c:	6c 30       	st.w [%a3]0,%d15
8000e13e:	19 22 04 00 	ld.w %d2,[%a2]4
8000e142:	59 32 04 00 	st.w [%a3]4,%d2
8000e146:	19 23 08 00 	ld.w %d3,[%a2]8
8000e14a:	59 33 08 00 	st.w [%a3]8,%d3
8000e14e:	3c 05       	j 8000e158 <_realloc_r+0x384>
8000e150:	40 c4       	mov.aa %a4,%a12
8000e152:	40 f5       	mov.aa %a5,%a15
8000e154:	6d ff 10 fe 	call 8000dd74 <memmove>
8000e158:	40 d4       	mov.aa %a4,%a13
8000e15a:	40 f5       	mov.aa %a5,%a15
8000e15c:	6d ff b0 e9 	call 8000b4bc <_free_r>
8000e160:	40 d4       	mov.aa %a4,%a13
8000e162:	6d ff 06 e9 	call 8000b36e <__malloc_unlock>
8000e166:	40 c2       	mov.aa %a2,%a12
8000e168:	00 90       	ret 
8000e16a:	0b f8 80 20 	sub %d2,%d8,%d15
8000e16e:	8b 02 61 42 	lt.u %d4,%d2,16
8000e172:	19 e3 04 00 	ld.w %d3,[%a14]4
8000e176:	df 04 16 80 	jne %d4,0,8000e1a2 <_realloc_r+0x3ce>
8000e17a:	8f 13 00 31 	and %d3,%d3,1
8000e17e:	10 e5       	addsc.a %a5,%a14,%d15,0
8000e180:	a6 3f       	or %d15,%d3
8000e182:	6c e1       	st.w [%a14]4,%d15
8000e184:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000e188:	8f 12 40 f1 	or %d15,%d2,1
8000e18c:	b7 10 21 20 	imask %e2,1,0,1
8000e190:	6c 51       	st.w [%a5]4,%d15
8000e192:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e196:	40 d4       	mov.aa %a4,%a13
8000e198:	d9 55 08 00 	lea %a5,[%a5]8
8000e19c:	6d ff 90 e9 	call 8000b4bc <_free_r>
8000e1a0:	3c 0c       	j 8000e1b8 <_realloc_r+0x3e4>
8000e1a2:	8f 13 00 31 	and %d3,%d3,1
8000e1a6:	a6 83       	or %d3,%d8
8000e1a8:	59 e3 04 00 	st.w [%a14]4,%d3
8000e1ac:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000e1b0:	b7 10 21 20 	imask %e2,1,0,1
8000e1b4:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e1b8:	40 d4       	mov.aa %a4,%a13
8000e1ba:	6d ff da e8 	call 8000b36e <__malloc_unlock>
8000e1be:	d9 e2 08 00 	lea %a2,[%a14]8
8000e1c2:	00 90       	ret 

8000e1c4 <_exit>:
8000e1c4:	76 43       	jz %d4,8000e1ca <_exit+0x6>
8000e1c6:	60 4e       	mov.a %a14,%d4
8000e1c8:	3c 04       	j 8000e1d0 <_exit+0xc>
8000e1ca:	bb d0 00 f9 	mov.u %d15,36877
8000e1ce:	60 fe       	mov.a %a14,%d15
8000e1d0:	00 a0       	debug 
8000e1d2:	3c 00       	j 8000e1d2 <_exit+0xe>

8000e1d4 <sbrk>:
8000e1d4:	91 00 00 f7 	movh.a %a15,28672
8000e1d8:	19 ff b0 40 	ld.w %d15,[%a15]2352 <70000930 <heap_top.2289>>
8000e1dc:	7b 00 00 27 	movh %d2,28672
8000e1e0:	42 f4       	add %d4,%d15
8000e1e2:	1b 82 c9 20 	addi %d2,%d2,3224
8000e1e6:	7f 42 09 80 	jge.u %d2,%d4,8000e1f8 <sbrk+0x24>
8000e1ea:	6d 00 13 00 	call 8000e210 <__errno>
8000e1ee:	da 0c       	mov %d15,12
8000e1f0:	6c 20       	st.w [%a2]0,%d15
8000e1f2:	a0 02       	mov.a %a2,0
8000e1f4:	b0 f2       	add.a %a2,-1
8000e1f6:	00 90       	ret 
8000e1f8:	7b 00 00 27 	movh %d2,28672
8000e1fc:	1b 82 c9 20 	addi %d2,%d2,3224
8000e200:	7f 24 04 80 	jge.u %d4,%d2,8000e208 <sbrk+0x34>
8000e204:	6d 00 0b 00 	call 8000e21a <abort>
8000e208:	59 f4 b0 40 	st.w [%a15]2352,%d4
8000e20c:	60 f2       	mov.a %a2,%d15
8000e20e:	00 90       	ret 

8000e210 <__errno>:
8000e210:	91 00 00 27 	movh.a %a2,28672
8000e214:	d9 22 d0 20 	lea %a2,[%a2]3216 <70000c90 <_my_errno>>
8000e218:	00 90       	ret 

8000e21a <abort>:
8000e21a:	00 a0       	debug 
8000e21c:	7b e0 ea fd 	movh %d15,57006
8000e220:	1b ff ee fb 	addi %d15,%d15,-16657
8000e224:	60 fe       	mov.a %a14,%d15
8000e226:	1d ff cf ff 	j 8000e1c4 <_exit>
8000e22a:	3c 00       	j 8000e22a <abort+0x10>

8000e22c <__eqdf2>:
8000e22c:	20 38       	sub.a %sp,56
8000e22e:	40 a4       	mov.aa %a4,%sp
8000e230:	d9 a5 10 00 	lea %a5,[%sp]16
8000e234:	89 a4 40 09 	st.d [%sp],%e4
8000e238:	89 a6 48 09 	st.d [%sp]8,%e6
8000e23c:	6d ff 85 e5 	call 8000ad46 <__unpack_d>
8000e240:	d9 a4 08 00 	lea %a4,[%sp]8
8000e244:	d9 a5 24 00 	lea %a5,[%sp]36
8000e248:	6d ff 7f e5 	call 8000ad46 <__unpack_d>
8000e24c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e250:	82 12       	mov %d2,1
8000e252:	bf 2f 0c 80 	jlt.u %d15,2,8000e26a <__eqdf2+0x3e>
8000e256:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e25a:	bf 2f 08 80 	jlt.u %d15,2,8000e26a <__eqdf2+0x3e>
8000e25e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e262:	d9 a5 24 00 	lea %a5,[%sp]36
8000e266:	6d 00 0d 01 	call 8000e480 <__fpcmp_parts_d>
8000e26a:	00 90       	ret 

8000e26c <__nedf2>:
8000e26c:	20 38       	sub.a %sp,56
8000e26e:	40 a4       	mov.aa %a4,%sp
8000e270:	d9 a5 10 00 	lea %a5,[%sp]16
8000e274:	89 a4 40 09 	st.d [%sp],%e4
8000e278:	89 a6 48 09 	st.d [%sp]8,%e6
8000e27c:	6d ff 65 e5 	call 8000ad46 <__unpack_d>
8000e280:	d9 a4 08 00 	lea %a4,[%sp]8
8000e284:	d9 a5 24 00 	lea %a5,[%sp]36
8000e288:	6d ff 5f e5 	call 8000ad46 <__unpack_d>
8000e28c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e290:	82 12       	mov %d2,1
8000e292:	bf 2f 0c 80 	jlt.u %d15,2,8000e2aa <__nedf2+0x3e>
8000e296:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e29a:	bf 2f 08 80 	jlt.u %d15,2,8000e2aa <__nedf2+0x3e>
8000e29e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e2a2:	d9 a5 24 00 	lea %a5,[%sp]36
8000e2a6:	6d 00 ed 00 	call 8000e480 <__fpcmp_parts_d>
8000e2aa:	00 90       	ret 

8000e2ac <__gtdf2>:
8000e2ac:	20 38       	sub.a %sp,56
8000e2ae:	40 a4       	mov.aa %a4,%sp
8000e2b0:	d9 a5 10 00 	lea %a5,[%sp]16
8000e2b4:	89 a4 40 09 	st.d [%sp],%e4
8000e2b8:	89 a6 48 09 	st.d [%sp]8,%e6
8000e2bc:	6d ff 45 e5 	call 8000ad46 <__unpack_d>
8000e2c0:	d9 a4 08 00 	lea %a4,[%sp]8
8000e2c4:	d9 a5 24 00 	lea %a5,[%sp]36
8000e2c8:	6d ff 3f e5 	call 8000ad46 <__unpack_d>
8000e2cc:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e2d0:	82 f2       	mov %d2,-1
8000e2d2:	bf 2f 0c 80 	jlt.u %d15,2,8000e2ea <__gtdf2+0x3e>
8000e2d6:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e2da:	bf 2f 08 80 	jlt.u %d15,2,8000e2ea <__gtdf2+0x3e>
8000e2de:	d9 a4 10 00 	lea %a4,[%sp]16
8000e2e2:	d9 a5 24 00 	lea %a5,[%sp]36
8000e2e6:	6d 00 cd 00 	call 8000e480 <__fpcmp_parts_d>
8000e2ea:	00 90       	ret 

8000e2ec <__gedf2>:
8000e2ec:	20 38       	sub.a %sp,56
8000e2ee:	40 a4       	mov.aa %a4,%sp
8000e2f0:	d9 a5 10 00 	lea %a5,[%sp]16
8000e2f4:	89 a4 40 09 	st.d [%sp],%e4
8000e2f8:	89 a6 48 09 	st.d [%sp]8,%e6
8000e2fc:	6d ff 25 e5 	call 8000ad46 <__unpack_d>
8000e300:	d9 a4 08 00 	lea %a4,[%sp]8
8000e304:	d9 a5 24 00 	lea %a5,[%sp]36
8000e308:	6d ff 1f e5 	call 8000ad46 <__unpack_d>
8000e30c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e310:	82 f2       	mov %d2,-1
8000e312:	bf 2f 0c 80 	jlt.u %d15,2,8000e32a <__gedf2+0x3e>
8000e316:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e31a:	bf 2f 08 80 	jlt.u %d15,2,8000e32a <__gedf2+0x3e>
8000e31e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e322:	d9 a5 24 00 	lea %a5,[%sp]36
8000e326:	6d 00 ad 00 	call 8000e480 <__fpcmp_parts_d>
8000e32a:	00 90       	ret 

8000e32c <__ltdf2>:
8000e32c:	20 38       	sub.a %sp,56
8000e32e:	40 a4       	mov.aa %a4,%sp
8000e330:	d9 a5 10 00 	lea %a5,[%sp]16
8000e334:	89 a4 40 09 	st.d [%sp],%e4
8000e338:	89 a6 48 09 	st.d [%sp]8,%e6
8000e33c:	6d ff 05 e5 	call 8000ad46 <__unpack_d>
8000e340:	d9 a4 08 00 	lea %a4,[%sp]8
8000e344:	d9 a5 24 00 	lea %a5,[%sp]36
8000e348:	6d ff ff e4 	call 8000ad46 <__unpack_d>
8000e34c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e350:	82 12       	mov %d2,1
8000e352:	bf 2f 0c 80 	jlt.u %d15,2,8000e36a <__ltdf2+0x3e>
8000e356:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e35a:	bf 2f 08 80 	jlt.u %d15,2,8000e36a <__ltdf2+0x3e>
8000e35e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e362:	d9 a5 24 00 	lea %a5,[%sp]36
8000e366:	6d 00 8d 00 	call 8000e480 <__fpcmp_parts_d>
8000e36a:	00 90       	ret 

8000e36c <__fixdfsi>:
8000e36c:	20 20       	sub.a %sp,32
8000e36e:	d9 a4 20 00 	lea %a4,[%sp]32
8000e372:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000e376:	d9 a5 0c 00 	lea %a5,[%sp]12
8000e37a:	6d ff e6 e4 	call 8000ad46 <__unpack_d>
8000e37e:	0c ac       	ld.bu %d15,[%sp]12
8000e380:	82 02       	mov %d2,0
8000e382:	bf 3f 1b 80 	jlt.u %d15,3,8000e3b8 <__fixdfsi+0x4c>
8000e386:	5e 48       	jne %d15,4,8000e396 <__fixdfsi+0x2a>
8000e388:	7b 00 00 28 	movh %d2,32768
8000e38c:	58 04       	ld.w %d15,[%sp]16
8000e38e:	1b f2 ff 3f 	addi %d3,%d2,-1
8000e392:	6a 32       	cmovn %d2,%d15,%d3
8000e394:	00 90       	ret 
8000e396:	19 a6 14 00 	ld.w %d6,[%sp]20
8000e39a:	82 02       	mov %d2,0
8000e39c:	0e 6e       	jltz %d6,8000e3b8 <__fixdfsi+0x4c>
8000e39e:	8b f6 81 f2 	ge %d15,%d6,31
8000e3a2:	ee f3       	jnz %d15,8000e388 <__fixdfsi+0x1c>
8000e3a4:	09 a4 58 09 	ld.d %e4,[%sp]24
8000e3a8:	8b c6 03 61 	rsub %d6,%d6,60
8000e3ac:	6d ff cb e0 	call 8000a542 <__lshrdi3>
8000e3b0:	58 04       	ld.w %d15,[%sp]16
8000e3b2:	8b 02 00 41 	rsub %d4,%d2,0
8000e3b6:	2a 42       	cmov %d2,%d15,%d4
8000e3b8:	00 90       	ret 

8000e3ba <__udivdi3>:
8000e3ba:	0f 67 a0 20 	or %d2,%d7,%d6
8000e3be:	0b 45 10 a8 	mov %e10,%d5,%d4
8000e3c2:	02 6f       	mov %d15,%d6
8000e3c4:	02 7c       	mov %d12,%d7
8000e3c6:	d2 f8       	mov %e8,-1
8000e3c8:	df 02 46 00 	jeq %d2,0,8000e454 <__udivdi3+0x9a>
8000e3cc:	8f 07 40 21 	or %d2,%d7,0
8000e3d0:	f6 2d       	jnz %d2,8000e3ea <__udivdi3+0x30>
8000e3d2:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000e3d6:	d2 04       	mov %e4,0
8000e3d8:	02 a4       	mov %d4,%d10
8000e3da:	42 95       	add %d5,%d9
8000e3dc:	6d 00 a5 00 	call 8000e526 <__udiv6432>
8000e3e0:	82 04       	mov %d4,0
8000e3e2:	02 85       	mov %d5,%d8
8000e3e4:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000e3e8:	3c 36       	j 8000e454 <__udivdi3+0x9a>
8000e3ea:	0b 7b 00 21 	eq %d2,%d11,%d7
8000e3ee:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000e3f2:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000e3f6:	d2 08       	mov %e8,0
8000e3f8:	df 02 2e 80 	jne %d2,0,8000e454 <__udivdi3+0x9a>
8000e3fc:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000e400:	0f 07 b0 d1 	clz %d13,%d7
8000e404:	60 5f       	mov.a %a15,%d5
8000e406:	0b 67 10 48 	mov %e4,%d7,%d6
8000e40a:	02 d6       	mov %d6,%d13
8000e40c:	6d ff bf e3 	call 8000ab8a <__ashldi3>
8000e410:	8f fb 1f e0 	sh %d14,%d11,-1
8000e414:	80 f4       	mov.d %d4,%a15
8000e416:	02 36       	mov %d6,%d3
8000e418:	02 e5       	mov %d5,%d14
8000e41a:	6d 00 86 00 	call 8000e526 <__udiv6432>
8000e41e:	8b fd 01 d1 	rsub %d13,%d13,31
8000e422:	8b 0d 00 31 	rsub %d3,%d13,0
8000e426:	0f 32 00 30 	sh %d3,%d2,%d3
8000e42a:	02 32       	mov %d2,%d3
8000e42c:	8b f2 9f 80 	addx %d8,%d2,-1
8000e430:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000e434:	82 03       	mov %d3,0
8000e436:	8b f3 bf 90 	addc %d9,%d3,-1
8000e43a:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000e43e:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000e442:	0b cb 00 41 	eq %d4,%d11,%d12
8000e446:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000e44a:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000e44e:	f6 43       	jnz %d4,8000e454 <__udivdi3+0x9a>
8000e450:	0b 23 10 88 	mov %e8,%d3,%d2
8000e454:	0b 89 10 28 	mov %e2,%d9,%d8
8000e458:	00 90       	ret 

8000e45a <__umoddi3>:
8000e45a:	0f 67 a0 90 	or %d9,%d7,%d6
8000e45e:	02 6f       	mov %d15,%d6
8000e460:	d2 00       	mov %e0,0
8000e462:	76 9c       	jz %d9,8000e47a <__umoddi3+0x20>
8000e464:	02 7a       	mov %d10,%d7
8000e466:	0b 45 10 88 	mov %e8,%d5,%d4
8000e46a:	6d ff a8 ff 	call 8000e3ba <__udivdi3>
8000e46e:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000e472:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000e476:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000e47a:	0b 01 10 28 	mov %e2,%d1,%d0
8000e47e:	00 90       	ret 

8000e480 <__fpcmp_parts_d>:
8000e480:	14 43       	ld.bu %d3,[%a4]
8000e482:	82 12       	mov %d2,1
8000e484:	bf 23 50 80 	jlt.u %d3,2,8000e524 <__fpcmp_parts_d+0xa4>
8000e488:	0c 50       	ld.bu %d15,[%a5]0
8000e48a:	bf 2f 4d 80 	jlt.u %d15,2,8000e524 <__fpcmp_parts_d+0xa4>
8000e48e:	8b 43 00 42 	eq %d4,%d3,4
8000e492:	8b 4f 00 22 	eq %d2,%d15,4
8000e496:	0f 24 80 50 	and %d5,%d4,%d2
8000e49a:	76 56       	jz %d5,8000e4a6 <__fpcmp_parts_d+0x26>
8000e49c:	19 52 04 00 	ld.w %d2,[%a5]4
8000e4a0:	4c 41       	ld.w %d15,[%a4]4
8000e4a2:	a2 f2       	sub %d2,%d15
8000e4a4:	00 90       	ret 
8000e4a6:	76 47       	jz %d4,8000e4b4 <__fpcmp_parts_d+0x34>
8000e4a8:	19 42 04 00 	ld.w %d2,[%a4]4
8000e4ac:	82 1f       	mov %d15,1
8000e4ae:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e4b2:	00 90       	ret 
8000e4b4:	76 27       	jz %d2,8000e4c2 <__fpcmp_parts_d+0x42>
8000e4b6:	19 52 04 00 	ld.w %d2,[%a5]4
8000e4ba:	82 ff       	mov %d15,-1
8000e4bc:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e4c0:	00 90       	ret 
8000e4c2:	df 23 06 80 	jne %d3,2,8000e4ce <__fpcmp_parts_d+0x4e>
8000e4c6:	82 02       	mov %d2,0
8000e4c8:	df 2f f7 ff 	jne %d15,2,8000e4b6 <__fpcmp_parts_d+0x36>
8000e4cc:	00 90       	ret 
8000e4ce:	df 2f ed 7f 	jeq %d15,2,8000e4a8 <__fpcmp_parts_d+0x28>
8000e4d2:	19 45 04 00 	ld.w %d5,[%a4]4
8000e4d6:	4c 51       	ld.w %d15,[%a5]4
8000e4d8:	5f f5 19 80 	jne %d5,%d15,8000e50a <__fpcmp_parts_d+0x8a>
8000e4dc:	19 42 08 00 	ld.w %d2,[%a4]8
8000e4e0:	4c 52       	ld.w %d15,[%a5]8
8000e4e2:	3f 2f 14 00 	jlt %d15,%d2,8000e50a <__fpcmp_parts_d+0x8a>
8000e4e6:	3f f2 1c 00 	jlt %d2,%d15,8000e51e <__fpcmp_parts_d+0x9e>
8000e4ea:	19 43 10 00 	ld.w %d3,[%a4]16
8000e4ee:	19 54 10 00 	ld.w %d4,[%a5]16
8000e4f2:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e4f6:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e4fa:	0b 43 00 21 	eq %d2,%d3,%d4
8000e4fe:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e502:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e506:	3a 43       	eq %d15,%d3,%d4
8000e508:	f6 25       	jnz %d2,8000e512 <__fpcmp_parts_d+0x92>
8000e50a:	82 12       	mov %d2,1
8000e50c:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e510:	00 90       	ret 
8000e512:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e516:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e51a:	82 02       	mov %d2,0
8000e51c:	ee 04       	jnz %d15,8000e524 <__fpcmp_parts_d+0xa4>
8000e51e:	82 f2       	mov %d2,-1
8000e520:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e524:	00 90       	ret 

8000e526 <__udiv6432>:
8000e526:	02 53       	mov %d3,%d5
8000e528:	82 f2       	mov %d2,-1
8000e52a:	7f 65 4b 80 	jge.u %d5,%d6,8000e5c0 <__udiv6432+0x9a>
8000e52e:	0f 06 b0 21 	clz %d2,%d6
8000e532:	0f 26 00 60 	sh %d6,%d6,%d2
8000e536:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e53a:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e53e:	8f 06 1f 70 	sh %d7,%d6,-16
8000e542:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e546:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e54a:	0f 24 00 20 	sh %d2,%d4,%d2
8000e54e:	02 05       	mov %d5,%d0
8000e550:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e554:	e2 80       	mul %d0,%d8
8000e556:	8f 02 1f b0 	sh %d11,%d2,-16
8000e55a:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e55e:	82 0c       	mov %d12,0
8000e560:	7b 10 00 90 	movh %d9,1
8000e564:	7f 95 09 80 	jge.u %d5,%d9,8000e576 <__udiv6432+0x50>
8000e568:	8f 01 01 f0 	sh %d15,%d1,16
8000e56c:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e570:	42 bf       	add %d15,%d11
8000e572:	7f af 07 80 	jge.u %d15,%d10,8000e580 <__udiv6432+0x5a>
8000e576:	42 71       	add %d1,%d7
8000e578:	c2 f5       	add %d5,-1
8000e57a:	a2 8c       	sub %d12,%d8
8000e57c:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e564 <__udiv6432+0x3e>
8000e580:	8f 03 01 30 	sh %d3,%d3,16
8000e584:	42 3b       	add %d11,%d3
8000e586:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e58a:	82 0a       	mov %d10,0
8000e58c:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e590:	7b 10 00 10 	movh %d1,1
8000e594:	02 03       	mov %d3,%d0
8000e596:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e59a:	e2 80       	mul %d0,%d8
8000e59c:	7f 13 09 80 	jge.u %d3,%d1,8000e5ae <__udiv6432+0x88>
8000e5a0:	8f 06 01 f0 	sh %d15,%d6,16
8000e5a4:	0b 0a 00 90 	add %d9,%d10,%d0
8000e5a8:	42 2f       	add %d15,%d2
8000e5aa:	7f 9f 07 80 	jge.u %d15,%d9,8000e5b8 <__udiv6432+0x92>
8000e5ae:	42 76       	add %d6,%d7
8000e5b0:	c2 f3       	add %d3,-1
8000e5b2:	a2 8a       	sub %d10,%d8
8000e5b4:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e59c <__udiv6432+0x76>
8000e5b8:	8f 05 01 50 	sh %d5,%d5,16
8000e5bc:	0b 53 00 20 	add %d2,%d3,%d5
8000e5c0:	00 90       	ret 
8000e5c2:	00 00       	nop 
8000e5c4:	00 00       	nop 
	...
