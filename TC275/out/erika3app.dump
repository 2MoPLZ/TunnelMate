
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
<<<<<<< HEAD
<<<<<<< HEAD
         filesz 0x0000e778 memsz 0x0000e778 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e798 align 2**14
         filesz 0x00000940 memsz 0x00000940 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000f0d8 align 2**14
=======
         filesz 0x0000e860 memsz 0x0000e860 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e880 align 2**14
         filesz 0x00000958 memsz 0x00000958 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000f1d8 align 2**14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00014958 vaddr 0x70000958 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x000005d8 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000f1d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000f200 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000f200 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
<<<<<<< HEAD
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000f100 align 2**14
=======
         filesz 0x0000e5a8 memsz 0x0000e5a8 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e5c8 align 2**14
         filesz 0x00000938 memsz 0x00000938 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00014938 vaddr 0x70000938 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000360 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000ef00 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000ef00 align 2**14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000f200 align 2**14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000011d8  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
<<<<<<< HEAD
  2 .bss          000005d8  70000940  8000f0d8  00014940  2**3
                  ALLOC
  3 .data         00000940  70000000  8000e798  00014000  2**3
=======
  2 .bss          00000360  70000938  8000ef00  00014938  2**3
                  ALLOC
  3 .data         00000938  70000000  8000e5c8  00014000  2**3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
  2 .bss          000005d8  70000958  8000f1d8  00014958  2**3
                  ALLOC
  3 .data         00000958  70000000  8000e880  00014000  2**3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001200  80001200  00005200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001300  80001300  00005300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001308  80001308  00005308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
<<<<<<< HEAD
<<<<<<< HEAD
  8 .text         0000a798  80004000  80004000  00008000  2**3
=======
  8 .text         0000a880  80004000  80004000  00008000  2**3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000f1d8  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000f1d8  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000f200  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000f1d8  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000f1d8  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000f200  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000f1d8  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000f1d8  00015700  2**3
                  ALLOC, CPU0
<<<<<<< HEAD
 17 .CPU0.csa     00002000  70019c00  8000f100  00015c00  2**6
=======
  8 .text         0000a5c8  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000ef00  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000ef00  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000ef00  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000ef00  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000ef00  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000ef00  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000ef00  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000ef00  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000ef00  00015c00  2**6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
 17 .CPU0.csa     00002000  70019c00  8000f200  00015c00  2**6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014958  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
<<<<<<< HEAD
 19 .debug_aranges 00000d28  00000000  00000000  00014998  2**3
=======
 19 .debug_aranges 00000d28  00000000  00000000  000149b0  2**3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000cb928  00000000  00000000  000156d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000c375  00000000  00000000  000e1000  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000d03b  00000000  00000000  000ed375  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00002390  00000000  00000000  000fa3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0000219c  00000000  00000000  000fc740  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00014081  00000000  00000000  000fe8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001370  00000000  00000000  0011295d  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 27 .version_info 0004ad67  00000000  00000000  001113c2  2**0
=======
 19 .debug_aranges 00000d48  00000000  00000000  00014990  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000c31d7  00000000  00000000  000156d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000c0c3  00000000  00000000  000d88af  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000e157  00000000  00000000  000e4972  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  000022e8  00000000  00000000  000f2acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00002022  00000000  00000000  000f4db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00013e6b  00000000  00000000  000f6dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001448  00000000  00000000  0010ac41  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004c67a  00000000  00000000  0010c089  2**0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
 27 .version_info 0004ad67  00000000  00000000  00113ccd  2**0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000958 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001200 l    d  .traptab	00000000 .traptab
80001300 l    d  .ctors	00000000 .ctors
80001308 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 Button_Driver.c
00000000 l    df *ABS*	00000000 asw.c
<<<<<<< HEAD
<<<<<<< HEAD
70000000 l     O .data	00000004 c.16144
=======
70000000 l     O .data	00000004 c.15761
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
70000000 l     O .data	00000004 c.16159
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
8000015c l     O .rodata	0000001c osEE_tdb_ptr_array
80000150 l     O .rodata	00000004 osEE_res_db_ptr_array
80000178 l     O .rodata	000000e0 osEE_tdb_array
70000038 l     O .data	00000030 osEE_sn_array
80000154 l     O .rodata	00000008 osEE_res_db_array
70000c0c l     O .bss	0000000c osEE_res_cb_array
80000258 l     O .rodata	00000008 osEE_sdb_array
70000c18 l     O .bss	00000004 osEE_scb_array
70000068 l     O .data	0000008c osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
80000260 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
<<<<<<< HEAD
700000f8 l     O .data	00000004 IfxScuCcu_xtalFrequency
<<<<<<< HEAD
8000609c l     F .text	00000034 IfxScuCcu_wait
80000b1c l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
=======
700000f0 l     O .data	00000004 IfxScuCcu_xtalFrequency
80006040 l     F .text	00000034 IfxScuCcu_wait
80000ab8 l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060d0 l     F .text	00000034 IfxScuCcu_wait
80000b34 l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000dd0 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 infotainment_System.c
70000c20 l     O .bss	00000020 buf
70000c40 l     O .bss	00000004 infoState
70000c44 l     O .bss	0000001c infotainmentArr
80000eb0 l     O .rodata	0000001c stateMaxArr
00000000 l    df *ABS*	00000000 uart_Driver.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
7000052c l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000f4c l     O .rodata	00000010 blanks.4035
80000f3c l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
<<<<<<< HEAD
<<<<<<< HEAD
8000c9ac l     F .text	0000011a quorem
=======
8000c80c l     F .text	0000011a quorem
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000ca98 l     F .text	0000011a quorem
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000000 l    df *ABS*	00000000 locale.c
80000f78 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000fb0 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 ultrasonic_Driver.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000950 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
<<<<<<< HEAD
<<<<<<< HEAD
80009862 l     F .text	0000000e osEE_tc_isr2_wrapper
=======
80009644 l     F .text	0000000e osEE_tc_isr2_wrapper
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000994e l     F .text	0000000e osEE_tc_isr2_wrapper
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000000 l    df *ABS*	00000000 Lcd_Driver.c
8000404e l     F .text	00000060 lcd_write4bits
800040ae l     F .text	00000020 lcd_command
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
<<<<<<< HEAD
00000000 l    df *ABS*	00000000 photoresistor_Driver.c
00000000 l    df *ABS*	00000000 ultrasonic_Driver.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
<<<<<<< HEAD
80009392 l     F .text	00000054 osEE_tc_stm_us_ticks
70000ec8 l     O .bss	00000004 osEE_tc_stm_freq_khz
=======
00000000 l    df *ABS*	00000000 ee_tc_system.c
8000947e l     F .text	00000054 osEE_tc_stm_us_ticks
70000ee0 l     O .bss	00000004 osEE_tc_stm_freq_khz
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
8000995c l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
<<<<<<< HEAD
8000a134 l     F .text	00000022 osEE_release_all_m
=======
80009174 l     F .text	00000054 osEE_tc_stm_us_ticks
70000c48 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
80009654 l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
80009f18 l     F .text	00000022 osEE_release_all_m
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a220 l     F .text	00000022 osEE_release_all_m
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
<<<<<<< HEAD
<<<<<<< HEAD
8000a62a l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a7b6 l     F .text	0000019c _fpadd_parts
=======
8000a40e l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a5e6 l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a716 l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a8a2 l     F .text	0000019c _fpadd_parts
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
<<<<<<< HEAD
<<<<<<< HEAD
80000450 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
80008954 g     F .text	0000001c printStateBlue
=======
800003ec g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
800088f8 g     F .text	0000001c printStateBlue
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000468 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
80008988 g     F .text	0000001c printStateBlue
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000018 g     O .data	00000020 osEE_ccb_var
70000f30 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
<<<<<<< HEAD
<<<<<<< HEAD
80005890 g     F .text	00000062 IfxAsclin_Asc_write
80008e58 g     F .text	00000094 measureEchoTick
8000512e g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
800071b8 g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
=======
800058c4 g     F .text	00000062 IfxAsclin_Asc_write
80008f06 g     F .text	000000ce measureEchoTick
80005162 g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
800071ec g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
80007420 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000fbc g     O .rodata	00000028 __mprec_tinytens
80000b78 g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
8000ae14 g     F .text	0000001a .hidden __ashldi3
80007182 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
<<<<<<< HEAD
80009be0 g     F .text	0000005a TerminateTask
800051aa g     F .text	00000006 IfxAsclin_Asc_resetSendCount
80000250 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
=======
80005834 g     F .text	00000062 IfxAsclin_Asc_write
80008c3a g     F .text	00000094 measureEchoTick
800050d2 g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
8000715c g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
80007390 g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000f20 g     O .rodata	00000028 __mprec_tinytens
80000afc g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
8000437e g     F .text	000000e8 mdelay
8000ab8a g     F .text	0000001a .hidden __ashldi3
800070f2 g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
800099c4 g     F .text	0000005a TerminateTask
8000514e g     F .text	00000006 IfxAsclin_Asc_resetSendCount
800001ec g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
70000bf0 g     O .bss	00000004 osEE_kcb_var
80000400 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
<<<<<<< HEAD
80008196 g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004c5a g     F .text	00000014 IfxVadc_setScan
8000e3cc g     F .text	00000040 .hidden __eqdf2
800057c0 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
800070e2 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
800048cc g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
8000844c g     F .text	00000176 Ifx_Fifo_read
80004cb4 g     F .text	0000001c IfxAsclin_disableModule
800007a0 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
8000a20a g     F .text	00000022 osEE_idle_hook_wrapper
=======
8000813a g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004bfe g     F .text	00000014 IfxVadc_setScan
8000e22c g     F .text	00000040 .hidden __eqdf2
80005764 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80007086 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
80004870 g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
800083f0 g     F .text	00000176 Ifx_Fifo_read
80004c58 g     F .text	0000001c IfxAsclin_disableModule
8000073c g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
80009fee g     F .text	00000022 osEE_idle_hook_wrapper
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ccc g     F .text	0000005a TerminateTask
800051de g     F .text	00000006 IfxAsclin_Asc_resetSendCount
80000268 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000c08 g     O .bss	00000004 osEE_kcb_var
80000418 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
800081ca g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004c8e g     F .text	00000014 IfxVadc_setScan
8000e4b8 g     F .text	00000040 .hidden __eqdf2
800057f4 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80007116 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
80004900 g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
80008480 g     F .text	00000176 Ifx_Fifo_read
80004ce8 g     F .text	0000001c IfxAsclin_disableModule
800007b8 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
8000a2f6 g     F .text	00000022 osEE_idle_hook_wrapper
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80008c2e g     F .text	0000006e myprintfSerial
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
<<<<<<< HEAD
<<<<<<< HEAD
80008f26 g     F .text	0000046c osEE_tc_core0_start
=======
80009012 g     F .text	0000046c osEE_tc_core0_start
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
80008346 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
8000765a g     F .text	00000108 IfxVadc_Adc_getChannelConfig
800048b0 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
8000a776 g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
8000698c g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000a63e g     F .text	00000028 osEE_change_context_from_running
80005154 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
800007d8 g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
800070ac g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
800052a0 g     F .text	00000014 IfxAsclin_Asc_clearTx
80005942 g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
<<<<<<< HEAD
8000b50c g     F .text	00000002 __malloc_unlock
8000510a g     F .text	0000000a IfxAsclin_Asc_getReadEvent
8000422e g     F .text	000000dc TimerISR
800085f8 g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007f5e g     F .text	000000e8 IfxVadc_Adc_initModule
=======
80008d08 g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
800082b6 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
800075ca g     F .text	00000108 IfxVadc_Adc_getChannelConfig
80004820 g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
8000a46e g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
800068fc g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000a336 g     F .text	00000028 osEE_change_context_from_running
800050c4 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
8000075c g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
8000701c g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
80005210 g     F .text	00000014 IfxAsclin_Asc_clearTx
800058b2 g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000b36e g     F .text	00000002 __malloc_unlock
800050ae g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80004244 g     F .text	0000005a TimerISR
8000859c g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007f02 g     F .text	000000e8 IfxVadc_Adc_initModule
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000b5f8 g     F .text	00000002 __malloc_unlock
8000513e g     F .text	0000000a IfxAsclin_Asc_getReadEvent
80004250 g     F .text	000000dc TimerISR
8000862c g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007f92 g     F .text	000000e8 IfxVadc_Adc_initModule
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
70000c60 g     O .bss	0000000b g_RecievedActuatorPacket
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
<<<<<<< HEAD
<<<<<<< HEAD
80004796 g     F .text	0000003c IfxVadc_disablePostCalibration
=======
800047ca g     F .text	0000003c IfxVadc_disablePostCalibration
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
800049ae g     F .text	00000028 IfxVadc_getSrcAddress
800049fa g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004e12 g     F .text	00000024 IfxAsclin_getOvsFrequency
8000a0e6 g     F .text	00000096 SetEvent
80007762 g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
8000706e g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
8000a242 g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000d80 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
80000588 g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000e000 g     F .text	00000050 memmove
800088a4 g     F .text	00000002 syncInfoState
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d8c6 g     F .text	00000056 _Balloc
80000d60 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
80000878 g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
80000658 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
800062a6 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006418 g     F .text	000003be IfxScuCcu_init
8000e538 g     F .text	00000040 .hidden __gtdf2
8000e49c  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800099ac g     F .text	00000042 SuspendAllInterrupts
800051e4 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
80000858 g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
8000a7e4 g     F .text	00000066 osEE_hal_terminate_ctx
80000308 g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000a388 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009ff4 g     F .text	00000078 GetTaskState
80008188 g     F .text	00000020 Ifx_CircularBuffer_get32
8000a43a g     F .text	00000022 osEE_task_event_set_mask
80000398 g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
800007c8 g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
80007456 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005ba8 g     F .text	00000092 IfxPort_setGroupModeOutput
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005ff6 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
<<<<<<< HEAD
70000f08 g     O .bss	00000004 errno
8000acce g     F .text	0000001e .hidden __make_dp
=======
8000473a g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
8000491e g     F .text	00000028 IfxVadc_getSrcAddress
8000496a g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004d82 g     F .text	00000024 IfxAsclin_getOvsFrequency
80009dde g     F .text	00000096 SetEvent
800076d2 g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
80006fde g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
80009f3a g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000d04 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
8000050c g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000dd74 g     F .text	00000050 memmove
80008814 g     F .text	00000002 syncInfoState
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d63a g     F .text	00000056 _Balloc
80000ce4 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
800007fc g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
800005dc g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80006216 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006388 g     F .text	000003be IfxScuCcu_init
8000e2ac g     F .text	00000040 .hidden __gtdf2
8000e210  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800096a4 g     F .text	00000042 SuspendAllInterrupts
80005154 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
800007dc g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
8000a4dc g     F .text	00000066 osEE_hal_terminate_ctx
8000028c g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000a080 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009cec g     F .text	00000078 GetTaskState
800080f8 g     F .text	00000020 Ifx_CircularBuffer_get32
8000a132 g     F .text	00000022 osEE_task_event_set_mask
8000031c g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
8000074c g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
800073c6 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005b18 g     F .text	00000092 IfxPort_setGroupModeOutput
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_4
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005f66 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000c88 g     O .bss	00000004 errno
8000aafe g     F .text	0000001e .hidden __make_dp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
70000f20 g     O .bss	00000004 errno
8000adba g     F .text	0000001e .hidden __make_dp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001260 g       .traptab	00000000 osEE_tc_trap_context
<<<<<<< HEAD
<<<<<<< HEAD
800075a4 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
=======
80007548 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800075d8 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
80000768 g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
80000908 g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
800005c8 g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
<<<<<<< HEAD
<<<<<<< HEAD
8000adbc g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
80004512 g     F .text	0000007e initVADCChannels
=======
8000ac1e g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
800044b6 g     F .text	0000007e initVADCChannels
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000aea8 g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
80004534 g     F .text	0000007e initVADCChannels
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
80000338 g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000c60 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000cd8 g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
<<<<<<< HEAD
<<<<<<< HEAD
800070aa g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
8000a0c2 g     F .text	00000058 ClearEvent
80006336 g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
8000a160 g     F .text	000000aa osEE_scheduler_task_wrapper_run
=======
8000704e g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
80009ea6 g     F .text	00000058 ClearEvent
800062da g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
80009f44 g     F .text	000000aa osEE_scheduler_task_wrapper_run
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070de g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
8000a1ae g     F .text	00000058 ClearEvent
8000636a g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
8000a24c g     F .text	000000aa osEE_scheduler_task_wrapper_run
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
800006a8 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
<<<<<<< HEAD
<<<<<<< HEAD
800009c0 g     O .rodata	00000080 IfxPort_cfg_indexMap
80005412 g     F .text	000003ae IfxAsclin_Asc_initModule
8000a4ee g     F .text	00000026 osEE_scheduler_task_preemption_point
8000421a g     F .text	00000014 FuncTaskUltrasonic
8000d7be g     F .text	0000001c memcpy
=======
800009d8 g     O .rodata	00000080 IfxPort_cfg_indexMap
80005446 g     F .text	000003ae IfxAsclin_Asc_initModule
8000a5da g     F .text	00000026 osEE_scheduler_task_preemption_point
8000421a g     F .text	00000036 FuncTaskUltrasonic
8000d8aa g     F .text	0000001c memcpy
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
8000b8f4 g     F .text	000011a4 _svfprintf_r
8000ad72 g     F .text	00000048 .hidden __floatsidf
8000779a g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006f40 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000a3d0 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000e5b8 g     F .text	00000040 .hidden __ltdf2
800049a4 g     F .text	0000000a IfxVadc_getScanStatus
80001310 g       .dtors	00000000 __DTOR_END__
8000699e g     F .text	00000076 IfxScuCcu_setCpuFrequency
80007080 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000a686 g     F .text	00000026 osEE_idle_task_terminate
80000cc4 g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
800088a6 g     F .text	00000002 updatePacket
800008f8 g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80000728 g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000de6c g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
8000714e g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
800072e8 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
8000a514 g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000b142 g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006db0 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
80000788 g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
8000985c g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001240 g       .traptab	00000000 osEE_tc_trap_instruction
8000100c g     O .rodata	000000c8 __mprec_tens
70000010 g     O .data	00000004 g_vadcChannelIDs
80005288 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
800041ec g     F .text	0000002e ButtonISR
<<<<<<< HEAD
80009cae g     F .text	000000b2 GetResource
80000410 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000500 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000b58a g     F .text	00000016 vsnprintf
=======
8000095c g     O .rodata	00000080 IfxPort_cfg_indexMap
800053b6 g     F .text	000003ae IfxAsclin_Asc_initModule
8000a2d2 g     F .text	00000026 osEE_scheduler_task_preemption_point
80004214 g     F .text	00000002 FuncTaskUltrasonic
8000d61e g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
800041ec g     F .text	00000024 FuncTask1
8000b668 g     F .text	000011a4 _svfprintf_r
8000aab6 g     F .text	00000048 .hidden __floatsidf
8000770a g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006eb0 g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000a0c8 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000e32c g     F .text	00000040 .hidden __ltdf2
80004914 g     F .text	0000000a IfxVadc_getScanStatus
80001310 g       .dtors	00000000 __DTOR_END__
8000690e g     F .text	00000076 IfxScuCcu_setCpuFrequency
80006ff0 g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000a37e g     F .text	00000026 osEE_idle_task_terminate
80000c48 g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
80008816 g     F .text	00000002 updatePacket
8000087c g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
800006ac g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000dbe0 g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
800070be g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
80007258 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
8000a20c g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000aeb8 g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006d20 g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
8000070c g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
80009552 g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001240 g       .traptab	00000000 osEE_tc_trap_instruction
80000f70 g     O .rodata	000000c8 __mprec_tens
70000008 g     O .data	00000004 g_vadcChannelIDs
800051f8 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
80004216 g     F .text	0000002e ButtonISR
80009a92 g     F .text	000000b2 GetResource
800003ac g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
8000049c g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000b3ec g     F .text	00000016 vsnprintf
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d9a g     F .text	000000b2 GetResource
80000428 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000518 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000b676 g     F .text	00000016 vsnprintf
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
80000958 g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
<<<<<<< HEAD
<<<<<<< HEAD
70000f00 g     O .bss	00000004 __malloc_top_pad
800045b2 g     F .text	00000026 readADCValue
800088e4 g     F .text	0000001c printStateOn
800069e0 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005d00 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a6ae g     F .text	0000002c osEE_hal_ready2stacked
=======
70000f18 g     O .bss	00000004 __malloc_top_pad
800045d4 g     F .text	00000026 readADCValue
80008918 g     F .text	0000001c printStateOn
80006a14 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005d34 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a79a g     F .text	0000002c osEE_hal_ready2stacked
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000c38 g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
800082f6 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d888 g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004dd8 g     F .text	00000022 IfxAsclin_getIndex
8000da58 g     F .text	00000010 __i2b
80009d26 g     F .text	00000074 Schedule
80004e36 g     F .text	00000016 IfxAsclin_getShiftFrequency
800079d8 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
80000328 g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006c76 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
80000748 g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
80007344 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000b5fa g     F .text	0000001e _sbrk_r
800004d8 g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000cf8 g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
800004e8 g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
8000896c g     F .text	0000001c printStateGreen
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000978 g     O .bss	0000000c g_vadcGroup
80006ef4 g     F .text	00000026 IfxScuEru_enableAutoClear
80000738 g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
80008d98 g     F .text	0000001a serialize_sensor_packet
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000afd0 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
<<<<<<< HEAD
80005da6 g     F .text	0000003c IfxPort_setPinPadDriver
=======
70000c80 g     O .bss	00000004 __malloc_top_pad
80004556 g     F .text	00000026 readADCValue
80008888 g     F .text	0000001c printStateOn
80006984 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005ca4 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a492 g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000bbc g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80008266 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d5fc g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004d48 g     F .text	00000022 IfxAsclin_getIndex
8000d7cc g     F .text	00000010 __i2b
80009a1e g     F .text	00000074 Schedule
80004da6 g     F .text	00000016 IfxAsclin_getShiftFrequency
80007948 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
800002ac g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006be6 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
800006cc g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
800072b4 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000b370 g     F .text	0000001e _sbrk_r
8000045c g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000c7c g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
8000046c g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
800088dc g     F .text	0000001c printStateGreen
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000958 g     O .bss	0000000c g_vadcGroup
80006e64 g     F .text	00000026 IfxScuEru_enableAutoClear
800006bc g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000ad46 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005d4a g     F .text	0000003c IfxPort_setPinPadDriver
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005dda g     F .text	0000003c IfxPort_setPinPadDriver
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
80000498 g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000f14 g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800012a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
<<<<<<< HEAD
<<<<<<< HEAD
8000a784 g     F .text	00000032 .hidden __extendsfdf2
=======
8000a870 g     F .text	00000032 .hidden __extendsfdf2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80008d28 g     F .text	00000048 readActuatorPacket
80004d4e g     F .text	00000016 IfxAsclin_getAddress
8000aa3e g     F .text	00000038 .hidden __adddf3
800041a8 g     F .text	0000000e lcd_goto
80009b58 g     F .text	0000001a GetActiveApplicationMode
800062f0 g     F .text	0000007a IfxScuCcu_getSriFrequency
80008ea0 g     F .text	00000066 sendTrigger
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800099ee g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
<<<<<<< HEAD
80006bc2 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e62c g     F .text	00000026 .hidden __umoddi3
=======
8000a5b4 g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80004cbe g     F .text	00000016 IfxAsclin_getAddress
8000a782 g     F .text	00000038 .hidden __adddf3
800041a8 g     F .text	0000000e lcd_goto
80009850 g     F .text	0000001a GetActiveApplicationMode
80006260 g     F .text	0000007a IfxScuCcu_getSriFrequency
80008c1e g     F .text	0000001c sendTrigger
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800096e6 g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006b66 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e45a g     F .text	00000026 .hidden __umoddi3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006bf6 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e718 g     F .text	00000026 .hidden __umoddi3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
<<<<<<< HEAD
<<<<<<< HEAD
80000910 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000ee8 g     O .rodata	00000004 _global_impure_ptr
80006dcc g     F .text	00000036 IfxScuEru_connectTrigger
70000940 g     O .bss	00000020 g_vadcChannel
80006378 g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000df74 g     F .text	000003f0 _realloc_r
800006f0 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004e54 g     F .text	00000012 IfxAsclin_read16
80008874 g     F .text	0000001c printStateLv1
80005aa8 g     F .text	0000003c IfxPort_enableEmergencyStop
80000340 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
=======
80000928 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000f00 g     O .rodata	00000004 _global_impure_ptr
80006e00 g     F .text	00000036 IfxScuEru_connectTrigger
70000958 g     O .bss	00000020 g_vadcChannel
800063ac g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000e060 g     F .text	000003f0 _realloc_r
80000708 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004e88 g     F .text	00000012 IfxAsclin_read16
800088a8 g     F .text	0000001c printStateLv1
80005adc g     F .text	0000003c IfxPort_enableEmergencyStop
80000358 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000e678 g     F .text	000000a0 .hidden __udivdi3
800008d8 g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
80000368 g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
8000a318 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
80000528 g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
800040ce g     F .text	0000000a lcd_clear
80000fe4 g     O .rodata	00000028 __mprec_bigtens
8000e4a6 g     F .text	00000012 abort
8000e646 g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000dcb8 g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
800052b4 g     F .text	0000001c IfxAsclin_Asc_read
80009b72 g     F .text	00000084 ActivateTask
80000c74 g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006e5c g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
8000834a g     F .text	0000003a Ifx_Fifo_init
80008950 g     F .text	0000001c printStateRed
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000f28  w    O .bss	00000004 _my_errno
80000568 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005a08 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
<<<<<<< HEAD
80000970 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009eb0 g     F .text	00000058 GetTaskID
800067b6 g     F .text	000001a2 IfxScuCcu_initErayPll
800003f0 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
=======
800008ac g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000e64 g     O .rodata	00000004 _global_impure_ptr
80006d70 g     F .text	00000036 IfxScuEru_connectTrigger
70000938 g     O .bss	00000020 g_vadcChannel
8000631c g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000ddd4 g     F .text	000003f0 _realloc_r
8000068c g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004df8 g     F .text	00000012 IfxAsclin_read16
80008818 g     F .text	0000001c printStateLv1
80005a4c g     F .text	0000003c IfxPort_enableEmergencyStop
800002dc g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000e3ba g     F .text	000000a0 .hidden __udivdi3
8000085c g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
800002ec g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
8000a010 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
800004ac g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
800040ce g     F .text	0000000a lcd_clear
80000f48 g     O .rodata	00000028 __mprec_bigtens
8000e21a g     F .text	00000012 abort
8000ab58 g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000da2c g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
80005224 g     F .text	0000001c IfxAsclin_Asc_read
8000986a g     F .text	00000084 ActivateTask
80000bf8 g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006dcc g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
800082ba g     F .text	0000003a Ifx_Fifo_init
800088c0 g     F .text	0000001c printStateRed
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000c90  w    O .bss	00000004 _my_errno
800004ec g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005978 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
8000090c g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009c94 g     F .text	00000058 GetTaskID
8000675a g     F .text	000001a2 IfxScuCcu_initErayPll
8000038c g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000988 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009f9c g     F .text	00000058 GetTaskID
800067ea g     F .text	000001a2 IfxScuCcu_initErayPll
80000408 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
800003a8 g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000ae0 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
<<<<<<< HEAD
<<<<<<< HEAD
80006f7e g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000d04 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
80009928 g     F .text	0000005c SuspendOSInterrupts
=======
80006fb2 g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000d1c g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
80009a14 g     F .text	0000005c SuspendOSInterrupts
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000721e g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
80008d70 g     F .text	00000028 asclin0RxISR
8000ae2e g     F .text	0000007a .hidden __unpack_f
800097a4 g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
800045b2 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
8000a600 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
8000987a g     F .text	0000008e osEE_tc_stm_set_sr1
800007a8 g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
80008c9c g     F .text	0000000c asclin0TxISR
80000688 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
80007278 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
<<<<<<< HEAD
800075a0 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
800007f0 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800006a0 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d8c4 g     F .text	00000042 __hi0bits
=======
80006f22 g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000ca0 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
8000970c g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000718e g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
8000aba4 g     F .text	0000007a .hidden __unpack_f
8000949a g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
80004534 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
8000a2f8 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
80009570 g     F .text	0000008e osEE_tc_stm_set_sr1
8000072c g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
8000461e g     F .text	0000000c asclin0TxISR
8000060c g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
800071e8 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
80007544 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
8000078c g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
8000063c g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d724 g     F .text	00000042 __hi0bits
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800075d4 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
80000808 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800006b8 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d9b0 g     F .text	00000042 __hi0bits
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
800008a8 g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
<<<<<<< HEAD
<<<<<<< HEAD
80000460 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
80000470 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e50c g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
8000a392 g     F .text	00000068 osEE_scheduler_task_activated
800060d0 g     F .text	00000078 IfxScuCcu_getBbbFrequency
=======
800003fc g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
8000040c g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e36c g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
8000a176 g     F .text	00000068 osEE_scheduler_task_activated
80006074 g     F .text	00000078 IfxScuCcu_getBbbFrequency
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000478 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
80000488 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e5f8 g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
8000a47e g     F .text	00000068 osEE_scheduler_task_activated
80006104 g     F .text	00000078 IfxScuCcu_getBbbFrequency
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
800003b8 g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
80000538 g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
<<<<<<< HEAD
<<<<<<< HEAD
8000467a g     F .text	0000000c asclin3TxISR
800063ae g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b70 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
=======
80006352 g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b0c g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000469c g     F .text	0000000c asclin3TxISR
800063e2 g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b88 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
<<<<<<< HEAD
<<<<<<< HEAD
80007182 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80008eec g     F .text	00000024 getUltrasonic
=======
80007126 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80008cce g     F .text	00000024 getUltrasonic
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071b6 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80008fd4 g     F .text	00000028 getUltrasonic
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
<<<<<<< HEAD
<<<<<<< HEAD
800006c0 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004f4a g     F .text	00000182 IfxAsclin_setBitTiming
80000d28 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
80000530 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
80000360 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
80008890 g     F .text	0000001c printStateLv2
80000870 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000cec g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80008d7e g     F .text	00000048 sendSensorPacket
800075e4 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a75e g     F .text	00000026 .hidden __lshrdi3
80000780 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80008ad2 g     F .text	00000008 initInfotainment
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
800008b0 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
80000610 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007ba6 g     F .text	0000038a IfxVadc_Adc_initGroup
8000da96 g     F .text	0000007c __pow5mult
=======
8000065c g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004eee g     F .text	00000182 IfxAsclin_setBitTiming
80000cc4 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
800004cc g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
800002fc g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
80008834 g     F .text	0000001c printStateLv2
8000080c g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000c88 g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80007588 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a542 g     F .text	00000026 .hidden __lshrdi3
8000071c g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80008a76 g     F .text	00000008 initInfotainment
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
8000084c g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
800005ac g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007b4a g     F .text	0000038a IfxVadc_Adc_initGroup
8000d8f6 g     F .text	0000007c __pow5mult
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800006d8 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004f7e g     F .text	00000182 IfxAsclin_setBitTiming
80000d40 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
80000548 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
80000378 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
800088c4 g     F .text	0000001c printStateLv2
80000888 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000d04 g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80008db2 g     F .text	00000048 sendSensorPacket
80007618 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a84a g     F .text	00000026 .hidden __lshrdi3
80000798 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80008b06 g     F .text	00000008 initInfotainment
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
800008c8 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
80000628 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007bda g     F .text	0000038a IfxVadc_Adc_initGroup
8000db82 g     F .text	0000007c __pow5mult
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_10
70000988 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
<<<<<<< HEAD
<<<<<<< HEAD
80006e74 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
800005d0 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
8000a464 g     F .text	0000008a osEE_scheduler_task_terminated
800003b0 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
=======
80006ea8 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
800005e8 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
8000a550 g     F .text	0000008a osEE_scheduler_task_terminated
800003c8 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000b07c g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
<<<<<<< HEAD
800081b6 g     F .text	0000005e Ifx_CircularBuffer_read8
80000900 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
=======
80006e18 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
8000056c g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
8000a248 g     F .text	0000008a osEE_scheduler_task_terminated
8000034c g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000adf2 g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
8000815a g     F .text	0000005e Ifx_CircularBuffer_read8
8000089c g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081ea g     F .text	0000005e Ifx_CircularBuffer_read8
80000918 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
<<<<<<< HEAD
<<<<<<< HEAD
800073d2 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
80009614 g     F .text	000000a4 osEE_tc_get_fsource
80004e66 g     F .text	00000012 IfxAsclin_read32
80000c84 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
800074c0 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
=======
80007376 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
800093f6 g     F .text	000000a4 osEE_tc_get_fsource
80004e0a g     F .text	00000012 IfxAsclin_read32
80000c20 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
80007464 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007406 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
80009700 g     F .text	000000a4 osEE_tc_get_fsource
80004e9a g     F .text	00000012 IfxAsclin_read32
80000c9c g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
800074f4 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
80000948 g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
<<<<<<< HEAD
<<<<<<< HEAD
80000800 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
800096ec g     F .text	00000084 osEE_tc_stm_set_sr0
80000b80 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800006d0 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
=======
80000818 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
800097d8 g     F .text	00000084 osEE_tc_stm_set_sr0
80000b98 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800006e8 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
8000a7c6 g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d892 g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000b746 g     F .text	000001ac _free_r
8000587c g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
8000a206 g     F .text	00000018 GetISRID
800088e0 g     F .text	0000001c printStateLv3
8000a738 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_5
80001280 g       .traptab	00000000 osEE_tc_trap_bus
80005e18 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80000968 g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
70000118 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008b0e g     F .text	0000009c updateInfoState
80008384 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
800073d6 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800012e0 g       .traptab	00000000 osEE_tc_trap_nmi
8000dbfe g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
800006c8 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
8000763e g     F .text	0000001c IfxVadc_Adc_disableModule
80008e04 g     F .text	00000048 readSensorPacket
00002000 g       *ABS*	00000000 __CSA_SIZE
<<<<<<< HEAD
8000ddc2 g     F .text	000000f0 __ssprint_r
80004894 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
=======
8000079c g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
800094ce g     F .text	00000084 osEE_tc_stm_set_sr0
80000b1c g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
8000066c g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
8000a4be g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d606 g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000b4bc g     F .text	000001ac _free_r
800057ec g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
80009efe g     F .text	00000018 GetISRID
80008850 g     F .text	0000001c printStateLv3
8000a430 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
80001280 g       .traptab	00000000 osEE_tc_trap_bus
80005d88 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80008b1c g     F .text	00000006 getPhotoresiter
800008ec g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
700000f8 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008a7e g     F .text	0000009c updateInfoState
800082f4 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
80007346 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800012e0 g       .traptab	00000000 osEE_tc_trap_nmi
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_5
8000d972 g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
8000064c g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
800075ae g     F .text	0000001c IfxVadc_Adc_disableModule
00002000 g       *ABS*	00000000 __CSA_SIZE
8000dc22 g     F .text	000000f0 __ssprint_r
80004838 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000deae g     F .text	000000f0 __ssprint_r
800048c8 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
<<<<<<< HEAD
<<<<<<< HEAD
80004718 g     F .text	00000038 IfxVadc_enableAccess
=======
8000474c g     F .text	00000038 IfxVadc_enableAccess
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000da68 g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006fc0 g     F .text	00000012 IfxScuEru_getEventFlagStatus
800041b6 g     F .text	00000036 lcd_print
<<<<<<< HEAD
80000590 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800003e0 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004be0 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006e4e g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000ed0 g     O .bss	00000028 __malloc_current_mallinfo
8000dcd8 g     F .text	000000a8 __d2b
=======
800046bc g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000d7dc g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006f30 g     F .text	00000012 IfxScuEru_getEventFlagStatus
800041b6 g     F .text	00000036 lcd_print
8000052c g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
8000037c g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004b84 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006df2 g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000c50 g     O .bss	00000028 __malloc_current_mallinfo
8000db38 g     F .text	000000a8 __d2b
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800005a8 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800003f8 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004c14 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006e82 g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000ee8 g     O .bss	00000028 __malloc_current_mallinfo
8000ddc4 g     F .text	000000a8 __d2b
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
<<<<<<< HEAD
<<<<<<< HEAD
80008900 g     F .text	0000001c printStateOff
=======
80008934 g     F .text	0000001c printStateOff
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000bd4 g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
800081a8 g     F .text	00000022 Ifx_CircularBuffer_get16
800004c8 g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005fb2 g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001300 g       .ctors	00000000 __EH_FRAME_END__
80006e36 g     F .text	00000026 IfxScuEru_disableAutoClear
80006aa2 g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
8000620c g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
80000668 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000e73e g     F .text	000000a6 .hidden __fpcmp_parts_d
80004d32 g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
8000a3de g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
8000a6ac g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
80006f66 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
80000848 g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
80005a38 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
8000a17c g     F .text	00000032 GetEvent
8000542a g     F .text	0000001c IfxAsclin_Asc_disableModule
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004eac g     F .text	00000012 IfxAsclin_read8
8000a4e6 g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000ac5a g     F .text	00000118 .hidden __divdf3
80000da0 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000d50 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
80005926 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
8000807a g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000120 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009f38 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
<<<<<<< HEAD
8000b540 g     F .text	0000004a _vsnprintf_r
=======
800088a4 g     F .text	0000001c printStateOff
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000b58 g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80008118 g     F .text	00000022 Ifx_CircularBuffer_get16
8000044c g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005f22 g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001300 g       .ctors	00000000 __EH_FRAME_END__
80006da6 g     F .text	00000026 IfxScuEru_disableAutoClear
80006a12 g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
8000617c g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
800005ec g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000e480 g     F .text	000000a6 .hidden __fpcmp_parts_d
80004ca2 g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
8000a0d6 g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
8000a3a4 g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
80006ed6 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
800007cc g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
800059a8 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
80009e74 g     F .text	00000032 GetEvent
8000539a g     F .text	0000001c IfxAsclin_Asc_disableModule
8000a568 g     F .text	0000004c .hidden __floatundisf
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004e1c g     F .text	00000012 IfxAsclin_read8
8000a1de g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000a99e g     F .text	00000118 .hidden __divdf3
80000d24 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000cd4 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
80005896 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80007fea g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000100 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009c30 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000b3a2 g     F .text	0000004a _vsnprintf_r
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000b62c g     F .text	0000004a _vsnprintf_r
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
<<<<<<< HEAD
<<<<<<< HEAD
8000a9ca g     F .text	000001a4 .hidden __muldf3
=======
8000a7fa g     F .text	000001a4 .hidden __muldf3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000aab6 g     F .text	000001a4 .hidden __muldf3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
80000758 g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
<<<<<<< HEAD
<<<<<<< HEAD
80004374 g     F .text	0000006e delay_us
80000d78 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b50a g     F .text	00000002 __malloc_lock
8000e374 g     F .text	0000003c sbrk
80005edc g     F .text	0000000e IfxScuCcu_getOsc0Frequency
800046e0 g     F .text	00000038 IfxVadc_disableAccess
80008b78 g     F .text	00000082 initUartDriver
=======
80004396 g     F .text	0000006e delay_us
80000d90 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b5f6 g     F .text	00000002 __malloc_lock
8000e460 g     F .text	0000003c sbrk
80005f10 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004714 g     F .text	00000038 IfxVadc_disableAccess
80008bac g     F .text	00000082 initUartDriver
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80000000 g       .startup	00000000 BootModeHeader0
800012c0 g       .traptab	00000000 osEE_tc_trap_system
80000d10 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004e74 g     F .text	00000014 IfxAsclin_getSrcPointerTx
80004910 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000df9e g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
8000622e g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
80000838 g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004806 g     F .text	000000aa IfxVadc_enableGroupSync
8000701a g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
800052d0 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
800003e8 g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000e050 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
800040d8 g     F .text	000000d0 lcd_init
<<<<<<< HEAD
80004686 g     F .text	00000058 main
80007382 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
8000430a g     F .text	0000006a delay_ms
80006f58 g     F .text	00000026 IfxScuEru_enableTriggerPulse
=======
80008bb0 g     F .text	0000006e delay_us
80000d14 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b36c g     F .text	00000002 __malloc_lock
8000e1d4 g     F .text	0000003c sbrk
80005e80 g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004684 g     F .text	00000038 IfxVadc_disableAccess
80000000 g       .startup	00000000 BootModeHeader0
800012c0 g       .traptab	00000000 osEE_tc_trap_system
80000c94 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004de4 g     F .text	00000014 IfxAsclin_getSrcPointerTx
80004880 g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000dd12 g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
8000619e g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
800007bc g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004776 g     F .text	000000aa IfxVadc_enableGroupSync
80006f8a g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
80005240 g     F .text	0000009e IfxAsclin_Asc_isrTransmit
8000036c g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000ddc4 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
800040d8 g     F .text	000000d0 lcd_init
8000462a g     F .text	00000058 main
80007326 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80008b46 g     F .text	0000006a delay_ms
80006efc g     F .text	00000026 IfxScuEru_enableTriggerPulse
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800046a8 g     F .text	0000006c main
800073b6 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
8000432c g     F .text	0000006a delay_ms
80006f8c g     F .text	00000026 IfxScuEru_enableTriggerPulse
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000f10 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
<<<<<<< HEAD
<<<<<<< HEAD
80004cd0 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e6f8 g     F .text	0000009c .hidden __udiv6432
80008ca2 g     F .text	00000048 sendActuatorPacket
=======
80004d04 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e7e4 g     F .text	0000009c .hidden __udiv6432
80008cd6 g     F .text	00000048 sendActuatorPacket
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000400 g       *ABS*	00000000 __ISTACK_SIZE
800061ec g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
800080f6 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000c4c g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
70000994 g     O .bss	00000274 g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
<<<<<<< HEAD
80000cd4 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000a318 g     F .text	00000018 osEE_task_activated
=======
80004c74 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e526 g     F .text	0000009c .hidden __udiv6432
00000400 g       *ABS*	00000000 __ISTACK_SIZE
8000615c g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
80008066 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000bd0 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
70000974 g     O .bss	0000027c g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000c70 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000a0fc g     F .text	00000018 osEE_task_activated
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000cec g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000a404 g     F .text	00000018 osEE_task_activated
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
80000134 g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
<<<<<<< HEAD
<<<<<<< HEAD
800073be g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000acec g     F .text	0000003c .hidden __truncdfsf2
=======
800073f2 g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000add8 g     F .text	0000003c .hidden __truncdfsf2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000cbb4 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000b15c g     F .text	0000049a _malloc_r
80000558 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005d98 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
80000828 g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005404 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
<<<<<<< HEAD
80000600 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80005104 g     F .text	00000006 IfxAsclin_Asc_getReadCount
=======
80007362 g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000ab1c g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000c928 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000aed2 g     F .text	0000049a _malloc_r
800004dc g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005d08 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
800007ac g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005374 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
8000059c g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
800050a8 g     F .text	00000006 IfxAsclin_Asc_getReadCount
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000618 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80005138 g     F .text	00000006 IfxAsclin_Asc_getReadCount
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
80000608 g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
<<<<<<< HEAD
<<<<<<< HEAD
800050e0 g     F .text	00000012 IfxAsclin_write32
=======
80005114 g     F .text	00000012 IfxAsclin_write32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
70000100 g     O .data	0000000a g_FrontUltrasonic
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
80004476 g     F .text	0000006e printfSerial
80000eec g     O .rodata	00000014 .hidden __thenan_df
8000b68c g     F .text	000000ba _malloc_trim_r
80001308 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
80000438 g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004b18 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
<<<<<<< HEAD
80004750 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80009d60 g     F .text	000000ec ReleaseResource
80008080 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004dc6 g     F .text	00000018 IfxAsclin_getPdFrequency
800048b2 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
=======
80005084 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
80004310 g     F .text	0000006e printfSerial
80000e50 g     O .rodata	00000014 .hidden __thenan_df
8000b402 g     F .text	000000ba _malloc_trim_r
80001308 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
800003bc g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004a88 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
800046f4 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80004210 g     F .text	00000004 FuncTaskLCD
80009b44 g     F .text	000000ec ReleaseResource
80008024 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004d6a g     F .text	00000018 IfxAsclin_getPdFrequency
80004856 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004784 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80009e4c g     F .text	000000ec ReleaseResource
800080b4 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004dfa g     F .text	00000018 IfxAsclin_getPdFrequency
800048e6 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001308 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
<<<<<<< HEAD
<<<<<<< HEAD
80004b8e g     F .text	00000052 IfxVadc_resetKernel
80000920 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80008cea g     F .text	0000000a deserialize_actuator_packet
80000d1c g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000e40c g     F .text	00000040 .hidden __nedf2
80004ef8 g     F .text	00000052 IfxAsclin_setBaudrateBitFields
=======
80004bc2 g     F .text	00000052 IfxVadc_resetKernel
80000938 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80008d1e g     F .text	0000000a deserialize_actuator_packet
80000d34 g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000e4f8 g     F .text	00000040 .hidden __nedf2
80004f2c g     F .text	00000052 IfxAsclin_setBaudrateBitFields
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80006068 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006b42 g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
<<<<<<< HEAD
80006fc2 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000b50 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80000a40 g     O .rodata	00000080 IfxPort_cfg_esrMasks
=======
80004b32 g     F .text	00000052 IfxVadc_resetKernel
800008bc g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80000cb8 g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000e26c g     F .text	00000040 .hidden __nedf2
80004e9c g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80005fd8 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006ab2 g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80006f66 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000aec g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
800009dc g     O .rodata	00000080 IfxPort_cfg_esrMasks
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ff6 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000b68 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80000a58 g     O .rodata	00000080 IfxPort_cfg_esrMasks
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
80000778 g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
<<<<<<< HEAD
<<<<<<< HEAD
8000525c g     F .text	00000010 IfxAsclin_Asc_clearRx
80000990 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000da8 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005a7e g     F .text	0000002a IfxPort_setESR
80000560 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
=======
80005200 g     F .text	00000010 IfxAsclin_Asc_clearRx
8000092c g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000d44 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005a22 g     F .text	0000002a IfxPort_setESR
800004fc g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005290 g     F .text	00000010 IfxAsclin_Asc_clearRx
800009a8 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000dc0 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005ab2 g     F .text	0000002a IfxPort_setESR
80000578 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
800004b8 g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
80008cbc g     F .text	0000001a serialize_actuator_packet
80000998 g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000c10 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
800004a8 g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
70000528 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
<<<<<<< HEAD
<<<<<<< HEAD
80005a26 g     F .text	00000028 IfxPort_resetESR
80005138 g     F .text	00000072 IfxAsclin_Asc_isrError
800049a2 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80008c74 g     F .text	00000014 calculate_checksum
80004e2c g     F .text	00000014 IfxAsclin_getSrcPointerRx
=======
80005a5a g     F .text	00000028 IfxPort_resetESR
8000516c g     F .text	00000072 IfxAsclin_Asc_isrError
800049d6 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80008ca8 g     F .text	00000014 calculate_checksum
80004e60 g     F .text	00000014 IfxAsclin_getSrcPointerRx
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
80000508 g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80008e4c g     F .text	00000054 initUltrasonic
70000c6c g     O .bss	00000274 g_AsclinStm
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004e4c g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
80000458 g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
80000898 g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
8000997a g     F .text	00000016 DisableAllInterrupts
80008298 g     F .text	0000005e Ifx_CircularBuffer_write8
8000536e g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005b18 g     F .text	00000090 IfxPort_setGroupModeInput
800083a6 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
<<<<<<< HEAD
80009b0a g     F .text	000000d6 ChainTask
80007006 g     F .text	00000034 IfxScuEru_selectExternalInput
80006ee6 g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
=======
800059ca g     F .text	00000028 IfxPort_resetESR
800050dc g     F .text	00000072 IfxAsclin_Asc_isrError
80004946 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80004dd0 g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
8000048c g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80008b22 g     F .text	00000024 initUltrasonic
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004dbc g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
800003dc g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
8000081c g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
80009672 g     F .text	00000016 DisableAllInterrupts
80008208 g     F .text	0000005e Ifx_CircularBuffer_write8
800052de g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005a88 g     F .text	00000090 IfxPort_setGroupModeInput
80008316 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
800098ee g     F .text	000000d6 ChainTask
80006faa g     F .text	00000034 IfxScuEru_selectExternalInput
80006e8a g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bf6 g     F .text	000000d6 ChainTask
8000703a g     F .text	00000034 IfxScuEru_selectExternalInput
80006f1a g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
70000004 g     O .data	0000000b sendActuatorPkt
80000978 g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
800007f8 g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
<<<<<<< HEAD
<<<<<<< HEAD
80000660 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
800067a2 g     F .text	00000014 IfxScuCcu_initConfig
=======
80000678 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
800067d6 g     F .text	00000014 IfxScuCcu_initConfig
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
80000348 g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
80004a48 g     F .text	00000066 IfxVadc_initializeFAdcI
800005b8 g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000bac g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
80000318 g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001200 g       .traptab	00000000 osEE_tc_trap_mmu
80008248 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
<<<<<<< HEAD
800051b8 g     F .text	0000009c IfxAsclin_Asc_flushTx
8000983a g     F .text	00000028 osEE_tc_delay
80000680 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
800010bc g     O .rodata	00000000 __clear_table
80005f1a g     F .text	00000064 IfxScuCcu_getPllErayFrequency
80000850 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000a330 g     F .text	0000001e osEE_task_end
80000630 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
=======
800005fc g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
80006746 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
800002cc g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
800049b8 g     F .text	00000066 IfxVadc_initializeFAdcI
8000053c g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000b30 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
8000029c g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001200 g       .traptab	00000000 osEE_tc_trap_mmu
800081b8 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
8000515c g     F .text	0000009c IfxAsclin_Asc_flushTx
8000961c g     F .text	00000028 osEE_tc_delay
8000061c g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
80001038 g     O .rodata	00000000 __clear_table
80005ebe g     F .text	00000064 IfxScuCcu_getPllErayFrequency
800007ec g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000a114 g     F .text	0000001e osEE_task_end
800005cc g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051ec g     F .text	0000009c IfxAsclin_Asc_flushTx
80009926 g     F .text	00000028 osEE_tc_delay
80000698 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
800010d4 g     O .rodata	00000000 __clear_table
80005f4e g     F .text	00000064 IfxScuCcu_getPllErayFrequency
80000868 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000a41c g     F .text	0000001e osEE_task_end
80000648 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
800008b8 g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001300 g       .ctors	00000000 __EH_FRAME_BEGIN__
80000598 g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
<<<<<<< HEAD
<<<<<<< HEAD
80006078 g     F .text	00000024 IfxScuCcu_getSourceFrequency
800004e0 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000d98 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c70 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a57a g     F .text	00000020 osEE_change_context_from_task_end
80009f80 g     F .text	0000007a WaitEvent
=======
800060ac g     F .text	00000024 IfxScuCcu_getSourceFrequency
800004f8 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000db0 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c88 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a666 g     F .text	00000020 osEE_change_context_from_task_end
8000a06c g     F .text	0000007a WaitEvent
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_4
80005a82 g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
80008ffc g     F .text	00000016 calculateDistanceCm
80000388 g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
<<<<<<< HEAD
80007f30 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
=======
8000601c g     F .text	00000024 IfxScuCcu_getSourceFrequency
8000047c g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000d34 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c0c g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a35e g     F .text	00000020 osEE_change_context_from_task_end
80009d64 g     F .text	0000007a WaitEvent
800059f2 g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
80008cf2 g     F .text	00000016 calculateDistanceCm
8000030c g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007ed4 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f64 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
<<<<<<< HEAD
<<<<<<< HEAD
8000981c g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
=======
800095fe g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009908 g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
7000011c g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
<<<<<<< HEAD
<<<<<<< HEAD
800048ae g     F .text	00000004 IfxVadc_getAdcModuleFrequency
800086e8 g     F .text	00000186 Ifx_Fifo_write
8000dc0e g     F .text	000000ca __mdiff
=======
800048e2 g     F .text	00000004 IfxVadc_getAdcModuleFrequency
8000871c g     F .text	00000186 Ifx_Fifo_write
8000dcfa g     F .text	000000ca __mdiff
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
8000a45c g     F .text	00000022 osEE_activate_isr2
80007bc4 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004d64 g     F .text	00000074 IfxAsclin_getFaFrequency
80006af2 g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
<<<<<<< HEAD
800093e6 g     F .text	0000022e osEE_tc_set_pll_fsource
800049ea g     F .text	0000002a IfxVadc_initializeFAdcD
800043e2 g     F .text	00000072 UART_init
80005c06 g     F .text	000000a4 IfxPort_setGroupPadDriver
=======
80004852 g     F .text	00000004 IfxVadc_getAdcModuleFrequency
8000868c g     F .text	00000186 Ifx_Fifo_write
8000da6e g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
8000a154 g     F .text	00000022 osEE_activate_isr2
80007b34 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004cd4 g     F .text	00000074 IfxAsclin_getFaFrequency
80006a62 g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
800091c8 g     F .text	0000022e osEE_tc_set_pll_fsource
8000498e g     F .text	0000002a IfxVadc_initializeFAdcD
8000429e g     F .text	00000072 UART_init
80005baa g     F .text	000000a4 IfxPort_setGroupPadDriver
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800094d2 g     F .text	0000022e osEE_tc_set_pll_fsource
80004a1e g     F .text	0000002a IfxVadc_initializeFAdcD
80004404 g     F .text	00000072 UART_init
80005c3a g     F .text	000000a4 IfxPort_setGroupPadDriver
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
<<<<<<< HEAD
<<<<<<< HEAD
80000d58 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
800008d0 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
800088c8 g     F .text	0000001c printStateLv4
800050f2 g     F .text	00000012 IfxAsclin_write8
80006ff8 g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
=======
80000cf4 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
8000086c g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
8000886c g     F .text	0000001c printStateLv4
80005096 g     F .text	00000012 IfxAsclin_write8
80006f9c g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000d70 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
800008e8 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
800088fc g     F .text	0000001c printStateLv4
80005126 g     F .text	00000012 IfxAsclin_write8
8000702c g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
8000113c g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
<<<<<<< HEAD
<<<<<<< HEAD
800050cc g     F .text	00000014 IfxAsclin_write16
800085c2 g     F .text	00000036 Ifx_Fifo_clear
80000c0c g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000e364 g     F .text	00000010 _exit
=======
80005070 g     F .text	00000014 IfxAsclin_write16
80008566 g     F .text	00000036 Ifx_Fifo_clear
80000ba8 g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000e1c4 g     F .text	00000010 _exit
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005100 g     F .text	00000014 IfxAsclin_write16
800085f6 g     F .text	00000036 Ifx_Fifo_clear
80000c24 g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
7000010a g     O .data	0000000a g_UpperUltrasonic
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000e450 g     F .text	00000010 _exit
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001220 g       .traptab	00000000 osEE_tc_trap_protection
80001200 g     F .traptab	00000000 __TRAPTAB
80000cb0 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
<<<<<<< HEAD
<<<<<<< HEAD
80006da4 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
=======
80006dd8 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006ece g     F .text	00000026 IfxScuEru_disableTriggerPulse
8000752a g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
80005148 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000b618 g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
<<<<<<< HEAD
80004ed6 g     F .text	00000022 IfxAsclin_setClockSource
8000e48c g     F .text	00000040 .hidden __gedf2
80000ac0 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
800045d8 g     F .text	000000a2 initPeripheralsAndERU
800007d0 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
=======
80006d48 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006e3e g     F .text	00000026 IfxScuEru_disableTriggerPulse
8000749a g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
800050b8 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000b38e g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004e7a g     F .text	00000022 IfxAsclin_setClockSource
8000e2ec g     F .text	00000040 .hidden __gedf2
80000a5c g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
8000457c g     F .text	000000a2 initPeripheralsAndERU
8000076c g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f0a g     F .text	00000022 IfxAsclin_setClockSource
8000e578 g     F .text	00000040 .hidden __gedf2
80000ad8 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
800045fa g     F .text	000000a2 initPeripheralsAndERU
800007e8 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
80000448 g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
<<<<<<< HEAD
<<<<<<< HEAD
80000bd0 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004c04 g     F .text	00000056 IfxVadc_setArbiterPriority
70000f18 g     O .text	00000001 __HEAP_END
800005c0 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
=======
80000be8 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004c38 g     F .text	00000056 IfxVadc_setArbiterPriority
70000f30 g     O .text	00000001 __HEAP_END
800005d8 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
6001bc00 g       .CPU1.csa	00000000 __CSA1
8000617c g     F .text	00000070 IfxScuCcu_getMaxFrequency
80009990 g     F .text	0000001c EnableAllInterrupts
800005f8 g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004ca2 g     F .text	00000044 IfxVadc_startupCalibration
70000984 g     O .bss	00000004 g_vadc
80005cde g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000bc0 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000a75c g     F .text	0000001a osEE_hal_restore_ctx
80004502 g     F .text	00000032 initVADCGroup
80000638 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000aa76 g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
8000514e g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004aae g     F .text	0000006a IfxVadc_isPostCalibration
800044e4 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
<<<<<<< HEAD
80006d66 g     F .text	00000016 IfxScuEru_clearEventFlag
800074c4 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d906 g     F .text	00000066 __lo0bits
=======
80000b6c g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004ba8 g     F .text	00000056 IfxVadc_setArbiterPriority
70000c98 g     O .text	00000001 __HEAP_END
8000055c g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
800060ec g     F .text	00000070 IfxScuCcu_getMaxFrequency
80009688 g     F .text	0000001c EnableAllInterrupts
8000057c g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004c12 g     F .text	00000044 IfxVadc_startupCalibration
70000964 g     O .bss	00000004 g_vadc
80005c4e g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000b44 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000a454 g     F .text	0000001a osEE_hal_restore_ctx
80004484 g     F .text	00000032 initVADCGroup
800005bc g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000a7ba g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
800050be g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004a1e g     F .text	0000006a IfxVadc_isPostCalibration
80004466 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006d0a g     F .text	00000016 IfxScuEru_clearEventFlag
80007468 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d766 g     F .text	00000066 __lo0bits
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006d9a g     F .text	00000016 IfxScuEru_clearEventFlag
800074f8 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d9f2 g     F .text	00000066 __lo0bits
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
800003d8 g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
<<<<<<< HEAD
<<<<<<< HEAD
80005eea g     F .text	00000030 IfxScuCcu_getOscFrequency
80009984 g     F .text	0000003c ResumeOSInterrupts
=======
80005f1e g     F .text	00000030 IfxScuCcu_getOscFrequency
80009a70 g     F .text	0000003c ResumeOSInterrupts
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80004000 g     F .text	0000004e readLcdButtons
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004ebe g     F .text	0000004c IfxAsclin_resetModule
80008dfa g     F .text	0000000a deserialize_sensor_packet
80006fd2 g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
800006f8 g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006d88 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
<<<<<<< HEAD
80000130 g     O .rodata	00000008 osEE_cdb_var
8000add2 g     F .text	00000112 .hidden __pack_d
800009a0 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
800099c0 g     F .text	000000ac StartOS
=======
80005e8e g     F .text	00000030 IfxScuCcu_getOscFrequency
80009768 g     F .text	0000003c ResumeOSInterrupts
80004000 g     F .text	0000004e readLcdButtons
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004e2e g     F .text	0000004c IfxAsclin_resetModule
80006f42 g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
8000067c g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006cf8 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
800000cc g     O .rodata	00000008 osEE_cdb_var
8000ac34 g     F .text	00000112 .hidden __pack_d
8000093c g     O .rodata	00000020 IfxAsclin_cfg_indexMap
800097a4 g     F .text	000000ac StartOS
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000148 g     O .rodata	00000008 osEE_cdb_var
8000aebe g     F .text	00000112 .hidden __pack_d
800009b8 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
80009aac g     F .text	000000ac StartOS
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000d28 g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000bfc g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
<<<<<<< HEAD
<<<<<<< HEAD
8000b062 g     F .text	0000000e free
80000b40 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d842 g     F .text	00000082 __multadd
8000d830 g     F .text	00000012 _Bfree
80000700 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
80008970 g     F .text	00000162 printInfoDisplay
=======
8000aec4 g     F .text	0000000e free
80000adc g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d6a2 g     F .text	00000082 __multadd
8000d690 g     F .text	00000012 _Bfree
8000069c g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
80008914 g     F .text	00000162 printInfoDisplay
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000b14e g     F .text	0000000e free
80000b58 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d92e g     F .text	00000082 __multadd
8000d91c g     F .text	00000012 _Bfree
80000718 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
800089a4 g     F .text	00000162 printInfoDisplay
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
<<<<<<< HEAD
<<<<<<< HEAD
80000020:	9d 80 93 47 	ja 80008f26 <osEE_tc_core0_start>
=======
80000020:	9d 80 84 46 	ja 80008d08 <osEE_tc_core0_start>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80000020:	9d 80 09 48 	ja 80009012 <osEE_tc_core0_start>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001200 <__TRAPTAB>:
80001200:	00 a0       	debug 
80001202:	1d ff ff ff 	j 80001200 <__TRAPTAB>
	...

80001220 <osEE_tc_trap_protection>:
80001220:	00 a0       	debug 
80001222:	1d ff ff ff 	j 80001220 <osEE_tc_trap_protection>
	...

80001240 <osEE_tc_trap_instruction>:
80001240:	00 a0       	debug 
80001242:	1d ff ff ff 	j 80001240 <osEE_tc_trap_instruction>
	...

80001260 <osEE_tc_trap_context>:
80001260:	00 a0       	debug 
80001262:	1d ff ff ff 	j 80001260 <osEE_tc_trap_context>
	...

80001280 <osEE_tc_trap_bus>:
80001280:	00 a0       	debug 
80001282:	1d ff ff ff 	j 80001280 <osEE_tc_trap_bus>
	...

800012a0 <osEE_tc_trap_assertion>:
800012a0:	00 a0       	debug 
800012a2:	1d ff ff ff 	j 800012a0 <osEE_tc_trap_assertion>
	...

800012c0 <osEE_tc_trap_system>:
800012c0:	00 a0       	debug 
800012c2:	1d ff ff ff 	j 800012c0 <osEE_tc_trap_system>
	...

800012e0 <osEE_tc_trap_nmi>:
800012e0:	00 a0       	debug 
800012e2:	1d ff ff ff 	j 800012e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001300 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001308 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
<<<<<<< HEAD
80002044:	82 44       	mov %d4,4
<<<<<<< HEAD
80002046:	1d 00 0e 3c 	j 80009862 <osEE_tc_isr2_wrapper>
=======
80002044:	82 24       	mov %d4,2
80002046:	1d 00 ff 3a 	j 80009644 <osEE_tc_isr2_wrapper>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80002046:	1d 00 84 3c 	j 8000994e <osEE_tc_isr2_wrapper>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr2_entry_4>:
80002080:	0d 00 00 02 	svlcx 
80002084:	82 14       	mov %d4,1
80002086:	1d 00 64 3c 	j 8000994e <osEE_tc_isr2_wrapper>
	...

800020a0 <osEE_tc_isr2_entry_5>:
800020a0:	0d 00 00 02 	svlcx 
800020a4:	82 24       	mov %d4,2
800020a6:	1d 00 54 3c 	j 8000994e <osEE_tc_isr2_wrapper>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr2_entry_10>:
80002140:	0d 00 00 02 	svlcx 
<<<<<<< HEAD
80002144:	82 34       	mov %d4,3
<<<<<<< HEAD
80002146:	1d 00 8e 3b 	j 80009862 <osEE_tc_isr2_wrapper>
=======
80002144:	82 14       	mov %d4,1
80002146:	1d 00 7f 3a 	j 80009644 <osEE_tc_isr2_wrapper>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80002146:	1d 00 04 3c 	j 8000994e <osEE_tc_isr2_wrapper>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
<<<<<<< HEAD
<<<<<<< HEAD
80002266:	1d 00 fe 3a 	j 80009862 <osEE_tc_isr2_wrapper>
=======
80002266:	1d 00 ef 39 	j 80009644 <osEE_tc_isr2_wrapper>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80002266:	1d 00 74 3b 	j 8000994e <osEE_tc_isr2_wrapper>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <readLcdButtons>:
#include "Button_Driver.h"
#include "bsw.h"


int readLcdButtons(void)
{
80004000:	20 08       	sub.a %sp,8
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004002:	82 34       	mov %d4,3
<<<<<<< HEAD
<<<<<<< HEAD
80004004:	6d 00 d7 02 	call 800045b2 <readADCValue>
=======
80004004:	6d 00 a9 02 	call 80004556 <readADCValue>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004004:	6d 00 e8 02 	call 800045d4 <readADCValue>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    printfSerial("%d",adc_key_in);
80004008:	91 00 00 48 	movh.a %a4,32768
8000400c:	74 a2       	st.w [%sp],%d2
8000400e:	d9 44 28 00 	lea %a4,[%a4]40 <80000028 <_start+0x8>>

int readLcdButtons(void)
{
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004012:	02 2f       	mov %d15,%d2
    printfSerial("%d",adc_key_in);
<<<<<<< HEAD
<<<<<<< HEAD
80004014:	6d 00 20 02 	call 80004454 <printfSerial>
=======
80004014:	6d 00 7e 01 	call 80004310 <printfSerial>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004014:	6d 00 31 02 	call 80004476 <printfSerial>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
80004018:	8b 4f 66 32 	lt.u %d3,%d15,100
        button_state = btnUP;
8000401c:	82 02       	mov %d2,0
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
    printfSerial("%d",adc_key_in);

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
8000401e:	df 03 17 80 	jne %d3,0,8000404c <readLcdButtons+0x4c>
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004022:	3b 80 3e 30 	mov %d3,1000
        button_state = btnRIGHT; 
80004026:	82 32       	mov %d2,3
    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004028:	3f 3f 12 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
8000402c:	3b 40 9c 30 	mov %d3,2500
        button_state = btnLEFT; 
80004030:	82 22       	mov %d2,2
     
    } 
    else if (adc_key_in < 1000){
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
80004032:	3f 3f 0d 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
80004036:	3b c0 da 30 	mov %d3,3500
8000403a:	3f 3f 08 80 	jlt.u %d15,%d3,8000404a <readLcdButtons+0x4a>
        button_state = btnDOWN; 
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
8000403e:	3b 00 fa 30 	mov %d3,4000
80004042:	0b 3f 30 f1 	lt.u %d15,%d15,%d3
80004046:	ea 42       	cmovn %d2,%d15,4
80004048:	00 90       	ret 
    }     
    else if (adc_key_in < 2500){ 
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
        button_state = btnDOWN; 
8000404a:	82 12       	mov %d2,1
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
    } 
    return button_state;
8000404c:	00 90       	ret 

8000404e <lcd_write4bits>:
    delay_ms(2);       
}

static void lcd_write4bits(uint8 data)
{
    IfxPort_setPinState(LCD_D4, (data & 0x01) ? IfxPort_State_high : IfxPort_State_low);
8000404e:	8f 14 00 21 	and %d2,%d4,1
80004052:	7b 10 00 f0 	movh %d15,1
80004056:	ab 1f a0 f2 	seln %d15,%d2,%d15,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000405a:	91 40 00 ff 	movh.a %a15,61444
8000405e:	06 4f       	sh %d15,4
80004060:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004064:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D5, (data & 0x02) ? IfxPort_State_high : IfxPort_State_low);
80004066:	8f 24 00 21 	and %d2,%d4,2
8000406a:	7b 80 00 f0 	movh %d15,8
8000406e:	91 40 00 ff 	movh.a %a15,61444
80004072:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004076:	ab 8f a0 f2 	seln %d15,%d2,%d15,8
8000407a:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D6, (data & 0x04) ? IfxPort_State_high : IfxPort_State_low);
8000407c:	8f 44 00 21 	and %d2,%d4,4
80004080:	7b 00 01 f0 	movh %d15,16
80004084:	ab 0f a1 f2 	seln %d15,%d2,%d15,16
80004088:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D7, (data & 0x08) ? IfxPort_State_high : IfxPort_State_low);
8000408a:	8f 84 00 41 	and %d4,%d4,8
8000408e:	7b 00 02 f0 	movh %d15,32
80004092:	ab 0f a2 44 	seln %d4,%d4,%d15,32
80004096:	68 14       	st.w [%a15]4,%d4
80004098:	da 80       	mov %d15,128
8000409a:	68 1f       	st.w [%a15]4,%d15
#include "bsw.h"

static void lcd_pulse_enable(void)
{
    IfxPort_setPinHigh(LCD_E);
    delay_ms(2);       
8000409c:	82 24       	mov %d4,2
<<<<<<< HEAD
<<<<<<< HEAD
8000409e:	6d 00 36 01 	call 8000430a <delay_ms>
=======
8000409e:	6d 00 54 25 	call 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000409e:	6d 00 47 01 	call 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800040a2:	7b 00 08 f0 	movh %d15,128
800040a6:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinLow(LCD_E);
    delay_ms(2);       
800040a8:	82 24       	mov %d4,2
<<<<<<< HEAD
<<<<<<< HEAD
800040aa:	1d 00 30 01 	j 8000430a <delay_ms>
=======
800040aa:	1d 00 4e 25 	j 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800040aa:	1d 00 41 01 	j 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

800040ae <lcd_command>:
800040ae:	91 40 00 ff 	movh.a %a15,61444
800040b2:	7b 00 04 20 	movh %d2,64
800040b6:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
    lcd_pulse_enable();
}


static void lcd_command(uint8 cmd)
{
800040ba:	02 4f       	mov %d15,%d4
800040bc:	68 12       	st.w [%a15]4,%d2
    IfxPort_setPinLow(LCD_RS);
    lcd_write4bits(cmd >> 4);
800040be:	06 c4       	sh %d4,-4
800040c0:	5c c7       	call 8000404e <lcd_write4bits>
    lcd_write4bits(cmd & 0x0F);
800040c2:	8f ff 00 41 	and %d4,%d15,15
800040c6:	5c c4       	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800040c8:	82 54       	mov %d4,5
<<<<<<< HEAD
<<<<<<< HEAD
800040ca:	1d 00 20 01 	j 8000430a <delay_ms>
=======
800040ca:	1d 00 3e 25 	j 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800040ca:	1d 00 31 01 	j 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

800040ce <lcd_clear>:
}


void lcd_clear(void)
{
    lcd_command(0x01);
800040ce:	82 14       	mov %d4,1
800040d0:	5c ef       	call 800040ae <lcd_command>
    delay_ms(5);       
800040d2:	82 54       	mov %d4,5
<<<<<<< HEAD
<<<<<<< HEAD
800040d4:	1d 00 1b 01 	j 8000430a <delay_ms>
=======
800040d4:	1d 00 39 25 	j 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800040d4:	1d 00 2c 01 	j 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

800040d8 <lcd_init>:
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800040d8:	91 40 00 4f 	movh.a %a4,61444
800040dc:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040e0:	82 64       	mov %d4,6
800040e2:	3b 00 08 50 	mov %d5,128
<<<<<<< HEAD
<<<<<<< HEAD
800040e6:	6d 00 e2 0d 	call 80005caa <IfxPort_setPinMode>
=======
800040e6:	6d 00 b4 0d 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800040e6:	6d 00 fc 0d 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800040ea:	91 40 00 4f 	movh.a %a4,61444
800040ee:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040f2:	82 74       	mov %d4,7
800040f4:	3b 00 08 50 	mov %d5,128
<<<<<<< HEAD
<<<<<<< HEAD
800040f8:	6d 00 d9 0d 	call 80005caa <IfxPort_setPinMode>
=======
800040f8:	6d 00 ab 0d 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800040f8:	6d 00 f3 0d 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800040fc:	91 40 00 4f 	movh.a %a4,61444
80004100:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004104:	82 44       	mov %d4,4
80004106:	3b 00 08 50 	mov %d5,128
<<<<<<< HEAD
<<<<<<< HEAD
8000410a:	6d 00 d0 0d 	call 80005caa <IfxPort_setPinMode>
=======
8000410a:	6d 00 a2 0d 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000410a:	6d 00 ea 0d 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
8000410e:	91 40 00 4f 	movh.a %a4,61444
80004112:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004116:	82 34       	mov %d4,3
80004118:	3b 00 08 50 	mov %d5,128
<<<<<<< HEAD
<<<<<<< HEAD
8000411c:	6d 00 c7 0d 	call 80005caa <IfxPort_setPinMode>
=======
8000411c:	6d 00 99 0d 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000411c:	6d 00 e1 0d 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80004120:	91 40 00 4f 	movh.a %a4,61444
80004124:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004128:	82 44       	mov %d4,4
8000412a:	3b 00 08 50 	mov %d5,128
<<<<<<< HEAD
<<<<<<< HEAD
8000412e:	6d 00 be 0d 	call 80005caa <IfxPort_setPinMode>
=======
8000412e:	6d 00 90 0d 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000412e:	6d 00 d8 0d 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80004132:	91 40 00 4f 	movh.a %a4,61444
80004136:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000413a:	3b 00 08 50 	mov %d5,128
8000413e:	82 54       	mov %d4,5
<<<<<<< HEAD
<<<<<<< HEAD
80004140:	6d 00 b5 0d 	call 80005caa <IfxPort_setPinMode>
=======
80004140:	6d 00 87 0d 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004140:	6d 00 cf 0d 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxPort_setPinModeOutput(LCD_D4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D7, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    delay_ms(100);  
80004144:	3b 40 06 40 	mov %d4,100
<<<<<<< HEAD
<<<<<<< HEAD
80004148:	6d 00 e1 00 	call 8000430a <delay_ms>
=======
80004148:	6d 00 ff 24 	call 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004148:	6d 00 f2 00 	call 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000414c:	91 40 00 ff 	movh.a %a15,61444
80004150:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004154:	7b 00 04 f0 	movh %d15,64
80004158:	68 1f       	st.w [%a15]4,%d15
8000415a:	7b 00 08 f0 	movh %d15,128
8000415e:	68 1f       	st.w [%a15]4,%d15

    IfxPort_setPinLow(LCD_RS);
    IfxPort_setPinLow(LCD_E);

    lcd_write4bits(0x03); delay_ms(10);  
80004160:	82 34       	mov %d4,3
80004162:	6d ff 76 ff 	call 8000404e <lcd_write4bits>
80004166:	3b a0 00 40 	mov %d4,10
<<<<<<< HEAD
<<<<<<< HEAD
8000416a:	6d 00 d0 00 	call 8000430a <delay_ms>
=======
8000416a:	6d 00 ee 24 	call 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000416a:	6d 00 e1 00 	call 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    lcd_write4bits(0x03); delay_ms(10);  
8000416e:	82 34       	mov %d4,3
80004170:	6d ff 6f ff 	call 8000404e <lcd_write4bits>
80004174:	3b a0 00 40 	mov %d4,10
<<<<<<< HEAD
<<<<<<< HEAD
80004178:	6d 00 c9 00 	call 8000430a <delay_ms>
=======
80004178:	6d 00 e7 24 	call 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004178:	6d 00 da 00 	call 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    lcd_write4bits(0x03); delay_ms(5);   
8000417c:	82 34       	mov %d4,3
8000417e:	6d ff 68 ff 	call 8000404e <lcd_write4bits>
80004182:	82 54       	mov %d4,5
<<<<<<< HEAD
<<<<<<< HEAD
80004184:	6d 00 c3 00 	call 8000430a <delay_ms>
=======
80004184:	6d 00 e1 24 	call 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004184:	6d 00 d4 00 	call 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    lcd_write4bits(0x02); delay_ms(5);   
80004188:	82 24       	mov %d4,2
8000418a:	6d ff 62 ff 	call 8000404e <lcd_write4bits>
8000418e:	82 54       	mov %d4,5
<<<<<<< HEAD
<<<<<<< HEAD
80004190:	6d 00 bd 00 	call 8000430a <delay_ms>
=======
80004190:	6d 00 db 24 	call 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004190:	6d 00 ce 00 	call 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    lcd_command(0x28);
80004194:	3b 80 02 40 	mov %d4,40
80004198:	5c 8b       	call 800040ae <lcd_command>
    lcd_command(0x0C);
8000419a:	3b c0 00 40 	mov %d4,12
8000419e:	5c 88       	call 800040ae <lcd_command>
    lcd_command(0x06);
800041a0:	82 64       	mov %d4,6
800041a2:	5c 86       	call 800040ae <lcd_command>
    lcd_clear();
800041a4:	1d ff 95 ff 	j 800040ce <lcd_clear>

800041a8 <lcd_goto>:
}


void lcd_goto(uint8 row, uint8 col)
{
    uint8 address = (row == 0) ? 0x00 : 0x40;
800041a8:	ab 04 a4 44 	seln %d4,%d4,%d4,64
    address += col;
800041ac:	42 54       	add %d4,%d5
    lcd_command(0x80 | address);
800041ae:	b7 14 99 43 	insert %d4,%d4,1,7,25
800041b2:	1d ff 7e ff 	j 800040ae <lcd_command>

800041b6 <lcd_print>:
800041b6:	91 40 00 cf 	movh.a %a12,61444
}


void lcd_print(const char *str)
{
800041ba:	40 4f       	mov.aa %a15,%a4
800041bc:	d9 cc 00 8a 	lea %a12,[%a12]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800041c0:	3b 00 04 80 	mov %d8,64
    while (*str)
800041c4:	79 ff 00 00 	ld.b %d15,[%a15]0
800041c8:	6e 11       	jz %d15,800041ea <lcd_print+0x34>
        lcd_data(*str++);
800041ca:	16 ff       	and %d15,255


static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
800041cc:	8f cf 1f 40 	sh %d4,%d15,-4
800041d0:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x40038004>>,%d8
800041d4:	6d ff 3d ff 	call 8000404e <lcd_write4bits>
    lcd_write4bits(data & 0x0F);
800041d8:	8f ff 00 41 	and %d4,%d15,15
800041dc:	6d ff 39 ff 	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800041e0:	82 54       	mov %d4,5


void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
800041e2:	b0 1f       	add.a %a15,1
static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
    lcd_write4bits(data & 0x0F);
    delay_ms(5);       
<<<<<<< HEAD
<<<<<<< HEAD
800041e4:	6d 00 93 00 	call 8000430a <delay_ms>
=======
800041e4:	6d 00 b1 24 	call 80008b46 <delay_ms>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800041e4:	6d 00 a4 00 	call 8000432c <delay_ms>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
800041e8:	3c ee       	j 800041c4 <lcd_print+0xe>

void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
}
800041ea:	00 90       	ret 

800041ec <ButtonISR>:

<<<<<<< HEAD
=======
TASK(Task1)
{
    printfSerial("Task1 Begins...");
800041ec:	91 00 00 48 	movh.a %a4,32768
800041f0:	d9 44 2b 00 	lea %a4,[%a4]43 <8000002b <_start+0xb>>
800041f4:	6d 00 8e 00 	call 80004310 <printfSerial>
    mdelay(3000);
800041f8:	3b 80 bb 40 	mov %d4,3000
800041fc:	6d 00 c1 00 	call 8000437e <mdelay>
    printfSerial("Task1 Finishes...");
80004200:	91 00 00 48 	movh.a %a4,32768
80004204:	d9 44 3b 00 	lea %a4,[%a4]59 <8000003b <_start+0x1b>>
80004208:	6d 00 84 00 	call 80004310 <printfSerial>

    TerminateTask();
8000420c:	1d 00 dc 2b 	j 800099c4 <TerminateTask>

80004210 <FuncTaskLCD>:
TASK(TaskLCD)
{   
    // lcd_clear(); // LCD 출력 내용 초기화 함수
    // printInfoDisplay();  

    TerminateTask();
80004210:	1d 00 da 2b 	j 800099c4 <TerminateTask>

80004214 <FuncTaskUltrasonic>:
}

TASK(TaskUltrasonic)
{   
80004214:	00 90       	ret 

80004216 <ButtonISR>:
}
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

ISR2(ButtonISR)
{
    unsigned int buttonState;
    DisableAllInterrupts();
<<<<<<< HEAD
<<<<<<< HEAD
800041ec:	6d 00 51 2b 	call 8000988e <DisableAllInterrupts>
=======
800041ec:	6d 00 c7 2b 	call 8000997a <DisableAllInterrupts>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_tc_delay(5000);
800041f0:	3b 80 38 41 	mov %d4,5000
800041f4:	6d 00 99 2b 	call 80009926 <osEE_tc_delay>
    printfSerial("interuppt");
800041f8:	91 00 00 48 	movh.a %a4,32768
800041fc:	d9 44 2b 00 	lea %a4,[%a4]43 <8000002b <_start+0xb>>
80004200:	6d 00 3b 01 	call 80004476 <printfSerial>
    buttonState = readLcdButtons();
80004204:	6d ff fe fe 	call 80004000 <readLcdButtons>
    updateInfoState(buttonState);
80004208:	02 24       	mov %d4,%d2
8000420a:	6d 00 82 24 	call 80008b0e <updateInfoState>

    osEE_tc_delay(3000);
8000420e:	3b 80 bb 40 	mov %d4,3000
80004212:	6d 00 8a 2b 	call 80009926 <osEE_tc_delay>
    EnableAllInterrupts();
80004216:	1d 00 bd 2b 	j 80009990 <EnableAllInterrupts>

8000421a <FuncTaskUltrasonic>:
=======
80004216:	6d 00 2e 2a 	call 80009672 <DisableAllInterrupts>
    osEE_tc_delay(5000);
8000421a:	3b 80 38 41 	mov %d4,5000
8000421e:	6d 00 ff 29 	call 8000961c <osEE_tc_delay>
    printfSerial("interuppt");
80004222:	91 00 00 48 	movh.a %a4,32768
80004226:	d9 44 0d 10 	lea %a4,[%a4]77 <8000004d <_start+0x2d>>
8000422a:	6d 00 73 00 	call 80004310 <printfSerial>
    buttonState = readLcdButtons();
8000422e:	6d ff e9 fe 	call 80004000 <readLcdButtons>
    updateInfoState(buttonState);
80004232:	02 24       	mov %d4,%d2
80004234:	6d 00 25 24 	call 80008a7e <updateInfoState>

    osEE_tc_delay(3000);
80004238:	3b 80 bb 40 	mov %d4,3000
8000423c:	6d 00 f0 29 	call 8000961c <osEE_tc_delay>
    EnableAllInterrupts();
80004240:	1d 00 24 2a 	j 80009688 <EnableAllInterrupts>

80004244 <TimerISR>:


ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004244:	7b f0 00 40 	movh %d4,15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}

TASK(TaskUltrasonic)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000421a:	20 08       	sub.a %sp,8
    printfSerial("ultrasonic:(%d)", getUltrasonic());
8000421c:	6d 00 68 26 	call 80008eec <getUltrasonic>
80004220:	91 00 00 48 	movh.a %a4,32768
80004224:	74 a2       	st.w [%sp],%d2
80004226:	d9 44 35 00 	lea %a4,[%a4]53 <80000035 <_start+0x15>>
8000422a:	1d 00 15 01 	j 80004454 <printfSerial>
=======
80004248:	20 08       	sub.a %sp,8
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000424a:	1b 04 24 44 	addi %d4,%d4,16960
    if (c == 0)
8000424e:	91 00 00 f7 	movh.a %a15,28672
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
    printfSerial("upperUltrasonic:(%d)", getUltrasonic(&g_UpperUltrasonic));
8000421a:	91 00 00 47 	movh.a %a4,28672
    osEE_tc_delay(3000);
    EnableAllInterrupts();
}
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

TASK(TaskUltrasonic)
{
8000421e:	20 08       	sub.a %sp,8
    printfSerial("upperUltrasonic:(%d)", getUltrasonic(&g_UpperUltrasonic));
80004220:	d9 44 0a 40 	lea %a4,[%a4]266
80004224:	6d 00 d8 26 	call 80008fd4 <getUltrasonic>
80004228:	91 00 00 48 	movh.a %a4,32768
8000422c:	74 a2       	st.w [%sp],%d2
8000422e:	d9 44 35 00 	lea %a4,[%a4]53 <80000035 <_start+0x15>>
80004232:	6d 00 22 01 	call 80004476 <printfSerial>
    printfSerial("frontUltrasonic:(%d)", getUltrasonic(&g_FrontUltrasonic));
80004236:	91 00 00 47 	movh.a %a4,28672
8000423a:	d9 44 00 40 	lea %a4,[%a4]256 <70000100 <g_FrontUltrasonic>>
8000423e:	6d 00 cb 26 	call 80008fd4 <getUltrasonic>
80004242:	91 00 00 48 	movh.a %a4,32768
80004246:	74 a2       	st.w [%sp],%d2
80004248:	d9 44 0a 10 	lea %a4,[%a4]74 <8000004a <_start+0x2a>>
8000424c:	1d 00 15 01 	j 80004476 <printfSerial>

80004250 <TimerISR>:
}

ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
<<<<<<< HEAD
<<<<<<< HEAD
8000422e:	7b f0 00 40 	movh %d4,15
{
    printfSerial("ultrasonic:(%d)", getUltrasonic());
=======
80004250:	7b f0 00 40 	movh %d4,15
    printfSerial("upperUltrasonic:(%d)", getUltrasonic(&g_UpperUltrasonic));
    printfSerial("frontUltrasonic:(%d)", getUltrasonic(&g_FrontUltrasonic));
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

ISR2(TimerISR)
{
80004254:	20 28       	sub.a %sp,40
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004256:	1b 04 24 44 	addi %d4,%d4,16960
8000425a:	6d 00 01 2b 	call 8000985c <osEE_tc_stm_set_sr0_next_match>

    /************** ONE-TIME-TASK ********************/

    // code for packet uart send test//
    if (c % 2 == 1)
8000425e:	91 00 00 c7 	movh.a %a12,28672
80004262:	19 cf 00 00 	ld.w %d15,[%a12]0 <70000000 <__DSPR0_START>>
80004266:	82 22       	mov %d2,2
80004268:	4b 2f 01 22 	div %e2,%d15,%d2
8000426c:	df 13 4f 80 	jne %d3,1,8000430a <TimerISR+0xba>
    {
        sendActuatorPacket(&sendActuatorPkt);
80004270:	91 00 00 f7 	movh.a %a15,28672
80004274:	d9 ff 04 00 	lea %a15,[%a15]4 <70000004 <sendActuatorPkt>>
80004278:	40 f4       	mov.aa %a4,%a15
8000427a:	6d 00 2e 25 	call 80008cd6 <sendActuatorPacket>
        printfSerial("ActuatorPacket sent, chair=%d...",sendActuatorPkt.servo_chair++);
8000427e:	08 52       	ld.bu %d2,[%a15]5
80004280:	0c f4       	ld.bu %d15,[%a15]4
80004282:	8f 82 00 20 	sh %d2,%d2,8
80004286:	a6 f2       	or %d2,%d15
80004288:	9a 12       	add %d15,%d2,1
8000428a:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000428e:	91 00 00 48 	movh.a %a4,32768
80004292:	28 4f       	st.b [%a15]4,%d15
80004294:	06 8f       	sh %d15,-8
80004296:	28 5f       	st.b [%a15]5,%d15
80004298:	74 a2       	st.w [%sp],%d2
8000429a:	d9 44 1f 10 	lea %a4,[%a4]95 <8000005f <_start+0x3f>>
8000429e:	6d 00 ec 00 	call 80004476 <printfSerial>
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
            g_RecievedActuatorPacket.start_byte,
800042a2:	91 00 00 27 	movh.a %a2,28672
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042a6:	39 2f e0 10 	ld.bu %d15,[%a2]3168 <70000c60 <g_RecievedActuatorPacket>>
            g_RecievedActuatorPacket.start_byte,
800042aa:	d9 2f e0 10 	lea %a15,[%a2]3168 <70000c60 <g_RecievedActuatorPacket>>
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ae:	78 00       	st.w [%sp]0,%d15
800042b0:	0c f1       	ld.bu %d15,[%a15]1
800042b2:	91 00 00 48 	movh.a %a4,32768
800042b6:	78 01       	st.w [%sp]4,%d15
            g_RecievedActuatorPacket.start_byte,
            g_RecievedActuatorPacket.packet_id,
            g_RecievedActuatorPacket.led_rgb,
800042b8:	0c f2       	ld.bu %d15,[%a15]2
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ba:	d9 44 00 20 	lea %a4,[%a4]128 <80000080 <_start+0x60>>
800042be:	16 07       	and %d15,7
800042c0:	78 02       	st.w [%sp]8,%d15
            g_RecievedActuatorPacket.start_byte,
            g_RecievedActuatorPacket.packet_id,
            g_RecievedActuatorPacket.led_rgb,
            g_RecievedActuatorPacket.fan,
800042c2:	0c f3       	ld.bu %d15,[%a15]3
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042c4:	8f 3f 00 21 	and %d2,%d15,3
800042c8:	59 a2 0c 00 	st.w [%sp]12,%d2
800042cc:	37 0f 61 21 	extr.u %d2,%d15,2,1
800042d0:	59 a2 10 00 	st.w [%sp]16,%d2
800042d4:	37 0f e1 21 	extr.u %d2,%d15,3,1
800042d8:	37 0f 64 f2 	extr.u %d15,%d15,4,4
800042dc:	59 a2 14 00 	st.w [%sp]20,%d2
800042e0:	78 06       	st.w [%sp]24,%d15
            g_RecievedActuatorPacket.led_rgb,
            g_RecievedActuatorPacket.fan,
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
800042e2:	0c f5       	ld.bu %d15,[%a15]5
800042e4:	08 42       	ld.bu %d2,[%a15]4
800042e6:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042ea:	a6 2f       	or %d15,%d2
800042ec:	78 07       	st.w [%sp]28,%d15
            g_RecievedActuatorPacket.fan,
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
            g_RecievedActuatorPacket.servo_window,
800042ee:	0c f7       	ld.bu %d15,[%a15]7
800042f0:	08 62       	ld.bu %d2,[%a15]6
800042f2:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042f6:	a6 2f       	or %d15,%d2
800042f8:	78 08       	st.w [%sp]32,%d15
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
            g_RecievedActuatorPacket.servo_window,
            g_RecievedActuatorPacket.servo_air);   
800042fa:	0c f9       	ld.bu %d15,[%a15]9
800042fc:	08 82       	ld.bu %d2,[%a15]8
800042fe:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
80004302:	a6 2f       	or %d15,%d2
80004304:	78 09       	st.w [%sp]36,%d15
80004306:	6d 00 b8 00 	call 80004476 <printfSerial>
            g_RecievedActuatorPacket.servo_air);   
    }
    // code for packet uart send test end//

    /************** basic-TASK (every 1s) ********************/
    printfSerial("\n%4ld: ", c++);
8000430a:	19 cf 00 00 	ld.w %d15,[%a12]0 <70000000 <__DSPR0_START>>
8000430e:	91 00 00 48 	movh.a %a4,32768
80004312:	78 00       	st.w [%sp]0,%d15
80004314:	d9 44 17 30 	lea %a4,[%a4]215 <800000d7 <_start+0xb7>>
80004318:	c2 1f       	add %d15,1
8000431a:	59 cf 00 00 	st.w [%a12]0 <70000000 <__DSPR0_START>>,%d15
8000431e:	6d 00 ac 00 	call 80004476 <printfSerial>
    ActivateTask(TaskUltrasonic);
80004322:	82 54       	mov %d4,5

    
80004324:	d9 aa 28 00 	lea %sp,[%sp]40
    }
    // code for packet uart send test end//

    /************** basic-TASK (every 1s) ********************/
    printfSerial("\n%4ld: ", c++);
    ActivateTask(TaskUltrasonic);
80004328:	1d 00 25 2c 	j 80009b72 <ActivateTask>

<<<<<<< HEAD
8000430a <delay_ms>:
=======
80004252:	6d 00 80 29 	call 80009552 <osEE_tc_stm_set_sr0_next_match>
    if (c == 0)
80004256:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
8000425a:	ee 04       	jnz %d15,80004262 <TimerISR+0x1e>
        ActivateTask(Task1);
8000425c:	82 34       	mov %d4,3
8000425e:	6d 00 06 2b 	call 8000986a <ActivateTask>
    if (c % 2 == 0)
80004262:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004266:	ae 04       	jnz.t %d15,0,8000426e <TimerISR+0x2a>
    ActivateTask(TaskLCD);
80004268:	82 44       	mov %d4,4
8000426a:	6d 00 00 2b 	call 8000986a <ActivateTask>
    ActivateTask(TaskUltrasonic);
8000426e:	82 54       	mov %d4,5
80004270:	6d 00 fd 2a 	call 8000986a <ActivateTask>
    printfSerial("\n%4ld: ", c++);
80004274:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004278:	91 00 00 48 	movh.a %a4,32768
8000427c:	d9 44 17 10 	lea %a4,[%a4]87 <80000057 <_start+0x37>>
80004280:	78 00       	st.w [%sp]0,%d15
80004282:	c2 1f       	add %d15,1
80004284:	59 ff 00 00 	st.w [%a15]0 <70000000 <__DSPR0_START>>,%d15
80004288:	6d 00 44 00 	call 80004310 <printfSerial>
    int photoValue = getPhotoresiter();
8000428c:	6d 00 48 24 	call 80008b1c <getPhotoresiter>
    printfSerial("%d: ", photoValue);
80004290:	91 00 00 48 	movh.a %a4,32768
80004294:	74 a2       	st.w [%sp],%d2
80004296:	d9 44 1f 10 	lea %a4,[%a4]95 <8000005f <_start+0x3f>>
8000429a:	1d 00 3b 00 	j 80004310 <printfSerial>

8000429e <UART_init>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000432c <delay_ms>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000430a:	02 4a       	mov %d10,%d4
=======
8000429e:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042a0:	d9 a4 24 00 	lea %a4,[%sp]36
800042a4:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
800042a8:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800042aa:	6d 00 5d 0a 	call 80005764 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
800042ae:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
800042b2:	7b 10 7e f4 	movh %d15,18401
800042b6:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
800042b8:	82 3f       	mov %d15,3
800042ba:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
800042be:	da 13       	mov %d15,19
800042c0:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800042c4:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042c8:	7b 00 00 28 	movh %d2,32768
800042cc:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800042ce:	37 0f 63 f0 	extr.u %d15,%d15,0,3
800042d2:	d9 af 04 00 	lea %a15,[%sp]4
800042d6:	40 f4       	mov.aa %a4,%a15
800042d8:	d9 32 24 10 	lea %a2,[%a3]100
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
800042dc:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
800042e0:	a0 33       	mov.a %a3,3
800042e2:	09 22 48 01 	ld.d %e2,[%a2+]8
800042e6:	89 42 48 01 	st.d [%a4+]8 <80000008 <BootModeHeader0+0x8>>,%e2
800042ea:	fc 3c       	loop %a3,800042e2 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800042ec:	7b 00 00 f7 	movh %d15,28672
800042f0:	1b 4f 97 f0 	addi %d15,%d15,2420
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800042f4:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
800042f8:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
800042fa:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
800042fe:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004302:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004306:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
8000430a:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000430c:	1d 00 55 08 	j 800053b6 <IfxAsclin_Asc_initModule>

80004310 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
=======
8000432c:	02 4a       	mov %d10,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void printfSerial(const char *fmt,...)
{
<<<<<<< HEAD
80004310:	20 e8       	sub.a %sp,232
80004312:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80004314:	6d 00 ba 29 	call 80009688 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
80004318:	40 f5       	mov.aa %a5,%a15
8000431a:	d9 a4 28 10 	lea %a4,[%sp]104
8000431e:	3b 00 08 40 	mov %d4,128
80004322:	d9 a6 28 30 	lea %a6,[%sp]232
80004326:	6d 00 63 38 	call 8000b3ec <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
8000432a:	d9 a4 28 10 	lea %a4,[%sp]104
8000432e:	6d 00 30 38 	call 8000b38e <strlen>
80004332:	91 00 00 f7 	movh.a %a15,28672
80004336:	d9 ff b4 50 	lea %a15,[%a15]2420 <70000974 <g_AsclinAsc>>
8000433a:	f9 f2 3a 90 	st.h [%a15]634 <7000027a <__malloc_av_+0x17a>>,%d2
    unsigned int i =0;
8000433e:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80004340:	d9 a4 28 10 	lea %a4,[%sp]104
80004344:	6d 00 25 38 	call 8000b38e <strlen>
80004348:	7f 2f 0c 80 	jge.u %d15,%d2,80004360 <printfSerial+0x50>
        txData[i] = buf[i];
8000434c:	d9 a3 04 00 	lea %a3,[%sp]4
80004350:	10 32       	addsc.a %a2,%a3,%d15,0
80004352:	d9 a3 28 10 	lea %a3,[%sp]104
80004356:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80004358:	c2 1f       	add %d15,1
        txData[i] = buf[i];
8000435a:	08 02       	ld.bu %d2,[%a15]0
8000435c:	34 22       	st.b [%a2],%d2
8000435e:	3c f1       	j 80004340 <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
80004360:	91 00 00 47 	movh.a %a4,28672
80004364:	91 00 00 67 	movh.a %a6,28672
80004368:	82 f4       	mov %d4,-1
8000436a:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
8000436e:	d9 a5 04 00 	lea %a5,[%sp]4 <70000bc8 <g_AsclinAsc+0x254>>
80004372:	d9 66 ae f0 	lea %a6,[%a6]3054 <70000bee <g_AsclinAsc+0x27a>>
80004376:	9b 04 00 58 	addih %d5,%d4,32768
8000437a:	1d 00 5d 0a 	j 80005834 <IfxAsclin_Asc_write>

8000437e <mdelay>:
=======
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
8000432e:	6d 00 bf 0e 	call 800060ac <IfxScuCcu_getSourceFrequency>
80004332:	91 30 00 ff 	movh.a %a15,61443
80004336:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000433a:	48 04       	ld.w %d4,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
8000437e:	85 fa 10 00 	ld.w %d10,f0000010 <_SMALL_DATA4_+0x3fff8010>
}

void mdelay(unsigned long delay_ms)
{
80004382:	02 4b       	mov %d11,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80004384:	85 fc 2c 00 	ld.w %d12,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
<<<<<<< HEAD
8000430c:	6d 00 b6 0e 	call 80006078 <IfxScuCcu_getSourceFrequency>
80004310:	91 30 00 ff 	movh.a %a15,61443
80004314:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80004318:	48 04       	ld.w %d4,[%a15]0
=======
80004388:	6d 00 4a 0e 	call 8000601c <IfxScuCcu_getSourceFrequency>
8000438c:	91 30 00 ff 	movh.a %a15,61443
80004390:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80004394:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
8000431a:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
8000431e:	37 04 64 44 	extr.u %d4,%d4,8,4
80004322:	53 1f 40 00 	mul.u %e0,%d15,1
80004326:	4b 04 41 41 	itof %d4,%d4
=======
8000433c:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004340:	37 04 64 44 	extr.u %d4,%d4,8,4
80004344:	53 1f 40 00 	mul.u %e0,%d15,1
80004348:	4b 04 41 41 	itof %d4,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    result |= ((uint64)stm->CAP.U) << 32;
8000434c:	8f 0f 40 61 	or %d6,%d15,0
80004350:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
80004354:	3b 80 3e 40 	mov %d4,1000
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
80004358:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
8000435c:	4b 42 11 22 	div.u %e2,%d2,%d4
80004360:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
80004364:	73 a2 68 40 	mul.u %e4,%d2,%d10
80004368:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000436c:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004370:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80004374:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80004378:	8f 0f 40 81 	or %d8,%d15,0
8000437c:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80004380:	0b 68 c0 20 	subx %d2,%d8,%d6
80004384:	0b 79 d0 30 	subc %d3,%d9,%d7
80004388:	3a 53       	eq %d15,%d3,%d5
8000438a:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
8000438e:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80004392:	ee ed       	jnz %d15,8000436c <delay_ms+0x40>
}
80004394:	00 90       	ret 

80004396 <delay_us>:

void delay_us(unsigned long delay)
{
80004396:	02 4a       	mov %d10,%d4
80004398:	6d 00 8a 0e 	call 800060ac <IfxScuCcu_getSourceFrequency>
8000439c:	91 30 00 ff 	movh.a %a15,61443
800043a0:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800043a4:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043a6:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800043aa:	37 04 64 44 	extr.u %d4,%d4,8,4
800043ae:	53 1f 40 00 	mul.u %e0,%d15,1
800043b2:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
800043b6:	8f 0f 40 61 	or %d6,%d15,0
800043ba:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_us = freq / 1000000;
800043be:	7b f0 00 40 	movh %d4,15
800043c2:	1b 04 24 44 	addi %d4,%d4,16960
    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
=======
80004396:	53 1a 40 80 	mul.u %e8,%d10,1
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000439a:	0b ac 10 48 	mov %e4,%d12,%d10
8000439e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800043a2:	a6 95       	or %d5,%d9
800043a4:	02 28       	mov %d8,%d2
800043a6:	6d 00 e1 30 	call 8000a568 <__floatundisf>
800043aa:	4b 0f 41 f1 	itof %d15,%d15
800043ae:	7b a0 47 a4 	movh %d10,17530
800043b2:	4b f8 51 f0 	div.f %d15,%d8,%d15
800043b6:	40 fc       	mov.aa %a12,%a15
800043b8:	40 fd       	mov.aa %a13,%a15
800043ba:	4b af 51 f0 	div.f %d15,%d15,%d10
800043be:	4b f2 51 20 	div.f %d2,%d2,%d15
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043c2:	02 ae       	mov %d14,%d10
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}

void delay_us(unsigned long delay)
{
<<<<<<< HEAD
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
800043c6:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_us = freq / 1000000;
800043ca:	4b 42 11 22 	div.u %e2,%d2,%d4
800043ce:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_us;
800043d2:	73 a2 68 40 	mul.u %e4,%d2,%d10
800043d6:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043da:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800043de:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
800043e2:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043e6:	8f 0f 40 81 	or %d8,%d15,0
800043ea:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
800043ee:	0b 68 c0 20 	subx %d2,%d8,%d6
800043f2:	0b 79 d0 30 	subc %d3,%d9,%d7
800043f6:	3a 53       	eq %d15,%d3,%d5
800043f8:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
800043fc:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80004400:	ee ed       	jnz %d15,800043da <delay_us+0x44>
}
80004402:	00 90       	ret 

80004404 <UART_init>:

void UART_init(void)
{
80004404:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
80004406:	d9 a4 24 00 	lea %a4,[%sp]36
8000440a:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
8000440e:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
80004410:	6d 00 f2 09 	call 800057f4 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
80004414:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
80004418:	7b 10 7e f4 	movh %d15,18401
8000441c:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
8000441e:	82 3f       	mov %d15,3
80004420:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
80004424:	da 13       	mov %d15,19
80004426:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000442a:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
8000442e:	7b 00 00 28 	movh %d2,32768
80004432:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004434:	37 0f 63 f0 	extr.u %d15,%d15,0,3
80004438:	d9 af 04 00 	lea %a15,[%sp]4
8000443c:	40 f4       	mov.aa %a4,%a15
8000443e:	d9 32 20 30 	lea %a2,[%a3]224
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
80004442:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
80004446:	a0 33       	mov.a %a3,3
80004448:	09 22 48 01 	ld.d %e2,[%a2+]8
8000444c:	89 42 48 01 	st.d [%a4+]8,%e2
80004450:	fc 3c       	loop %a3,80004448 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004452:	7b 00 00 f7 	movh %d15,28672
80004456:	1b 4f 99 f0 	addi %d15,%d15,2452
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000445a:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
8000445e:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004460:	d9 44 a8 f0 	lea %a4,[%a4]3048 <70000be8 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004464:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004468:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
8000446c:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80004470:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004472:	1d 00 ea 07 	j 80005446 <IfxAsclin_Asc_initModule>

80004476 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
=======
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043c4:	4b 02 71 f1 	ftouz %d15,%d2
800043c8:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800043cc:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043d0:	6d 00 26 0e 	call 8000601c <IfxScuCcu_getSourceFrequency>
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
800043d4:	3b 40 01 40 	mov %d4,20
800043d8:	4b 4b 11 42 	div.u %e4,%d11,%d4
800043dc:	48 02       	ld.w %d2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


void printfSerial(const char *fmt,...)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004454:	20 e8       	sub.a %sp,232
80004456:	40 4f       	mov.aa %a15,%a4
=======
80004476:	20 e8       	sub.a %sp,232
80004478:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    EnableAllInterrupts();
8000447a:	6d 00 8b 2a 	call 80009990 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
8000447e:	40 f5       	mov.aa %a5,%a15
80004480:	d9 a4 28 10 	lea %a4,[%sp]104
80004484:	3b 00 08 40 	mov %d4,128
80004488:	d9 a6 28 30 	lea %a6,[%sp]232
8000448c:	6d 00 f5 38 	call 8000b676 <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
80004490:	d9 a4 28 10 	lea %a4,[%sp]104
80004494:	6d 00 c2 38 	call 8000b618 <strlen>
80004498:	91 00 00 f7 	movh.a %a15,28672
8000449c:	d9 ff 94 60 	lea %a15,[%a15]2452 <70000994 <g_AsclinAsc>>
800044a0:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x150>>,%d2
    unsigned int i =0;
800044a4:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
800044a6:	d9 a4 28 10 	lea %a4,[%sp]104
800044aa:	6d 00 b7 38 	call 8000b618 <strlen>
800044ae:	7f 2f 0c 80 	jge.u %d15,%d2,800044c6 <printfSerial+0x50>
        txData[i] = buf[i];
800044b2:	d9 a3 04 00 	lea %a3,[%sp]4
800044b6:	10 32       	addsc.a %a2,%a3,%d15,0
800044b8:	d9 a3 28 10 	lea %a3,[%sp]104
800044bc:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
800044be:	c2 1f       	add %d15,1
        txData[i] = buf[i];
800044c0:	08 02       	ld.bu %d2,[%a15]0
800044c2:	34 22       	st.b [%a2],%d2
800044c4:	3c f1       	j 800044a6 <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
800044c6:	91 00 00 47 	movh.a %a4,28672
800044ca:	91 00 00 67 	movh.a %a6,28672
800044ce:	82 f4       	mov %d4,-1
800044d0:	d9 44 a8 f0 	lea %a4,[%a4]3048 <70000be8 <g_AsclinAsc+0x254>>
800044d4:	d9 a5 04 00 	lea %a5,[%sp]4 <70000be8 <g_AsclinAsc+0x254>>
800044d8:	d9 66 c4 00 	lea %a6,[%a6]3076 <70000c04 <g_AsclinAsc+0x270>>
800044dc:	9b 04 00 58 	addih %d5,%d4,32768
800044e0:	1d 00 f2 09 	j 800058c4 <IfxAsclin_Asc_write>

<<<<<<< HEAD
800044c2 <initVADCModule>:
=======
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
800043de:	82 0b       	mov %d11,0
    while (cnt < (delay_ms / period_ms)) {
800043e0:	02 4d       	mov %d13,%d4
800043e2:	5f db 41 00 	jeq %d11,%d13,80004464 <mdelay+0xe6>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043e6:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800043ea:	85 fe 2c 08 	ld.a %a14,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043ee:	53 1c 40 80 	mul.u %e8,%d12,1
800043f2:	6d 00 15 0e 	call 8000601c <IfxScuCcu_getSourceFrequency>
800043f6:	54 c3       	ld.w %d3,[%a12]
    result |= ((uint64)stm->CAP.U) << 32;
800043f8:	80 e5       	mov.d %d5,%a14
800043fa:	37 03 64 34 	extr.u %d3,%d3,8,4
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800043fe:	02 c4       	mov %d4,%d12
80004400:	a6 95       	or %d5,%d9
80004402:	60 3f       	mov.a %a15,%d3
80004404:	02 28       	mov %d8,%d2
80004406:	6d 00 b1 30 	call 8000a568 <__floatundisf>
8000440a:	80 f4       	mov.d %d4,%a15
8000440c:	4b 04 41 31 	itof %d3,%d4
80004410:	4b 38 51 80 	div.f %d8,%d8,%d3
80004414:	4b a8 51 80 	div.f %d8,%d8,%d10
80004418:	4b 82 51 20 	div.f %d2,%d2,%d8
8000441c:	4b 02 71 21 	ftouz %d2,%d2
        if (current_ms - prev_ms >= period_ms) {
80004420:	a2 f2       	sub %d2,%d15
80004422:	8b 42 61 22 	lt.u %d2,%d2,20
80004426:	df 02 de ff 	jne %d2,0,800043e2 <mdelay+0x64>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000442a:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000442e:	85 ff 2c 08 	ld.a %a15,f000002c <_SMALL_DATA4_+0x3fff802c>
80004432:	6d 00 f5 0d 	call 8000601c <IfxScuCcu_getSourceFrequency>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004436:	53 1c 40 80 	mul.u %e8,%d12,1
8000443a:	4c d0       	ld.w %d15,[%a13]0
    result |= ((uint64)stm->CAP.U) << 32;
8000443c:	80 f5       	mov.d %d5,%a15
8000443e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
            cnt++;
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004442:	02 c4       	mov %d4,%d12
80004444:	a6 95       	or %d5,%d9
80004446:	02 28       	mov %d8,%d2
80004448:	6d 00 90 30 	call 8000a568 <__floatundisf>
8000444c:	4b 0f 41 f1 	itof %d15,%d15
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        if (current_ms - prev_ms >= period_ms) {
            cnt++;
80004450:	c2 1b       	add %d11,1
80004452:	4b f8 51 f0 	div.f %d15,%d8,%d15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004456:	4b ef 51 f0 	div.f %d15,%d15,%d14
8000445a:	4b f2 51 20 	div.f %d2,%d2,%d15
8000445e:	4b 02 71 f1 	ftouz %d15,%d2
80004462:	3c c0       	j 800043e2 <mdelay+0x64>
        }
    }
}
80004464:	00 90       	ret 

80004466 <initVADCModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800044e4 <initVADCModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
800044c2:	20 28       	sub.a %sp,40
=======
800044e4:	20 28       	sub.a %sp,40
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
800044e6:	d9 a4 04 00 	lea %a4,[%sp]4
800044ea:	91 20 00 5f 	movh.a %a5,61442
800044ee:	6d 00 c6 1d 	call 8000807a <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
800044f2:	91 00 00 47 	movh.a %a4,28672
800044f6:	d9 44 84 60 	lea %a4,[%a4]2436 <70000984 <g_vadc>>
800044fa:	d9 a5 04 00 	lea %a5,[%sp]4 <70000984 <g_vadc>>
800044fe:	1d 00 4a 1d 	j 80007f92 <IfxVadc_Adc_initModule>

<<<<<<< HEAD
800044e0 <initVADCGroup>:
=======
80004466:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
80004468:	d9 a4 04 00 	lea %a4,[%sp]4
8000446c:	91 20 00 5f 	movh.a %a5,61442
80004470:	6d 00 bd 1d 	call 80007fea <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
80004474:	91 00 00 47 	movh.a %a4,28672
80004478:	d9 44 a4 50 	lea %a4,[%a4]2404 <70000964 <g_vadc>>
8000447c:	d9 a5 04 00 	lea %a5,[%sp]4 <70000964 <g_vadc>>
80004480:	1d 00 41 1d 	j 80007f02 <IfxVadc_Adc_initModule>

80004484 <initVADCGroup>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004502 <initVADCGroup>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
800044e0:	20 38       	sub.a %sp,56
=======
80004502:	20 38       	sub.a %sp,56
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004504:	91 00 00 57 	movh.a %a5,28672
80004508:	40 a4       	mov.aa %a4,%sp
8000450a:	d9 55 84 60 	lea %a5,[%a5]2436 <70000984 <g_vadc>>
8000450e:	6d 00 2b 1d 	call 80007f64 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
<<<<<<< HEAD
800044f0:	82 4f       	mov %d15,4
=======
80004484:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004486:	91 00 00 57 	movh.a %a5,28672
8000448a:	40 a4       	mov.aa %a4,%sp
8000448c:	d9 55 a4 50 	lea %a5,[%a5]2404 <70000964 <g_vadc>>
80004490:	6d 00 22 1d 	call 80007ed4 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
80004494:	82 4f       	mov %d15,4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004512:	82 4f       	mov %d15,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
<<<<<<< HEAD
<<<<<<< HEAD
800044f2:	91 00 00 47 	movh.a %a4,28672
=======
80004496:	91 00 00 47 	movh.a %a4,28672
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004514:	91 00 00 47 	movh.a %a4,28672
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
<<<<<<< HEAD
<<<<<<< HEAD
800044f6:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
800044f8:	2c a5       	st.b [%sp]5,%d15
=======
8000449a:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
8000449c:	2c a5       	st.b [%sp]5,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004518:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
8000451a:	2c a5       	st.b [%sp]5,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
<<<<<<< HEAD
<<<<<<< HEAD
800044fa:	d9 44 a0 50 	lea %a4,[%a4]2400 <70000960 <g_vadcGroup>>
=======
8000449e:	d9 44 98 50 	lea %a4,[%a4]2392 <70000958 <g_vadcGroup>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000451c:	d9 44 b8 50 	lea %a4,[%a4]2424 <70000978 <g_vadcGroup>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
800044fe:	82 1f       	mov %d15,1
=======
800044a2:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004520:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
<<<<<<< HEAD
<<<<<<< HEAD
80004500:	40 a5       	mov.aa %a5,%sp
=======
800044a4:	40 a5       	mov.aa %a5,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004522:	40 a5       	mov.aa %a5,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80004502:	e9 af 35 00 	st.b [%sp]53,%d15
=======
80004524:	e9 af 35 00 	st.b [%sp]53,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
80004528:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
8000452c:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004530:	1d 00 55 1b 	j 80007bda <IfxVadc_Adc_initGroup>

<<<<<<< HEAD
80004512 <initVADCChannels>:
=======
800044a6:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
800044aa:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800044ae:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044b2:	1d 00 4c 1b 	j 80007b4a <IfxVadc_Adc_initGroup>

800044b6 <initVADCChannels>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004534 <initVADCChannels>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
<<<<<<< HEAD
<<<<<<< HEAD
80004512:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004516:	7b 00 00 b7 	movh %d11,28672
8000451a:	7b 00 00 a7 	movh %d10,28672
=======
800044b6:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044ba:	7b 00 00 b7 	movh %d11,28672
800044be:	7b 00 00 a7 	movh %d10,28672
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004534:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004538:	7b 00 00 b7 	movh %d11,28672
8000453c:	7b 00 00 a7 	movh %d10,28672
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
<<<<<<< HEAD
<<<<<<< HEAD
8000451e:	91 00 00 d7 	movh.a %a13,28672
=======
800044c2:	91 00 00 d7 	movh.a %a13,28672
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004540:	91 00 00 d7 	movh.a %a13,28672
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004522:	20 60       	sub.a %sp,96
80004524:	82 0f       	mov %d15,0
=======
800044c6:	20 60       	sub.a %sp,96
800044c8:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004544:	20 60       	sub.a %sp,96
80004546:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
<<<<<<< HEAD
<<<<<<< HEAD
80004526:	d9 ee a0 50 	lea %a14,[%a14]2400 <70000960 <g_vadcGroup>>
=======
80004548:	d9 ee b8 50 	lea %a14,[%a14]2424 <70000978 <g_vadcGroup>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000454c:	1b 0b 01 b0 	addi %d11,%d11,16
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
<<<<<<< HEAD
8000452e:	82 19       	mov %d9,1
80004530:	1b 0a 94 a0 	addi %d10,%d10,2368
80004534:	d9 dd ac 50 	lea %a13,[%a13]2412
80004538:	53 8f 21 80 	mul %d8,%d15,24
8000453c:	40 ac       	mov.aa %a12,%sp
=======
800044ca:	d9 ee 98 50 	lea %a14,[%a14]2392 <70000958 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044ce:	1b 8b 00 b0 	addi %d11,%d11,8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800044d2:	82 19       	mov %d9,1
800044d4:	1b 8a 93 a0 	addi %d10,%d10,2360
800044d8:	d9 dd a4 50 	lea %a13,[%a13]2404
800044dc:	53 8f 21 80 	mul %d8,%d15,24
800044e0:	40 ac       	mov.aa %a12,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004550:	82 19       	mov %d9,1
80004552:	1b 8a 95 a0 	addi %d10,%d10,2392
80004556:	d9 dd 84 60 	lea %a13,[%a13]2436
8000455a:	53 8f 21 80 	mul %d8,%d15,24
8000455e:	40 ac       	mov.aa %a12,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
<<<<<<< HEAD
<<<<<<< HEAD
8000453e:	40 e5       	mov.aa %a5,%a14
80004540:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004542:	d9 af 20 10 	lea %a15,[%sp]96
80004546:	30 2c       	add.a %a12,%a2
=======
800044e2:	40 e5       	mov.aa %a5,%a14
800044e4:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044e6:	d9 af 20 10 	lea %a15,[%sp]96
800044ea:	30 2c       	add.a %a12,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004560:	40 e5       	mov.aa %a5,%a14
80004562:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004564:	d9 af 20 10 	lea %a15,[%sp]96
80004568:	30 2c       	add.a %a12,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
<<<<<<< HEAD
<<<<<<< HEAD
80004548:	40 c4       	mov.aa %a4,%a12
8000454a:	6d 00 23 1b 	call 80007b90 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000454e:	60 83       	mov.a %a3,%d8
=======
800044ec:	40 c4       	mov.aa %a4,%a12
800044ee:	6d 00 23 1b 	call 80007b34 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800044f2:	60 83       	mov.a %a3,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000456a:	40 c4       	mov.aa %a4,%a12
8000456c:	6d 00 2c 1b 	call 80007bc4 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004570:	60 83       	mov.a %a3,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
<<<<<<< HEAD
<<<<<<< HEAD
80004550:	40 c5       	mov.aa %a5,%a12
=======
800044f4:	40 c5       	mov.aa %a5,%a12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004572:	40 c5       	mov.aa %a5,%a12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
<<<<<<< HEAD
<<<<<<< HEAD
80004552:	30 3f       	add.a %a15,%a3
80004554:	60 b3       	mov.a %a3,%d11
80004556:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
80004558:	e9 ff ef ef 	st.b [%a15]-81,%d15
=======
800044f6:	30 3f       	add.a %a15,%a3
800044f8:	60 b3       	mov.a %a3,%d11
800044fa:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
800044fc:	e9 ff ef ef 	st.b [%a15]-81,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004574:	30 3f       	add.a %a15,%a3
80004576:	60 b3       	mov.a %a3,%d11
80004578:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
8000457a:	e9 ff ef ef 	st.b [%a15]-81,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
<<<<<<< HEAD
<<<<<<< HEAD
8000455c:	14 22       	ld.bu %d2,[%a2]
=======
80004500:	14 22       	ld.bu %d2,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000457e:	14 22       	ld.bu %d2,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
<<<<<<< HEAD
<<<<<<< HEAD
8000455e:	60 a2       	mov.a %a2,%d10
80004560:	d0 24       	addsc.a %a4,%a2,%d15,3
=======
80004502:	60 a2       	mov.a %a2,%d10
80004504:	d0 24       	addsc.a %a4,%a2,%d15,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004580:	60 a2       	mov.a %a2,%d10
80004582:	d0 24       	addsc.a %a4,%a2,%d15,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
<<<<<<< HEAD
<<<<<<< HEAD
80004562:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004566:	e9 f9 e2 ef 	st.b [%a15]-94,%d9
=======
80004506:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
8000450a:	e9 f9 e2 ef 	st.b [%a15]-94,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004584:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004588:	e9 f9 e2 ef 	st.b [%a15]-94,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
<<<<<<< HEAD
<<<<<<< HEAD
8000456a:	6d 00 1d 1a 	call 800079a4 <IfxVadc_Adc_initChannel>
8000456e:	d4 d2       	ld.a %a2,[%a13]
80004570:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <sendActuatorPkt+0x4>>
80004574:	c2 1f       	add %d15,1
80004576:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000457a:	79 f2 ec ef 	ld.b %d2,[%a15]-84
=======
8000450e:	6d 00 1d 1a 	call 80007948 <IfxVadc_Adc_initChannel>
80004512:	d4 d2       	ld.a %a2,[%a13]
80004514:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <g_vadcChannelIDs>>
80004518:	c2 1f       	add %d15,1
8000451a:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000451e:	79 f2 ec ef 	ld.b %d2,[%a15]-84
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000458c:	6d 00 26 1a 	call 800079d8 <IfxVadc_Adc_initChannel>
80004590:	d4 d2       	ld.a %a2,[%a13]
80004592:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <sendActuatorPkt+0x4>>
80004596:	c2 1f       	add %d15,1
80004598:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000459c:	79 f2 ec ef 	ld.b %d2,[%a15]-84
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
<<<<<<< HEAD
<<<<<<< HEAD
8000457e:	19 23 00 60 	ld.w %d3,[%a2]384
80004582:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
80004586:	59 22 00 60 	st.w [%a2]384,%d2
=======
80004522:	19 23 00 60 	ld.w %d3,[%a2]384
80004526:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
8000452a:	59 22 00 60 	st.w [%a2]384,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045a0:	19 23 00 60 	ld.w %d3,[%a2]384
800045a4:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
800045a8:	59 22 00 60 	st.w [%a2]384,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
<<<<<<< HEAD
<<<<<<< HEAD
8000458a:	df 4f d7 ff 	jne %d15,4,80004538 <initVADCChannels+0x26>
=======
8000452e:	df 4f d7 ff 	jne %d15,4,800044dc <initVADCChannels+0x26>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045ac:	df 4f d7 ff 	jne %d15,4,8000455a <initVADCChannels+0x26>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
<<<<<<< HEAD
<<<<<<< HEAD
8000458e:	00 90       	ret 

80004590 <initADC>:
=======
80004532:	00 90       	ret 

80004534 <initADC>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045b0:	00 90       	ret 

800045b2 <initADC>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
<<<<<<< HEAD
<<<<<<< HEAD
80004590:	91 00 00 f7 	movh.a %a15,28672
=======
80004534:	91 00 00 f7 	movh.a %a15,28672
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045b2:	91 00 00 f7 	movh.a %a15,28672
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
<<<<<<< HEAD
<<<<<<< HEAD
80004594:	6d ff 97 ff 	call 800044c2 <initVADCModule>
=======
800045b6:	6d ff 97 ff 	call 800044e4 <initVADCModule>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    initVADCGroup();                                                    /* Initialize the VADC group                */
800045ba:	6d ff a4 ff 	call 80004502 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
<<<<<<< HEAD
8000459c:	6d ff bb ff 	call 80004512 <initVADCChannels>
800045a0:	99 ff ac 50 	ld.a %a15,[%a15]2412 <7000096c <g_vadc>>
=======
80004538:	6d ff 97 ff 	call 80004466 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
8000453c:	6d ff a4 ff 	call 80004484 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
80004540:	6d ff bb ff 	call 800044b6 <initVADCChannels>
80004544:	99 ff a4 50 	ld.a %a15,[%a15]2404 <70000964 <g_vadc>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045be:	6d ff bb ff 	call 80004534 <initVADCChannels>
800045c2:	99 ff 84 60 	ld.a %a15,[%a15]2436 <70000984 <g_vadc>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
<<<<<<< HEAD
<<<<<<< HEAD
800045a4:	19 ff 04 80 	ld.w %d15,[%a15]516 <7000096c <g_vadc>>
800045a8:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
800045ac:	59 ff 04 80 	st.w [%a15]516,%d15
800045b0:	00 90       	ret 

800045b2 <readADCValue>:
=======
80004548:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000964 <g_vadc>>
8000454c:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80004550:	59 ff 04 80 	st.w [%a15]516,%d15
80004554:	00 90       	ret 

80004556 <readADCValue>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045c6:	19 ff 04 80 	ld.w %d15,[%a15]516 <70000984 <g_vadc>>
800045ca:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
800045ce:	59 ff 04 80 	st.w [%a15]516,%d15
800045d2:	00 90       	ret 

800045d4 <readADCValue>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
<<<<<<< HEAD
<<<<<<< HEAD
800045b2:	91 00 00 f7 	movh.a %a15,28672
800045b6:	d9 ff 80 50 	lea %a15,[%a15]2368 <70000940 <g_vadcChannel>>
800045ba:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
800045be:	c8 12       	ld.a %a2,[%a15]4
800045c0:	0c f1       	ld.bu %d15,[%a15]1
800045c2:	99 22 04 00 	ld.a %a2,[%a2]4
=======
80004556:	91 00 00 f7 	movh.a %a15,28672
8000455a:	d9 ff b8 40 	lea %a15,[%a15]2360 <70000938 <g_vadcChannel>>
8000455e:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004562:	c8 12       	ld.a %a2,[%a15]4
80004564:	0c f1       	ld.bu %d15,[%a15]1
80004566:	99 22 04 00 	ld.a %a2,[%a2]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045d4:	91 00 00 f7 	movh.a %a15,28672
800045d8:	d9 ff 98 50 	lea %a15,[%a15]2392 <70000958 <g_vadcChannel>>
800045dc:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
800045e0:	c8 12       	ld.a %a2,[%a15]4
800045e2:	0c f1       	ld.bu %d15,[%a15]1
800045e4:	99 22 04 00 	ld.a %a2,[%a2]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
<<<<<<< HEAD
<<<<<<< HEAD
800045c6:	1b 0f 0a f0 	addi %d15,%d15,160
800045ca:	90 2f       	addsc.a %a15,%a2,%d15,2
800045cc:	4c f0       	ld.w %d15,[%a15]0
800045ce:	37 0f 70 20 	extr.u %d2,%d15,0,16
=======
8000456a:	1b 0f 0a f0 	addi %d15,%d15,160
8000456e:	90 2f       	addsc.a %a15,%a2,%d15,2
80004570:	4c f0       	ld.w %d15,[%a15]0
80004572:	37 0f 70 20 	extr.u %d2,%d15,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045e8:	1b 0f 0a f0 	addi %d15,%d15,160
800045ec:	90 2f       	addsc.a %a15,%a2,%d15,2
800045ee:	4c f0       	ld.w %d15,[%a15]0
800045f0:	37 0f 70 20 	extr.u %d2,%d15,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
<<<<<<< HEAD
<<<<<<< HEAD
800045d2:	ff 0f fd 7f 	jge %d15,0,800045cc <readADCValue+0x1a>
=======
800045f4:	ff 0f fd 7f 	jge %d15,0,800045ee <readADCValue+0x1a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    return conversionResult.B.RESULT;
}
800045f8:	00 90       	ret 

<<<<<<< HEAD
800045d8 <initPeripheralsAndERU>:
=======
80004576:	ff 0f fd 7f 	jge %d15,0,80004570 <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
8000457a:	00 90       	ret 

8000457c <initPeripheralsAndERU>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045fa <initPeripheralsAndERU>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
<<<<<<< HEAD
<<<<<<< HEAD
800045d8:	91 40 00 4f 	movh.a %a4,61444
800045dc:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
800045e0:	82 74       	mov %d4,7
800045e2:	3b 00 01 50 	mov %d5,16
800045e6:	6d 00 62 0b 	call 80005caa <IfxPort_setPinMode>
=======
8000457c:	91 40 00 4f 	movh.a %a4,61444
80004580:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004584:	82 74       	mov %d4,7
80004586:	3b 00 01 50 	mov %d5,16
8000458a:	6d 00 62 0b 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800045fa:	91 40 00 4f 	movh.a %a4,61444
800045fe:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004602:	82 74       	mov %d4,7
80004604:	3b 00 01 50 	mov %d5,16
80004608:	6d 00 6b 0b 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
<<<<<<< HEAD
<<<<<<< HEAD
800045ea:	91 00 00 f8 	movh.a %a15,32768
800045ee:	d9 ff bc e0 	lea %a15,[%a15]3004 <80000bbc <IfxScu_REQ6_P02_0_IN>>
=======
8000458e:	91 00 00 f8 	movh.a %a15,32768
80004592:	d9 ff 98 d0 	lea %a15,[%a15]2904 <80000b58 <IfxScu_REQ6_P02_0_IN>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000460c:	91 00 00 f8 	movh.a %a15,32768
80004610:	d9 ff 94 f0 	lea %a15,[%a15]3028 <80000bd4 <IfxScu_REQ6_P02_0_IN>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
<<<<<<< HEAD
<<<<<<< HEAD
800045f2:	c8 24       	ld.a %a4,[%a15]8
800045f4:	91 00 00 d7 	movh.a %a13,28672
800045f8:	08 c4       	ld.bu %d4,[%a15]12
800045fa:	3b 80 00 50 	mov %d5,8
800045fe:	b5 df b0 50 	st.a [%a13]2416 <70000970 <g_ERUconfig>>,%a15
80004602:	6d 00 54 0b 	call 80005caa <IfxPort_setPinMode>
=======
80004596:	c8 24       	ld.a %a4,[%a15]8
80004598:	91 00 00 d7 	movh.a %a13,28672
8000459c:	08 c4       	ld.bu %d4,[%a15]12
8000459e:	3b 80 00 50 	mov %d5,8
800045a2:	b5 df a8 50 	st.a [%a13]2408 <70000968 <g_ERUconfig>>,%a15
800045a6:	6d 00 54 0b 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004614:	c8 24       	ld.a %a4,[%a15]8
80004616:	91 00 00 d7 	movh.a %a13,28672
8000461a:	08 c4       	ld.bu %d4,[%a15]12
8000461c:	3b 80 00 50 	mov %d5,8
80004620:	b5 df 88 60 	st.a [%a13]2440 <70000988 <g_ERUconfig>>,%a15
80004624:	6d 00 5d 0b 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
<<<<<<< HEAD
<<<<<<< HEAD
80004606:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
8000460a:	08 44       	ld.bu %d4,[%a15]4
8000460c:	6d 00 fd 14 	call 80007006 <IfxScuEru_selectExternalInput>
=======
800045aa:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
800045ae:	08 44       	ld.bu %d4,[%a15]4
800045b0:	6d 00 fd 14 	call 80006faa <IfxScuEru_selectExternalInput>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004628:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
8000462c:	08 44       	ld.bu %d4,[%a15]4
8000462e:	6d 00 06 15 	call 8000703a <IfxScuEru_selectExternalInput>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
<<<<<<< HEAD
<<<<<<< HEAD
80004610:	99 df b0 50 	ld.a %a15,[%a13]2416 <70000970 <g_ERUconfig>>
=======
800045b4:	99 df a8 50 	ld.a %a15,[%a13]2408 <70000968 <g_ERUconfig>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004632:	99 df 88 60 	ld.a %a15,[%a13]2440 <70000988 <g_ERUconfig>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
<<<<<<< HEAD
<<<<<<< HEAD
80004614:	d9 dc b0 50 	lea %a12,[%a13]2416 <70000970 <g_ERUconfig>>
=======
800045b8:	d9 dc a8 50 	lea %a12,[%a13]2408 <70000968 <g_ERUconfig>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004636:	d9 dc 88 60 	lea %a12,[%a13]2440 <70000988 <g_ERUconfig>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
<<<<<<< HEAD
<<<<<<< HEAD
80004618:	82 0f       	mov %d15,0
=======
800045bc:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000463a:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
<<<<<<< HEAD
<<<<<<< HEAD
8000461a:	08 44       	ld.bu %d4,[%a15]4
8000461c:	e9 c4 04 00 	st.b [%a12]4 <70000004 <sendActuatorPkt>>,%d4
=======
800045be:	08 44       	ld.bu %d4,[%a15]4
800045c0:	e9 c4 04 00 	st.b [%a12]4 <70000004 <__DSPR0_START+0x4>>,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000463c:	08 44       	ld.bu %d4,[%a15]4
8000463e:	e9 c4 04 00 	st.b [%a12]4 <70000004 <sendActuatorPkt>>,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
<<<<<<< HEAD
<<<<<<< HEAD
80004620:	6d 00 63 14 	call 80006ee6 <IfxScuEru_enableFallingEdgeDetection>
=======
800045c4:	6d 00 63 14 	call 80006e8a <IfxScuEru_enableFallingEdgeDetection>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004642:	6d 00 6c 14 	call 80006f1a <IfxScuEru_enableFallingEdgeDetection>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
<<<<<<< HEAD
<<<<<<< HEAD
80004624:	39 c4 04 00 	ld.bu %d4,[%a12]4
=======
800045c8:	39 c4 04 00 	ld.bu %d4,[%a12]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004646:	39 c4 04 00 	ld.bu %d4,[%a12]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
<<<<<<< HEAD
<<<<<<< HEAD
80004628:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
8000462a:	2c c5       	st.b [%a12]5,%d15
=======
800045cc:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
800045ce:	2c c5       	st.b [%a12]5,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000464a:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
8000464c:	2c c5       	st.b [%a12]5,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
<<<<<<< HEAD
<<<<<<< HEAD
8000462c:	6d 00 96 14 	call 80006f58 <IfxScuEru_enableTriggerPulse>
=======
8000464e:	6d 00 9f 14 	call 80006f8c <IfxScuEru_enableTriggerPulse>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
80004652:	39 c4 04 00 	ld.bu %d4,[%a12]4
80004656:	39 c5 05 00 	ld.bu %d5,[%a12]5
8000465a:	6d 00 d3 13 	call 80006e00 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
<<<<<<< HEAD
8000463c:	39 c4 06 00 	ld.bu %d4,[%a12]6
80004640:	82 15       	mov %d5,1
80004642:	6d 00 1b 15 	call 80007078 <IfxScuEru_setInterruptGatingPattern>
=======
800045d0:	6d 00 96 14 	call 80006efc <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
800045d4:	39 c4 04 00 	ld.bu %d4,[%a12]4
800045d8:	39 c5 05 00 	ld.bu %d5,[%a12]5
800045dc:	6d 00 ca 13 	call 80006d70 <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
800045e0:	39 c4 06 00 	ld.bu %d4,[%a12]6
800045e4:	82 15       	mov %d5,1
800045e6:	6d 00 1b 15 	call 8000701c <IfxScuEru_setInterruptGatingPattern>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000465e:	39 c4 06 00 	ld.bu %d4,[%a12]6
80004662:	82 15       	mov %d5,1
80004664:	6d 00 24 15 	call 800070ac <IfxScuEru_setInterruptGatingPattern>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
<<<<<<< HEAD
<<<<<<< HEAD
80004646:	0c c6       	ld.bu %d15,[%a12]6
80004648:	16 03       	and %d15,3
8000464a:	06 2f       	sh %d15,2
8000464c:	60 f2       	mov.a %a2,%d15
8000464e:	d9 2f d4 38 	lea %a15,[%a2]-29484
80004652:	11 4f 00 ff 	addih.a %a15,%a15,61444
80004656:	ec c2       	st.a [%a12]8,%a15
=======
800045ea:	0c c6       	ld.bu %d15,[%a12]6
800045ec:	16 03       	and %d15,3
800045ee:	06 2f       	sh %d15,2
800045f0:	60 f2       	mov.a %a2,%d15
800045f2:	d9 2f d4 38 	lea %a15,[%a2]-29484
800045f6:	11 4f 00 ff 	addih.a %a15,%a15,61444
800045fa:	ec c2       	st.a [%a12]8,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004668:	0c c6       	ld.bu %d15,[%a12]6
8000466a:	16 03       	and %d15,3
8000466c:	06 2f       	sh %d15,2
8000466e:	60 f2       	mov.a %a2,%d15
80004670:	d9 2f d4 38 	lea %a15,[%a2]-29484
80004674:	11 4f 00 ff 	addih.a %a15,%a15,61444
80004678:	ec c2       	st.a [%a12]8,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
<<<<<<< HEAD
<<<<<<< HEAD
80004658:	4c f0       	ld.w %d15,[%a15]0
8000465a:	b7 af 08 f0 	insert %d15,%d15,10,0,8
8000465e:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004660:	4c f0       	ld.w %d15,[%a15]0
80004662:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
80004666:	68 0f       	st.w [%a15]0,%d15
=======
800045fc:	4c f0       	ld.w %d15,[%a15]0
800045fe:	b7 af 08 f0 	insert %d15,%d15,10,0,8
80004602:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004604:	4c f0       	ld.w %d15,[%a15]0
80004606:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
8000460a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000467a:	4c f0       	ld.w %d15,[%a15]0
8000467c:	b7 af 08 f0 	insert %d15,%d15,10,0,8
80004680:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004682:	4c f0       	ld.w %d15,[%a15]0
80004684:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
80004688:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004668:	4c f0       	ld.w %d15,[%a15]0
8000466a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000466e:	68 0f       	st.w [%a15]0,%d15
=======
8000460c:	4c f0       	ld.w %d15,[%a15]0
8000460e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80004612:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000468a:	4c f0       	ld.w %d15,[%a15]0
8000468c:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80004690:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004670:	4c f0       	ld.w %d15,[%a15]0
80004672:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80004676:	68 0f       	st.w [%a15]0,%d15
80004678:	00 90       	ret 

8000467a <asclin3TxISR>:
=======
80004614:	4c f0       	ld.w %d15,[%a15]0
80004616:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
8000461a:	68 0f       	st.w [%a15]0,%d15
8000461c:	00 90       	ret 

8000461e <asclin0TxISR>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004692:	4c f0       	ld.w %d15,[%a15]0
80004694:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80004698:	68 0f       	st.w [%a15]0,%d15
8000469a:	00 90       	ret 

8000469c <asclin3TxISR>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin3TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
<<<<<<< HEAD
<<<<<<< HEAD
8000467a:	91 00 00 47 	movh.a %a4,28672
8000467e:	d9 44 90 f0 	lea %a4,[%a4]3024 <70000bd0 <g_AsclinAsc+0x254>>
80004682:	1d 00 0d 06 	j 8000529c <IfxAsclin_Asc_isrTransmit>

80004686 <main>:
=======
8000461e:	91 00 00 47 	movh.a %a4,28672
80004622:	d9 44 88 f0 	lea %a4,[%a4]3016 <70000bc8 <g_AsclinAsc+0x254>>
80004626:	1d 00 0d 06 	j 80005240 <IfxAsclin_Asc_isrTransmit>

8000462a <main>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000469c:	91 00 00 47 	movh.a %a4,28672
800046a0:	d9 44 a8 f0 	lea %a4,[%a4]3048 <70000be8 <g_AsclinAsc+0x254>>
800046a4:	1d 00 16 06 	j 800052d0 <IfxAsclin_Asc_isrTransmit>

800046a8 <main>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
<<<<<<< HEAD
<<<<<<< HEAD
80004686:	6d 00 19 28 	call 800096b8 <osEE_tc_stm_set_clockpersec>
=======
800046a8:	6d 00 7e 28 	call 800097a4 <osEE_tc_stm_set_clockpersec>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_tc_stm_set_sr0(1000000U, 1U);
800046ac:	7b f0 00 40 	movh %d4,15
800046b0:	82 15       	mov %d5,1
800046b2:	1b 04 24 44 	addi %d4,%d4,16960
800046b6:	6d 00 91 28 	call 800097d8 <osEE_tc_stm_set_sr0>

    UART_init();
800046ba:	6d ff a5 fe 	call 80004404 <UART_init>
    initADC();
800046be:	6d ff 7a ff 	call 800045b2 <initADC>
    initPeripheralsAndERU();
800046c2:	6d ff 9c ff 	call 800045fa <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
800046c6:	6d ff 09 fd 	call 800040d8 <lcd_init>
    initUltrasonic(&g_UpperUltrasonic);
800046ca:	91 00 00 47 	movh.a %a4,28672
800046ce:	d9 44 0a 40 	lea %a4,[%a4]266 <7000010a <g_UpperUltrasonic>>
800046d2:	6d 00 bd 23 	call 80008e4c <initUltrasonic>
    initUltrasonic(&g_FrontUltrasonic);
800046d6:	91 00 00 47 	movh.a %a4,28672
800046da:	d9 44 00 40 	lea %a4,[%a4]256 <70000100 <g_FrontUltrasonic>>
800046de:	6d 00 b7 23 	call 80008e4c <initUltrasonic>
    initUartDriver();
<<<<<<< HEAD
800046ac:	6d 00 66 22 	call 80008b78 <initUartDriver>
=======
8000462a:	6d 00 38 27 	call 8000949a <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
8000462e:	7b f0 00 40 	movh %d4,15
80004632:	82 15       	mov %d5,1
80004634:	1b 04 24 44 	addi %d4,%d4,16960
80004638:	6d 00 4b 27 	call 800094ce <osEE_tc_stm_set_sr0>

    UART_init();
8000463c:	6d ff 31 fe 	call 8000429e <UART_init>
    initADC();
80004640:	6d ff 7a ff 	call 80004534 <initADC>
    initPeripheralsAndERU();
80004644:	6d ff 9c ff 	call 8000457c <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
80004648:	6d ff 48 fd 	call 800040d8 <lcd_init>
    initUltrasonic();
8000464c:	6d 00 6b 22 	call 80008b22 <initUltrasonic>
    initInfotainment();
80004650:	6d 00 13 22 	call 80008a76 <initInfotainment>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    /* custom driver added end*/

    printfSerial("\n...............\n");
<<<<<<< HEAD
800046b0:	91 00 00 48 	movh.a %a4,32768
800046b4:	d9 44 28 30 	lea %a4,[%a4]232 <800000e8 <_start+0xc8>>
800046b8:	6d ff ce fe 	call 80004454 <printfSerial>
=======
800046e2:	6d 00 65 22 	call 80008bac <initUartDriver>
    /* custom driver added end*/

    printfSerial("\n...............\n");
800046e6:	91 00 00 48 	movh.a %a4,32768
800046ea:	d9 44 00 40 	lea %a4,[%a4]256 <80000100 <_start+0xe0>>
800046ee:	6d ff c4 fe 	call 80004476 <printfSerial>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    printfSerial("...OS Starts...\n");
800046f2:	91 00 00 48 	movh.a %a4,32768
800046f6:	d9 44 12 40 	lea %a4,[%a4]274 <80000112 <_start+0xf2>>
800046fa:	6d ff be fe 	call 80004476 <printfSerial>
    printfSerial("...............\n");
800046fe:	91 00 00 48 	movh.a %a4,32768
80004702:	d9 44 23 40 	lea %a4,[%a4]291 <80000123 <_start+0x103>>
80004706:	6d ff b8 fe 	call 80004476 <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
8000470a:	82 04       	mov %d4,0
8000470c:	6d 00 d0 29 	call 80009aac <StartOS>
    return 0;
}
80004710:	82 02       	mov %d2,0
80004712:	00 90       	ret 

<<<<<<< HEAD
800046e0 <IfxVadc_disableAccess>:
=======
80004654:	91 00 00 48 	movh.a %a4,32768
80004658:	d9 44 04 20 	lea %a4,[%a4]132 <80000084 <_start+0x64>>
8000465c:	6d ff 5a fe 	call 80004310 <printfSerial>
    printfSerial("...OS Starts...\n");
80004660:	91 00 00 48 	movh.a %a4,32768
80004664:	d9 44 16 20 	lea %a4,[%a4]150 <80000096 <_start+0x76>>
80004668:	6d ff 54 fe 	call 80004310 <printfSerial>
    printfSerial("...............\n");
8000466c:	91 00 00 48 	movh.a %a4,32768
80004670:	d9 44 27 20 	lea %a4,[%a4]167 <800000a7 <_start+0x87>>
80004674:	6d ff 4e fe 	call 80004310 <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
80004678:	82 04       	mov %d4,0
8000467a:	6d 00 95 28 	call 800097a4 <StartOS>
    return 0;
}
8000467e:	82 02       	mov %d2,0
80004680:	00 90       	ret 
	...

80004684 <IfxVadc_disableAccess>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004714 <IfxVadc_disableAccess>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
<<<<<<< HEAD
<<<<<<< HEAD
800046e0:	02 4f       	mov %d15,%d4
800046e2:	40 4f       	mov.aa %a15,%a4
=======
80004714:	02 4f       	mov %d15,%d4
80004716:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004718:	6d 00 6d 16 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
<<<<<<< HEAD
800046e8:	02 24       	mov %d4,%d2
=======
80004684:	02 4f       	mov %d15,%d4
80004686:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004688:	6d 00 6d 16 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
8000468c:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000471c:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
800046ea:	02 28       	mov %d8,%d2
=======
8000471e:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_clearSafetyEndinit(passwd);
80004720:	6d 00 66 15 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004724:	8b 0f a2 22 	ge.u %d2,%d15,32
80004728:	f6 28       	jnz %d2,80004738 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
<<<<<<< HEAD
800046f6:	19 f2 08 20 	ld.w %d2,[%a15]136
800046fa:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046fe:	59 ff 08 20 	st.w [%a15]136,%d15
80004702:	3c 08       	j 80004712 <IfxVadc_disableAccess+0x32>
=======
8000468e:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004690:	6d 00 66 15 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004694:	8b 0f a2 22 	ge.u %d2,%d15,32
80004698:	f6 28       	jnz %d2,800046a8 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
8000469a:	19 f2 08 20 	ld.w %d2,[%a15]136
8000469e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046a2:	59 ff 08 20 	st.w [%a15]136,%d15
800046a6:	3c 08       	j 800046b6 <IfxVadc_disableAccess+0x32>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000472a:	19 f2 08 20 	ld.w %d2,[%a15]136
8000472e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
80004732:	59 ff 08 20 	st.w [%a15]136,%d15
80004736:	3c 08       	j 80004746 <IfxVadc_disableAccess+0x32>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
<<<<<<< HEAD
<<<<<<< HEAD
80004704:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004708:	16 1f       	and %d15,31
8000470a:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
8000470e:	59 ff 0c 20 	st.w [%a15]140,%d15
=======
80004738:	19 f2 0c 20 	ld.w %d2,[%a15]140
8000473c:	16 1f       	and %d15,31
8000473e:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
80004742:	59 ff 0c 20 	st.w [%a15]140,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80004746:	02 84       	mov %d4,%d8
80004748:	1d 00 d8 16 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

<<<<<<< HEAD
80004718 <IfxVadc_enableAccess>:
=======
800046a8:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046ac:	16 1f       	and %d15,31
800046ae:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046b2:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046b6:	02 84       	mov %d4,%d8
800046b8:	1d 00 d8 16 	j 80007468 <IfxScuWdt_setSafetyEndinit>

800046bc <IfxVadc_enableAccess>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000474c <IfxVadc_enableAccess>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004718:	02 4f       	mov %d15,%d4
8000471a:	40 4f       	mov.aa %a15,%a4
=======
8000474c:	02 4f       	mov %d15,%d4
8000474e:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004750:	6d 00 51 16 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
<<<<<<< HEAD
80004720:	02 24       	mov %d4,%d2
=======
800046bc:	02 4f       	mov %d15,%d4
800046be:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046c0:	6d 00 51 16 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800046c4:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004754:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80004722:	02 28       	mov %d8,%d2
=======
80004756:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_clearSafetyEndinit(passwd);
80004758:	6d 00 4a 15 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
8000475c:	8b 0f a2 22 	ge.u %d2,%d15,32
80004760:	f6 28       	jnz %d2,80004770 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
<<<<<<< HEAD
8000472e:	19 f2 08 20 	ld.w %d2,[%a15]136
80004732:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80004736:	59 ff 08 20 	st.w [%a15]136,%d15
8000473a:	3c 08       	j 8000474a <IfxVadc_enableAccess+0x32>
=======
800046c6:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800046c8:	6d 00 4a 15 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800046cc:	8b 0f a2 22 	ge.u %d2,%d15,32
800046d0:	f6 28       	jnz %d2,800046e0 <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
800046d2:	19 f2 08 20 	ld.w %d2,[%a15]136
800046d6:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046da:	59 ff 08 20 	st.w [%a15]136,%d15
800046de:	3c 08       	j 800046ee <IfxVadc_enableAccess+0x32>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004762:	19 f2 08 20 	ld.w %d2,[%a15]136
80004766:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000476a:	59 ff 08 20 	st.w [%a15]136,%d15
8000476e:	3c 08       	j 8000477e <IfxVadc_enableAccess+0x32>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
<<<<<<< HEAD
<<<<<<< HEAD
8000473c:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004740:	16 1f       	and %d15,31
80004742:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80004746:	59 ff 0c 20 	st.w [%a15]140,%d15
=======
80004770:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004774:	16 1f       	and %d15,31
80004776:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
8000477a:	59 ff 0c 20 	st.w [%a15]140,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    IfxScuWdt_setSafetyEndinit(passwd);
8000477e:	02 84       	mov %d4,%d8
80004780:	1d 00 bc 16 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

<<<<<<< HEAD
80004750 <IfxVadc_configExternalMultiplexerMode>:
=======
800046e0:	19 f2 0c 20 	ld.w %d2,[%a15]140
800046e4:	16 1f       	and %d15,31
800046e6:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800046ea:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800046ee:	02 84       	mov %d4,%d8
800046f0:	1d 00 bc 16 	j 80007468 <IfxScuWdt_setSafetyEndinit>

800046f4 <IfxVadc_configExternalMultiplexerMode>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004784 <IfxVadc_configExternalMultiplexerMode>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004750:	82 0f       	mov %d15,0
80004752:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
=======
800046f4:	82 0f       	mov %d15,0
800046f6:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004784:	82 0f       	mov %d15,0
80004786:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004756:	39 a3 04 00 	ld.bu %d3,[%sp]4
=======
800046fa:	39 a3 04 00 	ld.bu %d3,[%sp]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000478a:	39 a3 04 00 	ld.bu %d3,[%sp]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
<<<<<<< HEAD
<<<<<<< HEAD
8000475a:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
=======
800046fe:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000478e:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000475e:	14 a2       	ld.bu %d2,[%sp]
=======
80004702:	14 a2       	ld.bu %d2,[%sp]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004792:	14 a2       	ld.bu %d2,[%sp]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
<<<<<<< HEAD
<<<<<<< HEAD
80004760:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
=======
80004794:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxctr.B.EMUXCH   = channels;
80004798:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
8000479c:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
<<<<<<< HEAD
8000476c:	3b f0 00 40 	mov %d4,15
=======
80004704:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004708:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
8000470c:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004710:	3b f0 00 40 	mov %d4,15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047a0:	3b f0 00 40 	mov %d4,15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
<<<<<<< HEAD
<<<<<<< HEAD
80004770:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
=======
80004714:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047a4:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004774:	40 5f       	mov.aa %a15,%a5
=======
80004718:	40 5f       	mov.aa %a15,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047a8:	40 5f       	mov.aa %a15,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
<<<<<<< HEAD
<<<<<<< HEAD
80004776:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
=======
8000471a:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047aa:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000477a:	40 4c       	mov.aa %a12,%a4
=======
8000471e:	40 4c       	mov.aa %a12,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047ae:	40 4c       	mov.aa %a12,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
<<<<<<< HEAD
<<<<<<< HEAD
8000477c:	6d ff ce ff 	call 80004718 <IfxVadc_enableAccess>
=======
800047b0:	6d ff ce ff 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    vadcG->EMUXCTR.U   = emuxctr.U;
800047b4:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
800047b8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
<<<<<<< HEAD
80004788:	40 c4       	mov.aa %a4,%a12
=======
80004720:	6d ff ce ff 	call 800046bc <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
80004724:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004728:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000472c:	40 c4       	mov.aa %a4,%a12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047bc:	40 c4       	mov.aa %a4,%a12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
<<<<<<< HEAD
<<<<<<< HEAD
8000478a:	59 ff 30 50 	st.w [%a15]368,%d15
=======
800047be:	59 ff 30 50 	st.w [%a15]368,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
800047c2:	3b f0 00 40 	mov %d4,15
800047c6:	1d ff a7 ff 	j 80004714 <IfxVadc_disableAccess>

<<<<<<< HEAD
80004796 <IfxVadc_disablePostCalibration>:
=======
8000472e:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004732:	3b f0 00 40 	mov %d4,15
80004736:	1d ff a7 ff 	j 80004684 <IfxVadc_disableAccess>

8000473a <IfxVadc_disablePostCalibration>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047ca <IfxVadc_disablePostCalibration>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004796:	40 4f       	mov.aa %a15,%a4
=======
800047ca:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
800047cc:	ff 84 1c 80 	jge.u %d4,8,80004804 <IfxVadc_disablePostCalibration+0x3a>
800047d0:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047d2:	3b f0 01 40 	mov %d4,31
800047d6:	02 58       	mov %d8,%d5
800047d8:	6d ff ba ff 	call 8000474c <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
<<<<<<< HEAD
800047a8:	1b 0f 01 40 	addi %d4,%d15,16
=======
8000473a:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
8000473c:	ff 84 1c 80 	jge.u %d4,8,80004774 <IfxVadc_disablePostCalibration+0x3a>
80004740:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004742:	3b f0 01 40 	mov %d4,31
80004746:	02 58       	mov %d8,%d5
80004748:	6d ff ba ff 	call 800046bc <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
8000474c:	1b 0f 01 40 	addi %d4,%d15,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047dc:	1b 0f 01 40 	addi %d4,%d15,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
<<<<<<< HEAD
<<<<<<< HEAD
800047ac:	19 f2 00 20 	ld.w %d2,[%a15]128
=======
80004750:	19 f2 00 20 	ld.w %d2,[%a15]128
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047e0:	19 f2 00 20 	ld.w %d2,[%a15]128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
<<<<<<< HEAD
<<<<<<< HEAD
800047b0:	82 1f       	mov %d15,1
800047b2:	0f 4f 00 f0 	sh %d15,%d15,%d4
=======
800047e4:	82 1f       	mov %d15,1
800047e6:	0f 4f 00 f0 	sh %d15,%d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if (disable == TRUE)
800047ea:	df 18 04 80 	jne %d8,1,800047f2 <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
<<<<<<< HEAD
800047ba:	a6 2f       	or %d15,%d2
800047bc:	3c 03       	j 800047c2 <IfxVadc_disablePostCalibration+0x2c>
=======
80004754:	82 1f       	mov %d15,1
80004756:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
8000475a:	df 18 04 80 	jne %d8,1,80004762 <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
8000475e:	a6 2f       	or %d15,%d2
80004760:	3c 03       	j 80004766 <IfxVadc_disablePostCalibration+0x2c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800047ee:	a6 2f       	or %d15,%d2
800047f0:	3c 03       	j 800047f6 <IfxVadc_disablePostCalibration+0x2c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
<<<<<<< HEAD
<<<<<<< HEAD
800047be:	0f f2 e0 f0 	andn %d15,%d2,%d15
800047c2:	59 ff 00 20 	st.w [%a15]128,%d15
=======
800047f2:	0f f2 e0 f0 	andn %d15,%d2,%d15
800047f6:	59 ff 00 20 	st.w [%a15]128,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047fa:	40 f4       	mov.aa %a4,%a15
800047fc:	3b f0 01 40 	mov %d4,31
80004800:	1d ff 8a ff 	j 80004714 <IfxVadc_disableAccess>
80004804:	00 90       	ret 

<<<<<<< HEAD
800047d2 <IfxVadc_enableGroupSync>:
=======
80004762:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004766:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000476a:	40 f4       	mov.aa %a4,%a15
8000476c:	3b f0 01 40 	mov %d4,31
80004770:	1d ff 8a ff 	j 80004684 <IfxVadc_disableAccess>
80004774:	00 90       	ret 

80004776 <IfxVadc_enableGroupSync>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004806 <IfxVadc_enableGroupSync>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
<<<<<<< HEAD
<<<<<<< HEAD
800047d2:	40 4f       	mov.aa %a15,%a4
800047d4:	02 48       	mov %d8,%d4
=======
80004806:	40 4f       	mov.aa %a15,%a4
80004808:	02 48       	mov %d8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000480a:	6d 00 d6 15 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
800047da:	02 24       	mov %d4,%d2
=======
80004776:	40 4f       	mov.aa %a15,%a4
80004778:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000477a:	6d 00 d6 15 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
8000477e:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000480e:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
800047dc:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800047de:	6d 00 d2 14 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80004780:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004782:	6d 00 d2 14 	call 80007126 <IfxScuWdt_clearCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004810:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004812:	6d 00 d2 14 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
<<<<<<< HEAD
800047e2:	40 f4       	mov.aa %a4,%a15
800047e4:	3b f0 01 40 	mov %d4,31
=======
80004786:	40 f4       	mov.aa %a4,%a15
80004788:	3b f0 01 40 	mov %d4,31
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004816:	40 f4       	mov.aa %a4,%a15
80004818:	3b f0 01 40 	mov %d4,31
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
800047e8:	19 ff 00 20 	ld.w %d15,[%a15]128
=======
8000478c:	19 ff 00 20 	ld.w %d15,[%a15]128
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000481c:	19 ff 00 20 	ld.w %d15,[%a15]128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
<<<<<<< HEAD
800047ec:	6d ff 96 ff 	call 80004718 <IfxVadc_enableAccess>
=======
80004790:	6d ff 96 ff 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004820:	6d ff 96 ff 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800047f0:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
800047f4:	b7 1f 81 f3 	insert %d15,%d15,1,7,1
=======
80004794:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
80004798:	b7 1f 81 f3 	insert %d15,%d15,1,7,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004824:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
80004828:	b7 1f 81 f3 	insert %d15,%d15,1,7,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
<<<<<<< HEAD
800047f8:	40 f4       	mov.aa %a4,%a15
=======
8000479c:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000482c:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
<<<<<<< HEAD
<<<<<<< HEAD
800047fa:	59 ff 00 20 	st.w [%a15]128,%d15
=======
8000482e:	59 ff 00 20 	st.w [%a15]128,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004832:	3b f0 01 40 	mov %d4,31
80004836:	6d ff 6f ff 	call 80004714 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
8000483a:	df 08 1a 80 	jne %d8,0,8000486e <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
8000483e:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
80004842:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004846:	82 4f       	mov %d15,4
80004848:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
8000484c:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
80004850:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
80004854:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004858:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
8000485c:	3b 00 20 f4 	mov %d15,16896
80004860:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
80004864:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004868:	8f 8f c3 f1 	andn %d15,%d15,56
8000486c:	3c 1d       	j 800048a6 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
8000486e:	df 18 1e 80 	jne %d8,1,800048aa <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
80004872:	82 0f       	mov %d15,0
80004874:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
80004878:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
8000487c:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004880:	82 4f       	mov %d15,4
80004882:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004886:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
8000488a:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
8000488e:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004892:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004896:	3b 00 20 f4 	mov %d15,16896
8000489a:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000489e:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800048a2:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
800048a6:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
800048aa:	02 94       	mov %d4,%d9
800048ac:	1d 00 ba 15 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
8000487c <IfxVadc_getAdcAnalogFrequency>:
=======
8000479e:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047a2:	3b f0 01 40 	mov %d4,31
800047a6:	6d ff 6f ff 	call 80004684 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
800047aa:	df 08 1a 80 	jne %d8,0,800047de <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
800047ae:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
800047b2:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800047b6:	82 4f       	mov %d15,4
800047b8:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800047bc:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800047c0:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
800047c4:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800047c8:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
800047cc:	3b 00 20 f4 	mov %d15,16896
800047d0:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
800047d4:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800047d8:	8f 8f c3 f1 	andn %d15,%d15,56
800047dc:	3c 1d       	j 80004816 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
800047de:	df 18 1e 80 	jne %d8,1,8000481a <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
800047e2:	82 0f       	mov %d15,0
800047e4:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
800047e8:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
800047ec:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800047f0:	82 4f       	mov %d15,4
800047f2:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800047f6:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800047fa:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
800047fe:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004802:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004806:	3b 00 20 f4 	mov %d15,16896
8000480a:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000480e:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004812:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
80004816:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
8000481a:	02 94       	mov %d4,%d9
8000481c:	1d 00 ba 15 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004820 <IfxVadc_getAdcAnalogFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048b0 <IfxVadc_getAdcAnalogFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000487c:	40 4f       	mov.aa %a15,%a4
=======
800048b0:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
800048b2:	6d 00 be 0c 	call 8000622e <IfxScuCcu_getSpbFrequency>
800048b6:	19 ff 00 20 	ld.w %d15,[%a15]128
800048ba:	16 1f       	and %d15,31
800048bc:	c2 1f       	add %d15,1
800048be:	4b 0f 41 f1 	itof %d15,%d15
}
800048c2:	4b f2 51 20 	div.f %d2,%d2,%d15
800048c6:	00 90       	ret 

<<<<<<< HEAD
80004894 <IfxVadc_getAdcDigitalFrequency>:
=======
80004820:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
80004822:	6d 00 be 0c 	call 8000619e <IfxScuCcu_getSpbFrequency>
80004826:	19 ff 00 20 	ld.w %d15,[%a15]128
8000482a:	16 1f       	and %d15,31
8000482c:	c2 1f       	add %d15,1
8000482e:	4b 0f 41 f1 	itof %d15,%d15
}
80004832:	4b f2 51 20 	div.f %d2,%d2,%d15
80004836:	00 90       	ret 

80004838 <IfxVadc_getAdcDigitalFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048c8 <IfxVadc_getAdcDigitalFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004894:	40 4f       	mov.aa %a15,%a4
=======
800048c8:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
800048ca:	6d 00 b2 0c 	call 8000622e <IfxScuCcu_getSpbFrequency>
800048ce:	19 ff 00 20 	ld.w %d15,[%a15]128
800048d2:	37 0f 62 f4 	extr.u %d15,%d15,8,2
800048d6:	c2 1f       	add %d15,1
800048d8:	4b 0f 41 f1 	itof %d15,%d15
}
800048dc:	4b f2 51 20 	div.f %d2,%d2,%d15
800048e0:	00 90       	ret 

<<<<<<< HEAD
800048ae <IfxVadc_getAdcModuleFrequency>:
=======
80004838:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
8000483a:	6d 00 b2 0c 	call 8000619e <IfxScuCcu_getSpbFrequency>
8000483e:	19 ff 00 20 	ld.w %d15,[%a15]128
80004842:	37 0f 62 f4 	extr.u %d15,%d15,8,2
80004846:	c2 1f       	add %d15,1
80004848:	4b 0f 41 f1 	itof %d15,%d15
}
8000484c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004850:	00 90       	ret 

80004852 <IfxVadc_getAdcModuleFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048e2 <IfxVadc_getAdcModuleFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
800048ae:	1d 00 a6 0c 	j 800061fa <IfxScuCcu_getSpbFrequency>

800048b2 <IfxVadc_getBackgroundScanStatus>:
=======
80004852:	1d 00 a6 0c 	j 8000619e <IfxScuCcu_getSpbFrequency>

80004856 <IfxVadc_getBackgroundScanStatus>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048e2:	1d 00 a6 0c 	j 8000622e <IfxScuCcu_getSpbFrequency>

800048e6 <IfxVadc_getBackgroundScanStatus>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
800048b2:	82 0f       	mov %d15,0
800048b4:	a0 7f       	mov.a %a15,7
=======
80004856:	82 0f       	mov %d15,0
80004858:	a0 7f       	mov.a %a15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048e6:	82 0f       	mov %d15,0
800048e8:	a0 7f       	mov.a %a15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
<<<<<<< HEAD
<<<<<<< HEAD
800048b6:	1b 0f 07 20 	addi %d2,%d15,112
800048ba:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
800048be:	54 22       	ld.w %d2,[%a2]
800048c0:	f6 24       	jnz %d2,800048c8 <IfxVadc_getBackgroundScanStatus+0x16>
800048c2:	c2 1f       	add %d15,1
=======
8000485a:	1b 0f 07 20 	addi %d2,%d15,112
8000485e:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
80004862:	54 22       	ld.w %d2,[%a2]
80004864:	f6 24       	jnz %d2,8000486c <IfxVadc_getBackgroundScanStatus+0x16>
80004866:	c2 1f       	add %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048ea:	1b 0f 07 20 	addi %d2,%d15,112
800048ee:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
800048f2:	54 22       	ld.w %d2,[%a2]
800048f4:	f6 24       	jnz %d2,800048fc <IfxVadc_getBackgroundScanStatus+0x16>
800048f6:	c2 1f       	add %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
<<<<<<< HEAD
<<<<<<< HEAD
800048c4:	fc f9       	loop %a15,800048b6 <IfxVadc_getBackgroundScanStatus+0x4>
800048c6:	00 90       	ret 
=======
80004868:	fc f9       	loop %a15,8000485a <IfxVadc_getBackgroundScanStatus+0x4>
8000486a:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048f8:	fc f9       	loop %a15,800048ea <IfxVadc_getBackgroundScanStatus+0x4>
800048fa:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
<<<<<<< HEAD
<<<<<<< HEAD
800048c8:	82 62       	mov %d2,6
=======
8000486c:	82 62       	mov %d2,6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048fc:	82 62       	mov %d2,6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            continue;
        }
    }

    return status;
}
<<<<<<< HEAD
<<<<<<< HEAD
800048ca:	00 90       	ret 

800048cc <IfxVadc_getQueueStatus>:
=======
8000486e:	00 90       	ret 

80004870 <IfxVadc_getQueueStatus>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800048fe:	00 90       	ret 

80004900 <IfxVadc_getQueueStatus>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
<<<<<<< HEAD
<<<<<<< HEAD
800048cc:	19 42 08 20 	ld.w %d2,[%a4]136
800048d0:	8f f2 00 21 	and %d2,%d2,15
=======
80004870:	19 42 08 20 	ld.w %d2,[%a4]136
80004874:	8f f2 00 21 	and %d2,%d2,15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004900:	19 42 08 20 	ld.w %d2,[%a4]136
80004904:	8f f2 00 21 	and %d2,%d2,15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
<<<<<<< HEAD
<<<<<<< HEAD
800048d4:	8b 72 00 22 	eq %d2,%d2,7
=======
80004878:	8b 72 00 22 	eq %d2,%d2,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004908:	8b 72 00 22 	eq %d2,%d2,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return status;
}
<<<<<<< HEAD
<<<<<<< HEAD
800048d8:	06 22       	sh %d2,2
800048da:	00 90       	ret 

800048dc <IfxVadc_getResultBasedOnRequestSource>:
=======
8000487c:	06 22       	sh %d2,2
8000487e:	00 90       	ret 

80004880 <IfxVadc_getResultBasedOnRequestSource>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000490c:	06 22       	sh %d2,2
8000490e:	00 90       	ret 

80004910 <IfxVadc_getResultBasedOnRequestSource>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
<<<<<<< HEAD
<<<<<<< HEAD
800048dc:	df 15 09 00 	jeq %d5,1,800048ee <IfxVadc_getResultBasedOnRequestSource+0x12>
800048e0:	76 54       	jz %d5,800048e8 <IfxVadc_getResultBasedOnRequestSource+0xc>
800048e2:	df 25 0b 00 	jeq %d5,2,800048f8 <IfxVadc_getResultBasedOnRequestSource+0x1c>
800048e6:	3c 39       	j 80004958 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
800048e8:	19 5f 00 20 	ld.w %d15,[%a5]128
800048ec:	3c 03       	j 800048f2 <IfxVadc_getResultBasedOnRequestSource+0x16>
=======
80004880:	df 15 09 00 	jeq %d5,1,80004892 <IfxVadc_getResultBasedOnRequestSource+0x12>
80004884:	76 54       	jz %d5,8000488c <IfxVadc_getResultBasedOnRequestSource+0xc>
80004886:	df 25 0b 00 	jeq %d5,2,8000489c <IfxVadc_getResultBasedOnRequestSource+0x1c>
8000488a:	3c 39       	j 800048fc <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
8000488c:	19 5f 00 20 	ld.w %d15,[%a5]128
80004890:	3c 03       	j 80004896 <IfxVadc_getResultBasedOnRequestSource+0x16>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004910:	df 15 09 00 	jeq %d5,1,80004922 <IfxVadc_getResultBasedOnRequestSource+0x12>
80004914:	76 54       	jz %d5,8000491c <IfxVadc_getResultBasedOnRequestSource+0xc>
80004916:	df 25 0b 00 	jeq %d5,2,8000492c <IfxVadc_getResultBasedOnRequestSource+0x1c>
8000491a:	3c 39       	j 8000498c <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
8000491c:	19 5f 00 20 	ld.w %d15,[%a5]128
80004920:	3c 03       	j 80004926 <IfxVadc_getResultBasedOnRequestSource+0x16>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
<<<<<<< HEAD
<<<<<<< HEAD
800048ee:	19 5f 20 20 	ld.w %d15,[%a5]160
800048f2:	16 0f       	and %d15,15
=======
80004892:	19 5f 20 20 	ld.w %d15,[%a5]160
80004896:	16 0f       	and %d15,15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004922:	19 5f 20 20 	ld.w %d15,[%a5]160
80004926:	16 0f       	and %d15,15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
<<<<<<< HEAD
<<<<<<< HEAD
800048f4:	ee 39       	jnz %d15,80004966 <IfxVadc_getResultBasedOnRequestSource+0x8a>
800048f6:	3c 31       	j 80004958 <IfxVadc_getResultBasedOnRequestSource+0x7c>
=======
80004898:	ee 39       	jnz %d15,8000490a <IfxVadc_getResultBasedOnRequestSource+0x8a>
8000489a:	3c 31       	j 800048fc <IfxVadc_getResultBasedOnRequestSource+0x7c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004928:	ee 39       	jnz %d15,8000499a <IfxVadc_getResultBasedOnRequestSource+0x8a>
8000492a:	3c 31       	j 8000498c <IfxVadc_getResultBasedOnRequestSource+0x7c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
<<<<<<< HEAD
<<<<<<< HEAD
800048f8:	19 4f 00 80 	ld.w %d15,[%a4]512
800048fc:	16 0f       	and %d15,15
=======
8000489c:	19 4f 00 80 	ld.w %d15,[%a4]512
800048a0:	16 0f       	and %d15,15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000492c:	19 4f 00 80 	ld.w %d15,[%a4]512
80004930:	16 0f       	and %d15,15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    }

    if (sourceResultRegister > 0)
<<<<<<< HEAD
<<<<<<< HEAD
800048fe:	ee 34       	jnz %d15,80004966 <IfxVadc_getResultBasedOnRequestSource+0x8a>
=======
800048a2:	ee 34       	jnz %d15,8000490a <IfxVadc_getResultBasedOnRequestSource+0x8a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004932:	ee 34       	jnz %d15,8000499a <IfxVadc_getResultBasedOnRequestSource+0x8a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
<<<<<<< HEAD
<<<<<<< HEAD
80004900:	1b 04 06 f0 	addi %d15,%d4,96
80004904:	90 5f       	addsc.a %a15,%a5,%d15,2
80004906:	4c f0       	ld.w %d15,[%a15]0
80004908:	ef 4f 28 00 	jz.t %d15,20,80004958 <IfxVadc_getResultBasedOnRequestSource+0x7c>
=======
80004934:	1b 04 06 f0 	addi %d15,%d4,96
80004938:	90 5f       	addsc.a %a15,%a5,%d15,2
8000493a:	4c f0       	ld.w %d15,[%a15]0
8000493c:	ef 4f 28 00 	jz.t %d15,20,8000498c <IfxVadc_getResultBasedOnRequestSource+0x7c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
80004940:	19 42 00 c0 	ld.w %d2,[%a4]768
80004944:	82 0f       	mov %d15,0
80004946:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
8000494a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000494e:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
80004952:	19 42 00 c0 	ld.w %d2,[%a4]768
80004956:	37 02 62 2e 	extr.u %d2,%d2,28,2
8000495a:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
8000495e:	19 42 00 c0 	ld.w %d2,[%a4]768
80004962:	37 02 e3 2c 	extr.u %d2,%d2,25,3
80004966:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
8000496a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000496e:	37 02 65 2a 	extr.u %d2,%d2,20,5
80004972:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
80004976:	19 42 00 c0 	ld.w %d2,[%a4]768
8000497a:	37 02 64 28 	extr.u %d2,%d2,16,4
8000497e:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
80004982:	19 42 00 c0 	ld.w %d2,[%a4]768
80004986:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
<<<<<<< HEAD
80004956:	00 90       	ret 
=======
800048a4:	1b 04 06 f0 	addi %d15,%d4,96
800048a8:	90 5f       	addsc.a %a15,%a5,%d15,2
800048aa:	4c f0       	ld.w %d15,[%a15]0
800048ac:	ef 4f 28 00 	jz.t %d15,20,800048fc <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
800048b0:	19 42 00 c0 	ld.w %d2,[%a4]768
800048b4:	82 0f       	mov %d15,0
800048b6:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
800048ba:	19 42 00 c0 	ld.w %d2,[%a4]768
800048be:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
800048c2:	19 42 00 c0 	ld.w %d2,[%a4]768
800048c6:	37 02 62 2e 	extr.u %d2,%d2,28,2
800048ca:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
800048ce:	19 42 00 c0 	ld.w %d2,[%a4]768
800048d2:	37 02 e3 2c 	extr.u %d2,%d2,25,3
800048d6:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
800048da:	19 42 00 c0 	ld.w %d2,[%a4]768
800048de:	37 02 65 2a 	extr.u %d2,%d2,20,5
800048e2:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
800048e6:	19 42 00 c0 	ld.w %d2,[%a4]768
800048ea:	37 02 64 28 	extr.u %d2,%d2,16,4
800048ee:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
800048f2:	19 42 00 c0 	ld.w %d2,[%a4]768
800048f6:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
800048fa:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000498a:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
<<<<<<< HEAD
<<<<<<< HEAD
80004958:	1b 04 06 40 	addi %d4,%d4,96
8000495c:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004960:	4c f0       	ld.w %d15,[%a15]0
80004962:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004966:	1b 0f 0a f0 	addi %d15,%d15,160
8000496a:	90 55       	addsc.a %a5,%a5,%d15,2
8000496c:	54 52       	ld.w %d2,[%a5]
=======
8000498c:	1b 04 06 40 	addi %d4,%d4,96
80004990:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004994:	4c f0       	ld.w %d15,[%a15]0
80004996:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000499a:	1b 0f 0a f0 	addi %d15,%d15,160
8000499e:	90 55       	addsc.a %a5,%a5,%d15,2
800049a0:	54 52       	ld.w %d2,[%a5]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

            return tmpResult;
800049a2:	00 90       	ret 

<<<<<<< HEAD
80004970 <IfxVadc_getScanStatus>:
=======
800048fc:	1b 04 06 40 	addi %d4,%d4,96
80004900:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004904:	4c f0       	ld.w %d15,[%a15]0
80004906:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000490a:	1b 0f 0a f0 	addi %d15,%d15,160
8000490e:	90 55       	addsc.a %a5,%a5,%d15,2
80004910:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
80004912:	00 90       	ret 

80004914 <IfxVadc_getScanStatus>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049a4 <IfxVadc_getScanStatus>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
<<<<<<< HEAD
<<<<<<< HEAD
80004970:	19 42 2c 20 	ld.w %d2,[%a4]172
=======
80004914:	19 42 2c 20 	ld.w %d2,[%a4]172
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049a4:	19 42 2c 20 	ld.w %d2,[%a4]172
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        return status;
    }
}
<<<<<<< HEAD
<<<<<<< HEAD
80004974:	ab 62 a0 22 	seln %d2,%d2,%d2,6
80004978:	00 90       	ret 

8000497a <IfxVadc_getSrcAddress>:
=======
80004918:	ab 62 a0 22 	seln %d2,%d2,%d2,6
8000491c:	00 90       	ret 

8000491e <IfxVadc_getSrcAddress>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049a8:	ab 62 a0 22 	seln %d2,%d2,%d2,6
800049ac:	00 90       	ret 

800049ae <IfxVadc_getSrcAddress>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
<<<<<<< HEAD
<<<<<<< HEAD
8000497a:	bf 45 0a 80 	jlt.u %d5,4,8000498e <IfxVadc_getSrcAddress+0x14>
=======
800049ae:	bf 45 0a 80 	jlt.u %d5,4,800049c2 <IfxVadc_getSrcAddress+0x14>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        index -= 4;
800049b2:	9a c5       	add %d15,%d5,-4
800049b4:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
800049b8:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
<<<<<<< HEAD
80004988:	da 08       	mov %d15,8
8000498a:	ab 9f a0 44 	seln %d4,%d4,%d15,9
=======
8000491e:	bf 45 0a 80 	jlt.u %d5,4,80004932 <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
80004922:	9a c5       	add %d15,%d5,-4
80004924:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004928:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
8000492c:	da 08       	mov %d15,8
8000492e:	ab 9f a0 44 	seln %d4,%d4,%d15,9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049bc:	da 08       	mov %d15,8
800049be:	ab 9f a0 44 	seln %d4,%d4,%d15,9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
<<<<<<< HEAD
<<<<<<< HEAD
8000498e:	13 44 20 45 	madd %d4,%d5,%d4,4
80004992:	91 00 00 f8 	movh.a %a15,32768
80004996:	d9 ff 10 90 	lea %a15,[%a15]592 <80000250 <IfxVadc_cfg_srcAddresses>>
8000499a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
=======
800049c2:	13 44 20 45 	madd %d4,%d5,%d4,4
800049c6:	91 00 00 f8 	movh.a %a15,32768
800049ca:	d9 ff 28 90 	lea %a15,[%a15]616 <80000268 <IfxVadc_cfg_srcAddresses>>
800049ce:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    return &(base[0]);
}
800049d2:	c8 02       	ld.a %a2,[%a15]0
800049d4:	00 90       	ret 

<<<<<<< HEAD
800049a2 <IfxVadc_initialiseAdcArbiterClock>:
=======
80004932:	13 44 20 45 	madd %d4,%d5,%d4,4
80004936:	91 00 00 f8 	movh.a %a15,32768
8000493a:	d9 ff 2c 70 	lea %a15,[%a15]492 <800001ec <IfxVadc_cfg_srcAddresses>>
8000493e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
80004942:	c8 02       	ld.a %a2,[%a15]0
80004944:	00 90       	ret 

80004946 <IfxVadc_initialiseAdcArbiterClock>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049d6 <IfxVadc_initialiseAdcArbiterClock>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
800049a2:	19 4f 00 20 	ld.w %d15,[%a4]128
=======
80004946:	19 4f 00 20 	ld.w %d15,[%a4]128
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049d6:	19 4f 00 20 	ld.w %d15,[%a4]128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
<<<<<<< HEAD
<<<<<<< HEAD
800049a6:	40 4f       	mov.aa %a15,%a4
=======
800049da:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
800049dc:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
800049ac:	3b f0 01 40 	mov %d4,31
800049b0:	6d ff b4 fe 	call 80004718 <IfxVadc_enableAccess>
=======
8000494a:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
8000494c:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004950:	3b f0 01 40 	mov %d4,31
80004954:	6d ff b4 fe 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049e0:	3b f0 01 40 	mov %d4,31
800049e4:	6d ff b4 fe 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800049b4:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049b8:	40 f4       	mov.aa %a4,%a15
=======
80004958:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000495c:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049e8:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049ec:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
800049ba:	59 ff 00 20 	st.w [%a15]128,%d15
=======
800049ee:	59 ff 00 20 	st.w [%a15]128,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049f2:	3b f0 01 40 	mov %d4,31
800049f6:	1d ff 8f fe 	j 80004714 <IfxVadc_disableAccess>

<<<<<<< HEAD
800049c6 <IfxVadc_initialiseAdcConverterClock>:
=======
8000495e:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004962:	3b f0 01 40 	mov %d4,31
80004966:	1d ff 8f fe 	j 80004684 <IfxVadc_disableAccess>

8000496a <IfxVadc_initialiseAdcConverterClock>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049fa <IfxVadc_initialiseAdcConverterClock>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
800049c6:	19 4f 00 20 	ld.w %d15,[%a4]128
=======
8000496a:	19 4f 00 20 	ld.w %d15,[%a4]128
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800049fa:	19 4f 00 20 	ld.w %d15,[%a4]128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
<<<<<<< HEAD
<<<<<<< HEAD
800049ca:	40 4f       	mov.aa %a15,%a4
=======
800049fe:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80004a00:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
800049d0:	3b f0 01 40 	mov %d4,31
800049d4:	6d ff a2 fe 	call 80004718 <IfxVadc_enableAccess>
=======
8000496e:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
80004970:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004974:	3b f0 01 40 	mov %d4,31
80004978:	6d ff a2 fe 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a04:	3b f0 01 40 	mov %d4,31
80004a08:	6d ff a2 fe 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800049d8:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049dc:	40 f4       	mov.aa %a4,%a15
=======
8000497c:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004980:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a0c:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a10:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
800049de:	59 ff 00 20 	st.w [%a15]128,%d15
=======
80004a12:	59 ff 00 20 	st.w [%a15]128,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a16:	3b f0 01 40 	mov %d4,31
80004a1a:	1d ff 7d fe 	j 80004714 <IfxVadc_disableAccess>

<<<<<<< HEAD
800049ea <IfxVadc_initializeFAdcD>:
=======
80004982:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004986:	3b f0 01 40 	mov %d4,31
8000498a:	1d ff 7d fe 	j 80004684 <IfxVadc_disableAccess>

8000498e <IfxVadc_initializeFAdcD>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a1e <IfxVadc_initializeFAdcD>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
<<<<<<< HEAD
<<<<<<< HEAD
800049ea:	02 4f       	mov %d15,%d4
800049ec:	40 4f       	mov.aa %a15,%a4
=======
80004a1e:	02 4f       	mov %d15,%d4
80004a20:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004a22:	6d 00 06 0c 	call 8000622e <IfxScuCcu_getSpbFrequency>
80004a26:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
<<<<<<< HEAD
800049f6:	4b f2 11 42 	div.u %e4,%d2,%d15
=======
8000498e:	02 4f       	mov %d15,%d4
80004990:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004992:	6d 00 06 0c 	call 8000619e <IfxScuCcu_getSpbFrequency>
80004996:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
8000499a:	4b f2 11 42 	div.u %e4,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a2a:	4b f2 11 42 	div.u %e4,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
<<<<<<< HEAD
800049fa:	82 3f       	mov %d15,3
800049fc:	c2 f4       	add %d4,-1
800049fe:	0b f4 90 41 	min.u %d4,%d4,%d15
=======
8000499e:	82 3f       	mov %d15,3
800049a0:	c2 f4       	add %d4,-1
800049a2:	0b f4 90 41 	min.u %d4,%d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a2e:	82 3f       	mov %d15,3
80004a30:	c2 f4       	add %d4,-1
80004a32:	0b f4 90 41 	min.u %d4,%d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
<<<<<<< HEAD
<<<<<<< HEAD
80004a02:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a06:	40 f4       	mov.aa %a4,%a15
=======
800049a6:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049aa:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a36:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a3a:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
<<<<<<< HEAD
<<<<<<< HEAD
80004a08:	4b 82 11 82 	div.u %e8,%d2,%d8
=======
80004a3c:	4b 82 11 82 	div.u %e8,%d2,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a40:	6d ff cb ff 	call 800049d6 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80004a44:	02 82       	mov %d2,%d8
80004a46:	00 90       	ret 

<<<<<<< HEAD
80004a14 <IfxVadc_initializeFAdcI>:
=======
800049ac:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800049b0:	6d ff cb ff 	call 80004946 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
800049b4:	02 82       	mov %d2,%d8
800049b6:	00 90       	ret 

800049b8 <IfxVadc_initializeFAdcI>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a48 <IfxVadc_initializeFAdcI>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004a14:	02 4f       	mov %d15,%d4
80004a16:	40 4f       	mov.aa %a15,%a4
=======
80004a48:	02 4f       	mov %d15,%d4
80004a4a:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004a4c:	6d 00 f1 0b 	call 8000622e <IfxScuCcu_getSpbFrequency>
80004a50:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
80004a54:	8f 22 00 40 	sh %d4,%d2,2
80004a58:	4b f4 11 42 	div.u %e4,%d4,%d15
80004a5c:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80004a60:	c2 24       	add %d4,2
80004a62:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
80004a64:	c2 f4       	add %d4,-1
80004a66:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
80004a6a:	1b 14 00 30 	addi %d3,%d4,1
80004a6e:	4b 32 11 62 	div.u %e6,%d2,%d3
80004a72:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
<<<<<<< HEAD
80004a40:	7b 10 13 60 	movh %d6,305
80004a44:	1b 16 d0 62 	addi %d6,%d6,11521
80004a48:	3f 6f 08 80 	jlt.u %d15,%d6,80004a58 <IfxVadc_initializeFAdcI+0x44>
80004a4c:	0b 53 90 41 	min.u %d4,%d3,%d5
=======
800049b8:	02 4f       	mov %d15,%d4
800049ba:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800049bc:	6d 00 f1 0b 	call 8000619e <IfxScuCcu_getSpbFrequency>
800049c0:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
800049c4:	8f 22 00 40 	sh %d4,%d2,2
800049c8:	4b f4 11 42 	div.u %e4,%d4,%d15
800049cc:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
800049d0:	c2 24       	add %d4,2
800049d2:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
800049d4:	c2 f4       	add %d4,-1
800049d6:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
800049da:	1b 14 00 30 	addi %d3,%d4,1
800049de:	4b 32 11 62 	div.u %e6,%d2,%d3
800049e2:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
800049e4:	7b 10 13 60 	movh %d6,305
800049e8:	1b 16 d0 62 	addi %d6,%d6,11521
800049ec:	3f 6f 08 80 	jlt.u %d15,%d6,800049fc <IfxVadc_initializeFAdcI+0x44>
800049f0:	0b 53 90 41 	min.u %d4,%d3,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a74:	7b 10 13 60 	movh %d6,305
80004a78:	1b 16 d0 62 	addi %d6,%d6,11521
80004a7c:	3f 6f 08 80 	jlt.u %d15,%d6,80004a8c <IfxVadc_initializeFAdcI+0x44>
80004a80:	0b 53 90 41 	min.u %d4,%d3,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
<<<<<<< HEAD
<<<<<<< HEAD
80004a50:	9a 14       	add %d15,%d4,1
80004a52:	4b f2 11 22 	div.u %e2,%d2,%d15
80004a56:	02 2f       	mov %d15,%d2
=======
800049f4:	9a 14       	add %d15,%d4,1
800049f6:	4b f2 11 22 	div.u %e2,%d2,%d15
800049fa:	02 2f       	mov %d15,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a84:	9a 14       	add %d15,%d4,1
80004a86:	4b f2 11 22 	div.u %e2,%d2,%d15
80004a8a:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
<<<<<<< HEAD
<<<<<<< HEAD
80004a58:	1b 0f ee 25 	addi %d2,%d15,24288
80004a5c:	7b a0 12 30 	movh %d3,298
80004a60:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a64:	1b 13 be 38 	addi %d3,%d3,-29727
80004a68:	7f 32 06 80 	jge.u %d2,%d3,80004a74 <IfxVadc_initializeFAdcI+0x60>
=======
800049fc:	1b 0f ee 25 	addi %d2,%d15,24288
80004a00:	7b a0 12 30 	movh %d3,298
80004a04:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a08:	1b 13 be 38 	addi %d3,%d3,-29727
80004a0c:	7f 32 06 80 	jge.u %d2,%d3,80004a18 <IfxVadc_initializeFAdcI+0x60>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004a8c:	1b 0f ee 25 	addi %d2,%d15,24288
80004a90:	7b a0 12 30 	movh %d3,298
80004a94:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a98:	1b 13 be 38 	addi %d3,%d3,-29727
80004a9c:	7f 32 06 80 	jge.u %d2,%d3,80004aa8 <IfxVadc_initializeFAdcI+0x60>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
<<<<<<< HEAD
<<<<<<< HEAD
80004a6c:	40 f4       	mov.aa %a4,%a15
80004a6e:	6d ff ac ff 	call 800049c6 <IfxVadc_initialiseAdcConverterClock>
80004a72:	3c 02       	j 80004a76 <IfxVadc_initializeFAdcI+0x62>
=======
80004a10:	40 f4       	mov.aa %a4,%a15
80004a12:	6d ff ac ff 	call 8000496a <IfxVadc_initialiseAdcConverterClock>
80004a16:	3c 02       	j 80004a1a <IfxVadc_initializeFAdcI+0x62>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004aa0:	40 f4       	mov.aa %a4,%a15
80004aa2:	6d ff ac ff 	call 800049fa <IfxVadc_initialiseAdcConverterClock>
80004aa6:	3c 02       	j 80004aaa <IfxVadc_initializeFAdcI+0x62>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
<<<<<<< HEAD
<<<<<<< HEAD
80004a74:	82 0f       	mov %d15,0
=======
80004a18:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004aa8:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004a76:	02 f2       	mov %d2,%d15
80004a78:	00 90       	ret 

80004a7a <IfxVadc_isPostCalibration>:
=======
80004a1a:	02 f2       	mov %d2,%d15
80004a1c:	00 90       	ret 

80004a1e <IfxVadc_isPostCalibration>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004aaa:	02 f2       	mov %d2,%d15
80004aac:	00 90       	ret 

80004aae <IfxVadc_isPostCalibration>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80004a7a:	82 02       	mov %d2,0
=======
80004a1e:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004aae:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
<<<<<<< HEAD
<<<<<<< HEAD
80004a7c:	ff 84 33 80 	jge.u %d4,8,80004ae2 <IfxVadc_isPostCalibration+0x68>
80004a80:	91 00 00 f8 	movh.a %a15,32768
80004a84:	d9 ff 94 a4 	lea %a15,[%a15]19092 <80004a94 <IfxVadc_isPostCalibration+0x1a>>
80004a88:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
=======
80004a20:	ff 84 33 80 	jge.u %d4,8,80004a86 <IfxVadc_isPostCalibration+0x68>
80004a24:	91 00 00 f8 	movh.a %a15,32768
80004a28:	d9 ff b8 84 	lea %a15,[%a15]19000 <80004a38 <IfxVadc_isPostCalibration+0x1a>>
80004a2c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ab0:	ff 84 33 80 	jge.u %d4,8,80004b16 <IfxVadc_isPostCalibration+0x68>
80004ab4:	91 00 00 f8 	movh.a %a15,32768
80004ab8:	d9 ff 88 b4 	lea %a15,[%a15]19144 <80004ac8 <IfxVadc_isPostCalibration+0x1a>>
80004abc:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
<<<<<<< HEAD
<<<<<<< HEAD
80004a8c:	19 42 00 20 	ld.w %d2,[%a4]128
=======
80004a30:	19 42 00 20 	ld.w %d2,[%a4]128
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ac0:	19 42 00 20 	ld.w %d2,[%a4]128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
<<<<<<< HEAD
<<<<<<< HEAD
80004a90:	dc 0f       	ji %a15
80004a92:	00 00       	nop 
80004a94:	1d 00 10 00 	j 80004ab4 <IfxVadc_isPostCalibration+0x3a>
80004a98:	1d 00 11 00 	j 80004aba <IfxVadc_isPostCalibration+0x40>
80004a9c:	1d 00 12 00 	j 80004ac0 <IfxVadc_isPostCalibration+0x46>
80004aa0:	1d 00 13 00 	j 80004ac6 <IfxVadc_isPostCalibration+0x4c>
80004aa4:	1d 00 14 00 	j 80004acc <IfxVadc_isPostCalibration+0x52>
80004aa8:	1d 00 15 00 	j 80004ad2 <IfxVadc_isPostCalibration+0x58>
80004aac:	1d 00 16 00 	j 80004ad8 <IfxVadc_isPostCalibration+0x5e>
80004ab0:	1d 00 17 00 	j 80004ade <IfxVadc_isPostCalibration+0x64>
=======
80004ac4:	dc 0f       	ji %a15
80004ac6:	00 00       	nop 
80004ac8:	1d 00 10 00 	j 80004ae8 <IfxVadc_isPostCalibration+0x3a>
80004acc:	1d 00 11 00 	j 80004aee <IfxVadc_isPostCalibration+0x40>
80004ad0:	1d 00 12 00 	j 80004af4 <IfxVadc_isPostCalibration+0x46>
80004ad4:	1d 00 13 00 	j 80004afa <IfxVadc_isPostCalibration+0x4c>
80004ad8:	1d 00 14 00 	j 80004b00 <IfxVadc_isPostCalibration+0x52>
80004adc:	1d 00 15 00 	j 80004b06 <IfxVadc_isPostCalibration+0x58>
80004ae0:	1d 00 16 00 	j 80004b0c <IfxVadc_isPostCalibration+0x5e>
80004ae4:	1d 00 17 00 	j 80004b12 <IfxVadc_isPostCalibration+0x64>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004ae8:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004aec:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004aee:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004af2:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004af4:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004af8:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004afa:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004afe:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004b00:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004b04:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004b06:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004b0a:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004b0c:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004b10:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
<<<<<<< HEAD
80004ade:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
=======
80004a34:	dc 0f       	ji %a15
80004a36:	00 00       	nop 
80004a38:	1d 00 10 00 	j 80004a58 <IfxVadc_isPostCalibration+0x3a>
80004a3c:	1d 00 11 00 	j 80004a5e <IfxVadc_isPostCalibration+0x40>
80004a40:	1d 00 12 00 	j 80004a64 <IfxVadc_isPostCalibration+0x46>
80004a44:	1d 00 13 00 	j 80004a6a <IfxVadc_isPostCalibration+0x4c>
80004a48:	1d 00 14 00 	j 80004a70 <IfxVadc_isPostCalibration+0x52>
80004a4c:	1d 00 15 00 	j 80004a76 <IfxVadc_isPostCalibration+0x58>
80004a50:	1d 00 16 00 	j 80004a7c <IfxVadc_isPostCalibration+0x5e>
80004a54:	1d 00 17 00 	j 80004a82 <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004a58:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004a5c:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004a5e:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004a62:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004a64:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004a68:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004a6a:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004a6e:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004a70:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004a74:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004a76:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004a7a:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004a7c:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004a80:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a82:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b12:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004ae2:	00 90       	ret 

80004ae4 <IfxVadc_getChannelConversionTime>:
=======
80004a86:	00 90       	ret 

80004a88 <IfxVadc_getChannelConversionTime>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b16:	00 90       	ret 

80004b18 <IfxVadc_getChannelConversionTime>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004ae4:	02 40       	mov %d0,%d4
80004ae6:	02 68       	mov %d8,%d6
80004ae8:	02 7a       	mov %d10,%d7
80004aea:	14 a4       	ld.bu %d4,[%sp]
=======
80004a88:	02 40       	mov %d0,%d4
80004a8a:	02 68       	mov %d8,%d6
80004a8c:	02 7a       	mov %d10,%d7
80004a8e:	14 a4       	ld.bu %d4,[%sp]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b18:	02 40       	mov %d0,%d4
80004b1a:	02 68       	mov %d8,%d6
80004b1c:	02 7a       	mov %d10,%d7
80004b1e:	14 a4       	ld.bu %d4,[%sp]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
<<<<<<< HEAD
<<<<<<< HEAD
80004aec:	ff 25 08 80 	jge.u %d5,2,80004afc <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004af0:	8f 80 00 f0 	sh %d15,%d0,8
80004af4:	42 f5       	add %d5,%d15
80004af6:	1b 85 12 50 	addi %d5,%d5,296
80004afa:	3c 03       	j 80004b00 <IfxVadc_getChannelConversionTime+0x1c>
=======
80004a90:	ff 25 08 80 	jge.u %d5,2,80004aa0 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004a94:	8f 80 00 f0 	sh %d15,%d0,8
80004a98:	42 f5       	add %d5,%d15
80004a9a:	1b 85 12 50 	addi %d5,%d5,296
80004a9e:	3c 03       	j 80004aa4 <IfxVadc_getChannelConversionTime+0x1c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b20:	ff 25 08 80 	jge.u %d5,2,80004b30 <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004b24:	8f 80 00 f0 	sh %d15,%d0,8
80004b28:	42 f5       	add %d5,%d15
80004b2a:	1b 85 12 50 	addi %d5,%d5,296
80004b2e:	3c 03       	j 80004b34 <IfxVadc_getChannelConversionTime+0x1c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
<<<<<<< HEAD
<<<<<<< HEAD
80004afc:	1b 65 02 50 	addi %d5,%d5,38
80004b00:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004b04:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b06:	48 03       	ld.w %d3,[%a15]0
=======
80004aa0:	1b 65 02 50 	addi %d5,%d5,38
80004aa4:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004aa8:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004aaa:	48 03       	ld.w %d3,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b30:	1b 65 02 50 	addi %d5,%d5,38
80004b34:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004b38:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b3a:	48 03       	ld.w %d3,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
<<<<<<< HEAD
<<<<<<< HEAD
80004b08:	16 1f       	and %d15,31
=======
80004aac:	16 1f       	and %d15,31
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b3c:	16 1f       	and %d15,31
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
<<<<<<< HEAD
<<<<<<< HEAD
80004b0a:	8b 1f 61 22 	lt.u %d2,%d15,17
=======
80004aae:	8b 1f 61 22 	lt.u %d2,%d15,17
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b3e:	8b 1f 61 22 	lt.u %d2,%d15,17
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
<<<<<<< HEAD
<<<<<<< HEAD
80004b0e:	37 03 63 34 	extr.u %d3,%d3,8,3
=======
80004b42:	37 03 63 34 	extr.u %d3,%d3,8,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (stcs > 16)
80004b46:	f6 24       	jnz %d2,80004b4e <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
<<<<<<< HEAD
80004b14:	1b 1f ff ff 	addi %d15,%d15,-15
80004b18:	06 4f       	sh %d15,4
80004b1a:	ff 63 35 80 	jge.u %d3,6,80004b84 <IfxVadc_getChannelConversionTime+0xa0>
80004b1e:	91 00 00 f8 	movh.a %a15,32768
80004b22:	d9 ff 08 90 	lea %a15,[%a15]584 <80000248 <CSWTCH.25>>
80004b26:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
=======
80004ab2:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
80004ab6:	f6 24       	jnz %d2,80004abe <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004ab8:	1b 1f ff ff 	addi %d15,%d15,-15
80004abc:	06 4f       	sh %d15,4
80004abe:	ff 63 35 80 	jge.u %d3,6,80004b28 <IfxVadc_getChannelConversionTime+0xa0>
80004ac2:	91 00 00 f8 	movh.a %a15,32768
80004ac6:	d9 ff 24 70 	lea %a15,[%a15]484 <800001e4 <CSWTCH.25>>
80004aca:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b48:	1b 1f ff ff 	addi %d15,%d15,-15
80004b4c:	06 4f       	sh %d15,4
80004b4e:	ff 63 35 80 	jge.u %d3,6,80004bb8 <IfxVadc_getChannelConversionTime+0xa0>
80004b52:	91 00 00 f8 	movh.a %a15,32768
80004b56:	d9 ff 20 90 	lea %a15,[%a15]608 <80000260 <CSWTCH.25>>
80004b5a:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
<<<<<<< HEAD
<<<<<<< HEAD
80004b2a:	82 02       	mov %d2,0
80004b2c:	08 09       	ld.bu %d9,[%a15]0
=======
80004ace:	82 02       	mov %d2,0
80004ad0:	08 09       	ld.bu %d9,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b5e:	82 02       	mov %d2,0
80004b60:	08 09       	ld.bu %d9,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
<<<<<<< HEAD
<<<<<<< HEAD
80004b2e:	df 04 2f 80 	jne %d4,0,80004b8c <IfxVadc_getChannelConversionTime+0xa8>
=======
80004b62:	df 04 2f 80 	jne %d4,0,80004bc0 <IfxVadc_getChannelConversionTime+0xa8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004b66:	df 53 0d 00 	jeq %d3,5,80004b80 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004b6a:	02 04       	mov %d4,%d0
80004b6c:	6d ff a1 ff 	call 80004aae <IfxVadc_isPostCalibration>
80004b70:	92 24       	add %d4,%d15,2
80004b72:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004b76:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
<<<<<<< HEAD
80004b44:	42 24       	add %d4,%d2
80004b46:	4b 04 41 41 	itof %d4,%d4
80004b4a:	3c 04       	j 80004b52 <IfxVadc_getChannelConversionTime+0x6e>
=======
80004ad2:	df 04 2f 80 	jne %d4,0,80004b30 <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004ad6:	df 53 0d 00 	jeq %d3,5,80004af0 <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004ada:	02 04       	mov %d4,%d0
80004adc:	6d ff a1 ff 	call 80004a1e <IfxVadc_isPostCalibration>
80004ae0:	92 24       	add %d4,%d15,2
80004ae2:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004ae6:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004ae8:	42 24       	add %d4,%d2
80004aea:	4b 04 41 41 	itof %d4,%d4
80004aee:	3c 04       	j 80004af6 <IfxVadc_getChannelConversionTime+0x6e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b78:	42 24       	add %d4,%d2
80004b7a:	4b 04 41 41 	itof %d4,%d4
80004b7e:	3c 04       	j 80004b86 <IfxVadc_getChannelConversionTime+0x6e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
<<<<<<< HEAD
<<<<<<< HEAD
80004b4c:	c2 4f       	add %d15,4
80004b4e:	4b 0f 41 41 	itof %d4,%d15
80004b52:	4b 84 51 40 	div.f %d4,%d4,%d8
80004b56:	6d 00 17 2e 	call 8000a784 <__extendsfdf2>
80004b5a:	02 a4       	mov %d4,%d10
80004b5c:	0b 23 10 88 	mov %e8,%d3,%d2
80004b60:	6d 00 12 2e 	call 8000a784 <__extendsfdf2>
80004b64:	b7 00 21 4f 	imask %e4,0,30,1
80004b68:	0b 23 10 68 	mov %e6,%d3,%d2
80004b6c:	6d 00 01 30 	call 8000ab6e <__divdf3>
80004b70:	0b 89 10 48 	mov %e4,%d9,%d8
80004b74:	0b 23 10 68 	mov %e6,%d3,%d2
80004b78:	6d 00 ed 2e 	call 8000a952 <__adddf3>
80004b7c:	0b 23 10 48 	mov %e4,%d3,%d2
80004b80:	1d 00 b6 30 	j 8000acec <__truncdfsf2>
=======
80004af0:	c2 4f       	add %d15,4
80004af2:	4b 0f 41 41 	itof %d4,%d15
80004af6:	4b 84 51 40 	div.f %d4,%d4,%d8
80004afa:	6d 00 5d 2d 	call 8000a5b4 <__extendsfdf2>
80004afe:	02 a4       	mov %d4,%d10
80004b00:	0b 23 10 88 	mov %e8,%d3,%d2
80004b04:	6d 00 58 2d 	call 8000a5b4 <__extendsfdf2>
80004b08:	b7 00 21 4f 	imask %e4,0,30,1
80004b0c:	0b 23 10 68 	mov %e6,%d3,%d2
80004b10:	6d 00 47 2f 	call 8000a99e <__divdf3>
80004b14:	0b 89 10 48 	mov %e4,%d9,%d8
80004b18:	0b 23 10 68 	mov %e6,%d3,%d2
80004b1c:	6d 00 33 2e 	call 8000a782 <__adddf3>
80004b20:	0b 23 10 48 	mov %e4,%d3,%d2
80004b24:	1d 00 fc 2f 	j 8000ab1c <__truncdfsf2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004b80:	c2 4f       	add %d15,4
80004b82:	4b 0f 41 41 	itof %d4,%d15
80004b86:	4b 84 51 40 	div.f %d4,%d4,%d8
80004b8a:	6d 00 73 2e 	call 8000a870 <__extendsfdf2>
80004b8e:	02 a4       	mov %d4,%d10
80004b90:	0b 23 10 88 	mov %e8,%d3,%d2
80004b94:	6d 00 6e 2e 	call 8000a870 <__extendsfdf2>
80004b98:	b7 00 21 4f 	imask %e4,0,30,1
80004b9c:	0b 23 10 68 	mov %e6,%d3,%d2
80004ba0:	6d 00 5d 30 	call 8000ac5a <__divdf3>
80004ba4:	0b 89 10 48 	mov %e4,%d9,%d8
80004ba8:	0b 23 10 68 	mov %e6,%d3,%d2
80004bac:	6d 00 49 2f 	call 8000aa3e <__adddf3>
80004bb0:	0b 23 10 48 	mov %e4,%d3,%d2
80004bb4:	1d 00 12 31 	j 8000add8 <__truncdfsf2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
<<<<<<< HEAD
<<<<<<< HEAD
80004b84:	82 09       	mov %d9,0
80004b86:	df 04 d8 7f 	jeq %d4,0,80004b36 <IfxVadc_getChannelConversionTime+0x52>
=======
80004b28:	82 09       	mov %d9,0
80004b2a:	df 04 d8 7f 	jeq %d4,0,80004ada <IfxVadc_getChannelConversionTime+0x52>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004bb8:	82 09       	mov %d9,0
80004bba:	df 04 d8 7f 	jeq %d4,0,80004b6a <IfxVadc_getChannelConversionTime+0x52>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
<<<<<<< HEAD
<<<<<<< HEAD
80004b8a:	82 02       	mov %d2,0
=======
80004b2e:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004bbe:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        // do nothing
    }

    return conversionTime;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004b8c:	00 90       	ret 

80004b8e <IfxVadc_resetKernel>:
=======
80004b30:	00 90       	ret 

80004b32 <IfxVadc_resetKernel>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004bc0:	00 90       	ret 

80004bc2 <IfxVadc_resetKernel>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004b8e:	40 4f       	mov.aa %a15,%a4
=======
80004bc2:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004bc4:	6d 00 f9 13 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80004b94:	02 24       	mov %d4,%d2
=======
80004b32:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b34:	6d 00 f9 13 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004b38:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004bc8:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80004b96:	02 2f       	mov %d15,%d2
=======
80004bca:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_clearCpuEndinit(passwd);
80004bcc:	6d 00 f5 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bd0:	3b f0 01 40 	mov %d4,31
80004bd4:	40 f4       	mov.aa %a4,%a15
80004bd6:	6d ff bb fd 	call 8000474c <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004bda:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
80004ba8:	02 f4       	mov %d4,%d15
=======
80004b3a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004b3c:	6d 00 f5 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b40:	3b f0 01 40 	mov %d4,31
80004b44:	40 f4       	mov.aa %a4,%a15
80004b46:	6d ff bb fd 	call 800046bc <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004b4a:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004b4c:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004bdc:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
<<<<<<< HEAD
<<<<<<< HEAD
80004baa:	8f 12 40 21 	or %d2,%d2,1
80004bae:	68 c2       	st.w [%a15]48,%d2
=======
80004bde:	8f 12 40 21 	or %d2,%d2,1
80004be2:	68 c2       	st.w [%a15]48,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    vadc->KRST0.B.RST = 1;
80004be4:	48 d2       	ld.w %d2,[%a15]52
80004be6:	8f 12 40 21 	or %d2,%d2,1
80004bea:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004bec:	6d 00 1a 14 	call 80007420 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
<<<<<<< HEAD
80004bbc:	48 d2       	ld.w %d2,[%a15]52
80004bbe:	6f 12 ff 7f 	jz.t %d2,1,80004bbc <IfxVadc_resetKernel+0x2e>
=======
80004b4e:	8f 12 40 21 	or %d2,%d2,1
80004b52:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004b54:	48 d2       	ld.w %d2,[%a15]52
80004b56:	8f 12 40 21 	or %d2,%d2,1
80004b5a:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004b5c:	6d 00 1a 14 	call 80007390 <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004b60:	48 d2       	ld.w %d2,[%a15]52
80004b62:	6f 12 ff 7f 	jz.t %d2,1,80004b60 <IfxVadc_resetKernel+0x2e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004bf0:	48 d2       	ld.w %d2,[%a15]52
80004bf2:	6f 12 ff 7f 	jz.t %d2,1,80004bf0 <IfxVadc_resetKernel+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
<<<<<<< HEAD
80004bc2:	02 f4       	mov %d4,%d15
80004bc4:	6d 00 df 12 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80004bf6:	02 f4       	mov %d4,%d15
80004bf8:	6d 00 df 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004bfc:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bfe:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004c02:	8f 12 40 21 	or %d2,%d2,1
80004c06:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c08:	40 f4       	mov.aa %a4,%a15
80004c0a:	6d ff 85 fd 	call 80004714 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004c0e:	02 f4       	mov %d4,%d15
80004c10:	1d 00 08 14 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80004be0 <IfxVadc_selectPowerSupplyVoltage>:
=======
80004b66:	02 f4       	mov %d4,%d15
80004b68:	6d 00 df 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b6c:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b6e:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004b72:	8f 12 40 21 	or %d2,%d2,1
80004b76:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b78:	40 f4       	mov.aa %a4,%a15
80004b7a:	6d ff 85 fd 	call 80004684 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004b7e:	02 f4       	mov %d4,%d15
80004b80:	1d 00 08 14 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004b84 <IfxVadc_selectPowerSupplyVoltage>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c14 <IfxVadc_selectPowerSupplyVoltage>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
80004be0:	19 4f 00 20 	ld.w %d15,[%a4]128
=======
80004b84:	19 4f 00 20 	ld.w %d15,[%a4]128
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c14:	19 4f 00 20 	ld.w %d15,[%a4]128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004be4:	40 4f       	mov.aa %a15,%a4
=======
80004c18:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004c1a:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
80004bea:	3b f0 01 40 	mov %d4,31
80004bee:	6d ff 95 fd 	call 80004718 <IfxVadc_enableAccess>
=======
80004b88:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004b8a:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b8e:	3b f0 01 40 	mov %d4,31
80004b92:	6d ff 95 fd 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c1e:	3b f0 01 40 	mov %d4,31
80004c22:	6d ff 95 fd 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004bf2:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bf6:	40 f4       	mov.aa %a4,%a15
=======
80004b96:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b9a:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c26:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c2a:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
80004bf8:	59 ff 00 20 	st.w [%a15]128,%d15
=======
80004c2c:	59 ff 00 20 	st.w [%a15]128,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c30:	3b f0 01 40 	mov %d4,31
80004c34:	1d ff 70 fd 	j 80004714 <IfxVadc_disableAccess>

<<<<<<< HEAD
80004c04 <IfxVadc_setArbiterPriority>:
=======
80004b9c:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004ba0:	3b f0 01 40 	mov %d4,31
80004ba4:	1d ff 70 fd 	j 80004684 <IfxVadc_disableAccess>

80004ba8 <IfxVadc_setArbiterPriority>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c38 <IfxVadc_setArbiterPriority>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004c04:	1b 87 01 f0 	addi %d15,%d7,24
=======
80004c38:	1b 87 01 f0 	addi %d15,%d7,24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (slotEnable != FALSE)
80004c3c:	df 04 23 00 	jeq %d4,0,80004c82 <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004c40:	19 42 04 00 	ld.w %d2,[%a4]4
80004c44:	0f f4 00 40 	sh %d4,%d4,%d15
80004c48:	a6 24       	or %d4,%d2
80004c4a:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004c4e:	19 42 04 00 	ld.w %d2,[%a4]4
80004c52:	06 27       	sh %d7,2
80004c54:	82 3f       	mov %d15,3
80004c56:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004c5a:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004c5e:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
<<<<<<< HEAD
80004c2c:	4c 41       	ld.w %d15,[%a4]4
80004c2e:	0f 75 00 50 	sh %d5,%d5,%d7
80004c32:	a6 f5       	or %d5,%d15
80004c34:	59 45 04 00 	st.w [%a4]4,%d5
=======
80004ba8:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004bac:	df 04 23 00 	jeq %d4,0,80004bf2 <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004bb0:	19 42 04 00 	ld.w %d2,[%a4]4
80004bb4:	0f f4 00 40 	sh %d4,%d4,%d15
80004bb8:	a6 24       	or %d4,%d2
80004bba:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004bbe:	19 42 04 00 	ld.w %d2,[%a4]4
80004bc2:	06 27       	sh %d7,2
80004bc4:	82 3f       	mov %d15,3
80004bc6:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004bca:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004bce:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004bd0:	4c 41       	ld.w %d15,[%a4]4
80004bd2:	0f 75 00 50 	sh %d5,%d5,%d7
80004bd6:	a6 f5       	or %d5,%d15
80004bd8:	59 45 04 00 	st.w [%a4]4,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c60:	4c 41       	ld.w %d15,[%a4]4
80004c62:	0f 75 00 50 	sh %d5,%d5,%d7
80004c66:	a6 f5       	or %d5,%d15
80004c68:	59 45 04 00 	st.w [%a4]4,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
<<<<<<< HEAD
<<<<<<< HEAD
80004c38:	4c 41       	ld.w %d15,[%a4]4
80004c3a:	c2 37       	add %d7,3
=======
80004bdc:	4c 41       	ld.w %d15,[%a4]4
80004bde:	c2 37       	add %d7,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c6c:	4c 41       	ld.w %d15,[%a4]4
80004c6e:	c2 37       	add %d7,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
<<<<<<< HEAD
<<<<<<< HEAD
80004c3c:	76 64       	jz %d6,80004c44 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c3e:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004c42:	3c 03       	j 80004c48 <IfxVadc_setArbiterPriority+0x44>
=======
80004be0:	76 64       	jz %d6,80004be8 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004be2:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004be6:	3c 03       	j 80004bec <IfxVadc_setArbiterPriority+0x44>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c70:	76 64       	jz %d6,80004c78 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c72:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004c76:	3c 03       	j 80004c7c <IfxVadc_setArbiterPriority+0x44>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
<<<<<<< HEAD
<<<<<<< HEAD
80004c44:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004c48:	59 47 04 00 	st.w [%a4]4,%d7
80004c4c:	00 90       	ret 
=======
80004be8:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004bec:	59 47 04 00 	st.w [%a4]4,%d7
80004bf0:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c78:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004c7c:	59 47 04 00 	st.w [%a4]4,%d7
80004c80:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
<<<<<<< HEAD
<<<<<<< HEAD
80004c4e:	19 44 04 00 	ld.w %d4,[%a4]4
80004c52:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004c56:	6c 41       	st.w [%a4]4,%d15
80004c58:	00 90       	ret 

80004c5a <IfxVadc_setScan>:
=======
80004bf2:	19 44 04 00 	ld.w %d4,[%a4]4
80004bf6:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004bfa:	6c 41       	st.w [%a4]4,%d15
80004bfc:	00 90       	ret 

80004bfe <IfxVadc_setScan>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c82:	19 44 04 00 	ld.w %d4,[%a4]4
80004c86:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004c8a:	6c 41       	st.w [%a4]4,%d15
80004c8c:	00 90       	ret 

80004c8e <IfxVadc_setScan>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80004c5a:	19 4f 28 20 	ld.w %d15,[%a4]168
80004c5e:	26 54       	and %d4,%d5
80004c60:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c64:	0f 4f a0 50 	or %d5,%d15,%d4
80004c68:	59 45 28 20 	st.w [%a4]168,%d5
80004c6c:	00 90       	ret 

80004c6e <IfxVadc_startupCalibration>:
=======
80004bfe:	19 4f 28 20 	ld.w %d15,[%a4]168
80004c02:	26 54       	and %d4,%d5
80004c04:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c08:	0f 4f a0 50 	or %d5,%d15,%d4
80004c0c:	59 45 28 20 	st.w [%a4]168,%d5
80004c10:	00 90       	ret 

80004c12 <IfxVadc_startupCalibration>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004c8e:	19 4f 28 20 	ld.w %d15,[%a4]168
80004c92:	26 54       	and %d4,%d5
80004c94:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c98:	0f 4f a0 50 	or %d5,%d15,%d4
80004c9c:	59 45 28 20 	st.w [%a4]168,%d5
80004ca0:	00 90       	ret 

80004ca2 <IfxVadc_startupCalibration>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
<<<<<<< HEAD
80004c6e:	3b f0 01 40 	mov %d4,31
=======
80004c12:	3b f0 01 40 	mov %d4,31
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ca2:	3b f0 01 40 	mov %d4,31
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004c72:	40 4f       	mov.aa %a15,%a4
=======
80004c16:	40 4f       	mov.aa %a15,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ca6:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
<<<<<<< HEAD
<<<<<<< HEAD
80004c74:	6d ff 52 fd 	call 80004718 <IfxVadc_enableAccess>
=======
80004c18:	6d ff 52 fd 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ca8:	6d ff 52 fd 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004c78:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c7c:	40 f4       	mov.aa %a4,%a15
80004c7e:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004c82:	3b f0 01 40 	mov %d4,31
80004c86:	59 ff 00 20 	st.w [%a15]128,%d15
80004c8a:	6d ff 2b fd 	call 800046e0 <IfxVadc_disableAccess>
=======
80004c1c:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c20:	40 f4       	mov.aa %a4,%a15
80004c22:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004c26:	3b f0 01 40 	mov %d4,31
80004c2a:	59 ff 00 20 	st.w [%a15]128,%d15
80004c2e:	6d ff 2b fd 	call 80004684 <IfxVadc_disableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cac:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004cb0:	40 f4       	mov.aa %a4,%a15
80004cb2:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004cb6:	3b f0 01 40 	mov %d4,31
80004cba:	59 ff 00 20 	st.w [%a15]128,%d15
80004cbe:	6d ff 2b fd 	call 80004714 <IfxVadc_disableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004c8e:	82 02       	mov %d2,0
=======
80004c32:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cc2:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80004c90:	82 0f       	mov %d15,0
80004c92:	a0 72       	mov.a %a2,7
=======
80004c34:	82 0f       	mov %d15,0
80004c36:	a0 72       	mov.a %a2,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cc4:	82 0f       	mov %d15,0
80004cc6:	a0 72       	mov.a %a2,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
<<<<<<< HEAD
<<<<<<< HEAD
80004c94:	8f a2 00 30 	sh %d3,%d2,10
80004c98:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004c9c:	c2 12       	add %d2,1
80004c9e:	19 33 40 20 	ld.w %d3,[%a3]1152
80004ca2:	37 03 61 3e 	extr.u %d3,%d3,28,1
=======
80004c38:	8f a2 00 30 	sh %d3,%d2,10
80004c3c:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004c40:	c2 12       	add %d2,1
80004c42:	19 33 40 20 	ld.w %d3,[%a3]1152
80004c46:	37 03 61 3e 	extr.u %d3,%d3,28,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cc8:	8f a2 00 30 	sh %d3,%d2,10
80004ccc:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004cd0:	c2 12       	add %d2,1
80004cd2:	19 33 40 20 	ld.w %d3,[%a3]1152
80004cd6:	37 03 61 3e 	extr.u %d3,%d3,28,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80004ca6:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
=======
80004c4a:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cda:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
<<<<<<< HEAD
<<<<<<< HEAD
80004caa:	fc 25       	loop %a2,80004c94 <IfxVadc_startupCalibration+0x26>
=======
80004c4e:	fc 25       	loop %a2,80004c38 <IfxVadc_startupCalibration+0x26>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cde:	fc 25       	loop %a2,80004cc8 <IfxVadc_startupCalibration+0x26>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
<<<<<<< HEAD
<<<<<<< HEAD
80004cac:	df 1f f1 7f 	jeq %d15,1,80004c8e <IfxVadc_startupCalibration+0x20>
=======
80004ce0:	df 1f f1 7f 	jeq %d15,1,80004cc2 <IfxVadc_startupCalibration+0x20>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80004ce4:	00 90       	ret 
	...

<<<<<<< HEAD
80004cb4 <IfxAsclin_disableModule>:
=======
80004c50:	df 1f f1 7f 	jeq %d15,1,80004c32 <IfxVadc_startupCalibration+0x20>
}
80004c54:	00 90       	ret 
	...

80004c58 <IfxAsclin_disableModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ce8 <IfxAsclin_disableModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004cb4:	40 4f       	mov.aa %a15,%a4
=======
80004ce8:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004cea:	6d 00 66 13 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
<<<<<<< HEAD
80004cba:	02 24       	mov %d4,%d2
=======
80004c58:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004c5a:	6d 00 66 13 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c5e:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cee:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80004cbc:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004cbe:	6d 00 62 12 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80004c60:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004c62:	6d 00 62 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004cf0:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004cf2:	6d 00 62 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004cc2:	48 02       	ld.w %d2,[%a15]0
=======
80004cf6:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004cf8:	02 f4       	mov %d4,%d15
80004cfa:	8f 12 40 21 	or %d2,%d2,1
80004cfe:	68 02       	st.w [%a15]0,%d2
80004d00:	1d 00 90 13 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80004cd0 <IfxAsclin_enableAscErrorFlags>:
=======
80004c66:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004c68:	02 f4       	mov %d4,%d15
80004c6a:	8f 12 40 21 	or %d2,%d2,1
80004c6e:	68 02       	st.w [%a15]0,%d2
80004c70:	1d 00 90 13 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004c74 <IfxAsclin_enableAscErrorFlags>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d04 <IfxAsclin_enableAscErrorFlags>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80004cd0:	7b 10 00 f0 	movh %d15,1
80004cd4:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004cd8:	19 4f 00 10 	ld.w %d15,[%a4]64
80004cdc:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004ce0:	a6 f4       	or %d4,%d15
80004ce2:	59 44 00 10 	st.w [%a4]64,%d4
=======
80004c74:	7b 10 00 f0 	movh %d15,1
80004c78:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004c7c:	19 4f 00 10 	ld.w %d15,[%a4]64
80004c80:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004c84:	a6 f4       	or %d4,%d15
80004c86:	59 44 00 10 	st.w [%a4]64,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d04:	7b 10 00 f0 	movh %d15,1
80004d08:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004d0c:	19 4f 00 10 	ld.w %d15,[%a4]64
80004d10:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004d14:	a6 f4       	or %d4,%d15
80004d16:	59 44 00 10 	st.w [%a4]64,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80004ce6:	7b 00 40 f0 	movh %d15,1024
80004cea:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004cee:	19 4f 00 10 	ld.w %d15,[%a4]64
80004cf2:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004cf6:	a6 f5       	or %d5,%d15
80004cf8:	59 45 00 10 	st.w [%a4]64,%d5
80004cfc:	00 90       	ret 

80004cfe <IfxAsclin_enableModule>:
=======
80004c8a:	7b 00 40 f0 	movh %d15,1024
80004c8e:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004c92:	19 4f 00 10 	ld.w %d15,[%a4]64
80004c96:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004c9a:	a6 f5       	or %d5,%d15
80004c9c:	59 45 00 10 	st.w [%a4]64,%d5
80004ca0:	00 90       	ret 

80004ca2 <IfxAsclin_enableModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d1a:	7b 00 40 f0 	movh %d15,1024
80004d1e:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004d22:	19 4f 00 10 	ld.w %d15,[%a4]64
80004d26:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004d2a:	a6 f5       	or %d5,%d15
80004d2c:	59 45 00 10 	st.w [%a4]64,%d5
80004d30:	00 90       	ret 

80004d32 <IfxAsclin_enableModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004cfe:	40 4f       	mov.aa %a15,%a4
=======
80004d32:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d34:	6d 00 41 13 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
<<<<<<< HEAD
80004d04:	02 24       	mov %d4,%d2
=======
80004ca2:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004ca4:	6d 00 41 13 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004ca8:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d38:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80004d06:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d08:	6d 00 3d 12 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80004caa:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004cac:	6d 00 3d 12 	call 80007126 <IfxScuWdt_clearCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d3a:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d3c:	6d 00 3d 12 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80004d0c:	48 02       	ld.w %d2,[%a15]0
=======
80004d40:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004d42:	02 f4       	mov %d4,%d15
80004d44:	8f 12 c0 21 	andn %d2,%d2,1
80004d48:	68 02       	st.w [%a15]0,%d2
80004d4a:	1d 00 6b 13 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80004d1a <IfxAsclin_getAddress>:
=======
80004cb0:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004cb2:	02 f4       	mov %d4,%d15
80004cb4:	8f 12 c0 21 	andn %d2,%d2,1
80004cb8:	68 02       	st.w [%a15]0,%d2
80004cba:	1d 00 6b 13 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004cbe <IfxAsclin_getAddress>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d4e <IfxAsclin_getAddress>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
<<<<<<< HEAD
<<<<<<< HEAD
80004d1a:	a0 02       	mov.a %a2,0
=======
80004cbe:	a0 02       	mov.a %a2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d4e:	a0 02       	mov.a %a2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
<<<<<<< HEAD
<<<<<<< HEAD
80004d1c:	ff 44 09 00 	jge %d4,4,80004d2e <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004d20:	91 00 00 f8 	movh.a %a15,32768
80004d24:	d9 ff a0 60 	lea %a15,[%a15]2464 <800009a0 <IfxAsclin_cfg_indexMap>>
80004d28:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004d2c:	c8 02       	ld.a %a2,[%a15]0
=======
80004cc0:	ff 44 09 00 	jge %d4,4,80004cd2 <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004cc4:	91 00 00 f8 	movh.a %a15,32768
80004cc8:	d9 ff bc 40 	lea %a15,[%a15]2364 <8000093c <IfxAsclin_cfg_indexMap>>
80004ccc:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004cd0:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d50:	ff 44 09 00 	jge %d4,4,80004d62 <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004d54:	91 00 00 f8 	movh.a %a15,32768
80004d58:	d9 ff b8 60 	lea %a15,[%a15]2488 <800009b8 <IfxAsclin_cfg_indexMap>>
80004d5c:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004d60:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        module = NULL_PTR;
    }

    return module;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004d2e:	00 90       	ret 

80004d30 <IfxAsclin_getFaFrequency>:
=======
80004cd2:	00 90       	ret 

80004cd4 <IfxAsclin_getFaFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d62:	00 90       	ret 

80004d64 <IfxAsclin_getFaFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80004d30:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004d34:	16 1f       	and %d15,31
=======
80004cd4:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004cd8:	16 1f       	and %d15,31
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d64:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004d68:	16 1f       	and %d15,31
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
<<<<<<< HEAD
<<<<<<< HEAD
80004d36:	c2 ff       	add %d15,-1
80004d38:	8b 0f a1 22 	ge.u %d2,%d15,16
80004d3c:	df 02 32 80 	jne %d2,0,80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d40:	91 00 00 f8 	movh.a %a15,32768
80004d44:	d9 ff cc 54 	lea %a15,[%a15]19788 <80004d4c <IfxAsclin_getFaFrequency+0x1c>>
80004d48:	90 ff       	addsc.a %a15,%a15,%d15,2
80004d4a:	dc 0f       	ji %a15
80004d4c:	1d 00 20 00 	j 80004d8c <IfxAsclin_getFaFrequency+0x5c>
80004d50:	1d 00 20 00 	j 80004d90 <IfxAsclin_getFaFrequency+0x60>
80004d54:	1d 00 26 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d58:	1d 00 1e 00 	j 80004d94 <IfxAsclin_getFaFrequency+0x64>
80004d5c:	1d 00 22 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d60:	1d 00 20 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d64:	1d 00 1e 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d68:	1d 00 18 00 	j 80004d98 <IfxAsclin_getFaFrequency+0x68>
80004d6c:	1d 00 1a 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d70:	1d 00 18 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d74:	1d 00 16 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d78:	1d 00 14 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d7c:	1d 00 12 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d80:	1d 00 10 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d84:	1d 00 0e 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d88:	1d 00 0a 00 	j 80004d9c <IfxAsclin_getFaFrequency+0x6c>
=======
80004cda:	c2 ff       	add %d15,-1
80004cdc:	8b 0f a1 22 	ge.u %d2,%d15,16
80004ce0:	df 02 32 80 	jne %d2,0,80004d44 <IfxAsclin_getFaFrequency+0x70>
80004ce4:	91 00 00 f8 	movh.a %a15,32768
80004ce8:	d9 ff f0 34 	lea %a15,[%a15]19696 <80004cf0 <IfxAsclin_getFaFrequency+0x1c>>
80004cec:	90 ff       	addsc.a %a15,%a15,%d15,2
80004cee:	dc 0f       	ji %a15
80004cf0:	1d 00 20 00 	j 80004d30 <IfxAsclin_getFaFrequency+0x5c>
80004cf4:	1d 00 20 00 	j 80004d34 <IfxAsclin_getFaFrequency+0x60>
80004cf8:	1d 00 26 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004cfc:	1d 00 1e 00 	j 80004d38 <IfxAsclin_getFaFrequency+0x64>
80004d00:	1d 00 22 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d04:	1d 00 20 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d08:	1d 00 1e 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d0c:	1d 00 18 00 	j 80004d3c <IfxAsclin_getFaFrequency+0x68>
80004d10:	1d 00 1a 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d14:	1d 00 18 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d18:	1d 00 16 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d1c:	1d 00 14 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d20:	1d 00 12 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d24:	1d 00 10 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d28:	1d 00 0e 00 	j 80004d44 <IfxAsclin_getFaFrequency+0x70>
80004d2c:	1d 00 0a 00 	j 80004d40 <IfxAsclin_getFaFrequency+0x6c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004d6a:	c2 ff       	add %d15,-1
80004d6c:	8b 0f a1 22 	ge.u %d2,%d15,16
80004d70:	df 02 32 80 	jne %d2,0,80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d74:	91 00 00 f8 	movh.a %a15,32768
80004d78:	d9 ff c0 64 	lea %a15,[%a15]19840 <80004d80 <IfxAsclin_getFaFrequency+0x1c>>
80004d7c:	90 ff       	addsc.a %a15,%a15,%d15,2
80004d7e:	dc 0f       	ji %a15
80004d80:	1d 00 20 00 	j 80004dc0 <IfxAsclin_getFaFrequency+0x5c>
80004d84:	1d 00 20 00 	j 80004dc4 <IfxAsclin_getFaFrequency+0x60>
80004d88:	1d 00 26 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d8c:	1d 00 1e 00 	j 80004dc8 <IfxAsclin_getFaFrequency+0x64>
80004d90:	1d 00 22 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d94:	1d 00 20 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d98:	1d 00 1e 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004d9c:	1d 00 18 00 	j 80004dcc <IfxAsclin_getFaFrequency+0x68>
80004da0:	1d 00 1a 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004da4:	1d 00 18 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004da8:	1d 00 16 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004dac:	1d 00 14 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004db0:	1d 00 12 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004db4:	1d 00 10 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004db8:	1d 00 0e 00 	j 80004dd4 <IfxAsclin_getFaFrequency+0x70>
80004dbc:	1d 00 0a 00 	j 80004dd0 <IfxAsclin_getFaFrequency+0x6c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80004d8c:	1d 00 37 0a 	j 800061fa <IfxScuCcu_getSpbFrequency>
=======
80004dc0:	1d 00 37 0a 	j 8000622e <IfxScuCcu_getSpbFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004dc4:	1d 00 a6 08 	j 80005f10 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004dc8:	1d 00 c3 08 	j 80005f4e <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004dcc:	1d 00 20 0a 	j 8000620c <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
<<<<<<< HEAD
80004d9c:	1d 00 0e 0a 	j 800061b8 <IfxScuCcu_getBaud1Frequency>
=======
80004d30:	1d 00 37 0a 	j 8000619e <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004d34:	1d 00 a6 08 	j 80005e80 <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004d38:	1d 00 c3 08 	j 80005ebe <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004d3c:	1d 00 20 0a 	j 8000617c <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004d40:	1d 00 0e 0a 	j 8000615c <IfxScuCcu_getBaud1Frequency>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004dd0:	1d 00 0e 0a 	j 800061ec <IfxScuCcu_getBaud1Frequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        frequency = 0.0;
        break;
    }

    return frequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004da0:	82 02       	mov %d2,0
80004da2:	00 90       	ret 

80004da4 <IfxAsclin_getIndex>:
=======
80004d44:	82 02       	mov %d2,0
80004d46:	00 90       	ret 

80004d48 <IfxAsclin_getIndex>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004dd4:	82 02       	mov %d2,0
80004dd6:	00 90       	ret 

80004dd8 <IfxAsclin_getIndex>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
<<<<<<< HEAD
<<<<<<< HEAD
80004da4:	91 00 00 38 	movh.a %a3,32768
=======
80004d48:	91 00 00 38 	movh.a %a3,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004dd8:	91 00 00 38 	movh.a %a3,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
<<<<<<< HEAD
<<<<<<< HEAD
80004da8:	82 0f       	mov %d15,0
=======
80004ddc:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004dde:	d9 33 b8 60 	lea %a3,[%a3]2488 <800009b8 <IfxAsclin_cfg_indexMap>>
80004de2:	a0 3f       	mov.a %a15,3
80004de4:	d0 32       	addsc.a %a2,%a3,%d15,3
80004de6:	d4 25       	ld.a %a5,[%a2]
80004de8:	7d 45 05 80 	jne.a %a5,%a4,80004df2 <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004dec:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
<<<<<<< HEAD
80004dbc:	00 90       	ret 
=======
80004d4c:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004d4e:	d9 33 bc 40 	lea %a3,[%a3]2364 <8000093c <IfxAsclin_cfg_indexMap>>
80004d52:	a0 3f       	mov.a %a15,3
80004d54:	d0 32       	addsc.a %a2,%a3,%d15,3
80004d56:	d4 25       	ld.a %a5,[%a2]
80004d58:	7d 45 05 80 	jne.a %a5,%a4,80004d62 <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004d5c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004d60:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004df0:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
<<<<<<< HEAD
<<<<<<< HEAD
80004dbe:	c2 1f       	add %d15,1
80004dc0:	fc f8       	loop %a15,80004db0 <IfxAsclin_getIndex+0xc>
=======
80004d62:	c2 1f       	add %d15,1
80004d64:	fc f8       	loop %a15,80004d54 <IfxAsclin_getIndex+0xc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004df2:	c2 1f       	add %d15,1
80004df4:	fc f8       	loop %a15,80004de4 <IfxAsclin_getIndex+0xc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
<<<<<<< HEAD
<<<<<<< HEAD
80004dc2:	82 f2       	mov %d2,-1
=======
80004d66:	82 f2       	mov %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004df6:	82 f2       	mov %d2,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        }
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004dc4:	00 90       	ret 

80004dc6 <IfxAsclin_getPdFrequency>:
=======
80004d68:	00 90       	ret 

80004d6a <IfxAsclin_getPdFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004df8:	00 90       	ret 

80004dfa <IfxAsclin_getPdFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004dc6:	40 4f       	mov.aa %a15,%a4
=======
80004dfa:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004dfc:	6d ff b4 ff 	call 80004d64 <IfxAsclin_getFaFrequency>
80004e00:	4c f5       	ld.w %d15,[%a15]20
80004e02:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004e06:	c2 1f       	add %d15,1
80004e08:	4b 0f 41 f1 	itof %d15,%d15
}
80004e0c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e10:	00 90       	ret 

<<<<<<< HEAD
80004dde <IfxAsclin_getOvsFrequency>:
=======
80004d6a:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004d6c:	6d ff b4 ff 	call 80004cd4 <IfxAsclin_getFaFrequency>
80004d70:	4c f5       	ld.w %d15,[%a15]20
80004d72:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004d76:	c2 1f       	add %d15,1
80004d78:	4b 0f 41 f1 	itof %d15,%d15
}
80004d7c:	4b f2 51 20 	div.f %d2,%d2,%d15
80004d80:	00 90       	ret 

80004d82 <IfxAsclin_getOvsFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e12 <IfxAsclin_getOvsFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004dde:	40 4f       	mov.aa %a15,%a4
=======
80004e12:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004e14:	6d ff f3 ff 	call 80004dfa <IfxAsclin_getPdFrequency>
80004e18:	48 83       	ld.w %d3,[%a15]32
80004e1a:	4c f8       	ld.w %d15,[%a15]32
80004e1c:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004e20:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004e24:	4b 03 41 31 	itof %d3,%d3
80004e28:	4b 0f 41 f1 	itof %d15,%d15
80004e2c:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004e30:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e34:	00 90       	ret 

<<<<<<< HEAD
80004e02 <IfxAsclin_getShiftFrequency>:
=======
80004d82:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004d84:	6d ff f3 ff 	call 80004d6a <IfxAsclin_getPdFrequency>
80004d88:	48 83       	ld.w %d3,[%a15]32
80004d8a:	4c f8       	ld.w %d15,[%a15]32
80004d8c:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004d90:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004d94:	4b 03 41 31 	itof %d3,%d3
80004d98:	4b 0f 41 f1 	itof %d15,%d15
80004d9c:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004da0:	4b f2 51 20 	div.f %d2,%d2,%d15
80004da4:	00 90       	ret 

80004da6 <IfxAsclin_getShiftFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e36 <IfxAsclin_getShiftFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004e02:	40 4f       	mov.aa %a15,%a4
=======
80004e36:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004e38:	6d ff ed ff 	call 80004e12 <IfxAsclin_getOvsFrequency>
80004e3c:	4c f5       	ld.w %d15,[%a15]20
80004e3e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004e42:	4b 0f 41 f1 	itof %d15,%d15
}
80004e46:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e4a:	00 90       	ret 

<<<<<<< HEAD
80004e18 <IfxAsclin_getSrcPointerEr>:
=======
80004da6:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004da8:	6d ff ed ff 	call 80004d82 <IfxAsclin_getOvsFrequency>
80004dac:	4c f5       	ld.w %d15,[%a15]20
80004dae:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004db2:	4b 0f 41 f1 	itof %d15,%d15
}
80004db6:	4b f2 51 20 	div.f %d2,%d2,%d15
80004dba:	00 90       	ret 

80004dbc <IfxAsclin_getSrcPointerEr>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e4c <IfxAsclin_getSrcPointerEr>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
<<<<<<< HEAD
<<<<<<< HEAD
80004e18:	6d ff c6 ff 	call 80004da4 <IfxAsclin_getIndex>
80004e1c:	53 c2 20 f0 	mul %d15,%d2,12
80004e20:	60 ff       	mov.a %a15,%d15
80004e22:	d9 f2 08 28 	lea %a2,[%a15]-32632
=======
80004e4c:	6d ff c6 ff 	call 80004dd8 <IfxAsclin_getIndex>
80004e50:	53 c2 20 f0 	mul %d15,%d2,12
80004e54:	60 ff       	mov.a %a15,%d15
80004e56:	d9 f2 08 28 	lea %a2,[%a15]-32632
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80004e5a:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e5e:	00 90       	ret 

<<<<<<< HEAD
80004e2c <IfxAsclin_getSrcPointerRx>:
=======
80004dbc:	6d ff c6 ff 	call 80004d48 <IfxAsclin_getIndex>
80004dc0:	53 c2 20 f0 	mul %d15,%d2,12
80004dc4:	60 ff       	mov.a %a15,%d15
80004dc6:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004dca:	11 42 00 2f 	addih.a %a2,%a2,61444
80004dce:	00 90       	ret 

80004dd0 <IfxAsclin_getSrcPointerRx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e60 <IfxAsclin_getSrcPointerRx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
<<<<<<< HEAD
<<<<<<< HEAD
80004e2c:	6d ff bc ff 	call 80004da4 <IfxAsclin_getIndex>
80004e30:	53 c2 20 f0 	mul %d15,%d2,12
80004e34:	60 ff       	mov.a %a15,%d15
80004e36:	d9 f2 04 28 	lea %a2,[%a15]-32636
=======
80004e60:	6d ff bc ff 	call 80004dd8 <IfxAsclin_getIndex>
80004e64:	53 c2 20 f0 	mul %d15,%d2,12
80004e68:	60 ff       	mov.a %a15,%d15
80004e6a:	d9 f2 04 28 	lea %a2,[%a15]-32636
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80004e6e:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e72:	00 90       	ret 

<<<<<<< HEAD
80004e40 <IfxAsclin_getSrcPointerTx>:
=======
80004dd0:	6d ff bc ff 	call 80004d48 <IfxAsclin_getIndex>
80004dd4:	53 c2 20 f0 	mul %d15,%d2,12
80004dd8:	60 ff       	mov.a %a15,%d15
80004dda:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004dde:	11 42 00 2f 	addih.a %a2,%a2,61444
80004de2:	00 90       	ret 

80004de4 <IfxAsclin_getSrcPointerTx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e74 <IfxAsclin_getSrcPointerTx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
<<<<<<< HEAD
<<<<<<< HEAD
80004e40:	6d ff b2 ff 	call 80004da4 <IfxAsclin_getIndex>
80004e44:	53 c2 20 f0 	mul %d15,%d2,12
80004e48:	60 ff       	mov.a %a15,%d15
80004e4a:	d9 f2 00 28 	lea %a2,[%a15]-32640
=======
80004e74:	6d ff b2 ff 	call 80004dd8 <IfxAsclin_getIndex>
80004e78:	53 c2 20 f0 	mul %d15,%d2,12
80004e7c:	60 ff       	mov.a %a15,%d15
80004e7e:	d9 f2 00 28 	lea %a2,[%a15]-32640
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80004e82:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e86:	00 90       	ret 

<<<<<<< HEAD
80004e54 <IfxAsclin_read16>:
=======
80004de4:	6d ff b2 ff 	call 80004d48 <IfxAsclin_getIndex>
80004de8:	53 c2 20 f0 	mul %d15,%d2,12
80004dec:	60 ff       	mov.a %a15,%d15
80004dee:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004df2:	11 42 00 2f 	addih.a %a2,%a2,61444
80004df6:	00 90       	ret 

80004df8 <IfxAsclin_read16>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e88 <IfxAsclin_read16>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004e54:	9f 04 04 80 	jned %d4,0,80004e5c <IfxAsclin_read16+0x8>
=======
80004df8:	9f 04 04 80 	jned %d4,0,80004e00 <IfxAsclin_read16+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e88:	9f 04 04 80 	jned %d4,0,80004e90 <IfxAsclin_read16+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004e58:	82 02       	mov %d2,0
80004e5a:	00 90       	ret 
=======
80004dfc:	82 02       	mov %d2,0
80004dfe:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e8c:	82 02       	mov %d2,0
80004e8e:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
<<<<<<< HEAD
<<<<<<< HEAD
80004e5c:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e60:	ac 50       	st.h [%a5]0,%d15
80004e62:	b0 25       	add.a %a5,2
80004e64:	3c f8       	j 80004e54 <IfxAsclin_read16>

80004e66 <IfxAsclin_read32>:
=======
80004e00:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e04:	ac 50       	st.h [%a5]0,%d15
80004e06:	b0 25       	add.a %a5,2
80004e08:	3c f8       	j 80004df8 <IfxAsclin_read16>

80004e0a <IfxAsclin_read32>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e90:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e94:	ac 50       	st.h [%a5]0,%d15
80004e96:	b0 25       	add.a %a5,2
80004e98:	3c f8       	j 80004e88 <IfxAsclin_read16>

80004e9a <IfxAsclin_read32>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004e66:	9f 04 04 80 	jned %d4,0,80004e6e <IfxAsclin_read32+0x8>
=======
80004e0a:	9f 04 04 80 	jned %d4,0,80004e12 <IfxAsclin_read32+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e9a:	9f 04 04 80 	jned %d4,0,80004ea2 <IfxAsclin_read32+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        *data++ = rxData->U;
        count--;
    }

    return count;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004e6a:	82 02       	mov %d2,0
80004e6c:	00 90       	ret 
=======
80004e0e:	82 02       	mov %d2,0
80004e10:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004e9e:	82 02       	mov %d2,0
80004ea0:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
<<<<<<< HEAD
<<<<<<< HEAD
80004e6e:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e72:	6c 50       	st.w [%a5]0,%d15
80004e74:	b0 45       	add.a %a5,4
80004e76:	3c f8       	j 80004e66 <IfxAsclin_read32>

80004e78 <IfxAsclin_read8>:
=======
80004e12:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e16:	6c 50       	st.w [%a5]0,%d15
80004e18:	b0 45       	add.a %a5,4
80004e1a:	3c f8       	j 80004e0a <IfxAsclin_read32>

80004e1c <IfxAsclin_read8>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ea2:	19 4f 08 10 	ld.w %d15,[%a4]72
80004ea6:	6c 50       	st.w [%a5]0,%d15
80004ea8:	b0 45       	add.a %a5,4
80004eaa:	3c f8       	j 80004e9a <IfxAsclin_read32>

80004eac <IfxAsclin_read8>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004e78:	9f 04 04 80 	jned %d4,0,80004e80 <IfxAsclin_read8+0x8>
=======
80004e1c:	9f 04 04 80 	jned %d4,0,80004e24 <IfxAsclin_read8+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004eac:	9f 04 04 80 	jned %d4,0,80004eb4 <IfxAsclin_read8+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
<<<<<<< HEAD
<<<<<<< HEAD
80004e7c:	82 02       	mov %d2,0
80004e7e:	00 90       	ret 
=======
80004e20:	82 02       	mov %d2,0
80004e22:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004eb0:	82 02       	mov %d2,0
80004eb2:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
<<<<<<< HEAD
<<<<<<< HEAD
80004e80:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e84:	2c 50       	st.b [%a5]0,%d15
80004e86:	b0 15       	add.a %a5,1
80004e88:	3c f8       	j 80004e78 <IfxAsclin_read8>

80004e8a <IfxAsclin_resetModule>:
=======
80004e24:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e28:	2c 50       	st.b [%a5]0,%d15
80004e2a:	b0 15       	add.a %a5,1
80004e2c:	3c f8       	j 80004e1c <IfxAsclin_read8>

80004e2e <IfxAsclin_resetModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004eb4:	19 4f 08 10 	ld.w %d15,[%a4]72
80004eb8:	2c 50       	st.b [%a5]0,%d15
80004eba:	b0 15       	add.a %a5,1
80004ebc:	3c f8       	j 80004eac <IfxAsclin_read8>

80004ebe <IfxAsclin_resetModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004e8a:	40 4f       	mov.aa %a15,%a4
=======
80004ebe:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004ec0:	6d 00 7b 12 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80004e90:	02 24       	mov %d4,%d2
=======
80004e2e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e30:	6d 00 7b 12 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004e34:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ec4:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80004e92:	02 2f       	mov %d15,%d2
=======
80004ec6:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_clearCpuEndinit(passwd);
80004ec8:	6d 00 77 11 	call 800071b6 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004ecc:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
80004e9c:	02 f4       	mov %d4,%d15
=======
80004e36:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004e38:	6d 00 77 11 	call 80007126 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e3c:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004e40:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ed0:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
<<<<<<< HEAD
<<<<<<< HEAD
80004e9e:	8f 12 40 21 	or %d2,%d2,1
80004ea2:	59 f2 34 30 	st.w [%a15]244,%d2
=======
80004ed2:	8f 12 40 21 	or %d2,%d2,1
80004ed6:	59 f2 34 30 	st.w [%a15]244,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->KRST1.B.RST = 1;
80004eda:	19 f2 30 30 	ld.w %d2,[%a15]240
80004ede:	8f 12 40 21 	or %d2,%d2,1
80004ee2:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004ee6:	6d 00 9d 12 	call 80007420 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004eea:	19 f2 34 30 	ld.w %d2,[%a15]244
80004eee:	6f 12 fe 7f 	jz.t %d2,1,80004eea <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004ef2:	02 f4       	mov %d4,%d15
80004ef4:	6d 00 61 11 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004ef8:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
80004ec8:	02 f4       	mov %d4,%d15
=======
80004e42:	8f 12 40 21 	or %d2,%d2,1
80004e46:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004e4a:	19 f2 30 30 	ld.w %d2,[%a15]240
80004e4e:	8f 12 40 21 	or %d2,%d2,1
80004e52:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004e56:	6d 00 9d 12 	call 80007390 <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004e5a:	19 f2 34 30 	ld.w %d2,[%a15]244
80004e5e:	6f 12 fe 7f 	jz.t %d2,1,80004e5a <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004e62:	02 f4       	mov %d4,%d15
80004e64:	6d 00 61 11 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004e68:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004e6c:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004efc:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
<<<<<<< HEAD
<<<<<<< HEAD
80004eca:	8f 12 40 21 	or %d2,%d2,1
80004ece:	59 f2 2c 30 	st.w [%a15]236,%d2
=======
80004efe:	8f 12 40 21 	or %d2,%d2,1
80004f02:	59 f2 2c 30 	st.w [%a15]236,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_setCpuEndinit(passwd);
80004f06:	1d 00 8d 12 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80004ed6 <IfxAsclin_setClockSource>:
=======
80004e6e:	8f 12 40 21 	or %d2,%d2,1
80004e72:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004e76:	1d 00 8d 12 	j 80007390 <IfxScuWdt_setCpuEndinit>

80004e7a <IfxAsclin_setClockSource>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f0a <IfxAsclin_setClockSource>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
<<<<<<< HEAD
<<<<<<< HEAD
80004ed6:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004eda:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004ede:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004ee2:	f6 46       	jnz %d4,80004eee <IfxAsclin_setClockSource+0x18>
=======
80004e7a:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004e7e:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004e82:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004e86:	f6 46       	jnz %d4,80004e92 <IfxAsclin_setClockSource+0x18>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f0a:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004f0e:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004f12:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004f16:	f6 46       	jnz %d4,80004f22 <IfxAsclin_setClockSource+0x18>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
<<<<<<< HEAD
<<<<<<< HEAD
80004ee4:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004ee8:	bf 0f fe 7f 	jlt %d15,0,80004ee4 <IfxAsclin_setClockSource+0xe>
80004eec:	00 90       	ret 
80004eee:	19 4f 0c 10 	ld.w %d15,[%a4]76
=======
80004e88:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004e8c:	bf 0f fe 7f 	jlt %d15,0,80004e88 <IfxAsclin_setClockSource+0xe>
80004e90:	00 90       	ret 
80004e92:	19 4f 0c 10 	ld.w %d15,[%a4]76
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f18:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004f1c:	bf 0f fe 7f 	jlt %d15,0,80004f18 <IfxAsclin_setClockSource+0xe>
80004f20:	00 90       	ret 
80004f22:	19 4f 0c 10 	ld.w %d15,[%a4]76
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
<<<<<<< HEAD
<<<<<<< HEAD
80004ef2:	ff 0f fe 7f 	jge %d15,0,80004eee <IfxAsclin_setClockSource+0x18>
80004ef6:	00 90       	ret 

80004ef8 <IfxAsclin_setBaudrateBitFields>:
=======
80004e96:	ff 0f fe 7f 	jge %d15,0,80004e92 <IfxAsclin_setClockSource+0x18>
80004e9a:	00 90       	ret 

80004e9c <IfxAsclin_setBaudrateBitFields>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f26:	ff 0f fe 7f 	jge %d15,0,80004f22 <IfxAsclin_setClockSource+0x18>
80004f2a:	00 90       	ret 

80004f2c <IfxAsclin_setBaudrateBitFields>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80004ef8:	19 4f 0c 10 	ld.w %d15,[%a4]76
=======
80004e9c:	19 4f 0c 10 	ld.w %d15,[%a4]76
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f2c:	19 4f 0c 10 	ld.w %d15,[%a4]76
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
<<<<<<< HEAD
<<<<<<< HEAD
80004efc:	19 42 0c 10 	ld.w %d2,[%a4]76
80004f00:	16 1f       	and %d15,31
80004f02:	8f f2 c1 21 	andn %d2,%d2,31
80004f06:	59 42 0c 10 	st.w [%a4]76,%d2
=======
80004ea0:	19 42 0c 10 	ld.w %d2,[%a4]76
80004ea4:	16 1f       	and %d15,31
80004ea6:	8f f2 c1 21 	andn %d2,%d2,31
80004eaa:	59 42 0c 10 	st.w [%a4]76,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f30:	19 42 0c 10 	ld.w %d2,[%a4]76
80004f34:	16 1f       	and %d15,31
80004f36:	8f f2 c1 21 	andn %d2,%d2,31
80004f3a:	59 42 0c 10 	st.w [%a4]76,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
<<<<<<< HEAD
<<<<<<< HEAD
80004f0a:	19 42 0c 10 	ld.w %d2,[%a4]76
=======
80004eae:	19 42 0c 10 	ld.w %d2,[%a4]76
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f3e:	19 42 0c 10 	ld.w %d2,[%a4]76
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
80004f0e:	bf 02 fe 7f 	jlt %d2,0,80004f0a <IfxAsclin_setBaudrateBitFields+0x12>
=======
80004eb2:	bf 02 fe 7f 	jlt %d2,0,80004eae <IfxAsclin_setBaudrateBitFields+0x12>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f42:	bf 02 fe 7f 	jlt %d2,0,80004f3e <IfxAsclin_setBaudrateBitFields+0x12>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004f12:	19 42 14 00 	ld.w %d2,[%a4]20
80004f16:	c2 f4       	add %d4,-1
80004f18:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004f1c:	59 44 14 00 	st.w [%a4]20,%d4
=======
80004eb6:	19 42 14 00 	ld.w %d2,[%a4]20
80004eba:	c2 f4       	add %d4,-1
80004ebc:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004ec0:	59 44 14 00 	st.w [%a4]20,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f46:	19 42 14 00 	ld.w %d2,[%a4]20
80004f4a:	c2 f4       	add %d4,-1
80004f4c:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004f50:	59 44 14 00 	st.w [%a4]20,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
<<<<<<< HEAD
<<<<<<< HEAD
80004f20:	19 42 20 00 	ld.w %d2,[%a4]32
=======
80004ec4:	19 42 20 00 	ld.w %d2,[%a4]32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f54:	19 42 20 00 	ld.w %d2,[%a4]32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
<<<<<<< HEAD
<<<<<<< HEAD
80004f24:	02 f4       	mov %d4,%d15
80004f26:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004f2a:	59 45 20 00 	st.w [%a4]32,%d5
=======
80004ec8:	02 f4       	mov %d4,%d15
80004eca:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004ece:	59 45 20 00 	st.w [%a4]32,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f58:	02 f4       	mov %d4,%d15
80004f5a:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004f5e:	59 45 20 00 	st.w [%a4]32,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
<<<<<<< HEAD
<<<<<<< HEAD
80004f2e:	19 42 20 00 	ld.w %d2,[%a4]32
80004f32:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004f36:	59 46 20 00 	st.w [%a4]32,%d6
=======
80004ed2:	19 42 20 00 	ld.w %d2,[%a4]32
80004ed6:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004eda:	59 46 20 00 	st.w [%a4]32,%d6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f62:	19 42 20 00 	ld.w %d2,[%a4]32
80004f66:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004f6a:	59 46 20 00 	st.w [%a4]32,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
<<<<<<< HEAD
<<<<<<< HEAD
80004f3a:	19 42 14 00 	ld.w %d2,[%a4]20
80004f3e:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004f42:	59 47 14 00 	st.w [%a4]20,%d7
80004f46:	1d ff c8 ff 	j 80004ed6 <IfxAsclin_setClockSource>

80004f4a <IfxAsclin_setBitTiming>:
=======
80004ede:	19 42 14 00 	ld.w %d2,[%a4]20
80004ee2:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004ee6:	59 47 14 00 	st.w [%a4]20,%d7
80004eea:	1d ff c8 ff 	j 80004e7a <IfxAsclin_setClockSource>

80004eee <IfxAsclin_setBitTiming>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f6e:	19 42 14 00 	ld.w %d2,[%a4]20
80004f72:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004f76:	59 47 14 00 	st.w [%a4]20,%d7
80004f7a:	1d ff c8 ff 	j 80004f0a <IfxAsclin_setClockSource>

80004f7e <IfxAsclin_setBitTiming>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80004f4a:	19 42 0c 10 	ld.w %d2,[%a4]76
=======
80004eee:	19 42 0c 10 	ld.w %d2,[%a4]76
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f7e:	19 42 0c 10 	ld.w %d2,[%a4]76
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
<<<<<<< HEAD
<<<<<<< HEAD
80004f4e:	20 08       	sub.a %sp,8
80004f50:	8f f2 01 21 	and %d2,%d2,31
80004f54:	02 5f       	mov %d15,%d5
80004f56:	40 4f       	mov.aa %a15,%a4
80004f58:	02 48       	mov %d8,%d4
80004f5a:	02 6a       	mov %d10,%d6
80004f5c:	60 7d       	mov.a %a13,%d7
80004f5e:	60 2c       	mov.a %a12,%d2
=======
80004ef2:	20 08       	sub.a %sp,8
80004ef4:	8f f2 01 21 	and %d2,%d2,31
80004ef8:	02 5f       	mov %d15,%d5
80004efa:	40 4f       	mov.aa %a15,%a4
80004efc:	02 48       	mov %d8,%d4
80004efe:	02 6a       	mov %d10,%d6
80004f00:	60 7d       	mov.a %a13,%d7
80004f02:	60 2c       	mov.a %a12,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f82:	20 08       	sub.a %sp,8
80004f84:	8f f2 01 21 	and %d2,%d2,31
80004f88:	02 5f       	mov %d15,%d5
80004f8a:	40 4f       	mov.aa %a15,%a4
80004f8c:	02 48       	mov %d8,%d4
80004f8e:	02 6a       	mov %d10,%d6
80004f90:	60 7d       	mov.a %a13,%d7
80004f92:	60 2c       	mov.a %a12,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
<<<<<<< HEAD
<<<<<<< HEAD
80004f60:	6d ff 33 ff 	call 80004dc6 <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f64:	92 15       	add %d5,%d15,1
=======
80004f04:	6d ff 33 ff 	call 80004d6a <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f08:	92 15       	add %d5,%d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f94:	6d ff 33 ff 	call 80004dfa <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f98:	92 15       	add %d5,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
<<<<<<< HEAD
<<<<<<< HEAD
80004f66:	02 29       	mov %d9,%d2
=======
80004f0a:	02 29       	mov %d9,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004f9a:	02 29       	mov %d9,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
<<<<<<< HEAD
80004f68:	82 4f       	mov %d15,4
80004f6a:	0b f5 b0 f1 	max.u %d15,%d5,%d15
=======
80004f9c:	82 4f       	mov %d15,4
80004f9e:	0b f5 b0 f1 	max.u %d15,%d5,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004fa2:	8f ff 0f 21 	and %d2,%d15,255
80004fa6:	59 a2 04 00 	st.w [%sp]4,%d2
80004faa:	82 16       	mov %d6,1
80004fac:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004fb0:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
<<<<<<< HEAD
80004f7e:	4b 0f 41 31 	itof %d3,%d15
=======
80004f0c:	82 4f       	mov %d15,4
80004f0e:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f12:	8f ff 0f 21 	and %d2,%d15,255
80004f16:	59 a2 04 00 	st.w [%sp]4,%d2
80004f1a:	82 16       	mov %d6,1
80004f1c:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004f20:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004f22:	4b 0f 41 31 	itof %d3,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004fb2:	4b 0f 41 31 	itof %d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
<<<<<<< HEAD
<<<<<<< HEAD
80004f82:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004f86:	4b 38 41 f0 	mul.f %d15,%d8,%d3
=======
80004f26:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004f2a:	4b 38 41 f0 	mul.f %d15,%d8,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004fb6:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004fba:	4b 38 41 f0 	mul.f %d15,%d8,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
<<<<<<< HEAD
<<<<<<< HEAD
80004f8a:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f8c:	02 f4       	mov %d4,%d15
80004f8e:	6d 00 fb 2b 	call 8000a784 <__extendsfdf2>
80004f92:	7b 00 f5 73 	movh %d7,16208
80004f96:	0b 23 10 48 	mov %e4,%d3,%d2
80004f9a:	7b 20 2f 6d 	movh %d6,54002
80004f9e:	1b d7 24 76 	addi %d7,%d7,25165
80004fa2:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004fa6:	6d 00 12 2d 	call 8000a9ca <__muldf3>
80004faa:	0b 23 10 48 	mov %e4,%d3,%d2
=======
80004f2e:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f30:	02 f4       	mov %d4,%d15
80004f32:	6d 00 41 2b 	call 8000a5b4 <__extendsfdf2>
80004f36:	7b 00 f5 73 	movh %d7,16208
80004f3a:	0b 23 10 48 	mov %e4,%d3,%d2
80004f3e:	7b 20 2f 6d 	movh %d6,54002
80004f42:	1b d7 24 76 	addi %d7,%d7,25165
80004f46:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004f4a:	6d 00 58 2c 	call 8000a7fa <__muldf3>
80004f4e:	0b 23 10 48 	mov %e4,%d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004fbe:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004fc0:	02 f4       	mov %d4,%d15
80004fc2:	6d 00 57 2c 	call 8000a870 <__extendsfdf2>
80004fc6:	7b 00 f5 73 	movh %d7,16208
80004fca:	0b 23 10 48 	mov %e4,%d3,%d2
80004fce:	7b 20 2f 6d 	movh %d6,54002
80004fd2:	1b d7 24 76 	addi %d7,%d7,25165
80004fd6:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004fda:	6d 00 6e 2d 	call 8000aab6 <__muldf3>
80004fde:	0b 23 10 48 	mov %e4,%d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
<<<<<<< HEAD
<<<<<<< HEAD
80004fae:	82 1c       	mov %d12,1
=======
80004f52:	82 1c       	mov %d12,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004fe2:	82 1c       	mov %d12,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
<<<<<<< HEAD
<<<<<<< HEAD
80004fb0:	6d 00 9e 2e 	call 8000acec <__truncdfsf2>
=======
80004f54:	6d 00 e4 2d 	call 8000ab1c <__truncdfsf2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004fe4:	6d 00 fa 2e 	call 8000add8 <__truncdfsf2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
<<<<<<< HEAD
<<<<<<< HEAD
80004fb4:	4b f9 51 50 	div.f %d5,%d9,%d15
80004fb8:	91 00 00 20 	movh.a %a2,0
=======
80004f58:	4b f9 51 50 	div.f %d5,%d9,%d15
80004f5c:	91 00 00 20 	movh.a %a2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004fe8:	4b f9 51 50 	div.f %d5,%d9,%d15
80004fec:	91 00 00 20 	movh.a %a2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
<<<<<<< HEAD
<<<<<<< HEAD
80004fbc:	82 01       	mov %d1,0
=======
80004f60:	82 01       	mov %d1,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ff0:	82 01       	mov %d1,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
<<<<<<< HEAD
<<<<<<< HEAD
80004fbe:	4b 05 71 51 	ftouz %d5,%d5
=======
80004f62:	4b 05 71 51 	ftouz %d5,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ff2:	4b 05 71 51 	ftouz %d5,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
<<<<<<< HEAD
<<<<<<< HEAD
80004fc2:	4b 05 61 31 	utof %d3,%d5
80004fc6:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004fca:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004fce:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004fd2:	37 00 61 00 	extr.u %d0,%d0,0,1
80004fd6:	9b 03 00 48 	addih %d4,%d3,32768
80004fda:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
=======
80004f66:	4b 05 61 31 	utof %d3,%d5
80004f6a:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004f6e:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004f72:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004f76:	37 00 61 00 	extr.u %d0,%d0,0,1
80004f7a:	9b 03 00 48 	addih %d4,%d3,32768
80004f7e:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80004ff6:	4b 05 61 31 	utof %d3,%d5
80004ffa:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004ffe:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80005002:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80005006:	37 00 61 00 	extr.u %d0,%d0,0,1
8000500a:	9b 03 00 48 	addih %d4,%d3,32768
8000500e:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
<<<<<<< HEAD
<<<<<<< HEAD
80004fde:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004fe2:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004fe6:	df 00 45 80 	jne %d0,0,80005070 <IfxAsclin_setBitTiming+0x126>
80004fea:	8f 15 00 60 	sh %d6,%d5,1
=======
80004f82:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004f86:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004f8a:	df 00 45 80 	jne %d0,0,80005014 <IfxAsclin_setBitTiming+0x126>
80004f8e:	8f 15 00 60 	sh %d6,%d5,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005012:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005016:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000501a:	df 00 45 80 	jne %d0,0,800050a4 <IfxAsclin_setBitTiming+0x126>
8000501e:	8f 15 00 60 	sh %d6,%d5,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
<<<<<<< HEAD
<<<<<<< HEAD
80004fee:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004ff0:	82 0e       	mov %d14,0
=======
80004f92:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004f94:	82 0e       	mov %d14,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005022:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80005024:	82 0e       	mov %d14,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
<<<<<<< HEAD
<<<<<<< HEAD
80004ff2:	82 28       	mov %d8,2
80004ff4:	3b 00 00 71 	mov %d7,4096
80004ff8:	7f 76 3b 80 	jge.u %d6,%d7,8000506e <IfxAsclin_setBitTiming+0x124>
=======
80004f96:	82 28       	mov %d8,2
80004f98:	3b 00 00 71 	mov %d7,4096
80004f9c:	7f 76 3b 80 	jge.u %d6,%d7,80005012 <IfxAsclin_setBitTiming+0x124>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005026:	82 28       	mov %d8,2
80005028:	3b 00 00 71 	mov %d7,4096
8000502c:	7f 76 3b 80 	jge.u %d6,%d7,800050a2 <IfxAsclin_setBitTiming+0x124>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004ffc:	a0 13       	mov.a %a3,1
=======
80004fa0:	a0 13       	mov.a %a3,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005030:	a0 13       	mov.a %a3,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80004ffe:	82 1b       	mov %d11,1
=======
80004fa2:	82 1b       	mov %d11,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005032:	82 1b       	mov %d11,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
<<<<<<< HEAD
<<<<<<< HEAD
80005000:	df 28 09 00 	jeq %d8,2,80005012 <IfxAsclin_setBitTiming+0xc8>
=======
80004fa4:	df 28 09 00 	jeq %d8,2,80004fb6 <IfxAsclin_setBitTiming+0xc8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005034:	df 28 09 00 	jeq %d8,2,80005046 <IfxAsclin_setBitTiming+0xc8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
<<<<<<< HEAD
<<<<<<< HEAD
80005004:	73 8e 0a a0 	mul %d10,%d14,%d8
80005008:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
8000500c:	60 a3       	mov.a %a3,%d10
=======
80004fa8:	73 8e 0a a0 	mul %d10,%d14,%d8
80004fac:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80004fb0:	60 a3       	mov.a %a3,%d10
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005038:	73 8e 0a a0 	mul %d10,%d14,%d8
8000503c:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80005040:	60 a3       	mov.a %a3,%d10
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
<<<<<<< HEAD
<<<<<<< HEAD
8000500e:	02 ab       	mov %d11,%d10
=======
80005042:	02 ab       	mov %d11,%d10
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            adder_facH = adder_facL + 1;
80005044:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80005046:	80 34       	mov.d %d4,%a3
80005048:	3f b4 25 80 	jlt.u %d4,%d11,80005092 <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
8000504c:	4b 08 61 01 	utof %d0,%d8
80005050:	0b 6b 00 40 	add %d4,%d11,%d6
80005054:	4b 04 61 d1 	utof %d13,%d4
80005058:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
<<<<<<< HEAD
80005028:	80 2a       	mov.d %d10,%a2
=======
80004fb2:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80004fb4:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004fb6:	80 34       	mov.d %d4,%a3
80004fb8:	3f b4 25 80 	jlt.u %d4,%d11,80005002 <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80004fbc:	4b 08 61 01 	utof %d0,%d8
80004fc0:	0b 6b 00 40 	add %d4,%d11,%d6
80004fc4:	4b 04 61 d1 	utof %d13,%d4
80004fc8:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80004fcc:	80 2a       	mov.d %d10,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000505c:	80 2a       	mov.d %d10,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
<<<<<<< HEAD
<<<<<<< HEAD
8000502a:	4b d0 51 00 	div.f %d0,%d0,%d13
=======
8000505e:	4b d0 51 00 	div.f %d0,%d0,%d13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            newRelError = __absf(fOvs - f);
80005062:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80005066:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
8000506a:	37 0d 61 d0 	extr.u %d13,%d13,0,1
8000506e:	9b 00 00 a8 	addih %d10,%d0,32768
80005072:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
<<<<<<< HEAD
80005042:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80005046:	37 0d 61 d1 	extr.u %d13,%d13,2,1
8000504a:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
8000504e:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80005052:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80005056:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
=======
80004fce:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80004fd2:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80004fd6:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80004fda:	37 0d 61 d0 	extr.u %d13,%d13,0,1
80004fde:	9b 00 00 a8 	addih %d10,%d0,32768
80004fe2:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80004fe6:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80004fea:	37 0d 61 d1 	extr.u %d13,%d13,2,1
80004fee:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80004ff2:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80004ff6:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80004ffa:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005076:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
8000507a:	37 0d 61 d1 	extr.u %d13,%d13,2,1
8000507e:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80005082:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80005086:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
8000508a:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
<<<<<<< HEAD
<<<<<<< HEAD
8000505a:	c2 1b       	add %d11,1
8000505c:	3c db       	j 80005012 <IfxAsclin_setBitTiming+0xc8>
=======
80004ffe:	c2 1b       	add %d11,1
80005000:	3c db       	j 80004fb6 <IfxAsclin_setBitTiming+0xc8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000508e:	c2 1b       	add %d11,1
80005090:	3c db       	j 80005046 <IfxAsclin_setBitTiming+0xc8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
<<<<<<< HEAD
<<<<<<< HEAD
8000505e:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005062:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80005066:	f6 04       	jnz %d0,8000506e <IfxAsclin_setBitTiming+0x124>
=======
80005002:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005006:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000500a:	f6 04       	jnz %d0,80005012 <IfxAsclin_setBitTiming+0x124>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005092:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005096:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
8000509a:	f6 04       	jnz %d0,800050a2 <IfxAsclin_setBitTiming+0x124>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
<<<<<<< HEAD
<<<<<<< HEAD
80005068:	c2 18       	add %d8,1
8000506a:	42 56       	add %d6,%d5
8000506c:	3c c6       	j 80004ff8 <IfxAsclin_setBitTiming+0xae>
8000506e:	02 15       	mov %d5,%d1
=======
8000500c:	c2 18       	add %d8,1
8000500e:	42 56       	add %d6,%d5
80005010:	3c c6       	j 80004f9c <IfxAsclin_setBitTiming+0xae>
80005012:	02 15       	mov %d5,%d1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000509c:	c2 18       	add %d8,1
8000509e:	42 56       	add %d6,%d5
800050a0:	3c c6       	j 8000502c <IfxAsclin_setBitTiming+0xae>
800050a2:	02 15       	mov %d5,%d1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
<<<<<<< HEAD
<<<<<<< HEAD
80005070:	19 f3 0c 10 	ld.w %d3,[%a15]76
80005074:	8f f3 c1 31 	andn %d3,%d3,31
80005078:	59 f3 0c 10 	st.w [%a15]76,%d3
=======
80005014:	19 f3 0c 10 	ld.w %d3,[%a15]76
80005018:	8f f3 c1 31 	andn %d3,%d3,31
8000501c:	59 f3 0c 10 	st.w [%a15]76,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050a4:	19 f3 0c 10 	ld.w %d3,[%a15]76
800050a8:	8f f3 c1 31 	andn %d3,%d3,31
800050ac:	59 f3 0c 10 	st.w [%a15]76,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
<<<<<<< HEAD
<<<<<<< HEAD
8000507c:	19 ff 0c 10 	ld.w %d15,[%a15]76
=======
80005020:	19 ff 0c 10 	ld.w %d15,[%a15]76
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050b0:	19 ff 0c 10 	ld.w %d15,[%a15]76
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
80005080:	bf 0f fe 7f 	jlt %d15,0,8000507c <IfxAsclin_setBitTiming+0x132>
=======
80005024:	bf 0f fe 7f 	jlt %d15,0,80005020 <IfxAsclin_setBitTiming+0x132>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050b4:	bf 0f fe 7f 	jlt %d15,0,800050b0 <IfxAsclin_setBitTiming+0x132>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
<<<<<<< HEAD
<<<<<<< HEAD
80005084:	4c f8       	ld.w %d15,[%a15]32
=======
80005028:	4c f8       	ld.w %d15,[%a15]32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050b8:	4c f8       	ld.w %d15,[%a15]32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005086:	19 a2 04 00 	ld.w %d2,[%sp]4
=======
8000502a:	19 a2 04 00 	ld.w %d2,[%sp]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050ba:	19 a2 04 00 	ld.w %d2,[%sp]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
<<<<<<< HEAD
<<<<<<< HEAD
8000508a:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
=======
8000502e:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050be:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
<<<<<<< HEAD
<<<<<<< HEAD
8000508e:	c2 f2       	add %d2,-1
=======
80005032:	c2 f2       	add %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050c2:	c2 f2       	add %d2,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
<<<<<<< HEAD
<<<<<<< HEAD
80005090:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80005092:	4c f8       	ld.w %d15,[%a15]32
=======
80005034:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80005036:	4c f8       	ld.w %d15,[%a15]32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050c4:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
800050c6:	4c f8       	ld.w %d15,[%a15]32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
<<<<<<< HEAD
<<<<<<< HEAD
80005094:	80 ea       	mov.d %d10,%a14
=======
80005038:	80 ea       	mov.d %d10,%a14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050c8:	80 ea       	mov.d %d10,%a14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
<<<<<<< HEAD
<<<<<<< HEAD
80005096:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
=======
8000503a:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050ca:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
<<<<<<< HEAD
<<<<<<< HEAD
8000509a:	80 c4       	mov.d %d4,%a12
=======
8000503e:	80 c4       	mov.d %d4,%a12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050ce:	80 c4       	mov.d %d4,%a12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
<<<<<<< HEAD
<<<<<<< HEAD
8000509c:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000509e:	4c f5       	ld.w %d15,[%a15]20
=======
80005040:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005042:	4c f5       	ld.w %d15,[%a15]20
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050d0:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050d2:	4c f5       	ld.w %d15,[%a15]20
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
<<<<<<< HEAD
<<<<<<< HEAD
800050a0:	40 f4       	mov.aa %a4,%a15
=======
80005044:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050d4:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
<<<<<<< HEAD
<<<<<<< HEAD
800050a2:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
800050a6:	68 52       	st.w [%a15]20,%d2
=======
800050d6:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
800050da:	68 52       	st.w [%a15]20,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050dc:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
<<<<<<< HEAD
800050aa:	80 d2       	mov.d %d2,%a13
=======
80005046:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
8000504a:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
8000504c:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000504e:	80 d2       	mov.d %d2,%a13
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050de:	80 d2       	mov.d %d2,%a13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
<<<<<<< HEAD
<<<<<<< HEAD
800050ac:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050b0:	7b 00 00 f8 	movh %d15,32768
=======
80005050:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80005054:	7b 00 00 f8 	movh %d15,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800050e0:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050e4:	7b 00 00 f8 	movh %d15,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
<<<<<<< HEAD
<<<<<<< HEAD
800050b4:	68 56       	st.w [%a15]20,%d6
=======
800050e8:	68 56       	st.w [%a15]20,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050ea:	ab 0f 80 72 	sel %d7,%d2,%d15,0
800050ee:	4c f5       	ld.w %d15,[%a15]20
800050f0:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
800050f4:	a6 7f       	or %d15,%d7
800050f6:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
800050f8:	6d ff 09 ff 	call 80004f0a <IfxAsclin_setClockSource>

    return TRUE;
}
800050fc:	82 12       	mov %d2,1
800050fe:	00 90       	ret 

<<<<<<< HEAD
800050cc <IfxAsclin_write16>:
=======
80005058:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
8000505a:	ab 0f 80 72 	sel %d7,%d2,%d15,0
8000505e:	4c f5       	ld.w %d15,[%a15]20
80005060:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80005064:	a6 7f       	or %d15,%d7
80005066:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80005068:	6d ff 09 ff 	call 80004e7a <IfxAsclin_setClockSource>

    return TRUE;
}
8000506c:	82 12       	mov %d2,1
8000506e:	00 90       	ret 

80005070 <IfxAsclin_write16>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005100 <IfxAsclin_write16>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
<<<<<<< HEAD
<<<<<<< HEAD
800050cc:	9f 04 04 80 	jned %d4,0,800050d4 <IfxAsclin_write16+0x8>
=======
80005070:	9f 04 04 80 	jned %d4,0,80005078 <IfxAsclin_write16+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005100:	9f 04 04 80 	jned %d4,0,80005108 <IfxAsclin_write16+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        txData->U = *data++;
        count--;
    }

    return count;
}
<<<<<<< HEAD
<<<<<<< HEAD
800050d0:	82 02       	mov %d2,0
800050d2:	00 90       	ret 
=======
80005074:	82 02       	mov %d2,0
80005076:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005104:	82 02       	mov %d2,0
80005106:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
<<<<<<< HEAD
<<<<<<< HEAD
800050d4:	b9 5f 00 00 	ld.hu %d15,[%a5]0
800050d8:	b0 25       	add.a %a5,2
800050da:	59 4f 04 10 	st.w [%a4]68,%d15
800050de:	3c f7       	j 800050cc <IfxAsclin_write16>

800050e0 <IfxAsclin_write32>:
=======
80005078:	b9 5f 00 00 	ld.hu %d15,[%a5]0
8000507c:	b0 25       	add.a %a5,2
8000507e:	59 4f 04 10 	st.w [%a4]68,%d15
80005082:	3c f7       	j 80005070 <IfxAsclin_write16>

80005084 <IfxAsclin_write32>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005108:	b9 5f 00 00 	ld.hu %d15,[%a5]0
8000510c:	b0 25       	add.a %a5,2
8000510e:	59 4f 04 10 	st.w [%a4]68,%d15
80005112:	3c f7       	j 80005100 <IfxAsclin_write16>

80005114 <IfxAsclin_write32>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
<<<<<<< HEAD
<<<<<<< HEAD
800050e0:	9f 04 04 80 	jned %d4,0,800050e8 <IfxAsclin_write32+0x8>
=======
80005084:	9f 04 04 80 	jned %d4,0,8000508c <IfxAsclin_write32+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005114:	9f 04 04 80 	jned %d4,0,8000511c <IfxAsclin_write32+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        txData->U = *data++;
        count--;
    }

    return count;
}
<<<<<<< HEAD
<<<<<<< HEAD
800050e4:	82 02       	mov %d2,0
800050e6:	00 90       	ret 
=======
80005088:	82 02       	mov %d2,0
8000508a:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005118:	82 02       	mov %d2,0
8000511a:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
<<<<<<< HEAD
<<<<<<< HEAD
800050e8:	4c 50       	ld.w %d15,[%a5]0
800050ea:	b0 45       	add.a %a5,4
800050ec:	59 4f 04 10 	st.w [%a4]68,%d15
800050f0:	3c f8       	j 800050e0 <IfxAsclin_write32>

800050f2 <IfxAsclin_write8>:
=======
8000508c:	4c 50       	ld.w %d15,[%a5]0
8000508e:	b0 45       	add.a %a5,4
80005090:	59 4f 04 10 	st.w [%a4]68,%d15
80005094:	3c f8       	j 80005084 <IfxAsclin_write32>

80005096 <IfxAsclin_write8>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000511c:	4c 50       	ld.w %d15,[%a5]0
8000511e:	b0 45       	add.a %a5,4
80005120:	59 4f 04 10 	st.w [%a4]68,%d15
80005124:	3c f8       	j 80005114 <IfxAsclin_write32>

80005126 <IfxAsclin_write8>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
<<<<<<< HEAD
<<<<<<< HEAD
800050f2:	9f 04 04 80 	jned %d4,0,800050fa <IfxAsclin_write8+0x8>
=======
80005096:	9f 04 04 80 	jned %d4,0,8000509e <IfxAsclin_write8+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005126:	9f 04 04 80 	jned %d4,0,8000512e <IfxAsclin_write8+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        count--;

    }

    return count;
}
<<<<<<< HEAD
<<<<<<< HEAD
800050f6:	82 02       	mov %d2,0
800050f8:	00 90       	ret 
=======
8000509a:	82 02       	mov %d2,0
8000509c:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000512a:	82 02       	mov %d2,0
8000512c:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
<<<<<<< HEAD
<<<<<<< HEAD
800050fa:	0c 50       	ld.bu %d15,[%a5]0
800050fc:	b0 15       	add.a %a5,1
800050fe:	59 4f 04 10 	st.w [%a4]68,%d15
80005102:	3c f8       	j 800050f2 <IfxAsclin_write8>

80005104 <IfxAsclin_Asc_getReadCount>:
=======
8000509e:	0c 50       	ld.bu %d15,[%a5]0
800050a0:	b0 15       	add.a %a5,1
800050a2:	59 4f 04 10 	st.w [%a4]68,%d15
800050a6:	3c f8       	j 80005096 <IfxAsclin_write8>

800050a8 <IfxAsclin_Asc_getReadCount>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000512e:	0c 50       	ld.bu %d15,[%a5]0
80005130:	b0 15       	add.a %a5,1
80005132:	59 4f 04 10 	st.w [%a4]68,%d15
80005136:	3c f8       	j 80005126 <IfxAsclin_write8>

80005138 <IfxAsclin_Asc_getReadCount>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
<<<<<<< HEAD
<<<<<<< HEAD
80005104:	cc 42       	ld.a %a15,[%a4]8
=======
800050a8:	cc 42       	ld.a %a15,[%a4]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005138:	cc 42       	ld.a %a15,[%a4]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
<<<<<<< HEAD
<<<<<<< HEAD
80005106:	88 22       	ld.h %d2,[%a15]4
80005108:	00 90       	ret 

8000510a <IfxAsclin_Asc_getReadEvent>:
=======
800050aa:	88 22       	ld.h %d2,[%a15]4
800050ac:	00 90       	ret 

800050ae <IfxAsclin_Asc_getReadEvent>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000513a:	88 22       	ld.h %d2,[%a15]4
8000513c:	00 90       	ret 

8000513e <IfxAsclin_Asc_getReadEvent>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
<<<<<<< HEAD
<<<<<<< HEAD
8000510a:	99 42 08 00 	ld.a %a2,[%a4]8
=======
8000513e:	99 42 08 00 	ld.a %a2,[%a4]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80005142:	d9 22 1d 00 	lea %a2,[%a2]29
80005146:	00 90       	ret 

<<<<<<< HEAD
80005114 <IfxAsclin_Asc_getSendCount>:
=======
800050ae:	99 42 08 00 	ld.a %a2,[%a4]8
}
800050b2:	d9 22 1d 00 	lea %a2,[%a2]29
800050b6:	00 90       	ret 

800050b8 <IfxAsclin_Asc_getSendCount>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005148 <IfxAsclin_Asc_getSendCount>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
<<<<<<< HEAD
<<<<<<< HEAD
80005114:	19 42 10 00 	ld.w %d2,[%a4]16
=======
80005148:	19 42 10 00 	ld.w %d2,[%a4]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
8000514c:	00 90       	ret 

<<<<<<< HEAD
8000511a <IfxAsclin_Asc_getTxTimeStamp>:
=======
800050b8:	19 42 10 00 	ld.w %d2,[%a4]16
}
800050bc:	00 90       	ret 

800050be <IfxAsclin_Asc_getTxTimeStamp>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000514e <IfxAsclin_Asc_getTxTimeStamp>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
<<<<<<< HEAD
<<<<<<< HEAD
8000511a:	09 42 54 09 	ld.d %e2,[%a4]20
=======
8000514e:	09 42 54 09 	ld.d %e2,[%a4]20
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80005152:	00 90       	ret 

<<<<<<< HEAD
80005120 <IfxAsclin_Asc_getWriteCount>:
=======
800050be:	09 42 54 09 	ld.d %e2,[%a4]20
}
800050c2:	00 90       	ret 

800050c4 <IfxAsclin_Asc_getWriteCount>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005154 <IfxAsclin_Asc_getWriteCount>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
<<<<<<< HEAD
<<<<<<< HEAD
80005120:	cc 41       	ld.a %a15,[%a4]4
=======
800050c4:	cc 41       	ld.a %a15,[%a4]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005154:	cc 41       	ld.a %a15,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
<<<<<<< HEAD
<<<<<<< HEAD
80005122:	88 c2       	ld.h %d2,[%a15]24
80005124:	8c f2       	ld.h %d15,[%a15]4
80005126:	a2 f2       	sub %d2,%d15
=======
80005156:	88 c2       	ld.h %d2,[%a15]24
80005158:	8c f2       	ld.h %d15,[%a15]4
8000515a:	a2 f2       	sub %d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
8000515c:	37 02 50 20 	extr %d2,%d2,0,16
80005160:	00 90       	ret 

<<<<<<< HEAD
8000512e <IfxAsclin_Asc_getWriteEvent>:
=======
800050c6:	88 c2       	ld.h %d2,[%a15]24
800050c8:	8c f2       	ld.h %d15,[%a15]4
800050ca:	a2 f2       	sub %d2,%d15
}
800050cc:	37 02 50 20 	extr %d2,%d2,0,16
800050d0:	00 90       	ret 

800050d2 <IfxAsclin_Asc_getWriteEvent>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005162 <IfxAsclin_Asc_getWriteEvent>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
<<<<<<< HEAD
<<<<<<< HEAD
8000512e:	99 42 04 00 	ld.a %a2,[%a4]4
=======
80005162:	99 42 04 00 	ld.a %a2,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80005166:	d9 22 1d 00 	lea %a2,[%a2]29
8000516a:	00 90       	ret 

<<<<<<< HEAD
80005138 <IfxAsclin_Asc_isrError>:
=======
800050d2:	99 42 04 00 	ld.a %a2,[%a4]4
}
800050d6:	d9 22 1d 00 	lea %a2,[%a2]29
800050da:	00 90       	ret 

800050dc <IfxAsclin_Asc_isrError>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000516c <IfxAsclin_Asc_isrError>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
<<<<<<< HEAD
<<<<<<< HEAD
80005138:	cc 40       	ld.a %a15,[%a4]0
=======
800050dc:	cc 40       	ld.a %a15,[%a4]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000516c:	cc 40       	ld.a %a15,[%a4]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
<<<<<<< HEAD
<<<<<<< HEAD
8000513a:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
8000513c:	ef 0f 0a 00 	jz.t %d15,16,80005150 <IfxAsclin_Asc_isrError+0x18>
=======
800050de:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
800050e0:	ef 0f 0a 00 	jz.t %d15,16,800050f4 <IfxAsclin_Asc_isrError+0x18>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000516e:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
80005170:	ef 0f 0a 00 	jz.t %d15,16,80005184 <IfxAsclin_Asc_isrError+0x18>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005140:	4c ff       	ld.w %d15,[%a15]60
80005142:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005146:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
80005148:	0c 4e       	ld.bu %d15,[%a4]14
8000514a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
8000514e:	2c 4e       	st.b [%a4]14,%d15
=======
800050e4:	4c ff       	ld.w %d15,[%a15]60
800050e6:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800050ea:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
800050ec:	0c 4e       	ld.bu %d15,[%a4]14
800050ee:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
800050f2:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005174:	4c ff       	ld.w %d15,[%a15]60
80005176:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000517a:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
8000517c:	0c 4e       	ld.bu %d15,[%a4]14
8000517e:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
80005182:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
<<<<<<< HEAD
<<<<<<< HEAD
80005150:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80005152:	ef 2f 0a 00 	jz.t %d15,18,80005166 <IfxAsclin_Asc_isrError+0x2e>
=======
800050f4:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
800050f6:	ef 2f 0a 00 	jz.t %d15,18,8000510a <IfxAsclin_Asc_isrError+0x2e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005184:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80005186:	ef 2f 0a 00 	jz.t %d15,18,8000519a <IfxAsclin_Asc_isrError+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005156:	4c ff       	ld.w %d15,[%a15]60
80005158:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000515c:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
8000515e:	0c 4e       	ld.bu %d15,[%a4]14
80005160:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005164:	2c 4e       	st.b [%a4]14,%d15
=======
800050fa:	4c ff       	ld.w %d15,[%a15]60
800050fc:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005100:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80005102:	0c 4e       	ld.bu %d15,[%a4]14
80005104:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005108:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000518a:	4c ff       	ld.w %d15,[%a15]60
8000518c:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005190:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80005192:	0c 4e       	ld.bu %d15,[%a4]14
80005194:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005198:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
<<<<<<< HEAD
<<<<<<< HEAD
80005166:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
80005168:	ef af 0a 00 	jz.t %d15,26,8000517c <IfxAsclin_Asc_isrError+0x44>
=======
8000510a:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
8000510c:	ef af 0a 00 	jz.t %d15,26,80005120 <IfxAsclin_Asc_isrError+0x44>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000519a:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
8000519c:	ef af 0a 00 	jz.t %d15,26,800051b0 <IfxAsclin_Asc_isrError+0x44>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
8000516c:	4c ff       	ld.w %d15,[%a15]60
8000516e:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005172:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80005174:	0c 4e       	ld.bu %d15,[%a4]14
80005176:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000517a:	2c 4e       	st.b [%a4]14,%d15
=======
80005110:	4c ff       	ld.w %d15,[%a15]60
80005112:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005116:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80005118:	0c 4e       	ld.bu %d15,[%a4]14
8000511a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000511e:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051a0:	4c ff       	ld.w %d15,[%a15]60
800051a2:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
800051a6:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
800051a8:	0c 4e       	ld.bu %d15,[%a4]14
800051aa:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
800051ae:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
<<<<<<< HEAD
<<<<<<< HEAD
8000517c:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
8000517e:	ef bf 0a 00 	jz.t %d15,27,80005192 <IfxAsclin_Asc_isrError+0x5a>
=======
80005120:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
80005122:	ef bf 0a 00 	jz.t %d15,27,80005136 <IfxAsclin_Asc_isrError+0x5a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051b0:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
800051b2:	ef bf 0a 00 	jz.t %d15,27,800051c6 <IfxAsclin_Asc_isrError+0x5a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005182:	4c ff       	ld.w %d15,[%a15]60
80005184:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005188:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000518a:	0c 4e       	ld.bu %d15,[%a4]14
8000518c:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80005190:	2c 4e       	st.b [%a4]14,%d15
=======
80005126:	4c ff       	ld.w %d15,[%a15]60
80005128:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000512c:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000512e:	0c 4e       	ld.bu %d15,[%a4]14
80005130:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80005134:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051b6:	4c ff       	ld.w %d15,[%a15]60
800051b8:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
800051bc:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
800051be:	0c 4e       	ld.bu %d15,[%a4]14
800051c0:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
800051c4:	2c 4e       	st.b [%a4]14,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
<<<<<<< HEAD
<<<<<<< HEAD
80005192:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80005194:	ef ef 0a 00 	jz.t %d15,30,800051a8 <IfxAsclin_Asc_isrError+0x70>
=======
80005136:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80005138:	ef ef 0a 00 	jz.t %d15,30,8000514c <IfxAsclin_Asc_isrError+0x70>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051c6:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
800051c8:	ef ef 0a 00 	jz.t %d15,30,800051dc <IfxAsclin_Asc_isrError+0x70>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005198:	4c ff       	ld.w %d15,[%a15]60
8000519a:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000519e:	68 ff       	st.w [%a15]60,%d15
=======
800051cc:	4c ff       	ld.w %d15,[%a15]60
800051ce:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800051d2:	68 ff       	st.w [%a15]60,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
800051d4:	0c 4e       	ld.bu %d15,[%a4]14
800051d6:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
800051da:	2c 4e       	st.b [%a4]14,%d15
800051dc:	00 90       	ret 

<<<<<<< HEAD
800051aa <IfxAsclin_Asc_resetSendCount>:
=======
8000513c:	4c ff       	ld.w %d15,[%a15]60
8000513e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005142:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
80005144:	0c 4e       	ld.bu %d15,[%a4]14
80005146:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
8000514a:	2c 4e       	st.b [%a4]14,%d15
8000514c:	00 90       	ret 

8000514e <IfxAsclin_Asc_resetSendCount>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051de <IfxAsclin_Asc_resetSendCount>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800051aa:	82 0f       	mov %d15,0
800051ac:	6c 44       	st.w [%a4]16,%d15
800051ae:	00 90       	ret 

800051b0 <IfxAsclin_Asc_canReadCount>:
=======
8000514e:	82 0f       	mov %d15,0
80005150:	6c 44       	st.w [%a4]16,%d15
80005152:	00 90       	ret 

80005154 <IfxAsclin_Asc_canReadCount>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051de:	82 0f       	mov %d15,0
800051e0:	6c 44       	st.w [%a4]16,%d15
800051e2:	00 90       	ret 

800051e4 <IfxAsclin_Asc_canReadCount>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
<<<<<<< HEAD
<<<<<<< HEAD
800051b0:	99 44 08 00 	ld.a %a4,[%a4]8
800051b4:	1d 00 df 18 	j 80008372 <Ifx_Fifo_canReadCount>

800051b8 <IfxAsclin_Asc_flushTx>:
=======
80005154:	99 44 08 00 	ld.a %a4,[%a4]8
80005158:	1d 00 df 18 	j 80008316 <Ifx_Fifo_canReadCount>

8000515c <IfxAsclin_Asc_flushTx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051e4:	99 44 08 00 	ld.a %a4,[%a4]8
800051e8:	1d 00 df 18 	j 800083a6 <Ifx_Fifo_canReadCount>

800051ec <IfxAsclin_Asc_flushTx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
800051b8:	82 f2       	mov %d2,-1
800051ba:	06 f2       	sh %d2,-1
800051bc:	ba f4       	eq %d15,%d4,-1
800051be:	0b 52 00 f2 	and.eq %d15,%d2,%d5
=======
8000515c:	82 f2       	mov %d2,-1
8000515e:	06 f2       	sh %d2,-1
80005160:	ba f4       	eq %d15,%d4,-1
80005162:	0b 52 00 f2 	and.eq %d15,%d2,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051ec:	82 f2       	mov %d2,-1
800051ee:	06 f2       	sh %d2,-1
800051f0:	ba f4       	eq %d15,%d4,-1
800051f2:	0b 52 00 f2 	and.eq %d15,%d2,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
800051c2:	40 4f       	mov.aa %a15,%a4
800051c4:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
800051c6:	82 f9       	mov %d9,-1
800051c8:	02 28       	mov %d8,%d2
=======
80005166:	40 4f       	mov.aa %a15,%a4
80005168:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
8000516a:	82 f9       	mov %d9,-1
8000516c:	02 28       	mov %d8,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051f6:	40 4f       	mov.aa %a15,%a4
800051f8:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
800051fa:	82 f9       	mov %d9,-1
800051fc:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
800051ca:	ee 16       	jnz %d15,800051f6 <IfxAsclin_Asc_flushTx+0x3e>
=======
8000516e:	ee 16       	jnz %d15,8000519a <IfxAsclin_Asc_flushTx+0x3e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800051fe:	ee 16       	jnz %d15,8000522a <IfxAsclin_Asc_flushTx+0x3e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800051cc:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800051d0:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
80005170:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005174:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005200:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005204:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
800051d4:	0d 00 40 03 	disable 
=======
80005178:	0d 00 40 03 	disable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005208:	0d 00 40 03 	disable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
800051d8:	00 00       	nop 
=======
8000517c:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000520c:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800051da:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800051de:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
=======
8000517e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005182:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000520e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005212:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
800051e2:	02 39       	mov %d9,%d3
800051e4:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
=======
80005186:	02 39       	mov %d9,%d3
80005188:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005216:	02 39       	mov %d9,%d3
80005218:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800051e8:	76 23       	jz %d2,800051ee <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
800051ea:	0d 00 00 03 	enable 
=======
8000518c:	76 23       	jz %d2,80005192 <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000518e:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000521c:	76 23       	jz %d2,80005222 <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000521e:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
<<<<<<< HEAD
<<<<<<< HEAD
800051ee:	0b 69 40 90 	addx %d9,%d9,%d6
800051f2:	0b 58 50 80 	addc %d8,%d8,%d5
=======
80005192:	0b 69 40 90 	addx %d9,%d9,%d6
80005196:	0b 58 50 80 	addc %d8,%d8,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005222:	0b 69 40 90 	addx %d9,%d9,%d6
80005226:	0b 58 50 80 	addc %d8,%d8,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
<<<<<<< HEAD
<<<<<<< HEAD
800051f6:	c8 14       	ld.a %a4,[%a15]4
800051f8:	02 57       	mov %d7,%d5
800051fa:	c9 44 18 00 	ld.h %d4,[%a4]24
800051fe:	6d 00 fd 19 	call 800085f8 <Ifx_Fifo_canWriteCount>
=======
8000519a:	c8 14       	ld.a %a4,[%a15]4
8000519c:	02 57       	mov %d7,%d5
8000519e:	c9 44 18 00 	ld.h %d4,[%a4]24
800051a2:	6d 00 fd 19 	call 8000859c <Ifx_Fifo_canWriteCount>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000522a:	c8 14       	ld.a %a4,[%a15]4
8000522c:	02 57       	mov %d7,%d5
8000522e:	c9 44 18 00 	ld.h %d4,[%a4]24
80005232:	6d 00 fd 19 	call 8000862c <Ifx_Fifo_canWriteCount>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
80005202:	82 f4       	mov %d4,-1
80005204:	06 f4       	sh %d4,-1
=======
800051a6:	82 f4       	mov %d4,-1
800051a8:	06 f4       	sh %d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005236:	82 f4       	mov %d4,-1
80005238:	06 f4       	sh %d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
<<<<<<< HEAD
<<<<<<< HEAD
80005206:	f6 23       	jnz %d2,8000520c <IfxAsclin_Asc_flushTx+0x54>
=======
800051aa:	f6 23       	jnz %d2,800051b0 <IfxAsclin_Asc_flushTx+0x54>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000523a:	f6 23       	jnz %d2,80005240 <IfxAsclin_Asc_flushTx+0x54>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
80005208:	82 02       	mov %d2,0
8000520a:	00 90       	ret 
=======
800051ac:	82 02       	mov %d2,0
800051ae:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000523c:	82 02       	mov %d2,0
8000523e:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000520c:	c8 02       	ld.a %a2,[%a15]0
=======
800051b0:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005240:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
<<<<<<< HEAD
<<<<<<< HEAD
8000520e:	4c 23       	ld.w %d15,[%a2]12
80005210:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
80005214:	6e 1e       	jz %d15,80005250 <IfxAsclin_Asc_flushTx+0x98>
=======
800051b2:	4c 23       	ld.w %d15,[%a2]12
800051b4:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
800051b8:	6e 1e       	jz %d15,800051f4 <IfxAsclin_Asc_flushTx+0x98>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005242:	4c 23       	ld.w %d15,[%a2]12
80005244:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
80005248:	6e 1e       	jz %d15,80005284 <IfxAsclin_Asc_flushTx+0x98>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
80005216:	ba f9       	eq %d15,%d9,-1
80005218:	0b 84 00 f2 	and.eq %d15,%d4,%d8
8000521c:	ee f9       	jnz %d15,8000520e <IfxAsclin_Asc_flushTx+0x56>
=======
800051ba:	ba f9       	eq %d15,%d9,-1
800051bc:	0b 84 00 f2 	and.eq %d15,%d4,%d8
800051c0:	ee f9       	jnz %d15,800051b2 <IfxAsclin_Asc_flushTx+0x56>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000524a:	ba f9       	eq %d15,%d9,-1
8000524c:	0b 84 00 f2 	and.eq %d15,%d4,%d8
80005250:	ee f9       	jnz %d15,80005242 <IfxAsclin_Asc_flushTx+0x56>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000521e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005222:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
800051c2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800051c6:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005252:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005256:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
80005226:	0d 00 40 03 	disable 
8000522a:	00 00       	nop 
=======
800051ca:	0d 00 40 03 	disable 
800051ce:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000525a:	0d 00 40 03 	disable 
8000525e:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
8000522c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005230:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005234:	8f 03 40 31 	or %d3,%d3,0
=======
800051d0:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800051d4:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800051d8:	8f 03 40 31 	or %d3,%d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005260:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005264:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005268:	8f 03 40 31 	or %d3,%d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
80005238:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======
800051dc:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000526c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
8000523c:	76 23       	jz %d2,80005242 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
8000523e:	0d 00 00 03 	enable 
80005242:	0b 8f 00 21 	eq %d2,%d15,%d8
80005246:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
8000524a:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000524e:	3c dc       	j 80005206 <IfxAsclin_Asc_flushTx+0x4e>
80005250:	82 12       	mov %d2,1
=======
800051e0:	76 23       	jz %d2,800051e6 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
800051e2:	0d 00 00 03 	enable 
800051e6:	0b 8f 00 21 	eq %d2,%d15,%d8
800051ea:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
800051ee:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800051f2:	3c dc       	j 800051aa <IfxAsclin_Asc_flushTx+0x4e>
800051f4:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005270:	76 23       	jz %d2,80005276 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
80005272:	0d 00 00 03 	enable 
80005276:	0b 8f 00 21 	eq %d2,%d15,%d8
8000527a:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
8000527e:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80005282:	3c dc       	j 8000523a <IfxAsclin_Asc_flushTx+0x4e>
80005284:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005252:	00 90       	ret 

80005254 <IfxAsclin_Asc_canWriteCount>:
=======
800051f6:	00 90       	ret 

800051f8 <IfxAsclin_Asc_canWriteCount>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005286:	00 90       	ret 

80005288 <IfxAsclin_Asc_canWriteCount>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
<<<<<<< HEAD
<<<<<<< HEAD
80005254:	99 44 04 00 	ld.a %a4,[%a4]4
80005258:	1d 00 d0 19 	j 800085f8 <Ifx_Fifo_canWriteCount>

8000525c <IfxAsclin_Asc_clearRx>:
=======
800051f8:	99 44 04 00 	ld.a %a4,[%a4]4
800051fc:	1d 00 d0 19 	j 8000859c <Ifx_Fifo_canWriteCount>

80005200 <IfxAsclin_Asc_clearRx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005288:	99 44 04 00 	ld.a %a4,[%a4]4
8000528c:	1d 00 d0 19 	j 8000862c <Ifx_Fifo_canWriteCount>

80005290 <IfxAsclin_Asc_clearRx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
<<<<<<< HEAD
<<<<<<< HEAD
8000525c:	cc 40       	ld.a %a15,[%a4]0
=======
80005200:	cc 40       	ld.a %a15,[%a4]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005290:	cc 40       	ld.a %a15,[%a4]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
<<<<<<< HEAD
<<<<<<< HEAD
8000525e:	4c f4       	ld.w %d15,[%a15]16
80005260:	96 01       	or %d15,1
80005262:	68 4f       	st.w [%a15]16,%d15
=======
80005292:	4c f4       	ld.w %d15,[%a15]16
80005294:	96 01       	or %d15,1
80005296:	68 4f       	st.w [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_Fifo_clear(asclin->rx);
80005298:	99 44 08 00 	ld.a %a4,[%a4]8
8000529c:	1d 00 ad 19 	j 800085f6 <Ifx_Fifo_clear>

<<<<<<< HEAD
8000526c <IfxAsclin_Asc_clearTx>:
=======
80005202:	4c f4       	ld.w %d15,[%a15]16
80005204:	96 01       	or %d15,1
80005206:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005208:	99 44 08 00 	ld.a %a4,[%a4]8
8000520c:	1d 00 ad 19 	j 80008566 <Ifx_Fifo_clear>

80005210 <IfxAsclin_Asc_clearTx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052a0 <IfxAsclin_Asc_clearTx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000526c:	40 4f       	mov.aa %a15,%a4
=======
800052a0:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_Fifo_clear(asclin->tx);
800052a2:	99 44 04 00 	ld.a %a4,[%a4]4
800052a6:	6d 00 a8 19 	call 800085f6 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
<<<<<<< HEAD
80005276:	c8 0f       	ld.a %a15,[%a15]0
=======
80005210:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
80005212:	99 44 04 00 	ld.a %a4,[%a4]4
80005216:	6d 00 a8 19 	call 80008566 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
8000521a:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052aa:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005278:	4c f3       	ld.w %d15,[%a15]12
8000527a:	96 01       	or %d15,1
8000527c:	68 3f       	st.w [%a15]12,%d15
8000527e:	00 90       	ret 

80005280 <IfxAsclin_Asc_read>:
=======
8000521c:	4c f3       	ld.w %d15,[%a15]12
8000521e:	96 01       	or %d15,1
80005220:	68 3f       	st.w [%a15]12,%d15
80005222:	00 90       	ret 

80005224 <IfxAsclin_Asc_read>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052ac:	4c f3       	ld.w %d15,[%a15]12
800052ae:	96 01       	or %d15,1
800052b0:	68 3f       	st.w [%a15]12,%d15
800052b2:	00 90       	ret 

800052b4 <IfxAsclin_Asc_read>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
<<<<<<< HEAD
<<<<<<< HEAD
80005280:	99 44 08 00 	ld.a %a4,[%a4]8
=======
80005224:	99 44 08 00 	ld.a %a4,[%a4]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052b4:	99 44 08 00 	ld.a %a4,[%a4]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005284:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005288:	94 64       	ld.h %d4,[%a6]
=======
80005228:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000522c:	94 64       	ld.h %d4,[%a6]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052b8:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052bc:	94 64       	ld.h %d4,[%a6]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000528a:	40 6f       	mov.aa %a15,%a6
=======
800052be:	40 6f       	mov.aa %a15,%a6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800052c0:	6d 00 e0 18 	call 80008480 <Ifx_Fifo_read>

    *count -= left;
800052c4:	8c f0       	ld.h %d15,[%a15]0
800052c6:	a2 2f       	sub %d15,%d2
800052c8:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
800052ca:	8b 02 00 22 	eq %d2,%d2,0
800052ce:	00 90       	ret 

<<<<<<< HEAD
8000529c <IfxAsclin_Asc_isrTransmit>:
=======
8000522e:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005230:	6d 00 e0 18 	call 800083f0 <Ifx_Fifo_read>

    *count -= left;
80005234:	8c f0       	ld.h %d15,[%a15]0
80005236:	a2 2f       	sub %d15,%d2
80005238:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
8000523a:	8b 02 00 22 	eq %d2,%d2,0
8000523e:	00 90       	ret 

80005240 <IfxAsclin_Asc_isrTransmit>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052d0 <IfxAsclin_Asc_isrTransmit>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000529c:	20 18       	sub.a %sp,24
8000529e:	40 4f       	mov.aa %a15,%a4
=======
80005240:	20 18       	sub.a %sp,24
80005242:	40 4f       	mov.aa %a15,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052d0:	20 18       	sub.a %sp,24
800052d2:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800052a0:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800052a4:	37 04 e1 47 	extr.u %d4,%d4,15,1
=======
80005244:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005248:	37 04 e1 47 	extr.u %d4,%d4,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052d4:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800052d8:	37 04 e1 47 	extr.u %d4,%d4,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
800052a8:	0d 00 40 03 	disable 
800052ac:	00 00       	nop 
=======
8000524c:	0d 00 40 03 	disable 
80005250:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052dc:	0d 00 40 03 	disable 
800052e0:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800052ae:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800052b2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
=======
80005252:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005256:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052e2:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800052e6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
800052b6:	02 52       	mov %d2,%d5
800052b8:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
=======
8000525a:	02 52       	mov %d2,%d5
8000525c:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052ea:	02 52       	mov %d2,%d5
800052ec:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800052bc:	76 43       	jz %d4,800052c2 <IfxAsclin_Asc_isrTransmit+0x26>
=======
800052f0:	76 43       	jz %d4,800052f6 <IfxAsclin_Asc_isrTransmit+0x26>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        __enable();
800052f2:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
800052f6:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
<<<<<<< HEAD
800052c6:	c8 14       	ld.a %a4,[%a15]4
=======
80005260:	76 43       	jz %d4,80005266 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
80005262:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005266:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
8000526a:	c8 14       	ld.a %a4,[%a15]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052fa:	c8 14       	ld.a %a4,[%a15]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
<<<<<<< HEAD
<<<<<<< HEAD
800052c8:	4c f4       	ld.w %d15,[%a15]16
=======
8000526c:	4c f4       	ld.w %d15,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800052fc:	4c f4       	ld.w %d15,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
<<<<<<< HEAD
<<<<<<< HEAD
800052ca:	c9 44 04 00 	ld.h %d4,[%a4]4
800052ce:	c2 1f       	add %d15,1
800052d0:	68 4f       	st.w [%a15]16,%d15
=======
800052fe:	c9 44 04 00 	ld.h %d4,[%a4]4
80005302:	c2 1f       	add %d15,1
80005304:	68 4f       	st.w [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005306:	df 04 32 00 	jeq %d4,0,8000536a <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
<<<<<<< HEAD
800052d6:	0c ff       	ld.bu %d15,[%a15]15
800052d8:	6e 03       	jz %d15,800052de <IfxAsclin_Asc_isrTransmit+0x42>
800052da:	9e 1d       	jeq %d15,1,80005314 <IfxAsclin_Asc_isrTransmit+0x78>
800052dc:	00 90       	ret 
=======
8000526e:	c9 44 04 00 	ld.h %d4,[%a4]4
80005272:	c2 1f       	add %d15,1
80005274:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005276:	df 04 32 00 	jeq %d4,0,800052da <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
8000527a:	0c ff       	ld.bu %d15,[%a15]15
8000527c:	6e 03       	jz %d15,80005282 <IfxAsclin_Asc_isrTransmit+0x42>
8000527e:	9e 1d       	jeq %d15,1,800052b8 <IfxAsclin_Asc_isrTransmit+0x78>
80005280:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000530a:	0c ff       	ld.bu %d15,[%a15]15
8000530c:	6e 03       	jz %d15,80005312 <IfxAsclin_Asc_isrTransmit+0x42>
8000530e:	9e 1d       	jeq %d15,1,80005348 <IfxAsclin_Asc_isrTransmit+0x78>
80005310:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
<<<<<<< HEAD
<<<<<<< HEAD
800052de:	c8 02       	ld.a %a2,[%a15]0
=======
80005282:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005312:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800052e0:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
800052e2:	37 04 70 40 	extr.u %d4,%d4,0,16
=======
80005284:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005286:	37 04 70 40 	extr.u %d4,%d4,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005314:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005316:	37 04 70 40 	extr.u %d4,%d4,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
<<<<<<< HEAD
<<<<<<< HEAD
800052e6:	4c 23       	ld.w %d15,[%a2]12
=======
8000528a:	4c 23       	ld.w %d15,[%a2]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000531a:	4c 23       	ld.w %d15,[%a2]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
<<<<<<< HEAD
<<<<<<< HEAD
800052e8:	d2 06       	mov %e6,0
800052ea:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800052ee:	d9 a5 08 00 	lea %a5,[%sp]8
=======
8000528c:	d2 06       	mov %e6,0
8000528e:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005292:	d9 a5 08 00 	lea %a5,[%sp]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000531c:	d2 06       	mov %e6,0
8000531e:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005322:	d9 a5 08 00 	lea %a5,[%sp]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
<<<<<<< HEAD
<<<<<<< HEAD
800052f2:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
800052f4:	0c a7       	ld.bu %d15,[%sp]7
800052f6:	8b 0f 01 f1 	rsub %d15,%d15,16
800052fa:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800052fe:	0b 4f 90 f1 	min.u %d15,%d15,%d4
=======
80005296:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
80005298:	0c a7       	ld.bu %d15,[%sp]7
8000529a:	8b 0f 01 f1 	rsub %d15,%d15,16
8000529e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800052a2:	0b 4f 90 f1 	min.u %d15,%d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005326:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
80005328:	0c a7       	ld.bu %d15,[%sp]7
8000532a:	8b 0f 01 f1 	rsub %d15,%d15,16
8000532e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80005332:	0b 4f 90 f1 	min.u %d15,%d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
<<<<<<< HEAD
<<<<<<< HEAD
80005302:	37 0f 50 40 	extr %d4,%d15,0,16
80005306:	6d 00 a3 18 	call 8000844c <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
8000530a:	c8 04       	ld.a %a4,[%a15]0
8000530c:	d9 a5 08 00 	lea %a5,[%sp]8
80005310:	02 f4       	mov %d4,%d15
80005312:	3c 10       	j 80005332 <IfxAsclin_Asc_isrTransmit+0x96>
=======
800052a6:	37 0f 50 40 	extr %d4,%d15,0,16
800052aa:	6d 00 a3 18 	call 800083f0 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
800052ae:	c8 04       	ld.a %a4,[%a15]0
800052b0:	d9 a5 08 00 	lea %a5,[%sp]8
800052b4:	02 f4       	mov %d4,%d15
800052b6:	3c 10       	j 800052d6 <IfxAsclin_Asc_isrTransmit+0x96>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005336:	37 0f 50 40 	extr %d4,%d15,0,16
8000533a:	6d 00 a3 18 	call 80008480 <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
8000533e:	c8 04       	ld.a %a4,[%a15]0
80005340:	d9 a5 08 00 	lea %a5,[%sp]8
80005344:	02 f4       	mov %d4,%d15
80005346:	3c 10       	j 80005366 <IfxAsclin_Asc_isrTransmit+0x96>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
<<<<<<< HEAD
<<<<<<< HEAD
80005314:	d2 06       	mov %e6,0
80005316:	d9 a5 08 00 	lea %a5,[%sp]8
8000531a:	3b c0 00 40 	mov %d4,12
8000531e:	6d 00 97 18 	call 8000844c <Ifx_Fifo_read>
=======
80005348:	d2 06       	mov %e6,0
8000534a:	d9 a5 08 00 	lea %a5,[%sp]8
8000534e:	3b c0 00 40 	mov %d4,12
80005352:	6d 00 97 18 	call 80008480 <Ifx_Fifo_read>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

            ascData = packedData.data;
80005356:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
<<<<<<< HEAD
80005326:	c8 04       	ld.a %a4,[%a15]0
=======
800052b8:	d2 06       	mov %e6,0
800052ba:	d9 a5 08 00 	lea %a5,[%sp]8
800052be:	3b c0 00 40 	mov %d4,12
800052c2:	6d 00 97 18 	call 800083f0 <Ifx_Fifo_read>

            ascData = packedData.data;
800052c6:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052ca:	c8 04       	ld.a %a4,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000535a:	c8 04       	ld.a %a4,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
<<<<<<< HEAD
<<<<<<< HEAD
80005328:	d9 a5 18 00 	lea %a5,[%sp]24
8000532c:	89 5f 2f f4 	st.b [+%a5]-17,%d15
=======
8000535c:	d9 a5 18 00 	lea %a5,[%sp]24
80005360:	89 5f 2f f4 	st.b [+%a5]-17,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005364:	82 14       	mov %d4,1
        }
        break;
<<<<<<< HEAD
80005332:	1d ff e0 fe 	j 800050f2 <IfxAsclin_write8>
=======
800052cc:	d9 a5 18 00 	lea %a5,[%sp]24
800052d0:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800052d4:	82 14       	mov %d4,1
        }
        break;
800052d6:	1d ff e0 fe 	j 80005096 <IfxAsclin_write8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005366:	1d ff e0 fe 	j 80005126 <IfxAsclin_write8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80005336:	28 c4       	st.b [%a15]12,%d4
80005338:	00 90       	ret 

8000533a <IfxAsclin_Asc_isrReceive>:
=======
800052da:	28 c4       	st.b [%a15]12,%d4
800052dc:	00 90       	ret 

800052de <IfxAsclin_Asc_isrReceive>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000536a:	28 c4       	st.b [%a15]12,%d4
8000536c:	00 90       	ret 

8000536e <IfxAsclin_Asc_isrReceive>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
<<<<<<< HEAD
<<<<<<< HEAD
8000533a:	0c 4f       	ld.bu %d15,[%a4]15
=======
800052de:	0c 4f       	ld.bu %d15,[%a4]15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000536e:	0c 4f       	ld.bu %d15,[%a4]15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000533c:	20 20       	sub.a %sp,32
8000533e:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005340:	6e 34       	jz %d15,800053a8 <IfxAsclin_Asc_isrReceive+0x6e>
=======
800052e0:	20 20       	sub.a %sp,32
800052e2:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800052e4:	6e 34       	jz %d15,8000534c <IfxAsclin_Asc_isrReceive+0x6e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005370:	20 20       	sub.a %sp,32
80005372:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005374:	6e 34       	jz %d15,800053dc <IfxAsclin_Asc_isrReceive+0x6e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80005342:	82 18       	mov %d8,1
=======
800052e6:	82 18       	mov %d8,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005376:	82 18       	mov %d8,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
<<<<<<< HEAD
<<<<<<< HEAD
80005344:	df 1f 45 80 	jne %d15,1,800053ce <IfxAsclin_Asc_isrReceive+0x94>
=======
800052e8:	df 1f 45 80 	jne %d15,1,80005372 <IfxAsclin_Asc_isrReceive+0x94>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005378:	df 1f 45 80 	jne %d15,1,80005402 <IfxAsclin_Asc_isrReceive+0x94>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
<<<<<<< HEAD
<<<<<<< HEAD
80005348:	c8 02       	ld.a %a2,[%a15]0
=======
800052ec:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000537c:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
<<<<<<< HEAD
<<<<<<< HEAD
8000534a:	4c 24       	ld.w %d15,[%a2]16
8000534c:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005350:	6e 2b       	jz %d15,800053a6 <IfxAsclin_Asc_isrReceive+0x6c>
=======
800052ee:	4c 24       	ld.w %d15,[%a2]16
800052f0:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800052f4:	6e 2b       	jz %d15,8000534a <IfxAsclin_Asc_isrReceive+0x6c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000537e:	4c 24       	ld.w %d15,[%a2]16
80005380:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005384:	6e 2b       	jz %d15,800053da <IfxAsclin_Asc_isrReceive+0x6c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80005352:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80005356:	37 03 e1 37 	extr.u %d3,%d3,15,1
=======
800052f6:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800052fa:	37 03 e1 37 	extr.u %d3,%d3,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005386:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
8000538a:	37 03 e1 37 	extr.u %d3,%d3,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
8000535a:	0d 00 40 03 	disable 
8000535e:	00 00       	nop 
=======
800052fe:	0d 00 40 03 	disable 
80005302:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000538e:	0d 00 40 03 	disable 
80005392:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80005360:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005364:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005368:	8f 02 40 21 	or %d2,%d2,0
=======
80005304:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005308:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000530c:	8f 02 40 21 	or %d2,%d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005394:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005398:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000539c:	8f 02 40 21 	or %d2,%d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
8000536c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======
80005310:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800053a0:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
80005370:	76 33       	jz %d3,80005376 <IfxAsclin_Asc_isrReceive+0x3c>
=======
800053a4:	76 33       	jz %d3,800053aa <IfxAsclin_Asc_isrReceive+0x3c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        __enable();
800053a6:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
<<<<<<< HEAD
80005376:	c8 04       	ld.a %a4,[%a15]0
80005378:	d9 a5 10 00 	lea %a5,[%sp]16
8000537c:	82 14       	mov %d4,1
=======
80005314:	76 33       	jz %d3,8000531a <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
80005316:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
8000531a:	c8 04       	ld.a %a4,[%a15]0
8000531c:	d9 a5 10 00 	lea %a5,[%sp]16
80005320:	82 14       	mov %d4,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800053aa:	c8 04       	ld.a %a4,[%a15]0
800053ac:	d9 a5 10 00 	lea %a5,[%sp]16
800053b0:	82 14       	mov %d4,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
<<<<<<< HEAD
<<<<<<< HEAD
8000537e:	78 02       	st.w [%sp]8,%d15
80005380:	59 a2 04 00 	st.w [%sp]4,%d2
=======
800053b2:	78 02       	st.w [%sp]8,%d15
800053b4:	59 a2 04 00 	st.w [%sp]4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
800053b8:	6d ff 7a fd 	call 80004eac <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
<<<<<<< HEAD
80005388:	c8 24       	ld.a %a4,[%a15]8
=======
80005322:	78 02       	st.w [%sp]8,%d15
80005324:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005328:	6d ff 7a fd 	call 80004e1c <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000532c:	c8 24       	ld.a %a4,[%a15]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800053bc:	c8 24       	ld.a %a4,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
<<<<<<< HEAD
<<<<<<< HEAD
8000538a:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000538e:	d2 06       	mov %e6,0
80005390:	d9 a5 04 00 	lea %a5,[%sp]4
80005394:	3b c0 00 40 	mov %d4,12
=======
8000532e:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005332:	d2 06       	mov %e6,0
80005334:	d9 a5 04 00 	lea %a5,[%sp]4
80005338:	3b c0 00 40 	mov %d4,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800053be:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053c2:	d2 06       	mov %e6,0
800053c4:	d9 a5 04 00 	lea %a5,[%sp]4
800053c8:	3b c0 00 40 	mov %d4,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
<<<<<<< HEAD
<<<<<<< HEAD
80005398:	2c ac       	st.b [%sp]12,%d15
=======
800053cc:	2c ac       	st.b [%sp]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
800053ce:	6d 00 a7 19 	call 8000871c <Ifx_Fifo_write>
800053d2:	df 02 d5 7f 	jeq %d2,0,8000537c <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
<<<<<<< HEAD
800053a2:	28 d8       	st.b [%a15]13,%d8
800053a4:	3c d2       	j 80005348 <IfxAsclin_Asc_isrReceive+0xe>
800053a6:	00 90       	ret 
=======
8000533c:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000533e:	6d 00 a7 19 	call 8000868c <Ifx_Fifo_write>
80005342:	df 02 d5 7f 	jeq %d2,0,800052ec <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005346:	28 d8       	st.b [%a15]13,%d8
80005348:	3c d2       	j 800052ec <IfxAsclin_Asc_isrReceive+0xe>
8000534a:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800053d6:	28 d8       	st.b [%a15]13,%d8
800053d8:	3c d2       	j 8000537c <IfxAsclin_Asc_isrReceive+0xe>
800053da:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
<<<<<<< HEAD
<<<<<<< HEAD
800053a8:	d4 44       	ld.a %a4,[%a4]
=======
800053dc:	d4 44       	ld.a %a4,[%a4]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
800053de:	d9 a5 10 00 	lea %a5,[%sp]16
800053e2:	4c 44       	ld.w %d15,[%a4]16
800053e4:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800053e8:	02 f4       	mov %d4,%d15
800053ea:	6d ff 61 fd 	call 80004eac <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
800053ee:	c8 24       	ld.a %a4,[%a15]8
800053f0:	d2 06       	mov %e6,0
800053f2:	d9 a5 10 00 	lea %a5,[%sp]16
800053f6:	02 f4       	mov %d4,%d15
800053f8:	6d 00 92 19 	call 8000871c <Ifx_Fifo_write>
800053fc:	76 23       	jz %d2,80005402 <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
800053fe:	82 1f       	mov %d15,1
80005400:	28 df       	st.b [%a15]13,%d15
80005402:	00 90       	ret 

<<<<<<< HEAD
800053d0 <IfxAsclin_Asc_blockingRead>:
=======
8000534c:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
8000534e:	d9 a5 10 00 	lea %a5,[%sp]16
80005352:	4c 44       	ld.w %d15,[%a4]16
80005354:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005358:	02 f4       	mov %d4,%d15
8000535a:	6d ff 61 fd 	call 80004e1c <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
8000535e:	c8 24       	ld.a %a4,[%a15]8
80005360:	d2 06       	mov %e6,0
80005362:	d9 a5 10 00 	lea %a5,[%sp]16
80005366:	02 f4       	mov %d4,%d15
80005368:	6d 00 92 19 	call 8000868c <Ifx_Fifo_write>
8000536c:	76 23       	jz %d2,80005372 <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
8000536e:	82 1f       	mov %d15,1
80005370:	28 df       	st.b [%a15]13,%d15
80005372:	00 90       	ret 

80005374 <IfxAsclin_Asc_blockingRead>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005404 <IfxAsclin_Asc_blockingRead>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
800053d0:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
800053d2:	82 1f       	mov %d15,1
=======
80005374:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005376:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005404:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005406:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
800053d4:	40 4f       	mov.aa %a15,%a4
=======
80005408:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_SizeT count = 1;
8000540a:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
<<<<<<< HEAD
800053d8:	82 f4       	mov %d4,-1
800053da:	40 f4       	mov.aa %a4,%a15
800053dc:	d9 a5 05 00 	lea %a5,[%sp]5
800053e0:	d9 a6 06 00 	lea %a6,[%sp]6
800053e4:	9b 04 00 58 	addih %d5,%d4,32768
800053e8:	6d ff 4c ff 	call 80005280 <IfxAsclin_Asc_read>
800053ec:	df 12 f6 ff 	jne %d2,1,800053d8 <IfxAsclin_Asc_blockingRead+0x8>
=======
80005378:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
8000537a:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
8000537c:	82 f4       	mov %d4,-1
8000537e:	40 f4       	mov.aa %a4,%a15
80005380:	d9 a5 05 00 	lea %a5,[%sp]5
80005384:	d9 a6 06 00 	lea %a6,[%sp]6
80005388:	9b 04 00 58 	addih %d5,%d4,32768
8000538c:	6d ff 4c ff 	call 80005224 <IfxAsclin_Asc_read>
80005390:	df 12 f6 ff 	jne %d2,1,8000537c <IfxAsclin_Asc_blockingRead+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000540c:	82 f4       	mov %d4,-1
8000540e:	40 f4       	mov.aa %a4,%a15
80005410:	d9 a5 05 00 	lea %a5,[%sp]5
80005414:	d9 a6 06 00 	lea %a6,[%sp]6
80005418:	9b 04 00 58 	addih %d5,%d4,32768
8000541c:	6d ff 4c ff 	call 800052b4 <IfxAsclin_Asc_read>
80005420:	df 12 f6 ff 	jne %d2,1,8000540c <IfxAsclin_Asc_blockingRead+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {}

    return data;
}
<<<<<<< HEAD
<<<<<<< HEAD
800053f0:	39 a2 05 00 	ld.bu %d2,[%sp]5
800053f4:	00 90       	ret 

800053f6 <IfxAsclin_Asc_disableModule>:
=======
80005394:	39 a2 05 00 	ld.bu %d2,[%sp]5
80005398:	00 90       	ret 

8000539a <IfxAsclin_Asc_disableModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005424:	39 a2 05 00 	ld.bu %d2,[%sp]5
80005428:	00 90       	ret 

8000542a <IfxAsclin_Asc_disableModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
<<<<<<< HEAD
<<<<<<< HEAD
800053f6:	cc 40       	ld.a %a15,[%a4]0
=======
8000542a:	cc 40       	ld.a %a15,[%a4]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
8000542c:	6d 00 c5 0f 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
<<<<<<< HEAD
800053fc:	02 24       	mov %d4,%d2
=======
8000539a:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
8000539c:	6d 00 c5 0f 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053a0:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005430:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
800053fe:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
80005400:	6d 00 c1 0e 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
800053a2:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053a4:	6d 00 c1 0e 	call 80007126 <IfxScuWdt_clearCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005432:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
80005434:	6d 00 c1 0e 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005404:	48 02       	ld.w %d2,[%a15]0
=======
80005438:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
8000543a:	02 f4       	mov %d4,%d15
8000543c:	8f 12 40 21 	or %d2,%d2,1
80005440:	68 02       	st.w [%a15]0,%d2
80005442:	1d 00 ef 0f 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80005412 <IfxAsclin_Asc_initModule>:
=======
800053a8:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
800053aa:	02 f4       	mov %d4,%d15
800053ac:	8f 12 40 21 	or %d2,%d2,1
800053b0:	68 02       	st.w [%a15]0,%d2
800053b2:	1d 00 ef 0f 	j 80007390 <IfxScuWdt_setCpuEndinit>

800053b6 <IfxAsclin_Asc_initModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005446 <IfxAsclin_Asc_initModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
<<<<<<< HEAD
<<<<<<< HEAD
80005412:	cc 50       	ld.a %a15,[%a5]0
=======
800053b6:	cc 50       	ld.a %a15,[%a5]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005446:	cc 50       	ld.a %a15,[%a5]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005414:	40 4e       	mov.aa %a14,%a4
80005416:	40 5c       	mov.aa %a12,%a5
=======
800053b8:	40 4e       	mov.aa %a14,%a4
800053ba:	40 5c       	mov.aa %a12,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005448:	40 4e       	mov.aa %a14,%a4
8000544a:	40 5c       	mov.aa %a12,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
<<<<<<< HEAD
<<<<<<< HEAD
80005418:	ec 40       	st.a [%a4]0,%a15
=======
8000544c:	ec 40       	st.a [%a4]0,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
8000544e:	40 f4       	mov.aa %a4,%a15
80005450:	6d ff 71 fc 	call 80004d32 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
<<<<<<< HEAD
80005420:	40 f4       	mov.aa %a4,%a15
80005422:	82 04       	mov %d4,0
80005424:	6d ff 59 fd 	call 80004ed6 <IfxAsclin_setClockSource>
=======
800053bc:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
800053be:	40 f4       	mov.aa %a4,%a15
800053c0:	6d ff 71 fc 	call 80004ca2 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
800053c4:	40 f4       	mov.aa %a4,%a15
800053c6:	82 04       	mov %d4,0
800053c8:	6d ff 59 fd 	call 80004e7a <IfxAsclin_setClockSource>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005454:	40 f4       	mov.aa %a4,%a15
80005456:	82 04       	mov %d4,0
80005458:	6d ff 59 fd 	call 80004f0a <IfxAsclin_setClockSource>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
<<<<<<< HEAD
<<<<<<< HEAD
80005428:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
8000542a:	40 f4       	mov.aa %a4,%a15
8000542c:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
80005430:	68 6f       	st.w [%a15]24,%d15
=======
800053cc:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800053ce:	40 f4       	mov.aa %a4,%a15
800053d0:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
800053d4:	68 6f       	st.w [%a15]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000545c:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
8000545e:	40 f4       	mov.aa %a4,%a15
80005460:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
80005464:	68 6f       	st.w [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005432:	8c c4       	ld.h %d15,[%a12]8
80005434:	48 52       	ld.w %d2,[%a15]20
80005436:	c2 ff       	add %d15,-1
80005438:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
8000543c:	68 5f       	st.w [%a15]20,%d15
8000543e:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005442:	6d ff 4a fd 	call 80004ed6 <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005446:	40 f4       	mov.aa %a4,%a15
80005448:	19 c4 04 00 	ld.w %d4,[%a12]4
8000544c:	39 c5 0a 00 	ld.bu %d5,[%a12]10
80005450:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005454:	39 c7 0c 00 	ld.bu %d7,[%a12]12
80005458:	6d ff 79 fd 	call 80004f4a <IfxAsclin_setBitTiming>
=======
800053d6:	8c c4       	ld.h %d15,[%a12]8
800053d8:	48 52       	ld.w %d2,[%a15]20
800053da:	c2 ff       	add %d15,-1
800053dc:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
800053e0:	68 5f       	st.w [%a15]20,%d15
800053e2:	39 c4 28 00 	ld.bu %d4,[%a12]40
800053e6:	6d ff 4a fd 	call 80004e7a <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800053ea:	40 f4       	mov.aa %a4,%a15
800053ec:	19 c4 04 00 	ld.w %d4,[%a12]4
800053f0:	39 c5 0a 00 	ld.bu %d5,[%a12]10
800053f4:	39 c6 0d 00 	ld.bu %d6,[%a12]13
800053f8:	39 c7 0c 00 	ld.bu %d7,[%a12]12
800053fc:	6d ff 79 fd 	call 80004eee <IfxAsclin_setBitTiming>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005466:	8c c4       	ld.h %d15,[%a12]8
80005468:	48 52       	ld.w %d2,[%a15]20
8000546a:	c2 ff       	add %d15,-1
8000546c:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
80005470:	68 5f       	st.w [%a15]20,%d15
80005472:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005476:	6d ff 4a fd 	call 80004f0a <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
8000547a:	40 f4       	mov.aa %a4,%a15
8000547c:	19 c4 04 00 	ld.w %d4,[%a12]4
80005480:	39 c5 0a 00 	ld.bu %d5,[%a12]10
80005484:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005488:	39 c7 0c 00 	ld.bu %d7,[%a12]12
8000548c:	6d ff 79 fd 	call 80004f7e <IfxAsclin_setBitTiming>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
<<<<<<< HEAD
<<<<<<< HEAD
8000545c:	40 f4       	mov.aa %a4,%a15
8000545e:	82 04       	mov %d4,0
=======
80005400:	40 f4       	mov.aa %a4,%a15
80005402:	82 04       	mov %d4,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005490:	40 f4       	mov.aa %a4,%a15
80005492:	82 04       	mov %d4,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
<<<<<<< HEAD
<<<<<<< HEAD
80005460:	02 29       	mov %d9,%d2
=======
80005404:	02 29       	mov %d9,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005494:	02 29       	mov %d9,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
<<<<<<< HEAD
<<<<<<< HEAD
80005462:	6d ff 3a fd 	call 80004ed6 <IfxAsclin_setClockSource>
=======
80005406:	6d ff 3a fd 	call 80004e7a <IfxAsclin_setClockSource>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005496:	6d ff 3a fd 	call 80004f0a <IfxAsclin_setClockSource>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005466:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000546a:	7b 00 00 f1 	movh %d15,4096
8000546e:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005472:	4c f1       	ld.w %d15,[%a15]4
80005474:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
80005478:	a6 2f       	or %d15,%d2
8000547a:	68 1f       	st.w [%a15]4,%d15
=======
8000540a:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000540e:	7b 00 00 f1 	movh %d15,4096
80005412:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005416:	4c f1       	ld.w %d15,[%a15]4
80005418:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
8000541c:	a6 2f       	or %d15,%d2
8000541e:	68 1f       	st.w [%a15]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000549a:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000549e:	7b 00 00 f1 	movh %d15,4096
800054a2:	ab 0f 80 22 	sel %d2,%d2,%d15,0
800054a6:	4c f1       	ld.w %d15,[%a15]4
800054a8:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
800054ac:	a6 2f       	or %d15,%d2
800054ae:	68 1f       	st.w [%a15]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000547c:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005480:	7b 00 00 f4 	movh %d15,16384
80005484:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005488:	4c f6       	ld.w %d15,[%a15]24
8000548a:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
8000548e:	a6 2f       	or %d15,%d2
80005490:	68 6f       	st.w [%a15]24,%d15
=======
80005420:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005424:	7b 00 00 f4 	movh %d15,16384
80005428:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000542c:	4c f6       	ld.w %d15,[%a15]24
8000542e:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
80005432:	a6 2f       	or %d15,%d2
80005434:	68 6f       	st.w [%a15]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800054b0:	39 c2 14 00 	ld.bu %d2,[%a12]20
800054b4:	7b 00 00 f4 	movh %d15,16384
800054b8:	ab 0f 80 22 	sel %d2,%d2,%d15,0
800054bc:	4c f6       	ld.w %d15,[%a15]24
800054be:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
800054c2:	a6 2f       	or %d15,%d2
800054c4:	68 6f       	st.w [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
<<<<<<< HEAD
<<<<<<< HEAD
80005492:	48 62       	ld.w %d2,[%a15]24
80005494:	39 cf 12 00 	ld.bu %d15,[%a12]18
80005498:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
8000549c:	68 6f       	st.w [%a15]24,%d15
=======
80005436:	48 62       	ld.w %d2,[%a15]24
80005438:	39 cf 12 00 	ld.bu %d15,[%a12]18
8000543c:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
80005440:	68 6f       	st.w [%a15]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800054c6:	48 62       	ld.w %d2,[%a15]24
800054c8:	39 cf 12 00 	ld.bu %d15,[%a12]18
800054cc:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
800054d0:	68 6f       	st.w [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
<<<<<<< HEAD
<<<<<<< HEAD
8000549e:	48 62       	ld.w %d2,[%a15]24
800054a0:	0c cf       	ld.bu %d15,[%a12]15
800054a2:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
800054a6:	68 6f       	st.w [%a15]24,%d15
=======
80005442:	48 62       	ld.w %d2,[%a15]24
80005444:	0c cf       	ld.bu %d15,[%a12]15
80005446:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
8000544a:	68 6f       	st.w [%a15]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800054d2:	48 62       	ld.w %d2,[%a15]24
800054d4:	0c cf       	ld.bu %d15,[%a12]15
800054d6:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
800054da:	68 6f       	st.w [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
<<<<<<< HEAD
<<<<<<< HEAD
800054a8:	48 62       	ld.w %d2,[%a15]24
800054aa:	39 cf 11 00 	ld.bu %d15,[%a12]17
800054ae:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
800054b2:	68 6f       	st.w [%a15]24,%d15
=======
8000544c:	48 62       	ld.w %d2,[%a15]24
8000544e:	39 cf 11 00 	ld.bu %d15,[%a12]17
80005452:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
80005456:	68 6f       	st.w [%a15]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800054dc:	48 62       	ld.w %d2,[%a15]24
800054de:	39 cf 11 00 	ld.bu %d15,[%a12]17
800054e2:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
800054e6:	68 6f       	st.w [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
<<<<<<< HEAD
<<<<<<< HEAD
800054b4:	48 72       	ld.w %d2,[%a15]28
800054b6:	39 cf 13 00 	ld.bu %d15,[%a12]19
800054ba:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
800054be:	68 7f       	st.w [%a15]28,%d15
=======
80005458:	48 72       	ld.w %d2,[%a15]28
8000545a:	39 cf 13 00 	ld.bu %d15,[%a12]19
8000545e:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
80005462:	68 7f       	st.w [%a15]28,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800054e8:	48 72       	ld.w %d2,[%a15]28
800054ea:	39 cf 13 00 	ld.bu %d15,[%a12]19
800054ee:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
800054f2:	68 7f       	st.w [%a15]28,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
<<<<<<< HEAD
<<<<<<< HEAD
800054c0:	48 32       	ld.w %d2,[%a15]12
800054c2:	39 cf 16 00 	ld.bu %d15,[%a12]22
800054c6:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800054ca:	68 3f       	st.w [%a15]12,%d15
=======
80005464:	48 32       	ld.w %d2,[%a15]12
80005466:	39 cf 16 00 	ld.bu %d15,[%a12]22
8000546a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000546e:	68 3f       	st.w [%a15]12,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800054f4:	48 32       	ld.w %d2,[%a15]12
800054f6:	39 cf 16 00 	ld.bu %d15,[%a12]22
800054fa:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800054fe:	68 3f       	st.w [%a15]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
<<<<<<< HEAD
<<<<<<< HEAD
800054cc:	48 42       	ld.w %d2,[%a15]16
800054ce:	39 cf 17 00 	ld.bu %d15,[%a12]23
800054d2:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800054d6:	68 4f       	st.w [%a15]16,%d15
=======
80005470:	48 42       	ld.w %d2,[%a15]16
80005472:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005476:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000547a:	68 4f       	st.w [%a15]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005500:	48 42       	ld.w %d2,[%a15]16
80005502:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005506:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000550a:	68 4f       	st.w [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
<<<<<<< HEAD
<<<<<<< HEAD
800054d8:	48 62       	ld.w %d2,[%a15]24
800054da:	0c ce       	ld.bu %d15,[%a12]14
800054dc:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
800054e0:	68 6f       	st.w [%a15]24,%d15
=======
8000547c:	48 62       	ld.w %d2,[%a15]24
8000547e:	0c ce       	ld.bu %d15,[%a12]14
80005480:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005484:	68 6f       	st.w [%a15]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000550c:	48 62       	ld.w %d2,[%a15]24
8000550e:	0c ce       	ld.bu %d15,[%a12]14
80005510:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005514:	68 6f       	st.w [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
<<<<<<< HEAD
<<<<<<< HEAD
800054e2:	39 c2 18 00 	ld.bu %d2,[%a12]24
=======
80005486:	39 c2 18 00 	ld.bu %d2,[%a12]24
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005516:	39 c2 18 00 	ld.bu %d2,[%a12]24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
<<<<<<< HEAD
800054e6:	da 0f       	mov %d15,15
800054e8:	0b f2 90 21 	min.u %d2,%d2,%d15
800054ec:	48 33       	ld.w %d3,[%a15]12
800054ee:	37 23 04 24 	insert %d2,%d3,%d2,8,4
800054f2:	68 32       	st.w [%a15]12,%d2
=======
8000548a:	da 0f       	mov %d15,15
8000548c:	0b f2 90 21 	min.u %d2,%d2,%d15
80005490:	48 33       	ld.w %d3,[%a15]12
80005492:	37 23 04 24 	insert %d2,%d3,%d2,8,4
80005496:	68 32       	st.w [%a15]12,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000551a:	da 0f       	mov %d15,15
8000551c:	0b f2 90 21 	min.u %d2,%d2,%d15
80005520:	48 33       	ld.w %d3,[%a15]12
80005522:	37 23 04 24 	insert %d2,%d3,%d2,8,4
80005526:	68 32       	st.w [%a15]12,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
<<<<<<< HEAD
<<<<<<< HEAD
800054f4:	39 c2 19 00 	ld.bu %d2,[%a12]25
800054f8:	0b f2 90 f1 	min.u %d15,%d2,%d15
800054fc:	48 42       	ld.w %d2,[%a15]16
800054fe:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
80005502:	68 4f       	st.w [%a15]16,%d15
=======
80005498:	39 c2 19 00 	ld.bu %d2,[%a12]25
8000549c:	0b f2 90 f1 	min.u %d15,%d2,%d15
800054a0:	48 42       	ld.w %d2,[%a15]16
800054a2:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
800054a6:	68 4f       	st.w [%a15]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005528:	39 c2 19 00 	ld.bu %d2,[%a12]25
8000552c:	0b f2 90 f1 	min.u %d15,%d2,%d15
80005530:	48 42       	ld.w %d2,[%a15]16
80005532:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
80005536:	68 4f       	st.w [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
<<<<<<< HEAD
<<<<<<< HEAD
80005504:	39 cf 10 00 	ld.bu %d15,[%a12]16
80005508:	48 62       	ld.w %d2,[%a15]24
8000550a:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000550e:	68 6f       	st.w [%a15]24,%d15
=======
800054a8:	39 cf 10 00 	ld.bu %d15,[%a12]16
800054ac:	48 62       	ld.w %d2,[%a15]24
800054ae:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800054b2:	68 6f       	st.w [%a15]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005538:	39 cf 10 00 	ld.bu %d15,[%a12]16
8000553c:	48 62       	ld.w %d2,[%a15]24
8000553e:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005542:	68 6f       	st.w [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
<<<<<<< HEAD
<<<<<<< HEAD
80005510:	99 cd 24 00 	ld.a %a13,[%a12]36
=======
80005544:	99 cd 24 00 	ld.a %a13,[%a12]36
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (pins != NULL_PTR)
80005548:	bd 0d 81 00 	jz.a %a13,8000564a <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
8000554c:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
<<<<<<< HEAD
8000551a:	6e 27       	jz %d15,80005568 <IfxAsclin_Asc_initModule+0x156>
=======
800054b4:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
800054b8:	bd 0d 81 00 	jz.a %a13,800055ba <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
800054bc:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
800054be:	6e 27       	jz %d15,8000550c <IfxAsclin_Asc_initModule+0x156>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000554e:	6e 27       	jz %d15,8000559c <IfxAsclin_Asc_initModule+0x156>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
<<<<<<< HEAD
<<<<<<< HEAD
8000551c:	60 f2       	mov.a %a2,%d15
=======
80005550:	60 f2       	mov.a %a2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
80005552:	79 d5 04 00 	ld.b %d5,[%a13]4
80005556:	99 24 04 00 	ld.a %a4,[%a2]4
8000555a:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000555e:	bd 04 1f 00 	jz.a %a4,8000559c <IfxAsclin_Asc_initModule+0x156>
80005562:	39 24 08 00 	ld.bu %d4,[%a2]8
80005566:	8f f5 0f 51 	and %d5,%d5,255
8000556a:	6d 00 ba 03 	call 80005cde <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
8000556e:	60 f3       	mov.a %a3,%d15
80005570:	02 85       	mov %d5,%d8
80005572:	99 34 04 00 	ld.a %a4,[%a3]4
80005576:	39 34 08 00 	ld.bu %d4,[%a3]8
8000557a:	6d 00 30 04 	call 80005dda <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
<<<<<<< HEAD
8000554a:	60 f3       	mov.a %a3,%d15
8000554c:	d4 32       	ld.a %a2,[%a3]
=======
800054c0:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800054c2:	79 d5 04 00 	ld.b %d5,[%a13]4
800054c6:	99 24 04 00 	ld.a %a4,[%a2]4
800054ca:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800054ce:	bd 04 1f 00 	jz.a %a4,8000550c <IfxAsclin_Asc_initModule+0x156>
800054d2:	39 24 08 00 	ld.bu %d4,[%a2]8
800054d6:	8f f5 0f 51 	and %d5,%d5,255
800054da:	6d 00 ba 03 	call 80005c4e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
800054de:	60 f3       	mov.a %a3,%d15
800054e0:	02 85       	mov %d5,%d8
800054e2:	99 34 04 00 	ld.a %a4,[%a3]4
800054e6:	39 34 08 00 	ld.bu %d4,[%a3]8
800054ea:	6d 00 30 04 	call 80005d4a <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
800054ee:	60 f3       	mov.a %a3,%d15
800054f0:	d4 32       	ld.a %a2,[%a3]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000557e:	60 f3       	mov.a %a3,%d15
80005580:	d4 32       	ld.a %a2,[%a3]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000554e:	19 22 04 00 	ld.w %d2,[%a2]4
80005552:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
80005556:	59 22 04 00 	st.w [%a2]4,%d2
=======
800054f2:	19 22 04 00 	ld.w %d2,[%a2]4
800054f6:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
800054fa:	59 22 04 00 	st.w [%a2]4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005582:	19 22 04 00 	ld.w %d2,[%a2]4
80005586:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
8000558a:	59 22 04 00 	st.w [%a2]4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
<<<<<<< HEAD
<<<<<<< HEAD
8000555a:	d4 32       	ld.a %a2,[%a3]
=======
800054fe:	d4 32       	ld.a %a2,[%a3]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000558e:	d4 32       	ld.a %a2,[%a3]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
<<<<<<< HEAD
<<<<<<< HEAD
8000555c:	0c 3c       	ld.bu %d15,[%a3]12
8000555e:	19 22 04 00 	ld.w %d2,[%a2]4
80005562:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005566:	6c 21       	st.w [%a2]4,%d15
=======
80005590:	0c 3c       	ld.bu %d15,[%a3]12
80005592:	19 22 04 00 	ld.w %d2,[%a2]4
80005596:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000559a:	6c 21       	st.w [%a2]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        IfxAsclin_Rx_In *rx = pins->rx;
8000559c:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
<<<<<<< HEAD
8000556a:	6e 20       	jz %d15,800055aa <IfxAsclin_Asc_initModule+0x198>
=======
80005500:	0c 3c       	ld.bu %d15,[%a3]12
80005502:	19 22 04 00 	ld.w %d2,[%a2]4
80005506:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000550a:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
8000550c:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000550e:	6e 20       	jz %d15,8000554e <IfxAsclin_Asc_initModule+0x198>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000559e:	6e 20       	jz %d15,800055de <IfxAsclin_Asc_initModule+0x198>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
<<<<<<< HEAD
<<<<<<< HEAD
8000556c:	60 f2       	mov.a %a2,%d15
=======
800055a0:	60 f2       	mov.a %a2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
800055a2:	79 d5 0c 00 	ld.b %d5,[%a13]12
800055a6:	99 24 04 00 	ld.a %a4,[%a2]4
800055aa:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055ae:	bd 04 18 00 	jz.a %a4,800055de <IfxAsclin_Asc_initModule+0x198>
800055b2:	39 24 08 00 	ld.bu %d4,[%a2]8
800055b6:	8f f5 0f 51 	and %d5,%d5,255
800055ba:	6d 00 92 03 	call 80005cde <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
800055be:	60 f3       	mov.a %a3,%d15
800055c0:	02 85       	mov %d5,%d8
800055c2:	99 34 04 00 	ld.a %a4,[%a3]4
800055c6:	39 34 08 00 	ld.bu %d4,[%a3]8
800055ca:	6d 00 08 04 	call 80005dda <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
<<<<<<< HEAD
8000559a:	60 f3       	mov.a %a3,%d15
8000559c:	d4 32       	ld.a %a2,[%a3]
=======
80005510:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
80005512:	79 d5 0c 00 	ld.b %d5,[%a13]12
80005516:	99 24 04 00 	ld.a %a4,[%a2]4
8000551a:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000551e:	bd 04 18 00 	jz.a %a4,8000554e <IfxAsclin_Asc_initModule+0x198>
80005522:	39 24 08 00 	ld.bu %d4,[%a2]8
80005526:	8f f5 0f 51 	and %d5,%d5,255
8000552a:	6d 00 92 03 	call 80005c4e <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000552e:	60 f3       	mov.a %a3,%d15
80005530:	02 85       	mov %d5,%d8
80005532:	99 34 04 00 	ld.a %a4,[%a3]4
80005536:	39 34 08 00 	ld.bu %d4,[%a3]8
8000553a:	6d 00 08 04 	call 80005d4a <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000553e:	60 f3       	mov.a %a3,%d15
80005540:	d4 32       	ld.a %a2,[%a3]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800055ce:	60 f3       	mov.a %a3,%d15
800055d0:	d4 32       	ld.a %a2,[%a3]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
<<<<<<< HEAD
<<<<<<< HEAD
8000559e:	0c 3c       	ld.bu %d15,[%a3]12
800055a0:	19 22 04 00 	ld.w %d2,[%a2]4
800055a4:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
800055a8:	6c 21       	st.w [%a2]4,%d15
=======
800055d2:	0c 3c       	ld.bu %d15,[%a3]12
800055d4:	19 22 04 00 	ld.w %d2,[%a2]4
800055d8:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
800055dc:	6c 21       	st.w [%a2]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
800055de:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
<<<<<<< HEAD
800055ac:	6e 1a       	jz %d15,800055e0 <IfxAsclin_Asc_initModule+0x1ce>
=======
80005542:	0c 3c       	ld.bu %d15,[%a3]12
80005544:	19 22 04 00 	ld.w %d2,[%a2]4
80005548:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
8000554c:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
8000554e:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
80005550:	6e 1a       	jz %d15,80005584 <IfxAsclin_Asc_initModule+0x1ce>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800055e0:	6e 1a       	jz %d15,80005614 <IfxAsclin_Asc_initModule+0x1ce>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
<<<<<<< HEAD
<<<<<<< HEAD
800055ae:	60 f2       	mov.a %a2,%d15
800055b0:	39 d2 14 00 	ld.bu %d2,[%a13]20
800055b4:	39 23 0c 00 	ld.bu %d3,[%a2]12
800055b8:	99 24 04 00 	ld.a %a4,[%a2]4
800055bc:	0f 23 a0 50 	or %d5,%d3,%d2
800055c0:	39 24 08 00 	ld.bu %d4,[%a2]8
800055c4:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
800055c8:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055cc:	6d 00 6f 03 	call 80005caa <IfxPort_setPinMode>
=======
80005552:	60 f2       	mov.a %a2,%d15
80005554:	39 d2 14 00 	ld.bu %d2,[%a13]20
80005558:	39 23 0c 00 	ld.bu %d3,[%a2]12
8000555c:	99 24 04 00 	ld.a %a4,[%a2]4
80005560:	0f 23 a0 50 	or %d5,%d3,%d2
80005564:	39 24 08 00 	ld.bu %d4,[%a2]8
80005568:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
8000556c:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005570:	6d 00 6f 03 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800055e2:	60 f2       	mov.a %a2,%d15
800055e4:	39 d2 14 00 	ld.bu %d2,[%a13]20
800055e8:	39 23 0c 00 	ld.bu %d3,[%a2]12
800055ec:	99 24 04 00 	ld.a %a4,[%a2]4
800055f0:	0f 23 a0 50 	or %d5,%d3,%d2
800055f4:	39 24 08 00 	ld.bu %d4,[%a2]8
800055f8:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
800055fc:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005600:	6d 00 6f 03 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
<<<<<<< HEAD
<<<<<<< HEAD
800055d0:	60 f3       	mov.a %a3,%d15
800055d2:	02 85       	mov %d5,%d8
800055d4:	99 34 04 00 	ld.a %a4,[%a3]4
800055d8:	39 34 08 00 	ld.bu %d4,[%a3]8
800055dc:	6d 00 e5 03 	call 80005da6 <IfxPort_setPinPadDriver>
=======
80005604:	60 f3       	mov.a %a3,%d15
80005606:	02 85       	mov %d5,%d8
80005608:	99 34 04 00 	ld.a %a4,[%a3]4
8000560c:	39 34 08 00 	ld.bu %d4,[%a3]8
80005610:	6d 00 e5 03 	call 80005dda <IfxPort_setPinPadDriver>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005614:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005616:	6e 1a       	jz %d15,8000564a <IfxAsclin_Asc_initModule+0x204>
80005618:	60 f2       	mov.a %a2,%d15
8000561a:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000561e:	39 23 0c 00 	ld.bu %d3,[%a2]12
80005622:	99 24 04 00 	ld.a %a4,[%a2]4
80005626:	0f 23 a0 50 	or %d5,%d3,%d2
8000562a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000562e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
<<<<<<< HEAD
800055fe:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005602:	6d 00 54 03 	call 80005caa <IfxPort_setPinMode>
=======
80005574:	60 f3       	mov.a %a3,%d15
80005576:	02 85       	mov %d5,%d8
80005578:	99 34 04 00 	ld.a %a4,[%a3]4
8000557c:	39 34 08 00 	ld.bu %d4,[%a3]8
80005580:	6d 00 e5 03 	call 80005d4a <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005584:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005586:	6e 1a       	jz %d15,800055ba <IfxAsclin_Asc_initModule+0x204>
80005588:	60 f2       	mov.a %a2,%d15
8000558a:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000558e:	39 23 0c 00 	ld.bu %d3,[%a2]12
80005592:	99 24 04 00 	ld.a %a4,[%a2]4
80005596:	0f 23 a0 50 	or %d5,%d3,%d2
8000559a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000559e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800055a2:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055a6:	6d 00 54 03 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005632:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005636:	6d 00 54 03 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
<<<<<<< HEAD
<<<<<<< HEAD
80005606:	60 f3       	mov.a %a3,%d15
80005608:	02 85       	mov %d5,%d8
8000560a:	99 34 04 00 	ld.a %a4,[%a3]4
8000560e:	39 34 08 00 	ld.bu %d4,[%a3]8
80005612:	6d 00 ca 03 	call 80005da6 <IfxPort_setPinPadDriver>
=======
800055aa:	60 f3       	mov.a %a3,%d15
800055ac:	02 85       	mov %d5,%d8
800055ae:	99 34 04 00 	ld.a %a4,[%a3]4
800055b2:	39 34 08 00 	ld.bu %d4,[%a3]8
800055b6:	6d 00 ca 03 	call 80005d4a <IfxPort_setPinPadDriver>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000563a:	60 f3       	mov.a %a3,%d15
8000563c:	02 85       	mov %d5,%d8
8000563e:	99 34 04 00 	ld.a %a4,[%a3]4
80005642:	39 34 08 00 	ld.bu %d4,[%a3]8
80005646:	6d 00 ca 03 	call 80005dda <IfxPort_setPinPadDriver>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
<<<<<<< HEAD
<<<<<<< HEAD
80005616:	40 f4       	mov.aa %a4,%a15
80005618:	39 c4 28 00 	ld.bu %d4,[%a12]40
8000561c:	6d ff 5d fc 	call 80004ed6 <IfxAsclin_setClockSource>
=======
800055ba:	40 f4       	mov.aa %a4,%a15
800055bc:	39 c4 28 00 	ld.bu %d4,[%a12]40
800055c0:	6d ff 5d fc 	call 80004e7a <IfxAsclin_setClockSource>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000564a:	40 f4       	mov.aa %a4,%a15
8000564c:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005650:	6d ff 5d fc 	call 80004f0a <IfxAsclin_setClockSource>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
<<<<<<< HEAD
<<<<<<< HEAD
80005620:	82 0f       	mov %d15,0
80005622:	59 ff 00 10 	st.w [%a15]64,%d15
=======
800055c4:	82 0f       	mov %d15,0
800055c6:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005654:	82 0f       	mov %d15,0
80005656:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
<<<<<<< HEAD
<<<<<<< HEAD
80005626:	82 f2       	mov %d2,-1
80005628:	68 f2       	st.w [%a15]60,%d2
=======
800055ca:	82 f2       	mov %d2,-1
800055cc:	68 f2       	st.w [%a15]60,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000565a:	82 f2       	mov %d2,-1
8000565c:	68 f2       	st.w [%a15]60,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000562a:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
8000562c:	4c ca       	ld.w %d15,[%a12]40
8000562e:	2e 87       	jz.t %d15,8,8000563c <IfxAsclin_Asc_initModule+0x22a>
=======
800055ce:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
800055d0:	4c ca       	ld.w %d15,[%a12]40
800055d2:	2e 87       	jz.t %d15,8,800055e0 <IfxAsclin_Asc_initModule+0x22a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000565e:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
80005660:	4c ca       	ld.w %d15,[%a12]40
80005662:	2e 87       	jz.t %d15,8,80005670 <IfxAsclin_Asc_initModule+0x22a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005630:	19 ff 00 10 	ld.w %d15,[%a15]64
80005634:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005638:	59 ff 00 10 	st.w [%a15]64,%d15
=======
800055d4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055d8:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800055dc:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005664:	19 ff 00 10 	ld.w %d15,[%a15]64
80005668:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000566c:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
<<<<<<< HEAD
<<<<<<< HEAD
8000563c:	4c ca       	ld.w %d15,[%a12]40
8000563e:	2e 97       	jz.t %d15,9,8000564c <IfxAsclin_Asc_initModule+0x23a>
=======
800055e0:	4c ca       	ld.w %d15,[%a12]40
800055e2:	2e 97       	jz.t %d15,9,800055f0 <IfxAsclin_Asc_initModule+0x23a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005670:	4c ca       	ld.w %d15,[%a12]40
80005672:	2e 97       	jz.t %d15,9,80005680 <IfxAsclin_Asc_initModule+0x23a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005640:	19 ff 00 10 	ld.w %d15,[%a15]64
80005644:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005648:	59 ff 00 10 	st.w [%a15]64,%d15
=======
800055e4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055e8:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800055ec:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005674:	19 ff 00 10 	ld.w %d15,[%a15]64
80005678:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000567c:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
<<<<<<< HEAD
<<<<<<< HEAD
8000564c:	4c ca       	ld.w %d15,[%a12]40
8000564e:	2e a7       	jz.t %d15,10,8000565c <IfxAsclin_Asc_initModule+0x24a>
=======
800055f0:	4c ca       	ld.w %d15,[%a12]40
800055f2:	2e a7       	jz.t %d15,10,80005600 <IfxAsclin_Asc_initModule+0x24a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005680:	4c ca       	ld.w %d15,[%a12]40
80005682:	2e a7       	jz.t %d15,10,80005690 <IfxAsclin_Asc_initModule+0x24a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005650:	19 ff 00 10 	ld.w %d15,[%a15]64
80005654:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005658:	59 ff 00 10 	st.w [%a15]64,%d15
=======
800055f4:	19 ff 00 10 	ld.w %d15,[%a15]64
800055f8:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
800055fc:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005684:	19 ff 00 10 	ld.w %d15,[%a15]64
80005688:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
8000568c:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
<<<<<<< HEAD
<<<<<<< HEAD
8000565c:	4c ca       	ld.w %d15,[%a12]40
8000565e:	2e b7       	jz.t %d15,11,8000566c <IfxAsclin_Asc_initModule+0x25a>
=======
80005600:	4c ca       	ld.w %d15,[%a12]40
80005602:	2e b7       	jz.t %d15,11,80005610 <IfxAsclin_Asc_initModule+0x25a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005690:	4c ca       	ld.w %d15,[%a12]40
80005692:	2e b7       	jz.t %d15,11,800056a0 <IfxAsclin_Asc_initModule+0x25a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005660:	19 ff 00 10 	ld.w %d15,[%a15]64
80005664:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005668:	59 ff 00 10 	st.w [%a15]64,%d15
=======
80005604:	19 ff 00 10 	ld.w %d15,[%a15]64
80005608:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000560c:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005694:	19 ff 00 10 	ld.w %d15,[%a15]64
80005698:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
8000569c:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
<<<<<<< HEAD
<<<<<<< HEAD
8000566c:	4c ca       	ld.w %d15,[%a12]40
8000566e:	2e c7       	jz.t %d15,12,8000567c <IfxAsclin_Asc_initModule+0x26a>
=======
80005610:	4c ca       	ld.w %d15,[%a12]40
80005612:	2e c7       	jz.t %d15,12,80005620 <IfxAsclin_Asc_initModule+0x26a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056a0:	4c ca       	ld.w %d15,[%a12]40
800056a2:	2e c7       	jz.t %d15,12,800056b0 <IfxAsclin_Asc_initModule+0x26a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005670:	19 ff 00 10 	ld.w %d15,[%a15]64
80005674:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005678:	59 ff 00 10 	st.w [%a15]64,%d15
=======
80005614:	19 ff 00 10 	ld.w %d15,[%a15]64
80005618:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000561c:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056a4:	19 ff 00 10 	ld.w %d15,[%a15]64
800056a8:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800056ac:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
8000567c:	82 0f       	mov %d15,0
8000567e:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005680:	2c ec       	st.b [%a14]12,%d15
=======
80005620:	82 0f       	mov %d15,0
80005622:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005624:	2c ec       	st.b [%a14]12,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056b0:	82 0f       	mov %d15,0
800056b2:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
800056b4:	2c ec       	st.b [%a14]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005682:	d2 04       	mov %e4,0
=======
80005626:	d2 04       	mov %e4,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056b6:	d2 04       	mov %e4,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
<<<<<<< HEAD
<<<<<<< HEAD
80005684:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
80005688:	82 0f       	mov %d15,0
=======
80005628:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
8000562c:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056b8:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
800056bc:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000568a:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
8000568e:	6c e4       	st.w [%a14]16,%d15
=======
8000562e:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
80005632:	6c e4       	st.w [%a14]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056be:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
800056c2:	6c e4       	st.w [%a14]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
<<<<<<< HEAD
<<<<<<< HEAD
80005690:	e9 e3 0f 00 	st.b [%a14]15,%d3
=======
80005634:	e9 e3 0f 00 	st.b [%a14]15,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056c4:	e9 e3 0f 00 	st.b [%a14]15,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005694:	82 1f       	mov %d15,1
=======
80005638:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056c8:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
<<<<<<< HEAD
<<<<<<< HEAD
80005696:	76 34       	jz %d3,8000569e <IfxAsclin_Asc_initModule+0x28c>
=======
8000563a:	76 34       	jz %d3,80005642 <IfxAsclin_Asc_initModule+0x28c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056ca:	76 34       	jz %d3,800056d2 <IfxAsclin_Asc_initModule+0x28c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005698:	ba 13       	eq %d15,%d3,1
8000569a:	ab cf a0 ff 	seln %d15,%d15,%d15,12
=======
8000563c:	ba 13       	eq %d15,%d3,1
8000563e:	ab cf a0 ff 	seln %d15,%d15,%d15,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056cc:	ba 13       	eq %d15,%d3,1
800056ce:	ab cf a0 ff 	seln %d15,%d15,%d15,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
<<<<<<< HEAD
<<<<<<< HEAD
8000569e:	99 c4 2c 00 	ld.a %a4,[%a12]44
800056a2:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056a6:	02 f5       	mov %d5,%d15
=======
80005642:	99 c4 2c 00 	ld.a %a4,[%a12]44
80005646:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000564a:	02 f5       	mov %d5,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056d2:	99 c4 2c 00 	ld.a %a4,[%a12]44
800056d6:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056da:	02 f5       	mov %d5,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
<<<<<<< HEAD
<<<<<<< HEAD
800056a8:	bc 44       	jz.a %a4,800056b0 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056aa:	6d 00 36 16 	call 80008316 <Ifx_Fifo_init>
800056ae:	3c 03       	j 800056b4 <IfxAsclin_Asc_initModule+0x2a2>
=======
8000564c:	bc 44       	jz.a %a4,80005654 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000564e:	6d 00 36 16 	call 800082ba <Ifx_Fifo_init>
80005652:	3c 03       	j 80005658 <IfxAsclin_Asc_initModule+0x2a2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056dc:	bc 44       	jz.a %a4,800056e4 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056de:	6d 00 36 16 	call 8000834a <Ifx_Fifo_init>
800056e2:	3c 03       	j 800056e8 <IfxAsclin_Asc_initModule+0x2a2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
<<<<<<< HEAD
<<<<<<< HEAD
800056b0:	6d 00 50 16 	call 80008350 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
800056b4:	99 c4 34 00 	ld.a %a4,[%a12]52
=======
80005654:	6d 00 50 16 	call 800082f4 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
80005658:	99 c4 34 00 	ld.a %a4,[%a12]52
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056e4:	6d 00 50 16 	call 80008384 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
800056e8:	99 c4 34 00 	ld.a %a4,[%a12]52
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
<<<<<<< HEAD
<<<<<<< HEAD
800056b8:	b5 e2 04 00 	st.a [%a14]4,%a2
800056bc:	c9 c4 30 00 	ld.h %d4,[%a12]48
=======
8000565c:	b5 e2 04 00 	st.a [%a14]4,%a2
80005660:	c9 c4 30 00 	ld.h %d4,[%a12]48
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056ec:	b5 e2 04 00 	st.a [%a14]4,%a2
800056f0:	c9 c4 30 00 	ld.h %d4,[%a12]48
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
<<<<<<< HEAD
<<<<<<< HEAD
800056c0:	02 f5       	mov %d5,%d15
=======
80005664:	02 f5       	mov %d5,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056f4:	02 f5       	mov %d5,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
<<<<<<< HEAD
<<<<<<< HEAD
800056c2:	bc 44       	jz.a %a4,800056ca <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800056c4:	6d 00 29 16 	call 80008316 <Ifx_Fifo_init>
800056c8:	3c 03       	j 800056ce <IfxAsclin_Asc_initModule+0x2bc>
=======
80005666:	bc 44       	jz.a %a4,8000566e <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005668:	6d 00 29 16 	call 800082ba <Ifx_Fifo_init>
8000566c:	3c 03       	j 80005672 <IfxAsclin_Asc_initModule+0x2bc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056f6:	bc 44       	jz.a %a4,800056fe <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800056f8:	6d 00 29 16 	call 8000834a <Ifx_Fifo_init>
800056fc:	3c 03       	j 80005702 <IfxAsclin_Asc_initModule+0x2bc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
<<<<<<< HEAD
<<<<<<< HEAD
800056ca:	6d 00 43 16 	call 80008350 <Ifx_Fifo_create>
=======
8000566e:	6d 00 43 16 	call 800082f4 <Ifx_Fifo_create>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800056fe:	6d 00 43 16 	call 80008384 <Ifx_Fifo_create>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
<<<<<<< HEAD
<<<<<<< HEAD
800056ce:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800056d2:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
800056d6:	8b 3f 00 82 	eq %d8,%d15,3
800056da:	02 83       	mov %d3,%d8
=======
80005672:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005676:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
8000567a:	8b 3f 00 82 	eq %d8,%d15,3
8000567e:	02 83       	mov %d3,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005702:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005706:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
8000570a:	8b 3f 00 82 	eq %d8,%d15,3
8000570e:	02 83       	mov %d3,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
<<<<<<< HEAD
<<<<<<< HEAD
800056dc:	b5 e2 08 00 	st.a [%a14]8,%a2
=======
80005680:	b5 e2 08 00 	st.a [%a14]8,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005710:	b5 e2 08 00 	st.a [%a14]8,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
<<<<<<< HEAD
<<<<<<< HEAD
800056e0:	8b 02 00 35 	or.ne %d3,%d2,0
800056e4:	df 03 1e 00 	jeq %d3,0,80005720 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
800056e8:	40 f4       	mov.aa %a4,%a15
800056ea:	6d ff a1 fb 	call 80004e2c <IfxAsclin_getSrcPointerRx>
=======
80005684:	8b 02 00 35 	or.ne %d3,%d2,0
80005688:	df 03 1e 00 	jeq %d3,0,800056c4 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
8000568c:	40 f4       	mov.aa %a4,%a15
8000568e:	6d ff a1 fb 	call 80004dd0 <IfxAsclin_getSrcPointerRx>
=======
80005714:	8b 02 00 35 	or.ne %d3,%d2,0
80005718:	df 03 1e 00 	jeq %d3,0,80005754 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
8000571c:	40 f4       	mov.aa %a4,%a15
8000571e:	6d ff a1 fb 	call 80004e60 <IfxAsclin_getSrcPointerRx>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
<<<<<<< HEAD
80005692:	54 22       	ld.w %d2,[%a2]
80005694:	39 c3 1e 00 	ld.bu %d3,[%a12]30
80005698:	8f f2 cf 21 	andn %d2,%d2,255
8000569c:	a6 32       	or %d2,%d3
8000569e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800056a0:	54 22       	ld.w %d2,[%a2]
800056a2:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056a6:	74 22       	st.w [%a2],%d2
=======
80005722:	54 22       	ld.w %d2,[%a2]
80005724:	39 c3 1e 00 	ld.bu %d3,[%a12]30
80005728:	8f f2 cf 21 	andn %d2,%d2,255
8000572c:	a6 32       	or %d2,%d3
8000572e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005730:	54 22       	ld.w %d2,[%a2]
80005732:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
80005736:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
<<<<<<< HEAD
800056a8:	54 22       	ld.w %d2,[%a2]
800056aa:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800056ae:	74 22       	st.w [%a2],%d2
=======
80005738:	54 22       	ld.w %d2,[%a2]
8000573a:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
8000573e:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
<<<<<<< HEAD
800056b0:	19 f2 00 10 	ld.w %d2,[%a15]64
800056b4:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800056b8:	59 f2 00 10 	st.w [%a15]64,%d2
=======
80005740:	19 f2 00 10 	ld.w %d2,[%a15]64
80005744:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80005748:	59 f2 00 10 	st.w [%a15]64,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
<<<<<<< HEAD
800056bc:	54 22       	ld.w %d2,[%a2]
800056be:	b7 f2 01 25 	insert %d2,%d2,15,10,1
800056c2:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
800056c4:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
800056c8:	8b 02 00 85 	or.ne %d8,%d2,0
800056cc:	df 08 1e 00 	jeq %d8,0,80005708 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
800056d0:	40 f4       	mov.aa %a4,%a15
800056d2:	6d ff 89 fb 	call 80004de4 <IfxAsclin_getSrcPointerTx>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
<<<<<<< HEAD
800056ee:	54 22       	ld.w %d2,[%a2]
800056f0:	39 c3 1e 00 	ld.bu %d3,[%a12]30
800056f4:	8f f2 cf 21 	andn %d2,%d2,255
800056f8:	a6 32       	or %d2,%d3
800056fa:	74 22       	st.w [%a2],%d2
=======
800056d6:	54 22       	ld.w %d2,[%a2]
800056d8:	39 c3 1c 00 	ld.bu %d3,[%a12]28
800056dc:	8f f2 cf 21 	andn %d2,%d2,255
800056e0:	a6 32       	or %d2,%d3
800056e2:	74 22       	st.w [%a2],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    src->B.TOS  = typOfService;
800056e4:	54 22       	ld.w %d2,[%a2]
800056e6:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800056ea:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800056ec:	54 22       	ld.w %d2,[%a2]
800056ee:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800056f2:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
<<<<<<< HEAD
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
8000570c:	19 f2 00 10 	ld.w %d2,[%a15]64
80005710:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80005714:	59 f2 00 10 	st.w [%a15]64,%d2
=======
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
800056f4:	19 f2 00 10 	ld.w %d2,[%a15]64
800056f8:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
800056fc:	59 f2 00 10 	st.w [%a15]64,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
<<<<<<< HEAD
80005718:	54 22       	ld.w %d2,[%a2]
8000571a:	b7 f2 01 25 	insert %d2,%d2,15,10,1
8000571e:	74 22       	st.w [%a2],%d2
=======
8000574c:	54 22       	ld.w %d2,[%a2]
8000574e:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005752:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
80005754:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
80005758:	8b 02 00 85 	or.ne %d8,%d2,0
8000575c:	df 08 1e 00 	jeq %d8,0,80005798 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
80005760:	40 f4       	mov.aa %a4,%a15
80005762:	6d ff 89 fb 	call 80004e74 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005766:	54 22       	ld.w %d2,[%a2]
80005768:	39 c3 1c 00 	ld.bu %d3,[%a12]28
8000576c:	8f f2 cf 21 	andn %d2,%d2,255
80005770:	a6 32       	or %d2,%d3
80005772:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005774:	54 22       	ld.w %d2,[%a2]
80005776:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
8000577a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000577c:	54 22       	ld.w %d2,[%a2]
8000577e:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
80005782:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
80005784:	19 f2 00 10 	ld.w %d2,[%a15]64
80005788:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
8000578c:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
<<<<<<< HEAD
8000575c:	54 22       	ld.w %d2,[%a2]
8000575e:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005762:	74 22       	st.w [%a2],%d2
=======
80005700:	54 22       	ld.w %d2,[%a2]
80005702:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005706:	74 22       	st.w [%a2],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005790:	54 22       	ld.w %d2,[%a2]
80005792:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005796:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
<<<<<<< HEAD
<<<<<<< HEAD
80005764:	b9 c2 20 00 	ld.hu %d2,[%a12]32
80005768:	df 02 1e 00 	jeq %d2,0,800057a4 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
8000576c:	40 f4       	mov.aa %a4,%a15
8000576e:	6d ff 55 fb 	call 80004e18 <IfxAsclin_getSrcPointerEr>
=======
80005708:	b9 c2 20 00 	ld.hu %d2,[%a12]32
8000570c:	df 02 1e 00 	jeq %d2,0,80005748 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
80005710:	40 f4       	mov.aa %a4,%a15
80005712:	6d ff 55 fb 	call 80004dbc <IfxAsclin_getSrcPointerEr>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005798:	b9 c2 20 00 	ld.hu %d2,[%a12]32
8000579c:	df 02 1e 00 	jeq %d2,0,800057d8 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
800057a0:	40 f4       	mov.aa %a4,%a15
800057a2:	6d ff 55 fb 	call 80004e4c <IfxAsclin_getSrcPointerEr>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
<<<<<<< HEAD
<<<<<<< HEAD
80005772:	54 22       	ld.w %d2,[%a2]
80005774:	39 c3 20 00 	ld.bu %d3,[%a12]32
80005778:	8f f2 cf 21 	andn %d2,%d2,255
8000577c:	a6 32       	or %d2,%d3
8000577e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005780:	54 22       	ld.w %d2,[%a2]
80005782:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80005786:	6c 20       	st.w [%a2]0,%d15
=======
80005716:	54 22       	ld.w %d2,[%a2]
80005718:	39 c3 20 00 	ld.bu %d3,[%a12]32
8000571c:	8f f2 cf 21 	andn %d2,%d2,255
80005720:	a6 32       	or %d2,%d3
80005722:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005724:	54 22       	ld.w %d2,[%a2]
80005726:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
8000572a:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057a6:	54 22       	ld.w %d2,[%a2]
800057a8:	39 c3 20 00 	ld.bu %d3,[%a12]32
800057ac:	8f f2 cf 21 	andn %d2,%d2,255
800057b0:	a6 32       	or %d2,%d3
800057b2:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800057b4:	54 22       	ld.w %d2,[%a2]
800057b6:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
800057ba:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005788:	4c 20       	ld.w %d15,[%a2]0
8000578a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000578e:	6c 20       	st.w [%a2]0,%d15
=======
8000572c:	4c 20       	ld.w %d15,[%a2]0
8000572e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80005732:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057bc:	4c 20       	ld.w %d15,[%a2]0
800057be:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
800057c2:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005790:	19 ff 00 10 	ld.w %d15,[%a15]64
80005794:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005798:	59 ff 00 10 	st.w [%a15]64,%d15
=======
80005734:	19 ff 00 10 	ld.w %d15,[%a15]64
80005738:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000573c:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057c4:	19 ff 00 10 	ld.w %d15,[%a15]64
800057c8:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800057cc:	59 ff 00 10 	st.w [%a15]64,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
<<<<<<< HEAD
<<<<<<< HEAD
8000579c:	4c 20       	ld.w %d15,[%a2]0
8000579e:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800057a2:	6c 20       	st.w [%a2]0,%d15
=======
80005740:	4c 20       	ld.w %d15,[%a2]0
80005742:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80005746:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057d0:	4c 20       	ld.w %d15,[%a2]0
800057d2:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800057d6:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
800057a4:	4c f4       	ld.w %d15,[%a15]16
=======
80005748:	4c f4       	ld.w %d15,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057d8:	4c f4       	ld.w %d15,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
<<<<<<< HEAD
<<<<<<< HEAD
800057a6:	02 92       	mov %d2,%d9
800057a8:	96 02       	or %d15,2
800057aa:	68 4f       	st.w [%a15]16,%d15
=======
8000574a:	02 92       	mov %d2,%d9
8000574c:	96 02       	or %d15,2
8000574e:	68 4f       	st.w [%a15]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057da:	02 92       	mov %d2,%d9
800057dc:	96 02       	or %d15,2
800057de:	68 4f       	st.w [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
800057ac:	4c f3       	ld.w %d15,[%a15]12
800057ae:	96 02       	or %d15,2
800057b0:	68 3f       	st.w [%a15]12,%d15
=======
80005750:	4c f3       	ld.w %d15,[%a15]12
80005752:	96 02       	or %d15,2
80005754:	68 3f       	st.w [%a15]12,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057e0:	4c f3       	ld.w %d15,[%a15]12
800057e2:	96 02       	or %d15,2
800057e4:	68 3f       	st.w [%a15]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800057b2:	4c f4       	ld.w %d15,[%a15]16
800057b4:	96 01       	or %d15,1
800057b6:	68 4f       	st.w [%a15]16,%d15
=======
80005756:	4c f4       	ld.w %d15,[%a15]16
80005758:	96 01       	or %d15,1
8000575a:	68 4f       	st.w [%a15]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057e6:	4c f4       	ld.w %d15,[%a15]16
800057e8:	96 01       	or %d15,1
800057ea:	68 4f       	st.w [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800057b8:	4c f3       	ld.w %d15,[%a15]12
800057ba:	96 01       	or %d15,1
800057bc:	68 3f       	st.w [%a15]12,%d15
800057be:	00 90       	ret 

800057c0 <IfxAsclin_Asc_initModuleConfig>:
=======
8000575c:	4c f3       	ld.w %d15,[%a15]12
8000575e:	96 01       	or %d15,1
80005760:	68 3f       	st.w [%a15]12,%d15
80005762:	00 90       	ret 

80005764 <IfxAsclin_Asc_initModuleConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057ec:	4c f3       	ld.w %d15,[%a15]12
800057ee:	96 01       	or %d15,1
800057f0:	68 3f       	st.w [%a15]12,%d15
800057f2:	00 90       	ret 

800057f4 <IfxAsclin_Asc_initModuleConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
<<<<<<< HEAD
<<<<<<< HEAD
800057c0:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800057c2:	7b 10 7e 34 	movh %d3,18401
=======
80005764:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005766:	7b 10 7e 34 	movh %d3,18401
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057f4:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800057f6:	7b 10 7e 34 	movh %d3,18401
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
<<<<<<< HEAD
<<<<<<< HEAD
800057c6:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800057ca:	82 12       	mov %d2,1
=======
8000576a:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000576e:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800057fa:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800057fe:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
<<<<<<< HEAD
<<<<<<< HEAD
800057cc:	82 0f       	mov %d15,0
=======
80005770:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005800:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
<<<<<<< HEAD
<<<<<<< HEAD
800057ce:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800057d2:	59 43 04 00 	st.w [%a4]4,%d3
=======
80005772:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005776:	59 43 04 00 	st.w [%a4]4,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005802:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005806:	59 43 04 00 	st.w [%a4]4,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
<<<<<<< HEAD
<<<<<<< HEAD
800057d6:	e9 42 0f 00 	st.b [%a4]15,%d2
=======
8000577a:	e9 42 0f 00 	st.b [%a4]15,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000580a:	e9 42 0f 00 	st.b [%a4]15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
<<<<<<< HEAD
<<<<<<< HEAD
800057da:	82 33       	mov %d3,3
=======
8000577e:	82 33       	mov %d3,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000580e:	82 33       	mov %d3,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
<<<<<<< HEAD
<<<<<<< HEAD
800057dc:	e9 42 10 00 	st.b [%a4]16,%d2
=======
80005780:	e9 42 10 00 	st.b [%a4]16,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005810:	e9 42 10 00 	st.b [%a4]16,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
<<<<<<< HEAD
<<<<<<< HEAD
800057e0:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
800057e4:	e9 42 17 00 	st.b [%a4]23,%d2
=======
80005784:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005788:	e9 42 17 00 	st.b [%a4]23,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005814:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005818:	e9 42 17 00 	st.b [%a4]23,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
<<<<<<< HEAD
<<<<<<< HEAD
800057e8:	82 f2       	mov %d2,-1
=======
8000578c:	82 f2       	mov %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000581c:	82 f2       	mov %d2,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
<<<<<<< HEAD
<<<<<<< HEAD
800057ea:	e9 4f 38 00 	st.b [%a4]56,%d15
=======
8000578e:	e9 4f 38 00 	st.b [%a4]56,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000581e:	e9 4f 38 00 	st.b [%a4]56,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
<<<<<<< HEAD
<<<<<<< HEAD
800057ee:	e9 43 0a 00 	st.b [%a4]10,%d3
=======
80005822:	e9 43 0a 00 	st.b [%a4]10,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
80005826:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80005828:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
8000582c:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
8000582e:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
80005832:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
80005836:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
<<<<<<< HEAD
80005806:	82 73       	mov %d3,7
=======
80005792:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
80005796:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80005798:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
8000579c:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
8000579e:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
800057a2:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
800057a6:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800057aa:	82 73       	mov %d3,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000583a:	82 73       	mov %d3,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
<<<<<<< HEAD
<<<<<<< HEAD
80005808:	e9 4f 18 00 	st.b [%a4]24,%d15
=======
8000583c:	e9 4f 18 00 	st.b [%a4]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
80005840:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
<<<<<<< HEAD
80005810:	e9 4f 1a 00 	st.b [%a4]26,%d15
=======
800057ac:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
800057b0:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
800057b4:	e9 4f 1a 00 	st.b [%a4]26,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005844:	e9 4f 1a 00 	st.b [%a4]26,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
<<<<<<< HEAD
<<<<<<< HEAD
80005814:	e9 42 29 00 	st.b [%a4]41,%d2
=======
800057b8:	e9 42 29 00 	st.b [%a4]41,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005848:	e9 42 29 00 	st.b [%a4]41,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
<<<<<<< HEAD
<<<<<<< HEAD
80005818:	82 0f       	mov %d15,0
=======
800057bc:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000584c:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
<<<<<<< HEAD
<<<<<<< HEAD
8000581a:	82 02       	mov %d2,0
=======
800057be:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000584e:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
<<<<<<< HEAD
<<<<<<< HEAD
8000581c:	f4 45       	st.a [%a4],%a5
=======
800057c0:	f4 45       	st.a [%a4],%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005850:	f4 45       	st.a [%a4],%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
<<<<<<< HEAD
<<<<<<< HEAD
8000581e:	e9 43 13 00 	st.b [%a4]19,%d3
=======
800057c2:	e9 43 13 00 	st.b [%a4]19,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005852:	e9 43 13 00 	st.b [%a4]19,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
<<<<<<< HEAD
<<<<<<< HEAD
80005822:	ac 4f       	st.h [%a4]30,%d15
=======
80005856:	ac 4f       	st.h [%a4]30,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
80005858:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
8000585a:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
<<<<<<< HEAD
8000582a:	e9 4f 22 00 	st.b [%a4]34,%d15
=======
800057c6:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
800057c8:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
800057ca:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
800057ce:	e9 4f 22 00 	st.b [%a4]34,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000585e:	e9 4f 22 00 	st.b [%a4]34,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
<<<<<<< HEAD
<<<<<<< HEAD
8000582e:	59 42 24 00 	st.w [%a4]36,%d2
=======
80005862:	59 42 24 00 	st.w [%a4]36,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
80005866:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
8000586a:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000586e:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80005872:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
80005876:	e9 4f 39 00 	st.b [%a4]57,%d15
8000587a:	00 90       	ret 

<<<<<<< HEAD
80005848 <IfxAsclin_Asc_initiateTransmission>:
=======
800057d2:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
800057d6:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
800057da:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057de:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800057e2:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
800057e6:	e9 4f 39 00 	st.b [%a4]57,%d15
800057ea:	00 90       	ret 

800057ec <IfxAsclin_Asc_initiateTransmission>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000587c <IfxAsclin_Asc_initiateTransmission>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
<<<<<<< HEAD
<<<<<<< HEAD
80005848:	0c 4c       	ld.bu %d15,[%a4]12
=======
800057ec:	0c 4c       	ld.bu %d15,[%a4]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000587c:	0c 4c       	ld.bu %d15,[%a4]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000584a:	20 10       	sub.a %sp,16
8000584c:	40 4f       	mov.aa %a15,%a4
=======
8000587e:	20 10       	sub.a %sp,16
80005880:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
80005882:	ee 20       	jnz %d15,800058c2 <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
<<<<<<< HEAD
80005850:	99 44 04 00 	ld.a %a4,[%a4]4
80005854:	8c 42       	ld.h %d15,[%a4]4
80005856:	6e 1c       	jz %d15,8000588e <IfxAsclin_Asc_initiateTransmission+0x46>
=======
800057ee:	20 10       	sub.a %sp,16
800057f0:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800057f2:	ee 20       	jnz %d15,80005832 <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800057f4:	99 44 04 00 	ld.a %a4,[%a4]4
800057f8:	8c 42       	ld.h %d15,[%a4]4
800057fa:	6e 1c       	jz %d15,80005832 <IfxAsclin_Asc_initiateTransmission+0x46>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005884:	99 44 04 00 	ld.a %a4,[%a4]4
80005888:	8c 42       	ld.h %d15,[%a4]4
8000588a:	6e 1c       	jz %d15,800058c2 <IfxAsclin_Asc_initiateTransmission+0x46>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            uint8 data;

            asclin->txInProgress = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80005858:	82 1f       	mov %d15,1
8000585a:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
8000585c:	0c ff       	ld.bu %d15,[%a15]15
8000585e:	6e 0c       	jz %d15,80005876 <IfxAsclin_Asc_initiateTransmission+0x2e>
80005860:	de 11       	jne %d15,1,80005882 <IfxAsclin_Asc_initiateTransmission+0x3a>
=======
800057fc:	82 1f       	mov %d15,1
800057fe:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
80005800:	0c ff       	ld.bu %d15,[%a15]15
80005802:	6e 0c       	jz %d15,8000581a <IfxAsclin_Asc_initiateTransmission+0x2e>
80005804:	de 11       	jne %d15,1,80005826 <IfxAsclin_Asc_initiateTransmission+0x3a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000588c:	82 1f       	mov %d15,1
8000588e:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
80005890:	0c ff       	ld.bu %d15,[%a15]15
80005892:	6e 0c       	jz %d15,800058aa <IfxAsclin_Asc_initiateTransmission+0x2e>
80005894:	de 11       	jne %d15,1,800058b6 <IfxAsclin_Asc_initiateTransmission+0x3a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
<<<<<<< HEAD
<<<<<<< HEAD
80005862:	d2 06       	mov %e6,0
80005864:	d9 a5 04 00 	lea %a5,[%sp]4
80005868:	3b c0 00 40 	mov %d4,12
8000586c:	6d 00 f0 15 	call 8000844c <Ifx_Fifo_read>
                data = packedData.data;
80005870:	0c ac       	ld.bu %d15,[%sp]12
80005872:	2c a3       	st.b [%sp]3,%d15
80005874:	3c 07       	j 80005882 <IfxAsclin_Asc_initiateTransmission+0x3a>
=======
80005806:	d2 06       	mov %e6,0
80005808:	d9 a5 04 00 	lea %a5,[%sp]4
8000580c:	3b c0 00 40 	mov %d4,12
80005810:	6d 00 f0 15 	call 800083f0 <Ifx_Fifo_read>
                data = packedData.data;
80005814:	0c ac       	ld.bu %d15,[%sp]12
80005816:	2c a3       	st.b [%sp]3,%d15
80005818:	3c 07       	j 80005826 <IfxAsclin_Asc_initiateTransmission+0x3a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005896:	d2 06       	mov %e6,0
80005898:	d9 a5 04 00 	lea %a5,[%sp]4
8000589c:	3b c0 00 40 	mov %d4,12
800058a0:	6d 00 f0 15 	call 80008480 <Ifx_Fifo_read>
                data = packedData.data;
800058a4:	0c ac       	ld.bu %d15,[%sp]12
800058a6:	2c a3       	st.b [%sp]3,%d15
800058a8:	3c 07       	j 800058b6 <IfxAsclin_Asc_initiateTransmission+0x3a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
<<<<<<< HEAD
<<<<<<< HEAD
80005876:	d2 06       	mov %e6,0
80005878:	d9 a5 03 00 	lea %a5,[%sp]3
8000587c:	82 14       	mov %d4,1
8000587e:	6d 00 e7 15 	call 8000844c <Ifx_Fifo_read>
=======
8000581a:	d2 06       	mov %e6,0
8000581c:	d9 a5 03 00 	lea %a5,[%sp]3
80005820:	82 14       	mov %d4,1
80005822:	6d 00 e7 15 	call 800083f0 <Ifx_Fifo_read>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058aa:	d2 06       	mov %e6,0
800058ac:	d9 a5 03 00 	lea %a5,[%sp]3
800058b0:	82 14       	mov %d4,1
800058b2:	6d 00 e7 15 	call 80008480 <Ifx_Fifo_read>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
<<<<<<< HEAD
<<<<<<< HEAD
80005882:	c8 04       	ld.a %a4,[%a15]0
80005884:	d9 a5 03 00 	lea %a5,[%sp]3
80005888:	82 14       	mov %d4,1
8000588a:	6d ff 34 fc 	call 800050f2 <IfxAsclin_write8>
8000588e:	00 90       	ret 

80005890 <IfxAsclin_Asc_write>:
=======
80005826:	c8 04       	ld.a %a4,[%a15]0
80005828:	d9 a5 03 00 	lea %a5,[%sp]3
8000582c:	82 14       	mov %d4,1
8000582e:	6d ff 34 fc 	call 80005096 <IfxAsclin_write8>
80005832:	00 90       	ret 

80005834 <IfxAsclin_Asc_write>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058b6:	c8 04       	ld.a %a4,[%a15]0
800058b8:	d9 a5 03 00 	lea %a5,[%sp]3
800058bc:	82 14       	mov %d4,1
800058be:	6d ff 34 fc 	call 80005126 <IfxAsclin_write8>
800058c2:	00 90       	ret 

800058c4 <IfxAsclin_Asc_write>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005890:	40 4f       	mov.aa %a15,%a4
=======
80005834:	40 4f       	mov.aa %a15,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058c4:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
<<<<<<< HEAD
<<<<<<< HEAD
80005892:	0c 4c       	ld.bu %d15,[%a4]12
=======
800058c6:	0c 4c       	ld.bu %d15,[%a4]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058c8:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
<<<<<<< HEAD
80005898:	94 63       	ld.h %d3,[%a6]
=======
80005836:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005838:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
8000583c:	94 63       	ld.h %d3,[%a6]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058cc:	94 63       	ld.h %d3,[%a6]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000589a:	0b 45 10 88 	mov %e8,%d5,%d4
8000589e:	40 5d       	mov.aa %a13,%a5
=======
8000583e:	0b 45 10 88 	mov %e8,%d5,%d4
80005842:	40 5d       	mov.aa %a13,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058ce:	0b 45 10 88 	mov %e8,%d5,%d4
800058d2:	40 5d       	mov.aa %a13,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
<<<<<<< HEAD
<<<<<<< HEAD
800058a0:	c9 44 18 00 	ld.h %d4,[%a4]24
=======
80005844:	c9 44 18 00 	ld.h %d4,[%a4]24
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058d4:	c9 44 18 00 	ld.h %d4,[%a4]24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
800058a4:	82 12       	mov %d2,1
=======
80005848:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058d8:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
<<<<<<< HEAD
<<<<<<< HEAD
800058a6:	df 03 25 00 	jeq %d3,0,800058f0 <IfxAsclin_Asc_write+0x60>
800058aa:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
800058ac:	ee 13       	jnz %d15,800058d2 <IfxAsclin_Asc_write+0x42>
=======
8000584a:	df 03 25 00 	jeq %d3,0,80005894 <IfxAsclin_Asc_write+0x60>
8000584e:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005850:	ee 13       	jnz %d15,80005876 <IfxAsclin_Asc_write+0x42>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058da:	df 03 25 00 	jeq %d3,0,80005924 <IfxAsclin_Asc_write+0x60>
800058de:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
800058e0:	ee 13       	jnz %d15,80005906 <IfxAsclin_Asc_write+0x42>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
<<<<<<< HEAD
<<<<<<< HEAD
800058ae:	37 04 70 f0 	extr.u %d15,%d4,0,16
=======
80005852:	37 04 70 f0 	extr.u %d15,%d4,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058e2:	37 04 70 f0 	extr.u %d15,%d4,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
<<<<<<< HEAD
<<<<<<< HEAD
800058b2:	7f 3f 10 00 	jge %d15,%d3,800058d2 <IfxAsclin_Asc_write+0x42>
=======
80005856:	7f 3f 10 00 	jge %d15,%d3,80005876 <IfxAsclin_Asc_write+0x42>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058e6:	7f 3f 10 00 	jge %d15,%d3,80005906 <IfxAsclin_Asc_write+0x42>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
<<<<<<< HEAD
<<<<<<< HEAD
800058b6:	0b 89 10 68 	mov %e6,%d9,%d8
800058ba:	6d 00 17 17 	call 800086e8 <Ifx_Fifo_write>
=======
800058ea:	0b 89 10 68 	mov %e6,%d9,%d8
800058ee:	6d 00 17 17 	call 8000871c <Ifx_Fifo_write>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            IfxAsclin_Asc_initiateTransmission(asclin);
800058f2:	40 f4       	mov.aa %a4,%a15
800058f4:	6d ff c4 ff 	call 8000587c <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
<<<<<<< HEAD
800058c4:	94 c4       	ld.h %d4,[%a12]
800058c6:	c8 14       	ld.a %a4,[%a15]4
800058c8:	a2 f4       	sub %d4,%d15
800058ca:	10 d5       	addsc.a %a5,%a13,%d15,0
800058cc:	37 04 50 40 	extr %d4,%d4,0,16
800058d0:	3c 03       	j 800058d6 <IfxAsclin_Asc_write+0x46>
=======
8000585a:	0b 89 10 68 	mov %e6,%d9,%d8
8000585e:	6d 00 17 17 	call 8000868c <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
80005862:	40 f4       	mov.aa %a4,%a15
80005864:	6d ff c4 ff 	call 800057ec <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005868:	94 c4       	ld.h %d4,[%a12]
8000586a:	c8 14       	ld.a %a4,[%a15]4
8000586c:	a2 f4       	sub %d4,%d15
8000586e:	10 d5       	addsc.a %a5,%a13,%d15,0
80005870:	37 04 50 40 	extr %d4,%d4,0,16
80005874:	3c 03       	j 8000587a <IfxAsclin_Asc_write+0x46>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800058f8:	94 c4       	ld.h %d4,[%a12]
800058fa:	c8 14       	ld.a %a4,[%a15]4
800058fc:	a2 f4       	sub %d4,%d15
800058fe:	10 d5       	addsc.a %a5,%a13,%d15,0
80005900:	37 04 50 40 	extr %d4,%d4,0,16
80005904:	3c 03       	j 8000590a <IfxAsclin_Asc_write+0x46>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
<<<<<<< HEAD
<<<<<<< HEAD
800058d2:	40 d5       	mov.aa %a5,%a13
800058d4:	02 34       	mov %d4,%d3
800058d6:	0b 89 10 68 	mov %e6,%d9,%d8
800058da:	6d 00 07 17 	call 800086e8 <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
800058de:	40 f4       	mov.aa %a4,%a15
=======
80005876:	40 d5       	mov.aa %a5,%a13
80005878:	02 34       	mov %d4,%d3
8000587a:	0b 89 10 68 	mov %e6,%d9,%d8
8000587e:	6d 00 07 17 	call 8000868c <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
80005882:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005906:	40 d5       	mov.aa %a5,%a13
80005908:	02 34       	mov %d4,%d3
8000590a:	0b 89 10 68 	mov %e6,%d9,%d8
8000590e:	6d 00 07 17 	call 8000871c <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
80005912:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
<<<<<<< HEAD
<<<<<<< HEAD
800058e0:	02 2f       	mov %d15,%d2
=======
80005914:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

            IfxAsclin_Asc_initiateTransmission(asclin);
80005916:	6d ff b3 ff 	call 8000587c <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
8000591a:	94 c2       	ld.h %d2,[%a12]
8000591c:	a2 f2       	sub %d2,%d15
8000591e:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
<<<<<<< HEAD
800058ec:	8b 0f 00 22 	eq %d2,%d15,0
=======
80005884:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
80005886:	6d ff b3 ff 	call 800057ec <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
8000588a:	94 c2       	ld.h %d2,[%a12]
8000588c:	a2 f2       	sub %d2,%d15
8000588e:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
80005890:	8b 0f 00 22 	eq %d2,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005920:	8b 0f 00 22 	eq %d2,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
800058f0:	00 90       	ret 

800058f2 <IfxAsclin_Asc_blockingWrite>:
=======
80005894:	00 90       	ret 

80005896 <IfxAsclin_Asc_blockingWrite>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005924:	00 90       	ret 

80005926 <IfxAsclin_Asc_blockingWrite>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
<<<<<<< HEAD
<<<<<<< HEAD
800058f2:	20 10       	sub.a %sp,16
800058f4:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058f8:	82 f4       	mov %d4,-1
=======
80005896:	20 10       	sub.a %sp,16
80005898:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
8000589c:	82 f4       	mov %d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005926:	20 10       	sub.a %sp,16
80005928:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
8000592c:	82 f4       	mov %d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800058fa:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058fc:	d9 a5 07 00 	lea %a5,[%sp]7
80005900:	d9 a6 0e 00 	lea %a6,[%sp]14
80005904:	9b 04 00 58 	addih %d5,%d4,32768
=======
8000589e:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058a0:	d9 a5 07 00 	lea %a5,[%sp]7
800058a4:	d9 a6 0e 00 	lea %a6,[%sp]14
800058a8:	9b 04 00 58 	addih %d5,%d4,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000592e:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
80005930:	d9 a5 07 00 	lea %a5,[%sp]7
80005934:	d9 a6 0e 00 	lea %a6,[%sp]14
80005938:	9b 04 00 58 	addih %d5,%d4,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005908:	ac a7       	st.h [%sp]14,%d15
=======
8000593c:	ac a7       	st.h [%sp]14,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
8000593e:	1d ff c3 ff 	j 800058c4 <IfxAsclin_Asc_write>

<<<<<<< HEAD
8000590e <IfxAsclin_Asc_stdIfDPipeInit>:
=======
800058ac:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
800058ae:	1d ff c3 ff 	j 80005834 <IfxAsclin_Asc_write>

800058b2 <IfxAsclin_Asc_stdIfDPipeInit>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005942 <IfxAsclin_Asc_stdIfDPipeInit>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
<<<<<<< HEAD
<<<<<<< HEAD
8000590e:	40 42       	mov.aa %a2,%a4
80005910:	82 0f       	mov %d15,0
80005912:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
80005916:	24 2f       	st.b [%a2+],%d15
80005918:	fc ff       	loop %a15,80005916 <IfxAsclin_Asc_stdIfDPipeInit+0x8>
=======
800058b2:	40 42       	mov.aa %a2,%a4
800058b4:	82 0f       	mov %d15,0
800058b6:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
800058ba:	24 2f       	st.b [%a2+],%d15
800058bc:	fc ff       	loop %a15,800058ba <IfxAsclin_Asc_stdIfDPipeInit+0x8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005942:	40 42       	mov.aa %a2,%a4
80005944:	82 0f       	mov %d15,0
80005946:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
8000594a:	24 2f       	st.b [%a2+],%d15
8000594c:	fc ff       	loop %a15,8000594a <IfxAsclin_Asc_stdIfDPipeInit+0x8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
<<<<<<< HEAD
<<<<<<< HEAD
8000591a:	7b 00 00 f8 	movh %d15,32768
8000591e:	1b 0f 89 f5 	addi %d15,%d15,22672
80005922:	6c 42       	st.w [%a4]8,%d15
=======
8000594e:	7b 00 00 f8 	movh %d15,32768
80005952:	1b 4f 8c f5 	addi %d15,%d15,22724
80005956:	6c 42       	st.w [%a4]8,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
80005958:	7b 00 00 f8 	movh %d15,32768
8000595c:	1b 4f 2b f5 	addi %d15,%d15,21172
80005960:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
80005962:	7b 00 00 f8 	movh %d15,32768
80005966:	1b 8f 13 f5 	addi %d15,%d15,20792
8000596a:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
8000596c:	7b 00 00 f8 	movh %d15,32768
80005970:	1b ef 13 f5 	addi %d15,%d15,20798
80005974:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
80005976:	7b 00 00 f8 	movh %d15,32768
8000597a:	1b 4f 15 f5 	addi %d15,%d15,20820
8000597e:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
80005980:	7b 00 00 f8 	movh %d15,32768
80005984:	1b 2f 16 f5 	addi %d15,%d15,20834
80005988:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
8000598a:	7b 00 00 f8 	movh %d15,32768
8000598e:	1b 4f 1e f5 	addi %d15,%d15,20964
80005992:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005994:	7b 00 00 f8 	movh %d15,32768
80005998:	1b 8f 28 f5 	addi %d15,%d15,21128
8000599c:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000599e:	7b 00 00 f8 	movh %d15,32768
800059a2:	1b cf 1e f5 	addi %d15,%d15,20972
800059a6:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
800059a8:	7b 00 00 f8 	movh %d15,32768
800059ac:	1b 0f 2a f5 	addi %d15,%d15,21152
800059b0:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
800059b2:	7b 00 00 f8 	movh %d15,32768
800059b6:	1b 0f 29 f5 	addi %d15,%d15,21136
800059ba:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
800059bc:	7b 00 00 f8 	movh %d15,32768
800059c0:	1b ef 36 f5 	addi %d15,%d15,21358
800059c4:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
800059c6:	7b 00 00 f8 	movh %d15,32768
800059ca:	1b 0f 2d f5 	addi %d15,%d15,21200
800059ce:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
800059d0:	7b 00 00 f8 	movh %d15,32768
800059d4:	1b cf 16 f5 	addi %d15,%d15,20844
800059d8:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
800059da:	7b 00 00 f8 	movh %d15,32768
800059de:	1b 8f 14 f5 	addi %d15,%d15,20808
800059e2:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
800059e6:	7b 00 00 f8 	movh %d15,32768
800059ea:	1b ef 14 f5 	addi %d15,%d15,20814
800059ee:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
800059f2:	7b 00 00 f8 	movh %d15,32768
800059f6:	1b ef 1d f5 	addi %d15,%d15,20958
800059fa:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
<<<<<<< HEAD
800059ca:	82 0f       	mov %d15,0
=======
800058be:	7b 00 00 f8 	movh %d15,32768
800058c2:	1b 4f 83 f5 	addi %d15,%d15,22580
800058c6:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
800058c8:	7b 00 00 f8 	movh %d15,32768
800058cc:	1b 4f 22 f5 	addi %d15,%d15,21028
800058d0:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
800058d2:	7b 00 00 f8 	movh %d15,32768
800058d6:	1b 8f 0a f5 	addi %d15,%d15,20648
800058da:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
800058dc:	7b 00 00 f8 	movh %d15,32768
800058e0:	1b ef 0a f5 	addi %d15,%d15,20654
800058e4:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
800058e6:	7b 00 00 f8 	movh %d15,32768
800058ea:	1b 4f 0c f5 	addi %d15,%d15,20676
800058ee:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
800058f0:	7b 00 00 f8 	movh %d15,32768
800058f4:	1b 2f 0d f5 	addi %d15,%d15,20690
800058f8:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
800058fa:	7b 00 00 f8 	movh %d15,32768
800058fe:	1b 4f 15 f5 	addi %d15,%d15,20820
80005902:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005904:	7b 00 00 f8 	movh %d15,32768
80005908:	1b 8f 1f f5 	addi %d15,%d15,20984
8000590c:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000590e:	7b 00 00 f8 	movh %d15,32768
80005912:	1b cf 15 f5 	addi %d15,%d15,20828
80005916:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005918:	7b 00 00 f8 	movh %d15,32768
8000591c:	1b 0f 21 f5 	addi %d15,%d15,21008
80005920:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
80005922:	7b 00 00 f8 	movh %d15,32768
80005926:	1b 0f 20 f5 	addi %d15,%d15,20992
8000592a:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
8000592c:	7b 00 00 f8 	movh %d15,32768
80005930:	1b ef 2d f5 	addi %d15,%d15,21214
80005934:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80005936:	7b 00 00 f8 	movh %d15,32768
8000593a:	1b 0f 24 f5 	addi %d15,%d15,21056
8000593e:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
80005940:	7b 00 00 f8 	movh %d15,32768
80005944:	1b cf 0d f5 	addi %d15,%d15,20700
80005948:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
8000594a:	7b 00 00 f8 	movh %d15,32768
8000594e:	1b 8f 0b f5 	addi %d15,%d15,20664
80005952:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80005956:	7b 00 00 f8 	movh %d15,32768
8000595a:	1b ef 0b f5 	addi %d15,%d15,20670
8000595e:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
80005962:	7b 00 00 f8 	movh %d15,32768
80005966:	1b ef 14 f5 	addi %d15,%d15,20814
8000596a:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
8000596e:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800059fe:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
<<<<<<< HEAD
<<<<<<< HEAD
800059cc:	f4 45       	st.a [%a4],%a5
=======
80005970:	f4 45       	st.a [%a4],%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a00:	f4 45       	st.a [%a4],%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
800059ce:	2c 44       	st.b [%a4]4,%d15
=======
80005a02:	2c 44       	st.b [%a4]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return TRUE;
}
80005a04:	82 12       	mov %d2,1
80005a06:	00 90       	ret 

<<<<<<< HEAD
800059d4 <IfxPort_getAddress>:
=======
80005972:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
80005974:	82 12       	mov %d2,1
80005976:	00 90       	ret 

80005978 <IfxPort_getAddress>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a08 <IfxPort_getAddress>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
<<<<<<< HEAD
<<<<<<< HEAD
800059d4:	91 00 00 28 	movh.a %a2,32768
=======
80005978:	91 00 00 28 	movh.a %a2,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a08:	91 00 00 28 	movh.a %a2,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
<<<<<<< HEAD
<<<<<<< HEAD
800059d8:	82 05       	mov %d5,0
=======
8000597c:	82 05       	mov %d5,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a0c:	82 05       	mov %d5,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
<<<<<<< HEAD
<<<<<<< HEAD
800059da:	82 02       	mov %d2,0
=======
8000597e:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a0e:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
<<<<<<< HEAD
<<<<<<< HEAD
800059dc:	d9 22 80 70 	lea %a2,[%a2]2496 <800009c0 <IfxPort_cfg_indexMap>>
=======
80005980:	d9 22 9c 50 	lea %a2,[%a2]2396 <8000095c <IfxPort_cfg_indexMap>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a10:	d9 22 98 70 	lea %a2,[%a2]2520 <800009d8 <IfxPort_cfg_indexMap>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
<<<<<<< HEAD
<<<<<<< HEAD
800059e0:	8f f5 0f f1 	and %d15,%d5,255
800059e4:	8b 02 00 32 	eq %d3,%d2,0
800059e8:	8b 0f 61 34 	and.lt.u %d3,%d15,16
800059ec:	76 3a       	jz %d3,80005a00 <IfxPort_getAddress+0x2c>
800059ee:	02 5f       	mov %d15,%d5
800059f0:	16 ff       	and %d15,255
=======
80005a14:	8f f5 0f f1 	and %d15,%d5,255
80005a18:	8b 02 00 32 	eq %d3,%d2,0
80005a1c:	8b 0f 61 34 	and.lt.u %d3,%d15,16
80005a20:	76 3a       	jz %d3,80005a34 <IfxPort_getAddress+0x2c>
80005a22:	02 5f       	mov %d15,%d5
80005a24:	16 ff       	and %d15,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005a26:	d0 2f       	addsc.a %a15,%a2,%d15,3
80005a28:	82 02       	mov %d2,0
80005a2a:	4c f1       	ld.w %d15,[%a15]4
80005a2c:	7e 42       	jne %d15,%d4,80005a30 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
<<<<<<< HEAD
800059fa:	48 02       	ld.w %d2,[%a15]0
800059fc:	c2 15       	add %d5,1
800059fe:	3c f1       	j 800059e0 <IfxPort_getAddress+0xc>
=======
80005984:	8f f5 0f f1 	and %d15,%d5,255
80005988:	8b 02 00 32 	eq %d3,%d2,0
8000598c:	8b 0f 61 34 	and.lt.u %d3,%d15,16
80005990:	76 3a       	jz %d3,800059a4 <IfxPort_getAddress+0x2c>
80005992:	02 5f       	mov %d15,%d5
80005994:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005996:	d0 2f       	addsc.a %a15,%a2,%d15,3
80005998:	82 02       	mov %d2,0
8000599a:	4c f1       	ld.w %d15,[%a15]4
8000599c:	7e 42       	jne %d15,%d4,800059a0 <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
8000599e:	48 02       	ld.w %d2,[%a15]0
800059a0:	c2 15       	add %d5,1
800059a2:	3c f1       	j 80005984 <IfxPort_getAddress+0xc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a2e:	48 02       	ld.w %d2,[%a15]0
80005a30:	c2 15       	add %d5,1
80005a32:	3c f1       	j 80005a14 <IfxPort_getAddress+0xc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        i++;
    }

    return module;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005a00:	60 22       	mov.a %a2,%d2
80005a02:	00 90       	ret 

80005a04 <IfxPort_getIndex>:
=======
800059a4:	60 22       	mov.a %a2,%d2
800059a6:	00 90       	ret 

800059a8 <IfxPort_getIndex>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a34:	60 22       	mov.a %a2,%d2
80005a36:	00 90       	ret 

80005a38 <IfxPort_getIndex>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
<<<<<<< HEAD
<<<<<<< HEAD
80005a04:	91 00 00 38 	movh.a %a3,32768
=======
800059a8:	91 00 00 38 	movh.a %a3,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a38:	91 00 00 38 	movh.a %a3,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
<<<<<<< HEAD
<<<<<<< HEAD
80005a08:	82 0f       	mov %d15,0
=======
80005a3c:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if (IfxPort_cfg_indexMap[index].module == port)
80005a3e:	d9 33 98 70 	lea %a3,[%a3]2520 <800009d8 <IfxPort_cfg_indexMap>>
80005a42:	a0 ff       	mov.a %a15,15
80005a44:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a46:	d4 25       	ld.a %a5,[%a2]
80005a48:	7d 45 05 80 	jne.a %a5,%a4,80005a52 <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
80005a4c:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
<<<<<<< HEAD
80005a1c:	00 90       	ret 
=======
800059ac:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800059ae:	d9 33 9c 50 	lea %a3,[%a3]2396 <8000095c <IfxPort_cfg_indexMap>>
800059b2:	a0 ff       	mov.a %a15,15
800059b4:	d0 32       	addsc.a %a2,%a3,%d15,3
800059b6:	d4 25       	ld.a %a5,[%a2]
800059b8:	7d 45 05 80 	jne.a %a5,%a4,800059c2 <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
800059bc:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
800059c0:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a50:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
<<<<<<< HEAD
<<<<<<< HEAD
80005a1e:	c2 1f       	add %d15,1
80005a20:	fc f8       	loop %a15,80005a10 <IfxPort_getIndex+0xc>
=======
800059c2:	c2 1f       	add %d15,1
800059c4:	fc f8       	loop %a15,800059b4 <IfxPort_getIndex+0xc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a52:	c2 1f       	add %d15,1
80005a54:	fc f8       	loop %a15,80005a44 <IfxPort_getIndex+0xc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
<<<<<<< HEAD
<<<<<<< HEAD
80005a22:	82 f2       	mov %d2,-1
=======
800059c6:	82 f2       	mov %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a56:	82 f2       	mov %d2,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        }
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005a24:	00 90       	ret 

80005a26 <IfxPort_resetESR>:
=======
800059c8:	00 90       	ret 

800059ca <IfxPort_resetESR>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a58:	00 90       	ret 

80005a5a <IfxPort_resetESR>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005a26:	40 4f       	mov.aa %a15,%a4
80005a28:	02 48       	mov %d8,%d4
=======
80005a5a:	40 4f       	mov.aa %a15,%a4
80005a5c:	02 48       	mov %d8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a5e:	6d 00 ac 0c 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80005a2e:	02 24       	mov %d4,%d2
=======
800059ca:	40 4f       	mov.aa %a15,%a4
800059cc:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800059ce:	6d 00 ac 0c 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
800059d2:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a62:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005a30:	02 2f       	mov %d15,%d2
=======
80005a64:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_clearCpuEndinit(passwd);
80005a66:	6d 00 a8 0b 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
<<<<<<< HEAD
80005a36:	82 12       	mov %d2,1
80005a38:	d9 f4 10 10 	lea %a4,[%a15]80
80005a3c:	0f 82 00 20 	sh %d2,%d2,%d8
=======
800059d4:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
800059d6:	6d 00 a8 0b 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
800059da:	82 12       	mov %d2,1
800059dc:	d9 f4 10 10 	lea %a4,[%a15]80
800059e0:	0f 82 00 20 	sh %d2,%d2,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a6a:	82 12       	mov %d2,1
80005a6c:	d9 f4 10 10 	lea %a4,[%a15]80
80005a70:	0f 82 00 20 	sh %d2,%d2,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005a40:	d2 06       	mov %e6,0
80005a42:	02 27       	mov %d7,%d2
80005a44:	49 46 40 08 	ldmst [%a4]0,%e6
=======
80005a74:	d2 06       	mov %e6,0
80005a76:	02 27       	mov %d7,%d2
80005a78:	49 46 40 08 	ldmst [%a4]0,%e6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
80005a7c:	02 f4       	mov %d4,%d15
80005a7e:	1d 00 d1 0c 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80005a4e <IfxPort_disableEmergencyStop>:
=======
800059e4:	d2 06       	mov %e6,0
800059e6:	02 27       	mov %d7,%d2
800059e8:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
800059ec:	02 f4       	mov %d4,%d15
800059ee:	1d 00 d1 0c 	j 80007390 <IfxScuWdt_setCpuEndinit>

800059f2 <IfxPort_disableEmergencyStop>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a82 <IfxPort_disableEmergencyStop>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
<<<<<<< HEAD
<<<<<<< HEAD
80005a4e:	91 00 00 38 	movh.a %a3,32768
=======
800059f2:	91 00 00 38 	movh.a %a3,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a82:	91 00 00 38 	movh.a %a3,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
<<<<<<< HEAD
<<<<<<< HEAD
80005a52:	82 0f       	mov %d15,0
=======
80005a86:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a88:	d9 33 98 90 	lea %a3,[%a3]2648 <80000a58 <IfxPort_cfg_esrMasks>>
80005a8c:	a0 ff       	mov.a %a15,15
80005a8e:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a90:	d4 25       	ld.a %a5,[%a2]
80005a92:	7d 54 0c 80 	jne.a %a4,%a5,80005aaa <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
<<<<<<< HEAD
80005a62:	b9 2f 04 00 	ld.hu %d15,[%a2]4
=======
800059f6:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
800059f8:	d9 33 9c 70 	lea %a3,[%a3]2524 <800009dc <IfxPort_cfg_esrMasks>>
800059fc:	a0 ff       	mov.a %a15,15
800059fe:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a00:	d4 25       	ld.a %a5,[%a2]
80005a02:	7d 54 0c 80 	jne.a %a4,%a5,80005a1a <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a06:	b9 2f 04 00 	ld.hu %d15,[%a2]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a96:	b9 2f 04 00 	ld.hu %d15,[%a2]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80005a66:	82 02       	mov %d2,0
=======
80005a0a:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005a9a:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
<<<<<<< HEAD
<<<<<<< HEAD
80005a68:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005a6c:	6e 08       	jz %d15,80005a7c <IfxPort_disableEmergencyStop+0x2e>
=======
80005a9c:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005aa0:	6e 08       	jz %d15,80005ab0 <IfxPort_disableEmergencyStop+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                IfxPort_resetESR(port, pinIndex);
80005aa2:	6d ff dc ff 	call 80005a5a <IfxPort_resetESR>
                result = TRUE;
<<<<<<< HEAD
80005a72:	82 12       	mov %d2,1
80005a74:	00 90       	ret 
=======
80005a0c:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005a10:	6e 08       	jz %d15,80005a20 <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005a12:	6d ff dc ff 	call 800059ca <IfxPort_resetESR>
                result = TRUE;
80005a16:	82 12       	mov %d2,1
80005a18:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005aa6:	82 12       	mov %d2,1
80005aa8:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
<<<<<<< HEAD
<<<<<<< HEAD
80005a76:	c2 1f       	add %d15,1
80005a78:	fc f1       	loop %a15,80005a5a <IfxPort_disableEmergencyStop+0xc>
=======
80005a1a:	c2 1f       	add %d15,1
80005a1c:	fc f1       	loop %a15,800059fe <IfxPort_disableEmergencyStop+0xc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005aaa:	c2 1f       	add %d15,1
80005aac:	fc f1       	loop %a15,80005a8e <IfxPort_disableEmergencyStop+0xc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80005a7a:	82 02       	mov %d2,0
=======
80005a1e:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005aae:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        }
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005a7c:	00 90       	ret 

80005a7e <IfxPort_setESR>:
=======
80005a20:	00 90       	ret 

80005a22 <IfxPort_setESR>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ab0:	00 90       	ret 

80005ab2 <IfxPort_setESR>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005a7e:	40 4f       	mov.aa %a15,%a4
80005a80:	02 48       	mov %d8,%d4
=======
80005ab2:	40 4f       	mov.aa %a15,%a4
80005ab4:	02 48       	mov %d8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ab6:	6d 00 80 0c 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80005a86:	02 24       	mov %d4,%d2
=======
80005a22:	40 4f       	mov.aa %a15,%a4
80005a24:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a26:	6d 00 80 0c 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a2a:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005aba:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005a88:	02 2f       	mov %d15,%d2
=======
80005abc:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_clearCpuEndinit(passwd);
80005abe:	6d 00 7c 0b 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005ac2:	82 12       	mov %d2,1
80005ac4:	0f 82 00 20 	sh %d2,%d2,%d8
80005ac8:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
<<<<<<< HEAD
80005a98:	53 12 40 60 	mul.u %e6,%d2,1
=======
80005a2c:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a2e:	6d 00 7c 0b 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005a32:	82 12       	mov %d2,1
80005a34:	0f 82 00 20 	sh %d2,%d2,%d8
80005a38:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a3c:	53 12 40 60 	mul.u %e6,%d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005acc:	53 12 40 60 	mul.u %e6,%d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005a9c:	02 27       	mov %d7,%d2
80005a9e:	49 46 40 08 	ldmst [%a4]0,%e6
=======
80005ad0:	02 27       	mov %d7,%d2
80005ad2:	49 46 40 08 	ldmst [%a4]0,%e6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
80005ad6:	02 f4       	mov %d4,%d15
80005ad8:	1d 00 a4 0c 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80005aa8 <IfxPort_enableEmergencyStop>:
=======
80005a40:	02 27       	mov %d7,%d2
80005a42:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005a46:	02 f4       	mov %d4,%d15
80005a48:	1d 00 a4 0c 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005a4c <IfxPort_enableEmergencyStop>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005adc <IfxPort_enableEmergencyStop>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005aa8:	82 19       	mov %d9,1
=======
80005a4c:	82 19       	mov %d9,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005adc:	82 19       	mov %d9,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
<<<<<<< HEAD
<<<<<<< HEAD
80005aaa:	91 00 00 d8 	movh.a %a13,32768
=======
80005a4e:	91 00 00 d8 	movh.a %a13,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ade:	91 00 00 d8 	movh.a %a13,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005aae:	40 4c       	mov.aa %a12,%a4
80005ab0:	02 48       	mov %d8,%d4
80005ab2:	0f 49 00 90 	sh %d9,%d9,%d4
=======
80005ae2:	40 4c       	mov.aa %a12,%a4
80005ae4:	02 48       	mov %d8,%d4
80005ae6:	0f 49 00 90 	sh %d9,%d9,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    sint32  portIndex;
    boolean result = FALSE;
80005aea:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005aec:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005aee:	d9 dd 98 90 	lea %a13,[%a13]2648 <80000a58 <IfxPort_cfg_esrMasks>>
80005af2:	d0 df       	addsc.a %a15,%a13,%d15,3
80005af4:	c8 02       	ld.a %a2,[%a15]0
80005af6:	7d 2c 0b 80 	jne.a %a12,%a2,80005b0c <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005afa:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005afe:	26 93       	and %d3,%d9
80005b00:	76 36       	jz %d3,80005b0c <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005b02:	40 c4       	mov.aa %a4,%a12
80005b04:	02 84       	mov %d4,%d8
80005b06:	6d ff d6 ff 	call 80005ab2 <IfxPort_setESR>
                result = TRUE;
<<<<<<< HEAD
80005ad6:	82 12       	mov %d2,1
=======
80005a52:	40 4c       	mov.aa %a12,%a4
80005a54:	02 48       	mov %d8,%d4
80005a56:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005a5a:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a5c:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a5e:	d9 dd 9c 70 	lea %a13,[%a13]2524 <800009dc <IfxPort_cfg_esrMasks>>
80005a62:	d0 df       	addsc.a %a15,%a13,%d15,3
80005a64:	c8 02       	ld.a %a2,[%a15]0
80005a66:	7d 2c 0b 80 	jne.a %a12,%a2,80005a7c <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a6a:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005a6e:	26 93       	and %d3,%d9
80005a70:	76 36       	jz %d3,80005a7c <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005a72:	40 c4       	mov.aa %a4,%a12
80005a74:	02 84       	mov %d4,%d8
80005a76:	6d ff d6 ff 	call 80005a22 <IfxPort_setESR>
                result = TRUE;
80005a7a:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b0a:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
<<<<<<< HEAD
<<<<<<< HEAD
80005ad8:	c2 1f       	add %d15,1
80005ada:	8b 0f 21 32 	ne %d3,%d15,16
80005ade:	df 03 f0 ff 	jne %d3,0,80005abe <IfxPort_enableEmergencyStop+0x16>
=======
80005a7c:	c2 1f       	add %d15,1
80005a7e:	8b 0f 21 32 	ne %d3,%d15,16
80005a82:	df 03 f0 ff 	jne %d3,0,80005a62 <IfxPort_enableEmergencyStop+0x16>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b0c:	c2 1f       	add %d15,1
80005b0e:	8b 0f 21 32 	ne %d3,%d15,16
80005b12:	df 03 f0 ff 	jne %d3,0,80005af2 <IfxPort_enableEmergencyStop+0x16>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
        }
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005ae2:	00 90       	ret 

80005ae4 <IfxPort_setGroupModeInput>:
=======
80005a86:	00 90       	ret 

80005a88 <IfxPort_setGroupModeInput>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b16:	00 90       	ret 

80005b18 <IfxPort_setGroupModeInput>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005ae4:	82 0f       	mov %d15,0
=======
80005a88:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b18:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005ae6:	20 20       	sub.a %sp,32
=======
80005a8a:	20 20       	sub.a %sp,32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b1a:	20 20       	sub.a %sp,32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005ae8:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005aea:	78 04       	st.w [%sp]16,%d15
=======
80005a8c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005a8e:	78 04       	st.w [%sp]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b1c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b1e:	78 04       	st.w [%sp]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005aec:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005aee:	78 05       	st.w [%sp]20,%d15
=======
80005a90:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005a92:	78 05       	st.w [%sp]20,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b20:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b22:	78 05       	st.w [%sp]20,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005af0:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005af2:	78 06       	st.w [%sp]24,%d15
=======
80005a94:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005a96:	78 06       	st.w [%sp]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b24:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b26:	78 06       	st.w [%sp]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005af4:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005af6:	78 07       	st.w [%sp]28,%d15
80005af8:	8b 14 a1 22 	ge.u %d2,%d4,17
=======
80005a98:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005a9a:	78 07       	st.w [%sp]28,%d15
80005a9c:	8b 14 a1 22 	ge.u %d2,%d4,17
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b28:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b2a:	78 07       	st.w [%sp]28,%d15
80005b2c:	8b 14 a1 22 	ge.u %d2,%d4,17
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005afc:	8b 04 01 f1 	rsub %d15,%d4,16
=======
80005aa0:	8b 04 01 f1 	rsub %d15,%d4,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b30:	8b 04 01 f1 	rsub %d15,%d4,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
<<<<<<< HEAD
<<<<<<< HEAD
80005b00:	0f 45 00 50 	sh %d5,%d5,%d4
=======
80005aa4:	0f 45 00 50 	sh %d5,%d5,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b34:	0f 45 00 50 	sh %d5,%d5,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005b04:	3b 80 0f 70 	mov %d7,248
80005b08:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
=======
80005aa8:	3b 80 0f 70 	mov %d7,248
80005aac:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b38:	3b 80 0f 70 	mov %d7,248
80005b3c:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
<<<<<<< HEAD
<<<<<<< HEAD
80005b0c:	9f 0f 07 80 	jned %d15,0,80005b1a <IfxPort_setGroupModeInput+0x36>
80005b10:	d9 44 10 00 	lea %a4,[%a4]16
80005b14:	82 0f       	mov %d15,0
80005b16:	a0 3f       	mov.a %a15,3
80005b18:	3c 1e       	j 80005b54 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005b1a:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b1e:	df 02 19 00 	jeq %d2,0,80005b50 <IfxPort_setGroupModeInput+0x6c>
=======
80005ab0:	9f 0f 07 80 	jned %d15,0,80005abe <IfxPort_setGroupModeInput+0x36>
80005ab4:	d9 44 10 00 	lea %a4,[%a4]16
80005ab8:	82 0f       	mov %d15,0
80005aba:	a0 3f       	mov.a %a15,3
80005abc:	3c 1e       	j 80005af8 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005abe:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005ac2:	df 02 19 00 	jeq %d2,0,80005af4 <IfxPort_setGroupModeInput+0x6c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b40:	9f 0f 07 80 	jned %d15,0,80005b4e <IfxPort_setGroupModeInput+0x36>
80005b44:	d9 44 10 00 	lea %a4,[%a4]16
80005b48:	82 0f       	mov %d15,0
80005b4a:	a0 3f       	mov.a %a15,3
80005b4c:	3c 1e       	j 80005b88 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005b4e:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b52:	df 02 19 00 	jeq %d2,0,80005b84 <IfxPort_setGroupModeInput+0x6c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005b22:	8f 34 c0 31 	andn %d3,%d4,3
80005b26:	60 32       	mov.a %a2,%d3
80005b28:	d9 af 20 00 	lea %a15,[%sp]32
80005b2c:	30 2f       	add.a %a15,%a2
=======
80005ac6:	8f 34 c0 31 	andn %d3,%d4,3
80005aca:	60 32       	mov.a %a2,%d3
80005acc:	d9 af 20 00 	lea %a15,[%sp]32
80005ad0:	30 2f       	add.a %a15,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b56:	8f 34 c0 31 	andn %d3,%d4,3
80005b5a:	60 32       	mov.a %a2,%d3
80005b5c:	d9 af 20 00 	lea %a15,[%sp]32
80005b60:	30 2f       	add.a %a15,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
<<<<<<< HEAD
<<<<<<< HEAD
80005b2e:	8f 34 00 21 	and %d2,%d4,3
80005b32:	06 32       	sh %d2,3
=======
80005b62:	8f 34 00 21 	and %d2,%d4,3
80005b66:	06 32       	sh %d2,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b68:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005b6c:	0f 27 00 30 	sh %d3,%d7,%d2
80005b70:	a6 03       	or %d3,%d0
80005b72:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
<<<<<<< HEAD
80005b42:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005b46:	0f 26 00 20 	sh %d2,%d6,%d2
80005b4a:	a6 32       	or %d2,%d3
80005b4c:	59 f2 e0 ff 	st.w [%a15]-32,%d2
=======
80005ad2:	8f 34 00 21 	and %d2,%d4,3
80005ad6:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005ad8:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005adc:	0f 27 00 30 	sh %d3,%d7,%d2
80005ae0:	a6 03       	or %d3,%d0
80005ae2:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005ae6:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005aea:	0f 26 00 20 	sh %d2,%d6,%d2
80005aee:	a6 32       	or %d2,%d3
80005af0:	59 f2 e0 ff 	st.w [%a15]-32,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b76:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005b7a:	0f 26 00 20 	sh %d2,%d6,%d2
80005b7e:	a6 32       	or %d2,%d3
80005b80:	59 f2 e0 ff 	st.w [%a15]-32,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
<<<<<<< HEAD
<<<<<<< HEAD
80005b50:	c2 14       	add %d4,1
80005b52:	3c dd       	j 80005b0c <IfxPort_setGroupModeInput+0x28>
=======
80005af4:	c2 14       	add %d4,1
80005af6:	3c dd       	j 80005ab0 <IfxPort_setGroupModeInput+0x28>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b84:	c2 14       	add %d4,1
80005b86:	3c dd       	j 80005b40 <IfxPort_setGroupModeInput+0x28>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
<<<<<<< HEAD
<<<<<<< HEAD
80005b54:	d9 a3 20 00 	lea %a3,[%sp]32
80005b58:	90 32       	addsc.a %a2,%a3,%d15,2
80005b5a:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b5e:	76 47       	jz %d4,80005b6c <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b60:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b64:	82 03       	mov %d3,0
=======
80005af8:	d9 a3 20 00 	lea %a3,[%sp]32
80005afc:	90 32       	addsc.a %a2,%a3,%d15,2
80005afe:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b02:	76 47       	jz %d4,80005b10 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b04:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b08:	82 03       	mov %d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b88:	d9 a3 20 00 	lea %a3,[%sp]32
80005b8c:	90 32       	addsc.a %a2,%a3,%d15,2
80005b8e:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b92:	76 47       	jz %d4,80005ba0 <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b94:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b98:	82 03       	mov %d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005b66:	02 43       	mov %d3,%d4
80005b68:	49 42 40 08 	ldmst [%a4]0,%e2
=======
80005b0a:	02 43       	mov %d3,%d4
80005b0c:	49 42 40 08 	ldmst [%a4]0,%e2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005b9a:	02 43       	mov %d3,%d4
80005b9c:	49 42 40 08 	ldmst [%a4]0,%e2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
<<<<<<< HEAD
<<<<<<< HEAD
80005b6c:	c2 1f       	add %d15,1
80005b6e:	b0 44       	add.a %a4,4
80005b70:	fc f2       	loop %a15,80005b54 <IfxPort_setGroupModeInput+0x70>
=======
80005b10:	c2 1f       	add %d15,1
80005b12:	b0 44       	add.a %a4,4
80005b14:	fc f2       	loop %a15,80005af8 <IfxPort_setGroupModeInput+0x70>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ba0:	c2 1f       	add %d15,1
80005ba2:	b0 44       	add.a %a4,4
80005ba4:	fc f2       	loop %a15,80005b88 <IfxPort_setGroupModeInput+0x70>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
<<<<<<< HEAD
<<<<<<< HEAD
80005b72:	00 90       	ret 

80005b74 <IfxPort_setGroupModeOutput>:
=======
80005b16:	00 90       	ret 

80005b18 <IfxPort_setGroupModeOutput>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ba6:	00 90       	ret 

80005ba8 <IfxPort_setGroupModeOutput>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005b74:	82 0f       	mov %d15,0
=======
80005b18:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ba8:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005b76:	20 20       	sub.a %sp,32
=======
80005b1a:	20 20       	sub.a %sp,32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005baa:	20 20       	sub.a %sp,32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005b78:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b7a:	78 04       	st.w [%sp]16,%d15
=======
80005b1c:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b1e:	78 04       	st.w [%sp]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bac:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005bae:	78 04       	st.w [%sp]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005b7c:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b7e:	78 05       	st.w [%sp]20,%d15
=======
80005b20:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b22:	78 05       	st.w [%sp]20,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bb0:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005bb2:	78 05       	st.w [%sp]20,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005b80:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b82:	78 06       	st.w [%sp]24,%d15
=======
80005b24:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b26:	78 06       	st.w [%sp]24,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bb4:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005bb6:	78 06       	st.w [%sp]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005b84:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b86:	78 07       	st.w [%sp]28,%d15
80005b88:	8b 14 a1 22 	ge.u %d2,%d4,17
=======
80005b28:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b2a:	78 07       	st.w [%sp]28,%d15
80005b2c:	8b 14 a1 22 	ge.u %d2,%d4,17
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bb8:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005bba:	78 07       	st.w [%sp]28,%d15
80005bbc:	8b 14 a1 22 	ge.u %d2,%d4,17
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005b8c:	8b 04 01 f1 	rsub %d15,%d4,16
=======
80005b30:	8b 04 01 f1 	rsub %d15,%d4,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bc0:	8b 04 01 f1 	rsub %d15,%d4,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
<<<<<<< HEAD
<<<<<<< HEAD
80005b90:	0f 45 00 50 	sh %d5,%d5,%d4
=======
80005b34:	0f 45 00 50 	sh %d5,%d5,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bc4:	0f 45 00 50 	sh %d5,%d5,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005b94:	3b 80 0f 00 	mov %d0,248
80005b98:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
=======
80005b38:	3b 80 0f 00 	mov %d0,248
80005b3c:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bc8:	3b 80 0f 00 	mov %d0,248
80005bcc:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
<<<<<<< HEAD
<<<<<<< HEAD
80005b9c:	9f 0f 07 80 	jned %d15,0,80005baa <IfxPort_setGroupModeOutput+0x36>
80005ba0:	d9 44 10 00 	lea %a4,[%a4]16
80005ba4:	82 0f       	mov %d15,0
80005ba6:	a0 3f       	mov.a %a15,3
80005ba8:	3c 1f       	j 80005be6 <IfxPort_setGroupModeOutput+0x72>
=======
80005bd0:	9f 0f 07 80 	jned %d15,0,80005bde <IfxPort_setGroupModeOutput+0x36>
80005bd4:	d9 44 10 00 	lea %a4,[%a4]16
80005bd8:	82 0f       	mov %d15,0
80005bda:	a0 3f       	mov.a %a15,3
80005bdc:	3c 1f       	j 80005c1a <IfxPort_setGroupModeOutput+0x72>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
80005bde:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005be2:	df 02 1a 00 	jeq %d2,0,80005c16 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005be6:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
80005bb6:	d9 a2 20 00 	lea %a2,[%sp]32
80005bba:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
=======
80005b40:	9f 0f 07 80 	jned %d15,0,80005b4e <IfxPort_setGroupModeOutput+0x36>
80005b44:	d9 44 10 00 	lea %a4,[%a4]16
80005b48:	82 0f       	mov %d15,0
80005b4a:	a0 3f       	mov.a %a15,3
80005b4c:	3c 1f       	j 80005b8a <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005b4e:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b52:	df 02 1a 00 	jeq %d2,0,80005b86 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005b56:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b5a:	d9 a2 20 00 	lea %a2,[%sp]32
80005b5e:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bea:	d9 a2 20 00 	lea %a2,[%sp]32
80005bee:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
<<<<<<< HEAD
<<<<<<< HEAD
80005bbe:	8f 34 00 21 	and %d2,%d4,3
80005bc2:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005bc4:	a6 63       	or %d3,%d6
=======
80005b62:	8f 34 00 21 	and %d2,%d4,3
80005b66:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005b68:	a6 63       	or %d3,%d6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bf2:	8f 34 00 21 	and %d2,%d4,3
80005bf6:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005bf8:	a6 63       	or %d3,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005bc6:	0f 20 00 70 	sh %d7,%d0,%d2
80005bca:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005bce:	0f 23 00 20 	sh %d2,%d3,%d2
80005bd2:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
=======
80005b6a:	0f 20 00 70 	sh %d7,%d0,%d2
80005b6e:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005b72:	0f 23 00 20 	sh %d2,%d3,%d2
80005b76:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005bfa:	0f 20 00 70 	sh %d7,%d0,%d2
80005bfe:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005c02:	0f 23 00 20 	sh %d2,%d3,%d2
80005c06:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005bd6:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005bd8:	a6 32       	or %d2,%d3
=======
80005b7a:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005b7c:	a6 32       	or %d2,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c0a:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005c0c:	a6 32       	or %d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
<<<<<<< HEAD
<<<<<<< HEAD
80005bda:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005bde:	59 f2 e0 ff 	st.w [%a15]-32,%d2
=======
80005b7e:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005b82:	59 f2 e0 ff 	st.w [%a15]-32,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c0e:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005c12:	59 f2 e0 ff 	st.w [%a15]-32,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
<<<<<<< HEAD
<<<<<<< HEAD
80005be2:	c2 14       	add %d4,1
80005be4:	3c dc       	j 80005b9c <IfxPort_setGroupModeOutput+0x28>
=======
80005b86:	c2 14       	add %d4,1
80005b88:	3c dc       	j 80005b40 <IfxPort_setGroupModeOutput+0x28>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c16:	c2 14       	add %d4,1
80005c18:	3c dc       	j 80005bd0 <IfxPort_setGroupModeOutput+0x28>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
<<<<<<< HEAD
<<<<<<< HEAD
80005be6:	d9 a3 20 00 	lea %a3,[%sp]32
80005bea:	90 32       	addsc.a %a2,%a3,%d15,2
80005bec:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005bf0:	76 47       	jz %d4,80005bfe <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005bf2:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005bf6:	82 03       	mov %d3,0
=======
80005b8a:	d9 a3 20 00 	lea %a3,[%sp]32
80005b8e:	90 32       	addsc.a %a2,%a3,%d15,2
80005b90:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b94:	76 47       	jz %d4,80005ba2 <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b96:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b9a:	82 03       	mov %d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c1a:	d9 a3 20 00 	lea %a3,[%sp]32
80005c1e:	90 32       	addsc.a %a2,%a3,%d15,2
80005c20:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005c24:	76 47       	jz %d4,80005c32 <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c26:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005c2a:	82 03       	mov %d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005bf8:	02 43       	mov %d3,%d4
80005bfa:	49 42 40 08 	ldmst [%a4]0,%e2
=======
80005b9c:	02 43       	mov %d3,%d4
80005b9e:	49 42 40 08 	ldmst [%a4]0,%e2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c2c:	02 43       	mov %d3,%d4
80005c2e:	49 42 40 08 	ldmst [%a4]0,%e2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
<<<<<<< HEAD
<<<<<<< HEAD
80005bfe:	c2 1f       	add %d15,1
80005c00:	b0 44       	add.a %a4,4
80005c02:	fc f2       	loop %a15,80005be6 <IfxPort_setGroupModeOutput+0x72>
=======
80005ba2:	c2 1f       	add %d15,1
80005ba4:	b0 44       	add.a %a4,4
80005ba6:	fc f2       	loop %a15,80005b8a <IfxPort_setGroupModeOutput+0x72>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c32:	c2 1f       	add %d15,1
80005c34:	b0 44       	add.a %a4,4
80005c36:	fc f2       	loop %a15,80005c1a <IfxPort_setGroupModeOutput+0x72>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
<<<<<<< HEAD
<<<<<<< HEAD
80005c04:	00 90       	ret 

80005c06 <IfxPort_setGroupPadDriver>:
=======
80005ba8:	00 90       	ret 

80005baa <IfxPort_setGroupPadDriver>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c38:	00 90       	ret 

80005c3a <IfxPort_setGroupPadDriver>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005c06:	20 10       	sub.a %sp,16
80005c08:	02 4f       	mov %d15,%d4
80005c0a:	02 5a       	mov %d10,%d5
80005c0c:	40 4c       	mov.aa %a12,%a4
80005c0e:	02 69       	mov %d9,%d6
=======
80005c3a:	20 10       	sub.a %sp,16
80005c3c:	02 4f       	mov %d15,%d4
80005c3e:	02 5a       	mov %d10,%d5
80005c40:	40 4c       	mov.aa %a12,%a4
80005c42:	02 69       	mov %d9,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c44:	6d 00 b9 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80005c14:	02 24       	mov %d4,%d2
=======
80005baa:	20 10       	sub.a %sp,16
80005bac:	02 4f       	mov %d15,%d4
80005bae:	02 5a       	mov %d10,%d5
80005bb0:	40 4c       	mov.aa %a12,%a4
80005bb2:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bb4:	6d 00 b9 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005bb8:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c48:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005c16:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005c18:	6d 00 b5 0a 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80005bba:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005bbc:	6d 00 b5 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c4a:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005c4c:	6d 00 b5 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005c1c:	82 03       	mov %d3,0
80005c1e:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005c20:	59 a3 08 00 	st.w [%sp]8,%d3
=======
80005bc0:	82 03       	mov %d3,0
80005bc2:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005bc4:	59 a3 08 00 	st.w [%sp]8,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c50:	82 03       	mov %d3,0
80005c52:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005c54:	59 a3 08 00 	st.w [%sp]8,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005c24:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005c28:	59 a3 0c 00 	st.w [%sp]12,%d3
80005c2c:	8b 1f a1 22 	ge.u %d2,%d15,17
=======
80005bc8:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005bcc:	59 a3 0c 00 	st.w [%sp]12,%d3
80005bd0:	8b 1f a1 22 	ge.u %d2,%d15,17
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c58:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005c5c:	59 a3 0c 00 	st.w [%sp]12,%d3
80005c60:	8b 1f a1 22 	ge.u %d2,%d15,17
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
<<<<<<< HEAD
<<<<<<< HEAD
80005c30:	8b 0f 01 31 	rsub %d3,%d15,16
=======
80005bd4:	8b 0f 01 31 	rsub %d3,%d15,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c64:	8b 0f 01 31 	rsub %d3,%d15,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
<<<<<<< HEAD
<<<<<<< HEAD
80005c34:	0f fa 00 50 	sh %d5,%d10,%d15
80005c38:	ab 03 a0 32 	seln %d3,%d2,%d3,0
=======
80005c68:	0f fa 00 50 	sh %d5,%d10,%d15
80005c6c:	ab 03 a0 32 	seln %d3,%d2,%d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        for (i = pinIndex; i < 16; i++)
80005c70:	9f 03 03 80 	jned %d3,0,80005c76 <IfxPort_setGroupPadDriver+0x3c>
80005c74:	3c 1d       	j 80005cae <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005c76:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005c7a:	df 02 18 00 	jeq %d2,0,80005caa <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005c7e:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
<<<<<<< HEAD
80005c4e:	d9 a2 10 00 	lea %a2,[%sp]16
80005c52:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
=======
80005bd8:	0f fa 00 50 	sh %d5,%d10,%d15
80005bdc:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005be0:	9f 03 03 80 	jned %d3,0,80005be6 <IfxPort_setGroupPadDriver+0x3c>
80005be4:	3c 1d       	j 80005c1e <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005be6:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005bea:	df 02 18 00 	jeq %d2,0,80005c1a <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005bee:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005bf2:	d9 a2 10 00 	lea %a2,[%sp]16
80005bf6:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c82:	d9 a2 10 00 	lea %a2,[%sp]16
80005c86:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
<<<<<<< HEAD
<<<<<<< HEAD
80005c56:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005c5a:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
=======
80005bfa:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005bfe:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c8a:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005c8e:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
<<<<<<< HEAD
<<<<<<< HEAD
80005c5e:	06 22       	sh %d2,2
=======
80005c92:	06 22       	sh %d2,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                pdrMask[index] |= (0xFUL << shift);
80005c94:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
<<<<<<< HEAD
80005c64:	0f 29 00 20 	sh %d2,%d9,%d2
=======
80005c02:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005c04:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005c08:	0f 29 00 20 	sh %d2,%d9,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c98:	0f 29 00 20 	sh %d2,%d9,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
<<<<<<< HEAD
<<<<<<< HEAD
80005c68:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005c6c:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005c70:	a6 42       	or %d2,%d4
80005c72:	59 f2 f0 ff 	st.w [%a15]-16,%d2
=======
80005c0c:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005c10:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005c14:	a6 42       	or %d2,%d4
80005c16:	59 f2 f0 ff 	st.w [%a15]-16,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005c9c:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005ca0:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005ca4:	a6 42       	or %d2,%d4
80005ca6:	59 f2 f0 ff 	st.w [%a15]-16,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
<<<<<<< HEAD
<<<<<<< HEAD
80005c76:	c2 1f       	add %d15,1
80005c78:	3c e2       	j 80005c3c <IfxPort_setGroupPadDriver+0x36>
=======
80005c1a:	c2 1f       	add %d15,1
80005c1c:	3c e2       	j 80005be0 <IfxPort_setGroupPadDriver+0x36>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005caa:	c2 1f       	add %d15,1
80005cac:	3c e2       	j 80005c70 <IfxPort_setGroupPadDriver+0x36>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
<<<<<<< HEAD
<<<<<<< HEAD
80005c7a:	58 02       	ld.w %d15,[%sp]8
80005c7c:	6e 08       	jz %d15,80005c8c <IfxPort_setGroupPadDriver+0x86>
=======
80005cae:	58 02       	ld.w %d15,[%sp]8
80005cb0:	6e 08       	jz %d15,80005cc0 <IfxPort_setGroupPadDriver+0x86>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005cb2:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
<<<<<<< HEAD
80005c82:	54 a6       	ld.w %d6,[%sp]
80005c84:	82 07       	mov %d7,0
=======
80005c1e:	58 02       	ld.w %d15,[%sp]8
80005c20:	6e 08       	jz %d15,80005c30 <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c22:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c26:	54 a6       	ld.w %d6,[%sp]
80005c28:	82 07       	mov %d7,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005cb6:	54 a6       	ld.w %d6,[%sp]
80005cb8:	82 07       	mov %d7,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005c86:	02 f7       	mov %d7,%d15
80005c88:	49 f6 40 08 	ldmst [%a15]0,%e6
=======
80005c2a:	02 f7       	mov %d7,%d15
80005c2c:	49 f6 40 08 	ldmst [%a15]0,%e6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005cba:	02 f7       	mov %d7,%d15
80005cbc:	49 f6 40 08 	ldmst [%a15]0,%e6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
<<<<<<< HEAD
<<<<<<< HEAD
80005c8c:	58 03       	ld.w %d15,[%sp]12
80005c8e:	6e 09       	jz %d15,80005ca0 <IfxPort_setGroupPadDriver+0x9a>
=======
80005cc0:	58 03       	ld.w %d15,[%sp]12
80005cc2:	6e 09       	jz %d15,80005cd4 <IfxPort_setGroupPadDriver+0x9a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005cc4:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
<<<<<<< HEAD
80005c94:	19 a6 04 00 	ld.w %d6,[%sp]4
80005c98:	82 07       	mov %d7,0
=======
80005c30:	58 03       	ld.w %d15,[%sp]12
80005c32:	6e 09       	jz %d15,80005c44 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c34:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c38:	19 a6 04 00 	ld.w %d6,[%sp]4
80005c3c:	82 07       	mov %d7,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005cc8:	19 a6 04 00 	ld.w %d6,[%sp]4
80005ccc:	82 07       	mov %d7,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005c9a:	02 f7       	mov %d7,%d15
80005c9c:	49 c6 40 08 	ldmst [%a12]0,%e6
=======
80005c3e:	02 f7       	mov %d7,%d15
80005c40:	49 c6 40 08 	ldmst [%a12]0,%e6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005cce:	02 f7       	mov %d7,%d15
80005cd0:	49 c6 40 08 	ldmst [%a12]0,%e6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
<<<<<<< HEAD
80005ca0:	02 84       	mov %d4,%d8
}
80005ca2:	d9 aa 10 00 	lea %sp,[%sp]16
=======
80005c44:	02 84       	mov %d4,%d8
}
80005c46:	d9 aa 10 00 	lea %sp,[%sp]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005cd4:	02 84       	mov %d4,%d8
}
80005cd6:	d9 aa 10 00 	lea %sp,[%sp]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
<<<<<<< HEAD
80005ca6:	1d 00 a3 0b 	j 800073ec <IfxScuWdt_setCpuEndinit>

80005caa <IfxPort_setPinMode>:
=======
80005c4a:	1d 00 a3 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005c4e <IfxPort_setPinMode>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005cda:	1d 00 a3 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>

80005cde <IfxPort_setPinMode>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
<<<<<<< HEAD
<<<<<<< HEAD
80005caa:	91 40 00 2f 	movh.a %a2,61444
=======
80005c4e:	91 40 00 2f 	movh.a %a2,61444
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005cde:	91 40 00 2f 	movh.a %a2,61444
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
<<<<<<< HEAD
<<<<<<< HEAD
80005cae:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005cb2:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
=======
80005c52:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005c56:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ce2:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005ce6:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005cb6:	40 4f       	mov.aa %a15,%a4
80005cb8:	02 4f       	mov %d15,%d4
80005cba:	02 5a       	mov %d10,%d5
=======
80005cea:	40 4f       	mov.aa %a15,%a4
80005cec:	02 4f       	mov %d15,%d4
80005cee:	02 5a       	mov %d10,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005cf0:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005cf4:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005cf8:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005cfa:	7d 24 11 80 	jne.a %a4,%a2,80005d1c <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cfe:	6d 00 5c 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80005cce:	02 24       	mov %d4,%d2
=======
80005c5a:	40 4f       	mov.aa %a15,%a4
80005c5c:	02 4f       	mov %d15,%d4
80005c5e:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005c60:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005c64:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005c68:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005c6a:	7d 24 11 80 	jne.a %a4,%a2,80005c8c <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c6e:	6d 00 5c 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005c72:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d02:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005cd0:	02 28       	mov %d8,%d2
=======
80005d04:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxScuWdt_clearCpuEndinit(passwd);
80005d06:	6d 00 58 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005d0a:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
80005cda:	02 84       	mov %d4,%d8
=======
80005c74:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005c76:	6d 00 58 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005c7a:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005c7e:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d0e:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
<<<<<<< HEAD
<<<<<<< HEAD
80005cdc:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005ce0:	59 ff 20 10 	st.w [%a15]96,%d15
=======
80005d10:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005d14:	59 ff 20 10 	st.w [%a15]96,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxScuWdt_setCpuEndinit(passwd);
80005d18:	6d 00 84 0b 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005d1c:	da ff       	mov %d15,255
80005d1e:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005d22:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005d26:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
<<<<<<< HEAD
80005cf6:	82 03       	mov %d3,0
=======
80005c80:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005c84:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005c88:	6d 00 84 0b 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005c8c:	da ff       	mov %d15,255
80005c8e:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005c92:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005c96:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c9a:	82 03       	mov %d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d2a:	82 03       	mov %d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005cf8:	02 f3       	mov %d3,%d15
80005cfa:	49 f2 40 08 	ldmst [%a15]0,%e2
80005cfe:	00 90       	ret 

80005d00 <IfxPort_setPinModeLvdsHigh>:
=======
80005c9c:	02 f3       	mov %d3,%d15
80005c9e:	49 f2 40 08 	ldmst [%a15]0,%e2
80005ca2:	00 90       	ret 

80005ca4 <IfxPort_setPinModeLvdsHigh>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d2c:	02 f3       	mov %d3,%d15
80005d2e:	49 f2 40 08 	ldmst [%a15]0,%e2
80005d32:	00 90       	ret 

80005d34 <IfxPort_setPinModeLvdsHigh>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005d00:	02 5a       	mov %d10,%d5
80005d02:	40 4f       	mov.aa %a15,%a4
80005d04:	02 49       	mov %d9,%d4
80005d06:	02 6f       	mov %d15,%d6
=======
80005d34:	02 5a       	mov %d10,%d5
80005d36:	40 4f       	mov.aa %a15,%a4
80005d38:	02 49       	mov %d9,%d4
80005d3a:	02 6f       	mov %d15,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d3c:	6d 00 3d 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80005d0c:	02 24       	mov %d4,%d2
=======
80005ca4:	02 5a       	mov %d10,%d5
80005ca6:	40 4f       	mov.aa %a15,%a4
80005ca8:	02 49       	mov %d9,%d4
80005caa:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cac:	6d 00 3d 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005cb0:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d40:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005d0e:	02 28       	mov %d8,%d2
=======
80005d42:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_clearCpuEndinit(passwd);
80005d44:	6d 00 39 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005d48:	37 0a 48 50 	extr %d5,%d10,0,8
80005d4c:	bf 05 11 00 	jlt %d5,0,80005d6e <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
<<<<<<< HEAD
80005d1c:	bf 29 21 80 	jlt.u %d9,2,80005d5e <IfxPort_setPinModeLvdsHigh+0x5e>
=======
80005cb2:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005cb4:	6d 00 39 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005cb8:	37 0a 48 50 	extr %d5,%d10,0,8
80005cbc:	bf 05 11 00 	jlt %d5,0,80005cde <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005cc0:	bf 29 21 80 	jlt.u %d9,2,80005d02 <IfxPort_setPinModeLvdsHigh+0x5e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d50:	bf 29 21 80 	jlt.u %d9,2,80005d92 <IfxPort_setPinModeLvdsHigh+0x5e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
<<<<<<< HEAD
<<<<<<< HEAD
80005d20:	19 f2 24 20 	ld.w %d2,[%a15]164
80005d24:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005d28:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005d2c:	19 ff 24 20 	ld.w %d15,[%a15]164
80005d30:	8f 2f c0 f1 	andn %d15,%d15,2
80005d34:	59 ff 24 20 	st.w [%a15]164,%d15
80005d38:	3c 13       	j 80005d5e <IfxPort_setPinModeLvdsHigh+0x5e>
=======
80005cc4:	19 f2 24 20 	ld.w %d2,[%a15]164
80005cc8:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005ccc:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005cd0:	19 ff 24 20 	ld.w %d15,[%a15]164
80005cd4:	8f 2f c0 f1 	andn %d15,%d15,2
80005cd8:	59 ff 24 20 	st.w [%a15]164,%d15
80005cdc:	3c 13       	j 80005d02 <IfxPort_setPinModeLvdsHigh+0x5e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d54:	19 f2 24 20 	ld.w %d2,[%a15]164
80005d58:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005d5c:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005d60:	19 ff 24 20 	ld.w %d15,[%a15]164
80005d64:	8f 2f c0 f1 	andn %d15,%d15,2
80005d68:	59 ff 24 20 	st.w [%a15]164,%d15
80005d6c:	3c 13       	j 80005d92 <IfxPort_setPinModeLvdsHigh+0x5e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
<<<<<<< HEAD
<<<<<<< HEAD
80005d3a:	19 f2 28 20 	ld.w %d2,[%a15]168
80005d3e:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005d42:	59 ff 28 20 	st.w [%a15]168,%d15
=======
80005d6e:	19 f2 28 20 	ld.w %d2,[%a15]168
80005d72:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005d76:	59 ff 28 20 	st.w [%a15]168,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        port->LPCR2.B.TX_DIS    = 0;
80005d7a:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d7e:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005d82:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005d86:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d8a:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005d8e:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005d92:	02 84       	mov %d4,%d8
80005d94:	1d 00 46 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80005d64 <IfxPort_setPinModeLvdsMedium>:
=======
80005cde:	19 f2 28 20 	ld.w %d2,[%a15]168
80005ce2:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005ce6:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005cea:	19 ff 28 20 	ld.w %d15,[%a15]168
80005cee:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005cf2:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005cf6:	19 ff 28 20 	ld.w %d15,[%a15]168
80005cfa:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005cfe:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005d02:	02 84       	mov %d4,%d8
80005d04:	1d 00 46 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005d08 <IfxPort_setPinModeLvdsMedium>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d98 <IfxPort_setPinModeLvdsMedium>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005d64:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d68:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d6a:	8f f4 1f 90 	sh %d9,%d4,-1
=======
80005d08:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d0c:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d0e:	8f f4 1f 90 	sh %d9,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005d98:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d9c:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d9e:	8f f4 1f 90 	sh %d9,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005d6e:	02 48       	mov %d8,%d4
=======
80005d12:	02 48       	mov %d8,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005da2:	02 48       	mov %d8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005d70:	6d 00 09 0b 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d74:	02 24       	mov %d4,%d2
=======
80005d14:	6d 00 09 0b 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d18:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005da4:	6d 00 09 0b 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005da8:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005d76:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d78:	6d 00 05 0a 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80005d1a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d1c:	6d 00 05 0a 	call 80007126 <IfxScuWdt_clearCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005daa:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005dac:	6d 00 05 0a 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
<<<<<<< HEAD
<<<<<<< HEAD
80005d7c:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005d7e:	d9 f2 00 10 	lea %a2,[%a15]64
=======
80005d20:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005d22:	d9 f2 00 10 	lea %a2,[%a15]64
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005db0:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005db2:	d9 f2 00 10 	lea %a2,[%a15]64
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
<<<<<<< HEAD
<<<<<<< HEAD
80005d82:	01 28 02 26 	addsc.a %a2,%a2,%d8,2
=======
80005d26:	01 28 02 26 	addsc.a %a2,%a2,%d8,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005db6:	01 28 02 26 	addsc.a %a2,%a2,%d8,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
<<<<<<< HEAD
<<<<<<< HEAD
80005d86:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005d8a:	d9 f4 20 20 	lea %a4,[%a15]160
=======
80005d2a:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005d2e:	d9 f4 20 20 	lea %a4,[%a15]160
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005dba:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005dbe:	d9 f4 20 20 	lea %a4,[%a15]160
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
<<<<<<< HEAD
<<<<<<< HEAD
80005d8e:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
=======
80005d32:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005dc2:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
<<<<<<< HEAD
<<<<<<< HEAD
80005d92:	0f 2b 00 50 	sh %d5,%d11,%d2
80005d96:	74 25       	st.w [%a2],%d5
=======
80005dc6:	0f 2b 00 50 	sh %d5,%d11,%d2
80005dca:	74 25       	st.w [%a2],%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005dcc:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
80005d9a:	02 f4       	mov %d4,%d15
=======
80005d36:	0f 2b 00 50 	sh %d5,%d11,%d2
80005d3a:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d3c:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d3e:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005dce:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
<<<<<<< HEAD
<<<<<<< HEAD
80005d9c:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005da0:	74 46       	st.w [%a4],%d6
=======
80005dd0:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005dd4:	74 46       	st.w [%a4],%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005dd6:	1d 00 25 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80005da6 <IfxPort_setPinPadDriver>:
=======
80005d40:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005d44:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d46:	1d 00 25 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>

80005d4a <IfxPort_setPinPadDriver>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005dda <IfxPort_setPinPadDriver>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
<<<<<<< HEAD
<<<<<<< HEAD
80005da6:	0b 45 10 88 	mov %e8,%d5,%d4
80005daa:	40 4f       	mov.aa %a15,%a4
=======
80005dda:	0b 45 10 88 	mov %e8,%d5,%d4
80005dde:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005de0:	6d 00 eb 0a 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
<<<<<<< HEAD
80005db0:	02 24       	mov %d4,%d2
=======
80005d4a:	0b 45 10 88 	mov %e8,%d5,%d4
80005d4e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d50:	6d 00 eb 0a 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d54:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005de4:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80005db2:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005db4:	6d 00 e7 09 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80005d56:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d58:	6d 00 e7 09 	call 80007126 <IfxScuWdt_clearCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005de6:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005de8:	6d 00 e7 09 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
<<<<<<< HEAD
<<<<<<< HEAD
80005db8:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005dbc:	06 22       	sh %d2,2
80005dbe:	06 d8       	sh %d8,-3
=======
80005d5c:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d60:	06 22       	sh %d2,2
80005d62:	06 d8       	sh %d8,-3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005dec:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005df0:	06 22       	sh %d2,2
80005df2:	06 d8       	sh %d8,-3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
<<<<<<< HEAD
<<<<<<< HEAD
80005dc0:	d9 ff 00 10 	lea %a15,[%a15]64
=======
80005df4:	d9 ff 00 10 	lea %a15,[%a15]64
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005df8:	3b f0 00 30 	mov %d3,15
80005dfc:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005e00:	0f 23 00 30 	sh %d3,%d3,%d2
80005e04:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
<<<<<<< HEAD
80005dd4:	82 07       	mov %d7,0
=======
80005d64:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005d68:	3b f0 00 30 	mov %d3,15
80005d6c:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005d70:	0f 23 00 30 	sh %d3,%d3,%d2
80005d74:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005d78:	82 07       	mov %d7,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e08:	82 07       	mov %d7,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
<<<<<<< HEAD
<<<<<<< HEAD
80005dd6:	02 37       	mov %d7,%d3
80005dd8:	49 f6 40 08 	ldmst [%a15]0,%e6
=======
80005e0a:	02 37       	mov %d7,%d3
80005e0c:	49 f6 40 08 	ldmst [%a15]0,%e6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005e10:	02 f4       	mov %d4,%d15
80005e12:	1d 00 07 0b 	j 80007420 <IfxScuWdt_setCpuEndinit>
	...

<<<<<<< HEAD
80005de4 <IfxScuCcu_calculateSysPllDividers>:
=======
80005d7a:	02 37       	mov %d7,%d3
80005d7c:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d80:	02 f4       	mov %d4,%d15
80005d82:	1d 00 07 0b 	j 80007390 <IfxScuWdt_setCpuEndinit>
	...

80005d88 <IfxScuCcu_calculateSysPllDividers>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e18 <IfxScuCcu_calculateSysPllDividers>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005de4:	7b e0 e4 30 	movh %d3,3662
80005de8:	1b 13 c0 31 	addi %d3,%d3,7169
80005dec:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005df0:	82 2f       	mov %d15,2
80005df2:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005df6:	8f 4c 00 80 	sh %d8,%d12,4
=======
80005d88:	7b e0 e4 30 	movh %d3,3662
80005d8c:	1b 13 c0 31 	addi %d3,%d3,7169
80005d90:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005d94:	82 2f       	mov %d15,2
80005d96:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005d9a:	8f 4c 00 80 	sh %d8,%d12,4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e18:	7b e0 e4 30 	movh %d3,3662
80005e1c:	1b 13 c0 31 	addi %d3,%d3,7169
80005e20:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005e24:	82 2f       	mov %d15,2
80005e26:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005e2a:	8f 4c 00 80 	sh %d8,%d12,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
<<<<<<< HEAD
<<<<<<< HEAD
80005dfa:	7b c0 be 00 	movh %d0,3052
=======
80005d9e:	7b c0 be 00 	movh %d0,3052
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e2e:	7b c0 be 00 	movh %d0,3052
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
<<<<<<< HEAD
<<<<<<< HEAD
80005dfe:	91 40 0f 50 	movh.a %a5,244
=======
80005da2:	91 40 0f 50 	movh.a %a5,244
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e32:	91 40 0f 50 	movh.a %a5,244
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
<<<<<<< HEAD
<<<<<<< HEAD
80005e02:	7b 80 82 6e 	movh %d6,59432
80005e06:	91 80 7d 61 	movh.a %a6,6104
=======
80005da6:	7b 80 82 6e 	movh %d6,59432
80005daa:	91 80 7d 61 	movh.a %a6,6104
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e36:	7b 80 82 6e 	movh %d6,59432
80005e3a:	91 80 7d 61 	movh.a %a6,6104
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
<<<<<<< HEAD
<<<<<<< HEAD
80005e0a:	19 4e 10 10 	ld.w %d14,[%a4]80
80005e0e:	60 83       	mov.a %a3,%d8
=======
80005dae:	19 4e 10 10 	ld.w %d14,[%a4]80
80005db2:	60 83       	mov.a %a3,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e3e:	19 4e 10 10 	ld.w %d14,[%a4]80
80005e42:	60 83       	mov.a %a3,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
<<<<<<< HEAD
<<<<<<< HEAD
80005e10:	1b 00 20 0c 	addi %d0,%d0,-15872
=======
80005db4:	1b 00 20 0c 	addi %d0,%d0,-15872
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e44:	1b 00 20 0c 	addi %d0,%d0,-15872
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005e14:	d2 0a       	mov %e10,0
80005e16:	82 09       	mov %d9,0
=======
80005db8:	d2 0a       	mov %e10,0
80005dba:	82 09       	mov %d9,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e48:	d2 0a       	mov %e10,0
80005e4a:	82 09       	mov %d9,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
<<<<<<< HEAD
<<<<<<< HEAD
80005e18:	3b 00 01 50 	mov %d5,16
=======
80005dbc:	3b 00 01 50 	mov %d5,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e4c:	3b 00 01 50 	mov %d5,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
<<<<<<< HEAD
<<<<<<< HEAD
80005e1c:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
=======
80005dc0:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e50:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
<<<<<<< HEAD
<<<<<<< HEAD
80005e20:	82 f7       	mov %d7,-1
80005e22:	1b 06 c0 67 	addi %d6,%d6,31744
80005e26:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005e2a:	a0 ff       	mov.a %a15,15
=======
80005dc4:	82 f7       	mov %d7,-1
80005dc6:	1b 06 c0 67 	addi %d6,%d6,31744
80005dca:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005dce:	a0 ff       	mov.a %a15,15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e54:	82 f7       	mov %d7,-1
80005e56:	1b 06 c0 67 	addi %d6,%d6,31744
80005e5a:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005e5e:	a0 ff       	mov.a %a15,15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
<<<<<<< HEAD
<<<<<<< HEAD
80005e2c:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e30:	7b 60 f8 1f 	movh %d1,65414
80005e34:	1b 01 e0 1e 	addi %d1,%d1,-4608
=======
80005dd0:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dd4:	7b 60 f8 1f 	movh %d1,65414
80005dd8:	1b 01 e0 1e 	addi %d1,%d1,-4608
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e60:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e64:	7b 60 f8 1f 	movh %d1,65414
80005e68:	1b 01 e0 1e 	addi %d1,%d1,-4608
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
<<<<<<< HEAD
<<<<<<< HEAD
80005e38:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e3a:	0b 12 40 10 	addx %d1,%d2,%d1
80005e3e:	8b f3 bf 20 	addc %d2,%d3,-1
80005e42:	80 53       	mov.d %d3,%a5
80005e44:	ba 02       	eq %d15,%d2,0
80005e46:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005e4a:	8b 02 00 f5 	or.ne %d15,%d2,0
80005e4e:	ee 24       	jnz %d15,80005e96 <IfxScuCcu_calculateSysPllDividers+0xb2>
80005e50:	02 5d       	mov %d13,%d5
80005e52:	82 11       	mov %d1,1
=======
80005ddc:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dde:	0b 12 40 10 	addx %d1,%d2,%d1
80005de2:	8b f3 bf 20 	addc %d2,%d3,-1
80005de6:	80 53       	mov.d %d3,%a5
80005de8:	ba 02       	eq %d15,%d2,0
80005dea:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005dee:	8b 02 00 f5 	or.ne %d15,%d2,0
80005df2:	ee 24       	jnz %d15,80005e3a <IfxScuCcu_calculateSysPllDividers+0xb2>
80005df4:	02 5d       	mov %d13,%d5
80005df6:	82 11       	mov %d1,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e6c:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e6e:	0b 12 40 10 	addx %d1,%d2,%d1
80005e72:	8b f3 bf 20 	addc %d2,%d3,-1
80005e76:	80 53       	mov.d %d3,%a5
80005e78:	ba 02       	eq %d15,%d2,0
80005e7a:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005e7e:	8b 02 00 f5 	or.ne %d15,%d2,0
80005e82:	ee 24       	jnz %d15,80005eca <IfxScuCcu_calculateSysPllDividers+0xb2>
80005e84:	02 5d       	mov %d13,%d5
80005e86:	82 11       	mov %d1,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
<<<<<<< HEAD
<<<<<<< HEAD
80005e54:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005e58:	80 68       	mov.d %d8,%a6
80005e5a:	ba 03       	eq %d15,%d3,0
80005e5c:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e60:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e64:	ee 13       	jnz %d15,80005e8a <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e66:	82 18       	mov %d8,1
80005e68:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
=======
80005df8:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005dfc:	80 68       	mov.d %d8,%a6
80005dfe:	ba 03       	eq %d15,%d3,0
80005e00:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e04:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e08:	ee 13       	jnz %d15,80005e2e <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e0a:	82 18       	mov %d8,1
80005e0c:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005e88:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005e8c:	80 68       	mov.d %d8,%a6
80005e8e:	ba 03       	eq %d15,%d3,0
80005e90:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e94:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e98:	ee 13       	jnz %d15,80005ebe <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e9a:	82 18       	mov %d8,1
80005e9c:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
<<<<<<< HEAD
<<<<<<< HEAD
80005e6c:	4b d8 11 22 	div.u %e2,%d8,%d13
80005e70:	e2 e2       	mul %d2,%d14
80005e72:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005e74:	df 02 18 00 	jeq %d2,0,80005ea4 <IfxScuCcu_calculateSysPllDividers+0xc0>
=======
80005e10:	4b d8 11 22 	div.u %e2,%d8,%d13
80005e14:	e2 e2       	mul %d2,%d14
80005e16:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005e18:	df 02 18 00 	jeq %d2,0,80005e48 <IfxScuCcu_calculateSysPllDividers+0xc0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ea0:	4b d8 11 22 	div.u %e2,%d8,%d13
80005ea4:	e2 e2       	mul %d2,%d14
80005ea6:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005ea8:	df 02 18 00 	jeq %d2,0,80005ed8 <IfxScuCcu_calculateSysPllDividers+0xc0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
<<<<<<< HEAD
<<<<<<< HEAD
80005e78:	82 1f       	mov %d15,1
80005e7a:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005e7e:	6a 8b       	cmovn %d11,%d15,%d8
80005e80:	6a 20       	cmovn %d0,%d15,%d2
80005e82:	6a 5a       	cmovn %d10,%d15,%d5
80005e84:	6a 19       	cmovn %d9,%d15,%d1
=======
80005e1c:	82 1f       	mov %d15,1
80005e1e:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005e22:	6a 8b       	cmovn %d11,%d15,%d8
80005e24:	6a 20       	cmovn %d0,%d15,%d2
80005e26:	6a 5a       	cmovn %d10,%d15,%d5
80005e28:	6a 19       	cmovn %d9,%d15,%d1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005eac:	82 1f       	mov %d15,1
80005eae:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005eb2:	6a 8b       	cmovn %d11,%d15,%d8
80005eb4:	6a 20       	cmovn %d0,%d15,%d2
80005eb6:	6a 5a       	cmovn %d10,%d15,%d5
80005eb8:	6a 19       	cmovn %d9,%d15,%d1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
<<<<<<< HEAD
<<<<<<< HEAD
80005e86:	c2 18       	add %d8,1
80005e88:	fc 22       	loop %a2,80005e6c <IfxScuCcu_calculateSysPllDividers+0x88>
80005e8a:	80 3f       	mov.d %d15,%a3
=======
80005e2a:	c2 18       	add %d8,1
80005e2c:	fc 22       	loop %a2,80005e10 <IfxScuCcu_calculateSysPllDividers+0x88>
80005e2e:	80 3f       	mov.d %d15,%a3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005eba:	c2 18       	add %d8,1
80005ebc:	fc 22       	loop %a2,80005ea0 <IfxScuCcu_calculateSysPllDividers+0x88>
80005ebe:	80 3f       	mov.d %d15,%a3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
<<<<<<< HEAD
<<<<<<< HEAD
80005e8c:	42 c1       	add %d1,%d12
80005e8e:	42 fd       	add %d13,%d15
80005e90:	8b 11 68 f2 	lt.u %d15,%d1,129
80005e94:	ee e0       	jnz %d15,80005e54 <IfxScuCcu_calculateSysPllDividers+0x70>
80005e96:	60 c2       	mov.a %a2,%d12
=======
80005e30:	42 c1       	add %d1,%d12
80005e32:	42 fd       	add %d13,%d15
80005e34:	8b 11 68 f2 	lt.u %d15,%d1,129
80005e38:	ee e0       	jnz %d15,80005df8 <IfxScuCcu_calculateSysPllDividers+0x70>
80005e3a:	60 c2       	mov.a %a2,%d12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ec0:	42 c1       	add %d1,%d12
80005ec2:	42 fd       	add %d13,%d15
80005ec4:	8b 11 68 f2 	lt.u %d15,%d1,129
80005ec8:	ee e0       	jnz %d15,80005e88 <IfxScuCcu_calculateSysPllDividers+0x70>
80005eca:	60 c2       	mov.a %a2,%d12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
<<<<<<< HEAD
<<<<<<< HEAD
80005e98:	c2 f5       	add %d5,-1
80005e9a:	01 23 20 30 	sub.a %a3,%a3,%a2
80005e9e:	fd f0 c7 7f 	loop %a15,80005e2c <IfxScuCcu_calculateSysPllDividers+0x48>
80005ea2:	3c 05       	j 80005eac <IfxScuCcu_calculateSysPllDividers+0xc8>
=======
80005e3c:	c2 f5       	add %d5,-1
80005e3e:	01 23 20 30 	sub.a %a3,%a3,%a2
80005e42:	fd f0 c7 7f 	loop %a15,80005dd0 <IfxScuCcu_calculateSysPllDividers+0x48>
80005e46:	3c 05       	j 80005e50 <IfxScuCcu_calculateSysPllDividers+0xc8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ecc:	c2 f5       	add %d5,-1
80005ece:	01 23 20 30 	sub.a %a3,%a3,%a2
80005ed2:	fd f0 c7 7f 	loop %a15,80005e60 <IfxScuCcu_calculateSysPllDividers+0x48>
80005ed6:	3c 05       	j 80005ee0 <IfxScuCcu_calculateSysPllDividers+0xc8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
<<<<<<< HEAD
<<<<<<< HEAD
80005ea4:	0b 58 10 a8 	mov %e10,%d8,%d5
=======
80005e48:	0b 58 10 a8 	mov %e10,%d8,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ed8:	0b 58 10 a8 	mov %e10,%d8,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
<<<<<<< HEAD
<<<<<<< HEAD
80005ea8:	02 19       	mov %d9,%d1
=======
80005e4c:	02 19       	mov %d9,%d1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005edc:	02 19       	mov %d9,%d1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
<<<<<<< HEAD
<<<<<<< HEAD
80005eaa:	82 00       	mov %d0,0
=======
80005e4e:	82 00       	mov %d0,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ede:	82 00       	mov %d0,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
<<<<<<< HEAD
<<<<<<< HEAD
80005eac:	da 64       	mov %d15,100
80005eae:	06 14       	sh %d4,1
80005eb0:	4b f4 11 42 	div.u %e4,%d4,%d15
80005eb4:	82 1f       	mov %d15,1
=======
80005e50:	da 64       	mov %d15,100
80005e52:	06 14       	sh %d4,1
80005e54:	4b f4 11 42 	div.u %e4,%d4,%d15
80005e58:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ee0:	da 64       	mov %d15,100
80005ee2:	06 14       	sh %d4,1
80005ee4:	4b f4 11 42 	div.u %e4,%d4,%d15
80005ee8:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80005eb6:	82 12       	mov %d2,1
=======
80005e5a:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005eea:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
<<<<<<< HEAD
<<<<<<< HEAD
80005eb8:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005ebc:	ee 0f       	jnz %d15,80005eda <IfxScuCcu_calculateSysPllDividers+0xf6>
=======
80005e5c:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005e60:	ee 0f       	jnz %d15,80005e7e <IfxScuCcu_calculateSysPllDividers+0xf6>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005eec:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005ef0:	ee 0f       	jnz %d15,80005f0e <IfxScuCcu_calculateSysPllDividers+0xf6>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
<<<<<<< HEAD
<<<<<<< HEAD
80005ebe:	82 02       	mov %d2,0
=======
80005e62:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ef2:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80005ec0:	c2 fb       	add %d11,-1
=======
80005ef4:	c2 fb       	add %d11,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005ef6:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005ef8:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
<<<<<<< HEAD
80005ec6:	59 42 0c 00 	st.w [%a4]12,%d2
=======
80005e64:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e66:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e68:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005e6a:	59 42 0c 00 	st.w [%a4]12,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005efa:	59 42 0c 00 	st.w [%a4]12,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80005eca:	e9 4b 09 00 	st.b [%a4]9,%d11
=======
80005efe:	e9 4b 09 00 	st.b [%a4]9,%d11
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005f02:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005f06:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
<<<<<<< HEAD
80005ed6:	2c 40       	st.b [%a4]0,%d15
=======
80005e6e:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005e72:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005e76:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005e7a:	2c 40       	st.b [%a4]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f0a:	2c 40       	st.b [%a4]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80005ed8:	82 02       	mov %d2,0
=======
80005e7c:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f0c:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            retVal = 1;
        }
    }
    return retVal;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005eda:	00 90       	ret 

80005edc <IfxScuCcu_getOsc0Frequency>:
=======
80005e7e:	00 90       	ret 

80005e80 <IfxScuCcu_getOsc0Frequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f0e:	00 90       	ret 

80005f10 <IfxScuCcu_getOsc0Frequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
<<<<<<< HEAD
<<<<<<< HEAD
80005edc:	91 00 00 f7 	movh.a %a15,28672
80005ee0:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
=======
80005f10:	91 00 00 f7 	movh.a %a15,28672
80005f14:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80005f18:	4b 02 61 21 	utof %d2,%d2
80005f1c:	00 90       	ret 

<<<<<<< HEAD
80005eea <IfxScuCcu_getOscFrequency>:
=======
80005e80:	91 00 00 f7 	movh.a %a15,28672
80005e84:	19 f2 30 30 	ld.w %d2,[%a15]240 <700000f0 <IfxScuCcu_xtalFrequency>>
}
80005e88:	4b 02 61 21 	utof %d2,%d2
80005e8c:	00 90       	ret 

80005e8e <IfxScuCcu_getOscFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f1e <IfxScuCcu_getOscFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
<<<<<<< HEAD
<<<<<<< HEAD
80005eea:	91 30 00 ff 	movh.a %a15,61443
80005eee:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005ef2:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005ef4:	7b f0 cb 24 	movh %d2,19647
=======
80005e8e:	91 30 00 ff 	movh.a %a15,61443
80005e92:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005e96:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005e98:	7b f0 cb 24 	movh %d2,19647
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f1e:	91 30 00 ff 	movh.a %a15,61443
80005f22:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005f26:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005f28:	7b f0 cb 24 	movh %d2,19647
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
<<<<<<< HEAD
<<<<<<< HEAD
80005ef8:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005efc:	1b 02 c2 2b 	addi %d2,%d2,-17376
=======
80005e9c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005ea0:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f2c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005f30:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
<<<<<<< HEAD
<<<<<<< HEAD
80005f00:	6e 0c       	jz %d15,80005f18 <IfxScuCcu_getOscFrequency+0x2e>
=======
80005ea4:	6e 0c       	jz %d15,80005ebc <IfxScuCcu_getOscFrequency+0x2e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f34:	6e 0c       	jz %d15,80005f4c <IfxScuCcu_getOscFrequency+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
<<<<<<< HEAD
<<<<<<< HEAD
80005f02:	4c f0       	ld.w %d15,[%a15]0
=======
80005ea6:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f36:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
<<<<<<< HEAD
<<<<<<< HEAD
80005f04:	82 02       	mov %d2,0
=======
80005ea8:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f38:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
<<<<<<< HEAD
<<<<<<< HEAD
80005f06:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005f0a:	5e 17       	jne %d15,1,80005f18 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005f0c:	91 00 00 f7 	movh.a %a15,28672
80005f10:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
80005f14:	4b 02 61 21 	utof %d2,%d2
=======
80005eaa:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005eae:	5e 17       	jne %d15,1,80005ebc <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005eb0:	91 00 00 f7 	movh.a %a15,28672
80005eb4:	19 f2 30 30 	ld.w %d2,[%a15]240 <700000f0 <IfxScuCcu_xtalFrequency>>
80005eb8:	4b 02 61 21 	utof %d2,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f3a:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005f3e:	5e 17       	jne %d15,1,80005f4c <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005f40:	91 00 00 f7 	movh.a %a15,28672
80005f44:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
80005f48:	4b 02 61 21 	utof %d2,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005f18:	00 90       	ret 

80005f1a <IfxScuCcu_getPllErayFrequency>:
=======
80005ebc:	00 90       	ret 

80005ebe <IfxScuCcu_getPllErayFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f4c:	00 90       	ret 

80005f4e <IfxScuCcu_getPllErayFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80005f1a:	91 30 00 ff 	movh.a %a15,61443
80005f1e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
=======
80005ebe:	91 30 00 ff 	movh.a %a15,61443
80005ec2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f4e:	91 30 00 ff 	movh.a %a15,61443
80005f52:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80005f22:	6d ff e4 ff 	call 80005eea <IfxScuCcu_getOscFrequency>
=======
80005f56:	6d ff e4 ff 	call 80005f1e <IfxScuCcu_getOscFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005f5a:	4c f9       	ld.w %d15,[%a15]36
80005f5c:	2e 05       	jz.t %d15,0,80005f66 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005f5e:	4c fb       	ld.w %d15,[%a15]44
80005f60:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f64:	3c 21       	j 80005fa6 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005f66:	4c f9       	ld.w %d15,[%a15]36
80005f68:	6f 3f 15 00 	jz.t %d15,3,80005f92 <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
<<<<<<< HEAD
80005f38:	48 b4       	ld.w %d4,[%a15]44
80005f3a:	8f f4 07 41 	and %d4,%d4,127
80005f3e:	c2 14       	add %d4,1
80005f40:	6d 00 a3 26 	call 8000ac86 <__floatsidf>
80005f44:	7b 80 19 54 	movh %d5,16792
80005f48:	0b 23 10 68 	mov %e6,%d3,%d2
80005f4c:	82 04       	mov %d4,0
80005f4e:	1b 45 78 5d 	addi %d5,%d5,-10364
80005f52:	6d 00 0e 26 	call 8000ab6e <__divdf3>
80005f56:	0b 23 10 48 	mov %e4,%d3,%d2
80005f5a:	1d 00 c9 26 	j 8000acec <__truncdfsf2>
=======
80005ec6:	6d ff e4 ff 	call 80005e8e <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005eca:	4c f9       	ld.w %d15,[%a15]36
80005ecc:	2e 05       	jz.t %d15,0,80005ed6 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005ece:	4c fb       	ld.w %d15,[%a15]44
80005ed0:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005ed4:	3c 21       	j 80005f16 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005ed6:	4c f9       	ld.w %d15,[%a15]36
80005ed8:	6f 3f 15 00 	jz.t %d15,3,80005f02 <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005edc:	48 b4       	ld.w %d4,[%a15]44
80005ede:	8f f4 07 41 	and %d4,%d4,127
80005ee2:	c2 14       	add %d4,1
80005ee4:	6d 00 e9 25 	call 8000aab6 <__floatsidf>
80005ee8:	7b 80 19 54 	movh %d5,16792
80005eec:	0b 23 10 68 	mov %e6,%d3,%d2
80005ef0:	82 04       	mov %d4,0
80005ef2:	1b 45 78 5d 	addi %d5,%d5,-10364
80005ef6:	6d 00 54 25 	call 8000a99e <__divdf3>
80005efa:	0b 23 10 48 	mov %e4,%d3,%d2
80005efe:	1d 00 0f 26 	j 8000ab1c <__truncdfsf2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f6c:	48 b4       	ld.w %d4,[%a15]44
80005f6e:	8f f4 07 41 	and %d4,%d4,127
80005f72:	c2 14       	add %d4,1
80005f74:	6d 00 ff 26 	call 8000ad72 <__floatsidf>
80005f78:	7b 80 19 54 	movh %d5,16792
80005f7c:	0b 23 10 68 	mov %e6,%d3,%d2
80005f80:	82 04       	mov %d4,0
80005f82:	1b 45 78 5d 	addi %d5,%d5,-10364
80005f86:	6d 00 6a 26 	call 8000ac5a <__divdf3>
80005f8a:	0b 23 10 48 	mov %e4,%d3,%d2
80005f8e:	1d 00 25 27 	j 8000add8 <__truncdfsf2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
<<<<<<< HEAD
<<<<<<< HEAD
80005f5e:	48 a3       	ld.w %d3,[%a15]40
80005f60:	4c fb       	ld.w %d15,[%a15]44
80005f62:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f66:	16 7f       	and %d15,127
80005f68:	c2 13       	add %d3,1
80005f6a:	4b 03 41 31 	itof %d3,%d3
80005f6e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f72:	c2 1f       	add %d15,1
80005f74:	4b 0f 41 f1 	itof %d15,%d15
80005f78:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
80005f02:	48 a3       	ld.w %d3,[%a15]40
80005f04:	4c fb       	ld.w %d15,[%a15]44
80005f06:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f0a:	16 7f       	and %d15,127
80005f0c:	c2 13       	add %d3,1
80005f0e:	4b 03 41 31 	itof %d3,%d3
80005f12:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f16:	c2 1f       	add %d15,1
80005f18:	4b 0f 41 f1 	itof %d15,%d15
80005f1c:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005f92:	48 a3       	ld.w %d3,[%a15]40
80005f94:	4c fb       	ld.w %d15,[%a15]44
80005f96:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f9a:	16 7f       	and %d15,127
80005f9c:	c2 13       	add %d3,1
80005f9e:	4b 03 41 31 	itof %d3,%d3
80005fa2:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005fa6:	c2 1f       	add %d15,1
80005fa8:	4b 0f 41 f1 	itof %d15,%d15
80005fac:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return freq;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005f7c:	00 90       	ret 

80005f7e <IfxScuCcu_getPllErayVcoFrequency>:
=======
80005f20:	00 90       	ret 

80005f22 <IfxScuCcu_getPllErayVcoFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005fb0:	00 90       	ret 

80005fb2 <IfxScuCcu_getPllErayVcoFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80005f7e:	91 30 00 ff 	movh.a %a15,61443
80005f82:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005f86:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005f88:	7b f0 cb 24 	movh %d2,19647
80005f8c:	1b 02 c2 2b 	addi %d2,%d2,-17376
=======
80005f22:	91 30 00 ff 	movh.a %a15,61443
80005f26:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005f2a:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005f2c:	7b f0 cb 24 	movh %d2,19647
80005f30:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005fb2:	91 30 00 ff 	movh.a %a15,61443
80005fb6:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005fba:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005fbc:	7b f0 cb 24 	movh %d2,19647
80005fc0:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80005f90:	6f 3f 18 80 	jnz.t %d15,3,80005fc0 <IfxScuCcu_getPllErayVcoFrequency+0x42>
=======
80005f34:	6f 3f 18 80 	jnz.t %d15,3,80005f64 <IfxScuCcu_getPllErayVcoFrequency+0x42>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005fc4:	6f 3f 18 80 	jnz.t %d15,3,80005ff4 <IfxScuCcu_getPllErayVcoFrequency+0x42>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
<<<<<<< HEAD
<<<<<<< HEAD
80005f94:	6d ff ab ff 	call 80005eea <IfxScuCcu_getOscFrequency>
80005f98:	91 30 00 ff 	movh.a %a15,61443
80005f9c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005fa0:	48 03       	ld.w %d3,[%a15]0
80005fa2:	4c f0       	ld.w %d15,[%a15]0
80005fa4:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005fa8:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fac:	c2 13       	add %d3,1
80005fae:	4b 03 41 31 	itof %d3,%d3
80005fb2:	c2 1f       	add %d15,1
80005fb4:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005fb8:	4b 0f 41 f1 	itof %d15,%d15
80005fbc:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
80005f38:	6d ff ab ff 	call 80005e8e <IfxScuCcu_getOscFrequency>
80005f3c:	91 30 00 ff 	movh.a %a15,61443
80005f40:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005f44:	48 03       	ld.w %d3,[%a15]0
80005f46:	4c f0       	ld.w %d15,[%a15]0
80005f48:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f4c:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005f50:	c2 13       	add %d3,1
80005f52:	4b 03 41 31 	itof %d3,%d3
80005f56:	c2 1f       	add %d15,1
80005f58:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f5c:	4b 0f 41 f1 	itof %d15,%d15
80005f60:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005fc8:	6d ff ab ff 	call 80005f1e <IfxScuCcu_getOscFrequency>
80005fcc:	91 30 00 ff 	movh.a %a15,61443
80005fd0:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005fd4:	48 03       	ld.w %d3,[%a15]0
80005fd6:	4c f0       	ld.w %d15,[%a15]0
80005fd8:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005fdc:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fe0:	c2 13       	add %d3,1
80005fe2:	4b 03 41 31 	itof %d3,%d3
80005fe6:	c2 1f       	add %d15,1
80005fe8:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005fec:	4b 0f 41 f1 	itof %d15,%d15
80005ff0:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return vcoFreq;
}
<<<<<<< HEAD
<<<<<<< HEAD
80005fc0:	00 90       	ret 

80005fc2 <IfxScuCcu_getPllFrequency>:
=======
80005f64:	00 90       	ret 

80005f66 <IfxScuCcu_getPllFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ff4:	00 90       	ret 

80005ff6 <IfxScuCcu_getPllFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80005fc2:	91 30 00 ff 	movh.a %a15,61443
80005fc6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
=======
80005f66:	91 30 00 ff 	movh.a %a15,61443
80005f6a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80005ff6:	91 30 00 ff 	movh.a %a15,61443
80005ffa:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80005fca:	6d ff 90 ff 	call 80005eea <IfxScuCcu_getOscFrequency>
=======
80005ffe:	6d ff 90 ff 	call 80005f1e <IfxScuCcu_getOscFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (scu->PLLSTAT.B.VCOBYST == 1)
80006002:	4c f5       	ld.w %d15,[%a15]20
80006004:	2e 06       	jz.t %d15,0,80006010 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80006006:	4c f7       	ld.w %d15,[%a15]28
80006008:	37 0f 67 f8 	extr.u %d15,%d15,16,7
8000600c:	c2 1f       	add %d15,1
8000600e:	3c 28       	j 8000605e <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80006010:	4c f5       	ld.w %d15,[%a15]20
80006012:	6f 3f 15 00 	jz.t %d15,3,8000603c <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
<<<<<<< HEAD
80005fe2:	48 74       	ld.w %d4,[%a15]28
80005fe4:	8f f4 07 41 	and %d4,%d4,127
80005fe8:	c2 14       	add %d4,1
80005fea:	6d 00 4e 26 	call 8000ac86 <__floatsidf>
80005fee:	7b 80 19 54 	movh %d5,16792
80005ff2:	0b 23 10 68 	mov %e6,%d3,%d2
80005ff6:	82 04       	mov %d4,0
80005ff8:	1b 45 78 5d 	addi %d5,%d5,-10364
80005ffc:	6d 00 b9 25 	call 8000ab6e <__divdf3>
80006000:	0b 23 10 48 	mov %e4,%d3,%d2
80006004:	1d 00 74 26 	j 8000acec <__truncdfsf2>
=======
80005f6e:	6d ff 90 ff 	call 80005e8e <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005f72:	4c f5       	ld.w %d15,[%a15]20
80005f74:	2e 06       	jz.t %d15,0,80005f80 <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005f76:	4c f7       	ld.w %d15,[%a15]28
80005f78:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f7c:	c2 1f       	add %d15,1
80005f7e:	3c 28       	j 80005fce <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005f80:	4c f5       	ld.w %d15,[%a15]20
80005f82:	6f 3f 15 00 	jz.t %d15,3,80005fac <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005f86:	48 74       	ld.w %d4,[%a15]28
80005f88:	8f f4 07 41 	and %d4,%d4,127
80005f8c:	c2 14       	add %d4,1
80005f8e:	6d 00 94 25 	call 8000aab6 <__floatsidf>
80005f92:	7b 80 19 54 	movh %d5,16792
80005f96:	0b 23 10 68 	mov %e6,%d3,%d2
80005f9a:	82 04       	mov %d4,0
80005f9c:	1b 45 78 5d 	addi %d5,%d5,-10364
80005fa0:	6d 00 ff 24 	call 8000a99e <__divdf3>
80005fa4:	0b 23 10 48 	mov %e4,%d3,%d2
80005fa8:	1d 00 ba 25 	j 8000ab1c <__truncdfsf2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006016:	48 74       	ld.w %d4,[%a15]28
80006018:	8f f4 07 41 	and %d4,%d4,127
8000601c:	c2 14       	add %d4,1
8000601e:	6d 00 aa 26 	call 8000ad72 <__floatsidf>
80006022:	7b 80 19 54 	movh %d5,16792
80006026:	0b 23 10 68 	mov %e6,%d3,%d2
8000602a:	82 04       	mov %d4,0
8000602c:	1b 45 78 5d 	addi %d5,%d5,-10364
80006030:	6d 00 15 26 	call 8000ac5a <__divdf3>
80006034:	0b 23 10 48 	mov %e4,%d3,%d2
80006038:	1d 00 d0 26 	j 8000add8 <__truncdfsf2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
<<<<<<< HEAD
<<<<<<< HEAD
80006008:	48 64       	ld.w %d4,[%a15]24
8000600a:	4c f7       	ld.w %d15,[%a15]28
8000600c:	37 04 e7 44 	extr.u %d4,%d4,9,7
80006010:	8f ff 07 31 	and %d3,%d15,127
80006014:	4c f6       	ld.w %d15,[%a15]24
80006016:	c2 14       	add %d4,1
80006018:	37 0f 64 fc 	extr.u %d15,%d15,24,4
8000601c:	4b 04 41 41 	itof %d4,%d4
80006020:	c2 1f       	add %d15,1
80006022:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80006026:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000602a:	4b 0f 41 f1 	itof %d15,%d15
8000602e:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
80005fac:	48 64       	ld.w %d4,[%a15]24
80005fae:	4c f7       	ld.w %d15,[%a15]28
80005fb0:	37 04 e7 44 	extr.u %d4,%d4,9,7
80005fb4:	8f ff 07 31 	and %d3,%d15,127
80005fb8:	4c f6       	ld.w %d15,[%a15]24
80005fba:	c2 14       	add %d4,1
80005fbc:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fc0:	4b 04 41 41 	itof %d4,%d4
80005fc4:	c2 1f       	add %d15,1
80005fc6:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80005fca:	4b 42 41 20 	mul.f %d2,%d2,%d4
80005fce:	4b 0f 41 f1 	itof %d15,%d15
80005fd2:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000603c:	48 64       	ld.w %d4,[%a15]24
8000603e:	4c f7       	ld.w %d15,[%a15]28
80006040:	37 04 e7 44 	extr.u %d4,%d4,9,7
80006044:	8f ff 07 31 	and %d3,%d15,127
80006048:	4c f6       	ld.w %d15,[%a15]24
8000604a:	c2 14       	add %d4,1
8000604c:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006050:	4b 04 41 41 	itof %d4,%d4
80006054:	c2 1f       	add %d15,1
80006056:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
8000605a:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000605e:	4b 0f 41 f1 	itof %d15,%d15
80006062:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return freq;
}
<<<<<<< HEAD
<<<<<<< HEAD
80006032:	00 90       	ret 

80006034 <IfxScuCcu_getPllVcoFrequency>:
=======
80005fd6:	00 90       	ret 

80005fd8 <IfxScuCcu_getPllVcoFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006066:	00 90       	ret 

80006068 <IfxScuCcu_getPllVcoFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80006034:	91 30 00 ff 	movh.a %a15,61443
80006038:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000603c:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
8000603e:	7b f0 cb 24 	movh %d2,19647
80006042:	1b 02 c2 2b 	addi %d2,%d2,-17376
=======
80005fd8:	91 30 00 ff 	movh.a %a15,61443
80005fdc:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80005fe0:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005fe2:	7b f0 cb 24 	movh %d2,19647
80005fe6:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006068:	91 30 00 ff 	movh.a %a15,61443
8000606c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006070:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80006072:	7b f0 cb 24 	movh %d2,19647
80006076:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80006046:	6f 3f 18 80 	jnz.t %d15,3,80006076 <IfxScuCcu_getPllVcoFrequency+0x42>
=======
80005fea:	6f 3f 18 80 	jnz.t %d15,3,8000601a <IfxScuCcu_getPllVcoFrequency+0x42>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000607a:	6f 3f 18 80 	jnz.t %d15,3,800060aa <IfxScuCcu_getPllVcoFrequency+0x42>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
<<<<<<< HEAD
<<<<<<< HEAD
8000604a:	6d ff 50 ff 	call 80005eea <IfxScuCcu_getOscFrequency>
8000604e:	91 30 00 ff 	movh.a %a15,61443
80006052:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006056:	48 03       	ld.w %d3,[%a15]0
80006058:	4c f0       	ld.w %d15,[%a15]0
8000605a:	37 03 e7 34 	extr.u %d3,%d3,9,7
8000605e:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006062:	c2 13       	add %d3,1
80006064:	4b 03 41 31 	itof %d3,%d3
80006068:	c2 1f       	add %d15,1
8000606a:	4b 32 41 20 	mul.f %d2,%d2,%d3
8000606e:	4b 0f 41 f1 	itof %d15,%d15
80006072:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
80005fee:	6d ff 50 ff 	call 80005e8e <IfxScuCcu_getOscFrequency>
80005ff2:	91 30 00 ff 	movh.a %a15,61443
80005ff6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80005ffa:	48 03       	ld.w %d3,[%a15]0
80005ffc:	4c f0       	ld.w %d15,[%a15]0
80005ffe:	37 03 e7 34 	extr.u %d3,%d3,9,7
80006002:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006006:	c2 13       	add %d3,1
80006008:	4b 03 41 31 	itof %d3,%d3
8000600c:	c2 1f       	add %d15,1
8000600e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80006012:	4b 0f 41 f1 	itof %d15,%d15
80006016:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000607e:	6d ff 50 ff 	call 80005f1e <IfxScuCcu_getOscFrequency>
80006082:	91 30 00 ff 	movh.a %a15,61443
80006086:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000608a:	48 03       	ld.w %d3,[%a15]0
8000608c:	4c f0       	ld.w %d15,[%a15]0
8000608e:	37 03 e7 34 	extr.u %d3,%d3,9,7
80006092:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006096:	c2 13       	add %d3,1
80006098:	4b 03 41 31 	itof %d3,%d3
8000609c:	c2 1f       	add %d15,1
8000609e:	4b 32 41 20 	mul.f %d2,%d2,%d3
800060a2:	4b 0f 41 f1 	itof %d15,%d15
800060a6:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return vcoFreq;
}
<<<<<<< HEAD
<<<<<<< HEAD
80006076:	00 90       	ret 

80006078 <IfxScuCcu_getSourceFrequency>:
=======
8000601a:	00 90       	ret 

8000601c <IfxScuCcu_getSourceFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060aa:	00 90       	ret 

800060ac <IfxScuCcu_getSourceFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
<<<<<<< HEAD
<<<<<<< HEAD
80006078:	91 30 00 ff 	movh.a %a15,61443
8000607c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006080:	4c f0       	ld.w %d15,[%a15]0
80006082:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006086:	6e 06       	jz %d15,80006092 <IfxScuCcu_getSourceFrequency+0x1a>
80006088:	1e 13       	jeq %d15,1,8000608e <IfxScuCcu_getSourceFrequency+0x16>
=======
8000601c:	91 30 00 ff 	movh.a %a15,61443
80006020:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006024:	4c f0       	ld.w %d15,[%a15]0
80006026:	37 0f 62 fe 	extr.u %d15,%d15,28,2
8000602a:	6e 06       	jz %d15,80006036 <IfxScuCcu_getSourceFrequency+0x1a>
8000602c:	1e 13       	jeq %d15,1,80006032 <IfxScuCcu_getSourceFrequency+0x16>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060ac:	91 30 00 ff 	movh.a %a15,61443
800060b0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060b4:	4c f0       	ld.w %d15,[%a15]0
800060b6:	37 0f 62 fe 	extr.u %d15,%d15,28,2
800060ba:	6e 06       	jz %d15,800060c6 <IfxScuCcu_getSourceFrequency+0x1a>
800060bc:	1e 13       	jeq %d15,1,800060c2 <IfxScuCcu_getSourceFrequency+0x16>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000608a:	82 02       	mov %d2,0
8000608c:	00 90       	ret 
=======
8000602e:	82 02       	mov %d2,0
80006030:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060be:	82 02       	mov %d2,0
800060c0:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
8000608e:	1d ff 9a ff 	j 80005fc2 <IfxScuCcu_getPllFrequency>
=======
80006032:	1d ff 9a ff 	j 80005f66 <IfxScuCcu_getPllFrequency>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060c2:	1d ff 9a ff 	j 80005ff6 <IfxScuCcu_getPllFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80006092:	7b f0 cb 24 	movh %d2,19647
80006096:	1b 02 c2 2b 	addi %d2,%d2,-17376
=======
80006036:	7b f0 cb 24 	movh %d2,19647
8000603a:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060c6:	7b f0 cb 24 	movh %d2,19647
800060ca:	1b 02 c2 2b 	addi %d2,%d2,-17376
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000609a:	00 90       	ret 

8000609c <IfxScuCcu_wait>:
=======
8000603e:	00 90       	ret 

80006040 <IfxScuCcu_wait>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060ce:	00 90       	ret 

800060d0 <IfxScuCcu_wait>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000609c:	02 4f       	mov %d15,%d4
8000609e:	6d ff ed ff 	call 80006078 <IfxScuCcu_getSourceFrequency>
800060a2:	91 30 00 ff 	movh.a %a15,61443
800060a6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800060aa:	48 03       	ld.w %d3,[%a15]0
800060ac:	37 03 64 34 	extr.u %d3,%d3,8,4
800060b0:	4b 03 41 31 	itof %d3,%d3
800060b4:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
800060b8:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
=======
80006040:	02 4f       	mov %d15,%d4
80006042:	6d ff ed ff 	call 8000601c <IfxScuCcu_getSourceFrequency>
80006046:	91 30 00 ff 	movh.a %a15,61443
8000604a:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000604e:	48 03       	ld.w %d3,[%a15]0
80006050:	37 03 64 34 	extr.u %d3,%d3,8,4
80006054:	4b 03 41 31 	itof %d3,%d3
80006058:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
8000605c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060d0:	02 4f       	mov %d15,%d4
800060d2:	6d ff ed ff 	call 800060ac <IfxScuCcu_getSourceFrequency>
800060d6:	91 30 00 ff 	movh.a %a15,61443
800060da:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800060de:	48 03       	ld.w %d3,[%a15]0
800060e0:	37 03 64 34 	extr.u %d3,%d3,8,4
800060e4:	4b 03 41 31 	itof %d3,%d3
800060e8:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
800060ec:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
<<<<<<< HEAD
<<<<<<< HEAD
800060bc:	4b f2 41 20 	mul.f %d2,%d2,%d15
800060c0:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
800060c4:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800060c8:	a2 3f       	sub %d15,%d3
800060ca:	3f 2f fd ff 	jlt.u %d15,%d2,800060c4 <IfxScuCcu_wait+0x28>
=======
80006060:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006064:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80006068:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
8000606c:	a2 3f       	sub %d15,%d3
8000606e:	3f 2f fd ff 	jlt.u %d15,%d2,80006068 <IfxScuCcu_wait+0x28>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800060f0:	4b f2 41 20 	mul.f %d2,%d2,%d15
800060f4:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
800060f8:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800060fc:	a2 3f       	sub %d15,%d3
800060fe:	3f 2f fd ff 	jlt.u %d15,%d2,800060f8 <IfxScuCcu_wait+0x28>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
<<<<<<< HEAD
<<<<<<< HEAD
800060ce:	00 90       	ret 

800060d0 <IfxScuCcu_getBbbFrequency>:
=======
80006072:	00 90       	ret 

80006074 <IfxScuCcu_getBbbFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006102:	00 90       	ret 

80006104 <IfxScuCcu_getBbbFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
800060d0:	6d ff d4 ff 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800060d4:	91 30 00 ff 	movh.a %a15,61443
800060d8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060dc:	48 03       	ld.w %d3,[%a15]0
=======
80006074:	6d ff d4 ff 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006078:	91 30 00 ff 	movh.a %a15,61443
8000607c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006080:	48 03       	ld.w %d3,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006104:	6d ff d4 ff 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006108:	91 30 00 ff 	movh.a %a15,61443
8000610c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006110:	48 03       	ld.w %d3,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
<<<<<<< HEAD
<<<<<<< HEAD
800060de:	82 0f       	mov %d15,0
=======
80006082:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006112:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
<<<<<<< HEAD
<<<<<<< HEAD
800060e0:	37 03 64 36 	extr.u %d3,%d3,12,4
800060e4:	ff 53 30 80 	jge.u %d3,5,80006144 <IfxScuCcu_getBbbFrequency+0x74>
800060e8:	91 00 00 f8 	movh.a %a15,32768
800060ec:	d9 ff 38 36 	lea %a15,[%a15]24824 <800060f8 <IfxScuCcu_getBbbFrequency+0x28>>
800060f0:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800060f4:	dc 0f       	ji %a15
800060f6:	00 00       	nop 
800060f8:	1d 00 0a 00 	j 8000610c <IfxScuCcu_getBbbFrequency+0x3c>
800060fc:	1d 00 17 00 	j 8000612a <IfxScuCcu_getBbbFrequency+0x5a>
80006100:	1d 00 18 00 	j 80006130 <IfxScuCcu_getBbbFrequency+0x60>
80006104:	1d 00 19 00 	j 80006136 <IfxScuCcu_getBbbFrequency+0x66>
80006108:	1d 00 1a 00 	j 8000613c <IfxScuCcu_getBbbFrequency+0x6c>
=======
80006084:	37 03 64 36 	extr.u %d3,%d3,12,4
80006088:	ff 53 30 80 	jge.u %d3,5,800060e8 <IfxScuCcu_getBbbFrequency+0x74>
8000608c:	91 00 00 f8 	movh.a %a15,32768
80006090:	d9 ff 1c 26 	lea %a15,[%a15]24732 <8000609c <IfxScuCcu_getBbbFrequency+0x28>>
80006094:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006098:	dc 0f       	ji %a15
8000609a:	00 00       	nop 
8000609c:	1d 00 0a 00 	j 800060b0 <IfxScuCcu_getBbbFrequency+0x3c>
800060a0:	1d 00 17 00 	j 800060ce <IfxScuCcu_getBbbFrequency+0x5a>
800060a4:	1d 00 18 00 	j 800060d4 <IfxScuCcu_getBbbFrequency+0x60>
800060a8:	1d 00 19 00 	j 800060da <IfxScuCcu_getBbbFrequency+0x66>
800060ac:	1d 00 1a 00 	j 800060e0 <IfxScuCcu_getBbbFrequency+0x6c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006114:	37 03 64 36 	extr.u %d3,%d3,12,4
80006118:	ff 53 30 80 	jge.u %d3,5,80006178 <IfxScuCcu_getBbbFrequency+0x74>
8000611c:	91 00 00 f8 	movh.a %a15,32768
80006120:	d9 ff 2c 46 	lea %a15,[%a15]24876 <8000612c <IfxScuCcu_getBbbFrequency+0x28>>
80006124:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006128:	dc 0f       	ji %a15
8000612a:	00 00       	nop 
8000612c:	1d 00 0a 00 	j 80006140 <IfxScuCcu_getBbbFrequency+0x3c>
80006130:	1d 00 17 00 	j 8000615e <IfxScuCcu_getBbbFrequency+0x5a>
80006134:	1d 00 18 00 	j 80006164 <IfxScuCcu_getBbbFrequency+0x60>
80006138:	1d 00 19 00 	j 8000616a <IfxScuCcu_getBbbFrequency+0x66>
8000613c:	1d 00 1a 00 	j 80006170 <IfxScuCcu_getBbbFrequency+0x6c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
8000610c:	91 30 00 ff 	movh.a %a15,61443
80006110:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006114:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
80006116:	82 0f       	mov %d15,0
=======
800060b0:	91 30 00 ff 	movh.a %a15,61443
800060b4:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800060b8:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
800060ba:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006140:	91 30 00 ff 	movh.a %a15,61443
80006144:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006148:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
8000614a:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80006118:	8f f3 00 31 	and %d3,%d3,15
8000611c:	df 03 14 00 	jeq %d3,0,80006144 <IfxScuCcu_getBbbFrequency+0x74>
=======
800060bc:	8f f3 00 31 	and %d3,%d3,15
800060c0:	df 03 14 00 	jeq %d3,0,800060e8 <IfxScuCcu_getBbbFrequency+0x74>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000614c:	8f f3 00 31 	and %d3,%d3,15
80006150:	df 03 14 00 	jeq %d3,0,80006178 <IfxScuCcu_getBbbFrequency+0x74>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
<<<<<<< HEAD
<<<<<<< HEAD
80006120:	4c f0       	ld.w %d15,[%a15]0
80006122:	16 0f       	and %d15,15
80006124:	4b 0f 41 f1 	itof %d15,%d15
80006128:	3c 0c       	j 80006140 <IfxScuCcu_getBbbFrequency+0x70>
=======
800060c4:	4c f0       	ld.w %d15,[%a15]0
800060c6:	16 0f       	and %d15,15
800060c8:	4b 0f 41 f1 	itof %d15,%d15
800060cc:	3c 0c       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006154:	4c f0       	ld.w %d15,[%a15]0
80006156:	16 0f       	and %d15,15
80006158:	4b 0f 41 f1 	itof %d15,%d15
8000615c:	3c 0c       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
<<<<<<< HEAD
<<<<<<< HEAD
8000612a:	7b 00 1f f4 	movh %d15,16880
8000612e:	3c 09       	j 80006140 <IfxScuCcu_getBbbFrequency+0x70>
=======
8000615e:	7b 00 1f f4 	movh %d15,16880
80006162:	3c 09       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
80006164:	7b 00 27 f4 	movh %d15,17008
80006168:	3c 06       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
8000616a:	7b 00 2f f4 	movh %d15,17136
8000616e:	3c 03       	j 80006174 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
<<<<<<< HEAD
8000613c:	7b 00 37 f4 	movh %d15,17264
80006140:	4b f2 51 f0 	div.f %d15,%d2,%d15
=======
800060ce:	7b 00 1f f4 	movh %d15,16880
800060d2:	3c 09       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
800060d4:	7b 00 27 f4 	movh %d15,17008
800060d8:	3c 06       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
800060da:	7b 00 2f f4 	movh %d15,17136
800060de:	3c 03       	j 800060e4 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
800060e0:	7b 00 37 f4 	movh %d15,17264
800060e4:	4b f2 51 f0 	div.f %d15,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006170:	7b 00 37 f4 	movh %d15,17264
80006174:	4b f2 51 f0 	div.f %d15,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
80006144:	02 f2       	mov %d2,%d15
80006146:	00 90       	ret 

80006148 <IfxScuCcu_getMaxFrequency>:
=======
800060e8:	02 f2       	mov %d2,%d15
800060ea:	00 90       	ret 

800060ec <IfxScuCcu_getMaxFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006178:	02 f2       	mov %d2,%d15
8000617a:	00 90       	ret 

8000617c <IfxScuCcu_getMaxFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
<<<<<<< HEAD
<<<<<<< HEAD
80006148:	91 30 00 ff 	movh.a %a15,61443
8000614c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
=======
800060ec:	91 30 00 ff 	movh.a %a15,61443
800060f0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000617c:	91 30 00 ff 	movh.a %a15,61443
80006180:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80006150:	6d ff 94 ff 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006154:	4c f0       	ld.w %d15,[%a15]0
80006156:	37 0f 64 f6 	extr.u %d15,%d15,12,4
8000615a:	ff 5f 2d 80 	jge.u %d15,5,800061b4 <IfxScuCcu_getMaxFrequency+0x6c>
8000615e:	91 00 00 f8 	movh.a %a15,32768
80006162:	d9 ff 2c 56 	lea %a15,[%a15]24940 <8000616c <IfxScuCcu_getMaxFrequency+0x24>>
80006166:	90 ff       	addsc.a %a15,%a15,%d15,2
80006168:	dc 0f       	ji %a15
8000616a:	00 00       	nop 
8000616c:	1d 00 0a 00 	j 80006180 <IfxScuCcu_getMaxFrequency+0x38>
80006170:	1d 00 14 00 	j 80006198 <IfxScuCcu_getMaxFrequency+0x50>
80006174:	1d 00 15 00 	j 8000619e <IfxScuCcu_getMaxFrequency+0x56>
80006178:	1d 00 16 00 	j 800061a4 <IfxScuCcu_getMaxFrequency+0x5c>
8000617c:	1d 00 17 00 	j 800061aa <IfxScuCcu_getMaxFrequency+0x62>
=======
800060f4:	6d ff 94 ff 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800060f8:	4c f0       	ld.w %d15,[%a15]0
800060fa:	37 0f 64 f6 	extr.u %d15,%d15,12,4
800060fe:	ff 5f 2d 80 	jge.u %d15,5,80006158 <IfxScuCcu_getMaxFrequency+0x6c>
80006102:	91 00 00 f8 	movh.a %a15,32768
80006106:	d9 ff 10 46 	lea %a15,[%a15]24848 <80006110 <IfxScuCcu_getMaxFrequency+0x24>>
8000610a:	90 ff       	addsc.a %a15,%a15,%d15,2
8000610c:	dc 0f       	ji %a15
8000610e:	00 00       	nop 
80006110:	1d 00 0a 00 	j 80006124 <IfxScuCcu_getMaxFrequency+0x38>
80006114:	1d 00 14 00 	j 8000613c <IfxScuCcu_getMaxFrequency+0x50>
80006118:	1d 00 15 00 	j 80006142 <IfxScuCcu_getMaxFrequency+0x56>
8000611c:	1d 00 16 00 	j 80006148 <IfxScuCcu_getMaxFrequency+0x5c>
80006120:	1d 00 17 00 	j 8000614e <IfxScuCcu_getMaxFrequency+0x62>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006184:	6d ff 94 ff 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006188:	4c f0       	ld.w %d15,[%a15]0
8000618a:	37 0f 64 f6 	extr.u %d15,%d15,12,4
8000618e:	ff 5f 2d 80 	jge.u %d15,5,800061e8 <IfxScuCcu_getMaxFrequency+0x6c>
80006192:	91 00 00 f8 	movh.a %a15,32768
80006196:	d9 ff 20 66 	lea %a15,[%a15]24992 <800061a0 <IfxScuCcu_getMaxFrequency+0x24>>
8000619a:	90 ff       	addsc.a %a15,%a15,%d15,2
8000619c:	dc 0f       	ji %a15
8000619e:	00 00       	nop 
800061a0:	1d 00 0a 00 	j 800061b4 <IfxScuCcu_getMaxFrequency+0x38>
800061a4:	1d 00 14 00 	j 800061cc <IfxScuCcu_getMaxFrequency+0x50>
800061a8:	1d 00 15 00 	j 800061d2 <IfxScuCcu_getMaxFrequency+0x56>
800061ac:	1d 00 16 00 	j 800061d8 <IfxScuCcu_getMaxFrequency+0x5c>
800061b0:	1d 00 17 00 	j 800061de <IfxScuCcu_getMaxFrequency+0x62>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80006180:	91 30 00 ff 	movh.a %a15,61443
80006184:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006188:	4c f0       	ld.w %d15,[%a15]0
8000618a:	16 0f       	and %d15,15
8000618c:	6e 15       	jz %d15,800061b6 <IfxScuCcu_getMaxFrequency+0x6e>
=======
80006124:	91 30 00 ff 	movh.a %a15,61443
80006128:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000612c:	4c f0       	ld.w %d15,[%a15]0
8000612e:	16 0f       	and %d15,15
80006130:	6e 15       	jz %d15,8000615a <IfxScuCcu_getMaxFrequency+0x6e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061b4:	91 30 00 ff 	movh.a %a15,61443
800061b8:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800061bc:	4c f0       	ld.w %d15,[%a15]0
800061be:	16 0f       	and %d15,15
800061c0:	6e 15       	jz %d15,800061ea <IfxScuCcu_getMaxFrequency+0x6e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
<<<<<<< HEAD
<<<<<<< HEAD
8000618e:	4c f0       	ld.w %d15,[%a15]0
80006190:	16 0f       	and %d15,15
80006192:	4b 0f 41 f1 	itof %d15,%d15
80006196:	3c 0c       	j 800061ae <IfxScuCcu_getMaxFrequency+0x66>
=======
80006132:	4c f0       	ld.w %d15,[%a15]0
80006134:	16 0f       	and %d15,15
80006136:	4b 0f 41 f1 	itof %d15,%d15
8000613a:	3c 0c       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061c2:	4c f0       	ld.w %d15,[%a15]0
800061c4:	16 0f       	and %d15,15
800061c6:	4b 0f 41 f1 	itof %d15,%d15
800061ca:	3c 0c       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
<<<<<<< HEAD
<<<<<<< HEAD
80006198:	7b 00 17 f4 	movh %d15,16752
8000619c:	3c 09       	j 800061ae <IfxScuCcu_getMaxFrequency+0x66>
=======
800061cc:	7b 00 17 f4 	movh %d15,16752
800061d0:	3c 09       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
800061d2:	7b 00 1f f4 	movh %d15,16880
800061d6:	3c 06       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
800061d8:	7b 00 27 f4 	movh %d15,17008
800061dc:	3c 03       	j 800061e2 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
800061de:	7b 00 2f f4 	movh %d15,17136
800061e2:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
800061e6:	00 90       	ret 
    default:
        maxFrequency = 0.0;
<<<<<<< HEAD
800061b4:	82 02       	mov %d2,0
=======
8000613c:	7b 00 17 f4 	movh %d15,16752
80006140:	3c 09       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
80006142:	7b 00 1f f4 	movh %d15,16880
80006146:	3c 06       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
80006148:	7b 00 27 f4 	movh %d15,17008
8000614c:	3c 03       	j 80006152 <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
8000614e:	7b 00 2f f4 	movh %d15,17136
80006152:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80006156:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80006158:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061e8:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    }

    return maxFrequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
800061b6:	00 90       	ret 

800061b8 <IfxScuCcu_getBaud1Frequency>:
=======
8000615a:	00 90       	ret 

8000615c <IfxScuCcu_getBaud1Frequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061ea:	00 90       	ret 

800061ec <IfxScuCcu_getBaud1Frequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
800061b8:	91 30 00 ff 	movh.a %a15,61443
800061bc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061c0:	4c f0       	ld.w %d15,[%a15]0
=======
8000615c:	91 30 00 ff 	movh.a %a15,61443
80006160:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006164:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061ec:	91 30 00 ff 	movh.a %a15,61443
800061f0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061f4:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800061c2:	82 02       	mov %d2,0
=======
80006166:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061f6:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
800061c4:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
800061c8:	76 87       	jz %d8,800061d6 <IfxScuCcu_getBaud1Frequency+0x1e>
=======
80006168:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
8000616c:	76 87       	jz %d8,8000617a <IfxScuCcu_getBaud1Frequency+0x1e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061f8:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
800061fc:	76 87       	jz %d8,8000620a <IfxScuCcu_getBaud1Frequency+0x1e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
<<<<<<< HEAD
<<<<<<< HEAD
800061ca:	6d ff bf ff 	call 80006148 <IfxScuCcu_getMaxFrequency>
800061ce:	4b 08 41 f1 	itof %d15,%d8
800061d2:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
8000616e:	6d ff bf ff 	call 800060ec <IfxScuCcu_getMaxFrequency>
80006172:	4b 08 41 f1 	itof %d15,%d8
80006176:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800061fe:	6d ff bf ff 	call 8000617c <IfxScuCcu_getMaxFrequency>
80006202:	4b 08 41 f1 	itof %d15,%d8
80006206:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return frequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
800061d6:	00 90       	ret 

800061d8 <IfxScuCcu_getBaud2Frequency>:
=======
8000617a:	00 90       	ret 

8000617c <IfxScuCcu_getBaud2Frequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000620a:	00 90       	ret 

8000620c <IfxScuCcu_getBaud2Frequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
800061d8:	91 30 00 ff 	movh.a %a15,61443
800061dc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061e0:	4c f0       	ld.w %d15,[%a15]0
=======
8000617c:	91 30 00 ff 	movh.a %a15,61443
80006180:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006184:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000620c:	91 30 00 ff 	movh.a %a15,61443
80006210:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006214:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800061e2:	82 02       	mov %d2,0
=======
80006186:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006216:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
800061e4:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
800061e8:	16 f0       	and %d15,240
800061ea:	6e 07       	jz %d15,800061f8 <IfxScuCcu_getBaud2Frequency+0x20>
=======
80006188:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
8000618c:	16 f0       	and %d15,240
8000618e:	6e 07       	jz %d15,8000619c <IfxScuCcu_getBaud2Frequency+0x20>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006218:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
8000621c:	16 f0       	and %d15,240
8000621e:	6e 07       	jz %d15,8000622c <IfxScuCcu_getBaud2Frequency+0x20>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
<<<<<<< HEAD
<<<<<<< HEAD
800061ec:	6d ff ae ff 	call 80006148 <IfxScuCcu_getMaxFrequency>
800061f0:	4b 08 41 f1 	itof %d15,%d8
800061f4:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
80006190:	6d ff ae ff 	call 800060ec <IfxScuCcu_getMaxFrequency>
80006194:	4b 08 41 f1 	itof %d15,%d8
80006198:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006220:	6d ff ae ff 	call 8000617c <IfxScuCcu_getMaxFrequency>
80006224:	4b 08 41 f1 	itof %d15,%d8
80006228:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return frequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
800061f8:	00 90       	ret 

800061fa <IfxScuCcu_getSpbFrequency>:
=======
8000619c:	00 90       	ret 

8000619e <IfxScuCcu_getSpbFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000622c:	00 90       	ret 

8000622e <IfxScuCcu_getSpbFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
800061fa:	6d ff 3f ff 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800061fe:	91 30 00 ff 	movh.a %a15,61443
80006202:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006206:	48 03       	ld.w %d3,[%a15]0
=======
8000619e:	6d ff 3f ff 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800061a2:	91 30 00 ff 	movh.a %a15,61443
800061a6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061aa:	48 03       	ld.w %d3,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000622e:	6d ff 3f ff 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006232:	91 30 00 ff 	movh.a %a15,61443
80006236:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000623a:	48 03       	ld.w %d3,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
<<<<<<< HEAD
<<<<<<< HEAD
80006208:	82 0f       	mov %d15,0
=======
800061ac:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000623c:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
<<<<<<< HEAD
<<<<<<< HEAD
8000620a:	37 03 64 36 	extr.u %d3,%d3,12,4
8000620e:	ff 53 30 80 	jge.u %d3,5,8000626e <IfxScuCcu_getSpbFrequency+0x74>
80006212:	91 00 00 f8 	movh.a %a15,32768
80006216:	d9 ff 20 86 	lea %a15,[%a15]25120 <80006220 <IfxScuCcu_getSpbFrequency+0x26>>
8000621a:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000621e:	dc 0f       	ji %a15
80006220:	1d 00 0a 00 	j 80006234 <IfxScuCcu_getSpbFrequency+0x3a>
80006224:	1d 00 18 00 	j 80006254 <IfxScuCcu_getSpbFrequency+0x5a>
80006228:	1d 00 19 00 	j 8000625a <IfxScuCcu_getSpbFrequency+0x60>
8000622c:	1d 00 1a 00 	j 80006260 <IfxScuCcu_getSpbFrequency+0x66>
80006230:	1d 00 1b 00 	j 80006266 <IfxScuCcu_getSpbFrequency+0x6c>
=======
800061ae:	37 03 64 36 	extr.u %d3,%d3,12,4
800061b2:	ff 53 30 80 	jge.u %d3,5,80006212 <IfxScuCcu_getSpbFrequency+0x74>
800061b6:	91 00 00 f8 	movh.a %a15,32768
800061ba:	d9 ff 04 76 	lea %a15,[%a15]25028 <800061c4 <IfxScuCcu_getSpbFrequency+0x26>>
800061be:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800061c2:	dc 0f       	ji %a15
800061c4:	1d 00 0a 00 	j 800061d8 <IfxScuCcu_getSpbFrequency+0x3a>
800061c8:	1d 00 18 00 	j 800061f8 <IfxScuCcu_getSpbFrequency+0x5a>
800061cc:	1d 00 19 00 	j 800061fe <IfxScuCcu_getSpbFrequency+0x60>
800061d0:	1d 00 1a 00 	j 80006204 <IfxScuCcu_getSpbFrequency+0x66>
800061d4:	1d 00 1b 00 	j 8000620a <IfxScuCcu_getSpbFrequency+0x6c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000623e:	37 03 64 36 	extr.u %d3,%d3,12,4
80006242:	ff 53 30 80 	jge.u %d3,5,800062a2 <IfxScuCcu_getSpbFrequency+0x74>
80006246:	91 00 00 f8 	movh.a %a15,32768
8000624a:	d9 ff 14 96 	lea %a15,[%a15]25172 <80006254 <IfxScuCcu_getSpbFrequency+0x26>>
8000624e:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006252:	dc 0f       	ji %a15
80006254:	1d 00 0a 00 	j 80006268 <IfxScuCcu_getSpbFrequency+0x3a>
80006258:	1d 00 18 00 	j 80006288 <IfxScuCcu_getSpbFrequency+0x5a>
8000625c:	1d 00 19 00 	j 8000628e <IfxScuCcu_getSpbFrequency+0x60>
80006260:	1d 00 1a 00 	j 80006294 <IfxScuCcu_getSpbFrequency+0x66>
80006264:	1d 00 1b 00 	j 8000629a <IfxScuCcu_getSpbFrequency+0x6c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80006234:	91 30 00 ff 	movh.a %a15,61443
80006238:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000623c:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
8000623e:	82 0f       	mov %d15,0
=======
800061d8:	91 30 00 ff 	movh.a %a15,61443
800061dc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061e0:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
800061e2:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006268:	91 30 00 ff 	movh.a %a15,61443
8000626c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006270:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
80006272:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80006240:	37 03 64 38 	extr.u %d3,%d3,16,4
80006244:	df 03 15 00 	jeq %d3,0,8000626e <IfxScuCcu_getSpbFrequency+0x74>
=======
800061e4:	37 03 64 38 	extr.u %d3,%d3,16,4
800061e8:	df 03 15 00 	jeq %d3,0,80006212 <IfxScuCcu_getSpbFrequency+0x74>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006274:	37 03 64 38 	extr.u %d3,%d3,16,4
80006278:	df 03 15 00 	jeq %d3,0,800062a2 <IfxScuCcu_getSpbFrequency+0x74>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
<<<<<<< HEAD
<<<<<<< HEAD
80006248:	4c f0       	ld.w %d15,[%a15]0
8000624a:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000624e:	4b 0f 41 f1 	itof %d15,%d15
80006252:	3c 0c       	j 8000626a <IfxScuCcu_getSpbFrequency+0x70>
=======
800061ec:	4c f0       	ld.w %d15,[%a15]0
800061ee:	37 0f 64 f8 	extr.u %d15,%d15,16,4
800061f2:	4b 0f 41 f1 	itof %d15,%d15
800061f6:	3c 0c       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000627c:	4c f0       	ld.w %d15,[%a15]0
8000627e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80006282:	4b 0f 41 f1 	itof %d15,%d15
80006286:	3c 0c       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
<<<<<<< HEAD
<<<<<<< HEAD
80006254:	7b 00 1f f4 	movh %d15,16880
80006258:	3c 09       	j 8000626a <IfxScuCcu_getSpbFrequency+0x70>
=======
80006288:	7b 00 1f f4 	movh %d15,16880
8000628c:	3c 09       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
8000628e:	7b 00 27 f4 	movh %d15,17008
80006292:	3c 06       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006294:	7b 00 2f f4 	movh %d15,17136
80006298:	3c 03       	j 8000629e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
<<<<<<< HEAD
80006266:	7b 00 37 f4 	movh %d15,17264
8000626a:	4b f2 51 f0 	div.f %d15,%d2,%d15
=======
800061f8:	7b 00 1f f4 	movh %d15,16880
800061fc:	3c 09       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
800061fe:	7b 00 27 f4 	movh %d15,17008
80006202:	3c 06       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006204:	7b 00 2f f4 	movh %d15,17136
80006208:	3c 03       	j 8000620e <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
8000620a:	7b 00 37 f4 	movh %d15,17264
8000620e:	4b f2 51 f0 	div.f %d15,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000629a:	7b 00 37 f4 	movh %d15,17264
8000629e:	4b f2 51 f0 	div.f %d15,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000626e:	02 f2       	mov %d2,%d15
80006270:	00 90       	ret 

80006272 <IfxScuCcu_getModuleFrequency>:
=======
80006212:	02 f2       	mov %d2,%d15
80006214:	00 90       	ret 

80006216 <IfxScuCcu_getModuleFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062a2:	02 f2       	mov %d2,%d15
800062a4:	00 90       	ret 

800062a6 <IfxScuCcu_getModuleFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
<<<<<<< HEAD
<<<<<<< HEAD
80006272:	91 30 00 ff 	movh.a %a15,61443
80006276:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000627a:	48 09       	ld.w %d9,[%a15]0
=======
800062a6:	91 30 00 ff 	movh.a %a15,61443
800062aa:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
800062ae:	48 09       	ld.w %d9,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    spbFreq = IfxScuCcu_getSpbFrequency();
800062b0:	6d ff bf ff 	call 8000622e <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
<<<<<<< HEAD
80006280:	bb 00 00 fc 	mov.u %d15,49152
=======
80006216:	91 30 00 ff 	movh.a %a15,61443
8000621a:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000621e:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
80006220:	6d ff bf ff 	call 8000619e <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
80006224:	bb 00 00 fc 	mov.u %d15,49152
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062b4:	bb 00 00 fc 	mov.u %d15,49152
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80006284:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
80006286:	26 9f       	and %d15,%d9
80006288:	3b 00 00 24 	mov %d2,16384
=======
80006228:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
8000622a:	26 9f       	and %d15,%d9
8000622c:	3b 00 00 24 	mov %d2,16384
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062b8:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
800062ba:	26 9f       	and %d15,%d9
800062bc:	3b 00 00 24 	mov %d2,16384
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
<<<<<<< HEAD
<<<<<<< HEAD
8000628c:	b7 09 16 85 	insert %d8,%d9,0,10,22
=======
800062c0:	b7 09 16 85 	insert %d8,%d9,0,10,22
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
800062c4:	7e 29       	jne %d15,%d2,800062d6 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
800062c6:	3b 00 40 20 	mov %d2,1024
800062ca:	a2 82       	sub %d2,%d8
800062cc:	4b 02 41 21 	itof %d2,%d2
800062d0:	4b 23 51 20 	div.f %d2,%d3,%d2
800062d4:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
<<<<<<< HEAD
800062a2:	bb 00 00 48 	mov.u %d4,32768
=======
80006230:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
80006234:	7e 29       	jne %d15,%d2,80006246 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
80006236:	3b 00 40 20 	mov %d2,1024
8000623a:	a2 82       	sub %d2,%d8
8000623c:	4b 02 41 21 	itof %d2,%d2
80006240:	4b 23 51 20 	div.f %d2,%d3,%d2
80006244:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
80006246:	bb 00 00 48 	mov.u %d4,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062d6:	bb 00 00 48 	mov.u %d4,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800062a6:	82 02       	mov %d2,0
=======
8000624a:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062da:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
<<<<<<< HEAD
<<<<<<< HEAD
800062a8:	7e 49       	jne %d15,%d4,800062ba <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
800062aa:	4b 08 41 21 	itof %d2,%d8
800062ae:	7b 00 a8 f3 	movh %d15,14976
800062b2:	4b 23 41 20 	mul.f %d2,%d3,%d2
800062b6:	4b f2 41 20 	mul.f %d2,%d2,%d15
=======
8000624c:	7e 49       	jne %d15,%d4,8000625e <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
8000624e:	4b 08 41 21 	itof %d2,%d8
80006252:	7b 00 a8 f3 	movh %d15,14976
80006256:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000625a:	4b f2 41 20 	mul.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062dc:	7e 49       	jne %d15,%d4,800062ee <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
800062de:	4b 08 41 21 	itof %d2,%d8
800062e2:	7b 00 a8 f3 	movh %d15,14976
800062e6:	4b 23 41 20 	mul.f %d2,%d3,%d2
800062ea:	4b f2 41 20 	mul.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
<<<<<<< HEAD
<<<<<<< HEAD
800062ba:	00 90       	ret 

800062bc <IfxScuCcu_getSriFrequency>:
=======
8000625e:	00 90       	ret 

80006260 <IfxScuCcu_getSriFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062ee:	00 90       	ret 

800062f0 <IfxScuCcu_getSriFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
800062bc:	6d ff de fe 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800062c0:	91 30 00 ff 	movh.a %a15,61443
800062c4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062c8:	48 03       	ld.w %d3,[%a15]0
=======
80006260:	6d ff de fe 	call 8000601c <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006264:	91 30 00 ff 	movh.a %a15,61443
80006268:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000626c:	48 03       	ld.w %d3,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062f0:	6d ff de fe 	call 800060ac <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800062f4:	91 30 00 ff 	movh.a %a15,61443
800062f8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062fc:	48 03       	ld.w %d3,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
<<<<<<< HEAD
<<<<<<< HEAD
800062ca:	82 0f       	mov %d15,0
=======
8000626e:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800062fe:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
<<<<<<< HEAD
<<<<<<< HEAD
800062cc:	37 03 64 36 	extr.u %d3,%d3,12,4
800062d0:	ff 53 31 80 	jge.u %d3,5,80006332 <IfxScuCcu_getSriFrequency+0x76>
800062d4:	91 00 00 f8 	movh.a %a15,32768
800062d8:	d9 ff 24 b6 	lea %a15,[%a15]25316 <800062e4 <IfxScuCcu_getSriFrequency+0x28>>
800062dc:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800062e0:	dc 0f       	ji %a15
800062e2:	00 00       	nop 
800062e4:	1d 00 0a 00 	j 800062f8 <IfxScuCcu_getSriFrequency+0x3c>
800062e8:	1d 00 18 00 	j 80006318 <IfxScuCcu_getSriFrequency+0x5c>
800062ec:	1d 00 19 00 	j 8000631e <IfxScuCcu_getSriFrequency+0x62>
800062f0:	1d 00 1a 00 	j 80006324 <IfxScuCcu_getSriFrequency+0x68>
800062f4:	1d 00 1b 00 	j 8000632a <IfxScuCcu_getSriFrequency+0x6e>
=======
80006270:	37 03 64 36 	extr.u %d3,%d3,12,4
80006274:	ff 53 31 80 	jge.u %d3,5,800062d6 <IfxScuCcu_getSriFrequency+0x76>
80006278:	91 00 00 f8 	movh.a %a15,32768
8000627c:	d9 ff 08 a6 	lea %a15,[%a15]25224 <80006288 <IfxScuCcu_getSriFrequency+0x28>>
80006280:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006284:	dc 0f       	ji %a15
80006286:	00 00       	nop 
80006288:	1d 00 0a 00 	j 8000629c <IfxScuCcu_getSriFrequency+0x3c>
8000628c:	1d 00 18 00 	j 800062bc <IfxScuCcu_getSriFrequency+0x5c>
80006290:	1d 00 19 00 	j 800062c2 <IfxScuCcu_getSriFrequency+0x62>
80006294:	1d 00 1a 00 	j 800062c8 <IfxScuCcu_getSriFrequency+0x68>
80006298:	1d 00 1b 00 	j 800062ce <IfxScuCcu_getSriFrequency+0x6e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006300:	37 03 64 36 	extr.u %d3,%d3,12,4
80006304:	ff 53 31 80 	jge.u %d3,5,80006366 <IfxScuCcu_getSriFrequency+0x76>
80006308:	91 00 00 f8 	movh.a %a15,32768
8000630c:	d9 ff 18 c6 	lea %a15,[%a15]25368 <80006318 <IfxScuCcu_getSriFrequency+0x28>>
80006310:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006314:	dc 0f       	ji %a15
80006316:	00 00       	nop 
80006318:	1d 00 0a 00 	j 8000632c <IfxScuCcu_getSriFrequency+0x3c>
8000631c:	1d 00 18 00 	j 8000634c <IfxScuCcu_getSriFrequency+0x5c>
80006320:	1d 00 19 00 	j 80006352 <IfxScuCcu_getSriFrequency+0x62>
80006324:	1d 00 1a 00 	j 80006358 <IfxScuCcu_getSriFrequency+0x68>
80006328:	1d 00 1b 00 	j 8000635e <IfxScuCcu_getSriFrequency+0x6e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
800062f8:	91 30 00 ff 	movh.a %a15,61443
800062fc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006300:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
80006302:	82 0f       	mov %d15,0
=======
8000629c:	91 30 00 ff 	movh.a %a15,61443
800062a0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062a4:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
800062a6:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000632c:	91 30 00 ff 	movh.a %a15,61443
80006330:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006334:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
80006336:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80006304:	37 03 64 34 	extr.u %d3,%d3,8,4
80006308:	df 03 15 00 	jeq %d3,0,80006332 <IfxScuCcu_getSriFrequency+0x76>
=======
800062a8:	37 03 64 34 	extr.u %d3,%d3,8,4
800062ac:	df 03 15 00 	jeq %d3,0,800062d6 <IfxScuCcu_getSriFrequency+0x76>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006338:	37 03 64 34 	extr.u %d3,%d3,8,4
8000633c:	df 03 15 00 	jeq %d3,0,80006366 <IfxScuCcu_getSriFrequency+0x76>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
<<<<<<< HEAD
<<<<<<< HEAD
8000630c:	4c f0       	ld.w %d15,[%a15]0
8000630e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006312:	4b 0f 41 f1 	itof %d15,%d15
80006316:	3c 0c       	j 8000632e <IfxScuCcu_getSriFrequency+0x72>
=======
800062b0:	4c f0       	ld.w %d15,[%a15]0
800062b2:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800062b6:	4b 0f 41 f1 	itof %d15,%d15
800062ba:	3c 0c       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006340:	4c f0       	ld.w %d15,[%a15]0
80006342:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006346:	4b 0f 41 f1 	itof %d15,%d15
8000634a:	3c 0c       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
<<<<<<< HEAD
<<<<<<< HEAD
80006318:	7b 00 1f f4 	movh %d15,16880
8000631c:	3c 09       	j 8000632e <IfxScuCcu_getSriFrequency+0x72>
=======
8000634c:	7b 00 1f f4 	movh %d15,16880
80006350:	3c 09       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
80006352:	7b 00 27 f4 	movh %d15,17008
80006356:	3c 06       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
80006358:	7b 00 2f f4 	movh %d15,17136
8000635c:	3c 03       	j 80006362 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
<<<<<<< HEAD
8000632a:	7b 00 37 f4 	movh %d15,17264
8000632e:	4b f2 51 f0 	div.f %d15,%d2,%d15
=======
800062bc:	7b 00 1f f4 	movh %d15,16880
800062c0:	3c 09       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
800062c2:	7b 00 27 f4 	movh %d15,17008
800062c6:	3c 06       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
800062c8:	7b 00 2f f4 	movh %d15,17136
800062cc:	3c 03       	j 800062d2 <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
800062ce:	7b 00 37 f4 	movh %d15,17264
800062d2:	4b f2 51 f0 	div.f %d15,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000635e:	7b 00 37 f4 	movh %d15,17264
80006362:	4b f2 51 f0 	div.f %d15,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
80006332:	02 f2       	mov %d2,%d15
80006334:	00 90       	ret 

80006336 <IfxScuCcu_getCpuFrequency>:
=======
800062d6:	02 f2       	mov %d2,%d15
800062d8:	00 90       	ret 

800062da <IfxScuCcu_getCpuFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006366:	02 f2       	mov %d2,%d15
80006368:	00 90       	ret 

8000636a <IfxScuCcu_getCpuFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
<<<<<<< HEAD
<<<<<<< HEAD
80006336:	02 4f       	mov %d15,%d4
=======
8000636a:	02 4f       	mov %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32 frequency = IfxScuCcu_getSriFrequency();
8000636c:	6d ff c2 ff 	call 800062f0 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
<<<<<<< HEAD
8000633c:	1e 1d       	jeq %d15,1,80006356 <IfxScuCcu_getCpuFrequency+0x20>
8000633e:	6e 07       	jz %d15,8000634c <IfxScuCcu_getCpuFrequency+0x16>
80006340:	de 2a       	jne %d15,2,80006374 <IfxScuCcu_getCpuFrequency+0x3e>
=======
800062da:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
800062dc:	6d ff c2 ff 	call 80006260 <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
800062e0:	1e 1d       	jeq %d15,1,800062fa <IfxScuCcu_getCpuFrequency+0x20>
800062e2:	6e 07       	jz %d15,800062f0 <IfxScuCcu_getCpuFrequency+0x16>
800062e4:	de 2a       	jne %d15,2,80006318 <IfxScuCcu_getCpuFrequency+0x3e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006370:	1e 1d       	jeq %d15,1,8000638a <IfxScuCcu_getCpuFrequency+0x20>
80006372:	6e 07       	jz %d15,80006380 <IfxScuCcu_getCpuFrequency+0x16>
80006374:	de 2a       	jne %d15,2,800063a8 <IfxScuCcu_getCpuFrequency+0x3e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
<<<<<<< HEAD
<<<<<<< HEAD
80006342:	91 30 00 ff 	movh.a %a15,61443
80006346:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000634a:	3c 0a       	j 8000635e <IfxScuCcu_getCpuFrequency+0x28>
=======
800062e6:	91 30 00 ff 	movh.a %a15,61443
800062ea:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800062ee:	3c 0a       	j 80006302 <IfxScuCcu_getCpuFrequency+0x28>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006376:	91 30 00 ff 	movh.a %a15,61443
8000637a:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000637e:	3c 0a       	j 80006392 <IfxScuCcu_getCpuFrequency+0x28>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
<<<<<<< HEAD
<<<<<<< HEAD
8000634c:	91 30 00 ff 	movh.a %a15,61443
80006350:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006354:	3c 05       	j 8000635e <IfxScuCcu_getCpuFrequency+0x28>
=======
80006380:	91 30 00 ff 	movh.a %a15,61443
80006384:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006388:	3c 05       	j 80006392 <IfxScuCcu_getCpuFrequency+0x28>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
8000638a:	91 30 00 ff 	movh.a %a15,61443
8000638e:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
<<<<<<< HEAD
8000635e:	4c f0       	ld.w %d15,[%a15]0
=======
800062f0:	91 30 00 ff 	movh.a %a15,61443
800062f4:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800062f8:	3c 05       	j 80006302 <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
800062fa:	91 30 00 ff 	movh.a %a15,61443
800062fe:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006302:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006392:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
<<<<<<< HEAD
<<<<<<< HEAD
80006360:	6e 0b       	jz %d15,80006376 <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006362:	4b 0f 61 f1 	utof %d15,%d15
80006366:	7b 00 c8 33 	movh %d3,15488
8000636a:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
8000636e:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006372:	00 90       	ret 
=======
80006304:	6e 0b       	jz %d15,8000631a <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006306:	4b 0f 61 f1 	utof %d15,%d15
8000630a:	7b 00 c8 33 	movh %d3,15488
8000630e:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
80006312:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006316:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006394:	6e 0b       	jz %d15,800063aa <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006396:	4b 0f 61 f1 	utof %d15,%d15
8000639a:	7b 00 c8 33 	movh %d3,15488
8000639e:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
800063a2:	4b f2 41 20 	mul.f %d2,%d2,%d15
800063a6:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
<<<<<<< HEAD
<<<<<<< HEAD
80006374:	82 02       	mov %d2,0
=======
80006318:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063a8:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
80006376:	00 90       	ret 

80006378 <IfxScuCcu_getFsi2Frequency>:
=======
8000631a:	00 90       	ret 

8000631c <IfxScuCcu_getFsi2Frequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063aa:	00 90       	ret 

800063ac <IfxScuCcu_getFsi2Frequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
80006378:	91 30 00 ff 	movh.a %a15,61443
8000637c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006380:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006382:	7b 00 03 30 	movh %d3,48
80006386:	26 f3       	and %d3,%d15
=======
8000631c:	91 30 00 ff 	movh.a %a15,61443
80006320:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006324:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006326:	7b 00 03 30 	movh %d3,48
8000632a:	26 f3       	and %d3,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063ac:	91 30 00 ff 	movh.a %a15,61443
800063b0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063b4:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
800063b6:	7b 00 03 30 	movh %d3,48
800063ba:	26 f3       	and %d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
80006388:	37 0f 62 8a 	extr.u %d8,%d15,20,2
=======
8000632c:	37 0f 62 8a 	extr.u %d8,%d15,20,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063bc:	37 0f 62 8a 	extr.u %d8,%d15,20,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000638c:	82 02       	mov %d2,0
=======
80006330:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063c0:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
8000638e:	76 3f       	jz %d3,800063ac <IfxScuCcu_getFsi2Frequency+0x34>
=======
80006332:	76 3f       	jz %d3,80006350 <IfxScuCcu_getFsi2Frequency+0x34>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063c2:	76 3f       	jz %d3,800063e0 <IfxScuCcu_getFsi2Frequency+0x34>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80006390:	6d ff 96 ff 	call 800062bc <IfxScuCcu_getSriFrequency>
=======
800063c4:	6d ff 96 ff 	call 800062f0 <IfxScuCcu_getSriFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
800063c8:	3b 00 f0 30 	mov %d3,3840
800063cc:	26 3f       	and %d15,%d3
800063ce:	1b 0f f0 ff 	addi %d15,%d15,-256
800063d2:	8f 0f d0 f1 	andn %d15,%d15,256
800063d6:	ee 05       	jnz %d15,800063e0 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
<<<<<<< HEAD
800063a4:	4b 08 41 f1 	itof %d15,%d8
800063a8:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
80006334:	6d ff 96 ff 	call 80006260 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006338:	3b 00 f0 30 	mov %d3,3840
8000633c:	26 3f       	and %d15,%d3
8000633e:	1b 0f f0 ff 	addi %d15,%d15,-256
80006342:	8f 0f d0 f1 	andn %d15,%d15,256
80006346:	ee 05       	jnz %d15,80006350 <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
80006348:	4b 08 41 f1 	itof %d15,%d8
8000634c:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063d8:	4b 08 41 f1 	itof %d15,%d8
800063dc:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    return frequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
800063ac:	00 90       	ret 

800063ae <IfxScuCcu_getFsiFrequency>:
=======
80006350:	00 90       	ret 

80006352 <IfxScuCcu_getFsiFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063e0:	00 90       	ret 

800063e2 <IfxScuCcu_getFsiFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
800063ae:	91 30 00 ff 	movh.a %a15,61443
800063b2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063b6:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
800063b8:	7b 00 30 30 	movh %d3,768
800063bc:	26 f3       	and %d3,%d15
=======
80006352:	91 30 00 ff 	movh.a %a15,61443
80006356:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000635a:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
8000635c:	7b 00 30 30 	movh %d3,768
80006360:	26 f3       	and %d3,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063e2:	91 30 00 ff 	movh.a %a15,61443
800063e6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063ea:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
800063ec:	7b 00 30 30 	movh %d3,768
800063f0:	26 f3       	and %d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
<<<<<<< HEAD
<<<<<<< HEAD
800063be:	37 0f 62 8c 	extr.u %d8,%d15,24,2
=======
80006362:	37 0f 62 8c 	extr.u %d8,%d15,24,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063f2:	37 0f 62 8c 	extr.u %d8,%d15,24,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800063c2:	82 02       	mov %d2,0
=======
80006366:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063f6:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
<<<<<<< HEAD
<<<<<<< HEAD
800063c4:	76 3f       	jz %d3,800063e2 <IfxScuCcu_getFsiFrequency+0x34>
=======
80006368:	76 3f       	jz %d3,80006386 <IfxScuCcu_getFsiFrequency+0x34>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800063f8:	76 3f       	jz %d3,80006416 <IfxScuCcu_getFsiFrequency+0x34>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
800063c6:	6d ff 7b ff 	call 800062bc <IfxScuCcu_getSriFrequency>
=======
800063fa:	6d ff 7b ff 	call 800062f0 <IfxScuCcu_getSriFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
800063fe:	3b 00 f0 30 	mov %d3,3840
80006402:	26 3f       	and %d15,%d3
80006404:	1b 0f f0 ff 	addi %d15,%d15,-256
80006408:	8f 0f d0 f1 	andn %d15,%d15,256
8000640c:	ee 05       	jnz %d15,80006416 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
<<<<<<< HEAD
800063da:	4b 08 41 f1 	itof %d15,%d8
800063de:	4b f2 51 20 	div.f %d2,%d2,%d15
=======
8000636a:	6d ff 7b ff 	call 80006260 <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
8000636e:	3b 00 f0 30 	mov %d3,3840
80006372:	26 3f       	and %d15,%d3
80006374:	1b 0f f0 ff 	addi %d15,%d15,-256
80006378:	8f 0f d0 f1 	andn %d15,%d15,256
8000637c:	ee 05       	jnz %d15,80006386 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
8000637e:	4b 08 41 f1 	itof %d15,%d8
80006382:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000640e:	4b 08 41 f1 	itof %d15,%d8
80006412:	4b f2 51 20 	div.f %d2,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    return frequency;
}
<<<<<<< HEAD
<<<<<<< HEAD
800063e2:	00 90       	ret 

800063e4 <IfxScuCcu_init>:
=======
80006386:	00 90       	ret 

80006388 <IfxScuCcu_init>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006416:	00 90       	ret 

80006418 <IfxScuCcu_init>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
<<<<<<< HEAD
<<<<<<< HEAD
800063e4:	19 4f 10 10 	ld.w %d15,[%a4]80
800063e8:	91 00 00 c7 	movh.a %a12,28672
=======
80006388:	19 4f 10 10 	ld.w %d15,[%a4]80
8000638c:	91 00 00 c7 	movh.a %a12,28672
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006418:	19 4f 10 10 	ld.w %d15,[%a4]80
8000641c:	91 00 00 c7 	movh.a %a12,28672
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
<<<<<<< HEAD
<<<<<<< HEAD
800063ec:	40 4f       	mov.aa %a15,%a4
=======
80006390:	40 4f       	mov.aa %a15,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006420:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
<<<<<<< HEAD
<<<<<<< HEAD
800063ee:	59 cf 38 30 	st.w [%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>,%d15
=======
80006422:	59 cf 38 30 	st.w [%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80006426:	6d 00 c8 07 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
8000642a:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
800063f8:	6d 00 e3 07 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
=======
80006392:	59 cf 30 30 	st.w [%a12]240 <700000f0 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80006396:	6d 00 c8 07 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
8000639a:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
8000639c:	6d 00 e3 07 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000642c:	6d 00 e3 07 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
<<<<<<< HEAD
800063fc:	02 94       	mov %d4,%d9
=======
800063a0:	02 94       	mov %d4,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006430:	02 94       	mov %d4,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
800063fe:	02 28       	mov %d8,%d2
=======
800063a2:	02 28       	mov %d8,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006432:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006400:	6d 00 c1 06 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80006434:	6d 00 c1 06 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006438:	91 30 00 2f 	movh.a %a2,61443
8000643c:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006440:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
80006442:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
<<<<<<< HEAD
80006410:	02 94       	mov %d4,%d9
=======
800063a4:	6d 00 c1 06 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800063a8:	91 30 00 2f 	movh.a %a2,61443
800063ac:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800063b0:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
800063b2:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063b4:	02 94       	mov %d4,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006444:	02 94       	mov %d4,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80006412:	96 08       	or %d15,8
80006414:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006416:	6d 00 eb 07 	call 800073ec <IfxScuWdt_setCpuEndinit>
=======
800063b6:	96 08       	or %d15,8
800063b8:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
800063ba:	6d 00 eb 07 	call 80007390 <IfxScuWdt_setCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006446:	96 08       	or %d15,8
80006448:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000644a:	6d 00 eb 07 	call 80007420 <IfxScuWdt_setCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
8000641a:	02 84       	mov %d4,%d8
8000641c:	6d 00 ce 06 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
=======
800063be:	02 84       	mov %d4,%d8
800063c0:	6d 00 ce 06 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000644e:	02 84       	mov %d4,%d8
80006450:	6d 00 ce 06 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
<<<<<<< HEAD
<<<<<<< HEAD
80006420:	37 0c e1 c1 	extr.u %d12,%d12,3,1
=======
800063c4:	37 0c e1 c1 	extr.u %d12,%d12,3,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006454:	37 0c e1 c1 	extr.u %d12,%d12,3,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
80006424:	91 30 00 3f 	movh.a %a3,61443
80006428:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000642c:	4c 30       	ld.w %d15,[%a3]0
8000642e:	91 30 00 2f 	movh.a %a2,61443
80006432:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006436:	bf 0f fb 7f 	jlt %d15,0,8000642c <IfxScuCcu_init+0x48>
=======
800063c8:	91 30 00 3f 	movh.a %a3,61443
800063cc:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063d0:	4c 30       	ld.w %d15,[%a3]0
800063d2:	91 30 00 2f 	movh.a %a2,61443
800063d6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063da:	bf 0f fb 7f 	jlt %d15,0,800063d0 <IfxScuCcu_init+0x48>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006458:	91 30 00 3f 	movh.a %a3,61443
8000645c:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006460:	4c 30       	ld.w %d15,[%a3]0
80006462:	91 30 00 2f 	movh.a %a2,61443
80006466:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000646a:	bf 0f fb 7f 	jlt %d15,0,80006460 <IfxScuCcu_init+0x48>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
<<<<<<< HEAD
<<<<<<< HEAD
8000643a:	4c 20       	ld.w %d15,[%a2]0
8000643c:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006440:	6c 20       	st.w [%a2]0,%d15
=======
8000646e:	4c 20       	ld.w %d15,[%a2]0
80006470:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006474:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006476:	4c 20       	ld.w %d15,[%a2]0
80006478:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000647c:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
<<<<<<< HEAD
8000644a:	91 30 00 2f 	movh.a %a2,61443
8000644e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006452:	4c 20       	ld.w %d15,[%a2]0
80006454:	96 10       	or %d15,16
80006456:	6c 20       	st.w [%a2]0,%d15
=======
800063de:	4c 20       	ld.w %d15,[%a2]0
800063e0:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
800063e4:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800063e6:	4c 20       	ld.w %d15,[%a2]0
800063e8:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800063ec:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
800063ee:	91 30 00 2f 	movh.a %a2,61443
800063f2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800063f6:	4c 20       	ld.w %d15,[%a2]0
800063f8:	96 10       	or %d15,16
800063fa:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000647e:	91 30 00 2f 	movh.a %a2,61443
80006482:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006486:	4c 20       	ld.w %d15,[%a2]0
80006488:	96 10       	or %d15,16
8000648a:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
80006458:	91 30 00 2f 	movh.a %a2,61443
8000645c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006460:	4c 20       	ld.w %d15,[%a2]0
80006462:	bf 0f ff 7f 	jlt %d15,0,80006460 <IfxScuCcu_init+0x7c>
=======
800063fc:	91 30 00 2f 	movh.a %a2,61443
80006400:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006404:	4c 20       	ld.w %d15,[%a2]0
80006406:	bf 0f ff 7f 	jlt %d15,0,80006404 <IfxScuCcu_init+0x7c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000648c:	91 30 00 2f 	movh.a %a2,61443
80006490:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006494:	4c 20       	ld.w %d15,[%a2]0
80006496:	bf 0f ff 7f 	jlt %d15,0,80006494 <IfxScuCcu_init+0x7c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
<<<<<<< HEAD
<<<<<<< HEAD
80006466:	91 30 00 2f 	movh.a %a2,61443
8000646a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000646e:	4c 20       	ld.w %d15,[%a2]0
80006470:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006474:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80006476:	4c 20       	ld.w %d15,[%a2]0
80006478:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000647c:	6c 20       	st.w [%a2]0,%d15
=======
8000640a:	91 30 00 2f 	movh.a %a2,61443
8000640e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006412:	4c 20       	ld.w %d15,[%a2]0
80006414:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006418:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
8000641a:	4c 20       	ld.w %d15,[%a2]0
8000641c:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006420:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000649a:	91 30 00 2f 	movh.a %a2,61443
8000649e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800064a2:	4c 20       	ld.w %d15,[%a2]0
800064a4:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
800064a8:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
800064aa:	4c 20       	ld.w %d15,[%a2]0
800064ac:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800064b0:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
8000647e:	6d 00 82 07 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
=======
80006422:	6d 00 82 07 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064b2:	6d 00 82 07 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
80006482:	91 30 00 2f 	movh.a %a2,61443
80006486:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
=======
80006426:	91 30 00 2f 	movh.a %a2,61443
8000642a:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064b6:	91 30 00 2f 	movh.a %a2,61443
800064ba:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
8000648a:	02 2f       	mov %d15,%d2
=======
8000642e:	02 2f       	mov %d15,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064be:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000648c:	54 22       	ld.w %d2,[%a2]
=======
80006430:	54 22       	ld.w %d2,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064c0:	54 22       	ld.w %d2,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
<<<<<<< HEAD
<<<<<<< HEAD
8000648e:	40 23       	mov.aa %a3,%a2
=======
80006432:	40 23       	mov.aa %a3,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064c2:	40 23       	mov.aa %a3,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
80006490:	8f 02 c6 21 	andn %d2,%d2,96
80006494:	74 22       	st.w [%a2],%d2
=======
80006434:	8f 02 c6 21 	andn %d2,%d2,96
80006438:	74 22       	st.w [%a2],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064c4:	8f 02 c6 21 	andn %d2,%d2,96
800064c8:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
<<<<<<< HEAD
<<<<<<< HEAD
80006496:	19 c6 38 30 	ld.w %d6,[%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>
8000649a:	7b 60 02 20 	movh %d2,38
8000649e:	1b 02 5a 22 	addi %d2,%d2,9632
800064a2:	4b 26 11 62 	div.u %e6,%d6,%d2
800064a6:	54 22       	ld.w %d2,[%a2]
800064a8:	c2 f6       	add %d6,-1
800064aa:	37 62 05 68 	insert %d6,%d2,%d6,16,5
800064ae:	74 26       	st.w [%a2],%d6
=======
800064ca:	19 c6 38 30 	ld.w %d6,[%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>
800064ce:	7b 60 02 20 	movh %d2,38
800064d2:	1b 02 5a 22 	addi %d2,%d2,9632
800064d6:	4b 26 11 62 	div.u %e6,%d6,%d2
800064da:	54 22       	ld.w %d2,[%a2]
800064dc:	c2 f6       	add %d6,-1
800064de:	37 62 05 68 	insert %d6,%d2,%d6,16,5
800064e2:	74 26       	st.w [%a2],%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
800064e4:	54 22       	ld.w %d2,[%a2]
800064e6:	8f 42 40 21 	or %d2,%d2,4
800064ea:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
<<<<<<< HEAD
800064b8:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
800064bc:	54 32       	ld.w %d2,[%a3]
800064be:	6f 12 05 80 	jnz.t %d2,1,800064c8 <IfxScuCcu_init+0xe4>
800064c2:	fc 2d       	loop %a2,800064bc <IfxScuCcu_init+0xd8>
=======
8000643a:	19 c6 30 30 	ld.w %d6,[%a12]240 <700000f0 <IfxScuCcu_xtalFrequency>>
8000643e:	7b 60 02 20 	movh %d2,38
80006442:	1b 02 5a 22 	addi %d2,%d2,9632
80006446:	4b 26 11 62 	div.u %e6,%d6,%d2
8000644a:	54 22       	ld.w %d2,[%a2]
8000644c:	c2 f6       	add %d6,-1
8000644e:	37 62 05 68 	insert %d6,%d2,%d6,16,5
80006452:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80006454:	54 22       	ld.w %d2,[%a2]
80006456:	8f 42 40 21 	or %d2,%d2,4
8000645a:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000645c:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
80006460:	54 32       	ld.w %d2,[%a3]
80006462:	6f 12 05 80 	jnz.t %d2,1,8000646c <IfxScuCcu_init+0xe4>
80006466:	fc 2d       	loop %a2,80006460 <IfxScuCcu_init+0xd8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064ec:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
800064f0:	54 32       	ld.w %d2,[%a3]
800064f2:	6f 12 05 80 	jnz.t %d2,1,800064fc <IfxScuCcu_init+0xe4>
800064f6:	fc 2d       	loop %a2,800064f0 <IfxScuCcu_init+0xd8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800064c4:	82 1b       	mov %d11,1
800064c6:	3c 05       	j 800064d0 <IfxScuCcu_init+0xec>
=======
80006468:	82 1b       	mov %d11,1
8000646a:	3c 05       	j 80006474 <IfxScuCcu_init+0xec>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064f8:	82 1b       	mov %d11,1
800064fa:	3c 05       	j 80006504 <IfxScuCcu_init+0xec>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
<<<<<<< HEAD
<<<<<<< HEAD
800064c8:	54 32       	ld.w %d2,[%a3]
800064ca:	6f 82 fc 7f 	jz.t %d2,8,800064c2 <IfxScuCcu_init+0xde>
=======
8000646c:	54 32       	ld.w %d2,[%a3]
8000646e:	6f 82 fc 7f 	jz.t %d2,8,80006466 <IfxScuCcu_init+0xde>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800064fc:	54 32       	ld.w %d2,[%a3]
800064fe:	6f 82 fc 7f 	jz.t %d2,8,800064f6 <IfxScuCcu_init+0xde>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800064ce:	82 0b       	mov %d11,0
=======
80006472:	82 0b       	mov %d11,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006502:	82 0b       	mov %d11,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
<<<<<<< HEAD
<<<<<<< HEAD
800064d0:	02 f4       	mov %d4,%d15
800064d2:	6d 00 58 06 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80006504:	02 f4       	mov %d4,%d15
80006506:	6d 00 58 06 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000650a:	91 30 00 2f 	movh.a %a2,61443
8000650e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006512:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
<<<<<<< HEAD
800064e0:	02 f4       	mov %d4,%d15
=======
80006474:	02 f4       	mov %d4,%d15
80006476:	6d 00 58 06 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
8000647a:	91 30 00 2f 	movh.a %a2,61443
8000647e:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006482:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
80006484:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006514:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
<<<<<<< HEAD
<<<<<<< HEAD
800064e2:	8f 82 40 21 	or %d2,%d2,8
800064e6:	74 22       	st.w [%a2],%d2
=======
80006516:	8f 82 40 21 	or %d2,%d2,8
8000651a:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000651c:	91 30 00 2f 	movh.a %a2,61443
80006520:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006524:	54 22       	ld.w %d2,[%a2]
80006526:	8f 82 40 21 	or %d2,%d2,8
8000652a:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
<<<<<<< HEAD
800064f8:	6d 00 7a 07 	call 800073ec <IfxScuWdt_setCpuEndinit>
=======
80006486:	8f 82 40 21 	or %d2,%d2,8
8000648a:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
8000648c:	91 30 00 2f 	movh.a %a2,61443
80006490:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006494:	54 22       	ld.w %d2,[%a2]
80006496:	8f 82 40 21 	or %d2,%d2,8
8000649a:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
8000649c:	6d 00 7a 07 	call 80007390 <IfxScuWdt_setCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000652c:	6d 00 7a 07 	call 80007420 <IfxScuWdt_setCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
800064fc:	02 84       	mov %d4,%d8
800064fe:	6d 00 e3 07 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
80006502:	df 0b 29 81 	jne %d11,0,80006754 <IfxScuCcu_init+0x370>
=======
800064a0:	02 84       	mov %d4,%d8
800064a2:	6d 00 e3 07 	call 80007468 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
800064a6:	df 0b 29 81 	jne %d11,0,800066f8 <IfxScuCcu_init+0x370>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006530:	02 84       	mov %d4,%d8
80006532:	6d 00 e3 07 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
80006536:	df 0b 29 81 	jne %d11,0,80006788 <IfxScuCcu_init+0x370>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006506:	02 84       	mov %d4,%d8
80006508:	6d 00 58 06 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000650c:	91 30 00 2f 	movh.a %a2,61443
80006510:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006514:	4c 20       	ld.w %d15,[%a2]0
80006516:	6f 5f ff 7f 	jz.t %d15,5,80006514 <IfxScuCcu_init+0x130>
=======
800064aa:	02 84       	mov %d4,%d8
800064ac:	6d 00 58 06 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
800064b0:	91 30 00 2f 	movh.a %a2,61443
800064b4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800064b8:	4c 20       	ld.w %d15,[%a2]0
800064ba:	6f 5f ff 7f 	jz.t %d15,5,800064b8 <IfxScuCcu_init+0x130>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000653a:	02 84       	mov %d4,%d8
8000653c:	6d 00 58 06 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
80006540:	91 30 00 2f 	movh.a %a2,61443
80006544:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006548:	4c 20       	ld.w %d15,[%a2]0
8000654a:	6f 5f ff 7f 	jz.t %d15,5,80006548 <IfxScuCcu_init+0x130>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
<<<<<<< HEAD
<<<<<<< HEAD
8000651a:	91 30 00 2f 	movh.a %a2,61443
8000651e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006522:	54 22       	ld.w %d2,[%a2]
80006524:	0c fa       	ld.bu %d15,[%a15]10
=======
800064be:	91 30 00 2f 	movh.a %a2,61443
800064c2:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800064c6:	54 22       	ld.w %d2,[%a2]
800064c8:	0c fa       	ld.bu %d15,[%a15]10
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000654e:	91 30 00 2f 	movh.a %a2,61443
80006552:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006556:	54 22       	ld.w %d2,[%a2]
80006558:	0c fa       	ld.bu %d15,[%a15]10
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
<<<<<<< HEAD
<<<<<<< HEAD
80006526:	7b 20 85 43 	movh %d4,14418
=======
800064ca:	7b 20 85 43 	movh %d4,14418
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000655a:	7b 20 85 43 	movh %d4,14418
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
<<<<<<< HEAD
<<<<<<< HEAD
8000652a:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
=======
800064ce:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000655e:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
<<<<<<< HEAD
<<<<<<< HEAD
8000652e:	1b 74 71 4b 	addi %d4,%d4,-18665
=======
800064d2:	1b 74 71 4b 	addi %d4,%d4,-18665
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006562:	1b 74 71 4b 	addi %d4,%d4,-18665
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
<<<<<<< HEAD
<<<<<<< HEAD
80006532:	6c 20       	st.w [%a2]0,%d15
=======
800064d6:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006566:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
<<<<<<< HEAD
<<<<<<< HEAD
80006534:	91 30 00 2f 	movh.a %a2,61443
80006538:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000653c:	54 22       	ld.w %d2,[%a2]
8000653e:	0c f8       	ld.bu %d15,[%a15]8
80006540:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
80006544:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
80006546:	54 22       	ld.w %d2,[%a2]
80006548:	0c f9       	ld.bu %d15,[%a15]9
8000654a:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
8000654e:	6c 20       	st.w [%a2]0,%d15
=======
800064d8:	91 30 00 2f 	movh.a %a2,61443
800064dc:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800064e0:	54 22       	ld.w %d2,[%a2]
800064e2:	0c f8       	ld.bu %d15,[%a15]8
800064e4:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
800064e8:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
800064ea:	54 22       	ld.w %d2,[%a2]
800064ec:	0c f9       	ld.bu %d15,[%a15]9
800064ee:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
800064f2:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006568:	91 30 00 2f 	movh.a %a2,61443
8000656c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006570:	54 22       	ld.w %d2,[%a2]
80006572:	0c f8       	ld.bu %d15,[%a15]8
80006574:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
80006578:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
8000657a:	54 22       	ld.w %d2,[%a2]
8000657c:	0c f9       	ld.bu %d15,[%a15]9
8000657e:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
80006582:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80006550:	4c 20       	ld.w %d15,[%a2]0
80006552:	96 40       	or %d15,64
80006554:	6c 20       	st.w [%a2]0,%d15
=======
80006584:	4c 20       	ld.w %d15,[%a2]0
80006586:	96 40       	or %d15,64
80006588:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
8000658a:	4c 20       	ld.w %d15,[%a2]0
8000658c:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80006590:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80006592:	4c 20       	ld.w %d15,[%a2]0
80006594:	96 20       	or %d15,32
80006596:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006598:	4c 20       	ld.w %d15,[%a2]0
8000659a:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000659e:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
800065a0:	4c 20       	ld.w %d15,[%a2]0
800065a2:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800065a6:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800065a8:	6d ff 94 fd 	call 800060d0 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
<<<<<<< HEAD
80006578:	91 30 00 2f 	movh.a %a2,61443
8000657c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006580:	4c 20       	ld.w %d15,[%a2]0
80006582:	6f 2f ff 7f 	jz.t %d15,2,80006580 <IfxScuCcu_init+0x19c>
=======
800064f4:	4c 20       	ld.w %d15,[%a2]0
800064f6:	96 40       	or %d15,64
800064f8:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
800064fa:	4c 20       	ld.w %d15,[%a2]0
800064fc:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80006500:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80006502:	4c 20       	ld.w %d15,[%a2]0
80006504:	96 20       	or %d15,32
80006506:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006508:	4c 20       	ld.w %d15,[%a2]0
8000650a:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000650e:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
80006510:	4c 20       	ld.w %d15,[%a2]0
80006512:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80006516:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006518:	6d ff 94 fd 	call 80006040 <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
8000651c:	91 30 00 2f 	movh.a %a2,61443
80006520:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006524:	4c 20       	ld.w %d15,[%a2]0
80006526:	6f 2f ff 7f 	jz.t %d15,2,80006524 <IfxScuCcu_init+0x19c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800065ac:	91 30 00 2f 	movh.a %a2,61443
800065b0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800065b4:	4c 20       	ld.w %d15,[%a2]0
800065b6:	6f 2f ff 7f 	jz.t %d15,2,800065b4 <IfxScuCcu_init+0x19c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
<<<<<<< HEAD
<<<<<<< HEAD
80006586:	91 30 00 2f 	movh.a %a2,61443
8000658a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000658e:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006590:	91 30 00 3f 	movh.a %a3,61443
=======
8000652a:	91 30 00 2f 	movh.a %a2,61443
8000652e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006532:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006534:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800065ba:	91 30 00 2f 	movh.a %a2,61443
800065be:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800065c2:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
800065c4:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
<<<<<<< HEAD
<<<<<<< HEAD
80006594:	8f 1f c0 f1 	andn %d15,%d15,1
80006598:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000659a:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000659e:	4c 30       	ld.w %d15,[%a3]0
800065a0:	91 30 00 2f 	movh.a %a2,61443
800065a4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065a8:	bf 0f fb 7f 	jlt %d15,0,8000659e <IfxScuCcu_init+0x1ba>
=======
80006538:	8f 1f c0 f1 	andn %d15,%d15,1
8000653c:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000653e:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006542:	4c 30       	ld.w %d15,[%a3]0
80006544:	91 30 00 2f 	movh.a %a2,61443
80006548:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000654c:	bf 0f fb 7f 	jlt %d15,0,80006542 <IfxScuCcu_init+0x1ba>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800065c8:	8f 1f c0 f1 	andn %d15,%d15,1
800065cc:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
800065ce:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065d2:	4c 30       	ld.w %d15,[%a3]0
800065d4:	91 30 00 2f 	movh.a %a2,61443
800065d8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065dc:	bf 0f fb 7f 	jlt %d15,0,800065d2 <IfxScuCcu_init+0x1ba>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
<<<<<<< HEAD
<<<<<<< HEAD
800065ac:	4c 20       	ld.w %d15,[%a2]0
800065ae:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
800065b2:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
800065b4:	4c 20       	ld.w %d15,[%a2]0
800065b6:	91 30 00 cf 	movh.a %a12,61443
800065ba:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065be:	bf 0f fb 7f 	jlt %d15,0,800065b4 <IfxScuCcu_init+0x1d0>
=======
80006550:	4c 20       	ld.w %d15,[%a2]0
80006552:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006556:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
80006558:	4c 20       	ld.w %d15,[%a2]0
8000655a:	91 30 00 cf 	movh.a %a12,61443
8000655e:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006562:	bf 0f fb 7f 	jlt %d15,0,80006558 <IfxScuCcu_init+0x1d0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800065e0:	4c 20       	ld.w %d15,[%a2]0
800065e2:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
800065e6:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
800065e8:	4c 20       	ld.w %d15,[%a2]0
800065ea:	91 30 00 cf 	movh.a %a12,61443
800065ee:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065f2:	bf 0f fb 7f 	jlt %d15,0,800065e8 <IfxScuCcu_init+0x1d0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
<<<<<<< HEAD
<<<<<<< HEAD
800065c2:	48 34       	ld.w %d4,[%a15]12
800065c4:	6d ff 6c fd 	call 8000609c <IfxScuCcu_wait>
=======
80006566:	48 34       	ld.w %d4,[%a15]12
80006568:	6d ff 6c fd 	call 80006040 <IfxScuCcu_wait>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800065f6:	48 34       	ld.w %d4,[%a15]12
800065f8:	6d ff 6c fd 	call 800060d0 <IfxScuCcu_wait>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
<<<<<<< HEAD
<<<<<<< HEAD
800065c8:	4c f5       	ld.w %d15,[%a15]20
800065ca:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
800065cc:	48 42       	ld.w %d2,[%a15]16
=======
8000656c:	4c f5       	ld.w %d15,[%a15]20
8000656e:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006570:	48 42       	ld.w %d2,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800065fc:	4c f5       	ld.w %d15,[%a15]20
800065fe:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006600:	48 42       	ld.w %d2,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
<<<<<<< HEAD
<<<<<<< HEAD
800065ce:	0f f3 e0 30 	andn %d3,%d3,%d15
=======
80006602:	0f f3 e0 30 	andn %d3,%d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006606:	26 f2       	and %d2,%d15
80006608:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
8000660c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
<<<<<<< HEAD
800065dc:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
=======
80006572:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006576:	26 f2       	and %d2,%d15
80006578:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
8000657c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
80006580:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006610:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
800065e0:	91 30 00 3f 	movh.a %a3,61443
=======
80006584:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006614:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
<<<<<<< HEAD
<<<<<<< HEAD
800065e4:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
800065e6:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800065ea:	4c 30       	ld.w %d15,[%a3]0
800065ec:	91 30 00 2f 	movh.a %a2,61443
800065f0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800065f4:	bf 0f fb 7f 	jlt %d15,0,800065ea <IfxScuCcu_init+0x206>
=======
80006588:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
8000658a:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000658e:	4c 30       	ld.w %d15,[%a3]0
80006590:	91 30 00 2f 	movh.a %a2,61443
80006594:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006598:	bf 0f fb 7f 	jlt %d15,0,8000658e <IfxScuCcu_init+0x206>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006618:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
8000661a:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000661e:	4c 30       	ld.w %d15,[%a3]0
80006620:	91 30 00 2f 	movh.a %a2,61443
80006624:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006628:	bf 0f fb 7f 	jlt %d15,0,8000661e <IfxScuCcu_init+0x206>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
<<<<<<< HEAD
<<<<<<< HEAD
800065f8:	4c f7       	ld.w %d15,[%a15]28
800065fa:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065fc:	48 62       	ld.w %d2,[%a15]24
=======
8000659c:	4c f7       	ld.w %d15,[%a15]28
8000659e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065a0:	48 62       	ld.w %d2,[%a15]24
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000662c:	4c f7       	ld.w %d15,[%a15]28
8000662e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80006630:	48 62       	ld.w %d2,[%a15]24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
<<<<<<< HEAD
<<<<<<< HEAD
800065fe:	0f f3 e0 30 	andn %d3,%d3,%d15
=======
80006632:	0f f3 e0 30 	andn %d3,%d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80006636:	26 f2       	and %d2,%d15
80006638:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
8000663c:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
<<<<<<< HEAD
8000660c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
=======
800065a2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065a6:	26 f2       	and %d2,%d15
800065a8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
800065ac:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
800065b0:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006640:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
80006610:	91 30 00 3f 	movh.a %a3,61443
=======
800065b4:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006644:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
<<<<<<< HEAD
<<<<<<< HEAD
80006614:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
80006616:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
8000661a:	4c 30       	ld.w %d15,[%a3]0
8000661c:	91 30 00 2f 	movh.a %a2,61443
80006620:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006624:	bf 0f fb 7f 	jlt %d15,0,8000661a <IfxScuCcu_init+0x236>
=======
800065b8:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800065ba:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065be:	4c 30       	ld.w %d15,[%a3]0
800065c0:	91 30 00 2f 	movh.a %a2,61443
800065c4:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800065c8:	bf 0f fb 7f 	jlt %d15,0,800065be <IfxScuCcu_init+0x236>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006648:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
8000664a:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
8000664e:	4c 30       	ld.w %d15,[%a3]0
80006650:	91 30 00 2f 	movh.a %a2,61443
80006654:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006658:	bf 0f fb 7f 	jlt %d15,0,8000664e <IfxScuCcu_init+0x236>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
<<<<<<< HEAD
<<<<<<< HEAD
80006628:	4c f9       	ld.w %d15,[%a15]36
8000662a:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
8000662c:	48 82       	ld.w %d2,[%a15]32
=======
800065cc:	4c f9       	ld.w %d15,[%a15]36
800065ce:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065d0:	48 82       	ld.w %d2,[%a15]32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000665c:	4c f9       	ld.w %d15,[%a15]36
8000665e:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006660:	48 82       	ld.w %d2,[%a15]32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
<<<<<<< HEAD
<<<<<<< HEAD
8000662e:	0f f3 e0 30 	andn %d3,%d3,%d15
=======
80006662:	0f f3 e0 30 	andn %d3,%d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006666:	26 f2       	and %d2,%d15
80006668:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
<<<<<<< HEAD
80006638:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
=======
800065d2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800065d6:	26 f2       	and %d2,%d15
800065d8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
800065dc:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000666c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
8000663c:	91 30 00 3f 	movh.a %a3,61443
=======
800065e0:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006670:	91 30 00 3f 	movh.a %a3,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
<<<<<<< HEAD
<<<<<<< HEAD
80006640:	6c 20       	st.w [%a2]0,%d15
=======
80006674:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006676:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
8000667a:	4c 30       	ld.w %d15,[%a3]0
8000667c:	91 30 00 2f 	movh.a %a2,61443
80006680:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006684:	bf 0f fb 7f 	jlt %d15,0,8000667a <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006688:	54 23       	ld.w %d3,[%a2]
8000668a:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
8000668c:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
<<<<<<< HEAD
8000665a:	0f f3 e0 30 	andn %d3,%d3,%d15
=======
800065e4:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800065e6:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800065ea:	4c 30       	ld.w %d15,[%a3]0
800065ec:	91 30 00 2f 	movh.a %a2,61443
800065f0:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800065f4:	bf 0f fb 7f 	jlt %d15,0,800065ea <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800065f8:	54 23       	ld.w %d3,[%a2]
800065fa:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
800065fc:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
800065fe:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006602:	26 f2       	and %d2,%d15
80006604:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006608:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000660c:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000660e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80006610:	91 30 00 2f 	movh.a %a2,61443
80006614:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006618:	54 23       	ld.w %d3,[%a2]
8000661a:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000661c:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000661e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006622:	26 f2       	and %d2,%d15
80006624:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006628:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
8000662a:	91 30 00 2f 	movh.a %a2,61443
8000662e:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
80006632:	54 23       	ld.w %d3,[%a2]
80006634:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006636:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006638:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
8000663c:	26 f2       	and %d2,%d15
8000663e:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
80006642:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006644:	91 30 00 2f 	movh.a %a2,61443
80006648:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000664c:	54 23       	ld.w %d3,[%a2]
8000664e:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000668e:	0f f3 e0 30 	andn %d3,%d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006692:	26 f2       	and %d2,%d15
80006694:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006698:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000669c:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
<<<<<<< HEAD
8000666a:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000666c:	91 30 00 2f 	movh.a %a2,61443
80006670:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006674:	54 23       	ld.w %d3,[%a2]
80006676:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
<<<<<<< HEAD
                        SCU_CCUCON8 = ccucon8;
=======
80006652:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006656:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000665a:	26 f2       	and %d2,%d15
8000665c:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
80006660:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
80006678:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000667a:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000667e:	26 f2       	and %d2,%d15
80006680:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006684:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006686:	91 30 00 2f 	movh.a %a2,61443
8000668a:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
8000668e:	54 23       	ld.w %d3,[%a2]
80006690:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006692:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006694:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006698:	26 f2       	and %d2,%d15
8000669a:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
=======
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
8000669e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800066a0:	91 30 00 2f 	movh.a %a2,61443
800066a4:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800066a8:	54 23       	ld.w %d3,[%a2]
800066aa:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066ac:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
800066ae:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
800066b2:	26 f2       	and %d2,%d15
800066b4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
800066b8:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800066ba:	91 30 00 2f 	movh.a %a2,61443
800066be:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
800066c2:	54 23       	ld.w %d3,[%a2]
800066c4:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800066c6:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
800066c8:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
800066cc:	26 f2       	and %d2,%d15
800066ce:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
800066d2:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800066d4:	91 30 00 2f 	movh.a %a2,61443
800066d8:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800066dc:	54 23       	ld.w %d3,[%a2]
800066de:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800066e2:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800066e6:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800066ea:	26 f2       	and %d2,%d15
800066ec:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
800066f0:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
800066be:	6d 00 03 07 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
80006662:	6d 00 03 07 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800066f2:	6d 00 03 07 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
<<<<<<< HEAD
<<<<<<< HEAD
800066c2:	91 00 80 cf 	movh.a %a12,63488
800066c6:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800066ca:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800066ce:	54 c3       	ld.w %d3,[%a12]
=======
80006666:	91 00 80 cf 	movh.a %a12,63488
8000666a:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000666e:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
80006672:	54 c3       	ld.w %d3,[%a12]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800066f6:	91 00 80 cf 	movh.a %a12,63488
800066fa:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800066fe:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
80006702:	54 c3       	ld.w %d3,[%a12]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
<<<<<<< HEAD
<<<<<<< HEAD
800066d0:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
=======
80006674:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006704:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
<<<<<<< HEAD
<<<<<<< HEAD
800066d4:	0f f3 e0 30 	andn %d3,%d3,%d15
=======
80006708:	0f f3 e0 30 	andn %d3,%d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000670c:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
800066da:	02 94       	mov %d4,%d9
=======
80006678:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000667c:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
8000667e:	02 94       	mov %d4,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000670e:	02 94       	mov %d4,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
<<<<<<< HEAD
<<<<<<< HEAD
800066dc:	0f 23 a0 f0 	or %d15,%d3,%d2
=======
80006710:	0f 23 a0 f0 	or %d15,%d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006714:	6d 00 51 05 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006718:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
<<<<<<< HEAD
800066e6:	02 94       	mov %d4,%d9
800066e8:	6d 00 82 06 	call 800073ec <IfxScuWdt_setCpuEndinit>
=======
80006680:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006684:	6d 00 51 05 	call 80007126 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006688:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
8000668a:	02 94       	mov %d4,%d9
8000668c:	6d 00 82 06 	call 80007390 <IfxScuWdt_setCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000671a:	02 94       	mov %d4,%d9
8000671c:	6d 00 82 06 	call 80007420 <IfxScuWdt_setCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
800066ec:	91 30 00 df 	movh.a %a13,61443
=======
80006690:	91 30 00 df 	movh.a %a13,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006720:	91 30 00 df 	movh.a %a13,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
800066f0:	91 30 00 cf 	movh.a %a12,61443
=======
80006694:	91 30 00 cf 	movh.a %a12,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006724:	91 30 00 cf 	movh.a %a12,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
<<<<<<< HEAD
<<<<<<< HEAD
800066f4:	82 0d       	mov %d13,0
=======
80006698:	82 0d       	mov %d13,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006728:	82 0d       	mov %d13,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
800066f6:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
=======
8000669a:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000672a:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
800066fa:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
=======
8000669e:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000672e:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
<<<<<<< HEAD
<<<<<<< HEAD
800066fe:	0c f0       	ld.bu %d15,[%a15]0
80006700:	8f fd 0f 21 	and %d2,%d13,255
80006704:	7f f2 28 80 	jge.u %d2,%d15,80006754 <IfxScuCcu_init+0x370>
=======
80006732:	0c f0       	ld.bu %d15,[%a15]0
80006734:	8f fd 0f 21 	and %d2,%d13,255
80006738:	7f f2 28 80 	jge.u %d2,%d15,80006788 <IfxScuCcu_init+0x370>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000673c:	02 84       	mov %d4,%d8
8000673e:	6d 00 57 05 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
<<<<<<< HEAD
8000670e:	4c d0       	ld.w %d15,[%a13]0
80006710:	6f 5f ff 7f 	jz.t %d15,5,8000670e <IfxScuCcu_init+0x32a>
=======
800066a2:	0c f0       	ld.bu %d15,[%a15]0
800066a4:	8f fd 0f 21 	and %d2,%d13,255
800066a8:	7f f2 28 80 	jge.u %d2,%d15,800066f8 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800066ac:	02 84       	mov %d4,%d8
800066ae:	6d 00 57 05 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066b2:	4c d0       	ld.w %d15,[%a13]0
800066b4:	6f 5f ff 7f 	jz.t %d15,5,800066b2 <IfxScuCcu_init+0x32a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006742:	4c d0       	ld.w %d15,[%a13]0
80006744:	6f 5f ff 7f 	jz.t %d15,5,80006742 <IfxScuCcu_init+0x32a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
80006714:	02 df       	mov %d15,%d13
80006716:	16 ff       	and %d15,255
80006718:	53 cf 20 a0 	mul %d10,%d15,12
8000671c:	c8 12       	ld.a %a2,[%a15]4
8000671e:	4c c0       	ld.w %d15,[%a12]0
80006720:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006722:	02 84       	mov %d4,%d8
=======
800066b8:	02 df       	mov %d15,%d13
800066ba:	16 ff       	and %d15,255
800066bc:	53 cf 20 a0 	mul %d10,%d15,12
800066c0:	c8 12       	ld.a %a2,[%a15]4
800066c2:	4c c0       	ld.w %d15,[%a12]0
800066c4:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066c6:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006748:	02 df       	mov %d15,%d13
8000674a:	16 ff       	and %d15,255
8000674c:	53 cf 20 a0 	mul %d10,%d15,12
80006750:	c8 12       	ld.a %a2,[%a15]4
80006752:	4c c0       	ld.w %d15,[%a12]0
80006754:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006756:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
80006724:	30 32       	add.a %a2,%a3
80006726:	14 22       	ld.bu %d2,[%a2]
80006728:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
8000672c:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000672e:	6d 00 cb 06 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
800066c8:	30 32       	add.a %a2,%a3
800066ca:	14 22       	ld.bu %d2,[%a2]
800066cc:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
800066d0:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066d2:	6d 00 cb 06 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006758:	30 32       	add.a %a2,%a3
8000675a:	14 22       	ld.bu %d2,[%a2]
8000675c:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
80006760:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006762:	6d 00 cb 06 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
<<<<<<< HEAD
<<<<<<< HEAD
80006732:	c8 12       	ld.a %a2,[%a15]4
80006734:	60 a3       	mov.a %a3,%d10
80006736:	30 32       	add.a %a2,%a3
80006738:	99 22 08 00 	ld.a %a2,[%a2]8
8000673c:	bc 23       	jz.a %a2,80006742 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
8000673e:	2d 02 00 00 	calli %a2
=======
800066d6:	c8 12       	ld.a %a2,[%a15]4
800066d8:	60 a3       	mov.a %a3,%d10
800066da:	30 32       	add.a %a2,%a3
800066dc:	99 22 08 00 	ld.a %a2,[%a2]8
800066e0:	bc 23       	jz.a %a2,800066e6 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
800066e2:	2d 02 00 00 	calli %a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006766:	c8 12       	ld.a %a2,[%a15]4
80006768:	60 a3       	mov.a %a3,%d10
8000676a:	30 32       	add.a %a2,%a3
8000676c:	99 22 08 00 	ld.a %a2,[%a2]8
80006770:	bc 23       	jz.a %a2,80006776 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
80006772:	2d 02 00 00 	calli %a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
<<<<<<< HEAD
<<<<<<< HEAD
80006742:	c8 12       	ld.a %a2,[%a15]4
80006744:	60 a3       	mov.a %a3,%d10
80006746:	c2 1d       	add %d13,1
80006748:	30 32       	add.a %a2,%a3
8000674a:	19 24 04 00 	ld.w %d4,[%a2]4
8000674e:	6d ff a7 fc 	call 8000609c <IfxScuCcu_wait>
80006752:	3c d6       	j 800066fe <IfxScuCcu_init+0x31a>
=======
800066e6:	c8 12       	ld.a %a2,[%a15]4
800066e8:	60 a3       	mov.a %a3,%d10
800066ea:	c2 1d       	add %d13,1
800066ec:	30 32       	add.a %a2,%a3
800066ee:	19 24 04 00 	ld.w %d4,[%a2]4
800066f2:	6d ff a7 fc 	call 80006040 <IfxScuCcu_wait>
800066f6:	3c d6       	j 800066a2 <IfxScuCcu_init+0x31a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006776:	c8 12       	ld.a %a2,[%a15]4
80006778:	60 a3       	mov.a %a3,%d10
8000677a:	c2 1d       	add %d13,1
8000677c:	30 32       	add.a %a2,%a3
8000677e:	19 24 04 00 	ld.w %d4,[%a2]4
80006782:	6d ff a7 fc 	call 800060d0 <IfxScuCcu_wait>
80006786:	3c d6       	j 80006732 <IfxScuCcu_init+0x31a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006754:	02 84       	mov %d4,%d8
80006756:	6d 00 31 05 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
=======
80006788:	02 84       	mov %d4,%d8
8000678a:	6d 00 31 05 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000678e:	91 30 00 ff 	movh.a %a15,61443
80006792:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006796:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
80006764:	02 84       	mov %d4,%d8
=======
800066f8:	02 84       	mov %d4,%d8
800066fa:	6d 00 31 05 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
800066fe:	91 30 00 ff 	movh.a %a15,61443
80006702:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006706:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006708:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006798:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
80006766:	8f 0f c4 f1 	andn %d15,%d15,64
8000676a:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000676c:	6d 00 ac 06 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
8000670a:	8f 0f c4 f1 	andn %d15,%d15,64
8000670e:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006710:	6d 00 ac 06 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000679a:	8f 0f c4 f1 	andn %d15,%d15,64
8000679e:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800067a0:	6d 00 ac 06 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80006770:	91 30 00 ff 	movh.a %a15,61443
=======
80006714:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067a4:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006774:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
80006776:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
=======
80006718:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
8000671a:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067a8:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
800067aa:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
<<<<<<< HEAD
8000677a:	6d 00 04 05 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
800067ae:	6d 00 04 05 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_TRAPCLR.B.SMUT = 1U;
800067b2:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
<<<<<<< HEAD
80006780:	06 3c       	sh %d12,3
=======
8000671e:	6d 00 04 05 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006722:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006724:	06 3c       	sh %d12,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067b4:	06 3c       	sh %d12,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80006782:	96 08       	or %d15,8
80006784:	68 0f       	st.w [%a15]0,%d15
=======
800067b6:	96 08       	or %d15,8
800067b8:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067ba:	91 30 00 ff 	movh.a %a15,61443
800067be:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800067c2:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
<<<<<<< HEAD
80006790:	02 94       	mov %d4,%d9
=======
80006726:	96 08       	or %d15,8
80006728:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000672a:	91 30 00 ff 	movh.a %a15,61443
8000672e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006732:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006734:	02 94       	mov %d4,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067c4:	02 94       	mov %d4,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
<<<<<<< HEAD
<<<<<<< HEAD
80006792:	8f 8f c0 f1 	andn %d15,%d15,8
80006796:	a6 fc       	or %d12,%d15
80006798:	68 0c       	st.w [%a15]0,%d12
=======
800067c6:	8f 8f c0 f1 	andn %d15,%d15,8
800067ca:	a6 fc       	or %d12,%d15
800067cc:	68 0c       	st.w [%a15]0,%d12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067ce:	6d 00 29 06 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
800067d2:	02 b2       	mov %d2,%d11
800067d4:	00 90       	ret 

<<<<<<< HEAD
800067a2 <IfxScuCcu_initConfig>:
=======
80006736:	8f 8f c0 f1 	andn %d15,%d15,8
8000673a:	a6 fc       	or %d12,%d15
8000673c:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000673e:	6d 00 29 06 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006742:	02 b2       	mov %d2,%d11
80006744:	00 90       	ret 

80006746 <IfxScuCcu_initConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067d6 <IfxScuCcu_initConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
<<<<<<< HEAD
<<<<<<< HEAD
800067a2:	91 00 00 f8 	movh.a %a15,32768
800067a6:	d9 ff 88 b0 	lea %a15,[%a15]2760 <80000ac8 <IfxScuCcu_defaultClockConfig>>
800067aa:	c5 02 14 00 	lea %a2,14 <_.+0x13>
800067ae:	44 ff       	ld.w %d15,[%a15+]
800067b0:	64 4f       	st.w [%a4+],%d15
800067b2:	fc 2e       	loop %a2,800067ae <IfxScuCcu_initConfig+0xc>
800067b4:	00 90       	ret 

800067b6 <IfxScuCcu_initErayPll>:
=======
80006746:	91 00 00 f8 	movh.a %a15,32768
8000674a:	d9 ff a4 90 	lea %a15,[%a15]2660 <80000a64 <IfxScuCcu_defaultClockConfig>>
8000674e:	c5 02 14 00 	lea %a2,14 <_.+0x13>
80006752:	44 ff       	ld.w %d15,[%a15+]
80006754:	64 4f       	st.w [%a4+],%d15
80006756:	fc 2e       	loop %a2,80006752 <IfxScuCcu_initConfig+0xc>
80006758:	00 90       	ret 

8000675a <IfxScuCcu_initErayPll>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067d6:	91 00 00 f8 	movh.a %a15,32768
800067da:	d9 ff a0 b0 	lea %a15,[%a15]2784 <80000ae0 <IfxScuCcu_defaultClockConfig>>
800067de:	c5 02 14 00 	lea %a2,14 <_.+0x13>
800067e2:	44 ff       	ld.w %d15,[%a15+]
800067e4:	64 4f       	st.w [%a4+],%d15
800067e6:	fc 2e       	loop %a2,800067e2 <IfxScuCcu_initConfig+0xc>
800067e8:	00 90       	ret 

800067ea <IfxScuCcu_initErayPll>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
<<<<<<< HEAD
<<<<<<< HEAD
800067b6:	40 4c       	mov.aa %a12,%a4
=======
8000675a:	40 4c       	mov.aa %a12,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067ea:	40 4c       	mov.aa %a12,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
800067b8:	6d 00 e5 05 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
800067bc:	02 2f       	mov %d15,%d2
=======
800067ec:	6d 00 e5 05 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
800067f0:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800067f2:	6d 00 00 06 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
800067c2:	02 f4       	mov %d4,%d15
=======
8000675c:	6d 00 e5 05 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
80006760:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006762:	6d 00 00 06 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006766:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800067f6:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
800067c4:	02 28       	mov %d8,%d2
=======
800067f8:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067fa:	6d 00 de 04 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800067fe:	91 30 00 ff 	movh.a %a15,61443
80006802:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006806:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006808:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
<<<<<<< HEAD
800067d6:	02 f4       	mov %d4,%d15
=======
80006768:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000676a:	6d 00 de 04 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000676e:	91 30 00 ff 	movh.a %a15,61443
80006772:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006776:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006778:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000677a:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000680a:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
800067d8:	8f 82 40 21 	or %d2,%d2,8
800067dc:	68 02       	st.w [%a15]0,%d2
=======
8000677c:	8f 82 40 21 	or %d2,%d2,8
80006780:	68 02       	st.w [%a15]0,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000680c:	8f 82 40 21 	or %d2,%d2,8
80006810:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
<<<<<<< HEAD
<<<<<<< HEAD
800067de:	37 03 e1 a1 	extr.u %d10,%d3,3,1
=======
80006812:	37 03 e1 a1 	extr.u %d10,%d3,3,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006816:	6d 00 05 06 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000681a:	02 84       	mov %d4,%d8
8000681c:	6d 00 e8 04 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
80006820:	91 30 00 ff 	movh.a %a15,61443
80006824:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006828:	48 02       	ld.w %d2,[%a15]0
8000682a:	ef 02 0c 00 	jz.t %d2,16,80006842 <IfxScuCcu_initErayPll+0x58>
8000682e:	48 02       	ld.w %d2,[%a15]0
80006830:	6f 12 09 80 	jnz.t %d2,1,80006842 <IfxScuCcu_initErayPll+0x58>
80006834:	91 30 00 ff 	movh.a %a15,61443
80006838:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000683c:	48 02       	ld.w %d2,[%a15]0
8000683e:	6f 12 19 00 	jz.t %d2,1,80006870 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
80006842:	91 30 00 ff 	movh.a %a15,61443
80006846:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000684a:	48 02       	ld.w %d2,[%a15]0
8000684c:	b7 f2 01 28 	insert %d2,%d2,15,16,1
80006850:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
80006852:	48 02       	ld.w %d2,[%a15]0
80006854:	8f 22 c0 21 	andn %d2,%d2,2
80006858:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
<<<<<<< HEAD
80006826:	91 30 00 ff 	movh.a %a15,61443
8000682a:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000682e:	48 02       	ld.w %d2,[%a15]0
80006830:	6f 12 ff ff 	jnz.t %d2,1,8000682e <IfxScuCcu_initErayPll+0x78>
=======
80006782:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006786:	6d 00 05 06 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000678a:	02 84       	mov %d4,%d8
8000678c:	6d 00 e8 04 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
80006790:	91 30 00 ff 	movh.a %a15,61443
80006794:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006798:	48 02       	ld.w %d2,[%a15]0
8000679a:	ef 02 0c 00 	jz.t %d2,16,800067b2 <IfxScuCcu_initErayPll+0x58>
8000679e:	48 02       	ld.w %d2,[%a15]0
800067a0:	6f 12 09 80 	jnz.t %d2,1,800067b2 <IfxScuCcu_initErayPll+0x58>
800067a4:	91 30 00 ff 	movh.a %a15,61443
800067a8:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067ac:	48 02       	ld.w %d2,[%a15]0
800067ae:	6f 12 19 00 	jz.t %d2,1,800067e0 <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
800067b2:	91 30 00 ff 	movh.a %a15,61443
800067b6:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800067ba:	48 02       	ld.w %d2,[%a15]0
800067bc:	b7 f2 01 28 	insert %d2,%d2,15,16,1
800067c0:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
800067c2:	48 02       	ld.w %d2,[%a15]0
800067c4:	8f 22 c0 21 	andn %d2,%d2,2
800067c8:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
800067ca:	91 30 00 ff 	movh.a %a15,61443
800067ce:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067d2:	48 02       	ld.w %d2,[%a15]0
800067d4:	6f 12 ff ff 	jnz.t %d2,1,800067d2 <IfxScuCcu_initErayPll+0x78>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000685a:	91 30 00 ff 	movh.a %a15,61443
8000685e:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006862:	48 02       	ld.w %d2,[%a15]0
80006864:	6f 12 ff ff 	jnz.t %d2,1,80006862 <IfxScuCcu_initErayPll+0x78>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
<<<<<<< HEAD
<<<<<<< HEAD
80006834:	19 c4 04 00 	ld.w %d4,[%a12]4
80006838:	6d ff 32 fc 	call 8000609c <IfxScuCcu_wait>
=======
800067d8:	19 c4 04 00 	ld.w %d4,[%a12]4
800067dc:	6d ff 32 fc 	call 80006040 <IfxScuCcu_wait>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006868:	19 c4 04 00 	ld.w %d4,[%a12]4
8000686c:	6d ff 32 fc 	call 800060d0 <IfxScuCcu_wait>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
<<<<<<< HEAD
<<<<<<< HEAD
8000683c:	91 30 00 ff 	movh.a %a15,61443
80006840:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006844:	48 02       	ld.w %d2,[%a15]0
80006846:	6f 02 15 80 	jnz.t %d2,0,80006870 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
8000684a:	48 02       	ld.w %d2,[%a15]0
8000684c:	6f 42 ff 7f 	jz.t %d2,4,8000684a <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
80006850:	91 30 00 ff 	movh.a %a15,61443
80006854:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006858:	48 02       	ld.w %d2,[%a15]0
8000685a:	b7 32 07 28 	insert %d2,%d2,3,16,7
8000685e:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006860:	91 30 00 ff 	movh.a %a15,61443
80006864:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006868:	48 02       	ld.w %d2,[%a15]0
8000686a:	8f 12 40 21 	or %d2,%d2,1
8000686e:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
=======
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80006870:	91 30 00 ff 	movh.a %a15,61443
80006874:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006878:	48 02       	ld.w %d2,[%a15]0
8000687a:	6f 02 15 80 	jnz.t %d2,0,800068a4 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
8000687e:	48 02       	ld.w %d2,[%a15]0
80006880:	6f 42 ff 7f 	jz.t %d2,4,8000687e <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
80006884:	91 30 00 ff 	movh.a %a15,61443
80006888:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000688c:	48 02       	ld.w %d2,[%a15]0
8000688e:	b7 32 07 28 	insert %d2,%d2,3,16,7
80006892:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006894:	91 30 00 ff 	movh.a %a15,61443
80006898:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000689c:	48 02       	ld.w %d2,[%a15]0
8000689e:	8f 12 40 21 	or %d2,%d2,1
800068a2:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
800068a4:	91 30 00 ff 	movh.a %a15,61443
800068a8:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068ac:	48 02       	ld.w %d2,[%a15]0
800068ae:	6f 52 ff 7f 	jz.t %d2,5,800068ac <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
<<<<<<< HEAD
8000687e:	91 30 00 ff 	movh.a %a15,61443
80006882:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006886:	48 03       	ld.w %d3,[%a15]0
80006888:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
=======
800067e0:	91 30 00 ff 	movh.a %a15,61443
800067e4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067e8:	48 02       	ld.w %d2,[%a15]0
800067ea:	6f 02 15 80 	jnz.t %d2,0,80006814 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
800067ee:	48 02       	ld.w %d2,[%a15]0
800067f0:	6f 42 ff 7f 	jz.t %d2,4,800067ee <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
800067f4:	91 30 00 ff 	movh.a %a15,61443
800067f8:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
800067fc:	48 02       	ld.w %d2,[%a15]0
800067fe:	b7 32 07 28 	insert %d2,%d2,3,16,7
80006802:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006804:	91 30 00 ff 	movh.a %a15,61443
80006808:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000680c:	48 02       	ld.w %d2,[%a15]0
8000680e:	8f 12 40 21 	or %d2,%d2,1
80006812:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
80006814:	91 30 00 ff 	movh.a %a15,61443
80006818:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000681c:	48 02       	ld.w %d2,[%a15]0
8000681e:	6f 52 ff 7f 	jz.t %d2,5,8000681c <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
80006822:	91 30 00 ff 	movh.a %a15,61443
80006826:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000682a:	48 03       	ld.w %d3,[%a15]0
8000682c:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800068b2:	91 30 00 ff 	movh.a %a15,61443
800068b6:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
800068ba:	48 03       	ld.w %d3,[%a15]0
800068bc:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
8000688c:	02 84       	mov %d4,%d8
=======
80006830:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800068c0:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
<<<<<<< HEAD
<<<<<<< HEAD
8000688e:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006892:	68 02       	st.w [%a15]0,%d2
=======
800068c2:	37 23 07 20 	insert %d2,%d3,%d2,0,7
800068c6:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
800068c8:	91 30 00 ff 	movh.a %a15,61443
800068cc:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800068d0:	48 03       	ld.w %d3,[%a15]0
800068d2:	14 c2       	ld.bu %d2,[%a12]
800068d4:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
800068d8:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
<<<<<<< HEAD
800068a6:	48 03       	ld.w %d3,[%a15]0
800068a8:	39 c2 01 00 	ld.bu %d2,[%a12]1
800068ac:	37 23 85 24 	insert %d2,%d3,%d2,9,5
800068b0:	68 02       	st.w [%a15]0,%d2
=======
80006832:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006836:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006838:	91 30 00 ff 	movh.a %a15,61443
8000683c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006840:	48 03       	ld.w %d3,[%a15]0
80006842:	14 c2       	ld.bu %d2,[%a12]
80006844:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
80006848:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
8000684a:	48 03       	ld.w %d3,[%a15]0
8000684c:	39 c2 01 00 	ld.bu %d2,[%a12]1
80006850:	37 23 85 24 	insert %d2,%d3,%d2,9,5
80006854:	68 02       	st.w [%a15]0,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800068da:	48 03       	ld.w %d3,[%a15]0
800068dc:	39 c2 01 00 	ld.bu %d2,[%a12]1
800068e0:	37 23 85 24 	insert %d2,%d3,%d2,9,5
800068e4:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
800068b2:	48 02       	ld.w %d2,[%a15]0
800068b4:	b7 f2 01 29 	insert %d2,%d2,15,18,1
800068b8:	68 02       	st.w [%a15]0,%d2
=======
800068e6:	48 02       	ld.w %d2,[%a15]0
800068e8:	b7 f2 01 29 	insert %d2,%d2,15,18,1
800068ec:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
800068ee:	48 02       	ld.w %d2,[%a15]0
800068f0:	8f 02 42 21 	or %d2,%d2,32
800068f4:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
800068c2:	6d 00 01 06 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
80006856:	48 02       	ld.w %d2,[%a15]0
80006858:	b7 f2 01 29 	insert %d2,%d2,15,18,1
8000685c:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
8000685e:	48 02       	ld.w %d2,[%a15]0
80006860:	8f 02 42 21 	or %d2,%d2,32
80006864:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006866:	6d 00 01 06 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800068f6:	6d 00 01 06 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
<<<<<<< HEAD
<<<<<<< HEAD
800068c6:	91 10 00 f0 	movh.a %a15,1
800068ca:	91 30 00 2f 	movh.a %a2,61443
800068ce:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068d2:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
800068d6:	fd f0 04 00 	loop %a15,800068de <IfxScuCcu_initErayPll+0x128>
=======
8000686a:	91 10 00 f0 	movh.a %a15,1
8000686e:	91 30 00 2f 	movh.a %a2,61443
80006872:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006876:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
8000687a:	fd f0 04 00 	loop %a15,80006882 <IfxScuCcu_initErayPll+0x128>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800068fa:	91 10 00 f0 	movh.a %a15,1
800068fe:	91 30 00 2f 	movh.a %a2,61443
80006902:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006906:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
8000690a:	fd f0 04 00 	loop %a15,80006912 <IfxScuCcu_initErayPll+0x128>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
800068da:	82 19       	mov %d9,1
800068dc:	3c 05       	j 800068e6 <IfxScuCcu_initErayPll+0x130>
=======
8000687e:	82 19       	mov %d9,1
80006880:	3c 05       	j 8000688a <IfxScuCcu_initErayPll+0x130>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000690e:	82 19       	mov %d9,1
80006910:	3c 05       	j 8000691a <IfxScuCcu_initErayPll+0x130>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
<<<<<<< HEAD
<<<<<<< HEAD
800068de:	54 22       	ld.w %d2,[%a2]
800068e0:	6f 22 fb 7f 	jz.t %d2,2,800068d6 <IfxScuCcu_initErayPll+0x120>
=======
80006882:	54 22       	ld.w %d2,[%a2]
80006884:	6f 22 fb 7f 	jz.t %d2,2,8000687a <IfxScuCcu_initErayPll+0x120>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006912:	54 22       	ld.w %d2,[%a2]
80006914:	6f 22 fb 7f 	jz.t %d2,2,8000690a <IfxScuCcu_initErayPll+0x120>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800068e4:	82 09       	mov %d9,0
=======
80006888:	82 09       	mov %d9,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006918:	82 09       	mov %d9,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
800068e6:	02 84       	mov %d4,%d8
800068e8:	6d 00 68 04 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
=======
8000691a:	02 84       	mov %d4,%d8
8000691c:	6d 00 68 04 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
80006920:	91 30 00 ff 	movh.a %a15,61443
80006924:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006928:	48 02       	ld.w %d2,[%a15]0
8000692a:	8f 12 c0 21 	andn %d2,%d2,1
8000692e:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
80006930:	91 30 00 ff 	movh.a %a15,61443
80006934:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006938:	48 02       	ld.w %d2,[%a15]0
8000693a:	6f 02 ff ff 	jnz.t %d2,0,80006938 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
<<<<<<< HEAD
8000690a:	91 30 00 ff 	movh.a %a15,61443
8000690e:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006912:	48 02       	ld.w %d2,[%a15]0
=======
8000688a:	02 84       	mov %d4,%d8
8000688c:	6d 00 68 04 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
80006890:	91 30 00 ff 	movh.a %a15,61443
80006894:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006898:	48 02       	ld.w %d2,[%a15]0
8000689a:	8f 12 c0 21 	andn %d2,%d2,1
8000689e:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
800068a0:	91 30 00 ff 	movh.a %a15,61443
800068a4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068a8:	48 02       	ld.w %d2,[%a15]0
800068aa:	6f 02 ff ff 	jnz.t %d2,0,800068a8 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800068ae:	91 30 00 ff 	movh.a %a15,61443
800068b2:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068b6:	48 02       	ld.w %d2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000693e:	91 30 00 ff 	movh.a %a15,61443
80006942:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006946:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006914:	02 84       	mov %d4,%d8
=======
800068b8:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006948:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
<<<<<<< HEAD
<<<<<<< HEAD
80006916:	37 02 61 21 	extr.u %d2,%d2,2,1
=======
800068ba:	37 02 61 21 	extr.u %d2,%d2,2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000694a:	37 02 61 21 	extr.u %d2,%d2,2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000691a:	91 30 00 ff 	movh.a %a15,61443
=======
800068be:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000694e:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
8000691e:	ab 19 80 92 	sel %d9,%d2,%d9,1
=======
80006952:	ab 19 80 92 	sel %d9,%d2,%d9,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006956:	6d 00 d1 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000695a:	02 f4       	mov %d4,%d15
8000695c:	6d 00 2d 04 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006960:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006964:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
<<<<<<< HEAD
80006932:	8f 3a 00 30 	sh %d3,%d10,3
=======
800068c2:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068c6:	6d 00 d1 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800068ca:	02 f4       	mov %d4,%d15
800068cc:	6d 00 2d 04 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
800068d0:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800068d4:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068d6:	8f 3a 00 30 	sh %d3,%d10,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006966:	8f 3a 00 30 	sh %d3,%d10,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80006936:	8f 82 40 21 	or %d2,%d2,8
8000693a:	68 02       	st.w [%a15]0,%d2
=======
8000696a:	8f 82 40 21 	or %d2,%d2,8
8000696e:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006970:	91 30 00 ff 	movh.a %a15,61443
80006974:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006978:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
<<<<<<< HEAD
80006946:	02 f4       	mov %d4,%d15
=======
800068da:	8f 82 40 21 	or %d2,%d2,8
800068de:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800068e0:	91 30 00 ff 	movh.a %a15,61443
800068e4:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800068e8:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800068ea:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000697a:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
<<<<<<< HEAD
<<<<<<< HEAD
80006948:	8f 82 c0 21 	andn %d2,%d2,8
8000694c:	a6 32       	or %d2,%d3
8000694e:	68 02       	st.w [%a15]0,%d2
=======
8000697c:	8f 82 c0 21 	andn %d2,%d2,8
80006980:	a6 32       	or %d2,%d3
80006982:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006984:	6d 00 4e 05 	call 80007420 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006988:	02 92       	mov %d2,%d9
8000698a:	00 90       	ret 

<<<<<<< HEAD
80006958 <IfxScuCcu_initErayPllConfig>:
=======
800068ec:	8f 82 c0 21 	andn %d2,%d2,8
800068f0:	a6 32       	or %d2,%d3
800068f2:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
800068f4:	6d 00 4e 05 	call 80007390 <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
800068f8:	02 92       	mov %d2,%d9
800068fa:	00 90       	ret 

800068fc <IfxScuCcu_initErayPllConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000698c <IfxScuCcu_initErayPllConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
<<<<<<< HEAD
<<<<<<< HEAD
80006958:	91 00 00 f8 	movh.a %a15,32768
8000695c:	d9 ff 80 b0 	lea %a15,[%a15]2752 <80000ac0 <IfxScuCcu_defaultErayPllConfig>>
80006960:	09 f2 40 09 	ld.d %e2,[%a15]
80006964:	89 42 40 09 	st.d [%a4],%e2
80006968:	00 90       	ret 

8000696a <IfxScuCcu_setCpuFrequency>:
=======
800068fc:	91 00 00 f8 	movh.a %a15,32768
80006900:	d9 ff 9c 90 	lea %a15,[%a15]2652 <80000a5c <IfxScuCcu_defaultErayPllConfig>>
80006904:	09 f2 40 09 	ld.d %e2,[%a15]
80006908:	89 42 40 09 	st.d [%a4],%e2
8000690c:	00 90       	ret 

8000690e <IfxScuCcu_setCpuFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000698c:	91 00 00 f8 	movh.a %a15,32768
80006990:	d9 ff 98 b0 	lea %a15,[%a15]2776 <80000ad8 <IfxScuCcu_defaultErayPllConfig>>
80006994:	09 f2 40 09 	ld.d %e2,[%a15]
80006998:	89 42 40 09 	st.d [%a4],%e2
8000699c:	00 90       	ret 

8000699e <IfxScuCcu_setCpuFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000696a:	02 5a       	mov %d10,%d5
8000696c:	02 49       	mov %d9,%d4
=======
8000690e:	02 5a       	mov %d10,%d5
80006910:	02 49       	mov %d9,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000699e:	02 5a       	mov %d10,%d5
800069a0:	02 49       	mov %d9,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
8000696e:	6d ff a7 fc 	call 800062bc <IfxScuCcu_getSriFrequency>
80006972:	02 2f       	mov %d15,%d2
=======
800069a2:	6d ff a7 fc 	call 800062f0 <IfxScuCcu_getSriFrequency>
800069a6:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (cpuFreq >= sriFreq)
800069a8:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
800069ac:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
<<<<<<< HEAD
8000697c:	82 08       	mov %d8,0
=======
80006912:	6d ff a7 fc 	call 80006260 <IfxScuCcu_getSriFrequency>
80006916:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006918:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
8000691c:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
80006920:	82 08       	mov %d8,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800069b0:	82 08       	mov %d8,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
<<<<<<< HEAD
<<<<<<< HEAD
8000697e:	f6 29       	jnz %d2,80006990 <IfxScuCcu_setCpuFrequency+0x26>
=======
80006922:	f6 29       	jnz %d2,80006934 <IfxScuCcu_setCpuFrequency+0x26>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800069b2:	f6 29       	jnz %d2,800069c4 <IfxScuCcu_setCpuFrequency+0x26>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
<<<<<<< HEAD
<<<<<<< HEAD
80006980:	7b 00 28 84 	movh %d8,17024
80006984:	4b 8a 41 80 	mul.f %d8,%d10,%d8
80006988:	4b f8 51 80 	div.f %d8,%d8,%d15
8000698c:	4b 08 71 81 	ftouz %d8,%d8
=======
800069b4:	7b 00 28 84 	movh %d8,17024
800069b8:	4b 8a 41 80 	mul.f %d8,%d10,%d8
800069bc:	4b f8 51 80 	div.f %d8,%d8,%d15
800069c0:	4b 08 71 81 	ftouz %d8,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800069c4:	6d 00 17 05 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
80006994:	02 24       	mov %d4,%d2
=======
80006924:	7b 00 28 84 	movh %d8,17024
80006928:	4b 8a 41 80 	mul.f %d8,%d10,%d8
8000692c:	4b f8 51 80 	div.f %d8,%d8,%d15
80006930:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006934:	6d 00 17 05 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006938:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800069c8:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006996:	02 2a       	mov %d10,%d2
=======
800069ca:	02 2a       	mov %d10,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800069cc:	6d 00 10 04 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
<<<<<<< HEAD
8000699c:	df 19 0f 00 	jeq %d9,1,800069ba <IfxScuCcu_setCpuFrequency+0x50>
800069a0:	76 98       	jz %d9,800069b0 <IfxScuCcu_setCpuFrequency+0x46>
800069a2:	df 29 11 80 	jne %d9,2,800069c4 <IfxScuCcu_setCpuFrequency+0x5a>
=======
8000693a:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000693c:	6d 00 10 04 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
80006940:	df 19 0f 00 	jeq %d9,1,8000695e <IfxScuCcu_setCpuFrequency+0x50>
80006944:	76 98       	jz %d9,80006954 <IfxScuCcu_setCpuFrequency+0x46>
80006946:	df 29 11 80 	jne %d9,2,80006968 <IfxScuCcu_setCpuFrequency+0x5a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800069d0:	df 19 0f 00 	jeq %d9,1,800069ee <IfxScuCcu_setCpuFrequency+0x50>
800069d4:	76 98       	jz %d9,800069e4 <IfxScuCcu_setCpuFrequency+0x46>
800069d6:	df 29 11 80 	jne %d9,2,800069f8 <IfxScuCcu_setCpuFrequency+0x5a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
<<<<<<< HEAD
<<<<<<< HEAD
800069a6:	91 30 00 ff 	movh.a %a15,61443
800069aa:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800069ae:	3c 0a       	j 800069c2 <IfxScuCcu_setCpuFrequency+0x58>
=======
8000694a:	91 30 00 ff 	movh.a %a15,61443
8000694e:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006952:	3c 0a       	j 80006966 <IfxScuCcu_setCpuFrequency+0x58>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800069da:	91 30 00 ff 	movh.a %a15,61443
800069de:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800069e2:	3c 0a       	j 800069f6 <IfxScuCcu_setCpuFrequency+0x58>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
<<<<<<< HEAD
<<<<<<< HEAD
800069b0:	91 30 00 ff 	movh.a %a15,61443
800069b4:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800069b8:	3c 05       	j 800069c2 <IfxScuCcu_setCpuFrequency+0x58>
=======
800069e4:	91 30 00 ff 	movh.a %a15,61443
800069e8:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800069ec:	3c 05       	j 800069f6 <IfxScuCcu_setCpuFrequency+0x58>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
800069ee:	91 30 00 ff 	movh.a %a15,61443
800069f2:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
<<<<<<< HEAD
800069c2:	68 08       	st.w [%a15]0,%d8
=======
80006954:	91 30 00 ff 	movh.a %a15,61443
80006958:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
8000695c:	3c 05       	j 80006966 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
8000695e:	91 30 00 ff 	movh.a %a15,61443
80006962:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006966:	68 08       	st.w [%a15]0,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800069f6:	68 08       	st.w [%a15]0,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
800069c4:	02 a4       	mov %d4,%d10
800069c6:	6d 00 7f 05 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
800069f8:	02 a4       	mov %d4,%d10
800069fa:	6d 00 7f 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (cpuDiv != 0)
800069fe:	76 89       	jz %d8,80006a10 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
<<<<<<< HEAD
800069cc:	4b 08 61 81 	utof %d8,%d8
800069d0:	7b 00 c8 23 	movh %d2,15488
800069d4:	4b 28 41 80 	mul.f %d8,%d8,%d2
800069d8:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
=======
80006968:	02 a4       	mov %d4,%d10
8000696a:	6d 00 7f 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
8000696e:	76 89       	jz %d8,80006980 <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
80006970:	4b 08 61 81 	utof %d8,%d8
80006974:	7b 00 c8 23 	movh %d2,15488
80006978:	4b 28 41 80 	mul.f %d8,%d8,%d2
8000697c:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a00:	4b 08 61 81 	utof %d8,%d8
80006a04:	7b 00 c8 23 	movh %d2,15488
80006a08:	4b 28 41 80 	mul.f %d8,%d8,%d2
80006a0c:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return sriFreq;
}
<<<<<<< HEAD
<<<<<<< HEAD
800069dc:	02 f2       	mov %d2,%d15
800069de:	00 90       	ret 

800069e0 <IfxScuCcu_setGtmFrequency>:
=======
80006980:	02 f2       	mov %d2,%d15
80006982:	00 90       	ret 

80006984 <IfxScuCcu_setGtmFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a10:	02 f2       	mov %d2,%d15
80006a12:	00 90       	ret 

80006a14 <IfxScuCcu_setGtmFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
<<<<<<< HEAD
<<<<<<< HEAD
800069e0:	91 30 00 ff 	movh.a %a15,61443
800069e4:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
=======
80006984:	91 30 00 ff 	movh.a %a15,61443
80006988:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a14:	91 30 00 ff 	movh.a %a15,61443
80006a18:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
<<<<<<< HEAD
<<<<<<< HEAD
800069e8:	02 48       	mov %d8,%d4
=======
80006a1c:	02 48       	mov %d8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006a1e:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006a20:	6d ff 46 fb 	call 800060ac <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
<<<<<<< HEAD
800069f0:	4b 82 51 20 	div.f %d2,%d2,%d8
800069f4:	4b 02 31 31 	ftoiz %d3,%d2
800069f8:	4b 03 41 41 	itof %d4,%d3
800069fc:	6b 04 31 22 	sub.f %d2,%d2,%d4
80006a00:	7b 00 f0 43 	movh %d4,16128
80006a04:	4b 42 01 20 	cmp.f %d2,%d2,%d4
80006a08:	37 02 61 21 	extr.u %d2,%d2,2,1
80006a0c:	42 32       	add %d2,%d3
=======
8000698c:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
8000698e:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006990:	6d ff 46 fb 	call 8000601c <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
80006994:	4b 82 51 20 	div.f %d2,%d2,%d8
80006998:	4b 02 31 31 	ftoiz %d3,%d2
8000699c:	4b 03 41 41 	itof %d4,%d3
800069a0:	6b 04 31 22 	sub.f %d2,%d2,%d4
800069a4:	7b 00 f0 43 	movh %d4,16128
800069a8:	4b 42 01 20 	cmp.f %d2,%d2,%d4
800069ac:	37 02 61 21 	extr.u %d2,%d2,2,1
800069b0:	42 32       	add %d2,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a24:	4b 82 51 20 	div.f %d2,%d2,%d8
80006a28:	4b 02 31 31 	ftoiz %d3,%d2
80006a2c:	4b 03 41 41 	itof %d4,%d3
80006a30:	6b 04 31 22 	sub.f %d2,%d2,%d4
80006a34:	7b 00 f0 43 	movh %d4,16128
80006a38:	4b 42 01 20 	cmp.f %d2,%d2,%d4
80006a3c:	37 02 61 21 	extr.u %d2,%d2,2,1
80006a40:	42 32       	add %d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
<<<<<<< HEAD
80006a0e:	82 13       	mov %d3,1
80006a10:	0b 32 b0 21 	max.u %d2,%d2,%d3
=======
800069b2:	82 13       	mov %d3,1
800069b4:	0b 32 b0 21 	max.u %d2,%d2,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a42:	82 13       	mov %d3,1
80006a44:	0b 32 b0 21 	max.u %d2,%d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
<<<<<<< HEAD
<<<<<<< HEAD
80006a14:	8b e2 00 52 	eq %d5,%d2,14
=======
800069b8:	8b e2 00 52 	eq %d5,%d2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a48:	8b e2 00 52 	eq %d5,%d2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
<<<<<<< HEAD
<<<<<<< HEAD
80006a18:	1b 92 ff 4f 	addi %d4,%d2,-7
=======
800069bc:	1b 92 ff 4f 	addi %d4,%d2,-7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a4c:	1b 92 ff 4f 	addi %d4,%d2,-7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
<<<<<<< HEAD
<<<<<<< HEAD
80006a1c:	ab c2 a0 95 	seln %d9,%d5,%d2,12
=======
800069c0:	ab c2 a0 95 	seln %d9,%d5,%d2,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a50:	ab c2 a0 95 	seln %d9,%d5,%d2,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
<<<<<<< HEAD
<<<<<<< HEAD
80006a20:	8f 12 c0 31 	andn %d3,%d2,1
80006a24:	02 92       	mov %d2,%d9
80006a26:	8b 74 a0 92 	ge.u %d9,%d4,7
80006a2a:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
=======
800069c4:	8f 12 c0 31 	andn %d3,%d2,1
800069c8:	02 92       	mov %d2,%d9
800069ca:	8b 74 a0 92 	ge.u %d9,%d4,7
800069ce:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a54:	8f 12 c0 31 	andn %d3,%d2,1
80006a58:	02 92       	mov %d2,%d9
80006a5a:	8b 74 a0 92 	ge.u %d9,%d4,7
80006a5e:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006a2e:	6d 00 c8 04 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a32:	02 24       	mov %d4,%d2
=======
800069d2:	6d 00 c8 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069d6:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a62:	6d 00 c8 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a66:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006a34:	02 28       	mov %d8,%d2
=======
80006a68:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a6a:	6d 00 c1 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
80006a6e:	40 f2       	mov.aa %a2,%a15
80006a70:	54 22       	ld.w %d2,[%a2]
80006a72:	91 30 00 ff 	movh.a %a15,61443
80006a76:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006a7a:	bf 02 fb 7f 	jlt %d2,0,80006a70 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
80006a7e:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
80006a82:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
<<<<<<< HEAD
80006a52:	02 84       	mov %d4,%d8
=======
800069d8:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800069da:	6d 00 c1 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
800069de:	40 f2       	mov.aa %a2,%a15
800069e0:	54 22       	ld.w %d2,[%a2]
800069e2:	91 30 00 ff 	movh.a %a15,61443
800069e6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800069ea:	bf 02 fb 7f 	jlt %d2,0,800069e0 <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
800069ee:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
800069f2:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
800069f6:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a86:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
<<<<<<< HEAD
<<<<<<< HEAD
80006a54:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a56:	6d 00 37 05 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
800069f8:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
800069fa:	6d 00 37 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006a88:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a8a:	6d 00 37 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
<<<<<<< HEAD
<<<<<<< HEAD
80006a5a:	6d ff 0f fb 	call 80006078 <IfxScuCcu_getSourceFrequency>
80006a5e:	4c f0       	ld.w %d15,[%a15]0
80006a60:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a64:	4b 0f 41 f1 	itof %d15,%d15
=======
80006a8e:	6d ff 0f fb 	call 800060ac <IfxScuCcu_getSourceFrequency>
80006a92:	4c f0       	ld.w %d15,[%a15]0
80006a94:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a98:	4b 0f 41 f1 	itof %d15,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    return IfxScuCcu_getGtmFrequency();
}
80006a9c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006aa0:	00 90       	ret 

<<<<<<< HEAD
80006a6e <IfxScuCcu_setPll2ErayFrequency>:
=======
800069fe:	6d ff 0f fb 	call 8000601c <IfxScuCcu_getSourceFrequency>
80006a02:	4c f0       	ld.w %d15,[%a15]0
80006a04:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a08:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006a0c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a10:	00 90       	ret 

80006a12 <IfxScuCcu_setPll2ErayFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006aa2 <IfxScuCcu_setPll2ErayFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
<<<<<<< HEAD
<<<<<<< HEAD
80006a6e:	02 48       	mov %d8,%d4
=======
80006aa2:	02 48       	mov %d8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006aa4:	6d 00 a7 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
80006aa8:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006aaa:	6d ff 84 fa 	call 80005fb2 <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
<<<<<<< HEAD
80006a7a:	02 f4       	mov %d4,%d15
=======
80006a12:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006a14:	6d 00 a7 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
80006a18:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a1a:	6d ff 84 fa 	call 80005f22 <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a1e:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006aae:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006a7c:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a7e:	6d 00 9d 03 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
=======
80006a20:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a22:	6d 00 9d 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ab0:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006ab2:	6d 00 9d 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006a82:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a86:	91 30 00 ff 	movh.a %a15,61443
80006a8a:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006a8e:	48 02       	ld.w %d2,[%a15]0
=======
80006a26:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a2a:	91 30 00 ff 	movh.a %a15,61443
80006a2e:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006a32:	48 02       	ld.w %d2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ab6:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006aba:	91 30 00 ff 	movh.a %a15,61443
80006abe:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006ac2:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006a90:	7b 00 f8 33 	movh %d3,16256
=======
80006a34:	7b 00 f8 33 	movh %d3,16256
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ac4:	7b 00 f8 33 	movh %d3,16256
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
<<<<<<< HEAD
<<<<<<< HEAD
80006a94:	02 f4       	mov %d4,%d15
=======
80006a38:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ac8:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006a96:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a9a:	4b 08 71 81 	ftouz %d8,%d8
=======
80006aca:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006ace:	4b 08 71 81 	ftouz %d8,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006ad2:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006ad6:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
<<<<<<< HEAD
80006aa4:	6d 00 10 05 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
80006a3a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a3e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a42:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006a46:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006a48:	6d 00 10 05 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ad8:	6d 00 10 05 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006aa8:	6d ff 6b fa 	call 80005f7e <IfxScuCcu_getPllErayVcoFrequency>
80006aac:	4c f0       	ld.w %d15,[%a15]0
80006aae:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006ab2:	c2 1f       	add %d15,1
80006ab4:	4b 0f 41 f1 	itof %d15,%d15
=======
80006adc:	6d ff 6b fa 	call 80005fb2 <IfxScuCcu_getPllErayVcoFrequency>
80006ae0:	4c f0       	ld.w %d15,[%a15]0
80006ae2:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006ae6:	c2 1f       	add %d15,1
80006ae8:	4b 0f 41 f1 	itof %d15,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006aec:	4b f2 51 20 	div.f %d2,%d2,%d15
80006af0:	00 90       	ret 

<<<<<<< HEAD
80006abe <IfxScuCcu_setPll2Frequency>:
=======
80006a4c:	6d ff 6b fa 	call 80005f22 <IfxScuCcu_getPllErayVcoFrequency>
80006a50:	4c f0       	ld.w %d15,[%a15]0
80006a52:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006a56:	c2 1f       	add %d15,1
80006a58:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006a5c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a60:	00 90       	ret 

80006a62 <IfxScuCcu_setPll2Frequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006af2 <IfxScuCcu_setPll2Frequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
<<<<<<< HEAD
<<<<<<< HEAD
80006abe:	02 48       	mov %d8,%d4
=======
80006af2:	02 48       	mov %d8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006af4:	6d 00 7f 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
80006af8:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006afa:	6d ff b7 fa 	call 80006068 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
80006aca:	02 f4       	mov %d4,%d15
=======
80006a62:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006a64:	6d 00 7f 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
80006a68:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006a6a:	6d ff b7 fa 	call 80005fd8 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a6e:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006afe:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006acc:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006ace:	6d 00 75 03 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
=======
80006a70:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006a72:	6d 00 75 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b00:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006b02:	6d 00 75 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006ad2:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006ad6:	91 30 00 ff 	movh.a %a15,61443
80006ada:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006ade:	48 02       	ld.w %d2,[%a15]0
=======
80006a76:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006a7a:	91 30 00 ff 	movh.a %a15,61443
80006a7e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006a82:	48 02       	ld.w %d2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b06:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006b0a:	91 30 00 ff 	movh.a %a15,61443
80006b0e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006b12:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006ae0:	7b 00 f8 33 	movh %d3,16256
=======
80006a84:	7b 00 f8 33 	movh %d3,16256
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b14:	7b 00 f8 33 	movh %d3,16256
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006ae4:	02 f4       	mov %d4,%d15
=======
80006a88:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b18:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006ae6:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006aea:	4b 08 71 81 	ftouz %d8,%d8
=======
80006b1a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006b1e:	4b 08 71 81 	ftouz %d8,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006b22:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006b26:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
80006af4:	6d 00 e8 04 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
80006a8a:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a8e:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006a92:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006a96:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006a98:	6d 00 e8 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b28:	6d 00 e8 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
<<<<<<< HEAD
<<<<<<< HEAD
80006af8:	6d ff 9e fa 	call 80006034 <IfxScuCcu_getPllVcoFrequency>
80006afc:	4c f0       	ld.w %d15,[%a15]0
80006afe:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006b02:	c2 1f       	add %d15,1
80006b04:	4b 0f 41 f1 	itof %d15,%d15
=======
80006b2c:	6d ff 9e fa 	call 80006068 <IfxScuCcu_getPllVcoFrequency>
80006b30:	4c f0       	ld.w %d15,[%a15]0
80006b32:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006b36:	c2 1f       	add %d15,1
80006b38:	4b 0f 41 f1 	itof %d15,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    return IfxScuCcu_getPll2Frequency();
}
80006b3c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b40:	00 90       	ret 

<<<<<<< HEAD
80006b0e <IfxScuCcu_setSpbFrequency>:
=======
80006a9c:	6d ff 9e fa 	call 80005fd8 <IfxScuCcu_getPllVcoFrequency>
80006aa0:	4c f0       	ld.w %d15,[%a15]0
80006aa2:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006aa6:	c2 1f       	add %d15,1
80006aa8:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
80006aac:	4b f2 51 20 	div.f %d2,%d2,%d15
80006ab0:	00 90       	ret 

80006ab2 <IfxScuCcu_setSpbFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b42 <IfxScuCcu_setSpbFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
<<<<<<< HEAD
<<<<<<< HEAD
80006b0e:	02 4f       	mov %d15,%d4
=======
80006ab2:	02 4f       	mov %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b42:	02 4f       	mov %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
<<<<<<< HEAD
<<<<<<< HEAD
80006b10:	6d ff b4 fa 	call 80006078 <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006b14:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b18:	82 24       	mov %d4,2
80006b1a:	4b 02 71 21 	ftouz %d2,%d2
80006b1e:	0b 42 b0 41 	max.u %d4,%d2,%d4
=======
80006ab4:	6d ff b4 fa 	call 8000601c <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006ab8:	4b f2 51 20 	div.f %d2,%d2,%d15
80006abc:	82 24       	mov %d4,2
80006abe:	4b 02 71 21 	ftouz %d2,%d2
80006ac2:	0b 42 b0 41 	max.u %d4,%d2,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b44:	6d ff b4 fa 	call 800060ac <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006b48:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b4c:	82 24       	mov %d4,2
80006b4e:	4b 02 71 21 	ftouz %d2,%d2
80006b52:	0b 42 b0 41 	max.u %d4,%d2,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
<<<<<<< HEAD
<<<<<<< HEAD
80006b22:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006b26:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
=======
80006ac6:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006aca:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b56:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006b5a:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
<<<<<<< HEAD
<<<<<<< HEAD
80006b2a:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006b2e:	8f 14 c0 f1 	andn %d15,%d4,1
80006b32:	02 a4       	mov %d4,%d10
80006b34:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006b38:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
=======
80006ace:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006ad2:	8f 14 c0 f1 	andn %d15,%d4,1
80006ad6:	02 a4       	mov %d4,%d10
80006ad8:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006adc:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b5e:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006b62:	8f 14 c0 f1 	andn %d15,%d4,1
80006b66:	02 a4       	mov %d4,%d10
80006b68:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006b6c:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006b3c:	6d 00 23 04 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
80006b40:	02 28       	mov %d8,%d2
=======
80006b70:	6d 00 23 04 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
80006b74:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006b76:	6d 00 3e 04 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
<<<<<<< HEAD
80006b46:	02 84       	mov %d4,%d8
=======
80006ae0:	6d 00 23 04 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
80006ae4:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006ae6:	6d 00 3e 04 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006aea:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b7a:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006b48:	02 29       	mov %d9,%d2
=======
80006b7c:	02 29       	mov %d9,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b7e:	6d 00 1c 03 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b82:	91 30 00 ff 	movh.a %a15,61443
80006b86:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b8a:	48 02       	ld.w %d2,[%a15]0
80006b8c:	3b 00 3e f0 	mov %d15,992
80006b90:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
<<<<<<< HEAD
80006b5e:	02 84       	mov %d4,%d8
=======
80006aec:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006aee:	6d 00 1c 03 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006af2:	91 30 00 ff 	movh.a %a15,61443
80006af6:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006afa:	48 02       	ld.w %d2,[%a15]0
80006afc:	3b 00 3e f0 	mov %d15,992
80006b00:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b02:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006b92:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
<<<<<<< HEAD
<<<<<<< HEAD
80006b60:	68 0f       	st.w [%a15]0,%d15
=======
80006b94:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b96:	6d 00 45 04 	call 80007420 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006b9a:	02 94       	mov %d4,%d9
80006b9c:	6d 00 28 03 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006ba0:	91 30 00 2f 	movh.a %a2,61443
80006ba4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ba8:	4c 20       	ld.w %d15,[%a2]0
80006baa:	91 30 00 ff 	movh.a %a15,61443
80006bae:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bb2:	bf 0f fb 7f 	jlt %d15,0,80006ba8 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
<<<<<<< HEAD
80006b82:	4c f0       	ld.w %d15,[%a15]0
=======
80006b04:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b06:	6d 00 45 04 	call 80007390 <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006b0a:	02 94       	mov %d4,%d9
80006b0c:	6d 00 28 03 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b10:	91 30 00 2f 	movh.a %a2,61443
80006b14:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b18:	4c 20       	ld.w %d15,[%a2]0
80006b1a:	91 30 00 ff 	movh.a %a15,61443
80006b1e:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b22:	bf 0f fb 7f 	jlt %d15,0,80006b18 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006b26:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006bb6:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
<<<<<<< HEAD
<<<<<<< HEAD
80006b84:	02 94       	mov %d4,%d9
=======
80006b28:	02 94       	mov %d4,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006bb8:	02 94       	mov %d4,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
<<<<<<< HEAD
<<<<<<< HEAD
80006b86:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
=======
80006bba:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ccucon0.B.UP     = 1;
80006bbe:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006bc2:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bc4:	6d 00 9a 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006bc8:	02 84       	mov %d4,%d8
80006bca:	6d 00 f6 02 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006bce:	91 30 00 ff 	movh.a %a15,61443
80006bd2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006bd6:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
<<<<<<< HEAD
80006ba4:	02 84       	mov %d4,%d8
=======
80006b2a:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006b2e:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006b32:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b34:	6d 00 9a 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b38:	02 84       	mov %d4,%d8
80006b3a:	6d 00 f6 02 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b3e:	91 30 00 ff 	movh.a %a15,61443
80006b42:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b46:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b48:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006bd8:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
<<<<<<< HEAD
<<<<<<< HEAD
80006ba6:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006baa:	68 0f       	st.w [%a15]0,%d15
=======
80006bda:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006bde:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006be0:	6d 00 20 04 	call 80007420 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006be4:	91 30 00 ff 	movh.a %a15,61443
80006be8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bec:	4c f0       	ld.w %d15,[%a15]0
80006bee:	bf 0f ff 7f 	jlt %d15,0,80006bec <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006bf2:	1d ff 1e fb 	j 8000622e <IfxScuCcu_getSpbFrequency>

<<<<<<< HEAD
80006bc2 <IfxScuCcu_setSriFrequency>:
=======
80006b4a:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006b4e:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b50:	6d 00 20 04 	call 80007390 <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b54:	91 30 00 ff 	movh.a %a15,61443
80006b58:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b5c:	4c f0       	ld.w %d15,[%a15]0
80006b5e:	bf 0f ff 7f 	jlt %d15,0,80006b5c <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006b62:	1d ff 1e fb 	j 8000619e <IfxScuCcu_getSpbFrequency>

80006b66 <IfxScuCcu_setSriFrequency>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006bf6 <IfxScuCcu_setSriFrequency>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
<<<<<<< HEAD
<<<<<<< HEAD
80006bc2:	02 4f       	mov %d15,%d4
=======
80006bf6:	02 4f       	mov %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006bf8:	6d ff 5a fa 	call 800060ac <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
<<<<<<< HEAD
80006bc8:	4b f2 51 20 	div.f %d2,%d2,%d15
80006bcc:	4b 02 31 31 	ftoiz %d3,%d2
80006bd0:	4b 03 41 f1 	itof %d15,%d3
80006bd4:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006bd8:	7b 00 f0 f3 	movh %d15,16128
80006bdc:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006be0:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006be4:	82 12       	mov %d2,1
80006be6:	42 3f       	add %d15,%d3
80006be8:	0b 2f b0 f1 	max.u %d15,%d15,%d2
=======
80006b66:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006b68:	6d ff 5a fa 	call 8000601c <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006b6c:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b70:	4b 02 31 31 	ftoiz %d3,%d2
80006b74:	4b 03 41 f1 	itof %d15,%d3
80006b78:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006b7c:	7b 00 f0 f3 	movh %d15,16128
80006b80:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006b84:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006b88:	82 12       	mov %d2,1
80006b8a:	42 3f       	add %d15,%d3
80006b8c:	0b 2f b0 f1 	max.u %d15,%d15,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006bfc:	4b f2 51 20 	div.f %d2,%d2,%d15
80006c00:	4b 02 31 31 	ftoiz %d3,%d2
80006c04:	4b 03 41 f1 	itof %d15,%d3
80006c08:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006c0c:	7b 00 f0 f3 	movh %d15,16128
80006c10:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006c14:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006c18:	82 12       	mov %d2,1
80006c1a:	42 3f       	add %d15,%d3
80006c1c:	0b 2f b0 f1 	max.u %d15,%d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
<<<<<<< HEAD
<<<<<<< HEAD
80006bec:	8b ef 00 42 	eq %d4,%d15,14
=======
80006b90:	8b ef 00 42 	eq %d4,%d15,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c20:	8b ef 00 42 	eq %d4,%d15,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
<<<<<<< HEAD
<<<<<<< HEAD
80006bf0:	92 93       	add %d3,%d15,-7
=======
80006b94:	92 93       	add %d3,%d15,-7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c24:	92 93       	add %d3,%d15,-7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
<<<<<<< HEAD
<<<<<<< HEAD
80006bf2:	ab cf a0 94 	seln %d9,%d4,%d15,12
=======
80006b96:	ab cf a0 94 	seln %d9,%d4,%d15,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c26:	ab cf a0 94 	seln %d9,%d4,%d15,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
<<<<<<< HEAD
<<<<<<< HEAD
80006bf6:	8f 1f c0 21 	andn %d2,%d15,1
80006bfa:	02 9f       	mov %d15,%d9
80006bfc:	8b 73 a0 92 	ge.u %d9,%d3,7
80006c00:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
=======
80006b9a:	8f 1f c0 21 	andn %d2,%d15,1
80006b9e:	02 9f       	mov %d15,%d9
80006ba0:	8b 73 a0 92 	ge.u %d9,%d3,7
80006ba4:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c2a:	8f 1f c0 21 	andn %d2,%d15,1
80006c2e:	02 9f       	mov %d15,%d9
80006c30:	8b 73 a0 92 	ge.u %d9,%d3,7
80006c34:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006c04:	6d 00 dd 03 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c08:	02 24       	mov %d4,%d2
=======
80006ba8:	6d 00 dd 03 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bac:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c38:	6d 00 dd 03 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c3c:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006c0a:	02 28       	mov %d8,%d2
=======
80006c3e:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c40:	6d 00 d6 02 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c44:	91 30 00 2f 	movh.a %a2,61443
80006c48:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c4c:	4c 20       	ld.w %d15,[%a2]0
80006c4e:	91 30 00 ff 	movh.a %a15,61443
80006c52:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c56:	bf 0f fb 7f 	jlt %d15,0,80006c4c <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
<<<<<<< HEAD
80006c26:	4c f0       	ld.w %d15,[%a15]0
=======
80006bae:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006bb0:	6d 00 d6 02 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bb4:	91 30 00 2f 	movh.a %a2,61443
80006bb8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bbc:	4c 20       	ld.w %d15,[%a2]0
80006bbe:	91 30 00 ff 	movh.a %a15,61443
80006bc2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bc6:	bf 0f fb 7f 	jlt %d15,0,80006bbc <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006bca:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c5a:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
<<<<<<< HEAD
<<<<<<< HEAD
80006c28:	02 84       	mov %d4,%d8
=======
80006bcc:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c5c:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
<<<<<<< HEAD
<<<<<<< HEAD
80006c2a:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
=======
80006c5e:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ccucon0.B.UP     = 1;
80006c62:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006c66:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006c68:	6d 00 48 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c6c:	4c f0       	ld.w %d15,[%a15]0
80006c6e:	bf 0f ff 7f 	jlt %d15,0,80006c6c <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006c72:	1d ff 3f fb 	j 800062f0 <IfxScuCcu_getSriFrequency>

<<<<<<< HEAD
80006c42 <IfxScuCcu_switchToBackupClock>:
=======
80006bce:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006bd2:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006bd6:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006bd8:	6d 00 48 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bdc:	4c f0       	ld.w %d15,[%a15]0
80006bde:	bf 0f ff 7f 	jlt %d15,0,80006bdc <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006be2:	1d ff 3f fb 	j 80006260 <IfxScuCcu_getSriFrequency>

80006be6 <IfxScuCcu_switchToBackupClock>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c76 <IfxScuCcu_switchToBackupClock>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
<<<<<<< HEAD
<<<<<<< HEAD
80006c42:	91 30 00 ff 	movh.a %a15,61443
80006c46:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c4a:	4c f0       	ld.w %d15,[%a15]0
80006c4c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006c50:	df 0f 81 00 	jeq %d15,0,80006d52 <IfxScuCcu_switchToBackupClock+0x110>
80006c54:	40 4f       	mov.aa %a15,%a4
=======
80006be6:	91 30 00 ff 	movh.a %a15,61443
80006bea:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bee:	4c f0       	ld.w %d15,[%a15]0
80006bf0:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006bf4:	df 0f 81 00 	jeq %d15,0,80006cf6 <IfxScuCcu_switchToBackupClock+0x110>
80006bf8:	40 4f       	mov.aa %a15,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c76:	91 30 00 ff 	movh.a %a15,61443
80006c7a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c7e:	4c f0       	ld.w %d15,[%a15]0
80006c80:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006c84:	df 0f 81 00 	jeq %d15,0,80006d86 <IfxScuCcu_switchToBackupClock+0x110>
80006c88:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006c56:	6d 00 b4 03 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
80006c5a:	02 29       	mov %d9,%d2
=======
80006c8a:	6d 00 b4 03 	call 800073f2 <IfxScuWdt_getSafetyWatchdogPassword>
80006c8e:	02 29       	mov %d9,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c90:	6d 00 93 03 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
<<<<<<< HEAD
80006c60:	0c f0       	ld.bu %d15,[%a15]0
=======
80006bfa:	6d 00 b4 03 	call 80007362 <IfxScuWdt_getSafetyWatchdogPassword>
80006bfe:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c00:	6d 00 93 03 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c04:	0c f0       	ld.bu %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c94:	0c f0       	ld.bu %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80006c62:	02 28       	mov %d8,%d2
80006c64:	53 cf 20 20 	mul %d2,%d15,12
=======
80006c06:	02 28       	mov %d8,%d2
80006c08:	53 cf 20 20 	mul %d2,%d15,12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c96:	02 28       	mov %d8,%d2
80006c98:	53 cf 20 20 	mul %d2,%d15,12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
80006c68:	91 30 00 ef 	movh.a %a14,61443
=======
80006c0c:	91 30 00 ef 	movh.a %a14,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006c9c:	91 30 00 ef 	movh.a %a14,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
80006c6c:	91 30 00 df 	movh.a %a13,61443
80006c70:	60 22       	mov.a %a2,%d2
=======
80006c10:	91 30 00 df 	movh.a %a13,61443
80006c14:	60 22       	mov.a %a2,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ca0:	91 30 00 df 	movh.a %a13,61443
80006ca4:	60 22       	mov.a %a2,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
<<<<<<< HEAD
<<<<<<< HEAD
80006c72:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006c76:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
=======
80006c16:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006c1a:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ca6:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006caa:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
80006c7a:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
=======
80006c1e:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cae:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
<<<<<<< HEAD
<<<<<<< HEAD
80006c7e:	6e 1b       	jz %d15,80006cb4 <IfxScuCcu_switchToBackupClock+0x72>
=======
80006cb2:	6e 1b       	jz %d15,80006ce8 <IfxScuCcu_switchToBackupClock+0x72>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006cb4:	02 94       	mov %d4,%d9
80006cb6:	6d 00 9b 02 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
<<<<<<< HEAD
80006c86:	54 e2       	ld.w %d2,[%a14]
80006c88:	6f 52 ff 7f 	jz.t %d2,5,80006c86 <IfxScuCcu_switchToBackupClock+0x44>
=======
80006c22:	6e 1b       	jz %d15,80006c58 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c24:	02 94       	mov %d4,%d9
80006c26:	6d 00 9b 02 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c2a:	54 e2       	ld.w %d2,[%a14]
80006c2c:	6f 52 ff 7f 	jz.t %d2,5,80006c2a <IfxScuCcu_switchToBackupClock+0x44>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cba:	54 e2       	ld.w %d2,[%a14]
80006cbc:	6f 52 ff 7f 	jz.t %d2,5,80006cba <IfxScuCcu_switchToBackupClock+0x44>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
80006c8c:	c8 12       	ld.a %a2,[%a15]4
80006c8e:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c90:	02 94       	mov %d4,%d9
=======
80006c30:	c8 12       	ld.a %a2,[%a15]4
80006c32:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c34:	02 94       	mov %d4,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cc0:	c8 12       	ld.a %a2,[%a15]4
80006cc2:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cc4:	02 94       	mov %d4,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
80006c92:	30 c2       	add.a %a2,%a12
80006c94:	14 22       	ld.bu %d2,[%a2]
=======
80006c36:	30 c2       	add.a %a2,%a12
80006c38:	14 22       	ld.bu %d2,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cc6:	30 c2       	add.a %a2,%a12
80006cc8:	14 22       	ld.bu %d2,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
<<<<<<< HEAD
<<<<<<< HEAD
80006c96:	c2 ff       	add %d15,-1
=======
80006c3a:	c2 ff       	add %d15,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cca:	c2 ff       	add %d15,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
<<<<<<< HEAD
<<<<<<< HEAD
80006c98:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006c9c:	74 d2       	st.w [%a13],%d2
=======
80006ccc:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006cd0:	74 d2       	st.w [%a13],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cd2:	6d 00 13 04 	call 800074f8 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
<<<<<<< HEAD
80006ca2:	c8 12       	ld.a %a2,[%a15]4
80006ca4:	30 c2       	add.a %a2,%a12
80006ca6:	19 24 04 00 	ld.w %d4,[%a2]4
80006caa:	6d ff f9 f9 	call 8000609c <IfxScuCcu_wait>
80006cae:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006cb2:	3c e6       	j 80006c7e <IfxScuCcu_switchToBackupClock+0x3c>
=======
80006c3c:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006c40:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c42:	6d 00 13 04 	call 80007468 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006c46:	c8 12       	ld.a %a2,[%a15]4
80006c48:	30 c2       	add.a %a2,%a12
80006c4a:	19 24 04 00 	ld.w %d4,[%a2]4
80006c4e:	6d ff f9 f9 	call 80006040 <IfxScuCcu_wait>
80006c52:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006c56:	3c e6       	j 80006c22 <IfxScuCcu_switchToBackupClock+0x3c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cd6:	c8 12       	ld.a %a2,[%a15]4
80006cd8:	30 c2       	add.a %a2,%a12
80006cda:	19 24 04 00 	ld.w %d4,[%a2]4
80006cde:	6d ff f9 f9 	call 800060d0 <IfxScuCcu_wait>
80006ce2:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006ce6:	3c e6       	j 80006cb2 <IfxScuCcu_switchToBackupClock+0x3c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006cb4:	02 84       	mov %d4,%d8
80006cb6:	6d 00 66 02 	call 80007182 <IfxScuWdt_clearCpuEndinit>
=======
80006ce8:	02 84       	mov %d4,%d8
80006cea:	6d 00 66 02 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006cee:	91 30 00 ff 	movh.a %a15,61443
80006cf2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006cf6:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006cf8:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
<<<<<<< HEAD
80006cc6:	02 84       	mov %d4,%d8
=======
80006c58:	02 84       	mov %d4,%d8
80006c5a:	6d 00 66 02 	call 80007126 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006c5e:	91 30 00 ff 	movh.a %a15,61443
80006c62:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006c66:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006c68:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c6a:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cfa:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80006cc8:	96 08       	or %d15,8
80006cca:	68 0f       	st.w [%a15]0,%d15
=======
80006c6c:	96 08       	or %d15,8
80006c6e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006cfc:	96 08       	or %d15,8
80006cfe:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
<<<<<<< HEAD
<<<<<<< HEAD
80006ccc:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cd0:	6d 00 8e 03 	call 800073ec <IfxScuWdt_setCpuEndinit>
=======
80006c70:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006c74:	6d 00 8e 03 	call 80007390 <IfxScuWdt_setCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006d00:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d04:	6d 00 8e 03 	call 80007420 <IfxScuWdt_setCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
<<<<<<< HEAD
80006cd4:	02 94       	mov %d4,%d9
80006cd6:	6d 00 71 02 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006cda:	91 30 00 2f 	movh.a %a2,61443
80006cde:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ce2:	4c 20       	ld.w %d15,[%a2]0
80006ce4:	91 30 00 ff 	movh.a %a15,61443
80006ce8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006cec:	bf 0f fb 7f 	jlt %d15,0,80006ce2 <IfxScuCcu_switchToBackupClock+0xa0>
=======
80006c78:	02 94       	mov %d4,%d9
80006c7a:	6d 00 71 02 	call 8000715c <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006c7e:	91 30 00 2f 	movh.a %a2,61443
80006c82:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c86:	4c 20       	ld.w %d15,[%a2]0
80006c88:	91 30 00 ff 	movh.a %a15,61443
80006c8c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c90:	bf 0f fb 7f 	jlt %d15,0,80006c86 <IfxScuCcu_switchToBackupClock+0xa0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006d08:	02 94       	mov %d4,%d9
80006d0a:	6d 00 71 02 	call 800071ec <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006d0e:	91 30 00 2f 	movh.a %a2,61443
80006d12:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006d16:	4c 20       	ld.w %d15,[%a2]0
80006d18:	91 30 00 ff 	movh.a %a15,61443
80006d1c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006d20:	bf 0f fb 7f 	jlt %d15,0,80006d16 <IfxScuCcu_switchToBackupClock+0xa0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
<<<<<<< HEAD
<<<<<<< HEAD
80006cf0:	4c f0       	ld.w %d15,[%a15]0
80006cf2:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006cf6:	68 0f       	st.w [%a15]0,%d15
=======
80006d24:	4c f0       	ld.w %d15,[%a15]0
80006d26:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006d2a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006d2c:	4c f0       	ld.w %d15,[%a15]0
80006d2e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006d32:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
<<<<<<< HEAD
80006d00:	4c f0       	ld.w %d15,[%a15]0
80006d02:	bf 0f ff 7f 	jlt %d15,0,80006d00 <IfxScuCcu_switchToBackupClock+0xbe>
=======
80006c94:	4c f0       	ld.w %d15,[%a15]0
80006c96:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006c9a:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006c9c:	4c f0       	ld.w %d15,[%a15]0
80006c9e:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006ca2:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006ca4:	4c f0       	ld.w %d15,[%a15]0
80006ca6:	bf 0f ff 7f 	jlt %d15,0,80006ca4 <IfxScuCcu_switchToBackupClock+0xbe>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006d34:	4c f0       	ld.w %d15,[%a15]0
80006d36:	bf 0f ff 7f 	jlt %d15,0,80006d34 <IfxScuCcu_switchToBackupClock+0xbe>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80006d06:	91 30 00 ff 	movh.a %a15,61443
80006d0a:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006d0e:	4c f0       	ld.w %d15,[%a15]0
=======
80006caa:	91 30 00 ff 	movh.a %a15,61443
80006cae:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006cb2:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
<<<<<<< HEAD
80006d10:	02 94       	mov %d4,%d9
=======
80006cb4:	02 94       	mov %d4,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
<<<<<<< HEAD
80006d12:	96 10       	or %d15,16
80006d14:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006d16:	4c f0       	ld.w %d15,[%a15]0
80006d18:	8f 0f c4 f1 	andn %d15,%d15,64
80006d1c:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d1e:	6d 00 d3 03 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
=======
80006cb6:	96 10       	or %d15,16
80006cb8:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006cba:	4c f0       	ld.w %d15,[%a15]0
80006cbc:	8f 0f c4 f1 	andn %d15,%d15,64
80006cc0:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006cc2:	6d 00 d3 03 	call 80007468 <IfxScuWdt_setSafetyEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
<<<<<<< HEAD
80006d22:	91 30 00 ff 	movh.a %a15,61443
80006d26:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
=======
80006cc6:	91 30 00 ff 	movh.a %a15,61443
80006cca:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
<<<<<<< HEAD
80006d2a:	02 84       	mov %d4,%d8
80006d2c:	6d 00 2b 02 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006d30:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d32:	8f 3a 00 20 	sh %d2,%d10,3
=======
80006cce:	02 84       	mov %d4,%d8
80006cd0:	6d 00 2b 02 	call 80007126 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006cd4:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cd6:	8f 3a 00 20 	sh %d2,%d10,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
<<<<<<< HEAD
80006d36:	96 08       	or %d15,8
80006d38:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
=======
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80006d3a:	91 30 00 ff 	movh.a %a15,61443
80006d3e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006d42:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d44:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006d46:	96 10       	or %d15,16
80006d48:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006d4a:	4c f0       	ld.w %d15,[%a15]0
80006d4c:	8f 0f c4 f1 	andn %d15,%d15,64
80006d50:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d52:	6d 00 d3 03 	call 800074f8 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d56:	91 30 00 ff 	movh.a %a15,61443
80006d5a:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006d5e:	02 84       	mov %d4,%d8
80006d60:	6d 00 2b 02 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006d64:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d66:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d6a:	96 08       	or %d15,8
80006d6c:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d6e:	91 30 00 ff 	movh.a %a15,61443
80006d72:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006d76:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
<<<<<<< HEAD
80006d44:	02 84       	mov %d4,%d8
=======
80006cda:	96 08       	or %d15,8
80006cdc:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006cde:	91 30 00 ff 	movh.a %a15,61443
80006ce2:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006ce6:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006ce8:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006d78:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
<<<<<<< HEAD
<<<<<<< HEAD
80006d46:	8f 8f c0 f1 	andn %d15,%d15,8
80006d4a:	a6 2f       	or %d15,%d2
80006d4c:	68 0f       	st.w [%a15]0,%d15
=======
80006d7a:	8f 8f c0 f1 	andn %d15,%d15,8
80006d7e:	a6 2f       	or %d15,%d2
80006d80:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d82:	1d 00 4f 03 	j 80007420 <IfxScuWdt_setCpuEndinit>
80006d86:	00 90       	ret 

<<<<<<< HEAD
80006d54 <IfxScuEru_clearAllEventFlags>:
=======
80006cea:	8f 8f c0 f1 	andn %d15,%d15,8
80006cee:	a6 2f       	or %d15,%d2
80006cf0:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cf2:	1d 00 4f 03 	j 80007390 <IfxScuWdt_setCpuEndinit>
80006cf6:	00 90       	ret 

80006cf8 <IfxScuEru_clearAllEventFlags>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006d88 <IfxScuEru_clearAllEventFlags>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
<<<<<<< HEAD
<<<<<<< HEAD
80006d54:	91 30 00 ff 	movh.a %a15,61443
80006d58:	7b f0 0f f0 	movh %d15,255
80006d5c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d60:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d64:	00 90       	ret 

80006d66 <IfxScuEru_clearEventFlag>:
=======
80006cf8:	91 30 00 ff 	movh.a %a15,61443
80006cfc:	7b f0 0f f0 	movh %d15,255
80006d00:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d04:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d08:	00 90       	ret 

80006d0a <IfxScuEru_clearEventFlag>:
=======
80006d88:	91 30 00 ff 	movh.a %a15,61443
80006d8c:	7b f0 0f f0 	movh %d15,255
80006d90:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d94:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d98:	00 90       	ret 

80006d9a <IfxScuEru_clearEventFlag>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
<<<<<<< HEAD
80006d0a:	1b 04 01 40 	addi %d4,%d4,16
80006d0e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006d10:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
<<<<<<< HEAD
80006d66:	1b 04 01 40 	addi %d4,%d4,16
80006d6a:	82 1f       	mov %d15,1
=======
80006d9a:	1b 04 01 40 	addi %d4,%d4,16
80006d9e:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    SCU_FMR.U = mask;
80006da0:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006da4:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006da8:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006dac:	68 0f       	st.w [%a15]0,%d15
80006dae:	00 90       	ret 

<<<<<<< HEAD
80006d7c <IfxScuEru_clearInputChannelConfiguration>:
=======
80006d14:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006d18:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006d1c:	68 0f       	st.w [%a15]0,%d15
80006d1e:	00 90       	ret 

80006d20 <IfxScuEru_clearInputChannelConfiguration>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006db0 <IfxScuEru_clearInputChannelConfiguration>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006d7c:	8f f4 1f f0 	sh %d15,%d4,-1
80006d80:	06 2f       	sh %d15,2
80006d82:	60 ff       	mov.a %a15,%d15
80006d84:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d88:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
80006d20:	8f f4 1f f0 	sh %d15,%d4,-1
80006d24:	06 2f       	sh %d15,2
80006d26:	60 ff       	mov.a %a15,%d15
80006d28:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d2c:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006db0:	8f f4 1f f0 	sh %d15,%d4,-1
80006db4:	06 2f       	sh %d15,2
80006db6:	60 ff       	mov.a %a15,%d15
80006db8:	d9 ff 00 06 	lea %a15,[%a15]24576
80006dbc:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006d8c:	19 ff 10 80 	ld.w %d15,[%a15]528
=======
80006d30:	19 ff 10 80 	ld.w %d15,[%a15]528
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006dc0:	19 ff 10 80 	ld.w %d15,[%a15]528
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006d90:	6f 04 05 00 	jz.t %d4,0,80006d9a <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d94:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d98:	3c 03       	j 80006d9e <IfxScuEru_clearInputChannelConfiguration+0x22>
=======
80006d34:	6f 04 05 00 	jz.t %d4,0,80006d3e <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d38:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d3c:	3c 03       	j 80006d42 <IfxScuEru_clearInputChannelConfiguration+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006dc4:	6f 04 05 00 	jz.t %d4,0,80006dce <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006dc8:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006dcc:	3c 03       	j 80006dd2 <IfxScuEru_clearInputChannelConfiguration+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006d9a:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d9e:	59 ff 10 80 	st.w [%a15]528,%d15
80006da2:	00 90       	ret 

80006da4 <IfxScuEru_clearOutputChannelConfiguration>:
=======
80006d3e:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d42:	59 ff 10 80 	st.w [%a15]528,%d15
80006d46:	00 90       	ret 

80006d48 <IfxScuEru_clearOutputChannelConfiguration>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006dce:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006dd2:	59 ff 10 80 	st.w [%a15]528,%d15
80006dd6:	00 90       	ret 

80006dd8 <IfxScuEru_clearOutputChannelConfiguration>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006da4:	8f f4 1f f0 	sh %d15,%d4,-1
80006da8:	06 2f       	sh %d15,2
80006daa:	60 ff       	mov.a %a15,%d15
80006dac:	d9 ff 00 06 	lea %a15,[%a15]24576
80006db0:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
80006d48:	8f f4 1f f0 	sh %d15,%d4,-1
80006d4c:	06 2f       	sh %d15,2
80006d4e:	60 ff       	mov.a %a15,%d15
80006d50:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d54:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006dd8:	8f f4 1f f0 	sh %d15,%d4,-1
80006ddc:	06 2f       	sh %d15,2
80006dde:	60 ff       	mov.a %a15,%d15
80006de0:	d9 ff 00 06 	lea %a15,[%a15]24576
80006de4:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006db4:	19 ff 2c 80 	ld.w %d15,[%a15]556
=======
80006d58:	19 ff 2c 80 	ld.w %d15,[%a15]556
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006de8:	19 ff 2c 80 	ld.w %d15,[%a15]556
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006db8:	6f 04 05 00 	jz.t %d4,0,80006dc2 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006dbc:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006dc0:	3c 03       	j 80006dc6 <IfxScuEru_clearOutputChannelConfiguration+0x22>
=======
80006d5c:	6f 04 05 00 	jz.t %d4,0,80006d66 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006d60:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d64:	3c 03       	j 80006d6a <IfxScuEru_clearOutputChannelConfiguration+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006dec:	6f 04 05 00 	jz.t %d4,0,80006df6 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006df0:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006df4:	3c 03       	j 80006dfa <IfxScuEru_clearOutputChannelConfiguration+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006dc2:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006dc6:	59 ff 2c 80 	st.w [%a15]556,%d15
80006dca:	00 90       	ret 

80006dcc <IfxScuEru_connectTrigger>:
=======
80006d66:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d6a:	59 ff 2c 80 	st.w [%a15]556,%d15
80006d6e:	00 90       	ret 

80006d70 <IfxScuEru_connectTrigger>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006df6:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006dfa:	59 ff 2c 80 	st.w [%a15]556,%d15
80006dfe:	00 90       	ret 

80006e00 <IfxScuEru_connectTrigger>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006dcc:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006d70:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e00:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
<<<<<<< HEAD
<<<<<<< HEAD
80006dd0:	91 30 00 ff 	movh.a %a15,61443
80006dd4:	1b 4f 08 f0 	addi %d15,%d15,132
80006dd8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ddc:	8f 75 00 51 	and %d5,%d5,7
80006de0:	90 ff       	addsc.a %a15,%a15,%d15,2
=======
80006d74:	91 30 00 ff 	movh.a %a15,61443
80006d78:	1b 4f 08 f0 	addi %d15,%d15,132
80006d7c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d80:	8f 75 00 51 	and %d5,%d5,7
80006d84:	90 ff       	addsc.a %a15,%a15,%d15,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e04:	91 30 00 ff 	movh.a %a15,61443
80006e08:	1b 4f 08 f0 	addi %d15,%d15,132
80006e0c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e10:	8f 75 00 51 	and %d5,%d5,7
80006e14:	90 ff       	addsc.a %a15,%a15,%d15,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006de2:	6f 04 08 00 	jz.t %d4,0,80006df2 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006de6:	4c f0       	ld.w %d15,[%a15]0
80006de8:	8f c5 01 50 	sh %d5,%d5,28
80006dec:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006df0:	3c 06       	j 80006dfc <IfxScuEru_connectTrigger+0x30>
=======
80006d86:	6f 04 08 00 	jz.t %d4,0,80006d96 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006d8a:	4c f0       	ld.w %d15,[%a15]0
80006d8c:	8f c5 01 50 	sh %d5,%d5,28
80006d90:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006d94:	3c 06       	j 80006da0 <IfxScuEru_connectTrigger+0x30>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e16:	6f 04 08 00 	jz.t %d4,0,80006e26 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006e1a:	4c f0       	ld.w %d15,[%a15]0
80006e1c:	8f c5 01 50 	sh %d5,%d5,28
80006e20:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006e24:	3c 06       	j 80006e30 <IfxScuEru_connectTrigger+0x30>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
<<<<<<< HEAD
<<<<<<< HEAD
80006df2:	4c f0       	ld.w %d15,[%a15]0
80006df4:	8f c5 00 50 	sh %d5,%d5,12
80006df8:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006dfc:	a6 f5       	or %d5,%d15
80006dfe:	68 05       	st.w [%a15]0,%d5
80006e00:	00 90       	ret 

80006e02 <IfxScuEru_disableAutoClear>:
=======
80006d96:	4c f0       	ld.w %d15,[%a15]0
80006d98:	8f c5 00 50 	sh %d5,%d5,12
80006d9c:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006da0:	a6 f5       	or %d5,%d15
80006da2:	68 05       	st.w [%a15]0,%d5
80006da4:	00 90       	ret 

80006da6 <IfxScuEru_disableAutoClear>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e26:	4c f0       	ld.w %d15,[%a15]0
80006e28:	8f c5 00 50 	sh %d5,%d5,12
80006e2c:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006e30:	a6 f5       	or %d5,%d15
80006e32:	68 05       	st.w [%a15]0,%d5
80006e34:	00 90       	ret 

80006e36 <IfxScuEru_disableAutoClear>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006e02:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006da6:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e36:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e06:	91 30 00 ff 	movh.a %a15,61443
80006e0a:	1b 4f 08 f0 	addi %d15,%d15,132
80006e0e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e12:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e14:	4c f0       	ld.w %d15,[%a15]0
=======
80006daa:	91 30 00 ff 	movh.a %a15,61443
80006dae:	1b 4f 08 f0 	addi %d15,%d15,132
80006db2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006db6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006db8:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e3a:	91 30 00 ff 	movh.a %a15,61443
80006e3e:	1b 4f 08 f0 	addi %d15,%d15,132
80006e42:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e46:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e48:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006e16:	6f 04 05 00 	jz.t %d4,0,80006e20 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e1a:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006e1e:	3c 03       	j 80006e24 <IfxScuEru_disableAutoClear+0x22>
=======
80006dba:	6f 04 05 00 	jz.t %d4,0,80006dc4 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006dbe:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006dc2:	3c 03       	j 80006dc8 <IfxScuEru_disableAutoClear+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e4a:	6f 04 05 00 	jz.t %d4,0,80006e54 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e4e:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006e52:	3c 03       	j 80006e58 <IfxScuEru_disableAutoClear+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e20:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006e24:	68 0f       	st.w [%a15]0,%d15
80006e26:	00 90       	ret 

80006e28 <IfxScuEru_disableFallingEdgeDetection>:
=======
80006dc4:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006dc8:	68 0f       	st.w [%a15]0,%d15
80006dca:	00 90       	ret 

80006dcc <IfxScuEru_disableFallingEdgeDetection>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e54:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006e58:	68 0f       	st.w [%a15]0,%d15
80006e5a:	00 90       	ret 

80006e5c <IfxScuEru_disableFallingEdgeDetection>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006e28:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006dcc:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e5c:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e2c:	91 30 00 ff 	movh.a %a15,61443
80006e30:	1b 4f 08 f0 	addi %d15,%d15,132
80006e34:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e38:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e3a:	4c f0       	ld.w %d15,[%a15]0
=======
80006dd0:	91 30 00 ff 	movh.a %a15,61443
80006dd4:	1b 4f 08 f0 	addi %d15,%d15,132
80006dd8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ddc:	90 ff       	addsc.a %a15,%a15,%d15,2
80006dde:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e60:	91 30 00 ff 	movh.a %a15,61443
80006e64:	1b 4f 08 f0 	addi %d15,%d15,132
80006e68:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e6c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e6e:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006e3c:	6f 04 05 00 	jz.t %d4,0,80006e46 <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e40:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006e44:	3c 03       	j 80006e4a <IfxScuEru_disableFallingEdgeDetection+0x22>
=======
80006de0:	6f 04 05 00 	jz.t %d4,0,80006dea <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006de4:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006de8:	3c 03       	j 80006dee <IfxScuEru_disableFallingEdgeDetection+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e70:	6f 04 05 00 	jz.t %d4,0,80006e7a <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e74:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006e78:	3c 03       	j 80006e7e <IfxScuEru_disableFallingEdgeDetection+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e46:	8f 0f d0 f1 	andn %d15,%d15,256
80006e4a:	68 0f       	st.w [%a15]0,%d15
80006e4c:	00 90       	ret 

80006e4e <IfxScuEru_disablePatternDetectionTrigger>:
=======
80006dea:	8f 0f d0 f1 	andn %d15,%d15,256
80006dee:	68 0f       	st.w [%a15]0,%d15
80006df0:	00 90       	ret 

80006df2 <IfxScuEru_disablePatternDetectionTrigger>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e7a:	8f 0f d0 f1 	andn %d15,%d15,256
80006e7e:	68 0f       	st.w [%a15]0,%d15
80006e80:	00 90       	ret 

80006e82 <IfxScuEru_disablePatternDetectionTrigger>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006e4e:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006df2:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e82:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e52:	91 30 00 ff 	movh.a %a15,61443
80006e56:	1b bf 08 f0 	addi %d15,%d15,139
80006e5a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e5e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e60:	4c f0       	ld.w %d15,[%a15]0
=======
80006df6:	91 30 00 ff 	movh.a %a15,61443
80006dfa:	1b bf 08 f0 	addi %d15,%d15,139
80006dfe:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e02:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e04:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e86:	91 30 00 ff 	movh.a %a15,61443
80006e8a:	1b bf 08 f0 	addi %d15,%d15,139
80006e8e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e92:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e94:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006e62:	6f 04 05 00 	jz.t %d4,0,80006e6c <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e66:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e6a:	3c 03       	j 80006e70 <IfxScuEru_disablePatternDetectionTrigger+0x22>
=======
80006e06:	6f 04 05 00 	jz.t %d4,0,80006e10 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e0a:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e0e:	3c 03       	j 80006e14 <IfxScuEru_disablePatternDetectionTrigger+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006e96:	6f 04 05 00 	jz.t %d4,0,80006ea0 <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e9a:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e9e:	3c 03       	j 80006ea4 <IfxScuEru_disablePatternDetectionTrigger+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e6c:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006e70:	68 0f       	st.w [%a15]0,%d15
80006e72:	00 90       	ret 

80006e74 <IfxScuEru_disableRisingEdgeDetection>:
=======
80006e10:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006e14:	68 0f       	st.w [%a15]0,%d15
80006e16:	00 90       	ret 

80006e18 <IfxScuEru_disableRisingEdgeDetection>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ea0:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006ea4:	68 0f       	st.w [%a15]0,%d15
80006ea6:	00 90       	ret 

80006ea8 <IfxScuEru_disableRisingEdgeDetection>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006e74:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006e18:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ea8:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e78:	91 30 00 ff 	movh.a %a15,61443
80006e7c:	1b 4f 08 f0 	addi %d15,%d15,132
80006e80:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e84:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e86:	4c f0       	ld.w %d15,[%a15]0
=======
80006e1c:	91 30 00 ff 	movh.a %a15,61443
80006e20:	1b 4f 08 f0 	addi %d15,%d15,132
80006e24:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e28:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e2a:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006eac:	91 30 00 ff 	movh.a %a15,61443
80006eb0:	1b 4f 08 f0 	addi %d15,%d15,132
80006eb4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006eb8:	90 ff       	addsc.a %a15,%a15,%d15,2
80006eba:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006e88:	6f 04 05 00 	jz.t %d4,0,80006e92 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e8c:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006e90:	3c 03       	j 80006e96 <IfxScuEru_disableRisingEdgeDetection+0x22>
=======
80006e2c:	6f 04 05 00 	jz.t %d4,0,80006e36 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e30:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006e34:	3c 03       	j 80006e3a <IfxScuEru_disableRisingEdgeDetection+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ebc:	6f 04 05 00 	jz.t %d4,0,80006ec6 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006ec0:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006ec4:	3c 03       	j 80006eca <IfxScuEru_disableRisingEdgeDetection+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e92:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006e96:	68 0f       	st.w [%a15]0,%d15
80006e98:	00 90       	ret 

80006e9a <IfxScuEru_disableTriggerPulse>:
=======
80006e36:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006e3a:	68 0f       	st.w [%a15]0,%d15
80006e3c:	00 90       	ret 

80006e3e <IfxScuEru_disableTriggerPulse>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ec6:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006eca:	68 0f       	st.w [%a15]0,%d15
80006ecc:	00 90       	ret 

80006ece <IfxScuEru_disableTriggerPulse>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006e9a:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006e3e:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ece:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006e9e:	91 30 00 ff 	movh.a %a15,61443
80006ea2:	1b 4f 08 f0 	addi %d15,%d15,132
80006ea6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006eaa:	90 ff       	addsc.a %a15,%a15,%d15,2
80006eac:	4c f0       	ld.w %d15,[%a15]0
=======
80006e42:	91 30 00 ff 	movh.a %a15,61443
80006e46:	1b 4f 08 f0 	addi %d15,%d15,132
80006e4a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e4e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e50:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ed2:	91 30 00 ff 	movh.a %a15,61443
80006ed6:	1b 4f 08 f0 	addi %d15,%d15,132
80006eda:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ede:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ee0:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006eae:	6f 04 05 00 	jz.t %d4,0,80006eb8 <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006eb2:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006eb6:	3c 03       	j 80006ebc <IfxScuEru_disableTriggerPulse+0x22>
=======
80006e52:	6f 04 05 00 	jz.t %d4,0,80006e5c <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e56:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006e5a:	3c 03       	j 80006e60 <IfxScuEru_disableTriggerPulse+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ee2:	6f 04 05 00 	jz.t %d4,0,80006eec <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006ee6:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006eea:	3c 03       	j 80006ef0 <IfxScuEru_disableTriggerPulse+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006eb8:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006ebc:	68 0f       	st.w [%a15]0,%d15
80006ebe:	00 90       	ret 

80006ec0 <IfxScuEru_enableAutoClear>:
=======
80006e5c:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006e60:	68 0f       	st.w [%a15]0,%d15
80006e62:	00 90       	ret 

80006e64 <IfxScuEru_enableAutoClear>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006eec:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006ef0:	68 0f       	st.w [%a15]0,%d15
80006ef2:	00 90       	ret 

80006ef4 <IfxScuEru_enableAutoClear>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006ec0:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006e64:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ef4:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006ec4:	91 30 00 ff 	movh.a %a15,61443
80006ec8:	1b 4f 08 f0 	addi %d15,%d15,132
80006ecc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ed0:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ed2:	4c f0       	ld.w %d15,[%a15]0
=======
80006e68:	91 30 00 ff 	movh.a %a15,61443
80006e6c:	1b 4f 08 f0 	addi %d15,%d15,132
80006e70:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e74:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e76:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ef8:	91 30 00 ff 	movh.a %a15,61443
80006efc:	1b 4f 08 f0 	addi %d15,%d15,132
80006f00:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f04:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f06:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006ed4:	6f 04 05 00 	jz.t %d4,0,80006ede <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006ed8:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006edc:	3c 03       	j 80006ee2 <IfxScuEru_enableAutoClear+0x22>
=======
80006e78:	6f 04 05 00 	jz.t %d4,0,80006e82 <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006e7c:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006e80:	3c 03       	j 80006e86 <IfxScuEru_enableAutoClear+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f08:	6f 04 05 00 	jz.t %d4,0,80006f12 <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006f0c:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006f10:	3c 03       	j 80006f16 <IfxScuEru_enableAutoClear+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006ede:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006ee2:	68 0f       	st.w [%a15]0,%d15
80006ee4:	00 90       	ret 

80006ee6 <IfxScuEru_enableFallingEdgeDetection>:
=======
80006e82:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006e86:	68 0f       	st.w [%a15]0,%d15
80006e88:	00 90       	ret 

80006e8a <IfxScuEru_enableFallingEdgeDetection>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f12:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006f16:	68 0f       	st.w [%a15]0,%d15
80006f18:	00 90       	ret 

80006f1a <IfxScuEru_enableFallingEdgeDetection>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006ee6:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006e8a:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f1a:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006eea:	91 30 00 ff 	movh.a %a15,61443
80006eee:	1b 4f 08 f0 	addi %d15,%d15,132
80006ef2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ef6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ef8:	4c f0       	ld.w %d15,[%a15]0
=======
80006e8e:	91 30 00 ff 	movh.a %a15,61443
80006e92:	1b 4f 08 f0 	addi %d15,%d15,132
80006e96:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e9a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e9c:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f1e:	91 30 00 ff 	movh.a %a15,61443
80006f22:	1b 4f 08 f0 	addi %d15,%d15,132
80006f26:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f2a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f2c:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006efa:	6f 04 05 00 	jz.t %d4,0,80006f04 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006efe:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006f02:	3c 03       	j 80006f08 <IfxScuEru_enableFallingEdgeDetection+0x22>
=======
80006e9e:	6f 04 05 00 	jz.t %d4,0,80006ea8 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006ea2:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006ea6:	3c 03       	j 80006eac <IfxScuEru_enableFallingEdgeDetection+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f2e:	6f 04 05 00 	jz.t %d4,0,80006f38 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006f32:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006f36:	3c 03       	j 80006f3c <IfxScuEru_enableFallingEdgeDetection+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f04:	8f 0f 50 f1 	or %d15,%d15,256
80006f08:	68 0f       	st.w [%a15]0,%d15
80006f0a:	00 90       	ret 

80006f0c <IfxScuEru_enablePatternDetectionTrigger>:
=======
80006ea8:	8f 0f 50 f1 	or %d15,%d15,256
80006eac:	68 0f       	st.w [%a15]0,%d15
80006eae:	00 90       	ret 

80006eb0 <IfxScuEru_enablePatternDetectionTrigger>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f38:	8f 0f 50 f1 	or %d15,%d15,256
80006f3c:	68 0f       	st.w [%a15]0,%d15
80006f3e:	00 90       	ret 

80006f40 <IfxScuEru_enablePatternDetectionTrigger>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006f0c:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006eb0:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f40:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f10:	91 30 00 ff 	movh.a %a15,61443
80006f14:	1b bf 08 f0 	addi %d15,%d15,139
80006f18:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f1c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f1e:	4c f0       	ld.w %d15,[%a15]0
=======
80006eb4:	91 30 00 ff 	movh.a %a15,61443
80006eb8:	1b bf 08 f0 	addi %d15,%d15,139
80006ebc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ec0:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ec2:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f44:	91 30 00 ff 	movh.a %a15,61443
80006f48:	1b bf 08 f0 	addi %d15,%d15,139
80006f4c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f50:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f52:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006f20:	6f 04 05 00 	jz.t %d4,0,80006f2a <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f24:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006f28:	3c 03       	j 80006f2e <IfxScuEru_enablePatternDetectionTrigger+0x22>
=======
80006ec4:	6f 04 05 00 	jz.t %d4,0,80006ece <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006ec8:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006ecc:	3c 03       	j 80006ed2 <IfxScuEru_enablePatternDetectionTrigger+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f54:	6f 04 05 00 	jz.t %d4,0,80006f5e <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f58:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006f5c:	3c 03       	j 80006f62 <IfxScuEru_enablePatternDetectionTrigger+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f2a:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006f2e:	68 0f       	st.w [%a15]0,%d15
80006f30:	00 90       	ret 

80006f32 <IfxScuEru_enableRisingEdgeDetection>:
=======
80006ece:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006ed2:	68 0f       	st.w [%a15]0,%d15
80006ed4:	00 90       	ret 

80006ed6 <IfxScuEru_enableRisingEdgeDetection>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f5e:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006f62:	68 0f       	st.w [%a15]0,%d15
80006f64:	00 90       	ret 

80006f66 <IfxScuEru_enableRisingEdgeDetection>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006f32:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006ed6:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f66:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f36:	91 30 00 ff 	movh.a %a15,61443
80006f3a:	1b 4f 08 f0 	addi %d15,%d15,132
80006f3e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f42:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f44:	4c f0       	ld.w %d15,[%a15]0
=======
80006eda:	91 30 00 ff 	movh.a %a15,61443
80006ede:	1b 4f 08 f0 	addi %d15,%d15,132
80006ee2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ee6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ee8:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f6a:	91 30 00 ff 	movh.a %a15,61443
80006f6e:	1b 4f 08 f0 	addi %d15,%d15,132
80006f72:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f76:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f78:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006f46:	6f 04 05 00 	jz.t %d4,0,80006f50 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f4a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006f4e:	3c 03       	j 80006f54 <IfxScuEru_enableRisingEdgeDetection+0x22>
=======
80006eea:	6f 04 05 00 	jz.t %d4,0,80006ef4 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006eee:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006ef2:	3c 03       	j 80006ef8 <IfxScuEru_enableRisingEdgeDetection+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f7a:	6f 04 05 00 	jz.t %d4,0,80006f84 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f7e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006f82:	3c 03       	j 80006f88 <IfxScuEru_enableRisingEdgeDetection+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f50:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006f54:	68 0f       	st.w [%a15]0,%d15
80006f56:	00 90       	ret 

80006f58 <IfxScuEru_enableTriggerPulse>:
=======
80006ef4:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006ef8:	68 0f       	st.w [%a15]0,%d15
80006efa:	00 90       	ret 

80006efc <IfxScuEru_enableTriggerPulse>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f84:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006f88:	68 0f       	st.w [%a15]0,%d15
80006f8a:	00 90       	ret 

80006f8c <IfxScuEru_enableTriggerPulse>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006f58:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006efc:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f8c:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f5c:	91 30 00 ff 	movh.a %a15,61443
80006f60:	1b 4f 08 f0 	addi %d15,%d15,132
80006f64:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f68:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f6a:	4c f0       	ld.w %d15,[%a15]0
=======
80006f00:	91 30 00 ff 	movh.a %a15,61443
80006f04:	1b 4f 08 f0 	addi %d15,%d15,132
80006f08:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f0c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f0e:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006f90:	91 30 00 ff 	movh.a %a15,61443
80006f94:	1b 4f 08 f0 	addi %d15,%d15,132
80006f98:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f9c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f9e:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006f6c:	6f 04 05 00 	jz.t %d4,0,80006f76 <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f70:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006f74:	3c 03       	j 80006f7a <IfxScuEru_enableTriggerPulse+0x22>
=======
80006f10:	6f 04 05 00 	jz.t %d4,0,80006f1a <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f14:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006f18:	3c 03       	j 80006f1e <IfxScuEru_enableTriggerPulse+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006fa0:	6f 04 05 00 	jz.t %d4,0,80006faa <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006fa4:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006fa8:	3c 03       	j 80006fae <IfxScuEru_enableTriggerPulse+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f76:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006f7a:	68 0f       	st.w [%a15]0,%d15
80006f7c:	00 90       	ret 

80006f7e <IfxScuEru_getAllEventFlagsStatus>:
=======
80006f1a:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006f1e:	68 0f       	st.w [%a15]0,%d15
80006f20:	00 90       	ret 

80006f22 <IfxScuEru_getAllEventFlagsStatus>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006faa:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006fae:	68 0f       	st.w [%a15]0,%d15
80006fb0:	00 90       	ret 

80006fb2 <IfxScuEru_getAllEventFlagsStatus>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
<<<<<<< HEAD
<<<<<<< HEAD
80006f7e:	91 30 00 ff 	movh.a %a15,61443
80006f82:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f86:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
=======
80006fb2:	91 30 00 ff 	movh.a %a15,61443
80006fb6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fba:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80006fbe:	00 90       	ret 

<<<<<<< HEAD
80006f8c <IfxScuEru_getEventFlagStatus>:
=======
80006f22:	91 30 00 ff 	movh.a %a15,61443
80006f26:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f2a:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f2e:	00 90       	ret 

80006f30 <IfxScuEru_getEventFlagStatus>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006fc0 <IfxScuEru_getEventFlagStatus>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006f8c:	91 30 00 ff 	movh.a %a15,61443
80006f90:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f94:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
=======
80006fc0:	91 30 00 ff 	movh.a %a15,61443
80006fc4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fc8:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80006fcc:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006fd0:	00 90       	ret 

<<<<<<< HEAD
80006f9e <IfxScuEru_getInputChannelConfiguration>:
=======
80006f30:	91 30 00 ff 	movh.a %a15,61443
80006f34:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f38:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f3c:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f40:	00 90       	ret 

80006f42 <IfxScuEru_getInputChannelConfiguration>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006fd2 <IfxScuEru_getInputChannelConfiguration>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006f9e:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006f42:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006fd2:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006fa2:	91 30 00 ff 	movh.a %a15,61443
80006fa6:	1b 4f 08 f0 	addi %d15,%d15,132
80006faa:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fae:	90 ff       	addsc.a %a15,%a15,%d15,2
80006fb0:	48 02       	ld.w %d2,[%a15]0
=======
80006f46:	91 30 00 ff 	movh.a %a15,61443
80006f4a:	1b 4f 08 f0 	addi %d15,%d15,132
80006f4e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f52:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f54:	48 02       	ld.w %d2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006fd6:	91 30 00 ff 	movh.a %a15,61443
80006fda:	1b 4f 08 f0 	addi %d15,%d15,132
80006fde:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fe2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006fe4:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006fb2:	6f 04 05 00 	jz.t %d4,0,80006fbc <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006fb6:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006fba:	00 90       	ret 
=======
80006f56:	6f 04 05 00 	jz.t %d4,0,80006f60 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006f5a:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f5e:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006fe6:	6f 04 05 00 	jz.t %d4,0,80006ff0 <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006fea:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006fee:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006fbc:	b7 02 10 28 	insert %d2,%d2,0,16,16
=======
80006f60:	b7 02 10 28 	insert %d2,%d2,0,16,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ff0:	b7 02 10 28 	insert %d2,%d2,0,16,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return status;
}
<<<<<<< HEAD
<<<<<<< HEAD
80006fc0:	00 90       	ret 

80006fc2 <IfxScuEru_getOutputChannelConfiguration>:
=======
80006f64:	00 90       	ret 

80006f66 <IfxScuEru_getOutputChannelConfiguration>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ff4:	00 90       	ret 

80006ff6 <IfxScuEru_getOutputChannelConfiguration>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80006fc2:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006f66:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ff6:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006fc6:	91 30 00 ff 	movh.a %a15,61443
80006fca:	1b bf 08 f0 	addi %d15,%d15,139
80006fce:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fd2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006fd4:	48 02       	ld.w %d2,[%a15]0
=======
80006f6a:	91 30 00 ff 	movh.a %a15,61443
80006f6e:	1b bf 08 f0 	addi %d15,%d15,139
80006f72:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f76:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f78:	48 02       	ld.w %d2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80006ffa:	91 30 00 ff 	movh.a %a15,61443
80006ffe:	1b bf 08 f0 	addi %d15,%d15,139
80007002:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007006:	90 ff       	addsc.a %a15,%a15,%d15,2
80007008:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
80006fd6:	6f 04 05 00 	jz.t %d4,0,80006fe0 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006fda:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006fde:	00 90       	ret 
=======
80006f7a:	6f 04 05 00 	jz.t %d4,0,80006f84 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006f7e:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006f82:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000700a:	6f 04 05 00 	jz.t %d4,0,80007014 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
8000700e:	b7 02 10 20 	insert %d2,%d2,0,0,16
80007012:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
<<<<<<< HEAD
<<<<<<< HEAD
80006fe0:	b7 02 10 28 	insert %d2,%d2,0,16,16
=======
80006f84:	b7 02 10 28 	insert %d2,%d2,0,16,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007014:	b7 02 10 28 	insert %d2,%d2,0,16,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return status;
}
<<<<<<< HEAD
<<<<<<< HEAD
80006fe4:	00 90       	ret 

80006fe6 <IfxScuEru_getPatternDetectionResult>:
=======
80006f88:	00 90       	ret 

80006f8a <IfxScuEru_getPatternDetectionResult>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007018:	00 90       	ret 

8000701a <IfxScuEru_getPatternDetectionResult>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80006fe6:	91 30 00 ff 	movh.a %a15,61443
80006fea:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fee:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
=======
8000701a:	91 30 00 ff 	movh.a %a15,61443
8000701e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007022:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80007026:	57 02 61 24 	extr.u %d2,%d2,%d4,1
8000702a:	00 90       	ret 

<<<<<<< HEAD
80006ff8 <IfxScuEru_getWholePatternDetectionResult>:
=======
80006f8a:	91 30 00 ff 	movh.a %a15,61443
80006f8e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f92:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006f96:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f9a:	00 90       	ret 

80006f9c <IfxScuEru_getWholePatternDetectionResult>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000702c <IfxScuEru_getWholePatternDetectionResult>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
<<<<<<< HEAD
<<<<<<< HEAD
80006ff8:	91 30 00 ff 	movh.a %a15,61443
80006ffc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007000:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
=======
8000702c:	91 30 00 ff 	movh.a %a15,61443
80007030:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007034:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80007038:	00 90       	ret 

<<<<<<< HEAD
80007006 <IfxScuEru_selectExternalInput>:
=======
80006f9c:	91 30 00 ff 	movh.a %a15,61443
80006fa0:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fa4:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006fa8:	00 90       	ret 

80006faa <IfxScuEru_selectExternalInput>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000703a <IfxScuEru_selectExternalInput>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80007006:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80006faa:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000703a:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
<<<<<<< HEAD
<<<<<<< HEAD
8000700a:	91 30 00 ff 	movh.a %a15,61443
8000700e:	1b 4f 08 f0 	addi %d15,%d15,132
80007012:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007016:	8f 75 00 51 	and %d5,%d5,7
8000701a:	90 ff       	addsc.a %a15,%a15,%d15,2
=======
80006fae:	91 30 00 ff 	movh.a %a15,61443
80006fb2:	1b 4f 08 f0 	addi %d15,%d15,132
80006fb6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fba:	8f 75 00 51 	and %d5,%d5,7
80006fbe:	90 ff       	addsc.a %a15,%a15,%d15,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000703e:	91 30 00 ff 	movh.a %a15,61443
80007042:	1b 4f 08 f0 	addi %d15,%d15,132
80007046:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
8000704a:	8f 75 00 51 	and %d5,%d5,7
8000704e:	90 ff       	addsc.a %a15,%a15,%d15,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
8000701c:	6f 04 08 00 	jz.t %d4,0,8000702c <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80007020:	4c f0       	ld.w %d15,[%a15]0
80007022:	8f 45 01 50 	sh %d5,%d5,20
80007026:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
8000702a:	3c 05       	j 80007034 <IfxScuEru_selectExternalInput+0x2e>
=======
80006fc0:	6f 04 08 00 	jz.t %d4,0,80006fd0 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006fc4:	4c f0       	ld.w %d15,[%a15]0
80006fc6:	8f 45 01 50 	sh %d5,%d5,20
80006fca:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
80006fce:	3c 05       	j 80006fd8 <IfxScuEru_selectExternalInput+0x2e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007050:	6f 04 08 00 	jz.t %d4,0,80007060 <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80007054:	4c f0       	ld.w %d15,[%a15]0
80007056:	8f 45 01 50 	sh %d5,%d5,20
8000705a:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
8000705e:	3c 05       	j 80007068 <IfxScuEru_selectExternalInput+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
<<<<<<< HEAD
<<<<<<< HEAD
8000702c:	4c f0       	ld.w %d15,[%a15]0
8000702e:	06 45       	sh %d5,4
80007030:	8f 0f c7 f1 	andn %d15,%d15,112
80007034:	a6 f5       	or %d5,%d15
80007036:	68 05       	st.w [%a15]0,%d5
80007038:	00 90       	ret 

8000703a <IfxScuEru_setEventFlag>:
=======
80006fd0:	4c f0       	ld.w %d15,[%a15]0
80006fd2:	06 45       	sh %d5,4
80006fd4:	8f 0f c7 f1 	andn %d15,%d15,112
80006fd8:	a6 f5       	or %d5,%d15
80006fda:	68 05       	st.w [%a15]0,%d5
80006fdc:	00 90       	ret 

80006fde <IfxScuEru_setEventFlag>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007060:	4c f0       	ld.w %d15,[%a15]0
80007062:	06 45       	sh %d5,4
80007064:	8f 0f c7 f1 	andn %d15,%d15,112
80007068:	a6 f5       	or %d5,%d15
8000706a:	68 05       	st.w [%a15]0,%d5
8000706c:	00 90       	ret 

8000706e <IfxScuEru_setEventFlag>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
<<<<<<< HEAD
<<<<<<< HEAD
8000703a:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
8000703c:	91 30 00 ff 	movh.a %a15,61443
=======
80006fde:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006fe0:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000706e:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80007070:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
<<<<<<< HEAD
<<<<<<< HEAD
80007040:	0f 4f 00 40 	sh %d4,%d15,%d4
=======
80007074:	0f 4f 00 40 	sh %d4,%d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    SCU_FMR.U = mask;
80007078:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
8000707c:	68 04       	st.w [%a15]0,%d4
8000707e:	00 90       	ret 

<<<<<<< HEAD
8000704c <IfxScuEru_setFlagPatternDetection>:
=======
80006fe4:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80006fe8:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006fec:	68 04       	st.w [%a15]0,%d4
80006fee:	00 90       	ret 

80006ff0 <IfxScuEru_setFlagPatternDetection>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007080 <IfxScuEru_setFlagPatternDetection>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000704c:	8f f4 1f f0 	sh %d15,%d4,-1
=======
80007080:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80007084:	6f 04 04 00 	jz.t %d4,0,8000708c <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
<<<<<<< HEAD
80007054:	1b 05 01 50 	addi %d5,%d5,16
80007058:	06 2f       	sh %d15,2
8000705a:	60 f2       	mov.a %a2,%d15
8000705c:	d9 2f 00 06 	lea %a15,[%a2]24576
80007060:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
80006ff0:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80006ff4:	6f 04 04 00 	jz.t %d4,0,80006ffc <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80006ff8:	1b 05 01 50 	addi %d5,%d5,16
80006ffc:	06 2f       	sh %d15,2
80006ffe:	60 f2       	mov.a %a2,%d15
80007000:	d9 2f 00 06 	lea %a15,[%a2]24576
80007004:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007088:	1b 05 01 50 	addi %d5,%d5,16
8000708c:	06 2f       	sh %d15,2
8000708e:	60 f2       	mov.a %a2,%d15
80007090:	d9 2f 00 06 	lea %a15,[%a2]24576
80007094:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
<<<<<<< HEAD
<<<<<<< HEAD
80007064:	19 ff 2c 80 	ld.w %d15,[%a15]556
80007068:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
8000706c:	0f 56 00 50 	sh %d5,%d6,%d5
80007070:	a6 f5       	or %d5,%d15
80007072:	59 f5 2c 80 	st.w [%a15]556,%d5
80007076:	00 90       	ret 

80007078 <IfxScuEru_setInterruptGatingPattern>:
=======
80007008:	19 ff 2c 80 	ld.w %d15,[%a15]556
8000700c:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
80007010:	0f 56 00 50 	sh %d5,%d6,%d5
80007014:	a6 f5       	or %d5,%d15
80007016:	59 f5 2c 80 	st.w [%a15]556,%d5
8000701a:	00 90       	ret 

8000701c <IfxScuEru_setInterruptGatingPattern>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007098:	19 ff 2c 80 	ld.w %d15,[%a15]556
8000709c:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
800070a0:	0f 56 00 50 	sh %d5,%d6,%d5
800070a4:	a6 f5       	or %d5,%d15
800070a6:	59 f5 2c 80 	st.w [%a15]556,%d5
800070aa:	00 90       	ret 

800070ac <IfxScuEru_setInterruptGatingPattern>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
<<<<<<< HEAD
<<<<<<< HEAD
80007078:	8f f4 1f f0 	sh %d15,%d4,-1
=======
8000701c:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070ac:	8f f4 1f f0 	sh %d15,%d4,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
<<<<<<< HEAD
<<<<<<< HEAD
8000707c:	91 30 00 ff 	movh.a %a15,61443
80007080:	1b bf 08 f0 	addi %d15,%d15,139
80007084:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007088:	8f 35 00 51 	and %d5,%d5,3
8000708c:	90 ff       	addsc.a %a15,%a15,%d15,2
=======
80007020:	91 30 00 ff 	movh.a %a15,61443
80007024:	1b bf 08 f0 	addi %d15,%d15,139
80007028:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
8000702c:	8f 35 00 51 	and %d5,%d5,3
80007030:	90 ff       	addsc.a %a15,%a15,%d15,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070b0:	91 30 00 ff 	movh.a %a15,61443
800070b4:	1b bf 08 f0 	addi %d15,%d15,139
800070b8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
800070bc:	8f 35 00 51 	and %d5,%d5,3
800070c0:	90 ff       	addsc.a %a15,%a15,%d15,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
<<<<<<< HEAD
<<<<<<< HEAD
8000708e:	6f 04 06 00 	jz.t %d4,0,8000709a <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007092:	4c f0       	ld.w %d15,[%a15]0
80007094:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
80007098:	3c 07       	j 800070a6 <IfxScuEru_setInterruptGatingPattern+0x2e>
=======
80007032:	6f 04 06 00 	jz.t %d4,0,8000703e <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007036:	4c f0       	ld.w %d15,[%a15]0
80007038:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
8000703c:	3c 07       	j 8000704a <IfxScuEru_setInterruptGatingPattern+0x2e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070c2:	6f 04 06 00 	jz.t %d4,0,800070ce <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
800070c6:	4c f0       	ld.w %d15,[%a15]0
800070c8:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
800070cc:	3c 07       	j 800070da <IfxScuEru_setInterruptGatingPattern+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
<<<<<<< HEAD
<<<<<<< HEAD
8000709a:	4c f0       	ld.w %d15,[%a15]0
8000709c:	8f e5 00 50 	sh %d5,%d5,14
800070a0:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
800070a4:	a6 f5       	or %d5,%d15
800070a6:	68 05       	st.w [%a15]0,%d5
800070a8:	00 90       	ret 

800070aa <IfxScuWdt_changeCpuWatchdogPassword>:
=======
8000703e:	4c f0       	ld.w %d15,[%a15]0
80007040:	8f e5 00 50 	sh %d5,%d5,14
80007044:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
80007048:	a6 f5       	or %d5,%d15
8000704a:	68 05       	st.w [%a15]0,%d5
8000704c:	00 90       	ret 

8000704e <IfxScuWdt_changeCpuWatchdogPassword>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070ce:	4c f0       	ld.w %d15,[%a15]0
800070d0:	8f e5 00 50 	sh %d5,%d5,14
800070d4:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
800070d8:	a6 f5       	or %d5,%d15
800070da:	68 05       	st.w [%a15]0,%d5
800070dc:	00 90       	ret 

800070de <IfxScuWdt_changeCpuWatchdogPassword>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
800070aa:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800070ae:	16 07       	and %d15,7
=======
8000704e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007052:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070de:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800070e2:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
<<<<<<< HEAD
<<<<<<< HEAD
800070b0:	53 cf 20 f0 	mul %d15,%d15,12
800070b4:	60 f2       	mov.a %a2,%d15
800070b6:	d9 2f 00 46 	lea %a15,[%a2]24832
800070ba:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
80007054:	53 cf 20 f0 	mul %d15,%d15,12
80007058:	60 f2       	mov.a %a2,%d15
8000705a:	d9 2f 00 46 	lea %a15,[%a2]24832
8000705e:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070e4:	53 cf 20 f0 	mul %d15,%d15,12
800070e8:	60 f2       	mov.a %a2,%d15
800070ea:	d9 2f 00 46 	lea %a15,[%a2]24832
800070ee:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800070be:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070c0:	2e 16       	jz.t %d15,1,800070cc <IfxScuWdt_changeCpuWatchdogPassword+0x22>
=======
80007062:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007064:	2e 16       	jz.t %d15,1,80007070 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070f2:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070f4:	2e 16       	jz.t %d15,1,80007100 <IfxScuWdt_changeCpuWatchdogPassword+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800070c2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
=======
800070f6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con0.B.PW      = password;
800070fa:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
<<<<<<< HEAD
800070ca:	68 0f       	st.w [%a15]0,%d15
=======
80007066:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000706a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
8000706e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800070fe:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800070cc:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
80007100:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con0.B.LCK     = 1;
80007104:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007108:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000710c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000710e:	4c f0       	ld.w %d15,[%a15]0
80007110:	6f 0f ff 7f 	jz.t %d15,0,8000710e <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80007114:	00 90       	ret 

<<<<<<< HEAD
800070e2 <IfxScuWdt_changeCpuWatchdogReload>:
=======
80007070:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007074:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007078:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000707c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000707e:	4c f0       	ld.w %d15,[%a15]0
80007080:	6f 0f ff 7f 	jz.t %d15,0,8000707e <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80007084:	00 90       	ret 

80007086 <IfxScuWdt_changeCpuWatchdogReload>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007116 <IfxScuWdt_changeCpuWatchdogReload>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
800070e2:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800070e6:	16 07       	and %d15,7
=======
80007086:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000708a:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007116:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000711a:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
<<<<<<< HEAD
<<<<<<< HEAD
800070e8:	53 cf 20 f0 	mul %d15,%d15,12
800070ec:	60 f2       	mov.a %a2,%d15
800070ee:	d9 2f 00 46 	lea %a15,[%a2]24832
800070f2:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
8000708c:	53 cf 20 f0 	mul %d15,%d15,12
80007090:	60 f2       	mov.a %a2,%d15
80007092:	d9 2f 00 46 	lea %a15,[%a2]24832
80007096:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000711c:	53 cf 20 f0 	mul %d15,%d15,12
80007120:	60 f2       	mov.a %a2,%d15
80007122:	d9 2f 00 46 	lea %a15,[%a2]24832
80007126:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800070f6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070f8:	2e 16       	jz.t %d15,1,80007104 <IfxScuWdt_changeCpuWatchdogReload+0x22>
=======
8000709a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000709c:	2e 16       	jz.t %d15,1,800070a8 <IfxScuWdt_changeCpuWatchdogReload+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000712a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000712c:	2e 16       	jz.t %d15,1,80007138 <IfxScuWdt_changeCpuWatchdogReload+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800070fa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
=======
8000712e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con0.B.PW      = password;
80007132:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
<<<<<<< HEAD
80007102:	68 0f       	st.w [%a15]0,%d15
=======
8000709e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070a2:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800070a6:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007136:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007104:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
80007138:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con0.B.LCK     = 1;
8000713c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80007140:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007144:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80007146:	4c f0       	ld.w %d15,[%a15]0
80007148:	6f 0f ff 7f 	jz.t %d15,0,80007146 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
8000714c:	00 90       	ret 

<<<<<<< HEAD
8000711a <IfxScuWdt_changeSafetyWatchdogPassword>:
=======
800070a8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070ac:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
800070b0:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
800070b4:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
800070b6:	4c f0       	ld.w %d15,[%a15]0
800070b8:	6f 0f ff 7f 	jz.t %d15,0,800070b6 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
800070bc:	00 90       	ret 

800070be <IfxScuWdt_changeSafetyWatchdogPassword>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000714e <IfxScuWdt_changeSafetyWatchdogPassword>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
<<<<<<< HEAD
<<<<<<< HEAD
8000711a:	91 30 00 ff 	movh.a %a15,61443
8000711e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007122:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007124:	2e 16       	jz.t %d15,1,80007130 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
=======
800070be:	91 30 00 ff 	movh.a %a15,61443
800070c2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070c6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070c8:	2e 16       	jz.t %d15,1,800070d4 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
<<<<<<< HEAD
80007126:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000712a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
8000712e:	68 0f       	st.w [%a15]0,%d15
=======
800070ca:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070ce:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
800070d2:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
<<<<<<< HEAD
80007130:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007134:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007138:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000713c:	91 30 00 ff 	movh.a %a15,61443
80007140:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007144:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007146:	4c f0       	ld.w %d15,[%a15]0
80007148:	6f 0f ff 7f 	jz.t %d15,0,80007146 <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
8000714c:	00 90       	ret 

8000714e <IfxScuWdt_changeSafetyWatchdogReload>:
=======
800070d4:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070d8:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
800070dc:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
800070e0:	91 30 00 ff 	movh.a %a15,61443
800070e4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070e8:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070ea:	4c f0       	ld.w %d15,[%a15]0
800070ec:	6f 0f ff 7f 	jz.t %d15,0,800070ea <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
800070f0:	00 90       	ret 

800070f2 <IfxScuWdt_changeSafetyWatchdogReload>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
<<<<<<< HEAD
=======
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
8000714e:	91 30 00 ff 	movh.a %a15,61443
80007152:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007156:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
<<<<<<< HEAD
80007158:	2e 16       	jz.t %d15,1,80007164 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
=======
800070f2:	91 30 00 ff 	movh.a %a15,61443
800070f6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070fa:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070fc:	2e 16       	jz.t %d15,1,80007108 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007158:	2e 16       	jz.t %d15,1,80007164 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
<<<<<<< HEAD
8000715a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000715e:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80007162:	68 0f       	st.w [%a15]0,%d15
=======
800070fe:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007102:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007106:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
<<<<<<< HEAD
80007164:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007168:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
8000716c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80007170:	91 30 00 ff 	movh.a %a15,61443
80007174:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007178:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000717a:	4c f0       	ld.w %d15,[%a15]0
8000717c:	6f 0f ff 7f 	jz.t %d15,0,8000717a <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
80007180:	00 90       	ret 

<<<<<<< HEAD
80007182 <IfxScuWdt_clearCpuEndinit>:
=======
80007108:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
8000710c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80007110:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007114:	91 30 00 ff 	movh.a %a15,61443
80007118:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000711c:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
8000711e:	4c f0       	ld.w %d15,[%a15]0
80007120:	6f 0f ff 7f 	jz.t %d15,0,8000711e <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80007124:	00 90       	ret 

80007126 <IfxScuWdt_clearCpuEndinit>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007182 <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80007182:	91 30 00 ff 	movh.a %a15,61443
80007186:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000718a:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
8000718c:	2e 16       	jz.t %d15,1,80007198 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000718e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80007192:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007196:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007198:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
8000719c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
800071a0:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
800071a4:	91 30 00 ff 	movh.a %a15,61443
800071a8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071ac:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
800071ae:	4c f0       	ld.w %d15,[%a15]0
800071b0:	6f 0f ff 7f 	jz.t %d15,0,800071ae <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
800071b4:	00 90       	ret 

800071b6 <IfxScuWdt_clearCpuEndinit>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
80007182:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007186:	16 07       	and %d15,7
=======
80007126:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000712a:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071b6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071ba:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
<<<<<<< HEAD
<<<<<<< HEAD
80007188:	53 cf 20 f0 	mul %d15,%d15,12
8000718c:	06 24       	sh %d4,2
8000718e:	60 f2       	mov.a %a2,%d15
80007190:	d9 2f 00 46 	lea %a15,[%a2]24832
80007194:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
8000712c:	53 cf 20 f0 	mul %d15,%d15,12
80007130:	06 24       	sh %d4,2
80007132:	60 f2       	mov.a %a2,%d15
80007134:	d9 2f 00 46 	lea %a15,[%a2]24832
80007138:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071bc:	53 cf 20 f0 	mul %d15,%d15,12
800071c0:	06 24       	sh %d4,2
800071c2:	60 f2       	mov.a %a2,%d15
800071c4:	d9 2f 00 46 	lea %a15,[%a2]24832
800071c8:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
80007198:	4c f0       	ld.w %d15,[%a15]0
8000719a:	2e 16       	jz.t %d15,1,800071a6 <IfxScuWdt_clearCpuEndinit+0x24>
=======
8000713c:	4c f0       	ld.w %d15,[%a15]0
8000713e:	2e 16       	jz.t %d15,1,8000714a <IfxScuWdt_clearCpuEndinit+0x24>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071cc:	4c f0       	ld.w %d15,[%a15]0
800071ce:	2e 16       	jz.t %d15,1,800071da <IfxScuWdt_clearCpuEndinit+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
8000719c:	4c f0       	ld.w %d15,[%a15]0
8000719e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
80007140:	4c f0       	ld.w %d15,[%a15]0
80007142:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071d0:	4c f0       	ld.w %d15,[%a15]0
800071d2:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071a2:	a6 4f       	or %d15,%d4
=======
80007146:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071d6:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071a4:	68 0f       	st.w [%a15]0,%d15
=======
80007148:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071d8:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800071a6:	4c f0       	ld.w %d15,[%a15]0
800071a8:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
=======
8000714a:	4c f0       	ld.w %d15,[%a15]0
8000714c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071da:	4c f0       	ld.w %d15,[%a15]0
800071dc:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071ac:	a6 f4       	or %d4,%d15
=======
80007150:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071e0:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071ae:	68 04       	st.w [%a15]0,%d4
=======
80007152:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071e2:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
<<<<<<< HEAD
<<<<<<< HEAD
800071b0:	4c f0       	ld.w %d15,[%a15]0
800071b2:	6f 0f ff ff 	jnz.t %d15,0,800071b0 <IfxScuWdt_clearCpuEndinit+0x2e>
=======
800071e4:	4c f0       	ld.w %d15,[%a15]0
800071e6:	6f 0f ff ff 	jnz.t %d15,0,800071e4 <IfxScuWdt_clearCpuEndinit+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
800071ea:	00 90       	ret 

<<<<<<< HEAD
800071b8 <IfxScuWdt_clearSafetyEndinit>:
=======
80007154:	4c f0       	ld.w %d15,[%a15]0
80007156:	6f 0f ff ff 	jnz.t %d15,0,80007154 <IfxScuWdt_clearCpuEndinit+0x2e>
}
8000715a:	00 90       	ret 

8000715c <IfxScuWdt_clearSafetyEndinit>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071ec <IfxScuWdt_clearSafetyEndinit>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
800071b8:	91 30 00 ff 	movh.a %a15,61443
800071bc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071c0:	4c f0       	ld.w %d15,[%a15]0
800071c2:	06 24       	sh %d4,2
800071c4:	2e 16       	jz.t %d15,1,800071d0 <IfxScuWdt_clearSafetyEndinit+0x18>
=======
8000715c:	91 30 00 ff 	movh.a %a15,61443
80007160:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007164:	4c f0       	ld.w %d15,[%a15]0
80007166:	06 24       	sh %d4,2
80007168:	2e 16       	jz.t %d15,1,80007174 <IfxScuWdt_clearSafetyEndinit+0x18>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071ec:	91 30 00 ff 	movh.a %a15,61443
800071f0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071f4:	4c f0       	ld.w %d15,[%a15]0
800071f6:	06 24       	sh %d4,2
800071f8:	2e 16       	jz.t %d15,1,80007204 <IfxScuWdt_clearSafetyEndinit+0x18>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800071c6:	4c f0       	ld.w %d15,[%a15]0
800071c8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
8000716a:	4c f0       	ld.w %d15,[%a15]0
8000716c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800071fa:	4c f0       	ld.w %d15,[%a15]0
800071fc:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071cc:	a6 4f       	or %d15,%d4
=======
80007170:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007200:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071ce:	68 0f       	st.w [%a15]0,%d15
=======
80007172:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007202:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800071d0:	91 30 00 ff 	movh.a %a15,61443
800071d4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071d8:	4c f0       	ld.w %d15,[%a15]0
800071da:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
=======
80007174:	91 30 00 ff 	movh.a %a15,61443
80007178:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000717c:	4c f0       	ld.w %d15,[%a15]0
8000717e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007204:	91 30 00 ff 	movh.a %a15,61443
80007208:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000720c:	4c f0       	ld.w %d15,[%a15]0
8000720e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071de:	a6 f4       	or %d4,%d15
=======
80007182:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007212:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800071e0:	68 04       	st.w [%a15]0,%d4
=======
80007184:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007214:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
<<<<<<< HEAD
<<<<<<< HEAD
800071e2:	4c f0       	ld.w %d15,[%a15]0
800071e4:	6f 0f ff ff 	jnz.t %d15,0,800071e2 <IfxScuWdt_clearSafetyEndinit+0x2a>
=======
80007186:	4c f0       	ld.w %d15,[%a15]0
80007188:	6f 0f ff ff 	jnz.t %d15,0,80007186 <IfxScuWdt_clearSafetyEndinit+0x2a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007216:	4c f0       	ld.w %d15,[%a15]0
80007218:	6f 0f ff ff 	jnz.t %d15,0,80007216 <IfxScuWdt_clearSafetyEndinit+0x2a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
<<<<<<< HEAD
<<<<<<< HEAD
800071e8:	00 90       	ret 

800071ea <IfxScuWdt_disableCpuWatchdog>:
=======
8000718c:	00 90       	ret 

8000718e <IfxScuWdt_disableCpuWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000721c:	00 90       	ret 

8000721e <IfxScuWdt_disableCpuWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
800071ea:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071ee:	16 07       	and %d15,7
=======
8000718e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007192:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000721e:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007222:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
<<<<<<< HEAD
<<<<<<< HEAD
800071f0:	53 cf 20 f0 	mul %d15,%d15,12
800071f4:	06 24       	sh %d4,2
800071f6:	60 f2       	mov.a %a2,%d15
800071f8:	d9 2f 00 46 	lea %a15,[%a2]24832
800071fc:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
80007194:	53 cf 20 f0 	mul %d15,%d15,12
80007198:	06 24       	sh %d4,2
8000719a:	60 f2       	mov.a %a2,%d15
8000719c:	d9 2f 00 46 	lea %a15,[%a2]24832
800071a0:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007224:	53 cf 20 f0 	mul %d15,%d15,12
80007228:	06 24       	sh %d4,2
8000722a:	60 f2       	mov.a %a2,%d15
8000722c:	d9 2f 00 46 	lea %a15,[%a2]24832
80007230:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
80007200:	4c f0       	ld.w %d15,[%a15]0
80007202:	2e 16       	jz.t %d15,1,8000720e <IfxScuWdt_disableCpuWatchdog+0x24>
=======
800071a4:	4c f0       	ld.w %d15,[%a15]0
800071a6:	2e 16       	jz.t %d15,1,800071b2 <IfxScuWdt_disableCpuWatchdog+0x24>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007234:	4c f0       	ld.w %d15,[%a15]0
80007236:	2e 16       	jz.t %d15,1,80007242 <IfxScuWdt_disableCpuWatchdog+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007204:	4c f0       	ld.w %d15,[%a15]0
80007206:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
800071a8:	4c f0       	ld.w %d15,[%a15]0
800071aa:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007238:	4c f0       	ld.w %d15,[%a15]0
8000723a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000720a:	a6 4f       	or %d15,%d4
=======
800071ae:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000723e:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000720c:	68 0f       	st.w [%a15]0,%d15
=======
800071b0:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007240:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
8000720e:	4c f0       	ld.w %d15,[%a15]0
80007210:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
=======
800071b2:	4c f0       	ld.w %d15,[%a15]0
800071b4:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007242:	4c f0       	ld.w %d15,[%a15]0
80007244:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007214:	a6 4f       	or %d15,%d4
=======
800071b8:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007248:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007216:	68 0f       	st.w [%a15]0,%d15
=======
800071ba:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000724a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80007218:	4c f0       	ld.w %d15,[%a15]0
8000721a:	6f 0f ff ff 	jnz.t %d15,0,80007218 <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
8000721e:	4c f1       	ld.w %d15,[%a15]4
80007220:	96 08       	or %d15,8
80007222:	68 1f       	st.w [%a15]4,%d15
=======
800071bc:	4c f0       	ld.w %d15,[%a15]0
800071be:	6f 0f ff ff 	jnz.t %d15,0,800071bc <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
800071c2:	4c f1       	ld.w %d15,[%a15]4
800071c4:	96 08       	or %d15,8
800071c6:	68 1f       	st.w [%a15]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000724c:	4c f0       	ld.w %d15,[%a15]0
8000724e:	6f 0f ff ff 	jnz.t %d15,0,8000724c <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80007252:	4c f1       	ld.w %d15,[%a15]4
80007254:	96 08       	or %d15,8
80007256:	68 1f       	st.w [%a15]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
80007224:	4c f0       	ld.w %d15,[%a15]0
80007226:	2e 16       	jz.t %d15,1,80007232 <IfxScuWdt_disableCpuWatchdog+0x48>
=======
800071c8:	4c f0       	ld.w %d15,[%a15]0
800071ca:	2e 16       	jz.t %d15,1,800071d6 <IfxScuWdt_disableCpuWatchdog+0x48>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007258:	4c f0       	ld.w %d15,[%a15]0
8000725a:	2e 16       	jz.t %d15,1,80007266 <IfxScuWdt_disableCpuWatchdog+0x48>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007228:	4c f0       	ld.w %d15,[%a15]0
8000722a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
800071cc:	4c f0       	ld.w %d15,[%a15]0
800071ce:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000725c:	4c f0       	ld.w %d15,[%a15]0
8000725e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000722e:	a6 4f       	or %d15,%d4
=======
800071d2:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007262:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007230:	68 0f       	st.w [%a15]0,%d15
=======
800071d4:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007264:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007232:	4c f0       	ld.w %d15,[%a15]0
80007234:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
=======
800071d6:	4c f0       	ld.w %d15,[%a15]0
800071d8:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007266:	4c f0       	ld.w %d15,[%a15]0
80007268:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007238:	a6 f4       	or %d4,%d15
=======
800071dc:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000726c:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000723a:	68 04       	st.w [%a15]0,%d4
=======
800071de:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000726e:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
<<<<<<< HEAD
<<<<<<< HEAD
8000723c:	4c f0       	ld.w %d15,[%a15]0
8000723e:	6f 0f ff 7f 	jz.t %d15,0,8000723c <IfxScuWdt_disableCpuWatchdog+0x52>
=======
80007270:	4c f0       	ld.w %d15,[%a15]0
80007272:	6f 0f ff 7f 	jz.t %d15,0,80007270 <IfxScuWdt_disableCpuWatchdog+0x52>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007276:	00 90       	ret 

<<<<<<< HEAD
80007244 <IfxScuWdt_disableSafetyWatchdog>:
=======
800071e0:	4c f0       	ld.w %d15,[%a15]0
800071e2:	6f 0f ff 7f 	jz.t %d15,0,800071e0 <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800071e6:	00 90       	ret 

800071e8 <IfxScuWdt_disableSafetyWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007278 <IfxScuWdt_disableSafetyWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
80007244:	91 30 00 ff 	movh.a %a15,61443
80007248:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000724c:	4c f0       	ld.w %d15,[%a15]0
8000724e:	06 24       	sh %d4,2
80007250:	2e 16       	jz.t %d15,1,8000725c <IfxScuWdt_disableSafetyWatchdog+0x18>
=======
800071e8:	91 30 00 ff 	movh.a %a15,61443
800071ec:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071f0:	4c f0       	ld.w %d15,[%a15]0
800071f2:	06 24       	sh %d4,2
800071f4:	2e 16       	jz.t %d15,1,80007200 <IfxScuWdt_disableSafetyWatchdog+0x18>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007278:	91 30 00 ff 	movh.a %a15,61443
8000727c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007280:	4c f0       	ld.w %d15,[%a15]0
80007282:	06 24       	sh %d4,2
80007284:	2e 16       	jz.t %d15,1,80007290 <IfxScuWdt_disableSafetyWatchdog+0x18>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007252:	4c f0       	ld.w %d15,[%a15]0
80007254:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
800071f6:	4c f0       	ld.w %d15,[%a15]0
800071f8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007286:	4c f0       	ld.w %d15,[%a15]0
80007288:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007258:	a6 4f       	or %d15,%d4
=======
800071fc:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000728c:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000725a:	68 0f       	st.w [%a15]0,%d15
=======
800071fe:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000728e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
8000725c:	91 30 00 ff 	movh.a %a15,61443
80007260:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007264:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007266:	40 f2       	mov.aa %a2,%a15
80007268:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
=======
80007200:	91 30 00 ff 	movh.a %a15,61443
80007204:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007208:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000720a:	40 f2       	mov.aa %a2,%a15
8000720c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007290:	91 30 00 ff 	movh.a %a15,61443
80007294:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007298:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000729a:	40 f2       	mov.aa %a2,%a15
8000729c:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000726c:	a6 4f       	or %d15,%d4
=======
80007210:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072a0:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000726e:	68 0f       	st.w [%a15]0,%d15
=======
80007212:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072a2:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
<<<<<<< HEAD
<<<<<<< HEAD
80007270:	4c 20       	ld.w %d15,[%a2]0
80007272:	91 30 00 ff 	movh.a %a15,61443
80007276:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000727a:	6f 0f fb ff 	jnz.t %d15,0,80007270 <IfxScuWdt_disableSafetyWatchdog+0x2c>
=======
80007214:	4c 20       	ld.w %d15,[%a2]0
80007216:	91 30 00 ff 	movh.a %a15,61443
8000721a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000721e:	6f 0f fb ff 	jnz.t %d15,0,80007214 <IfxScuWdt_disableSafetyWatchdog+0x2c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072a4:	4c 20       	ld.w %d15,[%a2]0
800072a6:	91 30 00 ff 	movh.a %a15,61443
800072aa:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072ae:	6f 0f fb ff 	jnz.t %d15,0,800072a4 <IfxScuWdt_disableSafetyWatchdog+0x2c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
<<<<<<< HEAD
<<<<<<< HEAD
8000727e:	91 30 00 2f 	movh.a %a2,61443
80007282:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007286:	4c 20       	ld.w %d15,[%a2]0
80007288:	96 08       	or %d15,8
8000728a:	6c 20       	st.w [%a2]0,%d15
=======
80007222:	91 30 00 2f 	movh.a %a2,61443
80007226:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
8000722a:	4c 20       	ld.w %d15,[%a2]0
8000722c:	96 08       	or %d15,8
8000722e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072b2:	91 30 00 2f 	movh.a %a2,61443
800072b6:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
800072ba:	4c 20       	ld.w %d15,[%a2]0
800072bc:	96 08       	or %d15,8
800072be:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
8000728c:	4c f0       	ld.w %d15,[%a15]0
8000728e:	2e 16       	jz.t %d15,1,8000729a <IfxScuWdt_disableSafetyWatchdog+0x56>
=======
80007230:	4c f0       	ld.w %d15,[%a15]0
80007232:	2e 16       	jz.t %d15,1,8000723e <IfxScuWdt_disableSafetyWatchdog+0x56>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072c0:	4c f0       	ld.w %d15,[%a15]0
800072c2:	2e 16       	jz.t %d15,1,800072ce <IfxScuWdt_disableSafetyWatchdog+0x56>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007290:	4c f0       	ld.w %d15,[%a15]0
80007292:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
80007234:	4c f0       	ld.w %d15,[%a15]0
80007236:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072c4:	4c f0       	ld.w %d15,[%a15]0
800072c6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007296:	a6 4f       	or %d15,%d4
=======
8000723a:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072ca:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007298:	68 0f       	st.w [%a15]0,%d15
=======
8000723c:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072cc:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
8000729a:	91 30 00 ff 	movh.a %a15,61443
8000729e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072a2:	4c f0       	ld.w %d15,[%a15]0
800072a4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
=======
8000723e:	91 30 00 ff 	movh.a %a15,61443
80007242:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007246:	4c f0       	ld.w %d15,[%a15]0
80007248:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072ce:	91 30 00 ff 	movh.a %a15,61443
800072d2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072d6:	4c f0       	ld.w %d15,[%a15]0
800072d8:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072a8:	a6 f4       	or %d4,%d15
=======
8000724c:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072dc:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072aa:	68 04       	st.w [%a15]0,%d4
=======
8000724e:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072de:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
<<<<<<< HEAD
<<<<<<< HEAD
800072ac:	4c f0       	ld.w %d15,[%a15]0
800072ae:	6f 0f ff 7f 	jz.t %d15,0,800072ac <IfxScuWdt_disableSafetyWatchdog+0x68>
=======
800072e0:	4c f0       	ld.w %d15,[%a15]0
800072e2:	6f 0f ff 7f 	jz.t %d15,0,800072e0 <IfxScuWdt_disableSafetyWatchdog+0x68>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setSafetyEndinitInline(password);
}
800072e6:	00 90       	ret 

<<<<<<< HEAD
800072b4 <IfxScuWdt_enableCpuWatchdog>:
=======
80007250:	4c f0       	ld.w %d15,[%a15]0
80007252:	6f 0f ff 7f 	jz.t %d15,0,80007250 <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007256:	00 90       	ret 

80007258 <IfxScuWdt_enableCpuWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072e8 <IfxScuWdt_enableCpuWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
800072b4:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800072b8:	16 07       	and %d15,7
=======
80007258:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000725c:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072e8:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800072ec:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
<<<<<<< HEAD
<<<<<<< HEAD
800072ba:	53 cf 20 f0 	mul %d15,%d15,12
800072be:	06 24       	sh %d4,2
800072c0:	60 f2       	mov.a %a2,%d15
800072c2:	d9 2f 00 46 	lea %a15,[%a2]24832
800072c6:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
8000725e:	53 cf 20 f0 	mul %d15,%d15,12
80007262:	06 24       	sh %d4,2
80007264:	60 f2       	mov.a %a2,%d15
80007266:	d9 2f 00 46 	lea %a15,[%a2]24832
8000726a:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072ee:	53 cf 20 f0 	mul %d15,%d15,12
800072f2:	06 24       	sh %d4,2
800072f4:	60 f2       	mov.a %a2,%d15
800072f6:	d9 2f 00 46 	lea %a15,[%a2]24832
800072fa:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
800072ca:	4c f0       	ld.w %d15,[%a15]0
800072cc:	2e 16       	jz.t %d15,1,800072d8 <IfxScuWdt_enableCpuWatchdog+0x24>
=======
8000726e:	4c f0       	ld.w %d15,[%a15]0
80007270:	2e 16       	jz.t %d15,1,8000727c <IfxScuWdt_enableCpuWatchdog+0x24>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800072fe:	4c f0       	ld.w %d15,[%a15]0
80007300:	2e 16       	jz.t %d15,1,8000730c <IfxScuWdt_enableCpuWatchdog+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800072ce:	4c f0       	ld.w %d15,[%a15]0
800072d0:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
80007272:	4c f0       	ld.w %d15,[%a15]0
80007274:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007302:	4c f0       	ld.w %d15,[%a15]0
80007304:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072d4:	a6 4f       	or %d15,%d4
=======
80007278:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007308:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072d6:	68 0f       	st.w [%a15]0,%d15
=======
8000727a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000730a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800072d8:	4c f0       	ld.w %d15,[%a15]0
800072da:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
=======
8000727c:	4c f0       	ld.w %d15,[%a15]0
8000727e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000730c:	4c f0       	ld.w %d15,[%a15]0
8000730e:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072de:	a6 4f       	or %d15,%d4
=======
80007282:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007312:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072e0:	68 0f       	st.w [%a15]0,%d15
=======
80007284:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007314:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
<<<<<<< HEAD
<<<<<<< HEAD
800072e2:	4c f0       	ld.w %d15,[%a15]0
800072e4:	6f 0f ff ff 	jnz.t %d15,0,800072e2 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
800072e8:	4c f1       	ld.w %d15,[%a15]4
800072ea:	8f 8f c0 f1 	andn %d15,%d15,8
800072ee:	68 1f       	st.w [%a15]4,%d15
=======
80007286:	4c f0       	ld.w %d15,[%a15]0
80007288:	6f 0f ff ff 	jnz.t %d15,0,80007286 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
8000728c:	4c f1       	ld.w %d15,[%a15]4
8000728e:	8f 8f c0 f1 	andn %d15,%d15,8
80007292:	68 1f       	st.w [%a15]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007316:	4c f0       	ld.w %d15,[%a15]0
80007318:	6f 0f ff ff 	jnz.t %d15,0,80007316 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
8000731c:	4c f1       	ld.w %d15,[%a15]4
8000731e:	8f 8f c0 f1 	andn %d15,%d15,8
80007322:	68 1f       	st.w [%a15]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
800072f0:	4c f0       	ld.w %d15,[%a15]0
800072f2:	2e 16       	jz.t %d15,1,800072fe <IfxScuWdt_enableCpuWatchdog+0x4a>
=======
80007294:	4c f0       	ld.w %d15,[%a15]0
80007296:	2e 16       	jz.t %d15,1,800072a2 <IfxScuWdt_enableCpuWatchdog+0x4a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007324:	4c f0       	ld.w %d15,[%a15]0
80007326:	2e 16       	jz.t %d15,1,80007332 <IfxScuWdt_enableCpuWatchdog+0x4a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800072f4:	4c f0       	ld.w %d15,[%a15]0
800072f6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
80007298:	4c f0       	ld.w %d15,[%a15]0
8000729a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007328:	4c f0       	ld.w %d15,[%a15]0
8000732a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072fa:	a6 4f       	or %d15,%d4
=======
8000729e:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000732e:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800072fc:	68 0f       	st.w [%a15]0,%d15
=======
800072a0:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007330:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800072fe:	4c f0       	ld.w %d15,[%a15]0
80007300:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
=======
800072a2:	4c f0       	ld.w %d15,[%a15]0
800072a4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007332:	4c f0       	ld.w %d15,[%a15]0
80007334:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007304:	a6 f4       	or %d4,%d15
=======
800072a8:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007338:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007306:	68 04       	st.w [%a15]0,%d4
=======
800072aa:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000733a:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80007308:	4c f0       	ld.w %d15,[%a15]0
8000730a:	6f 0f ff 7f 	jz.t %d15,0,80007308 <IfxScuWdt_enableCpuWatchdog+0x54>
=======
8000733c:	4c f0       	ld.w %d15,[%a15]0
8000733e:	6f 0f ff 7f 	jz.t %d15,0,8000733c <IfxScuWdt_enableCpuWatchdog+0x54>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007342:	00 90       	ret 

<<<<<<< HEAD
80007310 <IfxScuWdt_enableSafetyWatchdog>:
=======
800072ac:	4c f0       	ld.w %d15,[%a15]0
800072ae:	6f 0f ff 7f 	jz.t %d15,0,800072ac <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800072b2:	00 90       	ret 

800072b4 <IfxScuWdt_enableSafetyWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007344 <IfxScuWdt_enableSafetyWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
80007310:	91 30 00 ff 	movh.a %a15,61443
80007314:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007318:	4c f0       	ld.w %d15,[%a15]0
8000731a:	06 24       	sh %d4,2
8000731c:	2e 16       	jz.t %d15,1,80007328 <IfxScuWdt_enableSafetyWatchdog+0x18>
=======
800072b4:	91 30 00 ff 	movh.a %a15,61443
800072b8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072bc:	4c f0       	ld.w %d15,[%a15]0
800072be:	06 24       	sh %d4,2
800072c0:	2e 16       	jz.t %d15,1,800072cc <IfxScuWdt_enableSafetyWatchdog+0x18>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007344:	91 30 00 ff 	movh.a %a15,61443
80007348:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000734c:	4c f0       	ld.w %d15,[%a15]0
8000734e:	06 24       	sh %d4,2
80007350:	2e 16       	jz.t %d15,1,8000735c <IfxScuWdt_enableSafetyWatchdog+0x18>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
8000731e:	4c f0       	ld.w %d15,[%a15]0
80007320:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
800072c2:	4c f0       	ld.w %d15,[%a15]0
800072c4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007352:	4c f0       	ld.w %d15,[%a15]0
80007354:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007324:	a6 4f       	or %d15,%d4
=======
800072c8:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007358:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007326:	68 0f       	st.w [%a15]0,%d15
=======
800072ca:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000735a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007328:	91 30 00 ff 	movh.a %a15,61443
8000732c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007330:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007332:	40 f2       	mov.aa %a2,%a15
80007334:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
=======
800072cc:	91 30 00 ff 	movh.a %a15,61443
800072d0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072d4:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800072d6:	40 f2       	mov.aa %a2,%a15
800072d8:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000735c:	91 30 00 ff 	movh.a %a15,61443
80007360:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007364:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007366:	40 f2       	mov.aa %a2,%a15
80007368:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007338:	a6 4f       	or %d15,%d4
=======
800072dc:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000736c:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000733a:	68 0f       	st.w [%a15]0,%d15
=======
800072de:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000736e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
<<<<<<< HEAD
<<<<<<< HEAD
8000733c:	4c 20       	ld.w %d15,[%a2]0
8000733e:	91 30 00 ff 	movh.a %a15,61443
80007342:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007346:	6f 0f fb ff 	jnz.t %d15,0,8000733c <IfxScuWdt_enableSafetyWatchdog+0x2c>
=======
800072e0:	4c 20       	ld.w %d15,[%a2]0
800072e2:	91 30 00 ff 	movh.a %a15,61443
800072e6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072ea:	6f 0f fb ff 	jnz.t %d15,0,800072e0 <IfxScuWdt_enableSafetyWatchdog+0x2c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007370:	4c 20       	ld.w %d15,[%a2]0
80007372:	91 30 00 ff 	movh.a %a15,61443
80007376:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000737a:	6f 0f fb ff 	jnz.t %d15,0,80007370 <IfxScuWdt_enableSafetyWatchdog+0x2c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
<<<<<<< HEAD
<<<<<<< HEAD
8000734a:	91 30 00 2f 	movh.a %a2,61443
8000734e:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007352:	4c 20       	ld.w %d15,[%a2]0
80007354:	8f 8f c0 f1 	andn %d15,%d15,8
80007358:	6c 20       	st.w [%a2]0,%d15
=======
800072ee:	91 30 00 2f 	movh.a %a2,61443
800072f2:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
800072f6:	4c 20       	ld.w %d15,[%a2]0
800072f8:	8f 8f c0 f1 	andn %d15,%d15,8
800072fc:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000737e:	91 30 00 2f 	movh.a %a2,61443
80007382:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007386:	4c 20       	ld.w %d15,[%a2]0
80007388:	8f 8f c0 f1 	andn %d15,%d15,8
8000738c:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
8000735a:	4c f0       	ld.w %d15,[%a15]0
8000735c:	2e 16       	jz.t %d15,1,80007368 <IfxScuWdt_enableSafetyWatchdog+0x58>
=======
800072fe:	4c f0       	ld.w %d15,[%a15]0
80007300:	2e 16       	jz.t %d15,1,8000730c <IfxScuWdt_enableSafetyWatchdog+0x58>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000738e:	4c f0       	ld.w %d15,[%a15]0
80007390:	2e 16       	jz.t %d15,1,8000739c <IfxScuWdt_enableSafetyWatchdog+0x58>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
8000735e:	4c f0       	ld.w %d15,[%a15]0
80007360:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
80007302:	4c f0       	ld.w %d15,[%a15]0
80007304:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007392:	4c f0       	ld.w %d15,[%a15]0
80007394:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007364:	a6 4f       	or %d15,%d4
=======
80007308:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007398:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007366:	68 0f       	st.w [%a15]0,%d15
=======
8000730a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000739a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007368:	91 30 00 ff 	movh.a %a15,61443
8000736c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007370:	4c f0       	ld.w %d15,[%a15]0
80007372:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
=======
8000730c:	91 30 00 ff 	movh.a %a15,61443
80007310:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007314:	4c f0       	ld.w %d15,[%a15]0
80007316:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000739c:	91 30 00 ff 	movh.a %a15,61443
800073a0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800073a4:	4c f0       	ld.w %d15,[%a15]0
800073a6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007376:	a6 f4       	or %d4,%d15
=======
8000731a:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073aa:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007378:	68 04       	st.w [%a15]0,%d4
=======
8000731c:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073ac:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
<<<<<<< HEAD
<<<<<<< HEAD
8000737a:	4c f0       	ld.w %d15,[%a15]0
8000737c:	6f 0f ff 7f 	jz.t %d15,0,8000737a <IfxScuWdt_enableSafetyWatchdog+0x6a>
=======
800073ae:	4c f0       	ld.w %d15,[%a15]0
800073b0:	6f 0f ff 7f 	jz.t %d15,0,800073ae <IfxScuWdt_enableSafetyWatchdog+0x6a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setSafetyEndinitInline(password);
}
800073b4:	00 90       	ret 

<<<<<<< HEAD
80007382 <IfxScuWdt_getCpuWatchdogPassword>:
=======
8000731e:	4c f0       	ld.w %d15,[%a15]0
80007320:	6f 0f ff 7f 	jz.t %d15,0,8000731e <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007324:	00 90       	ret 

80007326 <IfxScuWdt_getCpuWatchdogPassword>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073b6 <IfxScuWdt_getCpuWatchdogPassword>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
80007382:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007386:	16 07       	and %d15,7
=======
80007326:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000732a:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073b6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073ba:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
<<<<<<< HEAD
<<<<<<< HEAD
80007388:	53 cf 20 f0 	mul %d15,%d15,12
8000738c:	60 f2       	mov.a %a2,%d15
8000738e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007392:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
8000732c:	53 cf 20 f0 	mul %d15,%d15,12
80007330:	60 f2       	mov.a %a2,%d15
80007332:	d9 2f 00 46 	lea %a15,[%a2]24832
80007336:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073bc:	53 cf 20 f0 	mul %d15,%d15,12
800073c0:	60 f2       	mov.a %a2,%d15
800073c2:	d9 2f 00 46 	lea %a15,[%a2]24832
800073c6:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
<<<<<<< HEAD
<<<<<<< HEAD
80007396:	48 02       	ld.w %d2,[%a15]0
80007398:	37 02 6e 21 	extr.u %d2,%d2,2,14
=======
800073ca:	48 02       	ld.w %d2,[%a15]0
800073cc:	37 02 6e 21 	extr.u %d2,%d2,2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
800073d0:	8f f2 83 21 	xor %d2,%d2,63
800073d4:	00 90       	ret 

<<<<<<< HEAD
800073a2 <IfxScuWdt_getCpuWatchdogEndInit>:
=======
8000733a:	48 02       	ld.w %d2,[%a15]0
8000733c:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80007340:	8f f2 83 21 	xor %d2,%d2,63
80007344:	00 90       	ret 

80007346 <IfxScuWdt_getCpuWatchdogEndInit>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073d6 <IfxScuWdt_getCpuWatchdogEndInit>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
800073a2:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073a6:	16 07       	and %d15,7
=======
80007346:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000734a:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073d6:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073da:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
<<<<<<< HEAD
<<<<<<< HEAD
800073a8:	53 cf 20 f0 	mul %d15,%d15,12
800073ac:	60 f2       	mov.a %a2,%d15
800073ae:	d9 2f 00 46 	lea %a15,[%a2]24832
800073b2:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
8000734c:	53 cf 20 f0 	mul %d15,%d15,12
80007350:	60 f2       	mov.a %a2,%d15
80007352:	d9 2f 00 46 	lea %a15,[%a2]24832
80007356:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073dc:	53 cf 20 f0 	mul %d15,%d15,12
800073e0:	60 f2       	mov.a %a2,%d15
800073e2:	d9 2f 00 46 	lea %a15,[%a2]24832
800073e6:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
<<<<<<< HEAD
<<<<<<< HEAD
800073b6:	48 02       	ld.w %d2,[%a15]0
=======
800073ea:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
800073ec:	8f 12 00 21 	and %d2,%d2,1
800073f0:	00 90       	ret 

<<<<<<< HEAD
800073be <IfxScuWdt_getSafetyWatchdogPassword>:
=======
8000735a:	48 02       	ld.w %d2,[%a15]0
}
8000735c:	8f 12 00 21 	and %d2,%d2,1
80007360:	00 90       	ret 

80007362 <IfxScuWdt_getSafetyWatchdogPassword>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073f2 <IfxScuWdt_getSafetyWatchdogPassword>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
<<<<<<< HEAD
<<<<<<< HEAD
800073be:	91 30 00 ff 	movh.a %a15,61443
800073c2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800073c6:	48 02       	ld.w %d2,[%a15]0
800073c8:	37 02 6e 21 	extr.u %d2,%d2,2,14
=======
80007362:	91 30 00 ff 	movh.a %a15,61443
80007366:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000736a:	48 02       	ld.w %d2,[%a15]0
8000736c:	37 02 6e 21 	extr.u %d2,%d2,2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800073f2:	91 30 00 ff 	movh.a %a15,61443
800073f6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800073fa:	48 02       	ld.w %d2,[%a15]0
800073fc:	37 02 6e 21 	extr.u %d2,%d2,2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
<<<<<<< HEAD
<<<<<<< HEAD
800073cc:	8f f2 83 21 	xor %d2,%d2,63
800073d0:	00 90       	ret 

800073d2 <IfxScuWdt_initConfig>:
=======
80007370:	8f f2 83 21 	xor %d2,%d2,63
80007374:	00 90       	ret 

80007376 <IfxScuWdt_initConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007400:	8f f2 83 21 	xor %d2,%d2,63
80007404:	00 90       	ret 

80007406 <IfxScuWdt_initConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
<<<<<<< HEAD
<<<<<<< HEAD
800073d2:	da 3c       	mov %d15,60
800073d4:	ac 40       	st.h [%a4]0,%d15
=======
80007406:	da 3c       	mov %d15,60
80007408:	ac 40       	st.h [%a4]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->reload                        = 0xFFFC;
8000740a:	82 cf       	mov %d15,-4
8000740c:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000740e:	82 0f       	mov %d15,0
80007410:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
80007412:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007414:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007416:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007418:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
8000741a:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
8000741c:	2c 4a       	st.b [%a4]10,%d15
8000741e:	00 90       	ret 

<<<<<<< HEAD
800073ec <IfxScuWdt_setCpuEndinit>:
=======
80007376:	da 3c       	mov %d15,60
80007378:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
8000737a:	82 cf       	mov %d15,-4
8000737c:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000737e:	82 0f       	mov %d15,0
80007380:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
80007382:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007384:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007386:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007388:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
8000738a:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
8000738c:	2c 4a       	st.b [%a4]10,%d15
8000738e:	00 90       	ret 

80007390 <IfxScuWdt_setCpuEndinit>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007420 <IfxScuWdt_setCpuEndinit>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
800073ec:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073f0:	16 07       	and %d15,7
=======
80007390:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007394:	16 07       	and %d15,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007420:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007424:	16 07       	and %d15,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
<<<<<<< HEAD
<<<<<<< HEAD
800073f2:	53 cf 20 f0 	mul %d15,%d15,12
800073f6:	06 24       	sh %d4,2
800073f8:	60 f2       	mov.a %a2,%d15
800073fa:	d9 2f 00 46 	lea %a15,[%a2]24832
800073fe:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
80007396:	53 cf 20 f0 	mul %d15,%d15,12
8000739a:	06 24       	sh %d4,2
8000739c:	60 f2       	mov.a %a2,%d15
8000739e:	d9 2f 00 46 	lea %a15,[%a2]24832
800073a2:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007426:	53 cf 20 f0 	mul %d15,%d15,12
8000742a:	06 24       	sh %d4,2
8000742c:	60 f2       	mov.a %a2,%d15
8000742e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007432:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
80007402:	4c f0       	ld.w %d15,[%a15]0
80007404:	2e 16       	jz.t %d15,1,80007410 <IfxScuWdt_setCpuEndinit+0x24>
=======
800073a6:	4c f0       	ld.w %d15,[%a15]0
800073a8:	2e 16       	jz.t %d15,1,800073b4 <IfxScuWdt_setCpuEndinit+0x24>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007436:	4c f0       	ld.w %d15,[%a15]0
80007438:	2e 16       	jz.t %d15,1,80007444 <IfxScuWdt_setCpuEndinit+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007406:	4c f0       	ld.w %d15,[%a15]0
80007408:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
800073aa:	4c f0       	ld.w %d15,[%a15]0
800073ac:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000743a:	4c f0       	ld.w %d15,[%a15]0
8000743c:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000740c:	a6 4f       	or %d15,%d4
=======
800073b0:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007440:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
8000740e:	68 0f       	st.w [%a15]0,%d15
=======
800073b2:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007442:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
80007410:	4c f0       	ld.w %d15,[%a15]0
80007412:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
=======
800073b4:	4c f0       	ld.w %d15,[%a15]0
800073b6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007444:	4c f0       	ld.w %d15,[%a15]0
80007446:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007416:	a6 f4       	or %d4,%d15
=======
800073ba:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000744a:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
80007418:	68 04       	st.w [%a15]0,%d4
=======
800073bc:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000744c:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
<<<<<<< HEAD
<<<<<<< HEAD
8000741a:	4c f0       	ld.w %d15,[%a15]0
8000741c:	6f 0f ff 7f 	jz.t %d15,0,8000741a <IfxScuWdt_setCpuEndinit+0x2e>
=======
8000744e:	4c f0       	ld.w %d15,[%a15]0
80007450:	6f 0f ff 7f 	jz.t %d15,0,8000744e <IfxScuWdt_setCpuEndinit+0x2e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
80007454:	00 90       	ret 

<<<<<<< HEAD
80007422 <IfxScuWdt_initCpuWatchdog>:
=======
800073be:	4c f0       	ld.w %d15,[%a15]0
800073c0:	6f 0f ff 7f 	jz.t %d15,0,800073be <IfxScuWdt_setCpuEndinit+0x2e>
}
800073c4:	00 90       	ret 

800073c6 <IfxScuWdt_initCpuWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007456 <IfxScuWdt_initCpuWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007422:	54 42       	ld.w %d2,[%a4]
=======
80007456:	54 42       	ld.w %d2,[%a4]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con1.U = 0;
80007458:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
<<<<<<< HEAD
80007426:	6f 12 0b 00 	jz.t %d2,1,8000743c <IfxScuWdt_initCpuWatchdog+0x1a>
=======
800073c6:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800073c8:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800073ca:	6f 12 0b 00 	jz.t %d2,1,800073e0 <IfxScuWdt_initCpuWatchdog+0x1a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000745a:	6f 12 0b 00 	jz.t %d2,1,80007470 <IfxScuWdt_initCpuWatchdog+0x1a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000742a:	b7 12 02 20 	insert %d2,%d2,1,0,2
=======
8000745e:	b7 12 02 20 	insert %d2,%d2,1,0,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con0.B.PW     ^= 0x003F;
80007462:	37 02 6e 31 	extr.u %d3,%d2,2,14
80007466:	8f f3 83 31 	xor %d3,%d3,63
8000746a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
<<<<<<< HEAD
8000743a:	74 42       	st.w [%a4],%d2
=======
800073ce:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800073d2:	37 02 6e 31 	extr.u %d3,%d2,2,14
800073d6:	8f f3 83 31 	xor %d3,%d3,63
800073da:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800073de:	74 42       	st.w [%a4],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000746e:	74 42       	st.w [%a4],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
<<<<<<< HEAD
<<<<<<< HEAD
8000743c:	94 53       	ld.h %d3,[%a5]
=======
800073e0:	94 53       	ld.h %d3,[%a5]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007470:	94 53       	ld.h %d3,[%a5]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000743e:	8f 12 c0 21 	andn %d2,%d2,1
=======
80007472:	8f 12 c0 21 	andn %d2,%d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con0.B.LCK     = 1;
80007476:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000747a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
8000747e:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007482:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007486:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
<<<<<<< HEAD
80007454:	54 42       	ld.w %d2,[%a4]
80007456:	6f 02 ff ff 	jnz.t %d2,0,80007454 <IfxScuWdt_initCpuWatchdog+0x32>
=======
800073e2:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800073e6:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800073ea:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800073ee:	b9 53 02 00 	ld.hu %d3,[%a5]2
800073f2:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800073f6:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800073f8:	54 42       	ld.w %d2,[%a4]
800073fa:	6f 02 ff ff 	jnz.t %d2,0,800073f8 <IfxScuWdt_initCpuWatchdog+0x32>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007488:	54 42       	ld.w %d2,[%a4]
8000748a:	6f 02 ff ff 	jnz.t %d2,0,80007488 <IfxScuWdt_initCpuWatchdog+0x32>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
<<<<<<< HEAD
<<<<<<< HEAD
8000745a:	39 52 04 00 	ld.bu %d2,[%a5]4
8000745e:	df 12 0a 00 	jeq %d2,1,80007472 <IfxScuWdt_initCpuWatchdog+0x50>
80007462:	76 26       	jz %d2,8000746e <IfxScuWdt_initCpuWatchdog+0x4c>
=======
800073fe:	39 52 04 00 	ld.bu %d2,[%a5]4
80007402:	df 12 0a 00 	jeq %d2,1,80007416 <IfxScuWdt_initCpuWatchdog+0x50>
80007406:	76 26       	jz %d2,80007412 <IfxScuWdt_initCpuWatchdog+0x4c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000748e:	39 52 04 00 	ld.bu %d2,[%a5]4
80007492:	df 12 0a 00 	jeq %d2,1,800074a6 <IfxScuWdt_initCpuWatchdog+0x50>
80007496:	76 26       	jz %d2,800074a2 <IfxScuWdt_initCpuWatchdog+0x4c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007464:	8b 22 20 22 	ne %d2,%d2,2
80007468:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
8000746c:	3c 07       	j 8000747a <IfxScuWdt_initCpuWatchdog+0x58>
=======
80007408:	8b 22 20 22 	ne %d2,%d2,2
8000740c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007410:	3c 07       	j 8000741e <IfxScuWdt_initCpuWatchdog+0x58>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007498:	8b 22 20 22 	ne %d2,%d2,2
8000749c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800074a0:	3c 07       	j 800074ae <IfxScuWdt_initCpuWatchdog+0x58>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000746e:	82 0f       	mov %d15,0
=======
800074a2:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
800074a4:	3c 05       	j 800074ae <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800074a6:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
<<<<<<< HEAD
80007476:	8f 0f c2 f1 	andn %d15,%d15,32
=======
80007412:	82 0f       	mov %d15,0
        break;
80007414:	3c 05       	j 8000741e <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007416:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000741a:	8f 0f c2 f1 	andn %d15,%d15,32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800074aa:	8f 0f c2 f1 	andn %d15,%d15,32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000747a:	39 52 05 00 	ld.bu %d2,[%a5]5
8000747e:	8b 02 20 22 	ne %d2,%d2,0
80007482:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
=======
800074ae:	39 52 05 00 	ld.bu %d2,[%a5]5
800074b2:	8b 02 20 22 	ne %d2,%d2,0
800074b6:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
800074ba:	39 52 06 00 	ld.bu %d2,[%a5]6
800074be:	8b 02 20 22 	ne %d2,%d2,0
800074c2:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
800074c6:	39 52 07 00 	ld.bu %d2,[%a5]7
800074ca:	8b 02 20 22 	ne %d2,%d2,0
800074ce:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
800074d2:	39 52 08 00 	ld.bu %d2,[%a5]8
800074d6:	8b 02 20 22 	ne %d2,%d2,0
800074da:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
800074de:	39 52 09 00 	ld.bu %d2,[%a5]9
800074e2:	8b 02 20 22 	ne %d2,%d2,0
800074e6:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
800074ea:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
800074ec:	b9 54 00 00 	ld.hu %d4,[%a5]0
800074f0:	1d ff 98 ff 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
800074c0 <IfxScuWdt_serviceCpuWatchdog>:
=======
8000741e:	39 52 05 00 	ld.bu %d2,[%a5]5
80007422:	8b 02 20 22 	ne %d2,%d2,0
80007426:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
8000742a:	39 52 06 00 	ld.bu %d2,[%a5]6
8000742e:	8b 02 20 22 	ne %d2,%d2,0
80007432:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
80007436:	39 52 07 00 	ld.bu %d2,[%a5]7
8000743a:	8b 02 20 22 	ne %d2,%d2,0
8000743e:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
80007442:	39 52 08 00 	ld.bu %d2,[%a5]8
80007446:	8b 02 20 22 	ne %d2,%d2,0
8000744a:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
8000744e:	39 52 09 00 	ld.bu %d2,[%a5]9
80007452:	8b 02 20 22 	ne %d2,%d2,0
80007456:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000745a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
8000745c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007460:	1d ff 98 ff 	j 80007390 <IfxScuWdt_setCpuEndinit>

80007464 <IfxScuWdt_serviceCpuWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800074f4 <IfxScuWdt_serviceCpuWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
<<<<<<< HEAD
<<<<<<< HEAD
800074c0:	1d ff 96 ff 	j 800073ec <IfxScuWdt_setCpuEndinit>

800074c4 <IfxScuWdt_setSafetyEndinit>:
=======
80007464:	1d ff 96 ff 	j 80007390 <IfxScuWdt_setCpuEndinit>

80007468 <IfxScuWdt_setSafetyEndinit>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800074f4:	1d ff 96 ff 	j 80007420 <IfxScuWdt_setCpuEndinit>

800074f8 <IfxScuWdt_setSafetyEndinit>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
<<<<<<< HEAD
<<<<<<< HEAD
800074c4:	91 30 00 ff 	movh.a %a15,61443
800074c8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800074cc:	4c f0       	ld.w %d15,[%a15]0
800074ce:	06 24       	sh %d4,2
800074d0:	2e 16       	jz.t %d15,1,800074dc <IfxScuWdt_setSafetyEndinit+0x18>
=======
80007468:	91 30 00 ff 	movh.a %a15,61443
8000746c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007470:	4c f0       	ld.w %d15,[%a15]0
80007472:	06 24       	sh %d4,2
80007474:	2e 16       	jz.t %d15,1,80007480 <IfxScuWdt_setSafetyEndinit+0x18>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800074f8:	91 30 00 ff 	movh.a %a15,61443
800074fc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007500:	4c f0       	ld.w %d15,[%a15]0
80007502:	06 24       	sh %d4,2
80007504:	2e 16       	jz.t %d15,1,80007510 <IfxScuWdt_setSafetyEndinit+0x18>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800074d2:	4c f0       	ld.w %d15,[%a15]0
800074d4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
=======
80007476:	4c f0       	ld.w %d15,[%a15]0
80007478:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007506:	4c f0       	ld.w %d15,[%a15]0
80007508:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800074d8:	a6 4f       	or %d15,%d4
=======
8000747c:	a6 4f       	or %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000750c:	a6 4f       	or %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800074da:	68 0f       	st.w [%a15]0,%d15
=======
8000747e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000750e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
800074dc:	91 30 00 ff 	movh.a %a15,61443
800074e0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800074e4:	4c f0       	ld.w %d15,[%a15]0
800074e6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
=======
80007480:	91 30 00 ff 	movh.a %a15,61443
80007484:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007488:	4c f0       	ld.w %d15,[%a15]0
8000748a:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007510:	91 30 00 ff 	movh.a %a15,61443
80007514:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007518:	4c f0       	ld.w %d15,[%a15]0
8000751a:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800074ea:	a6 f4       	or %d4,%d15
=======
8000748e:	a6 f4       	or %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000751e:	a6 f4       	or %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
<<<<<<< HEAD
<<<<<<< HEAD
800074ec:	68 04       	st.w [%a15]0,%d4
=======
80007490:	68 04       	st.w [%a15]0,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007520:	68 04       	st.w [%a15]0,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
<<<<<<< HEAD
<<<<<<< HEAD
800074ee:	4c f0       	ld.w %d15,[%a15]0
800074f0:	6f 0f ff 7f 	jz.t %d15,0,800074ee <IfxScuWdt_setSafetyEndinit+0x2a>
=======
80007492:	4c f0       	ld.w %d15,[%a15]0
80007494:	6f 0f ff 7f 	jz.t %d15,0,80007492 <IfxScuWdt_setSafetyEndinit+0x2a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007522:	4c f0       	ld.w %d15,[%a15]0
80007524:	6f 0f ff 7f 	jz.t %d15,0,80007522 <IfxScuWdt_setSafetyEndinit+0x2a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
<<<<<<< HEAD
<<<<<<< HEAD
800074f4:	00 90       	ret 

800074f6 <IfxScuWdt_initSafetyWatchdog>:
=======
80007498:	00 90       	ret 

8000749a <IfxScuWdt_initSafetyWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007528:	00 90       	ret 

8000752a <IfxScuWdt_initSafetyWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800074f6:	54 42       	ld.w %d2,[%a4]
=======
8000752a:	54 42       	ld.w %d2,[%a4]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con1.U = 0;
8000752c:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
<<<<<<< HEAD
800074fa:	6f 12 0b 00 	jz.t %d2,1,80007510 <IfxScuWdt_initSafetyWatchdog+0x1a>
=======
8000749a:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
8000749c:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
8000749e:	6f 12 0b 00 	jz.t %d2,1,800074b4 <IfxScuWdt_initSafetyWatchdog+0x1a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000752e:	6f 12 0b 00 	jz.t %d2,1,80007544 <IfxScuWdt_initSafetyWatchdog+0x1a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800074fe:	b7 12 02 20 	insert %d2,%d2,1,0,2
=======
80007532:	b7 12 02 20 	insert %d2,%d2,1,0,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con0.B.PW     ^= 0x003F;
80007536:	37 02 6e 31 	extr.u %d3,%d2,2,14
8000753a:	8f f3 83 31 	xor %d3,%d3,63
8000753e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
<<<<<<< HEAD
8000750e:	74 42       	st.w [%a4],%d2
=======
800074a2:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800074a6:	37 02 6e 31 	extr.u %d3,%d2,2,14
800074aa:	8f f3 83 31 	xor %d3,%d3,63
800074ae:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800074b2:	74 42       	st.w [%a4],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007542:	74 42       	st.w [%a4],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
<<<<<<< HEAD
<<<<<<< HEAD
80007510:	94 53       	ld.h %d3,[%a5]
=======
800074b4:	94 53       	ld.h %d3,[%a5]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007544:	94 53       	ld.h %d3,[%a5]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80007512:	8f 12 c0 21 	andn %d2,%d2,1
=======
80007546:	8f 12 c0 21 	andn %d2,%d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con0.B.LCK     = 1;
8000754a:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000754e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
80007552:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007556:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
8000755a:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
<<<<<<< HEAD
80007528:	54 42       	ld.w %d2,[%a4]
8000752a:	6f 02 ff ff 	jnz.t %d2,0,80007528 <IfxScuWdt_initSafetyWatchdog+0x32>
=======
800074b6:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800074ba:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800074be:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800074c2:	b9 53 02 00 	ld.hu %d3,[%a5]2
800074c6:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800074ca:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800074cc:	54 42       	ld.w %d2,[%a4]
800074ce:	6f 02 ff ff 	jnz.t %d2,0,800074cc <IfxScuWdt_initSafetyWatchdog+0x32>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000755c:	54 42       	ld.w %d2,[%a4]
8000755e:	6f 02 ff ff 	jnz.t %d2,0,8000755c <IfxScuWdt_initSafetyWatchdog+0x32>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
<<<<<<< HEAD
<<<<<<< HEAD
8000752e:	39 52 04 00 	ld.bu %d2,[%a5]4
80007532:	df 12 0a 00 	jeq %d2,1,80007546 <IfxScuWdt_initSafetyWatchdog+0x50>
80007536:	76 26       	jz %d2,80007542 <IfxScuWdt_initSafetyWatchdog+0x4c>
=======
800074d2:	39 52 04 00 	ld.bu %d2,[%a5]4
800074d6:	df 12 0a 00 	jeq %d2,1,800074ea <IfxScuWdt_initSafetyWatchdog+0x50>
800074da:	76 26       	jz %d2,800074e6 <IfxScuWdt_initSafetyWatchdog+0x4c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007562:	39 52 04 00 	ld.bu %d2,[%a5]4
80007566:	df 12 0a 00 	jeq %d2,1,8000757a <IfxScuWdt_initSafetyWatchdog+0x50>
8000756a:	76 26       	jz %d2,80007576 <IfxScuWdt_initSafetyWatchdog+0x4c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007538:	8b 22 20 22 	ne %d2,%d2,2
8000753c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007540:	3c 07       	j 8000754e <IfxScuWdt_initSafetyWatchdog+0x58>
=======
800074dc:	8b 22 20 22 	ne %d2,%d2,2
800074e0:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800074e4:	3c 07       	j 800074f2 <IfxScuWdt_initSafetyWatchdog+0x58>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000756c:	8b 22 20 22 	ne %d2,%d2,2
80007570:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007574:	3c 07       	j 80007582 <IfxScuWdt_initSafetyWatchdog+0x58>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80007542:	82 0f       	mov %d15,0
=======
80007576:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        break;
80007578:	3c 05       	j 80007582 <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
8000757a:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
<<<<<<< HEAD
8000754a:	8f 0f c2 f1 	andn %d15,%d15,32
=======
800074e6:	82 0f       	mov %d15,0
        break;
800074e8:	3c 05       	j 800074f2 <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800074ea:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
800074ee:	8f 0f c2 f1 	andn %d15,%d15,32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000757e:	8f 0f c2 f1 	andn %d15,%d15,32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000754e:	39 52 05 00 	ld.bu %d2,[%a5]5
80007552:	8b 02 20 22 	ne %d2,%d2,0
80007556:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
=======
80007582:	39 52 05 00 	ld.bu %d2,[%a5]5
80007586:	8b 02 20 22 	ne %d2,%d2,0
8000758a:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
8000758e:	39 52 06 00 	ld.bu %d2,[%a5]6
80007592:	8b 02 20 22 	ne %d2,%d2,0
80007596:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
8000759a:	39 52 07 00 	ld.bu %d2,[%a5]7
8000759e:	8b 02 20 22 	ne %d2,%d2,0
800075a2:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
800075a6:	39 52 08 00 	ld.bu %d2,[%a5]8
800075aa:	8b 02 20 22 	ne %d2,%d2,0
800075ae:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
800075b2:	39 52 09 00 	ld.bu %d2,[%a5]9
800075b6:	8b 02 20 22 	ne %d2,%d2,0
800075ba:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
800075be:	39 52 0a 00 	ld.bu %d2,[%a5]10
800075c2:	8b 02 00 22 	eq %d2,%d2,0
800075c6:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
800075ca:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
800075cc:	b9 54 00 00 	ld.hu %d4,[%a5]0
800075d0:	1d ff 94 ff 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

<<<<<<< HEAD
800075a0 <IfxScuWdt_serviceSafetyWatchdog>:
=======
800074f2:	39 52 05 00 	ld.bu %d2,[%a5]5
800074f6:	8b 02 20 22 	ne %d2,%d2,0
800074fa:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
800074fe:	39 52 06 00 	ld.bu %d2,[%a5]6
80007502:	8b 02 20 22 	ne %d2,%d2,0
80007506:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
8000750a:	39 52 07 00 	ld.bu %d2,[%a5]7
8000750e:	8b 02 20 22 	ne %d2,%d2,0
80007512:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
80007516:	39 52 08 00 	ld.bu %d2,[%a5]8
8000751a:	8b 02 20 22 	ne %d2,%d2,0
8000751e:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
80007522:	39 52 09 00 	ld.bu %d2,[%a5]9
80007526:	8b 02 20 22 	ne %d2,%d2,0
8000752a:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
8000752e:	39 52 0a 00 	ld.bu %d2,[%a5]10
80007532:	8b 02 00 22 	eq %d2,%d2,0
80007536:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
8000753a:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
8000753c:	b9 54 00 00 	ld.hu %d4,[%a5]0
80007540:	1d ff 94 ff 	j 80007468 <IfxScuWdt_setSafetyEndinit>

80007544 <IfxScuWdt_serviceSafetyWatchdog>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800075d4 <IfxScuWdt_serviceSafetyWatchdog>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
<<<<<<< HEAD
<<<<<<< HEAD
800075a0:	1d ff 92 ff 	j 800074c4 <IfxScuWdt_setSafetyEndinit>

800075a4 <IfxScuWdt_enableWatchdogWithDebugger>:
=======
80007544:	1d ff 92 ff 	j 80007468 <IfxScuWdt_setSafetyEndinit>

80007548 <IfxScuWdt_enableWatchdogWithDebugger>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800075d4:	1d ff 92 ff 	j 800074f8 <IfxScuWdt_setSafetyEndinit>

800075d8 <IfxScuWdt_enableWatchdogWithDebugger>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
<<<<<<< HEAD
<<<<<<< HEAD
800075a4:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
800075a8:	2e 07       	jz.t %d15,0,800075b6 <IfxScuWdt_enableWatchdogWithDebugger+0x12>
=======
80007548:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
8000754c:	2e 07       	jz.t %d15,0,8000755a <IfxScuWdt_enableWatchdogWithDebugger+0x12>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800075d8:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
800075dc:	2e 07       	jz.t %d15,0,800075ea <IfxScuWdt_enableWatchdogWithDebugger+0x12>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
<<<<<<< HEAD
<<<<<<< HEAD
800075aa:	3b 00 00 f3 	mov %d15,12288
800075ae:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
=======
8000754e:	3b 00 00 f3 	mov %d15,12288
80007552:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800075de:	3b 00 00 f3 	mov %d15,12288
800075e2:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800075b2:	82 0f       	mov %d15,0
800075b4:	3c 11       	j 800075d6 <IfxScuWdt_enableWatchdogWithDebugger+0x32>
=======
80007556:	82 0f       	mov %d15,0
80007558:	3c 11       	j 8000757a <IfxScuWdt_enableWatchdogWithDebugger+0x32>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800075e6:	82 0f       	mov %d15,0
800075e8:	3c 11       	j 8000760a <IfxScuWdt_enableWatchdogWithDebugger+0x32>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
<<<<<<< HEAD
<<<<<<< HEAD
800075b6:	3b 10 0a 20 	mov %d2,161
800075ba:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
=======
800075ea:	3b 10 0a 20 	mov %d2,161
800075ee:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        *oecPtr = 0x5E;
800075f2:	da 5e       	mov %d15,94
800075f4:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
800075f8:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
800075fc:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
<<<<<<< HEAD
800075cc:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
=======
8000755a:	3b 10 0a 20 	mov %d2,161
8000755e:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
80007562:	da 5e       	mov %d15,94
80007564:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
80007568:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
8000756c:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
80007570:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007600:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
<<<<<<< HEAD
<<<<<<< HEAD
800075d0:	6f 0f ed ff 	jnz.t %d15,0,800075aa <IfxScuWdt_enableWatchdogWithDebugger+0x6>
=======
80007574:	6f 0f ed ff 	jnz.t %d15,0,8000754e <IfxScuWdt_enableWatchdogWithDebugger+0x6>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007604:	6f 0f ed ff 	jnz.t %d15,0,800075de <IfxScuWdt_enableWatchdogWithDebugger+0x6>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800075d4:	82 1f       	mov %d15,1
=======
80007578:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007608:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
<<<<<<< HEAD
<<<<<<< HEAD
800075d6:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
800075da:	37 02 e1 23 	extr.u %d2,%d2,7,1
=======
8000757a:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000757e:	37 02 e1 23 	extr.u %d2,%d2,7,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000760a:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000760e:	37 02 e1 23 	extr.u %d2,%d2,7,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
<<<<<<< HEAD
<<<<<<< HEAD
800075de:	ab 1f 80 22 	sel %d2,%d2,%d15,1
800075e2:	00 90       	ret 

800075e4 <IfxVadc_Adc_deInitGroup>:
=======
80007582:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007586:	00 90       	ret 

80007588 <IfxVadc_Adc_deInitGroup>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007612:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007616:	00 90       	ret 

80007618 <IfxVadc_Adc_deInitGroup>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
800075e4:	0c 48       	ld.bu %d15,[%a4]8
800075e6:	d4 4c       	ld.a %a12,[%a4]
800075e8:	1b 0f 01 f0 	addi %d15,%d15,16
800075ec:	16 ff       	and %d15,255
800075ee:	99 4d 04 00 	ld.a %a13,[%a4]4
800075f2:	02 f4       	mov %d4,%d15
800075f4:	40 c4       	mov.aa %a4,%a12
800075f6:	6d ff 91 e8 	call 80004718 <IfxVadc_enableAccess>
=======
80007588:	0c 48       	ld.bu %d15,[%a4]8
8000758a:	d4 4c       	ld.a %a12,[%a4]
8000758c:	1b 0f 01 f0 	addi %d15,%d15,16
80007590:	16 ff       	and %d15,255
80007592:	99 4d 04 00 	ld.a %a13,[%a4]4
80007596:	02 f4       	mov %d4,%d15
80007598:	40 c4       	mov.aa %a4,%a12
8000759a:	6d ff 91 e8 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007618:	0c 48       	ld.bu %d15,[%a4]8
8000761a:	d4 4c       	ld.a %a12,[%a4]
8000761c:	1b 0f 01 f0 	addi %d15,%d15,16
80007620:	16 ff       	and %d15,255
80007622:	99 4d 04 00 	ld.a %a13,[%a4]4
80007626:	02 f4       	mov %d4,%d15
80007628:	40 c4       	mov.aa %a4,%a12
8000762a:	6d ff 91 e8 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
<<<<<<< HEAD
<<<<<<< HEAD
800075fa:	54 d2       	ld.w %d2,[%a13]
=======
8000762e:	54 d2       	ld.w %d2,[%a13]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007630:	40 c4       	mov.aa %a4,%a12
80007632:	8f 32 c0 21 	andn %d2,%d2,3
80007636:	74 d2       	st.w [%a13],%d2
80007638:	02 f4       	mov %d4,%d15
8000763a:	1d ff 6d e8 	j 80004714 <IfxVadc_disableAccess>

<<<<<<< HEAD
8000760a <IfxVadc_Adc_disableModule>:
=======
8000759e:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800075a0:	40 c4       	mov.aa %a4,%a12
800075a2:	8f 32 c0 21 	andn %d2,%d2,3
800075a6:	74 d2       	st.w [%a13],%d2
800075a8:	02 f4       	mov %d4,%d15
800075aa:	1d ff 6d e8 	j 80004684 <IfxVadc_disableAccess>

800075ae <IfxVadc_Adc_disableModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000763e <IfxVadc_Adc_disableModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000760a:	40 4f       	mov.aa %a15,%a4
=======
800075ae:	40 4f       	mov.aa %a15,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000763e:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
8000760c:	6d ff bb fe 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80007610:	02 24       	mov %d4,%d2
=======
800075b0:	6d ff bb fe 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800075b4:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007640:	6d ff bb fe 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80007644:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80007612:	02 2f       	mov %d15,%d2
=======
80007646:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_clearCpuEndinit(passwd);
80007648:	6d ff b7 fd 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
8000764c:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
8000761a:	02 f4       	mov %d4,%d15
=======
800075b6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800075b8:	6d ff b7 fd 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
800075bc:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
800075be:	02 f4       	mov %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000764e:	02 f4       	mov %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
<<<<<<< HEAD
<<<<<<< HEAD
8000761c:	8f 12 40 21 	or %d2,%d2,1
80007620:	68 02       	st.w [%a15]0,%d2
=======
80007650:	8f 12 40 21 	or %d2,%d2,1
80007654:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxScuWdt_setCpuEndinit(passwd);
80007656:	1d ff e5 fe 	j 80007420 <IfxScuWdt_setCpuEndinit>

<<<<<<< HEAD
80007626 <IfxVadc_Adc_getChannelConfig>:
=======
800075c0:	8f 12 40 21 	or %d2,%d2,1
800075c4:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
800075c6:	1d ff e5 fe 	j 80007390 <IfxScuWdt_setCpuEndinit>

800075ca <IfxVadc_Adc_getChannelConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000765a <IfxVadc_Adc_getChannelConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
<<<<<<< HEAD
<<<<<<< HEAD
80007626:	99 42 04 00 	ld.a %a2,[%a4]4
8000762a:	99 2d 04 00 	ld.a %a13,[%a2]4
=======
8000765a:	99 42 04 00 	ld.a %a2,[%a4]4
8000765e:	99 2d 04 00 	ld.a %a13,[%a2]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_ChannelId channelIndex = channel->channel;
80007662:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
<<<<<<< HEAD
80007632:	b5 52 14 00 	st.a [%a5]20,%a2
=======
800075ca:	99 42 04 00 	ld.a %a2,[%a4]4
800075ce:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
800075d2:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
800075d6:	b5 52 14 00 	st.a [%a5]20,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007666:	b5 52 14 00 	st.a [%a5]20,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
<<<<<<< HEAD
<<<<<<< HEAD
80007636:	1b 02 06 f0 	addi %d15,%d2,96
8000763a:	90 d2       	addsc.a %a2,%a13,%d15,2
=======
800075da:	1b 02 06 f0 	addi %d15,%d2,96
800075de:	90 d2       	addsc.a %a2,%a13,%d15,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000766a:	1b 02 06 f0 	addi %d15,%d2,96
8000766e:	90 d2       	addsc.a %a2,%a13,%d15,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
<<<<<<< HEAD
<<<<<<< HEAD
8000763c:	e9 52 0c 00 	st.b [%a5]12,%d2
80007640:	4c 20       	ld.w %d15,[%a2]0
=======
800075e0:	e9 52 0c 00 	st.b [%a5]12,%d2
800075e4:	4c 20       	ld.w %d15,[%a2]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007670:	e9 52 0c 00 	st.b [%a5]12,%d2
80007674:	4c 20       	ld.w %d15,[%a2]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007642:	40 4c       	mov.aa %a12,%a4
=======
800075e6:	40 4c       	mov.aa %a12,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007676:	40 4c       	mov.aa %a12,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80007644:	37 0f 62 30 	extr.u %d3,%d15,0,2
=======
800075e8:	37 0f 62 30 	extr.u %d3,%d15,0,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007678:	37 0f 62 30 	extr.u %d3,%d15,0,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007648:	40 5f       	mov.aa %a15,%a5
=======
800075ec:	40 5f       	mov.aa %a15,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000767c:	40 5f       	mov.aa %a15,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
<<<<<<< HEAD
<<<<<<< HEAD
8000764a:	e9 53 0d 00 	st.b [%a5]13,%d3
=======
8000767e:	e9 53 0d 00 	st.b [%a5]13,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
80007682:	37 0f e1 35 	extr.u %d3,%d15,11,1
80007686:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
8000768a:	37 0f 64 38 	extr.u %d3,%d15,16,4
8000768e:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
80007692:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007696:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007698:	37 0f 62 32 	extr.u %d3,%d15,4,2
8000769c:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
800076a0:	37 0f 62 33 	extr.u %d3,%d15,6,2
800076a4:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
800076a8:	37 0f 64 36 	extr.u %d3,%d15,12,4
800076ac:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
800076b0:	37 0f 62 34 	extr.u %d3,%d15,8,2
800076b4:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
800076b8:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
<<<<<<< HEAD
80007688:	37 0f e1 fa 	extr.u %d15,%d15,21,1
=======
800075ee:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
800075f2:	37 0f e1 35 	extr.u %d3,%d15,11,1
800075f6:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
800075fa:	37 0f 64 38 	extr.u %d3,%d15,16,4
800075fe:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
80007602:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007606:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007608:	37 0f 62 32 	extr.u %d3,%d15,4,2
8000760c:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
80007610:	37 0f 62 33 	extr.u %d3,%d15,6,2
80007614:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007618:	37 0f 64 36 	extr.u %d3,%d15,12,4
8000761c:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
80007620:	37 0f 62 34 	extr.u %d3,%d15,8,2
80007624:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007628:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
8000762c:	37 0f e1 fa 	extr.u %d15,%d15,21,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800076bc:	37 0f e1 fa 	extr.u %d15,%d15,21,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
<<<<<<< HEAD
<<<<<<< HEAD
8000768c:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007690:	2c 53       	st.b [%a5]3,%d15
=======
80007630:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007634:	2c 53       	st.b [%a5]3,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800076c0:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
800076c4:	2c 53       	st.b [%a5]3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007692:	4c d2       	ld.w %d15,[%a13]8
=======
800076c6:	4c d2       	ld.w %d15,[%a13]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
800076c8:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
800076cc:	8f 12 80 21 	xor %d2,%d2,1
800076d0:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
800076d4:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
<<<<<<< HEAD
800076a4:	79 4f 00 00 	ld.b %d15,[%a4]0
=======
80007636:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007638:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
8000763c:	8f 12 80 21 	xor %d2,%d2,1
80007640:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007644:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007648:	79 4f 00 00 	ld.b %d15,[%a4]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800076d8:	79 4f 00 00 	ld.b %d15,[%a4]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800076a8:	19 d2 20 40 	ld.w %d2,[%a13]288
800076ac:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800076ae:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
=======
8000764c:	19 d2 20 40 	ld.w %d2,[%a13]288
80007650:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
80007652:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800076dc:	19 d2 20 40 	ld.w %d2,[%a13]288
800076e0:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800076e2:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
<<<<<<< HEAD
<<<<<<< HEAD
800076b2:	39 28 08 00 	ld.bu %d8,[%a2]8
=======
800076e6:	39 28 08 00 	ld.bu %d8,[%a2]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800076ea:	0b 8f 10 48 	mov %e4,%d15,%d8
800076ee:	6d ff 60 e9 	call 800049ae <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800076f2:	54 22       	ld.w %d2,[%a2]
800076f4:	6f a2 0a 00 	jz.t %d2,10,80007708 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
800076f8:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
800076fa:	4c 20       	ld.w %d15,[%a2]0
800076fc:	16 ff       	and %d15,255
800076fe:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
<<<<<<< HEAD
800076cc:	4c 20       	ld.w %d15,[%a2]0
800076ce:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800076d2:	3c 05       	j 800076dc <IfxVadc_Adc_getChannelConfig+0xb6>
=======
80007656:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000765a:	0b 8f 10 48 	mov %e4,%d15,%d8
8000765e:	6d ff 60 e9 	call 8000491e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007662:	54 22       	ld.w %d2,[%a2]
80007664:	6f a2 0a 00 	jz.t %d2,10,80007678 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
80007668:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
8000766a:	4c 20       	ld.w %d15,[%a2]0
8000766c:	16 ff       	and %d15,255
8000766e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
80007670:	4c 20       	ld.w %d15,[%a2]0
80007672:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007676:	3c 05       	j 80007680 <IfxVadc_Adc_getChannelConfig+0xb6>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007700:	4c 20       	ld.w %d15,[%a2]0
80007702:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007706:	3c 05       	j 80007710 <IfxVadc_Adc_getChannelConfig+0xb6>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
<<<<<<< HEAD
<<<<<<< HEAD
800076d4:	82 0f       	mov %d15,0
800076d6:	28 bf       	st.b [%a15]11,%d15
=======
80007708:	82 0f       	mov %d15,0
8000770a:	28 bf       	st.b [%a15]11,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->channelPriority     = (Ifx_Priority)0;
8000770c:	82 0f       	mov %d15,0
8000770e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
<<<<<<< HEAD
800076dc:	28 9f       	st.b [%a15]9,%d15
=======
80007678:	82 0f       	mov %d15,0
8000767a:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
8000767c:	82 0f       	mov %d15,0
8000767e:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
80007680:	28 9f       	st.b [%a15]9,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007710:	28 9f       	st.b [%a15]9,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
<<<<<<< HEAD
<<<<<<< HEAD
800076de:	0c ff       	ld.bu %d15,[%a15]15
800076e0:	79 c2 00 00 	ld.b %d2,[%a12]0
800076e4:	ff 8f 08 80 	jge.u %d15,8,800076f4 <IfxVadc_Adc_getChannelConfig+0xce>
=======
80007682:	0c ff       	ld.bu %d15,[%a15]15
80007684:	79 c2 00 00 	ld.b %d2,[%a12]0
80007688:	ff 8f 08 80 	jge.u %d15,8,80007698 <IfxVadc_Adc_getChannelConfig+0xce>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007712:	0c ff       	ld.bu %d15,[%a15]15
80007714:	79 c2 00 00 	ld.b %d2,[%a12]0
80007718:	ff 8f 08 80 	jge.u %d15,8,80007728 <IfxVadc_Adc_getChannelConfig+0xce>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800076e8:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800076ec:	06 22       	sh %d2,2
800076ee:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
800076f2:	3c 08       	j 80007702 <IfxVadc_Adc_getChannelConfig+0xdc>
=======
8000768c:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007690:	06 22       	sh %d2,2
80007692:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
80007696:	3c 08       	j 800076a6 <IfxVadc_Adc_getChannelConfig+0xdc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000771c:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007720:	06 22       	sh %d2,2
80007722:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
80007726:	3c 08       	j 80007736 <IfxVadc_Adc_getChannelConfig+0xdc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
<<<<<<< HEAD
<<<<<<< HEAD
800076f4:	9a 82       	add %d15,%d2,-8
=======
80007698:	9a 82       	add %d15,%d2,-8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007728:	9a 82       	add %d15,%d2,-8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
<<<<<<< HEAD
<<<<<<< HEAD
800076f6:	19 d3 34 40 	ld.w %d3,[%a13]308
800076fa:	8f 2f 00 20 	sh %d2,%d15,2
800076fe:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
=======
8000772a:	19 d3 34 40 	ld.w %d3,[%a13]308
8000772e:	8f 2f 00 20 	sh %d2,%d15,2
80007732:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
80007736:	16 ff       	and %d15,255
80007738:	0b 8f 10 48 	mov %e4,%d15,%d8
8000773c:	6d ff 39 e9 	call 800049ae <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
80007740:	54 22       	ld.w %d2,[%a2]
80007742:	6f a2 0a 00 	jz.t %d2,10,80007756 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
80007746:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
80007748:	4c 20       	ld.w %d15,[%a2]0
8000774a:	16 ff       	and %d15,255
8000774c:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
<<<<<<< HEAD
8000771a:	4c 20       	ld.w %d15,[%a2]0
8000771c:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007720:	3c 05       	j 8000772a <IfxVadc_Adc_getChannelConfig+0x104>
=======
8000769a:	19 d3 34 40 	ld.w %d3,[%a13]308
8000769e:	8f 2f 00 20 	sh %d2,%d15,2
800076a2:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
800076a6:	16 ff       	and %d15,255
800076a8:	0b 8f 10 48 	mov %e4,%d15,%d8
800076ac:	6d ff 39 e9 	call 8000491e <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800076b0:	54 22       	ld.w %d2,[%a2]
800076b2:	6f a2 0a 00 	jz.t %d2,10,800076c6 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
800076b6:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
800076b8:	4c 20       	ld.w %d15,[%a2]0
800076ba:	16 ff       	and %d15,255
800076bc:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
800076be:	4c 20       	ld.w %d15,[%a2]0
800076c0:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800076c4:	3c 05       	j 800076ce <IfxVadc_Adc_getChannelConfig+0x104>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000774e:	4c 20       	ld.w %d15,[%a2]0
80007750:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007754:	3c 05       	j 8000775e <IfxVadc_Adc_getChannelConfig+0x104>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
<<<<<<< HEAD
<<<<<<< HEAD
80007722:	82 0f       	mov %d15,0
80007724:	28 af       	st.b [%a15]10,%d15
=======
80007756:	82 0f       	mov %d15,0
80007758:	28 af       	st.b [%a15]10,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->resultPriority     = (Ifx_Priority)0;
8000775a:	82 0f       	mov %d15,0
8000775c:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
8000775e:	28 8f       	st.b [%a15]8,%d15
80007760:	00 90       	ret 

<<<<<<< HEAD
8000772e <IfxVadc_Adc_getChannelConversionTime>:
=======
800076c6:	82 0f       	mov %d15,0
800076c8:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
800076ca:	82 0f       	mov %d15,0
800076cc:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
800076ce:	28 8f       	st.b [%a15]8,%d15
800076d0:	00 90       	ret 

800076d2 <IfxVadc_Adc_getChannelConversionTime>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007762 <IfxVadc_Adc_getChannelConversionTime>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
<<<<<<< HEAD
<<<<<<< HEAD
8000772e:	cc 41       	ld.a %a15,[%a4]4
80007730:	c8 12       	ld.a %a2,[%a15]4
=======
800076d2:	cc 41       	ld.a %a15,[%a4]4
800076d4:	c8 12       	ld.a %a2,[%a15]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007762:	cc 41       	ld.a %a15,[%a4]4
80007764:	c8 12       	ld.a %a2,[%a15]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80007732:	79 4f 00 00 	ld.b %d15,[%a4]0
80007736:	08 8a       	ld.bu %d10,[%a15]8
80007738:	c8 0f       	ld.a %a15,[%a15]0
8000773a:	1b 0f 06 f0 	addi %d15,%d15,96
8000773e:	90 22       	addsc.a %a2,%a2,%d15,2
=======
800076d6:	79 4f 00 00 	ld.b %d15,[%a4]0
800076da:	08 8a       	ld.bu %d10,[%a15]8
800076dc:	c8 0f       	ld.a %a15,[%a15]0
800076de:	1b 0f 06 f0 	addi %d15,%d15,96
800076e2:	90 22       	addsc.a %a2,%a2,%d15,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007766:	79 4f 00 00 	ld.b %d15,[%a4]0
8000776a:	08 8a       	ld.bu %d10,[%a15]8
8000776c:	c8 0f       	ld.a %a15,[%a15]0
8000776e:	1b 0f 06 f0 	addi %d15,%d15,96
80007772:	90 22       	addsc.a %a2,%a2,%d15,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007740:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007742:	40 f4       	mov.aa %a4,%a15
=======
800076e4:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076e6:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007774:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007776:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007744:	02 49       	mov %d9,%d4
80007746:	54 28       	ld.w %d8,[%a2]
=======
80007778:	02 49       	mov %d9,%d4
8000777a:	54 28       	ld.w %d8,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
8000777c:	6d ff 9a e8 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>
80007780:	02 2f       	mov %d15,%d2
80007782:	6d ff b0 e8 	call 800048e2 <IfxVadc_getAdcModuleFrequency>
80007786:	8f 38 00 81 	and %d8,%d8,3
8000778a:	74 a9       	st.w [%sp],%d9
8000778c:	40 f4       	mov.aa %a4,%a15
8000778e:	0b a8 10 48 	mov %e4,%d8,%d10
80007792:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007796:	1d ff c1 e9 	j 80004b18 <IfxVadc_getChannelConversionTime>

<<<<<<< HEAD
80007766 <IfxVadc_Adc_getGroupConfig>:
=======
800076e8:	02 49       	mov %d9,%d4
800076ea:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800076ec:	6d ff 9a e8 	call 80004820 <IfxVadc_getAdcAnalogFrequency>
800076f0:	02 2f       	mov %d15,%d2
800076f2:	6d ff b0 e8 	call 80004852 <IfxVadc_getAdcModuleFrequency>
800076f6:	8f 38 00 81 	and %d8,%d8,3
800076fa:	74 a9       	st.w [%sp],%d9
800076fc:	40 f4       	mov.aa %a4,%a15
800076fe:	0b a8 10 48 	mov %e4,%d8,%d10
80007702:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007706:	1d ff c1 e9 	j 80004a88 <IfxVadc_getChannelConversionTime>

8000770a <IfxVadc_Adc_getGroupConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000779a <IfxVadc_Adc_getGroupConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
<<<<<<< HEAD
<<<<<<< HEAD
80007766:	d4 4d       	ld.a %a13,[%a4]
=======
8000770a:	d4 4d       	ld.a %a13,[%a4]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000779a:	d4 4d       	ld.a %a13,[%a4]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007768:	40 4e       	mov.aa %a14,%a4
=======
8000779c:	40 4e       	mov.aa %a14,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000779e:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
<<<<<<< HEAD
8000776e:	40 d4       	mov.aa %a4,%a13
=======
8000770c:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000770e:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007712:	40 d4       	mov.aa %a4,%a13
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077a2:	40 d4       	mov.aa %a4,%a13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007770:	40 5f       	mov.aa %a15,%a5
=======
80007714:	40 5f       	mov.aa %a15,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077a4:	40 5f       	mov.aa %a15,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
<<<<<<< HEAD
<<<<<<< HEAD
80007772:	6d ff 85 e8 	call 8000487c <IfxVadc_getAdcAnalogFrequency>
=======
800077a6:	6d ff 85 e8 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    config->groupId                    = group->groupId;
800077aa:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
<<<<<<< HEAD
80007778:	e8 0e       	st.a [%a15]0,%a14
=======
80007716:	6d ff 85 e8 	call 80004820 <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
8000771a:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
8000771c:	e8 0e       	st.a [%a15]0,%a14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077ac:	e8 0e       	st.a [%a15]0,%a14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
<<<<<<< HEAD
<<<<<<< HEAD
8000777a:	28 4f       	st.b [%a15]4,%d15
=======
8000771e:	28 4f       	st.b [%a15]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077ae:	28 4f       	st.b [%a15]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
<<<<<<< HEAD
<<<<<<< HEAD
8000777c:	4c c0       	ld.w %d15,[%a12]0
8000777e:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007782:	e9 ff 32 00 	st.b [%a15]50,%d15
80007786:	82 0f       	mov %d15,0
=======
80007720:	4c c0       	ld.w %d15,[%a12]0
80007722:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007726:	e9 ff 32 00 	st.b [%a15]50,%d15
8000772a:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077b0:	4c c0       	ld.w %d15,[%a12]0
800077b2:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
800077b6:	e9 ff 32 00 	st.b [%a15]50,%d15
800077ba:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
<<<<<<< HEAD
<<<<<<< HEAD
80007788:	1b 8f 00 30 	addi %d3,%d15,8
8000778c:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2
=======
8000772c:	1b 8f 00 30 	addi %d3,%d15,8
80007730:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077bc:	1b 8f 00 30 	addi %d3,%d15,8
800077c0:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
<<<<<<< HEAD
<<<<<<< HEAD
80007790:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007792:	54 23       	ld.w %d3,[%a2]
80007794:	37 03 63 34 	extr.u %d3,%d3,8,3
80007798:	e9 33 0c 00 	st.b [%a3]12,%d3
=======
80007734:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007736:	54 23       	ld.w %d3,[%a2]
80007738:	37 03 63 34 	extr.u %d3,%d3,8,3
8000773c:	e9 33 0c 00 	st.b [%a3]12,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077c4:	d0 f3       	addsc.a %a3,%a15,%d15,3
800077c6:	54 23       	ld.w %d3,[%a2]
800077c8:	37 03 63 34 	extr.u %d3,%d3,8,3
800077cc:	e9 33 0c 00 	st.b [%a3]12,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
<<<<<<< HEAD
<<<<<<< HEAD
8000779c:	54 23       	ld.w %d3,[%a2]
8000779e:	8f f3 01 31 	and %d3,%d3,31
=======
800077d0:	54 23       	ld.w %d3,[%a2]
800077d2:	8f f3 01 31 	and %d3,%d3,31
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (sampleTime > 16)
800077d6:	8b 13 61 42 	lt.u %d4,%d3,17
800077da:	f6 44       	jnz %d4,800077e2 <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
800077dc:	1b 13 ff 3f 	addi %d3,%d3,-15
800077e0:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
800077e2:	c2 23       	add %d3,2
800077e4:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
<<<<<<< HEAD
800077b4:	92 14       	add %d4,%d15,1
800077b6:	4b 23 51 30 	div.f %d3,%d3,%d2
800077ba:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
800077be:	74 23       	st.w [%a2],%d3
=======
80007740:	54 23       	ld.w %d3,[%a2]
80007742:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
80007746:	8b 13 61 42 	lt.u %d4,%d3,17
8000774a:	f6 44       	jnz %d4,80007752 <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
8000774c:	1b 13 ff 3f 	addi %d3,%d3,-15
80007750:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
80007752:	c2 23       	add %d3,2
80007754:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
80007758:	92 14       	add %d4,%d15,1
8000775a:	4b 23 51 30 	div.f %d3,%d3,%d2
8000775e:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
80007762:	74 23       	st.w [%a2],%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077e8:	92 14       	add %d4,%d15,1
800077ea:	4b 23 51 30 	div.f %d3,%d3,%d2
800077ee:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
800077f2:	74 23       	st.w [%a2],%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
<<<<<<< HEAD
<<<<<<< HEAD
800077c0:	1e 13       	jeq %d15,1,800077c6 <IfxVadc_Adc_getGroupConfig+0x60>
800077c2:	82 1f       	mov %d15,1
800077c4:	3c e2       	j 80007788 <IfxVadc_Adc_getGroupConfig+0x22>
=======
80007764:	1e 13       	jeq %d15,1,8000776a <IfxVadc_Adc_getGroupConfig+0x60>
80007766:	82 1f       	mov %d15,1
80007768:	3c e2       	j 8000772c <IfxVadc_Adc_getGroupConfig+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077f4:	1e 13       	jeq %d15,1,800077fa <IfxVadc_Adc_getGroupConfig+0x60>
800077f6:	82 1f       	mov %d15,1
800077f8:	3c e2       	j 800077bc <IfxVadc_Adc_getGroupConfig+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
<<<<<<< HEAD
<<<<<<< HEAD
800077c6:	19 c2 04 00 	ld.w %d2,[%a12]4
=======
8000776a:	19 c2 04 00 	ld.w %d2,[%a12]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077fa:	19 c2 04 00 	ld.w %d2,[%a12]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
800077ca:	ef 92 33 00 	jz.t %d2,25,80007830 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
800077ce:	e9 ff 34 00 	st.b [%a15]52,%d15
=======
8000776e:	ef 92 33 00 	jz.t %d2,25,800077d4 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
80007772:	e9 ff 34 00 	st.b [%a15]52,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800077fe:	ef 92 33 00 	jz.t %d2,25,80007864 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
80007802:	e9 ff 34 00 	st.b [%a15]52,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
<<<<<<< HEAD
<<<<<<< HEAD
800077d2:	19 c2 04 00 	ld.w %d2,[%a12]4
800077d6:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
800077da:	e9 f2 1e 00 	st.b [%a15]30,%d2
=======
80007776:	19 c2 04 00 	ld.w %d2,[%a12]4
8000777a:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000777e:	e9 f2 1e 00 	st.b [%a15]30,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007806:	19 c2 04 00 	ld.w %d2,[%a12]4
8000780a:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000780e:	e9 f2 1e 00 	st.b [%a15]30,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
<<<<<<< HEAD
<<<<<<< HEAD
800077de:	19 c2 04 00 	ld.w %d2,[%a12]4
800077e2:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
800077e6:	e9 f2 1f 00 	st.b [%a15]31,%d2
=======
80007782:	19 c2 04 00 	ld.w %d2,[%a12]4
80007786:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
8000778a:	e9 f2 1f 00 	st.b [%a15]31,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007812:	19 c2 04 00 	ld.w %d2,[%a12]4
80007816:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
8000781a:	e9 f2 1f 00 	st.b [%a15]31,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
<<<<<<< HEAD
<<<<<<< HEAD
800077ea:	19 c3 20 20 	ld.w %d3,[%a12]160
800077ee:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
800077f2:	e9 f3 1b 00 	st.b [%a15]27,%d3
=======
8000778e:	19 c3 20 20 	ld.w %d3,[%a12]160
80007792:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
80007796:	e9 f3 1b 00 	st.b [%a15]27,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000781e:	19 c3 20 20 	ld.w %d3,[%a12]160
80007822:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
80007826:	e9 f3 1b 00 	st.b [%a15]27,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
<<<<<<< HEAD
<<<<<<< HEAD
800077f6:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077fa:	8b f3 00 32 	eq %d3,%d3,15
800077fe:	37 02 e2 26 	extr.u %d2,%d2,13,2
=======
8000779a:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000779e:	8b f3 00 32 	eq %d3,%d3,15
800077a2:	37 02 e2 26 	extr.u %d2,%d2,13,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000782a:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000782e:	8b f3 00 32 	eq %d3,%d3,15
80007832:	37 02 e2 26 	extr.u %d2,%d2,13,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
<<<<<<< HEAD
<<<<<<< HEAD
80007802:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007806:	f6 35       	jnz %d3,80007810 <IfxVadc_Adc_getGroupConfig+0xaa>
=======
800077a6:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077aa:	f6 35       	jnz %d3,800077b4 <IfxVadc_Adc_getGroupConfig+0xaa>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007836:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000783a:	f6 35       	jnz %d3,80007844 <IfxVadc_Adc_getGroupConfig+0xaa>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
<<<<<<< HEAD
<<<<<<< HEAD
80007808:	19 cf 24 20 	ld.w %d15,[%a12]164
8000780c:	16 03       	and %d15,3
8000780e:	3c 02       	j 80007812 <IfxVadc_Adc_getGroupConfig+0xac>
=======
800077ac:	19 cf 24 20 	ld.w %d15,[%a12]164
800077b0:	16 03       	and %d15,3
800077b2:	3c 02       	j 800077b6 <IfxVadc_Adc_getGroupConfig+0xac>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000783c:	19 cf 24 20 	ld.w %d15,[%a12]164
80007840:	16 03       	and %d15,3
80007842:	3c 02       	j 80007846 <IfxVadc_Adc_getGroupConfig+0xac>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
<<<<<<< HEAD
<<<<<<< HEAD
80007810:	76 23       	jz %d2,80007816 <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007812:	e9 ff 1c 00 	st.b [%a15]28,%d15
=======
800077b4:	76 23       	jz %d2,800077ba <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800077b6:	e9 ff 1c 00 	st.b [%a15]28,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007844:	76 23       	jz %d2,8000784a <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007846:	e9 ff 1c 00 	st.b [%a15]28,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80007816:	19 cf 20 20 	ld.w %d15,[%a12]160
8000781a:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
8000781e:	e9 ff 1a 00 	st.b [%a15]26,%d15
=======
800077ba:	19 cf 20 20 	ld.w %d15,[%a12]160
800077be:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
800077c2:	e9 ff 1a 00 	st.b [%a15]26,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000784a:	19 cf 20 20 	ld.w %d15,[%a12]160
8000784e:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
80007852:	e9 ff 1a 00 	st.b [%a15]26,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
<<<<<<< HEAD
<<<<<<< HEAD
80007822:	19 cf 24 20 	ld.w %d15,[%a12]164
80007826:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
8000782a:	e9 ff 18 00 	st.b [%a15]24,%d15
8000782e:	3c 0c       	j 80007846 <IfxVadc_Adc_getGroupConfig+0xe0>
=======
800077c6:	19 cf 24 20 	ld.w %d15,[%a12]164
800077ca:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
800077ce:	e9 ff 18 00 	st.b [%a15]24,%d15
800077d2:	3c 0c       	j 800077ea <IfxVadc_Adc_getGroupConfig+0xe0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007856:	19 cf 24 20 	ld.w %d15,[%a12]164
8000785a:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
8000785e:	e9 ff 18 00 	st.b [%a15]24,%d15
80007862:	3c 0c       	j 8000787a <IfxVadc_Adc_getGroupConfig+0xe0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80007830:	82 0f       	mov %d15,0
80007832:	e9 ff 18 00 	st.b [%a15]24,%d15
=======
80007864:	82 0f       	mov %d15,0
80007866:	e9 ff 18 00 	st.b [%a15]24,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
8000786a:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
8000786e:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007872:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
<<<<<<< HEAD
80007842:	e9 ff 1b 00 	st.b [%a15]27,%d15
=======
800077d4:	82 0f       	mov %d15,0
800077d6:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800077da:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
800077de:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800077e2:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
800077e6:	e9 ff 1b 00 	st.b [%a15]27,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007876:	e9 ff 1b 00 	st.b [%a15]27,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
<<<<<<< HEAD
<<<<<<< HEAD
80007846:	4c c1       	ld.w %d15,[%a12]4
80007848:	37 0f 61 fc 	extr.u %d15,%d15,24,1
=======
8000787a:	4c c1       	ld.w %d15,[%a12]4
8000787c:	37 0f 61 fc 	extr.u %d15,%d15,24,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
80007880:	df 1f 30 80 	jne %d15,1,800078e0 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
<<<<<<< HEAD
80007850:	e9 ff 33 00 	st.b [%a15]51,%d15
=======
800077ea:	4c c1       	ld.w %d15,[%a12]4
800077ec:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
800077f0:	df 1f 30 80 	jne %d15,1,80007850 <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
800077f4:	e9 ff 33 00 	st.b [%a15]51,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007884:	e9 ff 33 00 	st.b [%a15]51,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
<<<<<<< HEAD
<<<<<<< HEAD
80007854:	19 c2 04 00 	ld.w %d2,[%a12]4
80007858:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
8000785c:	e9 f2 26 00 	st.b [%a15]38,%d2
=======
800077f8:	19 c2 04 00 	ld.w %d2,[%a12]4
800077fc:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
80007800:	e9 f2 26 00 	st.b [%a15]38,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007888:	19 c2 04 00 	ld.w %d2,[%a12]4
8000788c:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
80007890:	e9 f2 26 00 	st.b [%a15]38,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
<<<<<<< HEAD
<<<<<<< HEAD
80007860:	19 c2 04 00 	ld.w %d2,[%a12]4
80007864:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
80007868:	e9 f2 27 00 	st.b [%a15]39,%d2
=======
80007804:	19 c2 04 00 	ld.w %d2,[%a12]4
80007808:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
8000780c:	e9 f2 27 00 	st.b [%a15]39,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007894:	19 c2 04 00 	ld.w %d2,[%a12]4
80007898:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
8000789c:	e9 f2 27 00 	st.b [%a15]39,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
<<<<<<< HEAD
<<<<<<< HEAD
8000786c:	19 c3 00 20 	ld.w %d3,[%a12]128
80007870:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007874:	e9 f3 23 00 	st.b [%a15]35,%d3
=======
80007810:	19 c3 00 20 	ld.w %d3,[%a12]128
80007814:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007818:	e9 f3 23 00 	st.b [%a15]35,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800078a0:	19 c3 00 20 	ld.w %d3,[%a12]128
800078a4:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
800078a8:	e9 f3 23 00 	st.b [%a15]35,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
<<<<<<< HEAD
<<<<<<< HEAD
80007878:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000787c:	8b f3 00 32 	eq %d3,%d3,15
80007880:	37 02 e2 26 	extr.u %d2,%d2,13,2
=======
8000781c:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007820:	8b f3 00 32 	eq %d3,%d3,15
80007824:	37 02 e2 26 	extr.u %d2,%d2,13,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800078ac:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078b0:	8b f3 00 32 	eq %d3,%d3,15
800078b4:	37 02 e2 26 	extr.u %d2,%d2,13,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
<<<<<<< HEAD
<<<<<<< HEAD
80007884:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007888:	f6 35       	jnz %d3,80007892 <IfxVadc_Adc_getGroupConfig+0x12c>
=======
80007828:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000782c:	f6 35       	jnz %d3,80007836 <IfxVadc_Adc_getGroupConfig+0x12c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800078b8:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078bc:	f6 35       	jnz %d3,800078c6 <IfxVadc_Adc_getGroupConfig+0x12c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
<<<<<<< HEAD
<<<<<<< HEAD
8000788a:	19 cf 04 20 	ld.w %d15,[%a12]132
8000788e:	16 03       	and %d15,3
80007890:	3c 02       	j 80007894 <IfxVadc_Adc_getGroupConfig+0x12e>
=======
8000782e:	19 cf 04 20 	ld.w %d15,[%a12]132
80007832:	16 03       	and %d15,3
80007834:	3c 02       	j 80007838 <IfxVadc_Adc_getGroupConfig+0x12e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800078be:	19 cf 04 20 	ld.w %d15,[%a12]132
800078c2:	16 03       	and %d15,3
800078c4:	3c 02       	j 800078c8 <IfxVadc_Adc_getGroupConfig+0x12e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
<<<<<<< HEAD
<<<<<<< HEAD
80007892:	76 23       	jz %d2,80007898 <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007894:	e9 ff 24 00 	st.b [%a15]36,%d15
=======
80007836:	76 23       	jz %d2,8000783c <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007838:	e9 ff 24 00 	st.b [%a15]36,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800078c6:	76 23       	jz %d2,800078cc <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800078c8:	e9 ff 24 00 	st.b [%a15]36,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80007898:	19 cf 00 20 	ld.w %d15,[%a12]128
8000789c:	37 0f 64 f8 	extr.u %d15,%d15,16,4
=======
800078cc:	19 cf 00 20 	ld.w %d15,[%a12]128
800078d0:	37 0f 64 f8 	extr.u %d15,%d15,16,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
800078d4:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
<<<<<<< HEAD
800078a4:	82 0f       	mov %d15,0
800078a6:	e9 ff 20 00 	st.b [%a15]32,%d15
800078aa:	3c 0c       	j 800078c2 <IfxVadc_Adc_getGroupConfig+0x15c>
=======
8000783c:	19 cf 00 20 	ld.w %d15,[%a12]128
80007840:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
80007844:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
80007848:	82 0f       	mov %d15,0
8000784a:	e9 ff 20 00 	st.b [%a15]32,%d15
8000784e:	3c 0c       	j 80007866 <IfxVadc_Adc_getGroupConfig+0x15c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800078d8:	82 0f       	mov %d15,0
800078da:	e9 ff 20 00 	st.b [%a15]32,%d15
800078de:	3c 0c       	j 800078f6 <IfxVadc_Adc_getGroupConfig+0x15c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
800078ac:	82 0f       	mov %d15,0
800078ae:	e9 ff 20 00 	st.b [%a15]32,%d15
=======
800078e0:	82 0f       	mov %d15,0
800078e2:	e9 ff 20 00 	st.b [%a15]32,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800078e6:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
800078ea:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800078ee:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
<<<<<<< HEAD
800078be:	e9 ff 23 00 	st.b [%a15]35,%d15
=======
80007850:	82 0f       	mov %d15,0
80007852:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007856:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
8000785a:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000785e:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
80007862:	e9 ff 23 00 	st.b [%a15]35,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800078f2:	e9 ff 23 00 	st.b [%a15]35,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
<<<<<<< HEAD
<<<<<<< HEAD
800078c2:	4c c1       	ld.w %d15,[%a12]4
800078c4:	37 0f 61 fd 	extr.u %d15,%d15,26,1
=======
800078f6:	4c c1       	ld.w %d15,[%a12]4
800078f8:	37 0f 61 fd 	extr.u %d15,%d15,26,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
800078fc:	df 1f 33 80 	jne %d15,1,80007962 <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
<<<<<<< HEAD
800078cc:	e9 ff 35 00 	st.b [%a15]53,%d15
=======
80007866:	4c c1       	ld.w %d15,[%a12]4
80007868:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
8000786c:	df 1f 33 80 	jne %d15,1,800078d2 <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
80007870:	e9 ff 35 00 	st.b [%a15]53,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007900:	e9 ff 35 00 	st.b [%a15]53,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
<<<<<<< HEAD
<<<<<<< HEAD
800078d0:	19 c2 04 00 	ld.w %d2,[%a12]4
800078d4:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
800078d8:	e9 f2 2e 00 	st.b [%a15]46,%d2
=======
80007874:	19 c2 04 00 	ld.w %d2,[%a12]4
80007878:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
8000787c:	e9 f2 2e 00 	st.b [%a15]46,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007904:	19 c2 04 00 	ld.w %d2,[%a12]4
80007908:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
8000790c:	e9 f2 2e 00 	st.b [%a15]46,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
<<<<<<< HEAD
<<<<<<< HEAD
800078dc:	19 c2 04 00 	ld.w %d2,[%a12]4
800078e0:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
800078e4:	e9 f2 2f 00 	st.b [%a15]47,%d2
=======
80007880:	19 c2 04 00 	ld.w %d2,[%a12]4
80007884:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007888:	e9 f2 2f 00 	st.b [%a15]47,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007910:	19 c2 04 00 	ld.w %d2,[%a12]4
80007914:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007918:	e9 f2 2f 00 	st.b [%a15]47,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
<<<<<<< HEAD
<<<<<<< HEAD
800078e8:	19 d3 00 80 	ld.w %d3,[%a13]512
800078ec:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
800078f0:	e9 f3 2b 00 	st.b [%a15]43,%d3
=======
8000788c:	19 d3 00 80 	ld.w %d3,[%a13]512
80007890:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
80007894:	e9 f3 2b 00 	st.b [%a15]43,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000791c:	19 d3 00 80 	ld.w %d3,[%a13]512
80007920:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
80007924:	e9 f3 2b 00 	st.b [%a15]43,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
<<<<<<< HEAD
<<<<<<< HEAD
800078f4:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078f8:	8b f3 00 32 	eq %d3,%d3,15
800078fc:	37 02 e2 26 	extr.u %d2,%d2,13,2
=======
80007898:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000789c:	8b f3 00 32 	eq %d3,%d3,15
800078a0:	37 02 e2 26 	extr.u %d2,%d2,13,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007928:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000792c:	8b f3 00 32 	eq %d3,%d3,15
80007930:	37 02 e2 26 	extr.u %d2,%d2,13,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
<<<<<<< HEAD
<<<<<<< HEAD
80007900:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007904:	f6 35       	jnz %d3,8000790e <IfxVadc_Adc_getGroupConfig+0x1a8>
=======
800078a4:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078a8:	f6 35       	jnz %d3,800078b2 <IfxVadc_Adc_getGroupConfig+0x1a8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007934:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007938:	f6 35       	jnz %d3,80007942 <IfxVadc_Adc_getGroupConfig+0x1a8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
<<<<<<< HEAD
<<<<<<< HEAD
80007906:	19 df 04 80 	ld.w %d15,[%a13]516
8000790a:	16 03       	and %d15,3
8000790c:	3c 02       	j 80007910 <IfxVadc_Adc_getGroupConfig+0x1aa>
=======
800078aa:	19 df 04 80 	ld.w %d15,[%a13]516
800078ae:	16 03       	and %d15,3
800078b0:	3c 02       	j 800078b4 <IfxVadc_Adc_getGroupConfig+0x1aa>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000793a:	19 df 04 80 	ld.w %d15,[%a13]516
8000793e:	16 03       	and %d15,3
80007940:	3c 02       	j 80007944 <IfxVadc_Adc_getGroupConfig+0x1aa>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
<<<<<<< HEAD
<<<<<<< HEAD
8000790e:	76 23       	jz %d2,80007914 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007910:	e9 ff 2c 00 	st.b [%a15]44,%d15
=======
800078b2:	76 23       	jz %d2,800078b8 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800078b4:	e9 ff 2c 00 	st.b [%a15]44,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007942:	76 23       	jz %d2,80007948 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007944:	e9 ff 2c 00 	st.b [%a15]44,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80007914:	19 df 00 80 	ld.w %d15,[%a13]512
80007918:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
8000791c:	e9 ff 2a 00 	st.b [%a15]42,%d15
=======
800078b8:	19 df 00 80 	ld.w %d15,[%a13]512
800078bc:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
800078c0:	e9 ff 2a 00 	st.b [%a15]42,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007948:	19 df 00 80 	ld.w %d15,[%a13]512
8000794c:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
80007950:	e9 ff 2a 00 	st.b [%a15]42,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
<<<<<<< HEAD
<<<<<<< HEAD
80007920:	19 df 04 80 	ld.w %d15,[%a13]516
80007924:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
80007928:	e9 ff 28 00 	st.b [%a15]40,%d15
8000792c:	3c 0c       	j 80007944 <IfxVadc_Adc_getGroupConfig+0x1de>
=======
800078c4:	19 df 04 80 	ld.w %d15,[%a13]516
800078c8:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
800078cc:	e9 ff 28 00 	st.b [%a15]40,%d15
800078d0:	3c 0c       	j 800078e8 <IfxVadc_Adc_getGroupConfig+0x1de>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007954:	19 df 04 80 	ld.w %d15,[%a13]516
80007958:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
8000795c:	e9 ff 28 00 	st.b [%a15]40,%d15
80007960:	3c 0c       	j 80007978 <IfxVadc_Adc_getGroupConfig+0x1de>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
8000792e:	82 0f       	mov %d15,0
80007930:	e9 ff 28 00 	st.b [%a15]40,%d15
=======
80007962:	82 0f       	mov %d15,0
80007964:	e9 ff 28 00 	st.b [%a15]40,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007968:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
8000796c:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
80007970:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
<<<<<<< HEAD
80007940:	e9 ff 2b 00 	st.b [%a15]43,%d15
=======
800078d2:	82 0f       	mov %d15,0
800078d4:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800078d8:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
800078dc:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800078e0:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
800078e4:	e9 ff 2b 00 	st.b [%a15]43,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007974:	e9 ff 2b 00 	st.b [%a15]43,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
<<<<<<< HEAD
<<<<<<< HEAD
80007944:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
80007948:	39 e7 08 00 	ld.bu %d7,[%a14]8
8000794c:	8f 33 00 31 	and %d3,%d3,3
80007950:	02 72       	mov %d2,%d7
=======
800078e8:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
800078ec:	39 e7 08 00 	ld.bu %d7,[%a14]8
800078f0:	8f 33 00 31 	and %d3,%d3,3
800078f4:	02 72       	mov %d2,%d7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007978:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000797c:	39 e7 08 00 	ld.bu %d7,[%a14]8
80007980:	8f 33 00 31 	and %d3,%d3,3
80007984:	02 72       	mov %d2,%d7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80007952:	df 03 1f 00 	jeq %d3,0,80007990 <IfxVadc_Adc_getGroupConfig+0x22a>
=======
800078f6:	df 03 1f 00 	jeq %d3,0,80007934 <IfxVadc_Adc_getGroupConfig+0x22a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007986:	df 03 1f 00 	jeq %d3,0,800079c4 <IfxVadc_Adc_getGroupConfig+0x22a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
<<<<<<< HEAD
<<<<<<< HEAD
80007956:	7b 00 00 58 	movh %d5,32768
8000795a:	1b 85 db 50 	addi %d5,%d5,3512
8000795e:	13 87 20 55 	madd %d5,%d5,%d7,8
=======
800078fa:	7b 00 00 58 	movh %d5,32768
800078fe:	1b 45 d5 50 	addi %d5,%d5,3412
80007902:	13 87 20 55 	madd %d5,%d5,%d7,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000798a:	7b 00 00 58 	movh %d5,32768
8000798e:	1b 05 dd 50 	addi %d5,%d5,3536
80007992:	13 87 20 55 	madd %d5,%d5,%d7,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
<<<<<<< HEAD
<<<<<<< HEAD
80007962:	8b 47 60 42 	lt.u %d4,%d7,4
80007966:	82 02       	mov %d2,0
80007968:	ab 42 80 24 	sel %d2,%d4,%d2,4
=======
80007906:	8b 47 60 42 	lt.u %d4,%d7,4
8000790a:	82 02       	mov %d2,0
8000790c:	ab 42 80 24 	sel %d2,%d4,%d2,4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007996:	8b 47 60 42 	lt.u %d4,%d7,4
8000799a:	82 02       	mov %d2,0
8000799c:	ab 42 80 24 	sel %d2,%d4,%d2,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
<<<<<<< HEAD
<<<<<<< HEAD
8000796c:	1a 25       	add %d15,%d5,%d2
8000796e:	60 f4       	mov.a %a4,%d15
=======
80007910:	1a 25       	add %d15,%d5,%d2
80007912:	60 f4       	mov.a %a4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079a0:	1a 25       	add %d15,%d5,%d2
800079a2:	60 f4       	mov.a %a4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
<<<<<<< HEAD
<<<<<<< HEAD
80007970:	82 04       	mov %d4,0
=======
80007914:	82 04       	mov %d4,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079a4:	82 04       	mov %d4,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
<<<<<<< HEAD
<<<<<<< HEAD
80007972:	a0 32       	mov.a %a2,3
80007974:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
80007978:	8f f4 0f 61 	and %d6,%d4,255
8000797c:	14 35       	ld.bu %d5,[%a3]
8000797e:	5f 35 06 80 	jne %d5,%d3,8000798a <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007982:	42 62       	add %d2,%d6
80007984:	8f f2 0f 21 	and %d2,%d2,255
80007988:	3c 04       	j 80007990 <IfxVadc_Adc_getGroupConfig+0x22a>
8000798a:	c2 14       	add %d4,1
8000798c:	fc 24       	loop %a2,80007974 <IfxVadc_Adc_getGroupConfig+0x20e>
=======
80007916:	a0 32       	mov.a %a2,3
80007918:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
8000791c:	8f f4 0f 61 	and %d6,%d4,255
80007920:	14 35       	ld.bu %d5,[%a3]
80007922:	5f 35 06 80 	jne %d5,%d3,8000792e <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007926:	42 62       	add %d2,%d6
80007928:	8f f2 0f 21 	and %d2,%d2,255
8000792c:	3c 04       	j 80007934 <IfxVadc_Adc_getGroupConfig+0x22a>
8000792e:	c2 14       	add %d4,1
80007930:	fc 24       	loop %a2,80007918 <IfxVadc_Adc_getGroupConfig+0x20e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079a6:	a0 32       	mov.a %a2,3
800079a8:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
800079ac:	8f f4 0f 61 	and %d6,%d4,255
800079b0:	14 35       	ld.bu %d5,[%a3]
800079b2:	5f 35 06 80 	jne %d5,%d3,800079be <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
800079b6:	42 62       	add %d2,%d6
800079b8:	8f f2 0f 21 	and %d2,%d2,255
800079bc:	3c 04       	j 800079c4 <IfxVadc_Adc_getGroupConfig+0x22a>
800079be:	c2 14       	add %d4,1
800079c0:	fc 24       	loop %a2,800079a8 <IfxVadc_Adc_getGroupConfig+0x20e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
<<<<<<< HEAD
<<<<<<< HEAD
8000798e:	02 72       	mov %d2,%d7
80007990:	28 52       	st.b [%a15]5,%d2
=======
80007932:	02 72       	mov %d2,%d7
80007934:	28 52       	st.b [%a15]5,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079c2:	02 72       	mov %d2,%d7
800079c4:	28 52       	st.b [%a15]5,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007992:	19 d2 00 20 	ld.w %d2,[%a13]128
=======
800079c6:	19 d2 00 20 	ld.w %d2,[%a13]128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
800079ca:	1b 07 01 f0 	addi %d15,%d7,16
800079ce:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
800079d2:	e9 ff 30 00 	st.b [%a15]48,%d15
800079d6:	00 90       	ret 

<<<<<<< HEAD
800079a4 <IfxVadc_Adc_initChannel>:
=======
80007936:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
8000793a:	1b 07 01 f0 	addi %d15,%d7,16
8000793e:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
80007942:	e9 ff 30 00 	st.b [%a15]48,%d15
80007946:	00 90       	ret 

80007948 <IfxVadc_Adc_initChannel>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079d8 <IfxVadc_Adc_initChannel>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
<<<<<<< HEAD
<<<<<<< HEAD
800079a4:	99 52 14 00 	ld.a %a2,[%a5]20
800079a8:	d4 2e       	ld.a %a14,[%a2]
800079aa:	99 2c 04 00 	ld.a %a12,[%a2]4
=======
80007948:	99 52 14 00 	ld.a %a2,[%a5]20
8000794c:	d4 2e       	ld.a %a14,[%a2]
8000794e:	99 2c 04 00 	ld.a %a12,[%a2]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079d8:	99 52 14 00 	ld.a %a2,[%a5]20
800079dc:	d4 2e       	ld.a %a14,[%a2]
800079de:	99 2c 04 00 	ld.a %a12,[%a2]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
<<<<<<< HEAD
<<<<<<< HEAD
800079ae:	39 28 08 00 	ld.bu %d8,[%a2]8
=======
80007952:	39 28 08 00 	ld.bu %d8,[%a2]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079e2:	39 28 08 00 	ld.bu %d8,[%a2]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
<<<<<<< HEAD
<<<<<<< HEAD
800079b2:	b5 42 04 00 	st.a [%a4]4,%a2
=======
80007956:	b5 42 04 00 	st.a [%a4]4,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079e6:	b5 42 04 00 	st.a [%a4]4,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
800079b6:	02 84       	mov %d4,%d8
=======
8000795a:	02 84       	mov %d4,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079ea:	02 84       	mov %d4,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
800079b8:	40 4d       	mov.aa %a13,%a4
=======
8000795c:	40 4d       	mov.aa %a13,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079ec:	40 4d       	mov.aa %a13,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
800079ba:	40 e4       	mov.aa %a4,%a14
=======
8000795e:	40 e4       	mov.aa %a4,%a14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079ee:	40 e4       	mov.aa %a4,%a14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
800079bc:	40 5f       	mov.aa %a15,%a5
=======
80007960:	40 5f       	mov.aa %a15,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079f0:	40 5f       	mov.aa %a15,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
<<<<<<< HEAD
<<<<<<< HEAD
800079be:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079c2:	6d ff ab e6 	call 80004718 <IfxVadc_enableAccess>
=======
80007962:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007966:	6d ff ab e6 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079f2:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079f6:	6d ff ab e6 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
<<<<<<< HEAD
<<<<<<< HEAD
800079c6:	1b 09 06 20 	addi %d2,%d9,96
800079ca:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
800079ce:	0c fe       	ld.bu %d15,[%a15]14
800079d0:	54 22       	ld.w %d2,[%a2]
=======
8000796a:	1b 09 06 20 	addi %d2,%d9,96
8000796e:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007972:	0c fe       	ld.bu %d15,[%a15]14
80007974:	54 22       	ld.w %d2,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800079fa:	1b 09 06 20 	addi %d2,%d9,96
800079fe:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007a02:	0c fe       	ld.bu %d15,[%a15]14
80007a04:	54 22       	ld.w %d2,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
800079d2:	40 e4       	mov.aa %a4,%a14
800079d4:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
800079d8:	6c 20       	st.w [%a2]0,%d15
=======
80007976:	40 e4       	mov.aa %a4,%a14
80007978:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
8000797c:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a06:	40 e4       	mov.aa %a4,%a14
80007a08:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
80007a0c:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
<<<<<<< HEAD
<<<<<<< HEAD
800079da:	54 22       	ld.w %d2,[%a2]
800079dc:	0c ff       	ld.bu %d15,[%a15]15
800079de:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
800079e2:	6c 20       	st.w [%a2]0,%d15
=======
8000797e:	54 22       	ld.w %d2,[%a2]
80007980:	0c ff       	ld.bu %d15,[%a15]15
80007982:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007986:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a0e:	54 22       	ld.w %d2,[%a2]
80007a10:	0c ff       	ld.bu %d15,[%a15]15
80007a12:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007a16:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
<<<<<<< HEAD
<<<<<<< HEAD
800079e4:	54 22       	ld.w %d2,[%a2]
800079e6:	39 ff 10 00 	ld.bu %d15,[%a15]16
800079ea:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
800079ee:	6c 20       	st.w [%a2]0,%d15
=======
80007988:	54 22       	ld.w %d2,[%a2]
8000798a:	39 ff 10 00 	ld.bu %d15,[%a15]16
8000798e:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007992:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a18:	54 22       	ld.w %d2,[%a2]
80007a1a:	39 ff 10 00 	ld.bu %d15,[%a15]16
80007a1e:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007a22:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
<<<<<<< HEAD
<<<<<<< HEAD
800079f0:	54 22       	ld.w %d2,[%a2]
800079f2:	39 ff 11 00 	ld.bu %d15,[%a15]17
800079f6:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800079fa:	6c 20       	st.w [%a2]0,%d15
=======
80007994:	54 22       	ld.w %d2,[%a2]
80007996:	39 ff 11 00 	ld.bu %d15,[%a15]17
8000799a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000799e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a24:	54 22       	ld.w %d2,[%a2]
80007a26:	39 ff 11 00 	ld.bu %d15,[%a15]17
80007a2a:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
80007a2e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
<<<<<<< HEAD
<<<<<<< HEAD
800079fc:	54 22       	ld.w %d2,[%a2]
800079fe:	0c f1       	ld.bu %d15,[%a15]1
80007a00:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
80007a04:	6c 20       	st.w [%a2]0,%d15
=======
800079a0:	54 22       	ld.w %d2,[%a2]
800079a2:	0c f1       	ld.bu %d15,[%a15]1
800079a4:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
800079a8:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a30:	54 22       	ld.w %d2,[%a2]
80007a32:	0c f1       	ld.bu %d15,[%a15]1
80007a34:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
80007a38:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
<<<<<<< HEAD
<<<<<<< HEAD
80007a06:	54 22       	ld.w %d2,[%a2]
80007a08:	0c fd       	ld.bu %d15,[%a15]13
80007a0a:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007a0e:	6c 20       	st.w [%a2]0,%d15
=======
800079aa:	54 22       	ld.w %d2,[%a2]
800079ac:	0c fd       	ld.bu %d15,[%a15]13
800079ae:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
800079b2:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a3a:	54 22       	ld.w %d2,[%a2]
80007a3c:	0c fd       	ld.bu %d15,[%a15]13
80007a3e:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007a42:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
<<<<<<< HEAD
<<<<<<< HEAD
80007a10:	54 22       	ld.w %d2,[%a2]
80007a12:	39 ff 13 00 	ld.bu %d15,[%a15]19
80007a16:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
80007a1a:	6c 20       	st.w [%a2]0,%d15
=======
800079b4:	54 22       	ld.w %d2,[%a2]
800079b6:	39 ff 13 00 	ld.bu %d15,[%a15]19
800079ba:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
800079be:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a44:	54 22       	ld.w %d2,[%a2]
80007a46:	39 ff 13 00 	ld.bu %d15,[%a15]19
80007a4a:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
80007a4e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
<<<<<<< HEAD
<<<<<<< HEAD
80007a1c:	54 22       	ld.w %d2,[%a2]
80007a1e:	0c f3       	ld.bu %d15,[%a15]3
80007a20:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
80007a24:	6c 20       	st.w [%a2]0,%d15
=======
800079c0:	54 22       	ld.w %d2,[%a2]
800079c2:	0c f3       	ld.bu %d15,[%a15]3
800079c4:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
800079c8:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a50:	54 22       	ld.w %d2,[%a2]
80007a52:	0c f3       	ld.bu %d15,[%a15]3
80007a54:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
80007a58:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
<<<<<<< HEAD
<<<<<<< HEAD
80007a26:	54 22       	ld.w %d2,[%a2]
80007a28:	0c f0       	ld.bu %d15,[%a15]0
80007a2a:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
80007a2e:	6c 20       	st.w [%a2]0,%d15
=======
800079ca:	54 22       	ld.w %d2,[%a2]
800079cc:	0c f0       	ld.bu %d15,[%a15]0
800079ce:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
800079d2:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a5a:	54 22       	ld.w %d2,[%a2]
80007a5c:	0c f0       	ld.bu %d15,[%a15]0
80007a5e:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
80007a62:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
<<<<<<< HEAD
<<<<<<< HEAD
80007a30:	54 22       	ld.w %d2,[%a2]
80007a32:	39 ff 12 00 	ld.bu %d15,[%a15]18
80007a36:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
80007a3a:	6c 20       	st.w [%a2]0,%d15
80007a3c:	1b 08 01 f0 	addi %d15,%d8,16
80007a40:	16 ff       	and %d15,255
80007a42:	02 f4       	mov %d4,%d15
80007a44:	6d ff 6a e6 	call 80004718 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80007a48:	08 23       	ld.bu %d3,[%a15]2
80007a4a:	82 12       	mov %d2,1
80007a4c:	0f 92 00 20 	sh %d2,%d2,%d9
80007a50:	f6 35       	jnz %d3,80007a5a <IfxVadc_Adc_initChannel+0xb6>
=======
800079d4:	54 22       	ld.w %d2,[%a2]
800079d6:	39 ff 12 00 	ld.bu %d15,[%a15]18
800079da:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
800079de:	6c 20       	st.w [%a2]0,%d15
800079e0:	1b 08 01 f0 	addi %d15,%d8,16
800079e4:	16 ff       	and %d15,255
800079e6:	02 f4       	mov %d4,%d15
800079e8:	6d ff 6a e6 	call 800046bc <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
800079ec:	08 23       	ld.bu %d3,[%a15]2
800079ee:	82 12       	mov %d2,1
800079f0:	0f 92 00 20 	sh %d2,%d2,%d9
800079f4:	f6 35       	jnz %d3,800079fe <IfxVadc_Adc_initChannel+0xb6>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a64:	54 22       	ld.w %d2,[%a2]
80007a66:	39 ff 12 00 	ld.bu %d15,[%a15]18
80007a6a:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
80007a6e:	6c 20       	st.w [%a2]0,%d15
80007a70:	1b 08 01 f0 	addi %d15,%d8,16
80007a74:	16 ff       	and %d15,255
80007a76:	02 f4       	mov %d4,%d15
80007a78:	6d ff 6a e6 	call 8000474c <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80007a7c:	08 23       	ld.bu %d3,[%a15]2
80007a7e:	82 12       	mov %d2,1
80007a80:	0f 92 00 20 	sh %d2,%d2,%d9
80007a84:	f6 35       	jnz %d3,80007a8e <IfxVadc_Adc_initChannel+0xb6>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
<<<<<<< HEAD
<<<<<<< HEAD
80007a52:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a56:	a6 32       	or %d2,%d3
80007a58:	3c 05       	j 80007a62 <IfxVadc_Adc_initChannel+0xbe>
=======
800079f6:	19 c3 08 00 	ld.w %d3,[%a12]8
800079fa:	a6 32       	or %d2,%d3
800079fc:	3c 05       	j 80007a06 <IfxVadc_Adc_initChannel+0xbe>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a86:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a8a:	a6 32       	or %d2,%d3
80007a8c:	3c 05       	j 80007a96 <IfxVadc_Adc_initChannel+0xbe>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
<<<<<<< HEAD
<<<<<<< HEAD
80007a5a:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a5e:	0f 23 e0 20 	andn %d2,%d3,%d2
=======
800079fe:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a02:	0f 23 e0 20 	andn %d2,%d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a8e:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a92:	0f 23 e0 20 	andn %d2,%d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
80007a62:	02 f4       	mov %d4,%d15
80007a64:	59 c2 08 00 	st.w [%a12]8,%d2
80007a68:	40 e4       	mov.aa %a4,%a14
80007a6a:	6d ff 3b e6 	call 800046e0 <IfxVadc_disableAccess>
=======
80007a06:	02 f4       	mov %d4,%d15
80007a08:	59 c2 08 00 	st.w [%a12]8,%d2
80007a0c:	40 e4       	mov.aa %a4,%a14
80007a0e:	6d ff 3b e6 	call 80004684 <IfxVadc_disableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007a96:	02 f4       	mov %d4,%d15
80007a98:	59 c2 08 00 	st.w [%a12]8,%d2
80007a9c:	40 e4       	mov.aa %a4,%a14
80007a9e:	6d ff 3b e6 	call 80004714 <IfxVadc_disableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
<<<<<<< HEAD
<<<<<<< HEAD
80007a6e:	79 d3 00 00 	ld.b %d3,[%a13]0
80007a72:	19 c5 20 40 	ld.w %d5,[%a12]288
80007a76:	8f 23 00 f0 	sh %d15,%d3,2
80007a7a:	3b f0 00 20 	mov %d2,15
80007a7e:	0f f2 00 20 	sh %d2,%d2,%d15
80007a82:	0f 25 e0 20 	andn %d2,%d5,%d2
=======
80007aa2:	79 d3 00 00 	ld.b %d3,[%a13]0
80007aa6:	19 c5 20 40 	ld.w %d5,[%a12]288
80007aaa:	8f 23 00 f0 	sh %d15,%d3,2
80007aae:	3b f0 00 20 	mov %d2,15
80007ab2:	0f f2 00 20 	sh %d2,%d2,%d15
80007ab6:	0f 25 e0 20 	andn %d2,%d5,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007aba:	08 b4       	ld.bu %d4,[%a15]11
80007abc:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007ac0:	19 c2 20 40 	ld.w %d2,[%a12]288
80007ac4:	0f f4 00 f0 	sh %d15,%d4,%d15
80007ac8:	a6 2f       	or %d15,%d2
80007aca:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007ace:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007ad2:	6e 1f       	jz %d15,80007b10 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
<<<<<<< HEAD
80007aa0:	02 84       	mov %d4,%d8
80007aa2:	08 b5       	ld.bu %d5,[%a15]11
80007aa4:	6d ff 6b e7 	call 8000497a <IfxVadc_getSrcAddress>
=======
80007a12:	79 d3 00 00 	ld.b %d3,[%a13]0
80007a16:	19 c5 20 40 	ld.w %d5,[%a12]288
80007a1a:	8f 23 00 f0 	sh %d15,%d3,2
80007a1e:	3b f0 00 20 	mov %d2,15
80007a22:	0f f2 00 20 	sh %d2,%d2,%d15
80007a26:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007a2a:	08 b4       	ld.bu %d4,[%a15]11
80007a2c:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007a30:	19 c2 20 40 	ld.w %d2,[%a12]288
80007a34:	0f f4 00 f0 	sh %d15,%d4,%d15
80007a38:	a6 2f       	or %d15,%d2
80007a3a:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007a3e:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007a42:	6e 1f       	jz %d15,80007a80 <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007a44:	02 84       	mov %d4,%d8
80007a46:	08 b5       	ld.bu %d5,[%a15]11
80007a48:	6d ff 6b e7 	call 8000491e <IfxVadc_getSrcAddress>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ad4:	02 84       	mov %d4,%d8
80007ad6:	08 b5       	ld.bu %d5,[%a15]11
80007ad8:	6d ff 6b e7 	call 800049ae <IfxVadc_getSrcAddress>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
<<<<<<< HEAD
<<<<<<< HEAD
80007aa8:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007aac:	82 1f       	mov %d15,1
80007aae:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007ab2:	59 cf 10 40 	st.w [%a12]272,%d15
=======
80007a4c:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007a50:	82 1f       	mov %d15,1
80007a52:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007a56:	59 cf 10 40 	st.w [%a12]272,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007adc:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007ae0:	82 1f       	mov %d15,1
80007ae2:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007ae6:	59 cf 10 40 	st.w [%a12]272,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
<<<<<<< HEAD
<<<<<<< HEAD
80007ab6:	54 22       	ld.w %d2,[%a2]
80007ab8:	08 63       	ld.bu %d3,[%a15]6
80007aba:	8f f2 cf 21 	andn %d2,%d2,255
80007abe:	a6 32       	or %d2,%d3
=======
80007aea:	54 22       	ld.w %d2,[%a2]
80007aec:	08 63       	ld.bu %d3,[%a15]6
80007aee:	8f f2 cf 21 	andn %d2,%d2,255
80007af2:	a6 32       	or %d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007af4:	0c f9       	ld.bu %d15,[%a15]9
80007af6:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
<<<<<<< HEAD
80007ac4:	54 22       	ld.w %d2,[%a2]
80007ac6:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007aca:	6c 20       	st.w [%a2]0,%d15
=======
80007a5a:	54 22       	ld.w %d2,[%a2]
80007a5c:	08 63       	ld.bu %d3,[%a15]6
80007a5e:	8f f2 cf 21 	andn %d2,%d2,255
80007a62:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007a64:	0c f9       	ld.bu %d15,[%a15]9
80007a66:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007a68:	54 22       	ld.w %d2,[%a2]
80007a6a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007a6e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007af8:	54 22       	ld.w %d2,[%a2]
80007afa:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007afe:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007acc:	4c 20       	ld.w %d15,[%a2]0
80007ace:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007ad2:	6c 20       	st.w [%a2]0,%d15
=======
80007a70:	4c 20       	ld.w %d15,[%a2]0
80007a72:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007a76:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b00:	4c 20       	ld.w %d15,[%a2]0
80007b02:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b06:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007ad4:	4c 20       	ld.w %d15,[%a2]0
80007ad6:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007ada:	6c 20       	st.w [%a2]0,%d15
=======
80007a78:	4c 20       	ld.w %d15,[%a2]0
80007a7a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007a7e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b08:	4c 20       	ld.w %d15,[%a2]0
80007b0a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b0e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
<<<<<<< HEAD
<<<<<<< HEAD
80007adc:	0c ff       	ld.bu %d15,[%a15]15
80007ade:	08 a2       	ld.bu %d2,[%a15]10
80007ae0:	ff 8f 15 80 	jge.u %d15,8,80007b0a <IfxVadc_Adc_initChannel+0x166>
=======
80007a80:	0c ff       	ld.bu %d15,[%a15]15
80007a82:	08 a2       	ld.bu %d2,[%a15]10
80007a84:	ff 8f 15 80 	jge.u %d15,8,80007aae <IfxVadc_Adc_initChannel+0x166>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b10:	0c ff       	ld.bu %d15,[%a15]15
80007b12:	08 a2       	ld.bu %d2,[%a15]10
80007b14:	ff 8f 15 80 	jge.u %d15,8,80007b3e <IfxVadc_Adc_initChannel+0x166>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
<<<<<<< HEAD
<<<<<<< HEAD
80007ae4:	19 c4 30 40 	ld.w %d4,[%a12]304
80007ae8:	06 2f       	sh %d15,2
80007aea:	3b f0 00 30 	mov %d3,15
80007aee:	0f f3 00 30 	sh %d3,%d3,%d15
80007af2:	0f 34 e0 30 	andn %d3,%d4,%d3
80007af6:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007afa:	19 c3 30 40 	ld.w %d3,[%a12]304
80007afe:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b02:	a6 3f       	or %d15,%d3
80007b04:	59 cf 30 40 	st.w [%a12]304,%d15
80007b08:	3c 14       	j 80007b30 <IfxVadc_Adc_initChannel+0x18c>
=======
80007a88:	19 c4 30 40 	ld.w %d4,[%a12]304
80007a8c:	06 2f       	sh %d15,2
80007a8e:	3b f0 00 30 	mov %d3,15
80007a92:	0f f3 00 30 	sh %d3,%d3,%d15
80007a96:	0f 34 e0 30 	andn %d3,%d4,%d3
80007a9a:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007a9e:	19 c3 30 40 	ld.w %d3,[%a12]304
80007aa2:	0f f2 00 f0 	sh %d15,%d2,%d15
80007aa6:	a6 3f       	or %d15,%d3
80007aa8:	59 cf 30 40 	st.w [%a12]304,%d15
80007aac:	3c 14       	j 80007ad4 <IfxVadc_Adc_initChannel+0x18c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b18:	19 c4 30 40 	ld.w %d4,[%a12]304
80007b1c:	06 2f       	sh %d15,2
80007b1e:	3b f0 00 30 	mov %d3,15
80007b22:	0f f3 00 30 	sh %d3,%d3,%d15
80007b26:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b2a:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007b2e:	19 c3 30 40 	ld.w %d3,[%a12]304
80007b32:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b36:	a6 3f       	or %d15,%d3
80007b38:	59 cf 30 40 	st.w [%a12]304,%d15
80007b3c:	3c 14       	j 80007b64 <IfxVadc_Adc_initChannel+0x18c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
<<<<<<< HEAD
<<<<<<< HEAD
80007b0a:	c2 8f       	add %d15,-8
80007b0c:	19 c4 34 40 	ld.w %d4,[%a12]308
80007b10:	06 2f       	sh %d15,2
80007b12:	3b f0 00 30 	mov %d3,15
80007b16:	0f f3 00 30 	sh %d3,%d3,%d15
80007b1a:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b1e:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b22:	19 c3 34 40 	ld.w %d3,[%a12]308
80007b26:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b2a:	a6 3f       	or %d15,%d3
80007b2c:	59 cf 34 40 	st.w [%a12]308,%d15
=======
80007aae:	c2 8f       	add %d15,-8
80007ab0:	19 c4 34 40 	ld.w %d4,[%a12]308
80007ab4:	06 2f       	sh %d15,2
80007ab6:	3b f0 00 30 	mov %d3,15
80007aba:	0f f3 00 30 	sh %d3,%d3,%d15
80007abe:	0f 34 e0 30 	andn %d3,%d4,%d3
80007ac2:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007ac6:	19 c3 34 40 	ld.w %d3,[%a12]308
80007aca:	0f f2 00 f0 	sh %d15,%d2,%d15
80007ace:	a6 3f       	or %d15,%d3
80007ad0:	59 cf 34 40 	st.w [%a12]308,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b3e:	c2 8f       	add %d15,-8
80007b40:	19 c4 34 40 	ld.w %d4,[%a12]308
80007b44:	06 2f       	sh %d15,2
80007b46:	3b f0 00 30 	mov %d3,15
80007b4a:	0f f3 00 30 	sh %d3,%d3,%d15
80007b4e:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b52:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b56:	19 c3 34 40 	ld.w %d3,[%a12]308
80007b5a:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b5e:	a6 3f       	or %d15,%d3
80007b60:	59 cf 34 40 	st.w [%a12]308,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
<<<<<<< HEAD
<<<<<<< HEAD
80007b30:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007b34:	6e 24       	jz %d15,80007b7c <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007b36:	02 84       	mov %d4,%d8
80007b38:	08 a5       	ld.bu %d5,[%a15]10
80007b3a:	6d ff 20 e7 	call 8000497a <IfxVadc_getSrcAddress>
=======
80007ad4:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007ad8:	6e 24       	jz %d15,80007b20 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007ada:	02 84       	mov %d4,%d8
80007adc:	08 a5       	ld.bu %d5,[%a15]10
80007ade:	6d ff 20 e7 	call 8000491e <IfxVadc_getSrcAddress>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b64:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007b68:	6e 24       	jz %d15,80007bb0 <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007b6a:	02 84       	mov %d4,%d8
80007b6c:	08 a5       	ld.bu %d5,[%a15]10
80007b6e:	6d ff 20 e7 	call 800049ae <IfxVadc_getSrcAddress>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007b3e:	0c ff       	ld.bu %d15,[%a15]15
80007b40:	1b 0f 08 f0 	addi %d15,%d15,128
80007b44:	90 c3       	addsc.a %a3,%a12,%d15,2
80007b46:	4c 30       	ld.w %d15,[%a3]0
80007b48:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007b4c:	6c 30       	st.w [%a3]0,%d15
=======
80007ae2:	0c ff       	ld.bu %d15,[%a15]15
80007ae4:	1b 0f 08 f0 	addi %d15,%d15,128
80007ae8:	90 c3       	addsc.a %a3,%a12,%d15,2
80007aea:	4c 30       	ld.w %d15,[%a3]0
80007aec:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007af0:	6c 30       	st.w [%a3]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b72:	0c ff       	ld.bu %d15,[%a15]15
80007b74:	1b 0f 08 f0 	addi %d15,%d15,128
80007b78:	90 c3       	addsc.a %a3,%a12,%d15,2
80007b7a:	4c 30       	ld.w %d15,[%a3]0
80007b7c:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007b80:	6c 30       	st.w [%a3]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
<<<<<<< HEAD
<<<<<<< HEAD
80007b4e:	bb f0 ff ff 	mov.u %d15,65535
80007b52:	59 cf 14 40 	st.w [%a12]276,%d15
=======
80007af2:	bb f0 ff ff 	mov.u %d15,65535
80007af6:	59 cf 14 40 	st.w [%a12]276,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b82:	bb f0 ff ff 	mov.u %d15,65535
80007b86:	59 cf 14 40 	st.w [%a12]276,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
<<<<<<< HEAD
<<<<<<< HEAD
80007b56:	54 22       	ld.w %d2,[%a2]
80007b58:	08 43       	ld.bu %d3,[%a15]4
80007b5a:	8f f2 cf 21 	andn %d2,%d2,255
80007b5e:	a6 32       	or %d2,%d3
=======
80007afa:	54 22       	ld.w %d2,[%a2]
80007afc:	08 43       	ld.bu %d3,[%a15]4
80007afe:	8f f2 cf 21 	andn %d2,%d2,255
80007b02:	a6 32       	or %d2,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b8a:	54 22       	ld.w %d2,[%a2]
80007b8c:	08 43       	ld.bu %d3,[%a15]4
80007b8e:	8f f2 cf 21 	andn %d2,%d2,255
80007b92:	a6 32       	or %d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
<<<<<<< HEAD
<<<<<<< HEAD
80007b60:	0c f8       	ld.bu %d15,[%a15]8
80007b62:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b64:	54 22       	ld.w %d2,[%a2]
80007b66:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b6a:	6c 20       	st.w [%a2]0,%d15
=======
80007b04:	0c f8       	ld.bu %d15,[%a15]8
80007b06:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b08:	54 22       	ld.w %d2,[%a2]
80007b0a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b0e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007b94:	0c f8       	ld.bu %d15,[%a15]8
80007b96:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b98:	54 22       	ld.w %d2,[%a2]
80007b9a:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b9e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007b6c:	4c 20       	ld.w %d15,[%a2]0
80007b6e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b72:	6c 20       	st.w [%a2]0,%d15
=======
80007b10:	4c 20       	ld.w %d15,[%a2]0
80007b12:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b16:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ba0:	4c 20       	ld.w %d15,[%a2]0
80007ba2:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007ba6:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
<<<<<<< HEAD
<<<<<<< HEAD
80007b74:	4c 20       	ld.w %d15,[%a2]0
80007b76:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b7a:	6c 20       	st.w [%a2]0,%d15
=======
80007b18:	4c 20       	ld.w %d15,[%a2]0
80007b1a:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b1e:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ba8:	4c 20       	ld.w %d15,[%a2]0
80007baa:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007bae:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
80007b7c:	40 e4       	mov.aa %a4,%a14
80007b7e:	02 84       	mov %d4,%d8
80007b80:	6d ff b0 e5 	call 800046e0 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b84:	0c ff       	ld.bu %d15,[%a15]15
=======
80007b20:	40 e4       	mov.aa %a4,%a14
80007b22:	02 84       	mov %d4,%d8
80007b24:	6d ff b0 e5 	call 80004684 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b28:	0c ff       	ld.bu %d15,[%a15]15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bb0:	40 e4       	mov.aa %a4,%a14
80007bb2:	02 84       	mov %d4,%d8
80007bb4:	6d ff b0 e5 	call 80004714 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007bb8:	0c ff       	ld.bu %d15,[%a15]15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    channel->channel   = config->channelId;

    return Status;
}
<<<<<<< HEAD
<<<<<<< HEAD
80007b86:	82 02       	mov %d2,0
=======
80007b2a:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bba:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
<<<<<<< HEAD
<<<<<<< HEAD
80007b88:	2c d1       	st.b [%a13]1,%d15
=======
80007bbc:	2c d1       	st.b [%a13]1,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    channel->channel   = config->channelId;
80007bbe:	0c fc       	ld.bu %d15,[%a15]12
80007bc0:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007bc2:	00 90       	ret 

<<<<<<< HEAD
80007b90 <IfxVadc_Adc_initChannelConfig>:
=======
80007b2c:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007b2e:	0c fc       	ld.bu %d15,[%a15]12
80007b30:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007b32:	00 90       	ret 

80007b34 <IfxVadc_Adc_initChannelConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bc4 <IfxVadc_Adc_initChannelConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
<<<<<<< HEAD
<<<<<<< HEAD
80007b90:	40 42       	mov.aa %a2,%a4
80007b92:	d2 02       	mov %e2,0
80007b94:	89 22 48 01 	st.d [%a2+]8,%e2
80007b98:	89 22 48 01 	st.d [%a2+]8,%e2
80007b9c:	89 22 48 01 	st.d [%a2+]8,%e2
=======
80007bc4:	40 42       	mov.aa %a2,%a4
80007bc6:	d2 02       	mov %e2,0
80007bc8:	89 22 48 01 	st.d [%a2+]8,%e2
80007bcc:	89 22 48 01 	st.d [%a2+]8,%e2
80007bd0:	89 22 48 01 	st.d [%a2+]8,%e2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->group = group;
80007bd4:	b5 45 14 00 	st.a [%a4]20,%a5
80007bd8:	00 90       	ret 

<<<<<<< HEAD
80007ba6 <IfxVadc_Adc_initGroup>:
=======
80007b34:	40 42       	mov.aa %a2,%a4
80007b36:	d2 02       	mov %e2,0
80007b38:	89 22 48 01 	st.d [%a2+]8,%e2
80007b3c:	89 22 48 01 	st.d [%a2+]8,%e2
80007b40:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007b44:	b5 45 14 00 	st.a [%a4]20,%a5
80007b48:	00 90       	ret 

80007b4a <IfxVadc_Adc_initGroup>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bda <IfxVadc_Adc_initGroup>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
<<<<<<< HEAD
<<<<<<< HEAD
80007ba6:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007ba8:	39 58 04 00 	ld.bu %d8,[%a5]4
=======
80007b4a:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b4c:	39 58 04 00 	ld.bu %d8,[%a5]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bda:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007bdc:	39 58 04 00 	ld.bu %d8,[%a5]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
<<<<<<< HEAD
<<<<<<< HEAD
80007bac:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007bae:	8f a8 00 90 	sh %d9,%d8,10
80007bb2:	1b 09 48 f0 	addi %d15,%d9,1152
80007bb6:	10 cd       	addsc.a %a13,%a12,%d15,0
=======
80007b50:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007b52:	8f a8 00 90 	sh %d9,%d8,10
80007b56:	1b 09 48 f0 	addi %d15,%d9,1152
80007b5a:	10 cd       	addsc.a %a13,%a12,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007be0:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007be2:	8f a8 00 90 	sh %d9,%d8,10
80007be6:	1b 09 48 f0 	addi %d15,%d9,1152
80007bea:	10 cd       	addsc.a %a13,%a12,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
<<<<<<< HEAD
<<<<<<< HEAD
80007bb8:	4c 20       	ld.w %d15,[%a2]0
=======
80007b5c:	4c 20       	ld.w %d15,[%a2]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bec:	4c 20       	ld.w %d15,[%a2]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
<<<<<<< HEAD
<<<<<<< HEAD
80007bba:	b5 4d 04 00 	st.a [%a4]4,%a13
=======
80007bee:	b5 4d 04 00 	st.a [%a4]4,%a13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    group->module  = *config->module;
80007bf2:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007bf4:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
<<<<<<< HEAD
80007bc4:	40 c4       	mov.aa %a4,%a12
=======
80007b5e:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007b62:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007b64:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007b68:	40 c4       	mov.aa %a4,%a12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bf8:	40 c4       	mov.aa %a4,%a12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007bc6:	40 5f       	mov.aa %a15,%a5
=======
80007b6a:	40 5f       	mov.aa %a15,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bfa:	40 5f       	mov.aa %a15,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
<<<<<<< HEAD
<<<<<<< HEAD
80007bc8:	6d ff 5a e6 	call 8000487c <IfxVadc_getAdcAnalogFrequency>
=======
80007b6c:	6d ff 5a e6 	call 80004820 <IfxVadc_getAdcAnalogFrequency>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007bfc:	6d ff 5a e6 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
80007bcc:	1b 08 01 f0 	addi %d15,%d8,16
80007bd0:	8f ff 0f a1 	and %d10,%d15,255
80007bd4:	40 c4       	mov.aa %a4,%a12
80007bd6:	02 a4       	mov %d4,%d10
=======
80007b70:	1b 08 01 f0 	addi %d15,%d8,16
80007b74:	8f ff 0f a1 	and %d10,%d15,255
80007b78:	40 c4       	mov.aa %a4,%a12
80007b7a:	02 a4       	mov %d4,%d10
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c00:	1b 08 01 f0 	addi %d15,%d8,16
80007c04:	8f ff 0f a1 	and %d10,%d15,255
80007c08:	40 c4       	mov.aa %a4,%a12
80007c0a:	02 a4       	mov %d4,%d10
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
<<<<<<< HEAD
<<<<<<< HEAD
80007bd8:	02 2b       	mov %d11,%d2
=======
80007b7c:	02 2b       	mov %d11,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c0c:	02 2b       	mov %d11,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
80007bda:	6d ff 9f e5 	call 80004718 <IfxVadc_enableAccess>
=======
80007c0e:	6d ff 9f e5 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c12:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
<<<<<<< HEAD
80007be2:	40 d4       	mov.aa %a4,%a13
=======
80007b7e:	6d ff 9f e5 	call 800046bc <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b82:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b86:	40 d4       	mov.aa %a4,%a13
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c16:	40 d4       	mov.aa %a4,%a13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80007be4:	5e 17       	jne %d15,1,80007bf2 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007be6:	82 14       	mov %d4,1
80007be8:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007bec:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007bf0:	3c 03       	j 80007bf6 <IfxVadc_Adc_initGroup+0x50>
=======
80007b88:	5e 17       	jne %d15,1,80007b96 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007b8a:	82 14       	mov %d4,1
80007b8c:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007b90:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007b94:	3c 03       	j 80007b9a <IfxVadc_Adc_initGroup+0x50>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c18:	5e 17       	jne %d15,1,80007c26 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007c1a:	82 14       	mov %d4,1
80007c1c:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007c20:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007c24:	3c 03       	j 80007c2a <IfxVadc_Adc_initGroup+0x50>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
<<<<<<< HEAD
<<<<<<< HEAD
80007bf2:	d2 04       	mov %e4,0
80007bf4:	82 06       	mov %d6,0
80007bf6:	82 07       	mov %d7,0
80007bf8:	6d ff 06 e8 	call 80004c04 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007bfc:	39 ff 34 00 	ld.bu %d15,[%a15]52
=======
80007b96:	d2 04       	mov %e4,0
80007b98:	82 06       	mov %d6,0
80007b9a:	82 07       	mov %d7,0
80007b9c:	6d ff 06 e8 	call 80004ba8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007ba0:	39 ff 34 00 	ld.bu %d15,[%a15]52
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c26:	d2 04       	mov %e4,0
80007c28:	82 06       	mov %d6,0
80007c2a:	82 07       	mov %d7,0
80007c2c:	6d ff 06 e8 	call 80004c38 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007c30:	39 ff 34 00 	ld.bu %d15,[%a15]52
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
<<<<<<< HEAD
<<<<<<< HEAD
80007c00:	40 d4       	mov.aa %a4,%a13
=======
80007ba4:	40 d4       	mov.aa %a4,%a13
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c34:	40 d4       	mov.aa %a4,%a13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80007c02:	5e 17       	jne %d15,1,80007c10 <IfxVadc_Adc_initGroup+0x6a>
=======
80007ba6:	5e 17       	jne %d15,1,80007bb4 <IfxVadc_Adc_initGroup+0x6a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c36:	5e 17       	jne %d15,1,80007c44 <IfxVadc_Adc_initGroup+0x6a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
<<<<<<< HEAD
<<<<<<< HEAD
80007c04:	82 14       	mov %d4,1
80007c06:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007c0a:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007c0e:	3c 03       	j 80007c14 <IfxVadc_Adc_initGroup+0x6e>
=======
80007ba8:	82 14       	mov %d4,1
80007baa:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007bae:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007bb2:	3c 03       	j 80007bb8 <IfxVadc_Adc_initGroup+0x6e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c38:	82 14       	mov %d4,1
80007c3a:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007c3e:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007c42:	3c 03       	j 80007c48 <IfxVadc_Adc_initGroup+0x6e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
<<<<<<< HEAD
<<<<<<< HEAD
80007c10:	d2 04       	mov %e4,0
80007c12:	82 06       	mov %d6,0
80007c14:	82 17       	mov %d7,1
80007c16:	6d ff f7 e7 	call 80004c04 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c1a:	39 ff 35 00 	ld.bu %d15,[%a15]53
=======
80007bb4:	d2 04       	mov %e4,0
80007bb6:	82 06       	mov %d6,0
80007bb8:	82 17       	mov %d7,1
80007bba:	6d ff f7 e7 	call 80004ba8 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007bbe:	39 ff 35 00 	ld.bu %d15,[%a15]53
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c44:	d2 04       	mov %e4,0
80007c46:	82 06       	mov %d6,0
80007c48:	82 17       	mov %d7,1
80007c4a:	6d ff f7 e7 	call 80004c38 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c4e:	39 ff 35 00 	ld.bu %d15,[%a15]53
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
<<<<<<< HEAD
<<<<<<< HEAD
80007c1e:	40 d4       	mov.aa %a4,%a13
=======
80007bc2:	40 d4       	mov.aa %a4,%a13
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c52:	40 d4       	mov.aa %a4,%a13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80007c20:	5e 17       	jne %d15,1,80007c2e <IfxVadc_Adc_initGroup+0x88>
=======
80007bc4:	5e 17       	jne %d15,1,80007bd2 <IfxVadc_Adc_initGroup+0x88>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c54:	5e 17       	jne %d15,1,80007c62 <IfxVadc_Adc_initGroup+0x88>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
<<<<<<< HEAD
<<<<<<< HEAD
80007c22:	82 14       	mov %d4,1
80007c24:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007c28:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007c2c:	3c 03       	j 80007c32 <IfxVadc_Adc_initGroup+0x8c>
=======
80007bc6:	82 14       	mov %d4,1
80007bc8:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007bcc:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007bd0:	3c 03       	j 80007bd6 <IfxVadc_Adc_initGroup+0x8c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c56:	82 14       	mov %d4,1
80007c58:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007c5c:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007c60:	3c 03       	j 80007c66 <IfxVadc_Adc_initGroup+0x8c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
<<<<<<< HEAD
<<<<<<< HEAD
80007c2e:	d2 04       	mov %e4,0
80007c30:	82 06       	mov %d6,0
80007c32:	82 27       	mov %d7,2
80007c34:	6d ff e8 e7 	call 80004c04 <IfxVadc_setArbiterPriority>
=======
80007bd2:	d2 04       	mov %e4,0
80007bd4:	82 06       	mov %d6,0
80007bd6:	82 27       	mov %d7,2
80007bd8:	6d ff e8 e7 	call 80004ba8 <IfxVadc_setArbiterPriority>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c62:	d2 04       	mov %e4,0
80007c64:	82 06       	mov %d6,0
80007c66:	82 27       	mov %d7,2
80007c68:	6d ff e8 e7 	call 80004c38 <IfxVadc_setArbiterPriority>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* master slave configuration */
    if (config->master != groupIndex)
<<<<<<< HEAD
<<<<<<< HEAD
80007c38:	0c f5       	ld.bu %d15,[%a15]5
80007c3a:	be 8b       	jeq %d15,%d8,80007c70 <IfxVadc_Adc_initGroup+0xca>
=======
80007bdc:	0c f5       	ld.bu %d15,[%a15]5
80007bde:	be 8b       	jeq %d15,%d8,80007c14 <IfxVadc_Adc_initGroup+0xca>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c6c:	0c f5       	ld.bu %d15,[%a15]5
80007c6e:	be 8b       	jeq %d15,%d8,80007ca4 <IfxVadc_Adc_initGroup+0xca>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
<<<<<<< HEAD
<<<<<<< HEAD
80007c3c:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007c40:	91 00 00 28 	movh.a %a2,32768
80007c44:	d9 22 f8 60 	lea %a2,[%a2]3512 <80000db8 <IfxVadc_Adc_masterIndex>>
80007c48:	10 22       	addsc.a %a2,%a2,%d15,0
80007c4a:	0c 20       	ld.bu %d15,[%a2]0
=======
80007be0:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007be4:	91 00 00 28 	movh.a %a2,32768
80007be8:	d9 22 d4 50 	lea %a2,[%a2]3412 <80000d54 <IfxVadc_Adc_masterIndex>>
80007bec:	10 22       	addsc.a %a2,%a2,%d15,0
80007bee:	0c 20       	ld.bu %d15,[%a2]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c70:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007c74:	91 00 00 28 	movh.a %a2,32768
80007c78:	d9 22 d0 70 	lea %a2,[%a2]3536 <80000dd0 <IfxVadc_Adc_masterIndex>>
80007c7c:	10 22       	addsc.a %a2,%a2,%d15,0
80007c7e:	0c 20       	ld.bu %d15,[%a2]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
<<<<<<< HEAD
<<<<<<< HEAD
80007c4c:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c50:	8f 3f 00 21 	and %d2,%d15,3
80007c54:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c58:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007c5c:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c60:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c64:	da 08       	mov %d15,8
80007c66:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c6a:	a6 3f       	or %d15,%d3
80007c6c:	59 2f 40 30 	st.w [%a2]1216,%d15
=======
80007bf0:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007bf4:	8f 3f 00 21 	and %d2,%d15,3
80007bf8:	19 23 40 30 	ld.w %d3,[%a2]1216
80007bfc:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007c00:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c04:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c08:	da 08       	mov %d15,8
80007c0a:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c0e:	a6 3f       	or %d15,%d3
80007c10:	59 2f 40 30 	st.w [%a2]1216,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007c80:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c84:	8f 3f 00 21 	and %d2,%d15,3
80007c88:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c8c:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007c90:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c94:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c98:	da 08       	mov %d15,8
80007c9a:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c9e:	a6 3f       	or %d15,%d3
80007ca0:	59 2f 40 30 	st.w [%a2]1216,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
<<<<<<< HEAD
<<<<<<< HEAD
80007c70:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c74:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007c78:	8f 3f c0 f1 	andn %d15,%d15,3
80007c7c:	59 2f 40 20 	st.w [%a2]1152,%d15
=======
80007c14:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c18:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007c1c:	8f 3f c0 f1 	andn %d15,%d15,3
80007c20:	59 2f 40 20 	st.w [%a2]1152,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ca4:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007ca8:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007cac:	8f 3f c0 f1 	andn %d15,%d15,3
80007cb0:	59 2f 40 20 	st.w [%a2]1152,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
<<<<<<< HEAD
<<<<<<< HEAD
80007c80:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007c84:	19 22 40 20 	ld.w %d2,[%a2]1152
80007c88:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007c8c:	59 2f 40 20 	st.w [%a2]1152,%d15
=======
80007c24:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007c28:	19 22 40 20 	ld.w %d2,[%a2]1152
80007c2c:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007c30:	59 2f 40 20 	st.w [%a2]1152,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007cb4:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007cb8:	19 22 40 20 	ld.w %d2,[%a2]1152
80007cbc:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007cc0:	59 2f 40 20 	st.w [%a2]1152,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80007c90:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007c94:	df 1f 5a 80 	jne %d15,1,80007d48 <IfxVadc_Adc_initGroup+0x1a2>
=======
80007c34:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007c38:	df 1f 5a 80 	jne %d15,1,80007cec <IfxVadc_Adc_initGroup+0x1a2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007cc4:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007cc8:	df 1f 5a 80 	jne %d15,1,80007d7c <IfxVadc_Adc_initGroup+0x1a2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
<<<<<<< HEAD
<<<<<<< HEAD
80007c98:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007c9c:	6e 28       	jz %d15,80007cec <IfxVadc_Adc_initGroup+0x146>
=======
80007c3c:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007c40:	6e 28       	jz %d15,80007c90 <IfxVadc_Adc_initGroup+0x146>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ccc:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007cd0:	6e 28       	jz %d15,80007d20 <IfxVadc_Adc_initGroup+0x146>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
<<<<<<< HEAD
<<<<<<< HEAD
80007c9e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ca2:	96 04       	or %d15,4
80007ca4:	59 2f 44 40 	st.w [%a2]1284,%d15
=======
80007c42:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c46:	96 04       	or %d15,4
80007c48:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007cd2:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007cd6:	96 04       	or %d15,4
80007cd8:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007ca8:	19 23 40 40 	ld.w %d3,[%a2]1280
=======
80007c4c:	19 23 40 40 	ld.w %d3,[%a2]1280
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007cdc:	19 23 40 40 	ld.w %d3,[%a2]1280
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
<<<<<<< HEAD
<<<<<<< HEAD
80007cac:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007cb0:	39 ff 23 00 	ld.bu %d15,[%a15]35
=======
80007ce0:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007ce4:	39 ff 23 00 	ld.bu %d15,[%a15]35
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    qctrl0.B.XTWC   = 1;
80007ce8:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007cec:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007cf0:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007cf4:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
<<<<<<< HEAD
80007cc4:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007cc8:	8b ff 20 f2 	ne %d15,%d15,15
80007ccc:	ee 16       	jnz %d15,80007cf8 <IfxVadc_Adc_initGroup+0x152>
=======
80007c50:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007c54:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007c58:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007c5c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007c60:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007c64:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007c68:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007c6c:	8b ff 20 f2 	ne %d15,%d15,15
80007c70:	ee 16       	jnz %d15,80007c9c <IfxVadc_Adc_initGroup+0x152>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007cf8:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007cfc:	8b ff 20 f2 	ne %d15,%d15,15
80007d00:	ee 16       	jnz %d15,80007d2c <IfxVadc_Adc_initGroup+0x152>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007cce:	19 23 40 40 	ld.w %d3,[%a2]1280
=======
80007d02:	19 23 40 40 	ld.w %d3,[%a2]1280
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d06:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007d0a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007d0e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007d12:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
<<<<<<< HEAD
80007ce2:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ce6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007cea:	3c 05       	j 80007cf4 <IfxVadc_Adc_initGroup+0x14e>
=======
80007c72:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007c76:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007c7a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007c7e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007c82:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007c86:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c8a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007c8e:	3c 05       	j 80007c98 <IfxVadc_Adc_initGroup+0x14e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d16:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d1a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d1e:	3c 05       	j 80007d28 <IfxVadc_Adc_initGroup+0x14e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
<<<<<<< HEAD
<<<<<<< HEAD
80007cec:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007cf0:	8f 4f c0 f1 	andn %d15,%d15,4
80007cf4:	59 2f 44 40 	st.w [%a2]1284,%d15
=======
80007c90:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007c94:	8f 4f c0 f1 	andn %d15,%d15,4
80007c98:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d20:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d24:	8f 4f c0 f1 	andn %d15,%d15,4
80007d28:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
<<<<<<< HEAD
<<<<<<< HEAD
80007cf8:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007cfc:	8b ff 00 f2 	eq %d15,%d15,15
80007d00:	ee 15       	jnz %d15,80007d2a <IfxVadc_Adc_initGroup+0x184>
=======
80007c9c:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007ca0:	8b ff 00 f2 	eq %d15,%d15,15
80007ca4:	ee 15       	jnz %d15,80007cce <IfxVadc_Adc_initGroup+0x184>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d2c:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007d30:	8b ff 00 f2 	eq %d15,%d15,15
80007d34:	ee 15       	jnz %d15,80007d5e <IfxVadc_Adc_initGroup+0x184>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007d02:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
=======
80007d36:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007d3a:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007d3e:	19 23 40 40 	ld.w %d3,[%a2]1280
80007d42:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007d46:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007d4a:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007d4e:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
<<<<<<< HEAD
80007d1e:	19 22 44 40 	ld.w %d2,[%a2]1284
80007d22:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d26:	59 2f 44 40 	st.w [%a2]1284,%d15
=======
80007ca6:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007caa:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007cae:	19 23 40 40 	ld.w %d3,[%a2]1280
80007cb2:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007cb6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007cba:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007cbe:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007cc2:	19 22 44 40 	ld.w %d2,[%a2]1284
80007cc6:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007cca:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d52:	19 22 44 40 	ld.w %d2,[%a2]1284
80007d56:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d5a:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
<<<<<<< HEAD
<<<<<<< HEAD
80007d2a:	39 f2 20 00 	ld.bu %d2,[%a15]32
=======
80007cce:	39 f2 20 00 	ld.bu %d2,[%a15]32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d5e:	39 f2 20 00 	ld.bu %d2,[%a15]32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
<<<<<<< HEAD
<<<<<<< HEAD
80007d2e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d32:	3b 00 40 f0 	mov %d15,1024
80007d36:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007d3a:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d3e:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007d42:	a6 2f       	or %d15,%d2
80007d44:	59 2f 44 40 	st.w [%a2]1284,%d15
=======
80007cd2:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007cd6:	3b 00 40 f0 	mov %d15,1024
80007cda:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007cde:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ce2:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007ce6:	a6 2f       	or %d15,%d2
80007ce8:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d62:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d66:	3b 00 40 f0 	mov %d15,1024
80007d6a:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007d6e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d72:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007d76:	a6 2f       	or %d15,%d2
80007d78:	59 2f 44 40 	st.w [%a2]1284,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80007d48:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007d4c:	df 1f 5a 80 	jne %d15,1,80007e00 <IfxVadc_Adc_initGroup+0x25a>
=======
80007cec:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007cf0:	df 1f 5a 80 	jne %d15,1,80007da4 <IfxVadc_Adc_initGroup+0x25a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d7c:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007d80:	df 1f 5a 80 	jne %d15,1,80007e34 <IfxVadc_Adc_initGroup+0x25a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
<<<<<<< HEAD
<<<<<<< HEAD
80007d50:	39 ff 1d 00 	ld.bu %d15,[%a15]29
=======
80007cf4:	39 ff 1d 00 	ld.bu %d15,[%a15]29
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d84:	39 ff 1d 00 	ld.bu %d15,[%a15]29
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
<<<<<<< HEAD
<<<<<<< HEAD
80007d54:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d58:	6e 28       	jz %d15,80007da8 <IfxVadc_Adc_initGroup+0x202>
80007d5a:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d5e:	96 04       	or %d15,4
80007d60:	59 2f 64 40 	st.w [%a2]1316,%d15
=======
80007cf8:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007cfc:	6e 28       	jz %d15,80007d4c <IfxVadc_Adc_initGroup+0x202>
80007cfe:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d02:	96 04       	or %d15,4
80007d04:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d88:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d8c:	6e 28       	jz %d15,80007ddc <IfxVadc_Adc_initGroup+0x202>
80007d8e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d92:	96 04       	or %d15,4
80007d94:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007d64:	19 23 60 40 	ld.w %d3,[%a2]1312
=======
80007d08:	19 23 60 40 	ld.w %d3,[%a2]1312
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007d98:	19 23 60 40 	ld.w %d3,[%a2]1312
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
<<<<<<< HEAD
<<<<<<< HEAD
80007d68:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007d6c:	39 ff 1b 00 	ld.bu %d15,[%a15]27
=======
80007d9c:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007da0:	39 ff 1b 00 	ld.bu %d15,[%a15]27
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    asctrl.B.XTWC   = 1;
80007da4:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007da8:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007dac:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007db0:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
<<<<<<< HEAD
80007d80:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d84:	8b ff 20 f2 	ne %d15,%d15,15
80007d88:	ee 16       	jnz %d15,80007db4 <IfxVadc_Adc_initGroup+0x20e>
=======
80007d0c:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007d10:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007d14:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007d18:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007d1c:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007d20:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007d24:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d28:	8b ff 20 f2 	ne %d15,%d15,15
80007d2c:	ee 16       	jnz %d15,80007d58 <IfxVadc_Adc_initGroup+0x20e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007db4:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007db8:	8b ff 20 f2 	ne %d15,%d15,15
80007dbc:	ee 16       	jnz %d15,80007de8 <IfxVadc_Adc_initGroup+0x20e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007d8a:	19 23 60 40 	ld.w %d3,[%a2]1312
=======
80007dbe:	19 23 60 40 	ld.w %d3,[%a2]1312
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007dc2:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007dc6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007dca:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007dce:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
<<<<<<< HEAD
80007d9e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007da2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007da6:	3c 05       	j 80007db0 <IfxVadc_Adc_initGroup+0x20a>
=======
80007d2e:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d32:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007d36:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d3a:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d3e:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d42:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d46:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d4a:	3c 05       	j 80007d54 <IfxVadc_Adc_initGroup+0x20a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007dd2:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007dd6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007dda:	3c 05       	j 80007de4 <IfxVadc_Adc_initGroup+0x20a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
<<<<<<< HEAD
<<<<<<< HEAD
80007da8:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007dac:	8f 4f c0 f1 	andn %d15,%d15,4
80007db0:	59 2f 64 40 	st.w [%a2]1316,%d15
=======
80007d4c:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d50:	8f 4f c0 f1 	andn %d15,%d15,4
80007d54:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ddc:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007de0:	8f 4f c0 f1 	andn %d15,%d15,4
80007de4:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
<<<<<<< HEAD
<<<<<<< HEAD
80007db4:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007db8:	8b ff 00 f2 	eq %d15,%d15,15
80007dbc:	ee 15       	jnz %d15,80007de6 <IfxVadc_Adc_initGroup+0x240>
=======
80007d58:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d5c:	8b ff 00 f2 	eq %d15,%d15,15
80007d60:	ee 15       	jnz %d15,80007d8a <IfxVadc_Adc_initGroup+0x240>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007de8:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007dec:	8b ff 00 f2 	eq %d15,%d15,15
80007df0:	ee 15       	jnz %d15,80007e1a <IfxVadc_Adc_initGroup+0x240>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007dbe:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
=======
80007df2:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007df6:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007dfa:	19 23 60 40 	ld.w %d3,[%a2]1312
80007dfe:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007e02:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007e06:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007e0a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
<<<<<<< HEAD
80007dda:	19 22 64 40 	ld.w %d2,[%a2]1316
80007dde:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007de2:	59 2f 64 40 	st.w [%a2]1316,%d15
=======
80007d62:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007d66:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007d6a:	19 23 60 40 	ld.w %d3,[%a2]1312
80007d6e:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007d72:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d76:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d7a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d7e:	19 22 64 40 	ld.w %d2,[%a2]1316
80007d82:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d86:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e0e:	19 22 64 40 	ld.w %d2,[%a2]1316
80007e12:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e16:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
<<<<<<< HEAD
<<<<<<< HEAD
80007de6:	39 ff 18 00 	ld.bu %d15,[%a15]24
=======
80007d8a:	39 ff 18 00 	ld.bu %d15,[%a15]24
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e1a:	39 ff 18 00 	ld.bu %d15,[%a15]24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
<<<<<<< HEAD
<<<<<<< HEAD
80007dea:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007dee:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007df2:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007df6:	8f 0f c1 f1 	andn %d15,%d15,16
80007dfa:	a6 2f       	or %d15,%d2
80007dfc:	59 2f 64 40 	st.w [%a2]1316,%d15
=======
80007d8e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d92:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007d96:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d9a:	8f 0f c1 f1 	andn %d15,%d15,16
80007d9e:	a6 2f       	or %d15,%d2
80007da0:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e1e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007e22:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e26:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007e2a:	8f 0f c1 f1 	andn %d15,%d15,16
80007e2e:	a6 2f       	or %d15,%d2
80007e30:	59 2f 64 40 	st.w [%a2]1316,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80007e00:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007e04:	df 1f 4f 80 	jne %d15,1,80007ea2 <IfxVadc_Adc_initGroup+0x2fc>
=======
80007da4:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007da8:	df 1f 4f 80 	jne %d15,1,80007e46 <IfxVadc_Adc_initGroup+0x2fc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e34:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007e38:	df 1f 4f 80 	jne %d15,1,80007ed6 <IfxVadc_Adc_initGroup+0x2fc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
<<<<<<< HEAD
<<<<<<< HEAD
80007e08:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007e0c:	6e 29       	jz %d15,80007e5e <IfxVadc_Adc_initGroup+0x2b8>
=======
80007dac:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007db0:	6e 29       	jz %d15,80007e02 <IfxVadc_Adc_initGroup+0x2b8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e3c:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007e40:	6e 29       	jz %d15,80007e92 <IfxVadc_Adc_initGroup+0x2b8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
<<<<<<< HEAD
<<<<<<< HEAD
80007e0e:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e12:	96 04       	or %d15,4
80007e14:	59 cf 04 80 	st.w [%a12]516,%d15
=======
80007db2:	19 cf 04 80 	ld.w %d15,[%a12]516
80007db6:	96 04       	or %d15,4
80007db8:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e42:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e46:	96 04       	or %d15,4
80007e48:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007e18:	19 c3 00 80 	ld.w %d3,[%a12]512
=======
80007dbc:	19 c3 00 80 	ld.w %d3,[%a12]512
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e4c:	19 c3 00 80 	ld.w %d3,[%a12]512
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
<<<<<<< HEAD
<<<<<<< HEAD
80007e1c:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007e20:	39 ff 2b 00 	ld.bu %d15,[%a15]43
=======
80007e50:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007e54:	39 ff 2b 00 	ld.bu %d15,[%a15]43
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    brsctrl.B.XTWC   = 1;
80007e58:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007e5c:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007e60:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007e64:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
<<<<<<< HEAD
80007e34:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e38:	8b ff 20 f2 	ne %d15,%d15,15
80007e3c:	ee 11       	jnz %d15,80007e5e <IfxVadc_Adc_initGroup+0x2b8>
=======
80007dc0:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007dc4:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007dc8:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007dcc:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007dd0:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007dd4:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007dd8:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007ddc:	8b ff 20 f2 	ne %d15,%d15,15
80007de0:	ee 11       	jnz %d15,80007e02 <IfxVadc_Adc_initGroup+0x2b8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e68:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e6c:	8b ff 20 f2 	ne %d15,%d15,15
80007e70:	ee 11       	jnz %d15,80007e92 <IfxVadc_Adc_initGroup+0x2b8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007e3e:	19 c3 00 80 	ld.w %d3,[%a12]512
=======
80007e72:	19 c3 00 80 	ld.w %d3,[%a12]512
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007e76:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e7a:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e7e:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007e82:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
<<<<<<< HEAD
80007e52:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e56:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007e5a:	59 cf 04 80 	st.w [%a12]516,%d15
=======
80007de2:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007de6:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007dea:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007dee:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007df2:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007df6:	19 cf 04 80 	ld.w %d15,[%a12]516
80007dfa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007dfe:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e86:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e8a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007e8e:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
<<<<<<< HEAD
<<<<<<< HEAD
80007e5e:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e62:	8b ff 00 f2 	eq %d15,%d15,15
80007e66:	ee 13       	jnz %d15,80007e8c <IfxVadc_Adc_initGroup+0x2e6>
=======
80007e02:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e06:	8b ff 00 f2 	eq %d15,%d15,15
80007e0a:	ee 13       	jnz %d15,80007e30 <IfxVadc_Adc_initGroup+0x2e6>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007e92:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e96:	8b ff 00 f2 	eq %d15,%d15,15
80007e9a:	ee 13       	jnz %d15,80007ec0 <IfxVadc_Adc_initGroup+0x2e6>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
<<<<<<< HEAD
<<<<<<< HEAD
80007e68:	19 c3 00 80 	ld.w %d3,[%a12]512
=======
80007e9c:	19 c3 00 80 	ld.w %d3,[%a12]512
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007ea0:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007ea4:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007ea8:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007eac:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007eb0:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
<<<<<<< HEAD
80007e80:	19 c2 04 80 	ld.w %d2,[%a12]516
80007e84:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e88:	59 cf 04 80 	st.w [%a12]516,%d15
=======
80007e0c:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007e10:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e14:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e18:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007e1c:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007e20:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e24:	19 c2 04 80 	ld.w %d2,[%a12]516
80007e28:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e2c:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007eb4:	19 c2 04 80 	ld.w %d2,[%a12]516
80007eb8:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007ebc:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
<<<<<<< HEAD
<<<<<<< HEAD
80007e8c:	39 ff 28 00 	ld.bu %d15,[%a15]40
=======
80007e30:	39 ff 28 00 	ld.bu %d15,[%a15]40
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ec0:	39 ff 28 00 	ld.bu %d15,[%a15]40
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
<<<<<<< HEAD
<<<<<<< HEAD
80007e90:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e94:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e98:	8f 0f c1 f1 	andn %d15,%d15,16
80007e9c:	a6 2f       	or %d15,%d2
80007e9e:	59 cf 04 80 	st.w [%a12]516,%d15
=======
80007e34:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e38:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e3c:	8f 0f c1 f1 	andn %d15,%d15,16
80007e40:	a6 2f       	or %d15,%d2
80007e42:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ec4:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007ec8:	19 cf 04 80 	ld.w %d15,[%a12]516
80007ecc:	8f 0f c1 f1 	andn %d15,%d15,16
80007ed0:	a6 2f       	or %d15,%d2
80007ed2:	59 cf 04 80 	st.w [%a12]516,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
<<<<<<< HEAD
<<<<<<< HEAD
80007ea2:	0c f5       	ld.bu %d15,[%a15]5
=======
80007e46:	0c f5       	ld.bu %d15,[%a15]5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ed6:	0c f5       	ld.bu %d15,[%a15]5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
<<<<<<< HEAD
<<<<<<< HEAD
80007ea4:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007ea8:	3a 8f       	eq %d15,%d15,%d8
80007eaa:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007eae:	19 2f 40 20 	ld.w %d15,[%a2]1152
=======
80007e48:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007e4c:	3a 8f       	eq %d15,%d15,%d8
80007e4e:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007e52:	19 2f 40 20 	ld.w %d15,[%a2]1152
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ed8:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007edc:	3a 8f       	eq %d15,%d15,%d8
80007ede:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007ee2:	19 2f 40 20 	ld.w %d15,[%a2]1152
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
<<<<<<< HEAD
<<<<<<< HEAD
80007eb2:	02 84       	mov %d4,%d8
80007eb4:	8f 3f c0 f1 	andn %d15,%d15,3
80007eb8:	a6 2f       	or %d15,%d2
80007eba:	59 2f 40 20 	st.w [%a2]1152,%d15
80007ebe:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007ec2:	40 c4       	mov.aa %a4,%a12
80007ec4:	6d ff 69 e4 	call 80004796 <IfxVadc_disablePostCalibration>
=======
80007e56:	02 84       	mov %d4,%d8
80007e58:	8f 3f c0 f1 	andn %d15,%d15,3
80007e5c:	a6 2f       	or %d15,%d2
80007e5e:	59 2f 40 20 	st.w [%a2]1152,%d15
80007e62:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007e66:	40 c4       	mov.aa %a4,%a12
80007e68:	6d ff 69 e4 	call 8000473a <IfxVadc_disablePostCalibration>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007ee6:	02 84       	mov %d4,%d8
80007ee8:	8f 3f c0 f1 	andn %d15,%d15,3
80007eec:	a6 2f       	or %d15,%d2
80007eee:	59 2f 40 20 	st.w [%a2]1152,%d15
80007ef2:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007ef6:	40 c4       	mov.aa %a4,%a12
80007ef8:	6d ff 69 e4 	call 800047ca <IfxVadc_disablePostCalibration>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
<<<<<<< HEAD
<<<<<<< HEAD
80007ec8:	8f 88 00 80 	sh %d8,%d8,8
80007ecc:	82 05       	mov %d5,0
=======
80007e6c:	8f 88 00 80 	sh %d8,%d8,8
80007e70:	82 05       	mov %d5,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007efc:	8f 88 00 80 	sh %d8,%d8,8
80007f00:	82 05       	mov %d5,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
<<<<<<< HEAD
80007ece:	3b f0 0f 40 	mov %d4,255
=======
80007e72:	3b f0 0f 40 	mov %d4,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f02:	3b f0 0f 40 	mov %d4,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
<<<<<<< HEAD
<<<<<<< HEAD
80007ed2:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007ed6:	0b 58 00 20 	add %d2,%d8,%d5
80007eda:	1b 82 12 20 	addi %d2,%d2,296
80007ede:	0c 2c       	ld.bu %d15,[%a2]12
80007ee0:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007ee4:	54 22       	ld.w %d2,[%a2]
80007ee6:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007eea:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007eec:	9a 15       	add %d15,%d5,1
80007eee:	d0 f2       	addsc.a %a2,%a15,%d15,3
=======
80007e76:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007e7a:	0b 58 00 20 	add %d2,%d8,%d5
80007e7e:	1b 82 12 20 	addi %d2,%d2,296
80007e82:	0c 2c       	ld.bu %d15,[%a2]12
80007e84:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007e88:	54 22       	ld.w %d2,[%a2]
80007e8a:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007e8e:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007e90:	9a 15       	add %d15,%d5,1
80007e92:	d0 f2       	addsc.a %a2,%a15,%d15,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f06:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007f0a:	0b 58 00 20 	add %d2,%d8,%d5
80007f0e:	1b 82 12 20 	addi %d2,%d2,296
80007f12:	0c 2c       	ld.bu %d15,[%a2]12
80007f14:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007f18:	54 22       	ld.w %d2,[%a2]
80007f1a:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007f1e:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007f20:	9a 15       	add %d15,%d5,1
80007f22:	d0 f2       	addsc.a %a2,%a15,%d15,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
<<<<<<< HEAD
<<<<<<< HEAD
80007ef0:	54 23       	ld.w %d3,[%a2]
80007ef2:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007ef6:	4b 03 71 31 	ftouz %d3,%d3
80007efa:	c2 e3       	add %d3,-2
=======
80007f24:	54 23       	ld.w %d3,[%a2]
80007f26:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007f2a:	4b 03 71 31 	ftouz %d3,%d3
80007f2e:	c2 e3       	add %d3,-2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (ticks > 31)
80007f30:	8b 03 62 f2 	lt.u %d15,%d3,32
80007f34:	ee 04       	jnz %d15,80007f3c <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
<<<<<<< HEAD
80007f02:	06 c3       	sh %d3,-4
80007f04:	1b f3 00 30 	addi %d3,%d3,15
80007f08:	0b 43 90 31 	min.u %d3,%d3,%d4
=======
80007e94:	54 23       	ld.w %d3,[%a2]
80007e96:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007e9a:	4b 03 71 31 	ftouz %d3,%d3
80007e9e:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007ea0:	8b 03 62 f2 	lt.u %d15,%d3,32
80007ea4:	ee 04       	jnz %d15,80007eac <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007ea6:	06 c3       	sh %d3,-4
80007ea8:	1b f3 00 30 	addi %d3,%d3,15
80007eac:	0b 43 90 31 	min.u %d3,%d3,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f36:	06 c3       	sh %d3,-4
80007f38:	1b f3 00 30 	addi %d3,%d3,15
80007f3c:	0b 43 90 31 	min.u %d3,%d3,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
<<<<<<< HEAD
<<<<<<< HEAD
80007f0c:	1a 58       	add %d15,%d8,%d5
80007f0e:	1b 8f 12 f0 	addi %d15,%d15,296
80007f12:	90 c2       	addsc.a %a2,%a12,%d15,2
80007f14:	4c 20       	ld.w %d15,[%a2]0
80007f16:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007f1a:	74 23       	st.w [%a2],%d3
=======
80007eb0:	1a 58       	add %d15,%d8,%d5
80007eb2:	1b 8f 12 f0 	addi %d15,%d15,296
80007eb6:	90 c2       	addsc.a %a2,%a12,%d15,2
80007eb8:	4c 20       	ld.w %d15,[%a2]0
80007eba:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007ebe:	74 23       	st.w [%a2],%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f40:	1a 58       	add %d15,%d8,%d5
80007f42:	1b 8f 12 f0 	addi %d15,%d15,296
80007f46:	90 c2       	addsc.a %a2,%a12,%d15,2
80007f48:	4c 20       	ld.w %d15,[%a2]0
80007f4a:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007f4e:	74 23       	st.w [%a2],%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
<<<<<<< HEAD
<<<<<<< HEAD
80007f1c:	df 15 04 00 	jeq %d5,1,80007f24 <IfxVadc_Adc_initGroup+0x37e>
80007f20:	82 15       	mov %d5,1
80007f22:	3c d8       	j 80007ed2 <IfxVadc_Adc_initGroup+0x32c>
=======
80007ec0:	df 15 04 00 	jeq %d5,1,80007ec8 <IfxVadc_Adc_initGroup+0x37e>
80007ec4:	82 15       	mov %d5,1
80007ec6:	3c d8       	j 80007e76 <IfxVadc_Adc_initGroup+0x32c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f50:	df 15 04 00 	jeq %d5,1,80007f58 <IfxVadc_Adc_initGroup+0x37e>
80007f54:	82 15       	mov %d5,1
80007f56:	3c d8       	j 80007f06 <IfxVadc_Adc_initGroup+0x32c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
<<<<<<< HEAD
<<<<<<< HEAD
80007f24:	40 c4       	mov.aa %a4,%a12
80007f26:	02 a4       	mov %d4,%d10
80007f28:	6d ff dc e3 	call 800046e0 <IfxVadc_disableAccess>
=======
80007f58:	40 c4       	mov.aa %a4,%a12
80007f5a:	02 a4       	mov %d4,%d10
80007f5c:	6d ff dc e3 	call 80004714 <IfxVadc_disableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    return status;
}
80007f60:	82 02       	mov %d2,0
80007f62:	00 90       	ret 

<<<<<<< HEAD
80007f30 <IfxVadc_Adc_initGroupConfig>:
=======
80007ec8:	40 c4       	mov.aa %a4,%a12
80007eca:	02 a4       	mov %d4,%d10
80007ecc:	6d ff dc e3 	call 80004684 <IfxVadc_disableAccess>

    return status;
}
80007ed0:	82 02       	mov %d2,0
80007ed2:	00 90       	ret 

80007ed4 <IfxVadc_Adc_initGroupConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f64 <IfxVadc_Adc_initGroupConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
<<<<<<< HEAD
<<<<<<< HEAD
80007f30:	40 42       	mov.aa %a2,%a4
80007f32:	7b 60 58 f3 	movh %d15,13702
80007f36:	d2 02       	mov %e2,0
80007f38:	a0 6f       	mov.a %a15,6
80007f3a:	89 22 48 01 	st.d [%a2+]8,%e2
80007f3e:	fc fe       	loop %a15,80007f3a <IfxVadc_Adc_initGroupConfig+0xa>
80007f40:	1b df 7b f3 	addi %d15,%d15,14269
80007f44:	6c 42       	st.w [%a4]8,%d15
80007f46:	6c 44       	st.w [%a4]16,%d15
80007f48:	82 1f       	mov %d15,1
80007f4a:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007f4e:	e9 4f 20 00 	st.b [%a4]32,%d15
80007f52:	e9 4f 26 00 	st.b [%a4]38,%d15
80007f56:	e9 4f 2e 00 	st.b [%a4]46,%d15
=======
80007f64:	40 42       	mov.aa %a2,%a4
80007f66:	7b 60 58 f3 	movh %d15,13702
80007f6a:	d2 02       	mov %e2,0
80007f6c:	a0 6f       	mov.a %a15,6
80007f6e:	89 22 48 01 	st.d [%a2+]8,%e2
80007f72:	fc fe       	loop %a15,80007f6e <IfxVadc_Adc_initGroupConfig+0xa>
80007f74:	1b df 7b f3 	addi %d15,%d15,14269
80007f78:	6c 42       	st.w [%a4]8,%d15
80007f7a:	6c 44       	st.w [%a4]16,%d15
80007f7c:	82 1f       	mov %d15,1
80007f7e:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007f82:	e9 4f 20 00 	st.b [%a4]32,%d15
80007f86:	e9 4f 26 00 	st.b [%a4]38,%d15
80007f8a:	e9 4f 2e 00 	st.b [%a4]46,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007f8e:	f4 45       	st.a [%a4],%a5
80007f90:	00 90       	ret 

<<<<<<< HEAD
80007f5e <IfxVadc_Adc_initModule>:
=======
80007ed4:	40 42       	mov.aa %a2,%a4
80007ed6:	7b 60 58 f3 	movh %d15,13702
80007eda:	d2 02       	mov %e2,0
80007edc:	a0 6f       	mov.a %a15,6
80007ede:	89 22 48 01 	st.d [%a2+]8,%e2
80007ee2:	fc fe       	loop %a15,80007ede <IfxVadc_Adc_initGroupConfig+0xa>
80007ee4:	1b df 7b f3 	addi %d15,%d15,14269
80007ee8:	6c 42       	st.w [%a4]8,%d15
80007eea:	6c 44       	st.w [%a4]16,%d15
80007eec:	82 1f       	mov %d15,1
80007eee:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007ef2:	e9 4f 20 00 	st.b [%a4]32,%d15
80007ef6:	e9 4f 26 00 	st.b [%a4]38,%d15
80007efa:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007efe:	f4 45       	st.a [%a4],%a5
80007f00:	00 90       	ret 

80007f02 <IfxVadc_Adc_initModule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f92 <IfxVadc_Adc_initModule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
<<<<<<< HEAD
<<<<<<< HEAD
80007f5e:	cc 50       	ld.a %a15,[%a5]0
=======
80007f02:	cc 50       	ld.a %a15,[%a5]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f92:	cc 50       	ld.a %a15,[%a5]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
<<<<<<< HEAD
<<<<<<< HEAD
80007f60:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f62:	ec 40       	st.a [%a4]0,%a15
=======
80007f04:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f06:	ec 40       	st.a [%a4]0,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f94:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f96:	ec 40       	st.a [%a4]0,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80007f64:	6d ff 0f fa 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f68:	02 24       	mov %d4,%d2
=======
80007f08:	6d ff 0f fa 	call 80007326 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f0c:	02 24       	mov %d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007f98:	6d ff 0f fa 	call 800073b6 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f9c:	02 24       	mov %d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
<<<<<<< HEAD
<<<<<<< HEAD
80007f6a:	02 2f       	mov %d15,%d2
=======
80007f9e:	02 2f       	mov %d15,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    IfxScuWdt_clearCpuEndinit(passwd);
80007fa0:	6d ff 0b f9 	call 800071b6 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007fa4:	82 02       	mov %d2,0
80007fa6:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
<<<<<<< HEAD
80007f74:	02 f4       	mov %d4,%d15
80007f76:	6d ff 3b fa 	call 800073ec <IfxScuWdt_setCpuEndinit>
=======
80007f0e:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007f10:	6d ff 0b f9 	call 80007126 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007f14:	82 02       	mov %d2,0
80007f16:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007f18:	02 f4       	mov %d4,%d15
80007f1a:	6d ff 3b fa 	call 80007390 <IfxScuWdt_setCpuEndinit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007fa8:	02 f4       	mov %d4,%d15
80007faa:	6d ff 3b fa 	call 80007420 <IfxScuWdt_setCpuEndinit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
<<<<<<< HEAD
<<<<<<< HEAD
80007f7a:	40 f4       	mov.aa %a4,%a15
80007f7c:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007f80:	6d ff 30 e6 	call 80004be0 <IfxVadc_selectPowerSupplyVoltage>
=======
80007fae:	40 f4       	mov.aa %a4,%a15
80007fb0:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007fb4:	6d ff 30 e6 	call 80004c14 <IfxVadc_selectPowerSupplyVoltage>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007fb8:	19 c4 18 00 	ld.w %d4,[%a12]24
80007fbc:	40 f4       	mov.aa %a4,%a15
80007fbe:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
<<<<<<< HEAD
80007f8e:	82 1f       	mov %d15,1
=======
80007f1e:	40 f4       	mov.aa %a4,%a15
80007f20:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007f24:	6d ff 30 e6 	call 80004b84 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f28:	19 c4 18 00 	ld.w %d4,[%a12]24
80007f2c:	40 f4       	mov.aa %a4,%a15
80007f2e:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007f32:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007fc2:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
<<<<<<< HEAD
<<<<<<< HEAD
80007f90:	6d ff 42 e5 	call 80004a14 <IfxVadc_initializeFAdcI>
80007f94:	df 02 57 00 	jeq %d2,0,80008042 <_SMALL_DATA2_+0x42>
=======
80007f34:	6d ff 42 e5 	call 800049b8 <IfxVadc_initializeFAdcI>
80007f38:	df 02 57 00 	jeq %d2,0,80007fe6 <IfxVadc_Adc_initModule+0xe4>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007fc4:	6d ff 42 e5 	call 80004a48 <IfxVadc_initializeFAdcI>
80007fc8:	df 02 57 00 	jeq %d2,0,80008076 <_SMALL_DATA2_+0x76>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
<<<<<<< HEAD
<<<<<<< HEAD
80007f98:	19 c4 14 00 	ld.w %d4,[%a12]20
80007f9c:	40 f4       	mov.aa %a4,%a15
80007f9e:	4b 04 71 41 	ftouz %d4,%d4
80007fa2:	6d ff 24 e5 	call 800049ea <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007fa6:	40 f4       	mov.aa %a4,%a15
80007fa8:	6d ff 6a e4 	call 8000487c <IfxVadc_getAdcAnalogFrequency>
80007fac:	82 03       	mov %d3,0
80007fae:	3b f0 0f 60 	mov %d6,255
=======
80007f3c:	19 c4 14 00 	ld.w %d4,[%a12]20
80007f40:	40 f4       	mov.aa %a4,%a15
80007f42:	4b 04 71 41 	ftouz %d4,%d4
80007f46:	6d ff 24 e5 	call 8000498e <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007f4a:	40 f4       	mov.aa %a4,%a15
80007f4c:	6d ff 6a e4 	call 80004820 <IfxVadc_getAdcAnalogFrequency>
80007f50:	82 03       	mov %d3,0
80007f52:	3b f0 0f 60 	mov %d6,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007fcc:	19 c4 14 00 	ld.w %d4,[%a12]20
80007fd0:	40 f4       	mov.aa %a4,%a15
80007fd2:	4b 04 71 41 	ftouz %d4,%d4
80007fd6:	6d ff 24 e5 	call 80004a1e <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007fda:	40 f4       	mov.aa %a4,%a15
80007fdc:	6d ff 6a e4 	call 800048b0 <IfxVadc_getAdcAnalogFrequency>
80007fe0:	82 03       	mov %d3,0
80007fe2:	3b f0 0f 60 	mov %d6,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
<<<<<<< HEAD
<<<<<<< HEAD
80007fb2:	9a 13       	add %d15,%d3,1
=======
80007f56:	9a 13       	add %d15,%d3,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007fe6:	9a 13       	add %d15,%d3,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
<<<<<<< HEAD
<<<<<<< HEAD
80007fb4:	1b 83 02 40 	addi %d4,%d3,40
80007fb8:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007fba:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007fbe:	0c 20       	ld.bu %d15,[%a2]0
80007fc0:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007fc2:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007fc6:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007fca:	6c 30       	st.w [%a3]0,%d15
=======
80007f58:	1b 83 02 40 	addi %d4,%d3,40
80007f5c:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007f5e:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007f62:	0c 20       	ld.bu %d15,[%a2]0
80007f64:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007f66:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007f6a:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007f6e:	6c 30       	st.w [%a3]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80007fe8:	1b 83 02 40 	addi %d4,%d3,40
80007fec:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007fee:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007ff2:	0c 20       	ld.bu %d15,[%a2]0
80007ff4:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007ff6:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007ffa:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007ffe:	6c 30       	st.w [%a3]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
<<<<<<< HEAD
<<<<<<< HEAD
80007fcc:	4c 21       	ld.w %d15,[%a2]4
80007fce:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007fd2:	4b 0f 71 f1 	ftouz %d15,%d15
80007fd6:	c2 ef       	add %d15,-2
=======
80008000:	4c 21       	ld.w %d15,[%a2]4
80008002:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80008006:	4b 0f 71 f1 	ftouz %d15,%d15
8000800a:	c2 ef       	add %d15,-2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (ticks > 31)
8000800c:	8b 0f 62 52 	lt.u %d5,%d15,32
80008010:	f6 54       	jnz %d5,80008018 <_SMALL_DATA2_+0x18>
    {
        ticks = (ticks / 16) + 15;
<<<<<<< HEAD
80007fde:	06 cf       	sh %d15,-4
80007fe0:	1b ff 00 f0 	addi %d15,%d15,15
80007fe4:	0b 6f 90 f1 	min.u %d15,%d15,%d6
=======
80007f70:	4c 21       	ld.w %d15,[%a2]4
80007f72:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007f76:	4b 0f 71 f1 	ftouz %d15,%d15
80007f7a:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007f7c:	8b 0f 62 52 	lt.u %d5,%d15,32
80007f80:	f6 54       	jnz %d5,80007f88 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007f82:	06 cf       	sh %d15,-4
80007f84:	1b ff 00 f0 	addi %d15,%d15,15
80007f88:	0b 6f 90 f1 	min.u %d15,%d15,%d6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008012:	06 cf       	sh %d15,-4
80008014:	1b ff 00 f0 	addi %d15,%d15,15
80008018:	0b 6f 90 f1 	min.u %d15,%d15,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
<<<<<<< HEAD
<<<<<<< HEAD
80007fe8:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007fec:	54 24       	ld.w %d4,[%a2]
80007fee:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007ff2:	6c 20       	st.w [%a2]0,%d15
=======
80007f8c:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007f90:	54 24       	ld.w %d4,[%a2]
80007f92:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007f96:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000801c:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80008020:	54 24       	ld.w %d4,[%a2]
80008022:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80008026:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
<<<<<<< HEAD
<<<<<<< HEAD
80007ff4:	df 13 04 00 	jeq %d3,1,80007ffc <IfxVadc_Adc_initModule+0x9e>
80007ff8:	82 13       	mov %d3,1
80007ffa:	3c dc       	j 80007fb2 <IfxVadc_Adc_initModule+0x54>
=======
80007f98:	df 13 04 00 	jeq %d3,1,80007fa0 <IfxVadc_Adc_initModule+0x9e>
80007f9c:	82 13       	mov %d3,1
80007f9e:	3c dc       	j 80007f56 <IfxVadc_Adc_initModule+0x54>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008028:	df 13 04 00 	jeq %d3,1,80008030 <_SMALL_DATA2_+0x30>
8000802c:	82 13       	mov %d3,1
8000802e:	3c dc       	j 80007fe6 <IfxVadc_Adc_initModule+0x54>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80007ffc:	39 c2 20 00 	ld.bu %d2,[%a12]32
=======
80007fa0:	39 c2 20 00 	ld.bu %d2,[%a12]32
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008030:	39 c2 20 00 	ld.bu %d2,[%a12]32
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
<<<<<<< HEAD
<<<<<<< HEAD
80008000:	82 0f       	mov %d15,0
=======
80007fa4:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008034:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
<<<<<<< HEAD
<<<<<<< HEAD
80008002:	df 12 20 80 	jne %d2,1,80008042 <_SMALL_DATA2_+0x42>
80008006:	82 08       	mov %d8,0
80008008:	1b 08 01 f0 	addi %d15,%d8,16
8000800c:	16 ff       	and %d15,255
=======
80007fa6:	df 12 20 80 	jne %d2,1,80007fe6 <IfxVadc_Adc_initModule+0xe4>
80007faa:	82 08       	mov %d8,0
80007fac:	1b 08 01 f0 	addi %d15,%d8,16
80007fb0:	16 ff       	and %d15,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008036:	df 12 20 80 	jne %d2,1,80008076 <_SMALL_DATA2_+0x76>
8000803a:	82 08       	mov %d8,0
8000803c:	1b 08 01 f0 	addi %d15,%d8,16
80008040:	16 ff       	and %d15,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
<<<<<<< HEAD
<<<<<<< HEAD
8000800e:	02 f4       	mov %d4,%d15
80008010:	40 f4       	mov.aa %a4,%a15
80008012:	6d ff 83 e3 	call 80004718 <IfxVadc_enableAccess>
=======
80007fb2:	02 f4       	mov %d4,%d15
80007fb4:	40 f4       	mov.aa %a4,%a15
80007fb6:	6d ff 83 e3 	call 800046bc <IfxVadc_enableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008042:	02 f4       	mov %d4,%d15
80008044:	40 f4       	mov.aa %a4,%a15
80008046:	6d ff 83 e3 	call 8000474c <IfxVadc_enableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
<<<<<<< HEAD
<<<<<<< HEAD
80008016:	8f a8 00 20 	sh %d2,%d8,10
8000801a:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
8000801e:	c2 18       	add %d8,1
80008020:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008024:	02 f4       	mov %d4,%d15
80008026:	8f 32 40 21 	or %d2,%d2,3
8000802a:	59 22 40 20 	st.w [%a2]1152,%d2
8000802e:	40 f4       	mov.aa %a4,%a15
=======
80007fba:	8f a8 00 20 	sh %d2,%d8,10
80007fbe:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80007fc2:	c2 18       	add %d8,1
80007fc4:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007fc8:	02 f4       	mov %d4,%d15
80007fca:	8f 32 40 21 	or %d2,%d2,3
80007fce:	59 22 40 20 	st.w [%a2]1152,%d2
80007fd2:	40 f4       	mov.aa %a4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000804a:	8f a8 00 20 	sh %d2,%d8,10
8000804e:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80008052:	c2 18       	add %d8,1
80008054:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008058:	02 f4       	mov %d4,%d15
8000805a:	8f 32 40 21 	or %d2,%d2,3
8000805e:	59 22 40 20 	st.w [%a2]1152,%d2
80008062:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
<<<<<<< HEAD
<<<<<<< HEAD
80008030:	8b 88 20 f2 	ne %d15,%d8,8
=======
80007fd4:	8b 88 20 f2 	ne %d15,%d8,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008064:	8b 88 20 f2 	ne %d15,%d8,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
<<<<<<< HEAD
<<<<<<< HEAD
80008034:	6d ff 56 e3 	call 800046e0 <IfxVadc_disableAccess>
=======
80007fd8:	6d ff 56 e3 	call 80004684 <IfxVadc_disableAccess>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008068:	6d ff 56 e3 	call 80004714 <IfxVadc_disableAccess>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
<<<<<<< HEAD
<<<<<<< HEAD
80008038:	ee e8       	jnz %d15,80008008 <_SMALL_DATA2_+0x8>
=======
80007fdc:	ee e8       	jnz %d15,80007fac <IfxVadc_Adc_initModule+0xaa>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000806c:	ee e8       	jnz %d15,8000803c <_SMALL_DATA2_+0x3c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
<<<<<<< HEAD
<<<<<<< HEAD
8000803a:	40 f4       	mov.aa %a4,%a15
8000803c:	6d ff 19 e6 	call 80004c6e <IfxVadc_startupCalibration>
=======
8000806e:	40 f4       	mov.aa %a4,%a15
80008070:	6d ff 19 e6 	call 80004ca2 <IfxVadc_startupCalibration>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return status;
80008074:	82 0f       	mov %d15,0
}
80008076:	02 f2       	mov %d2,%d15
80008078:	00 90       	ret 

<<<<<<< HEAD
80008046 <IfxVadc_Adc_initModuleConfig>:
=======
80007fde:	40 f4       	mov.aa %a4,%a15
80007fe0:	6d ff 19 e6 	call 80004c12 <IfxVadc_startupCalibration>
    }

    return status;
80007fe4:	82 0f       	mov %d15,0
}
80007fe6:	02 f2       	mov %d2,%d15
80007fe8:	00 90       	ret 

80007fea <IfxVadc_Adc_initModuleConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000807a <IfxVadc_Adc_initModuleConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
<<<<<<< HEAD
<<<<<<< HEAD
80008046:	7b 90 b9 f4 	movh %d15,19353
=======
80007fea:	7b 90 b9 f4 	movh %d15,19353
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000807a:	7b 90 b9 f4 	movh %d15,19353
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000804a:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
8000804c:	1b 0f 68 f9 	addi %d15,%d15,-27008
=======
80007fee:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007ff0:	1b 0f 68 f9 	addi %d15,%d15,-27008
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000807e:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008080:	1b 0f 68 f9 	addi %d15,%d15,-27008
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
80008050:	40 54       	mov.aa %a4,%a5
=======
80008084:	40 54       	mov.aa %a4,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->vadc                           = vadc;
80008086:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008088:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
8000808a:	6d ff 1f e4 	call 800048c8 <IfxVadc_getAdcDigitalFrequency>
8000808e:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80008090:	6d ff cf f0 	call 8000622e <IfxScuCcu_getSpbFrequency>
80008094:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
<<<<<<< HEAD
80008062:	7b 60 58 23 	movh %d2,13702
=======
80007ff4:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80007ff6:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007ff8:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80007ffa:	6d ff 1f e4 	call 80004838 <IfxVadc_getAdcDigitalFrequency>
80007ffe:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80008000:	6d ff cf f0 	call 8000619e <IfxScuCcu_getSpbFrequency>
80008004:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008006:	7b 60 58 23 	movh %d2,13702
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008096:	7b 60 58 23 	movh %d2,13702
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
<<<<<<< HEAD
<<<<<<< HEAD
80008066:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008068:	1b d2 7b 23 	addi %d2,%d2,14269
=======
8000800a:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
8000800c:	1b d2 7b 23 	addi %d2,%d2,14269
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000809a:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
8000809c:	1b d2 7b 23 	addi %d2,%d2,14269
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
<<<<<<< HEAD
<<<<<<< HEAD
8000806c:	28 8f       	st.b [%a15]8,%d15
=======
800080a0:	28 8f       	st.b [%a15]8,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    config->globalInputClass[0].sampleTime = 1.0e-6;
800080a2:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
800080a4:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
800080a8:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
800080aa:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
800080ae:	e9 ff 21 00 	st.b [%a15]33,%d15
800080b2:	00 90       	ret 

<<<<<<< HEAD
80008080 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
=======
80008010:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008012:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80008014:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80008018:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
8000801a:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
8000801e:	e9 ff 21 00 	st.b [%a15]33,%d15
80008022:	00 90       	ret 

80008024 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080b4 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
<<<<<<< HEAD
<<<<<<< HEAD
80008080:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008082:	82 0f       	mov %d15,0
=======
80008024:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008026:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080b4:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
800080b6:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
<<<<<<< HEAD
<<<<<<< HEAD
80008084:	40 a2       	mov.aa %a2,%sp
=======
80008028:	40 a2       	mov.aa %a2,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080b8:	40 a2       	mov.aa %a2,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80008086:	2c 49       	st.b [%a4]9,%d15
=======
800080ba:	2c 49       	st.b [%a4]9,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxConfig->groupId               = IfxVadc_GroupId_0;
800080bc:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
800080be:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
800080c0:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
800080c2:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
800080c4:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
800080c6:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
800080c8:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
<<<<<<< HEAD
80008098:	d2 02       	mov %e2,0
8000809a:	89 22 48 01 	st.d [%a2+]8,%e2
8000809e:	89 22 48 01 	st.d [%a2+]8,%e2
=======
8000802a:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
8000802c:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
8000802e:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
80008030:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
80008032:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80008034:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80008036:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80008038:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
8000803c:	d2 02       	mov %e2,0
8000803e:	89 22 48 01 	st.d [%a2+]8,%e2
80008042:	89 22 48 01 	st.d [%a2+]8,%e2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080cc:	d2 02       	mov %e2,0
800080ce:	89 22 48 01 	st.d [%a2+]8,%e2
800080d2:	89 22 48 01 	st.d [%a2+]8,%e2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
<<<<<<< HEAD
<<<<<<< HEAD
800080a2:	3b 00 f8 ff 	mov %d15,-128
=======
80008046:	3b 00 f8 ff 	mov %d15,-128
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080d6:	3b 00 f8 ff 	mov %d15,-128
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
<<<<<<< HEAD
<<<<<<< HEAD
800080a6:	f4 45       	st.a [%a4],%a5
=======
8000804a:	f4 45       	st.a [%a4],%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080da:	f4 45       	st.a [%a4],%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
<<<<<<< HEAD
<<<<<<< HEAD
800080a8:	40 af       	mov.aa %a15,%sp
=======
8000804c:	40 af       	mov.aa %a15,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080dc:	40 af       	mov.aa %a15,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
<<<<<<< HEAD
<<<<<<< HEAD
800080aa:	2c ac       	st.b [%sp]12,%d15
800080ac:	d9 44 0c 00 	lea %a4,[%a4]12
800080b0:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080b4:	89 42 48 01 	st.d [%a4+]8,%e2
800080b8:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080bc:	89 42 48 01 	st.d [%a4+]8,%e2
800080c0:	00 90       	ret 

800080c2 <IfxVadc_Adc_initExternalMultiplexerMode>:
=======
8000804e:	2c ac       	st.b [%sp]12,%d15
80008050:	d9 44 0c 00 	lea %a4,[%a4]12
80008054:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008058:	89 42 48 01 	st.d [%a4+]8,%e2
8000805c:	09 f2 48 01 	ld.d %e2,[%a15+]8
80008060:	89 42 48 01 	st.d [%a4+]8,%e2
80008064:	00 90       	ret 

80008066 <IfxVadc_Adc_initExternalMultiplexerMode>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080de:	2c ac       	st.b [%sp]12,%d15
800080e0:	d9 44 0c 00 	lea %a4,[%a4]12
800080e4:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080e8:	89 42 48 01 	st.d [%a4+]8,%e2
800080ec:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080f0:	89 42 48 01 	st.d [%a4+]8,%e2
800080f4:	00 90       	ret 

800080f6 <IfxVadc_Adc_initExternalMultiplexerMode>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
<<<<<<< HEAD
<<<<<<< HEAD
800080c2:	0c 58       	ld.bu %d15,[%a5]8
=======
80008066:	0c 58       	ld.bu %d15,[%a5]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080f6:	0c 58       	ld.bu %d15,[%a5]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
<<<<<<< HEAD
<<<<<<< HEAD
800080c4:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
800080c6:	8f af 00 20 	sh %d2,%d15,10
800080ca:	1b 02 48 20 	addi %d2,%d2,1152
800080ce:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
=======
80008068:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
8000806a:	8f af 00 20 	sh %d2,%d15,10
8000806e:	1b 02 48 20 	addi %d2,%d2,1152
80008072:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800080f8:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
800080fa:	8f af 00 20 	sh %d2,%d15,10
800080fe:	1b 02 48 20 	addi %d2,%d2,1152
80008102:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
<<<<<<< HEAD
<<<<<<< HEAD
800080d2:	39 52 0a 00 	ld.bu %d2,[%a5]10
=======
80008076:	39 52 0a 00 	ld.bu %d2,[%a5]10
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008106:	39 52 0a 00 	ld.bu %d2,[%a5]10
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
<<<<<<< HEAD
<<<<<<< HEAD
800080d6:	40 4c       	mov.aa %a12,%a4
800080d8:	40 5f       	mov.aa %a15,%a5
800080da:	16 0f       	and %d15,15
800080dc:	f6 2a       	jnz %d2,800080f0 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
800080de:	19 42 30 f0 	ld.w %d2,[%a4]1008
800080e2:	8f f2 c0 21 	andn %d2,%d2,15
800080e6:	a6 2f       	or %d15,%d2
800080e8:	59 cf 30 f0 	st.w [%a12]1008,%d15
800080ec:	82 0f       	mov %d15,0
800080ee:	3c 07       	j 800080fc <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
=======
8000807a:	40 4c       	mov.aa %a12,%a4
8000807c:	40 5f       	mov.aa %a15,%a5
8000807e:	16 0f       	and %d15,15
80008080:	f6 2a       	jnz %d2,80008094 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80008082:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008086:	8f f2 c0 21 	andn %d2,%d2,15
8000808a:	a6 2f       	or %d15,%d2
8000808c:	59 cf 30 f0 	st.w [%a12]1008,%d15
80008090:	82 0f       	mov %d15,0
80008092:	3c 07       	j 800080a0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000810a:	40 4c       	mov.aa %a12,%a4
8000810c:	40 5f       	mov.aa %a15,%a5
8000810e:	16 0f       	and %d15,15
80008110:	f6 2a       	jnz %d2,80008124 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80008112:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008116:	8f f2 c0 21 	andn %d2,%d2,15
8000811a:	a6 2f       	or %d15,%d2
8000811c:	59 cf 30 f0 	st.w [%a12]1008,%d15
80008120:	82 0f       	mov %d15,0
80008122:	3c 07       	j 80008130 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
<<<<<<< HEAD
<<<<<<< HEAD
800080f0:	19 42 30 f0 	ld.w %d2,[%a4]1008
800080f4:	06 4f       	sh %d15,4
800080f6:	8f 02 cf 21 	andn %d2,%d2,240
800080fa:	3c f6       	j 800080e6 <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
=======
80008094:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008098:	06 4f       	sh %d15,4
8000809a:	8f 02 cf 21 	andn %d2,%d2,240
8000809e:	3c f6       	j 8000808a <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008124:	19 42 30 f0 	ld.w %d2,[%a4]1008
80008128:	06 4f       	sh %d15,4
8000812a:	8f 02 cf 21 	andn %d2,%d2,240
8000812e:	3c f6       	j 8000811a <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
<<<<<<< HEAD
<<<<<<< HEAD
800080fc:	90 f2       	addsc.a %a2,%a15,%d15,2
800080fe:	99 2d 0c 00 	ld.a %a13,[%a2]12
80008102:	bd 0d 19 00 	jz.a %a13,80008134 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
80008106:	39 d3 0c 00 	ld.bu %d3,[%a13]12
8000810a:	39 f2 18 00 	ld.bu %d2,[%a15]24
8000810e:	99 d4 04 00 	ld.a %a4,[%a13]4
80008112:	0f 23 a0 50 	or %d5,%d3,%d2
80008116:	39 d4 08 00 	ld.bu %d4,[%a13]8
8000811a:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
8000811e:	39 f8 19 00 	ld.bu %d8,[%a15]25
80008122:	6d ff c4 ed 	call 80005caa <IfxPort_setPinMode>
=======
800080a0:	90 f2       	addsc.a %a2,%a15,%d15,2
800080a2:	99 2d 0c 00 	ld.a %a13,[%a2]12
800080a6:	bd 0d 19 00 	jz.a %a13,800080d8 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
800080aa:	39 d3 0c 00 	ld.bu %d3,[%a13]12
800080ae:	39 f2 18 00 	ld.bu %d2,[%a15]24
800080b2:	99 d4 04 00 	ld.a %a4,[%a13]4
800080b6:	0f 23 a0 50 	or %d5,%d3,%d2
800080ba:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080be:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
800080c2:	39 f8 19 00 	ld.bu %d8,[%a15]25
800080c6:	6d ff c4 ed 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008130:	90 f2       	addsc.a %a2,%a15,%d15,2
80008132:	99 2d 0c 00 	ld.a %a13,[%a2]12
80008136:	bd 0d 19 00 	jz.a %a13,80008168 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
8000813a:	39 d3 0c 00 	ld.bu %d3,[%a13]12
8000813e:	39 f2 18 00 	ld.bu %d2,[%a15]24
80008142:	99 d4 04 00 	ld.a %a4,[%a13]4
80008146:	0f 23 a0 50 	or %d5,%d3,%d2
8000814a:	39 d4 08 00 	ld.bu %d4,[%a13]8
8000814e:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
80008152:	39 f8 19 00 	ld.bu %d8,[%a15]25
80008156:	6d ff c4 ed 	call 80005cde <IfxPort_setPinMode>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
<<<<<<< HEAD
<<<<<<< HEAD
80008126:	99 d4 04 00 	ld.a %a4,[%a13]4
8000812a:	39 d4 08 00 	ld.bu %d4,[%a13]8
8000812e:	02 85       	mov %d5,%d8
80008130:	6d ff 3b ee 	call 80005da6 <IfxPort_setPinPadDriver>
80008134:	c2 1f       	add %d15,1
=======
800080ca:	99 d4 04 00 	ld.a %a4,[%a13]4
800080ce:	39 d4 08 00 	ld.bu %d4,[%a13]8
800080d2:	02 85       	mov %d5,%d8
800080d4:	6d ff 3b ee 	call 80005d4a <IfxPort_setPinPadDriver>
800080d8:	c2 1f       	add %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000815a:	99 d4 04 00 	ld.a %a4,[%a13]4
8000815e:	39 d4 08 00 	ld.bu %d4,[%a13]8
80008162:	02 85       	mov %d5,%d8
80008164:	6d ff 3b ee 	call 80005dda <IfxPort_setPinPadDriver>
80008168:	c2 1f       	add %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
<<<<<<< HEAD
<<<<<<< HEAD
80008136:	df 3f e3 ff 	jne %d15,3,800080fc <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
=======
800080da:	df 3f e3 ff 	jne %d15,3,800080a0 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000816a:	df 3f e3 ff 	jne %d15,3,80008130 <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
<<<<<<< HEAD
<<<<<<< HEAD
8000813a:	0c f7       	ld.bu %d15,[%a15]7
8000813c:	08 44       	ld.bu %d4,[%a15]4
8000813e:	78 00       	st.w [%sp]0,%d15
80008140:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008144:	08 95       	ld.bu %d5,[%a15]9
80008146:	08 56       	ld.bu %d6,[%a15]5
80008148:	08 67       	ld.bu %d7,[%a15]6
8000814a:	78 01       	st.w [%sp]4,%d15
8000814c:	40 c4       	mov.aa %a4,%a12
8000814e:	40 e5       	mov.aa %a5,%a14
80008150:	1d ff 00 e3 	j 80004750 <IfxVadc_configExternalMultiplexerMode>

80008154 <Ifx_CircularBuffer_get32>:
=======
800080de:	0c f7       	ld.bu %d15,[%a15]7
800080e0:	08 44       	ld.bu %d4,[%a15]4
800080e2:	78 00       	st.w [%sp]0,%d15
800080e4:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800080e8:	08 95       	ld.bu %d5,[%a15]9
800080ea:	08 56       	ld.bu %d6,[%a15]5
800080ec:	08 67       	ld.bu %d7,[%a15]6
800080ee:	78 01       	st.w [%sp]4,%d15
800080f0:	40 c4       	mov.aa %a4,%a12
800080f2:	40 e5       	mov.aa %a5,%a14
800080f4:	1d ff 00 e3 	j 800046f4 <IfxVadc_configExternalMultiplexerMode>

800080f8 <Ifx_CircularBuffer_get32>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000816e:	0c f7       	ld.bu %d15,[%a15]7
80008170:	08 44       	ld.bu %d4,[%a15]4
80008172:	78 00       	st.w [%sp]0,%d15
80008174:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008178:	08 95       	ld.bu %d5,[%a15]9
8000817a:	08 56       	ld.bu %d6,[%a15]5
8000817c:	08 67       	ld.bu %d7,[%a15]6
8000817e:	78 01       	st.w [%sp]4,%d15
80008180:	40 c4       	mov.aa %a4,%a12
80008182:	40 e5       	mov.aa %a5,%a14
80008184:	1d ff 00 e3 	j 80004784 <IfxVadc_configExternalMultiplexerMode>

80008188 <Ifx_CircularBuffer_get32>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
<<<<<<< HEAD
<<<<<<< HEAD
80008154:	cc 40       	ld.a %a15,[%a4]0
80008156:	b9 4f 04 00 	ld.hu %d15,[%a4]4
=======
800080f8:	cc 40       	ld.a %a15,[%a4]0
800080fa:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008188:	cc 40       	ld.a %a15,[%a4]0
8000818a:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    buffer->index += 4;

    if (buffer->index >= buffer->length)
<<<<<<< HEAD
<<<<<<< HEAD
8000815a:	b9 43 06 00 	ld.hu %d3,[%a4]6
=======
800080fe:	b9 43 06 00 	ld.hu %d3,[%a4]6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000818e:	b9 43 06 00 	ld.hu %d3,[%a4]6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
<<<<<<< HEAD
<<<<<<< HEAD
8000815e:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008160:	c2 4f       	add %d15,4
80008162:	37 0f 70 f0 	extr.u %d15,%d15,0,16
=======
80008102:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008104:	c2 4f       	add %d15,4
80008106:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008192:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008194:	c2 4f       	add %d15,4
80008196:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
<<<<<<< HEAD
<<<<<<< HEAD
80008166:	48 02       	ld.w %d2,[%a15]0
=======
8000819a:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    buffer->index += 4;
8000819c:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000819e:	3f 3f 04 80 	jlt.u %d15,%d3,800081a6 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
<<<<<<< HEAD
8000816e:	82 0f       	mov %d15,0
80008170:	ac 42       	st.h [%a4]4,%d15
=======
8000810a:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
8000810c:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000810e:	3f 3f 04 80 	jlt.u %d15,%d3,80008116 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
80008112:	82 0f       	mov %d15,0
80008114:	ac 42       	st.h [%a4]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081a2:	82 0f       	mov %d15,0
800081a4:	ac 42       	st.h [%a4]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return data;
}
<<<<<<< HEAD
<<<<<<< HEAD
80008172:	00 90       	ret 

80008174 <Ifx_CircularBuffer_get16>:
=======
80008116:	00 90       	ret 

80008118 <Ifx_CircularBuffer_get16>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081a6:	00 90       	ret 

800081a8 <Ifx_CircularBuffer_get16>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
<<<<<<< HEAD
<<<<<<< HEAD
80008174:	cc 40       	ld.a %a15,[%a4]0
80008176:	b9 4f 04 00 	ld.hu %d15,[%a4]4
=======
80008118:	cc 40       	ld.a %a15,[%a4]0
8000811a:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081a8:	cc 40       	ld.a %a15,[%a4]0
800081aa:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    buffer->index += 2;

    if (buffer->index >= buffer->length)
<<<<<<< HEAD
<<<<<<< HEAD
8000817a:	b9 43 06 00 	ld.hu %d3,[%a4]6
=======
8000811e:	b9 43 06 00 	ld.hu %d3,[%a4]6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081ae:	b9 43 06 00 	ld.hu %d3,[%a4]6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
<<<<<<< HEAD
<<<<<<< HEAD
8000817e:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80008180:	c2 2f       	add %d15,2
80008182:	37 0f 70 f0 	extr.u %d15,%d15,0,16
=======
80008122:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80008124:	c2 2f       	add %d15,2
80008126:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081b2:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
800081b4:	c2 2f       	add %d15,2
800081b6:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
<<<<<<< HEAD
<<<<<<< HEAD
80008186:	b9 f2 00 00 	ld.hu %d2,[%a15]0
=======
800081ba:	b9 f2 00 00 	ld.hu %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    buffer->index += 2;
800081be:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
800081c0:	3f 3f 04 80 	jlt.u %d15,%d3,800081c8 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
<<<<<<< HEAD
80008190:	82 0f       	mov %d15,0
80008192:	ac 42       	st.h [%a4]4,%d15
=======
8000812a:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
8000812e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80008130:	3f 3f 04 80 	jlt.u %d15,%d3,80008138 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80008134:	82 0f       	mov %d15,0
80008136:	ac 42       	st.h [%a4]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081c4:	82 0f       	mov %d15,0
800081c6:	ac 42       	st.h [%a4]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return data;
}
<<<<<<< HEAD
<<<<<<< HEAD
80008194:	00 90       	ret 

80008196 <Ifx_CircularBuffer_addDataIncr>:
=======
80008138:	00 90       	ret 

8000813a <Ifx_CircularBuffer_addDataIncr>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081c8:	00 90       	ret 

800081ca <Ifx_CircularBuffer_addDataIncr>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
<<<<<<< HEAD
<<<<<<< HEAD
80008196:	cc 40       	ld.a %a15,[%a4]0
80008198:	b9 4f 04 00 	ld.hu %d15,[%a4]4
=======
800081ca:	cc 40       	ld.a %a15,[%a4]0
800081cc:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
800081d0:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081d4:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
800081d6:	c2 4f       	add %d15,4
800081d8:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081dc:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
800081de:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
800081e0:	3f 2f 04 80 	jlt.u %d15,%d2,800081e8 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
800081e4:	82 0f       	mov %d15,0
800081e6:	ac 42       	st.h [%a4]4,%d15
800081e8:	00 90       	ret 

<<<<<<< HEAD
800081b6 <Ifx_CircularBuffer_read8>:
=======
8000813a:	cc 40       	ld.a %a15,[%a4]0
8000813c:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
80008140:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008144:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
80008146:	c2 4f       	add %d15,4
80008148:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
8000814c:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
8000814e:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
80008150:	3f 2f 04 80 	jlt.u %d15,%d2,80008158 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80008154:	82 0f       	mov %d15,0
80008156:	ac 42       	st.h [%a4]4,%d15
80008158:	00 90       	ret 

8000815a <Ifx_CircularBuffer_read8>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081ea <Ifx_CircularBuffer_read8>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
<<<<<<< HEAD
<<<<<<< HEAD
800081b6:	80 52       	mov.d %d2,%a5
800081b8:	37 04 70 40 	extr.u %d4,%d4,0,16
800081bc:	8f 02 60 31 	nor %d3,%d2,0
800081c0:	1a 42       	add %d15,%d2,%d4
800081c2:	42 3f       	add %d15,%d3
800081c4:	42 23       	add %d3,%d2
800081c6:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
800081c8:	40 5f       	mov.aa %a15,%a5
=======
8000815a:	80 52       	mov.d %d2,%a5
8000815c:	37 04 70 40 	extr.u %d4,%d4,0,16
80008160:	8f 02 60 31 	nor %d3,%d2,0
80008164:	1a 42       	add %d15,%d2,%d4
80008166:	42 3f       	add %d15,%d3
80008168:	42 23       	add %d3,%d2
8000816a:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
8000816c:	40 5f       	mov.aa %a15,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081ea:	80 52       	mov.d %d2,%a5
800081ec:	37 04 70 40 	extr.u %d4,%d4,0,16
800081f0:	8f 02 60 31 	nor %d3,%d2,0
800081f4:	1a 42       	add %d15,%d2,%d4
800081f6:	42 3f       	add %d15,%d3
800081f8:	42 23       	add %d3,%d2
800081fa:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
800081fc:	40 5f       	mov.aa %a15,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800081ca:	82 06       	mov %d6,0
800081cc:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800081d0:	6f f3 03 00 	jz.t %d3,15,800081d6 <Ifx_CircularBuffer_read8+0x20>
800081d4:	82 0f       	mov %d15,0
=======
8000816e:	82 06       	mov %d6,0
80008170:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008174:	6f f3 03 00 	jz.t %d3,15,8000817a <Ifx_CircularBuffer_read8+0x20>
80008178:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800081fe:	82 06       	mov %d6,0
80008200:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008204:	6f f3 03 00 	jz.t %d3,15,8000820a <Ifx_CircularBuffer_read8+0x20>
80008208:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
<<<<<<< HEAD
<<<<<<< HEAD
800081d6:	b9 43 04 00 	ld.hu %d3,[%a4]4
800081da:	d4 42       	ld.a %a2,[%a4]
800081dc:	60 33       	mov.a %a3,%d3
800081de:	30 32       	add.a %a2,%a3
800081e0:	14 23       	ld.bu %d3,[%a2]
800081e2:	24 f3       	st.b [%a15+],%d3
=======
8000820a:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000820e:	d4 42       	ld.a %a2,[%a4]
80008210:	60 33       	mov.a %a3,%d3
80008212:	30 32       	add.a %a2,%a3
80008214:	14 23       	ld.bu %d3,[%a2]
80008216:	24 f3       	st.b [%a15+],%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        Dest  = &Dest[1];
        buffer->index++;
80008218:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
<<<<<<< HEAD
800081e8:	b9 45 06 00 	ld.hu %d5,[%a4]6
=======
8000817a:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000817e:	d4 42       	ld.a %a2,[%a4]
80008180:	60 33       	mov.a %a3,%d3
80008182:	30 32       	add.a %a2,%a3
80008184:	14 23       	ld.bu %d3,[%a2]
80008186:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80008188:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000818c:	b9 45 06 00 	ld.hu %d5,[%a4]6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000821c:	b9 45 06 00 	ld.hu %d5,[%a4]6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
<<<<<<< HEAD
<<<<<<< HEAD
800081ec:	c2 13       	add %d3,1
800081ee:	37 03 70 30 	extr.u %d3,%d3,0,16
800081f2:	f9 43 04 00 	st.h [%a4]4,%d3
=======
80008220:	c2 13       	add %d3,1
80008222:	37 03 70 30 	extr.u %d3,%d3,0,16
80008226:	f9 43 04 00 	st.h [%a4]4,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if (buffer->index >= buffer->length)
8000822a:	3f 53 04 80 	jlt.u %d3,%d5,80008232 <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
8000822e:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008232:	9f 0f ec ff 	jned %d15,0,8000820a <Ifx_CircularBuffer_read8+0x20>
80008236:	c2 f4       	add %d4,-1
80008238:	37 04 50 40 	extr %d4,%d4,0,16
8000823c:	8b 04 40 43 	max %d4,%d4,0
80008240:	c2 14       	add %d4,1

    return Dest;
}
80008242:	1a 42       	add %d15,%d2,%d4
80008244:	60 f2       	mov.a %a2,%d15
80008246:	00 90       	ret 

<<<<<<< HEAD
80008214 <Ifx_CircularBuffer_read32>:
=======
80008190:	c2 13       	add %d3,1
80008192:	37 03 70 30 	extr.u %d3,%d3,0,16
80008196:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
8000819a:	3f 53 04 80 	jlt.u %d3,%d5,800081a2 <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
8000819e:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800081a2:	9f 0f ec ff 	jned %d15,0,8000817a <Ifx_CircularBuffer_read8+0x20>
800081a6:	c2 f4       	add %d4,-1
800081a8:	37 04 50 40 	extr %d4,%d4,0,16
800081ac:	8b 04 40 43 	max %d4,%d4,0
800081b0:	c2 14       	add %d4,1

    return Dest;
}
800081b2:	1a 42       	add %d15,%d2,%d4
800081b4:	60 f2       	mov.a %a2,%d15
800081b6:	00 90       	ret 

800081b8 <Ifx_CircularBuffer_read32>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008248 <Ifx_CircularBuffer_read32>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
<<<<<<< HEAD
<<<<<<< HEAD
80008214:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
80008218:	d4 42       	ld.a %a2,[%a4]
8000821a:	1b f4 ff 5f 	addi %d5,%d4,-1
8000821e:	b9 4f 04 00 	ld.hu %d15,[%a4]4
=======
800081b8:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
800081bc:	d4 42       	ld.a %a2,[%a4]
800081be:	1b f4 ff 5f 	addi %d5,%d4,-1
800081c2:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008248:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
8000824c:	d4 42       	ld.a %a2,[%a4]
8000824e:	1b f4 ff 5f 	addi %d5,%d4,-1
80008252:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
<<<<<<< HEAD
<<<<<<< HEAD
80008222:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008226:	82 03       	mov %d3,0
80008228:	37 05 70 20 	extr.u %d2,%d5,0,16
8000822c:	6f f5 03 00 	jz.t %d5,15,80008232 <Ifx_CircularBuffer_read32+0x1e>
80008230:	82 02       	mov %d2,0
=======
800081c6:	b9 46 06 00 	ld.hu %d6,[%a4]6
800081ca:	82 03       	mov %d3,0
800081cc:	37 05 70 20 	extr.u %d2,%d5,0,16
800081d0:	6f f5 03 00 	jz.t %d5,15,800081d6 <Ifx_CircularBuffer_read32+0x1e>
800081d4:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008256:	b9 46 06 00 	ld.hu %d6,[%a4]6
8000825a:	82 03       	mov %d3,0
8000825c:	37 05 70 20 	extr.u %d2,%d5,0,16
80008260:	6f f5 03 00 	jz.t %d5,15,80008266 <Ifx_CircularBuffer_read32+0x1e>
80008264:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
<<<<<<< HEAD
<<<<<<< HEAD
80008232:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008234:	c2 4f       	add %d15,4
=======
800081d6:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081d8:	c2 4f       	add %d15,4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008266:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008268:	c2 4f       	add %d15,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
<<<<<<< HEAD
<<<<<<< HEAD
80008236:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008238:	37 0f 70 f0 	extr.u %d15,%d15,0,16
=======
800081da:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800081dc:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000826a:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
8000826c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
<<<<<<< HEAD
<<<<<<< HEAD
8000823c:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008240:	c2 13       	add %d3,1
80008242:	68 05       	st.w [%a15]0,%d5
=======
800081e0:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800081e4:	c2 13       	add %d3,1
800081e6:	68 05       	st.w [%a15]0,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008270:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008274:	c2 13       	add %d3,1
80008276:	68 05       	st.w [%a15]0,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80008244:	0b 6f 30 51 	lt.u %d5,%d15,%d6
80008248:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
=======
800081e8:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800081ec:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008278:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000827c:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        count--;
    } while (count > 0);
<<<<<<< HEAD
<<<<<<< HEAD
8000824c:	9f 02 f3 ff 	jned %d2,0,80008232 <Ifx_CircularBuffer_read32+0x1e>
80008250:	c2 f4       	add %d4,-1
80008252:	37 04 50 40 	extr %d4,%d4,0,16
80008256:	ac 42       	st.h [%a4]4,%d15
80008258:	8b 04 40 43 	max %d4,%d4,0
8000825c:	c2 14       	add %d4,1
=======
80008280:	9f 02 f3 ff 	jned %d2,0,80008266 <Ifx_CircularBuffer_read32+0x1e>
80008284:	c2 f4       	add %d4,-1
80008286:	37 04 50 40 	extr %d4,%d4,0,16
8000828a:	ac 42       	st.h [%a4]4,%d15
8000828c:	8b 04 40 43 	max %d4,%d4,0
80008290:	c2 14       	add %d4,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    return Dest;
}
80008292:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008296:	00 90       	ret 

<<<<<<< HEAD
80008264 <Ifx_CircularBuffer_write8>:
=======
800081f0:	9f 02 f3 ff 	jned %d2,0,800081d6 <Ifx_CircularBuffer_read32+0x1e>
800081f4:	c2 f4       	add %d4,-1
800081f6:	37 04 50 40 	extr %d4,%d4,0,16
800081fa:	ac 42       	st.h [%a4]4,%d15
800081fc:	8b 04 40 43 	max %d4,%d4,0
80008200:	c2 14       	add %d4,1

    return Dest;
}
80008202:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008206:	00 90       	ret 

80008208 <Ifx_CircularBuffer_write8>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008298 <Ifx_CircularBuffer_write8>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
<<<<<<< HEAD
<<<<<<< HEAD
80008264:	80 52       	mov.d %d2,%a5
80008266:	37 04 70 40 	extr.u %d4,%d4,0,16
8000826a:	8f 02 60 31 	nor %d3,%d2,0
8000826e:	1a 42       	add %d15,%d2,%d4
80008270:	42 3f       	add %d15,%d3
80008272:	42 23       	add %d3,%d2
80008274:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
80008276:	40 5f       	mov.aa %a15,%a5
=======
80008208:	80 52       	mov.d %d2,%a5
8000820a:	37 04 70 40 	extr.u %d4,%d4,0,16
8000820e:	8f 02 60 31 	nor %d3,%d2,0
80008212:	1a 42       	add %d15,%d2,%d4
80008214:	42 3f       	add %d15,%d3
80008216:	42 23       	add %d3,%d2
80008218:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
8000821a:	40 5f       	mov.aa %a15,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008298:	80 52       	mov.d %d2,%a5
8000829a:	37 04 70 40 	extr.u %d4,%d4,0,16
8000829e:	8f 02 60 31 	nor %d3,%d2,0
800082a2:	1a 42       	add %d15,%d2,%d4
800082a4:	42 3f       	add %d15,%d3
800082a6:	42 23       	add %d3,%d2
800082a8:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
800082aa:	40 5f       	mov.aa %a15,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80008278:	82 06       	mov %d6,0
8000827a:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000827e:	6f f3 03 00 	jz.t %d3,15,80008284 <Ifx_CircularBuffer_write8+0x20>
80008282:	82 0f       	mov %d15,0
=======
8000821c:	82 06       	mov %d6,0
8000821e:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008222:	6f f3 03 00 	jz.t %d3,15,80008228 <Ifx_CircularBuffer_write8+0x20>
80008226:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800082ac:	82 06       	mov %d6,0
800082ae:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800082b2:	6f f3 03 00 	jz.t %d3,15,800082b8 <Ifx_CircularBuffer_write8+0x20>
800082b6:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
<<<<<<< HEAD
<<<<<<< HEAD
80008284:	b9 43 04 00 	ld.hu %d3,[%a4]4
80008288:	d4 42       	ld.a %a2,[%a4]
8000828a:	60 33       	mov.a %a3,%d3
8000828c:	04 f5       	ld.bu %d5,[%a15+]
8000828e:	30 32       	add.a %a2,%a3
80008290:	34 25       	st.b [%a2],%d5
=======
800082b8:	b9 43 04 00 	ld.hu %d3,[%a4]4
800082bc:	d4 42       	ld.a %a2,[%a4]
800082be:	60 33       	mov.a %a3,%d3
800082c0:	04 f5       	ld.bu %d5,[%a15+]
800082c2:	30 32       	add.a %a2,%a3
800082c4:	34 25       	st.b [%a2],%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        source                                 = &source[1];
        buffer->index++;
800082c6:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
<<<<<<< HEAD
80008296:	b9 45 06 00 	ld.hu %d5,[%a4]6
=======
80008228:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000822c:	d4 42       	ld.a %a2,[%a4]
8000822e:	60 33       	mov.a %a3,%d3
80008230:	04 f5       	ld.bu %d5,[%a15+]
80008232:	30 32       	add.a %a2,%a3
80008234:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
80008236:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
8000823a:	b9 45 06 00 	ld.hu %d5,[%a4]6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800082ca:	b9 45 06 00 	ld.hu %d5,[%a4]6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
<<<<<<< HEAD
<<<<<<< HEAD
8000829a:	c2 13       	add %d3,1
8000829c:	37 03 70 30 	extr.u %d3,%d3,0,16
800082a0:	f9 43 04 00 	st.h [%a4]4,%d3
=======
800082ce:	c2 13       	add %d3,1
800082d0:	37 03 70 30 	extr.u %d3,%d3,0,16
800082d4:	f9 43 04 00 	st.h [%a4]4,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if (buffer->index >= buffer->length)
800082d8:	3f 53 04 80 	jlt.u %d3,%d5,800082e0 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
800082dc:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800082e0:	9f 0f ec ff 	jned %d15,0,800082b8 <Ifx_CircularBuffer_write8+0x20>
800082e4:	c2 f4       	add %d4,-1
800082e6:	37 04 50 40 	extr %d4,%d4,0,16
800082ea:	8b 04 40 43 	max %d4,%d4,0
800082ee:	c2 14       	add %d4,1

    return source;
}
800082f0:	1a 42       	add %d15,%d2,%d4
800082f2:	60 f2       	mov.a %a2,%d15
800082f4:	00 90       	ret 

<<<<<<< HEAD
800082c2 <Ifx_CircularBuffer_write32>:
=======
8000823e:	c2 13       	add %d3,1
80008240:	37 03 70 30 	extr.u %d3,%d3,0,16
80008244:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008248:	3f 53 04 80 	jlt.u %d3,%d5,80008250 <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
8000824c:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
80008250:	9f 0f ec ff 	jned %d15,0,80008228 <Ifx_CircularBuffer_write8+0x20>
80008254:	c2 f4       	add %d4,-1
80008256:	37 04 50 40 	extr %d4,%d4,0,16
8000825a:	8b 04 40 43 	max %d4,%d4,0
8000825e:	c2 14       	add %d4,1

    return source;
}
80008260:	1a 42       	add %d15,%d2,%d4
80008262:	60 f2       	mov.a %a2,%d15
80008264:	00 90       	ret 

80008266 <Ifx_CircularBuffer_write32>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800082f6 <Ifx_CircularBuffer_write32>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
<<<<<<< HEAD
<<<<<<< HEAD
800082c2:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
800082c6:	d4 42       	ld.a %a2,[%a4]
800082c8:	1b f4 ff 5f 	addi %d5,%d4,-1
800082cc:	b9 4f 04 00 	ld.hu %d15,[%a4]4
=======
80008266:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
8000826a:	d4 42       	ld.a %a2,[%a4]
8000826c:	1b f4 ff 5f 	addi %d5,%d4,-1
80008270:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800082f6:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
800082fa:	d4 42       	ld.a %a2,[%a4]
800082fc:	1b f4 ff 5f 	addi %d5,%d4,-1
80008300:	b9 4f 04 00 	ld.hu %d15,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
<<<<<<< HEAD
<<<<<<< HEAD
800082d0:	b9 46 06 00 	ld.hu %d6,[%a4]6
800082d4:	82 03       	mov %d3,0
800082d6:	37 05 70 20 	extr.u %d2,%d5,0,16
800082da:	6f f5 03 00 	jz.t %d5,15,800082e0 <Ifx_CircularBuffer_write32+0x1e>
800082de:	82 02       	mov %d2,0
=======
80008274:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008278:	82 03       	mov %d3,0
8000827a:	37 05 70 20 	extr.u %d2,%d5,0,16
8000827e:	6f f5 03 00 	jz.t %d5,15,80008284 <Ifx_CircularBuffer_write32+0x1e>
80008282:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008304:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008308:	82 03       	mov %d3,0
8000830a:	37 05 70 20 	extr.u %d2,%d5,0,16
8000830e:	6f f5 03 00 	jz.t %d5,15,80008314 <Ifx_CircularBuffer_write32+0x1e>
80008312:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
<<<<<<< HEAD
<<<<<<< HEAD
800082e0:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800082e4:	c2 13       	add %d3,1
800082e6:	48 05       	ld.w %d5,[%a15]0
800082e8:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
800082ea:	c2 4f       	add %d15,4
800082ec:	37 0f 70 f0 	extr.u %d15,%d15,0,16
=======
80008284:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008288:	c2 13       	add %d3,1
8000828a:	48 05       	ld.w %d5,[%a15]0
8000828c:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000828e:	c2 4f       	add %d15,4
80008290:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008314:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008318:	c2 13       	add %d3,1
8000831a:	48 05       	ld.w %d5,[%a15]0
8000831c:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000831e:	c2 4f       	add %d15,4
80008320:	37 0f 70 f0 	extr.u %d15,%d15,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
<<<<<<< HEAD
<<<<<<< HEAD
800082f0:	68 05       	st.w [%a15]0,%d5
=======
80008294:	68 05       	st.w [%a15]0,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008324:	68 05       	st.w [%a15]0,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
<<<<<<< HEAD
<<<<<<< HEAD
800082f2:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800082f6:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
=======
80008296:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000829a:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008326:	0b 6f 30 51 	lt.u %d5,%d15,%d6
8000832a:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }

        count--;
    } while (count > 0);
<<<<<<< HEAD
<<<<<<< HEAD
800082fa:	9f 02 f3 ff 	jned %d2,0,800082e0 <Ifx_CircularBuffer_write32+0x1e>
800082fe:	c2 f4       	add %d4,-1
80008300:	37 04 50 40 	extr %d4,%d4,0,16
80008304:	ac 42       	st.h [%a4]4,%d15
80008306:	8b 04 40 43 	max %d4,%d4,0
8000830a:	c2 14       	add %d4,1
=======
8000832e:	9f 02 f3 ff 	jned %d2,0,80008314 <Ifx_CircularBuffer_write32+0x1e>
80008332:	c2 f4       	add %d4,-1
80008334:	37 04 50 40 	extr %d4,%d4,0,16
80008338:	ac 42       	st.h [%a4]4,%d15
8000833a:	8b 04 40 43 	max %d4,%d4,0
8000833e:	c2 14       	add %d4,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    return source;
}
80008340:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008344:	00 90       	ret 

<<<<<<< HEAD
80008312 <Ifx_Fifo_destroy>:
=======
8000829e:	9f 02 f3 ff 	jned %d2,0,80008284 <Ifx_CircularBuffer_write32+0x1e>
800082a2:	c2 f4       	add %d4,-1
800082a4:	37 04 50 40 	extr %d4,%d4,0,16
800082a8:	ac 42       	st.h [%a4]4,%d15
800082aa:	8b 04 40 43 	max %d4,%d4,0
800082ae:	c2 14       	add %d4,1

    return source;
}
800082b0:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800082b4:	00 90       	ret 

800082b6 <Ifx_Fifo_destroy>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008346 <Ifx_Fifo_destroy>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
<<<<<<< HEAD
<<<<<<< HEAD
80008312:	1d 00 a8 16 	j 8000b062 <free>

80008316 <Ifx_Fifo_init>:
=======
800082b6:	1d 00 07 16 	j 8000aec4 <free>

800082ba <Ifx_Fifo_init>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008346:	1d 00 04 17 	j 8000b14e <free>

8000834a <Ifx_Fifo_init>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80008316:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80008318:	80 42       	mov.d %d2,%a4
=======
800082ba:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082bc:	80 42       	mov.d %d2,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000834a:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
8000834c:	80 42       	mov.d %d2,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
8000831a:	e9 4f 1c 00 	st.b [%a4]28,%d15
=======
8000834e:	e9 4f 1c 00 	st.b [%a4]28,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        fifo->eventWriter        = TRUE;
80008352:	82 1f       	mov %d15,1
80008354:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
<<<<<<< HEAD
80008324:	1b 72 02 f0 	addi %d15,%d2,39
80008328:	8f 7f c0 f1 	andn %d15,%d15,7
8000832c:	6c 40       	st.w [%a4]0,%d15
=======
800082be:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
800082c2:	82 1f       	mov %d15,1
800082c4:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800082c8:	1b 72 02 f0 	addi %d15,%d2,39
800082cc:	8f 7f c0 f1 	andn %d15,%d15,7
800082d0:	6c 40       	st.w [%a4]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008358:	1b 72 02 f0 	addi %d15,%d2,39
8000835c:	8f 7f c0 f1 	andn %d15,%d15,7
80008360:	6c 40       	st.w [%a4]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
<<<<<<< HEAD
<<<<<<< HEAD
8000832e:	c2 34       	add %d4,3
=======
800082d2:	c2 34       	add %d4,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008362:	c2 34       	add %d4,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80008330:	82 0f       	mov %d15,0
80008332:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
80008334:	ac 48       	st.h [%a4]16,%d15
=======
800082d4:	82 0f       	mov %d15,0
800082d6:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
800082d8:	ac 48       	st.h [%a4]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008364:	82 0f       	mov %d15,0
80008366:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
80008368:	ac 48       	st.h [%a4]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
<<<<<<< HEAD
<<<<<<< HEAD
80008336:	8f 34 c0 41 	andn %d4,%d4,3
=======
800082da:	8f 34 c0 41 	andn %d4,%d4,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000836a:	8f 34 c0 41 	andn %d4,%d4,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000833a:	82 0f       	mov %d15,0
=======
800082de:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000836e:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000833c:	40 42       	mov.aa %a2,%a4
=======
800082e0:	40 42       	mov.aa %a2,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008370:	40 42       	mov.aa %a2,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000833e:	6c 43       	st.w [%a4]12,%d15
80008340:	6c 42       	st.w [%a4]8,%d15
=======
80008372:	6c 43       	st.w [%a4]12,%d15
80008374:	6c 42       	st.w [%a4]8,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        fifo->startIndex         = fifo->endIndex = 0;
80008376:	ac 4b       	st.h [%a4]22,%d15
80008378:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
8000837a:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
<<<<<<< HEAD
8000834a:	f9 45 1a 00 	st.h [%a4]26,%d5
=======
800082e2:	6c 43       	st.w [%a4]12,%d15
800082e4:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
800082e6:	ac 4b       	st.h [%a4]22,%d15
800082e8:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
800082ea:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
800082ee:	f9 45 1a 00 	st.h [%a4]26,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000837e:	f9 45 1a 00 	st.h [%a4]26,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return fifo;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000834e:	00 90       	ret 

80008350 <Ifx_Fifo_create>:
=======
800082f2:	00 90       	ret 

800082f4 <Ifx_Fifo_create>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008382:	00 90       	ret 

80008384 <Ifx_Fifo_create>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
<<<<<<< HEAD
<<<<<<< HEAD
80008350:	c2 34       	add %d4,3
80008352:	37 04 50 f0 	extr %d15,%d4,0,16
=======
800082f4:	c2 34       	add %d4,3
800082f6:	37 04 50 f0 	extr %d15,%d4,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008384:	c2 34       	add %d4,3
80008386:	37 04 50 f0 	extr %d15,%d4,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
<<<<<<< HEAD
<<<<<<< HEAD
80008356:	02 58       	mov %d8,%d5
=======
8000838a:	02 58       	mov %d8,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
8000838c:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80008390:	1b 8f 02 40 	addi %d4,%d15,40
80008394:	6d 00 d7 16 	call 8000b142 <malloc>
80008398:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
8000839a:	bc 25       	jz.a %a2,800083a4 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
<<<<<<< HEAD
80008368:	0b f8 10 48 	mov %e4,%d8,%d15
8000836c:	1d ff d5 ff 	j 80008316 <Ifx_Fifo_init>
=======
800082fa:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800082fc:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80008300:	1b 8f 02 40 	addi %d4,%d15,40
80008304:	6d 00 da 15 	call 8000aeb8 <malloc>
80008308:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
8000830a:	bc 25       	jz.a %a2,80008314 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
8000830c:	0b f8 10 48 	mov %e4,%d8,%d15
80008310:	1d ff d5 ff 	j 800082ba <Ifx_Fifo_init>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000839c:	0b f8 10 48 	mov %e4,%d8,%d15
800083a0:	1d ff d5 ff 	j 8000834a <Ifx_Fifo_init>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return fifo;
}
<<<<<<< HEAD
<<<<<<< HEAD
80008370:	00 90       	ret 

80008372 <Ifx_Fifo_canReadCount>:
=======
80008314:	00 90       	ret 

80008316 <Ifx_Fifo_canReadCount>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083a4:	00 90       	ret 

800083a6 <Ifx_Fifo_canReadCount>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
<<<<<<< HEAD
<<<<<<< HEAD
80008372:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008374:	82 02       	mov %d2,0
=======
80008316:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008318:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083a6:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
800083a8:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
<<<<<<< HEAD
<<<<<<< HEAD
80008376:	3f f4 6a 00 	jlt %d4,%d15,8000844a <Ifx_Fifo_canReadCount+0xd8>
8000837a:	8c 4c       	ld.h %d15,[%a4]24
8000837c:	3f 4f 67 00 	jlt %d15,%d4,8000844a <Ifx_Fifo_canReadCount+0xd8>
=======
8000831a:	3f f4 6a 00 	jlt %d4,%d15,800083ee <Ifx_Fifo_canReadCount+0xd8>
8000831e:	8c 4c       	ld.h %d15,[%a4]24
80008320:	3f 4f 67 00 	jlt %d15,%d4,800083ee <Ifx_Fifo_canReadCount+0xd8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083aa:	3f f4 6a 00 	jlt %d4,%d15,8000847e <Ifx_Fifo_canReadCount+0xd8>
800083ae:	8c 4c       	ld.h %d15,[%a4]24
800083b0:	3f 4f 67 00 	jlt %d15,%d4,8000847e <Ifx_Fifo_canReadCount+0xd8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80008380:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008384:	37 00 e1 07 	extr.u %d0,%d0,15,1
=======
80008324:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008328:	37 00 e1 07 	extr.u %d0,%d0,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083b4:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800083b8:	37 00 e1 07 	extr.u %d0,%d0,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
80008388:	0d 00 40 03 	disable 
=======
8000832c:	0d 00 40 03 	disable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083bc:	0d 00 40 03 	disable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000838c:	00 00       	nop 
=======
80008330:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083c0:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
<<<<<<< HEAD
<<<<<<< HEAD
8000838e:	8c 42       	ld.h %d15,[%a4]4
80008390:	a2 f4       	sub %d4,%d15
=======
800083c2:	8c 42       	ld.h %d15,[%a4]4
800083c4:	a2 f4       	sub %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if (waitCount <= 0)
800083c6:	4e 4c       	jgtz %d4,800083de <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
<<<<<<< HEAD
80008394:	82 1f       	mov %d15,1
=======
80008332:	8c 42       	ld.h %d15,[%a4]4
80008334:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
80008336:	4e 4c       	jgtz %d4,8000834e <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008338:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083c8:	82 1f       	mov %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80008396:	59 42 08 00 	st.w [%a4]8,%d2
=======
800083ca:	59 42 08 00 	st.w [%a4]8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            fifo->eventReader        = TRUE;
800083ce:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
<<<<<<< HEAD
8000839e:	82 12       	mov %d2,1
=======
8000833a:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
8000833e:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
80008342:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083d2:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800083a0:	df 00 55 00 	jeq %d0,0,8000844a <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
800083a4:	0d 00 00 03 	enable 
800083a8:	00 90       	ret 
=======
80008344:	df 00 55 00 	jeq %d0,0,800083ee <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
80008348:	0d 00 00 03 	enable 
8000834c:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083d4:	df 00 55 00 	jeq %d0,0,8000847e <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
800083d8:	0d 00 00 03 	enable 
800083dc:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
800083aa:	82 f2       	mov %d2,-1
800083ac:	06 f2       	sh %d2,-1
800083ae:	ba f6       	eq %d15,%d6,-1
800083b0:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800083b4:	82 f5       	mov %d5,-1
800083b6:	02 23       	mov %d3,%d2
=======
8000834e:	82 f2       	mov %d2,-1
80008350:	06 f2       	sh %d2,-1
80008352:	ba f6       	eq %d15,%d6,-1
80008354:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008358:	82 f5       	mov %d5,-1
8000835a:	02 23       	mov %d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083de:	82 f2       	mov %d2,-1
800083e0:	06 f2       	sh %d2,-1
800083e2:	ba f6       	eq %d15,%d6,-1
800083e4:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800083e8:	82 f5       	mov %d5,-1
800083ea:	02 23       	mov %d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
800083b8:	ee 16       	jnz %d15,800083e4 <Ifx_Fifo_canReadCount+0x72>
=======
8000835c:	ee 16       	jnz %d15,80008388 <Ifx_Fifo_canReadCount+0x72>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083ec:	ee 16       	jnz %d15,80008418 <Ifx_Fifo_canReadCount+0x72>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800083ba:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083be:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
8000835e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008362:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083ee:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083f2:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
800083c2:	0d 00 40 03 	disable 
800083c6:	00 00       	nop 
=======
80008366:	0d 00 40 03 	disable 
8000836a:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083f6:	0d 00 40 03 	disable 
800083fa:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800083c8:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800083cc:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
=======
8000836c:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008370:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800083fc:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008400:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
800083d0:	02 15       	mov %d5,%d1
800083d2:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
=======
80008374:	02 15       	mov %d5,%d1
80008376:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008404:	02 15       	mov %d5,%d1
80008406:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800083d6:	76 23       	jz %d2,800083dc <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
800083d8:	0d 00 00 03 	enable 
=======
8000837a:	76 23       	jz %d2,80008380 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
8000837c:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000840a:	76 23       	jz %d2,80008410 <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
8000840c:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
<<<<<<< HEAD
<<<<<<< HEAD
800083dc:	0b 65 40 50 	addx %d5,%d5,%d6
800083e0:	0b 73 50 30 	addc %d3,%d3,%d7
=======
80008380:	0b 65 40 50 	addx %d5,%d5,%d6
80008384:	0b 73 50 30 	addc %d3,%d3,%d7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008410:	0b 65 40 50 	addx %d5,%d5,%d6
80008414:	0b 73 50 30 	addc %d3,%d3,%d7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
800083e4:	82 0f       	mov %d15,0
800083e6:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
800083ea:	59 44 08 00 	st.w [%a4]8,%d4
=======
80008388:	82 0f       	mov %d15,0
8000838a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000838e:	59 44 08 00 	st.w [%a4]8,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008418:	82 0f       	mov %d15,0
8000841a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000841e:	59 44 08 00 	st.w [%a4]8,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800083ee:	76 03       	jz %d0,800083f4 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
800083f0:	0d 00 00 03 	enable 
=======
80008392:	76 03       	jz %d0,80008398 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
80008394:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008422:	76 03       	jz %d0,80008428 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
80008424:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
800083f4:	82 f6       	mov %d6,-1
800083f6:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800083f8:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800083fc:	6e 08       	jz %d15,8000840c <Ifx_Fifo_canReadCount+0x9a>
=======
80008398:	82 f6       	mov %d6,-1
8000839a:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000839c:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800083a0:	6e 08       	jz %d15,800083b0 <Ifx_Fifo_canReadCount+0x9a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008428:	82 f6       	mov %d6,-1
8000842a:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000842c:	39 4f 1c 00 	ld.bu %d15,[%a4]28
80008430:	6e 08       	jz %d15,80008440 <Ifx_Fifo_canReadCount+0x9a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
800083fe:	39 42 1c 00 	ld.bu %d2,[%a4]28
=======
800083a2:	39 42 1c 00 	ld.bu %d2,[%a4]28
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008432:	39 42 1c 00 	ld.bu %d2,[%a4]28
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80008402:	82 0f       	mov %d15,0
80008404:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
80008406:	8b 12 00 22 	eq %d2,%d2,1
8000840a:	00 90       	ret 
8000840c:	ba f5       	eq %d15,%d5,-1
8000840e:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008412:	ee f3       	jnz %d15,800083f8 <Ifx_Fifo_canReadCount+0x86>
=======
800083a6:	82 0f       	mov %d15,0
800083a8:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
800083aa:	8b 12 00 22 	eq %d2,%d2,1
800083ae:	00 90       	ret 
800083b0:	ba f5       	eq %d15,%d5,-1
800083b2:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800083b6:	ee f3       	jnz %d15,8000839c <Ifx_Fifo_canReadCount+0x86>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008436:	82 0f       	mov %d15,0
80008438:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
8000843a:	8b 12 00 22 	eq %d2,%d2,1
8000843e:	00 90       	ret 
80008440:	ba f5       	eq %d15,%d5,-1
80008442:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008446:	ee f3       	jnz %d15,8000842c <Ifx_Fifo_canReadCount+0x86>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80008414:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008418:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
800083b8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083bc:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008448:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000844c:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
8000841c:	0d 00 40 03 	disable 
80008420:	00 00       	nop 
=======
800083c0:	0d 00 40 03 	disable 
800083c4:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008450:	0d 00 40 03 	disable 
80008454:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80008422:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008426:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000842a:	8f 04 40 41 	or %d4,%d4,0
=======
800083c6:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800083ca:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800083ce:	8f 04 40 41 	or %d4,%d4,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008456:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000845a:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000845e:	8f 04 40 41 	or %d4,%d4,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
8000842e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======
800083d2:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008462:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
80008432:	76 23       	jz %d2,80008438 <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
80008434:	0d 00 00 03 	enable 
=======
800083d6:	76 23       	jz %d2,800083dc <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
800083d8:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008466:	76 23       	jz %d2,8000846c <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
80008468:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
<<<<<<< HEAD
<<<<<<< HEAD
80008438:	0b 3f 00 21 	eq %d2,%d15,%d3
8000843c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008440:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008444:	df 02 da ff 	jne %d2,0,800083f8 <Ifx_Fifo_canReadCount+0x86>
80008448:	3c db       	j 800083fe <Ifx_Fifo_canReadCount+0x8c>
=======
800083dc:	0b 3f 00 21 	eq %d2,%d15,%d3
800083e0:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800083e4:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800083e8:	df 02 da ff 	jne %d2,0,8000839c <Ifx_Fifo_canReadCount+0x86>
800083ec:	3c db       	j 800083a2 <Ifx_Fifo_canReadCount+0x8c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000846c:	0b 3f 00 21 	eq %d2,%d15,%d3
80008470:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008474:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008478:	df 02 da ff 	jne %d2,0,8000842c <Ifx_Fifo_canReadCount+0x86>
8000847c:	3c db       	j 80008432 <Ifx_Fifo_canReadCount+0x8c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000844a:	00 90       	ret 

8000844c <Ifx_Fifo_read>:
=======
800083ee:	00 90       	ret 

800083f0 <Ifx_Fifo_read>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000847e:	00 90       	ret 

80008480 <Ifx_Fifo_read>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000844c:	20 08       	sub.a %sp,8
8000844e:	40 4f       	mov.aa %a15,%a4
80008450:	02 49       	mov %d9,%d4
=======
800083f0:	20 08       	sub.a %sp,8
800083f2:	40 4f       	mov.aa %a15,%a4
800083f4:	02 49       	mov %d9,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008480:	20 08       	sub.a %sp,8
80008482:	40 4f       	mov.aa %a15,%a4
80008484:	02 49       	mov %d9,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
<<<<<<< HEAD
<<<<<<< HEAD
80008452:	df 04 b6 00 	jeq %d4,0,800085be <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
80008456:	4c 40       	ld.w %d15,[%a4]0
=======
800083f6:	df 04 b6 00 	jeq %d4,0,80008562 <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
800083fa:	4c 40       	ld.w %d15,[%a4]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008486:	df 04 b6 00 	jeq %d4,0,800085f2 <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
8000848a:	4c 40       	ld.w %d15,[%a4]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
80008458:	82 f2       	mov %d2,-1
8000845a:	78 00       	st.w [%sp]0,%d15
=======
8000848c:	82 f2       	mov %d2,-1
8000848e:	78 00       	st.w [%sp]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80008490:	8c 4c       	ld.h %d15,[%a4]24
80008492:	06 f2       	sh %d2,-1
80008494:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008496:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
<<<<<<< HEAD
80008464:	82 fa       	mov %d10,-1
80008466:	ac a2       	st.h [%sp]4,%d15
=======
800083fc:	82 f2       	mov %d2,-1
800083fe:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80008400:	8c 4c       	ld.h %d15,[%a4]24
80008402:	06 f2       	sh %d2,-1
80008404:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008406:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008408:	82 fa       	mov %d10,-1
8000840a:	ac a2       	st.h [%sp]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008498:	82 fa       	mov %d10,-1
8000849a:	ac a2       	st.h [%sp]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
80008468:	ba f6       	eq %d15,%d6,-1
8000846a:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000846e:	02 28       	mov %d8,%d2
=======
8000840c:	ba f6       	eq %d15,%d6,-1
8000840e:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008412:	02 28       	mov %d8,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000849c:	ba f6       	eq %d15,%d6,-1
8000849e:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800084a2:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
80008470:	ee 16       	jnz %d15,8000849c <Ifx_Fifo_read+0x50>
=======
80008414:	ee 16       	jnz %d15,80008440 <Ifx_Fifo_read+0x50>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800084a4:	ee 16       	jnz %d15,800084d0 <Ifx_Fifo_read+0x50>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80008472:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008476:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
80008416:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000841a:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
8000847a:	0d 00 40 03 	disable 
8000847e:	00 00       	nop 
=======
8000841e:	0d 00 40 03 	disable 
80008422:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
80008480:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008484:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
=======
80008424:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008428:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
80008488:	02 3a       	mov %d10,%d3
8000848a:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
=======
8000842c:	02 3a       	mov %d10,%d3
8000842e:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
8000848e:	76 23       	jz %d2,80008494 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008490:	0d 00 00 03 	enable 
=======
80008432:	76 23       	jz %d2,80008438 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008434:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
<<<<<<< HEAD
80008494:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008498:	0b 78 50 80 	addc %d8,%d8,%d7
=======
80008438:	0b 6a 40 a0 	addx %d10,%d10,%d6
8000843c:	0b 78 50 80 	addc %d8,%d8,%d7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
8000849c:	82 fc       	mov %d12,-1
=======
80008440:	82 fc       	mov %d12,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
<<<<<<< HEAD
8000849e:	82 0d       	mov %d13,0
=======
80008442:	82 0d       	mov %d13,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
<<<<<<< HEAD
800084a0:	82 0e       	mov %d14,0
=======
80008444:	82 0e       	mov %d14,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
<<<<<<< HEAD
800084a2:	a0 0c       	mov.a %a12,0
800084a4:	06 fc       	sh %d12,-1
=======
80008446:	a0 0c       	mov.a %a12,0
80008448:	06 fc       	sh %d12,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
800084a6:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800084aa:	37 04 e1 47 	extr.u %d4,%d4,15,1
=======
8000844a:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000844e:	37 04 e1 47 	extr.u %d4,%d4,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800084a6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084aa:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
800084ae:	0d 00 40 03 	disable 
800084b2:	00 00       	nop 
<<<<<<< HEAD
=======
80008452:	0d 00 40 03 	disable 
80008456:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084b4:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084b8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084bc:	02 3a       	mov %d10,%d3
800084be:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084c2:	76 23       	jz %d2,800084c8 <Ifx_Fifo_read+0x48>
    {
        __enable();
800084c4:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800084c8:	0b 6a 40 a0 	addx %d10,%d10,%d6
800084cc:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800084d0:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
800084d2:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
800084d4:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084d6:	a0 0c       	mov.a %a12,0
800084d8:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084da:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800084de:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084e2:	0d 00 40 03 	disable 
800084e6:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
<<<<<<< HEAD
<<<<<<< HEAD
800084b4:	88 2b       	ld.h %d11,[%a15]4
=======
80008458:	88 2b       	ld.h %d11,[%a15]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800084e8:	88 2b       	ld.h %d11,[%a15]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
<<<<<<< HEAD
800084b6:	0b b9 80 b1 	min %d11,%d9,%d11
=======
800084ea:	0b b9 80 b1 	min %d11,%d9,%d11
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    blockSize               -= blockSize % fifo->elementSize;
800084ee:	8c fd       	ld.h %d15,[%a15]26
800084f0:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
<<<<<<< HEAD
800084c0:	e9 fe 1c 00 	st.b [%a15]28,%d14
=======
8000845a:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000845e:	8c fd       	ld.h %d15,[%a15]26
80008460:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
80008464:	e9 fe 1c 00 	st.b [%a15]28,%d14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800084f4:	e9 fe 1c 00 	st.b [%a15]28,%d14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
<<<<<<< HEAD
<<<<<<< HEAD
800084c4:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800084c8:	88 c2       	ld.h %d2,[%a15]24
=======
80008468:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
8000846c:	88 c2       	ld.h %d2,[%a15]24
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800084f8:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800084fc:	88 c2       	ld.h %d2,[%a15]24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
<<<<<<< HEAD
<<<<<<< HEAD
800084ca:	a2 3b       	sub %d11,%d3
800084cc:	37 0b 70 b0 	extr.u %d11,%d11,0,16
800084d0:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800084d4:	0b f9 80 30 	sub %d3,%d9,%d15
800084d8:	0b 23 80 21 	min %d2,%d3,%d2
800084dc:	68 22       	st.w [%a15]8,%d2
=======
8000846e:	a2 3b       	sub %d11,%d3
80008470:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008474:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008478:	0b f9 80 30 	sub %d3,%d9,%d15
8000847c:	0b 23 80 21 	min %d2,%d3,%d2
80008480:	68 22       	st.w [%a15]8,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800084fe:	a2 3b       	sub %d11,%d3
80008500:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008504:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008508:	0b f9 80 30 	sub %d3,%d9,%d15
8000850c:	0b 23 80 21 	min %d2,%d3,%d2
80008510:	68 22       	st.w [%a15]8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800084de:	76 43       	jz %d4,800084e4 <Ifx_Fifo_read+0x98>
    {
        __enable();
800084e0:	0d 00 00 03 	enable 
=======
80008482:	76 43       	jz %d4,80008488 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008484:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008512:	76 43       	jz %d4,80008518 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008514:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
<<<<<<< HEAD
<<<<<<< HEAD
800084e4:	6e 20       	jz %d15,80008524 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
800084e6:	40 a4       	mov.aa %a4,%sp
800084e8:	02 f4       	mov %d4,%d15
800084ea:	6d ff 66 fe 	call 800081b6 <Ifx_CircularBuffer_read8>
800084ee:	40 25       	mov.aa %a5,%a2
=======
80008488:	6e 20       	jz %d15,800084c8 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
8000848a:	40 a4       	mov.aa %a4,%sp
8000848c:	02 f4       	mov %d4,%d15
8000848e:	6d ff 66 fe 	call 8000815a <Ifx_CircularBuffer_read8>
80008492:	40 25       	mov.aa %a5,%a2
=======
80008518:	6e 20       	jz %d15,80008558 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
8000851a:	40 a4       	mov.aa %a4,%sp
8000851c:	02 f4       	mov %d4,%d15
8000851e:	6d ff 66 fe 	call 800081ea <Ifx_CircularBuffer_read8>
80008522:	40 25       	mov.aa %a5,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
80008494:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008498:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
80008524:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008528:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
8000849c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800084a0:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800084a2:	88 23       	ld.h %d3,[%a15]4
800084a4:	a2 b3       	sub %d3,%d11
800084a6:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
800084a8:	48 33       	ld.w %d3,[%a15]12
800084aa:	76 39       	jz %d3,800084bc <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
800084ac:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
800084ae:	8e f3       	jlez %d15,800084b4 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
800084b0:	68 3f       	st.w [%a15]12,%d15
800084b2:	3c 05       	j 800084bc <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084b4:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084b6:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
800084b8:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084bc:	76 23       	jz %d2,800084c2 <Ifx_Fifo_read+0xd2>
    {
        __enable();
800084be:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800084c2:	a2 b9       	sub %d9,%d11
800084c4:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800084c8:	76 d4       	jz %d13,800084d0 <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
800084ca:	82 0f       	mov %d15,0
800084cc:	68 2f       	st.w [%a15]8,%d15
                break;
800084ce:	3c 48       	j 8000855e <Ifx_Fifo_read+0x16e>
800084d0:	ba fa       	eq %d15,%d10,-1
800084d2:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800084d6:	ee 1b       	jnz %d15,8000850c <Ifx_Fifo_read+0x11c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084d8:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084dc:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
800084f8:	0d 00 40 03 	disable 
=======
8000852c:	0d 00 40 03 	disable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008530:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
80008532:	88 23       	ld.h %d3,[%a15]4
80008534:	a2 b3       	sub %d3,%d11
80008536:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
80008538:	48 33       	ld.w %d3,[%a15]12
8000853a:	76 39       	jz %d3,8000854c <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
8000853c:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
8000853e:	8e f3       	jlez %d15,80008544 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
80008540:	68 3f       	st.w [%a15]12,%d15
80008542:	3c 05       	j 8000854c <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008544:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008546:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
<<<<<<< HEAD
80008514:	e9 ff 1d 00 	st.b [%a15]29,%d15
=======
800084e0:	0d 00 40 03 	disable 
800084e4:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800084e6:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800084ea:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800084ee:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800084f2:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008548:	e9 ff 1d 00 	st.b [%a15]29,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
80008518:	76 23       	jz %d2,8000851e <Ifx_Fifo_read+0xd2>
=======
8000854c:	76 23       	jz %d2,80008552 <Ifx_Fifo_read+0xd2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        __enable();
8000854e:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
<<<<<<< HEAD
8000851e:	a2 b9       	sub %d9,%d11
80008520:	37 09 50 90 	extr %d9,%d9,0,16
=======
800084f6:	76 23       	jz %d2,800084fc <Ifx_Fifo_read+0x10c>
    {
        __enable();
800084f8:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008552:	a2 b9       	sub %d9,%d11
80008554:	37 09 50 90 	extr %d9,%d9,0,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
<<<<<<< HEAD
<<<<<<< HEAD
80008524:	76 d4       	jz %d13,8000852c <Ifx_Fifo_read+0xe0>
=======
80008558:	76 d4       	jz %d13,80008560 <Ifx_Fifo_read+0xe0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {
=======
800084fc:	0b 8f 00 21 	eq %d2,%d15,%d8
80008500:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008504:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008508:	df 02 e1 ff 	jne %d2,0,800084ca <Ifx_Fifo_read+0xda>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
8000855a:	82 0f       	mov %d15,0
8000855c:	68 2f       	st.w [%a15]8,%d15
                break;
<<<<<<< HEAD
<<<<<<< HEAD
8000852a:	3c 48       	j 800085ba <Ifx_Fifo_read+0x16e>
8000852c:	ba fa       	eq %d15,%d10,-1
8000852e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008532:	ee 1b       	jnz %d15,80008568 <Ifx_Fifo_read+0x11c>
=======
            }

            if (count != 0)
8000850c:	df 09 29 00 	jeq %d9,0,8000855e <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008510:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008514:	ee 1f       	jnz %d15,80008552 <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008516:	ba fa       	eq %d15,%d10,-1
80008518:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
8000851c:	ee fa       	jnz %d15,80008510 <Ifx_Fifo_read+0x120>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000855e:	3c 48       	j 800085ee <Ifx_Fifo_read+0x16e>
80008560:	ba fa       	eq %d15,%d10,-1
80008562:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008566:	ee 1b       	jnz %d15,8000859c <Ifx_Fifo_read+0x11c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80008534:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008538:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
8000851e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008522:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008568:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000856c:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
8000853c:	0d 00 40 03 	disable 
80008540:	00 00       	nop 
=======
80008526:	0d 00 40 03 	disable 
8000852a:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008570:	0d 00 40 03 	disable 
80008574:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80008542:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008546:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000854a:	8f 03 40 31 	or %d3,%d3,0
=======
8000852c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008530:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008534:	8f 03 40 31 	or %d3,%d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008576:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000857a:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000857e:	8f 03 40 31 	or %d3,%d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
8000854e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======
80008538:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008582:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
80008552:	76 23       	jz %d2,80008558 <Ifx_Fifo_read+0x10c>
=======
80008586:	76 23       	jz %d2,8000858c <Ifx_Fifo_read+0x10c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        __enable();
80008588:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
=======
8000853c:	76 23       	jz %d2,80008542 <Ifx_Fifo_read+0x152>
    {
        __enable();
8000853e:	0d 00 00 03 	enable 
80008542:	0b 8f 00 21 	eq %d2,%d15,%d8
80008546:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
8000854a:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000854e:	df 02 e1 ff 	jne %d2,0,80008510 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
80008552:	39 fd 1c 00 	ld.bu %d13,[%a15]28
80008556:	8b 0d 00 d2 	eq %d13,%d13,0
8000855a:	1d ff 78 ff 	j 8000844a <Ifx_Fifo_read+0x5a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
            }

<<<<<<< HEAD
            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
8000858c:	0b 8f 00 21 	eq %d2,%d15,%d8
80008590:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008594:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008598:	df 02 e1 ff 	jne %d2,0,8000855a <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
8000859c:	df 09 29 00 	jeq %d9,0,800085ee <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800085a0:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800085a4:	ee 1f       	jnz %d15,800085e2 <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
80008572:	ba fa       	eq %d15,%d10,-1
80008574:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008578:	ee fa       	jnz %d15,8000856c <Ifx_Fifo_read+0x120>
=======
        fifo->startIndex = buffer.index;
8000855e:	8c a2       	ld.h %d15,[%sp]4
80008560:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
80008562:	02 92       	mov %d2,%d9
80008564:	00 90       	ret 

80008566 <Ifx_Fifo_clear>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800085a6:	ba fa       	eq %d15,%d10,-1
800085a8:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800085ac:	ee fa       	jnz %d15,800085a0 <Ifx_Fifo_read+0x120>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000857a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000857e:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
80008566:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000856a:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800085ae:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085b2:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
80008582:	0d 00 40 03 	disable 
80008586:	00 00       	nop 
=======
800085b6:	0d 00 40 03 	disable 
800085ba:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
=======
8000856e:	0d 00 40 03 	disable 
80008572:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
{
    uint64 result;

    result  = stm->TIM0.U;
800085bc:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085c0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800085c4:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
<<<<<<< HEAD
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
80008594:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======

    if (fifo->shared.writerWaitx != 0)
80008574:	4c 43       	ld.w %d15,[%a4]12
80008576:	6e 06       	jz %d15,80008582 <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
80008578:	82 0f       	mov %d15,0
8000857a:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
8000857c:	82 1f       	mov %d15,1
8000857e:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
80008582:	82 0f       	mov %d15,0
80008584:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008588:	82 0f       	mov %d15,0
8000858a:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
8000858c:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000858e:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
80008590:	8c 4b       	ld.h %d15,[%a4]22
80008592:	ac 4a       	st.h [%a4]20,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800085c8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
80008598:	76 23       	jz %d2,8000859e <Ifx_Fifo_read+0x152>
=======
800085cc:	76 23       	jz %d2,800085d2 <Ifx_Fifo_read+0x152>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        __enable();
800085ce:	0d 00 00 03 	enable 
800085d2:	0b 8f 00 21 	eq %d2,%d15,%d8
800085d6:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800085da:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800085de:	df 02 e1 ff 	jne %d2,0,800085a0 <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
800085e2:	39 fd 1c 00 	ld.bu %d13,[%a15]28
800085e6:	8b 0d 00 d2 	eq %d13,%d13,0
800085ea:	1d ff 78 ff 	j 800084da <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);
=======
80008594:	76 23       	jz %d2,8000859a <Ifx_Fifo_clear+0x34>
    {
        __enable();
80008596:	0d 00 00 03 	enable 
8000859a:	00 90       	ret 

8000859c <Ifx_Fifo_canWriteCount>:
    boolean result;
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

        fifo->startIndex = buffer.index;
800085ee:	8c a2       	ld.h %d15,[%sp]4
800085f0:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
800085f2:	02 92       	mov %d2,%d9
800085f4:	00 90       	ret 

<<<<<<< HEAD
<<<<<<< HEAD
800085c2 <Ifx_Fifo_clear>:
=======
    if ((count < fifo->elementSize) || (count > fifo->size))
8000859c:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
8000859e:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800085a0:	3f f4 75 00 	jlt %d4,%d15,8000868a <Ifx_Fifo_canWriteCount+0xee>
800085a4:	8c 4c       	ld.h %d15,[%a4]24
800085a6:	3f 4f 72 00 	jlt %d15,%d4,8000868a <Ifx_Fifo_canWriteCount+0xee>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800085f6 <Ifx_Fifo_clear>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800085c2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085c6:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
800085aa:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800085ae:	37 00 e1 07 	extr.u %d0,%d0,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800085f6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085fa:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
800085ca:	0d 00 40 03 	disable 
800085ce:	00 00       	nop 
=======
800085fe:	0d 00 40 03 	disable 
80008602:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
<<<<<<< HEAD
800085d0:	4c 43       	ld.w %d15,[%a4]12
800085d2:	6e 06       	jz %d15,800085de <Ifx_Fifo_clear+0x1c>
=======
800085b2:	0d 00 40 03 	disable 
800085b6:	00 00       	nop 
    else
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008604:	4c 43       	ld.w %d15,[%a4]12
80008606:	6e 06       	jz %d15,80008612 <Ifx_Fifo_clear+0x1c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        fifo->shared.writerWaitx = 0;
80008608:	82 0f       	mov %d15,0
8000860a:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
8000860c:	82 1f       	mov %d15,1
8000860e:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

<<<<<<< HEAD
    fifo->eventReader        = FALSE;
80008612:	82 0f       	mov %d15,0
80008614:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008618:	82 0f       	mov %d15,0
8000861a:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
8000861c:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000861e:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
<<<<<<< HEAD
800085ec:	8c 4b       	ld.h %d15,[%a4]22
800085ee:	ac 4a       	st.h [%a4]20,%d15
=======
        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
800085b8:	c9 43 18 00 	ld.h %d3,[%a4]24
800085bc:	8c 42       	ld.h %d15,[%a4]4
800085be:	5a f3       	sub %d15,%d3,%d15
800085c0:	3f 4f 0d 00 	jlt %d15,%d4,800085da <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
800085c4:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
800085c6:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
800085ca:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800085ce:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008620:	8c 4b       	ld.h %d15,[%a4]22
80008622:	ac 4a       	st.h [%a4]20,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800085f0:	76 23       	jz %d2,800085f6 <Ifx_Fifo_clear+0x34>
    {
        __enable();
800085f2:	0d 00 00 03 	enable 
800085f6:	00 90       	ret 
=======
800085d0:	df 00 5d 00 	jeq %d0,0,8000868a <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
800085d4:	0d 00 00 03 	enable 
800085d8:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008624:	76 23       	jz %d2,8000862a <Ifx_Fifo_clear+0x34>
    {
        __enable();
80008626:	0d 00 00 03 	enable 
8000862a:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

8000862c <Ifx_Fifo_canWriteCount>:
    boolean result;

<<<<<<< HEAD
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
=======
    if (timeout == TIME_INFINITE)
800085da:	82 f2       	mov %d2,-1
800085dc:	06 f2       	sh %d2,-1
800085de:	ba f6       	eq %d15,%d6,-1
800085e0:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800085e4:	82 f5       	mov %d5,-1
800085e6:	02 23       	mov %d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5


<<<<<<< HEAD
    if ((count < fifo->elementSize) || (count > fifo->size))
8000862c:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
8000862e:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
<<<<<<< HEAD
800085fc:	3f f4 75 00 	jlt %d4,%d15,800086e6 <Ifx_Fifo_canWriteCount+0xee>
80008600:	8c 4c       	ld.h %d15,[%a4]24
80008602:	3f 4f 72 00 	jlt %d15,%d4,800086e6 <Ifx_Fifo_canWriteCount+0xee>
=======
    if (timeout == TIME_INFINITE)
800085e8:	ee 16       	jnz %d15,80008614 <Ifx_Fifo_canWriteCount+0x78>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008630:	3f f4 75 00 	jlt %d4,%d15,8000871a <Ifx_Fifo_canWriteCount+0xee>
80008634:	8c 4c       	ld.h %d15,[%a4]24
80008636:	3f 4f 72 00 	jlt %d15,%d4,8000871a <Ifx_Fifo_canWriteCount+0xee>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80008606:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
8000860a:	37 00 e1 07 	extr.u %d0,%d0,15,1
=======
800085ea:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085ee:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000863a:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
8000863e:	37 00 e1 07 	extr.u %d0,%d0,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
8000860e:	0d 00 40 03 	disable 
80008612:	00 00       	nop 
=======
80008642:	0d 00 40 03 	disable 
80008646:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();
=======
800085f2:	0d 00 40 03 	disable 
800085f6:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
80008648:	c9 43 18 00 	ld.h %d3,[%a4]24
8000864c:	8c 42       	ld.h %d15,[%a4]4
8000864e:	5a f3       	sub %d15,%d3,%d15
80008650:	3f 4f 0d 00 	jlt %d15,%d4,8000866a <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
80008654:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

<<<<<<< HEAD
        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
80008656:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
8000865a:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
<<<<<<< HEAD
8000862a:	82 12       	mov %d2,1
=======
    result  = stm->TIM0.U;
800085f8:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085fc:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008600:	02 15       	mov %d5,%d1
80008602:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000865e:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
8000862c:	df 00 5d 00 	jeq %d0,0,800086e6 <Ifx_Fifo_canWriteCount+0xee>
=======
80008660:	df 00 5d 00 	jeq %d0,0,8000871a <Ifx_Fifo_canWriteCount+0xee>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        __enable();
80008664:	0d 00 00 03 	enable 
80008668:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000866a:	82 f2       	mov %d2,-1
8000866c:	06 f2       	sh %d2,-1
8000866e:	ba f6       	eq %d15,%d6,-1
80008670:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008674:	82 f5       	mov %d5,-1
80008676:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008678:	ee 16       	jnz %d15,800086a4 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000867a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000867e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008682:	0d 00 40 03 	disable 
80008686:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008688:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000868c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008690:	02 15       	mov %d5,%d1
80008692:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008696:	76 23       	jz %d2,8000869c <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
<<<<<<< HEAD
80008664:	0d 00 00 03 	enable 
=======
80008606:	76 23       	jz %d2,8000860c <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008608:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008698:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
<<<<<<< HEAD
<<<<<<< HEAD
80008668:	0b 65 40 50 	addx %d5,%d5,%d6
8000866c:	0b 73 50 30 	addc %d3,%d3,%d7
=======
8000860c:	0b 65 40 50 	addx %d5,%d5,%d6
80008610:	0b 73 50 30 	addc %d3,%d3,%d7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000869c:	0b 65 40 50 	addx %d5,%d5,%d6
800086a0:	0b 73 50 30 	addc %d3,%d3,%d7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80008670:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008672:	c9 42 04 00 	ld.h %d2,[%a4]4
=======
80008614:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008616:	c9 42 04 00 	ld.h %d2,[%a4]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086a4:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
800086a6:	c9 42 04 00 	ld.h %d2,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80008676:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000867a:	8c 4c       	ld.h %d15,[%a4]24
8000867c:	5a f2       	sub %d15,%d2,%d15
8000867e:	42 f4       	add %d4,%d15
=======
8000861a:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000861e:	8c 4c       	ld.h %d15,[%a4]24
80008620:	5a f2       	sub %d15,%d2,%d15
80008622:	42 f4       	add %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086aa:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
800086ae:	8c 4c       	ld.h %d15,[%a4]24
800086b0:	5a f2       	sub %d15,%d2,%d15
800086b2:	42 f4       	add %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
<<<<<<< HEAD
80008680:	82 02       	mov %d2,0
80008682:	0b 42 a0 41 	max %d4,%d2,%d4
80008686:	59 44 0c 00 	st.w [%a4]12,%d4
=======
80008624:	82 02       	mov %d2,0
80008626:	0b 42 a0 41 	max %d4,%d2,%d4
8000862a:	59 44 0c 00 	st.w [%a4]12,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086b4:	82 02       	mov %d2,0
800086b6:	0b 42 a0 41 	max %d4,%d2,%d4
800086ba:	59 44 0c 00 	st.w [%a4]12,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
8000868a:	76 03       	jz %d0,80008690 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
8000868c:	0d 00 00 03 	enable 
=======
8000862e:	76 03       	jz %d0,80008634 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
80008630:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086be:	76 03       	jz %d0,800086c4 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
800086c0:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
80008690:	82 f6       	mov %d6,-1
80008692:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008694:	39 4f 1d 00 	ld.bu %d15,[%a4]29
80008698:	6e 08       	jz %d15,800086a8 <Ifx_Fifo_canWriteCount+0xb0>
=======
80008634:	82 f6       	mov %d6,-1
80008636:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008638:	39 4f 1d 00 	ld.bu %d15,[%a4]29
8000863c:	6e 08       	jz %d15,8000864c <Ifx_Fifo_canWriteCount+0xb0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086c4:	82 f6       	mov %d6,-1
800086c6:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800086c8:	39 4f 1d 00 	ld.bu %d15,[%a4]29
800086cc:	6e 08       	jz %d15,800086dc <Ifx_Fifo_canWriteCount+0xb0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
<<<<<<< HEAD
<<<<<<< HEAD
8000869a:	39 42 1d 00 	ld.bu %d2,[%a4]29
=======
8000863e:	39 42 1d 00 	ld.bu %d2,[%a4]29
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086ce:	39 42 1d 00 	ld.bu %d2,[%a4]29
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
<<<<<<< HEAD
<<<<<<< HEAD
8000869e:	82 0f       	mov %d15,0
800086a0:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
800086a2:	8b 12 00 22 	eq %d2,%d2,1
800086a6:	00 90       	ret 
800086a8:	ba f5       	eq %d15,%d5,-1
800086aa:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800086ae:	ee f3       	jnz %d15,80008694 <Ifx_Fifo_canWriteCount+0x9c>
=======
80008642:	82 0f       	mov %d15,0
80008644:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
80008646:	8b 12 00 22 	eq %d2,%d2,1
8000864a:	00 90       	ret 
8000864c:	ba f5       	eq %d15,%d5,-1
8000864e:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008652:	ee f3       	jnz %d15,80008638 <Ifx_Fifo_canWriteCount+0x9c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086d2:	82 0f       	mov %d15,0
800086d4:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
800086d6:	8b 12 00 22 	eq %d2,%d2,1
800086da:	00 90       	ret 
800086dc:	ba f5       	eq %d15,%d5,-1
800086de:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800086e2:	ee f3       	jnz %d15,800086c8 <Ifx_Fifo_canWriteCount+0x9c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800086b0:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086b4:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
80008654:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008658:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086e4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086e8:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
800086b8:	0d 00 40 03 	disable 
=======
8000865c:	0d 00 40 03 	disable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086ec:	0d 00 40 03 	disable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
800086bc:	00 00       	nop 
=======
80008660:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086f0:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800086be:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086c2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800086c6:	8f 04 40 41 	or %d4,%d4,0
=======
80008662:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008666:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000866a:	8f 04 40 41 	or %d4,%d4,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086f2:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086f6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800086fa:	8f 04 40 41 	or %d4,%d4,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
800086ca:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======
8000866e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800086fe:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800086ce:	76 23       	jz %d2,800086d4 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
800086d0:	0d 00 00 03 	enable 
=======
80008672:	76 23       	jz %d2,80008678 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008674:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008702:	76 23       	jz %d2,80008708 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008704:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
<<<<<<< HEAD
<<<<<<< HEAD
800086d4:	0b 3f 00 21 	eq %d2,%d15,%d3
800086d8:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800086dc:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800086e0:	df 02 da ff 	jne %d2,0,80008694 <Ifx_Fifo_canWriteCount+0x9c>
800086e4:	3c db       	j 8000869a <Ifx_Fifo_canWriteCount+0xa2>
=======
80008678:	0b 3f 00 21 	eq %d2,%d15,%d3
8000867c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008680:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008684:	df 02 da ff 	jne %d2,0,80008638 <Ifx_Fifo_canWriteCount+0x9c>
80008688:	3c db       	j 8000863e <Ifx_Fifo_canWriteCount+0xa2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008708:	0b 3f 00 21 	eq %d2,%d15,%d3
8000870c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008710:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008714:	df 02 da ff 	jne %d2,0,800086c8 <Ifx_Fifo_canWriteCount+0x9c>
80008718:	3c db       	j 800086ce <Ifx_Fifo_canWriteCount+0xa2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
<<<<<<< HEAD
<<<<<<< HEAD
800086e6:	00 90       	ret 

800086e8 <Ifx_Fifo_write>:
=======
8000868a:	00 90       	ret 

8000868c <Ifx_Fifo_write>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000871a:	00 90       	ret 

8000871c <Ifx_Fifo_write>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
800086e8:	20 08       	sub.a %sp,8
800086ea:	40 4f       	mov.aa %a15,%a4
800086ec:	02 49       	mov %d9,%d4
=======
8000868c:	20 08       	sub.a %sp,8
8000868e:	40 4f       	mov.aa %a15,%a4
80008690:	02 49       	mov %d9,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000871c:	20 08       	sub.a %sp,8
8000871e:	40 4f       	mov.aa %a15,%a4
80008720:	02 49       	mov %d9,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
<<<<<<< HEAD
<<<<<<< HEAD
800086ee:	df 04 be 00 	jeq %d4,0,8000886a <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
800086f2:	4c 40       	ld.w %d15,[%a4]0
=======
80008692:	df 04 be 00 	jeq %d4,0,8000880e <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
80008696:	4c 40       	ld.w %d15,[%a4]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008722:	df 04 be 00 	jeq %d4,0,8000889e <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
80008726:	4c 40       	ld.w %d15,[%a4]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
800086f4:	82 f2       	mov %d2,-1
800086f6:	78 00       	st.w [%sp]0,%d15
=======
80008728:	82 f2       	mov %d2,-1
8000872a:	78 00       	st.w [%sp]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
8000872c:	8c 4c       	ld.h %d15,[%a4]24
8000872e:	06 f2       	sh %d2,-1
80008730:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
80008732:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
<<<<<<< HEAD
80008700:	82 fa       	mov %d10,-1
80008702:	ac a2       	st.h [%sp]4,%d15
=======
80008698:	82 f2       	mov %d2,-1
8000869a:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
8000869c:	8c 4c       	ld.h %d15,[%a4]24
8000869e:	06 f2       	sh %d2,-1
800086a0:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
800086a2:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
800086a4:	82 fa       	mov %d10,-1
800086a6:	ac a2       	st.h [%sp]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008734:	82 fa       	mov %d10,-1
80008736:	ac a2       	st.h [%sp]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
80008704:	ba f6       	eq %d15,%d6,-1
80008706:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000870a:	02 28       	mov %d8,%d2
=======
800086a8:	ba f6       	eq %d15,%d6,-1
800086aa:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800086ae:	02 28       	mov %d8,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008738:	ba f6       	eq %d15,%d6,-1
8000873a:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000873e:	02 28       	mov %d8,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
8000870c:	ee 16       	jnz %d15,80008738 <Ifx_Fifo_write+0x50>
=======
800086b0:	ee 16       	jnz %d15,800086dc <Ifx_Fifo_write+0x50>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008740:	ee 16       	jnz %d15,8000876c <Ifx_Fifo_write+0x50>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000870e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008712:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
800086b2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086b6:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
80008716:	0d 00 40 03 	disable 
8000871a:	00 00       	nop 
=======
800086ba:	0d 00 40 03 	disable 
800086be:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
8000871c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008720:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
=======
800086c0:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086c4:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
80008724:	02 3a       	mov %d10,%d3
80008726:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
=======
800086c8:	02 3a       	mov %d10,%d3
800086ca:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
8000872a:	76 23       	jz %d2,80008730 <Ifx_Fifo_write+0x48>
    {
        __enable();
8000872c:	0d 00 00 03 	enable 
=======
800086ce:	76 23       	jz %d2,800086d4 <Ifx_Fifo_write+0x48>
    {
        __enable();
800086d0:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
<<<<<<< HEAD
80008730:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008734:	0b 78 50 80 	addc %d8,%d8,%d7
=======
800086d4:	0b 6a 40 a0 	addx %d10,%d10,%d6
800086d8:	0b 78 50 80 	addc %d8,%d8,%d7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
80008738:	82 fc       	mov %d12,-1
=======
800086dc:	82 fc       	mov %d12,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
<<<<<<< HEAD
8000873a:	82 0d       	mov %d13,0
=======
800086de:	82 0d       	mov %d13,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
<<<<<<< HEAD
8000873c:	82 0e       	mov %d14,0
=======
800086e0:	82 0e       	mov %d14,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
<<<<<<< HEAD
8000873e:	a0 0c       	mov.a %a12,0
80008740:	06 fc       	sh %d12,-1
=======
800086e2:	a0 0c       	mov.a %a12,0
800086e4:	06 fc       	sh %d12,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
80008742:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80008746:	37 05 e1 57 	extr.u %d5,%d5,15,1
=======
800086e6:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800086ea:	37 05 e1 57 	extr.u %d5,%d5,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008742:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008746:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
8000874a:	0d 00 40 03 	disable 
8000874e:	00 00       	nop 
<<<<<<< HEAD
=======
800086ee:	0d 00 40 03 	disable 
800086f2:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
<<<<<<< HEAD
80008750:	88 c4       	ld.h %d4,[%a15]24
80008752:	88 2b       	ld.h %d11,[%a15]4
80008754:	0b b4 80 b0 	sub %d11,%d4,%d11
=======
800086f4:	88 c4       	ld.h %d4,[%a15]24
800086f6:	88 2b       	ld.h %d11,[%a15]4
800086f8:	0b b4 80 b0 	sub %d11,%d4,%d11
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
80008758:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000875c:	8c fd       	ld.h %d15,[%a15]26
8000875e:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008762:	e9 fe 1d 00 	st.b [%a15]29,%d14
=======
800086fc:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
80008700:	8c fd       	ld.h %d15,[%a15]26
80008702:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008706:	e9 fe 1d 00 	st.b [%a15]29,%d14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
<<<<<<< HEAD
80008766:	4b f2 01 22 	div %e2,%d2,%d15
8000876a:	a2 3b       	sub %d11,%d3
8000876c:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008770:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008774:	0b f9 80 20 	sub %d2,%d9,%d15
80008778:	0b 42 80 41 	min %d4,%d2,%d4
8000877c:	68 34       	st.w [%a15]12,%d4
=======
8000870a:	4b f2 01 22 	div %e2,%d2,%d15
8000870e:	a2 3b       	sub %d11,%d3
80008710:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008714:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008718:	0b f9 80 20 	sub %d2,%d9,%d15
8000871c:	0b 42 80 41 	min %d4,%d2,%d4
80008720:	68 34       	st.w [%a15]12,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
8000877e:	76 53       	jz %d5,80008784 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008780:	0d 00 00 03 	enable 
=======
80008722:	76 53       	jz %d5,80008728 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008724:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
<<<<<<< HEAD
80008784:	6e 26       	jz %d15,800087d0 <Ifx_Fifo_write+0xe8>
=======
80008728:	6e 26       	jz %d15,80008774 <Ifx_Fifo_write+0xe8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
<<<<<<< HEAD
80008786:	40 a4       	mov.aa %a4,%sp
80008788:	02 f4       	mov %d4,%d15
8000878a:	6d ff 6d fd 	call 80008264 <Ifx_CircularBuffer_write8>
8000878e:	40 25       	mov.aa %a5,%a2
=======
8000872a:	40 a4       	mov.aa %a4,%sp
8000872c:	02 f4       	mov %d4,%d15
8000872e:	6d ff 6d fd 	call 80008208 <Ifx_CircularBuffer_write8>
80008732:	40 25       	mov.aa %a5,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
80008790:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008794:	37 03 e1 37 	extr.u %d3,%d3,15,1
=======
80008734:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008738:	37 03 e1 37 	extr.u %d3,%d3,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
80008798:	0d 00 40 03 	disable 
=======
8000873c:	0d 00 40 03 	disable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
<<<<<<< HEAD
8000879c:	00 00       	nop 
=======
80008740:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
<<<<<<< HEAD
8000879e:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087a0:	88 84       	ld.h %d4,[%a15]16
=======
80008742:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008744:	88 84       	ld.h %d4,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
<<<<<<< HEAD
800087a2:	42 b2       	add %d2,%d11
800087a4:	37 02 50 20 	extr %d2,%d2,0,16
800087a8:	a8 22       	st.h [%a15]4,%d2
=======
80008746:	42 b2       	add %d2,%d11
80008748:	37 02 50 20 	extr %d2,%d2,0,16
8000874c:	a8 22       	st.h [%a15]4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
<<<<<<< HEAD
800087aa:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087ae:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
800087b0:	48 22       	ld.w %d2,[%a15]8
800087b2:	76 29       	jz %d2,800087c4 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
800087b4:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
800087b6:	8e f3       	jlez %d15,800087bc <Ifx_Fifo_write+0xd4>
=======
8000874e:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008752:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
80008754:	48 22       	ld.w %d2,[%a15]8
80008756:	76 29       	jz %d2,80008768 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
80008758:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
8000875a:	8e f3       	jlez %d15,80008760 <Ifx_Fifo_write+0xd4>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
<<<<<<< HEAD
800087b8:	68 2f       	st.w [%a15]8,%d15
800087ba:	3c 05       	j 800087c4 <Ifx_Fifo_write+0xdc>
=======
8000875c:	68 2f       	st.w [%a15]8,%d15
8000875e:	3c 05       	j 80008768 <Ifx_Fifo_write+0xdc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
<<<<<<< HEAD
800087bc:	82 1f       	mov %d15,1
=======
80008760:	82 1f       	mov %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
<<<<<<< HEAD
800087be:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800087c0:	e9 ff 1c 00 	st.b [%a15]28,%d15
=======
80008762:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008764:	e9 ff 1c 00 	st.b [%a15]28,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
800087c4:	76 33       	jz %d3,800087ca <Ifx_Fifo_write+0xe2>
    {
        __enable();
800087c6:	0d 00 00 03 	enable 
=======
80008768:	76 33       	jz %d3,8000876e <Ifx_Fifo_write+0xe2>
    {
        __enable();
8000876a:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
<<<<<<< HEAD
800087ca:	a2 b9       	sub %d9,%d11
800087cc:	37 09 50 90 	extr %d9,%d9,0,16
=======
8000876e:	a2 b9       	sub %d9,%d11
80008770:	37 09 50 90 	extr %d9,%d9,0,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
<<<<<<< HEAD
800087d0:	76 d4       	jz %d13,800087d8 <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
800087d2:	82 0f       	mov %d15,0
800087d4:	68 3f       	st.w [%a15]12,%d15
                break;
800087d6:	3c 48       	j 80008866 <Ifx_Fifo_write+0x17e>
800087d8:	ba fa       	eq %d15,%d10,-1
800087da:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800087de:	ee 1b       	jnz %d15,80008814 <Ifx_Fifo_write+0x12c>
=======
80008774:	76 d4       	jz %d13,8000877c <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008776:	82 0f       	mov %d15,0
80008778:	68 3f       	st.w [%a15]12,%d15
                break;
8000877a:	3c 48       	j 8000880a <Ifx_Fifo_write+0x17e>
8000877c:	ba fa       	eq %d15,%d10,-1
8000877e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008782:	ee 1b       	jnz %d15,800087b8 <Ifx_Fifo_write+0x12c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
800087e0:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800087e4:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
80008784:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008788:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
800087e8:	0d 00 40 03 	disable 
=======
8000878c:	0d 00 40 03 	disable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
<<<<<<< HEAD
800087ec:	00 00       	nop 
=======
80008790:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
800087ee:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800087f2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800087f6:	8f 03 40 31 	or %d3,%d3,0
=======
80008792:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008796:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000879a:	8f 03 40 31 	or %d3,%d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008750:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008754:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
<<<<<<< HEAD
800087fa:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======
8000879e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008758:	02 3a       	mov %d10,%d3
8000875a:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
800087fe:	76 23       	jz %d2,80008804 <Ifx_Fifo_write+0x11c>
    {
        __enable();
80008800:	0d 00 00 03 	enable 
=======
800087a2:	76 23       	jz %d2,800087a8 <Ifx_Fifo_write+0x11c>
    {
        __enable();
800087a4:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
<<<<<<< HEAD
80008804:	0b 8f 00 21 	eq %d2,%d15,%d8
80008808:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
8000880c:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008810:	df 02 e1 ff 	jne %d2,0,800087d2 <Ifx_Fifo_write+0xea>
=======
800087a8:	0b 8f 00 21 	eq %d2,%d15,%d8
800087ac:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800087b0:	0b f8 90 22 	or.lt %d2,%d8,%d15
800087b4:	df 02 e1 ff 	jne %d2,0,80008776 <Ifx_Fifo_write+0xea>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
<<<<<<< HEAD
80008814:	df 09 29 00 	jeq %d9,0,80008866 <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008818:	39 ff 1d 00 	ld.bu %d15,[%a15]29
8000881c:	ee 1f       	jnz %d15,8000885a <Ifx_Fifo_write+0x172>
=======
800087b8:	df 09 29 00 	jeq %d9,0,8000880a <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800087bc:	39 ff 1d 00 	ld.bu %d15,[%a15]29
800087c0:	ee 1f       	jnz %d15,800087fe <Ifx_Fifo_write+0x172>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000875e:	76 23       	jz %d2,80008764 <Ifx_Fifo_write+0x48>
    {
        __enable();
80008760:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008764:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008768:	0b 78 50 80 	addc %d8,%d8,%d7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
<<<<<<< HEAD
<<<<<<< HEAD
8000881e:	ba fa       	eq %d15,%d10,-1
80008820:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008824:	ee fa       	jnz %d15,80008818 <Ifx_Fifo_write+0x130>
=======
800087c2:	ba fa       	eq %d15,%d10,-1
800087c4:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800087c8:	ee fa       	jnz %d15,800087bc <Ifx_Fifo_write+0x130>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000876c:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000876e:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
80008770:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008772:	a0 0c       	mov.a %a12,0
80008774:	06 fc       	sh %d12,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80008826:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000882a:	37 02 e1 27 	extr.u %d2,%d2,15,1
=======
800087ca:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800087ce:	37 02 e1 27 	extr.u %d2,%d2,15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008776:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
8000877a:	37 05 e1 57 	extr.u %d5,%d5,15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
<<<<<<< HEAD
<<<<<<< HEAD
8000882e:	0d 00 40 03 	disable 
80008832:	00 00       	nop 
=======
800087d2:	0d 00 40 03 	disable 
800087d6:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
=======
8000877e:	0d 00 40 03 	disable 
80008782:	00 00       	nop 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

<<<<<<< HEAD
    result  = stm->TIM0.U;
<<<<<<< HEAD
80008834:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008838:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000883c:	8f 03 40 31 	or %d3,%d3,0
=======
800087d8:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800087dc:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800087e0:	8f 03 40 31 	or %d3,%d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80008784:	88 c4       	ld.h %d4,[%a15]24
80008786:	88 2b       	ld.h %d11,[%a15]4
80008788:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000878c:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
80008790:	8c fd       	ld.h %d15,[%a15]26
80008792:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008796:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

<<<<<<< HEAD
    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
<<<<<<< HEAD
80008840:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
=======
800087e4:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000879a:	4b f2 01 22 	div %e2,%d2,%d15
8000879e:	a2 3b       	sub %d11,%d3
800087a0:	37 0b 70 b0 	extr.u %d11,%d11,0,16
800087a4:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
800087a8:	0b f9 80 20 	sub %d2,%d9,%d15
800087ac:	0b 42 80 41 	min %d4,%d2,%d4
800087b0:	68 34       	st.w [%a15]12,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
<<<<<<< HEAD
<<<<<<< HEAD
80008844:	76 23       	jz %d2,8000884a <Ifx_Fifo_write+0x162>
=======
800087b2:	76 53       	jz %d5,800087b8 <Ifx_Fifo_write+0x9c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
        __enable();
800087b4:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
800087b8:	6e 26       	jz %d15,80008804 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
800087ba:	40 a4       	mov.aa %a4,%sp
800087bc:	02 f4       	mov %d4,%d15
800087be:	6d ff 6d fd 	call 80008298 <Ifx_CircularBuffer_write8>
800087c2:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800087c4:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800087c8:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800087cc:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800087d0:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
800087d2:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087d4:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
800087d6:	42 b2       	add %d2,%d11
800087d8:	37 02 50 20 	extr %d2,%d2,0,16
800087dc:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800087de:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087e2:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
800087e4:	48 22       	ld.w %d2,[%a15]8
800087e6:	76 29       	jz %d2,800087f8 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
800087e8:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
800087ea:	8e f3       	jlez %d15,800087f0 <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
800087ec:	68 2f       	st.w [%a15]8,%d15
800087ee:	3c 05       	j 800087f8 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800087f0:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800087f2:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800087f4:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087f8:	76 33       	jz %d3,800087fe <Ifx_Fifo_write+0xe2>
    {
        __enable();
800087fa:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800087fe:	a2 b9       	sub %d9,%d11
80008800:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008804:	76 d4       	jz %d13,8000880c <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008806:	82 0f       	mov %d15,0
80008808:	68 3f       	st.w [%a15]12,%d15
                break;
8000880a:	3c 48       	j 8000889a <Ifx_Fifo_write+0x17e>
8000880c:	ba fa       	eq %d15,%d10,-1
8000880e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008812:	ee 1b       	jnz %d15,80008848 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008814:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008818:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000881c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80008820:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008822:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008826:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000882a:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000882e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008832:	76 23       	jz %d2,80008838 <Ifx_Fifo_write+0x11c>
    {
        __enable();
80008834:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008838:	0b 8f 00 21 	eq %d2,%d15,%d8
8000883c:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008840:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008844:	df 02 e1 ff 	jne %d2,0,80008806 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
80008848:	df 09 29 00 	jeq %d9,0,8000889a <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000884c:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80008850:	ee 1f       	jnz %d15,8000888e <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008852:	ba fa       	eq %d15,%d10,-1
80008854:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008858:	ee fa       	jnz %d15,8000884c <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000885a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000885e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008862:	0d 00 40 03 	disable 
80008866:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008868:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000886c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008870:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008874:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008878:	76 23       	jz %d2,8000887e <Ifx_Fifo_write+0x162>
    {
        __enable();
8000887a:	0d 00 00 03 	enable 
8000887e:	0b 8f 00 21 	eq %d2,%d15,%d8
80008882:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008886:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000888a:	df 02 e1 ff 	jne %d2,0,8000884c <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
<<<<<<< HEAD
8000885a:	39 fd 1d 00 	ld.bu %d13,[%a15]29
8000885e:	8b 0d 00 d2 	eq %d13,%d13,0
80008862:	1d ff 70 ff 	j 80008742 <Ifx_Fifo_write+0x5a>
=======
800087e8:	76 23       	jz %d2,800087ee <Ifx_Fifo_write+0x162>
    {
        __enable();
800087ea:	0d 00 00 03 	enable 
800087ee:	0b 8f 00 21 	eq %d2,%d15,%d8
800087f2:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800087f6:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800087fa:	df 02 e1 ff 	jne %d2,0,800087bc <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
800087fe:	39 fd 1d 00 	ld.bu %d13,[%a15]29
80008802:	8b 0d 00 d2 	eq %d13,%d13,0
80008806:	1d ff 70 ff 	j 800086e6 <Ifx_Fifo_write+0x5a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000888e:	39 fd 1d 00 	ld.bu %d13,[%a15]29
80008892:	8b 0d 00 d2 	eq %d13,%d13,0
80008896:	1d ff 70 ff 	j 80008776 <Ifx_Fifo_write+0x5a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
<<<<<<< HEAD
<<<<<<< HEAD
80008866:	8c a2       	ld.h %d15,[%sp]4
80008868:	a8 bf       	st.h [%a15]22,%d15
=======
8000880a:	8c a2       	ld.h %d15,[%sp]4
8000880c:	a8 bf       	st.h [%a15]22,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000889a:	8c a2       	ld.h %d15,[%sp]4
8000889c:	a8 bf       	st.h [%a15]22,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    return count;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000886a:	02 92       	mov %d2,%d9
8000886c:	00 90       	ret 
	...

80008870 <syncInfoState>:
=======
8000880e:	02 92       	mov %d2,%d9
80008810:	00 90       	ret 
	...

80008814 <syncInfoState>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000889e:	02 92       	mov %d2,%d9
800088a0:	00 90       	ret 
	...

800088a4 <syncInfoState>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
    printInfoDisplay(); 
}

void syncInfoState(void){
<<<<<<< HEAD
<<<<<<< HEAD
80008870:	00 90       	ret 

80008872 <updatePacket>:
=======
80008814:	00 90       	ret 

80008816 <updatePacket>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800088a4:	00 90       	ret 

800088a6 <updatePacket>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


}

void updatePacket(void){
<<<<<<< HEAD
<<<<<<< HEAD
80008872:	00 90       	ret 

80008874 <printStateLv1>:
=======
80008816:	00 90       	ret 

80008818 <printStateLv1>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800088a6:	00 90       	ret 

800088a8 <printStateLv1>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

}

void printStateLv1(){
    sprintf(buf, "\xDB\xDB");
<<<<<<< HEAD
<<<<<<< HEAD
80008874:	91 00 00 f7 	movh.a %a15,28672
80008878:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
8000887c:	91 00 00 28 	movh.a %a2,32768
80008880:	d9 22 f8 70 	lea %a2,[%a2]3576 <80000df8 <IfxVadc_Adc_masterIndex+0x40>>
80008884:	40 f4       	mov.aa %a4,%a15
80008886:	04 2f       	ld.bu %d15,[%a2+]
80008888:	24 ff       	st.b [%a15+],%d15
8000888a:	ee fe       	jnz %d15,80008886 <printStateLv1+0x12>
=======
800088a8:	91 00 00 f7 	movh.a %a15,28672
800088ac:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
800088b0:	91 00 00 28 	movh.a %a2,32768
800088b4:	d9 22 d0 80 	lea %a2,[%a2]3600 <80000e10 <IfxVadc_Adc_masterIndex+0x40>>
800088b8:	40 f4       	mov.aa %a4,%a15
800088ba:	04 2f       	ld.bu %d15,[%a2+]
800088bc:	24 ff       	st.b [%a15+],%d15
800088be:	ee fe       	jnz %d15,800088ba <printStateLv1+0x12>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    lcd_print(buf);
800088c0:	1d ff 7b dc 	j 800041b6 <lcd_print>

800088c4 <printStateLv2>:
}
void printStateLv2(){
    sprintf(buf, "\xDB\xDB\xDB\xDB");
800088c4:	91 00 00 f7 	movh.a %a15,28672
800088c8:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
800088cc:	91 00 00 28 	movh.a %a2,32768
800088d0:	d9 22 d3 80 	lea %a2,[%a2]3603 <80000e13 <IfxVadc_Adc_masterIndex+0x43>>
800088d4:	40 f4       	mov.aa %a4,%a15
800088d6:	04 2f       	ld.bu %d15,[%a2+]
800088d8:	24 ff       	st.b [%a15+],%d15
800088da:	ee fe       	jnz %d15,800088d6 <printStateLv2+0x12>
    lcd_print(buf);
800088dc:	1d ff 6d dc 	j 800041b6 <lcd_print>

800088e0 <printStateLv3>:
}
void printStateLv3(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB");
800088e0:	91 00 00 f7 	movh.a %a15,28672
800088e4:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
800088e8:	91 00 00 28 	movh.a %a2,32768
800088ec:	d9 22 d8 80 	lea %a2,[%a2]3608 <80000e18 <IfxVadc_Adc_masterIndex+0x48>>
800088f0:	40 f4       	mov.aa %a4,%a15
800088f2:	04 2f       	ld.bu %d15,[%a2+]
800088f4:	24 ff       	st.b [%a15+],%d15
800088f6:	ee fe       	jnz %d15,800088f2 <printStateLv3+0x12>
    lcd_print(buf);
800088f8:	1d ff 5f dc 	j 800041b6 <lcd_print>

800088fc <printStateLv4>:
}
void printStateLv4(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB\xDB\xDB");
800088fc:	91 00 00 f7 	movh.a %a15,28672
80008900:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008904:	91 00 00 28 	movh.a %a2,32768
80008908:	d9 22 df 80 	lea %a2,[%a2]3615 <80000e1f <IfxVadc_Adc_masterIndex+0x4f>>
8000890c:	40 f4       	mov.aa %a4,%a15
8000890e:	04 2f       	ld.bu %d15,[%a2+]
80008910:	24 ff       	st.b [%a15+],%d15
80008912:	ee fe       	jnz %d15,8000890e <printStateLv4+0x12>
    lcd_print(buf);
80008914:	1d ff 51 dc 	j 800041b6 <lcd_print>

80008918 <printStateOn>:
}
void printStateOn(){
    sprintf(buf, "mode on");
80008918:	91 00 00 f7 	movh.a %a15,28672
8000891c:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008920:	91 00 00 28 	movh.a %a2,32768
80008924:	d9 22 e8 80 	lea %a2,[%a2]3624 <80000e28 <IfxVadc_Adc_masterIndex+0x58>>
80008928:	40 f4       	mov.aa %a4,%a15
8000892a:	04 2f       	ld.bu %d15,[%a2+]
8000892c:	24 ff       	st.b [%a15+],%d15
8000892e:	ee fe       	jnz %d15,8000892a <printStateOn+0x12>
    lcd_print(buf);
80008930:	1d ff 43 dc 	j 800041b6 <lcd_print>

80008934 <printStateOff>:
}
void printStateOff(){
    sprintf(buf, "mode off");
80008934:	91 00 00 f7 	movh.a %a15,28672
80008938:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
8000893c:	91 00 00 28 	movh.a %a2,32768
80008940:	d9 22 f0 80 	lea %a2,[%a2]3632 <80000e30 <IfxVadc_Adc_masterIndex+0x60>>
80008944:	40 f4       	mov.aa %a4,%a15
80008946:	04 2f       	ld.bu %d15,[%a2+]
80008948:	24 ff       	st.b [%a15+],%d15
8000894a:	ee fe       	jnz %d15,80008946 <printStateOff+0x12>
    lcd_print(buf);
8000894c:	1d ff 35 dc 	j 800041b6 <lcd_print>

80008950 <printStateRed>:
}
void printStateRed(){
    sprintf(buf, "light red");
80008950:	91 00 00 f7 	movh.a %a15,28672
80008954:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008958:	91 00 00 28 	movh.a %a2,32768
8000895c:	d9 22 f9 80 	lea %a2,[%a2]3641 <80000e39 <IfxVadc_Adc_masterIndex+0x69>>
80008960:	40 f4       	mov.aa %a4,%a15
80008962:	04 2f       	ld.bu %d15,[%a2+]
80008964:	24 ff       	st.b [%a15+],%d15
80008966:	ee fe       	jnz %d15,80008962 <printStateRed+0x12>
    lcd_print(buf);
80008968:	1d ff 27 dc 	j 800041b6 <lcd_print>

8000896c <printStateGreen>:
}
void printStateGreen(){
    sprintf(buf, "light green");
8000896c:	91 00 00 f7 	movh.a %a15,28672
80008970:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008974:	91 00 00 28 	movh.a %a2,32768
80008978:	d9 22 c3 90 	lea %a2,[%a2]3651 <80000e43 <IfxVadc_Adc_masterIndex+0x73>>
8000897c:	40 f4       	mov.aa %a4,%a15
8000897e:	04 2f       	ld.bu %d15,[%a2+]
80008980:	24 ff       	st.b [%a15+],%d15
80008982:	ee fe       	jnz %d15,8000897e <printStateGreen+0x12>
    lcd_print(buf);
80008984:	1d ff 19 dc 	j 800041b6 <lcd_print>

80008988 <printStateBlue>:
}
void printStateBlue(){
    sprintf(buf, "light blue");
80008988:	91 00 00 f7 	movh.a %a15,28672
8000898c:	d9 ff e0 00 	lea %a15,[%a15]3104 <70000c20 <buf>>
80008990:	91 00 00 28 	movh.a %a2,32768
80008994:	d9 22 cf 90 	lea %a2,[%a2]3663 <80000e4f <IfxVadc_Adc_masterIndex+0x7f>>
80008998:	40 f4       	mov.aa %a4,%a15
8000899a:	04 2f       	ld.bu %d15,[%a2+]
8000899c:	24 ff       	st.b [%a15+],%d15
8000899e:	ee fe       	jnz %d15,8000899a <printStateBlue+0x12>
    lcd_print(buf);
800089a0:	1d ff 0b dc 	j 800041b6 <lcd_print>

<<<<<<< HEAD
80008970 <printInfoDisplay>:
=======
80008818:	91 00 00 f7 	movh.a %a15,28672
8000881c:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008820:	91 00 00 28 	movh.a %a2,32768
80008824:	d9 22 d4 60 	lea %a2,[%a2]3476 <80000d94 <IfxVadc_Adc_masterIndex+0x40>>
80008828:	40 f4       	mov.aa %a4,%a15
8000882a:	04 2f       	ld.bu %d15,[%a2+]
8000882c:	24 ff       	st.b [%a15+],%d15
8000882e:	ee fe       	jnz %d15,8000882a <printStateLv1+0x12>
    lcd_print(buf);
80008830:	1d ff c3 dc 	j 800041b6 <lcd_print>

80008834 <printStateLv2>:
}
void printStateLv2(){
    sprintf(buf, "\xDB\xDB\xDB\xDB");
80008834:	91 00 00 f7 	movh.a %a15,28672
80008838:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
8000883c:	91 00 00 28 	movh.a %a2,32768
80008840:	d9 22 d7 60 	lea %a2,[%a2]3479 <80000d97 <IfxVadc_Adc_masterIndex+0x43>>
80008844:	40 f4       	mov.aa %a4,%a15
80008846:	04 2f       	ld.bu %d15,[%a2+]
80008848:	24 ff       	st.b [%a15+],%d15
8000884a:	ee fe       	jnz %d15,80008846 <printStateLv2+0x12>
    lcd_print(buf);
8000884c:	1d ff b5 dc 	j 800041b6 <lcd_print>

80008850 <printStateLv3>:
}
void printStateLv3(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB");
80008850:	91 00 00 f7 	movh.a %a15,28672
80008854:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008858:	91 00 00 28 	movh.a %a2,32768
8000885c:	d9 22 dc 60 	lea %a2,[%a2]3484 <80000d9c <IfxVadc_Adc_masterIndex+0x48>>
80008860:	40 f4       	mov.aa %a4,%a15
80008862:	04 2f       	ld.bu %d15,[%a2+]
80008864:	24 ff       	st.b [%a15+],%d15
80008866:	ee fe       	jnz %d15,80008862 <printStateLv3+0x12>
    lcd_print(buf);
80008868:	1d ff a7 dc 	j 800041b6 <lcd_print>

8000886c <printStateLv4>:
}
void printStateLv4(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB\xDB\xDB");
8000886c:	91 00 00 f7 	movh.a %a15,28672
80008870:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008874:	91 00 00 28 	movh.a %a2,32768
80008878:	d9 22 e3 60 	lea %a2,[%a2]3491 <80000da3 <IfxVadc_Adc_masterIndex+0x4f>>
8000887c:	40 f4       	mov.aa %a4,%a15
8000887e:	04 2f       	ld.bu %d15,[%a2+]
80008880:	24 ff       	st.b [%a15+],%d15
80008882:	ee fe       	jnz %d15,8000887e <printStateLv4+0x12>
    lcd_print(buf);
80008884:	1d ff 99 dc 	j 800041b6 <lcd_print>

80008888 <printStateOn>:
}
void printStateOn(){
    sprintf(buf, "mode on");
80008888:	91 00 00 f7 	movh.a %a15,28672
8000888c:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008890:	91 00 00 28 	movh.a %a2,32768
80008894:	d9 22 ec 60 	lea %a2,[%a2]3500 <80000dac <IfxVadc_Adc_masterIndex+0x58>>
80008898:	40 f4       	mov.aa %a4,%a15
8000889a:	04 2f       	ld.bu %d15,[%a2+]
8000889c:	24 ff       	st.b [%a15+],%d15
8000889e:	ee fe       	jnz %d15,8000889a <printStateOn+0x12>
    lcd_print(buf);
800088a0:	1d ff 8b dc 	j 800041b6 <lcd_print>

800088a4 <printStateOff>:
}
void printStateOff(){
    sprintf(buf, "mode off");
800088a4:	91 00 00 f7 	movh.a %a15,28672
800088a8:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088ac:	91 00 00 28 	movh.a %a2,32768
800088b0:	d9 22 f4 60 	lea %a2,[%a2]3508 <80000db4 <IfxVadc_Adc_masterIndex+0x60>>
800088b4:	40 f4       	mov.aa %a4,%a15
800088b6:	04 2f       	ld.bu %d15,[%a2+]
800088b8:	24 ff       	st.b [%a15+],%d15
800088ba:	ee fe       	jnz %d15,800088b6 <printStateOff+0x12>
    lcd_print(buf);
800088bc:	1d ff 7d dc 	j 800041b6 <lcd_print>

800088c0 <printStateRed>:
}
void printStateRed(){
    sprintf(buf, "light red");
800088c0:	91 00 00 f7 	movh.a %a15,28672
800088c4:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088c8:	91 00 00 28 	movh.a %a2,32768
800088cc:	d9 22 fd 60 	lea %a2,[%a2]3517 <80000dbd <IfxVadc_Adc_masterIndex+0x69>>
800088d0:	40 f4       	mov.aa %a4,%a15
800088d2:	04 2f       	ld.bu %d15,[%a2+]
800088d4:	24 ff       	st.b [%a15+],%d15
800088d6:	ee fe       	jnz %d15,800088d2 <printStateRed+0x12>
    lcd_print(buf);
800088d8:	1d ff 6f dc 	j 800041b6 <lcd_print>

800088dc <printStateGreen>:
}
void printStateGreen(){
    sprintf(buf, "light green");
800088dc:	91 00 00 f7 	movh.a %a15,28672
800088e0:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088e4:	91 00 00 28 	movh.a %a2,32768
800088e8:	d9 22 c7 70 	lea %a2,[%a2]3527 <80000dc7 <IfxVadc_Adc_masterIndex+0x73>>
800088ec:	40 f4       	mov.aa %a4,%a15
800088ee:	04 2f       	ld.bu %d15,[%a2+]
800088f0:	24 ff       	st.b [%a15+],%d15
800088f2:	ee fe       	jnz %d15,800088ee <printStateGreen+0x12>
    lcd_print(buf);
800088f4:	1d ff 61 dc 	j 800041b6 <lcd_print>

800088f8 <printStateBlue>:
}
void printStateBlue(){
    sprintf(buf, "light blue");
800088f8:	91 00 00 f7 	movh.a %a15,28672
800088fc:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008900:	91 00 00 28 	movh.a %a2,32768
80008904:	d9 22 d3 70 	lea %a2,[%a2]3539 <80000dd3 <IfxVadc_Adc_masterIndex+0x7f>>
80008908:	40 f4       	mov.aa %a4,%a15
8000890a:	04 2f       	ld.bu %d15,[%a2+]
8000890c:	24 ff       	st.b [%a15+],%d15
8000890e:	ee fe       	jnz %d15,8000890a <printStateBlue+0x12>
    lcd_print(buf);
80008910:	1d ff 53 dc 	j 800041b6 <lcd_print>

80008914 <printInfoDisplay>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800089a4 <printInfoDisplay>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    printInfoDisplay(); 
}


void printInfoDisplay(){
    lcd_goto(0,0);
<<<<<<< HEAD
<<<<<<< HEAD
80008970:	d2 04       	mov %e4,0
80008972:	6d ff 1b dc 	call 800041a8 <lcd_goto>
=======
800089a4:	d2 04       	mov %e4,0
800089a6:	6d ff 01 dc 	call 800041a8 <lcd_goto>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    switch (infoState) {
800089aa:	91 00 00 c7 	movh.a %a12,28672
800089ae:	19 cf c0 10 	ld.w %d15,[%a12]3136 <70000c40 <infoState>>
800089b2:	91 00 00 47 	movh.a %a4,28672
800089b6:	d9 44 e0 00 	lea %a4,[%a4]3104 <70000c20 <buf>>
800089ba:	ff 7f 55 80 	jge.u %d15,7,80008a64 <printInfoDisplay+0xc0>
800089be:	91 10 00 f8 	movh.a %a15,32769
800089c2:	d9 ff 8c 78 	lea %a15,[%a15]-30260 <800089cc <printInfoDisplay+0x28>>
800089c6:	90 ff       	addsc.a %a15,%a15,%d15,2
800089c8:	dc 0f       	ji %a15
800089ca:	00 00       	nop 
800089cc:	1d 00 0e 00 	j 800089e8 <printInfoDisplay+0x44>
800089d0:	1d 00 15 00 	j 800089fa <printInfoDisplay+0x56>
800089d4:	1d 00 1c 00 	j 80008a0c <printInfoDisplay+0x68>
800089d8:	1d 00 23 00 	j 80008a1e <printInfoDisplay+0x7a>
800089dc:	1d 00 2a 00 	j 80008a30 <printInfoDisplay+0x8c>
800089e0:	1d 00 31 00 	j 80008a42 <printInfoDisplay+0x9e>
800089e4:	1d 00 38 00 	j 80008a54 <printInfoDisplay+0xb0>
        case tunnelMode:
            sprintf(buf, "Tunnel Mode");
800089e8:	91 00 00 28 	movh.a %a2,32768
800089ec:	40 4f       	mov.aa %a15,%a4
800089ee:	d9 22 da 90 	lea %a2,[%a2]3674 <80000e5a <IfxVadc_Adc_masterIndex+0x8a>>
800089f2:	04 2f       	ld.bu %d15,[%a2+]
800089f4:	24 ff       	st.b [%a15+],%d15
800089f6:	ee fe       	jnz %d15,800089f2 <printInfoDisplay+0x4e>
800089f8:	3c 36       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case airConditionMode:
            sprintf(buf,"Air Conditional");
800089fa:	91 00 00 28 	movh.a %a2,32768
800089fe:	40 4f       	mov.aa %a15,%a4
80008a00:	d9 22 e6 90 	lea %a2,[%a2]3686 <80000e66 <IfxVadc_Adc_masterIndex+0x96>>
80008a04:	04 2f       	ld.bu %d15,[%a2+]
80008a06:	24 ff       	st.b [%a15+],%d15
80008a08:	ee fe       	jnz %d15,80008a04 <printInfoDisplay+0x60>
80008a0a:	3c 2d       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case chairDegree:
            sprintf(buf,"Chair Degree");
80008a0c:	91 00 00 28 	movh.a %a2,32768
80008a10:	40 4f       	mov.aa %a15,%a4
80008a12:	d9 22 f6 90 	lea %a2,[%a2]3702 <80000e76 <IfxVadc_Adc_masterIndex+0xa6>>
80008a16:	04 2f       	ld.bu %d15,[%a2+]
80008a18:	24 ff       	st.b [%a15+],%d15
80008a1a:	ee fe       	jnz %d15,80008a16 <printInfoDisplay+0x72>
80008a1c:	3c 24       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case window:
            sprintf(buf,"window");
80008a1e:	91 00 00 28 	movh.a %a2,32768
80008a22:	40 4f       	mov.aa %a15,%a4
80008a24:	d9 22 c3 a0 	lea %a2,[%a2]3715 <80000e83 <IfxVadc_Adc_masterIndex+0xb3>>
80008a28:	04 2f       	ld.bu %d15,[%a2+]
80008a2a:	24 ff       	st.b [%a15+],%d15
80008a2c:	ee fe       	jnz %d15,80008a28 <printInfoDisplay+0x84>
80008a2e:	3c 1b       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case embientLight:
            sprintf(buf,"embient light");
80008a30:	91 00 00 28 	movh.a %a2,32768
80008a34:	40 4f       	mov.aa %a15,%a4
80008a36:	d9 22 ca a0 	lea %a2,[%a2]3722 <80000e8a <IfxVadc_Adc_masterIndex+0xba>>
80008a3a:	04 2f       	ld.bu %d15,[%a2+]
80008a3c:	24 ff       	st.b [%a15+],%d15
80008a3e:	ee fe       	jnz %d15,80008a3a <printInfoDisplay+0x96>
80008a40:	3c 12       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case adasSensor:
            sprintf(buf,"adas sensor");
80008a42:	91 00 00 28 	movh.a %a2,32768
80008a46:	40 4f       	mov.aa %a15,%a4
80008a48:	d9 22 d8 a0 	lea %a2,[%a2]3736 <80000e98 <IfxVadc_Adc_masterIndex+0xc8>>
80008a4c:	04 2f       	ld.bu %d15,[%a2+]
80008a4e:	24 ff       	st.b [%a15+],%d15
80008a50:	ee fe       	jnz %d15,80008a4c <printInfoDisplay+0xa8>
80008a52:	3c 09       	j 80008a64 <printInfoDisplay+0xc0>
            break;
        case driveLight:
            sprintf(buf,"Drive Light");
80008a54:	91 00 00 28 	movh.a %a2,32768
80008a58:	40 4f       	mov.aa %a15,%a4
80008a5a:	d9 22 e4 a0 	lea %a2,[%a2]3748 <80000ea4 <IfxVadc_Adc_masterIndex+0xd4>>
80008a5e:	04 2f       	ld.bu %d15,[%a2+]
80008a60:	24 ff       	st.b [%a15+],%d15
80008a62:	ee fe       	jnz %d15,80008a5e <printInfoDisplay+0xba>
            break;
    }
    lcd_print(buf); 
80008a64:	6d ff a9 db 	call 800041b6 <lcd_print>
    lcd_goto(1,0);
<<<<<<< HEAD
80008a34:	d2 14       	mov %e4,1
80008a36:	6d ff b9 db 	call 800041a8 <lcd_goto>
=======
80008914:	d2 04       	mov %e4,0
80008916:	6d ff 49 dc 	call 800041a8 <lcd_goto>
    switch (infoState) {
8000891a:	91 00 00 c7 	movh.a %a12,28672
8000891e:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <infoState>>
80008922:	91 00 00 47 	movh.a %a4,28672
80008926:	d9 44 c8 00 	lea %a4,[%a4]3080 <70000c08 <buf>>
8000892a:	ff 7f 55 80 	jge.u %d15,7,800089d4 <printInfoDisplay+0xc0>
8000892e:	91 10 00 f8 	movh.a %a15,32769
80008932:	d9 ff bc 48 	lea %a15,[%a15]-30404 <8000893c <printInfoDisplay+0x28>>
80008936:	90 ff       	addsc.a %a15,%a15,%d15,2
80008938:	dc 0f       	ji %a15
8000893a:	00 00       	nop 
8000893c:	1d 00 0e 00 	j 80008958 <printInfoDisplay+0x44>
80008940:	1d 00 15 00 	j 8000896a <printInfoDisplay+0x56>
80008944:	1d 00 1c 00 	j 8000897c <printInfoDisplay+0x68>
80008948:	1d 00 23 00 	j 8000898e <printInfoDisplay+0x7a>
8000894c:	1d 00 2a 00 	j 800089a0 <printInfoDisplay+0x8c>
80008950:	1d 00 31 00 	j 800089b2 <printInfoDisplay+0x9e>
80008954:	1d 00 38 00 	j 800089c4 <printInfoDisplay+0xb0>
        case tunnelMode:
            sprintf(buf, "Tunnel Mode");
80008958:	91 00 00 28 	movh.a %a2,32768
8000895c:	40 4f       	mov.aa %a15,%a4
8000895e:	d9 22 de 70 	lea %a2,[%a2]3550 <80000dde <IfxVadc_Adc_masterIndex+0x8a>>
80008962:	04 2f       	ld.bu %d15,[%a2+]
80008964:	24 ff       	st.b [%a15+],%d15
80008966:	ee fe       	jnz %d15,80008962 <printInfoDisplay+0x4e>
80008968:	3c 36       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case airConditionMode:
            sprintf(buf,"Air Conditional");
8000896a:	91 00 00 28 	movh.a %a2,32768
8000896e:	40 4f       	mov.aa %a15,%a4
80008970:	d9 22 ea 70 	lea %a2,[%a2]3562 <80000dea <IfxVadc_Adc_masterIndex+0x96>>
80008974:	04 2f       	ld.bu %d15,[%a2+]
80008976:	24 ff       	st.b [%a15+],%d15
80008978:	ee fe       	jnz %d15,80008974 <printInfoDisplay+0x60>
8000897a:	3c 2d       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case chairDegree:
            sprintf(buf,"Chair Degree");
8000897c:	91 00 00 28 	movh.a %a2,32768
80008980:	40 4f       	mov.aa %a15,%a4
80008982:	d9 22 fa 70 	lea %a2,[%a2]3578 <80000dfa <IfxVadc_Adc_masterIndex+0xa6>>
80008986:	04 2f       	ld.bu %d15,[%a2+]
80008988:	24 ff       	st.b [%a15+],%d15
8000898a:	ee fe       	jnz %d15,80008986 <printInfoDisplay+0x72>
8000898c:	3c 24       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case window:
            sprintf(buf,"window");
8000898e:	91 00 00 28 	movh.a %a2,32768
80008992:	40 4f       	mov.aa %a15,%a4
80008994:	d9 22 c7 80 	lea %a2,[%a2]3591 <80000e07 <IfxVadc_Adc_masterIndex+0xb3>>
80008998:	04 2f       	ld.bu %d15,[%a2+]
8000899a:	24 ff       	st.b [%a15+],%d15
8000899c:	ee fe       	jnz %d15,80008998 <printInfoDisplay+0x84>
8000899e:	3c 1b       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case embientLight:
            sprintf(buf,"embient light");
800089a0:	91 00 00 28 	movh.a %a2,32768
800089a4:	40 4f       	mov.aa %a15,%a4
800089a6:	d9 22 ce 80 	lea %a2,[%a2]3598 <80000e0e <IfxVadc_Adc_masterIndex+0xba>>
800089aa:	04 2f       	ld.bu %d15,[%a2+]
800089ac:	24 ff       	st.b [%a15+],%d15
800089ae:	ee fe       	jnz %d15,800089aa <printInfoDisplay+0x96>
800089b0:	3c 12       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case adasSensor:
            sprintf(buf,"adas sensor");
800089b2:	91 00 00 28 	movh.a %a2,32768
800089b6:	40 4f       	mov.aa %a15,%a4
800089b8:	d9 22 dc 80 	lea %a2,[%a2]3612 <80000e1c <IfxVadc_Adc_masterIndex+0xc8>>
800089bc:	04 2f       	ld.bu %d15,[%a2+]
800089be:	24 ff       	st.b [%a15+],%d15
800089c0:	ee fe       	jnz %d15,800089bc <printInfoDisplay+0xa8>
800089c2:	3c 09       	j 800089d4 <printInfoDisplay+0xc0>
            break;
        case driveLight:
            sprintf(buf,"Drive Light");
800089c4:	91 00 00 28 	movh.a %a2,32768
800089c8:	40 4f       	mov.aa %a15,%a4
800089ca:	d9 22 e8 80 	lea %a2,[%a2]3624 <80000e28 <IfxVadc_Adc_masterIndex+0xd4>>
800089ce:	04 2f       	ld.bu %d15,[%a2+]
800089d0:	24 ff       	st.b [%a15+],%d15
800089d2:	ee fe       	jnz %d15,800089ce <printInfoDisplay+0xba>
            break;
    }
    lcd_print(buf); 
800089d4:	6d ff f1 db 	call 800041b6 <lcd_print>
    lcd_goto(1,0);
800089d8:	d2 14       	mov %e4,1
800089da:	6d ff e7 db 	call 800041a8 <lcd_goto>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008a68:	d2 14       	mov %e4,1
80008a6a:	6d ff 9f db 	call 800041a8 <lcd_goto>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    // sprintf(buf, "state = %u", infotainmentArr[infoState]); 
    // lcd_print(buf); 

    if(infoState == tunnelMode || infoState == driveLight ){
<<<<<<< HEAD
<<<<<<< HEAD
80008a3a:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <infoState>>
80008a3e:	91 00 00 f7 	movh.a %a15,28672
80008a42:	8b 6f 00 22 	eq %d2,%d15,6
80008a46:	8b 0f e0 24 	or.eq %d2,%d15,0
80008a4a:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008a4e:	76 26       	jz %d2,80008a5a <printInfoDisplay+0xea>
        if (infotainmentArr[infoState] == 0) { //mode on
80008a50:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a52:	4c f0       	ld.w %d15,[%a15]0
80008a54:	6e 36       	jz %d15,80008ac0 <printInfoDisplay+0x150>
=======
800089de:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <infoState>>
800089e2:	91 00 00 f7 	movh.a %a15,28672
800089e6:	8b 6f 00 22 	eq %d2,%d15,6
800089ea:	8b 0f e0 24 	or.eq %d2,%d15,0
800089ee:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
800089f2:	76 26       	jz %d2,800089fe <printInfoDisplay+0xea>
        if (infotainmentArr[infoState] == 0) { //mode on
800089f4:	90 ff       	addsc.a %a15,%a15,%d15,2
800089f6:	4c f0       	ld.w %d15,[%a15]0
800089f8:	6e 36       	jz %d15,80008a64 <printInfoDisplay+0x150>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008a6e:	19 cf c0 10 	ld.w %d15,[%a12]3136 <70000c40 <infoState>>
80008a72:	91 00 00 f7 	movh.a %a15,28672
80008a76:	8b 6f 00 22 	eq %d2,%d15,6
80008a7a:	8b 0f e0 24 	or.eq %d2,%d15,0
80008a7e:	d9 ff c4 10 	lea %a15,[%a15]3140 <70000c44 <infotainmentArr>>
80008a82:	76 26       	jz %d2,80008a8e <printInfoDisplay+0xea>
        if (infotainmentArr[infoState] == 0) { //mode on
80008a84:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a86:	4c f0       	ld.w %d15,[%a15]0
80008a88:	6e 36       	jz %d15,80008af4 <printInfoDisplay+0x150>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            printStateOff();
        }
        else{ //mode off
            printStateOn();
<<<<<<< HEAD
<<<<<<< HEAD
80008a56:	1d ff 47 ff 	j 800088e4 <printStateOn>
=======
80008a8a:	1d ff 47 ff 	j 80008918 <printStateOn>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        } 
    }
    else if(infoState == embientLight){
80008a8e:	5e 4b       	jne %d15,4,80008aa4 <printInfoDisplay+0x100>
        switch(infotainmentArr[infoState]){
80008a90:	4c f4       	ld.w %d15,[%a15]16
80008a92:	1e 15       	jeq %d15,1,80008a9c <printInfoDisplay+0xf8>
80008a94:	1e 26       	jeq %d15,2,80008aa0 <printInfoDisplay+0xfc>
80008a96:	ee 37       	jnz %d15,80008b04 <printInfoDisplay+0x160>
            case 0:
                printStateRed();
80008a98:	1d ff 5c ff 	j 80008950 <printStateRed>
                break;
            case 1:
                printStateGreen();
80008a9c:	1d ff 68 ff 	j 8000896c <printStateGreen>
                break;  
            case 2:
                printStateBlue();
<<<<<<< HEAD
80008a6c:	1d ff 74 ff 	j 80008954 <printStateBlue>
=======
800089fa:	1d ff 47 ff 	j 80008888 <printStateOn>
        } 
    }
    else if(infoState == embientLight){
800089fe:	5e 4b       	jne %d15,4,80008a14 <printInfoDisplay+0x100>
        switch(infotainmentArr[infoState]){
80008a00:	4c f4       	ld.w %d15,[%a15]16
80008a02:	1e 15       	jeq %d15,1,80008a0c <printInfoDisplay+0xf8>
80008a04:	1e 26       	jeq %d15,2,80008a10 <printInfoDisplay+0xfc>
80008a06:	ee 37       	jnz %d15,80008a74 <printInfoDisplay+0x160>
            case 0:
                printStateRed();
80008a08:	1d ff 5c ff 	j 800088c0 <printStateRed>
                break;
            case 1:
                printStateGreen();
80008a0c:	1d ff 68 ff 	j 800088dc <printStateGreen>
                break;  
            case 2:
                printStateBlue();
80008a10:	1d ff 74 ff 	j 800088f8 <printStateBlue>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008aa0:	1d ff 74 ff 	j 80008988 <printStateBlue>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
<<<<<<< HEAD
<<<<<<< HEAD
80008a70:	92 e2       	add %d2,%d15,-2
80008a72:	06 2f       	sh %d15,2
        switch(infotainmentArr[infoState]){
80008a74:	10 ff       	addsc.a %a15,%a15,%d15,0
80008a76:	4c f0       	ld.w %d15,[%a15]0
=======
80008a14:	92 e2       	add %d2,%d15,-2
80008a16:	06 2f       	sh %d15,2
        switch(infotainmentArr[infoState]){
80008a18:	10 ff       	addsc.a %a15,%a15,%d15,0
80008a1a:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008aa4:	92 e2       	add %d2,%d15,-2
80008aa6:	06 2f       	sh %d15,2
        switch(infotainmentArr[infoState]){
80008aa8:	10 ff       	addsc.a %a15,%a15,%d15,0
80008aaa:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            case 2:
                printStateBlue();
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
<<<<<<< HEAD
<<<<<<< HEAD
80008a78:	ff 22 14 80 	jge.u %d2,2,80008aa0 <printInfoDisplay+0x130>
        switch(infotainmentArr[infoState]){
80008a7c:	ff 4f 2a 80 	jge.u %d15,4,80008ad0 <printInfoDisplay+0x160>
80008a80:	91 10 00 f8 	movh.a %a15,32769
80008a84:	d9 ff 8c a8 	lea %a15,[%a15]-30068 <80008a8c <printInfoDisplay+0x11c>>
80008a88:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a8a:	dc 0f       	ji %a15
80008a8c:	1d 00 1c 00 	j 80008ac4 <printInfoDisplay+0x154>
80008a90:	1d 00 1c 00 	j 80008ac8 <printInfoDisplay+0x158>
80008a94:	1d 00 1c 00 	j 80008acc <printInfoDisplay+0x15c>
80008a98:	1d 00 02 00 	j 80008a9c <printInfoDisplay+0x12c>
=======
80008a1c:	ff 22 14 80 	jge.u %d2,2,80008a44 <printInfoDisplay+0x130>
        switch(infotainmentArr[infoState]){
80008a20:	ff 4f 2a 80 	jge.u %d15,4,80008a74 <printInfoDisplay+0x160>
80008a24:	91 10 00 f8 	movh.a %a15,32769
80008a28:	d9 ff b0 88 	lea %a15,[%a15]-30160 <80008a30 <printInfoDisplay+0x11c>>
80008a2c:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a2e:	dc 0f       	ji %a15
80008a30:	1d 00 1c 00 	j 80008a68 <printInfoDisplay+0x154>
80008a34:	1d 00 1c 00 	j 80008a6c <printInfoDisplay+0x158>
80008a38:	1d 00 1c 00 	j 80008a70 <printInfoDisplay+0x15c>
80008a3c:	1d 00 02 00 	j 80008a40 <printInfoDisplay+0x12c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008aac:	ff 22 14 80 	jge.u %d2,2,80008ad4 <printInfoDisplay+0x130>
        switch(infotainmentArr[infoState]){
80008ab0:	ff 4f 2a 80 	jge.u %d15,4,80008b04 <printInfoDisplay+0x160>
80008ab4:	91 10 00 f8 	movh.a %a15,32769
80008ab8:	d9 ff 80 b8 	lea %a15,[%a15]-30016 <80008ac0 <printInfoDisplay+0x11c>>
80008abc:	90 ff       	addsc.a %a15,%a15,%d15,2
80008abe:	dc 0f       	ji %a15
80008ac0:	1d 00 1c 00 	j 80008af8 <printInfoDisplay+0x154>
80008ac4:	1d 00 1c 00 	j 80008afc <printInfoDisplay+0x158>
80008ac8:	1d 00 1c 00 	j 80008b00 <printInfoDisplay+0x15c>
80008acc:	1d 00 02 00 	j 80008ad0 <printInfoDisplay+0x12c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                break;  
            case 2:
                printStateLv3();
                break;
            case 3:
                printStateLv4();
<<<<<<< HEAD
<<<<<<< HEAD
80008a9c:	1d ff 16 ff 	j 800088c8 <printStateLv4>
=======
80008a40:	1d ff 16 ff 	j 8000886c <printStateLv4>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008ad0:	1d ff 16 ff 	j 800088fc <printStateLv4>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                break;
        }
    }
    else{
        switch(infotainmentArr[infoState]){
<<<<<<< HEAD
<<<<<<< HEAD
80008aa0:	ff 4f 18 80 	jge.u %d15,4,80008ad0 <printInfoDisplay+0x160>
80008aa4:	91 10 00 f8 	movh.a %a15,32769
80008aa8:	d9 ff b0 a8 	lea %a15,[%a15]-30032 <80008ab0 <printInfoDisplay+0x140>>
80008aac:	90 ff       	addsc.a %a15,%a15,%d15,2
80008aae:	dc 0f       	ji %a15
80008ab0:	1d 00 08 00 	j 80008ac0 <printInfoDisplay+0x150>
80008ab4:	1d 00 08 00 	j 80008ac4 <printInfoDisplay+0x154>
80008ab8:	1d 00 08 00 	j 80008ac8 <printInfoDisplay+0x158>
80008abc:	1d 00 08 00 	j 80008acc <printInfoDisplay+0x15c>
=======
80008ad4:	ff 4f 18 80 	jge.u %d15,4,80008b04 <printInfoDisplay+0x160>
80008ad8:	91 10 00 f8 	movh.a %a15,32769
80008adc:	d9 ff a4 b8 	lea %a15,[%a15]-29980 <80008ae4 <printInfoDisplay+0x140>>
80008ae0:	90 ff       	addsc.a %a15,%a15,%d15,2
80008ae2:	dc 0f       	ji %a15
80008ae4:	1d 00 08 00 	j 80008af4 <printInfoDisplay+0x150>
80008ae8:	1d 00 08 00 	j 80008af8 <printInfoDisplay+0x154>
80008aec:	1d 00 08 00 	j 80008afc <printInfoDisplay+0x158>
80008af0:	1d 00 08 00 	j 80008b00 <printInfoDisplay+0x15c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            case 0:
                printStateOff();
80008af4:	1d ff 20 ff 	j 80008934 <printStateOff>
                break;
            case 1:
                printStateLv1();
80008af8:	1d ff d8 fe 	j 800088a8 <printStateLv1>
                break;  
            case 2:
                printStateLv2();
80008afc:	1d ff e4 fe 	j 800088c4 <printStateLv2>
                break;
            case 3:
                printStateLv3();
80008b00:	1d ff f0 fe 	j 800088e0 <printStateLv3>
80008b04:	00 90       	ret 

<<<<<<< HEAD
80008ad2 <initInfotainment>:
=======
80008a44:	ff 4f 18 80 	jge.u %d15,4,80008a74 <printInfoDisplay+0x160>
80008a48:	91 10 00 f8 	movh.a %a15,32769
80008a4c:	d9 ff 94 98 	lea %a15,[%a15]-30124 <80008a54 <printInfoDisplay+0x140>>
80008a50:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a52:	dc 0f       	ji %a15
80008a54:	1d 00 08 00 	j 80008a64 <printInfoDisplay+0x150>
80008a58:	1d 00 08 00 	j 80008a68 <printInfoDisplay+0x154>
80008a5c:	1d 00 08 00 	j 80008a6c <printInfoDisplay+0x158>
80008a60:	1d 00 08 00 	j 80008a70 <printInfoDisplay+0x15c>
            case 0:
                printStateOff();
80008a64:	1d ff 20 ff 	j 800088a4 <printStateOff>
                break;
            case 1:
                printStateLv1();
80008a68:	1d ff d8 fe 	j 80008818 <printStateLv1>
                break;  
            case 2:
                printStateLv2();
80008a6c:	1d ff e4 fe 	j 80008834 <printStateLv2>
                break;
            case 3:
                printStateLv3();
80008a70:	1d ff f0 fe 	j 80008850 <printStateLv3>
80008a74:	00 90       	ret 

80008a76 <initInfotainment>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008b06 <initInfotainment>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#include "infotainment_System.h"
#include "bsw.h"


void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
<<<<<<< HEAD
<<<<<<< HEAD
80008ad2:	6d ff fe da 	call 800040ce <lcd_clear>
=======
80008b06:	6d ff e4 da 	call 800040ce <lcd_clear>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    printInfoDisplay(); 
80008b0a:	1d ff 4d ff 	j 800089a4 <printInfoDisplay>

<<<<<<< HEAD
80008ada <updateInfoState>:
=======
80008a76:	6d ff 2c db 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008a7a:	1d ff 4d ff 	j 80008914 <printInfoDisplay>

80008a7e <updateInfoState>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008b0e <updateInfoState>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311


}

void updateInfoState(unsigned int buttonState){
    switch (buttonState) {
<<<<<<< HEAD
<<<<<<< HEAD
80008ada:	ff 44 4a 80 	jge.u %d4,4,80008b6e <updateInfoState+0x94>
80008ade:	91 10 00 28 	movh.a %a2,32769
80008ae2:	d9 22 b0 b8 	lea %a2,[%a2]-29968 <80008af0 <updateInfoState+0x16>>
80008ae6:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80008aea:	91 00 00 f7 	movh.a %a15,28672
80008aee:	dc 02       	ji %a2
80008af0:	1d 00 08 00 	j 80008b00 <updateInfoState+0x26>
80008af4:	1d 00 10 00 	j 80008b14 <updateInfoState+0x3a>
80008af8:	1d 00 19 00 	j 80008b2a <updateInfoState+0x50>
80008afc:	1d 00 24 00 	j 80008b44 <updateInfoState+0x6a>
=======
80008b0e:	ff 44 4a 80 	jge.u %d4,4,80008ba2 <updateInfoState+0x94>
80008b12:	91 10 00 28 	movh.a %a2,32769
80008b16:	d9 22 a4 c8 	lea %a2,[%a2]-29916 <80008b24 <updateInfoState+0x16>>
80008b1a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80008b1e:	91 00 00 f7 	movh.a %a15,28672
80008b22:	dc 02       	ji %a2
80008b24:	1d 00 08 00 	j 80008b34 <updateInfoState+0x26>
80008b28:	1d 00 10 00 	j 80008b48 <updateInfoState+0x3a>
80008b2c:	1d 00 19 00 	j 80008b5e <updateInfoState+0x50>
80008b30:	1d 00 24 00 	j 80008b78 <updateInfoState+0x6a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        case btnUP:
            if (infoState + 1 <= driveLight) {
80008b34:	19 ff c0 10 	ld.w %d15,[%a15]3136 <70000c40 <infoState>>
80008b38:	91 00 00 27 	movh.a %a2,28672
80008b3c:	ff 6f 04 00 	jge %d15,6,80008b44 <updateInfoState+0x36>
                infoState = infoState + 1;
80008b40:	c2 1f       	add %d15,1
80008b42:	3c 09       	j 80008b54 <updateInfoState+0x46>
            }
            else {
                infoState = tunnelMode;
<<<<<<< HEAD
80008b10:	82 0f       	mov %d15,0
80008b12:	3c 07       	j 80008b20 <updateInfoState+0x46>
=======
80008a7e:	ff 44 4a 80 	jge.u %d4,4,80008b12 <updateInfoState+0x94>
80008a82:	91 10 00 28 	movh.a %a2,32769
80008a86:	d9 22 94 a8 	lea %a2,[%a2]-30060 <80008a94 <updateInfoState+0x16>>
80008a8a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80008a8e:	91 00 00 f7 	movh.a %a15,28672
80008a92:	dc 02       	ji %a2
80008a94:	1d 00 08 00 	j 80008aa4 <updateInfoState+0x26>
80008a98:	1d 00 10 00 	j 80008ab8 <updateInfoState+0x3a>
80008a9c:	1d 00 19 00 	j 80008ace <updateInfoState+0x50>
80008aa0:	1d 00 24 00 	j 80008ae8 <updateInfoState+0x6a>
        case btnUP:
            if (infoState + 1 <= driveLight) {
80008aa4:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008aa8:	91 00 00 27 	movh.a %a2,28672
80008aac:	ff 6f 04 00 	jge %d15,6,80008ab4 <updateInfoState+0x36>
                infoState = infoState + 1;
80008ab0:	c2 1f       	add %d15,1
80008ab2:	3c 09       	j 80008ac4 <updateInfoState+0x46>
            }
            else {
                infoState = tunnelMode;
80008ab4:	82 0f       	mov %d15,0
80008ab6:	3c 07       	j 80008ac4 <updateInfoState+0x46>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008b44:	82 0f       	mov %d15,0
80008b46:	3c 07       	j 80008b54 <updateInfoState+0x46>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
            break;
        case btnDOWN:
            if (infoState - 1 >= tunnelMode) {
<<<<<<< HEAD
<<<<<<< HEAD
80008b14:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008b18:	91 00 00 27 	movh.a %a2,28672
80008b1c:	8e f5       	jlez %d15,80008b26 <updateInfoState+0x4c>
=======
80008b48:	19 ff c0 10 	ld.w %d15,[%a15]3136 <70000c40 <infoState>>
80008b4c:	91 00 00 27 	movh.a %a2,28672
80008b50:	8e f5       	jlez %d15,80008b5a <updateInfoState+0x4c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                infoState = infoState - 1;
80008b52:	c2 ff       	add %d15,-1
80008b54:	59 2f c0 10 	st.w [%a2]3136 <70000c40 <infoState>>,%d15
80008b58:	3c 25       	j 80008ba2 <updateInfoState+0x94>
            }
            else {
                infoState = driveLight;
<<<<<<< HEAD
80008b26:	82 6f       	mov %d15,6
80008b28:	3c fc       	j 80008b20 <updateInfoState+0x46>
=======
80008ab8:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008abc:	91 00 00 27 	movh.a %a2,28672
80008ac0:	8e f5       	jlez %d15,80008aca <updateInfoState+0x4c>
                infoState = infoState - 1;
80008ac2:	c2 ff       	add %d15,-1
80008ac4:	59 2f e8 00 	st.w [%a2]3112 <70000c28 <infoState>>,%d15
80008ac8:	3c 25       	j 80008b12 <updateInfoState+0x94>
            }
            else {
                infoState = driveLight;
80008aca:	82 6f       	mov %d15,6
80008acc:	3c fc       	j 80008ac4 <updateInfoState+0x46>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008b5a:	82 6f       	mov %d15,6
80008b5c:	3c fc       	j 80008b54 <updateInfoState+0x46>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
            break;
        case btnLEFT:
            if(infotainmentArr[infoState] -1 >= 0){
<<<<<<< HEAD
<<<<<<< HEAD
80008b2a:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008b2e:	91 00 00 f7 	movh.a %a15,28672
80008b32:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008b36:	90 ff       	addsc.a %a15,%a15,%d15,2
80008b38:	4c f0       	ld.w %d15,[%a15]0
80008b3a:	8e f3       	jlez %d15,80008b40 <updateInfoState+0x66>
=======
80008b5e:	19 ff c0 10 	ld.w %d15,[%a15]3136 <70000c40 <infoState>>
80008b62:	91 00 00 f7 	movh.a %a15,28672
80008b66:	d9 ff c4 10 	lea %a15,[%a15]3140 <70000c44 <infotainmentArr>>
80008b6a:	90 ff       	addsc.a %a15,%a15,%d15,2
80008b6c:	4c f0       	ld.w %d15,[%a15]0
80008b6e:	8e f3       	jlez %d15,80008b74 <updateInfoState+0x66>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                infotainmentArr[infoState] = infotainmentArr[infoState] - 1;
80008b70:	c2 ff       	add %d15,-1
80008b72:	3c 17       	j 80008ba0 <updateInfoState+0x92>
            }
            else{
                infotainmentArr[infoState] = 0;
<<<<<<< HEAD
80008b40:	82 0f       	mov %d15,0
80008b42:	3c 15       	j 80008b6c <updateInfoState+0x92>
=======
80008ace:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008ad2:	91 00 00 f7 	movh.a %a15,28672
80008ad6:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008ada:	90 ff       	addsc.a %a15,%a15,%d15,2
80008adc:	4c f0       	ld.w %d15,[%a15]0
80008ade:	8e f3       	jlez %d15,80008ae4 <updateInfoState+0x66>
                infotainmentArr[infoState] = infotainmentArr[infoState] - 1;
80008ae0:	c2 ff       	add %d15,-1
80008ae2:	3c 17       	j 80008b10 <updateInfoState+0x92>
            }
            else{
                infotainmentArr[infoState] = 0;
80008ae4:	82 0f       	mov %d15,0
80008ae6:	3c 15       	j 80008b10 <updateInfoState+0x92>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008b74:	82 0f       	mov %d15,0
80008b76:	3c 15       	j 80008ba0 <updateInfoState+0x92>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
            break;
        case btnRIGHT:
            if(infotainmentArr[infoState] +1 <=  stateMaxArr[infoState]){
<<<<<<< HEAD
<<<<<<< HEAD
80008b44:	19 ff e8 00 	ld.w %d15,[%a15]3112
80008b48:	91 00 00 28 	movh.a %a2,32768
80008b4c:	91 00 00 f7 	movh.a %a15,28672
80008b50:	06 2f       	sh %d15,2
80008b52:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008b56:	d9 22 d8 a0 	lea %a2,[%a2]3736 <80000e98 <stateMaxArr>>
80008b5a:	10 ff       	addsc.a %a15,%a15,%d15,0
80008b5c:	10 22       	addsc.a %a2,%a2,%d15,0
80008b5e:	48 02       	ld.w %d2,[%a15]0
80008b60:	4c 20       	ld.w %d15,[%a2]0
80008b62:	7f f2 05 00 	jge %d2,%d15,80008b6c <updateInfoState+0x92>
=======
80008b78:	19 ff c0 10 	ld.w %d15,[%a15]3136
80008b7c:	91 00 00 28 	movh.a %a2,32768
80008b80:	91 00 00 f7 	movh.a %a15,28672
80008b84:	06 2f       	sh %d15,2
80008b86:	d9 ff c4 10 	lea %a15,[%a15]3140 <70000c44 <infotainmentArr>>
80008b8a:	d9 22 f0 a0 	lea %a2,[%a2]3760 <80000eb0 <stateMaxArr>>
80008b8e:	10 ff       	addsc.a %a15,%a15,%d15,0
80008b90:	10 22       	addsc.a %a2,%a2,%d15,0
80008b92:	48 02       	ld.w %d2,[%a15]0
80008b94:	4c 20       	ld.w %d15,[%a2]0
80008b96:	7f f2 05 00 	jge %d2,%d15,80008ba0 <updateInfoState+0x92>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
                infotainmentArr[infoState] = infotainmentArr[infoState] +1;
80008b9a:	c2 12       	add %d2,1
80008b9c:	68 02       	st.w [%a15]0,%d2
80008b9e:	3c 02       	j 80008ba2 <updateInfoState+0x94>
            }
            else{
                infotainmentArr[infoState] = stateMaxArr[infoState];
<<<<<<< HEAD
80008b6c:	68 0f       	st.w [%a15]0,%d15
=======
80008ae8:	19 ff e8 00 	ld.w %d15,[%a15]3112
80008aec:	91 00 00 28 	movh.a %a2,32768
80008af0:	91 00 00 f7 	movh.a %a15,28672
80008af4:	06 2f       	sh %d15,2
80008af6:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008afa:	d9 22 f4 80 	lea %a2,[%a2]3636 <80000e34 <stateMaxArr>>
80008afe:	10 ff       	addsc.a %a15,%a15,%d15,0
80008b00:	10 22       	addsc.a %a2,%a2,%d15,0
80008b02:	48 02       	ld.w %d2,[%a15]0
80008b04:	4c 20       	ld.w %d15,[%a2]0
80008b06:	7f f2 05 00 	jge %d2,%d15,80008b10 <updateInfoState+0x92>
                infotainmentArr[infoState] = infotainmentArr[infoState] +1;
80008b0a:	c2 12       	add %d2,1
80008b0c:	68 02       	st.w [%a15]0,%d2
80008b0e:	3c 02       	j 80008b12 <updateInfoState+0x94>
            }
            else{
                infotainmentArr[infoState] = stateMaxArr[infoState];
80008b10:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008ba0:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            }
            break;
        
    }
    lcd_clear(); // LCD 출력 내용 초기화 함수
<<<<<<< HEAD
<<<<<<< HEAD
80008b6e:	6d ff b0 da 	call 800040ce <lcd_clear>
=======
80008ba2:	6d ff 96 da 	call 800040ce <lcd_clear>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    printInfoDisplay(); 
80008ba6:	1d ff ff fe 	j 800089a4 <printInfoDisplay>
	...

80008bac <initUartDriver>:

App_AsclinAsc g_AsclinStm;
struct ActuatorPacket g_RecievedActuatorPacket = {};

void initUartDriver(void)
{
80008bac:	20 60       	sub.a %sp,96
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);
80008bae:	d9 a4 24 00 	lea %a4,[%sp]36
80008bb2:	c5 f5 40 80 	lea %a5,f0000600 <_SMALL_DATA4_+0x3fff8600>
80008bb6:	6d ff 1f e6 	call 800057f4 <IfxAsclin_Asc_initModuleConfig>

    ascConfig.baudrate.prescaler    = 1;
80008bba:	82 1f       	mov %d15,1
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008bbc:	7b 00 00 27 	movh %d2,28672
80008bc0:	1b 62 d9 20 	addi %d2,%d2,3478
void initUartDriver(void)
{
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
80008bc4:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 9600;
80008bc8:	7b 60 61 f4 	movh %d15,17942
80008bcc:	78 0a       	st.w [%sp]40,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008bce:	59 a2 18 10 	st.w [%sp]88,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008bd2:	82 3f       	mov %d15,3
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bd4:	7b 00 00 28 	movh %d2,32768
80008bd8:	60 23       	mov.a %a3,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008bda:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008bde:	82 4f       	mov %d15,4
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008be0:	d9 af 04 00 	lea %a15,[%sp]4

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008be4:	f9 af 02 10 	st.h [%sp]66,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008be8:	82 5f       	mov %d15,5
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bea:	40 f4       	mov.aa %a4,%a15
    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008bec:	f9 af 00 10 	st.h [%sp]64,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bf0:	d9 32 cc b0 	lea %a2,[%a3]3788
    ascConfig.baudrate.baudrate     = 9600;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;
80008bf4:	82 0f       	mov %d15,0
80008bf6:	e9 af 06 10 	st.b [%sp]70,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bfa:	a0 33       	mov.a %a3,3
80008bfc:	09 22 48 01 	ld.d %e2,[%a2+]8
80008c00:	89 42 48 01 	st.d [%a4+]8,%e2
80008c04:	fc 3c       	loop %a3,80008bfc <initUartDriver+0x50>

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008c06:	7b 00 00 f7 	movh %d15,28672
80008c0a:	1b cf c6 f0 	addi %d15,%d15,3180
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c0e:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008c12:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c14:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008c18:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c1c:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008c20:	f9 af 0e 10 	st.h [%sp]78,%d15
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;
80008c24:	f9 af 14 10 	st.h [%sp]84,%d15
        &IfxAsclin0_RXB_P15_3_IN,      IfxPort_InputMode_pullUp,
        NULL_PTR,                      IfxPort_OutputMode_pushPull,
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80008c28:	f8 12       	st.a [%sp]72,%a15

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008c2a:	1d ff 0e e4 	j 80005446 <IfxAsclin_Asc_initModule>

80008c2e <myprintfSerial>:
    }
    deserialize_sensor_packet(buffer,packet);
}

void myprintfSerial(const char *fmt,...)
{
80008c2e:	20 e8       	sub.a %sp,232
80008c30:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80008c32:	6d 00 af 06 	call 80009990 <EnableAllInterrupts>
    char buf[128];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, 128, fmt, args);
80008c36:	40 f5       	mov.aa %a5,%a15
80008c38:	d9 a4 28 10 	lea %a4,[%sp]104
80008c3c:	3b 00 08 40 	mov %d4,128
80008c40:	d9 a6 28 30 	lea %a6,[%sp]232
80008c44:	6d 00 19 15 	call 8000b676 <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
80008c48:	d9 a4 28 10 	lea %a4,[%sp]104
80008c4c:	6d 00 e6 14 	call 8000b618 <strlen>
80008c50:	91 00 00 f7 	movh.a %a15,28672
80008c54:	d9 ff ec 10 	lea %a15,[%a15]3180 <70000c6c <g_AsclinStm>>
80008c58:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x150>>,%d2
    unsigned int i =0;
80008c5c:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80008c5e:	d9 a4 28 10 	lea %a4,[%sp]104
80008c62:	6d 00 db 14 	call 8000b618 <strlen>
80008c66:	7f 2f 0c 80 	jge.u %d15,%d2,80008c7e <myprintfSerial+0x50>
        txData[i] = buf[i];
80008c6a:	d9 a3 04 00 	lea %a3,[%sp]4
80008c6e:	10 32       	addsc.a %a2,%a3,%d15,0
80008c70:	d9 a3 28 10 	lea %a3,[%sp]104
80008c74:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80008c76:	c2 1f       	add %d15,1
        txData[i] = buf[i];
80008c78:	08 02       	ld.bu %d2,[%a15]0
80008c7a:	34 22       	st.b [%a2],%d2
80008c7c:	3c f1       	j 80008c5e <myprintfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &txData, &g_AsclinStm.count, TIME_INFINITE);
80008c7e:	91 00 00 47 	movh.a %a4,28672
80008c82:	91 00 00 67 	movh.a %a6,28672
80008c86:	82 f4       	mov %d4,-1
80008c88:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008c8c:	d9 a5 04 00 	lea %a5,[%sp]4 <70000ec0 <g_AsclinStm+0x254>>
80008c90:	d9 66 dc b0 	lea %a6,[%a6]3804 <70000edc <g_AsclinStm+0x270>>
80008c94:	9b 04 00 58 	addih %d5,%d4,32768
80008c98:	1d ff 16 e6 	j 800058c4 <IfxAsclin_Asc_write>

80008c9c <asclin0TxISR>:
}

ISR(asclin0TxISR)
{
    // printfSerial("onTransmit(%d) ",++sendStamp);
    IfxAsclin_Asc_isrTransmit(&g_AsclinStm.drivers.asc);
80008c9c:	91 00 00 47 	movh.a %a4,28672
80008ca0:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008ca4:	1d ff 16 e3 	j 800052d0 <IfxAsclin_Asc_isrTransmit>

80008ca8 <calculate_checksum>:

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008ca8:	82 0f       	mov %d15,0

//from uart_packet

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
80008caa:	82 02       	mov %d2,0
80008cac:	9f 04 03 80 	jned %d4,0,80008cb2 <calculate_checksum+0xa>
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
    }
    return checksumResult;
}
80008cb0:	00 90       	ret 
/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
80008cb2:	10 4f       	addsc.a %a15,%a4,%d15,0

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008cb4:	c2 1f       	add %d15,1
        checksumResult ^= data[i];
80008cb6:	08 03       	ld.bu %d3,[%a15]0
80008cb8:	c6 32       	xor %d2,%d3
80008cba:	3c f9       	j 80008cac <calculate_checksum+0x4>

80008cbc <serialize_actuator_packet>:
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
80008cbc:	40 52       	mov.aa %a2,%a5
80008cbe:	a0 93       	mov.a %a3,9
80008cc0:	04 4f       	ld.bu %d15,[%a4+]
80008cc2:	24 2f       	st.b [%a2+],%d15
80008cc4:	fc 3e       	loop %a3,80008cc0 <serialize_actuator_packet+0x4>
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008cc6:	40 54       	mov.aa %a4,%a5
80008cc8:	3b a0 00 40 	mov %d4,10
    }
    return checksumResult;
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
80008ccc:	40 5f       	mov.aa %a15,%a5
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008cce:	6d ff ed ff 	call 80008ca8 <calculate_checksum>
80008cd2:	28 a2       	st.b [%a15]10,%d2
80008cd4:	00 90       	ret 

80008cd6 <sendActuatorPacket>:

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
80008cd6:	20 10       	sub.a %sp,16
80008cd8:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008cda:	6d 00 5b 06 	call 80009990 <EnableAllInterrupts>
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008cde:	d9 af 05 00 	lea %a15,[%sp]5
80008ce2:	40 f2       	mov.aa %a2,%a15
    serialize_actuator_packet(packet,buf);
80008ce4:	40 c4       	mov.aa %a4,%a12
80008ce6:	40 f5       	mov.aa %a5,%a15
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008ce8:	82 0f       	mov %d15,0
80008cea:	a0 a3       	mov.a %a3,10
80008cec:	24 2f       	st.b [%a2+],%d15
80008cee:	fc 3f       	loop %a3,80008cec <sendActuatorPacket+0x16>
    serialize_actuator_packet(packet,buf);
80008cf0:	6d ff e6 ff 	call 80008cbc <serialize_actuator_packet>
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008cf4:	91 00 00 27 	movh.a %a2,28672
80008cf8:	da 0b       	mov %d15,11
80008cfa:	d9 22 ec 10 	lea %a2,[%a2]3180 <70000c6c <g_AsclinStm>>
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008cfe:	91 00 00 47 	movh.a %a4,28672
80008d02:	91 00 00 67 	movh.a %a6,28672
80008d06:	82 f4       	mov %d4,-1
void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
    serialize_actuator_packet(packet,buf);
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008d08:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x150>>,%d15
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008d0c:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008d10:	40 f5       	mov.aa %a5,%a15
80008d12:	d9 66 dc b0 	lea %a6,[%a6]3804 <70000edc <g_AsclinStm+0x270>>
80008d16:	9b 04 00 58 	addih %d5,%d4,32768
80008d1a:	1d ff d5 e5 	j 800058c4 <IfxAsclin_Asc_write>

80008d1e <deserialize_actuator_packet>:
}

/* Deserialize buffer into ActuatorPacket */
void deserialize_actuator_packet(const uint8* buffer, struct ActuatorPacket* packet) {
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
80008d1e:	a0 af       	mov.a %a15,10
80008d20:	04 4f       	ld.bu %d15,[%a4+]
80008d22:	24 5f       	st.b [%a5+],%d15
80008d24:	fc fe       	loop %a15,80008d20 <deserialize_actuator_packet+0x2>
80008d26:	00 90       	ret 

80008d28 <readActuatorPacket>:
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008d28:	20 10       	sub.a %sp,16
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d2a:	91 00 00 d7 	movh.a %a13,28672
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d2e:	d9 af 05 00 	lea %a15,[%sp]5
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d32:	d9 dd c0 b0 	lea %a13,[%a13]3776 <70000ec0 <g_AsclinStm+0x254>>
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d36:	40 f2       	mov.aa %a2,%a15
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008d38:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d3a:	40 d4       	mov.aa %a4,%a13
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d3c:	82 0f       	mov %d15,0
80008d3e:	a0 a3       	mov.a %a3,10
80008d40:	24 2f       	st.b [%a2+],%d15
80008d42:	fc 3f       	loop %a3,80008d40 <readActuatorPacket+0x18>
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d44:	6d ff fa e1 	call 80005138 <IfxAsclin_Asc_getReadCount>
80008d48:	8b b2 40 22 	lt %d2,%d2,11
80008d4c:	df 02 11 80 	jne %d2,0,80008d6e <readActuatorPacket+0x46>
80008d50:	82 0f       	mov %d15,0
    while (sendCnt--)
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008d52:	40 d4       	mov.aa %a4,%a13
80008d54:	6d ff 58 e3 	call 80005404 <IfxAsclin_Asc_blockingRead>
80008d58:	10 f2       	addsc.a %a2,%a15,%d15,0
80008d5a:	c2 1f       	add %d15,1
80008d5c:	34 22       	st.b [%a2],%d2
void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
    while (sendCnt--)
80008d5e:	8b bf 20 22 	ne %d2,%d15,11
80008d62:	df 02 f8 ff 	jne %d2,0,80008d52 <readActuatorPacket+0x2a>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
80008d66:	40 f4       	mov.aa %a4,%a15
80008d68:	40 c5       	mov.aa %a5,%a12
80008d6a:	6d ff da ff 	call 80008d1e <deserialize_actuator_packet>
80008d6e:	00 90       	ret 

80008d70 <asclin0RxISR>:
}

ISR(asclin0RxISR)
{
    // printfSerial("onReceive(%d) ",++recieveStamp);
    IfxAsclin_Asc_isrReceive(&g_AsclinStm.drivers.asc);
80008d70:	91 00 00 f7 	movh.a %a15,28672
80008d74:	d9 ff c0 b0 	lea %a15,[%a15]3776 <70000ec0 <g_AsclinStm+0x254>>
80008d78:	40 f4       	mov.aa %a4,%a15
80008d7a:	6d ff fa e2 	call 8000536e <IfxAsclin_Asc_isrReceive>
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)>=ACTUATOR_PACKET_SIZE){
80008d7e:	40 f4       	mov.aa %a4,%a15
80008d80:	6d ff dc e1 	call 80005138 <IfxAsclin_Asc_getReadCount>
80008d84:	8b b2 40 22 	lt %d2,%d2,11
80008d88:	f6 27       	jnz %d2,80008d96 <asclin0RxISR+0x26>
        readActuatorPacket(&g_RecievedActuatorPacket);
80008d8a:	91 00 00 47 	movh.a %a4,28672
80008d8e:	d9 44 e0 10 	lea %a4,[%a4]3168 <70000c60 <g_RecievedActuatorPacket>>
80008d92:	1d ff cb ff 	j 80008d28 <readActuatorPacket>
80008d96:	00 90       	ret 

80008d98 <serialize_sensor_packet>:
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
80008d98:	40 52       	mov.aa %a2,%a5
80008d9a:	a0 73       	mov.a %a3,7
80008d9c:	04 4f       	ld.bu %d15,[%a4+]
80008d9e:	24 2f       	st.b [%a2+],%d15
80008da0:	fc 3e       	loop %a3,80008d9c <serialize_sensor_packet+0x4>
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008da2:	40 54       	mov.aa %a4,%a5
80008da4:	3b 80 00 40 	mov %d4,8
         // handle CRC mismatch
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
80008da8:	40 5f       	mov.aa %a15,%a5
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008daa:	6d ff 7f ff 	call 80008ca8 <calculate_checksum>
80008dae:	28 82       	st.b [%a15]8,%d2
80008db0:	00 90       	ret 

80008db2 <sendSensorPacket>:
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void sendSensorPacket(const struct SensorPacket* packet)
{
80008db2:	20 10       	sub.a %sp,16
80008db4:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008db6:	6d 00 ed 05 	call 80009990 <EnableAllInterrupts>
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008dba:	d9 af 07 00 	lea %a15,[%sp]7
80008dbe:	40 f2       	mov.aa %a2,%a15
    serialize_sensor_packet(packet,buf);
80008dc0:	40 c4       	mov.aa %a4,%a12
80008dc2:	40 f5       	mov.aa %a5,%a15
}

void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008dc4:	82 0f       	mov %d15,0
80008dc6:	a0 83       	mov.a %a3,8
80008dc8:	24 2f       	st.b [%a2+],%d15
80008dca:	fc 3f       	loop %a3,80008dc8 <sendSensorPacket+0x16>
    serialize_sensor_packet(packet,buf);
80008dcc:	6d ff e6 ff 	call 80008d98 <serialize_sensor_packet>
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008dd0:	91 00 00 27 	movh.a %a2,28672
80008dd4:	da 09       	mov %d15,9
80008dd6:	d9 22 ec 10 	lea %a2,[%a2]3180 <70000c6c <g_AsclinStm>>
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008dda:	91 00 00 47 	movh.a %a4,28672
80008dde:	91 00 00 67 	movh.a %a6,28672
80008de2:	82 f4       	mov %d4,-1
void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008de4:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x150>>,%d15
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008de8:	d9 44 c0 b0 	lea %a4,[%a4]3776 <70000ec0 <g_AsclinStm+0x254>>
80008dec:	40 f5       	mov.aa %a5,%a15
80008dee:	d9 66 dc b0 	lea %a6,[%a6]3804 <70000edc <g_AsclinStm+0x270>>
80008df2:	9b 04 00 58 	addih %d5,%d4,32768
80008df6:	1d ff 67 e5 	j 800058c4 <IfxAsclin_Asc_write>

80008dfa <deserialize_sensor_packet>:
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
}

/* Deserialize buffer into SensorPacket */
void deserialize_sensor_packet(const uint8* buffer, struct SensorPacket* packet) {
    memcpy(packet, buffer, SENSOR_PACKET_SIZE);
80008dfa:	a0 8f       	mov.a %a15,8
80008dfc:	04 4f       	ld.bu %d15,[%a4+]
80008dfe:	24 5f       	st.b [%a5+],%d15
80008e00:	fc fe       	loop %a15,80008dfc <deserialize_sensor_packet+0x2>
80008e02:	00 90       	ret 

80008e04 <readSensorPacket>:
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
80008e04:	20 10       	sub.a %sp,16
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e06:	91 00 00 d7 	movh.a %a13,28672
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008e0a:	d9 af 07 00 	lea %a15,[%sp]7
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e0e:	d9 dd c0 b0 	lea %a13,[%a13]3776 <70000ec0 <g_AsclinStm+0x254>>
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008e12:	40 f2       	mov.aa %a2,%a15
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
80008e14:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e16:	40 d4       	mov.aa %a4,%a13
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008e18:	82 0f       	mov %d15,0
80008e1a:	a0 83       	mov.a %a3,8
80008e1c:	24 2f       	st.b [%a2+],%d15
80008e1e:	fc 3f       	loop %a3,80008e1c <readSensorPacket+0x18>
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008e20:	6d ff 8c e1 	call 80005138 <IfxAsclin_Asc_getReadCount>
80008e24:	8b 92 40 22 	lt %d2,%d2,9
80008e28:	df 02 11 80 	jne %d2,0,80008e4a <readSensorPacket+0x46>
80008e2c:	82 0f       	mov %d15,0
    while (sendCnt--)
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008e2e:	40 d4       	mov.aa %a4,%a13
80008e30:	6d ff ea e2 	call 80005404 <IfxAsclin_Asc_blockingRead>
80008e34:	10 f2       	addsc.a %a2,%a15,%d15,0
80008e36:	c2 1f       	add %d15,1
80008e38:	34 22       	st.b [%a2],%d2
void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
    while (sendCnt--)
80008e3a:	8b 9f 20 22 	ne %d2,%d15,9
80008e3e:	df 02 f8 ff 	jne %d2,0,80008e2e <readSensorPacket+0x2a>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_sensor_packet(buffer,packet);
80008e42:	40 f4       	mov.aa %a4,%a15
80008e44:	40 c5       	mov.aa %a5,%a12
80008e46:	6d ff da ff 	call 80008dfa <deserialize_sensor_packet>
80008e4a:	00 90       	ret 

<<<<<<< HEAD
80008e18 <initUltrasonic>:
80008e18:	91 40 00 4f 	movh.a %a4,61444
80008e1c:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e20:	82 14       	mov %d4,1
80008e22:	3b 00 08 50 	mov %d5,128
80008e26:	6d ff 42 e7 	call 80005caa <IfxPort_setPinMode>
=======
80008b12:	6d ff de da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008b16:	1d ff ff fe 	j 80008914 <printInfoDisplay>
	...

80008b1c <getPhotoresiter>:
#include "photoresistor_Driver.h"
#include "bsw.h"

int getPhotoresiter(){
    int adc_in;
    adc_in = readADCValue(PHOTO_CH);
80008b1c:	82 24       	mov %d4,2
    return adc_in;
80008b1e:	1d ff 1c dd 	j 80004556 <readADCValue>

80008b22 <initUltrasonic>:
80008b22:	91 40 00 4f 	movh.a %a4,61444
80008b26:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008b2a:	82 14       	mov %d4,1
80008b2c:	3b 00 08 50 	mov %d5,128
80008b30:	6d ff 8f e8 	call 80005c4e <IfxPort_setPinMode>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008e4c <initUltrasonic>:
    .ECHO_PIN = 3
};

void initUltrasonic (struct Ultrasonic* ultrasonic)
{
    IfxPort_setPinModeOutput(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
80008e4c:	0c 41       	ld.bu %d15,[%a4]1
80008e4e:	14 43       	ld.bu %d3,[%a4]
80008e50:	8f 8f 00 f0 	sh %d15,%d15,8
80008e54:	0f 3f a0 20 	or %d2,%d15,%d3
80008e58:	0c 42       	ld.bu %d15,[%a4]2
    .ECHO_PORT = &MODULE_P10,
    .ECHO_PIN = 3
};

void initUltrasonic (struct Ultrasonic* ultrasonic)
{
80008e5a:	40 4f       	mov.aa %a15,%a4
    IfxPort_setPinModeOutput(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
80008e5c:	8f 0f 01 f0 	sh %d15,%d15,16
80008e60:	a6 2f       	or %d15,%d2
80008e62:	39 42 03 00 	ld.bu %d2,[%a4]3
80008e66:	08 44       	ld.bu %d4,[%a15]4
80008e68:	8f 82 01 20 	sh %d2,%d2,24
80008e6c:	a6 f2       	or %d2,%d15
80008e6e:	60 24       	mov.a %a4,%d2
80008e70:	3b 00 08 50 	mov %d5,128
80008e74:	6d ff 35 e7 	call 80005cde <IfxPort_setPinMode>
    IfxPort_setPinModeInput(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN, IfxPort_InputMode_pullDown);
80008e78:	0c f6       	ld.bu %d15,[%a15]6
80008e7a:	08 53       	ld.bu %d3,[%a15]5
80008e7c:	8f 8f 00 f0 	sh %d15,%d15,8
80008e80:	0f 3f a0 20 	or %d2,%d15,%d3
80008e84:	0c f7       	ld.bu %d15,[%a15]7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
<<<<<<< HEAD
<<<<<<< HEAD
80008e2a:	91 40 00 4f 	movh.a %a4,61444
80008e2e:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e32:	82 24       	mov %d4,2
80008e34:	3b 80 00 50 	mov %d5,8
80008e38:	1d ff 39 e7 	j 80005caa <IfxPort_setPinMode>

80008e3c <sendTrigger>:
=======
80008b34:	91 40 00 4f 	movh.a %a4,61444
80008b38:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008b3c:	82 24       	mov %d4,2
80008b3e:	3b 80 00 50 	mov %d5,8
80008b42:	1d ff 86 e8 	j 80005c4e <IfxPort_setPinMode>

80008b46 <delay_ms>:
    IfxPort_setPinModeOutput(TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

void delay_ms(unsigned long delay)
{
80008b46:	02 4a       	mov %d10,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80008b48:	6d ff 6a ea 	call 8000601c <IfxScuCcu_getSourceFrequency>
80008b4c:	91 30 00 ff 	movh.a %a15,61443
80008b50:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008b54:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008b56:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008b5a:	37 04 64 44 	extr.u %d4,%d4,8,4
80008b5e:	53 1f 40 00 	mul.u %e0,%d15,1
80008b62:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80008b66:	8f 0f 40 61 	or %d6,%d15,0
80008b6a:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
80008b6e:	3b 80 3e 40 	mov %d4,1000
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
80008b72:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
80008b76:	4b 42 11 22 	div.u %e2,%d2,%d4
80008b7a:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
80008b7e:	73 a2 68 40 	mul.u %e4,%d2,%d10
80008b82:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008b86:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008b8a:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008b8e:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008b92:	8f 0f 40 81 	or %d8,%d15,0
80008b96:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80008b9a:	0b 68 c0 20 	subx %d2,%d8,%d6
80008b9e:	0b 79 d0 30 	subc %d3,%d9,%d7
80008ba2:	3a 53       	eq %d15,%d3,%d5
80008ba4:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80008ba8:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80008bac:	ee ed       	jnz %d15,80008b86 <delay_ms+0x40>
}
80008bae:	00 90       	ret 

80008bb0 <delay_us>:

void delay_us(unsigned long delay)
{
80008bb0:	02 4a       	mov %d10,%d4
80008bb2:	6d ff 35 ea 	call 8000601c <IfxScuCcu_getSourceFrequency>
80008bb6:	91 30 00 ff 	movh.a %a15,61443
80008bba:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008bbe:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008bc0:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008bc4:	37 04 64 44 	extr.u %d4,%d4,8,4
80008bc8:	53 1f 40 00 	mul.u %e0,%d15,1
80008bcc:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80008bd0:	8f 0f 40 61 	or %d6,%d15,0
80008bd4:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_us = freq / 1000000;
80008bd8:	7b f0 00 40 	movh %d4,15
80008bdc:	1b 04 24 44 	addi %d4,%d4,16960
    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

void delay_us(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
80008be0:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_us = freq / 1000000;
80008be4:	4b 42 11 22 	div.u %e2,%d2,%d4
80008be8:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_us;
80008bec:	73 a2 68 40 	mul.u %e4,%d2,%d10
80008bf0:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008bf4:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008bf8:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008bfc:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008c00:	8f 0f 40 81 	or %d8,%d15,0
80008c04:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
80008c08:	0b 68 c0 20 	subx %d2,%d8,%d6
80008c0c:	0b 79 d0 30 	subc %d3,%d9,%d7
80008c10:	3a 53       	eq %d15,%d3,%d5
80008c12:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
80008c16:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80008c1a:	ee ed       	jnz %d15,80008bf4 <delay_us+0x44>
}
80008c1c:	00 90       	ret 

80008c1e <sendTrigger>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008e86:	08 94       	ld.bu %d4,[%a15]9
80008e88:	8f 0f 01 f0 	sh %d15,%d15,16
80008e8c:	a6 2f       	or %d15,%d2
80008e8e:	08 82       	ld.bu %d2,[%a15]8
80008e90:	3b 80 00 50 	mov %d5,8
80008e94:	8f 82 01 20 	sh %d2,%d2,24
80008e98:	a6 f2       	or %d2,%d15
80008e9a:	60 24       	mov.a %a4,%d2
80008e9c:	1d ff 21 e7 	j 80005cde <IfxPort_setPinMode>

80008ea0 <sendTrigger>:
    return distanceCm;
}

void sendTrigger(struct Ultrasonic* ultrasonic)
{
    IfxPort_setPinHigh(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
80008ea0:	0c 41       	ld.bu %d15,[%a4]1
80008ea2:	14 43       	ld.bu %d3,[%a4]
80008ea4:	8f 8f 00 f0 	sh %d15,%d15,8
80008ea8:	0f 3f a0 20 	or %d2,%d15,%d3
80008eac:	0c 42       	ld.bu %d15,[%a4]2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
<<<<<<< HEAD
<<<<<<< HEAD
80008e3c:	91 40 00 ff 	movh.a %a15,61444
80008e40:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e44:	82 2f       	mov %d15,2
80008e46:	68 1f       	st.w [%a15]4,%d15
=======
80008c1e:	91 40 00 ff 	movh.a %a15,61444
80008c22:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008c26:	82 2f       	mov %d15,2
80008c28:	68 1f       	st.w [%a15]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008eae:	39 43 04 00 	ld.bu %d3,[%a4]4
80008eb2:	8f 0f 01 f0 	sh %d15,%d15,16
80008eb6:	a6 2f       	or %d15,%d2
80008eb8:	39 42 03 00 	ld.bu %d2,[%a4]3
    delay_us(10);
80008ebc:	3b a0 00 40 	mov %d4,10
    return distanceCm;
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

void sendTrigger(struct Ultrasonic* ultrasonic)
{
<<<<<<< HEAD
    IfxPort_setPinHigh(TRIG_PIN);
    delay_us(10);
<<<<<<< HEAD
80008e48:	3b a0 00 40 	mov %d4,10
80008e4c:	7b 20 00 f0 	movh %d15,2
80008e50:	6d ff 92 da 	call 80004374 <delay_us>
80008e54:	68 1f       	st.w [%a15]4,%d15
80008e56:	00 90       	ret 

80008e58 <measureEchoTick>:
=======
80008c2a:	3b a0 00 40 	mov %d4,10
80008c2e:	7b 20 00 f0 	movh %d15,2
80008c32:	6d ff bf ff 	call 80008bb0 <delay_us>
80008c36:	68 1f       	st.w [%a15]4,%d15
80008c38:	00 90       	ret 

80008c3a <measureEchoTick>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
    IfxPort_setPinHigh(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
80008ec0:	8f 82 01 20 	sh %d2,%d2,24
80008ec4:	a6 f2       	or %d2,%d15
80008ec6:	60 22       	mov.a %a2,%d2
80008ec8:	82 1f       	mov %d15,1
80008eca:	0f 3f 00 30 	sh %d3,%d15,%d3
80008ece:	59 23 04 00 	st.w [%a2]4,%d3
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}

void sendTrigger(struct Ultrasonic* ultrasonic)
{
80008ed2:	40 4f       	mov.aa %a15,%a4
    IfxPort_setPinHigh(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
    delay_us(10);
80008ed4:	6d ff 61 da 	call 80004396 <delay_us>
    IfxPort_setPinLow(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
80008ed8:	0c f1       	ld.bu %d15,[%a15]1
80008eda:	08 03       	ld.bu %d3,[%a15]0
80008edc:	8f 8f 00 f0 	sh %d15,%d15,8
80008ee0:	0f 3f a0 20 	or %d2,%d15,%d3
80008ee4:	0c f2       	ld.bu %d15,[%a15]2
80008ee6:	7b 10 00 30 	movh %d3,1
80008eea:	8f 0f 01 f0 	sh %d15,%d15,16
80008eee:	a6 2f       	or %d15,%d2
80008ef0:	08 32       	ld.bu %d2,[%a15]3
80008ef2:	8f 82 01 20 	sh %d2,%d2,24
80008ef6:	a6 f2       	or %d2,%d15
80008ef8:	0c f4       	ld.bu %d15,[%a15]4
80008efa:	60 22       	mov.a %a2,%d2
80008efc:	0f f3 00 30 	sh %d3,%d3,%d15
80008f00:	59 23 04 00 	st.w [%a2]4,%d3
80008f04:	00 90       	ret 

80008f06 <measureEchoTick>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008f06:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008f0a:	85 f8 2c 00 	ld.w %d8,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008f0e:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008f12:	8f 0f 40 41 	or %d4,%d15,0

long measureEchoTick(struct Ultrasonic* ultrasonic)
{
    uint64 startTick = 0, elapsedTick = 0;
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
80008f16:	0c 46       	ld.bu %d15,[%a4]6
80008f18:	0f 38 a0 50 	or %d5,%d8,%d3
80008f1c:	39 43 05 00 	ld.bu %d3,[%a4]5
80008f20:	8f 8f 00 f0 	sh %d15,%d15,8
80008f24:	0f 3f a0 20 	or %d2,%d15,%d3
80008f28:	0c 47       	ld.bu %d15,[%a4]7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}


IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
{
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
80008e58:	91 40 00 ff 	movh.a %a15,61444
=======
80008c3a:	91 40 00 ff 	movh.a %a15,61444
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
<<<<<<< HEAD
80008e5c:	7b 40 07 10 	movh %d1,116
=======
80008c3e:	7b 40 07 10 	movh %d1,116
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    IfxPort_setPinLow(TRIG_PIN);
=======
80008f2a:	39 48 09 00 	ld.bu %d8,[%a4]9
80008f2e:	8f 0f 01 f0 	sh %d15,%d15,16
80008f32:	a6 2f       	or %d15,%d2
80008f34:	39 42 08 00 	ld.bu %d2,[%a4]8
80008f38:	82 19       	mov %d9,1
80008f3a:	8f 82 01 20 	sh %d2,%d2,24
80008f3e:	a6 f2       	or %d2,%d15
80008f40:	60 2f       	mov.a %a15,%d2
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008f42:	7b 40 07 a0 	movh %d10,116
    IfxPort_setPinLow(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN);
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

long measureEchoTick(struct Ultrasonic* ultrasonic)
{
    uint64 startTick = 0, elapsedTick = 0;
<<<<<<< HEAD
<<<<<<< HEAD
80008e60:	d2 02       	mov %e2,0
80008e62:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008e66:	1b 01 78 1f 	addi %d1,%d1,-2176
80008e6a:	4c f9       	ld.w %d15,[%a15]36
=======
80008c42:	d2 02       	mov %e2,0
80008c44:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008c48:	1b 01 78 1f 	addi %d1,%d1,-2176
80008c4c:	4c f9       	ld.w %d15,[%a15]36
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}
=======
80008f46:	d2 02       	mov %e2,0
80008f48:	0f 89 00 90 	sh %d9,%d9,%d8
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008f4c:	1b 0a 78 af 	addi %d10,%d10,-2176
80008f50:	4c f9       	ld.w %d15,[%a15]36
80008f52:	26 9f       	and %d15,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

long measureEchoTick(struct Ultrasonic* ultrasonic)
{
    uint64 startTick = 0, elapsedTick = 0;
<<<<<<< HEAD
    while (IfxPort_getPinState(ECHO_PIN) == 0){
<<<<<<< HEAD
80008e6c:	6f 2f 13 80 	jnz.t %d15,2,80008e92 <measureEchoTick+0x3a>
=======
80008c4e:	6f 2f 13 80 	jnz.t %d15,2,80008c74 <measureEchoTick+0x3a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
80008f54:	ee 16       	jnz %d15,80008f80 <measureEchoTick+0x7a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80008e70:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008e74:	85 f0 2c 00 	ld.w %d0,f000002c <_SMALL_DATA4_+0x3fff802c>
=======
80008c52:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008c56:	85 f0 2c 00 	ld.w %d0,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
80008e78:	53 1f 40 40 	mul.u %e4,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008e7c:	8f 0f 40 21 	or %d2,%d15,0
80008e80:	0f 50 a0 30 	or %d3,%d0,%d5
=======
80008f56:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008f5a:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008f5e:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008f62:	8f 0f 40 01 	or %d0,%d15,0
80008f66:	0f 32 a0 10 	or %d1,%d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008f6a:	0b 40 c0 20 	subx %d2,%d0,%d4
80008f6e:	0b 51 d0 30 	subc %d3,%d1,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
<<<<<<< HEAD
80008e84:	ba 03       	eq %d15,%d3,0
80008e86:	0b 12 50 f2 	and.ge.u %d15,%d2,%d1
80008e8a:	8b 03 00 f5 	or.ne %d15,%d3,0
80008e8e:	6e ee       	jz %d15,80008e6a <measureEchoTick+0x12>
80008e90:	3c 2c       	j 80008ee8 <measureEchoTick+0x90>
=======
80008c5a:	53 1f 40 40 	mul.u %e4,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008c5e:	8f 0f 40 21 	or %d2,%d15,0
80008c62:	0f 50 a0 30 	or %d3,%d0,%d5
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008c66:	ba 03       	eq %d15,%d3,0
80008c68:	0b 12 50 f2 	and.ge.u %d15,%d2,%d1
80008c6c:	8b 03 00 f5 	or.ne %d15,%d3,0
80008c70:	6e ee       	jz %d15,80008c4c <measureEchoTick+0x12>
80008c72:	3c 2c       	j 80008cca <measureEchoTick+0x90>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008f72:	ba 03       	eq %d15,%d3,0
80008f74:	0b a2 50 f2 	and.ge.u %d15,%d2,%d10
80008f78:	8b 03 00 f5 	or.ne %d15,%d3,0
80008f7c:	6e ea       	jz %d15,80008f50 <measureEchoTick+0x4a>
80008f7e:	3c 29       	j 80008fd0 <measureEchoTick+0xca>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80008e92:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008e96:	85 f8 2c 00 	ld.w %d8,f000002c <_SMALL_DATA4_+0x3fff802c>
=======
80008c74:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008c78:	85 f8 2c 00 	ld.w %d8,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008f80:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008f84:	85 f9 2c 00 	ld.w %d9,f000002c <_SMALL_DATA4_+0x3fff802c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80008e9a:	53 1f 40 00 	mul.u %e0,%d15,1
80008e9e:	91 40 00 ff 	movh.a %a15,61444
=======
80008c7c:	53 1f 40 00 	mul.u %e0,%d15,1
80008c80:	91 40 00 ff 	movh.a %a15,61444
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008f88:	53 1f 40 00 	mul.u %e0,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008f8c:	8f 0f 40 41 	or %d4,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    };
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
<<<<<<< HEAD
<<<<<<< HEAD
80008ea2:	7b 40 07 00 	movh %d0,116
    result |= ((uint64)stm->CAP.U) << 32;
80008ea6:	8f 0f 40 41 	or %d4,%d15,0
80008eaa:	0f 18 a0 50 	or %d5,%d8,%d1
80008eae:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008eb2:	1b 00 78 0f 	addi %d0,%d0,-2176
80008eb6:	4c f9       	ld.w %d15,[%a15]36
=======
80008c84:	7b 40 07 00 	movh %d0,116
    result |= ((uint64)stm->CAP.U) << 32;
80008c88:	8f 0f 40 41 	or %d4,%d15,0
80008c8c:	0f 18 a0 50 	or %d5,%d8,%d1
80008c90:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008c94:	1b 00 78 0f 	addi %d0,%d0,-2176
80008c98:	4c f9       	ld.w %d15,[%a15]36
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    while (IfxPort_getPinState(ECHO_PIN) == 0){
=======
80008f90:	7b 40 07 00 	movh %d0,116
80008f94:	0f 19 a0 50 	or %d5,%d9,%d1
80008f98:	1b 00 78 0f 	addi %d0,%d0,-2176
80008f9c:	4c f9       	ld.w %d15,[%a15]36
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    startTick = IfxStm_get(&MODULE_STM0);
<<<<<<< HEAD
    while (IfxPort_getPinState(ECHO_PIN) == 1){
<<<<<<< HEAD
80008eb8:	6f 2f 17 00 	jz.t %d15,2,80008ee6 <measureEchoTick+0x8e>
=======
80008c9a:	6f 2f 17 00 	jz.t %d15,2,80008cc8 <measureEchoTick+0x8e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 1){
80008f9e:	57 0f 61 f8 	extr.u %d15,%d15,%d8,1
80008fa2:	de 16       	jne %d15,1,80008fce <measureEchoTick+0xc8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
<<<<<<< HEAD
<<<<<<< HEAD
80008ebc:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008ec0:	53 1f 40 20 	mul.u %e2,%d15,1
=======
80008fa4:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008fa8:	53 1f 40 20 	mul.u %e2,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    result |= ((uint64)stm->CAP.U) << 32;
80008fac:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008fb0:	8f 0f 40 61 	or %d6,%d15,0
80008fb4:	0f 32 a0 70 	or %d7,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008fb8:	0b 46 c0 20 	subx %d2,%d6,%d4
80008fbc:	0b 57 d0 30 	subc %d3,%d7,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008fc0:	ba 03       	eq %d15,%d3,0
80008fc2:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80008fc6:	8b 03 00 f5 	or.ne %d15,%d3,0
80008fca:	6e e9       	jz %d15,80008f9c <measureEchoTick+0x96>
80008fcc:	3c 02       	j 80008fd0 <measureEchoTick+0xca>
    };
    return (long)elapsedTick;
<<<<<<< HEAD
80008ee6:	00 90       	ret 
=======
80008c9e:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008ca2:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008ca6:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008caa:	8f 0f 40 61 	or %d6,%d15,0
80008cae:	0f 32 a0 70 	or %d7,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008cb2:	0b 46 c0 20 	subx %d2,%d6,%d4
80008cb6:	0b 57 d0 30 	subc %d3,%d7,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008cba:	ba 03       	eq %d15,%d3,0
80008cbc:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80008cc0:	8b 03 00 f5 	or.ne %d15,%d3,0
80008cc4:	6e ea       	jz %d15,80008c98 <measureEchoTick+0x5e>
80008cc6:	3c 02       	j 80008cca <measureEchoTick+0x90>
    };
    return (long)elapsedTick;
80008cc8:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
long measureEchoTick()
=======
80008fce:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
    uint64 startTick = 0, elapsedTick = 0;
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
<<<<<<< HEAD
<<<<<<< HEAD
80008ee8:	82 f2       	mov %d2,-1
=======
80008cca:	82 f2       	mov %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    while (IfxPort_getPinState(ECHO_PIN) == 1){
=======
80008fd0:	82 f2       	mov %d2,-1
    while (IfxPort_getPinState(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN) == 1){
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    return (long)elapsedTick;
}
<<<<<<< HEAD
<<<<<<< HEAD
80008eea:	00 90       	ret 

80008eec <getUltrasonic>:
    IfxPort_setPinModeOutput(TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
=======
80008ccc:	00 90       	ret 

80008cce <getUltrasonic>:

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
}

int getUltrasonic(){
    sendTrigger();
<<<<<<< HEAD
80008eec:	6d ff a8 ff 	call 80008e3c <sendTrigger>
    long echoTicks = measureEchoTick();
80008ef0:	6d ff b4 ff 	call 80008e58 <measureEchoTick>
80008ef4:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008ef6:	82 f2       	mov %d2,-1
80008ef8:	1e fb       	jeq %d15,-1,80008f0e <getUltrasonic+0x22>
=======
80008cce:	6d ff a8 ff 	call 80008c1e <sendTrigger>
    long echoTicks = measureEchoTick();
80008cd2:	6d ff b4 ff 	call 80008c3a <measureEchoTick>
80008cd6:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008cd8:	82 f2       	mov %d2,-1
80008cda:	1e fb       	jeq %d15,-1,80008cf0 <getUltrasonic+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008fd2:	00 90       	ret 

80008fd4 <getUltrasonic>:
{
    IfxPort_setPinModeOutput(ultrasonic->TRIG_PORT,ultrasonic->TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ultrasonic->ECHO_PORT,ultrasonic->ECHO_PIN, IfxPort_InputMode_pullDown);
}

int getUltrasonic(struct Ultrasonic* ultrasonic){
80008fd4:	40 4f       	mov.aa %a15,%a4
    sendTrigger(ultrasonic);
80008fd6:	6d ff 65 ff 	call 80008ea0 <sendTrigger>
    long echoTicks = measureEchoTick(ultrasonic);
80008fda:	40 f4       	mov.aa %a4,%a15
80008fdc:	6d ff 95 ff 	call 80008f06 <measureEchoTick>
80008fe0:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008fe2:	82 f2       	mov %d2,-1
80008fe4:	1e fb       	jeq %d15,-1,80008ffa <getUltrasonic+0x26>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
<<<<<<< HEAD
<<<<<<< HEAD
80008efa:	3b 80 0c 20 	mov %d2,200
80008efe:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008f02:	3b 80 3e f0 	mov %d15,1000
80008f06:	53 12 21 20 	mul %d2,%d2,17
80008f0a:	4b f2 01 22 	div %e2,%d2,%d15
=======
80008cdc:	3b 80 0c 20 	mov %d2,200
80008ce0:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008ce4:	3b 80 3e f0 	mov %d15,1000
80008ce8:	53 12 21 20 	mul %d2,%d2,17
80008cec:	4b f2 01 22 	div %e2,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    sendTrigger();
    long echoTicks = measureEchoTick();
=======
80008fe6:	3b 80 0c 20 	mov %d2,200
80008fea:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008fee:	3b 80 3e f0 	mov %d15,1000
80008ff2:	53 12 21 20 	mul %d2,%d2,17
80008ff6:	4b f2 01 22 	div %e2,%d2,%d15
    sendTrigger(ultrasonic);
    long echoTicks = measureEchoTick(ultrasonic);
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if(echoTicks==-1)return -1;
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}
<<<<<<< HEAD
<<<<<<< HEAD
80008f0e:	00 90       	ret 

80008f10 <calculateDistanceCm>:
=======
80008cf0:	00 90       	ret 

80008cf2 <calculateDistanceCm>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80008ffa:	00 90       	ret 

80008ffc <calculateDistanceCm>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
<<<<<<< HEAD
<<<<<<< HEAD
80008f10:	3b 80 0c 20 	mov %d2,200
80008f14:	4b 24 01 42 	div %e4,%d4,%d2
=======
80008ffc:	3b 80 0c 20 	mov %d2,200
80009000:	4b 24 01 42 	div %e4,%d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    long distanceCm = timeUs * 34 / 1000 / 2;
80009004:	3b 80 3e 20 	mov %d2,1000
80009008:	53 14 21 40 	mul %d4,%d4,17
8000900c:	4b 24 01 22 	div %e2,%d4,%d2
    return (int) distanceCm;
}
80009010:	00 90       	ret 

<<<<<<< HEAD
80008f26 <osEE_tc_core0_start>:
=======
80008cf2:	3b 80 0c 20 	mov %d2,200
80008cf6:	4b 24 01 42 	div %e4,%d4,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008cfa:	3b 80 3e 20 	mov %d2,1000
80008cfe:	53 14 21 40 	mul %d4,%d4,17
80008d02:	4b 24 01 22 	div %e2,%d4,%d2
    return (int) distanceCm;
}
80008d06:	00 90       	ret 

80008d08 <osEE_tc_core0_start>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009012 <osEE_tc_core0_start>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f26:	91 30 00 2f 	movh.a %a2,61443
=======
80008d08:	91 30 00 2f 	movh.a %a2,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009012:	91 30 00 2f 	movh.a %a2,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f2a:	91 30 00 ff 	movh.a %a15,61443
=======
80008d0c:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009016:	91 30 00 ff 	movh.a %a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f2e:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
=======
80008d10:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000901a:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f32:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
=======
80008d14:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000901e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f36:	54 25       	ld.w %d5,[%a2]
=======
80008d18:	54 25       	ld.w %d5,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009022:	54 25       	ld.w %d5,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f38:	48 08       	ld.w %d8,[%a15]0
=======
80008d1a:	48 08       	ld.w %d8,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009024:	48 08       	ld.w %d8,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f3a:	37 05 6e 51 	extr.u %d5,%d5,2,14
=======
80008d1c:	37 05 6e 51 	extr.u %d5,%d5,2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009026:	37 05 6e 51 	extr.u %d5,%d5,2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f3e:	37 08 6e 81 	extr.u %d8,%d8,2,14
=======
80008d20:	37 08 6e 81 	extr.u %d8,%d8,2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000902a:	37 08 6e 81 	extr.u %d8,%d8,2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
80008f42:	91 20 00 f7 	movh.a %a15,28674
=======
80008d24:	91 20 00 f7 	movh.a %a15,28674
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000902e:	91 20 00 f7 	movh.a %a15,28674
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
<<<<<<< HEAD
<<<<<<< HEAD
80008f46:	8f f5 83 51 	xor %d5,%d5,63
=======
80008d28:	8f f5 83 51 	xor %d5,%d5,63
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009032:	8f f5 83 51 	xor %d5,%d5,63
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
<<<<<<< HEAD
<<<<<<< HEAD
80008f4a:	8f f8 83 81 	xor %d8,%d8,63
80008f4e:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
80008f52:	40 fa       	mov.aa %sp,%a15
=======
80008d2c:	8f f8 83 81 	xor %d8,%d8,63
80008d30:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
80008d34:	40 fa       	mov.aa %sp,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009036:	8f f8 83 81 	xor %d8,%d8,63
8000903a:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
8000903e:	40 fa       	mov.aa %sp,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
80008f54:	0d 00 80 04 	dsync 
=======
80008d36:	0d 00 80 04 	dsync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009040:	0d 00 80 04 	dsync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
<<<<<<< HEAD
<<<<<<< HEAD
80008f58:	3b 00 b8 f0 	mov %d15,2944
80008f5c:	cd 4f e0 0f 	mtcr $psw,%d15
80008f60:	0d 00 c0 04 	isync 
=======
80009044:	3b 00 b8 f0 	mov %d15,2944
80009048:	cd 4f e0 0f 	mtcr $psw,%d15
8000904c:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009050:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80009054:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
<<<<<<< HEAD
80008f6c:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008f70:	0d 00 c0 04 	isync 
=======
80008d3a:	3b 00 b8 f0 	mov %d15,2944
80008d3e:	cd 4f e0 0f 	mtcr $psw,%d15
80008d42:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008d46:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008d4a:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008d4e:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008d52:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009058:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000905c:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
80008f74:	4d c0 e1 ff 	mfcr %d15,$core_id
=======
80008d56:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009060:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
<<<<<<< HEAD
<<<<<<< HEAD
80008f78:	82 12       	mov %d2,1
=======
80008d5a:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009064:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
<<<<<<< HEAD
<<<<<<< HEAD
80008f7a:	37 0f 48 f0 	extr %d15,%d15,0,8
=======
80008d5c:	37 0f 48 f0 	extr %d15,%d15,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009066:	37 0f 48 f0 	extr %d15,%d15,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
<<<<<<< HEAD
<<<<<<< HEAD
80008f7e:	cd 42 20 09 	mtcr $pcon1,%d2
80008f82:	0d 00 c0 04 	isync 
=======
80008d60:	cd 42 20 09 	mtcr $pcon1,%d2
80008d64:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000906a:	cd 42 20 09 	mtcr $pcon1,%d2
8000906e:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f86:	53 cf 20 f0 	mul %d15,%d15,12
80008f8a:	10 22       	addsc.a %a2,%a2,%d15,0
80008f8c:	54 22       	ld.w %d2,[%a2]
=======
80008d68:	53 cf 20 f0 	mul %d15,%d15,12
80008d6c:	10 22       	addsc.a %a2,%a2,%d15,0
80008d6e:	54 22       	ld.w %d2,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009072:	53 cf 20 f0 	mul %d15,%d15,12
80009076:	10 22       	addsc.a %a2,%a2,%d15,0
80009078:	54 22       	ld.w %d2,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
<<<<<<< HEAD
<<<<<<< HEAD
80008f8e:	60 f2       	mov.a %a2,%d15
=======
80008d70:	60 f2       	mov.a %a2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000907a:	60 f2       	mov.a %a2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008f90:	37 02 6e 21 	extr.u %d2,%d2,2,14
=======
80008d72:	37 02 6e 21 	extr.u %d2,%d2,2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000907c:	37 02 6e 21 	extr.u %d2,%d2,2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
<<<<<<< HEAD
<<<<<<< HEAD
80008f94:	d9 2f 00 46 	lea %a15,[%a2]24832
80008f98:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f9c:	4c f0       	ld.w %d15,[%a15]0
=======
80008d76:	d9 2f 00 46 	lea %a15,[%a2]24832
80008d7a:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008d7e:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009080:	d9 2f 00 46 	lea %a15,[%a2]24832
80009084:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009088:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
<<<<<<< HEAD
<<<<<<< HEAD
80008f9e:	8f f2 83 21 	xor %d2,%d2,63
=======
80008d80:	8f f2 83 21 	xor %d2,%d2,63
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000908a:	8f f2 83 21 	xor %d2,%d2,63
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80008fa2:	2e 16       	jz.t %d15,1,80008fae <osEE_tc_core0_start+0x88>
=======
8000908e:	2e 16       	jz.t %d15,1,8000909a <osEE_tc_core0_start+0x88>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009090:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009094:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
80008fac:	68 0f       	st.w [%a15]0,%d15
=======
80008d84:	2e 16       	jz.t %d15,1,80008d90 <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008d86:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008d8a:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008d8e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009098:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
80008fae:	8f 1f c0 f1 	andn %d15,%d15,1
=======
8000909a:	8f 1f c0 f1 	andn %d15,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
8000909e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800090a2:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
<<<<<<< HEAD
80008fb8:	4c f0       	ld.w %d15,[%a15]0
80008fba:	6f 0f ff ff 	jnz.t %d15,0,80008fb8 <osEE_tc_core0_start+0x92>
=======
80008d90:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008d94:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008d98:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008d9a:	4c f0       	ld.w %d15,[%a15]0
80008d9c:	6f 0f ff ff 	jnz.t %d15,0,80008d9a <osEE_tc_core0_start+0x92>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090a4:	4c f0       	ld.w %d15,[%a15]0
800090a6:	6f 0f ff ff 	jnz.t %d15,0,800090a4 <osEE_tc_core0_start+0x92>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
<<<<<<< HEAD
<<<<<<< HEAD
80008fbe:	82 0f       	mov %d15,0
80008fc0:	cd cf 20 09 	mtcr $pcon0,%d15
80008fc4:	0d 00 c0 04 	isync 
=======
80008da0:	82 0f       	mov %d15,0
80008da2:	cd cf 20 09 	mtcr $pcon0,%d15
80008da6:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090aa:	82 0f       	mov %d15,0
800090ac:	cd cf 20 09 	mtcr $pcon0,%d15
800090b0:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
80008fc8:	4c f0       	ld.w %d15,[%a15]0
=======
800090b4:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800090b6:	2e 16       	jz.t %d15,1,800090c2 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800090b8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800090bc:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
80008fd4:	68 0f       	st.w [%a15]0,%d15
=======
80008daa:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008dac:	2e 16       	jz.t %d15,1,80008db8 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008dae:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008db2:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008db6:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090c0:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80008fd6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
800090c2:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
800090c6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800090ca:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
<<<<<<< HEAD
80008fe0:	4c f0       	ld.w %d15,[%a15]0
80008fe2:	6f 0f ff 7f 	jz.t %d15,0,80008fe0 <osEE_tc_core0_start+0xba>
80008fe6:	4d c0 e1 ff 	mfcr %d15,$core_id
=======
80008db8:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008dbc:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008dc0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008dc2:	4c f0       	ld.w %d15,[%a15]0
80008dc4:	6f 0f ff 7f 	jz.t %d15,0,80008dc2 <osEE_tc_core0_start+0xba>
80008dc8:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090cc:	4c f0       	ld.w %d15,[%a15]0
800090ce:	6f 0f ff 7f 	jz.t %d15,0,800090cc <osEE_tc_core0_start+0xba>
800090d2:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
<<<<<<< HEAD
<<<<<<< HEAD
80008fea:	37 0f 48 f0 	extr %d15,%d15,0,8
=======
80008dcc:	37 0f 48 f0 	extr %d15,%d15,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090d6:	37 0f 48 f0 	extr %d15,%d15,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008fee:	91 30 00 ff 	movh.a %a15,61443
80008ff2:	53 cf 20 f0 	mul %d15,%d15,12
80008ff6:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008ffa:	10 ff       	addsc.a %a15,%a15,%d15,0
=======
80008dd0:	91 30 00 ff 	movh.a %a15,61443
80008dd4:	53 cf 20 f0 	mul %d15,%d15,12
80008dd8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008ddc:	10 ff       	addsc.a %a15,%a15,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090da:	91 30 00 ff 	movh.a %a15,61443
800090de:	53 cf 20 f0 	mul %d15,%d15,12
800090e2:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800090e6:	10 ff       	addsc.a %a15,%a15,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
<<<<<<< HEAD
<<<<<<< HEAD
80008ffc:	60 f2       	mov.a %a2,%d15
=======
80008dde:	60 f2       	mov.a %a2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090e8:	60 f2       	mov.a %a2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80008ffe:	48 02       	ld.w %d2,[%a15]0
=======
80008de0:	48 02       	ld.w %d2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090ea:	48 02       	ld.w %d2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
<<<<<<< HEAD
<<<<<<< HEAD
80009000:	d9 2f 00 46 	lea %a15,[%a2]24832
80009004:	11 3f 00 ff 	addih.a %a15,%a15,61443
=======
80008de2:	d9 2f 00 46 	lea %a15,[%a2]24832
80008de6:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090ec:	d9 2f 00 46 	lea %a15,[%a2]24832
800090f0:	11 3f 00 ff 	addih.a %a15,%a15,61443
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
<<<<<<< HEAD
<<<<<<< HEAD
80009008:	37 02 6e 21 	extr.u %d2,%d2,2,14
=======
80008dea:	37 02 6e 21 	extr.u %d2,%d2,2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090f4:	37 02 6e 21 	extr.u %d2,%d2,2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
8000900c:	4c f0       	ld.w %d15,[%a15]0
=======
80008dee:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090f8:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
<<<<<<< HEAD
<<<<<<< HEAD
8000900e:	8f f2 83 21 	xor %d2,%d2,63
=======
80008df0:	8f f2 83 21 	xor %d2,%d2,63
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800090fa:	8f f2 83 21 	xor %d2,%d2,63
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009012:	2e 16       	jz.t %d15,1,8000901e <osEE_tc_core0_start+0xf8>
=======
800090fe:	2e 16       	jz.t %d15,1,8000910a <osEE_tc_core0_start+0xf8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009100:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009104:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
8000901c:	68 0f       	st.w [%a15]0,%d15
=======
80008df4:	2e 16       	jz.t %d15,1,80008e00 <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008df6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008dfa:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008dfe:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009108:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000901e:	8f 1f c0 f1 	andn %d15,%d15,1
=======
8000910a:	8f 1f c0 f1 	andn %d15,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
8000910e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009112:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
<<<<<<< HEAD
80009028:	4c f0       	ld.w %d15,[%a15]0
8000902a:	6f 0f ff ff 	jnz.t %d15,0,80009028 <osEE_tc_core0_start+0x102>
=======
80008e00:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e04:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e08:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008e0a:	4c f0       	ld.w %d15,[%a15]0
80008e0c:	6f 0f ff ff 	jnz.t %d15,0,80008e0a <osEE_tc_core0_start+0x102>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009114:	4c f0       	ld.w %d15,[%a15]0
80009116:	6f 0f ff ff 	jnz.t %d15,0,80009114 <osEE_tc_core0_start+0x102>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
<<<<<<< HEAD
<<<<<<< HEAD
8000902e:	82 0f       	mov %d15,0
80009030:	cd 0f 04 09 	mtcr $dcon0,%d15
80009034:	0d 00 c0 04 	isync 
=======
80008e10:	82 0f       	mov %d15,0
80008e12:	cd 0f 04 09 	mtcr $dcon0,%d15
80008e16:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000911a:	82 0f       	mov %d15,0
8000911c:	cd 0f 04 09 	mtcr $dcon0,%d15
80009120:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
80009038:	4c f0       	ld.w %d15,[%a15]0
=======
80009124:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009126:	2e 16       	jz.t %d15,1,80009132 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009128:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000912c:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
80009044:	68 0f       	st.w [%a15]0,%d15
=======
80008e1a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e1c:	2e 16       	jz.t %d15,1,80008e28 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e1e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008e22:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008e26:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009130:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80009046:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
80009132:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
80009136:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000913a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
<<<<<<< HEAD
80009050:	4c f0       	ld.w %d15,[%a15]0
80009052:	6f 0f ff 7f 	jz.t %d15,0,80009050 <osEE_tc_core0_start+0x12a>
=======
80008e28:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e2c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e30:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008e32:	4c f0       	ld.w %d15,[%a15]0
80008e34:	6f 0f ff 7f 	jz.t %d15,0,80008e32 <osEE_tc_core0_start+0x12a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000913c:	4c f0       	ld.w %d15,[%a15]0
8000913e:	6f 0f ff 7f 	jz.t %d15,0,8000913c <osEE_tc_core0_start+0x12a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
80009056:	91 30 00 ff 	movh.a %a15,61443
8000905a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000905e:	4c f0       	ld.w %d15,[%a15]0
=======
80009142:	91 30 00 ff 	movh.a %a15,61443
80009146:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000914a:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000914c:	2e 16       	jz.t %d15,1,80009158 <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000914e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009152:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
8000906a:	68 0f       	st.w [%a15]0,%d15
=======
80008e38:	91 30 00 ff 	movh.a %a15,61443
80008e3c:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008e40:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008e42:	2e 16       	jz.t %d15,1,80008e4e <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008e44:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008e48:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008e4c:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009156:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000906c:	8f 1f c0 f1 	andn %d15,%d15,1
=======
80009158:	8f 1f c0 f1 	andn %d15,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
8000915c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009160:	91 30 00 ff 	movh.a %a15,61443
80009164:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009168:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
<<<<<<< HEAD
8000907e:	4c f0       	ld.w %d15,[%a15]0
80009080:	91 30 00 2f 	movh.a %a2,61443
80009084:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009088:	6f 0f fb ff 	jnz.t %d15,0,8000907e <osEE_tc_core0_start+0x158>
=======
80008e4e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008e52:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008e56:	91 30 00 ff 	movh.a %a15,61443
80008e5a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008e5e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008e60:	4c f0       	ld.w %d15,[%a15]0
80008e62:	91 30 00 2f 	movh.a %a2,61443
80008e66:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008e6a:	6f 0f fb ff 	jnz.t %d15,0,80008e60 <osEE_tc_core0_start+0x158>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000916a:	4c f0       	ld.w %d15,[%a15]0
8000916c:	91 30 00 2f 	movh.a %a2,61443
80009170:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009174:	6f 0f fb ff 	jnz.t %d15,0,8000916a <osEE_tc_core0_start+0x158>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
<<<<<<< HEAD
<<<<<<< HEAD
8000908c:	7b 00 00 f8 	movh %d15,32768
80009090:	1b 0f 20 f1 	addi %d15,%d15,4608
80009094:	cd 4f e2 0f 	mtcr $btv,%d15
80009098:	0d 00 c0 04 	isync 
=======
80009178:	7b 00 00 f8 	movh %d15,32768
8000917c:	1b 0f 20 f1 	addi %d15,%d15,4608
80009180:	cd 4f e2 0f 	mtcr $btv,%d15
80009184:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80009188:	7b 00 00 f8 	movh %d15,32768
8000918c:	1b 0f 00 f2 	addi %d15,%d15,8192
80009190:	cd 0f e2 0f 	mtcr $biv,%d15
80009194:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
<<<<<<< HEAD
800090ac:	7b 20 00 f7 	movh %d15,28674
800090b0:	1b 0f b0 f9 	addi %d15,%d15,-25856
800090b4:	cd 8f e2 0f 	mtcr $isp,%d15
800090b8:	0d 00 c0 04 	isync 
=======
80008e6e:	7b 00 00 f8 	movh %d15,32768
80008e72:	1b 0f 20 f1 	addi %d15,%d15,4608
80008e76:	cd 4f e2 0f 	mtcr $btv,%d15
80008e7a:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80008e7e:	7b 00 00 f8 	movh %d15,32768
80008e82:	1b 0f 00 f2 	addi %d15,%d15,8192
80008e86:	cd 0f e2 0f 	mtcr $biv,%d15
80008e8a:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
80008e8e:	7b 20 00 f7 	movh %d15,28674
80008e92:	1b 0f b0 f9 	addi %d15,%d15,-25856
80008e96:	cd 8f e2 0f 	mtcr $isp,%d15
80008e9a:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009198:	7b 20 00 f7 	movh %d15,28674
8000919c:	1b 0f b0 f9 	addi %d15,%d15,-25856
800091a0:	cd 8f e2 0f 	mtcr $isp,%d15
800091a4:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
800090bc:	4c 20       	ld.w %d15,[%a2]0
=======
800091a8:	4c 20       	ld.w %d15,[%a2]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800091aa:	2e 16       	jz.t %d15,1,800091b6 <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800091ac:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800091b0:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
800090c8:	6c 20       	st.w [%a2]0,%d15
=======
80008e9e:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008ea0:	2e 16       	jz.t %d15,1,80008eac <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008ea2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008ea6:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008eaa:	6c 20       	st.w [%a2]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800091b4:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
800090ca:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
800091b6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
800091ba:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800091be:	91 30 00 ff 	movh.a %a15,61443
800091c2:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800091c6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
<<<<<<< HEAD
800090dc:	4c f0       	ld.w %d15,[%a15]0
800090de:	6f 0f ff 7f 	jz.t %d15,0,800090dc <osEE_tc_core0_start+0x1b6>
=======
80008eac:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008eb0:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008eb4:	91 30 00 ff 	movh.a %a15,61443
80008eb8:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008ebc:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008ebe:	4c f0       	ld.w %d15,[%a15]0
80008ec0:	6f 0f ff 7f 	jz.t %d15,0,80008ebe <osEE_tc_core0_start+0x1b6>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800091c8:	4c f0       	ld.w %d15,[%a15]0
800091ca:	6f 0f ff 7f 	jz.t %d15,0,800091c8 <osEE_tc_core0_start+0x1b6>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
<<<<<<< HEAD
<<<<<<< HEAD
800090e2:	91 10 00 f7 	movh.a %a15,28673
800090e6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
800090ea:	40 f0       	mov.aa %a0,%a15
=======
800091ce:	91 10 00 f7 	movh.a %a15,28673
800091d2:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
800091d6:	40 f0       	mov.aa %a0,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_setareg(a1, _SMALL_DATA2_);
800091d8:	91 10 00 f8 	movh.a %a15,32769
800091dc:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800091e0:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
800091e2:	91 10 00 f8 	movh.a %a15,32769
800091e6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800091ea:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
<<<<<<< HEAD
80009100:	91 10 00 fb 	movh.a %a15,45057
80009104:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
80009108:	40 f9       	mov.aa %a9,%a15
=======
80008ec4:	91 10 00 f7 	movh.a %a15,28673
80008ec8:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
80008ecc:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
80008ece:	91 10 00 f8 	movh.a %a15,32769
80008ed2:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008ed6:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
80008ed8:	91 10 00 f8 	movh.a %a15,32769
80008edc:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
80008ee0:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
80008ee2:	91 10 00 fb 	movh.a %a15,45057
80008ee6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
80008eea:	40 f9       	mov.aa %a9,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800091ec:	91 10 00 fb 	movh.a %a15,45057
800091f0:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
800091f4:	40 f9       	mov.aa %a9,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
<<<<<<< HEAD
<<<<<<< HEAD
8000910a:	7b 20 00 f7 	movh %d15,28674
8000910e:	7b 20 00 47 	movh %d4,28674
80009112:	1b 0f c0 69 	addi %d6,%d15,-25600
80009116:	1b 04 c0 4b 	addi %d4,%d4,-17408
8000911a:	a2 64       	sub %d4,%d6
8000911c:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
8000911e:	82 02       	mov %d2,0
=======
80008eec:	7b 20 00 f7 	movh %d15,28674
80008ef0:	7b 20 00 47 	movh %d4,28674
80008ef4:	1b 0f c0 69 	addi %d6,%d15,-25600
80008ef8:	1b 04 c0 4b 	addi %d4,%d4,-17408
80008efc:	a2 64       	sub %d4,%d6
80008efe:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008f00:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800091f6:	7b 20 00 f7 	movh %d15,28674
800091fa:	7b 20 00 47 	movh %d4,28674
800091fe:	1b 0f c0 69 	addi %d6,%d15,-25600
80009202:	1b 04 c0 4b 	addi %d4,%d4,-17408
80009206:	a2 64       	sub %d4,%d6
80009208:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
8000920a:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
<<<<<<< HEAD
<<<<<<< HEAD
80009120:	df 04 16 00 	jeq %d4,0,8000914c <osEE_tc_core0_start+0x226>
=======
80008f02:	df 04 16 00 	jeq %d4,0,80008f2e <osEE_tc_core0_start+0x226>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000920c:	df 04 16 00 	jeq %d4,0,80009238 <osEE_tc_core0_start+0x226>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
<<<<<<< HEAD
<<<<<<< HEAD
80009124:	9a f4       	add %d15,%d4,-1
80009126:	06 6f       	sh %d15,6
80009128:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000912a:	60 3f       	mov.a %a15,%d3
8000912c:	82 00       	mov %d0,0
8000912e:	68 00       	st.w [%a15]0,%d0
=======
80008f06:	9a f4       	add %d15,%d4,-1
80008f08:	06 6f       	sh %d15,6
80008f0a:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008f0c:	60 3f       	mov.a %a15,%d3
80008f0e:	82 00       	mov %d0,0
80008f10:	68 00       	st.w [%a15]0,%d0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009210:	9a f4       	add %d15,%d4,-1
80009212:	06 6f       	sh %d15,6
80009214:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80009216:	60 3f       	mov.a %a15,%d3
80009218:	82 00       	mov %d0,0
8000921a:	68 00       	st.w [%a15]0,%d0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
<<<<<<< HEAD
<<<<<<< HEAD
80009130:	60 4f       	mov.a %a15,%d4
=======
80008f12:	60 4f       	mov.a %a15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000921c:	60 4f       	mov.a %a15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
<<<<<<< HEAD
<<<<<<< HEAD
80009132:	8f 43 1e 20 	sh %d2,%d3,-28
=======
80008f14:	8f 43 1e 20 	sh %d2,%d3,-28
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000921e:	8f 43 1e 20 	sh %d2,%d3,-28
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
<<<<<<< HEAD
<<<<<<< HEAD
80009136:	37 03 70 73 	extr.u %d7,%d3,6,16
8000913a:	1b 0f fc ff 	addi %d15,%d15,-64
=======
80008f18:	37 03 70 73 	extr.u %d7,%d3,6,16
80008f1c:	1b 0f fc ff 	addi %d15,%d15,-64
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009222:	37 03 70 73 	extr.u %d7,%d3,6,16
80009226:	1b 0f fc ff 	addi %d15,%d15,-64
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
<<<<<<< HEAD
<<<<<<< HEAD
8000913e:	b0 ff       	add.a %a15,-1
=======
80008f20:	b0 ff       	add.a %a15,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000922a:	b0 ff       	add.a %a15,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
<<<<<<< HEAD
<<<<<<< HEAD
80009140:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80009144:	42 6f       	add %d15,%d6
=======
80008f22:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80008f26:	42 6f       	add %d15,%d6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000922c:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80009230:	42 6f       	add %d15,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
<<<<<<< HEAD
<<<<<<< HEAD
80009146:	82 53       	mov %d3,5
80009148:	fd f0 11 01 	loop %a15,8000936a <osEE_tc_core0_start+0x444>
=======
80008f28:	82 53       	mov %d3,5
80008f2a:	fd f0 11 01 	loop %a15,8000914c <osEE_tc_core0_start+0x444>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009232:	82 53       	mov %d3,5
80009234:	fd f0 11 01 	loop %a15,80009456 <osEE_tc_core0_start+0x444>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
<<<<<<< HEAD
<<<<<<< HEAD
8000914c:	cd 82 e3 0f 	mtcr $fcx,%d2
80009150:	0d 00 c0 04 	isync 
=======
80008f2e:	cd 82 e3 0f 	mtcr $fcx,%d2
80008f32:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009238:	cd 82 e3 0f 	mtcr $fcx,%d2
8000923c:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
80009154:	91 30 00 ff 	movh.a %a15,61443
80009158:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000915c:	4c f0       	ld.w %d15,[%a15]0
=======
80009240:	91 30 00 ff 	movh.a %a15,61443
80009244:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009248:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000924a:	2e 16       	jz.t %d15,1,80009256 <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000924c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009250:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
80009168:	68 0f       	st.w [%a15]0,%d15
=======
80008f36:	91 30 00 ff 	movh.a %a15,61443
80008f3a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f3e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f40:	2e 16       	jz.t %d15,1,80008f4c <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f42:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f46:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f4a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009254:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000916a:	8f 1f c0 f1 	andn %d15,%d15,1
=======
80009256:	8f 1f c0 f1 	andn %d15,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
8000925a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000925e:	91 30 00 ff 	movh.a %a15,61443
80009262:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009266:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
<<<<<<< HEAD
8000917c:	40 f2       	mov.aa %a2,%a15
8000917e:	4c 20       	ld.w %d15,[%a2]0
80009180:	91 30 00 ff 	movh.a %a15,61443
80009184:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009188:	6f 0f fb ff 	jnz.t %d15,0,8000917e <osEE_tc_core0_start+0x258>
=======
80008f4c:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f50:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f54:	91 30 00 ff 	movh.a %a15,61443
80008f58:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f5c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008f5e:	40 f2       	mov.aa %a2,%a15
80008f60:	4c 20       	ld.w %d15,[%a2]0
80008f62:	91 30 00 ff 	movh.a %a15,61443
80008f66:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f6a:	6f 0f fb ff 	jnz.t %d15,0,80008f60 <osEE_tc_core0_start+0x258>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009268:	40 f2       	mov.aa %a2,%a15
8000926a:	4c 20       	ld.w %d15,[%a2]0
8000926c:	91 30 00 ff 	movh.a %a15,61443
80009270:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009274:	6f 0f fb ff 	jnz.t %d15,0,8000926a <osEE_tc_core0_start+0x258>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000918c:	4c f1       	ld.w %d15,[%a15]4
8000918e:	96 08       	or %d15,8
80009190:	68 1f       	st.w [%a15]4,%d15
=======
80008f6e:	4c f1       	ld.w %d15,[%a15]4
80008f70:	96 08       	or %d15,8
80008f72:	68 1f       	st.w [%a15]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009278:	4c f1       	ld.w %d15,[%a15]4
8000927a:	96 08       	or %d15,8
8000927c:	68 1f       	st.w [%a15]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
80009192:	4c f0       	ld.w %d15,[%a15]0
=======
8000927e:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009280:	2e 16       	jz.t %d15,1,8000928c <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009282:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009286:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
<<<<<<< HEAD
8000919e:	68 0f       	st.w [%a15]0,%d15
=======
80008f74:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008f76:	2e 16       	jz.t %d15,1,80008f82 <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008f78:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008f7c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008f80:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000928a:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
800091a0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
8000928c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  cpu_wdt_con0.bits.lck     = 1U;
80009290:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009294:	91 30 00 ff 	movh.a %a15,61443
80009298:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000929c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
<<<<<<< HEAD
800091b2:	4c f0       	ld.w %d15,[%a15]0
800091b4:	6f 0f ff 7f 	jz.t %d15,0,800091b2 <osEE_tc_core0_start+0x28c>
=======
80008f82:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008f86:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008f8a:	91 30 00 ff 	movh.a %a15,61443
80008f8e:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008f92:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008f94:	4c f0       	ld.w %d15,[%a15]0
80008f96:	6f 0f ff 7f 	jz.t %d15,0,80008f94 <osEE_tc_core0_start+0x28c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000929e:	4c f0       	ld.w %d15,[%a15]0
800092a0:	6f 0f ff 7f 	jz.t %d15,0,8000929e <osEE_tc_core0_start+0x28c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
800091b8:	91 30 00 ff 	movh.a %a15,61443
800091bc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091c0:	4c f0       	ld.w %d15,[%a15]0
=======
800092a4:	91 30 00 ff 	movh.a %a15,61443
800092a8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092ac:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800092ae:	2e 16       	jz.t %d15,1,800092ba <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800092b0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800092b4:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
<<<<<<< HEAD
800091cc:	68 0f       	st.w [%a15]0,%d15
=======
80008f9a:	91 30 00 ff 	movh.a %a15,61443
80008f9e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008fa2:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008fa4:	2e 16       	jz.t %d15,1,80008fb0 <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008fa6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008faa:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008fae:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800092b8:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
800091ce:	8f 1f c0 f1 	andn %d15,%d15,1
=======
800092ba:	8f 1f c0 f1 	andn %d15,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  safety_wdt_con0.bits.lck     = 1U;
800092be:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800092c2:	91 30 00 ff 	movh.a %a15,61443
800092c6:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092ca:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
<<<<<<< HEAD
800091e0:	40 f2       	mov.aa %a2,%a15
800091e2:	4c 20       	ld.w %d15,[%a2]0
800091e4:	91 30 00 ff 	movh.a %a15,61443
800091e8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091ec:	6f 0f fb ff 	jnz.t %d15,0,800091e2 <osEE_tc_core0_start+0x2bc>
=======
80008fb0:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008fb4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008fb8:	91 30 00 ff 	movh.a %a15,61443
80008fbc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008fc0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008fc2:	40 f2       	mov.aa %a2,%a15
80008fc4:	4c 20       	ld.w %d15,[%a2]0
80008fc6:	91 30 00 ff 	movh.a %a15,61443
80008fca:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008fce:	6f 0f fb ff 	jnz.t %d15,0,80008fc4 <osEE_tc_core0_start+0x2bc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800092cc:	40 f2       	mov.aa %a2,%a15
800092ce:	4c 20       	ld.w %d15,[%a2]0
800092d0:	91 30 00 ff 	movh.a %a15,61443
800092d4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092d8:	6f 0f fb ff 	jnz.t %d15,0,800092ce <osEE_tc_core0_start+0x2bc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
800091f0:	4c f1       	ld.w %d15,[%a15]4
800091f2:	96 08       	or %d15,8
800091f4:	68 1f       	st.w [%a15]4,%d15
=======
80008fd2:	4c f1       	ld.w %d15,[%a15]4
80008fd4:	96 08       	or %d15,8
80008fd6:	68 1f       	st.w [%a15]4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800092dc:	4c f1       	ld.w %d15,[%a15]4
800092de:	96 08       	or %d15,8
800092e0:	68 1f       	st.w [%a15]4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
800091f6:	4c f0       	ld.w %d15,[%a15]0
=======
800092e2:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800092e4:	2e 16       	jz.t %d15,1,800092f0 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800092e6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800092ea:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
<<<<<<< HEAD
80009202:	68 0f       	st.w [%a15]0,%d15
=======
80008fd8:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008fda:	2e 16       	jz.t %d15,1,80008fe6 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008fdc:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008fe0:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008fe4:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800092ee:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80009204:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
800092f0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  safety_wdt_con0.bits.lck     = 1U;
800092f4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
800092f8:	91 30 00 ff 	movh.a %a15,61443
800092fc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009300:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
<<<<<<< HEAD
80009216:	4c f0       	ld.w %d15,[%a15]0
80009218:	6f 0f ff 7f 	jz.t %d15,0,80009216 <osEE_tc_core0_start+0x2f0>
=======
80008fe6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008fea:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008fee:	91 30 00 ff 	movh.a %a15,61443
80008ff2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008ff6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008ff8:	4c f0       	ld.w %d15,[%a15]0
80008ffa:	6f 0f ff 7f 	jz.t %d15,0,80008ff8 <osEE_tc_core0_start+0x2f0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009302:	4c f0       	ld.w %d15,[%a15]0
80009304:	6f 0f ff 7f 	jz.t %d15,0,80009302 <osEE_tc_core0_start+0x2f0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
<<<<<<< HEAD
<<<<<<< HEAD
8000921c:	91 00 00 48 	movh.a %a4,32768
=======
80008ffe:	91 00 00 48 	movh.a %a4,32768
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009308:	91 00 00 48 	movh.a %a4,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
<<<<<<< HEAD
<<<<<<< HEAD
80009220:	d2 02       	mov %e2,0
=======
80009002:	d2 02       	mov %e2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000930c:	d2 02       	mov %e2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
<<<<<<< HEAD
<<<<<<< HEAD
80009222:	d9 44 3c 21 	lea %a4,[%a4]4284 <800010bc <__clear_table>>
=======
80009004:	d9 44 38 01 	lea %a4,[%a4]4152 <80001038 <__clear_table>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000930e:	d9 44 14 31 	lea %a4,[%a4]4308 <800010d4 <__clear_table>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
<<<<<<< HEAD
<<<<<<< HEAD
80009226:	82 07       	mov %d7,0
=======
80009008:	82 07       	mov %d7,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009312:	82 07       	mov %d7,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
<<<<<<< HEAD
<<<<<<< HEAD
80009228:	82 06       	mov %d6,0
=======
8000900a:	82 06       	mov %d6,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009314:	82 06       	mov %d6,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000922a:	82 05       	mov %d5,0
=======
8000900c:	82 05       	mov %d5,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009316:	82 05       	mov %d5,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
<<<<<<< HEAD
<<<<<<< HEAD
8000922c:	4c 41       	ld.w %d15,[%a4]4
=======
8000900e:	4c 41       	ld.w %d15,[%a4]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009318:	4c 41       	ld.w %d15,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
<<<<<<< HEAD
<<<<<<< HEAD
8000922e:	d4 43       	ld.a %a3,[%a4]
=======
80009010:	d4 43       	ld.a %a3,[%a4]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000931a:	d4 43       	ld.a %a3,[%a4]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
<<<<<<< HEAD
<<<<<<< HEAD
80009230:	9e f6       	jeq %d15,-1,8000925c <osEE_tc_core0_start+0x336>
=======
8000931c:	9e f6       	jeq %d15,-1,80009348 <osEE_tc_core0_start+0x336>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
8000931e:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009322:	76 49       	jz %d4,80009334 <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
<<<<<<< HEAD
80009238:	60 4f       	mov.a %a15,%d4
8000923a:	40 32       	mov.aa %a2,%a3
8000923c:	b0 ff       	add.a %a15,-1
8000923e:	89 22 48 01 	st.d [%a2+]8,%e2
80009242:	fc fe       	loop %a15,8000923e <osEE_tc_core0_start+0x318>
80009244:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
=======
80009012:	9e f6       	jeq %d15,-1,8000903e <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009014:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009018:	76 49       	jz %d4,8000902a <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
8000901a:	60 4f       	mov.a %a15,%d4
8000901c:	40 32       	mov.aa %a2,%a3
8000901e:	b0 ff       	add.a %a15,-1
80009020:	89 22 48 01 	st.d [%a2+]8,%e2
80009024:	fc fe       	loop %a15,80009020 <osEE_tc_core0_start+0x318>
80009026:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009324:	60 4f       	mov.a %a15,%d4
80009326:	40 32       	mov.aa %a2,%a3
80009328:	b0 ff       	add.a %a15,-1
8000932a:	89 22 48 01 	st.d [%a2+]8,%e2
8000932e:	fc fe       	loop %a15,8000932a <osEE_tc_core0_start+0x318>
80009330:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009248:	2e 22       	jz.t %d15,2,8000924c <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
8000924a:	64 37       	st.w [%a3+],%d7
=======
8000902a:	2e 22       	jz.t %d15,2,8000902e <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
8000902c:	64 37       	st.w [%a3+],%d7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009334:	2e 22       	jz.t %d15,2,80009338 <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
80009336:	64 37       	st.w [%a3+],%d7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000924c:	2e 12       	jz.t %d15,1,80009250 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
8000924e:	a4 36       	st.h [%a3+],%d6
=======
8000902e:	2e 12       	jz.t %d15,1,80009032 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
80009030:	a4 36       	st.h [%a3+],%d6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009338:	2e 12       	jz.t %d15,1,8000933c <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
8000933a:	a4 36       	st.h [%a3+],%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009250:	2e 02       	jz.t %d15,0,80009254 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80009252:	34 35       	st.b [%a3],%d5
=======
80009032:	2e 02       	jz.t %d15,0,80009036 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80009034:	34 35       	st.b [%a3],%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000933c:	2e 02       	jz.t %d15,0,80009340 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
8000933e:	34 35       	st.b [%a3],%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
<<<<<<< HEAD
<<<<<<< HEAD
80009254:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
=======
80009036:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009340:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
80009258:	bd 04 ea ff 	jnz.a %a4,8000922c <osEE_tc_core0_start+0x306>
=======
8000903a:	bd 04 ea ff 	jnz.a %a4,8000900e <osEE_tc_core0_start+0x306>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009344:	bd 04 ea ff 	jnz.a %a4,80009318 <osEE_tc_core0_start+0x306>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000925c:	91 00 00 68 	movh.a %a6,32768
80009260:	d9 66 24 41 	lea %a6,[%a6]4388 <80001124 <__copy_table>>
=======
8000903e:	91 00 00 68 	movh.a %a6,32768
80009042:	d9 66 20 21 	lea %a6,[%a6]4256 <800010a0 <__copy_table>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009348:	91 00 00 68 	movh.a %a6,32768
8000934c:	d9 66 3c 41 	lea %a6,[%a6]4412 <8000113c <__copy_table>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
<<<<<<< HEAD
<<<<<<< HEAD
80009264:	4c 62       	ld.w %d15,[%a6]8
=======
80009046:	4c 62       	ld.w %d15,[%a6]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009350:	4c 62       	ld.w %d15,[%a6]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
<<<<<<< HEAD
<<<<<<< HEAD
80009266:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80009268:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>
=======
80009048:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
8000904a:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009352:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80009354:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
<<<<<<< HEAD
<<<<<<< HEAD
8000926c:	df ff 21 00 	jeq %d15,-1,800092ae <osEE_tc_core0_start+0x388>
=======
80009358:	df ff 21 00 	jeq %d15,-1,8000939a <osEE_tc_core0_start+0x388>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
8000935c:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009360:	76 4f       	jz %d4,8000937e <osEE_tc_core0_start+0x36c>
80009362:	60 4f       	mov.a %a15,%d4
80009364:	40 43       	mov.aa %a3,%a4
80009366:	40 52       	mov.aa %a2,%a5
80009368:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
<<<<<<< HEAD
8000927e:	09 22 48 01 	ld.d %e2,[%a2+]8
80009282:	89 32 48 01 	st.d [%a3+]8,%e2
80009286:	fc fc       	loop %a15,8000927e <osEE_tc_core0_start+0x358>
80009288:	06 34       	sh %d4,3
8000928a:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
8000928e:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
=======
8000904e:	df ff 21 00 	jeq %d15,-1,80009090 <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009052:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009056:	76 4f       	jz %d4,80009074 <osEE_tc_core0_start+0x36c>
80009058:	60 4f       	mov.a %a15,%d4
8000905a:	40 43       	mov.aa %a3,%a4
8000905c:	40 52       	mov.aa %a2,%a5
8000905e:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
80009060:	09 22 48 01 	ld.d %e2,[%a2+]8
80009064:	89 32 48 01 	st.d [%a3+]8,%e2
80009068:	fc fc       	loop %a15,80009060 <osEE_tc_core0_start+0x358>
8000906a:	06 34       	sh %d4,3
8000906c:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
80009070:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000936a:	09 22 48 01 	ld.d %e2,[%a2+]8
8000936e:	89 32 48 01 	st.d [%a3+]8,%e2
80009372:	fc fc       	loop %a15,8000936a <osEE_tc_core0_start+0x358>
80009374:	06 34       	sh %d4,3
80009376:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
8000937a:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009292:	2e 23       	jz.t %d15,2,80009298 <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80009294:	44 52       	ld.w %d2,[%a5+]
80009296:	64 42       	st.w [%a4+],%d2
=======
80009074:	2e 23       	jz.t %d15,2,8000907a <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80009076:	44 52       	ld.w %d2,[%a5+]
80009078:	64 42       	st.w [%a4+],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000937e:	2e 23       	jz.t %d15,2,80009384 <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80009380:	44 52       	ld.w %d2,[%a5+]
80009382:	64 42       	st.w [%a4+],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009298:	2e 14       	jz.t %d15,1,800092a0 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
8000929a:	09 52 c2 00 	ld.hu %d2,[%a5+]2
8000929e:	a4 42       	st.h [%a4+],%d2
=======
8000907a:	2e 14       	jz.t %d15,1,80009082 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
8000907c:	09 52 c2 00 	ld.hu %d2,[%a5+]2
80009080:	a4 42       	st.h [%a4+],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009384:	2e 14       	jz.t %d15,1,8000938c <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
80009386:	09 52 c2 00 	ld.hu %d2,[%a5+]2
8000938a:	a4 42       	st.h [%a4+],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
800092a0:	2e 03       	jz.t %d15,0,800092a6 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
800092a2:	0c 50       	ld.bu %d15,[%a5]0
800092a4:	2c 40       	st.b [%a4]0,%d15
=======
80009082:	2e 03       	jz.t %d15,0,80009088 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
80009084:	0c 50       	ld.bu %d15,[%a5]0
80009086:	2c 40       	st.b [%a4]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000938c:	2e 03       	jz.t %d15,0,80009392 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
8000938e:	0c 50       	ld.bu %d15,[%a5]0
80009390:	2c 40       	st.b [%a4]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
<<<<<<< HEAD
<<<<<<< HEAD
800092a6:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
=======
80009088:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009392:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
800092aa:	bd 06 dd ff 	jnz.a %a6,80009264 <osEE_tc_core0_start+0x33e>
=======
8000908c:	bd 06 dd ff 	jnz.a %a6,80009046 <osEE_tc_core0_start+0x33e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009396:	bd 06 dd ff 	jnz.a %a6,80009350 <osEE_tc_core0_start+0x33e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
800092ae:	91 30 00 ff 	movh.a %a15,61443
800092b2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092b6:	4c f0       	ld.w %d15,[%a15]0
=======
8000939a:	91 30 00 ff 	movh.a %a15,61443
8000939e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800093a2:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800093a4:	2e 16       	jz.t %d15,1,800093b0 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800093a6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800093aa:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
<<<<<<< HEAD
800092c2:	68 0f       	st.w [%a15]0,%d15
=======
80009090:	91 30 00 ff 	movh.a %a15,61443
80009094:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009098:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
8000909a:	2e 16       	jz.t %d15,1,800090a6 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
8000909c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800090a0:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800090a4:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800093ae:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
800092c4:	8f 1f c0 f1 	andn %d15,%d15,1
=======
800093b0:	8f 1f c0 f1 	andn %d15,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  safety_wdt_con0.bits.lck     = 1U;
800093b4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800093b8:	91 30 00 ff 	movh.a %a15,61443
800093bc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800093c0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
<<<<<<< HEAD
800092d6:	4c f0       	ld.w %d15,[%a15]0
800092d8:	6f 0f ff ff 	jnz.t %d15,0,800092d6 <osEE_tc_core0_start+0x3b0>
=======
800090a6:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800090aa:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800090ae:	91 30 00 ff 	movh.a %a15,61443
800090b2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800090b6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800090b8:	4c f0       	ld.w %d15,[%a15]0
800090ba:	6f 0f ff ff 	jnz.t %d15,0,800090b8 <osEE_tc_core0_start+0x3b0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800093c2:	4c f0       	ld.w %d15,[%a15]0
800093c4:	6f 0f ff ff 	jnz.t %d15,0,800093c2 <osEE_tc_core0_start+0x3b0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
<<<<<<< HEAD
<<<<<<< HEAD
800092dc:	7b 20 22 f1 	movh %d15,4642
800092e0:	91 30 00 ff 	movh.a %a15,61443
800092e4:	1b 1f 10 f0 	addi %d15,%d15,257
800092e8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800092ec:	68 0f       	st.w [%a15]0,%d15
=======
800090be:	7b 20 22 f1 	movh %d15,4642
800090c2:	91 30 00 ff 	movh.a %a15,61443
800090c6:	1b 1f 10 f0 	addi %d15,%d15,257
800090ca:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800090ce:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800093c8:	7b 20 22 f1 	movh %d15,4642
800093cc:	91 30 00 ff 	movh.a %a15,61443
800093d0:	1b 1f 10 f0 	addi %d15,%d15,257
800093d4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800093d8:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
<<<<<<< HEAD
<<<<<<< HEAD
800092ee:	7b 00 00 f5 	movh %d15,20480
800092f2:	91 30 00 ff 	movh.a %a15,61443
800092f6:	1b 0f 10 f1 	addi %d15,%d15,4352
800092fa:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800092fe:	68 0f       	st.w [%a15]0,%d15
=======
800090d0:	7b 00 00 f5 	movh %d15,20480
800090d4:	91 30 00 ff 	movh.a %a15,61443
800090d8:	1b 0f 10 f1 	addi %d15,%d15,4352
800090dc:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800090e0:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800093da:	7b 00 00 f5 	movh %d15,20480
800093de:	91 30 00 ff 	movh.a %a15,61443
800093e2:	1b 0f 10 f1 	addi %d15,%d15,4352
800093e6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800093ea:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
<<<<<<< HEAD
<<<<<<< HEAD
80009300:	7b 70 00 f0 	movh %d15,7
80009304:	91 30 00 ff 	movh.a %a15,61443
80009308:	1b cf 01 f0 	addi %d15,%d15,28
8000930c:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009310:	68 0f       	st.w [%a15]0,%d15
=======
800090e2:	7b 70 00 f0 	movh %d15,7
800090e6:	91 30 00 ff 	movh.a %a15,61443
800090ea:	1b cf 01 f0 	addi %d15,%d15,28
800090ee:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
800090f2:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800093ec:	7b 70 00 f0 	movh %d15,7
800093f0:	91 30 00 ff 	movh.a %a15,61443
800093f4:	1b cf 01 f0 	addi %d15,%d15,28
800093f8:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
800093fc:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009312:	4c f0       	ld.w %d15,[%a15]0
80009314:	6f 1f ff 7f 	jz.t %d15,1,80009312 <osEE_tc_core0_start+0x3ec>
=======
800090f4:	4c f0       	ld.w %d15,[%a15]0
800090f6:	6f 1f ff 7f 	jz.t %d15,1,800090f4 <osEE_tc_core0_start+0x3ec>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800093fe:	4c f0       	ld.w %d15,[%a15]0
80009400:	6f 1f ff 7f 	jz.t %d15,1,800093fe <osEE_tc_core0_start+0x3ec>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009318:	91 30 00 ff 	movh.a %a15,61443
8000931c:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009320:	4c f0       	ld.w %d15,[%a15]0
80009322:	6f 8f ff 7f 	jz.t %d15,8,80009320 <osEE_tc_core0_start+0x3fa>
=======
800090fa:	91 30 00 ff 	movh.a %a15,61443
800090fe:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009102:	4c f0       	ld.w %d15,[%a15]0
80009104:	6f 8f ff 7f 	jz.t %d15,8,80009102 <osEE_tc_core0_start+0x3fa>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009404:	91 30 00 ff 	movh.a %a15,61443
80009408:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
8000940c:	4c f0       	ld.w %d15,[%a15]0
8000940e:	6f 8f ff 7f 	jz.t %d15,8,8000940c <osEE_tc_core0_start+0x3fa>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
<<<<<<< HEAD
<<<<<<< HEAD
80009326:	7b c0 be 40 	movh %d4,3052
=======
80009108:	7b c0 be 40 	movh %d4,3052
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009412:	7b c0 be 40 	movh %d4,3052
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
<<<<<<< HEAD
<<<<<<< HEAD
8000932a:	91 30 00 ff 	movh.a %a15,61443
8000932e:	1b 04 20 4c 	addi %d4,%d4,-15872
80009332:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009336:	6d 00 58 00 	call 800093e6 <osEE_tc_set_pll_fsource>
8000933a:	4c f0       	ld.w %d15,[%a15]0
=======
80009416:	91 30 00 ff 	movh.a %a15,61443
8000941a:	1b 04 20 4c 	addi %d4,%d4,-15872
8000941e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009422:	6d 00 58 00 	call 800094d2 <osEE_tc_set_pll_fsource>
80009426:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80009428:	2e 16       	jz.t %d15,1,80009434 <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
8000942a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
8000942e:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
<<<<<<< HEAD
80009346:	68 0f       	st.w [%a15]0,%d15
=======
8000910c:	91 30 00 ff 	movh.a %a15,61443
80009110:	1b 04 20 4c 	addi %d4,%d4,-15872
80009114:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009118:	6d 00 58 00 	call 800091c8 <osEE_tc_set_pll_fsource>
8000911c:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
8000911e:	2e 16       	jz.t %d15,1,8000912a <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80009120:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80009124:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80009128:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009432:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
80009348:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
=======
80009434:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  safety_wdt_con0.bits.lck     = 1U;
80009438:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
8000943c:	91 30 00 ff 	movh.a %a15,61443
80009440:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009444:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
<<<<<<< HEAD
8000935a:	4c f0       	ld.w %d15,[%a15]0
8000935c:	6f 0f ff 7f 	jz.t %d15,0,8000935a <osEE_tc_core0_start+0x434>
=======
8000912a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
8000912e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80009132:	91 30 00 ff 	movh.a %a15,61443
80009136:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000913a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
8000913c:	4c f0       	ld.w %d15,[%a15]0
8000913e:	6f 0f ff 7f 	jz.t %d15,0,8000913c <osEE_tc_core0_start+0x434>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009446:	4c f0       	ld.w %d15,[%a15]0
80009448:	6f 0f ff 7f 	jz.t %d15,0,80009446 <osEE_tc_core0_start+0x434>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
<<<<<<< HEAD
<<<<<<< HEAD
80009360:	6d ff 93 d9 	call 80004686 <main>
80009364:	02 24       	mov %d4,%d2
80009366:	6d 00 ff 27 	call 8000e364 <_exit>
=======
80009142:	6d ff 74 da 	call 8000462a <main>
80009146:	02 24       	mov %d4,%d2
80009148:	6d 00 3e 28 	call 8000e1c4 <_exit>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000944c:	6d ff 2e d9 	call 800046a8 <main>
80009450:	02 24       	mov %d4,%d2
80009452:	6d 00 ff 27 	call 8000e450 <_exit>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
<<<<<<< HEAD
<<<<<<< HEAD
8000936a:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
8000936c:	8f 4f 1e 40 	sh %d4,%d15,-28
=======
8000914c:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
8000914e:	8f 4f 1e 40 	sh %d4,%d15,-28
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009456:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009458:	8f 4f 1e 40 	sh %d4,%d15,-28
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
<<<<<<< HEAD
<<<<<<< HEAD
80009370:	74 22       	st.w [%a2],%d2
=======
80009152:	74 22       	st.w [%a2],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000945c:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
<<<<<<< HEAD
<<<<<<< HEAD
80009372:	c2 f3       	add %d3,-1
=======
80009154:	c2 f3       	add %d3,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000945e:	c2 f3       	add %d3,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
<<<<<<< HEAD
<<<<<<< HEAD
80009374:	37 0f 70 23 	extr.u %d2,%d15,6,16
80009378:	37 42 10 28 	insert %d2,%d2,%d4,16,16
=======
80009156:	37 0f 70 23 	extr.u %d2,%d15,6,16
8000915a:	37 42 10 28 	insert %d2,%d2,%d4,16,16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009460:	37 0f 70 23 	extr.u %d2,%d15,6,16
80009464:	37 42 10 28 	insert %d2,%d2,%d4,16,16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000937c:	76 36       	jz %d3,80009388 <osEE_tc_core0_start+0x462>
8000937e:	1b 0f fc ff 	addi %d15,%d15,-64
80009382:	fc f4       	loop %a15,8000936a <osEE_tc_core0_start+0x444>
80009384:	1d ff e4 fe 	j 8000914c <osEE_tc_core0_start+0x226>
=======
80009468:	76 36       	jz %d3,80009474 <osEE_tc_core0_start+0x462>
8000946a:	1b 0f fc ff 	addi %d15,%d15,-64
8000946e:	fc f4       	loop %a15,80009456 <osEE_tc_core0_start+0x444>
80009470:	1d ff e4 fe 	j 80009238 <osEE_tc_core0_start+0x226>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80009474:	cd c2 e3 0f 	mtcr $lcx,%d2
80009478:	0d 00 c0 04 	isync 
8000947c:	3c f7       	j 8000946a <osEE_tc_core0_start+0x458>

<<<<<<< HEAD
80009392 <osEE_tc_stm_us_ticks>:
=======
8000915e:	76 36       	jz %d3,8000916a <osEE_tc_core0_start+0x462>
80009160:	1b 0f fc ff 	addi %d15,%d15,-64
80009164:	fc f4       	loop %a15,8000914c <osEE_tc_core0_start+0x444>
80009166:	1d ff e4 fe 	j 80008f2e <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
8000916a:	cd c2 e3 0f 	mtcr $lcx,%d2
8000916e:	0d 00 c0 04 	isync 
80009172:	3c f7       	j 80009160 <osEE_tc_core0_start+0x458>

80009174 <osEE_tc_stm_us_ticks>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000947e <osEE_tc_stm_us_ticks>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
<<<<<<< HEAD
<<<<<<< HEAD
80009392:	40 ae       	mov.aa %a14,%sp
=======
8000947e:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009480:	91 00 00 f7 	movh.a %a15,28672
80009484:	19 ff e0 b0 	ld.w %d15,[%a15]3808 <70000ee0 <osEE_tc_stm_freq_khz>>
80009488:	3b 80 3e 20 	mov %d2,1000
8000948c:	3f 2f 0c 80 	jlt.u %d15,%d2,800094a4 <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80009490:	7b 20 06 21 	movh %d2,4194
80009494:	1b 32 dd 24 	addi %d2,%d2,19923
80009498:	73 2f 68 20 	mul.u %e2,%d15,%d2
8000949c:	8f a3 1f 20 	sh %d2,%d3,-6
800094a0:	e2 42       	mul %d2,%d4
800094a2:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
800094a4:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
<<<<<<< HEAD
800093ba:	73 f4 0a 20 	mul %d2,%d4,%d15
800093be:	7b 20 06 31 	movh %d3,4194
800093c2:	1b 33 dd 34 	addi %d3,%d3,19923
800093c6:	73 32 68 20 	mul.u %e2,%d2,%d3
800093ca:	8f a3 1f 20 	sh %d2,%d3,-6
=======
80009174:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009176:	91 00 00 f7 	movh.a %a15,28672
8000917a:	19 ff c8 10 	ld.w %d15,[%a15]3144 <70000c48 <osEE_tc_stm_freq_khz>>
8000917e:	3b 80 3e 20 	mov %d2,1000
80009182:	3f 2f 0c 80 	jlt.u %d15,%d2,8000919a <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80009186:	7b 20 06 21 	movh %d2,4194
8000918a:	1b 32 dd 24 	addi %d2,%d2,19923
8000918e:	73 2f 68 20 	mul.u %e2,%d15,%d2
80009192:	8f a3 1f 20 	sh %d2,%d3,-6
80009196:	e2 42       	mul %d2,%d4
80009198:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
8000919a:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
8000919c:	73 f4 0a 20 	mul %d2,%d4,%d15
800091a0:	7b 20 06 31 	movh %d3,4194
800091a4:	1b 33 dd 34 	addi %d3,%d3,19923
800091a8:	73 32 68 20 	mul.u %e2,%d2,%d3
800091ac:	8f a3 1f 20 	sh %d2,%d3,-6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800094a6:	73 f4 0a 20 	mul %d2,%d4,%d15
800094aa:	7b 20 06 31 	movh %d3,4194
800094ae:	1b 33 dd 34 	addi %d3,%d3,19923
800094b2:	73 32 68 20 	mul.u %e2,%d2,%d3
800094b6:	8f a3 1f 20 	sh %d2,%d3,-6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
<<<<<<< HEAD
<<<<<<< HEAD
800093ce:	3f 54 0b 80 	jlt.u %d4,%d5,800093e4 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
800093d2:	7b 20 06 21 	movh %d2,4194
800093d6:	1b 32 dd 24 	addi %d2,%d2,19923
800093da:	73 24 68 40 	mul.u %e4,%d4,%d2
800093de:	8f a5 1f 20 	sh %d2,%d5,-6
800093e2:	e2 f2       	mul %d2,%d15
=======
800091b0:	3f 54 0b 80 	jlt.u %d4,%d5,800091c6 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
800091b4:	7b 20 06 21 	movh %d2,4194
800091b8:	1b 32 dd 24 	addi %d2,%d2,19923
800091bc:	73 24 68 40 	mul.u %e4,%d4,%d2
800091c0:	8f a5 1f 20 	sh %d2,%d5,-6
800091c4:	e2 f2       	mul %d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800094ba:	3f 54 0b 80 	jlt.u %d4,%d5,800094d0 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
800094be:	7b 20 06 21 	movh %d2,4194
800094c2:	1b 32 dd 24 	addi %d2,%d2,19923
800094c6:	73 24 68 40 	mul.u %e4,%d4,%d2
800094ca:	8f a5 1f 20 	sh %d2,%d5,-6
800094ce:	e2 f2       	mul %d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
<<<<<<< HEAD
<<<<<<< HEAD
800093e4:	00 90       	ret 

800093e6 <osEE_tc_set_pll_fsource>:
=======
800091c6:	00 90       	ret 

800091c8 <osEE_tc_set_pll_fsource>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800094d0:	00 90       	ret 

800094d2 <osEE_tc_set_pll_fsource>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
<<<<<<< HEAD
<<<<<<< HEAD
800093e6:	40 ae       	mov.aa %a14,%sp
=======
800091c8:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800094d2:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
<<<<<<< HEAD
<<<<<<< HEAD
800093e8:	7b e0 e4 20 	movh %d2,3662
800093ec:	1b 12 c0 21 	addi %d2,%d2,7169
800093f0:	0b 24 30 f1 	lt.u %d15,%d4,%d2
800093f4:	82 22       	mov %d2,2
800093f6:	ab 12 80 ff 	sel %d15,%d15,%d2,1
800093fa:	60 f4       	mov.a %a4,%d15
800093fc:	53 ff 20 f0 	mul %d15,%d15,15
80009400:	60 f5       	mov.a %a5,%d15
=======
800091ca:	7b e0 e4 20 	movh %d2,3662
800091ce:	1b 12 c0 21 	addi %d2,%d2,7169
800091d2:	0b 24 30 f1 	lt.u %d15,%d4,%d2
800091d6:	82 22       	mov %d2,2
800091d8:	ab 12 80 ff 	sel %d15,%d15,%d2,1
800091dc:	60 f4       	mov.a %a4,%d15
800091de:	53 ff 20 f0 	mul %d15,%d15,15
800091e2:	60 f5       	mov.a %a5,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800094d4:	7b e0 e4 20 	movh %d2,3662
800094d8:	1b 12 c0 21 	addi %d2,%d2,7169
800094dc:	0b 24 30 f1 	lt.u %d15,%d4,%d2
800094e0:	82 22       	mov %d2,2
800094e2:	ab 12 80 ff 	sel %d15,%d15,%d2,1
800094e6:	60 f4       	mov.a %a4,%d15
800094e8:	53 ff 20 f0 	mul %d15,%d15,15
800094ec:	60 f5       	mov.a %a5,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
<<<<<<< HEAD
<<<<<<< HEAD
80009402:	3b 00 01 e0 	mov %d14,16
80009406:	82 03       	mov %d3,0
80009408:	7b c0 be 20 	movh %d2,3052
8000940c:	1b 02 20 2c 	addi %d2,%d2,-15872
80009410:	02 28       	mov %d8,%d2
80009412:	82 01       	mov %d1,0
80009414:	82 0b       	mov %d11,0
80009416:	82 0d       	mov %d13,0
80009418:	82 0c       	mov %d12,0
=======
800091e4:	3b 00 01 e0 	mov %d14,16
800091e8:	82 03       	mov %d3,0
800091ea:	7b c0 be 20 	movh %d2,3052
800091ee:	1b 02 20 2c 	addi %d2,%d2,-15872
800091f2:	02 28       	mov %d8,%d2
800091f4:	82 01       	mov %d1,0
800091f6:	82 0b       	mov %d11,0
800091f8:	82 0d       	mov %d13,0
800091fa:	82 0c       	mov %d12,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800094ee:	3b 00 01 e0 	mov %d14,16
800094f2:	82 03       	mov %d3,0
800094f4:	7b c0 be 20 	movh %d2,3052
800094f8:	1b 02 20 2c 	addi %d2,%d2,-15872
800094fc:	02 28       	mov %d8,%d2
800094fe:	82 01       	mov %d1,0
80009500:	82 0b       	mov %d11,0
80009502:	82 0d       	mov %d13,0
80009504:	82 0c       	mov %d12,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
<<<<<<< HEAD
<<<<<<< HEAD
8000941a:	7b 10 13 a0 	movh %d10,305
8000941e:	1b 0a d0 a2 	addi %d10,%d10,11520
=======
80009506:	7b 10 13 a0 	movh %d10,305
8000950a:	1b 0a d0 a2 	addi %d10,%d10,11520
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
8000950e:	91 40 0f 60 	movh.a %a6,244
80009512:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
<<<<<<< HEAD
8000942a:	a0 1d       	mov.a %a13,1
=======
800091fc:	7b 10 13 a0 	movh %d10,305
80009200:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009204:	91 40 0f 60 	movh.a %a6,244
80009208:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
8000920c:	a0 1d       	mov.a %a13,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009516:	a0 1d       	mov.a %a13,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
<<<<<<< HEAD
<<<<<<< HEAD
8000942c:	53 14 40 60 	mul.u %e6,%d4,1
80009430:	60 62       	mov.a %a2,%d6
80009432:	60 73       	mov.a %a3,%d7
=======
80009518:	53 14 40 60 	mul.u %e6,%d4,1
8000951c:	60 62       	mov.a %a2,%d6
8000951e:	60 73       	mov.a %a3,%d7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009520:	91 80 7d f1 	movh.a %a15,6104
80009524:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
<<<<<<< HEAD
8000943c:	a0 1c       	mov.a %a12,1
8000943e:	3c 5e       	j 800094fa <osEE_tc_set_pll_fsource+0x114>
=======
8000920e:	53 14 40 60 	mul.u %e6,%d4,1
80009212:	60 62       	mov.a %a2,%d6
80009214:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009216:	91 80 7d f1 	movh.a %a15,6104
8000921a:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
8000921e:	a0 1c       	mov.a %a12,1
80009220:	3c 5e       	j 800092dc <osEE_tc_set_pll_fsource+0x114>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009528:	a0 1c       	mov.a %a12,1
8000952a:	3c 5e       	j 800095e6 <osEE_tc_set_pll_fsource+0x114>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
<<<<<<< HEAD
<<<<<<< HEAD
80009440:	4b ea 11 62 	div.u %e6,%d10,%d14
80009444:	82 07       	mov %d7,0
=======
8000952c:	4b ea 11 62 	div.u %e6,%d10,%d14
80009530:	82 07       	mov %d7,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009532:	7b 60 f8 ff 	movh %d15,65414
80009536:	1b 0f e0 fe 	addi %d15,%d15,-4608
8000953a:	0b f6 40 60 	addx %d6,%d6,%d15
8000953e:	8b f7 bf 50 	addc %d5,%d7,-1
80009542:	ba 05       	eq %d15,%d5,0
80009544:	80 67       	mov.d %d7,%a6
80009546:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
8000954a:	8b 05 00 f5 	or.ne %d15,%d5,0
8000954e:	ee 4a       	jnz %d15,800095e2 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
<<<<<<< HEAD
80009464:	df 00 56 00 	jeq %d0,0,80009510 <osEE_tc_set_pll_fsource+0x12a>
80009468:	02 e9       	mov %d9,%d14
8000946a:	80 d0       	mov.d %d0,%a13
=======
80009222:	4b ea 11 62 	div.u %e6,%d10,%d14
80009226:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009228:	7b 60 f8 ff 	movh %d15,65414
8000922c:	1b 0f e0 fe 	addi %d15,%d15,-4608
80009230:	0b f6 40 60 	addx %d6,%d6,%d15
80009234:	8b f7 bf 50 	addc %d5,%d7,-1
80009238:	ba 05       	eq %d15,%d5,0
8000923a:	80 67       	mov.d %d7,%a6
8000923c:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009240:	8b 05 00 f5 	or.ne %d15,%d5,0
80009244:	ee 4a       	jnz %d15,800092d8 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80009246:	df 00 56 00 	jeq %d0,0,800092f2 <osEE_tc_set_pll_fsource+0x12a>
8000924a:	02 e9       	mov %d9,%d14
8000924c:	80 d0       	mov.d %d0,%a13
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009550:	df 00 56 00 	jeq %d0,0,800095fc <osEE_tc_set_pll_fsource+0x12a>
80009554:	02 e9       	mov %d9,%d14
80009556:	80 d0       	mov.d %d0,%a13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
<<<<<<< HEAD
<<<<<<< HEAD
8000946c:	60 e7       	mov.a %a7,%d14
=======
8000924e:	60 e7       	mov.a %a7,%d14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009558:	60 e7       	mov.a %a7,%d14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
<<<<<<< HEAD
<<<<<<< HEAD
8000946e:	80 2f       	mov.d %d15,%a2
80009470:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009474:	80 3f       	mov.d %d15,%a3
80009476:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15
=======
8000955a:	80 2f       	mov.d %d15,%a2
8000955c:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009560:	80 3f       	mov.d %d15,%a3
80009562:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009566:	7b 80 82 fe 	movh %d15,59432
8000956a:	1b 0f c0 f7 	addi %d15,%d15,31744
8000956e:	0b f6 40 60 	addx %d6,%d6,%d15
80009572:	8b f7 bf 50 	addc %d5,%d7,-1
80009576:	ba 05       	eq %d15,%d5,0
80009578:	80 f7       	mov.d %d7,%a15
8000957a:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
8000957e:	8b 05 00 f5 	or.ne %d15,%d5,0
80009582:	ee 25       	jnz %d15,800095cc <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
<<<<<<< HEAD
80009498:	0f 23 a0 f0 	or %d15,%d3,%d2
8000949c:	6e 2d       	jz %d15,800094f6 <osEE_tc_set_pll_fsource+0x110>
8000949e:	80 c6       	mov.d %d6,%a12
=======
80009250:	80 2f       	mov.d %d15,%a2
80009252:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009256:	80 3f       	mov.d %d15,%a3
80009258:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
8000925c:	7b 80 82 fe 	movh %d15,59432
80009260:	1b 0f c0 f7 	addi %d15,%d15,31744
80009264:	0b f6 40 60 	addx %d6,%d6,%d15
80009268:	8b f7 bf 50 	addc %d5,%d7,-1
8000926c:	ba 05       	eq %d15,%d5,0
8000926e:	80 f7       	mov.d %d7,%a15
80009270:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009274:	8b 05 00 f5 	or.ne %d15,%d5,0
80009278:	ee 25       	jnz %d15,800092c2 <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
8000927a:	0f 23 a0 f0 	or %d15,%d3,%d2
8000927e:	6e 2d       	jz %d15,800092d8 <osEE_tc_set_pll_fsource+0x110>
80009280:	80 c6       	mov.d %d6,%a12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009584:	0f 23 a0 f0 	or %d15,%d3,%d2
80009588:	6e 2d       	jz %d15,800095e2 <osEE_tc_set_pll_fsource+0x110>
8000958a:	80 c6       	mov.d %d6,%a12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
<<<<<<< HEAD
<<<<<<< HEAD
800094a0:	4b 96 11 22 	div.u %e2,%d6,%d9
800094a4:	02 2f       	mov %d15,%d2
800094a6:	e2 af       	mul %d15,%d10
800094a8:	a2 4f       	sub %d15,%d4
=======
80009282:	4b 96 11 22 	div.u %e2,%d6,%d9
80009286:	02 2f       	mov %d15,%d2
80009288:	e2 af       	mul %d15,%d10
8000928a:	a2 4f       	sub %d15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000958c:	4b 96 11 22 	div.u %e2,%d6,%d9
80009590:	02 2f       	mov %d15,%d2
80009592:	e2 af       	mul %d15,%d10
80009594:	a2 4f       	sub %d15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
<<<<<<< HEAD
<<<<<<< HEAD
800094aa:	53 1f 40 20 	mul.u %e2,%d15,1
=======
8000928c:	53 1f 40 20 	mul.u %e2,%d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009596:	53 1f 40 20 	mul.u %e2,%d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
<<<<<<< HEAD
<<<<<<< HEAD
800094ae:	df 0f ac 00 	jeq %d15,0,80009606 <osEE_tc_set_pll_fsource+0x220>
=======
80009290:	df 0f ac 00 	jeq %d15,0,800093e8 <osEE_tc_set_pll_fsource+0x220>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000959a:	df 0f ac 00 	jeq %d15,0,800096f2 <osEE_tc_set_pll_fsource+0x220>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
<<<<<<< HEAD
<<<<<<< HEAD
800094b2:	0b 13 00 51 	eq %d5,%d3,%d1
800094b6:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
=======
80009294:	0b 13 00 51 	eq %d5,%d3,%d1
80009298:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000959e:	0b 13 00 51 	eq %d5,%d3,%d1
800095a2:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
<<<<<<< HEAD
<<<<<<< HEAD
800094ba:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
800094be:	ab 01 80 15 	sel %d1,%d5,%d1,0
800094c2:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
800094c6:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
800094ca:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
=======
8000929c:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
800092a0:	ab 01 80 15 	sel %d1,%d5,%d1,0
800092a4:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
800092a8:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
800092ac:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095a6:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
800095aa:	ab 01 80 15 	sel %d1,%d5,%d1,0
800095ae:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
800095b2:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
800095b6:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
<<<<<<< HEAD
<<<<<<< HEAD
800094ce:	c2 16       	add %d6,1
=======
800092b0:	c2 16       	add %d6,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095ba:	c2 16       	add %d6,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
<<<<<<< HEAD
<<<<<<< HEAD
800094d0:	8b 16 68 52 	lt.u %d5,%d6,129
800094d4:	8b 0f 20 54 	and.ne %d5,%d15,0
800094d8:	df 05 e4 ff 	jne %d5,0,800094a0 <osEE_tc_set_pll_fsource+0xba>
800094dc:	02 d6       	mov %d6,%d13
=======
800092b2:	8b 16 68 52 	lt.u %d5,%d6,129
800092b6:	8b 0f 20 54 	and.ne %d5,%d15,0
800092ba:	df 05 e4 ff 	jne %d5,0,80009282 <osEE_tc_set_pll_fsource+0xba>
800092be:	02 d6       	mov %d6,%d13
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095bc:	8b 16 68 52 	lt.u %d5,%d6,129
800095c0:	8b 0f 20 54 	and.ne %d5,%d15,0
800095c4:	df 05 e4 ff 	jne %d5,0,8000958c <osEE_tc_set_pll_fsource+0xba>
800095c8:	02 d6       	mov %d6,%d13
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
<<<<<<< HEAD
<<<<<<< HEAD
800094de:	02 6d       	mov %d13,%d6
=======
800092c0:	02 6d       	mov %d13,%d6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095ca:	02 6d       	mov %d13,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
<<<<<<< HEAD
<<<<<<< HEAD
800094e0:	80 4f       	mov.d %d15,%a4
800094e2:	42 f0       	add %d0,%d15
800094e4:	80 56       	mov.d %d6,%a5
800094e6:	42 69       	add %d9,%d6
=======
800092c2:	80 4f       	mov.d %d15,%a4
800092c4:	42 f0       	add %d0,%d15
800092c6:	80 56       	mov.d %d6,%a5
800092c8:	42 69       	add %d9,%d6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095cc:	80 4f       	mov.d %d15,%a4
800095ce:	42 f0       	add %d0,%d15
800095d0:	80 56       	mov.d %d6,%a5
800095d2:	42 69       	add %d9,%d6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
<<<<<<< HEAD
<<<<<<< HEAD
800094e8:	0f 32 a0 50 	or %d5,%d2,%d3
=======
800092ca:	0f 32 a0 50 	or %d5,%d2,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095d4:	0f 32 a0 50 	or %d5,%d2,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
<<<<<<< HEAD
<<<<<<< HEAD
800094ec:	8b d0 61 f2 	lt.u %d15,%d0,29
800094f0:	8b 05 20 f4 	and.ne %d15,%d5,0
800094f4:	ee bd       	jnz %d15,8000946e <osEE_tc_set_pll_fsource+0x88>
800094f6:	01 45 20 50 	sub.a %a5,%a5,%a4
=======
800092ce:	8b d0 61 f2 	lt.u %d15,%d0,29
800092d2:	8b 05 20 f4 	and.ne %d15,%d5,0
800092d6:	ee bd       	jnz %d15,80009250 <osEE_tc_set_pll_fsource+0x88>
800092d8:	01 45 20 50 	sub.a %a5,%a5,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095d8:	8b d0 61 f2 	lt.u %d15,%d0,29
800095dc:	8b 05 20 f4 	and.ne %d15,%d5,0
800095e0:	ee bd       	jnz %d15,8000955a <osEE_tc_set_pll_fsource+0x88>
800095e2:	01 45 20 50 	sub.a %a5,%a5,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
<<<<<<< HEAD
<<<<<<< HEAD
800094fa:	c2 fe       	add %d14,-1
=======
800092dc:	c2 fe       	add %d14,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095e6:	c2 fe       	add %d14,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
<<<<<<< HEAD
<<<<<<< HEAD
800094fc:	0f 32 a0 f0 	or %d15,%d2,%d3
80009500:	8b 0f 20 02 	ne %d0,%d15,0
=======
800092de:	0f 32 a0 f0 	or %d15,%d2,%d3
800092e2:	8b 0f 20 02 	ne %d0,%d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095e8:	0f 32 a0 f0 	or %d15,%d2,%d3
800095ec:	8b 0f 20 02 	ne %d0,%d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
<<<<<<< HEAD
<<<<<<< HEAD
80009504:	8b 0e 20 52 	ne %d5,%d14,0
80009508:	8b 0f 20 54 	and.ne %d5,%d15,0
8000950c:	df 05 9a ff 	jne %d5,0,80009440 <osEE_tc_set_pll_fsource+0x5a>
=======
800092e6:	8b 0e 20 52 	ne %d5,%d14,0
800092ea:	8b 0f 20 54 	and.ne %d5,%d15,0
800092ee:	df 05 9a ff 	jne %d5,0,80009222 <osEE_tc_set_pll_fsource+0x5a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800095f0:	8b 0e 20 52 	ne %d5,%d14,0
800095f4:	8b 0f 20 54 	and.ne %d5,%d15,0
800095f8:	df 05 9a ff 	jne %d5,0,8000952c <osEE_tc_set_pll_fsource+0x5a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
<<<<<<< HEAD
<<<<<<< HEAD
80009510:	06 14       	sh %d4,1
80009512:	7b c0 1e f5 	movh %d15,20972
80009516:	1b ff 51 f8 	addi %d15,%d15,-31457
8000951a:	73 f4 68 40 	mul.u %e4,%d4,%d15
8000951e:	8f b5 1f 20 	sh %d2,%d5,-5
=======
800095fc:	06 14       	sh %d4,1
800095fe:	7b c0 1e f5 	movh %d15,20972
80009602:	1b ff 51 f8 	addi %d15,%d15,-31457
80009606:	73 f4 68 40 	mul.u %e4,%d4,%d15
8000960a:	8f b5 1f 20 	sh %d2,%d5,-5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
8000960e:	ba 01       	eq %d15,%d1,0
80009610:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
80009614:	8b 01 00 f5 	or.ne %d15,%d1,0
80009618:	ee 73       	jnz %d15,800096fe <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
8000961a:	c2 fc       	add %d12,-1
8000961c:	91 30 00 ff 	movh.a %a15,61443
80009620:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009624:	4c f0       	ld.w %d15,[%a15]0
80009626:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
8000962a:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
<<<<<<< HEAD
80009540:	91 30 00 ff 	movh.a %a15,61443
80009544:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009548:	4c f0       	ld.w %d15,[%a15]0
8000954a:	6f 5f ff 7f 	jz.t %d15,5,80009548 <osEE_tc_set_pll_fsource+0x162>
=======
800092f2:	06 14       	sh %d4,1
800092f4:	7b c0 1e f5 	movh %d15,20972
800092f8:	1b ff 51 f8 	addi %d15,%d15,-31457
800092fc:	73 f4 68 40 	mul.u %e4,%d4,%d15
80009300:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
80009304:	ba 01       	eq %d15,%d1,0
80009306:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
8000930a:	8b 01 00 f5 	or.ne %d15,%d1,0
8000930e:	ee 73       	jnz %d15,800093f4 <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
80009310:	c2 fc       	add %d12,-1
80009312:	91 30 00 ff 	movh.a %a15,61443
80009316:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000931a:	4c f0       	ld.w %d15,[%a15]0
8000931c:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
80009320:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
80009322:	91 30 00 ff 	movh.a %a15,61443
80009326:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000932a:	4c f0       	ld.w %d15,[%a15]0
8000932c:	6f 5f ff 7f 	jz.t %d15,5,8000932a <osEE_tc_set_pll_fsource+0x162>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000962c:	91 30 00 ff 	movh.a %a15,61443
80009630:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009634:	4c f0       	ld.w %d15,[%a15]0
80009636:	6f 5f ff 7f 	jz.t %d15,5,80009634 <osEE_tc_set_pll_fsource+0x162>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000954e:	91 30 00 ff 	movh.a %a15,61443
80009552:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009556:	4c f0       	ld.w %d15,[%a15]0
80009558:	96 01       	or %d15,1
8000955a:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
8000955c:	91 30 00 ff 	movh.a %a15,61443
80009560:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009564:	4c f0       	ld.w %d15,[%a15]0
80009566:	6f 0f ff 7f 	jz.t %d15,0,80009564 <osEE_tc_set_pll_fsource+0x17e>
=======
80009330:	91 30 00 ff 	movh.a %a15,61443
80009334:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009338:	4c f0       	ld.w %d15,[%a15]0
8000933a:	96 01       	or %d15,1
8000933c:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
8000933e:	91 30 00 ff 	movh.a %a15,61443
80009342:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009346:	4c f0       	ld.w %d15,[%a15]0
80009348:	6f 0f ff 7f 	jz.t %d15,0,80009346 <osEE_tc_set_pll_fsource+0x17e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000963a:	91 30 00 ff 	movh.a %a15,61443
8000963e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009642:	4c f0       	ld.w %d15,[%a15]0
80009644:	96 01       	or %d15,1
80009646:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
80009648:	91 30 00 ff 	movh.a %a15,61443
8000964c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009650:	4c f0       	ld.w %d15,[%a15]0
80009652:	6f 0f ff 7f 	jz.t %d15,0,80009650 <osEE_tc_set_pll_fsource+0x17e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
<<<<<<< HEAD
<<<<<<< HEAD
8000956a:	9a fb       	add %d15,%d11,-1
8000956c:	91 30 00 ff 	movh.a %a15,61443
80009570:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009574:	16 0f       	and %d15,15
80009576:	8f 8f 01 f0 	sh %d15,%d15,24
8000957a:	48 02       	ld.w %d2,[%a15]0
8000957c:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80009580:	a6 2f       	or %d15,%d2
80009582:	68 0f       	st.w [%a15]0,%d15
=======
80009656:	9a fb       	add %d15,%d11,-1
80009658:	91 30 00 ff 	movh.a %a15,61443
8000965c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009660:	16 0f       	and %d15,15
80009662:	8f 8f 01 f0 	sh %d15,%d15,24
80009666:	48 02       	ld.w %d2,[%a15]0
80009668:	b7 02 04 2c 	insert %d2,%d2,0,24,4
8000966c:	a6 2f       	or %d15,%d2
8000966e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009670:	9a fd       	add %d15,%d13,-1
80009672:	16 7f       	and %d15,127
80009674:	8f 9f 00 f0 	sh %d15,%d15,9
80009678:	48 02       	ld.w %d2,[%a15]0
8000967a:	b7 02 87 24 	insert %d2,%d2,0,9,7
8000967e:	a6 2f       	or %d15,%d2
80009680:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
<<<<<<< HEAD
80009596:	4c f0       	ld.w %d15,[%a15]0
80009598:	8f 2f c0 f1 	andn %d15,%d15,2
8000959c:	68 0f       	st.w [%a15]0,%d15
=======
8000934c:	9a fb       	add %d15,%d11,-1
8000934e:	91 30 00 ff 	movh.a %a15,61443
80009352:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009356:	16 0f       	and %d15,15
80009358:	8f 8f 01 f0 	sh %d15,%d15,24
8000935c:	48 02       	ld.w %d2,[%a15]0
8000935e:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80009362:	a6 2f       	or %d15,%d2
80009364:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009366:	9a fd       	add %d15,%d13,-1
80009368:	16 7f       	and %d15,127
8000936a:	8f 9f 00 f0 	sh %d15,%d15,9
8000936e:	48 02       	ld.w %d2,[%a15]0
80009370:	b7 02 87 24 	insert %d2,%d2,0,9,7
80009374:	a6 2f       	or %d15,%d2
80009376:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80009378:	4c f0       	ld.w %d15,[%a15]0
8000937a:	8f 2f c0 f1 	andn %d15,%d15,2
8000937e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009682:	4c f0       	ld.w %d15,[%a15]0
80009684:	8f 2f c0 f1 	andn %d15,%d15,2
80009688:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000959e:	4c f0       	ld.w %d15,[%a15]0
800095a0:	96 40       	or %d15,64
800095a2:	68 0f       	st.w [%a15]0,%d15
=======
8000968a:	4c f0       	ld.w %d15,[%a15]0
8000968c:	96 40       	or %d15,64
8000968e:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009690:	4c f0       	ld.w %d15,[%a15]0
80009692:	96 20       	or %d15,32
80009694:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
<<<<<<< HEAD
800095aa:	91 30 00 ff 	movh.a %a15,61443
800095ae:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095b2:	4c f0       	ld.w %d15,[%a15]0
800095b4:	6f 3f ff ff 	jnz.t %d15,3,800095b2 <osEE_tc_set_pll_fsource+0x1cc>
=======
80009380:	4c f0       	ld.w %d15,[%a15]0
80009382:	96 40       	or %d15,64
80009384:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80009386:	4c f0       	ld.w %d15,[%a15]0
80009388:	96 20       	or %d15,32
8000938a:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
8000938c:	91 30 00 ff 	movh.a %a15,61443
80009390:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009394:	4c f0       	ld.w %d15,[%a15]0
80009396:	6f 3f ff ff 	jnz.t %d15,3,80009394 <osEE_tc_set_pll_fsource+0x1cc>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009696:	91 30 00 ff 	movh.a %a15,61443
8000969a:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000969e:	4c f0       	ld.w %d15,[%a15]0
800096a0:	6f 3f ff ff 	jnz.t %d15,3,8000969e <osEE_tc_set_pll_fsource+0x1cc>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
800095b8:	91 30 00 ff 	movh.a %a15,61443
800095bc:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095c0:	4c f0       	ld.w %d15,[%a15]0
800095c2:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800095c6:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
800095c8:	91 30 00 ff 	movh.a %a15,61443
800095cc:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095d0:	4c f0       	ld.w %d15,[%a15]0
800095d2:	6f 2f ff 7f 	jz.t %d15,2,800095d0 <osEE_tc_set_pll_fsource+0x1ea>
=======
8000939a:	91 30 00 ff 	movh.a %a15,61443
8000939e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800093a2:	4c f0       	ld.w %d15,[%a15]0
800093a4:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800093a8:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
800093aa:	91 30 00 ff 	movh.a %a15,61443
800093ae:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800093b2:	4c f0       	ld.w %d15,[%a15]0
800093b4:	6f 2f ff 7f 	jz.t %d15,2,800093b2 <osEE_tc_set_pll_fsource+0x1ea>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800096a4:	91 30 00 ff 	movh.a %a15,61443
800096a8:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800096ac:	4c f0       	ld.w %d15,[%a15]0
800096ae:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800096b2:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
800096b4:	91 30 00 ff 	movh.a %a15,61443
800096b8:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800096bc:	4c f0       	ld.w %d15,[%a15]0
800096be:	6f 2f ff 7f 	jz.t %d15,2,800096bc <osEE_tc_set_pll_fsource+0x1ea>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
800095d6:	91 30 00 ff 	movh.a %a15,61443
800095da:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095de:	4c f0       	ld.w %d15,[%a15]0
800095e0:	8f 1f c0 f1 	andn %d15,%d15,1
800095e4:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
800095e6:	91 30 00 ff 	movh.a %a15,61443
800095ea:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095ee:	4c f0       	ld.w %d15,[%a15]0
800095f0:	6f 0f ff ff 	jnz.t %d15,0,800095ee <osEE_tc_set_pll_fsource+0x208>
=======
800093b8:	91 30 00 ff 	movh.a %a15,61443
800093bc:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800093c0:	4c f0       	ld.w %d15,[%a15]0
800093c2:	8f 1f c0 f1 	andn %d15,%d15,1
800093c6:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
800093c8:	91 30 00 ff 	movh.a %a15,61443
800093cc:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800093d0:	4c f0       	ld.w %d15,[%a15]0
800093d2:	6f 0f ff ff 	jnz.t %d15,0,800093d0 <osEE_tc_set_pll_fsource+0x208>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800096c2:	91 30 00 ff 	movh.a %a15,61443
800096c6:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800096ca:	4c f0       	ld.w %d15,[%a15]0
800096cc:	8f 1f c0 f1 	andn %d15,%d15,1
800096d0:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
800096d2:	91 30 00 ff 	movh.a %a15,61443
800096d6:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800096da:	4c f0       	ld.w %d15,[%a15]0
800096dc:	6f 0f ff ff 	jnz.t %d15,0,800096da <osEE_tc_set_pll_fsource+0x208>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
800095f4:	91 30 00 ff 	movh.a %a15,61443
800095f8:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095fc:	4c f0       	ld.w %d15,[%a15]0
800095fe:	8f 0f c4 f1 	andn %d15,%d15,64
80009602:	68 0f       	st.w [%a15]0,%d15
80009604:	00 90       	ret 
=======
800093d6:	91 30 00 ff 	movh.a %a15,61443
800093da:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800093de:	4c f0       	ld.w %d15,[%a15]0
800093e0:	8f 0f c4 f1 	andn %d15,%d15,64
800093e4:	68 0f       	st.w [%a15]0,%d15
800093e6:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800096e0:	91 30 00 ff 	movh.a %a15,61443
800096e4:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800096e8:	4c f0       	ld.w %d15,[%a15]0
800096ea:	8f 0f c4 f1 	andn %d15,%d15,64
800096ee:	68 0f       	st.w [%a15]0,%d15
800096f0:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
<<<<<<< HEAD
<<<<<<< HEAD
80009606:	02 28       	mov %d8,%d2
80009608:	02 31       	mov %d1,%d3
=======
800093e8:	02 28       	mov %d8,%d2
800093ea:	02 31       	mov %d1,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800096f2:	02 28       	mov %d8,%d2
800096f4:	02 31       	mov %d1,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
<<<<<<< HEAD
<<<<<<< HEAD
8000960a:	80 7b       	mov.d %d11,%a7
=======
800093ec:	80 7b       	mov.d %d11,%a7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800096f6:	80 7b       	mov.d %d11,%a7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
<<<<<<< HEAD
<<<<<<< HEAD
8000960c:	02 0c       	mov %d12,%d0
8000960e:	1d ff 68 ff 	j 800094de <osEE_tc_set_pll_fsource+0xf8>
80009612:	00 90       	ret 

80009614 <osEE_tc_get_fsource>:
=======
800093ee:	02 0c       	mov %d12,%d0
800093f0:	1d ff 68 ff 	j 800092c0 <osEE_tc_set_pll_fsource+0xf8>
800093f4:	00 90       	ret 

800093f6 <osEE_tc_get_fsource>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800096f8:	02 0c       	mov %d12,%d0
800096fa:	1d ff 68 ff 	j 800095ca <osEE_tc_set_pll_fsource+0xf8>
800096fe:	00 90       	ret 

80009700 <osEE_tc_get_fsource>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
<<<<<<< HEAD
<<<<<<< HEAD
80009614:	40 ae       	mov.aa %a14,%sp
=======
800093f6:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009700:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009616:	91 30 00 ff 	movh.a %a15,61443
8000961a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000961e:	4c f0       	ld.w %d15,[%a15]0
80009620:	37 0f 62 fe 	extr.u %d15,%d15,28,2
=======
800093f8:	91 30 00 ff 	movh.a %a15,61443
800093fc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80009400:	4c f0       	ld.w %d15,[%a15]0
80009402:	37 0f 62 fe 	extr.u %d15,%d15,28,2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009702:	91 30 00 ff 	movh.a %a15,61443
80009706:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000970a:	4c f0       	ld.w %d15,[%a15]0
8000970c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
<<<<<<< HEAD
<<<<<<< HEAD
80009624:	7b 60 5f 20 	movh %d2,1526
80009628:	1b 02 10 2e 	addi %d2,%d2,-7936
=======
80009406:	7b 60 5f 20 	movh %d2,1526
8000940a:	1b 02 10 2e 	addi %d2,%d2,-7936
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009710:	7b 60 5f 20 	movh %d2,1526
80009714:	1b 02 10 2e 	addi %d2,%d2,-7936
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000962c:	6e 45       	jz %d15,800096b6 <osEE_tc_get_fsource+0xa2>
=======
8000940e:	6e 45       	jz %d15,80009498 <osEE_tc_get_fsource+0xa2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009718:	6e 45       	jz %d15,800097a2 <osEE_tc_get_fsource+0xa2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
<<<<<<< HEAD
<<<<<<< HEAD
8000962e:	91 30 00 ff 	movh.a %a15,61443
80009632:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009636:	4c f0       	ld.w %d15,[%a15]0
80009638:	6f 0f 11 00 	jz.t %d15,0,8000965a <osEE_tc_get_fsource+0x46>
=======
8000971a:	91 30 00 ff 	movh.a %a15,61443
8000971e:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009722:	4c f0       	ld.w %d15,[%a15]0
80009724:	6f 0f 11 00 	jz.t %d15,0,80009746 <osEE_tc_get_fsource+0x46>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
80009728:	91 30 00 ff 	movh.a %a15,61443
8000972c:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009730:	48 02       	ld.w %d2,[%a15]0
80009732:	37 02 67 28 	extr.u %d2,%d2,16,7
80009736:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
80009738:	7b 10 13 f0 	movh %d15,305
8000973c:	1b 0f d0 f2 	addi %d15,%d15,11520
80009740:	4b 2f 11 22 	div.u %e2,%d15,%d2
80009744:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
80009746:	4c f0       	ld.w %d15,[%a15]0
80009748:	6f 3f 11 00 	jz.t %d15,3,8000976a <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
8000974c:	91 30 00 ff 	movh.a %a15,61443
80009750:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009754:	48 02       	ld.w %d2,[%a15]0
80009756:	8f f2 07 21 	and %d2,%d2,127
8000975a:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
8000975c:	7b 10 13 20 	movh %d2,305
80009760:	1b 02 d0 22 	addi %d2,%d2,11520
80009764:	4b f2 11 22 	div.u %e2,%d2,%d15
80009768:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
8000976a:	91 30 00 ff 	movh.a %a15,61443
8000976e:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009772:	4c f0       	ld.w %d15,[%a15]0
80009774:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
80009778:	91 30 00 ff 	movh.a %a15,61443
8000977c:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009780:	4c f0       	ld.w %d15,[%a15]0
80009782:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
<<<<<<< HEAD
8000969a:	48 02       	ld.w %d2,[%a15]0
8000969c:	37 02 e7 44 	extr.u %d4,%d2,9,7
=======
80009410:	91 30 00 ff 	movh.a %a15,61443
80009414:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009418:	4c f0       	ld.w %d15,[%a15]0
8000941a:	6f 0f 11 00 	jz.t %d15,0,8000943c <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
8000941e:	91 30 00 ff 	movh.a %a15,61443
80009422:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009426:	48 02       	ld.w %d2,[%a15]0
80009428:	37 02 67 28 	extr.u %d2,%d2,16,7
8000942c:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
8000942e:	7b 10 13 f0 	movh %d15,305
80009432:	1b 0f d0 f2 	addi %d15,%d15,11520
80009436:	4b 2f 11 22 	div.u %e2,%d15,%d2
8000943a:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
8000943c:	4c f0       	ld.w %d15,[%a15]0
8000943e:	6f 3f 11 00 	jz.t %d15,3,80009460 <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009442:	91 30 00 ff 	movh.a %a15,61443
80009446:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000944a:	48 02       	ld.w %d2,[%a15]0
8000944c:	8f f2 07 21 	and %d2,%d2,127
80009450:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80009452:	7b 10 13 20 	movh %d2,305
80009456:	1b 02 d0 22 	addi %d2,%d2,11520
8000945a:	4b f2 11 22 	div.u %e2,%d2,%d15
8000945e:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009460:	91 30 00 ff 	movh.a %a15,61443
80009464:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009468:	4c f0       	ld.w %d15,[%a15]0
8000946a:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
8000946e:	91 30 00 ff 	movh.a %a15,61443
80009472:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009476:	4c f0       	ld.w %d15,[%a15]0
80009478:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
8000947c:	48 02       	ld.w %d2,[%a15]0
8000947e:	37 02 e7 44 	extr.u %d4,%d2,9,7
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009786:	48 02       	ld.w %d2,[%a15]0
80009788:	37 02 e7 44 	extr.u %d4,%d2,9,7
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
<<<<<<< HEAD
<<<<<<< HEAD
800096a0:	9a 15       	add %d15,%d5,1
=======
80009482:	9a 15       	add %d15,%d5,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000978c:	9a 15       	add %d15,%d5,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
<<<<<<< HEAD
<<<<<<< HEAD
800096a2:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
800096a6:	7b 10 13 20 	movh %d2,305
800096aa:	1b 02 d0 22 	addi %d2,%d2,11520
800096ae:	4b f2 11 22 	div.u %e2,%d2,%d15
800096b2:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
=======
80009484:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80009488:	7b 10 13 20 	movh %d2,305
8000948c:	1b 02 d0 22 	addi %d2,%d2,11520
80009490:	4b f2 11 22 	div.u %e2,%d2,%d15
80009494:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000978e:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80009792:	7b 10 13 20 	movh %d2,305
80009796:	1b 02 d0 22 	addi %d2,%d2,11520
8000979a:	4b f2 11 22 	div.u %e2,%d2,%d15
8000979e:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
<<<<<<< HEAD
<<<<<<< HEAD
800096b6:	00 90       	ret 

800096b8 <osEE_tc_stm_set_clockpersec>:
=======
80009498:	00 90       	ret 

8000949a <osEE_tc_stm_set_clockpersec>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097a2:	00 90       	ret 

800097a4 <osEE_tc_stm_set_clockpersec>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
800096b8:	40 ae       	mov.aa %a14,%sp
=======
8000949a:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097a4:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
<<<<<<< HEAD
<<<<<<< HEAD
800096ba:	6d ff ad ff 	call 80009614 <osEE_tc_get_fsource>
=======
800097a6:	6d ff ad ff 	call 80009700 <osEE_tc_get_fsource>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
800097aa:	91 30 00 ff 	movh.a %a15,61443
800097ae:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800097b2:	4c f0       	ld.w %d15,[%a15]0
800097b4:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800097b8:	c2 12       	add %d2,1
800097ba:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
800097be:	7b 20 06 f1 	movh %d15,4194
800097c2:	1b 3f dd f4 	addi %d15,%d15,19923
800097c6:	73 f2 68 20 	mul.u %e2,%d2,%d15
800097ca:	8f a3 1f f0 	sh %d15,%d3,-6
800097ce:	91 00 00 f7 	movh.a %a15,28672
800097d2:	59 ff e0 b0 	st.w [%a15]3808 <70000ee0 <osEE_tc_stm_freq_khz>>,%d15
800097d6:	00 90       	ret 

<<<<<<< HEAD
800096ec <osEE_tc_stm_set_sr0>:
=======
8000949c:	6d ff ad ff 	call 800093f6 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
800094a0:	91 30 00 ff 	movh.a %a15,61443
800094a4:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800094a8:	4c f0       	ld.w %d15,[%a15]0
800094aa:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800094ae:	c2 12       	add %d2,1
800094b0:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
800094b4:	7b 20 06 f1 	movh %d15,4194
800094b8:	1b 3f dd f4 	addi %d15,%d15,19923
800094bc:	73 f2 68 20 	mul.u %e2,%d2,%d15
800094c0:	8f a3 1f f0 	sh %d15,%d3,-6
800094c4:	91 00 00 f7 	movh.a %a15,28672
800094c8:	59 ff c8 10 	st.w [%a15]3144 <70000c48 <osEE_tc_stm_freq_khz>>,%d15
800094cc:	00 90       	ret 

800094ce <osEE_tc_stm_set_sr0>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097d8 <osEE_tc_stm_set_sr0>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
<<<<<<< HEAD
<<<<<<< HEAD
800096ec:	40 ae       	mov.aa %a14,%sp
800096ee:	02 59       	mov %d9,%d5
800096f0:	4d c0 e1 8f 	mfcr %d8,$core_id
=======
800094ce:	40 ae       	mov.aa %a14,%sp
800094d0:	02 59       	mov %d9,%d5
800094d2:	4d c0 e1 8f 	mfcr %d8,$core_id
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097d8:	40 ae       	mov.aa %a14,%sp
800097da:	02 59       	mov %d9,%d5
800097dc:	4d c0 e1 8f 	mfcr %d8,$core_id
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
<<<<<<< HEAD
<<<<<<< HEAD
800096f4:	6d ff 4f fe 	call 80009392 <osEE_tc_stm_us_ticks>
=======
800094d6:	6d ff 4f fe 	call 80009174 <osEE_tc_stm_us_ticks>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097e0:	6d ff 4f fe 	call 8000947e <osEE_tc_stm_us_ticks>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
<<<<<<< HEAD
<<<<<<< HEAD
800096f8:	0f 02 b0 31 	clz %d3,%d2
=======
800094da:	0f 02 b0 31 	clz %d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097e4:	0f 02 b0 31 	clz %d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
<<<<<<< HEAD
<<<<<<< HEAD
800096fc:	8f 38 00 f1 	and %d15,%d8,3
80009700:	9b 0f 0f 40 	addih %d4,%d15,240
80009704:	8f 84 00 40 	sh %d4,%d4,8
80009708:	60 4f       	mov.a %a15,%d4
=======
800094de:	8f 38 00 f1 	and %d15,%d8,3
800094e2:	9b 0f 0f 40 	addih %d4,%d15,240
800094e6:	8f 84 00 40 	sh %d4,%d4,8
800094ea:	60 4f       	mov.a %a15,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097e8:	8f 38 00 f1 	and %d15,%d8,3
800097ec:	9b 0f 0f 40 	addih %d4,%d15,240
800097f0:	8f 84 00 40 	sh %d4,%d4,8
800097f4:	60 4f       	mov.a %a15,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
<<<<<<< HEAD
<<<<<<< HEAD
8000970a:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
8000970c:	42 42       	add %d2,%d4
=======
800094ec:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800094ee:	42 42       	add %d2,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800097f6:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800097f8:	42 42       	add %d2,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
<<<<<<< HEAD
<<<<<<< HEAD
8000970e:	68 c2       	st.w [%a15]48,%d2
=======
800097fa:	68 c2       	st.w [%a15]48,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800097fc:	df 09 23 00 	jeq %d9,0,80009842 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
<<<<<<< HEAD
80009714:	48 e2       	ld.w %d2,[%a15]56
80009716:	b7 02 05 24 	insert %d2,%d2,0,8,5
8000971a:	68 e2       	st.w [%a15]56,%d2
=======
800094f0:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800094f2:	df 09 23 00 	jeq %d9,0,80009538 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
800094f6:	48 e2       	ld.w %d2,[%a15]56
800094f8:	b7 02 05 24 	insert %d2,%d2,0,8,5
800094fc:	68 e2       	st.w [%a15]56,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009800:	48 e2       	ld.w %d2,[%a15]56
80009802:	b7 02 05 24 	insert %d2,%d2,0,8,5
80009806:	68 e2       	st.w [%a15]56,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
<<<<<<< HEAD
<<<<<<< HEAD
8000971c:	8b f3 01 31 	rsub %d3,%d3,31
=======
800094fe:	8b f3 01 31 	rsub %d3,%d3,31
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009808:	8b f3 01 31 	rsub %d3,%d3,31
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
<<<<<<< HEAD
<<<<<<< HEAD
80009720:	48 e2       	ld.w %d2,[%a15]56
80009722:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80009726:	68 e3       	st.w [%a15]56,%d3
=======
8000980c:	48 e2       	ld.w %d2,[%a15]56
8000980e:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80009812:	68 e3       	st.w [%a15]56,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
80009814:	48 f2       	ld.w %d2,[%a15]60
80009816:	8f 42 c0 21 	andn %d2,%d2,4
8000981a:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
<<<<<<< HEAD
80009730:	48 f2       	ld.w %d2,[%a15]60
80009732:	8f 12 40 21 	or %d2,%d2,1
80009736:	68 f2       	st.w [%a15]60,%d2
=======
80009502:	48 e2       	ld.w %d2,[%a15]56
80009504:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80009508:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
8000950a:	48 f2       	ld.w %d2,[%a15]60
8000950c:	8f 42 c0 21 	andn %d2,%d2,4
80009510:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
80009512:	48 f2       	ld.w %d2,[%a15]60
80009514:	8f 12 40 21 	or %d2,%d2,1
80009518:	68 f2       	st.w [%a15]60,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000981c:	48 f2       	ld.w %d2,[%a15]60
8000981e:	8f 12 40 21 	or %d2,%d2,1
80009822:	68 f2       	st.w [%a15]60,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
<<<<<<< HEAD
<<<<<<< HEAD
80009738:	06 3f       	sh %d15,3
=======
8000951a:	06 3f       	sh %d15,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009824:	06 3f       	sh %d15,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
<<<<<<< HEAD
<<<<<<< HEAD
8000973a:	60 f2       	mov.a %a2,%d15
8000973c:	d9 2f 50 28 	lea %a15,[%a2]-31600
80009740:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009744:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009748:	8f 38 00 81 	and %d8,%d8,3
8000974c:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009750:	a6 89       	or %d9,%d8
=======
8000951c:	60 f2       	mov.a %a2,%d15
8000951e:	d9 2f 50 28 	lea %a15,[%a2]-31600
80009522:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009526:	b7 89 99 93 	insert %d9,%d9,8,7,25
8000952a:	8f 38 00 81 	and %d8,%d8,3
8000952e:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009532:	a6 89       	or %d9,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009826:	60 f2       	mov.a %a2,%d15
80009828:	d9 2f 50 28 	lea %a15,[%a2]-31600
8000982c:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009830:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009834:	8f 38 00 81 	and %d8,%d8,3
80009838:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000983c:	a6 89       	or %d9,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
<<<<<<< HEAD
<<<<<<< HEAD
80009752:	68 09       	st.w [%a15]0,%d9
80009754:	00 90       	ret 
=======
8000983e:	68 09       	st.w [%a15]0,%d9
80009840:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
80009842:	48 f2       	ld.w %d2,[%a15]60
80009844:	8f 12 c0 21 	andn %d2,%d2,1
80009848:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
8000984a:	1b 2f 09 f7 	addi %d15,%d15,28818
8000984e:	9b 0f e0 f1 	addih %d15,%d15,7680
80009852:	06 3f       	sh %d15,3
80009854:	82 02       	mov %d2,0
80009856:	60 ff       	mov.a %a15,%d15
80009858:	68 02       	st.w [%a15]0,%d2
8000985a:	00 90       	ret 

<<<<<<< HEAD
80009770 <osEE_tc_stm_set_sr0_next_match>:
=======
80009534:	68 09       	st.w [%a15]0,%d9
80009536:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
80009538:	48 f2       	ld.w %d2,[%a15]60
8000953a:	8f 12 c0 21 	andn %d2,%d2,1
8000953e:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
80009540:	1b 2f 09 f7 	addi %d15,%d15,28818
80009544:	9b 0f e0 f1 	addih %d15,%d15,7680
80009548:	06 3f       	sh %d15,3
8000954a:	82 02       	mov %d2,0
8000954c:	60 ff       	mov.a %a15,%d15
8000954e:	68 02       	st.w [%a15]0,%d2
80009550:	00 90       	ret 

80009552 <osEE_tc_stm_set_sr0_next_match>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000985c <osEE_tc_stm_set_sr0_next_match>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009770:	40 ae       	mov.aa %a14,%sp
=======
80009552:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000985c:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
80009772:	4d c0 e1 ff 	mfcr %d15,$core_id
=======
80009554:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000985e:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
<<<<<<< HEAD
<<<<<<< HEAD
80009776:	6d ff 0e fe 	call 80009392 <osEE_tc_stm_us_ticks>
8000977a:	16 03       	and %d15,3
8000977c:	9b 0f 0f f0 	addih %d15,%d15,240
80009780:	8f 8f 00 f0 	sh %d15,%d15,8
80009784:	60 ff       	mov.a %a15,%d15
80009786:	4c fc       	ld.w %d15,[%a15]48
80009788:	42 f2       	add %d2,%d15
8000978a:	68 c2       	st.w [%a15]48,%d2
8000978c:	00 90       	ret 

8000978e <osEE_tc_stm_set_sr1>:
=======
80009558:	6d ff 0e fe 	call 80009174 <osEE_tc_stm_us_ticks>
8000955c:	16 03       	and %d15,3
8000955e:	9b 0f 0f f0 	addih %d15,%d15,240
80009562:	8f 8f 00 f0 	sh %d15,%d15,8
80009566:	60 ff       	mov.a %a15,%d15
80009568:	4c fc       	ld.w %d15,[%a15]48
8000956a:	42 f2       	add %d2,%d15
8000956c:	68 c2       	st.w [%a15]48,%d2
8000956e:	00 90       	ret 

80009570 <osEE_tc_stm_set_sr1>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009862:	6d ff 0e fe 	call 8000947e <osEE_tc_stm_us_ticks>
80009866:	16 03       	and %d15,3
80009868:	9b 0f 0f f0 	addih %d15,%d15,240
8000986c:	8f 8f 00 f0 	sh %d15,%d15,8
80009870:	60 ff       	mov.a %a15,%d15
80009872:	4c fc       	ld.w %d15,[%a15]48
80009874:	42 f2       	add %d2,%d15
80009876:	68 c2       	st.w [%a15]48,%d2
80009878:	00 90       	ret 

8000987a <osEE_tc_stm_set_sr1>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000978e:	40 ae       	mov.aa %a14,%sp
80009790:	02 59       	mov %d9,%d5
80009792:	4d c0 e1 8f 	mfcr %d8,$core_id
=======
80009570:	40 ae       	mov.aa %a14,%sp
80009572:	02 59       	mov %d9,%d5
80009574:	4d c0 e1 8f 	mfcr %d8,$core_id
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000987a:	40 ae       	mov.aa %a14,%sp
8000987c:	02 59       	mov %d9,%d5
8000987e:	4d c0 e1 8f 	mfcr %d8,$core_id
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
<<<<<<< HEAD
<<<<<<< HEAD
80009796:	6d ff fe fd 	call 80009392 <osEE_tc_stm_us_ticks>
=======
80009578:	6d ff fe fd 	call 80009174 <osEE_tc_stm_us_ticks>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009882:	6d ff fe fd 	call 8000947e <osEE_tc_stm_us_ticks>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000979a:	0f 02 b0 31 	clz %d3,%d2
=======
8000957c:	0f 02 b0 31 	clz %d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009886:	0f 02 b0 31 	clz %d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
<<<<<<< HEAD
<<<<<<< HEAD
8000979e:	8f 38 00 f1 	and %d15,%d8,3
800097a2:	9b 0f 0f 40 	addih %d4,%d15,240
800097a6:	8f 84 00 40 	sh %d4,%d4,8
800097aa:	60 4f       	mov.a %a15,%d4
800097ac:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800097ae:	42 42       	add %d2,%d4
=======
80009580:	8f 38 00 f1 	and %d15,%d8,3
80009584:	9b 0f 0f 40 	addih %d4,%d15,240
80009588:	8f 84 00 40 	sh %d4,%d4,8
8000958c:	60 4f       	mov.a %a15,%d4
8000958e:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80009590:	42 42       	add %d2,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000988a:	8f 38 00 f1 	and %d15,%d8,3
8000988e:	9b 0f 0f 40 	addih %d4,%d15,240
80009892:	8f 84 00 40 	sh %d4,%d4,8
80009896:	60 4f       	mov.a %a15,%d4
80009898:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
8000989a:	42 42       	add %d2,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
<<<<<<< HEAD
<<<<<<< HEAD
800097b0:	68 d2       	st.w [%a15]52,%d2
=======
8000989c:	68 d2       	st.w [%a15]52,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
8000989e:	df 09 28 00 	jeq %d9,0,800098ee <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
<<<<<<< HEAD
800097b6:	48 e2       	ld.w %d2,[%a15]56
800097b8:	b7 02 05 2c 	insert %d2,%d2,0,24,5
800097bc:	68 e2       	st.w [%a15]56,%d2
=======
80009592:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80009594:	df 09 28 00 	jeq %d9,0,800095e4 <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
80009598:	48 e2       	ld.w %d2,[%a15]56
8000959a:	b7 02 05 2c 	insert %d2,%d2,0,24,5
8000959e:	68 e2       	st.w [%a15]56,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800098a2:	48 e2       	ld.w %d2,[%a15]56
800098a4:	b7 02 05 2c 	insert %d2,%d2,0,24,5
800098a8:	68 e2       	st.w [%a15]56,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
<<<<<<< HEAD
<<<<<<< HEAD
800097be:	8b f3 01 31 	rsub %d3,%d3,31
=======
800095a0:	8b f3 01 31 	rsub %d3,%d3,31
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800098aa:	8b f3 01 31 	rsub %d3,%d3,31
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
<<<<<<< HEAD
<<<<<<< HEAD
800097c2:	8f f3 01 31 	and %d3,%d3,31
800097c6:	8f 03 01 30 	sh %d3,%d3,16
800097ca:	48 e2       	ld.w %d2,[%a15]56
800097cc:	b7 02 05 28 	insert %d2,%d2,0,16,5
800097d0:	a6 23       	or %d3,%d2
800097d2:	68 e3       	st.w [%a15]56,%d3
=======
800098ae:	8f f3 01 31 	and %d3,%d3,31
800098b2:	8f 03 01 30 	sh %d3,%d3,16
800098b6:	48 e2       	ld.w %d2,[%a15]56
800098b8:	b7 02 05 28 	insert %d2,%d2,0,16,5
800098bc:	a6 23       	or %d3,%d2
800098be:	68 e3       	st.w [%a15]56,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
800098c0:	48 f2       	ld.w %d2,[%a15]60
800098c2:	8f 02 44 21 	or %d2,%d2,64
800098c6:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
<<<<<<< HEAD
800097dc:	48 f2       	ld.w %d2,[%a15]60
800097de:	8f 02 41 21 	or %d2,%d2,16
800097e2:	68 f2       	st.w [%a15]60,%d2
=======
800095a4:	8f f3 01 31 	and %d3,%d3,31
800095a8:	8f 03 01 30 	sh %d3,%d3,16
800095ac:	48 e2       	ld.w %d2,[%a15]56
800095ae:	b7 02 05 28 	insert %d2,%d2,0,16,5
800095b2:	a6 23       	or %d3,%d2
800095b4:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
800095b6:	48 f2       	ld.w %d2,[%a15]60
800095b8:	8f 02 44 21 	or %d2,%d2,64
800095bc:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
800095be:	48 f2       	ld.w %d2,[%a15]60
800095c0:	8f 02 41 21 	or %d2,%d2,16
800095c4:	68 f2       	st.w [%a15]60,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800098c8:	48 f2       	ld.w %d2,[%a15]60
800098ca:	8f 02 41 21 	or %d2,%d2,16
800098ce:	68 f2       	st.w [%a15]60,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
<<<<<<< HEAD
<<<<<<< HEAD
800097e4:	06 3f       	sh %d15,3
800097e6:	60 f2       	mov.a %a2,%d15
800097e8:	d9 2f 54 28 	lea %a15,[%a2]-31596
800097ec:	11 4f 00 ff 	addih.a %a15,%a15,61444
800097f0:	b7 89 99 93 	insert %d9,%d9,8,7,25
800097f4:	8f 38 00 81 	and %d8,%d8,3
800097f8:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800097fc:	a6 89       	or %d9,%d8
=======
800095c6:	06 3f       	sh %d15,3
800095c8:	60 f2       	mov.a %a2,%d15
800095ca:	d9 2f 54 28 	lea %a15,[%a2]-31596
800095ce:	11 4f 00 ff 	addih.a %a15,%a15,61444
800095d2:	b7 89 99 93 	insert %d9,%d9,8,7,25
800095d6:	8f 38 00 81 	and %d8,%d8,3
800095da:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800095de:	a6 89       	or %d9,%d8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800098d0:	06 3f       	sh %d15,3
800098d2:	60 f2       	mov.a %a2,%d15
800098d4:	d9 2f 54 28 	lea %a15,[%a2]-31596
800098d8:	11 4f 00 ff 	addih.a %a15,%a15,61444
800098dc:	b7 89 99 93 	insert %d9,%d9,8,7,25
800098e0:	8f 38 00 81 	and %d8,%d8,3
800098e4:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800098e8:	a6 89       	or %d9,%d8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
<<<<<<< HEAD
<<<<<<< HEAD
800097fe:	68 09       	st.w [%a15]0,%d9
80009800:	00 90       	ret 
=======
800098ea:	68 09       	st.w [%a15]0,%d9
800098ec:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
800098ee:	48 f2       	ld.w %d2,[%a15]60
800098f0:	8f 02 c1 21 	andn %d2,%d2,16
800098f4:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
800098f6:	06 3f       	sh %d15,3
800098f8:	60 f2       	mov.a %a2,%d15
800098fa:	d9 2f 54 28 	lea %a15,[%a2]-31596
800098fe:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009902:	82 0f       	mov %d15,0
80009904:	68 0f       	st.w [%a15]0,%d15
80009906:	00 90       	ret 

<<<<<<< HEAD
8000981c <osEE_tc_stm_set_sr1_next_match>:
=======
800095e0:	68 09       	st.w [%a15]0,%d9
800095e2:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
800095e4:	48 f2       	ld.w %d2,[%a15]60
800095e6:	8f 02 c1 21 	andn %d2,%d2,16
800095ea:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
800095ec:	06 3f       	sh %d15,3
800095ee:	60 f2       	mov.a %a2,%d15
800095f0:	d9 2f 54 28 	lea %a15,[%a2]-31596
800095f4:	11 4f 00 ff 	addih.a %a15,%a15,61444
800095f8:	82 0f       	mov %d15,0
800095fa:	68 0f       	st.w [%a15]0,%d15
800095fc:	00 90       	ret 

800095fe <osEE_tc_stm_set_sr1_next_match>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009908 <osEE_tc_stm_set_sr1_next_match>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000981c:	40 ae       	mov.aa %a14,%sp
=======
800095fe:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009908:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
8000981e:	4d c0 e1 ff 	mfcr %d15,$core_id
=======
80009600:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000990a:	4d c0 e1 ff 	mfcr %d15,$core_id
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
<<<<<<< HEAD
<<<<<<< HEAD
80009822:	6d ff b8 fd 	call 80009392 <osEE_tc_stm_us_ticks>
80009826:	16 03       	and %d15,3
80009828:	9b 0f 0f f0 	addih %d15,%d15,240
8000982c:	8f 8f 00 f0 	sh %d15,%d15,8
80009830:	60 ff       	mov.a %a15,%d15
80009832:	4c fd       	ld.w %d15,[%a15]52
80009834:	42 f2       	add %d2,%d15
80009836:	68 d2       	st.w [%a15]52,%d2
80009838:	00 90       	ret 

8000983a <osEE_tc_delay>:
=======
80009604:	6d ff b8 fd 	call 80009174 <osEE_tc_stm_us_ticks>
80009608:	16 03       	and %d15,3
8000960a:	9b 0f 0f f0 	addih %d15,%d15,240
8000960e:	8f 8f 00 f0 	sh %d15,%d15,8
80009612:	60 ff       	mov.a %a15,%d15
80009614:	4c fd       	ld.w %d15,[%a15]52
80009616:	42 f2       	add %d2,%d15
80009618:	68 d2       	st.w [%a15]52,%d2
8000961a:	00 90       	ret 

8000961c <osEE_tc_delay>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000990e:	6d ff b8 fd 	call 8000947e <osEE_tc_stm_us_ticks>
80009912:	16 03       	and %d15,3
80009914:	9b 0f 0f f0 	addih %d15,%d15,240
80009918:	8f 8f 00 f0 	sh %d15,%d15,8
8000991c:	60 ff       	mov.a %a15,%d15
8000991e:	4c fd       	ld.w %d15,[%a15]52
80009920:	42 f2       	add %d2,%d15
80009922:	68 d2       	st.w [%a15]52,%d2
80009924:	00 90       	ret 

80009926 <osEE_tc_delay>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

void osEE_tc_delay(OsEE_reg usec)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000983a:	40 ae       	mov.aa %a14,%sp
8000983c:	4d c0 e1 ff 	mfcr %d15,$core_id
80009840:	16 03       	and %d15,3
80009842:	9b 0f 0f f0 	addih %d15,%d15,240
80009846:	8f 8f 00 f0 	sh %d15,%d15,8
8000984a:	60 f2       	mov.a %a2,%d15
8000984c:	d9 2f 10 00 	lea %a15,[%a2]16
80009850:	19 28 10 00 	ld.w %d8,[%a2]16
=======
8000961c:	40 ae       	mov.aa %a14,%sp
8000961e:	4d c0 e1 ff 	mfcr %d15,$core_id
80009622:	16 03       	and %d15,3
80009624:	9b 0f 0f f0 	addih %d15,%d15,240
80009628:	8f 8f 00 f0 	sh %d15,%d15,8
8000962c:	60 f2       	mov.a %a2,%d15
8000962e:	d9 2f 10 00 	lea %a15,[%a2]16
80009632:	19 28 10 00 	ld.w %d8,[%a2]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009926:	40 ae       	mov.aa %a14,%sp
80009928:	4d c0 e1 ff 	mfcr %d15,$core_id
8000992c:	16 03       	and %d15,3
8000992e:	9b 0f 0f f0 	addih %d15,%d15,240
80009932:	8f 8f 00 f0 	sh %d15,%d15,8
80009936:	60 f2       	mov.a %a2,%d15
80009938:	d9 2f 10 00 	lea %a15,[%a2]16
8000993c:	19 28 10 00 	ld.w %d8,[%a2]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
<<<<<<< HEAD
<<<<<<< HEAD
80009854:	6d ff 9f fd 	call 80009392 <osEE_tc_stm_us_ticks>
80009858:	4c f0       	ld.w %d15,[%a15]0
=======
80009940:	6d ff 9f fd 	call 8000947e <osEE_tc_stm_us_ticks>
80009944:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
80009946:	a2 8f       	sub %d15,%d8
80009948:	3f 2f fe ff 	jlt.u %d15,%d2,80009944 <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
8000994c:	00 90       	ret 

<<<<<<< HEAD
80009862 <osEE_tc_isr2_wrapper>:
=======
80009636:	6d ff 9f fd 	call 80009174 <osEE_tc_stm_us_ticks>
8000963a:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
8000963c:	a2 8f       	sub %d15,%d8
8000963e:	3f 2f fe ff 	jlt.u %d15,%d2,8000963a <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
80009642:	00 90       	ret 

80009644 <osEE_tc_isr2_wrapper>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000994e <osEE_tc_isr2_wrapper>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
<<<<<<< HEAD
<<<<<<< HEAD
80009862:	40 ae       	mov.aa %a14,%sp
=======
80009644:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000994e:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
<<<<<<< HEAD
<<<<<<< HEAD
80009864:	6d 00 86 05 	call 8000a370 <osEE_activate_isr2>
=======
80009646:	6d 00 87 05 	call 8000a154 <osEE_activate_isr2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009950:	6d 00 86 05 	call 8000a45c <osEE_activate_isr2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
80009868:	0d 00 40 02 	rslcx 
=======
8000964a:	0d 00 40 02 	rslcx 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009954:	0d 00 40 02 	rslcx 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000986c:	00 80       	rfe 
8000986e:	00 90       	ret 

80009870 <osEE_shutdown_os>:
=======
8000964e:	00 80       	rfe 
80009650:	00 90       	ret 
	...

80009654 <osEE_shutdown_os>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009958:	00 80       	rfe 
8000995a:	00 90       	ret 

8000995c <osEE_shutdown_os>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009870:	40 ae       	mov.aa %a14,%sp
=======
8000995c:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000995e:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009960:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
80009964:	82 32       	mov %d2,3
80009966:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
8000996a:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
8000996e:	5e 25       	jne %d15,2,80009978 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
<<<<<<< HEAD
80009884:	99 44 04 00 	ld.a %a4,[%a4]4
80009888:	6d 00 89 06 	call 8000a59a <osEE_idle_task_terminate>
=======
80009654:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009656:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009658:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
8000965c:	82 32       	mov %d2,3
8000965e:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
80009662:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
80009666:	5e 25       	jne %d15,2,80009670 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009668:	99 44 04 00 	ld.a %a4,[%a4]4
8000966c:	6d 00 89 06 	call 8000a37e <osEE_idle_task_terminate>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009970:	99 44 04 00 	ld.a %a4,[%a4]4
80009974:	6d 00 89 06 	call 8000a686 <osEE_idle_task_terminate>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
<<<<<<< HEAD
<<<<<<< HEAD
8000988c:	3c 00       	j 8000988c <osEE_shutdown_os+0x1c>

8000988e <DisableAllInterrupts>:
=======
80009670:	3c 00       	j 80009670 <osEE_shutdown_os+0x1c>

80009672 <DisableAllInterrupts>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009978:	3c 00       	j 80009978 <osEE_shutdown_os+0x1c>

8000997a <DisableAllInterrupts>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000988e:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009890:	91 00 00 f8 	movh.a %a15,32768
80009894:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
80009672:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009674:	91 00 00 f8 	movh.a %a15,32768
80009678:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000997a:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000997c:	91 00 00 f8 	movh.a %a15,32768
80009980:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
80009898:	0d 00 40 03 	disable 
=======
8000967c:	0d 00 40 03 	disable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009984:	0d 00 40 03 	disable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000989c:	82 1f       	mov %d15,1
8000989e:	e9 ff 1e 00 	st.b [%a15]30,%d15
800098a2:	00 90       	ret 

800098a4 <EnableAllInterrupts>:
=======
80009680:	82 1f       	mov %d15,1
80009682:	e9 ff 1e 00 	st.b [%a15]30,%d15
80009686:	00 90       	ret 

80009688 <EnableAllInterrupts>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009988:	82 1f       	mov %d15,1
8000998a:	e9 ff 1e 00 	st.b [%a15]30,%d15
8000998e:	00 90       	ret 

80009990 <EnableAllInterrupts>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
800098a4:	40 ae       	mov.aa %a14,%sp
=======
80009688:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009990:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
800098a6:	91 00 00 f8 	movh.a %a15,32768
800098aa:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
8000968a:	91 00 00 f8 	movh.a %a15,32768
8000968e:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009992:	91 00 00 f8 	movh.a %a15,32768
80009996:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
800098ae:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <80000130 <osEE_cdb_var>>
800098b2:	6e 06       	jz %d15,800098be <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
800098b4:	82 0f       	mov %d15,0
800098b6:	e9 ff 1e 00 	st.b [%a15]30,%d15
=======
80009692:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <800000cc <osEE_cdb_var>>
80009696:	6e 06       	jz %d15,800096a2 <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
80009698:	82 0f       	mov %d15,0
8000969a:	e9 ff 1e 00 	st.b [%a15]30,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000999a:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <80000148 <osEE_cdb_var>>
8000999e:	6e 06       	jz %d15,800099aa <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
800099a0:	82 0f       	mov %d15,0
800099a2:	e9 ff 1e 00 	st.b [%a15]30,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
800098ba:	0d 00 00 03 	enable 
800098be:	00 90       	ret 

800098c0 <SuspendAllInterrupts>:
=======
8000969e:	0d 00 00 03 	enable 
800096a2:	00 90       	ret 

800096a4 <SuspendAllInterrupts>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800099a6:	0d 00 00 03 	enable 
800099aa:	00 90       	ret 

800099ac <SuspendAllInterrupts>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
800098c0:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800098c2:	91 00 00 f8 	movh.a %a15,32768
800098c6:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
800096a4:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096a6:	91 00 00 f8 	movh.a %a15,32768
800096aa:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800099ac:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800099ae:	91 00 00 f8 	movh.a %a15,32768
800099b2:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
800098ca:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000130 <osEE_cdb_var>>
800098ce:	ee 0c       	jnz %d15,800098e6 <SuspendAllInterrupts+0x26>
=======
800096ae:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000cc <osEE_cdb_var>>
800096b2:	ee 0c       	jnz %d15,800096ca <SuspendAllInterrupts+0x26>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800099b6:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000148 <osEE_cdb_var>>
800099ba:	ee 0c       	jnz %d15,800099d2 <SuspendAllInterrupts+0x26>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800098d0:	4d c0 e2 ff 	mfcr %d15,$icr
=======
800096b4:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800099bc:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
800098d4:	0d 00 40 03 	disable 
=======
800099c0:	0d 00 40 03 	disable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800099c4:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800099c6:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800099ca:	c2 1f       	add %d15,1
800099cc:	e9 ff 1c 00 	st.b [%a15]28,%d15
800099d0:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800099d2:	8b ff 0f 22 	eq %d2,%d15,255
800099d6:	f6 25       	jnz %d2,800099e0 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
<<<<<<< HEAD
800098ec:	c2 1f       	add %d15,1
800098ee:	e9 ff 1c 00 	st.b [%a15]28,%d15
800098f2:	00 90       	ret 
=======
800096b8:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800096bc:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800096be:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800096c2:	c2 1f       	add %d15,1
800096c4:	e9 ff 1c 00 	st.b [%a15]28,%d15
800096c8:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800096ca:	8b ff 0f 22 	eq %d2,%d15,255
800096ce:	f6 25       	jnz %d2,800096d8 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
800096d0:	c2 1f       	add %d15,1
800096d2:	e9 ff 1c 00 	st.b [%a15]28,%d15
800096d6:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800099d8:	c2 1f       	add %d15,1
800099da:	e9 ff 1c 00 	st.b [%a15]28,%d15
800099de:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
<<<<<<< HEAD
<<<<<<< HEAD
800098f4:	91 00 00 48 	movh.a %a4,32768
800098f8:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
800098fc:	3b 90 01 40 	mov %d4,25
80009900:	3c b8       	j 80009870 <osEE_shutdown_os>

80009902 <ResumeAllInterrupts>:
=======
800096d8:	91 00 00 48 	movh.a %a4,32768
800096dc:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
800096e0:	3b 90 01 40 	mov %d4,25
800096e4:	3c b8       	j 80009654 <osEE_shutdown_os>

800096e6 <ResumeAllInterrupts>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800099e0:	91 00 00 48 	movh.a %a4,32768
800099e4:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
800099e8:	3b 90 01 40 	mov %d4,25
800099ec:	3c b8       	j 8000995c <osEE_shutdown_os>

800099ee <ResumeAllInterrupts>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009902:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009904:	91 00 00 f8 	movh.a %a15,32768
80009908:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
800096e6:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800096e8:	91 00 00 f8 	movh.a %a15,32768
800096ec:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
800099ee:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800099f0:	91 00 00 f8 	movh.a %a15,32768
800099f4:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000990c:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000130 <osEE_cdb_var>>
80009910:	6e 0b       	jz %d15,80009926 <ResumeAllInterrupts+0x24>
=======
800099f8:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000148 <osEE_cdb_var>>
800099fc:	6e 0b       	jz %d15,80009a12 <ResumeAllInterrupts+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    --p_ccb->s_isr_all_cnt;
800099fe:	c2 ff       	add %d15,-1
80009a00:	16 ff       	and %d15,255
80009a02:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
<<<<<<< HEAD
8000991a:	ee 06       	jnz %d15,80009926 <ResumeAllInterrupts+0x24>
=======
800096f0:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000cc <osEE_cdb_var>>
800096f4:	6e 0b       	jz %d15,8000970a <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
800096f6:	c2 ff       	add %d15,-1
800096f8:	16 ff       	and %d15,255
800096fa:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
800096fe:	ee 06       	jnz %d15,8000970a <ResumeAllInterrupts+0x24>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a06:	ee 06       	jnz %d15,80009a12 <ResumeAllInterrupts+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000991c:	4c f5       	ld.w %d15,[%a15]20
8000991e:	cd cf e2 0f 	mtcr $icr,%d15
80009922:	0d 00 c0 04 	isync 
80009926:	00 90       	ret 

80009928 <SuspendOSInterrupts>:
=======
80009700:	4c f5       	ld.w %d15,[%a15]20
80009702:	cd cf e2 0f 	mtcr $icr,%d15
80009706:	0d 00 c0 04 	isync 
8000970a:	00 90       	ret 

8000970c <SuspendOSInterrupts>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a08:	4c f5       	ld.w %d15,[%a15]20
80009a0a:	cd cf e2 0f 	mtcr $icr,%d15
80009a0e:	0d 00 c0 04 	isync 
80009a12:	00 90       	ret 

80009a14 <SuspendOSInterrupts>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009928:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000992a:	91 00 00 f8 	movh.a %a15,32768
8000992e:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
8000970c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000970e:	91 00 00 f8 	movh.a %a15,32768
80009712:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a14:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009a16:	91 00 00 f8 	movh.a %a15,32768
80009a1a:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009932:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000130 <osEE_cdb_var>>
80009936:	ee 18       	jnz %d15,80009966 <SuspendOSInterrupts+0x3e>
=======
80009716:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000cc <osEE_cdb_var>>
8000971a:	ee 18       	jnz %d15,8000974a <SuspendOSInterrupts+0x3e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a1e:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000148 <osEE_cdb_var>>
80009a22:	ee 18       	jnz %d15,80009a52 <SuspendOSInterrupts+0x3e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009938:	4d c0 e2 2f 	mfcr %d2,$icr
=======
8000971c:	4d c0 e2 2f 	mfcr %d2,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a24:	4d c0 e2 2f 	mfcr %d2,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
8000993c:	8f f2 0f f1 	and %d15,%d2,255
80009940:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009944:	ee 0a       	jnz %d15,80009958 <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
80009946:	02 2f       	mov %d15,%d2
80009948:	3b 30 01 30 	mov %d3,19
8000994c:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
=======
80009720:	8f f2 0f f1 	and %d15,%d2,255
80009724:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009728:	ee 0a       	jnz %d15,8000973c <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
8000972a:	02 2f       	mov %d15,%d2
8000972c:	3b 30 01 30 	mov %d3,19
80009730:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a28:	8f f2 0f f1 	and %d15,%d2,255
80009a2c:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009a30:	ee 0a       	jnz %d15,80009a44 <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
80009a32:	02 2f       	mov %d15,%d2
80009a34:	3b 30 01 30 	mov %d3,19
80009a38:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009950:	cd cf e2 0f 	mtcr $icr,%d15
80009954:	0d 00 c0 04 	isync 
=======
80009a3c:	cd cf e2 0f 	mtcr $icr,%d15
80009a40:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
80009a44:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
80009a46:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009a4a:	c2 1f       	add %d15,1
80009a4c:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009a50:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
80009a52:	8b ff 0f 22 	eq %d2,%d15,255
80009a56:	f6 25       	jnz %d2,80009a60 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
<<<<<<< HEAD
8000996c:	c2 1f       	add %d15,1
8000996e:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009972:	00 90       	ret 
=======
80009734:	cd cf e2 0f 	mtcr $icr,%d15
80009738:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
8000973c:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
8000973e:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009742:	c2 1f       	add %d15,1
80009744:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009748:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
8000974a:	8b ff 0f 22 	eq %d2,%d15,255
8000974e:	f6 25       	jnz %d2,80009758 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
80009750:	c2 1f       	add %d15,1
80009752:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009756:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a58:	c2 1f       	add %d15,1
80009a5a:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009a5e:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
<<<<<<< HEAD
<<<<<<< HEAD
80009974:	91 00 00 48 	movh.a %a4,32768
80009978:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
8000997c:	3b 90 01 40 	mov %d4,25
80009980:	1d ff 78 ff 	j 80009870 <osEE_shutdown_os>

80009984 <ResumeOSInterrupts>:
=======
80009758:	91 00 00 48 	movh.a %a4,32768
8000975c:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
80009760:	3b 90 01 40 	mov %d4,25
80009764:	1d ff 78 ff 	j 80009654 <osEE_shutdown_os>

80009768 <ResumeOSInterrupts>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a60:	91 00 00 48 	movh.a %a4,32768
80009a64:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
80009a68:	3b 90 01 40 	mov %d4,25
80009a6c:	1d ff 78 ff 	j 8000995c <osEE_shutdown_os>

80009a70 <ResumeOSInterrupts>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009984:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009986:	91 00 00 f8 	movh.a %a15,32768
8000998a:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
80009768:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000976a:	91 00 00 f8 	movh.a %a15,32768
8000976e:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a70:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009a72:	91 00 00 f8 	movh.a %a15,32768
80009a76:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000998e:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000130 <osEE_cdb_var>>
80009992:	6e 16       	jz %d15,800099be <ResumeOSInterrupts+0x3a>
=======
80009a7a:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000148 <osEE_cdb_var>>
80009a7e:	6e 16       	jz %d15,80009aaa <ResumeOSInterrupts+0x3a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    --p_ccb->s_isr_os_cnt;
80009a80:	c2 ff       	add %d15,-1
80009a82:	16 ff       	and %d15,255
80009a84:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009a88:	ee 11       	jnz %d15,80009aaa <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
<<<<<<< HEAD
8000999e:	48 62       	ld.w %d2,[%a15]24
=======
80009772:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000cc <osEE_cdb_var>>
80009776:	6e 16       	jz %d15,800097a2 <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
80009778:	c2 ff       	add %d15,-1
8000977a:	16 ff       	and %d15,255
8000977c:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009780:	ee 11       	jnz %d15,800097a2 <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
80009782:	48 62       	ld.w %d2,[%a15]24
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a8a:	48 62       	ld.w %d2,[%a15]24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800099a0:	4d c0 e2 3f 	mfcr %d3,$icr
800099a4:	02 3f       	mov %d15,%d3
800099a6:	8f f3 0f 31 	and %d3,%d3,255
=======
80009784:	4d c0 e2 3f 	mfcr %d3,$icr
80009788:	02 3f       	mov %d15,%d3
8000978a:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a8c:	4d c0 e2 3f 	mfcr %d3,$icr
80009a90:	02 3f       	mov %d15,%d3
80009a92:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
800099aa:	8f f2 0f 21 	and %d2,%d2,255
800099ae:	5f 23 08 00 	jeq %d3,%d2,800099be <ResumeOSInterrupts+0x3a>
800099b2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
8000978e:	8f f2 0f 21 	and %d2,%d2,255
80009792:	5f 23 08 00 	jeq %d3,%d2,800097a2 <ResumeOSInterrupts+0x3a>
80009796:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009a96:	8f f2 0f 21 	and %d2,%d2,255
80009a9a:	5f 23 08 00 	jeq %d3,%d2,80009aaa <ResumeOSInterrupts+0x3a>
80009a9e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
800099b6:	cd cf e2 0f 	mtcr $icr,%d15
800099ba:	0d 00 c0 04 	isync 
800099be:	00 90       	ret 

800099c0 <StartOS>:
=======
8000979a:	cd cf e2 0f 	mtcr $icr,%d15
8000979e:	0d 00 c0 04 	isync 
800097a2:	00 90       	ret 

800097a4 <StartOS>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009aa2:	cd cf e2 0f 	mtcr $icr,%d15
80009aa6:	0d 00 c0 04 	isync 
80009aaa:	00 90       	ret 

80009aac <StartOS>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
<<<<<<< HEAD
<<<<<<< HEAD
800099c0:	40 ae       	mov.aa %a14,%sp
800099c2:	02 49       	mov %d9,%d4
=======
800097a4:	40 ae       	mov.aa %a14,%sp
800097a6:	02 49       	mov %d9,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009aac:	40 ae       	mov.aa %a14,%sp
80009aae:	02 49       	mov %d9,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
800099c4:	91 00 00 f8 	movh.a %a15,32768
800099c8:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
800097a8:	91 00 00 f8 	movh.a %a15,32768
800097ac:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ab0:	91 00 00 f8 	movh.a %a15,32768
80009ab4:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
800099cc:	4d c0 e2 8f 	mfcr %d8,$icr
=======
800097b0:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ab8:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
800099d0:	8f f8 0f f1 	and %d15,%d8,255
800099d4:	8b 3f a1 f2 	ge.u %d15,%d15,19
800099d8:	ee 0a       	jnz %d15,800099ec <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
800099da:	02 8f       	mov %d15,%d8
800099dc:	3b 30 01 20 	mov %d2,19
800099e0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
800097b4:	8f f8 0f f1 	and %d15,%d8,255
800097b8:	8b 3f a1 f2 	ge.u %d15,%d15,19
800097bc:	ee 0a       	jnz %d15,800097d0 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
800097be:	02 8f       	mov %d15,%d8
800097c0:	3b 30 01 20 	mov %d2,19
800097c4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009abc:	8f f8 0f f1 	and %d15,%d8,255
80009ac0:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ac4:	ee 0a       	jnz %d15,80009ad8 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
80009ac6:	02 8f       	mov %d15,%d8
80009ac8:	3b 30 01 20 	mov %d2,19
80009acc:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
800099e4:	cd cf e2 0f 	mtcr $icr,%d15
800099e8:	0d 00 c0 04 	isync 
=======
800097c8:	cd cf e2 0f 	mtcr $icr,%d15
800097cc:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ad0:	cd cf e2 0f 	mtcr $icr,%d15
80009ad4:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
<<<<<<< HEAD
<<<<<<< HEAD
800099ec:	39 ff 10 00 	ld.bu %d15,[%a15]16
=======
800097d0:	39 ff 10 00 	ld.bu %d15,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ad8:	39 ff 10 00 	ld.bu %d15,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
<<<<<<< HEAD
<<<<<<< HEAD
800099f0:	82 15       	mov %d5,1
=======
800097d4:	82 15       	mov %d5,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009adc:	82 15       	mov %d5,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
<<<<<<< HEAD
<<<<<<< HEAD
800099f2:	ee 21       	jnz %d15,80009a34 <StartOS+0x74>
=======
800097d6:	ee 21       	jnz %d15,80009818 <StartOS+0x74>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ade:	ee 21       	jnz %d15,80009b20 <StartOS+0x74>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
<<<<<<< HEAD
<<<<<<< HEAD
800099f4:	6d 00 e6 05 	call 8000a5c0 <osEE_cpu_startos>
=======
800097d8:	6d 00 e6 05 	call 8000a3a4 <osEE_cpu_startos>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ae0:	6d 00 e6 05 	call 8000a6ac <osEE_cpu_startos>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
<<<<<<< HEAD
<<<<<<< HEAD
800099f8:	3b 80 01 50 	mov %d5,24
=======
800097dc:	3b 80 01 50 	mov %d5,24
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ae4:	3b 80 01 50 	mov %d5,24
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
<<<<<<< HEAD
<<<<<<< HEAD
800099fc:	df 02 1c 00 	jeq %d2,0,80009a34 <StartOS+0x74>
80009a00:	3c 24       	j 80009a48 <StartOS+0x88>
=======
800097e0:	df 02 1c 00 	jeq %d2,0,80009818 <StartOS+0x74>
800097e4:	3c 24       	j 8000982c <StartOS+0x88>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ae8:	df 02 1c 00 	jeq %d2,0,80009b20 <StartOS+0x74>
80009aec:	3c 24       	j 80009b34 <StartOS+0x88>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
<<<<<<< HEAD
<<<<<<< HEAD
80009a02:	82 2f       	mov %d15,2
80009a04:	e9 ff 10 00 	st.b [%a15]16,%d15
=======
800097e6:	82 2f       	mov %d15,2
800097e8:	e9 ff 10 00 	st.b [%a15]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009aee:	82 2f       	mov %d15,2
80009af0:	e9 ff 10 00 	st.b [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
<<<<<<< HEAD
<<<<<<< HEAD
80009a08:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009a0c:	5e 2a       	jne %d15,2,80009a20 <StartOS+0x60>
=======
800097ec:	39 ff 10 00 	ld.bu %d15,[%a15]16
800097f0:	5e 2a       	jne %d15,2,80009804 <StartOS+0x60>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009af4:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009af8:	5e 2a       	jne %d15,2,80009b0c <StartOS+0x60>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
<<<<<<< HEAD
<<<<<<< HEAD
80009a0e:	40 c4       	mov.aa %a4,%a12
80009a10:	99 c5 04 00 	ld.a %a5,[%a12]4
80009a14:	40 56       	mov.aa %a6,%a5
80009a16:	6d 00 3a 06 	call 8000a68a <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009a1a:	40 c4       	mov.aa %a4,%a12
80009a1c:	6d 00 8a 04 	call 8000a330 <osEE_task_end>
=======
800097f2:	40 c4       	mov.aa %a4,%a12
800097f4:	99 c5 04 00 	ld.a %a5,[%a12]4
800097f8:	40 56       	mov.aa %a6,%a5
800097fa:	6d 00 3a 06 	call 8000a46e <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
800097fe:	40 c4       	mov.aa %a4,%a12
80009800:	6d 00 8a 04 	call 8000a114 <osEE_task_end>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009afa:	40 c4       	mov.aa %a4,%a12
80009afc:	99 c5 04 00 	ld.a %a5,[%a12]4
80009b00:	40 56       	mov.aa %a6,%a5
80009b02:	6d 00 3a 06 	call 8000a776 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009b06:	40 c4       	mov.aa %a4,%a12
80009b08:	6d 00 8a 04 	call 8000a41c <osEE_task_end>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
80009a20:	0d 00 40 03 	disable 
=======
80009804:	0d 00 40 03 	disable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b0c:	0d 00 40 03 	disable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
<<<<<<< HEAD
<<<<<<< HEAD
80009a24:	3c 00       	j 80009a24 <StartOS+0x64>
80009a26:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
=======
80009808:	3c 00       	j 80009808 <StartOS+0x64>
8000980a:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b10:	3c 00       	j 80009b10 <StartOS+0x64>
80009b12:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009a2a:	cd cf e2 0f 	mtcr $icr,%d15
80009a2e:	0d 00 c0 04 	isync 
80009a32:	3c 1b       	j 80009a68 <StartOS+0xa8>
=======
8000980e:	cd cf e2 0f 	mtcr $icr,%d15
80009812:	0d 00 c0 04 	isync 
80009816:	3c 1b       	j 8000984c <StartOS+0xa8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b16:	cd cf e2 0f 	mtcr $icr,%d15
80009b1a:	0d 00 c0 04 	isync 
80009b1e:	3c 1b       	j 80009b54 <StartOS+0xa8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009a34:	4d c0 e2 4f 	mfcr %d4,$icr
80009a38:	02 4f       	mov %d15,%d4
80009a3a:	8f f4 0f 41 	and %d4,%d4,255
=======
80009818:	4d c0 e2 4f 	mfcr %d4,$icr
8000981c:	02 4f       	mov %d15,%d4
8000981e:	8f f4 0f 41 	and %d4,%d4,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b20:	4d c0 e2 4f 	mfcr %d4,$icr
80009b24:	02 4f       	mov %d15,%d4
80009b26:	8f f4 0f 41 	and %d4,%d4,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
80009a3e:	8f f8 0f 31 	and %d3,%d8,255
80009a42:	5f 34 f2 ff 	jne %d4,%d3,80009a26 <StartOS+0x66>
80009a46:	3c 11       	j 80009a68 <StartOS+0xa8>
=======
80009822:	8f f8 0f 31 	and %d3,%d8,255
80009826:	5f 34 f2 ff 	jne %d4,%d3,8000980a <StartOS+0x66>
8000982a:	3c 11       	j 8000984c <StartOS+0xa8>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b2a:	8f f8 0f 31 	and %d3,%d8,255
80009b2e:	5f 34 f2 ff 	jne %d4,%d3,80009b12 <StartOS+0x66>
80009b32:	3c 11       	j 80009b54 <StartOS+0xa8>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
<<<<<<< HEAD
<<<<<<< HEAD
80009a48:	91 00 00 28 	movh.a %a2,32768
80009a4c:	d9 22 30 40 	lea %a2,[%a2]304 <80000130 <osEE_cdb_var>>
80009a50:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
=======
8000982c:	91 00 00 28 	movh.a %a2,32768
80009830:	d9 22 0c 30 	lea %a2,[%a2]204 <800000cc <osEE_cdb_var>>
80009834:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b34:	91 00 00 28 	movh.a %a2,32768
80009b38:	d9 22 08 50 	lea %a2,[%a2]328 <80000148 <osEE_cdb_var>>
80009b3c:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
<<<<<<< HEAD
<<<<<<< HEAD
80009a54:	82 1f       	mov %d15,1
80009a56:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009a5a:	e9 f9 11 00 	st.b [%a15]17,%d9
=======
80009838:	82 1f       	mov %d15,1
8000983a:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
8000983e:	e9 f9 11 00 	st.b [%a15]17,%d9
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b40:	82 1f       	mov %d15,1
80009b42:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009b46:	e9 f9 11 00 	st.b [%a15]17,%d9
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
<<<<<<< HEAD
<<<<<<< HEAD
80009a5e:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009a62:	df 1f d3 ff 	jne %d15,1,80009a08 <StartOS+0x48>
80009a66:	3c ce       	j 80009a02 <StartOS+0x42>
=======
80009842:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009846:	df 1f d3 ff 	jne %d15,1,800097ec <StartOS+0x48>
8000984a:	3c ce       	j 800097e6 <StartOS+0x42>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b4a:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009b4e:	df 1f d3 ff 	jne %d15,1,80009af4 <StartOS+0x48>
80009b52:	3c ce       	j 80009aee <StartOS+0x42>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009a68:	02 52       	mov %d2,%d5
80009a6a:	00 90       	ret 

80009a6c <GetActiveApplicationMode>:
=======
8000984c:	02 52       	mov %d2,%d5
8000984e:	00 90       	ret 

80009850 <GetActiveApplicationMode>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b54:	02 52       	mov %d2,%d5
80009b56:	00 90       	ret 

80009b58 <GetActiveApplicationMode>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009a6c:	40 ae       	mov.aa %a14,%sp
=======
80009850:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b58:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
80009a6e:	91 00 00 f8 	movh.a %a15,32768
80009a72:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
80009852:	91 00 00 f8 	movh.a %a15,32768
80009856:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b5a:	91 00 00 f8 	movh.a %a15,32768
80009b5e:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
<<<<<<< HEAD
<<<<<<< HEAD
80009a76:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000130 <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009a7a:	3b f0 0f 20 	mov %d2,255
=======
8000985a:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000cc <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
8000985e:	3b f0 0f 20 	mov %d2,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b62:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000148 <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009b66:	3b f0 0f 20 	mov %d2,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
<<<<<<< HEAD
<<<<<<< HEAD
80009a7e:	6e 03       	jz %d15,80009a84 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009a80:	39 f2 11 00 	ld.bu %d2,[%a15]17
=======
80009862:	6e 03       	jz %d15,80009868 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009864:	39 f2 11 00 	ld.bu %d2,[%a15]17
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b6a:	6e 03       	jz %d15,80009b70 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009b6c:	39 f2 11 00 	ld.bu %d2,[%a15]17
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009a84:	00 90       	ret 

80009a86 <ActivateTask>:
=======
80009868:	00 90       	ret 

8000986a <ActivateTask>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b70:	00 90       	ret 

80009b72 <ActivateTask>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009a86:	40 ae       	mov.aa %a14,%sp
=======
8000986a:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b72:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
<<<<<<< HEAD
<<<<<<< HEAD
80009a88:	91 00 00 f8 	movh.a %a15,32768
80009a8c:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009a90:	4c f2       	ld.w %d15,[%a15]8
=======
8000986c:	91 00 00 f8 	movh.a %a15,32768
80009870:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009874:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b74:	91 00 00 f8 	movh.a %a15,32768
80009b78:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009b7c:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
<<<<<<< HEAD
<<<<<<< HEAD
80009a92:	82 38       	mov %d8,3
=======
80009876:	82 38       	mov %d8,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b7e:	82 38       	mov %d8,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
<<<<<<< HEAD
<<<<<<< HEAD
80009a94:	7f f4 39 80 	jge.u %d4,%d15,80009b06 <ActivateTask+0x80>
=======
80009878:	7f f4 39 80 	jge.u %d4,%d15,800098ea <ActivateTask+0x80>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b80:	7f f4 39 80 	jge.u %d4,%d15,80009bf2 <ActivateTask+0x80>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
<<<<<<< HEAD
<<<<<<< HEAD
80009a98:	91 00 00 f8 	movh.a %a15,32768
80009a9c:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009aa0:	c8 1f       	ld.a %a15,[%a15]4
80009aa2:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009aa6:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009aa8:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009aac:	ff 2f 2d 80 	jge.u %d15,2,80009b06 <ActivateTask+0x80>
=======
8000987c:	91 00 00 f8 	movh.a %a15,32768
80009880:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009884:	c8 1f       	ld.a %a15,[%a15]4
80009886:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000988a:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
8000988c:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009890:	ff 2f 2d 80 	jge.u %d15,2,800098ea <ActivateTask+0x80>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b84:	91 00 00 f8 	movh.a %a15,32768
80009b88:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009b8c:	c8 1f       	ld.a %a15,[%a15]4
80009b8e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009b92:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009b94:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009b98:	ff 2f 2d 80 	jge.u %d15,2,80009bf2 <ActivateTask+0x80>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009ab0:	4d c0 e2 9f 	mfcr %d9,$icr
=======
80009894:	4d c0 e2 9f 	mfcr %d9,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009b9c:	4d c0 e2 9f 	mfcr %d9,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
80009ab4:	8f f9 0f f1 	and %d15,%d9,255
80009ab8:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009abc:	ee 0a       	jnz %d15,80009ad0 <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
80009abe:	02 9f       	mov %d15,%d9
80009ac0:	3b 30 01 20 	mov %d2,19
80009ac4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009898:	8f f9 0f f1 	and %d15,%d9,255
8000989c:	8b 3f a1 f2 	ge.u %d15,%d15,19
800098a0:	ee 0a       	jnz %d15,800098b4 <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
800098a2:	02 9f       	mov %d15,%d9
800098a4:	3b 30 01 20 	mov %d2,19
800098a8:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ba0:	8f f9 0f f1 	and %d15,%d9,255
80009ba4:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ba8:	ee 0a       	jnz %d15,80009bbc <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
80009baa:	02 9f       	mov %d15,%d9
80009bac:	3b 30 01 20 	mov %d2,19
80009bb0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009ac8:	cd cf e2 0f 	mtcr $icr,%d15
80009acc:	0d 00 c0 04 	isync 
=======
80009bb4:	cd cf e2 0f 	mtcr $icr,%d15
80009bb8:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
80009bbc:	40 f4       	mov.aa %a4,%a15
80009bbe:	6d 00 23 04 	call 8000a404 <osEE_task_activated>
80009bc2:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
80009bc4:	f6 28       	jnz %d2,80009bd4 <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
<<<<<<< HEAD
80009ada:	91 00 00 48 	movh.a %a4,32768
80009ade:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
80009ae2:	40 f5       	mov.aa %a5,%a15
80009ae4:	6d 00 57 04 	call 8000a392 <osEE_scheduler_task_activated>
=======
800098ac:	cd cf e2 0f 	mtcr $icr,%d15
800098b0:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
800098b4:	40 f4       	mov.aa %a4,%a15
800098b6:	6d 00 23 04 	call 8000a0fc <osEE_task_activated>
800098ba:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
800098bc:	f6 28       	jnz %d2,800098cc <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
800098be:	91 00 00 48 	movh.a %a4,32768
800098c2:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
800098c6:	40 f5       	mov.aa %a5,%a15
800098c8:	6d 00 57 04 	call 8000a176 <osEE_scheduler_task_activated>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bc6:	91 00 00 48 	movh.a %a4,32768
80009bca:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009bce:	40 f5       	mov.aa %a5,%a15
80009bd0:	6d 00 57 04 	call 8000a47e <osEE_scheduler_task_activated>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009ae8:	4d c0 e2 3f 	mfcr %d3,$icr
80009aec:	02 3f       	mov %d15,%d3
80009aee:	8f f3 0f 31 	and %d3,%d3,255
=======
800098cc:	4d c0 e2 3f 	mfcr %d3,$icr
800098d0:	02 3f       	mov %d15,%d3
800098d2:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bd4:	4d c0 e2 3f 	mfcr %d3,$icr
80009bd8:	02 3f       	mov %d15,%d3
80009bda:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
80009af2:	8f f9 0f 21 	and %d2,%d9,255
80009af6:	5f 23 08 00 	jeq %d3,%d2,80009b06 <ActivateTask+0x80>
80009afa:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
800098d6:	8f f9 0f 21 	and %d2,%d9,255
800098da:	5f 23 08 00 	jeq %d3,%d2,800098ea <ActivateTask+0x80>
800098de:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bde:	8f f9 0f 21 	and %d2,%d9,255
80009be2:	5f 23 08 00 	jeq %d3,%d2,80009bf2 <ActivateTask+0x80>
80009be6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009afe:	cd cf e2 0f 	mtcr $icr,%d15
80009b02:	0d 00 c0 04 	isync 
=======
800098e2:	cd cf e2 0f 	mtcr $icr,%d15
800098e6:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bea:	cd cf e2 0f 	mtcr $icr,%d15
80009bee:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009b06:	02 82       	mov %d2,%d8
80009b08:	00 90       	ret 

80009b0a <ChainTask>:
=======
800098ea:	02 82       	mov %d2,%d8
800098ec:	00 90       	ret 

800098ee <ChainTask>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bf2:	02 82       	mov %d2,%d8
80009bf4:	00 90       	ret 

80009bf6 <ChainTask>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009b0a:	40 ae       	mov.aa %a14,%sp
=======
800098ee:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bf6:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
80009b0c:	91 00 00 f8 	movh.a %a15,32768
80009b10:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009b14:	48 03       	ld.w %d3,[%a15]0
80009b16:	91 00 00 28 	movh.a %a2,32768
80009b1a:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
80009b1e:	4c 22       	ld.w %d15,[%a2]8
=======
800098f0:	91 00 00 f8 	movh.a %a15,32768
800098f4:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
800098f8:	48 03       	ld.w %d3,[%a15]0
800098fa:	91 00 00 28 	movh.a %a2,32768
800098fe:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
80009902:	4c 22       	ld.w %d15,[%a2]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009bf8:	91 00 00 f8 	movh.a %a15,32768
80009bfc:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009c00:	48 03       	ld.w %d3,[%a15]0
80009c02:	91 00 00 28 	movh.a %a2,32768
80009c06:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
80009c0a:	4c 22       	ld.w %d15,[%a2]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
<<<<<<< HEAD
<<<<<<< HEAD
80009b20:	82 32       	mov %d2,3
=======
80009904:	82 32       	mov %d2,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c0c:	82 32       	mov %d2,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
<<<<<<< HEAD
<<<<<<< HEAD
80009b22:	7f f4 5e 80 	jge.u %d4,%d15,80009bde <ChainTask+0xd4>
=======
80009906:	7f f4 5e 80 	jge.u %d4,%d15,800099c2 <ChainTask+0xd4>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c0e:	7f f4 5e 80 	jge.u %d4,%d15,80009cca <ChainTask+0xd4>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
<<<<<<< HEAD
<<<<<<< HEAD
80009b26:	91 00 00 28 	movh.a %a2,32768
80009b2a:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
80009b2e:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
80009b32:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009b36:	d4 2c       	ld.a %a12,[%a2]
=======
8000990a:	91 00 00 28 	movh.a %a2,32768
8000990e:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
80009912:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
80009916:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000991a:	d4 2c       	ld.a %a12,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c12:	91 00 00 28 	movh.a %a2,32768
80009c16:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
80009c1a:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
80009c1e:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009c22:	d4 2c       	ld.a %a12,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
<<<<<<< HEAD
<<<<<<< HEAD
80009b38:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009b3c:	ff 2f 51 80 	jge.u %d15,2,80009bde <ChainTask+0xd4>
=======
8000991c:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009920:	ff 2f 51 80 	jge.u %d15,2,800099c2 <ChainTask+0xd4>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c24:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009c28:	ff 2f 51 80 	jge.u %d15,2,80009cca <ChainTask+0xd4>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009b40:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009b44:	6e 09       	jz %d15,80009b56 <ChainTask+0x4c>
=======
80009c2c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009c30:	6e 09       	jz %d15,80009c42 <ChainTask+0x4c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        p_ccb->s_isr_all_cnt = 0U;
80009c32:	82 0f       	mov %d15,0
80009c34:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009c38:	4c f5       	ld.w %d15,[%a15]20
80009c3a:	cd cf e2 0f 	mtcr $icr,%d15
80009c3e:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009c42:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009c46:	6e 06       	jz %d15,80009c52 <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
<<<<<<< HEAD
80009b5c:	82 0f       	mov %d15,0
80009b5e:	e9 ff 1e 00 	st.b [%a15]30,%d15
=======
80009924:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009928:	6e 09       	jz %d15,8000993a <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
8000992a:	82 0f       	mov %d15,0
8000992c:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009930:	4c f5       	ld.w %d15,[%a15]20
80009932:	cd cf e2 0f 	mtcr $icr,%d15
80009936:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
8000993a:	39 ff 1e 00 	ld.bu %d15,[%a15]30
8000993e:	6e 06       	jz %d15,8000994a <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009940:	82 0f       	mov %d15,0
80009942:	e9 ff 1e 00 	st.b [%a15]30,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c48:	82 0f       	mov %d15,0
80009c4a:	e9 ff 1e 00 	st.b [%a15]30,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
80009b62:	0d 00 00 03 	enable 
=======
80009946:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c4e:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009b66:	4d c0 e2 8f 	mfcr %d8,$icr
=======
8000994a:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c52:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
80009b6a:	8f f8 0f f1 	and %d15,%d8,255
80009b6e:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009b72:	ee 0a       	jnz %d15,80009b86 <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009b74:	02 8f       	mov %d15,%d8
80009b76:	3b 30 01 20 	mov %d2,19
80009b7a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
8000994e:	8f f8 0f f1 	and %d15,%d8,255
80009952:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009956:	ee 0a       	jnz %d15,8000996a <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009958:	02 8f       	mov %d15,%d8
8000995a:	3b 30 01 20 	mov %d2,19
8000995e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c56:	8f f8 0f f1 	and %d15,%d8,255
80009c5a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c5e:	ee 0a       	jnz %d15,80009c72 <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009c60:	02 8f       	mov %d15,%d8
80009c62:	3b 30 01 20 	mov %d2,19
80009c66:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009b7e:	cd cf e2 0f 	mtcr $icr,%d15
80009b82:	0d 00 c0 04 	isync 
=======
80009962:	cd cf e2 0f 	mtcr $icr,%d15
80009966:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c6a:	cd cf e2 0f 	mtcr $icr,%d15
80009c6e:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
<<<<<<< HEAD
<<<<<<< HEAD
80009b86:	80 cf       	mov.d %d15,%a12
80009b88:	7e 35       	jne %d15,%d3,80009b92 <ChainTask+0x88>
=======
80009c72:	80 cf       	mov.d %d15,%a12
80009c74:	7e 35       	jne %d15,%d3,80009c7e <ChainTask+0x88>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009c76:	cc c3       	ld.a %a15,[%a12]12
80009c78:	82 5f       	mov %d15,5
80009c7a:	28 2f       	st.b [%a15]2,%d15
80009c7c:	3c 15       	j 80009ca6 <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009c7e:	40 c4       	mov.aa %a4,%a12
80009c80:	6d 00 c2 03 	call 8000a404 <osEE_task_activated>
        if (ev == E_OK) {
80009c84:	df 02 1a 80 	jne %d2,0,80009cb8 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
<<<<<<< HEAD
80009b9c:	91 00 00 48 	movh.a %a4,32768
80009ba0:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
80009ba4:	40 c5       	mov.aa %a5,%a12
80009ba6:	6d 00 2a 04 	call 8000a3fa <osEE_scheduler_task_insert>
80009baa:	3c 08       	j 80009bba <ChainTask+0xb0>
80009bac:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009bb0:	cd cf e2 0f 	mtcr $icr,%d15
80009bb4:	0d 00 c0 04 	isync 
80009bb8:	00 90       	ret 
=======
8000996a:	80 cf       	mov.d %d15,%a12
8000996c:	7e 35       	jne %d15,%d3,80009976 <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
8000996e:	cc c3       	ld.a %a15,[%a12]12
80009970:	82 5f       	mov %d15,5
80009972:	28 2f       	st.b [%a15]2,%d15
80009974:	3c 15       	j 8000999e <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009976:	40 c4       	mov.aa %a4,%a12
80009978:	6d 00 c2 03 	call 8000a0fc <osEE_task_activated>
        if (ev == E_OK) {
8000997c:	df 02 1a 80 	jne %d2,0,800099b0 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009980:	91 00 00 48 	movh.a %a4,32768
80009984:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009988:	40 c5       	mov.aa %a5,%a12
8000998a:	6d 00 2a 04 	call 8000a1de <osEE_scheduler_task_insert>
8000998e:	3c 08       	j 8000999e <ChainTask+0xb0>
80009990:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009994:	cd cf e2 0f 	mtcr $icr,%d15
80009998:	0d 00 c0 04 	isync 
8000999c:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009c88:	91 00 00 48 	movh.a %a4,32768
80009c8c:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009c90:	40 c5       	mov.aa %a5,%a12
80009c92:	6d 00 2a 04 	call 8000a4e6 <osEE_scheduler_task_insert>
80009c96:	3c 08       	j 80009ca6 <ChainTask+0xb0>
80009c98:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009c9c:	cd cf e2 0f 	mtcr $icr,%d15
80009ca0:	0d 00 c0 04 	isync 
80009ca4:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
<<<<<<< HEAD
<<<<<<< HEAD
80009bba:	91 00 00 f8 	movh.a %a15,32768
80009bbe:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
8000999e:	91 00 00 f8 	movh.a %a15,32768
800099a2:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ca6:	91 00 00 f8 	movh.a %a15,32768
80009caa:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
<<<<<<< HEAD
<<<<<<< HEAD
80009bc2:	c8 0f       	ld.a %a15,[%a15]0
80009bc4:	c8 14       	ld.a %a4,[%a15]4
80009bc6:	a0 05       	mov.a %a5,0
80009bc8:	1d 00 98 05 	j 8000a6f8 <osEE_hal_terminate_ctx>
=======
800099a6:	c8 0f       	ld.a %a15,[%a15]0
800099a8:	c8 14       	ld.a %a4,[%a15]4
800099aa:	a0 05       	mov.a %a5,0
800099ac:	1d 00 98 05 	j 8000a4dc <osEE_hal_terminate_ctx>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cae:	c8 0f       	ld.a %a15,[%a15]0
80009cb0:	c8 14       	ld.a %a4,[%a15]4
80009cb2:	a0 05       	mov.a %a5,0
80009cb4:	1d 00 98 05 	j 8000a7e4 <osEE_hal_terminate_ctx>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009bcc:	4d c0 e2 3f 	mfcr %d3,$icr
80009bd0:	02 3f       	mov %d15,%d3
80009bd2:	8f f3 0f 31 	and %d3,%d3,255
=======
800099b0:	4d c0 e2 3f 	mfcr %d3,$icr
800099b4:	02 3f       	mov %d15,%d3
800099b6:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cb8:	4d c0 e2 3f 	mfcr %d3,$icr
80009cbc:	02 3f       	mov %d15,%d3
80009cbe:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
80009bd6:	8f f8 0f 81 	and %d8,%d8,255
80009bda:	5f 83 e9 ff 	jne %d3,%d8,80009bac <ChainTask+0xa2>
=======
800099ba:	8f f8 0f 81 	and %d8,%d8,255
800099be:	5f 83 e9 ff 	jne %d3,%d8,80009990 <ChainTask+0xa2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cc2:	8f f8 0f 81 	and %d8,%d8,255
80009cc6:	5f 83 e9 ff 	jne %d3,%d8,80009c98 <ChainTask+0xa2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009bde:	00 90       	ret 

80009be0 <TerminateTask>:
=======
800099c2:	00 90       	ret 

800099c4 <TerminateTask>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cca:	00 90       	ret 

80009ccc <TerminateTask>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009be0:	40 ae       	mov.aa %a14,%sp
=======
800099c4:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ccc:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
80009be2:	91 00 00 f8 	movh.a %a15,32768
80009be6:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009bea:	c8 02       	ld.a %a2,[%a15]0
=======
800099c6:	91 00 00 f8 	movh.a %a15,32768
800099ca:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
800099ce:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cce:	91 00 00 f8 	movh.a %a15,32768
80009cd2:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009cd6:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009bec:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000130 <osEE_cdb_var>>
80009bf0:	6e 09       	jz %d15,80009c02 <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
80009bf2:	82 0f       	mov %d15,0
80009bf4:	e9 ff 1c 00 	st.b [%a15]28,%d15
=======
800099d0:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <800000cc <osEE_cdb_var>>
800099d4:	6e 09       	jz %d15,800099e6 <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
800099d6:	82 0f       	mov %d15,0
800099d8:	e9 ff 1c 00 	st.b [%a15]28,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cd8:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000148 <osEE_cdb_var>>
80009cdc:	6e 09       	jz %d15,80009cee <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
80009cde:	82 0f       	mov %d15,0
80009ce0:	e9 ff 1c 00 	st.b [%a15]28,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009bf8:	4c f5       	ld.w %d15,[%a15]20
80009bfa:	cd cf e2 0f 	mtcr $icr,%d15
80009bfe:	0d 00 c0 04 	isync 
=======
80009ce4:	4c f5       	ld.w %d15,[%a15]20
80009ce6:	cd cf e2 0f 	mtcr $icr,%d15
80009cea:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009cee:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009cf2:	6e 06       	jz %d15,80009cfe <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
<<<<<<< HEAD
80009c08:	82 0f       	mov %d15,0
80009c0a:	e9 ff 1e 00 	st.b [%a15]30,%d15
=======
800099dc:	4c f5       	ld.w %d15,[%a15]20
800099de:	cd cf e2 0f 	mtcr $icr,%d15
800099e2:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
800099e6:	39 ff 1e 00 	ld.bu %d15,[%a15]30
800099ea:	6e 06       	jz %d15,800099f6 <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
800099ec:	82 0f       	mov %d15,0
800099ee:	e9 ff 1e 00 	st.b [%a15]30,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cf4:	82 0f       	mov %d15,0
80009cf6:	e9 ff 1e 00 	st.b [%a15]30,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
80009c0e:	0d 00 00 03 	enable 
=======
800099f2:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cfa:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009c12:	4d c0 e2 ff 	mfcr %d15,$icr
=======
800099f6:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009cfe:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
80009c16:	8f ff 0f 21 	and %d2,%d15,255
80009c1a:	8b 32 a1 22 	ge.u %d2,%d2,19
80009c1e:	f6 29       	jnz %d2,80009c30 <TerminateTask+0x50>
80009c20:	3b 30 01 20 	mov %d2,19
80009c24:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
800099fa:	8f ff 0f 21 	and %d2,%d15,255
800099fe:	8b 32 a1 22 	ge.u %d2,%d2,19
80009a02:	f6 29       	jnz %d2,80009a14 <TerminateTask+0x50>
80009a04:	3b 30 01 20 	mov %d2,19
80009a08:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d02:	8f ff 0f 21 	and %d2,%d15,255
80009d06:	8b 32 a1 22 	ge.u %d2,%d2,19
80009d0a:	f6 29       	jnz %d2,80009d1c <TerminateTask+0x50>
80009d0c:	3b 30 01 20 	mov %d2,19
80009d10:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009c28:	cd cf e2 0f 	mtcr $icr,%d15
80009c2c:	0d 00 c0 04 	isync 
80009c30:	99 24 04 00 	ld.a %a4,[%a2]4
80009c34:	a0 05       	mov.a %a5,0
80009c36:	1d 00 61 05 	j 8000a6f8 <osEE_hal_terminate_ctx>

80009c3a <Schedule>:
=======
80009a0c:	cd cf e2 0f 	mtcr $icr,%d15
80009a10:	0d 00 c0 04 	isync 
80009a14:	99 24 04 00 	ld.a %a4,[%a2]4
80009a18:	a0 05       	mov.a %a5,0
80009a1a:	1d 00 61 05 	j 8000a4dc <osEE_hal_terminate_ctx>

80009a1e <Schedule>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d14:	cd cf e2 0f 	mtcr $icr,%d15
80009d18:	0d 00 c0 04 	isync 
80009d1c:	99 24 04 00 	ld.a %a4,[%a2]4
80009d20:	a0 05       	mov.a %a5,0
80009d22:	1d 00 61 05 	j 8000a7e4 <osEE_hal_terminate_ctx>

80009d26 <Schedule>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009c3a:	40 ae       	mov.aa %a14,%sp
=======
80009a1e:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d26:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
80009c3c:	91 00 00 f8 	movh.a %a15,32768
=======
80009d28:	91 00 00 f8 	movh.a %a15,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009d2c:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
80009d30:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
<<<<<<< HEAD
80009c46:	c8 3c       	ld.a %a12,[%a15]12
=======
80009a20:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009a24:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009a28:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009a2a:	c8 3c       	ld.a %a12,[%a15]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d32:	c8 3c       	ld.a %a12,[%a15]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
<<<<<<< HEAD
<<<<<<< HEAD
80009c48:	39 c2 01 00 	ld.bu %d2,[%a12]1 <80000130 <osEE_cdb_var>>
80009c4c:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000130 <osEE_cdb_var>>
80009c50:	5f f2 2d 80 	jne %d2,%d15,80009caa <Schedule+0x70>
=======
80009a2c:	39 c2 01 00 	ld.bu %d2,[%a12]1 <800000cc <osEE_cdb_var>>
80009a30:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <800000cc <osEE_cdb_var>>
80009a34:	5f f2 2d 80 	jne %d2,%d15,80009a8e <Schedule+0x70>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d34:	39 c2 01 00 	ld.bu %d2,[%a12]1 <80000148 <osEE_cdb_var>>
80009d38:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000148 <osEE_cdb_var>>
80009d3c:	5f f2 2d 80 	jne %d2,%d15,80009d96 <Schedule+0x70>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009c54:	4d c0 e2 8f 	mfcr %d8,$icr
=======
80009a38:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d40:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
80009c58:	8f f8 0f f1 	and %d15,%d8,255
80009c5c:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c60:	ee 0a       	jnz %d15,80009c74 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009c62:	02 8f       	mov %d15,%d8
80009c64:	3b 30 01 20 	mov %d2,19
80009c68:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009a3c:	8f f8 0f f1 	and %d15,%d8,255
80009a40:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009a44:	ee 0a       	jnz %d15,80009a58 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009a46:	02 8f       	mov %d15,%d8
80009a48:	3b 30 01 20 	mov %d2,19
80009a4c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d44:	8f f8 0f f1 	and %d15,%d8,255
80009d48:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009d4c:	ee 0a       	jnz %d15,80009d60 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009d4e:	02 8f       	mov %d15,%d8
80009d50:	3b 30 01 20 	mov %d2,19
80009d54:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009c6c:	cd cf e2 0f 	mtcr $icr,%d15
80009c70:	0d 00 c0 04 	isync 
=======
80009a50:	cd cf e2 0f 	mtcr $icr,%d15
80009a54:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d58:	cd cf e2 0f 	mtcr $icr,%d15
80009d5c:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
<<<<<<< HEAD
<<<<<<< HEAD
80009c74:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009c78:	2c c1       	st.b [%a12]1,%d15
=======
80009d60:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009d64:	2c c1       	st.b [%a12]1,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009d66:	91 00 00 48 	movh.a %a4,32768
80009d6a:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009d6e:	6d 00 36 04 	call 8000a5da <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
<<<<<<< HEAD
80009c86:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009c8a:	2c c1       	st.b [%a12]1,%d15
=======
80009a58:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009a5c:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009a5e:	91 00 00 48 	movh.a %a4,32768
80009a62:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009a66:	6d 00 36 04 	call 8000a2d2 <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009a6a:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009a6e:	2c c1       	st.b [%a12]1,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d72:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009d76:	2c c1       	st.b [%a12]1,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009c8c:	4d c0 e2 3f 	mfcr %d3,$icr
80009c90:	02 3f       	mov %d15,%d3
80009c92:	8f f3 0f 31 	and %d3,%d3,255
=======
80009a70:	4d c0 e2 3f 	mfcr %d3,$icr
80009a74:	02 3f       	mov %d15,%d3
80009a76:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d78:	4d c0 e2 3f 	mfcr %d3,$icr
80009d7c:	02 3f       	mov %d15,%d3
80009d7e:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
80009c96:	8f f8 0f 21 	and %d2,%d8,255
80009c9a:	5f 23 08 00 	jeq %d3,%d2,80009caa <Schedule+0x70>
80009c9e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009a7a:	8f f8 0f 21 	and %d2,%d8,255
80009a7e:	5f 23 08 00 	jeq %d3,%d2,80009a8e <Schedule+0x70>
80009a82:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d82:	8f f8 0f 21 	and %d2,%d8,255
80009d86:	5f 23 08 00 	jeq %d3,%d2,80009d96 <Schedule+0x70>
80009d8a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009ca2:	cd cf e2 0f 	mtcr $icr,%d15
80009ca6:	0d 00 c0 04 	isync 
=======
80009a86:	cd cf e2 0f 	mtcr $icr,%d15
80009a8a:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d8e:	cd cf e2 0f 	mtcr $icr,%d15
80009d92:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009caa:	82 02       	mov %d2,0
80009cac:	00 90       	ret 

80009cae <GetResource>:
=======
80009a8e:	82 02       	mov %d2,0
80009a90:	00 90       	ret 

80009a92 <GetResource>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d96:	82 02       	mov %d2,0
80009d98:	00 90       	ret 

80009d9a <GetResource>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009cae:	40 ae       	mov.aa %a14,%sp
=======
80009a92:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d9a:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
80009cb0:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009cb4:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
80009cb8:	c8 04       	ld.a %a4,[%a15]0
=======
80009a94:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009a98:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009a9c:	c8 04       	ld.a %a4,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009d9c:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009da0:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
80009da4:	c8 04       	ld.a %a4,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
<<<<<<< HEAD
<<<<<<< HEAD
80009cba:	91 00 00 f8 	movh.a %a15,32768
80009cbe:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009cc2:	4c f4       	ld.w %d15,[%a15]16
=======
80009a9e:	91 00 00 f8 	movh.a %a15,32768
80009aa2:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009aa6:	4c f4       	ld.w %d15,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009da6:	91 00 00 f8 	movh.a %a15,32768
80009daa:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009dae:	4c f4       	ld.w %d15,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
<<<<<<< HEAD
<<<<<<< HEAD
80009cc4:	82 32       	mov %d2,3
=======
80009aa8:	82 32       	mov %d2,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009db0:	82 32       	mov %d2,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
<<<<<<< HEAD
<<<<<<< HEAD
80009cc6:	7f f4 4c 80 	jge.u %d4,%d15,80009d5e <GetResource+0xb0>
=======
80009aaa:	7f f4 4c 80 	jge.u %d4,%d15,80009b42 <GetResource+0xb0>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009db2:	7f f4 4c 80 	jge.u %d4,%d15,80009e4a <GetResource+0xb0>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
<<<<<<< HEAD
<<<<<<< HEAD
80009cca:	91 00 00 f8 	movh.a %a15,32768
80009cce:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009cd2:	c8 3f       	ld.a %a15,[%a15]12
80009cd4:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009cd8:	c8 03       	ld.a %a3,[%a15]0
=======
80009db6:	91 00 00 f8 	movh.a %a15,32768
80009dba:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009dbe:	c8 3f       	ld.a %a15,[%a15]12
80009dc0:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009dc4:	c8 03       	ld.a %a3,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
80009dc6:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
80009dc8:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
80009dca:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
<<<<<<< HEAD
80009ce0:	08 14       	ld.bu %d4,[%a15]1
=======
80009aae:	91 00 00 f8 	movh.a %a15,32768
80009ab2:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009ab6:	c8 3f       	ld.a %a15,[%a15]12
80009ab8:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009abc:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
80009abe:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
80009ac0:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
80009ac2:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
80009ac4:	08 14       	ld.bu %d4,[%a15]1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009dcc:	08 14       	ld.bu %d4,[%a15]1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009ce2:	4d c0 e2 2f 	mfcr %d2,$icr
=======
80009ac6:	4d c0 e2 2f 	mfcr %d2,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009dce:	4d c0 e2 2f 	mfcr %d2,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
80009ce6:	8f f2 0f 31 	and %d3,%d2,255
80009cea:	8b 33 a1 32 	ge.u %d3,%d3,19
80009cee:	f6 3a       	jnz %d3,80009d02 <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009cf0:	02 23       	mov %d3,%d2
80009cf2:	3b 30 01 50 	mov %d5,19
80009cf6:	37 53 08 30 	insert %d3,%d3,%d5,0,8
=======
80009aca:	8f f2 0f 31 	and %d3,%d2,255
80009ace:	8b 33 a1 32 	ge.u %d3,%d3,19
80009ad2:	f6 3a       	jnz %d3,80009ae6 <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009ad4:	02 23       	mov %d3,%d2
80009ad6:	3b 30 01 50 	mov %d5,19
80009ada:	37 53 08 30 	insert %d3,%d3,%d5,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009dd2:	8f f2 0f 31 	and %d3,%d2,255
80009dd6:	8b 33 a1 32 	ge.u %d3,%d3,19
80009dda:	f6 3a       	jnz %d3,80009dee <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009ddc:	02 23       	mov %d3,%d2
80009dde:	3b 30 01 50 	mov %d5,19
80009de2:	37 53 08 30 	insert %d3,%d3,%d5,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009cfa:	cd c3 e2 0f 	mtcr $icr,%d3
80009cfe:	0d 00 c0 04 	isync 
=======
80009ade:	cd c3 e2 0f 	mtcr $icr,%d3
80009ae2:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009de6:	cd c3 e2 0f 	mtcr $icr,%d3
80009dea:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
<<<<<<< HEAD
<<<<<<< HEAD
80009d02:	02 23       	mov %d3,%d2
=======
80009ae6:	02 23       	mov %d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009dee:	02 23       	mov %d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
<<<<<<< HEAD
<<<<<<< HEAD
80009d04:	7f f4 16 80 	jge.u %d4,%d15,80009d30 <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009d08:	28 1f       	st.b [%a15]1,%d15
=======
80009ae8:	7f f4 16 80 	jge.u %d4,%d15,80009b14 <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009aec:	28 1f       	st.b [%a15]1,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009df0:	7f f4 16 80 	jge.u %d4,%d15,80009e1c <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009df4:	28 1f       	st.b [%a15]1,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
<<<<<<< HEAD
<<<<<<< HEAD
80009d0a:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009d0e:	8b ff 2f 72 	ne %d7,%d15,255
=======
80009aee:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009af2:	8b ff 2f 72 	ne %d7,%d15,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009df6:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009dfa:	8b ff 2f 72 	ne %d7,%d15,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
<<<<<<< HEAD
<<<<<<< HEAD
80009d12:	16 7f       	and %d15,127
=======
80009af6:	16 7f       	and %d15,127
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009dfe:	16 7f       	and %d15,127
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
<<<<<<< HEAD
<<<<<<< HEAD
80009d14:	c2 1f       	add %d15,1
=======
80009af8:	c2 1f       	add %d15,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e00:	c2 1f       	add %d15,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
<<<<<<< HEAD
<<<<<<< HEAD
80009d16:	8f 02 d0 61 	andn %d6,%d2,256
80009d1a:	8f f2 cf 31 	andn %d3,%d2,255
80009d1e:	a6 f3       	or %d3,%d15
=======
80009afa:	8f 02 d0 61 	andn %d6,%d2,256
80009afe:	8f f2 cf 31 	andn %d3,%d2,255
80009b02:	a6 f3       	or %d3,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e02:	8f 02 d0 61 	andn %d6,%d2,256
80009e06:	8f f2 cf 31 	andn %d3,%d2,255
80009e0a:	a6 f3       	or %d3,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
<<<<<<< HEAD
<<<<<<< HEAD
80009d20:	8f f2 cf 21 	andn %d2,%d2,255
80009d24:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009d28:	8b 05 40 52 	lt %d5,%d5,0
80009d2c:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
=======
80009b04:	8f f2 cf 21 	andn %d2,%d2,255
80009b08:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009b0c:	8b 05 40 52 	lt %d5,%d5,0
80009b10:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e0c:	8f f2 cf 21 	andn %d2,%d2,255
80009e10:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009e14:	8b 05 40 52 	lt %d5,%d5,0
80009e18:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
<<<<<<< HEAD
<<<<<<< HEAD
80009d30:	b5 24 08 00 	st.a [%a2]8,%a4
=======
80009b14:	b5 24 08 00 	st.a [%a2]8,%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e1c:	b5 24 08 00 	st.a [%a2]8,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009d34:	4d c0 e2 5f 	mfcr %d5,$icr
80009d38:	02 5f       	mov %d15,%d5
80009d3a:	8f f5 0f 51 	and %d5,%d5,255
=======
80009b18:	4d c0 e2 5f 	mfcr %d5,$icr
80009b1c:	02 5f       	mov %d15,%d5
80009b1e:	8f f5 0f 51 	and %d5,%d5,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e20:	4d c0 e2 5f 	mfcr %d5,$icr
80009e24:	02 5f       	mov %d15,%d5
80009e26:	8f f5 0f 51 	and %d5,%d5,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
80009d3e:	8f f3 0f 21 	and %d2,%d3,255
80009d42:	5f 25 08 00 	jeq %d5,%d2,80009d52 <GetResource+0xa4>
80009d46:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009b22:	8f f3 0f 21 	and %d2,%d3,255
80009b26:	5f 25 08 00 	jeq %d5,%d2,80009b36 <GetResource+0xa4>
80009b2a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e2a:	8f f3 0f 21 	and %d2,%d3,255
80009e2e:	5f 25 08 00 	jeq %d5,%d2,80009e3e <GetResource+0xa4>
80009e32:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009d4a:	cd cf e2 0f 	mtcr $icr,%d15
80009d4e:	0d 00 c0 04 	isync 
=======
80009b2e:	cd cf e2 0f 	mtcr $icr,%d15
80009b32:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e36:	cd cf e2 0f 	mtcr $icr,%d15
80009e3a:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
<<<<<<< HEAD
<<<<<<< HEAD
80009d52:	4c f1       	ld.w %d15,[%a15]4
80009d54:	6c 20       	st.w [%a2]0,%d15
=======
80009e3e:	4c f1       	ld.w %d15,[%a15]4
80009e40:	6c 20       	st.w [%a2]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      p_reso_cb->prev_prio  = current_prio;
80009e42:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009e46:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
<<<<<<< HEAD
80009d5c:	82 02       	mov %d2,0
=======
80009b36:	4c f1       	ld.w %d15,[%a15]4
80009b38:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
80009b3a:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009b3e:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009b40:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e48:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009d5e:	00 90       	ret 

80009d60 <ReleaseResource>:
=======
80009b42:	00 90       	ret 

80009b44 <ReleaseResource>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e4a:	00 90       	ret 

80009e4c <ReleaseResource>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009d60:	40 ae       	mov.aa %a14,%sp
=======
80009b44:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
80009d62:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009d66:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
80009d6a:	c8 03       	ld.a %a3,[%a15]0
80009d6c:	91 00 00 f8 	movh.a %a15,32768
80009d70:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009d74:	4c f4       	ld.w %d15,[%a15]16
=======
80009b46:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009b4a:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009b4e:	c8 03       	ld.a %a3,[%a15]0
80009b50:	91 00 00 f8 	movh.a %a15,32768
80009b54:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009b58:	4c f4       	ld.w %d15,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
<<<<<<< HEAD
80009d76:	82 32       	mov %d2,3
=======
80009b5a:	82 32       	mov %d2,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
<<<<<<< HEAD
80009d78:	7f f4 69 80 	jge.u %d4,%d15,80009e4a <ReleaseResource+0xea>
=======
80009b5c:	7f f4 69 80 	jge.u %d4,%d15,80009c2e <ReleaseResource+0xea>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
<<<<<<< HEAD
80009d7c:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009d7e:	91 00 00 28 	movh.a %a2,32768
80009d82:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
80009d86:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009d8a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009d8e:	d4 22       	ld.a %a2,[%a2]
80009d90:	d4 22       	ld.a %a2,[%a2]
=======
80009b60:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009b62:	91 00 00 28 	movh.a %a2,32768
80009b66:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
80009b6a:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009b6e:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009b72:	d4 22       	ld.a %a2,[%a2]
80009b74:	d4 22       	ld.a %a2,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
80009d92:	4d c0 e2 ff 	mfcr %d15,$icr
=======
80009b76:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
80009d96:	8f ff 0f 21 	and %d2,%d15,255
80009d9a:	8b 32 a1 22 	ge.u %d2,%d2,19
80009d9e:	f6 2a       	jnz %d2,80009db2 <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009da0:	02 f2       	mov %d2,%d15
80009da2:	3b 30 01 30 	mov %d3,19
80009da6:	37 32 08 20 	insert %d2,%d2,%d3,0,8
=======
80009b7a:	8f ff 0f 21 	and %d2,%d15,255
80009b7e:	8b 32 a1 22 	ge.u %d2,%d2,19
80009b82:	f6 2a       	jnz %d2,80009b96 <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009b84:	02 f2       	mov %d2,%d15
80009b86:	3b 30 01 30 	mov %d3,19
80009b8a:	37 32 08 20 	insert %d2,%d2,%d3,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
80009daa:	cd c2 e2 0f 	mtcr $icr,%d2
80009dae:	0d 00 c0 04 	isync 
=======
80009b8e:	cd c2 e2 0f 	mtcr $icr,%d2
80009b92:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
<<<<<<< HEAD
80009db2:	c8 14       	ld.a %a4,[%a15]4
80009db4:	d4 44       	ld.a %a4,[%a4]
80009db6:	54 42       	ld.w %d2,[%a4]
80009db8:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
80009dba:	df 02 1a 00 	jeq %d2,0,80009dee <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009dbe:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009dc2:	28 13       	st.b [%a15]1,%d3
=======
80009b96:	c8 14       	ld.a %a4,[%a15]4
80009b98:	d4 44       	ld.a %a4,[%a4]
80009b9a:	54 42       	ld.w %d2,[%a4]
80009b9c:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
80009b9e:	df 02 1a 00 	jeq %d2,0,80009bd2 <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009ba2:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009ba6:	28 13       	st.b [%a15]1,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
<<<<<<< HEAD
80009dc4:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009dc8:	8b f3 2f 62 	ne %d6,%d3,255
=======
80009ba8:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009bac:	8b f3 2f 62 	ne %d6,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
<<<<<<< HEAD
80009dcc:	8f f3 07 31 	and %d3,%d3,127
=======
80009bb0:	8f f3 07 31 	and %d3,%d3,127
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
<<<<<<< HEAD
80009dd0:	c2 13       	add %d3,1
=======
80009bb4:	c2 13       	add %d3,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
<<<<<<< HEAD
80009dd2:	8f 0f d0 51 	andn %d5,%d15,256
80009dd6:	8f ff cf 21 	andn %d2,%d15,255
80009dda:	a6 32       	or %d2,%d3
=======
80009bb6:	8f 0f d0 51 	andn %d5,%d15,256
80009bba:	8f ff cf 21 	andn %d2,%d15,255
80009bbe:	a6 32       	or %d2,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
<<<<<<< HEAD
80009ddc:	8f ff cf f1 	andn %d15,%d15,255
80009de0:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009de4:	8b 04 40 42 	lt %d4,%d4,0
80009de8:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009dec:	3c 17       	j 80009e1a <ReleaseResource+0xba>
=======
80009bc0:	8f ff cf f1 	andn %d15,%d15,255
80009bc4:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009bc8:	8b 04 40 42 	lt %d4,%d4,0
80009bcc:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009bd0:	3c 17       	j 80009bfe <ReleaseResource+0xba>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
<<<<<<< HEAD
80009dee:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009df2:	28 15       	st.b [%a15]1,%d5
=======
80009bd2:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009bd6:	28 15       	st.b [%a15]1,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
<<<<<<< HEAD
80009df4:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009df8:	8b f5 2f 42 	ne %d4,%d5,255
=======
80009bd8:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009bdc:	8b f5 2f 42 	ne %d4,%d5,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
<<<<<<< HEAD
80009dfc:	8f f5 07 51 	and %d5,%d5,127
=======
80009be0:	8f f5 07 51 	and %d5,%d5,127
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
<<<<<<< HEAD
80009e00:	c2 15       	add %d5,1
=======
80009be4:	c2 15       	add %d5,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
<<<<<<< HEAD
80009e02:	8f 0f d0 21 	andn %d2,%d15,256
80009e06:	8f ff cf 31 	andn %d3,%d15,255
80009e0a:	a6 53       	or %d3,%d5
=======
80009be6:	8f 0f d0 21 	andn %d2,%d15,256
80009bea:	8f ff cf 31 	andn %d3,%d15,255
80009bee:	a6 53       	or %d3,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
<<<<<<< HEAD
80009e0c:	8f ff cf 51 	andn %d5,%d15,255
80009e10:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009e14:	fa 06       	lt %d15,%d6,0
80009e16:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
=======
80009bf0:	8f ff cf 51 	andn %d5,%d15,255
80009bf4:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009bf8:	fa 06       	lt %d15,%d6,0
80009bfa:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
<<<<<<< HEAD
80009e1a:	82 02       	mov %d2,0
80009e1c:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009e20:	91 00 00 48 	movh.a %a4,32768
80009e24:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
80009e28:	6d 00 63 03 	call 8000a4ee <osEE_scheduler_task_preemption_point>
=======
80009bfe:	82 02       	mov %d2,0
80009c00:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009c04:	91 00 00 48 	movh.a %a4,32768
80009c08:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009c0c:	6d 00 63 03 	call 8000a2d2 <osEE_scheduler_task_preemption_point>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
80009e2c:	4d c0 e2 5f 	mfcr %d5,$icr
80009e30:	02 53       	mov %d3,%d5
80009e32:	8f f5 0f 51 	and %d5,%d5,255
=======
80009c10:	4d c0 e2 5f 	mfcr %d5,$icr
80009c14:	02 53       	mov %d3,%d5
80009c16:	8f f5 0f 51 	and %d5,%d5,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
80009e36:	16 ff       	and %d15,255
80009e38:	5f f5 08 00 	jeq %d5,%d15,80009e48 <ReleaseResource+0xe8>
80009e3c:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
=======
80009c1a:	16 ff       	and %d15,255
80009c1c:	5f f5 08 00 	jeq %d5,%d15,80009c2c <ReleaseResource+0xe8>
80009c20:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
80009e40:	cd c3 e2 0f 	mtcr $icr,%d3
80009e44:	0d 00 c0 04 	isync 
=======
80009c24:	cd c3 e2 0f 	mtcr $icr,%d3
80009c28:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5

      osEE_end_primitive(flags);

      ev = E_OK;
<<<<<<< HEAD
80009e48:	82 02       	mov %d2,0
=======
80009c2c:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
<<<<<<< HEAD
80009e4a:	00 90       	ret 

80009e4c <ShutdownOS>:
=======
80009c2e:	00 90       	ret 

80009c30 <ShutdownOS>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
<<<<<<< HEAD
=======
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
80009e4c:	40 ae       	mov.aa %a14,%sp
=======
80009c30:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
80009e4e:	91 00 00 f8 	movh.a %a15,32768
<<<<<<< HEAD
80009e52:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
80009c32:	91 00 00 f8 	movh.a %a15,32768
80009c36:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009e52:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
80009e56:	c8 03       	ld.a %a3,[%a15]0
80009e58:	91 00 00 f8 	movh.a %a15,32768
80009e5c:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
80009e60:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009e62:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009e64:	7f f4 69 80 	jge.u %d4,%d15,80009f36 <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009e68:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009e6a:	91 00 00 28 	movh.a %a2,32768
80009e6e:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
80009e72:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009e76:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009e7a:	d4 22       	ld.a %a2,[%a2]
80009e7c:	d4 22       	ld.a %a2,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009e56:	4d c0 e2 2f 	mfcr %d2,$icr
=======
80009c3a:	4d c0 e2 2f 	mfcr %d2,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e7e:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
80009e5a:	8f f2 0f f1 	and %d15,%d2,255
80009e5e:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009e62:	ee 0a       	jnz %d15,80009e76 <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009e64:	02 2f       	mov %d15,%d2
80009e66:	3b 30 01 30 	mov %d3,19
80009e6a:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
=======
80009c3e:	8f f2 0f f1 	and %d15,%d2,255
80009c42:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c46:	ee 0a       	jnz %d15,80009c5a <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009c48:	02 2f       	mov %d15,%d2
80009c4a:	3b 30 01 30 	mov %d3,19
80009c4e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e82:	8f ff 0f 21 	and %d2,%d15,255
80009e86:	8b 32 a1 22 	ge.u %d2,%d2,19
80009e8a:	f6 2a       	jnz %d2,80009e9e <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009e8c:	02 f2       	mov %d2,%d15
80009e8e:	3b 30 01 30 	mov %d3,19
80009e92:	37 32 08 20 	insert %d2,%d2,%d3,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009e6e:	cd cf e2 0f 	mtcr $icr,%d15
80009e72:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009e76:	39 ff 10 00 	ld.bu %d15,[%a15]16
=======
80009c52:	cd cf e2 0f 	mtcr $icr,%d15
80009c56:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009c5a:	39 ff 10 00 	ld.bu %d15,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009e96:	cd c2 e2 0f 	mtcr $icr,%d2
80009e9a:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
80009e9e:	c8 14       	ld.a %a4,[%a15]4
80009ea0:	d4 44       	ld.a %a4,[%a4]
80009ea2:	54 42       	ld.w %d2,[%a4]
80009ea4:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
80009ea6:	df 02 1a 00 	jeq %d2,0,80009eda <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009eaa:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009eae:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009eb0:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009eb4:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009eb8:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009ebc:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009ebe:	8f 0f d0 51 	andn %d5,%d15,256
80009ec2:	8f ff cf 21 	andn %d2,%d15,255
80009ec6:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009ec8:	8f ff cf f1 	andn %d15,%d15,255
80009ecc:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009ed0:	8b 04 40 42 	lt %d4,%d4,0
80009ed4:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009ed8:	3c 17       	j 80009f06 <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
80009eda:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009ede:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009ee0:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009ee4:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009ee8:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009eec:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009eee:	8f 0f d0 21 	andn %d2,%d15,256
80009ef2:	8f ff cf 31 	andn %d3,%d15,255
80009ef6:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009ef8:	8f ff cf 51 	andn %d5,%d15,255
80009efc:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009f00:	fa 06       	lt %d15,%d6,0
80009f02:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
80009f06:	82 02       	mov %d2,0
80009f08:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009f0c:	91 00 00 48 	movh.a %a4,32768
80009f10:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
80009f14:	6d 00 63 03 	call 8000a5da <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009f18:	4d c0 e2 5f 	mfcr %d5,$icr
80009f1c:	02 53       	mov %d3,%d5
80009f1e:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009f22:	16 ff       	and %d15,255
80009f24:	5f f5 08 00 	jeq %d5,%d15,80009f34 <ReleaseResource+0xe8>
80009f28:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f2c:	cd c3 e2 0f 	mtcr $icr,%d3
80009f30:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
80009f34:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
80009f36:	00 90       	ret 

80009f38 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009f38:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009f3a:	91 00 00 f8 	movh.a %a15,32768
80009f3e:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009f42:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009f46:	8f f2 0f f1 	and %d15,%d2,255
80009f4a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009f4e:	ee 0a       	jnz %d15,80009f62 <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009f50:	02 2f       	mov %d15,%d2
80009f52:	3b 30 01 30 	mov %d3,19
80009f56:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009f5a:	cd cf e2 0f 	mtcr $icr,%d15
80009f5e:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009f62:	39 ff 10 00 	ld.bu %d15,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
<<<<<<< HEAD
<<<<<<< HEAD
80009e7a:	c2 ff       	add %d15,-1
80009e7c:	16 ff       	and %d15,255
80009e7e:	ff 2f 08 80 	jge.u %d15,2,80009e8e <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009e82:	91 00 00 48 	movh.a %a4,32768
80009e86:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
80009e8a:	1d ff f3 fc 	j 80009870 <osEE_shutdown_os>
=======
80009c5e:	c2 ff       	add %d15,-1
80009c60:	16 ff       	and %d15,255
80009c62:	ff 2f 08 80 	jge.u %d15,2,80009c72 <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009c66:	91 00 00 48 	movh.a %a4,32768
80009c6a:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
80009c6e:	1d ff f3 fc 	j 80009654 <osEE_shutdown_os>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009f66:	c2 ff       	add %d15,-1
80009f68:	16 ff       	and %d15,255
80009f6a:	ff 2f 08 80 	jge.u %d15,2,80009f7a <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009f6e:	91 00 00 48 	movh.a %a4,32768
80009f72:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
80009f76:	1d ff f3 fc 	j 8000995c <osEE_shutdown_os>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009e8e:	4d c0 e2 3f 	mfcr %d3,$icr
80009e92:	02 3f       	mov %d15,%d3
80009e94:	8f f3 0f 31 	and %d3,%d3,255
=======
80009c72:	4d c0 e2 3f 	mfcr %d3,$icr
80009c76:	02 3f       	mov %d15,%d3
80009c78:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009f7a:	4d c0 e2 3f 	mfcr %d3,$icr
80009f7e:	02 3f       	mov %d15,%d3
80009f80:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
80009e98:	8f f2 0f 21 	and %d2,%d2,255
80009e9c:	5f 23 08 00 	jeq %d3,%d2,80009eac <ShutdownOS+0x60>
80009ea0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009c7c:	8f f2 0f 21 	and %d2,%d2,255
80009c80:	5f 23 08 00 	jeq %d3,%d2,80009c90 <ShutdownOS+0x60>
80009c84:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009f84:	8f f2 0f 21 	and %d2,%d2,255
80009f88:	5f 23 08 00 	jeq %d3,%d2,80009f98 <ShutdownOS+0x60>
80009f8c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009ea4:	cd cf e2 0f 	mtcr $icr,%d15
80009ea8:	0d 00 c0 04 	isync 
=======
80009c88:	cd cf e2 0f 	mtcr $icr,%d15
80009c8c:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009f90:	cd cf e2 0f 	mtcr $icr,%d15
80009f94:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009eac:	82 72       	mov %d2,7
80009eae:	00 90       	ret 

80009eb0 <GetTaskID>:
=======
80009c90:	82 72       	mov %d2,7
80009c92:	00 90       	ret 

80009c94 <GetTaskID>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009f98:	82 72       	mov %d2,7
80009f9a:	00 90       	ret 

80009f9c <GetTaskID>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009eb0:	40 ae       	mov.aa %a14,%sp
=======
80009c94:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009f9c:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
80009eb2:	91 00 00 f8 	movh.a %a15,32768
80009eb6:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
80009c96:	91 00 00 f8 	movh.a %a15,32768
80009c9a:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009f9e:	91 00 00 f8 	movh.a %a15,32768
80009fa2:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
<<<<<<< HEAD
<<<<<<< HEAD
80009eba:	3b e0 00 20 	mov %d2,14
=======
80009c9e:	3b e0 00 20 	mov %d2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fa6:	3b e0 00 20 	mov %d2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
80009ebe:	bd 04 24 00 	jz.a %a4,80009f06 <GetTaskID+0x56>
=======
80009ca2:	bd 04 24 00 	jz.a %a4,80009cea <GetTaskID+0x56>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009faa:	bd 04 24 00 	jz.a %a4,80009ff2 <GetTaskID+0x56>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
<<<<<<< HEAD
<<<<<<< HEAD
80009ec2:	c8 02       	ld.a %a2,[%a15]0
=======
80009ca6:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fae:	c8 02       	ld.a %a2,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
<<<<<<< HEAD
<<<<<<< HEAD
80009ec4:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ec8:	ff 2f 05 80 	jge.u %d15,2,80009ed2 <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009ecc:	19 22 10 00 	ld.w %d2,[%a2]16
80009ed0:	3c 19       	j 80009f02 <GetTaskID+0x52>
=======
80009ca8:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009cac:	ff 2f 05 80 	jge.u %d15,2,80009cb6 <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009cb0:	19 22 10 00 	ld.w %d2,[%a2]16
80009cb4:	3c 19       	j 80009ce6 <GetTaskID+0x52>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fb0:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009fb4:	ff 2f 05 80 	jge.u %d15,2,80009fbe <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009fb8:	19 22 10 00 	ld.w %d2,[%a2]16
80009fbc:	3c 19       	j 80009fee <GetTaskID+0x52>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
<<<<<<< HEAD
<<<<<<< HEAD
80009ed2:	82 f2       	mov %d2,-1
=======
80009cb6:	82 f2       	mov %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fbe:	82 f2       	mov %d2,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
<<<<<<< HEAD
<<<<<<< HEAD
80009ed4:	de 27       	jne %d15,2,80009f02 <GetTaskID+0x52>
=======
80009cb8:	de 27       	jne %d15,2,80009ce6 <GetTaskID+0x52>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fc0:	de 27       	jne %d15,2,80009fee <GetTaskID+0x52>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
<<<<<<< HEAD
<<<<<<< HEAD
80009ed6:	c8 3f       	ld.a %a15,[%a15]12
80009ed8:	c8 0f       	ld.a %a15,[%a15]0
=======
80009fc2:	c8 3f       	ld.a %a15,[%a15]12
80009fc4:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

      while (p_sn != NULL) {
80009fc6:	bd 0f 14 00 	jz.a %a15,80009fee <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009fca:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
<<<<<<< HEAD
80009ee0:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ee4:	ff 2f 0b 80 	jge.u %d15,2,80009efa <GetTaskID+0x4a>
80009ee8:	3c 06       	j 80009ef4 <GetTaskID+0x44>
=======
80009cba:	c8 3f       	ld.a %a15,[%a15]12
80009cbc:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
80009cbe:	bd 0f 14 00 	jz.a %a15,80009ce6 <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009cc2:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009cc4:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009cc8:	ff 2f 0b 80 	jge.u %d15,2,80009cde <GetTaskID+0x4a>
80009ccc:	3c 06       	j 80009cd8 <GetTaskID+0x44>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fcc:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009fd0:	ff 2f 0b 80 	jge.u %d15,2,80009fe6 <GetTaskID+0x4a>
80009fd4:	3c 06       	j 80009fe0 <GetTaskID+0x44>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
<<<<<<< HEAD
<<<<<<< HEAD
80009eea:	c8 12       	ld.a %a2,[%a15]4
=======
80009fd6:	c8 12       	ld.a %a2,[%a15]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009fd8:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009fdc:	ff 2f 05 80 	jge.u %d15,2,80009fe6 <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
80009fe0:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
80009fe4:	3c 05       	j 80009fee <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
<<<<<<< HEAD
80009efa:	c8 0f       	ld.a %a15,[%a15]0
=======
80009cce:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009cd0:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009cd4:	ff 2f 05 80 	jge.u %d15,2,80009cde <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
80009cd8:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
80009cdc:	3c 05       	j 80009ce6 <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
80009cde:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fe6:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
80009efc:	bd 0f f7 ff 	jnz.a %a15,80009eea <GetTaskID+0x3a>
=======
80009ce0:	bd 0f f7 ff 	jnz.a %a15,80009cce <GetTaskID+0x3a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fe8:	bd 0f f7 ff 	jnz.a %a15,80009fd6 <GetTaskID+0x3a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
<<<<<<< HEAD
<<<<<<< HEAD
80009f00:	82 f2       	mov %d2,-1
=======
80009ce4:	82 f2       	mov %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fec:	82 f2       	mov %d2,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
<<<<<<< HEAD
<<<<<<< HEAD
80009f02:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009f04:	82 02       	mov %d2,0
=======
80009ce6:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009ce8:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009fee:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009ff0:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009f06:	00 90       	ret 

80009f08 <GetTaskState>:
=======
80009cea:	00 90       	ret 

80009cec <GetTaskState>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ff2:	00 90       	ret 

80009ff4 <GetTaskState>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009f08:	40 ae       	mov.aa %a14,%sp
=======
80009cec:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ff4:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
<<<<<<< HEAD
<<<<<<< HEAD
80009f0a:	3b e0 00 20 	mov %d2,14
=======
80009cee:	3b e0 00 20 	mov %d2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ff6:	3b e0 00 20 	mov %d2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
80009f0e:	bd 04 38 00 	jz.a %a4,80009f7e <GetTaskState+0x76>
=======
80009cf2:	bd 04 38 00 	jz.a %a4,80009d62 <GetTaskState+0x76>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ffa:	bd 04 38 00 	jz.a %a4,8000a06a <GetTaskState+0x76>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
<<<<<<< HEAD
<<<<<<< HEAD
80009f12:	91 00 00 f8 	movh.a %a15,32768
80009f16:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009f1a:	4c f2       	ld.w %d15,[%a15]8
=======
80009cf6:	91 00 00 f8 	movh.a %a15,32768
80009cfa:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009cfe:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
80009ffe:	91 00 00 f8 	movh.a %a15,32768
8000a002:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a006:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
<<<<<<< HEAD
<<<<<<< HEAD
80009f1c:	82 32       	mov %d2,3
=======
80009d00:	82 32       	mov %d2,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a008:	82 32       	mov %d2,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
<<<<<<< HEAD
<<<<<<< HEAD
80009f1e:	7f f4 30 80 	jge.u %d4,%d15,80009f7e <GetTaskState+0x76>
=======
80009d02:	7f f4 30 80 	jge.u %d4,%d15,80009d62 <GetTaskState+0x76>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a00a:	7f f4 30 80 	jge.u %d4,%d15,8000a06a <GetTaskState+0x76>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
<<<<<<< HEAD
<<<<<<< HEAD
80009f22:	91 00 00 f8 	movh.a %a15,32768
80009f26:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009f2a:	c8 1f       	ld.a %a15,[%a15]4
80009f2c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
=======
8000a00e:	91 00 00 f8 	movh.a %a15,32768
8000a012:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a016:	c8 1f       	ld.a %a15,[%a15]4
8000a018:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
8000a01c:	c8 0f       	ld.a %a15,[%a15]0
8000a01e:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
<<<<<<< HEAD
80009f34:	0c f2       	ld.bu %d15,[%a15]2
=======
80009d06:	91 00 00 f8 	movh.a %a15,32768
80009d0a:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009d0e:	c8 1f       	ld.a %a15,[%a15]4
80009d10:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
80009d14:	c8 0f       	ld.a %a15,[%a15]0
80009d16:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
80009d18:	0c f2       	ld.bu %d15,[%a15]2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a020:	0c f2       	ld.bu %d15,[%a15]2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
<<<<<<< HEAD
<<<<<<< HEAD
80009f36:	82 02       	mov %d2,0
=======
80009d1a:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a022:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
<<<<<<< HEAD
<<<<<<< HEAD
80009f38:	ff 6f 23 80 	jge.u %d15,6,80009f7e <GetTaskState+0x76>
80009f3c:	91 10 00 f8 	movh.a %a15,32769
80009f40:	d9 ff c8 d9 	lea %a15,[%a15]-24760 <80009f48 <GetTaskState+0x40>>
80009f44:	90 ff       	addsc.a %a15,%a15,%d15,2
80009f46:	dc 0f       	ji %a15
80009f48:	1d 00 0c 00 	j 80009f60 <GetTaskState+0x58>
80009f4c:	1d 00 0e 00 	j 80009f68 <GetTaskState+0x60>
80009f50:	1d 00 0c 00 	j 80009f68 <GetTaskState+0x60>
80009f54:	1d 00 0e 00 	j 80009f70 <GetTaskState+0x68>
80009f58:	1d 00 10 00 	j 80009f78 <GetTaskState+0x70>
80009f5c:	1d 00 0e 00 	j 80009f78 <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009f60:	82 0f       	mov %d15,0
80009f62:	2c 40       	st.b [%a4]0,%d15
=======
80009d1c:	ff 6f 23 80 	jge.u %d15,6,80009d62 <GetTaskState+0x76>
80009d20:	91 10 00 f8 	movh.a %a15,32769
80009d24:	d9 ff ec 49 	lea %a15,[%a15]-25300 <80009d2c <GetTaskState+0x40>>
80009d28:	90 ff       	addsc.a %a15,%a15,%d15,2
80009d2a:	dc 0f       	ji %a15
80009d2c:	1d 00 0c 00 	j 80009d44 <GetTaskState+0x58>
80009d30:	1d 00 0e 00 	j 80009d4c <GetTaskState+0x60>
80009d34:	1d 00 0c 00 	j 80009d4c <GetTaskState+0x60>
80009d38:	1d 00 0e 00 	j 80009d54 <GetTaskState+0x68>
80009d3c:	1d 00 10 00 	j 80009d5c <GetTaskState+0x70>
80009d40:	1d 00 0e 00 	j 80009d5c <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009d44:	82 0f       	mov %d15,0
80009d46:	2c 40       	st.b [%a4]0,%d15
=======
8000a024:	ff 6f 23 80 	jge.u %d15,6,8000a06a <GetTaskState+0x76>
8000a028:	91 10 00 f8 	movh.a %a15,32769
8000a02c:	d9 ff 34 0a 	lea %a15,[%a15]-24524 <8000a034 <GetTaskState+0x40>>
8000a030:	90 ff       	addsc.a %a15,%a15,%d15,2
8000a032:	dc 0f       	ji %a15
8000a034:	1d 00 0c 00 	j 8000a04c <GetTaskState+0x58>
8000a038:	1d 00 0e 00 	j 8000a054 <GetTaskState+0x60>
8000a03c:	1d 00 0c 00 	j 8000a054 <GetTaskState+0x60>
8000a040:	1d 00 0e 00 	j 8000a05c <GetTaskState+0x68>
8000a044:	1d 00 10 00 	j 8000a064 <GetTaskState+0x70>
8000a048:	1d 00 0e 00 	j 8000a064 <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
8000a04c:	82 0f       	mov %d15,0
8000a04e:	2c 40       	st.b [%a4]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
<<<<<<< HEAD
80009d48:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
80009d4a:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009d4c:	82 1f       	mov %d15,1
80009d4e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009d50:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
80009d52:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009d54:	82 3f       	mov %d15,3
80009d56:	2c 40       	st.b [%a4]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
<<<<<<< HEAD
80009f64:	82 02       	mov %d2,0
=======
8000a050:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
8000a052:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
<<<<<<< HEAD
80009f68:	82 1f       	mov %d15,1
80009f6a:	2c 40       	st.b [%a4]0,%d15
=======
80009d58:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
80009d5a:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009d5c:	82 4f       	mov %d15,4
80009d5e:	2c 40       	st.b [%a4]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a054:	82 1f       	mov %d15,1
8000a056:	2c 40       	st.b [%a4]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
<<<<<<< HEAD
<<<<<<< HEAD
80009f6c:	82 02       	mov %d2,0
=======
8000a058:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
8000a05a:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
8000a05c:	82 3f       	mov %d15,3
8000a05e:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000a060:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
8000a062:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
8000a064:	82 4f       	mov %d15,4
8000a066:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
<<<<<<< HEAD
80009f7c:	82 02       	mov %d2,0
=======
80009d60:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a068:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009f7e:	00 90       	ret 

80009f80 <WaitEvent>:
=======
80009d62:	00 90       	ret 

80009d64 <WaitEvent>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a06a:	00 90       	ret 

8000a06c <WaitEvent>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009f80:	40 ae       	mov.aa %a14,%sp
=======
80009d64:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a06c:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
80009f82:	91 00 00 f8 	movh.a %a15,32768
80009f86:	99 fc 30 40 	ld.a %a12,[%a15]304 <80000130 <osEE_cdb_var>>
=======
8000a06e:	91 00 00 f8 	movh.a %a15,32768
8000a072:	99 fc 08 50 	ld.a %a12,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a076:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
<<<<<<< HEAD
80009f8c:	cc d3       	ld.a %a15,[%a13]12
=======
80009d66:	91 00 00 f8 	movh.a %a15,32768
80009d6a:	99 fc 0c 30 	ld.a %a12,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009d6e:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009d70:	cc d3       	ld.a %a15,[%a13]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a078:	cc d3       	ld.a %a15,[%a13]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009f8e:	4d c0 e2 8f 	mfcr %d8,$icr
=======
80009d72:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a07a:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
80009f92:	8f f8 0f f1 	and %d15,%d8,255
80009f96:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009f9a:	ee 0a       	jnz %d15,80009fae <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009f9c:	02 8f       	mov %d15,%d8
80009f9e:	3b 30 01 20 	mov %d2,19
80009fa2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009d76:	8f f8 0f f1 	and %d15,%d8,255
80009d7a:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009d7e:	ee 0a       	jnz %d15,80009d92 <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009d80:	02 8f       	mov %d15,%d8
80009d82:	3b 30 01 20 	mov %d2,19
80009d86:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a07e:	8f f8 0f f1 	and %d15,%d8,255
8000a082:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a086:	ee 0a       	jnz %d15,8000a09a <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
8000a088:	02 8f       	mov %d15,%d8
8000a08a:	3b 30 01 20 	mov %d2,19
8000a08e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009fa6:	cd cf e2 0f 	mtcr $icr,%d15
80009faa:	0d 00 c0 04 	isync 
=======
80009d8a:	cd cf e2 0f 	mtcr $icr,%d15
80009d8e:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a092:	cd cf e2 0f 	mtcr $icr,%d15
8000a096:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
80009fae:	4c f3       	ld.w %d15,[%a15]12
80009fb0:	26 4f       	and %d15,%d4
80009fb2:	ee 13       	jnz %d15,80009fd8 <WaitEvent+0x58>
=======
8000a09a:	4c f3       	ld.w %d15,[%a15]12
8000a09c:	26 4f       	and %d15,%d4
8000a09e:	ee 13       	jnz %d15,8000a0c4 <WaitEvent+0x58>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
8000a0a0:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
<<<<<<< HEAD
80009fb6:	91 00 00 48 	movh.a %a4,32768
80009fba:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
80009fbe:	d9 c5 04 00 	lea %a5,[%a12]4 <80000130 <osEE_cdb_var>>
80009fc2:	6d 00 98 01 	call 8000a2f2 <osEE_scheduler_core_pop_running>
=======
80009d92:	4c f3       	ld.w %d15,[%a15]12
80009d94:	26 4f       	and %d15,%d4
80009d96:	ee 13       	jnz %d15,80009dbc <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
80009d98:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009d9a:	91 00 00 48 	movh.a %a4,32768
80009d9e:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
80009da2:	d9 c5 04 00 	lea %a5,[%a12]4 <800000cc <osEE_cdb_var>>
80009da6:	6d 00 98 01 	call 8000a0d6 <osEE_scheduler_core_pop_running>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0a2:	91 00 00 48 	movh.a %a4,32768
8000a0a6:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a0aa:	d9 c5 04 00 	lea %a5,[%a12]4 <80000148 <osEE_cdb_var>>
8000a0ae:	6d 00 98 01 	call 8000a3de <osEE_scheduler_core_pop_running>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
<<<<<<< HEAD
<<<<<<< HEAD
80009fc6:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
80009fc8:	82 3f       	mov %d15,3
80009fca:	28 2f       	st.b [%a15]2,%d15
=======
80009daa:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
80009dac:	82 3f       	mov %d15,3
80009dae:	28 2f       	st.b [%a15]2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0b2:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
8000a0b4:	82 3f       	mov %d15,3
8000a0b6:	28 2f       	st.b [%a15]2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
<<<<<<< HEAD
<<<<<<< HEAD
80009fcc:	40 d4       	mov.aa %a4,%a13
80009fce:	d4 c5       	ld.a %a5,[%a12]
80009fd0:	6d 00 c1 02 	call 8000a552 <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
80009fd4:	82 0f       	mov %d15,0
80009fd6:	68 2f       	st.w [%a15]8,%d15
=======
80009db0:	40 d4       	mov.aa %a4,%a13
80009db2:	d4 c5       	ld.a %a5,[%a12]
80009db4:	6d 00 c1 02 	call 8000a336 <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
80009db8:	82 0f       	mov %d15,0
80009dba:	68 2f       	st.w [%a15]8,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0b8:	40 d4       	mov.aa %a4,%a13
8000a0ba:	d4 c5       	ld.a %a5,[%a12]
8000a0bc:	6d 00 c1 02 	call 8000a63e <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
8000a0c0:	82 0f       	mov %d15,0
8000a0c2:	68 2f       	st.w [%a15]8,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
80009fd8:	4d c0 e2 3f 	mfcr %d3,$icr
80009fdc:	02 3f       	mov %d15,%d3
80009fde:	8f f3 0f 31 	and %d3,%d3,255
=======
80009dbc:	4d c0 e2 3f 	mfcr %d3,$icr
80009dc0:	02 3f       	mov %d15,%d3
80009dc2:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0c4:	4d c0 e2 3f 	mfcr %d3,$icr
8000a0c8:	02 3f       	mov %d15,%d3
8000a0ca:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
80009fe2:	8f f8 0f 21 	and %d2,%d8,255
80009fe6:	5f 23 08 00 	jeq %d3,%d2,80009ff6 <WaitEvent+0x76>
80009fea:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009dc6:	8f f8 0f 21 	and %d2,%d8,255
80009dca:	5f 23 08 00 	jeq %d3,%d2,80009dda <WaitEvent+0x76>
80009dce:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0ce:	8f f8 0f 21 	and %d2,%d8,255
8000a0d2:	5f 23 08 00 	jeq %d3,%d2,8000a0e2 <WaitEvent+0x76>
8000a0d6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
80009fee:	cd cf e2 0f 	mtcr $icr,%d15
80009ff2:	0d 00 c0 04 	isync 
=======
80009dd2:	cd cf e2 0f 	mtcr $icr,%d15
80009dd6:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0da:	cd cf e2 0f 	mtcr $icr,%d15
8000a0de:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
80009ff6:	82 02       	mov %d2,0
80009ff8:	00 90       	ret 

80009ffa <SetEvent>:
=======
80009dda:	82 02       	mov %d2,0
80009ddc:	00 90       	ret 

80009dde <SetEvent>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0e2:	82 02       	mov %d2,0
8000a0e4:	00 90       	ret 

8000a0e6 <SetEvent>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
<<<<<<< HEAD
<<<<<<< HEAD
80009ffa:	40 ae       	mov.aa %a14,%sp
80009ffc:	20 08       	sub.a %sp,8
80009ffe:	91 00 00 f8 	movh.a %a15,32768
8000a002:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a006:	4c f2       	ld.w %d15,[%a15]8
=======
80009dde:	40 ae       	mov.aa %a14,%sp
80009de0:	20 08       	sub.a %sp,8
80009de2:	91 00 00 f8 	movh.a %a15,32768
80009de6:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009dea:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0e6:	40 ae       	mov.aa %a14,%sp
8000a0e8:	20 08       	sub.a %sp,8
8000a0ea:	91 00 00 f8 	movh.a %a15,32768
8000a0ee:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a0f2:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a008:	3f f4 06 80 	jlt.u %d4,%d15,8000a014 <SetEvent+0x1a>
    ev = E_OS_ID;
8000a00c:	82 3f       	mov %d15,3
8000a00e:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000a012:	3c 3c       	j 8000a08a <SetEvent+0x90>
=======
80009dec:	3f f4 06 80 	jlt.u %d4,%d15,80009df8 <SetEvent+0x1a>
    ev = E_OS_ID;
80009df0:	82 3f       	mov %d15,3
80009df2:	e9 ef ff ff 	st.b [%a14]-1,%d15
80009df6:	3c 3c       	j 80009e6e <SetEvent+0x90>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a0f4:	3f f4 06 80 	jlt.u %d4,%d15,8000a100 <SetEvent+0x1a>
    ev = E_OS_ID;
8000a0f8:	82 3f       	mov %d15,3
8000a0fa:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000a0fe:	3c 3c       	j 8000a176 <SetEvent+0x90>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
<<<<<<< HEAD
<<<<<<< HEAD
8000a014:	91 00 00 f8 	movh.a %a15,32768
8000a018:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a01c:	c8 1f       	ld.a %a15,[%a15]4
8000a01e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a022:	c8 04       	ld.a %a4,[%a15]0
=======
80009df8:	91 00 00 f8 	movh.a %a15,32768
80009dfc:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009e00:	c8 1f       	ld.a %a15,[%a15]4
80009e02:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009e06:	c8 04       	ld.a %a4,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a100:	91 00 00 f8 	movh.a %a15,32768
8000a104:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a108:	c8 1f       	ld.a %a15,[%a15]4
8000a10a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a10e:	c8 04       	ld.a %a4,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000a024:	4d c0 e2 8f 	mfcr %d8,$icr
=======
80009e08:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a110:	4d c0 e2 8f 	mfcr %d8,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a028:	8f f8 0f f1 	and %d15,%d8,255
8000a02c:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a030:	ee 0a       	jnz %d15,8000a044 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
8000a032:	02 8f       	mov %d15,%d8
8000a034:	3b 30 01 20 	mov %d2,19
8000a038:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009e0c:	8f f8 0f f1 	and %d15,%d8,255
80009e10:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009e14:	ee 0a       	jnz %d15,80009e28 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
80009e16:	02 8f       	mov %d15,%d8
80009e18:	3b 30 01 20 	mov %d2,19
80009e1c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a114:	8f f8 0f f1 	and %d15,%d8,255
8000a118:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a11c:	ee 0a       	jnz %d15,8000a130 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
8000a11e:	02 8f       	mov %d15,%d8
8000a120:	3b 30 01 20 	mov %d2,19
8000a124:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a03c:	cd cf e2 0f 	mtcr $icr,%d15
8000a040:	0d 00 c0 04 	isync 
8000a044:	02 54       	mov %d4,%d5
=======
80009e20:	cd cf e2 0f 	mtcr $icr,%d15
80009e24:	0d 00 c0 04 	isync 
80009e28:	02 54       	mov %d4,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a128:	cd cf e2 0f 	mtcr $icr,%d15
8000a12c:	0d 00 c0 04 	isync 
8000a130:	02 54       	mov %d4,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
<<<<<<< HEAD
<<<<<<< HEAD
8000a046:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000a04a:	6d 00 82 01 	call 8000a34e <osEE_task_event_set_mask>
=======
8000a132:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000a136:	6d 00 82 01 	call 8000a43a <osEE_task_event_set_mask>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    if (p_sn != NULL) {
8000a13a:	bc 2f       	jz.a %a2,8000a158 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
8000a13c:	91 00 00 48 	movh.a %a4,32768
8000a140:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a144:	40 25       	mov.aa %a5,%a2
8000a146:	6d 00 e7 01 	call 8000a514 <osEE_scheduler_task_unblocked>
8000a14a:	76 27       	jz %d2,8000a158 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
<<<<<<< HEAD
8000a060:	91 00 00 48 	movh.a %a4,32768
8000a064:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
8000a068:	6d 00 43 02 	call 8000a4ee <osEE_scheduler_task_preemption_point>
=======
80009e2a:	d9 e5 ff ff 	lea %a5,[%a14]-1
80009e2e:	6d 00 82 01 	call 8000a132 <osEE_task_event_set_mask>

    if (p_sn != NULL) {
80009e32:	bc 2f       	jz.a %a2,80009e50 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
80009e34:	91 00 00 48 	movh.a %a4,32768
80009e38:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009e3c:	40 25       	mov.aa %a5,%a2
80009e3e:	6d 00 e7 01 	call 8000a20c <osEE_scheduler_task_unblocked>
80009e42:	76 27       	jz %d2,80009e50 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
80009e44:	91 00 00 48 	movh.a %a4,32768
80009e48:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
80009e4c:	6d 00 43 02 	call 8000a2d2 <osEE_scheduler_task_preemption_point>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a14c:	91 00 00 48 	movh.a %a4,32768
8000a150:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a154:	6d 00 43 02 	call 8000a5da <osEE_scheduler_task_preemption_point>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000a06c:	4d c0 e2 3f 	mfcr %d3,$icr
8000a070:	02 3f       	mov %d15,%d3
8000a072:	8f f3 0f 31 	and %d3,%d3,255
=======
80009e50:	4d c0 e2 3f 	mfcr %d3,$icr
80009e54:	02 3f       	mov %d15,%d3
80009e56:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a158:	4d c0 e2 3f 	mfcr %d3,$icr
8000a15c:	02 3f       	mov %d15,%d3
8000a15e:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a076:	8f f8 0f 21 	and %d2,%d8,255
8000a07a:	5f 23 08 00 	jeq %d3,%d2,8000a08a <SetEvent+0x90>
8000a07e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009e5a:	8f f8 0f 21 	and %d2,%d8,255
80009e5e:	5f 23 08 00 	jeq %d3,%d2,80009e6e <SetEvent+0x90>
80009e62:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a162:	8f f8 0f 21 	and %d2,%d8,255
8000a166:	5f 23 08 00 	jeq %d3,%d2,8000a176 <SetEvent+0x90>
8000a16a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a082:	cd cf e2 0f 	mtcr $icr,%d15
8000a086:	0d 00 c0 04 	isync 
=======
80009e66:	cd cf e2 0f 	mtcr $icr,%d15
80009e6a:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a16e:	cd cf e2 0f 	mtcr $icr,%d15
8000a172:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a08a:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000a08e:	00 90       	ret 

8000a090 <GetEvent>:
=======
80009e6e:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
80009e72:	00 90       	ret 

80009e74 <GetEvent>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a176:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000a17a:	00 90       	ret 

8000a17c <GetEvent>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a090:	40 ae       	mov.aa %a14,%sp
8000a092:	91 00 00 f8 	movh.a %a15,32768
8000a096:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a09a:	4c f2       	ld.w %d15,[%a15]8
=======
80009e74:	40 ae       	mov.aa %a14,%sp
80009e76:	91 00 00 f8 	movh.a %a15,32768
80009e7a:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009e7e:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a17c:	40 ae       	mov.aa %a14,%sp
8000a17e:	91 00 00 f8 	movh.a %a15,32768
8000a182:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a186:	4c f2       	ld.w %d15,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
<<<<<<< HEAD
<<<<<<< HEAD
8000a09c:	82 32       	mov %d2,3
=======
80009e80:	82 32       	mov %d2,3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a188:	82 32       	mov %d2,3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a09e:	7f f4 11 80 	jge.u %d4,%d15,8000a0c0 <GetEvent+0x30>
=======
80009e82:	7f f4 11 80 	jge.u %d4,%d15,80009ea4 <GetEvent+0x30>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a18a:	7f f4 11 80 	jge.u %d4,%d15,8000a1ac <GetEvent+0x30>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
<<<<<<< HEAD
<<<<<<< HEAD
8000a0a2:	91 00 00 f8 	movh.a %a15,32768
8000a0a6:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a0aa:	c8 1f       	ld.a %a15,[%a15]4
8000a0ac:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
8000a0b0:	c8 0f       	ld.a %a15,[%a15]0
8000a0b2:	c8 3f       	ld.a %a15,[%a15]12
=======
80009e86:	91 00 00 f8 	movh.a %a15,32768
80009e8a:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
80009e8e:	c8 1f       	ld.a %a15,[%a15]4
80009e90:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
80009e94:	c8 0f       	ld.a %a15,[%a15]0
80009e96:	c8 3f       	ld.a %a15,[%a15]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a18e:	91 00 00 f8 	movh.a %a15,32768
8000a192:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a196:	c8 1f       	ld.a %a15,[%a15]4
8000a198:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
8000a19c:	c8 0f       	ld.a %a15,[%a15]0
8000a19e:	c8 3f       	ld.a %a15,[%a15]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
<<<<<<< HEAD
<<<<<<< HEAD
8000a0b4:	3b e0 00 20 	mov %d2,14
=======
80009e98:	3b e0 00 20 	mov %d2,14
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1a0:	3b e0 00 20 	mov %d2,14
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a0b8:	bc 44       	jz.a %a4,8000a0c0 <GetEvent+0x30>
=======
80009e9c:	bc 44       	jz.a %a4,80009ea4 <GetEvent+0x30>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1a4:	bc 44       	jz.a %a4,8000a1ac <GetEvent+0x30>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
<<<<<<< HEAD
<<<<<<< HEAD
8000a0ba:	4c f3       	ld.w %d15,[%a15]12
8000a0bc:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a0be:	82 02       	mov %d2,0
=======
80009e9e:	4c f3       	ld.w %d15,[%a15]12
80009ea0:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
80009ea2:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1a6:	4c f3       	ld.w %d15,[%a15]12
8000a1a8:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a1aa:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a0c0:	00 90       	ret 

8000a0c2 <ClearEvent>:
=======
80009ea4:	00 90       	ret 

80009ea6 <ClearEvent>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1ac:	00 90       	ret 

8000a1ae <ClearEvent>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a0c2:	40 ae       	mov.aa %a14,%sp
=======
80009ea6:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1ae:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a0c4:	91 00 00 f8 	movh.a %a15,32768
=======
8000a1b0:	91 00 00 f8 	movh.a %a15,32768
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a1b4:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
<<<<<<< HEAD
8000a0cc:	c8 0f       	ld.a %a15,[%a15]0
8000a0ce:	c8 3f       	ld.a %a15,[%a15]12
=======
80009ea8:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009eac:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009eb0:	c8 0f       	ld.a %a15,[%a15]0
80009eb2:	c8 3f       	ld.a %a15,[%a15]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1b8:	c8 0f       	ld.a %a15,[%a15]0
8000a1ba:	c8 3f       	ld.a %a15,[%a15]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000a0d0:	4d c0 e2 2f 	mfcr %d2,$icr
=======
80009eb4:	4d c0 e2 2f 	mfcr %d2,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1bc:	4d c0 e2 2f 	mfcr %d2,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a0d4:	8f f2 0f f1 	and %d15,%d2,255
8000a0d8:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a0dc:	ee 0a       	jnz %d15,8000a0f0 <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
8000a0de:	02 2f       	mov %d15,%d2
8000a0e0:	3b 30 01 30 	mov %d3,19
8000a0e4:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
=======
80009eb8:	8f f2 0f f1 	and %d15,%d2,255
80009ebc:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009ec0:	ee 0a       	jnz %d15,80009ed4 <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009ec2:	02 2f       	mov %d15,%d2
80009ec4:	3b 30 01 30 	mov %d3,19
80009ec8:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1c0:	8f f2 0f f1 	and %d15,%d2,255
8000a1c4:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a1c8:	ee 0a       	jnz %d15,8000a1dc <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
8000a1ca:	02 2f       	mov %d15,%d2
8000a1cc:	3b 30 01 30 	mov %d3,19
8000a1d0:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a0e8:	cd cf e2 0f 	mtcr $icr,%d15
8000a0ec:	0d 00 c0 04 	isync 
=======
80009ecc:	cd cf e2 0f 	mtcr $icr,%d15
80009ed0:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1d4:	cd cf e2 0f 	mtcr $icr,%d15
8000a1d8:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
<<<<<<< HEAD
<<<<<<< HEAD
8000a0f0:	4c f3       	ld.w %d15,[%a15]12
8000a0f2:	0f 4f e0 40 	andn %d4,%d15,%d4
8000a0f6:	68 34       	st.w [%a15]12,%d4
=======
80009ed4:	4c f3       	ld.w %d15,[%a15]12
80009ed6:	0f 4f e0 40 	andn %d4,%d15,%d4
80009eda:	68 34       	st.w [%a15]12,%d4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1dc:	4c f3       	ld.w %d15,[%a15]12
8000a1de:	0f 4f e0 40 	andn %d4,%d15,%d4
8000a1e2:	68 34       	st.w [%a15]12,%d4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000a0f8:	4d c0 e2 3f 	mfcr %d3,$icr
8000a0fc:	02 3f       	mov %d15,%d3
8000a0fe:	8f f3 0f 31 	and %d3,%d3,255
=======
80009edc:	4d c0 e2 3f 	mfcr %d3,$icr
80009ee0:	02 3f       	mov %d15,%d3
80009ee2:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1e4:	4d c0 e2 3f 	mfcr %d3,$icr
8000a1e8:	02 3f       	mov %d15,%d3
8000a1ea:	8f f3 0f 31 	and %d3,%d3,255
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a102:	8f f2 0f 21 	and %d2,%d2,255
8000a106:	5f 23 08 00 	jeq %d3,%d2,8000a116 <ClearEvent+0x54>
8000a10a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009ee6:	8f f2 0f 21 	and %d2,%d2,255
80009eea:	5f 23 08 00 	jeq %d3,%d2,80009efa <ClearEvent+0x54>
80009eee:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1ee:	8f f2 0f 21 	and %d2,%d2,255
8000a1f2:	5f 23 08 00 	jeq %d3,%d2,8000a202 <ClearEvent+0x54>
8000a1f6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a10e:	cd cf e2 0f 	mtcr $icr,%d15
8000a112:	0d 00 c0 04 	isync 
=======
80009ef2:	cd cf e2 0f 	mtcr $icr,%d15
80009ef6:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a1fa:	cd cf e2 0f 	mtcr $icr,%d15
8000a1fe:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a116:	82 02       	mov %d2,0
8000a118:	00 90       	ret 

8000a11a <GetISRID>:
=======
80009efa:	82 02       	mov %d2,0
80009efc:	00 90       	ret 

80009efe <GetISRID>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a202:	82 02       	mov %d2,0
8000a204:	00 90       	ret 

8000a206 <GetISRID>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a11a:	40 ae       	mov.aa %a14,%sp
=======
80009efe:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a206:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
<<<<<<< HEAD
<<<<<<< HEAD
8000a11c:	91 00 00 f8 	movh.a %a15,32768
8000a120:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
8000a124:	c8 0f       	ld.a %a15,[%a15]0
=======
80009f00:	91 00 00 f8 	movh.a %a15,32768
80009f04:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009f08:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a208:	91 00 00 f8 	movh.a %a15,32768
8000a20c:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
8000a210:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a126:	39 ff 14 00 	ld.bu %d15,[%a15]20 <80000130 <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
8000a12a:	82 f2       	mov %d2,-1
=======
80009f0a:	39 ff 14 00 	ld.bu %d15,[%a15]20 <800000cc <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
80009f0e:	82 f2       	mov %d2,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a212:	39 ff 14 00 	ld.bu %d15,[%a15]20 <80000148 <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
8000a216:	82 f2       	mov %d2,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a12c:	5e 22       	jne %d15,2,8000a130 <GetISRID+0x16>
    isr_id = p_tdb->tid;
8000a12e:	48 42       	ld.w %d2,[%a15]16
=======
80009f10:	5e 22       	jne %d15,2,80009f14 <GetISRID+0x16>
    isr_id = p_tdb->tid;
80009f12:	48 42       	ld.w %d2,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a218:	5e 22       	jne %d15,2,8000a21c <GetISRID+0x16>
    isr_id = p_tdb->tid;
8000a21a:	48 42       	ld.w %d2,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a130:	00 90       	ret 
	...

8000a134 <osEE_release_all_m>:
=======
80009f14:	00 90       	ret 
	...

80009f18 <osEE_release_all_m>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a21c:	00 90       	ret 
	...

8000a220 <osEE_release_all_m>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a134:	40 ae       	mov.aa %a14,%sp
=======
8000a220:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a222:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
<<<<<<< HEAD
8000a13a:	cc 31       	ld.a %a15,[%a3]4
=======
80009f18:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009f1a:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
80009f1e:	cc 31       	ld.a %a15,[%a3]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a226:	cc 31       	ld.a %a15,[%a3]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
8000a13c:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a13e:	bc fb       	jz.a %a15,8000a154 <osEE_release_all_m+0x20>
=======
80009f20:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009f22:	bc fb       	jz.a %a15,80009f38 <osEE_release_all_m+0x20>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a228:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a22a:	bc fb       	jz.a %a15,8000a240 <osEE_release_all_m+0x20>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
8000a140:	82 0f       	mov %d15,0
=======
80009f24:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a22c:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a142:	c8 0f       	ld.a %a15,[%a15]0
=======
8000a22e:	c8 0f       	ld.a %a15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000a230:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
8000a232:	7c 23       	jnz.a %a2,8000a238 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
<<<<<<< HEAD
8000a148:	99 32 04 00 	ld.a %a2,[%a3]4
=======
80009f26:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009f28:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
80009f2a:	7c 23       	jnz.a %a2,80009f30 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
80009f2c:	99 32 04 00 	ld.a %a2,[%a3]4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a234:	99 32 04 00 	ld.a %a2,[%a3]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
<<<<<<< HEAD
<<<<<<< HEAD
8000a14c:	c8 0f       	ld.a %a15,[%a15]0
8000a14e:	ec 31       	st.a [%a3]4,%a15
=======
80009f30:	c8 0f       	ld.a %a15,[%a15]0
80009f32:	ec 31       	st.a [%a3]4,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a238:	c8 0f       	ld.a %a15,[%a15]0
8000a23a:	ec 31       	st.a [%a3]4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
<<<<<<< HEAD
<<<<<<< HEAD
8000a150:	bd 0f f9 ff 	jnz.a %a15,8000a142 <osEE_release_all_m+0xe>
=======
80009f34:	bd 0f f9 ff 	jnz.a %a15,80009f26 <osEE_release_all_m+0xe>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a23c:	bd 0f f9 ff 	jnz.a %a15,8000a22e <osEE_release_all_m+0xe>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a154:	00 90       	ret 

8000a156 <osEE_scheduler_task_wrapper_restore>:
=======
80009f38:	00 90       	ret 

80009f3a <osEE_scheduler_task_wrapper_restore>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a240:	00 90       	ret 

8000a242 <osEE_scheduler_task_wrapper_restore>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a156:	40 ae       	mov.aa %a14,%sp
=======
80009f3a:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a242:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
<<<<<<< HEAD
<<<<<<< HEAD
8000a158:	cc 43       	ld.a %a15,[%a4]12
8000a15a:	82 4f       	mov %d15,4
8000a15c:	28 2f       	st.b [%a15]2,%d15
8000a15e:	00 90       	ret 

8000a160 <osEE_scheduler_task_wrapper_run>:
=======
80009f3c:	cc 43       	ld.a %a15,[%a4]12
80009f3e:	82 4f       	mov %d15,4
80009f40:	28 2f       	st.b [%a15]2,%d15
80009f42:	00 90       	ret 

80009f44 <osEE_scheduler_task_wrapper_run>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a244:	cc 43       	ld.a %a15,[%a4]12
8000a246:	82 4f       	mov %d15,4
8000a248:	28 2f       	st.b [%a15]2,%d15
8000a24a:	00 90       	ret 

8000a24c <osEE_scheduler_task_wrapper_run>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a160:	40 ae       	mov.aa %a14,%sp
8000a162:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000a164:	99 42 0c 00 	ld.a %a2,[%a4]12
8000a168:	39 22 01 00 	ld.bu %d2,[%a2]1
=======
80009f44:	40 ae       	mov.aa %a14,%sp
80009f46:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
80009f48:	99 42 0c 00 	ld.a %a2,[%a4]12
80009f4c:	39 22 01 00 	ld.bu %d2,[%a2]1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a24c:	40 ae       	mov.aa %a14,%sp
8000a24e:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000a250:	99 42 0c 00 	ld.a %a2,[%a4]12
8000a254:	39 22 01 00 	ld.bu %d2,[%a2]1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
<<<<<<< HEAD
<<<<<<< HEAD
8000a16c:	82 4f       	mov %d15,4
8000a16e:	2c 22       	st.b [%a2]2,%d15
=======
80009f50:	82 4f       	mov %d15,4
80009f52:	2c 22       	st.b [%a2]2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a258:	82 4f       	mov %d15,4
8000a25a:	2c 22       	st.b [%a2]2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a170:	8b f2 0f f2 	eq %d15,%d2,255
8000a174:	ee 13       	jnz %d15,8000a19a <osEE_scheduler_task_wrapper_run+0x3a>
8000a176:	4d c0 e2 ff 	mfcr %d15,$icr
=======
80009f54:	8b f2 0f f2 	eq %d15,%d2,255
80009f58:	ee 13       	jnz %d15,80009f7e <osEE_scheduler_task_wrapper_run+0x3a>
80009f5a:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a25c:	8b f2 0f f2 	eq %d15,%d2,255
8000a260:	ee 13       	jnz %d15,8000a286 <osEE_scheduler_task_wrapper_run+0x3a>
8000a262:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
<<<<<<< HEAD
<<<<<<< HEAD
8000a17a:	37 02 48 40 	extr %d4,%d2,0,8
8000a17e:	82 03       	mov %d3,0
8000a180:	ce 45       	jgez %d4,8000a18a <osEE_scheduler_task_wrapper_run+0x2a>
=======
80009f5e:	37 02 48 40 	extr %d4,%d2,0,8
80009f62:	82 03       	mov %d3,0
80009f64:	ce 45       	jgez %d4,80009f6e <osEE_scheduler_task_wrapper_run+0x2a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a266:	37 02 48 40 	extr %d4,%d2,0,8
8000a26a:	82 03       	mov %d3,0
8000a26c:	ce 45       	jgez %d4,8000a276 <osEE_scheduler_task_wrapper_run+0x2a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
<<<<<<< HEAD
<<<<<<< HEAD
8000a182:	8f f2 07 21 	and %d2,%d2,127
8000a186:	1b 12 00 30 	addi %d3,%d2,1
8000a18a:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
=======
80009f66:	8f f2 07 21 	and %d2,%d2,127
80009f6a:	1b 12 00 30 	addi %d3,%d2,1
80009f6e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a26e:	8f f2 07 21 	and %d2,%d2,127
8000a272:	1b 12 00 30 	addi %d3,%d2,1
8000a276:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a18e:	cd cf e2 0f 	mtcr $icr,%d15
8000a192:	0d 00 c0 04 	isync 
=======
80009f72:	cd cf e2 0f 	mtcr $icr,%d15
80009f76:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a27a:	cd cf e2 0f 	mtcr $icr,%d15
8000a27e:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a196:	0d 00 00 03 	enable 
=======
80009f7a:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a282:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
<<<<<<< HEAD
<<<<<<< HEAD
8000a19a:	c8 62       	ld.a %a2,[%a15]24
8000a19c:	2d 02 00 00 	calli %a2
=======
80009f7e:	c8 62       	ld.a %a2,[%a15]24
80009f80:	2d 02 00 00 	calli %a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a286:	c8 62       	ld.a %a2,[%a15]24
8000a288:	2d 02 00 00 	calli %a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a1a0:	91 00 00 28 	movh.a %a2,32768
8000a1a4:	99 22 30 40 	ld.a %a2,[%a2]304 <80000130 <osEE_cdb_var>>
=======
80009f84:	91 00 00 28 	movh.a %a2,32768
80009f88:	99 22 0c 30 	ld.a %a2,[%a2]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a28c:	91 00 00 28 	movh.a %a2,32768
8000a290:	99 22 08 50 	ld.a %a2,[%a2]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000a1a8:	82 0f       	mov %d15,0
8000a1aa:	e9 2f 1d 00 	st.b [%a2]29,%d15
=======
8000a294:	82 0f       	mov %d15,0
8000a296:	e9 2f 1d 00 	st.b [%a2]29,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
8000a29a:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a29e:	6e 09       	jz %d15,8000a2b0 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
<<<<<<< HEAD
8000a1b4:	82 0f       	mov %d15,0
8000a1b6:	e9 2f 1c 00 	st.b [%a2]28,%d15
=======
80009f8c:	82 0f       	mov %d15,0
80009f8e:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
80009f92:	39 2f 1c 00 	ld.bu %d15,[%a2]28
80009f96:	6e 09       	jz %d15,80009fa8 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
80009f98:	82 0f       	mov %d15,0
80009f9a:	e9 2f 1c 00 	st.b [%a2]28,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2a0:	82 0f       	mov %d15,0
8000a2a2:	e9 2f 1c 00 	st.b [%a2]28,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a1ba:	4c 25       	ld.w %d15,[%a2]20
8000a1bc:	cd cf e2 0f 	mtcr $icr,%d15
8000a1c0:	0d 00 c0 04 	isync 
=======
8000a2a6:	4c 25       	ld.w %d15,[%a2]20
8000a2a8:	cd cf e2 0f 	mtcr $icr,%d15
8000a2ac:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
8000a2b0:	39 2f 1e 00 	ld.bu %d15,[%a2]30
8000a2b4:	6e 06       	jz %d15,8000a2c0 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
<<<<<<< HEAD
8000a1ca:	82 0f       	mov %d15,0
8000a1cc:	e9 2f 1e 00 	st.b [%a2]30,%d15
=======
80009f9e:	4c 25       	ld.w %d15,[%a2]20
80009fa0:	cd cf e2 0f 	mtcr $icr,%d15
80009fa4:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
80009fa8:	39 2f 1e 00 	ld.bu %d15,[%a2]30
80009fac:	6e 06       	jz %d15,80009fb8 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
80009fae:	82 0f       	mov %d15,0
80009fb0:	e9 2f 1e 00 	st.b [%a2]30,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2b6:	82 0f       	mov %d15,0
8000a2b8:	e9 2f 1e 00 	st.b [%a2]30,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a1d0:	0d 00 00 03 	enable 
=======
80009fb4:	0d 00 00 03 	enable 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2bc:	0d 00 00 03 	enable 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
<<<<<<< HEAD
<<<<<<< HEAD
8000a1d4:	4d c0 e2 ff 	mfcr %d15,$icr
=======
80009fb8:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2c0:	4d c0 e2 ff 	mfcr %d15,$icr
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a1d8:	8f ff 0f 21 	and %d2,%d15,255
8000a1dc:	8b 32 a1 22 	ge.u %d2,%d2,19
8000a1e0:	f6 29       	jnz %d2,8000a1f2 <osEE_scheduler_task_wrapper_run+0x92>
8000a1e2:	3b 30 01 20 	mov %d2,19
8000a1e6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
=======
80009fbc:	8f ff 0f 21 	and %d2,%d15,255
80009fc0:	8b 32 a1 22 	ge.u %d2,%d2,19
80009fc4:	f6 29       	jnz %d2,80009fd6 <osEE_scheduler_task_wrapper_run+0x92>
80009fc6:	3b 30 01 20 	mov %d2,19
80009fca:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2c4:	8f ff 0f 21 	and %d2,%d15,255
8000a2c8:	8b 32 a1 22 	ge.u %d2,%d2,19
8000a2cc:	f6 29       	jnz %d2,8000a2de <osEE_scheduler_task_wrapper_run+0x92>
8000a2ce:	3b 30 01 20 	mov %d2,19
8000a2d2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a1ea:	cd cf e2 0f 	mtcr $icr,%d15
8000a1ee:	0d 00 c0 04 	isync 
=======
80009fce:	cd cf e2 0f 	mtcr $icr,%d15
80009fd2:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2d6:	cd cf e2 0f 	mtcr $icr,%d15
8000a2da:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a1f2:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a1f6:	5e 24       	jne %d15,2,8000a1fe <osEE_scheduler_task_wrapper_run+0x9e>
=======
80009fd6:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009fda:	5e 24       	jne %d15,2,80009fe2 <osEE_scheduler_task_wrapper_run+0x9e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2de:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a2e2:	5e 24       	jne %d15,2,8000a2ea <osEE_scheduler_task_wrapper_run+0x9e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
<<<<<<< HEAD
<<<<<<< HEAD
8000a1f8:	40 f4       	mov.aa %a4,%a15
8000a1fa:	5c 9d       	call 8000a134 <osEE_release_all_m>
8000a1fc:	3c 03       	j 8000a202 <osEE_scheduler_task_wrapper_run+0xa2>
=======
80009fdc:	40 f4       	mov.aa %a4,%a15
80009fde:	5c 9d       	call 80009f18 <osEE_release_all_m>
80009fe0:	3c 03       	j 80009fe6 <osEE_scheduler_task_wrapper_run+0xa2>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2e4:	40 f4       	mov.aa %a4,%a15
8000a2e6:	5c 9d       	call 8000a220 <osEE_release_all_m>
8000a2e8:	3c 03       	j 8000a2ee <osEE_scheduler_task_wrapper_run+0xa2>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
<<<<<<< HEAD
<<<<<<< HEAD
8000a1fe:	40 f4       	mov.aa %a4,%a15
8000a200:	5c 9a       	call 8000a134 <osEE_release_all_m>
8000a202:	c8 14       	ld.a %a4,[%a15]4
8000a204:	a0 05       	mov.a %a5,0
8000a206:	1d 00 79 02 	j 8000a6f8 <osEE_hal_terminate_ctx>

8000a20a <osEE_idle_hook_wrapper>:
=======
80009fe2:	40 f4       	mov.aa %a4,%a15
80009fe4:	5c 9a       	call 80009f18 <osEE_release_all_m>
80009fe6:	c8 14       	ld.a %a4,[%a15]4
80009fe8:	a0 05       	mov.a %a5,0
80009fea:	1d 00 79 02 	j 8000a4dc <osEE_hal_terminate_ctx>

80009fee <osEE_idle_hook_wrapper>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2ea:	40 f4       	mov.aa %a4,%a15
8000a2ec:	5c 9a       	call 8000a220 <osEE_release_all_m>
8000a2ee:	c8 14       	ld.a %a4,[%a15]4
8000a2f0:	a0 05       	mov.a %a5,0
8000a2f2:	1d 00 79 02 	j 8000a7e4 <osEE_hal_terminate_ctx>

8000a2f6 <osEE_idle_hook_wrapper>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a20a:	40 ae       	mov.aa %a14,%sp
=======
80009fee:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2f6:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a20c:	91 00 00 f8 	movh.a %a15,32768
8000a210:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
8000a214:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000130 <osEE_cdb_var>>
8000a218:	df 2f fe 7f 	jeq %d15,2,8000a214 <osEE_idle_hook_wrapper+0xa>
=======
80009ff0:	91 00 00 f8 	movh.a %a15,32768
80009ff4:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
80009ff8:	39 ff 10 00 	ld.bu %d15,[%a15]16 <800000cc <osEE_cdb_var>>
80009ffc:	df 2f fe 7f 	jeq %d15,2,80009ff8 <osEE_idle_hook_wrapper+0xa>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a2f8:	91 00 00 f8 	movh.a %a15,32768
8000a2fc:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
8000a300:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000148 <osEE_cdb_var>>
8000a304:	df 2f fe 7f 	jeq %d15,2,8000a300 <osEE_idle_hook_wrapper+0xa>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
<<<<<<< HEAD
<<<<<<< HEAD
8000a21c:	91 00 00 f8 	movh.a %a15,32768
8000a220:	d9 ff 30 40 	lea %a15,[%a15]304 <80000130 <osEE_cdb_var>>
8000a224:	c8 14       	ld.a %a4,[%a15]4
8000a226:	6d 00 ba 01 	call 8000a59a <osEE_idle_task_terminate>
8000a22a:	00 90       	ret 

8000a22c <osEE_scheduler_core_rq_preempt_stk>:
=======
8000a000:	91 00 00 f8 	movh.a %a15,32768
8000a004:	d9 ff 0c 30 	lea %a15,[%a15]204 <800000cc <osEE_cdb_var>>
8000a008:	c8 14       	ld.a %a4,[%a15]4
8000a00a:	6d 00 ba 01 	call 8000a37e <osEE_idle_task_terminate>
8000a00e:	00 90       	ret 

8000a010 <osEE_scheduler_core_rq_preempt_stk>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a308:	91 00 00 f8 	movh.a %a15,32768
8000a30c:	d9 ff 08 50 	lea %a15,[%a15]328 <80000148 <osEE_cdb_var>>
8000a310:	c8 14       	ld.a %a4,[%a15]4
8000a312:	6d 00 ba 01 	call 8000a686 <osEE_idle_task_terminate>
8000a316:	00 90       	ret 

8000a318 <osEE_scheduler_core_rq_preempt_stk>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a22c:	40 ae       	mov.aa %a14,%sp
=======
8000a318:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a31a:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000a31c:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
<<<<<<< HEAD
8000a232:	99 32 0c 00 	ld.a %a2,[%a3]12
=======
8000a010:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a012:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000a014:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
8000a016:	99 32 0c 00 	ld.a %a2,[%a3]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a31e:	99 32 0c 00 	ld.a %a2,[%a3]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a236:	bd 02 13 00 	jz.a %a2,8000a25c <osEE_scheduler_core_rq_preempt_stk+0x30>
=======
8000a322:	bd 02 13 00 	jz.a %a2,8000a348 <osEE_scheduler_core_rq_preempt_stk+0x30>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    p_ret_tdb = p_ret_sn->p_tdb;
8000a326:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000a32a:	bd 0f 1b 00 	jz.a %a15,8000a360 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000a32e:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
<<<<<<< HEAD
8000a246:	c8 16       	ld.a %a6,[%a15]4
8000a248:	99 66 0c 00 	ld.a %a6,[%a6]12
=======
8000a01a:	bd 02 13 00 	jz.a %a2,8000a040 <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
8000a01e:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000a022:	bd 0f 1b 00 	jz.a %a15,8000a058 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000a026:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
8000a02a:	c8 16       	ld.a %a6,[%a15]4
8000a02c:	99 66 0c 00 	ld.a %a6,[%a6]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a332:	c8 16       	ld.a %a6,[%a15]4
8000a334:	99 66 0c 00 	ld.a %a6,[%a6]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
<<<<<<< HEAD
<<<<<<< HEAD
8000a24c:	39 42 01 00 	ld.bu %d2,[%a4]1
8000a250:	0c 61       	ld.bu %d15,[%a6]1
8000a252:	7f f2 13 80 	jge.u %d2,%d15,8000a278 <osEE_scheduler_core_rq_preempt_stk+0x4c>
=======
8000a030:	39 42 01 00 	ld.bu %d2,[%a4]1
8000a034:	0c 61       	ld.bu %d15,[%a6]1
8000a036:	7f f2 13 80 	jge.u %d2,%d15,8000a05c <osEE_scheduler_core_rq_preempt_stk+0x4c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a338:	39 42 01 00 	ld.bu %d2,[%a4]1
8000a33c:	0c 61       	ld.bu %d15,[%a6]1
8000a33e:	7f f2 13 80 	jge.u %d2,%d15,8000a364 <osEE_scheduler_core_rq_preempt_stk+0x4c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
<<<<<<< HEAD
<<<<<<< HEAD
8000a256:	82 2f       	mov %d15,2
8000a258:	2c 42       	st.b [%a4]2,%d15
8000a25a:	3c 11       	j 8000a27c <osEE_scheduler_core_rq_preempt_stk+0x50>
=======
8000a03a:	82 2f       	mov %d15,2
8000a03c:	2c 42       	st.b [%a4]2,%d15
8000a03e:	3c 11       	j 8000a060 <osEE_scheduler_core_rq_preempt_stk+0x50>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a342:	82 2f       	mov %d15,2
8000a344:	2c 42       	st.b [%a4]2,%d15
8000a346:	3c 11       	j 8000a368 <osEE_scheduler_core_rq_preempt_stk+0x50>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
8000a25c:	a0 02       	mov.a %a2,0
=======
8000a040:	a0 02       	mov.a %a2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a348:	a0 02       	mov.a %a2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a25e:	bd 0f 1e 00 	jz.a %a15,8000a29a <osEE_scheduler_core_rq_preempt_stk+0x6e>
=======
8000a042:	bd 0f 1e 00 	jz.a %a15,8000a07e <osEE_scheduler_core_rq_preempt_stk+0x6e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a34a:	bd 0f 1e 00 	jz.a %a15,8000a386 <osEE_scheduler_core_rq_preempt_stk+0x6e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
<<<<<<< HEAD
<<<<<<< HEAD
8000a262:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a266:	99 24 0c 00 	ld.a %a4,[%a2]12
8000a26a:	82 2f       	mov %d15,2
8000a26c:	2c 42       	st.b [%a4]2,%d15
8000a26e:	3c 07       	j 8000a27c <osEE_scheduler_core_rq_preempt_stk+0x50>
=======
8000a046:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a04a:	99 24 0c 00 	ld.a %a4,[%a2]12
8000a04e:	82 2f       	mov %d15,2
8000a050:	2c 42       	st.b [%a4]2,%d15
8000a052:	3c 07       	j 8000a060 <osEE_scheduler_core_rq_preempt_stk+0x50>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a34e:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a352:	99 24 0c 00 	ld.a %a4,[%a2]12
8000a356:	82 2f       	mov %d15,2
8000a358:	2c 42       	st.b [%a4]2,%d15
8000a35a:	3c 07       	j 8000a368 <osEE_scheduler_core_rq_preempt_stk+0x50>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
<<<<<<< HEAD
<<<<<<< HEAD
8000a270:	2c 51       	st.b [%a5]1,%d15
8000a272:	00 90       	ret 
=======
8000a054:	2c 51       	st.b [%a5]1,%d15
8000a056:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a35c:	2c 51       	st.b [%a5]1,%d15
8000a35e:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
8000a274:	a0 02       	mov.a %a2,0
8000a276:	00 90       	ret 
8000a278:	a0 02       	mov.a %a2,0
8000a27a:	00 90       	ret 
=======
8000a058:	a0 02       	mov.a %a2,0
8000a05a:	00 90       	ret 
8000a05c:	a0 02       	mov.a %a2,0
8000a05e:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a360:	a0 02       	mov.a %a2,0
8000a362:	00 90       	ret 
8000a364:	a0 02       	mov.a %a2,0
8000a366:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
<<<<<<< HEAD
<<<<<<< HEAD
8000a27c:	4c f0       	ld.w %d15,[%a15]0
8000a27e:	6c 50       	st.w [%a5]0,%d15
=======
8000a060:	4c f0       	ld.w %d15,[%a15]0
8000a062:	6c 50       	st.w [%a5]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a368:	4c f0       	ld.w %d15,[%a15]0
8000a36a:	6c 50       	st.w [%a5]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a280:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a282:	99 45 0c 00 	ld.a %a5,[%a4]12
=======
8000a064:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a066:	99 45 0c 00 	ld.a %a5,[%a4]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a36c:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a36e:	99 45 0c 00 	ld.a %a5,[%a4]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
<<<<<<< HEAD
<<<<<<< HEAD
8000a286:	4c 33       	ld.w %d15,[%a3]12
8000a288:	68 0f       	st.w [%a15]0,%d15
=======
8000a372:	4c 33       	ld.w %d15,[%a3]12
8000a374:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000a376:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
<<<<<<< HEAD
8000a28c:	f4 34       	st.a [%a3],%a4
=======
8000a06a:	4c 33       	ld.w %d15,[%a3]12
8000a06c:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000a06e:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
8000a070:	f4 34       	st.a [%a3],%a4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a378:	f4 34       	st.a [%a3],%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
<<<<<<< HEAD
<<<<<<< HEAD
8000a28e:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000a292:	39 52 01 00 	ld.bu %d2,[%a5]1
8000a296:	3f f2 ed ff 	jlt.u %d2,%d15,8000a270 <osEE_scheduler_core_rq_preempt_stk+0x44>
=======
8000a072:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000a076:	39 52 01 00 	ld.bu %d2,[%a5]1
8000a07a:	3f f2 ed ff 	jlt.u %d2,%d15,8000a054 <osEE_scheduler_core_rq_preempt_stk+0x44>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a37a:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000a37e:	39 52 01 00 	ld.bu %d2,[%a5]1
8000a382:	3f f2 ed ff 	jlt.u %d2,%d15,8000a35c <osEE_scheduler_core_rq_preempt_stk+0x44>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a29a:	00 90       	ret 

8000a29c <osEE_sn_priority_insert>:
=======
8000a07e:	00 90       	ret 

8000a080 <osEE_sn_priority_insert>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a386:	00 90       	ret 

8000a388 <osEE_sn_priority_insert>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a29c:	40 ae       	mov.aa %a14,%sp
=======
8000a388:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000a38a:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000a38c:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
<<<<<<< HEAD
8000a2a2:	76 44       	jz %d4,8000a2aa <osEE_sn_priority_insert+0xe>
8000a2a4:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000a2a8:	3c 03       	j 8000a2ae <osEE_sn_priority_insert+0x12>
8000a2aa:	39 22 01 00 	ld.bu %d2,[%a2]1
=======
8000a080:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000a082:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000a084:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
8000a086:	76 44       	jz %d4,8000a08e <osEE_sn_priority_insert+0xe>
8000a088:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000a08c:	3c 03       	j 8000a092 <osEE_sn_priority_insert+0x12>
8000a08e:	39 22 01 00 	ld.bu %d2,[%a2]1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a38e:	76 44       	jz %d4,8000a396 <osEE_sn_priority_insert+0xe>
8000a390:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000a394:	3c 03       	j 8000a39a <osEE_sn_priority_insert+0x12>
8000a396:	39 22 01 00 	ld.bu %d2,[%a2]1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
<<<<<<< HEAD
<<<<<<< HEAD
8000a2ae:	cc 40       	ld.a %a15,[%a4]0
=======
8000a092:	cc 40       	ld.a %a15,[%a4]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a39a:	cc 40       	ld.a %a15,[%a4]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a2b0:	a0 06       	mov.a %a6,0
8000a2b2:	7c f3       	jnz.a %a15,8000a2b8 <osEE_sn_priority_insert+0x1c>
8000a2b4:	3c 14       	j 8000a2dc <osEE_sn_priority_insert+0x40>
=======
8000a094:	a0 06       	mov.a %a6,0
8000a096:	7c f3       	jnz.a %a15,8000a09c <osEE_sn_priority_insert+0x1c>
8000a098:	3c 14       	j 8000a0c0 <osEE_sn_priority_insert+0x40>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a39c:	a0 06       	mov.a %a6,0
8000a39e:	7c f3       	jnz.a %a15,8000a3a4 <osEE_sn_priority_insert+0x1c>
8000a3a0:	3c 14       	j 8000a3c8 <osEE_sn_priority_insert+0x40>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
<<<<<<< HEAD
<<<<<<< HEAD
8000a2b6:	60 ff       	mov.a %a15,%d15
=======
8000a09a:	60 ff       	mov.a %a15,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3a2:	60 ff       	mov.a %a15,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a2b8:	c8 12       	ld.a %a2,[%a15]4
=======
8000a3a4:	c8 12       	ld.a %a2,[%a15]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000a3a6:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000a3aa:	76 44       	jz %d4,8000a3b2 <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000a3ac:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a3b0:	3c 02       	j 8000a3b4 <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000a3b2:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000a3b4:	3f 2f 06 80 	jlt.u %d15,%d2,8000a3c0 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
<<<<<<< HEAD
8000a2cc:	4c f0       	ld.w %d15,[%a15]0
8000a2ce:	40 f6       	mov.aa %a6,%a15
=======
8000a09c:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000a09e:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000a0a2:	76 44       	jz %d4,8000a0aa <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000a0a4:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a0a8:	3c 02       	j 8000a0ac <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000a0aa:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000a0ac:	3f 2f 06 80 	jlt.u %d15,%d2,8000a0b8 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a0b0:	4c f0       	ld.w %d15,[%a15]0
8000a0b2:	40 f6       	mov.aa %a6,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3b8:	4c f0       	ld.w %d15,[%a15]0
8000a3ba:	40 f6       	mov.aa %a6,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a2d0:	ee f3       	jnz %d15,8000a2b6 <osEE_sn_priority_insert+0x1a>
=======
8000a0b4:	ee f3       	jnz %d15,8000a09a <osEE_sn_priority_insert+0x1a>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3bc:	ee f3       	jnz %d15,8000a3a2 <osEE_sn_priority_insert+0x1a>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
<<<<<<< HEAD
<<<<<<< HEAD
8000a2d2:	60 ff       	mov.a %a15,%d15
=======
8000a0b6:	60 ff       	mov.a %a15,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3be:	60 ff       	mov.a %a15,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a2d4:	bc 64       	jz.a %a6,8000a2dc <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000a2d6:	f4 65       	st.a [%a6],%a5
=======
8000a0b8:	bc 64       	jz.a %a6,8000a0c0 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000a0ba:	f4 65       	st.a [%a6],%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3c0:	bc 64       	jz.a %a6,8000a3c8 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000a3c2:	f4 65       	st.a [%a6],%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
8000a2d8:	82 02       	mov %d2,0
8000a2da:	3c 03       	j 8000a2e0 <osEE_sn_priority_insert+0x44>
=======
8000a0bc:	82 02       	mov %d2,0
8000a0be:	3c 03       	j 8000a0c4 <osEE_sn_priority_insert+0x44>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3c4:	82 02       	mov %d2,0
8000a3c6:	3c 03       	j 8000a3cc <osEE_sn_priority_insert+0x44>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
<<<<<<< HEAD
<<<<<<< HEAD
8000a2dc:	f4 45       	st.a [%a4],%a5
=======
8000a3c8:	f4 45       	st.a [%a4],%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    head_changed  = OSEE_TRUE;
8000a3ca:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000a3cc:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000a3ce:	00 90       	ret 

<<<<<<< HEAD
8000a2e4 <osEE_scheduler_rq_insert>:
=======
8000a0c0:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
8000a0c2:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000a0c4:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000a0c6:	00 90       	ret 

8000a0c8 <osEE_scheduler_rq_insert>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3d0 <osEE_scheduler_rq_insert>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a2e4:	40 ae       	mov.aa %a14,%sp
=======
8000a3d0:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  p_sn_new->p_tdb = p_tdb_new;
8000a3d2:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
<<<<<<< HEAD
8000a2ea:	82 14       	mov %d4,1
8000a2ec:	6d ff d8 ff 	call 8000a29c <osEE_sn_priority_insert>
=======
8000a0c8:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
8000a0ca:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
8000a0ce:	82 14       	mov %d4,1
8000a0d0:	6d ff d8 ff 	call 8000a080 <osEE_sn_priority_insert>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3d6:	82 14       	mov %d4,1
8000a3d8:	6d ff d8 ff 	call 8000a388 <osEE_sn_priority_insert>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a2f0:	00 90       	ret 

8000a2f2 <osEE_scheduler_core_pop_running>:
=======
8000a0d4:	00 90       	ret 

8000a0d6 <osEE_scheduler_core_pop_running>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3dc:	00 90       	ret 

8000a3de <osEE_scheduler_core_pop_running>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a2f2:	40 ae       	mov.aa %a14,%sp
8000a2f4:	40 4d       	mov.aa %a13,%a4
=======
8000a3de:	40 ae       	mov.aa %a14,%sp
8000a3e0:	40 4d       	mov.aa %a13,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000a3e2:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
<<<<<<< HEAD
8000a2f8:	c8 3c       	ld.a %a12,[%a15]12
=======
8000a0d6:	40 ae       	mov.aa %a14,%sp
8000a0d8:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000a0da:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
8000a0dc:	c8 3c       	ld.a %a12,[%a15]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3e4:	c8 3c       	ld.a %a12,[%a15]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
<<<<<<< HEAD
<<<<<<< HEAD
8000a2fa:	4c c0       	ld.w %d15,[%a12]0
8000a2fc:	68 3f       	st.w [%a15]12,%d15
=======
8000a0de:	4c c0       	ld.w %d15,[%a12]0
8000a0e0:	68 3f       	st.w [%a15]12,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3e6:	4c c0       	ld.w %d15,[%a12]0
8000a3e8:	68 3f       	st.w [%a15]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
<<<<<<< HEAD
<<<<<<< HEAD
8000a2fe:	6d ff 97 ff 	call 8000a22c <osEE_scheduler_core_rq_preempt_stk>
=======
8000a3ea:	6d ff 97 ff 	call 8000a318 <osEE_scheduler_core_rq_preempt_stk>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000a3ee:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
<<<<<<< HEAD
8000a304:	7c 28       	jnz.a %a2,8000a314 <osEE_scheduler_core_pop_running+0x22>
=======
8000a0e2:	6d ff 97 ff 	call 8000a010 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000a0e6:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
8000a0e8:	7c 28       	jnz.a %a2,8000a0f8 <osEE_scheduler_core_pop_running+0x22>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3f0:	7c 28       	jnz.a %a2,8000a400 <osEE_scheduler_core_pop_running+0x22>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a306:	80 d3       	mov.d %d3,%a13
8000a308:	c2 43       	add %d3,4
8000a30a:	92 42       	add %d2,%d15,4
8000a30c:	6a 32       	cmovn %d2,%d15,%d3
8000a30e:	60 2d       	mov.a %a13,%d2
8000a310:	4c d0       	ld.w %d15,[%a13]0
8000a312:	68 0f       	st.w [%a15]0,%d15
=======
8000a0ea:	80 d3       	mov.d %d3,%a13
8000a0ec:	c2 43       	add %d3,4
8000a0ee:	92 42       	add %d2,%d15,4
8000a0f0:	6a 32       	cmovn %d2,%d15,%d3
8000a0f2:	60 2d       	mov.a %a13,%d2
8000a0f4:	4c d0       	ld.w %d15,[%a13]0
8000a0f6:	68 0f       	st.w [%a15]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a3f2:	80 d3       	mov.d %d3,%a13
8000a3f4:	c2 43       	add %d3,4
8000a3f6:	92 42       	add %d2,%d15,4
8000a3f8:	6a 32       	cmovn %d2,%d15,%d3
8000a3fa:	60 2d       	mov.a %a13,%d2
8000a3fc:	4c d0       	ld.w %d15,[%a13]0
8000a3fe:	68 0f       	st.w [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a314:	40 c2       	mov.aa %a2,%a12
8000a316:	00 90       	ret 

8000a318 <osEE_task_activated>:
=======
8000a0f8:	40 c2       	mov.aa %a2,%a12
8000a0fa:	00 90       	ret 

8000a0fc <osEE_task_activated>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a400:	40 c2       	mov.aa %a2,%a12
8000a402:	00 90       	ret 

8000a404 <osEE_task_activated>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a318:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000a31a:	cc 43       	ld.a %a15,[%a4]12
=======
8000a0fc:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000a0fe:	cc 43       	ld.a %a15,[%a4]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a404:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000a406:	cc 43       	ld.a %a15,[%a4]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a31c:	0c f0       	ld.bu %d15,[%a15]0
8000a31e:	39 43 1e 00 	ld.bu %d3,[%a4]30
=======
8000a100:	0c f0       	ld.bu %d15,[%a15]0
8000a102:	39 43 1e 00 	ld.bu %d3,[%a4]30
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a408:	0c f0       	ld.bu %d15,[%a15]0
8000a40a:	39 43 1e 00 	ld.bu %d3,[%a4]30
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
<<<<<<< HEAD
<<<<<<< HEAD
8000a322:	82 42       	mov %d2,4
=======
8000a106:	82 42       	mov %d2,4
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a40e:	82 42       	mov %d2,4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a324:	7f 3f 05 80 	jge.u %d15,%d3,8000a32e <osEE_task_activated+0x16>
=======
8000a410:	7f 3f 05 80 	jge.u %d15,%d3,8000a41a <osEE_task_activated+0x16>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    ++p_tcb_act->current_num_of_act;
8000a414:	c2 1f       	add %d15,1
8000a416:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
<<<<<<< HEAD
8000a32c:	82 02       	mov %d2,0
=======
8000a108:	7f 3f 05 80 	jge.u %d15,%d3,8000a112 <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
8000a10c:	c2 1f       	add %d15,1
8000a10e:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
8000a110:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a418:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a32e:	00 90       	ret 

8000a330 <osEE_task_end>:
=======
8000a112:	00 90       	ret 

8000a114 <osEE_task_end>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a41a:	00 90       	ret 

8000a41c <osEE_task_end>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a330:	40 ae       	mov.aa %a14,%sp
=======
8000a41c:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a41e:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000a420:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000a424:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000a426:	0c f0       	ld.bu %d15,[%a15]0
8000a428:	c2 ff       	add %d15,-1
8000a42a:	16 ff       	and %d15,255
8000a42c:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000a42e:	ee 03       	jnz %d15,8000a434 <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000a430:	28 2f       	st.b [%a15]2,%d15
8000a432:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000a434:	82 1f       	mov %d15,1
8000a436:	28 2f       	st.b [%a15]2,%d15
8000a438:	00 90       	ret 

<<<<<<< HEAD
8000a34e <osEE_task_event_set_mask>:
=======
8000a114:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a116:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000a118:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000a11c:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000a11e:	0c f0       	ld.bu %d15,[%a15]0
8000a120:	c2 ff       	add %d15,-1
8000a122:	16 ff       	and %d15,255
8000a124:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000a126:	ee 03       	jnz %d15,8000a12c <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000a128:	28 2f       	st.b [%a15]2,%d15
8000a12a:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000a12c:	82 1f       	mov %d15,1
8000a12e:	28 2f       	st.b [%a15]2,%d15
8000a130:	00 90       	ret 

8000a132 <osEE_task_event_set_mask>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a43a <osEE_task_event_set_mask>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a34e:	40 ae       	mov.aa %a14,%sp
=======
8000a132:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a43a:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a350:	cc 43       	ld.a %a15,[%a4]12
=======
8000a134:	cc 43       	ld.a %a15,[%a4]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a43c:	cc 43       	ld.a %a15,[%a4]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
<<<<<<< HEAD
<<<<<<< HEAD
8000a352:	02 42       	mov %d2,%d4
8000a354:	02 43       	mov %d3,%d4
8000a356:	49 f2 4c 08 	ldmst [%a15]12,%e2
=======
8000a43e:	02 42       	mov %d2,%d4
8000a440:	02 43       	mov %d3,%d4
8000a442:	49 f2 4c 08 	ldmst [%a15]12,%e2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    *p_ev = E_OK;
8000a446:	82 0f       	mov %d15,0
8000a448:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
<<<<<<< HEAD
8000a35e:	4c f2       	ld.w %d15,[%a15]8
8000a360:	26 f4       	and %d4,%d15
=======
8000a136:	02 42       	mov %d2,%d4
8000a138:	02 43       	mov %d3,%d4
8000a13a:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
8000a13e:	82 0f       	mov %d15,0
8000a140:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a142:	4c f2       	ld.w %d15,[%a15]8
8000a144:	26 f4       	and %d4,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a44a:	4c f2       	ld.w %d15,[%a15]8
8000a44c:	26 f4       	and %d4,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
<<<<<<< HEAD
<<<<<<< HEAD
8000a362:	a0 02       	mov.a %a2,0
=======
8000a146:	a0 02       	mov.a %a2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a44e:	a0 02       	mov.a %a2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a364:	76 45       	jz %d4,8000a36e <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000a366:	c8 42       	ld.a %a2,[%a15]16
=======
8000a148:	76 45       	jz %d4,8000a152 <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000a14a:	c8 42       	ld.a %a2,[%a15]16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a450:	76 45       	jz %d4,8000a45a <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000a452:	c8 42       	ld.a %a2,[%a15]16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a368:	bc 23       	jz.a %a2,8000a36e <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
8000a36a:	82 0f       	mov %d15,0
8000a36c:	68 4f       	st.w [%a15]16,%d15
=======
8000a14c:	bc 23       	jz.a %a2,8000a152 <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
8000a14e:	82 0f       	mov %d15,0
8000a150:	68 4f       	st.w [%a15]16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a454:	bc 23       	jz.a %a2,8000a45a <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
8000a456:	82 0f       	mov %d15,0
8000a458:	68 4f       	st.w [%a15]16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a36e:	00 90       	ret 

8000a370 <osEE_activate_isr2>:
=======
8000a152:	00 90       	ret 

8000a154 <osEE_activate_isr2>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a45a:	00 90       	ret 

8000a45c <osEE_activate_isr2>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a370:	40 ae       	mov.aa %a14,%sp
=======
8000a154:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a45c:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
<<<<<<< HEAD
<<<<<<< HEAD
8000a372:	91 00 00 48 	movh.a %a4,32768
8000a376:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
8000a37a:	cc 41       	ld.a %a15,[%a4]4
8000a37c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a380:	c8 05       	ld.a %a5,[%a15]0
=======
8000a156:	91 00 00 48 	movh.a %a4,32768
8000a15a:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
8000a15e:	cc 41       	ld.a %a15,[%a4]4
8000a160:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a164:	c8 05       	ld.a %a5,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a45e:	91 00 00 48 	movh.a %a4,32768
8000a462:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a466:	cc 41       	ld.a %a15,[%a4]4
8000a468:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a46c:	c8 05       	ld.a %a5,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
<<<<<<< HEAD
<<<<<<< HEAD
8000a382:	cc 53       	ld.a %a15,[%a5]12
8000a384:	0c f0       	ld.bu %d15,[%a15]0
8000a386:	c2 1f       	add %d15,1
8000a388:	28 0f       	st.b [%a15]0,%d15
=======
8000a46e:	cc 53       	ld.a %a15,[%a5]12
8000a470:	0c f0       	ld.bu %d15,[%a15]0
8000a472:	c2 1f       	add %d15,1
8000a474:	28 0f       	st.b [%a15]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000a476:	a0 06       	mov.a %a6,0
8000a478:	6d 00 c4 00 	call 8000a600 <osEE_scheduler_task_set_running>
8000a47c:	00 90       	ret 

<<<<<<< HEAD
8000a392 <osEE_scheduler_task_activated>:
=======
8000a166:	cc 53       	ld.a %a15,[%a5]12
8000a168:	0c f0       	ld.bu %d15,[%a15]0
8000a16a:	c2 1f       	add %d15,1
8000a16c:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000a16e:	a0 06       	mov.a %a6,0
8000a170:	6d 00 c4 00 	call 8000a2f8 <osEE_scheduler_task_set_running>
8000a174:	00 90       	ret 

8000a176 <osEE_scheduler_task_activated>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a47e <osEE_scheduler_task_activated>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a392:	40 ae       	mov.aa %a14,%sp
8000a394:	40 56       	mov.aa %a6,%a5
=======
8000a47e:	40 ae       	mov.aa %a14,%sp
8000a480:	40 56       	mov.aa %a6,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000a482:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000a486:	91 00 00 f8 	movh.a %a15,32768
8000a48a:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000a48e:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
<<<<<<< HEAD
8000a3a4:	99 43 0c 00 	ld.a %a3,[%a4]12 <80000130 <osEE_cdb_var>>
=======
8000a176:	40 ae       	mov.aa %a14,%sp
8000a178:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000a17a:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000a17e:	91 00 00 f8 	movh.a %a15,32768
8000a182:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000a186:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
8000a188:	99 43 0c 00 	ld.a %a3,[%a4]12 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a490:	99 43 0c 00 	ld.a %a3,[%a4]12 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a3a8:	39 32 01 00 	ld.bu %d2,[%a3]1 <80000130 <osEE_cdb_var>>
8000a3ac:	0c 21       	ld.bu %d15,[%a2]1
8000a3ae:	7f f2 15 80 	jge.u %d2,%d15,8000a3d8 <osEE_scheduler_task_activated+0x46>
=======
8000a18c:	39 32 01 00 	ld.bu %d2,[%a3]1 <800000cc <osEE_cdb_var>>
8000a190:	0c 21       	ld.bu %d15,[%a2]1
8000a192:	7f f2 15 80 	jge.u %d2,%d15,8000a1bc <osEE_scheduler_task_activated+0x46>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a494:	39 32 01 00 	ld.bu %d2,[%a3]1 <80000148 <osEE_cdb_var>>
8000a498:	0c 21       	ld.bu %d15,[%a2]1
8000a49a:	7f f2 15 80 	jge.u %d2,%d15,8000a4c4 <osEE_scheduler_task_activated+0x46>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
<<<<<<< HEAD
<<<<<<< HEAD
8000a3b2:	c8 22       	ld.a %a2,[%a15]8
=======
8000a49e:	c8 22       	ld.a %a2,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  (*pp_first)              = p_sn_allocated->p_next;
8000a4a0:	4c 20       	ld.w %d15,[%a2]0
8000a4a2:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
<<<<<<< HEAD
8000a3b8:	82 02       	mov %d2,0
8000a3ba:	74 22       	st.w [%a2],%d2
=======
8000a196:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a198:	4c 20       	ld.w %d15,[%a2]0
8000a19a:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a19c:	82 02       	mov %d2,0
8000a19e:	74 22       	st.w [%a2],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4a4:	82 02       	mov %d2,0
8000a4a6:	74 22       	st.w [%a2],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
<<<<<<< HEAD
<<<<<<< HEAD
8000a3bc:	82 2f       	mov %d15,2
8000a3be:	2c 32       	st.b [%a3]2,%d15
=======
8000a4a8:	82 2f       	mov %d15,2
8000a4aa:	2c 32       	st.b [%a3]2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000a4ac:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000a4b0:	4c f3       	ld.w %d15,[%a15]12
8000a4b2:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
8000a4b4:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
8000a4b6:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
<<<<<<< HEAD
8000a3cc:	cc 53       	ld.a %a15,[%a5]12
=======
8000a1a0:	82 2f       	mov %d15,2
8000a1a2:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000a1a4:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000a1a8:	4c f3       	ld.w %d15,[%a15]12
8000a1aa:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
8000a1ac:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
8000a1ae:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
8000a1b0:	cc 53       	ld.a %a15,[%a5]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4b8:	cc 53       	ld.a %a15,[%a5]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000a3ce:	68 32       	st.w [%a15]12,%d2
=======
8000a1b2:	68 32       	st.w [%a15]12,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4ba:	68 32       	st.w [%a15]12,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
<<<<<<< HEAD
<<<<<<< HEAD
8000a3d0:	6d 00 c1 00 	call 8000a552 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a3d4:	82 12       	mov %d2,1
8000a3d6:	00 90       	ret 
=======
8000a1b4:	6d 00 c1 00 	call 8000a336 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a1b8:	82 12       	mov %d2,1
8000a1ba:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4bc:	6d 00 c1 00 	call 8000a63e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a4c0:	82 12       	mov %d2,1
8000a4c2:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a3d8:	0c 22       	ld.bu %d15,[%a2]2
8000a3da:	ee 05       	jnz %d15,8000a3e4 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
8000a3dc:	82 1f       	mov %d15,1
8000a3de:	2c 22       	st.b [%a2]2,%d15
8000a3e0:	82 0f       	mov %d15,0
8000a3e2:	6c 23       	st.w [%a2]12,%d15
=======
8000a1bc:	0c 22       	ld.bu %d15,[%a2]2
8000a1be:	ee 05       	jnz %d15,8000a1c8 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
8000a1c0:	82 1f       	mov %d15,1
8000a1c2:	2c 22       	st.b [%a2]2,%d15
8000a1c4:	82 0f       	mov %d15,0
8000a1c6:	6c 23       	st.w [%a2]12,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4c4:	0c 22       	ld.bu %d15,[%a2]2
8000a4c6:	ee 05       	jnz %d15,8000a4d0 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
8000a4c8:	82 1f       	mov %d15,1
8000a4ca:	2c 22       	st.b [%a2]2,%d15
8000a4cc:	82 0f       	mov %d15,0
8000a4ce:	6c 23       	st.w [%a2]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
<<<<<<< HEAD
<<<<<<< HEAD
8000a3e4:	c8 25       	ld.a %a5,[%a15]8
=======
8000a4d0:	c8 25       	ld.a %a5,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  (*pp_first)              = p_sn_allocated->p_next;
8000a4d2:	4c 50       	ld.w %d15,[%a5]0
8000a4d4:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
<<<<<<< HEAD
8000a3ea:	82 0f       	mov %d15,0
8000a3ec:	6c 50       	st.w [%a5]0,%d15
=======
8000a1c8:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a1ca:	4c 50       	ld.w %d15,[%a5]0
8000a1cc:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a1ce:	82 0f       	mov %d15,0
8000a1d0:	6c 50       	st.w [%a5]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4d6:	82 0f       	mov %d15,0
8000a4d8:	6c 50       	st.w [%a5]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
<<<<<<< HEAD
<<<<<<< HEAD
8000a3ee:	d9 f4 04 00 	lea %a4,[%a15]4
8000a3f2:	6d ff 79 ff 	call 8000a2e4 <osEE_scheduler_rq_insert>
=======
8000a1d2:	d9 f4 04 00 	lea %a4,[%a15]4
8000a1d6:	6d ff 79 ff 	call 8000a0c8 <osEE_scheduler_rq_insert>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4da:	d9 f4 04 00 	lea %a4,[%a15]4
8000a4de:	6d ff 79 ff 	call 8000a3d0 <osEE_scheduler_rq_insert>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
8000a3f6:	82 02       	mov %d2,0
=======
8000a1da:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4e2:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

  return is_preemption;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a3f8:	00 90       	ret 

8000a3fa <osEE_scheduler_task_insert>:
=======
8000a1dc:	00 90       	ret 

8000a1de <osEE_scheduler_task_insert>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4e4:	00 90       	ret 

8000a4e6 <osEE_scheduler_task_insert>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a3fa:	40 ae       	mov.aa %a14,%sp
8000a3fc:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000a3fe:	cc 53       	ld.a %a15,[%a5]12
=======
8000a1de:	40 ae       	mov.aa %a14,%sp
8000a1e0:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000a1e2:	cc 53       	ld.a %a15,[%a5]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4e6:	40 ae       	mov.aa %a14,%sp
8000a4e8:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000a4ea:	cc 53       	ld.a %a15,[%a5]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a400:	91 00 00 28 	movh.a %a2,32768
8000a404:	99 24 30 40 	ld.a %a4,[%a2]304 <80000130 <osEE_cdb_var>>
=======
8000a1e4:	91 00 00 28 	movh.a %a2,32768
8000a1e8:	99 24 0c 30 	ld.a %a4,[%a2]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4ec:	91 00 00 28 	movh.a %a2,32768
8000a4f0:	99 24 08 50 	ld.a %a4,[%a2]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a408:	0c f2       	ld.bu %d15,[%a15]2
8000a40a:	ee 05       	jnz %d15,8000a414 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
8000a40c:	82 1f       	mov %d15,1
8000a40e:	28 2f       	st.b [%a15]2,%d15
8000a410:	82 0f       	mov %d15,0
8000a412:	68 3f       	st.w [%a15]12,%d15
=======
8000a1ec:	0c f2       	ld.bu %d15,[%a15]2
8000a1ee:	ee 05       	jnz %d15,8000a1f8 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
8000a1f0:	82 1f       	mov %d15,1
8000a1f2:	28 2f       	st.b [%a15]2,%d15
8000a1f4:	82 0f       	mov %d15,0
8000a1f6:	68 3f       	st.w [%a15]12,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a4f4:	0c f2       	ld.bu %d15,[%a15]2
8000a4f6:	ee 05       	jnz %d15,8000a500 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
8000a4f8:	82 1f       	mov %d15,1
8000a4fa:	28 2f       	st.b [%a15]2,%d15
8000a4fc:	82 0f       	mov %d15,0
8000a4fe:	68 3f       	st.w [%a15]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
<<<<<<< HEAD
<<<<<<< HEAD
8000a414:	99 45 08 00 	ld.a %a5,[%a4]8
=======
8000a500:	99 45 08 00 	ld.a %a5,[%a4]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  (*pp_first)              = p_sn_allocated->p_next;
8000a504:	4c 50       	ld.w %d15,[%a5]0
8000a506:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
<<<<<<< HEAD
8000a41c:	82 0f       	mov %d15,0
8000a41e:	6c 50       	st.w [%a5]0,%d15
=======
8000a1f8:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a1fc:	4c 50       	ld.w %d15,[%a5]0
8000a1fe:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a200:	82 0f       	mov %d15,0
8000a202:	6c 50       	st.w [%a5]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a508:	82 0f       	mov %d15,0
8000a50a:	6c 50       	st.w [%a5]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
<<<<<<< HEAD
<<<<<<< HEAD
8000a420:	b0 44       	add.a %a4,4
8000a422:	6d ff 61 ff 	call 8000a2e4 <osEE_scheduler_rq_insert>
=======
8000a204:	b0 44       	add.a %a4,4
8000a206:	6d ff 61 ff 	call 8000a0c8 <osEE_scheduler_rq_insert>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a50c:	b0 44       	add.a %a4,4
8000a50e:	6d ff 61 ff 	call 8000a3d0 <osEE_scheduler_rq_insert>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a426:	00 90       	ret 

8000a428 <osEE_scheduler_task_unblocked>:
=======
8000a20a:	00 90       	ret 

8000a20c <osEE_scheduler_task_unblocked>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a512:	00 90       	ret 

8000a514 <osEE_scheduler_task_unblocked>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a428:	40 ae       	mov.aa %a14,%sp
=======
8000a20c:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a514:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a42a:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000a42e:	cc 63       	ld.a %a15,[%a6]12
=======
8000a20e:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000a212:	cc 63       	ld.a %a15,[%a6]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a516:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000a51a:	cc 63       	ld.a %a15,[%a6]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a430:	91 00 00 28 	movh.a %a2,32768
8000a434:	99 2c 30 40 	ld.a %a12,[%a2]304 <80000130 <osEE_cdb_var>>
=======
8000a51c:	91 00 00 28 	movh.a %a2,32768
8000a520:	99 2c 08 50 	ld.a %a12,[%a2]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000a524:	82 2f       	mov %d15,2
8000a526:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
<<<<<<< HEAD
8000a43c:	39 6f 1c 00 	ld.bu %d15,[%a6]28
8000a440:	28 1f       	st.b [%a15]1,%d15
=======
8000a214:	91 00 00 28 	movh.a %a2,32768
8000a218:	99 2c 0c 30 	ld.a %a12,[%a2]204 <800000cc <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000a21c:	82 2f       	mov %d15,2
8000a21e:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
8000a220:	39 6f 1c 00 	ld.bu %d15,[%a6]28
8000a224:	28 1f       	st.b [%a15]1,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a528:	39 6f 1c 00 	ld.bu %d15,[%a6]28
8000a52c:	28 1f       	st.b [%a15]1,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
<<<<<<< HEAD
<<<<<<< HEAD
8000a442:	d9 c4 04 00 	lea %a4,[%a12]4
8000a446:	6d ff 4f ff 	call 8000a2e4 <osEE_scheduler_rq_insert>
=======
8000a226:	d9 c4 04 00 	lea %a4,[%a12]4
8000a22a:	6d ff 4f ff 	call 8000a0c8 <osEE_scheduler_rq_insert>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a52e:	d9 c4 04 00 	lea %a4,[%a12]4
8000a532:	6d ff 4f ff 	call 8000a3d0 <osEE_scheduler_rq_insert>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
8000a44a:	82 0f       	mov %d15,0
=======
8000a22e:	82 0f       	mov %d15,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a536:	82 0f       	mov %d15,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a44c:	df 12 0a 80 	jne %d2,1,8000a460 <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000a450:	d4 c2       	ld.a %a2,[%a12]
8000a452:	99 22 0c 00 	ld.a %a2,[%a2]12
=======
8000a230:	df 12 0a 80 	jne %d2,1,8000a244 <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000a234:	d4 c2       	ld.a %a2,[%a12]
8000a236:	99 22 0c 00 	ld.a %a2,[%a2]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a538:	df 12 0a 80 	jne %d2,1,8000a54c <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000a53c:	d4 c2       	ld.a %a2,[%a12]
8000a53e:	99 22 0c 00 	ld.a %a2,[%a2]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
<<<<<<< HEAD
<<<<<<< HEAD
8000a456:	0c f1       	ld.bu %d15,[%a15]1
8000a458:	39 22 01 00 	ld.bu %d2,[%a2]1
8000a45c:	0b f2 30 f1 	lt.u %d15,%d2,%d15
=======
8000a23a:	0c f1       	ld.bu %d15,[%a15]1
8000a23c:	39 22 01 00 	ld.bu %d2,[%a2]1
8000a240:	0b f2 30 f1 	lt.u %d15,%d2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a542:	0c f1       	ld.bu %d15,[%a15]1
8000a544:	39 22 01 00 	ld.bu %d2,[%a2]1
8000a548:	0b f2 30 f1 	lt.u %d15,%d2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a460:	02 f2       	mov %d2,%d15
8000a462:	00 90       	ret 

8000a464 <osEE_scheduler_task_terminated>:
=======
8000a244:	02 f2       	mov %d2,%d15
8000a246:	00 90       	ret 

8000a248 <osEE_scheduler_task_terminated>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a54c:	02 f2       	mov %d2,%d15
8000a54e:	00 90       	ret 

8000a550 <osEE_scheduler_task_terminated>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a464:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a466:	91 00 00 f8 	movh.a %a15,32768
8000a46a:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
=======
8000a248:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a24a:	91 00 00 f8 	movh.a %a15,32768
8000a24e:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a550:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a552:	91 00 00 f8 	movh.a %a15,32768
8000a556:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
<<<<<<< HEAD
<<<<<<< HEAD
8000a46e:	c8 0d       	ld.a %a13,[%a15]0
=======
8000a55a:	c8 0d       	ld.a %a13,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000a55c:	99 dc 0c 00 	ld.a %a12,[%a13]12 <80000148 <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000a560:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000a562:	0c c2       	ld.bu %d15,[%a12]2
8000a564:	de 4a       	jne %d15,4,8000a598 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a566:	91 00 00 48 	movh.a %a4,32768
8000a56a:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a56e:	d9 f5 04 00 	lea %a5,[%a15]4 <80000148 <osEE_cdb_var>>
8000a572:	6d ff 36 ff 	call 8000a3de <osEE_scheduler_core_pop_running>
8000a576:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
<<<<<<< HEAD
8000a48c:	4c f0       	ld.w %d15,[%a15]0
=======
8000a252:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000a254:	99 dc 0c 00 	ld.a %a12,[%a13]12 <800000cc <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000a258:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000a25a:	0c c2       	ld.bu %d15,[%a12]2
8000a25c:	de 4a       	jne %d15,4,8000a290 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a25e:	91 00 00 48 	movh.a %a4,32768
8000a262:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
8000a266:	d9 f5 04 00 	lea %a5,[%a15]4 <800000cc <osEE_cdb_var>>
8000a26a:	6d ff 36 ff 	call 8000a0d6 <osEE_scheduler_core_pop_running>
8000a26e:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
8000a270:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a578:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a48e:	80 d2       	mov.d %d2,%a13
8000a490:	5f f2 06 00 	jeq %d2,%d15,8000a49c <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
8000a494:	40 d4       	mov.aa %a4,%a13
8000a496:	6d ff 4d ff 	call 8000a330 <osEE_task_end>
8000a49a:	3c 04       	j 8000a4a2 <osEE_scheduler_task_terminated+0x3e>
=======
8000a272:	80 d2       	mov.d %d2,%a13
8000a274:	5f f2 06 00 	jeq %d2,%d15,8000a280 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
8000a278:	40 d4       	mov.aa %a4,%a13
8000a27a:	6d ff 4d ff 	call 8000a114 <osEE_task_end>
8000a27e:	3c 04       	j 8000a286 <osEE_scheduler_task_terminated+0x3e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a57a:	80 d2       	mov.d %d2,%a13
8000a57c:	5f f2 06 00 	jeq %d2,%d15,8000a588 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
8000a580:	40 d4       	mov.aa %a4,%a13
8000a582:	6d ff 4d ff 	call 8000a41c <osEE_task_end>
8000a586:	3c 04       	j 8000a58e <osEE_scheduler_task_terminated+0x3e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
<<<<<<< HEAD
<<<<<<< HEAD
8000a49c:	14 c2       	ld.bu %d2,[%a12]
8000a49e:	c2 f2       	add %d2,-1
8000a4a0:	34 c2       	st.b [%a12],%d2
=======
8000a280:	14 c2       	ld.bu %d2,[%a12]
8000a282:	c2 f2       	add %d2,-1
8000a284:	34 c2       	st.b [%a12],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a588:	14 c2       	ld.bu %d2,[%a12]
8000a58a:	c2 f2       	add %d2,-1
8000a58c:	34 c2       	st.b [%a12],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
<<<<<<< HEAD
<<<<<<< HEAD
8000a4a2:	48 22       	ld.w %d2,[%a15]8
8000a4a4:	60 82       	mov.a %a2,%d8
8000a4a6:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000a4a8:	68 28       	st.w [%a15]8,%d8
8000a4aa:	3c 20       	j 8000a4ea <osEE_scheduler_task_terminated+0x86>
=======
8000a286:	48 22       	ld.w %d2,[%a15]8
8000a288:	60 82       	mov.a %a2,%d8
8000a28a:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000a28c:	68 28       	st.w [%a15]8,%d8
8000a28e:	3c 20       	j 8000a2ce <osEE_scheduler_task_terminated+0x86>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a58e:	48 22       	ld.w %d2,[%a15]8
8000a590:	60 82       	mov.a %a2,%d8
8000a592:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000a594:	68 28       	st.w [%a15]8,%d8
8000a596:	3c 20       	j 8000a5d6 <osEE_scheduler_task_terminated+0x86>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
<<<<<<< HEAD
<<<<<<< HEAD
8000a4ac:	c8 35       	ld.a %a5,[%a15]12
=======
8000a290:	c8 35       	ld.a %a5,[%a15]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a598:	c8 35       	ld.a %a5,[%a15]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
<<<<<<< HEAD
<<<<<<< HEAD
8000a4ae:	54 52       	ld.w %d2,[%a5]
8000a4b0:	68 32       	st.w [%a15]12,%d2
=======
8000a292:	54 52       	ld.w %d2,[%a5]
8000a294:	68 32       	st.w [%a15]12,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a59a:	54 52       	ld.w %d2,[%a5]
8000a59c:	68 32       	st.w [%a15]12,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
<<<<<<< HEAD
<<<<<<< HEAD
8000a4b2:	39 df 1c 00 	ld.bu %d15,[%a13]28
8000a4b6:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
8000a4b8:	82 1f       	mov %d15,1
8000a4ba:	2c c2       	st.b [%a12]2,%d15
=======
8000a296:	39 df 1c 00 	ld.bu %d15,[%a13]28
8000a29a:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
8000a29c:	82 1f       	mov %d15,1
8000a29e:	2c c2       	st.b [%a12]2,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a59e:	39 df 1c 00 	ld.bu %d15,[%a13]28
8000a5a2:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
8000a5a4:	82 1f       	mov %d15,1
8000a5a6:	2c c2       	st.b [%a12]2,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a4bc:	0c c0       	ld.bu %d15,[%a12]0
8000a4be:	5e 13       	jne %d15,1,8000a4c4 <osEE_scheduler_task_terminated+0x60>
8000a4c0:	82 0f       	mov %d15,0
8000a4c2:	6c c3       	st.w [%a12]12,%d15
=======
8000a2a0:	0c c0       	ld.bu %d15,[%a12]0
8000a2a2:	5e 13       	jne %d15,1,8000a2a8 <osEE_scheduler_task_terminated+0x60>
8000a2a4:	82 0f       	mov %d15,0
8000a2a6:	6c c3       	st.w [%a12]12,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5a8:	0c c0       	ld.bu %d15,[%a12]0
8000a5aa:	5e 13       	jne %d15,1,8000a5b0 <osEE_scheduler_task_terminated+0x60>
8000a5ac:	82 0f       	mov %d15,0
8000a5ae:	6c c3       	st.w [%a12]12,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
<<<<<<< HEAD
<<<<<<< HEAD
8000a4c4:	d9 fc 04 00 	lea %a12,[%a15]4
8000a4c8:	40 c4       	mov.aa %a4,%a12
8000a4ca:	40 d6       	mov.aa %a6,%a13
8000a4cc:	6d ff 0c ff 	call 8000a2e4 <osEE_scheduler_rq_insert>
=======
8000a2a8:	d9 fc 04 00 	lea %a12,[%a15]4
8000a2ac:	40 c4       	mov.aa %a4,%a12
8000a2ae:	40 d6       	mov.aa %a6,%a13
8000a2b0:	6d ff 0c ff 	call 8000a0c8 <osEE_scheduler_rq_insert>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5b0:	d9 fc 04 00 	lea %a12,[%a15]4
8000a5b4:	40 c4       	mov.aa %a4,%a12
8000a5b6:	40 d6       	mov.aa %a6,%a13
8000a5b8:	6d ff 0c ff 	call 8000a3d0 <osEE_scheduler_rq_insert>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
<<<<<<< HEAD
<<<<<<< HEAD
8000a4d0:	91 00 00 48 	movh.a %a4,32768
8000a4d4:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
8000a4d8:	40 c5       	mov.aa %a5,%a12
8000a4da:	6d ff a9 fe 	call 8000a22c <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000a4de:	7c 25       	jnz.a %a2,8000a4e8 <osEE_scheduler_task_terminated+0x84>
=======
8000a2b4:	91 00 00 48 	movh.a %a4,32768
8000a2b8:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
8000a2bc:	40 c5       	mov.aa %a5,%a12
8000a2be:	6d ff a9 fe 	call 8000a010 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000a2c2:	7c 25       	jnz.a %a2,8000a2cc <osEE_scheduler_task_terminated+0x84>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5bc:	91 00 00 48 	movh.a %a4,32768
8000a5c0:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a5c4:	40 c5       	mov.aa %a5,%a12
8000a5c6:	6d ff a9 fe 	call 8000a318 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000a5ca:	7c 25       	jnz.a %a2,8000a5d4 <osEE_scheduler_task_terminated+0x84>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a4e0:	c8 32       	ld.a %a2,[%a15]12
8000a4e2:	4c 21       	ld.w %d15,[%a2]4
=======
8000a5cc:	c8 32       	ld.a %a2,[%a15]12
8000a5ce:	4c 21       	ld.w %d15,[%a2]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
          p_ccb->p_curr           = p_tdb_to;
8000a5d0:	68 0f       	st.w [%a15]0,%d15
8000a5d2:	3c 02       	j 8000a5d6 <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
<<<<<<< HEAD
8000a4e8:	4c f0       	ld.w %d15,[%a15]0
=======
8000a2c4:	c8 32       	ld.a %a2,[%a15]12
8000a2c6:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
8000a2c8:	68 0f       	st.w [%a15]0,%d15
8000a2ca:	3c 02       	j 8000a2ce <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
8000a2cc:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5d4:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a4ea:	60 f2       	mov.a %a2,%d15
8000a4ec:	00 90       	ret 

8000a4ee <osEE_scheduler_task_preemption_point>:
=======
8000a2ce:	60 f2       	mov.a %a2,%d15
8000a2d0:	00 90       	ret 

8000a2d2 <osEE_scheduler_task_preemption_point>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5d6:	60 f2       	mov.a %a2,%d15
8000a5d8:	00 90       	ret 

8000a5da <osEE_scheduler_task_preemption_point>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a4ee:	40 ae       	mov.aa %a14,%sp
=======
8000a2d2:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5da:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a4f0:	91 00 00 48 	movh.a %a4,32768
8000a4f4:	99 4f 30 40 	ld.a %a15,[%a4]304 <80000130 <osEE_cdb_var>>
=======
8000a2d4:	91 00 00 48 	movh.a %a4,32768
8000a2d8:	99 4f 0c 30 	ld.a %a15,[%a4]204 <800000cc <osEE_cdb_var>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5dc:	91 00 00 48 	movh.a %a4,32768
8000a5e0:	99 4f 08 50 	ld.a %a15,[%a4]328 <80000148 <osEE_cdb_var>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
<<<<<<< HEAD
<<<<<<< HEAD
8000a4f8:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
8000a4fc:	d9 f5 04 00 	lea %a5,[%a15]4 <80000130 <osEE_cdb_var>>
8000a500:	6d ff 96 fe 	call 8000a22c <osEE_scheduler_core_rq_preempt_stk>
=======
8000a2dc:	d9 44 0c 30 	lea %a4,[%a4]204 <800000cc <osEE_cdb_var>>
8000a2e0:	d9 f5 04 00 	lea %a5,[%a15]4 <800000cc <osEE_cdb_var>>
8000a2e4:	6d ff 96 fe 	call 8000a010 <osEE_scheduler_core_rq_preempt_stk>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5e4:	d9 44 08 50 	lea %a4,[%a4]328 <80000148 <osEE_cdb_var>>
8000a5e8:	d9 f5 04 00 	lea %a5,[%a15]4 <80000148 <osEE_cdb_var>>
8000a5ec:	6d ff 96 fe 	call 8000a318 <osEE_scheduler_core_rq_preempt_stk>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
<<<<<<< HEAD
<<<<<<< HEAD
8000a504:	82 02       	mov %d2,0
=======
8000a2e8:	82 02       	mov %d2,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5f0:	82 02       	mov %d2,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a506:	bc 26       	jz.a %a2,8000a512 <osEE_scheduler_task_preemption_point+0x24>
=======
8000a5f2:	bc 26       	jz.a %a2,8000a5fe <osEE_scheduler_task_preemption_point+0x24>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000a5f4:	40 24       	mov.aa %a4,%a2
8000a5f6:	c8 05       	ld.a %a5,[%a15]0
8000a5f8:	6d 00 23 00 	call 8000a63e <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
<<<<<<< HEAD
8000a510:	82 12       	mov %d2,1
=======
8000a2ea:	bc 26       	jz.a %a2,8000a2f6 <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000a2ec:	40 24       	mov.aa %a4,%a2
8000a2ee:	c8 05       	ld.a %a5,[%a15]0
8000a2f0:	6d 00 23 00 	call 8000a336 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a2f4:	82 12       	mov %d2,1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5fc:	82 12       	mov %d2,1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a512:	00 90       	ret 

8000a514 <osEE_scheduler_task_set_running>:
=======
8000a2f6:	00 90       	ret 

8000a2f8 <osEE_scheduler_task_set_running>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a5fe:	00 90       	ret 

8000a600 <osEE_scheduler_task_set_running>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a514:	40 ae       	mov.aa %a14,%sp
=======
8000a600:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a602:	91 00 00 f8 	movh.a %a15,32768
8000a606:	99 ff 08 50 	ld.a %a15,[%a15]328 <80000148 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000a60a:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000a60c:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000a60e:	99 42 0c 00 	ld.a %a2,[%a4]12 <80000148 <osEE_cdb_var>>
8000a612:	0c 22       	ld.bu %d15,[%a2]2
8000a614:	5e 43       	jne %d15,4,8000a61a <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a616:	82 2f       	mov %d15,2
8000a618:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
<<<<<<< HEAD
8000a52e:	e8 05       	st.a [%a15]0,%a5
=======
8000a2f8:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a2fa:	91 00 00 f8 	movh.a %a15,32768
8000a2fe:	99 ff 0c 30 	ld.a %a15,[%a15]204 <800000cc <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000a302:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000a304:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000a306:	99 42 0c 00 	ld.a %a2,[%a4]12 <800000cc <osEE_cdb_var>>
8000a30a:	0c 22       	ld.bu %d15,[%a2]2
8000a30c:	5e 43       	jne %d15,4,8000a312 <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a30e:	82 2f       	mov %d15,2
8000a310:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
8000a312:	e8 05       	st.a [%a15]0,%a5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a61a:	e8 05       	st.a [%a15]0,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a530:	7c 68       	jnz.a %a6,8000a540 <osEE_scheduler_task_set_running+0x2c>
=======
8000a314:	7c 68       	jnz.a %a6,8000a324 <osEE_scheduler_task_set_running+0x2c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a61c:	7c 68       	jnz.a %a6,8000a62c <osEE_scheduler_task_set_running+0x2c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
<<<<<<< HEAD
<<<<<<< HEAD
8000a532:	c8 22       	ld.a %a2,[%a15]8
=======
8000a61e:	c8 22       	ld.a %a2,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  (*pp_first)              = p_sn_allocated->p_next;
8000a620:	4c 20       	ld.w %d15,[%a2]0
8000a622:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a624:	82 0f       	mov %d15,0
8000a626:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000a628:	e8 32       	st.a [%a15]12,%a2
8000a62a:	3c 02       	j 8000a62e <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
<<<<<<< HEAD
8000a540:	e8 36       	st.a [%a15]12,%a6
=======
8000a316:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a318:	4c 20       	ld.w %d15,[%a2]0
8000a31a:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a31c:	82 0f       	mov %d15,0
8000a31e:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000a320:	e8 32       	st.a [%a15]12,%a2
8000a322:	3c 02       	j 8000a326 <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
8000a324:	e8 36       	st.a [%a15]12,%a6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a62c:	e8 36       	st.a [%a15]12,%a6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a542:	c8 32       	ld.a %a2,[%a15]12
8000a544:	b5 25 04 00 	st.a [%a2]4,%a5
=======
8000a62e:	c8 32       	ld.a %a2,[%a15]12
8000a630:	b5 25 04 00 	st.a [%a2]4,%a5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000a634:	c8 3f       	ld.a %a15,[%a15]12
8000a636:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
8000a638:	6d 00 03 00 	call 8000a63e <osEE_change_context_from_running>
8000a63c:	00 90       	ret 

<<<<<<< HEAD
8000a552 <osEE_change_context_from_running>:
=======
8000a326:	c8 32       	ld.a %a2,[%a15]12
8000a328:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000a32c:	c8 3f       	ld.a %a15,[%a15]12
8000a32e:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
8000a330:	6d 00 03 00 	call 8000a336 <osEE_change_context_from_running>
8000a334:	00 90       	ret 

8000a336 <osEE_change_context_from_running>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a63e <osEE_change_context_from_running>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a552:	40 ae       	mov.aa %a14,%sp
8000a554:	40 4f       	mov.aa %a15,%a4
=======
8000a63e:	40 ae       	mov.aa %a14,%sp
8000a640:	40 4f       	mov.aa %a15,%a4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a642:	99 52 0c 00 	ld.a %a2,[%a5]12
8000a646:	0c 22       	ld.bu %d15,[%a2]2
8000a648:	5e 28       	jne %d15,2,8000a658 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000a64a:	40 54       	mov.aa %a4,%a5
8000a64c:	99 55 04 00 	ld.a %a5,[%a5]4
8000a650:	c8 16       	ld.a %a6,[%a15]4
8000a652:	6d 00 73 00 	call 8000a738 <osEE_hal_save_ctx_and_restore_ctx>
8000a656:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000a658:	40 54       	mov.aa %a4,%a5
8000a65a:	99 55 04 00 	ld.a %a5,[%a5]4
8000a65e:	c8 16       	ld.a %a6,[%a15]4
8000a660:	6d 00 8b 00 	call 8000a776 <osEE_hal_save_ctx_and_ready2stacked>
8000a664:	00 90       	ret 

<<<<<<< HEAD
8000a57a <osEE_change_context_from_task_end>:
=======
8000a336:	40 ae       	mov.aa %a14,%sp
8000a338:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a33a:	99 52 0c 00 	ld.a %a2,[%a5]12
8000a33e:	0c 22       	ld.bu %d15,[%a2]2
8000a340:	5e 28       	jne %d15,2,8000a350 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000a342:	40 54       	mov.aa %a4,%a5
8000a344:	99 55 04 00 	ld.a %a5,[%a5]4
8000a348:	c8 16       	ld.a %a6,[%a15]4
8000a34a:	6d 00 73 00 	call 8000a430 <osEE_hal_save_ctx_and_restore_ctx>
8000a34e:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000a350:	40 54       	mov.aa %a4,%a5
8000a352:	99 55 04 00 	ld.a %a5,[%a5]4
8000a356:	c8 16       	ld.a %a6,[%a15]4
8000a358:	6d 00 8b 00 	call 8000a46e <osEE_hal_save_ctx_and_ready2stacked>
8000a35c:	00 90       	ret 

8000a35e <osEE_change_context_from_task_end>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a666 <osEE_change_context_from_task_end>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a57a:	40 ae       	mov.aa %a14,%sp
=======
8000a666:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a668:	cc 53       	ld.a %a15,[%a5]12
8000a66a:	0c f2       	ld.bu %d15,[%a15]2
8000a66c:	5e 27       	jne %d15,2,8000a67a <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000a66e:	40 54       	mov.aa %a4,%a5
8000a670:	99 55 04 00 	ld.a %a5,[%a5]4
8000a674:	6d 00 74 00 	call 8000a75c <osEE_hal_restore_ctx>
8000a678:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000a67a:	40 54       	mov.aa %a4,%a5
8000a67c:	99 55 04 00 	ld.a %a5,[%a5]4
8000a680:	6d 00 8d 00 	call 8000a79a <osEE_hal_ready2stacked>
8000a684:	00 90       	ret 

<<<<<<< HEAD
8000a59a <osEE_idle_task_terminate>:
=======
8000a35e:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a360:	cc 53       	ld.a %a15,[%a5]12
8000a362:	0c f2       	ld.bu %d15,[%a15]2
8000a364:	5e 27       	jne %d15,2,8000a372 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000a366:	40 54       	mov.aa %a4,%a5
8000a368:	99 55 04 00 	ld.a %a5,[%a5]4
8000a36c:	6d 00 74 00 	call 8000a454 <osEE_hal_restore_ctx>
8000a370:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000a372:	40 54       	mov.aa %a4,%a5
8000a374:	99 55 04 00 	ld.a %a5,[%a5]4
8000a378:	6d 00 8d 00 	call 8000a492 <osEE_hal_ready2stacked>
8000a37c:	00 90       	ret 

8000a37e <osEE_idle_task_terminate>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a686 <osEE_idle_task_terminate>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a59a:	40 ae       	mov.aa %a14,%sp
=======
8000a37e:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a686:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
<<<<<<< HEAD
<<<<<<< HEAD
8000a59c:	99 45 04 00 	ld.a %a5,[%a4]4
=======
8000a688:	99 45 04 00 	ld.a %a5,[%a4]4
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000a68c:	cc 40       	ld.a %a15,[%a4]0
8000a68e:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
<<<<<<< HEAD
8000a5a4:	cc 50       	ld.a %a15,[%a5]0
8000a5a6:	3c 02       	j 8000a5aa <osEE_idle_task_terminate+0x10>
=======
8000a380:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000a384:	cc 40       	ld.a %a15,[%a4]0
8000a386:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000a388:	cc 50       	ld.a %a15,[%a5]0
8000a38a:	3c 02       	j 8000a38e <osEE_idle_task_terminate+0x10>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a690:	cc 50       	ld.a %a15,[%a5]0
8000a692:	3c 02       	j 8000a696 <osEE_idle_task_terminate+0x10>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
<<<<<<< HEAD
<<<<<<< HEAD
8000a5a8:	60 ff       	mov.a %a15,%d15
8000a5aa:	4c f0       	ld.w %d15,[%a15]0
=======
8000a694:	60 ff       	mov.a %a15,%d15
8000a696:	4c f0       	ld.w %d15,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000a698:	8b 0f 20 22 	ne %d2,%d15,0
8000a69c:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000a6a0:	df 02 fa ff 	jne %d2,0,8000a694 <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000a6a4:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000a6a6:	6d 00 5b 00 	call 8000a75c <osEE_hal_restore_ctx>
8000a6aa:	00 90       	ret 

<<<<<<< HEAD
8000a5c0 <osEE_cpu_startos>:
=======
8000a38c:	60 ff       	mov.a %a15,%d15
8000a38e:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000a390:	8b 0f 20 22 	ne %d2,%d15,0
8000a394:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000a398:	df 02 fa ff 	jne %d2,0,8000a38c <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000a39c:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000a39e:	6d 00 5b 00 	call 8000a454 <osEE_hal_restore_ctx>
8000a3a2:	00 90       	ret 

8000a3a4 <osEE_cpu_startos>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6ac <osEE_cpu_startos>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a5c0:	40 ae       	mov.aa %a14,%sp
=======
8000a3a4:	40 ae       	mov.aa %a14,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6ac:	40 ae       	mov.aa %a14,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
<<<<<<< HEAD
<<<<<<< HEAD
8000a5c2:	4d c0 e1 5f 	mfcr %d5,$core_id
=======
8000a3a6:	4d c0 e1 5f 	mfcr %d5,$core_id
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6ae:	4d c0 e1 5f 	mfcr %d5,$core_id
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000a5c6:	91 00 00 f8 	movh.a %a15,32768
8000a5ca:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a5ce:	c8 2f       	ld.a %a15,[%a15]8
8000a5d0:	b0 ff       	add.a %a15,-1
=======
8000a6b2:	91 00 00 f8 	movh.a %a15,32768
8000a6b6:	d9 ff 34 40 	lea %a15,[%a15]308 <80000134 <osEE_kdb_var>>
8000a6ba:	c8 2f       	ld.a %a15,[%a15]8
8000a6bc:	b0 ff       	add.a %a15,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  for (i = 0U; i < tdb_size; ++i) {
8000a6be:	bd 0f 2a 00 	jz.a %a15,8000a712 <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
<<<<<<< HEAD
8000a5d6:	91 00 00 28 	movh.a %a2,32768
8000a5da:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
8000a5de:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
=======
8000a3aa:	91 00 00 f8 	movh.a %a15,32768
8000a3ae:	d9 ff 38 20 	lea %a15,[%a15]184 <800000b8 <osEE_kdb_var>>
8000a3b2:	c8 2f       	ld.a %a15,[%a15]8
8000a3b4:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000a3b6:	bd 0f 2a 00 	jz.a %a15,8000a40a <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a3ba:	91 00 00 28 	movh.a %a2,32768
8000a3be:	d9 22 38 20 	lea %a2,[%a2]184 <800000b8 <osEE_kdb_var>>
8000a3c2:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6c2:	91 00 00 28 	movh.a %a2,32768
8000a6c6:	d9 22 34 40 	lea %a2,[%a2]308 <80000134 <osEE_kdb_var>>
8000a6ca:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
<<<<<<< HEAD
<<<<<<< HEAD
8000a5e2:	8f 35 00 51 	and %d5,%d5,3
8000a5e6:	8f b5 00 50 	sh %d5,%d5,11
=======
8000a3c6:	8f 35 00 51 	and %d5,%d5,3
8000a3ca:	8f b5 00 50 	sh %d5,%d5,11
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6ce:	8f 35 00 51 	and %d5,%d5,3
8000a6d2:	8f b5 00 50 	sh %d5,%d5,11
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a5ea:	bb f0 ff 4f 	mov.u %d4,65535
8000a5ee:	82 0f       	mov %d15,0
8000a5f0:	b0 ff       	add.a %a15,-1
=======
8000a3ce:	bb f0 ff 4f 	mov.u %d4,65535
8000a3d2:	82 0f       	mov %d15,0
8000a3d4:	b0 ff       	add.a %a15,-1
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6d6:	bb f0 ff 4f 	mov.u %d4,65535
8000a6da:	82 0f       	mov %d15,0
8000a6dc:	b0 ff       	add.a %a15,-1
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
<<<<<<< HEAD
<<<<<<< HEAD
8000a5f2:	60 33       	mov.a %a3,%d3
8000a5f4:	90 32       	addsc.a %a2,%a3,%d15,2
8000a5f6:	d4 22       	ld.a %a2,[%a2]
=======
8000a3d6:	60 33       	mov.a %a3,%d3
8000a3d8:	90 32       	addsc.a %a2,%a3,%d15,2
8000a3da:	d4 22       	ld.a %a2,[%a2]
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6de:	60 33       	mov.a %a3,%d3
8000a6e0:	90 32       	addsc.a %a2,%a3,%d15,2
8000a6e2:	d4 22       	ld.a %a2,[%a2]
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a5f8:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a5fc:	df 22 12 80 	jne %d2,2,8000a620 <osEE_cpu_startos+0x60>
=======
8000a3dc:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a3e0:	df 22 12 80 	jne %d2,2,8000a404 <osEE_cpu_startos+0x60>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6e4:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a6e8:	df 22 12 80 	jne %d2,2,8000a70c <osEE_cpu_startos+0x60>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a600:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a604:	5f 42 0e 00 	jeq %d2,%d4,8000a620 <osEE_cpu_startos+0x60>
8000a608:	60 24       	mov.a %a4,%d2
8000a60a:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a60e:	11 43 00 3f 	addih.a %a3,%a3,61444
=======
8000a3e4:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a3e8:	5f 42 0e 00 	jeq %d2,%d4,8000a404 <osEE_cpu_startos+0x60>
8000a3ec:	60 24       	mov.a %a4,%d2
8000a3ee:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a3f2:	11 43 00 3f 	addih.a %a3,%a3,61444
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6ec:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a6f0:	5f 42 0e 00 	jeq %d2,%d4,8000a70c <osEE_cpu_startos+0x60>
8000a6f4:	60 24       	mov.a %a4,%d2
8000a6f6:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a6fa:	11 43 00 3f 	addih.a %a3,%a3,61444
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
<<<<<<< HEAD
<<<<<<< HEAD
8000a612:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a616:	c2 12       	add %d2,1
8000a618:	b7 82 99 23 	insert %d2,%d2,8,7,25
=======
8000a3f6:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a3fa:	c2 12       	add %d2,1
8000a3fc:	b7 82 99 23 	insert %d2,%d2,8,7,25
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a6fe:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a702:	c2 12       	add %d2,1
8000a704:	b7 82 99 23 	insert %d2,%d2,8,7,25
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
<<<<<<< HEAD
<<<<<<< HEAD
8000a61c:	a6 52       	or %d2,%d5
=======
8000a400:	a6 52       	or %d2,%d5
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a708:	a6 52       	or %d2,%d5
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
<<<<<<< HEAD
<<<<<<< HEAD
8000a61e:	74 32       	st.w [%a3],%d2
=======
8000a402:	74 32       	st.w [%a3],%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a70a:	74 32       	st.w [%a3],%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a620:	c2 1f       	add %d15,1
8000a622:	fd f0 e8 7f 	loop %a15,8000a5f2 <osEE_cpu_startos+0x32>
=======
8000a404:	c2 1f       	add %d15,1
8000a406:	fd f0 e8 7f 	loop %a15,8000a3d6 <osEE_cpu_startos+0x32>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a70c:	c2 1f       	add %d15,1
8000a70e:	fd f0 e8 7f 	loop %a15,8000a6de <osEE_cpu_startos+0x32>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
<<<<<<< HEAD
<<<<<<< HEAD
8000a626:	82 12       	mov %d2,1
8000a628:	00 90       	ret 

8000a62a <osEE_tc_change_context_from_task_end>:
=======
8000a40a:	82 12       	mov %d2,1
8000a40c:	00 90       	ret 

8000a40e <osEE_tc_change_context_from_task_end>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a712:	82 12       	mov %d2,1
8000a714:	00 90       	ret 

8000a716 <osEE_tc_change_context_from_task_end>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a62a:	99 42 0c 00 	ld.a %a2,[%a4]12
=======
8000a40e:	99 42 0c 00 	ld.a %a2,[%a4]12
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a716:	99 42 0c 00 	ld.a %a2,[%a4]12
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a62e:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a630:	0c 22       	ld.bu %d15,[%a2]2
8000a632:	1e 27       	jeq %d15,2,8000a640 <osEE_tc_change_context_from_task_end+0x16>
=======
8000a412:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a414:	0c 22       	ld.bu %d15,[%a2]2
8000a416:	1e 27       	jeq %d15,2,8000a424 <osEE_tc_change_context_from_task_end+0x16>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a71a:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a71c:	0c 22       	ld.bu %d15,[%a2]2
8000a71e:	1e 27       	jeq %d15,2,8000a72c <osEE_tc_change_context_from_task_end+0x16>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
<<<<<<< HEAD
<<<<<<< HEAD
8000a634:	40 f4       	mov.aa %a4,%a15
=======
8000a720:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a722:	c8 1f       	ld.a %a15,[%a15]4
8000a724:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
<<<<<<< HEAD
8000a63a:	1d 00 3a 00 	j 8000a6ae <osEE_hal_ready2stacked>
8000a63e:	00 90       	ret 
=======
8000a418:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a41a:	c8 1f       	ld.a %a15,[%a15]4
8000a41c:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000a41e:	1d 00 3a 00 	j 8000a492 <osEE_hal_ready2stacked>
8000a422:	00 90       	ret 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a726:	1d 00 3a 00 	j 8000a79a <osEE_hal_ready2stacked>
8000a72a:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
<<<<<<< HEAD
<<<<<<< HEAD
8000a640:	40 f4       	mov.aa %a4,%a15
=======
8000a72c:	40 f4       	mov.aa %a4,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a72e:	c8 1f       	ld.a %a15,[%a15]4
8000a730:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000a732:	1d 00 15 00 	j 8000a75c <osEE_hal_restore_ctx>
8000a736:	00 90       	ret 

<<<<<<< HEAD
8000a64c <osEE_hal_save_ctx_and_restore_ctx>:
=======
8000a424:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a426:	c8 1f       	ld.a %a15,[%a15]4
8000a428:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000a42a:	1d 00 15 00 	j 8000a454 <osEE_hal_restore_ctx>
8000a42e:	00 90       	ret 

8000a430 <osEE_hal_save_ctx_and_restore_ctx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a738 <osEE_hal_save_ctx_and_restore_ctx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
<<<<<<< HEAD
<<<<<<< HEAD
8000a64c:	40 af       	mov.aa %a15,%sp
=======
8000a430:	40 af       	mov.aa %a15,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a738:	40 af       	mov.aa %a15,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000a64e:	d9 f2 f0 ff 	lea %a2,[%a15]-16
=======
8000a432:	d9 f2 f0 ff 	lea %a2,[%a15]-16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a73a:	d9 f2 f0 ff 	lea %a2,[%a15]-16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a652:	40 2a       	mov.aa %sp,%a2
=======
8000a436:	40 2a       	mov.aa %sp,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a73e:	40 2a       	mov.aa %sp,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
<<<<<<< HEAD
<<<<<<< HEAD
8000a654:	4c 60       	ld.w %d15,[%a6]0
8000a656:	59 ff f0 ff 	st.w [%a15]-16,%d15
=======
8000a438:	4c 60       	ld.w %d15,[%a6]0
8000a43a:	59 ff f0 ff 	st.w [%a15]-16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a740:	4c 60       	ld.w %d15,[%a6]0
8000a742:	59 ff f0 ff 	st.w [%a15]-16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
<<<<<<< HEAD
<<<<<<< HEAD
8000a65a:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a65e:	59 ff f8 ff 	st.w [%a15]-8,%d15
=======
8000a43e:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a442:	59 ff f8 ff 	st.w [%a15]-8,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a746:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a74a:	59 ff f8 ff 	st.w [%a15]-8,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a662:	40 b3       	mov.aa %a3,%a11
=======
8000a74e:	40 b3       	mov.aa %a3,%a11
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a750:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
<<<<<<< HEAD
8000a668:	f4 62       	st.a [%a6],%a2
=======
8000a446:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a448:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a44c:	f4 62       	st.a [%a6],%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a754:	f4 62       	st.a [%a6],%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
<<<<<<< HEAD
<<<<<<< HEAD
8000a66a:	1d 00 03 00 	j 8000a670 <osEE_hal_restore_ctx>
8000a66e:	00 90       	ret 

8000a670 <osEE_hal_restore_ctx>:
=======
8000a44e:	1d 00 03 00 	j 8000a454 <osEE_hal_restore_ctx>
8000a452:	00 90       	ret 

8000a454 <osEE_hal_restore_ctx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a756:	1d 00 03 00 	j 8000a75c <osEE_hal_restore_ctx>
8000a75a:	00 90       	ret 

8000a75c <osEE_hal_restore_ctx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
<<<<<<< HEAD
<<<<<<< HEAD
8000a670:	cc 50       	ld.a %a15,[%a5]0
=======
8000a454:	cc 50       	ld.a %a15,[%a5]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a75c:	cc 50       	ld.a %a15,[%a5]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a672:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a674:	4c f2       	ld.w %d15,[%a15]8
8000a676:	40 2b       	mov.aa %a11,%a2
=======
8000a456:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a458:	4c f2       	ld.w %d15,[%a15]8
8000a45a:	40 2b       	mov.aa %a11,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a75e:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a760:	4c f2       	ld.w %d15,[%a15]8
8000a762:	40 2b       	mov.aa %a11,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a678:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a67c:	0d 00 c0 04 	isync 
=======
8000a45c:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a460:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a764:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a768:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
<<<<<<< HEAD
<<<<<<< HEAD
8000a680:	4c f0       	ld.w %d15,[%a15]0
8000a682:	6c 50       	st.w [%a5]0,%d15
=======
8000a464:	4c f0       	ld.w %d15,[%a15]0
8000a466:	6c 50       	st.w [%a5]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a76c:	4c f0       	ld.w %d15,[%a15]0
8000a76e:	6c 50       	st.w [%a5]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
<<<<<<< HEAD
<<<<<<< HEAD
8000a684:	1d ff 69 fd 	j 8000a156 <osEE_scheduler_task_wrapper_restore>
8000a688:	00 90       	ret 

8000a68a <osEE_hal_save_ctx_and_ready2stacked>:
8000a68a:	40 af       	mov.aa %a15,%sp
=======
8000a468:	1d ff 69 fd 	j 80009f3a <osEE_scheduler_task_wrapper_restore>
8000a46c:	00 90       	ret 

8000a46e <osEE_hal_save_ctx_and_ready2stacked>:
8000a46e:	40 af       	mov.aa %a15,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a770:	1d ff 69 fd 	j 8000a242 <osEE_scheduler_task_wrapper_restore>
8000a774:	00 90       	ret 

8000a776 <osEE_hal_save_ctx_and_ready2stacked>:
8000a776:	40 af       	mov.aa %a15,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000a68c:	d9 f2 f0 ff 	lea %a2,[%a15]-16
=======
8000a470:	d9 f2 f0 ff 	lea %a2,[%a15]-16
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a778:	d9 f2 f0 ff 	lea %a2,[%a15]-16
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a690:	40 2a       	mov.aa %sp,%a2
=======
8000a474:	40 2a       	mov.aa %sp,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a77c:	40 2a       	mov.aa %sp,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
<<<<<<< HEAD
<<<<<<< HEAD
8000a692:	4c 60       	ld.w %d15,[%a6]0
8000a694:	59 ff f0 ff 	st.w [%a15]-16,%d15
=======
8000a476:	4c 60       	ld.w %d15,[%a6]0
8000a478:	59 ff f0 ff 	st.w [%a15]-16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a77e:	4c 60       	ld.w %d15,[%a6]0
8000a780:	59 ff f0 ff 	st.w [%a15]-16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
<<<<<<< HEAD
<<<<<<< HEAD
8000a698:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a69c:	59 ff f8 ff 	st.w [%a15]-8,%d15
=======
8000a47c:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a480:	59 ff f8 ff 	st.w [%a15]-8,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a784:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a788:	59 ff f8 ff 	st.w [%a15]-8,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a6a0:	40 b3       	mov.aa %a3,%a11
=======
8000a78c:	40 b3       	mov.aa %a3,%a11
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a78e:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
<<<<<<< HEAD
8000a6a6:	f4 62       	st.a [%a6],%a2
=======
8000a484:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a486:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a48a:	f4 62       	st.a [%a6],%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a792:	f4 62       	st.a [%a6],%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
<<<<<<< HEAD
<<<<<<< HEAD
8000a6a8:	1d 00 03 00 	j 8000a6ae <osEE_hal_ready2stacked>
8000a6ac:	00 90       	ret 

8000a6ae <osEE_hal_ready2stacked>:
=======
8000a48c:	1d 00 03 00 	j 8000a492 <osEE_hal_ready2stacked>
8000a490:	00 90       	ret 

8000a492 <osEE_hal_ready2stacked>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a794:	1d 00 03 00 	j 8000a79a <osEE_hal_ready2stacked>
8000a798:	00 90       	ret 

8000a79a <osEE_hal_ready2stacked>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a6ae:	cc 50       	ld.a %a15,[%a5]0
8000a6b0:	40 fa       	mov.aa %sp,%a15
=======
8000a492:	cc 50       	ld.a %a15,[%a5]0
8000a494:	40 fa       	mov.aa %sp,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a79a:	cc 50       	ld.a %a15,[%a5]0
8000a79c:	40 fa       	mov.aa %sp,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a6b2:	0d 00 00 02 	svlcx 
=======
8000a496:	0d 00 00 02 	svlcx 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a79e:	0d 00 00 02 	svlcx 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
<<<<<<< HEAD
<<<<<<< HEAD
8000a6b6:	40 af       	mov.aa %a15,%sp
=======
8000a49a:	40 af       	mov.aa %a15,%sp
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7a2:	40 af       	mov.aa %a15,%sp
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
<<<<<<< HEAD
<<<<<<< HEAD
8000a6b8:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a6bc:	40 2a       	mov.aa %sp,%a2
=======
8000a49c:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a4a0:	40 2a       	mov.aa %sp,%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7a4:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a7a8:	40 2a       	mov.aa %sp,%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
<<<<<<< HEAD
<<<<<<< HEAD
8000a6be:	4c 50       	ld.w %d15,[%a5]0
8000a6c0:	59 ff f0 ff 	st.w [%a15]-16,%d15
=======
8000a4a2:	4c 50       	ld.w %d15,[%a5]0
8000a4a4:	59 ff f0 ff 	st.w [%a15]-16,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7aa:	4c 50       	ld.w %d15,[%a5]0
8000a7ac:	59 ff f0 ff 	st.w [%a15]-16,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
<<<<<<< HEAD
<<<<<<< HEAD
8000a6c4:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a6c8:	59 ff f8 ff 	st.w [%a15]-8,%d15
=======
8000a4a8:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a4ac:	59 ff f8 ff 	st.w [%a15]-8,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7b0:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a7b4:	59 ff f8 ff 	st.w [%a15]-8,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a6cc:	40 b3       	mov.aa %a3,%a11
=======
8000a7b8:	40 b3       	mov.aa %a3,%a11
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a7ba:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
<<<<<<< HEAD
8000a6d2:	f4 52       	st.a [%a5],%a2
=======
8000a4b0:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a4b2:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a4b6:	f4 52       	st.a [%a5],%a2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7be:	f4 52       	st.a [%a5],%a2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
<<<<<<< HEAD
<<<<<<< HEAD
8000a6d4:	1d ff 46 fd 	j 8000a160 <osEE_scheduler_task_wrapper_run>
8000a6d8:	00 90       	ret 

8000a6da <osEE_tc_change_context_from_isr2_end>:
=======
8000a4b8:	1d ff 46 fd 	j 80009f44 <osEE_scheduler_task_wrapper_run>
8000a4bc:	00 90       	ret 

8000a4be <osEE_tc_change_context_from_isr2_end>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7c0:	1d ff 46 fd 	j 8000a24c <osEE_scheduler_task_wrapper_run>
8000a7c4:	00 90       	ret 

8000a7c6 <osEE_tc_change_context_from_isr2_end>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
<<<<<<< HEAD
<<<<<<< HEAD
8000a6da:	4d 40 e0 ff 	mfcr %d15,$psw
8000a6de:	8f ff c7 f1 	andn %d15,%d15,127
8000a6e2:	cd 4f e0 0f 	mtcr $psw,%d15
8000a6e6:	0d 00 c0 04 	isync 
=======
8000a4be:	4d 40 e0 ff 	mfcr %d15,$psw
8000a4c2:	8f ff c7 f1 	andn %d15,%d15,127
8000a4c6:	cd 4f e0 0f 	mtcr $psw,%d15
8000a4ca:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7c6:	4d 40 e0 ff 	mfcr %d15,$psw
8000a7ca:	8f ff c7 f1 	andn %d15,%d15,127
8000a7ce:	cd 4f e0 0f 	mtcr $psw,%d15
8000a7d2:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a6ea:	91 10 00 f8 	movh.a %a15,32769
8000a6ee:	d9 ff 6a 8a 	lea %a15,[%a15]-22998 <8000a62a <osEE_tc_change_context_from_task_end>>
8000a6f2:	40 fb       	mov.aa %a11,%a15
=======
8000a4ce:	91 10 00 f8 	movh.a %a15,32769
8000a4d2:	d9 ff 4e 0a 	lea %a15,[%a15]-23538 <8000a40e <osEE_tc_change_context_from_task_end>>
8000a4d6:	40 fb       	mov.aa %a11,%a15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7d6:	91 10 00 f8 	movh.a %a15,32769
8000a7da:	d9 ff 56 ca 	lea %a15,[%a15]-22762 <8000a716 <osEE_tc_change_context_from_task_end>>
8000a7de:	40 fb       	mov.aa %a11,%a15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
8000a6f4:	00 80       	rfe 
8000a6f6:	00 90       	ret 

8000a6f8 <osEE_hal_terminate_ctx>:
=======
8000a4d8:	00 80       	rfe 
8000a4da:	00 90       	ret 

8000a4dc <osEE_hal_terminate_ctx>:
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7e0:	00 80       	rfe 
8000a7e2:	00 90       	ret 

8000a7e4 <osEE_hal_terminate_ctx>:
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
<<<<<<< HEAD
<<<<<<< HEAD
8000a6f8:	20 08       	sub.a %sp,8
=======
8000a4dc:	20 08       	sub.a %sp,8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7e4:	20 08       	sub.a %sp,8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
<<<<<<< HEAD
<<<<<<< HEAD
8000a6fa:	4d 80 e3 2f 	mfcr %d2,$fcx
=======
8000a4de:	4d 80 e3 2f 	mfcr %d2,$fcx
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7e6:	4d 80 e3 2f 	mfcr %d2,$fcx
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
<<<<<<< HEAD
<<<<<<< HEAD
8000a6fe:	4d 00 e0 ff 	mfcr %d15,$pcxi
=======
8000a4e2:	4d 00 e0 ff 	mfcr %d15,$pcxi
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7ea:	4d 00 e0 ff 	mfcr %d15,$pcxi
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
<<<<<<< HEAD
<<<<<<< HEAD
8000a702:	cc 40       	ld.a %a15,[%a4]0
8000a704:	48 23       	ld.w %d3,[%a15]8
=======
8000a4e6:	cc 40       	ld.a %a15,[%a4]0
8000a4e8:	48 23       	ld.w %d3,[%a15]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7ee:	cc 40       	ld.a %a15,[%a4]0
8000a7f0:	48 23       	ld.w %d3,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
<<<<<<< HEAD
<<<<<<< HEAD
8000a706:	b9 f4 08 00 	ld.hu %d4,[%a15]8
=======
8000a4ea:	b9 f4 08 00 	ld.hu %d4,[%a15]8
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7f2:	b9 f4 08 00 	ld.hu %d4,[%a15]8
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
<<<<<<< HEAD
<<<<<<< HEAD
8000a70a:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a70e:	06 64       	sh %d4,6
=======
8000a4ee:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a4f2:	06 64       	sh %d4,6
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7f6:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a7fa:	06 64       	sh %d4,6
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
<<<<<<< HEAD
<<<<<<< HEAD
8000a710:	8f c3 01 30 	sh %d3,%d3,28
8000a714:	a6 43       	or %d3,%d4
8000a716:	60 3f       	mov.a %a15,%d3
=======
8000a4f4:	8f c3 01 30 	sh %d3,%d3,28
8000a4f8:	a6 43       	or %d3,%d4
8000a4fa:	60 3f       	mov.a %a15,%d3
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a7fc:	8f c3 01 30 	sh %d3,%d3,28
8000a800:	a6 43       	or %d3,%d4
8000a802:	60 3f       	mov.a %a15,%d3
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
<<<<<<< HEAD
<<<<<<< HEAD
8000a718:	82 03       	mov %d3,0
=======
8000a4fc:	82 03       	mov %d3,0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a804:	82 03       	mov %d3,0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
<<<<<<< HEAD
<<<<<<< HEAD
8000a71a:	bc f3       	jz.a %a15,8000a720 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a71c:	48 03       	ld.w %d3,[%a15]0
=======
8000a4fe:	bc f3       	jz.a %a15,8000a504 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a500:	48 03       	ld.w %d3,[%a15]0
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a806:	bc f3       	jz.a %a15,8000a80c <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a808:	48 03       	ld.w %d3,[%a15]0
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
<<<<<<< HEAD
<<<<<<< HEAD
8000a71e:	68 02       	st.w [%a15]0,%d2
=======
8000a502:	68 02       	st.w [%a15]0,%d2
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a80a:	68 02       	st.w [%a15]0,%d2
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a720:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a724:	0d 00 c0 04 	isync 
=======
8000a504:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a508:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a80c:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a810:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
<<<<<<< HEAD
<<<<<<< HEAD
8000a728:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a72c:	0d 00 c0 04 	isync 
=======
8000a50c:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a510:	0d 00 c0 04 	isync 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a814:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a818:	0d 00 c0 04 	isync 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
<<<<<<< HEAD
<<<<<<< HEAD
8000a730:	cc 40       	ld.a %a15,[%a4]0
8000a732:	4c f0       	ld.w %d15,[%a15]0
8000a734:	6c 40       	st.w [%a4]0,%d15
=======
8000a514:	cc 40       	ld.a %a15,[%a4]0
8000a516:	4c f0       	ld.w %d15,[%a15]0
8000a518:	6c 40       	st.w [%a4]0,%d15
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a81c:	cc 40       	ld.a %a15,[%a4]0
8000a81e:	4c f0       	ld.w %d15,[%a15]0
8000a820:	6c 40       	st.w [%a4]0,%d15
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
<<<<<<< HEAD
<<<<<<< HEAD
8000a736:	91 00 00 48 	movh.a %a4,32768
8000a73a:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
8000a73e:	d9 a5 04 00 	lea %a5,[%sp]4 <8000011c <osEE_kdb_var>>
8000a742:	6d ff 91 fe 	call 8000a464 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a746:	d8 01       	ld.a %a15,[%sp]4
8000a748:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a74c:	1e 25       	jeq %d15,2,8000a756 <osEE_hal_terminate_ctx+0x5e>
=======
8000a51a:	91 00 00 48 	movh.a %a4,32768
8000a51e:	d9 44 38 20 	lea %a4,[%a4]184 <800000b8 <osEE_kdb_var>>
8000a522:	d9 a5 04 00 	lea %a5,[%sp]4 <800000b8 <osEE_kdb_var>>
8000a526:	6d ff 91 fe 	call 8000a248 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a52a:	d8 01       	ld.a %a15,[%sp]4
8000a52c:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a530:	1e 25       	jeq %d15,2,8000a53a <osEE_hal_terminate_ctx+0x5e>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a822:	91 00 00 48 	movh.a %a4,32768
8000a826:	d9 44 34 40 	lea %a4,[%a4]308 <80000134 <osEE_kdb_var>>
8000a82a:	d9 a5 04 00 	lea %a5,[%sp]4 <80000134 <osEE_kdb_var>>
8000a82e:	6d ff 91 fe 	call 8000a550 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a832:	d8 01       	ld.a %a15,[%sp]4
8000a834:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a838:	1e 25       	jeq %d15,2,8000a842 <osEE_hal_terminate_ctx+0x5e>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
<<<<<<< HEAD
<<<<<<< HEAD
8000a74e:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a750:	1d ff 6d ff 	j 8000a62a <osEE_tc_change_context_from_task_end>
=======
8000a532:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a534:	1d ff 6d ff 	j 8000a40e <osEE_tc_change_context_from_task_end>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a83a:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a83c:	1d ff 6d ff 	j 8000a716 <osEE_tc_change_context_from_task_end>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
<<<<<<< HEAD
<<<<<<< HEAD
8000a754:	3c 00       	j 8000a754 <osEE_hal_terminate_ctx+0x5c>
=======
8000a538:	3c 00       	j 8000a538 <osEE_hal_terminate_ctx+0x5c>
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
=======
8000a840:	3c 00       	j 8000a840 <osEE_hal_terminate_ctx+0x5c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
<<<<<<< HEAD
<<<<<<< HEAD
8000a756:	40 24       	mov.aa %a4,%a2
8000a758:	6d ff c1 ff 	call 8000a6da <osEE_tc_change_context_from_isr2_end>
8000a75c:	3c fc       	j 8000a754 <osEE_hal_terminate_ctx+0x5c>
=======
8000a842:	40 24       	mov.aa %a4,%a2
8000a844:	6d ff c1 ff 	call 8000a7c6 <osEE_tc_change_context_from_isr2_end>
8000a848:	3c fc       	j 8000a840 <osEE_hal_terminate_ctx+0x5c>
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311

8000a84a <__lshrdi3>:
8000a84a:	6f 56 0c 80 	jnz.t %d6,5,8000a862 <__lshrdi3+0x18>
8000a84e:	8b 06 02 71 	rsub %d7,%d6,32
8000a852:	32 56       	rsub %d6
8000a854:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a858:	0f 65 00 30 	sh %d3,%d5,%d6
8000a85c:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a860:	00 90       	ret 
8000a862:	8b 06 02 60 	add %d6,%d6,32
8000a866:	32 56       	rsub %d6
8000a868:	0f 65 00 20 	sh %d2,%d5,%d6
8000a86c:	82 03       	mov %d3,0
8000a86e:	00 90       	ret 

8000a870 <__extendsfdf2>:
8000a870:	20 20       	sub.a %sp,32
8000a872:	d9 a4 20 00 	lea %a4,[%sp]32
8000a876:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a87a:	d9 a5 10 00 	lea %a5,[%sp]16
8000a87e:	6d 00 d8 02 	call 8000ae2e <__unpack_f>
8000a882:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a886:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a88a:	8f e2 1f f0 	sh %d15,%d2,-2
8000a88e:	8f e2 01 20 	sh %d2,%d2,30
8000a892:	74 a2       	st.w [%sp],%d2
8000a894:	78 01       	st.w [%sp]4,%d15
8000a896:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a89a:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a89e:	1d 00 8e 02 	j 8000adba <__make_dp>

8000a8a2 <_fpadd_parts>:
8000a8a2:	0c 40       	ld.bu %d15,[%a4]0
8000a8a4:	40 42       	mov.aa %a2,%a4
8000a8a6:	bf 2f cb 80 	jlt.u %d15,2,8000aa3c <_fpadd_parts+0x19a>
8000a8aa:	14 52       	ld.bu %d2,[%a5]
8000a8ac:	40 52       	mov.aa %a2,%a5
8000a8ae:	bf 22 c7 80 	jlt.u %d2,2,8000aa3c <_fpadd_parts+0x19a>
8000a8b2:	5e 4e       	jne %d15,4,8000a8ce <_fpadd_parts+0x2c>
8000a8b4:	40 42       	mov.aa %a2,%a4
8000a8b6:	df 42 c3 80 	jne %d2,4,8000aa3c <_fpadd_parts+0x19a>
8000a8ba:	19 42 04 00 	ld.w %d2,[%a4]4
8000a8be:	4c 51       	ld.w %d15,[%a5]4
8000a8c0:	5f f2 be 00 	jeq %d2,%d15,8000aa3c <_fpadd_parts+0x19a>
8000a8c4:	91 00 00 f8 	movh.a %a15,32768
8000a8c8:	d9 f2 ec b0 	lea %a2,[%a15]3820 <80000eec <__thenan_df>>
8000a8cc:	00 90       	ret 
8000a8ce:	40 52       	mov.aa %a2,%a5
8000a8d0:	df 42 b6 00 	jeq %d2,4,8000aa3c <_fpadd_parts+0x19a>
8000a8d4:	df 22 11 80 	jne %d2,2,8000a8f6 <_fpadd_parts+0x54>
8000a8d8:	40 42       	mov.aa %a2,%a4
8000a8da:	df 2f b1 80 	jne %d15,2,8000aa3c <_fpadd_parts+0x19a>
8000a8de:	40 63       	mov.aa %a3,%a6
8000a8e0:	a0 4f       	mov.a %a15,4
8000a8e2:	44 4f       	ld.w %d15,[%a4+]
8000a8e4:	64 3f       	st.w [%a3+],%d15
8000a8e6:	fc fe       	loop %a15,8000a8e2 <_fpadd_parts+0x40>
8000a8e8:	4c 21       	ld.w %d15,[%a2]4
8000a8ea:	19 52 04 00 	ld.w %d2,[%a5]4
8000a8ee:	40 62       	mov.aa %a2,%a6
8000a8f0:	26 2f       	and %d15,%d2
8000a8f2:	6c 61       	st.w [%a6]4,%d15
8000a8f4:	00 90       	ret 
8000a8f6:	40 52       	mov.aa %a2,%a5
8000a8f8:	df 2f a2 00 	jeq %d15,2,8000aa3c <_fpadd_parts+0x19a>
8000a8fc:	4c 42       	ld.w %d15,[%a4]8
8000a8fe:	19 52 08 00 	ld.w %d2,[%a5]8
8000a902:	40 6f       	mov.aa %a15,%a6
8000a904:	52 23       	sub %d3,%d15,%d2
8000a906:	0b 30 c0 c1 	abs %d12,%d3
8000a90a:	8b 0c 84 42 	ge %d4,%d12,64
8000a90e:	40 5c       	mov.aa %a12,%a5
8000a910:	40 4d       	mov.aa %a13,%a4
8000a912:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a916:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a91a:	df 04 35 80 	jne %d4,0,8000a984 <_fpadd_parts+0xe2>
8000a91e:	bf 13 19 00 	jlt %d3,1,8000a950 <_fpadd_parts+0xae>
8000a922:	0b 89 10 48 	mov %e4,%d9,%d8
8000a926:	02 c6       	mov %d6,%d12
8000a928:	6d ff 91 ff 	call 8000a84a <__lshrdi3>
8000a92c:	d2 14       	mov %e4,1
8000a92e:	02 c6       	mov %d6,%d12
8000a930:	02 2e       	mov %d14,%d2
8000a932:	02 3d       	mov %d13,%d3
8000a934:	6d 00 70 02 	call 8000ae14 <__ashldi3>
8000a938:	8b f2 9f 20 	addx %d2,%d2,-1
8000a93c:	8b f3 bf 30 	addc %d3,%d3,-1
8000a940:	26 82       	and %d2,%d8
8000a942:	26 93       	and %d3,%d9
8000a944:	a6 23       	or %d3,%d2
8000a946:	02 e8       	mov %d8,%d14
8000a948:	8b 03 00 85 	or.ne %d8,%d3,0
8000a94c:	02 d9       	mov %d9,%d13
8000a94e:	3c 21       	j 8000a990 <_fpadd_parts+0xee>
8000a950:	df 03 20 00 	jeq %d3,0,8000a990 <_fpadd_parts+0xee>
8000a954:	0b ab 10 48 	mov %e4,%d11,%d10
8000a958:	02 c6       	mov %d6,%d12
8000a95a:	6d ff 78 ff 	call 8000a84a <__lshrdi3>
8000a95e:	d2 14       	mov %e4,1
8000a960:	02 c6       	mov %d6,%d12
8000a962:	02 2e       	mov %d14,%d2
8000a964:	02 3d       	mov %d13,%d3
8000a966:	6d 00 57 02 	call 8000ae14 <__ashldi3>
8000a96a:	8b f2 9f 20 	addx %d2,%d2,-1
8000a96e:	8b f3 bf 30 	addc %d3,%d3,-1
8000a972:	26 a2       	and %d2,%d10
8000a974:	26 b3       	and %d3,%d11
8000a976:	a6 23       	or %d3,%d2
8000a978:	02 ea       	mov %d10,%d14
8000a97a:	42 cf       	add %d15,%d12
8000a97c:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a980:	02 db       	mov %d11,%d13
8000a982:	3c 07       	j 8000a990 <_fpadd_parts+0xee>
8000a984:	3f f2 05 00 	jlt %d2,%d15,8000a98e <_fpadd_parts+0xec>
8000a988:	02 2f       	mov %d15,%d2
8000a98a:	d2 0a       	mov %e10,0
8000a98c:	3c 02       	j 8000a990 <_fpadd_parts+0xee>
8000a98e:	d2 08       	mov %e8,0
8000a990:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a994:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a998:	5f 24 34 00 	jeq %d4,%d2,8000aa00 <_fpadd_parts+0x15e>
8000a99c:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a9a0:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a9a4:	76 45       	jz %d4,8000a9ae <_fpadd_parts+0x10c>
8000a9a6:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a9aa:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a9ae:	0e 37       	jltz %d3,8000a9bc <_fpadd_parts+0x11a>
8000a9b0:	82 04       	mov %d4,0
8000a9b2:	68 14       	st.w [%a15]4,%d4
8000a9b4:	68 2f       	st.w [%a15]8,%d15
8000a9b6:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a9ba:	3c 0c       	j 8000a9d2 <_fpadd_parts+0x130>
8000a9bc:	68 2f       	st.w [%a15]8,%d15
8000a9be:	8b 03 00 f1 	rsub %d15,%d3,0
8000a9c2:	82 14       	mov %d4,1
8000a9c4:	8b 02 00 31 	rsub %d3,%d2,0
8000a9c8:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a9cc:	68 14       	st.w [%a15]4,%d4
8000a9ce:	68 33       	st.w [%a15]12,%d3
8000a9d0:	68 4f       	st.w [%a15]16,%d15
8000a9d2:	82 f5       	mov %d5,-1
8000a9d4:	06 c5       	sh %d5,-4
8000a9d6:	48 32       	ld.w %d2,[%a15]12
8000a9d8:	48 43       	ld.w %d3,[%a15]16
8000a9da:	8b f2 9f 60 	addx %d6,%d2,-1
8000a9de:	8b f3 bf 40 	addc %d4,%d3,-1
8000a9e2:	3a 54       	eq %d15,%d4,%d5
8000a9e4:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a9e8:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a9ec:	6e 12       	jz %d15,8000aa10 <_fpadd_parts+0x16e>
8000a9ee:	4c f2       	ld.w %d15,[%a15]8
8000a9f0:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a9f4:	c2 ff       	add %d15,-1
8000a9f6:	06 12       	sh %d2,1
8000a9f8:	68 32       	st.w [%a15]12,%d2
8000a9fa:	68 43       	st.w [%a15]16,%d3
8000a9fc:	68 2f       	st.w [%a15]8,%d15
8000a9fe:	3c ec       	j 8000a9d6 <_fpadd_parts+0x134>
8000aa00:	0b a8 40 20 	addx %d2,%d8,%d10
8000aa04:	68 2f       	st.w [%a15]8,%d15
8000aa06:	0b b9 50 f0 	addc %d15,%d9,%d11
8000aa0a:	68 14       	st.w [%a15]4,%d4
8000aa0c:	68 32       	st.w [%a15]12,%d2
8000aa0e:	68 4f       	st.w [%a15]16,%d15
8000aa10:	82 3f       	mov %d15,3
8000aa12:	28 0f       	st.b [%a15]0,%d15
8000aa14:	4c f4       	ld.w %d15,[%a15]16
8000aa16:	7b 00 00 42 	movh %d4,8192
8000aa1a:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000aa1e:	48 32       	ld.w %d2,[%a15]12
8000aa20:	40 f2       	mov.aa %a2,%a15
8000aa22:	f6 3d       	jnz %d3,8000aa3c <_fpadd_parts+0x19a>
8000aa24:	8f 12 00 31 	and %d3,%d2,1
8000aa28:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000aa2c:	06 ff       	sh %d15,-1
8000aa2e:	96 00       	or %d15,0
8000aa30:	68 4f       	st.w [%a15]16,%d15
8000aa32:	4c f2       	ld.w %d15,[%a15]8
8000aa34:	a6 32       	or %d2,%d3
8000aa36:	c2 1f       	add %d15,1
8000aa38:	68 32       	st.w [%a15]12,%d2
8000aa3a:	68 2f       	st.w [%a15]8,%d15
8000aa3c:	00 90       	ret 

8000aa3e <__adddf3>:
8000aa3e:	20 50       	sub.a %sp,80
8000aa40:	d9 a4 04 00 	lea %a4,[%sp]4
8000aa44:	d9 a5 14 00 	lea %a5,[%sp]20
8000aa48:	89 a4 44 09 	st.d [%sp]4,%e4
8000aa4c:	89 a6 4c 09 	st.d [%sp]12,%e6
8000aa50:	6d 00 c0 02 	call 8000afd0 <__unpack_d>
8000aa54:	d9 a4 0c 00 	lea %a4,[%sp]12
8000aa58:	d9 a5 28 00 	lea %a5,[%sp]40
8000aa5c:	6d 00 ba 02 	call 8000afd0 <__unpack_d>
8000aa60:	d9 a4 14 00 	lea %a4,[%sp]20
8000aa64:	d9 a5 28 00 	lea %a5,[%sp]40
8000aa68:	d9 a6 3c 00 	lea %a6,[%sp]60
8000aa6c:	6d ff 1b ff 	call 8000a8a2 <_fpadd_parts>
8000aa70:	40 24       	mov.aa %a4,%a2
8000aa72:	1d 00 26 02 	j 8000aebe <__pack_d>

8000aa76 <__subdf3>:
8000aa76:	20 50       	sub.a %sp,80
8000aa78:	d9 a4 04 00 	lea %a4,[%sp]4
8000aa7c:	d9 a5 14 00 	lea %a5,[%sp]20
8000aa80:	89 a4 44 09 	st.d [%sp]4,%e4
8000aa84:	89 a6 4c 09 	st.d [%sp]12,%e6
8000aa88:	6d 00 a4 02 	call 8000afd0 <__unpack_d>
8000aa8c:	d9 a4 0c 00 	lea %a4,[%sp]12
8000aa90:	d9 a5 28 00 	lea %a5,[%sp]40
8000aa94:	6d 00 9e 02 	call 8000afd0 <__unpack_d>
8000aa98:	58 0b       	ld.w %d15,[%sp]44
8000aa9a:	d9 a4 14 00 	lea %a4,[%sp]20
8000aa9e:	8f 1f 80 f1 	xor %d15,%d15,1
8000aaa2:	d9 a5 28 00 	lea %a5,[%sp]40
8000aaa6:	d9 a6 3c 00 	lea %a6,[%sp]60
8000aaaa:	78 0b       	st.w [%sp]44,%d15
8000aaac:	6d ff fb fe 	call 8000a8a2 <_fpadd_parts>
8000aab0:	40 24       	mov.aa %a4,%a2
8000aab2:	1d 00 06 02 	j 8000aebe <__pack_d>

8000aab6 <__muldf3>:
8000aab6:	20 50       	sub.a %sp,80
8000aab8:	d9 a4 04 00 	lea %a4,[%sp]4
8000aabc:	d9 a5 14 00 	lea %a5,[%sp]20
8000aac0:	89 a4 44 09 	st.d [%sp]4,%e4
8000aac4:	89 a6 4c 09 	st.d [%sp]12,%e6
8000aac8:	6d 00 84 02 	call 8000afd0 <__unpack_d>
8000aacc:	d9 a4 0c 00 	lea %a4,[%sp]12
8000aad0:	d9 a5 28 00 	lea %a5,[%sp]40
8000aad4:	6d 00 7e 02 	call 8000afd0 <__unpack_d>
8000aad8:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000aadc:	ff 23 0c 80 	jge.u %d3,2,8000aaf4 <__muldf3+0x3e>
8000aae0:	19 a2 18 00 	ld.w %d2,[%sp]24
8000aae4:	58 0b       	ld.w %d15,[%sp]44
8000aae6:	d9 a4 14 00 	lea %a4,[%sp]20
8000aaea:	0b f2 10 f1 	ne %d15,%d2,%d15
8000aaee:	78 06       	st.w [%sp]24,%d15
8000aaf0:	1d 00 b3 00 	j 8000ac56 <__muldf3+0x1a0>
8000aaf4:	39 af 28 00 	ld.bu %d15,[%sp]40
8000aaf8:	ff 2f 0c 80 	jge.u %d15,2,8000ab10 <__muldf3+0x5a>
8000aafc:	58 0b       	ld.w %d15,[%sp]44
8000aafe:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ab02:	d9 a4 28 00 	lea %a4,[%sp]40
8000ab06:	0b f2 10 f1 	ne %d15,%d2,%d15
8000ab0a:	78 0b       	st.w [%sp]44,%d15
8000ab0c:	1d 00 a5 00 	j 8000ac56 <__muldf3+0x1a0>
8000ab10:	df 43 09 80 	jne %d3,4,8000ab22 <__muldf3+0x6c>
8000ab14:	91 00 00 48 	movh.a %a4,32768
8000ab18:	d9 44 ec b0 	lea %a4,[%a4]3820 <80000eec <__thenan_df>>
8000ab1c:	df 2f 9d 00 	jeq %d15,2,8000ac56 <__muldf3+0x1a0>
8000ab20:	3c e0       	j 8000aae0 <__muldf3+0x2a>
8000ab22:	5e 48       	jne %d15,4,8000ab32 <__muldf3+0x7c>
8000ab24:	91 00 00 48 	movh.a %a4,32768
8000ab28:	d9 44 ec b0 	lea %a4,[%a4]3820 <80000eec <__thenan_df>>
8000ab2c:	df 23 95 00 	jeq %d3,2,8000ac56 <__muldf3+0x1a0>
8000ab30:	3c e6       	j 8000aafc <__muldf3+0x46>
8000ab32:	df 23 d7 7f 	jeq %d3,2,8000aae0 <__muldf3+0x2a>
8000ab36:	df 2f e3 7f 	jeq %d15,2,8000aafc <__muldf3+0x46>
8000ab3a:	58 08       	ld.w %d15,[%sp]32
8000ab3c:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000ab40:	d2 00       	mov %e0,0
8000ab42:	19 a0 34 00 	ld.w %d0,[%sp]52
8000ab46:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000ab4a:	82 0c       	mov %d12,0
8000ab4c:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000ab50:	19 aa 24 00 	ld.w %d10,[%sp]36
8000ab54:	82 02       	mov %d2,0
8000ab56:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000ab5a:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000ab5e:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000ab62:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000ab66:	82 0d       	mov %d13,0
8000ab68:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000ab6c:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000ab70:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000ab74:	0b 54 10 08 	mov %e0,%d4,%d5
8000ab78:	42 20       	add %d0,%d2
8000ab7a:	3a 73       	eq %d15,%d3,%d7
8000ab7c:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000ab80:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000ab84:	8b 0f 00 62 	eq %d6,%d15,0
8000ab88:	3a 50       	eq %d15,%d0,%d5
8000ab8a:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000ab8e:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000ab92:	ba 0f       	eq %d15,%d15,0
8000ab94:	53 1f 40 40 	mul.u %e4,%d15,1
8000ab98:	02 38       	mov %d8,%d3
8000ab9a:	82 09       	mov %d9,0
8000ab9c:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000aba0:	02 5f       	mov %d15,%d5
8000aba2:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000aba6:	42 6f       	add %d15,%d6
8000aba8:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000abac:	0b 4f 10 68 	mov %e6,%d15,%d4
8000abb0:	0b 62 40 40 	addx %d4,%d2,%d6
8000abb4:	0b 73 50 20 	addc %d2,%d3,%d7
8000abb8:	58 07       	ld.w %d15,[%sp]28
8000abba:	19 a3 30 00 	ld.w %d3,[%sp]48
8000abbe:	19 a5 18 00 	ld.w %d5,[%sp]24
8000abc2:	42 3f       	add %d15,%d3
8000abc4:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000abc8:	c2 4f       	add %d15,4
8000abca:	0b 35 10 31 	ne %d3,%d5,%d3
8000abce:	59 a3 00 10 	st.w [%sp]64,%d3
8000abd2:	7b 00 00 52 	movh %d5,8192
8000abd6:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000abda:	df 03 1b 00 	jeq %d3,0,8000ac10 <__muldf3+0x15a>
8000abde:	8f 14 00 31 	and %d3,%d4,1
8000abe2:	76 37       	jz %d3,8000abf0 <__muldf3+0x13a>
8000abe4:	8f f0 1f 30 	sh %d3,%d0,-1
8000abe8:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000abec:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000abf0:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000abf4:	c2 1f       	add %d15,1
8000abf6:	06 f2       	sh %d2,-1
8000abf8:	3c ed       	j 8000abd2 <__muldf3+0x11c>
8000abfa:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000abfe:	06 14       	sh %d4,1
8000ac00:	ce 04       	jgez %d0,8000ac08 <__muldf3+0x152>
8000ac02:	8f 14 40 51 	or %d5,%d4,1
8000ac06:	02 54       	mov %d4,%d5
8000ac08:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000ac0c:	c2 ff       	add %d15,-1
8000ac0e:	06 11       	sh %d1,1
8000ac10:	7b 00 00 51 	movh %d5,4096
8000ac14:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000ac18:	df 03 f1 ff 	jne %d3,0,8000abfa <__muldf3+0x144>
8000ac1c:	78 11       	st.w [%sp]68,%d15
8000ac1e:	02 4f       	mov %d15,%d4
8000ac20:	16 ff       	and %d15,255
8000ac22:	8b 0f 28 f2 	ne %d15,%d15,128
8000ac26:	ee 0f       	jnz %d15,8000ac44 <__muldf3+0x18e>
8000ac28:	a6 10       	or %d0,%d1
8000ac2a:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000ac2e:	8b 00 20 02 	ne %d0,%d0,0
8000ac32:	0f f0 e0 00 	andn %d0,%d0,%d15
8000ac36:	76 07       	jz %d0,8000ac44 <__muldf3+0x18e>
8000ac38:	8b 04 88 40 	addx %d4,%d4,128
8000ac3c:	8b 02 a0 20 	addc %d2,%d2,0
8000ac40:	8f f4 cf 41 	andn %d4,%d4,255
8000ac44:	d9 a4 10 10 	lea %a4,[%sp]80
8000ac48:	82 3f       	mov %d15,3
8000ac4a:	59 a4 08 10 	st.w [%sp]72,%d4
8000ac4e:	59 a2 0c 10 	st.w [%sp]76,%d2
8000ac52:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin2_TX_P33_8_OUT+0x4>>,%d15
8000ac56:	1d 00 34 01 	j 8000aebe <__pack_d>

8000ac5a <__divdf3>:
8000ac5a:	20 38       	sub.a %sp,56
8000ac5c:	40 a4       	mov.aa %a4,%sp
8000ac5e:	d9 a5 10 00 	lea %a5,[%sp]16
8000ac62:	89 a4 40 09 	st.d [%sp],%e4
8000ac66:	89 a6 48 09 	st.d [%sp]8,%e6
8000ac6a:	6d 00 b3 01 	call 8000afd0 <__unpack_d>
8000ac6e:	d9 a4 08 00 	lea %a4,[%sp]8
8000ac72:	d9 a5 24 00 	lea %a5,[%sp]36
8000ac76:	6d 00 ad 01 	call 8000afd0 <__unpack_d>
8000ac7a:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000ac7e:	bf 22 76 80 	jlt.u %d2,2,8000ad6a <__divdf3+0x110>
8000ac82:	39 af 24 00 	ld.bu %d15,[%sp]36
8000ac86:	d9 a4 24 00 	lea %a4,[%sp]36
8000ac8a:	bf 2f 72 80 	jlt.u %d15,2,8000ad6e <__divdf3+0x114>
8000ac8e:	19 a4 14 00 	ld.w %d4,[%sp]20
8000ac92:	19 a3 28 00 	ld.w %d3,[%sp]40
8000ac96:	c6 43       	xor %d3,%d4
8000ac98:	59 a3 14 00 	st.w [%sp]20,%d3
8000ac9c:	1b e2 ff 3f 	addi %d3,%d2,-2
8000aca0:	8f d3 0f 31 	and %d3,%d3,253
8000aca4:	f6 38       	jnz %d3,8000acb4 <__divdf3+0x5a>
8000aca6:	91 00 00 48 	movh.a %a4,32768
8000acaa:	d9 44 ec b0 	lea %a4,[%a4]3820 <80000eec <__thenan_df>>
8000acae:	5f f2 5e 80 	jne %d2,%d15,8000ad6a <__divdf3+0x110>
8000acb2:	3c 5e       	j 8000ad6e <__divdf3+0x114>
8000acb4:	5e 47       	jne %d15,4,8000acc2 <__divdf3+0x68>
8000acb6:	d2 02       	mov %e2,0
8000acb8:	82 0f       	mov %d15,0
8000acba:	89 a2 5c 09 	st.d [%sp]28,%e2
8000acbe:	78 06       	st.w [%sp]24,%d15
8000acc0:	3c 55       	j 8000ad6a <__divdf3+0x110>
8000acc2:	5e 25       	jne %d15,2,8000accc <__divdf3+0x72>
8000acc4:	82 4f       	mov %d15,4
8000acc6:	e9 af 10 00 	st.b [%sp]16,%d15
8000acca:	3c 50       	j 8000ad6a <__divdf3+0x110>
8000accc:	58 06       	ld.w %d15,[%sp]24
8000acce:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000acd2:	09 a4 70 09 	ld.d %e4,[%sp]48
8000acd6:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000acda:	52 66       	sub %d6,%d15,%d6
8000acdc:	3a 53       	eq %d15,%d3,%d5
8000acde:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000ace2:	59 a6 18 00 	st.w [%sp]24,%d6
8000ace6:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000acea:	ee 07       	jnz %d15,8000acf8 <__divdf3+0x9e>
8000acec:	c2 f6       	add %d6,-1
8000acee:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000acf2:	59 a6 18 00 	st.w [%sp]24,%d6
8000acf6:	06 12       	sh %d2,1
8000acf8:	82 01       	mov %d1,0
8000acfa:	7b 00 00 f1 	movh %d15,4096
8000acfe:	82 00       	mov %d0,0
8000ad00:	82 07       	mov %d7,0
8000ad02:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000ad06:	0b 53 00 61 	eq %d6,%d3,%d5
8000ad0a:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000ad0e:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000ad12:	f6 6b       	jnz %d6,8000ad28 <__divdf3+0xce>
8000ad14:	0f 10 a0 80 	or %d8,%d0,%d1
8000ad18:	0f f7 a0 60 	or %d6,%d7,%d15
8000ad1c:	0b 42 c0 20 	subx %d2,%d2,%d4
8000ad20:	02 80       	mov %d0,%d8
8000ad22:	02 67       	mov %d7,%d6
8000ad24:	0b 53 d0 30 	subc %d3,%d3,%d5
8000ad28:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000ad2c:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000ad30:	06 ff       	sh %d15,-1
8000ad32:	06 12       	sh %d2,1
8000ad34:	fd f0 e9 7f 	loop %a15,8000ad06 <__divdf3+0xac>
8000ad38:	02 0f       	mov %d15,%d0
8000ad3a:	16 ff       	and %d15,255
8000ad3c:	8b 0f 28 f2 	ne %d15,%d15,128
8000ad40:	0b 70 10 48 	mov %e4,%d0,%d7
8000ad44:	ee 0f       	jnz %d15,8000ad62 <__divdf3+0x108>
8000ad46:	a6 32       	or %d2,%d3
8000ad48:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000ad4c:	8b 02 20 22 	ne %d2,%d2,0
8000ad50:	0f f2 e0 20 	andn %d2,%d2,%d15
8000ad54:	76 27       	jz %d2,8000ad62 <__divdf3+0x108>
8000ad56:	8b 00 88 00 	addx %d0,%d0,128
8000ad5a:	8b 07 a0 40 	addc %d4,%d7,0
8000ad5e:	8f f0 cf 51 	andn %d5,%d0,255
8000ad62:	59 a5 1c 00 	st.w [%sp]28,%d5
8000ad66:	59 a4 20 00 	st.w [%sp]32,%d4
8000ad6a:	d9 a4 10 00 	lea %a4,[%sp]16
8000ad6e:	1d 00 a8 00 	j 8000aebe <__pack_d>

8000ad72 <__floatsidf>:
8000ad72:	20 18       	sub.a %sp,24
8000ad74:	82 3f       	mov %d15,3
8000ad76:	2c a4       	st.b [%sp]4,%d15
8000ad78:	8f 14 1e f0 	sh %d15,%d4,-31
8000ad7c:	78 02       	st.w [%sp]8,%d15
8000ad7e:	f6 44       	jnz %d4,8000ad86 <__floatsidf+0x14>
8000ad80:	82 2f       	mov %d15,2
8000ad82:	2c a4       	st.b [%sp]4,%d15
8000ad84:	3c 16       	j 8000adb0 <__floatsidf+0x3e>
8000ad86:	6e 09       	jz %d15,8000ad98 <__floatsidf+0x26>
8000ad88:	7b 00 00 f8 	movh %d15,32768
8000ad8c:	82 02       	mov %d2,0
8000ad8e:	7b 00 1e 3c 	movh %d3,49632
8000ad92:	5f f4 13 00 	jeq %d4,%d15,8000adb8 <__floatsidf+0x46>
8000ad96:	32 54       	rsub %d4
8000ad98:	0f 04 b0 f1 	clz %d15,%d4
8000ad9c:	1b df 01 60 	addi %d6,%d15,29
8000ada0:	82 05       	mov %d5,0
8000ada2:	6d 00 39 00 	call 8000ae14 <__ashldi3>
8000ada6:	8b ff 01 f1 	rsub %d15,%d15,31
8000adaa:	89 a2 50 09 	st.d [%sp]16,%e2
8000adae:	78 03       	st.w [%sp]12,%d15
8000adb0:	d9 a4 04 00 	lea %a4,[%sp]4
8000adb4:	6d 00 85 00 	call 8000aebe <__pack_d>
8000adb8:	00 90       	ret 

8000adba <__make_dp>:
8000adba:	20 18       	sub.a %sp,24
8000adbc:	09 a2 58 09 	ld.d %e2,[%sp]24
8000adc0:	d9 a4 04 00 	lea %a4,[%sp]4
8000adc4:	e9 a4 04 00 	st.b [%sp]4,%d4
8000adc8:	59 a5 08 00 	st.w [%sp]8,%d5
8000adcc:	59 a6 0c 00 	st.w [%sp]12,%d6
8000add0:	89 a2 50 09 	st.d [%sp]16,%e2
8000add4:	1d 00 75 00 	j 8000aebe <__pack_d>

8000add8 <__truncdfsf2>:
8000add8:	20 20       	sub.a %sp,32
8000adda:	d9 a4 20 00 	lea %a4,[%sp]32
8000adde:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000ade2:	d9 a5 0c 00 	lea %a5,[%sp]12
8000ade6:	6d 00 f5 00 	call 8000afd0 <__unpack_d>
8000adea:	19 a7 18 00 	ld.w %d7,[%sp]24
8000adee:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000adf2:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000adf6:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000adfa:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000adfe:	02 23       	mov %d3,%d2
8000ae00:	8f 12 40 21 	or %d2,%d2,1
8000ae04:	19 a5 10 00 	ld.w %d5,[%sp]16
8000ae08:	19 a6 14 00 	ld.w %d6,[%sp]20
8000ae0c:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000ae10:	1d 00 4c 00 	j 8000aea8 <__make_fp>

8000ae14 <__ashldi3>:
8000ae14:	6f 56 07 80 	jnz.t %d6,5,8000ae22 <__ashldi3+0xe>
8000ae18:	0f 64 00 20 	sh %d2,%d4,%d6
8000ae1c:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000ae20:	00 90       	ret 
8000ae22:	8b 06 1e 60 	add %d6,%d6,-32
8000ae26:	82 02       	mov %d2,0
8000ae28:	0f 64 00 30 	sh %d3,%d4,%d6
8000ae2c:	00 90       	ret 

8000ae2e <__unpack_f>:
8000ae2e:	54 43       	ld.w %d3,[%a4]
8000ae30:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000ae34:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000ae38:	8f 13 1e 30 	sh %d3,%d3,-31
8000ae3c:	59 53 04 00 	st.w [%a5]4,%d3
8000ae40:	df 02 18 80 	jne %d2,0,8000ae70 <__unpack_f+0x42>
8000ae44:	ee 03       	jnz %d15,8000ae4a <__unpack_f+0x1c>
8000ae46:	82 2f       	mov %d15,2
8000ae48:	3c 19       	j 8000ae7a <__unpack_f+0x4c>
8000ae4a:	3b 20 f8 2f 	mov %d2,-126
8000ae4e:	59 52 08 00 	st.w [%a5]8,%d2
8000ae52:	82 32       	mov %d2,3
8000ae54:	34 52       	st.b [%a5],%d2
8000ae56:	06 7f       	sh %d15,7
8000ae58:	3b 10 f8 2f 	mov %d2,-127
8000ae5c:	7b 00 00 44 	movh %d4,16384
8000ae60:	06 1f       	sh %d15,1
8000ae62:	02 23       	mov %d3,%d2
8000ae64:	c2 f2       	add %d2,-1
8000ae66:	3f 4f fd ff 	jlt.u %d15,%d4,8000ae60 <__unpack_f+0x32>
8000ae6a:	59 53 08 00 	st.w [%a5]8,%d3
8000ae6e:	3c 1b       	j 8000aea4 <__unpack_f+0x76>
8000ae70:	8b f2 2f 32 	ne %d3,%d2,255
8000ae74:	f6 3f       	jnz %d3,8000ae92 <__unpack_f+0x64>
8000ae76:	ee 04       	jnz %d15,8000ae7e <__unpack_f+0x50>
8000ae78:	82 4f       	mov %d15,4
8000ae7a:	2c 50       	st.b [%a5]0,%d15
8000ae7c:	00 90       	ret 
8000ae7e:	7b 00 04 20 	movh %d2,64
8000ae82:	26 f2       	and %d2,%d15
8000ae84:	76 22       	jz %d2,8000ae88 <__unpack_f+0x5a>
8000ae86:	82 12       	mov %d2,1
8000ae88:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000ae8c:	34 52       	st.b [%a5],%d2
8000ae8e:	06 7f       	sh %d15,7
8000ae90:	3c 0a       	j 8000aea4 <__unpack_f+0x76>
8000ae92:	1b 12 f8 2f 	addi %d2,%d2,-127
8000ae96:	06 7f       	sh %d15,7
8000ae98:	59 52 08 00 	st.w [%a5]8,%d2
8000ae9c:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000aea0:	82 32       	mov %d2,3
8000aea2:	34 52       	st.b [%a5],%d2
8000aea4:	6c 53       	st.w [%a5]12,%d15
8000aea6:	00 90       	ret 

8000aea8 <__make_fp>:
8000aea8:	20 10       	sub.a %sp,16
8000aeaa:	40 a4       	mov.aa %a4,%sp
8000aeac:	34 a4       	st.b [%sp],%d4
8000aeae:	59 a5 04 00 	st.w [%sp]4,%d5
8000aeb2:	59 a6 08 00 	st.w [%sp]8,%d6
8000aeb6:	59 a7 0c 00 	st.w [%sp]12,%d7
8000aeba:	1d 00 e1 00 	j 8000b07c <__pack_f>

8000aebe <__pack_d>:
8000aebe:	14 42       	ld.bu %d2,[%a4]
8000aec0:	19 49 0c 00 	ld.w %d9,[%a4]12
8000aec4:	19 48 10 00 	ld.w %d8,[%a4]16
8000aec8:	19 4c 04 00 	ld.w %d12,[%a4]4
8000aecc:	ff 22 0b 80 	jge.u %d2,2,8000aee2 <__pack_d+0x24>
8000aed0:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000aed4:	06 88       	sh %d8,-8
8000aed6:	02 95       	mov %d5,%d9
8000aed8:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000aedc:	3b f0 7f f0 	mov %d15,2047
8000aee0:	3c 6f       	j 8000afbe <__pack_d+0x100>
8000aee2:	3b f0 7f f0 	mov %d15,2047
8000aee6:	d2 04       	mov %e4,0
8000aee8:	df 42 6b 00 	jeq %d2,4,8000afbe <__pack_d+0x100>
8000aeec:	0f 89 a0 f0 	or %d15,%d9,%d8
8000aef0:	8b 22 00 32 	eq %d3,%d2,2
8000aef4:	8b 0f e0 34 	or.eq %d3,%d15,0
8000aef8:	82 0f       	mov %d15,0
8000aefa:	df 03 62 80 	jne %d3,0,8000afbe <__pack_d+0x100>
8000aefe:	19 42 08 00 	ld.w %d2,[%a4]8
8000af02:	3b 20 c0 ff 	mov %d15,-1022
8000af06:	7f f2 36 00 	jge %d2,%d15,8000af72 <__pack_d+0xb4>
8000af0a:	a2 2f       	sub %d15,%d2
8000af0c:	8b 9f 83 42 	ge %d4,%d15,57
8000af10:	82 02       	mov %d2,0
8000af12:	df 04 18 80 	jne %d4,0,8000af42 <__pack_d+0x84>
8000af16:	0b 98 10 48 	mov %e4,%d8,%d9
8000af1a:	02 f6       	mov %d6,%d15
8000af1c:	6d ff 97 fc 	call 8000a84a <__lshrdi3>
8000af20:	d2 14       	mov %e4,1
8000af22:	02 f6       	mov %d6,%d15
8000af24:	0b 32 10 a8 	mov %e10,%d2,%d3
8000af28:	6d ff 76 ff 	call 8000ae14 <__ashldi3>
8000af2c:	8b f2 9f 20 	addx %d2,%d2,-1
8000af30:	8b f3 bf 30 	addc %d3,%d3,-1
8000af34:	26 29       	and %d9,%d2
8000af36:	26 38       	and %d8,%d3
8000af38:	a6 98       	or %d8,%d9
8000af3a:	02 b2       	mov %d2,%d11
8000af3c:	8b 08 00 25 	or.ne %d2,%d8,0
8000af40:	02 a3       	mov %d3,%d10
8000af42:	02 2f       	mov %d15,%d2
8000af44:	16 ff       	and %d15,255
8000af46:	8b 0f 28 f2 	ne %d15,%d15,128
8000af4a:	ee 07       	jnz %d15,8000af58 <__pack_d+0x9a>
8000af4c:	8f 02 10 f1 	and %d15,%d2,256
8000af50:	6e 08       	jz %d15,8000af60 <__pack_d+0xa2>
8000af52:	8b 02 88 20 	addx %d2,%d2,128
8000af56:	3c 03       	j 8000af5c <__pack_d+0x9e>
8000af58:	8b f2 87 20 	addx %d2,%d2,127
8000af5c:	8b 03 a0 30 	addc %d3,%d3,0
8000af60:	7b 00 00 41 	movh %d4,4096
8000af64:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000af68:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000af6c:	8f 83 1f 40 	sh %d4,%d3,-8
8000af70:	3c 27       	j 8000afbe <__pack_d+0x100>
8000af72:	3b 00 40 30 	mov %d3,1024
8000af76:	3b f0 7f f0 	mov %d15,2047
8000af7a:	7f 32 22 00 	jge %d2,%d3,8000afbe <__pack_d+0x100>
8000af7e:	02 9f       	mov %d15,%d9
8000af80:	16 ff       	and %d15,255
8000af82:	8b 0f 28 f2 	ne %d15,%d15,128
8000af86:	ee 07       	jnz %d15,8000af94 <__pack_d+0xd6>
8000af88:	8f 09 10 f1 	and %d15,%d9,256
8000af8c:	6e 08       	jz %d15,8000af9c <__pack_d+0xde>
8000af8e:	8b 09 88 90 	addx %d9,%d9,128
8000af92:	3c 03       	j 8000af98 <__pack_d+0xda>
8000af94:	8b f9 87 90 	addx %d9,%d9,127
8000af98:	8b 08 a0 80 	addc %d8,%d8,0
8000af9c:	7b 00 00 32 	movh %d3,8192
8000afa0:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000afa4:	ee 04       	jnz %d15,8000afac <__pack_d+0xee>
8000afa6:	1b f2 3f f0 	addi %d15,%d2,1023
8000afaa:	3c 06       	j 8000afb6 <__pack_d+0xf8>
8000afac:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000afb0:	1b 02 40 f0 	addi %d15,%d2,1024
8000afb4:	06 f8       	sh %d8,-1
8000afb6:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000afba:	8f 88 1f 40 	sh %d4,%d8,-8
8000afbe:	d2 02       	mov %e2,0
8000afc0:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000afc4:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000afc8:	02 52       	mov %d2,%d5
8000afca:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000afce:	00 90       	ret 

8000afd0 <__unpack_d>:
8000afd0:	19 44 04 00 	ld.w %d4,[%a4]4
8000afd4:	54 42       	ld.w %d2,[%a4]
8000afd6:	37 04 74 50 	extr.u %d5,%d4,0,20
8000afda:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000afde:	8f 14 1e 40 	sh %d4,%d4,-31
8000afe2:	59 54 04 00 	st.w [%a5]4,%d4
8000afe6:	02 53       	mov %d3,%d5
8000afe8:	ee 21       	jnz %d15,8000b02a <__unpack_d+0x5a>
8000afea:	0f 25 a0 f0 	or %d15,%d5,%d2
8000afee:	ee 03       	jnz %d15,8000aff4 <__unpack_d+0x24>
8000aff0:	82 2f       	mov %d15,2
8000aff2:	3c 23       	j 8000b038 <__unpack_d+0x68>
8000aff4:	3b 20 c0 ff 	mov %d15,-1022
8000aff8:	6c 52       	st.w [%a5]8,%d15
8000affa:	82 3f       	mov %d15,3
8000affc:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000b000:	2c 50       	st.b [%a5]0,%d15
8000b002:	8f 82 00 20 	sh %d2,%d2,8
8000b006:	3b 10 c0 ff 	mov %d15,-1023
8000b00a:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000b00e:	7b 00 00 61 	movh %d6,4096
8000b012:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000b016:	02 f4       	mov %d4,%d15
8000b018:	06 12       	sh %d2,1
8000b01a:	c2 ff       	add %d15,-1
8000b01c:	df 05 f7 ff 	jne %d5,0,8000b00a <__unpack_d+0x3a>
8000b020:	59 54 08 00 	st.w [%a5]8,%d4
8000b024:	59 52 0c 00 	st.w [%a5]12,%d2
8000b028:	3c 27       	j 8000b076 <__unpack_d+0xa6>
8000b02a:	3b f0 7f 40 	mov %d4,2047
8000b02e:	fe 47       	jne %d15,%d4,8000b05c <__unpack_d+0x8c>
8000b030:	0f 25 a0 f0 	or %d15,%d5,%d2
8000b034:	ee 04       	jnz %d15,8000b03c <__unpack_d+0x6c>
8000b036:	82 4f       	mov %d15,4
8000b038:	2c 50       	st.b [%a5]0,%d15
8000b03a:	00 90       	ret 
8000b03c:	7b 80 00 f0 	movh %d15,8
8000b040:	26 5f       	and %d15,%d5
8000b042:	6e 02       	jz %d15,8000b046 <__unpack_d+0x76>
8000b044:	82 1f       	mov %d15,1
8000b046:	2c 50       	st.b [%a5]0,%d15
8000b048:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000b04c:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000b050:	8f 82 00 40 	sh %d4,%d2,8
8000b054:	59 54 0c 00 	st.w [%a5]12,%d4
8000b058:	6c 54       	st.w [%a5]16,%d15
8000b05a:	00 90       	ret 
8000b05c:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000b060:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000b064:	6c 52       	st.w [%a5]8,%d15
8000b066:	8f 82 00 20 	sh %d2,%d2,8
8000b06a:	82 3f       	mov %d15,3
8000b06c:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000b070:	2c 50       	st.b [%a5]0,%d15
8000b072:	59 52 0c 00 	st.w [%a5]12,%d2
8000b076:	59 53 10 00 	st.w [%a5]16,%d3
8000b07a:	00 90       	ret 

8000b07c <__pack_f>:
8000b07c:	14 45       	ld.bu %d5,[%a4]
8000b07e:	4c 43       	ld.w %d15,[%a4]12
8000b080:	19 47 04 00 	ld.w %d7,[%a4]4
8000b084:	ff 25 09 80 	jge.u %d5,2,8000b096 <__pack_f+0x1a>
8000b088:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000b08c:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000b090:	3b f0 0f 40 	mov %d4,255
8000b094:	3c 4f       	j 8000b132 <__pack_f+0xb6>
8000b096:	3b f0 0f 40 	mov %d4,255
8000b09a:	82 03       	mov %d3,0
8000b09c:	df 45 4b 00 	jeq %d5,4,8000b132 <__pack_f+0xb6>
8000b0a0:	8b 25 00 62 	eq %d6,%d5,2
8000b0a4:	8b 0f e0 64 	or.eq %d6,%d15,0
8000b0a8:	82 04       	mov %d4,0
8000b0aa:	df 06 44 80 	jne %d6,0,8000b132 <__pack_f+0xb6>
8000b0ae:	19 45 08 00 	ld.w %d5,[%a4]8
8000b0b2:	8b 25 98 42 	ge %d4,%d5,-126
8000b0b6:	df 04 24 80 	jne %d4,0,8000b0fe <__pack_f+0x82>
8000b0ba:	8b 25 18 51 	rsub %d5,%d5,-126
8000b0be:	8b a5 81 42 	ge %d4,%d5,26
8000b0c2:	f6 4c       	jnz %d4,8000b0da <__pack_f+0x5e>
8000b0c4:	82 12       	mov %d2,1
8000b0c6:	0f 52 00 20 	sh %d2,%d2,%d5
8000b0ca:	8b 05 00 31 	rsub %d3,%d5,0
8000b0ce:	c2 f2       	add %d2,-1
8000b0d0:	0f 3f 00 30 	sh %d3,%d15,%d3
8000b0d4:	26 2f       	and %d15,%d2
8000b0d6:	8b 0f 00 35 	or.ne %d3,%d15,0
8000b0da:	8f f3 07 f1 	and %d15,%d3,127
8000b0de:	8b 0f 24 f2 	ne %d15,%d15,64
8000b0e2:	ee 06       	jnz %d15,8000b0ee <__pack_f+0x72>
8000b0e4:	8f 03 08 f1 	and %d15,%d3,128
8000b0e8:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000b0ec:	3c 03       	j 8000b0f2 <__pack_f+0x76>
8000b0ee:	1b f3 03 30 	addi %d3,%d3,63
8000b0f2:	7b 00 00 f4 	movh %d15,16384
8000b0f6:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000b0fa:	06 93       	sh %d3,-7
8000b0fc:	3c 1b       	j 8000b132 <__pack_f+0xb6>
8000b0fe:	8b 05 88 62 	ge %d6,%d5,128
8000b102:	3b f0 0f 40 	mov %d4,255
8000b106:	df 06 16 80 	jne %d6,0,8000b132 <__pack_f+0xb6>
8000b10a:	8f ff 07 31 	and %d3,%d15,127
8000b10e:	8b 03 24 32 	ne %d3,%d3,64
8000b112:	f6 36       	jnz %d3,8000b11e <__pack_f+0xa2>
8000b114:	8f 0f 08 31 	and %d3,%d15,128
8000b118:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000b11c:	3c 03       	j 8000b122 <__pack_f+0xa6>
8000b11e:	1b ff 03 f0 	addi %d15,%d15,63
8000b122:	1b f5 07 40 	addi %d4,%d5,127
8000b126:	ce f4       	jgez %d15,8000b12e <__pack_f+0xb2>
8000b128:	06 ff       	sh %d15,-1
8000b12a:	1b 05 08 40 	addi %d4,%d5,128
8000b12e:	8f 9f 1f 30 	sh %d3,%d15,-7
8000b132:	82 02       	mov %d2,0
8000b134:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000b138:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000b13c:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000b140:	00 90       	ret 

8000b142 <malloc>:
8000b142:	91 00 00 f7 	movh.a %a15,28672
8000b146:	99 f4 68 40 	ld.a %a4,[%a15]1320 <70000528 <_impure_ptr>>
8000b14a:	1d 00 09 00 	j 8000b15c <_malloc_r>

8000b14e <free>:
8000b14e:	91 00 00 f7 	movh.a %a15,28672
8000b152:	40 45       	mov.aa %a5,%a4
8000b154:	99 f4 68 40 	ld.a %a4,[%a15]1320 <70000528 <_impure_ptr>>
8000b158:	1d 00 f7 02 	j 8000b746 <_free_r>

8000b15c <_malloc_r>:
8000b15c:	1b b4 00 f0 	addi %d15,%d4,11
8000b160:	8b 7f 61 82 	lt.u %d8,%d15,23
8000b164:	8f 7f c0 f1 	andn %d15,%d15,7
8000b168:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000b16c:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000b170:	8b 08 20 45 	or.lt %d4,%d8,0
8000b174:	40 4d       	mov.aa %a13,%a4
8000b176:	76 45       	jz %d4,8000b180 <_malloc_r+0x24>
8000b178:	da 0c       	mov %d15,12
8000b17a:	6c 40       	st.w [%a4]0,%d15
8000b17c:	1d 00 2a 02 	j 8000b5d0 <_malloc_r+0x474>
8000b180:	91 00 00 f7 	movh.a %a15,28672
8000b184:	8b 88 bf f2 	ge.u %d15,%d8,504
8000b188:	6d 00 37 02 	call 8000b5f6 <__malloc_lock>
8000b18c:	d9 ff 20 40 	lea %a15,[%a15]288 <70000120 <__malloc_av_>>
8000b190:	ee 19       	jnz %d15,8000b1c2 <_malloc_r+0x66>
8000b192:	8f d8 1f 20 	sh %d2,%d8,-3
8000b196:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b19a:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b19e:	7d 2c 09 80 	jne.a %a12,%a2,8000b1b0 <_malloc_r+0x54>
8000b1a2:	d9 c2 08 00 	lea %a2,[%a12]8
8000b1a6:	99 cc 14 00 	ld.a %a12,[%a12]20
8000b1aa:	c2 22       	add %d2,2
8000b1ac:	7d 2c 58 00 	jeq.a %a12,%a2,8000b25c <_malloc_r+0x100>
8000b1b0:	cc c3       	ld.a %a15,[%a12]12
8000b1b2:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b1b6:	4c c1       	ld.w %d15,[%a12]4
8000b1b8:	ec 23       	st.a [%a2]12,%a15
8000b1ba:	8f 3f c0 f1 	andn %d15,%d15,3
8000b1be:	e8 22       	st.a [%a15]8,%a2
8000b1c0:	3c 74       	j 8000b2a8 <_malloc_r+0x14c>
8000b1c2:	8f 78 1f f0 	sh %d15,%d8,-9
8000b1c6:	3b f0 03 20 	mov %d2,63
8000b1ca:	6e 27       	jz %d15,8000b218 <_malloc_r+0xbc>
8000b1cc:	8f a8 1f 20 	sh %d2,%d8,-6
8000b1d0:	1b 82 03 20 	addi %d2,%d2,56
8000b1d4:	bf 5f 22 80 	jlt.u %d15,5,8000b218 <_malloc_r+0xbc>
8000b1d8:	8b 5f a1 22 	ge.u %d2,%d15,21
8000b1dc:	f6 24       	jnz %d2,8000b1e4 <_malloc_r+0x88>
8000b1de:	1b bf 05 20 	addi %d2,%d15,91
8000b1e2:	3c 1b       	j 8000b218 <_malloc_r+0xbc>
8000b1e4:	8b 5f a5 22 	ge.u %d2,%d15,85
8000b1e8:	f6 26       	jnz %d2,8000b1f4 <_malloc_r+0x98>
8000b1ea:	8f 48 1f 20 	sh %d2,%d8,-12
8000b1ee:	1b e2 06 20 	addi %d2,%d2,110
8000b1f2:	3c 13       	j 8000b218 <_malloc_r+0xbc>
8000b1f4:	8b 5f b5 22 	ge.u %d2,%d15,341
8000b1f8:	f6 26       	jnz %d2,8000b204 <_malloc_r+0xa8>
8000b1fa:	8f 18 1f 20 	sh %d2,%d8,-15
8000b1fe:	1b 72 07 20 	addi %d2,%d2,119
8000b202:	3c 0b       	j 8000b218 <_malloc_r+0xbc>
8000b204:	3b 50 55 30 	mov %d3,1365
8000b208:	3b e0 07 20 	mov %d2,126
8000b20c:	7f 3f 06 80 	jge.u %d15,%d3,8000b218 <_malloc_r+0xbc>
8000b210:	8f e8 1e 20 	sh %d2,%d8,-18
8000b214:	1b c2 07 20 	addi %d2,%d2,124
8000b218:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b21c:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b220:	7d 2c 1d 00 	jeq.a %a12,%a2,8000b25a <_malloc_r+0xfe>
8000b224:	19 c4 04 00 	ld.w %d4,[%a12]4
8000b228:	8f 34 c0 41 	andn %d4,%d4,3
8000b22c:	5a 84       	sub %d15,%d4,%d8
8000b22e:	8b 0f 41 32 	lt %d3,%d15,16
8000b232:	f6 33       	jnz %d3,8000b238 <_malloc_r+0xdc>
8000b234:	c2 f2       	add %d2,-1
8000b236:	3c 12       	j 8000b25a <_malloc_r+0xfe>
8000b238:	0e fe       	jltz %d15,8000b254 <_malloc_r+0xf8>
8000b23a:	cc c3       	ld.a %a15,[%a12]12
8000b23c:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b240:	ec 23       	st.a [%a2]12,%a15
8000b242:	e8 22       	st.a [%a15]8,%a2
8000b244:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000b248:	b7 10 21 20 	imask %e2,1,0,1
8000b24c:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b250:	1d 00 cc 01 	j 8000b5e8 <_malloc_r+0x48c>
8000b254:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b258:	3c e4       	j 8000b220 <_malloc_r+0xc4>
8000b25a:	c2 12       	add %d2,1
8000b25c:	c8 4c       	ld.a %a12,[%a15]16
8000b25e:	91 00 00 37 	movh.a %a3,28672
8000b262:	d9 33 28 40 	lea %a3,[%a3]296 <70000128 <__malloc_av_+0x8>>
8000b266:	7d 3c 83 00 	jeq.a %a12,%a3,8000b36c <_malloc_r+0x210>
8000b26a:	4c c1       	ld.w %d15,[%a12]4
8000b26c:	8f 3f c0 f1 	andn %d15,%d15,3
8000b270:	52 83       	sub %d3,%d15,%d8
8000b272:	8b 03 41 42 	lt %d4,%d3,16
8000b276:	df 04 16 80 	jne %d4,0,8000b2a2 <_malloc_r+0x146>
8000b27a:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b27e:	8f 18 40 81 	or %d8,%d8,1
8000b282:	59 c8 04 00 	st.w [%a12]4,%d8
8000b286:	e8 52       	st.a [%a15]20,%a2
8000b288:	e8 42       	st.a [%a15]16,%a2
8000b28a:	8f 13 40 f1 	or %d15,%d3,1
8000b28e:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b292:	b5 23 08 00 	st.a [%a2]8,%a3
8000b296:	6c 21       	st.w [%a2]4,%d15
8000b298:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b29c:	74 23       	st.w [%a2],%d3
8000b29e:	1d 00 a5 01 	j 8000b5e8 <_malloc_r+0x48c>
8000b2a2:	e8 53       	st.a [%a15]20,%a3
8000b2a4:	e8 43       	st.a [%a15]16,%a3
8000b2a6:	0e 33       	jltz %d3,8000b2ac <_malloc_r+0x150>
8000b2a8:	10 cf       	addsc.a %a15,%a12,%d15,0
8000b2aa:	3c cf       	j 8000b248 <_malloc_r+0xec>
8000b2ac:	3b 00 20 30 	mov %d3,512
8000b2b0:	7f 3f 15 80 	jge.u %d15,%d3,8000b2da <_malloc_r+0x17e>
8000b2b4:	06 df       	sh %d15,-3
8000b2b6:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000b2b8:	48 14       	ld.w %d4,[%a15]4
8000b2ba:	99 24 08 00 	ld.a %a4,[%a2]8
8000b2be:	8f ef 3f 30 	sha %d3,%d15,-2
8000b2c2:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000b2c6:	b5 c4 08 00 	st.a [%a12]8,%a4
8000b2ca:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000b2ce:	b5 2c 08 00 	st.a [%a2]8,%a12
8000b2d2:	68 13       	st.w [%a15]4,%d3
8000b2d4:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000b2d8:	3c 4a       	j 8000b36c <_malloc_r+0x210>
8000b2da:	8f af 1f 40 	sh %d4,%d15,-6
8000b2de:	8f 7f 1f 30 	sh %d3,%d15,-9
8000b2e2:	1b 84 03 40 	addi %d4,%d4,56
8000b2e6:	bf 53 22 80 	jlt.u %d3,5,8000b32a <_malloc_r+0x1ce>
8000b2ea:	8b 53 a1 42 	ge.u %d4,%d3,21
8000b2ee:	f6 44       	jnz %d4,8000b2f6 <_malloc_r+0x19a>
8000b2f0:	1b b3 05 40 	addi %d4,%d3,91
8000b2f4:	3c 1b       	j 8000b32a <_malloc_r+0x1ce>
8000b2f6:	8b 53 a5 42 	ge.u %d4,%d3,85
8000b2fa:	f6 46       	jnz %d4,8000b306 <_malloc_r+0x1aa>
8000b2fc:	8f 4f 1f 40 	sh %d4,%d15,-12
8000b300:	1b e4 06 40 	addi %d4,%d4,110
8000b304:	3c 13       	j 8000b32a <_malloc_r+0x1ce>
8000b306:	8b 53 b5 42 	ge.u %d4,%d3,341
8000b30a:	f6 46       	jnz %d4,8000b316 <_malloc_r+0x1ba>
8000b30c:	8f 1f 1f 40 	sh %d4,%d15,-15
8000b310:	1b 74 07 40 	addi %d4,%d4,119
8000b314:	3c 0b       	j 8000b32a <_malloc_r+0x1ce>
8000b316:	3b 50 55 50 	mov %d5,1365
8000b31a:	3b e0 07 40 	mov %d4,126
8000b31e:	7f 53 06 80 	jge.u %d3,%d5,8000b32a <_malloc_r+0x1ce>
8000b322:	8f ef 1e 40 	sh %d4,%d15,-18
8000b326:	1b c4 07 40 	addi %d4,%d4,124
8000b32a:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000b32e:	99 42 08 00 	ld.a %a2,[%a4]8
8000b332:	7d 42 0d 80 	jne.a %a2,%a4,8000b34c <_malloc_r+0x1f0>
8000b336:	4c f1       	ld.w %d15,[%a15]4
8000b338:	86 e4       	sha %d4,-2
8000b33a:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000b33e:	40 24       	mov.aa %a4,%a2
8000b340:	68 14       	st.w [%a15]4,%d4
8000b342:	3c 0d       	j 8000b35c <_malloc_r+0x200>
8000b344:	99 22 08 00 	ld.a %a2,[%a2]8
8000b348:	7d 42 08 00 	jeq.a %a2,%a4,8000b358 <_malloc_r+0x1fc>
8000b34c:	19 23 04 00 	ld.w %d3,[%a2]4
8000b350:	8f 33 c0 31 	andn %d3,%d3,3
8000b354:	3f 3f f8 ff 	jlt.u %d15,%d3,8000b344 <_malloc_r+0x1e8>
8000b358:	99 24 0c 00 	ld.a %a4,[%a2]12
8000b35c:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000b360:	b5 c2 08 00 	st.a [%a12]8,%a2
8000b364:	b5 4c 08 00 	st.a [%a4]8,%a12
8000b368:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000b36c:	8f e2 3f 30 	sha %d3,%d2,-2
8000b370:	82 1f       	mov %d15,1
8000b372:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000b376:	48 13       	ld.w %d3,[%a15]4
8000b378:	3f f3 73 80 	jlt.u %d3,%d15,8000b45e <_malloc_r+0x302>
8000b37c:	0f 3f 80 40 	and %d4,%d15,%d3
8000b380:	f6 49       	jnz %d4,8000b392 <_malloc_r+0x236>
8000b382:	8f 32 c0 21 	andn %d2,%d2,3
8000b386:	06 1f       	sh %d15,1
8000b388:	0f 3f 80 40 	and %d4,%d15,%d3
8000b38c:	c2 42       	add %d2,4
8000b38e:	df 04 fc 7f 	jeq %d4,0,8000b386 <_malloc_r+0x22a>
8000b392:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b396:	02 24       	mov %d4,%d2
8000b398:	40 24       	mov.aa %a4,%a2
8000b39a:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000b39e:	7d 4c 3c 00 	jeq.a %a12,%a4,8000b416 <_malloc_r+0x2ba>
8000b3a2:	19 c6 04 00 	ld.w %d6,[%a12]4
8000b3a6:	8f 36 c0 61 	andn %d6,%d6,3
8000b3aa:	0b 86 80 30 	sub %d3,%d6,%d8
8000b3ae:	8b 03 41 52 	lt %d5,%d3,16
8000b3b2:	df 05 1d 80 	jne %d5,0,8000b3ec <_malloc_r+0x290>
8000b3b6:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b3ba:	8f 18 40 81 	or %d8,%d8,1
8000b3be:	59 c8 04 00 	st.w [%a12]4,%d8
8000b3c2:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b3c6:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000b3ca:	8f 13 40 f1 	or %d15,%d3,1
8000b3ce:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b3d2:	b5 45 08 00 	st.a [%a4]8,%a5
8000b3d6:	e8 52       	st.a [%a15]20,%a2
8000b3d8:	e8 42       	st.a [%a15]16,%a2
8000b3da:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b3de:	b5 23 08 00 	st.a [%a2]8,%a3
8000b3e2:	6c 21       	st.w [%a2]4,%d15
8000b3e4:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b3e8:	74 23       	st.w [%a2],%d3
8000b3ea:	3c 0e       	j 8000b406 <_malloc_r+0x2aa>
8000b3ec:	bf 03 12 00 	jlt %d3,0,8000b410 <_malloc_r+0x2b4>
8000b3f0:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000b3f4:	b7 10 21 20 	imask %e2,1,0,1
8000b3f8:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b3fc:	cc c3       	ld.a %a15,[%a12]12
8000b3fe:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000b402:	ec 23       	st.a [%a2]12,%a15
8000b404:	e8 22       	st.a [%a15]8,%a2
8000b406:	40 d4       	mov.aa %a4,%a13
8000b408:	6d 00 f8 00 	call 8000b5f8 <__malloc_unlock>
8000b40c:	1d 00 f3 00 	j 8000b5f2 <_malloc_r+0x496>
8000b410:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b414:	3c c5       	j 8000b39e <_malloc_r+0x242>
8000b416:	c2 14       	add %d4,1
8000b418:	8f 34 00 31 	and %d3,%d4,3
8000b41c:	d9 44 08 00 	lea %a4,[%a4]8
8000b420:	df 03 bd ff 	jne %d3,0,8000b39a <_malloc_r+0x23e>
8000b424:	8f 32 00 31 	and %d3,%d2,3
8000b428:	f6 36       	jnz %d3,8000b434 <_malloc_r+0x2d8>
8000b42a:	48 12       	ld.w %d2,[%a15]4
8000b42c:	0f f2 e0 20 	andn %d2,%d2,%d15
8000b430:	68 12       	st.w [%a15]4,%d2
8000b432:	3c 07       	j 8000b440 <_malloc_r+0x2e4>
8000b434:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000b438:	d4 22       	ld.a %a2,[%a2]
8000b43a:	c2 f2       	add %d2,-1
8000b43c:	7d 42 f4 7f 	jeq.a %a2,%a4,8000b424 <_malloc_r+0x2c8>
8000b440:	06 1f       	sh %d15,1
8000b442:	48 12       	ld.w %d2,[%a15]4
8000b444:	8b 0f 20 32 	ne %d3,%d15,0
8000b448:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000b44c:	76 39       	jz %d3,8000b45e <_malloc_r+0x302>
8000b44e:	0f 2f 80 30 	and %d3,%d15,%d2
8000b452:	f6 34       	jnz %d3,8000b45a <_malloc_r+0x2fe>
8000b454:	c2 44       	add %d4,4
8000b456:	06 1f       	sh %d15,1
8000b458:	3c fb       	j 8000b44e <_malloc_r+0x2f2>
8000b45a:	02 42       	mov %d2,%d4
8000b45c:	3c 9b       	j 8000b392 <_malloc_r+0x236>
8000b45e:	c8 2c       	ld.a %a12,[%a15]8
8000b460:	19 ca 04 00 	ld.w %d10,[%a12]4
8000b464:	8f 3a c0 a1 	andn %d10,%d10,3
8000b468:	5a 8a       	sub %d15,%d10,%d8
8000b46a:	8b 0f 41 22 	lt %d2,%d15,16
8000b46e:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000b472:	df 02 b1 00 	jeq %d2,0,8000b5d4 <_malloc_r+0x478>
8000b476:	91 00 00 27 	movh.a %a2,28672
8000b47a:	19 2b d8 c0 	ld.w %d11,[%a2]3864 <70000f18 <__malloc_top_pad>>
8000b47e:	91 00 00 27 	movh.a %a2,28672
8000b482:	42 8b       	add %d11,%d8
8000b484:	19 23 18 40 	ld.w %d3,[%a2]280 <70000118 <__malloc_sbrk_base>>
8000b488:	1b fb 00 f1 	addi %d15,%d11,4111
8000b48c:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b490:	1b 0b 01 20 	addi %d2,%d11,16
8000b494:	8b f3 3f b2 	ne %d11,%d3,-1
8000b498:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000b49c:	40 d4       	mov.aa %a4,%a13
8000b49e:	02 b4       	mov %d4,%d11
8000b4a0:	80 2c       	mov.d %d12,%a2
8000b4a2:	6d 00 ac 00 	call 8000b5fa <_sbrk_r>
8000b4a6:	80 29       	mov.d %d9,%a2
8000b4a8:	df f9 86 00 	jeq %d9,-1,8000b5b4 <_malloc_r+0x458>
8000b4ac:	80 c2       	mov.d %d2,%a12
8000b4ae:	80 c3       	mov.d %d3,%a12
8000b4b0:	42 a2       	add %d2,%d10
8000b4b2:	80 f4       	mov.d %d4,%a15
8000b4b4:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000b4b8:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000b4bc:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000b4c0:	ee 7a       	jnz %d15,8000b5b4 <_malloc_r+0x458>
8000b4c2:	91 00 00 e7 	movh.a %a14,28672
8000b4c6:	19 e3 e8 b0 	ld.w %d3,[%a14]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b4ca:	42 b3       	add %d3,%d11
8000b4cc:	59 e3 e8 b0 	st.w [%a14]3816 <70000ee8 <__malloc_current_mallinfo>>,%d3
8000b4d0:	5f 29 0c 80 	jne %d9,%d2,8000b4e8 <_malloc_r+0x38c>
8000b4d4:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000b4d8:	ee 08       	jnz %d15,8000b4e8 <_malloc_r+0x38c>
8000b4da:	c8 22       	ld.a %a2,[%a15]8
8000b4dc:	42 ba       	add %d10,%d11
8000b4de:	8f 1a 40 a1 	or %d10,%d10,1
8000b4e2:	59 2a 04 00 	st.w [%a2]4,%d10
8000b4e6:	3c 55       	j 8000b590 <_malloc_r+0x434>
8000b4e8:	60 c2       	mov.a %a2,%d12
8000b4ea:	19 2f 18 40 	ld.w %d15,[%a2]280
8000b4ee:	5e f6       	jne %d15,-1,8000b4fa <_malloc_r+0x39e>
8000b4f0:	91 00 00 27 	movh.a %a2,28672
8000b4f4:	59 29 18 40 	st.w [%a2]280 <70000118 <__malloc_sbrk_base>>,%d9
8000b4f8:	3c 06       	j 8000b504 <_malloc_r+0x3a8>
8000b4fa:	0b 29 80 20 	sub %d2,%d9,%d2
8000b4fe:	42 23       	add %d3,%d2
8000b500:	59 e3 e8 b0 	st.w [%a14]3816 <70000ee8 <__malloc_current_mallinfo>>,%d3
8000b504:	8f 79 00 21 	and %d2,%d9,7
8000b508:	82 0f       	mov %d15,0
8000b50a:	76 24       	jz %d2,8000b512 <_malloc_r+0x3b6>
8000b50c:	8b 82 00 f1 	rsub %d15,%d2,8
8000b510:	42 f9       	add %d9,%d15
8000b512:	42 9b       	add %d11,%d9
8000b514:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000b518:	1b 0f 00 21 	addi %d2,%d15,4096
8000b51c:	5a b2       	sub %d15,%d2,%d11
8000b51e:	40 d4       	mov.aa %a4,%a13
8000b520:	02 f4       	mov %d4,%d15
8000b522:	6d 00 6c 00 	call 8000b5fa <_sbrk_r>
8000b526:	80 22       	mov.d %d2,%a2
8000b528:	df f2 04 80 	jne %d2,-1,8000b530 <_malloc_r+0x3d4>
8000b52c:	60 92       	mov.a %a2,%d9
8000b52e:	82 0f       	mov %d15,0
8000b530:	80 2b       	mov.d %d11,%a2
8000b532:	19 e2 e8 b0 	ld.w %d2,[%a14]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b536:	a2 9b       	sub %d11,%d9
8000b538:	42 f2       	add %d2,%d15
8000b53a:	60 92       	mov.a %a2,%d9
8000b53c:	42 bf       	add %d15,%d11
8000b53e:	68 29       	st.w [%a15]8,%d9
8000b540:	8f 1f 40 31 	or %d3,%d15,1
8000b544:	59 e2 e8 b0 	st.w [%a14]3816 <70000ee8 <__malloc_current_mallinfo>>,%d2
8000b548:	59 23 04 00 	st.w [%a2]4 <70000ee8 <__malloc_current_mallinfo>>,%d3
8000b54c:	df 0d 22 00 	jeq %d13,0,8000b590 <_malloc_r+0x434>
8000b550:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000b554:	ee 05       	jnz %d15,8000b55e <_malloc_r+0x402>
8000b556:	82 12       	mov %d2,1
8000b558:	59 22 04 00 	st.w [%a2]4,%d2
8000b55c:	3c 2c       	j 8000b5b4 <_malloc_r+0x458>
8000b55e:	1b 4a ff af 	addi %d10,%d10,-12
8000b562:	8f 7a c0 f1 	andn %d15,%d10,7
8000b566:	10 c2       	addsc.a %a2,%a12,%d15,0
8000b568:	82 52       	mov %d2,5
8000b56a:	59 22 04 00 	st.w [%a2]4,%d2
8000b56e:	59 22 08 00 	st.w [%a2]8,%d2
8000b572:	19 c2 04 00 	ld.w %d2,[%a12]4
8000b576:	8f 12 00 21 	and %d2,%d2,1
8000b57a:	a6 f2       	or %d2,%d15
8000b57c:	59 c2 04 00 	st.w [%a12]4,%d2
8000b580:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000b584:	ee 06       	jnz %d15,8000b590 <_malloc_r+0x434>
8000b586:	40 d4       	mov.aa %a4,%a13
8000b588:	d9 c5 08 00 	lea %a5,[%a12]8
8000b58c:	6d 00 dd 00 	call 8000b746 <_free_r>
8000b590:	91 00 00 27 	movh.a %a2,28672
8000b594:	19 ef e8 b0 	ld.w %d15,[%a14]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b598:	19 22 d4 c0 	ld.w %d2,[%a2]3860 <70000f14 <__malloc_max_sbrked_mem>>
8000b59c:	7f f2 04 80 	jge.u %d2,%d15,8000b5a4 <_malloc_r+0x448>
8000b5a0:	59 2f d4 c0 	st.w [%a2]3860 <70000f14 <__malloc_max_sbrked_mem>>,%d15
8000b5a4:	91 00 00 27 	movh.a %a2,28672
8000b5a8:	19 22 d0 c0 	ld.w %d2,[%a2]3856 <70000f10 <__malloc_max_total_mem>>
8000b5ac:	7f f2 04 80 	jge.u %d2,%d15,8000b5b4 <_malloc_r+0x458>
8000b5b0:	59 2f d0 c0 	st.w [%a2]3856 <70000f10 <__malloc_max_total_mem>>,%d15
8000b5b4:	c8 22       	ld.a %a2,[%a15]8
8000b5b6:	19 22 04 00 	ld.w %d2,[%a2]4 <70000f10 <__malloc_max_total_mem>>
8000b5ba:	8f 32 c0 21 	andn %d2,%d2,3
8000b5be:	5a 82       	sub %d15,%d2,%d8
8000b5c0:	8b 0f 41 32 	lt %d3,%d15,16
8000b5c4:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000b5c8:	76 36       	jz %d3,8000b5d4 <_malloc_r+0x478>
8000b5ca:	40 d4       	mov.aa %a4,%a13
8000b5cc:	6d 00 16 00 	call 8000b5f8 <__malloc_unlock>
8000b5d0:	a0 0c       	mov.a %a12,0
8000b5d2:	3c 10       	j 8000b5f2 <_malloc_r+0x496>
8000b5d4:	c8 2c       	ld.a %a12,[%a15]8
8000b5d6:	8f 18 40 21 	or %d2,%d8,1
8000b5da:	96 01       	or %d15,1
8000b5dc:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b5e0:	59 c2 04 00 	st.w [%a12]4,%d2
8000b5e4:	e8 22       	st.a [%a15]8,%a2
8000b5e6:	6c 21       	st.w [%a2]4,%d15
8000b5e8:	40 d4       	mov.aa %a4,%a13
8000b5ea:	6d 00 07 00 	call 8000b5f8 <__malloc_unlock>
8000b5ee:	d9 cc 08 00 	lea %a12,[%a12]8
8000b5f2:	40 c2       	mov.aa %a2,%a12
8000b5f4:	00 90       	ret 

8000b5f6 <__malloc_lock>:
8000b5f6:	00 90       	ret 

8000b5f8 <__malloc_unlock>:
8000b5f8:	00 90       	ret 

8000b5fa <_sbrk_r>:
8000b5fa:	82 0f       	mov %d15,0
8000b5fc:	91 00 00 c7 	movh.a %a12,28672
8000b600:	59 cf e0 c0 	st.w [%a12]3872 <70000f20 <errno>>,%d15
8000b604:	40 4f       	mov.aa %a15,%a4
8000b606:	6d 00 2d 17 	call 8000e460 <sbrk>
8000b60a:	80 2f       	mov.d %d15,%a2
8000b60c:	5e f5       	jne %d15,-1,8000b616 <_sbrk_r+0x1c>
8000b60e:	19 cf e0 c0 	ld.w %d15,[%a12]3872 <70000f20 <errno>>
8000b612:	6e 02       	jz %d15,8000b616 <_sbrk_r+0x1c>
8000b614:	68 0f       	st.w [%a15]0,%d15
8000b616:	00 90       	ret 

8000b618 <strlen>:
8000b618:	80 42       	mov.d %d2,%a4
8000b61a:	80 4f       	mov.d %d15,%a4
8000b61c:	60 ff       	mov.a %a15,%d15
8000b61e:	79 f3 00 00 	ld.b %d3,[%a15]0
8000b622:	76 33       	jz %d3,8000b628 <strlen+0x10>
8000b624:	c2 1f       	add %d15,1
8000b626:	3c fb       	j 8000b61c <strlen+0x4>
8000b628:	52 22       	sub %d2,%d15,%d2
8000b62a:	00 90       	ret 

8000b62c <_vsnprintf_r>:
8000b62c:	20 68       	sub.a %sp,104
8000b62e:	40 4f       	mov.aa %a15,%a4
8000b630:	ce 45       	jgez %d4,8000b63a <_vsnprintf_r+0xe>
8000b632:	da 8b       	mov %d15,139
8000b634:	6c 40       	st.w [%a4]0,%d15
8000b636:	82 f2       	mov %d2,-1
8000b638:	00 90       	ret 
8000b63a:	02 4f       	mov %d15,%d4
8000b63c:	3b 80 20 20 	mov %d2,520
8000b640:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000b644:	92 f2       	add %d2,%d15,-1
8000b646:	ea 02       	cmovn %d2,%d15,0
8000b648:	f4 a5       	st.a [%sp],%a5
8000b64a:	b5 a5 10 00 	st.a [%sp]16,%a5
8000b64e:	59 a2 08 00 	st.w [%sp]8,%d2
8000b652:	59 a2 14 00 	st.w [%sp]20,%d2
8000b656:	40 a5       	mov.aa %a5,%sp
8000b658:	82 f2       	mov %d2,-1
8000b65a:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000b65e:	6d 00 4b 01 	call 8000b8f4 <_svfprintf_r>
8000b662:	ff f2 05 00 	jge %d2,-1,8000b66c <_vsnprintf_r+0x40>
8000b666:	3b b0 08 30 	mov %d3,139
8000b66a:	68 03       	st.w [%a15]0,%d3
8000b66c:	6e 04       	jz %d15,8000b674 <_vsnprintf_r+0x48>
8000b66e:	d8 00       	ld.a %a15,[%sp]0
8000b670:	82 0f       	mov %d15,0
8000b672:	28 0f       	st.b [%a15]0,%d15
8000b674:	00 90       	ret 

8000b676 <vsnprintf>:
8000b676:	91 00 00 37 	movh.a %a3,28672
8000b67a:	40 42       	mov.aa %a2,%a4
8000b67c:	99 34 68 40 	ld.a %a4,[%a3]1320 <70000528 <_impure_ptr>>
8000b680:	40 5f       	mov.aa %a15,%a5
8000b682:	40 67       	mov.aa %a7,%a6
8000b684:	40 25       	mov.aa %a5,%a2
8000b686:	40 f6       	mov.aa %a6,%a15
8000b688:	1d ff d2 ff 	j 8000b62c <_vsnprintf_r>

8000b68c <_malloc_trim_r>:
8000b68c:	02 4f       	mov %d15,%d4
8000b68e:	40 4f       	mov.aa %a15,%a4
8000b690:	6d ff b3 ff 	call 8000b5f6 <__malloc_lock>
8000b694:	91 00 00 c7 	movh.a %a12,28672
8000b698:	d9 cc 20 40 	lea %a12,[%a12]288 <70000120 <__malloc_av_>>
8000b69c:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <sendActuatorPkt+0x4>>
8000b6a0:	3b 00 00 21 	mov %d2,4096
8000b6a4:	19 28 04 00 	ld.w %d8,[%a2]4
8000b6a8:	8f 38 c0 81 	andn %d8,%d8,3
8000b6ac:	5a f8       	sub %d15,%d8,%d15
8000b6ae:	1b ff fe f0 	addi %d15,%d15,4079
8000b6b2:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b6b6:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000b6ba:	7f 2f 07 00 	jge %d15,%d2,8000b6c8 <_malloc_trim_r+0x3c>
8000b6be:	40 f4       	mov.aa %a4,%a15
8000b6c0:	6d ff 9c ff 	call 8000b5f8 <__malloc_unlock>
8000b6c4:	82 02       	mov %d2,0
8000b6c6:	00 90       	ret 
8000b6c8:	40 f4       	mov.aa %a4,%a15
8000b6ca:	82 04       	mov %d4,0
8000b6cc:	6d ff 97 ff 	call 8000b5fa <_sbrk_r>
8000b6d0:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b6d4:	60 84       	mov.a %a4,%d8
8000b6d6:	30 43       	add.a %a3,%a4
8000b6d8:	7d 32 f3 ff 	jne.a %a2,%a3,8000b6be <_malloc_trim_r+0x32>
8000b6dc:	40 f4       	mov.aa %a4,%a15
8000b6de:	8b 0f 00 41 	rsub %d4,%d15,0
8000b6e2:	6d ff 8c ff 	call 8000b5fa <_sbrk_r>
8000b6e6:	80 22       	mov.d %d2,%a2
8000b6e8:	df f2 1c 80 	jne %d2,-1,8000b720 <_malloc_trim_r+0x94>
8000b6ec:	40 f4       	mov.aa %a4,%a15
8000b6ee:	82 04       	mov %d4,0
8000b6f0:	6d ff 85 ff 	call 8000b5fa <_sbrk_r>
8000b6f4:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b6f8:	01 32 20 40 	sub.a %a4,%a2,%a3
8000b6fc:	80 4f       	mov.d %d15,%a4
8000b6fe:	8b 0f 41 22 	lt %d2,%d15,16
8000b702:	df 02 de ff 	jne %d2,0,8000b6be <_malloc_trim_r+0x32>
8000b706:	91 00 00 47 	movh.a %a4,28672
8000b70a:	99 44 18 40 	ld.a %a4,[%a4]280 <70000118 <__malloc_sbrk_base>>
8000b70e:	96 01       	or %d15,1
8000b710:	6c 31       	st.w [%a3]4,%d15
8000b712:	01 42 20 20 	sub.a %a2,%a2,%a4
8000b716:	91 00 00 47 	movh.a %a4,28672
8000b71a:	b5 42 e8 b0 	st.a [%a4]3816 <70000ee8 <__malloc_current_mallinfo>>,%a2
8000b71e:	3c d0       	j 8000b6be <_malloc_trim_r+0x32>
8000b720:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b724:	a2 f8       	sub %d8,%d15
8000b726:	8f 18 40 81 	or %d8,%d8,1
8000b72a:	59 28 04 00 	st.w [%a2]4,%d8
8000b72e:	91 00 00 27 	movh.a %a2,28672
8000b732:	19 22 e8 b0 	ld.w %d2,[%a2]3816 <70000ee8 <__malloc_current_mallinfo>>
8000b736:	40 f4       	mov.aa %a4,%a15
8000b738:	5a f2       	sub %d15,%d2,%d15
8000b73a:	59 2f e8 b0 	st.w [%a2]3816 <70000ee8 <__malloc_current_mallinfo>>,%d15
8000b73e:	6d ff 5d ff 	call 8000b5f8 <__malloc_unlock>
8000b742:	82 12       	mov %d2,1
8000b744:	00 90       	ret 

8000b746 <_free_r>:
8000b746:	40 4d       	mov.aa %a13,%a4
8000b748:	bd 05 d4 00 	jz.a %a5,8000b8f0 <_free_r+0x1aa>
8000b74c:	40 5c       	mov.aa %a12,%a5
8000b74e:	6d ff 54 ff 	call 8000b5f6 <__malloc_lock>
8000b752:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000b756:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000b75a:	8f 14 c0 f1 	andn %d15,%d4,1
8000b75e:	91 00 00 27 	movh.a %a2,28672
8000b762:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b764:	d9 22 20 40 	lea %a2,[%a2]288 <70000120 <__malloc_av_>>
8000b768:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <sendActuatorPkt+0x4>>
8000b76c:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <sendActuatorPkt+0x4>>
8000b770:	8f 14 00 41 	and %d4,%d4,1
8000b774:	8f 33 c0 31 	andn %d3,%d3,3
8000b778:	7d 43 24 80 	jne.a %a3,%a4,8000b7c0 <_free_r+0x7a>
8000b77c:	42 3f       	add %d15,%d3
8000b77e:	f6 4d       	jnz %d4,8000b798 <_free_r+0x52>
8000b780:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b784:	60 23       	mov.a %a3,%d2
8000b786:	42 2f       	add %d15,%d2
8000b788:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000b78c:	c8 33       	ld.a %a3,[%a15]12
8000b78e:	c8 24       	ld.a %a4,[%a15]8
8000b790:	b5 43 0c 00 	st.a [%a4]12,%a3
8000b794:	b5 34 08 00 	st.a [%a3]8,%a4
8000b798:	8f 1f 40 21 	or %d2,%d15,1
8000b79c:	68 12       	st.w [%a15]4,%d2
8000b79e:	ec 22       	st.a [%a2]8,%a15
8000b7a0:	91 00 00 f7 	movh.a %a15,28672
8000b7a4:	19 f2 1c 40 	ld.w %d2,[%a15]284 <7000011c <__malloc_trim_threshold>>
8000b7a8:	3f 2f 09 80 	jlt.u %d15,%d2,8000b7ba <_free_r+0x74>
8000b7ac:	91 00 00 f7 	movh.a %a15,28672
8000b7b0:	40 d4       	mov.aa %a4,%a13
8000b7b2:	19 f4 d8 c0 	ld.w %d4,[%a15]3864 <70000f18 <__malloc_top_pad>>
8000b7b6:	6d ff 6b ff 	call 8000b68c <_malloc_trim_r>
8000b7ba:	40 d4       	mov.aa %a4,%a13
8000b7bc:	1d ff 1e ff 	j 8000b5f8 <__malloc_unlock>
8000b7c0:	59 33 04 00 	st.w [%a3]4,%d3
8000b7c4:	82 02       	mov %d2,0
8000b7c6:	df 04 16 80 	jne %d4,0,8000b7f2 <_free_r+0xac>
8000b7ca:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b7ce:	60 24       	mov.a %a4,%d2
8000b7d0:	42 2f       	add %d15,%d2
8000b7d2:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000b7d6:	c8 25       	ld.a %a5,[%a15]8
8000b7d8:	91 00 00 47 	movh.a %a4,28672
8000b7dc:	d9 44 28 40 	lea %a4,[%a4]296 <70000128 <__malloc_av_+0x8>>
8000b7e0:	82 12       	mov %d2,1
8000b7e2:	7d 45 08 00 	jeq.a %a5,%a4,8000b7f2 <_free_r+0xac>
8000b7e6:	c8 34       	ld.a %a4,[%a15]12
8000b7e8:	82 02       	mov %d2,0
8000b7ea:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b7ee:	b5 45 08 00 	st.a [%a4]8,%a5
8000b7f2:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000b7f6:	19 44 04 00 	ld.w %d4,[%a4]4
8000b7fa:	6f 04 18 80 	jnz.t %d4,0,8000b82a <_free_r+0xe4>
8000b7fe:	42 3f       	add %d15,%d3
8000b800:	99 35 08 00 	ld.a %a5,[%a3]8
8000b804:	f6 2d       	jnz %d2,8000b81e <_free_r+0xd8>
8000b806:	91 00 00 47 	movh.a %a4,28672
8000b80a:	d9 44 28 40 	lea %a4,[%a4]296 <70000128 <__malloc_av_+0x8>>
8000b80e:	7d 45 08 80 	jne.a %a5,%a4,8000b81e <_free_r+0xd8>
8000b812:	ec 25       	st.a [%a2]20,%a15
8000b814:	ec 24       	st.a [%a2]16,%a15
8000b816:	e8 35       	st.a [%a15]12,%a5
8000b818:	e8 25       	st.a [%a15]8,%a5
8000b81a:	82 12       	mov %d2,1
8000b81c:	3c 07       	j 8000b82a <_free_r+0xe4>
8000b81e:	99 33 0c 00 	ld.a %a3,[%a3]12
8000b822:	b5 53 0c 00 	st.a [%a5]12,%a3
8000b826:	b5 35 08 00 	st.a [%a3]8,%a5
8000b82a:	8f 1f 40 31 	or %d3,%d15,1
8000b82e:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b830:	68 13       	st.w [%a15]4,%d3
8000b832:	6c 30       	st.w [%a3]0,%d15
8000b834:	df 02 c3 ff 	jne %d2,0,8000b7ba <_free_r+0x74>
8000b838:	3b 00 20 20 	mov %d2,512
8000b83c:	7f 2f 12 80 	jge.u %d15,%d2,8000b860 <_free_r+0x11a>
8000b840:	19 23 04 00 	ld.w %d3,[%a2]4
8000b844:	06 df       	sh %d15,-3
8000b846:	8f ef 3f 20 	sha %d2,%d15,-2
8000b84a:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000b84e:	59 22 04 00 	st.w [%a2]4,%d2
8000b852:	d0 22       	addsc.a %a2,%a2,%d15,3
8000b854:	99 23 08 00 	ld.a %a3,[%a2]8
8000b858:	e8 32       	st.a [%a15]12,%a2
8000b85a:	e8 23       	st.a [%a15]8,%a3
8000b85c:	ec 22       	st.a [%a2]8,%a15
8000b85e:	3c 46       	j 8000b8ea <_free_r+0x1a4>
8000b860:	8f af 1f 30 	sh %d3,%d15,-6
8000b864:	8f 7f 1f 20 	sh %d2,%d15,-9
8000b868:	1b 83 03 30 	addi %d3,%d3,56
8000b86c:	bf 52 22 80 	jlt.u %d2,5,8000b8b0 <_free_r+0x16a>
8000b870:	8b 52 a1 32 	ge.u %d3,%d2,21
8000b874:	f6 34       	jnz %d3,8000b87c <_free_r+0x136>
8000b876:	1b b2 05 30 	addi %d3,%d2,91
8000b87a:	3c 1b       	j 8000b8b0 <_free_r+0x16a>
8000b87c:	8b 52 a5 32 	ge.u %d3,%d2,85
8000b880:	f6 36       	jnz %d3,8000b88c <_free_r+0x146>
8000b882:	8f 4f 1f 30 	sh %d3,%d15,-12
8000b886:	1b e3 06 30 	addi %d3,%d3,110
8000b88a:	3c 13       	j 8000b8b0 <_free_r+0x16a>
8000b88c:	8b 52 b5 32 	ge.u %d3,%d2,341
8000b890:	f6 36       	jnz %d3,8000b89c <_free_r+0x156>
8000b892:	8f 1f 1f 30 	sh %d3,%d15,-15
8000b896:	1b 73 07 30 	addi %d3,%d3,119
8000b89a:	3c 0b       	j 8000b8b0 <_free_r+0x16a>
8000b89c:	3b 50 55 40 	mov %d4,1365
8000b8a0:	3b e0 07 30 	mov %d3,126
8000b8a4:	7f 42 06 80 	jge.u %d2,%d4,8000b8b0 <_free_r+0x16a>
8000b8a8:	8f ef 1e 30 	sh %d3,%d15,-18
8000b8ac:	1b c3 07 30 	addi %d3,%d3,124
8000b8b0:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000b8b4:	99 65 08 00 	ld.a %a5,[%a6]8
8000b8b8:	40 53       	mov.aa %a3,%a5
8000b8ba:	7d 65 0d 80 	jne.a %a5,%a6,8000b8d4 <_free_r+0x18e>
8000b8be:	4c 21       	ld.w %d15,[%a2]4
8000b8c0:	86 e3       	sha %d3,-2
8000b8c2:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000b8c6:	59 23 04 00 	st.w [%a2]4,%d3
8000b8ca:	3c 0d       	j 8000b8e4 <_free_r+0x19e>
8000b8cc:	99 33 08 00 	ld.a %a3,[%a3]8
8000b8d0:	7d 63 08 00 	jeq.a %a3,%a6,8000b8e0 <_free_r+0x19a>
8000b8d4:	19 32 04 00 	ld.w %d2,[%a3]4
8000b8d8:	8f 32 c0 21 	andn %d2,%d2,3
8000b8dc:	3f 2f f8 ff 	jlt.u %d15,%d2,8000b8cc <_free_r+0x186>
8000b8e0:	99 35 0c 00 	ld.a %a5,[%a3]12
8000b8e4:	e8 35       	st.a [%a15]12,%a5
8000b8e6:	e8 23       	st.a [%a15]8,%a3
8000b8e8:	ec 52       	st.a [%a5]8,%a15
8000b8ea:	ec 33       	st.a [%a3]12,%a15
8000b8ec:	1d ff 67 ff 	j 8000b7ba <_free_r+0x74>
8000b8f0:	00 90       	ret 
	...

8000b8f4 <_svfprintf_r>:
8000b8f4:	20 d0       	sub.a %sp,208
8000b8f6:	80 5b       	mov.d %d11,%a5
8000b8f8:	80 4c       	mov.d %d12,%a4
8000b8fa:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b8fe:	40 7f       	mov.aa %a15,%a7
8000b900:	6d 00 c4 0f 	call 8000d888 <_localeconv_r>
8000b904:	d4 22       	ld.a %a2,[%a2]
8000b906:	40 24       	mov.aa %a4,%a2
8000b908:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b90c:	6d ff 86 fe 	call 8000b618 <strlen>
8000b910:	60 b2       	mov.a %a2,%d11
8000b912:	59 a2 20 00 	st.w [%sp]32,%d2
8000b916:	8c 26       	ld.h %d15,[%a2]12
8000b918:	6f 7f 16 00 	jz.t %d15,7,8000b944 <_svfprintf_r+0x50>
8000b91c:	4c 24       	ld.w %d15,[%a2]16
8000b91e:	ee 13       	jnz %d15,8000b944 <_svfprintf_r+0x50>
8000b920:	60 c4       	mov.a %a4,%d12
8000b922:	3b 00 04 40 	mov %d4,64
8000b926:	6d ff 1b fc 	call 8000b15c <_malloc_r>
8000b92a:	60 b3       	mov.a %a3,%d11
8000b92c:	f4 32       	st.a [%a3],%a2
8000b92e:	b5 32 10 00 	st.a [%a3]16,%a2
8000b932:	7c 26       	jnz.a %a2,8000b93e <_svfprintf_r+0x4a>
8000b934:	60 cf       	mov.a %a15,%d12
8000b936:	da 0c       	mov %d15,12
8000b938:	68 0f       	st.w [%a15]0,%d15
8000b93a:	82 f2       	mov %d2,-1
8000b93c:	00 90       	ret 
8000b93e:	60 b2       	mov.a %a2,%d11
8000b940:	da 40       	mov %d15,64
8000b942:	6c 25       	st.w [%a2]20,%d15
8000b944:	82 0f       	mov %d15,0
8000b946:	d9 a2 10 20 	lea %a2,[%sp]144
8000b94a:	a0 03       	mov.a %a3,0
8000b94c:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b950:	78 19       	st.w [%sp]100,%d15
8000b952:	78 18       	st.w [%sp]96,%d15
8000b954:	78 05       	st.w [%sp]20,%d15
8000b956:	78 0b       	st.w [%sp]44,%d15
8000b958:	78 0c       	st.w [%sp]48,%d15
8000b95a:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b95e:	78 0e       	st.w [%sp]56,%d15
8000b960:	78 0a       	st.w [%sp]40,%d15
8000b962:	40 2e       	mov.aa %a14,%a2
8000b964:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b968:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b96c:	8b 0f 20 32 	ne %d3,%d15,0
8000b970:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b974:	76 33       	jz %d3,8000b97a <_svfprintf_r+0x86>
8000b976:	b0 1c       	add.a %a12,1
8000b978:	3c f8       	j 8000b968 <_svfprintf_r+0x74>
8000b97a:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b97e:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b982:	80 3f       	mov.d %d15,%a3
8000b984:	6e 23       	jz %d15,8000b9ca <_svfprintf_r+0xd6>
8000b986:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b98a:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b98e:	42 f3       	add %d3,%d15
8000b990:	59 a3 24 10 	st.w [%sp]100,%d3
8000b994:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b998:	f4 e3       	st.a [%a14],%a3
8000b99a:	c2 13       	add %d3,1
8000b99c:	6c e1       	st.w [%a14]4,%d15
8000b99e:	59 a3 20 10 	st.w [%sp]96,%d3
8000b9a2:	8b 83 80 32 	ge %d3,%d3,8
8000b9a6:	d9 ee 08 00 	lea %a14,[%a14]8
8000b9aa:	76 3b       	jz %d3,8000b9c0 <_svfprintf_r+0xcc>
8000b9ac:	60 c4       	mov.a %a4,%d12
8000b9ae:	60 b5       	mov.a %a5,%d11
8000b9b0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b9b4:	6d 00 7d 12 	call 8000deae <__ssprint_r>
8000b9b8:	df 02 69 88 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000b9bc:	d9 ae 10 20 	lea %a14,[%sp]144
8000b9c0:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b9c4:	42 f2       	add %d2,%d15
8000b9c6:	59 a2 28 00 	st.w [%sp]40,%d2
8000b9ca:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b9ce:	df 0f 56 08 	jeq %d15,0,8000ca7a <_svfprintf_r+0x1186>
8000b9d2:	82 0f       	mov %d15,0
8000b9d4:	82 02       	mov %d2,0
8000b9d6:	e9 af 01 10 	st.b [%sp]65,%d15
8000b9da:	d9 c2 01 00 	lea %a2,[%a12]1
8000b9de:	82 0f       	mov %d15,0
8000b9e0:	82 fe       	mov %d14,-1
8000b9e2:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b9e6:	82 0a       	mov %d10,0
8000b9e8:	79 22 00 00 	ld.b %d2,[%a2]0
8000b9ec:	d9 23 01 00 	lea %a3,[%a2]1
8000b9f0:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b9f4:	59 a2 10 00 	st.w [%sp]16,%d2
8000b9f8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b9fc:	1b 02 fe 3f 	addi %d3,%d2,-32
8000ba00:	8b 93 a5 42 	ge.u %d4,%d3,89
8000ba04:	df 04 19 84 	jne %d4,0,8000c236 <_svfprintf_r+0x942>
8000ba08:	91 10 00 28 	movh.a %a2,32769
8000ba0c:	d9 22 98 8b 	lea %a2,[%a2]-17896 <8000ba18 <_svfprintf_r+0x124>>
8000ba10:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000ba14:	dc 07       	ji %a7
8000ba16:	00 00       	nop 
8000ba18:	1d 00 c3 00 	j 8000bb9e <_svfprintf_r+0x2aa>
8000ba1c:	1d 00 0d 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba20:	1d 00 0b 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba24:	1d 00 c0 00 	j 8000bba4 <_svfprintf_r+0x2b0>
8000ba28:	1d 00 07 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba2c:	1d 00 05 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba30:	1d 00 03 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba34:	1d 00 01 04 	j 8000c236 <_svfprintf_r+0x942>
8000ba38:	1d 00 ff 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba3c:	1d 00 fd 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba40:	1d 00 b5 00 	j 8000bbaa <_svfprintf_r+0x2b6>
8000ba44:	1d 00 9c 00 	j 8000bb7c <_svfprintf_r+0x288>
8000ba48:	1d 00 f7 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba4c:	1d 00 b8 00 	j 8000bbbc <_svfprintf_r+0x2c8>
8000ba50:	1d 00 b9 00 	j 8000bbc2 <_svfprintf_r+0x2ce>
8000ba54:	1d 00 f1 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba58:	1d 00 de 00 	j 8000bc14 <_svfprintf_r+0x320>
8000ba5c:	1d 00 df 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba60:	1d 00 dd 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba64:	1d 00 db 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba68:	1d 00 d9 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba6c:	1d 00 d7 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba70:	1d 00 d5 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba74:	1d 00 d3 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba78:	1d 00 d1 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba7c:	1d 00 cf 00 	j 8000bc1a <_svfprintf_r+0x326>
8000ba80:	1d 00 db 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba84:	1d 00 d9 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba88:	1d 00 d7 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba8c:	1d 00 d5 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba90:	1d 00 d3 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba94:	1d 00 d1 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba98:	1d 00 cf 03 	j 8000c236 <_svfprintf_r+0x942>
8000ba9c:	1d 00 cd 03 	j 8000c236 <_svfprintf_r+0x942>
8000baa0:	1d 00 cb 03 	j 8000c236 <_svfprintf_r+0x942>
8000baa4:	1d 00 c9 03 	j 8000c236 <_svfprintf_r+0x942>
8000baa8:	1d 00 f9 00 	j 8000bc9a <_svfprintf_r+0x3a6>
8000baac:	1d 00 21 01 	j 8000bcee <_svfprintf_r+0x3fa>
8000bab0:	1d 00 c3 03 	j 8000c236 <_svfprintf_r+0x942>
8000bab4:	1d 00 1d 01 	j 8000bcee <_svfprintf_r+0x3fa>
8000bab8:	1d 00 bf 03 	j 8000c236 <_svfprintf_r+0x942>
8000babc:	1d 00 bd 03 	j 8000c236 <_svfprintf_r+0x942>
8000bac0:	1d 00 bb 03 	j 8000c236 <_svfprintf_r+0x942>
8000bac4:	1d 00 b9 03 	j 8000c236 <_svfprintf_r+0x942>
8000bac8:	1d 00 c6 00 	j 8000bc54 <_svfprintf_r+0x360>
8000bacc:	1d 00 b5 03 	j 8000c236 <_svfprintf_r+0x942>
8000bad0:	1d 00 b3 03 	j 8000c236 <_svfprintf_r+0x942>
8000bad4:	1d 00 92 02 	j 8000bff8 <_svfprintf_r+0x704>
8000bad8:	1d 00 af 03 	j 8000c236 <_svfprintf_r+0x942>
8000badc:	1d 00 ad 03 	j 8000c236 <_svfprintf_r+0x942>
8000bae0:	1d 00 ab 03 	j 8000c236 <_svfprintf_r+0x942>
8000bae4:	1d 00 a9 03 	j 8000c236 <_svfprintf_r+0x942>
8000bae8:	1d 00 a7 03 	j 8000c236 <_svfprintf_r+0x942>
8000baec:	1d 00 d0 02 	j 8000c08c <_svfprintf_r+0x798>
8000baf0:	1d 00 a3 03 	j 8000c236 <_svfprintf_r+0x942>
8000baf4:	1d 00 a1 03 	j 8000c236 <_svfprintf_r+0x942>
8000baf8:	1d 00 4b 00 	j 8000bb8e <_svfprintf_r+0x29a>
8000bafc:	1d 00 9d 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb00:	1d 00 9b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb04:	1d 00 99 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb08:	1d 00 97 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb0c:	1d 00 95 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb10:	1d 00 93 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb14:	1d 00 91 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb18:	1d 00 8f 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb1c:	1d 00 8d 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb20:	1d 00 8b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb24:	1d 00 b0 00 	j 8000bc84 <_svfprintf_r+0x390>
8000bb28:	1d 00 2f 00 	j 8000bb86 <_svfprintf_r+0x292>
8000bb2c:	1d 00 e1 00 	j 8000bcee <_svfprintf_r+0x3fa>
8000bb30:	1d 00 df 00 	j 8000bcee <_svfprintf_r+0x3fa>
8000bb34:	1d 00 dd 00 	j 8000bcee <_svfprintf_r+0x3fa>
8000bb38:	1d 00 91 00 	j 8000bc5a <_svfprintf_r+0x366>
8000bb3c:	1d 00 25 00 	j 8000bb86 <_svfprintf_r+0x292>
8000bb40:	1d 00 7b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb44:	1d 00 79 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb48:	1d 00 8c 00 	j 8000bc60 <_svfprintf_r+0x36c>
8000bb4c:	1d 00 75 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb50:	1d 00 39 02 	j 8000bfc2 <_svfprintf_r+0x6ce>
8000bb54:	1d 00 54 02 	j 8000bffc <_svfprintf_r+0x708>
8000bb58:	1d 00 66 02 	j 8000c024 <_svfprintf_r+0x730>
8000bb5c:	1d 00 90 00 	j 8000bc7c <_svfprintf_r+0x388>
8000bb60:	1d 00 6b 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb64:	1d 00 77 02 	j 8000c052 <_svfprintf_r+0x75e>
8000bb68:	1d 00 67 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb6c:	1d 00 92 02 	j 8000c090 <_svfprintf_r+0x79c>
8000bb70:	1d 00 63 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb74:	1d 00 61 03 	j 8000c236 <_svfprintf_r+0x942>
8000bb78:	1d 00 a0 02 	j 8000c0b8 <_svfprintf_r+0x7c4>
8000bb7c:	da 2b       	mov %d15,43
8000bb7e:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bb82:	1d ff 33 ff 	j 8000b9e8 <_svfprintf_r+0xf4>
8000bb86:	e9 af 01 10 	st.b [%sp]65,%d15
8000bb8a:	1d 00 8c 00 	j 8000bca2 <_svfprintf_r+0x3ae>
8000bb8e:	e9 af 01 10 	st.b [%sp]65,%d15
8000bb92:	7b 00 00 f8 	movh %d15,32768
8000bb96:	1b 8f f1 f0 	addi %d15,%d15,3864
8000bb9a:	1d 00 95 02 	j 8000c0c4 <_svfprintf_r+0x7d0>
8000bb9e:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000bba2:	3c ee       	j 8000bb7e <_svfprintf_r+0x28a>
8000bba4:	8f 1a 40 a1 	or %d10,%d10,1
8000bba8:	3c eb       	j 8000bb7e <_svfprintf_r+0x28a>
8000bbaa:	48 02       	ld.w %d2,[%a15]0
8000bbac:	b0 4f       	add.a %a15,4
8000bbae:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bbb2:	ff 02 e6 7f 	jge %d2,0,8000bb7e <_svfprintf_r+0x28a>
8000bbb6:	32 52       	rsub %d2
8000bbb8:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bbbc:	8f 4a 40 a1 	or %d10,%d10,4
8000bbc0:	3c df       	j 8000bb7e <_svfprintf_r+0x28a>
8000bbc2:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bbc6:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bbca:	79 32 00 00 	ld.b %d2,[%a3]0
8000bbce:	b0 12       	add.a %a2,1
8000bbd0:	59 a2 10 00 	st.w [%sp]16,%d2
8000bbd4:	8b a2 02 32 	eq %d3,%d2,42
8000bbd8:	f6 33       	jnz %d3,8000bbde <_svfprintf_r+0x2ea>
8000bbda:	82 05       	mov %d5,0
8000bbdc:	3c 08       	j 8000bbec <_svfprintf_r+0x2f8>
8000bbde:	48 0e       	ld.w %d14,[%a15]0
8000bbe0:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bbe4:	b0 4f       	add.a %a15,4
8000bbe6:	8b fe 5f e3 	max %d14,%d14,-1
8000bbea:	3c ca       	j 8000bb7e <_svfprintf_r+0x28a>
8000bbec:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bbf0:	1b 02 fd 3f 	addi %d3,%d2,-48
8000bbf4:	ff a3 0a 80 	jge.u %d3,10,8000bc08 <_svfprintf_r+0x314>
8000bbf8:	79 22 00 00 	ld.b %d2,[%a2]0
8000bbfc:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000bc00:	59 a2 10 00 	st.w [%sp]16,%d2
8000bc04:	b0 12       	add.a %a2,1
8000bc06:	3c f3       	j 8000bbec <_svfprintf_r+0x2f8>
8000bc08:	8b f5 5f e3 	max %d14,%d5,-1
8000bc0c:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bc10:	1d ff f4 fe 	j 8000b9f8 <_svfprintf_r+0x104>
8000bc14:	8f 0a 48 a1 	or %d10,%d10,128
8000bc18:	3c b3       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc1a:	82 02       	mov %d2,0
8000bc1c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bc20:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bc24:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bc28:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bc2c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000bc30:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bc34:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000bc38:	b0 12       	add.a %a2,1
8000bc3a:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bc3e:	79 32 00 00 	ld.b %d2,[%a3]0
8000bc42:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bc46:	59 a2 10 00 	st.w [%sp]16,%d2
8000bc4a:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bc4e:	bf a4 e9 ff 	jlt.u %d4,10,8000bc20 <_svfprintf_r+0x32c>
8000bc52:	3c dd       	j 8000bc0c <_svfprintf_r+0x318>
8000bc54:	8f 8a 40 a1 	or %d10,%d10,8
8000bc58:	3c 93       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc5a:	8f 0a 44 a1 	or %d10,%d10,64
8000bc5e:	3c 90       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc60:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bc64:	79 33 00 00 	ld.b %d3,[%a3]0
8000bc68:	8b c3 26 32 	ne %d3,%d3,108
8000bc6c:	f6 35       	jnz %d3,8000bc76 <_svfprintf_r+0x382>
8000bc6e:	b0 13       	add.a %a3,1
8000bc70:	b5 a3 18 00 	st.a [%sp]24,%a3
8000bc74:	3c 04       	j 8000bc7c <_svfprintf_r+0x388>
8000bc76:	8f 0a 41 a1 	or %d10,%d10,16
8000bc7a:	3c 82       	j 8000bb7e <_svfprintf_r+0x28a>
8000bc7c:	8f 0a 42 a1 	or %d10,%d10,32
8000bc80:	1d ff 7f ff 	j 8000bb7e <_svfprintf_r+0x28a>
8000bc84:	48 03       	ld.w %d3,[%a15]0
8000bc86:	d9 fc 04 00 	lea %a12,[%a15]4
8000bc8a:	e9 a3 28 10 	st.b [%sp]104,%d3
8000bc8e:	82 03       	mov %d3,0
8000bc90:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bc94:	60 ad       	mov.a %a13,%d10
8000bc96:	1d 00 dc 02 	j 8000c24e <_svfprintf_r+0x95a>
8000bc9a:	e9 af 01 10 	st.b [%sp]65,%d15
8000bc9e:	8f 0a 41 a1 	or %d10,%d10,16
8000bca2:	60 ad       	mov.a %a13,%d10
8000bca4:	6f 5a 07 00 	jz.t %d10,5,8000bcb2 <_svfprintf_r+0x3be>
8000bca8:	d9 fc 08 00 	lea %a12,[%a15]8
8000bcac:	09 f8 40 09 	ld.d %e8,[%a15]
8000bcb0:	3c 12       	j 8000bcd4 <_svfprintf_r+0x3e0>
8000bcb2:	d9 f2 04 00 	lea %a2,[%a15]4
8000bcb6:	6f 4a 05 00 	jz.t %d10,4,8000bcc0 <_svfprintf_r+0x3cc>
8000bcba:	40 2c       	mov.aa %a12,%a2
8000bcbc:	48 08       	ld.w %d8,[%a15]0
8000bcbe:	3c 09       	j 8000bcd0 <_svfprintf_r+0x3dc>
8000bcc0:	48 03       	ld.w %d3,[%a15]0
8000bcc2:	40 2c       	mov.aa %a12,%a2
8000bcc4:	0b 30 00 88 	mov %e8,%d3
8000bcc8:	6f 6a 06 00 	jz.t %d10,6,8000bcd4 <_svfprintf_r+0x3e0>
8000bccc:	37 03 50 80 	extr %d8,%d3,0,16
8000bcd0:	0b 80 00 88 	mov %e8,%d8
8000bcd4:	82 13       	mov %d3,1
8000bcd6:	ff 09 1d 02 	jge %d9,0,8000c110 <_svfprintf_r+0x81c>
8000bcda:	32 59       	rsub %d9
8000bcdc:	32 58       	rsub %d8
8000bcde:	3b d0 02 70 	mov %d7,45
8000bce2:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000bce6:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bcea:	1d 00 13 02 	j 8000c110 <_svfprintf_r+0x81c>
8000bcee:	e9 af 01 10 	st.b [%sp]65,%d15
8000bcf2:	4c f0       	ld.w %d15,[%a15]0
8000bcf4:	d9 fc 08 00 	lea %a12,[%a15]8
8000bcf8:	78 0b       	st.w [%sp]44,%d15
8000bcfa:	4c f1       	ld.w %d15,[%a15]4
8000bcfc:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bd00:	78 0c       	st.w [%sp]48,%d15
8000bd02:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bd06:	6d 00 b3 10 	call 8000de6c <__fpclassifyd>
8000bd0a:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bd0e:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bd12:	df 12 18 80 	jne %d2,1,8000bd42 <_svfprintf_r+0x44e>
8000bd16:	d2 06       	mov %e6,0
8000bd18:	6d 00 50 14 	call 8000e5b8 <__ltdf2>
8000bd1c:	ce 25       	jgez %d2,8000bd26 <_svfprintf_r+0x432>
8000bd1e:	3b d0 02 30 	mov %d3,45
8000bd22:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bd26:	58 04       	ld.w %d15,[%sp]16
8000bd28:	7b 00 00 78 	movh %d7,32768
8000bd2c:	8b 8f 84 32 	ge %d3,%d15,72
8000bd30:	1b c7 f0 d0 	addi %d13,%d7,3852
8000bd34:	df 03 17 80 	jne %d3,0,8000bd62 <_svfprintf_r+0x46e>
8000bd38:	7b 00 00 78 	movh %d7,32768
8000bd3c:	1b 87 f0 d0 	addi %d13,%d7,3848
8000bd40:	3c 11       	j 8000bd62 <_svfprintf_r+0x46e>
8000bd42:	6d 00 95 10 	call 8000de6c <__fpclassifyd>
8000bd46:	58 04       	ld.w %d15,[%sp]16
8000bd48:	df 02 13 80 	jne %d2,0,8000bd6e <_svfprintf_r+0x47a>
8000bd4c:	7b 00 00 78 	movh %d7,32768
8000bd50:	8b 8f 84 32 	ge %d3,%d15,72
8000bd54:	1b 47 f1 d0 	addi %d13,%d7,3860
8000bd58:	f6 35       	jnz %d3,8000bd62 <_svfprintf_r+0x46e>
8000bd5a:	7b 00 00 78 	movh %d7,32768
8000bd5e:	1b 07 f1 d0 	addi %d13,%d7,3856
8000bd62:	8f 0a c8 a1 	andn %d10,%d10,128
8000bd66:	60 ad       	mov.a %a13,%d10
8000bd68:	82 39       	mov %d9,3
8000bd6a:	1d 00 78 02 	j 8000c25a <_svfprintf_r+0x966>
8000bd6e:	8f 0f c2 f1 	andn %d15,%d15,32
8000bd72:	78 01       	st.w [%sp]4,%d15
8000bd74:	df fe 09 00 	jeq %d14,-1,8000bd86 <_svfprintf_r+0x492>
8000bd78:	8b 0e 00 72 	eq %d7,%d14,0
8000bd7c:	8b 7f 04 74 	and.eq %d7,%d15,71
8000bd80:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000bd84:	3c 02       	j 8000bd88 <_svfprintf_r+0x494>
8000bd86:	82 6e       	mov %d14,6
8000bd88:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bd8c:	8f 0a 50 21 	or %d2,%d10,256
8000bd90:	60 2d       	mov.a %a13,%d2
8000bd92:	d8 0b       	ld.a %a15,[%sp]44
8000bd94:	82 0f       	mov %d15,0
8000bd96:	ce 34       	jgez %d3,8000bd9e <_svfprintf_r+0x4aa>
8000bd98:	9b 03 00 38 	addih %d3,%d3,32768
8000bd9c:	da 2d       	mov %d15,45
8000bd9e:	78 09       	st.w [%sp]36,%d15
8000bda0:	58 01       	ld.w %d15,[%sp]4
8000bda2:	02 e9       	mov %d9,%d14
8000bda4:	8b 6f 04 22 	eq %d2,%d15,70
8000bda8:	82 36       	mov %d6,3
8000bdaa:	f6 28       	jnz %d2,8000bdba <_svfprintf_r+0x4c6>
8000bdac:	8b 5f 24 12 	ne %d1,%d15,69
8000bdb0:	1b 1e 00 50 	addi %d5,%d14,1
8000bdb4:	82 26       	mov %d6,2
8000bdb6:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000bdba:	60 c4       	mov.a %a4,%d12
8000bdbc:	80 f4       	mov.d %d4,%a15
8000bdbe:	02 35       	mov %d5,%d3
8000bdc0:	02 97       	mov %d7,%d9
8000bdc2:	d9 a5 04 10 	lea %a5,[%sp]68
8000bdc6:	d9 a6 08 10 	lea %a6,[%sp]72
8000bdca:	d9 a7 14 10 	lea %a7,[%sp]84
8000bdce:	59 a2 0c 00 	st.w [%sp]12,%d2
8000bdd2:	59 a3 08 00 	st.w [%sp]8,%d3
8000bdd6:	6d 00 ef 06 	call 8000cbb4 <_dtoa_r>
8000bdda:	58 01       	ld.w %d15,[%sp]4
8000bddc:	80 2d       	mov.d %d13,%a2
8000bdde:	8b 7f 24 12 	ne %d1,%d15,71
8000bde2:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000bde6:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bdea:	df 01 11 80 	jne %d1,0,8000be0c <_svfprintf_r+0x518>
8000bdee:	6f 0a 0f 80 	jnz.t %d10,0,8000be0c <_svfprintf_r+0x518>
8000bdf2:	19 a2 14 10 	ld.w %d2,[%sp]84
8000bdf6:	58 01       	ld.w %d15,[%sp]4
8000bdf8:	a2 d2       	sub %d2,%d13
8000bdfa:	59 a2 14 00 	st.w [%sp]20,%d2
8000bdfe:	8b 7f 04 42 	eq %d4,%d15,71
8000be02:	19 a5 04 10 	ld.w %d5,[%sp]68
8000be06:	df 04 36 80 	jne %d4,0,8000be72 <_svfprintf_r+0x57e>
8000be0a:	3c 3e       	j 8000be86 <_svfprintf_r+0x592>
8000be0c:	0b 9d 00 80 	add %d8,%d13,%d9
8000be10:	df 02 1c 00 	jeq %d2,0,8000be48 <_svfprintf_r+0x554>
8000be14:	60 d2       	mov.a %a2,%d13
8000be16:	80 f4       	mov.d %d4,%a15
8000be18:	79 20 00 00 	ld.b %d0,[%a2]0
8000be1c:	d2 06       	mov %e6,0
8000be1e:	02 35       	mov %d5,%d3
8000be20:	8b 00 03 f2 	eq %d15,%d0,48
8000be24:	59 a3 08 00 	st.w [%sp]8,%d3
8000be28:	6d 00 68 13 	call 8000e4f8 <__nedf2>
8000be2c:	8b 02 20 22 	ne %d2,%d2,0
8000be30:	0f 2f 80 00 	and %d0,%d15,%d2
8000be34:	19 a3 08 00 	ld.w %d3,[%sp]8
8000be38:	76 05       	jz %d0,8000be42 <_svfprintf_r+0x54e>
8000be3a:	8b 19 00 01 	rsub %d0,%d9,1
8000be3e:	59 a0 04 10 	st.w [%sp]68,%d0
8000be42:	19 a2 04 10 	ld.w %d2,[%sp]68
8000be46:	42 28       	add %d8,%d2
8000be48:	80 f4       	mov.d %d4,%a15
8000be4a:	d2 06       	mov %e6,0
8000be4c:	02 35       	mov %d5,%d3
8000be4e:	6d 00 35 13 	call 8000e4b8 <__eqdf2>
8000be52:	f6 23       	jnz %d2,8000be58 <_svfprintf_r+0x564>
8000be54:	59 a8 14 10 	st.w [%sp]84,%d8
8000be58:	3b 00 03 00 	mov %d0,48
8000be5c:	19 a3 14 10 	ld.w %d3,[%sp]84
8000be60:	7f 83 c9 ff 	jge.u %d3,%d8,8000bdf2 <_svfprintf_r+0x4fe>
8000be64:	1b 13 00 10 	addi %d1,%d3,1
8000be68:	60 32       	mov.a %a2,%d3
8000be6a:	59 a1 14 10 	st.w [%sp]84,%d1
8000be6e:	34 20       	st.b [%a2],%d0
8000be70:	3c f6       	j 8000be5c <_svfprintf_r+0x568>
8000be72:	0b 5e 20 31 	lt %d3,%d14,%d5
8000be76:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000be7a:	df 03 88 00 	jeq %d3,0,8000bf8a <_svfprintf_r+0x696>
8000be7e:	58 04       	ld.w %d15,[%sp]16
8000be80:	c2 ef       	add %d15,-2
8000be82:	78 04       	st.w [%sp]16,%d15
8000be84:	3c 06       	j 8000be90 <_svfprintf_r+0x59c>
8000be86:	58 04       	ld.w %d15,[%sp]16
8000be88:	8b 6f 86 32 	ge %d3,%d15,102
8000be8c:	df 03 69 80 	jne %d3,0,8000bf5e <_svfprintf_r+0x66a>
8000be90:	19 a2 10 00 	ld.w %d2,[%sp]16
8000be94:	9a f5       	add %d15,%d5,-1
8000be96:	78 11       	st.w [%sp]68,%d15
8000be98:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000be9c:	3b b0 02 30 	mov %d3,43
8000bea0:	ce f4       	jgez %d15,8000bea8 <_svfprintf_r+0x5b4>
8000bea2:	32 5f       	rsub %d15
8000bea4:	3b d0 02 30 	mov %d3,45
8000bea8:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000beac:	8b af 40 32 	lt %d3,%d15,10
8000beb0:	df 03 3e 80 	jne %d3,0,8000bf2c <_svfprintf_r+0x638>
8000beb4:	82 06       	mov %d6,0
8000beb6:	3b a0 00 00 	mov %d0,10
8000beba:	4b 0f 01 42 	div %e4,%d15,%d0
8000bebe:	8b 66 00 71 	rsub %d7,%d6,6
8000bec2:	60 72       	mov.a %a2,%d7
8000bec4:	d9 af 14 10 	lea %a15,[%sp]84
8000bec8:	1b 05 03 30 	addi %d3,%d5,48
8000becc:	30 2f       	add.a %a15,%a2
8000bece:	28 03       	st.b [%a15]0,%d3
8000bed0:	8b a4 80 32 	ge %d3,%d4,10
8000bed4:	02 4f       	mov %d15,%d4
8000bed6:	c2 16       	add %d6,1
8000bed8:	df 03 f1 ff 	jne %d3,0,8000beba <_svfprintf_r+0x5c6>
8000bedc:	60 74       	mov.a %a4,%d7
8000bede:	d9 a2 10 30 	lea %a2,[%sp]208
8000bee2:	1b 04 03 f0 	addi %d15,%d4,48
8000bee6:	30 42       	add.a %a2,%a4
8000bee8:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000beec:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000bef0:	80 22       	mov.d %d2,%a2
8000bef2:	d9 af 1b 10 	lea %a15,[%sp]91
8000bef6:	80 ff       	mov.d %d15,%a15
8000bef8:	1b 32 f8 4f 	addi %d4,%d2,-125
8000befc:	82 03       	mov %d3,0
8000befe:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000bf02:	3f 4f 08 80 	jlt.u %d15,%d4,8000bf12 <_svfprintf_r+0x61e>
8000bf06:	80 a2       	mov.d %d2,%sp
8000bf08:	1b 02 0d 20 	addi %d2,%d2,208
8000bf0c:	8b 52 07 42 	eq %d4,%d2,117
8000bf10:	76 46       	jz %d4,8000bf1c <_svfprintf_r+0x628>
8000bf12:	a0 03       	mov.a %a3,0
8000bf14:	3c 04       	j 8000bf1c <_svfprintf_r+0x628>
8000bf16:	0c 70       	ld.bu %d15,[%a7]0
8000bf18:	b0 17       	add.a %a7,1
8000bf1a:	28 0f       	st.b [%a15]0,%d15
8000bf1c:	60 3f       	mov.a %a15,%d3
8000bf1e:	d9 a2 0d 10 	lea %a2,[%sp]77
8000bf22:	b0 2f       	add.a %a15,2
8000bf24:	30 2f       	add.a %a15,%a2
8000bf26:	c2 13       	add %d3,1
8000bf28:	fc 37       	loop %a3,8000bf16 <_svfprintf_r+0x622>
8000bf2a:	3c 0b       	j 8000bf40 <_svfprintf_r+0x64c>
8000bf2c:	3b 00 03 30 	mov %d3,48
8000bf30:	1b 0f 03 f0 	addi %d15,%d15,48
8000bf34:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000bf38:	e9 af 10 10 	st.b [%sp]80,%d15
8000bf3c:	d9 af 11 10 	lea %a15,[%sp]81
8000bf40:	d9 a7 0d 10 	lea %a7,[%sp]77
8000bf44:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000bf48:	80 79       	mov.d %d9,%a7
8000bf4a:	58 05       	ld.w %d15,[%sp]20
8000bf4c:	b5 a7 38 00 	st.a [%sp]56,%a7
8000bf50:	42 f9       	add %d9,%d15
8000bf52:	ff 2f 04 00 	jge %d15,2,8000bf5a <_svfprintf_r+0x666>
8000bf56:	6f 0a 2c 00 	jz.t %d10,0,8000bfae <_svfprintf_r+0x6ba>
8000bf5a:	c2 19       	add %d9,1
8000bf5c:	3c 29       	j 8000bfae <_svfprintf_r+0x6ba>
8000bf5e:	58 04       	ld.w %d15,[%sp]16
8000bf60:	8b 6f 26 42 	ne %d4,%d15,102
8000bf64:	df 04 15 80 	jne %d4,0,8000bf8e <_svfprintf_r+0x69a>
8000bf68:	02 59       	mov %d9,%d5
8000bf6a:	8e 59       	jlez %d5,8000bf7c <_svfprintf_r+0x688>
8000bf6c:	f6 e3       	jnz %d14,8000bf72 <_svfprintf_r+0x67e>
8000bf6e:	6f 0a 20 00 	jz.t %d10,0,8000bfae <_svfprintf_r+0x6ba>
8000bf72:	1b 1e 00 30 	addi %d3,%d14,1
8000bf76:	0b 35 00 90 	add %d9,%d5,%d3
8000bf7a:	3c 1a       	j 8000bfae <_svfprintf_r+0x6ba>
8000bf7c:	f6 e4       	jnz %d14,8000bf84 <_svfprintf_r+0x690>
8000bf7e:	82 19       	mov %d9,1
8000bf80:	6f 0a 17 00 	jz.t %d10,0,8000bfae <_svfprintf_r+0x6ba>
8000bf84:	1b 2e 00 90 	addi %d9,%d14,2
8000bf88:	3c 13       	j 8000bfae <_svfprintf_r+0x6ba>
8000bf8a:	da 67       	mov %d15,103
8000bf8c:	78 04       	st.w [%sp]16,%d15
8000bf8e:	58 05       	ld.w %d15,[%sp]20
8000bf90:	8f 1a 00 a1 	and %d10,%d10,1
8000bf94:	0b a5 00 90 	add %d9,%d5,%d10
8000bf98:	7f f5 0b 00 	jge %d5,%d15,8000bfae <_svfprintf_r+0x6ba>
8000bf9c:	8b 15 40 92 	lt %d9,%d5,1
8000bfa0:	8b 25 00 31 	rsub %d3,%d5,2
8000bfa4:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000bfa8:	19 a9 14 00 	ld.w %d9,[%sp]20
8000bfac:	42 39       	add %d9,%d3
8000bfae:	58 09       	ld.w %d15,[%sp]36
8000bfb0:	82 0e       	mov %d14,0
8000bfb2:	df 0f 55 01 	jeq %d15,0,8000c25c <_svfprintf_r+0x968>
8000bfb6:	3b d0 02 70 	mov %d7,45
8000bfba:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bfbe:	1d 00 4f 01 	j 8000c25c <_svfprintf_r+0x968>
8000bfc2:	e9 af 01 10 	st.b [%sp]65,%d15
8000bfc6:	d9 f2 04 00 	lea %a2,[%a15]4
8000bfca:	6f 5a 09 00 	jz.t %d10,5,8000bfdc <_svfprintf_r+0x6e8>
8000bfce:	58 0a       	ld.w %d15,[%sp]40
8000bfd0:	c8 03       	ld.a %a3,[%a15]0
8000bfd2:	0b f0 00 48 	mov %e4,%d15
8000bfd6:	89 34 40 09 	st.d [%a3],%e4
8000bfda:	3c 0c       	j 8000bff2 <_svfprintf_r+0x6fe>
8000bfdc:	6f 4a 08 80 	jnz.t %d10,4,8000bfec <_svfprintf_r+0x6f8>
8000bfe0:	6f 6a 06 00 	jz.t %d10,6,8000bfec <_svfprintf_r+0x6f8>
8000bfe4:	c8 03       	ld.a %a3,[%a15]0
8000bfe6:	58 0a       	ld.w %d15,[%sp]40
8000bfe8:	ac 30       	st.h [%a3]0,%d15
8000bfea:	3c 04       	j 8000bff2 <_svfprintf_r+0x6fe>
8000bfec:	c8 03       	ld.a %a3,[%a15]0
8000bfee:	58 0a       	ld.w %d15,[%sp]40
8000bff0:	6c 30       	st.w [%a3]0,%d15
8000bff2:	40 2f       	mov.aa %a15,%a2
8000bff4:	1d ff b8 fc 	j 8000b964 <_svfprintf_r+0x70>
8000bff8:	8f 0a 41 a1 	or %d10,%d10,16
8000bffc:	6f 5a 07 00 	jz.t %d10,5,8000c00a <_svfprintf_r+0x716>
8000c000:	d9 fc 08 00 	lea %a12,[%a15]8
8000c004:	09 f8 40 09 	ld.d %e8,[%a15]
8000c008:	3c 0c       	j 8000c020 <_svfprintf_r+0x72c>
8000c00a:	d9 fc 04 00 	lea %a12,[%a15]4
8000c00e:	6f 4a 07 80 	jnz.t %d10,4,8000c01c <_svfprintf_r+0x728>
8000c012:	6f 6a 05 00 	jz.t %d10,6,8000c01c <_svfprintf_r+0x728>
8000c016:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000c01a:	3c 02       	j 8000c01e <_svfprintf_r+0x72a>
8000c01c:	48 08       	ld.w %d8,[%a15]0
8000c01e:	82 09       	mov %d9,0
8000c020:	82 03       	mov %d3,0
8000c022:	3c 73       	j 8000c108 <_svfprintf_r+0x814>
8000c024:	3b 00 03 40 	mov %d4,48
8000c028:	7b 00 00 f8 	movh %d15,32768
8000c02c:	1b 9f f2 f0 	addi %d15,%d15,3881
8000c030:	e9 a4 02 10 	st.b [%sp]66,%d4
8000c034:	3b 80 07 40 	mov %d4,120
8000c038:	78 0f       	st.w [%sp]60,%d15
8000c03a:	02 4f       	mov %d15,%d4
8000c03c:	d9 fc 04 00 	lea %a12,[%a15]4
8000c040:	48 08       	ld.w %d8,[%a15]0
8000c042:	82 09       	mov %d9,0
8000c044:	8f 2a 40 a1 	or %d10,%d10,2
8000c048:	e9 a4 03 10 	st.b [%sp]67,%d4
8000c04c:	82 23       	mov %d3,2
8000c04e:	78 04       	st.w [%sp]16,%d15
8000c050:	3c 5c       	j 8000c108 <_svfprintf_r+0x814>
8000c052:	82 07       	mov %d7,0
8000c054:	48 0d       	ld.w %d13,[%a15]0
8000c056:	e9 a7 01 10 	st.b [%sp]65,%d7
8000c05a:	02 e9       	mov %d9,%d14
8000c05c:	60 ad       	mov.a %a13,%d10
8000c05e:	d9 fc 04 00 	lea %a12,[%a15]4
8000c062:	60 d4       	mov.a %a4,%d13
8000c064:	0e ef       	jltz %d14,8000c082 <_svfprintf_r+0x78e>
8000c066:	82 04       	mov %d4,0
8000c068:	02 e5       	mov %d5,%d14
8000c06a:	6d 00 14 0c 	call 8000d892 <memchr>
8000c06e:	bd 02 f6 00 	jz.a %a2,8000c25a <_svfprintf_r+0x966>
8000c072:	60 d4       	mov.a %a4,%d13
8000c074:	01 42 20 30 	sub.a %a3,%a2,%a4
8000c078:	80 32       	mov.d %d2,%a3
8000c07a:	0b e2 80 91 	min %d9,%d2,%d14
8000c07e:	1d 00 ee 00 	j 8000c25a <_svfprintf_r+0x966>
8000c082:	6d ff cb fa 	call 8000b618 <strlen>
8000c086:	02 29       	mov %d9,%d2
8000c088:	1d 00 e9 00 	j 8000c25a <_svfprintf_r+0x966>
8000c08c:	8f 0a 41 a1 	or %d10,%d10,16
8000c090:	6f 5a 07 00 	jz.t %d10,5,8000c09e <_svfprintf_r+0x7aa>
8000c094:	d9 fc 08 00 	lea %a12,[%a15]8
8000c098:	09 f8 40 09 	ld.d %e8,[%a15]
8000c09c:	3c 0c       	j 8000c0b4 <_svfprintf_r+0x7c0>
8000c09e:	d9 fc 04 00 	lea %a12,[%a15]4
8000c0a2:	6f 4a 07 80 	jnz.t %d10,4,8000c0b0 <_svfprintf_r+0x7bc>
8000c0a6:	6f 6a 05 00 	jz.t %d10,6,8000c0b0 <_svfprintf_r+0x7bc>
8000c0aa:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000c0ae:	3c 02       	j 8000c0b2 <_svfprintf_r+0x7be>
8000c0b0:	48 08       	ld.w %d8,[%a15]0
8000c0b2:	82 09       	mov %d9,0
8000c0b4:	82 13       	mov %d3,1
8000c0b6:	3c 29       	j 8000c108 <_svfprintf_r+0x814>
8000c0b8:	e9 af 01 10 	st.b [%sp]65,%d15
8000c0bc:	7b 00 00 f8 	movh %d15,32768
8000c0c0:	1b 9f f2 f0 	addi %d15,%d15,3881
8000c0c4:	78 0f       	st.w [%sp]60,%d15
8000c0c6:	6f 5a 07 00 	jz.t %d10,5,8000c0d4 <_svfprintf_r+0x7e0>
8000c0ca:	d9 fc 08 00 	lea %a12,[%a15]8
8000c0ce:	09 f8 40 09 	ld.d %e8,[%a15]
8000c0d2:	3c 0c       	j 8000c0ea <_svfprintf_r+0x7f6>
8000c0d4:	d9 fc 04 00 	lea %a12,[%a15]4
8000c0d8:	6f 4a 07 80 	jnz.t %d10,4,8000c0e6 <_svfprintf_r+0x7f2>
8000c0dc:	6f 6a 05 00 	jz.t %d10,6,8000c0e6 <_svfprintf_r+0x7f2>
8000c0e0:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000c0e4:	3c 02       	j 8000c0e8 <_svfprintf_r+0x7f4>
8000c0e6:	48 08       	ld.w %d8,[%a15]0
8000c0e8:	82 09       	mov %d9,0
8000c0ea:	82 23       	mov %d3,2
8000c0ec:	6f 0a 0e 00 	jz.t %d10,0,8000c108 <_svfprintf_r+0x814>
8000c0f0:	0f 89 a0 40 	or %d4,%d9,%d8
8000c0f4:	76 4a       	jz %d4,8000c108 <_svfprintf_r+0x814>
8000c0f6:	58 04       	ld.w %d15,[%sp]16
8000c0f8:	3b 00 03 70 	mov %d7,48
8000c0fc:	e9 a7 02 10 	st.b [%sp]66,%d7
8000c100:	e9 af 03 10 	st.b [%sp]67,%d15
8000c104:	8f 2a 40 a1 	or %d10,%d10,2
8000c108:	82 07       	mov %d7,0
8000c10a:	60 ad       	mov.a %a13,%d10
8000c10c:	e9 a7 01 10 	st.b [%sp]65,%d7
8000c110:	80 d2       	mov.d %d2,%a13
8000c112:	8b 0e 80 72 	ge %d7,%d14,0
8000c116:	8f 02 c8 41 	andn %d4,%d2,128
8000c11a:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000c11e:	0f 98 a0 60 	or %d6,%d8,%d9
8000c122:	8b 0e 20 42 	ne %d4,%d14,0
8000c126:	8b 06 00 45 	or.ne %d4,%d6,0
8000c12a:	60 2d       	mov.a %a13,%d2
8000c12c:	df 04 72 00 	jeq %d4,0,8000c210 <_svfprintf_r+0x91c>
8000c130:	df 13 06 00 	jeq %d3,1,8000c13c <_svfprintf_r+0x848>
8000c134:	df 23 57 00 	jeq %d3,2,8000c1e2 <_svfprintf_r+0x8ee>
8000c138:	82 03       	mov %d3,0
8000c13a:	3c 03       	j 8000c140 <_svfprintf_r+0x84c>
8000c13c:	82 04       	mov %d4,0
8000c13e:	3c 22       	j 8000c182 <_svfprintf_r+0x88e>
8000c140:	8b 73 02 71 	rsub %d7,%d3,39
8000c144:	60 72       	mov.a %a2,%d7
8000c146:	8f 78 00 41 	and %d4,%d8,7
8000c14a:	d9 a3 28 10 	lea %a3,[%sp]104
8000c14e:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000c152:	30 23       	add.a %a3,%a2
8000c154:	1b 04 03 40 	addi %d4,%d4,48
8000c158:	06 d9       	sh %d9,-3
8000c15a:	34 34       	st.b [%a3],%d4
8000c15c:	0f 89 a0 60 	or %d6,%d9,%d8
8000c160:	c2 13       	add %d3,1
8000c162:	df 06 ef ff 	jne %d6,0,8000c140 <_svfprintf_r+0x84c>
8000c166:	80 d2       	mov.d %d2,%a13
8000c168:	80 3d       	mov.d %d13,%a3
8000c16a:	6f 02 61 00 	jz.t %d2,0,8000c22c <_svfprintf_r+0x938>
8000c16e:	8b 04 03 42 	eq %d4,%d4,48
8000c172:	df 04 5d 80 	jne %d4,0,8000c22c <_svfprintf_r+0x938>
8000c176:	3b 00 03 70 	mov %d7,48
8000c17a:	c2 fd       	add %d13,-1
8000c17c:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000c180:	3c 56       	j 8000c22c <_svfprintf_r+0x938>
8000c182:	8b 84 02 71 	rsub %d7,%d4,40
8000c186:	8b 09 00 32 	eq %d3,%d9,0
8000c18a:	60 73       	mov.a %a3,%d7
8000c18c:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000c190:	d9 a7 28 10 	lea %a7,[%sp]104
8000c194:	8b 09 00 35 	or.ne %d3,%d9,0
8000c198:	30 37       	add.a %a7,%a3
8000c19a:	1b 14 00 d0 	addi %d13,%d4,1
8000c19e:	df 03 1b 00 	jeq %d3,0,8000c1d4 <_svfprintf_r+0x8e0>
8000c1a2:	8b 74 02 41 	rsub %d4,%d4,39
8000c1a6:	60 42       	mov.a %a2,%d4
8000c1a8:	fb a0 00 60 	mov %e6,10
8000c1ac:	0b 89 10 48 	mov %e4,%d9,%d8
8000c1b0:	d9 af 28 10 	lea %a15,[%sp]104
8000c1b4:	30 2f       	add.a %a15,%a2
8000c1b6:	6d 00 b1 12 	call 8000e718 <__umoddi3>
8000c1ba:	0b 89 10 48 	mov %e4,%d9,%d8
8000c1be:	1b 02 03 20 	addi %d2,%d2,48
8000c1c2:	fb a0 00 60 	mov %e6,10
8000c1c6:	28 02       	st.b [%a15]0,%d2
8000c1c8:	6d 00 58 12 	call 8000e678 <__udivdi3>
8000c1cc:	02 d4       	mov %d4,%d13
8000c1ce:	0b 23 10 88 	mov %e8,%d3,%d2
8000c1d2:	3c d8       	j 8000c182 <_svfprintf_r+0x88e>
8000c1d4:	80 7d       	mov.d %d13,%a7
8000c1d6:	1b 08 03 80 	addi %d8,%d8,48
8000c1da:	c2 fd       	add %d13,-1
8000c1dc:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000c1e0:	3c 26       	j 8000c22c <_svfprintf_r+0x938>
8000c1e2:	82 03       	mov %d3,0
8000c1e4:	d8 0f       	ld.a %a15,[%sp]60
8000c1e6:	80 ad       	mov.d %d13,%sp
8000c1e8:	8f f8 00 f1 	and %d15,%d8,15
8000c1ec:	8b 73 02 71 	rsub %d7,%d3,39
8000c1f0:	1b 8d 06 d0 	addi %d13,%d13,104
8000c1f4:	10 f7       	addsc.a %a7,%a15,%d15,0
8000c1f6:	42 7d       	add %d13,%d7
8000c1f8:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000c1fc:	0c 70       	ld.bu %d15,[%a7]0
8000c1fe:	60 d2       	mov.a %a2,%d13
8000c200:	06 c9       	sh %d9,-4
8000c202:	2c 20       	st.b [%a2]0,%d15
8000c204:	0f 89 a0 40 	or %d4,%d9,%d8
8000c208:	c2 13       	add %d3,1
8000c20a:	df 04 ed ff 	jne %d4,0,8000c1e4 <_svfprintf_r+0x8f0>
8000c20e:	3c 0f       	j 8000c22c <_svfprintf_r+0x938>
8000c210:	80 a2       	mov.d %d2,%sp
8000c212:	1b 02 09 d0 	addi %d13,%d2,144
8000c216:	f6 3b       	jnz %d3,8000c22c <_svfprintf_r+0x938>
8000c218:	80 df       	mov.d %d15,%a13
8000c21a:	2e 09       	jz.t %d15,0,8000c22c <_svfprintf_r+0x938>
8000c21c:	1b 02 0d d0 	addi %d13,%d2,208
8000c220:	60 d2       	mov.a %a2,%d13
8000c222:	3b 00 03 70 	mov %d7,48
8000c226:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000c22a:	80 2d       	mov.d %d13,%a2
8000c22c:	d9 a3 10 20 	lea %a3,[%sp]144
8000c230:	80 39       	mov.d %d9,%a3
8000c232:	a2 d9       	sub %d9,%d13
8000c234:	3c 14       	j 8000c25c <_svfprintf_r+0x968>
8000c236:	e9 af 01 10 	st.b [%sp]65,%d15
8000c23a:	58 04       	ld.w %d15,[%sp]16
8000c23c:	df 0f 1f 04 	jeq %d15,0,8000ca7a <_svfprintf_r+0x1186>
8000c240:	82 03       	mov %d3,0
8000c242:	60 ad       	mov.a %a13,%d10
8000c244:	e9 af 28 10 	st.b [%sp]104,%d15
8000c248:	e9 a3 01 10 	st.b [%sp]65,%d3
8000c24c:	40 fc       	mov.aa %a12,%a15
8000c24e:	80 a2       	mov.d %d2,%sp
8000c250:	82 19       	mov %d9,1
8000c252:	82 0e       	mov %d14,0
8000c254:	1b 82 06 d0 	addi %d13,%d2,104
8000c258:	3c 02       	j 8000c25c <_svfprintf_r+0x968>
8000c25a:	82 0e       	mov %d14,0
8000c25c:	79 a7 01 10 	ld.b %d7,[%sp]65
8000c260:	80 df       	mov.d %d15,%a13
8000c262:	0b e9 a0 a1 	max %d10,%d9,%d14
8000c266:	80 d2       	mov.d %d2,%a13
8000c268:	16 02       	and %d15,2
8000c26a:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000c26e:	60 ff       	mov.a %a15,%d15
8000c270:	8a 2a       	cadd %d10,%d15,2
8000c272:	8f 42 08 f1 	and %d15,%d2,132
8000c276:	ee 48       	jnz %d15,8000c306 <_svfprintf_r+0xa12>
8000c278:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000c27c:	a2 a8       	sub %d8,%d10
8000c27e:	bf 18 44 00 	jlt %d8,1,8000c306 <_svfprintf_r+0xa12>
8000c282:	91 00 00 28 	movh.a %a2,32768
8000c286:	d9 22 cc d0 	lea %a2,[%a2]3916 <80000f4c <blanks.4035>>
8000c28a:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000f4c <blanks.4035>>
8000c28e:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000f4c <blanks.4035>>
8000c292:	8b 18 81 72 	ge %d7,%d8,17
8000c296:	f4 e2       	st.a [%a14],%a2
8000c298:	df 07 20 00 	jeq %d7,0,8000c2d8 <_svfprintf_r+0x9e4>
8000c29c:	1b 14 00 00 	addi %d0,%d4,1
8000c2a0:	3b 00 01 20 	mov %d2,16
8000c2a4:	1b 01 01 10 	addi %d1,%d1,16
8000c2a8:	59 e2 04 00 	st.w [%a14]4,%d2
8000c2ac:	59 a0 20 10 	st.w [%sp]96,%d0
8000c2b0:	59 a1 24 10 	st.w [%sp]100,%d1
8000c2b4:	8b 80 80 02 	ge %d0,%d0,8
8000c2b8:	d9 ee 08 00 	lea %a14,[%a14]8
8000c2bc:	76 0b       	jz %d0,8000c2d2 <_svfprintf_r+0x9de>
8000c2be:	60 c4       	mov.a %a4,%d12
8000c2c0:	60 b5       	mov.a %a5,%d11
8000c2c2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2c6:	6d 00 f4 0d 	call 8000deae <__ssprint_r>
8000c2ca:	df 02 e0 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c2ce:	d9 ae 10 20 	lea %a14,[%sp]144
8000c2d2:	1b 08 ff 8f 	addi %d8,%d8,-16
8000c2d6:	3c d6       	j 8000c282 <_svfprintf_r+0x98e>
8000c2d8:	c2 14       	add %d4,1
8000c2da:	42 81       	add %d1,%d8
8000c2dc:	59 e8 04 00 	st.w [%a14]4,%d8
8000c2e0:	59 a4 20 10 	st.w [%sp]96,%d4
8000c2e4:	59 a1 24 10 	st.w [%sp]100,%d1
8000c2e8:	8b 84 80 42 	ge %d4,%d4,8
8000c2ec:	d9 ee 08 00 	lea %a14,[%a14]8
8000c2f0:	76 4b       	jz %d4,8000c306 <_svfprintf_r+0xa12>
8000c2f2:	60 c4       	mov.a %a4,%d12
8000c2f4:	60 b5       	mov.a %a5,%d11
8000c2f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2fa:	6d 00 da 0d 	call 8000deae <__ssprint_r>
8000c2fe:	df 02 c6 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c302:	d9 ae 10 20 	lea %a14,[%sp]144
8000c306:	79 a4 01 10 	ld.b %d4,[%sp]65
8000c30a:	df 04 21 00 	jeq %d4,0,8000c34c <_svfprintf_r+0xa58>
8000c30e:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c312:	d9 a7 01 10 	lea %a7,[%sp]65
8000c316:	c2 14       	add %d4,1
8000c318:	59 a4 24 10 	st.w [%sp]100,%d4
8000c31c:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c320:	82 17       	mov %d7,1
8000c322:	c2 14       	add %d4,1
8000c324:	f4 e7       	st.a [%a14],%a7
8000c326:	59 e7 04 00 	st.w [%a14]4,%d7
8000c32a:	59 a4 20 10 	st.w [%sp]96,%d4
8000c32e:	8b 84 80 42 	ge %d4,%d4,8
8000c332:	d9 ee 08 00 	lea %a14,[%a14]8
8000c336:	76 4b       	jz %d4,8000c34c <_svfprintf_r+0xa58>
8000c338:	60 c4       	mov.a %a4,%d12
8000c33a:	60 b5       	mov.a %a5,%d11
8000c33c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c340:	6d 00 b7 0d 	call 8000deae <__ssprint_r>
8000c344:	df 02 a3 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c348:	d9 ae 10 20 	lea %a14,[%sp]144
8000c34c:	bd 0f 21 00 	jz.a %a15,8000c38e <_svfprintf_r+0xa9a>
8000c350:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c354:	d9 a7 02 10 	lea %a7,[%sp]66
8000c358:	c2 24       	add %d4,2
8000c35a:	59 a4 24 10 	st.w [%sp]100,%d4
8000c35e:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c362:	82 27       	mov %d7,2
8000c364:	c2 14       	add %d4,1
8000c366:	f4 e7       	st.a [%a14],%a7
8000c368:	59 e7 04 00 	st.w [%a14]4,%d7
8000c36c:	59 a4 20 10 	st.w [%sp]96,%d4
8000c370:	8b 84 80 42 	ge %d4,%d4,8
8000c374:	d9 ee 08 00 	lea %a14,[%a14]8
8000c378:	76 4b       	jz %d4,8000c38e <_svfprintf_r+0xa9a>
8000c37a:	60 c4       	mov.a %a4,%d12
8000c37c:	60 b5       	mov.a %a5,%d11
8000c37e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c382:	6d 00 96 0d 	call 8000deae <__ssprint_r>
8000c386:	df 02 82 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c38a:	d9 ae 10 20 	lea %a14,[%sp]144
8000c38e:	8b 0f 28 42 	ne %d4,%d15,128
8000c392:	df 04 48 80 	jne %d4,0,8000c422 <_svfprintf_r+0xb2e>
8000c396:	58 07       	ld.w %d15,[%sp]28
8000c398:	7b 00 00 28 	movh %d2,32768
8000c39c:	60 23       	mov.a %a3,%d2
8000c39e:	a2 af       	sub %d15,%d10
8000c3a0:	d9 3f fc c0 	lea %a15,[%a3]3900
8000c3a4:	bf 1f 3f 00 	jlt %d15,1,8000c422 <_svfprintf_r+0xb2e>
8000c3a8:	19 a7 24 10 	ld.w %d7,[%sp]100
8000c3ac:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c3b0:	8b 1f 81 82 	ge %d8,%d15,17
8000c3b4:	ec e0       	st.a [%a14]0,%a15
8000c3b6:	df 08 20 00 	jeq %d8,0,8000c3f6 <_svfprintf_r+0xb02>
8000c3ba:	1b 14 00 00 	addi %d0,%d4,1
8000c3be:	3b 00 01 20 	mov %d2,16
8000c3c2:	1b 07 01 10 	addi %d1,%d7,16
8000c3c6:	59 e2 04 00 	st.w [%a14]4,%d2
8000c3ca:	59 a0 20 10 	st.w [%sp]96,%d0
8000c3ce:	59 a1 24 10 	st.w [%sp]100,%d1
8000c3d2:	8b 80 80 02 	ge %d0,%d0,8
8000c3d6:	d9 ee 08 00 	lea %a14,[%a14]8
8000c3da:	76 0b       	jz %d0,8000c3f0 <_svfprintf_r+0xafc>
8000c3dc:	60 c4       	mov.a %a4,%d12
8000c3de:	60 b5       	mov.a %a5,%d11
8000c3e0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3e4:	6d 00 65 0d 	call 8000deae <__ssprint_r>
8000c3e8:	df 02 51 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c3ec:	d9 ae 10 20 	lea %a14,[%sp]144
8000c3f0:	1b 0f ff ff 	addi %d15,%d15,-16
8000c3f4:	3c da       	j 8000c3a8 <_svfprintf_r+0xab4>
8000c3f6:	c2 14       	add %d4,1
8000c3f8:	42 f7       	add %d7,%d15
8000c3fa:	6c e1       	st.w [%a14]4,%d15
8000c3fc:	59 a4 20 10 	st.w [%sp]96,%d4
8000c400:	59 a7 24 10 	st.w [%sp]100,%d7
8000c404:	8b 84 80 42 	ge %d4,%d4,8
8000c408:	d9 ee 08 00 	lea %a14,[%a14]8
8000c40c:	76 4b       	jz %d4,8000c422 <_svfprintf_r+0xb2e>
8000c40e:	60 c4       	mov.a %a4,%d12
8000c410:	60 b5       	mov.a %a5,%d11
8000c412:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c416:	6d 00 4c 0d 	call 8000deae <__ssprint_r>
8000c41a:	df 02 38 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c41e:	d9 ae 10 20 	lea %a14,[%sp]144
8000c422:	7b 00 00 88 	movh %d8,32768
8000c426:	a2 9e       	sub %d14,%d9
8000c428:	1b c8 f3 80 	addi %d8,%d8,3900
8000c42c:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000c430:	bf 1e 3c 00 	jlt %d14,1,8000c4a8 <_svfprintf_r+0xbb4>
8000c434:	19 a6 24 10 	ld.w %d6,[%sp]100
8000c438:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c43c:	8b 1e 81 02 	ge %d0,%d14,17
8000c440:	74 e8       	st.w [%a14],%d8
8000c442:	df 00 1c 00 	jeq %d0,0,8000c47a <_svfprintf_r+0xb86>
8000c446:	c2 14       	add %d4,1
8000c448:	1b 06 01 00 	addi %d0,%d6,16
8000c44c:	ec e1       	st.a [%a14]4,%a15
8000c44e:	59 a4 20 10 	st.w [%sp]96,%d4
8000c452:	59 a0 24 10 	st.w [%sp]100,%d0
8000c456:	8b 84 80 42 	ge %d4,%d4,8
8000c45a:	d9 ee 08 00 	lea %a14,[%a14]8
8000c45e:	76 4b       	jz %d4,8000c474 <_svfprintf_r+0xb80>
8000c460:	60 c4       	mov.a %a4,%d12
8000c462:	60 b5       	mov.a %a5,%d11
8000c464:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c468:	6d 00 23 0d 	call 8000deae <__ssprint_r>
8000c46c:	df 02 0f 83 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c470:	d9 ae 10 20 	lea %a14,[%sp]144
8000c474:	1b 0e ff ef 	addi %d14,%d14,-16
8000c478:	3c de       	j 8000c434 <_svfprintf_r+0xb40>
8000c47a:	c2 14       	add %d4,1
8000c47c:	42 e6       	add %d6,%d14
8000c47e:	59 ee 04 00 	st.w [%a14]4,%d14
8000c482:	59 a4 20 10 	st.w [%sp]96,%d4
8000c486:	59 a6 24 10 	st.w [%sp]100,%d6
8000c48a:	8b 84 80 42 	ge %d4,%d4,8
8000c48e:	d9 ee 08 00 	lea %a14,[%a14]8
8000c492:	76 4b       	jz %d4,8000c4a8 <_svfprintf_r+0xbb4>
8000c494:	60 c4       	mov.a %a4,%d12
8000c496:	60 b5       	mov.a %a5,%d11
8000c498:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c49c:	6d 00 09 0d 	call 8000deae <__ssprint_r>
8000c4a0:	df 02 f5 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c4a4:	d9 ae 10 20 	lea %a14,[%sp]144
8000c4a8:	80 df       	mov.d %d15,%a13
8000c4aa:	19 ae 24 10 	ld.w %d14,[%sp]100
8000c4ae:	19 a8 20 10 	ld.w %d8,[%sp]96
8000c4b2:	6f 8f 1d 80 	jnz.t %d15,8,8000c4ec <_svfprintf_r+0xbf8>
8000c4b6:	c2 18       	add %d8,1
8000c4b8:	59 e9 04 00 	st.w [%a14]4,%d9
8000c4bc:	42 e9       	add %d9,%d14
8000c4be:	59 a8 20 10 	st.w [%sp]96,%d8
8000c4c2:	74 ed       	st.w [%a14],%d13
8000c4c4:	59 a9 24 10 	st.w [%sp]100,%d9
8000c4c8:	8b 88 80 82 	ge %d8,%d8,8
8000c4cc:	d9 ef 08 00 	lea %a15,[%a14]8
8000c4d0:	df 08 79 02 	jeq %d8,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c4d4:	60 c4       	mov.a %a4,%d12
8000c4d6:	60 b5       	mov.a %a5,%d11
8000c4d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c4dc:	6d 00 e9 0c 	call 8000deae <__ssprint_r>
8000c4e0:	df 02 d5 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c4e4:	d9 af 10 20 	lea %a15,[%sp]144
8000c4e8:	1d 00 6d 02 	j 8000c9c2 <_svfprintf_r+0x10ce>
8000c4ec:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c4f0:	8b 62 46 f2 	lt %d15,%d2,102
8000c4f4:	df 0f be 81 	jne %d15,0,8000c870 <_svfprintf_r+0xf7c>
8000c4f8:	d2 06       	mov %e6,0
8000c4fa:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c4fe:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c502:	6d 00 db 0f 	call 8000e4b8 <__eqdf2>
8000c506:	df 02 78 80 	jne %d2,0,8000c5f6 <_svfprintf_r+0xd02>
8000c50a:	7b 00 00 38 	movh %d3,32768
8000c50e:	1b a3 f3 30 	addi %d3,%d3,3898
8000c512:	c2 18       	add %d8,1
8000c514:	74 e3       	st.w [%a14],%d3
8000c516:	1b 1e 00 90 	addi %d9,%d14,1
8000c51a:	82 13       	mov %d3,1
8000c51c:	59 a8 20 10 	st.w [%sp]96,%d8
8000c520:	59 e3 04 00 	st.w [%a14]4,%d3
8000c524:	59 a9 24 10 	st.w [%sp]100,%d9
8000c528:	8b 88 80 82 	ge %d8,%d8,8
8000c52c:	d9 ef 08 00 	lea %a15,[%a14]8
8000c530:	76 8b       	jz %d8,8000c546 <_svfprintf_r+0xc52>
8000c532:	60 c4       	mov.a %a4,%d12
8000c534:	60 b5       	mov.a %a5,%d11
8000c536:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c53a:	6d 00 ba 0c 	call 8000deae <__ssprint_r>
8000c53e:	df 02 a6 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c542:	d9 af 10 20 	lea %a15,[%sp]144
8000c546:	58 11       	ld.w %d15,[%sp]68
8000c548:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c54c:	3f 2f 05 00 	jlt %d15,%d2,8000c556 <_svfprintf_r+0xc62>
8000c550:	80 df       	mov.d %d15,%a13
8000c552:	6f 0f 38 02 	jz.t %d15,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c556:	58 08       	ld.w %d15,[%sp]32
8000c558:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c55c:	68 1f       	st.w [%a15]4,%d15
8000c55e:	58 19       	ld.w %d15,[%sp]100
8000c560:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c564:	42 2f       	add %d15,%d2
8000c566:	78 19       	st.w [%sp]100,%d15
8000c568:	58 18       	ld.w %d15,[%sp]96
8000c56a:	e8 03       	st.a [%a15]0,%a3
8000c56c:	c2 1f       	add %d15,1
8000c56e:	78 18       	st.w [%sp]96,%d15
8000c570:	8b 8f 80 f2 	ge %d15,%d15,8
8000c574:	d9 ff 08 00 	lea %a15,[%a15]8
8000c578:	6e 0b       	jz %d15,8000c58e <_svfprintf_r+0xc9a>
8000c57a:	60 c4       	mov.a %a4,%d12
8000c57c:	60 b5       	mov.a %a5,%d11
8000c57e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c582:	6d 00 96 0c 	call 8000deae <__ssprint_r>
8000c586:	df 02 82 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c58a:	d9 af 10 20 	lea %a15,[%sp]144
8000c58e:	58 05       	ld.w %d15,[%sp]20
8000c590:	7b 00 00 88 	movh %d8,32768
8000c594:	c2 ff       	add %d15,-1
8000c596:	1b c8 f3 80 	addi %d8,%d8,3900
8000c59a:	3b 00 01 90 	mov %d9,16
8000c59e:	bf 1f 12 02 	jlt %d15,1,8000c9c2 <_svfprintf_r+0x10ce>
8000c5a2:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c5a6:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c5aa:	8b 1f 81 42 	ge %d4,%d15,17
8000c5ae:	68 08       	st.w [%a15]0,%d8
8000c5b0:	df 04 1c 00 	jeq %d4,0,8000c5e8 <_svfprintf_r+0xcf4>
8000c5b4:	c2 13       	add %d3,1
8000c5b6:	1b 05 01 40 	addi %d4,%d5,16
8000c5ba:	68 19       	st.w [%a15]4,%d9
8000c5bc:	59 a3 20 10 	st.w [%sp]96,%d3
8000c5c0:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5c4:	8b 83 80 32 	ge %d3,%d3,8
8000c5c8:	d9 ff 08 00 	lea %a15,[%a15]8
8000c5cc:	76 3b       	jz %d3,8000c5e2 <_svfprintf_r+0xcee>
8000c5ce:	60 c4       	mov.a %a4,%d12
8000c5d0:	60 b5       	mov.a %a5,%d11
8000c5d2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c5d6:	6d 00 6c 0c 	call 8000deae <__ssprint_r>
8000c5da:	df 02 58 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c5de:	d9 af 10 20 	lea %a15,[%sp]144
8000c5e2:	1b 0f ff ff 	addi %d15,%d15,-16
8000c5e6:	3c de       	j 8000c5a2 <_svfprintf_r+0xcae>
8000c5e8:	12 54       	add %d4,%d15,%d5
8000c5ea:	68 1f       	st.w [%a15]4,%d15
8000c5ec:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5f0:	9a 13       	add %d15,%d3,1
8000c5f2:	1d 00 e1 01 	j 8000c9b4 <_svfprintf_r+0x10c0>
8000c5f6:	19 a3 04 10 	ld.w %d3,[%sp]68
8000c5fa:	ff 13 8e 00 	jge %d3,1,8000c716 <_svfprintf_r+0xe22>
8000c5fe:	7b 00 00 38 	movh %d3,32768
8000c602:	1b a3 f3 30 	addi %d3,%d3,3898
8000c606:	c2 18       	add %d8,1
8000c608:	74 e3       	st.w [%a14],%d3
8000c60a:	1b 1e 00 90 	addi %d9,%d14,1
8000c60e:	82 13       	mov %d3,1
8000c610:	59 a8 20 10 	st.w [%sp]96,%d8
8000c614:	59 e3 04 00 	st.w [%a14]4,%d3
8000c618:	59 a9 24 10 	st.w [%sp]100,%d9
8000c61c:	8b 88 80 82 	ge %d8,%d8,8
8000c620:	d9 ef 08 00 	lea %a15,[%a14]8
8000c624:	76 8b       	jz %d8,8000c63a <_svfprintf_r+0xd46>
8000c626:	60 c4       	mov.a %a4,%d12
8000c628:	60 b5       	mov.a %a5,%d11
8000c62a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c62e:	6d 00 40 0c 	call 8000deae <__ssprint_r>
8000c632:	df 02 2c 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c636:	d9 af 10 20 	lea %a15,[%sp]144
8000c63a:	58 11       	ld.w %d15,[%sp]68
8000c63c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c640:	a6 2f       	or %d15,%d2
8000c642:	ee 04       	jnz %d15,8000c64a <_svfprintf_r+0xd56>
8000c644:	80 df       	mov.d %d15,%a13
8000c646:	6f 0f be 01 	jz.t %d15,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c64a:	58 08       	ld.w %d15,[%sp]32
8000c64c:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c650:	68 1f       	st.w [%a15]4,%d15
8000c652:	58 19       	ld.w %d15,[%sp]100
8000c654:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c658:	42 2f       	add %d15,%d2
8000c65a:	78 19       	st.w [%sp]100,%d15
8000c65c:	58 18       	ld.w %d15,[%sp]96
8000c65e:	e8 03       	st.a [%a15]0,%a3
8000c660:	c2 1f       	add %d15,1
8000c662:	78 18       	st.w [%sp]96,%d15
8000c664:	8b 8f 80 f2 	ge %d15,%d15,8
8000c668:	d9 ff 08 00 	lea %a15,[%a15]8
8000c66c:	6e 0b       	jz %d15,8000c682 <_svfprintf_r+0xd8e>
8000c66e:	60 c4       	mov.a %a4,%d12
8000c670:	60 b5       	mov.a %a5,%d11
8000c672:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c676:	6d 00 1c 0c 	call 8000deae <__ssprint_r>
8000c67a:	df 02 08 82 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c67e:	d9 af 10 20 	lea %a15,[%sp]144
8000c682:	58 11       	ld.w %d15,[%sp]68
8000c684:	7b 00 00 88 	movh %d8,32768
8000c688:	32 5f       	rsub %d15
8000c68a:	1b c8 f3 80 	addi %d8,%d8,3900
8000c68e:	3b 00 01 90 	mov %d9,16
8000c692:	bf 1f 3a 00 	jlt %d15,1,8000c706 <_svfprintf_r+0xe12>
8000c696:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c69a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c69e:	8b 1f 81 42 	ge %d4,%d15,17
8000c6a2:	68 08       	st.w [%a15]0,%d8
8000c6a4:	df 04 1c 00 	jeq %d4,0,8000c6dc <_svfprintf_r+0xde8>
8000c6a8:	c2 13       	add %d3,1
8000c6aa:	1b 05 01 40 	addi %d4,%d5,16
8000c6ae:	68 19       	st.w [%a15]4,%d9
8000c6b0:	59 a3 20 10 	st.w [%sp]96,%d3
8000c6b4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6b8:	8b 83 80 32 	ge %d3,%d3,8
8000c6bc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6c0:	76 3b       	jz %d3,8000c6d6 <_svfprintf_r+0xde2>
8000c6c2:	60 c4       	mov.a %a4,%d12
8000c6c4:	60 b5       	mov.a %a5,%d11
8000c6c6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6ca:	6d 00 f2 0b 	call 8000deae <__ssprint_r>
8000c6ce:	df 02 de 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c6d2:	d9 af 10 20 	lea %a15,[%sp]144
8000c6d6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c6da:	3c de       	j 8000c696 <_svfprintf_r+0xda2>
8000c6dc:	68 1f       	st.w [%a15]4,%d15
8000c6de:	12 54       	add %d4,%d15,%d5
8000c6e0:	9a 13       	add %d15,%d3,1
8000c6e2:	78 18       	st.w [%sp]96,%d15
8000c6e4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6e8:	8b 8f 80 f2 	ge %d15,%d15,8
8000c6ec:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6f0:	6e 0b       	jz %d15,8000c706 <_svfprintf_r+0xe12>
8000c6f2:	60 c4       	mov.a %a4,%d12
8000c6f4:	60 b5       	mov.a %a5,%d11
8000c6f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6fa:	6d 00 da 0b 	call 8000deae <__ssprint_r>
8000c6fe:	df 02 c6 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c702:	d9 af 10 20 	lea %a15,[%sp]144
8000c706:	58 05       	ld.w %d15,[%sp]20
8000c708:	68 0d       	st.w [%a15]0,%d13
8000c70a:	68 1f       	st.w [%a15]4,%d15
8000c70c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c710:	58 19       	ld.w %d15,[%sp]100
8000c712:	1d 00 4d 01 	j 8000c9ac <_svfprintf_r+0x10b8>
8000c716:	58 05       	ld.w %d15,[%sp]20
8000c718:	74 ed       	st.w [%a14],%d13
8000c71a:	3f f3 6a 00 	jlt %d3,%d15,8000c7ee <_svfprintf_r+0xefa>
8000c71e:	02 f9       	mov %d9,%d15
8000c720:	c2 18       	add %d8,1
8000c722:	42 e9       	add %d9,%d14
8000c724:	59 a8 20 10 	st.w [%sp]96,%d8
8000c728:	6c e1       	st.w [%a14]4,%d15
8000c72a:	59 a9 24 10 	st.w [%sp]100,%d9
8000c72e:	8b 88 80 82 	ge %d8,%d8,8
8000c732:	d9 ef 08 00 	lea %a15,[%a14]8
8000c736:	76 8b       	jz %d8,8000c74c <_svfprintf_r+0xe58>
8000c738:	60 c4       	mov.a %a4,%d12
8000c73a:	60 b5       	mov.a %a5,%d11
8000c73c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c740:	6d 00 b7 0b 	call 8000deae <__ssprint_r>
8000c744:	df 02 a3 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c748:	d9 af 10 20 	lea %a15,[%sp]144
8000c74c:	58 11       	ld.w %d15,[%sp]68
8000c74e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c752:	7b 00 00 88 	movh %d8,32768
8000c756:	a2 2f       	sub %d15,%d2
8000c758:	1b c8 f3 80 	addi %d8,%d8,3900
8000c75c:	3b 00 01 90 	mov %d9,16
8000c760:	bf 1f 3a 00 	jlt %d15,1,8000c7d4 <_svfprintf_r+0xee0>
8000c764:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c768:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c76c:	8b 1f 81 42 	ge %d4,%d15,17
8000c770:	68 08       	st.w [%a15]0,%d8
8000c772:	df 04 1c 00 	jeq %d4,0,8000c7aa <_svfprintf_r+0xeb6>
8000c776:	c2 13       	add %d3,1
8000c778:	1b 05 01 40 	addi %d4,%d5,16
8000c77c:	68 19       	st.w [%a15]4,%d9
8000c77e:	59 a3 20 10 	st.w [%sp]96,%d3
8000c782:	59 a4 24 10 	st.w [%sp]100,%d4
8000c786:	8b 83 80 32 	ge %d3,%d3,8
8000c78a:	d9 ff 08 00 	lea %a15,[%a15]8
8000c78e:	76 3b       	jz %d3,8000c7a4 <_svfprintf_r+0xeb0>
8000c790:	60 c4       	mov.a %a4,%d12
8000c792:	60 b5       	mov.a %a5,%d11
8000c794:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c798:	6d 00 8b 0b 	call 8000deae <__ssprint_r>
8000c79c:	df 02 77 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c7a0:	d9 af 10 20 	lea %a15,[%sp]144
8000c7a4:	1b 0f ff ff 	addi %d15,%d15,-16
8000c7a8:	3c de       	j 8000c764 <_svfprintf_r+0xe70>
8000c7aa:	68 1f       	st.w [%a15]4,%d15
8000c7ac:	12 54       	add %d4,%d15,%d5
8000c7ae:	9a 13       	add %d15,%d3,1
8000c7b0:	78 18       	st.w [%sp]96,%d15
8000c7b2:	59 a4 24 10 	st.w [%sp]100,%d4
8000c7b6:	8b 8f 80 f2 	ge %d15,%d15,8
8000c7ba:	d9 ff 08 00 	lea %a15,[%a15]8
8000c7be:	6e 0b       	jz %d15,8000c7d4 <_svfprintf_r+0xee0>
8000c7c0:	60 c4       	mov.a %a4,%d12
8000c7c2:	60 b5       	mov.a %a5,%d11
8000c7c4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7c8:	6d 00 73 0b 	call 8000deae <__ssprint_r>
8000c7cc:	df 02 5f 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c7d0:	d9 af 10 20 	lea %a15,[%sp]144
8000c7d4:	80 df       	mov.d %d15,%a13
8000c7d6:	6f 0f f6 00 	jz.t %d15,0,8000c9c2 <_svfprintf_r+0x10ce>
8000c7da:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c7de:	58 08       	ld.w %d15,[%sp]32
8000c7e0:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c7e4:	68 1f       	st.w [%a15]4,%d15
8000c7e6:	e8 03       	st.a [%a15]0,%a3
8000c7e8:	58 19       	ld.w %d15,[%sp]100
8000c7ea:	1d 00 e1 00 	j 8000c9ac <_svfprintf_r+0x10b8>
8000c7ee:	c2 18       	add %d8,1
8000c7f0:	59 e3 04 00 	st.w [%a14]4,%d3
8000c7f4:	42 e3       	add %d3,%d14
8000c7f6:	59 a8 20 10 	st.w [%sp]96,%d8
8000c7fa:	59 a3 24 10 	st.w [%sp]100,%d3
8000c7fe:	8b 88 80 82 	ge %d8,%d8,8
8000c802:	d9 ef 08 00 	lea %a15,[%a14]8
8000c806:	76 8b       	jz %d8,8000c81c <_svfprintf_r+0xf28>
8000c808:	60 c4       	mov.a %a4,%d12
8000c80a:	60 b5       	mov.a %a5,%d11
8000c80c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c810:	6d 00 4f 0b 	call 8000deae <__ssprint_r>
8000c814:	df 02 3b 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c818:	d9 af 10 20 	lea %a15,[%sp]144
8000c81c:	58 08       	ld.w %d15,[%sp]32
8000c81e:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c822:	68 1f       	st.w [%a15]4,%d15
8000c824:	58 19       	ld.w %d15,[%sp]100
8000c826:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c82a:	42 2f       	add %d15,%d2
8000c82c:	78 19       	st.w [%sp]100,%d15
8000c82e:	58 18       	ld.w %d15,[%sp]96
8000c830:	99 ae 04 10 	ld.a %a14,[%sp]68
8000c834:	c2 1f       	add %d15,1
8000c836:	60 d2       	mov.a %a2,%d13
8000c838:	e8 03       	st.a [%a15]0,%a3
8000c83a:	78 18       	st.w [%sp]96,%d15
8000c83c:	8b 8f 80 f2 	ge %d15,%d15,8
8000c840:	30 2e       	add.a %a14,%a2
8000c842:	d9 ff 08 00 	lea %a15,[%a15]8
8000c846:	6e 0b       	jz %d15,8000c85c <_svfprintf_r+0xf68>
8000c848:	60 c4       	mov.a %a4,%d12
8000c84a:	60 b5       	mov.a %a5,%d11
8000c84c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c850:	6d 00 2f 0b 	call 8000deae <__ssprint_r>
8000c854:	df 02 1b 81 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c858:	d9 af 10 20 	lea %a15,[%sp]144
8000c85c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c860:	58 11       	ld.w %d15,[%sp]68
8000c862:	e8 0e       	st.a [%a15]0,%a14
8000c864:	5a f2       	sub %d15,%d2,%d15
8000c866:	68 1f       	st.w [%a15]4,%d15
8000c868:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c86c:	1d 00 a0 00 	j 8000c9ac <_svfprintf_r+0x10b8>
8000c870:	c2 18       	add %d8,1
8000c872:	82 13       	mov %d3,1
8000c874:	1b 1e 00 90 	addi %d9,%d14,1
8000c878:	58 05       	ld.w %d15,[%sp]20
8000c87a:	59 a8 20 10 	st.w [%sp]96,%d8
8000c87e:	74 ed       	st.w [%a14],%d13
8000c880:	59 e3 04 00 	st.w [%a14]4,%d3
8000c884:	59 a9 24 10 	st.w [%sp]100,%d9
8000c888:	8b 88 80 82 	ge %d8,%d8,8
8000c88c:	ff 2f 05 00 	jge %d15,2,8000c896 <_svfprintf_r+0xfa2>
8000c890:	80 d2       	mov.d %d2,%a13
8000c892:	6f 02 81 00 	jz.t %d2,0,8000c994 <_svfprintf_r+0x10a0>
8000c896:	d9 ef 08 00 	lea %a15,[%a14]8
8000c89a:	76 8b       	jz %d8,8000c8b0 <_svfprintf_r+0xfbc>
8000c89c:	60 c4       	mov.a %a4,%d12
8000c89e:	60 b5       	mov.a %a5,%d11
8000c8a0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c8a4:	6d 00 05 0b 	call 8000deae <__ssprint_r>
8000c8a8:	df 02 f1 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c8ac:	d9 af 10 20 	lea %a15,[%sp]144
8000c8b0:	58 08       	ld.w %d15,[%sp]32
8000c8b2:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c8b6:	68 1f       	st.w [%a15]4,%d15
8000c8b8:	58 19       	ld.w %d15,[%sp]100
8000c8ba:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c8be:	42 2f       	add %d15,%d2
8000c8c0:	78 19       	st.w [%sp]100,%d15
8000c8c2:	58 18       	ld.w %d15,[%sp]96
8000c8c4:	e8 03       	st.a [%a15]0,%a3
8000c8c6:	c2 1f       	add %d15,1
8000c8c8:	78 18       	st.w [%sp]96,%d15
8000c8ca:	8b 8f 80 f2 	ge %d15,%d15,8
8000c8ce:	d9 ff 08 00 	lea %a15,[%a15]8
8000c8d2:	6e 0b       	jz %d15,8000c8e8 <_svfprintf_r+0xff4>
8000c8d4:	60 c4       	mov.a %a4,%d12
8000c8d6:	60 b5       	mov.a %a5,%d11
8000c8d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c8dc:	6d 00 e9 0a 	call 8000deae <__ssprint_r>
8000c8e0:	df 02 d5 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c8e4:	d9 af 10 20 	lea %a15,[%sp]144
8000c8e8:	d2 06       	mov %e6,0
8000c8ea:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c8ee:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c8f2:	6d 00 03 0e 	call 8000e4f8 <__nedf2>
8000c8f6:	58 05       	ld.w %d15,[%sp]20
8000c8f8:	c2 ff       	add %d15,-1
8000c8fa:	76 2c       	jz %d2,8000c912 <_svfprintf_r+0x101e>
8000c8fc:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c900:	60 de       	mov.a %a14,%d13
8000c902:	68 1f       	st.w [%a15]4,%d15
8000c904:	42 2f       	add %d15,%d2
8000c906:	78 19       	st.w [%sp]100,%d15
8000c908:	58 18       	ld.w %d15,[%sp]96
8000c90a:	b0 1e       	add.a %a14,1
8000c90c:	e8 0e       	st.a [%a15]0,%a14
8000c90e:	c2 1f       	add %d15,1
8000c910:	3c 31       	j 8000c972 <_svfprintf_r+0x107e>
8000c912:	7b 00 00 88 	movh %d8,32768
8000c916:	1b c8 f3 80 	addi %d8,%d8,3900
8000c91a:	3b 00 01 90 	mov %d9,16
8000c91e:	bf 1f 3f 00 	jlt %d15,1,8000c99c <_svfprintf_r+0x10a8>
8000c922:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c926:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c92a:	8b 1f 81 42 	ge %d4,%d15,17
8000c92e:	68 08       	st.w [%a15]0,%d8
8000c930:	df 04 1c 00 	jeq %d4,0,8000c968 <_svfprintf_r+0x1074>
8000c934:	c2 13       	add %d3,1
8000c936:	1b 05 01 40 	addi %d4,%d5,16
8000c93a:	68 19       	st.w [%a15]4,%d9
8000c93c:	59 a3 20 10 	st.w [%sp]96,%d3
8000c940:	59 a4 24 10 	st.w [%sp]100,%d4
8000c944:	8b 83 80 32 	ge %d3,%d3,8
8000c948:	d9 ff 08 00 	lea %a15,[%a15]8
8000c94c:	76 3b       	jz %d3,8000c962 <_svfprintf_r+0x106e>
8000c94e:	60 c4       	mov.a %a4,%d12
8000c950:	60 b5       	mov.a %a5,%d11
8000c952:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c956:	6d 00 ac 0a 	call 8000deae <__ssprint_r>
8000c95a:	df 02 98 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c95e:	d9 af 10 20 	lea %a15,[%sp]144
8000c962:	1b 0f ff ff 	addi %d15,%d15,-16
8000c966:	3c de       	j 8000c922 <_svfprintf_r+0x102e>
8000c968:	12 54       	add %d4,%d15,%d5
8000c96a:	68 1f       	st.w [%a15]4,%d15
8000c96c:	59 a4 24 10 	st.w [%sp]100,%d4
8000c970:	9a 13       	add %d15,%d3,1
8000c972:	78 18       	st.w [%sp]96,%d15
8000c974:	8b 8f 80 f2 	ge %d15,%d15,8
8000c978:	d9 ff 08 00 	lea %a15,[%a15]8
8000c97c:	6e 10       	jz %d15,8000c99c <_svfprintf_r+0x10a8>
8000c97e:	60 c4       	mov.a %a4,%d12
8000c980:	60 b5       	mov.a %a5,%d11
8000c982:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c986:	6d 00 94 0a 	call 8000deae <__ssprint_r>
8000c98a:	df 02 80 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000c98e:	d9 af 10 20 	lea %a15,[%sp]144
8000c992:	3c 05       	j 8000c99c <_svfprintf_r+0x10a8>
8000c994:	df 08 f5 ff 	jne %d8,0,8000c97e <_svfprintf_r+0x108a>
8000c998:	d9 ef 08 00 	lea %a15,[%a14]8
8000c99c:	58 0e       	ld.w %d15,[%sp]56
8000c99e:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c9a2:	68 1f       	st.w [%a15]4,%d15
8000c9a4:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c9a8:	58 19       	ld.w %d15,[%sp]100
8000c9aa:	e8 03       	st.a [%a15]0,%a3
8000c9ac:	42 2f       	add %d15,%d2
8000c9ae:	78 19       	st.w [%sp]100,%d15
8000c9b0:	58 18       	ld.w %d15,[%sp]96
8000c9b2:	c2 1f       	add %d15,1
8000c9b4:	78 18       	st.w [%sp]96,%d15
8000c9b6:	8b 8f 80 f2 	ge %d15,%d15,8
8000c9ba:	df 0f 8d fd 	jne %d15,0,8000c4d4 <_svfprintf_r+0xbe0>
8000c9be:	d9 ff 08 00 	lea %a15,[%a15]8
8000c9c2:	80 df       	mov.d %d15,%a13
8000c9c4:	ae 2d       	jnz.t %d15,2,8000c9de <_svfprintf_r+0x10ea>
8000c9c6:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c9ca:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c9ce:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c9d2:	42 f2       	add %d2,%d15
8000c9d4:	58 19       	ld.w %d15,[%sp]100
8000c9d6:	59 a2 28 00 	st.w [%sp]40,%d2
8000c9da:	6e 49       	jz %d15,8000ca6c <_svfprintf_r+0x1178>
8000c9dc:	3c 40       	j 8000ca5c <_svfprintf_r+0x1168>
8000c9de:	58 07       	ld.w %d15,[%sp]28
8000c9e0:	3b 00 01 80 	mov %d8,16
8000c9e4:	a2 af       	sub %d15,%d10
8000c9e6:	bf 1f f0 7f 	jlt %d15,1,8000c9c6 <_svfprintf_r+0x10d2>
8000c9ea:	91 00 00 28 	movh.a %a2,32768
8000c9ee:	d9 22 cc d0 	lea %a2,[%a2]3916 <80000f4c <blanks.4035>>
8000c9f2:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000f4c <blanks.4035>>
8000c9f6:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000f4c <blanks.4035>>
8000c9fa:	8b 1f 81 42 	ge %d4,%d15,17
8000c9fe:	e8 02       	st.a [%a15]0,%a2
8000ca00:	df 04 1c 00 	jeq %d4,0,8000ca38 <_svfprintf_r+0x1144>
8000ca04:	c2 13       	add %d3,1
8000ca06:	1b 05 01 40 	addi %d4,%d5,16
8000ca0a:	68 18       	st.w [%a15]4,%d8
8000ca0c:	59 a3 20 10 	st.w [%sp]96,%d3
8000ca10:	59 a4 24 10 	st.w [%sp]100,%d4
8000ca14:	8b 83 80 32 	ge %d3,%d3,8
8000ca18:	d9 ff 08 00 	lea %a15,[%a15]8
8000ca1c:	76 3b       	jz %d3,8000ca32 <_svfprintf_r+0x113e>
8000ca1e:	60 c4       	mov.a %a4,%d12
8000ca20:	60 b5       	mov.a %a5,%d11
8000ca22:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca26:	6d 00 44 0a 	call 8000deae <__ssprint_r>
8000ca2a:	df 02 30 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000ca2e:	d9 af 10 20 	lea %a15,[%sp]144
8000ca32:	1b 0f ff ff 	addi %d15,%d15,-16
8000ca36:	3c da       	j 8000c9ea <_svfprintf_r+0x10f6>
8000ca38:	12 54       	add %d4,%d15,%d5
8000ca3a:	68 1f       	st.w [%a15]4,%d15
8000ca3c:	9a 13       	add %d15,%d3,1
8000ca3e:	78 18       	st.w [%sp]96,%d15
8000ca40:	59 a4 24 10 	st.w [%sp]100,%d4
8000ca44:	8b 8f 40 f2 	lt %d15,%d15,8
8000ca48:	ee bf       	jnz %d15,8000c9c6 <_svfprintf_r+0x10d2>
8000ca4a:	60 c4       	mov.a %a4,%d12
8000ca4c:	60 b5       	mov.a %a5,%d11
8000ca4e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca52:	6d 00 2e 0a 	call 8000deae <__ssprint_r>
8000ca56:	df 02 b8 7f 	jeq %d2,0,8000c9c6 <_svfprintf_r+0x10d2>
8000ca5a:	3c 18       	j 8000ca8a <_svfprintf_r+0x1196>
8000ca5c:	60 c4       	mov.a %a4,%d12
8000ca5e:	60 b5       	mov.a %a5,%d11
8000ca60:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca64:	6d 00 25 0a 	call 8000deae <__ssprint_r>
8000ca68:	df 02 11 80 	jne %d2,0,8000ca8a <_svfprintf_r+0x1196>
8000ca6c:	82 0f       	mov %d15,0
8000ca6e:	78 18       	st.w [%sp]96,%d15
8000ca70:	40 cf       	mov.aa %a15,%a12
8000ca72:	d9 ae 10 20 	lea %a14,[%sp]144
8000ca76:	1d ff 77 f7 	j 8000b964 <_svfprintf_r+0x70>
8000ca7a:	58 19       	ld.w %d15,[%sp]100
8000ca7c:	6e 07       	jz %d15,8000ca8a <_svfprintf_r+0x1196>
8000ca7e:	60 c4       	mov.a %a4,%d12
8000ca80:	60 b5       	mov.a %a5,%d11
8000ca82:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ca86:	6d 00 14 0a 	call 8000deae <__ssprint_r>
8000ca8a:	60 b3       	mov.a %a3,%d11
8000ca8c:	19 a2 28 00 	ld.w %d2,[%sp]40
8000ca90:	8c 36       	ld.h %d15,[%a3]12
8000ca92:	16 40       	and %d15,64
8000ca94:	aa f2       	cmov %d2,%d15,-1
8000ca96:	00 90       	ret 

8000ca98 <quorem>:
8000ca98:	19 58 10 00 	ld.w %d8,[%a5]16
8000ca9c:	4c 44       	ld.w %d15,[%a4]16
8000ca9e:	82 02       	mov %d2,0
8000caa0:	3f 8f 88 00 	jlt %d15,%d8,8000cbb0 <quorem+0x118>
8000caa4:	c2 f8       	add %d8,-1
8000caa6:	80 4f       	mov.d %d15,%a4
8000caa8:	8f 28 00 20 	sh %d2,%d8,2
8000caac:	60 2f       	mov.a %a15,%d2
8000caae:	1b 4f 01 90 	addi %d9,%d15,20
8000cab2:	d9 5c 14 00 	lea %a12,[%a5]20
8000cab6:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000caba:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000cabe:	54 dc       	ld.w %d12,[%a13]
8000cac0:	4c f0       	ld.w %d15,[%a15]0
8000cac2:	c2 1c       	add %d12,1
8000cac4:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000cac8:	02 ca       	mov %d10,%d12
8000caca:	df 0c 3d 00 	jeq %d12,0,8000cb44 <quorem+0xac>
8000cace:	60 96       	mov.a %a6,%d9
8000cad0:	40 c2       	mov.aa %a2,%a12
8000cad2:	82 05       	mov %d5,0
8000cad4:	82 06       	mov %d6,0
8000cad6:	54 22       	ld.w %d2,[%a2]
8000cad8:	40 63       	mov.aa %a3,%a6
8000cada:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000cade:	8f 02 1f 20 	sh %d2,%d2,-16
8000cae2:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000cae6:	b0 42       	add.a %a2,4
8000cae8:	8f 03 1f 40 	sh %d4,%d3,-16
8000caec:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000caf0:	44 34       	ld.w %d4,[%a3+]
8000caf2:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000caf6:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000cafa:	8f 02 1f 50 	sh %d5,%d2,-16
8000cafe:	42 f6       	add %d6,%d15
8000cb00:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000cb04:	0b 36 80 30 	sub %d3,%d6,%d3
8000cb08:	8f 04 1f 40 	sh %d4,%d4,-16
8000cb0c:	8f 03 3f f0 	sha %d15,%d3,-16
8000cb10:	0b 24 80 20 	sub %d2,%d4,%d2
8000cb14:	42 f2       	add %d2,%d15
8000cb16:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000cb1a:	8f 02 3f 60 	sha %d6,%d2,-16
8000cb1e:	80 2f       	mov.d %d15,%a2
8000cb20:	80 d2       	mov.d %d2,%a13
8000cb22:	74 63       	st.w [%a6],%d3
8000cb24:	40 36       	mov.aa %a6,%a3
8000cb26:	7f f2 d8 ff 	jge.u %d2,%d15,8000cad6 <quorem+0x3e>
8000cb2a:	4c f0       	ld.w %d15,[%a15]0
8000cb2c:	ee 0c       	jnz %d15,8000cb44 <quorem+0xac>
8000cb2e:	b0 cf       	add.a %a15,-4
8000cb30:	80 f2       	mov.d %d2,%a15
8000cb32:	3f 29 05 80 	jlt.u %d9,%d2,8000cb3c <quorem+0xa4>
8000cb36:	59 48 10 00 	st.w [%a4]16,%d8
8000cb3a:	3c 05       	j 8000cb44 <quorem+0xac>
8000cb3c:	4c f0       	ld.w %d15,[%a15]0
8000cb3e:	ee fc       	jnz %d15,8000cb36 <quorem+0x9e>
8000cb40:	c2 f8       	add %d8,-1
8000cb42:	3c f6       	j 8000cb2e <quorem+0x96>
8000cb44:	40 4e       	mov.aa %a14,%a4
8000cb46:	6d 00 b9 08 	call 8000dcb8 <__mcmp>
8000cb4a:	bf 02 32 00 	jlt %d2,0,8000cbae <quorem+0x116>
8000cb4e:	60 92       	mov.a %a2,%d9
8000cb50:	1b 1c 00 a0 	addi %d10,%d12,1
8000cb54:	82 04       	mov %d4,0
8000cb56:	40 2f       	mov.aa %a15,%a2
8000cb58:	44 f3       	ld.w %d3,[%a15+]
8000cb5a:	54 c5       	ld.w %d5,[%a12]
8000cb5c:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000cb60:	8f 05 1f f0 	sh %d15,%d5,-16
8000cb64:	42 42       	add %d2,%d4
8000cb66:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000cb6a:	8f 03 1f 30 	sh %d3,%d3,-16
8000cb6e:	a2 42       	sub %d2,%d4
8000cb70:	8f 02 3f 40 	sha %d4,%d2,-16
8000cb74:	a2 f3       	sub %d3,%d15
8000cb76:	42 43       	add %d3,%d4
8000cb78:	8f 03 3f 40 	sha %d4,%d3,-16
8000cb7c:	b0 4c       	add.a %a12,4
8000cb7e:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000cb82:	80 df       	mov.d %d15,%a13
8000cb84:	80 c2       	mov.d %d2,%a12
8000cb86:	74 23       	st.w [%a2],%d3
8000cb88:	40 f2       	mov.aa %a2,%a15
8000cb8a:	7f 2f e6 ff 	jge.u %d15,%d2,8000cb56 <quorem+0xbe>
8000cb8e:	60 92       	mov.a %a2,%d9
8000cb90:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000cb94:	4c f0       	ld.w %d15,[%a15]0
8000cb96:	ee 0c       	jnz %d15,8000cbae <quorem+0x116>
8000cb98:	b0 cf       	add.a %a15,-4
8000cb9a:	80 f2       	mov.d %d2,%a15
8000cb9c:	3f 29 05 80 	jlt.u %d9,%d2,8000cba6 <quorem+0x10e>
8000cba0:	59 e8 10 00 	st.w [%a14]16,%d8
8000cba4:	3c 05       	j 8000cbae <quorem+0x116>
8000cba6:	4c f0       	ld.w %d15,[%a15]0
8000cba8:	ee fc       	jnz %d15,8000cba0 <quorem+0x108>
8000cbaa:	c2 f8       	add %d8,-1
8000cbac:	3c f6       	j 8000cb98 <quorem+0x100>
8000cbae:	02 a2       	mov %d2,%d10
8000cbb0:	00 90       	ret 
	...

8000cbb4 <_dtoa_r>:
8000cbb4:	20 58       	sub.a %sp,88
8000cbb6:	b5 a5 08 10 	st.a [%sp]72,%a5
8000cbba:	99 45 00 10 	ld.a %a5,[%a4]64
8000cbbe:	59 a6 1c 00 	st.w [%sp]28,%d6
8000cbc2:	59 a7 28 00 	st.w [%sp]40,%d7
8000cbc6:	b5 a7 38 00 	st.a [%sp]56,%a7
8000cbca:	40 4d       	mov.aa %a13,%a4
8000cbcc:	0b 45 10 88 	mov %e8,%d5,%d4
8000cbd0:	40 6c       	mov.aa %a12,%a6
8000cbd2:	0b 45 10 c8 	mov %e12,%d5,%d4
8000cbd6:	bc 5e       	jz.a %a5,8000cbf2 <_dtoa_r+0x3e>
8000cbd8:	19 4f 04 10 	ld.w %d15,[%a4]68
8000cbdc:	82 12       	mov %d2,1
8000cbde:	0f f2 00 20 	sh %d2,%d2,%d15
8000cbe2:	6c 51       	st.w [%a5]4,%d15
8000cbe4:	59 52 08 00 	st.w [%a5]8,%d2
8000cbe8:	82 0f       	mov %d15,0
8000cbea:	6d 00 99 06 	call 8000d91c <_Bfree>
8000cbee:	59 df 00 10 	st.w [%a13]64,%d15
8000cbf2:	ce 96       	jgez %d9,8000cbfe <_dtoa_r+0x4a>
8000cbf4:	82 1f       	mov %d15,1
8000cbf6:	6c c0       	st.w [%a12]0,%d15
8000cbf8:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000cbfc:	3c 03       	j 8000cc02 <_dtoa_r+0x4e>
8000cbfe:	82 0f       	mov %d15,0
8000cc00:	6c c0       	st.w [%a12]0,%d15
8000cc02:	7b 00 ff 27 	movh %d2,32752
8000cc06:	26 d2       	and %d2,%d13
8000cc08:	7b 00 ff 37 	movh %d3,32752
8000cc0c:	5f 32 22 80 	jne %d2,%d3,8000cc50 <_dtoa_r+0x9c>
8000cc10:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cc14:	3b f0 70 22 	mov %d2,9999
8000cc18:	91 00 00 f8 	movh.a %a15,32768
8000cc1c:	74 32       	st.w [%a3],%d2
8000cc1e:	d9 ff e5 d0 	lea %a15,[%a15]3941 <80000f65 <blanks.4035+0x19>>
8000cc22:	f6 c8       	jnz %d12,8000cc32 <_dtoa_r+0x7e>
8000cc24:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000cc28:	ee 05       	jnz %d15,8000cc32 <_dtoa_r+0x7e>
8000cc2a:	91 00 00 f8 	movh.a %a15,32768
8000cc2e:	d9 ff dc d0 	lea %a15,[%a15]3932 <80000f5c <blanks.4035+0x10>>
8000cc32:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000f5c <blanks.4035+0x10>>
8000cc36:	40 f2       	mov.aa %a2,%a15
8000cc38:	bd 03 26 06 	jz.a %a3,8000d884 <_dtoa_r+0xcd0>
8000cc3c:	80 ff       	mov.d %d15,%a15
8000cc3e:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000cc42:	1b 8f 00 20 	addi %d2,%d15,8
8000cc46:	c2 3f       	add %d15,3
8000cc48:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000cc4c:	6c 30       	st.w [%a3]0,%d15
8000cc4e:	00 90       	ret 
8000cc50:	0b cd 10 48 	mov %e4,%d13,%d12
8000cc54:	d2 06       	mov %e6,0
8000cc56:	0b cd 10 88 	mov %e8,%d13,%d12
8000cc5a:	6d 00 2f 0c 	call 8000e4b8 <__eqdf2>
8000cc5e:	df 02 13 80 	jne %d2,0,8000cc84 <_dtoa_r+0xd0>
8000cc62:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cc66:	d8 0e       	ld.a %a15,[%sp]56
8000cc68:	82 1f       	mov %d15,1
8000cc6a:	91 00 00 28 	movh.a %a2,32768
8000cc6e:	6c 30       	st.w [%a3]0,%d15
8000cc70:	d9 22 e9 d0 	lea %a2,[%a2]3945 <80000f69 <blanks.4035+0x1d>>
8000cc74:	bd 0f 08 06 	jz.a %a15,8000d884 <_dtoa_r+0xcd0>
8000cc78:	7b 00 00 f8 	movh %d15,32768
8000cc7c:	1b af f6 f0 	addi %d15,%d15,3946
8000cc80:	68 0f       	st.w [%a15]0,%d15
8000cc82:	00 90       	ret 
8000cc84:	0b cd 10 48 	mov %e4,%d13,%d12
8000cc88:	40 d4       	mov.aa %a4,%a13
8000cc8a:	d9 a5 14 10 	lea %a5,[%sp]84
8000cc8e:	d9 a6 10 10 	lea %a6,[%sp]80
8000cc92:	6d 00 99 08 	call 8000ddc4 <__d2b>
8000cc96:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000cc9a:	40 2e       	mov.aa %a14,%a2
8000cc9c:	19 aa 10 10 	ld.w %d10,[%sp]80
8000cca0:	76 bd       	jz %d11,8000ccba <_dtoa_r+0x106>
8000cca2:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000cca6:	0b cd 10 48 	mov %e4,%d13,%d12
8000ccaa:	7b 00 ff 23 	movh %d2,16368
8000ccae:	0f 2f a0 50 	or %d5,%d15,%d2
8000ccb2:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000ccb6:	82 0f       	mov %d15,0
8000ccb8:	3c 22       	j 8000ccfc <_dtoa_r+0x148>
8000ccba:	19 ab 14 10 	ld.w %d11,[%sp]84
8000ccbe:	3b e0 be 4f 	mov %d4,-1042
8000ccc2:	42 ab       	add %d11,%d10
8000ccc4:	a2 b4       	sub %d4,%d11
8000ccc6:	3b f0 be 2f 	mov %d2,-1041
8000ccca:	0f 4c 00 40 	sh %d4,%d12,%d4
8000ccce:	3f 2b 0f 00 	jlt %d11,%d2,8000ccec <_dtoa_r+0x138>
8000ccd2:	1b 2b 41 30 	addi %d3,%d11,1042
8000ccd6:	3b e0 c0 4f 	mov %d4,-1010
8000ccda:	a2 b4       	sub %d4,%d11
8000ccdc:	8b 03 00 21 	rsub %d2,%d3,0
8000cce0:	0f 2c 00 20 	sh %d2,%d12,%d2
8000cce4:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000cce8:	0f f2 a0 40 	or %d4,%d2,%d15
8000ccec:	6d 00 ad 0c 	call 8000e646 <__floatunsidf>
8000ccf0:	0b 23 10 48 	mov %e4,%d3,%d2
8000ccf4:	9b 03 e1 5f 	addih %d5,%d3,65040
8000ccf8:	c2 fb       	add %d11,-1
8000ccfa:	82 1f       	mov %d15,1
8000ccfc:	b7 00 ab 69 	imask %e6,0,19,11
8000cd00:	78 13       	st.w [%sp]76,%d15
8000cd02:	6d ff ba ee 	call 8000aa76 <__subdf3>
8000cd06:	7b 30 fd 73 	movh %d7,16339
8000cd0a:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd0e:	7b f0 36 66 	movh %d6,25455
8000cd12:	1b 77 7a 78 	addi %d7,%d7,-30809
8000cd16:	1b 16 36 64 	addi %d6,%d6,17249
8000cd1a:	6d ff ce ee 	call 8000aab6 <__muldf3>
8000cd1e:	7b 70 fc 73 	movh %d7,16327
8000cd22:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd26:	7b 10 b6 68 	movh %d6,35681
8000cd2a:	1b 87 a2 78 	addi %d7,%d7,-30168
8000cd2e:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000cd32:	6d ff 86 ee 	call 8000aa3e <__adddf3>
8000cd36:	02 b4       	mov %d4,%d11
8000cd38:	0b 23 10 88 	mov %e8,%d3,%d2
8000cd3c:	6d ff 1b f0 	call 8000ad72 <__floatsidf>
8000cd40:	7b 30 fd 73 	movh %d7,16339
8000cd44:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd48:	7b f0 09 65 	movh %d6,20639
8000cd4c:	1b 37 41 74 	addi %d7,%d7,17427
8000cd50:	1b b6 9f 67 	addi %d6,%d6,31227
8000cd54:	6d ff b1 ee 	call 8000aab6 <__muldf3>
8000cd58:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd5c:	0b 23 10 68 	mov %e6,%d3,%d2
8000cd60:	6d ff 6f ee 	call 8000aa3e <__adddf3>
8000cd64:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd68:	0b 23 10 88 	mov %e8,%d3,%d2
8000cd6c:	6d 00 46 0c 	call 8000e5f8 <__fixdfsi>
8000cd70:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd74:	d2 06       	mov %e6,0
8000cd76:	59 a2 08 00 	st.w [%sp]8,%d2
8000cd7a:	6d 00 1f 0c 	call 8000e5b8 <__ltdf2>
8000cd7e:	ff 02 12 00 	jge %d2,0,8000cda2 <_dtoa_r+0x1ee>
8000cd82:	19 a4 08 00 	ld.w %d4,[%sp]8
8000cd86:	6d ff f6 ef 	call 8000ad72 <__floatsidf>
8000cd8a:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd8e:	0b 23 10 68 	mov %e6,%d3,%d2
8000cd92:	6d 00 b3 0b 	call 8000e4f8 <__nedf2>
8000cd96:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cd9a:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000cd9e:	59 a3 08 00 	st.w [%sp]8,%d3
8000cda2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cda6:	82 13       	mov %d3,1
8000cda8:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000cdac:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cdb0:	ee 18       	jnz %d15,8000cde0 <_dtoa_r+0x22c>
8000cdb2:	91 00 00 f8 	movh.a %a15,32768
8000cdb6:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000cdba:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000cdbe:	0b cd 10 68 	mov %e6,%d13,%d12
8000cdc2:	09 f4 40 09 	ld.d %e4,[%a15]
8000cdc6:	6d 00 b9 0b 	call 8000e538 <__gtdf2>
8000cdca:	8e 28       	jlez %d2,8000cdda <_dtoa_r+0x226>
8000cdcc:	58 02       	ld.w %d15,[%sp]8
8000cdce:	82 02       	mov %d2,0
8000cdd0:	c2 ff       	add %d15,-1
8000cdd2:	78 02       	st.w [%sp]8,%d15
8000cdd4:	59 a2 3c 00 	st.w [%sp]60,%d2
8000cdd8:	3c 04       	j 8000cde0 <_dtoa_r+0x22c>
8000cdda:	82 03       	mov %d3,0
8000cddc:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cde0:	0b ba 80 b0 	sub %d11,%d10,%d11
8000cde4:	9a fb       	add %d15,%d11,-1
8000cde6:	82 02       	mov %d2,0
8000cde8:	78 06       	st.w [%sp]24,%d15
8000cdea:	59 a2 14 00 	st.w [%sp]20,%d2
8000cdee:	ce f6       	jgez %d15,8000cdfa <_dtoa_r+0x246>
8000cdf0:	32 5f       	rsub %d15
8000cdf2:	82 03       	mov %d3,0
8000cdf4:	78 05       	st.w [%sp]20,%d15
8000cdf6:	59 a3 18 00 	st.w [%sp]24,%d3
8000cdfa:	58 02       	ld.w %d15,[%sp]8
8000cdfc:	0e fa       	jltz %d15,8000ce10 <_dtoa_r+0x25c>
8000cdfe:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ce02:	78 0d       	st.w [%sp]52,%d15
8000ce04:	42 f2       	add %d2,%d15
8000ce06:	82 0f       	mov %d15,0
8000ce08:	59 a2 18 00 	st.w [%sp]24,%d2
8000ce0c:	78 08       	st.w [%sp]32,%d15
8000ce0e:	3c 0d       	j 8000ce28 <_dtoa_r+0x274>
8000ce10:	19 a2 14 00 	ld.w %d2,[%sp]20
8000ce14:	19 a3 08 00 	ld.w %d3,[%sp]8
8000ce18:	82 0f       	mov %d15,0
8000ce1a:	a2 32       	sub %d2,%d3
8000ce1c:	32 53       	rsub %d3
8000ce1e:	59 a2 14 00 	st.w [%sp]20,%d2
8000ce22:	59 a3 20 00 	st.w [%sp]32,%d3
8000ce26:	78 0d       	st.w [%sp]52,%d15
8000ce28:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ce2c:	82 18       	mov %d8,1
8000ce2e:	ff a2 46 80 	jge.u %d2,10,8000ceba <_dtoa_r+0x306>
8000ce32:	bf 62 06 00 	jlt %d2,6,8000ce3e <_dtoa_r+0x28a>
8000ce36:	c2 c2       	add %d2,-4
8000ce38:	59 a2 1c 00 	st.w [%sp]28,%d2
8000ce3c:	82 08       	mov %d8,0
8000ce3e:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000ce42:	c2 e3       	add %d3,-2
8000ce44:	ff 43 4b 80 	jge.u %d3,4,8000ceda <_dtoa_r+0x326>
8000ce48:	91 10 00 f8 	movh.a %a15,32769
8000ce4c:	d9 ff d8 9c 	lea %a15,[%a15]-12712 <8000ce58 <_dtoa_r+0x2a4>>
8000ce50:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000ce54:	dc 0f       	ji %a15
8000ce56:	00 00       	nop 
8000ce58:	1d 00 08 00 	j 8000ce68 <_dtoa_r+0x2b4>
8000ce5c:	1d 00 1c 00 	j 8000ce94 <_dtoa_r+0x2e0>
8000ce60:	1d 00 08 00 	j 8000ce70 <_dtoa_r+0x2bc>
8000ce64:	1d 00 1c 00 	j 8000ce9c <_dtoa_r+0x2e8>
8000ce68:	82 03       	mov %d3,0
8000ce6a:	59 a3 24 00 	st.w [%sp]36,%d3
8000ce6e:	3c 03       	j 8000ce74 <_dtoa_r+0x2c0>
8000ce70:	82 1f       	mov %d15,1
8000ce72:	78 09       	st.w [%sp]36,%d15
8000ce74:	19 a2 28 00 	ld.w %d2,[%sp]40
8000ce78:	59 a2 2c 00 	st.w [%sp]44,%d2
8000ce7c:	59 a2 10 00 	st.w [%sp]16,%d2
8000ce80:	02 23       	mov %d3,%d2
8000ce82:	ff 12 38 00 	jge %d2,1,8000cef2 <_dtoa_r+0x33e>
8000ce86:	82 13       	mov %d3,1
8000ce88:	82 1f       	mov %d15,1
8000ce8a:	59 a3 2c 00 	st.w [%sp]44,%d3
8000ce8e:	78 04       	st.w [%sp]16,%d15
8000ce90:	82 12       	mov %d2,1
8000ce92:	3c 21       	j 8000ced4 <_dtoa_r+0x320>
8000ce94:	82 03       	mov %d3,0
8000ce96:	59 a3 24 00 	st.w [%sp]36,%d3
8000ce9a:	3c 03       	j 8000cea0 <_dtoa_r+0x2ec>
8000ce9c:	82 1f       	mov %d15,1
8000ce9e:	78 09       	st.w [%sp]36,%d15
8000cea0:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cea4:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cea8:	42 32       	add %d2,%d3
8000ceaa:	59 a2 2c 00 	st.w [%sp]44,%d2
8000ceae:	c2 12       	add %d2,1
8000ceb0:	59 a2 10 00 	st.w [%sp]16,%d2
8000ceb4:	8b 12 40 33 	max %d3,%d2,1
8000ceb8:	3c 1d       	j 8000cef2 <_dtoa_r+0x33e>
8000ceba:	82 0f       	mov %d15,0
8000cebc:	82 12       	mov %d2,1
8000cebe:	82 f3       	mov %d3,-1
8000cec0:	78 07       	st.w [%sp]28,%d15
8000cec2:	82 ff       	mov %d15,-1
8000cec4:	59 a2 24 00 	st.w [%sp]36,%d2
8000cec8:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cecc:	78 04       	st.w [%sp]16,%d15
8000cece:	3b 20 01 30 	mov %d3,18
8000ced2:	82 02       	mov %d2,0
8000ced4:	59 a2 28 00 	st.w [%sp]40,%d2
8000ced8:	3c 0d       	j 8000cef2 <_dtoa_r+0x33e>
8000ceda:	82 ff       	mov %d15,-1
8000cedc:	82 13       	mov %d3,1
8000cede:	78 0b       	st.w [%sp]44,%d15
8000cee0:	82 f2       	mov %d2,-1
8000cee2:	82 0f       	mov %d15,0
8000cee4:	59 a3 24 00 	st.w [%sp]36,%d3
8000cee8:	59 a2 10 00 	st.w [%sp]16,%d2
8000ceec:	3b 20 01 30 	mov %d3,18
8000cef0:	78 0a       	st.w [%sp]40,%d15
8000cef2:	82 05       	mov %d5,0
8000cef4:	59 d5 04 10 	st.w [%a13]68,%d5
8000cef8:	82 45       	mov %d5,4
8000cefa:	1b 45 01 00 	addi %d0,%d5,20
8000cefe:	3f 03 09 80 	jlt.u %d3,%d0,8000cf10 <_dtoa_r+0x35c>
8000cf02:	19 d0 04 10 	ld.w %d0,[%a13]68
8000cf06:	06 15       	sh %d5,1
8000cf08:	c2 10       	add %d0,1
8000cf0a:	59 d0 04 10 	st.w [%a13]68,%d0
8000cf0e:	3c f6       	j 8000cefa <_dtoa_r+0x346>
8000cf10:	40 d4       	mov.aa %a4,%a13
8000cf12:	19 d4 04 10 	ld.w %d4,[%a13]68
8000cf16:	6d 00 d8 04 	call 8000d8c6 <_Balloc>
8000cf1a:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cf1e:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000cf22:	8b f2 60 32 	lt.u %d3,%d2,15
8000cf26:	b5 d2 00 10 	st.a [%a13]64,%a2
8000cf2a:	26 38       	and %d8,%d3
8000cf2c:	df 08 97 01 	jeq %d8,0,8000d25a <_dtoa_r+0x6a6>
8000cf30:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf34:	89 ac 40 19 	st.d [%sp]64,%e12
8000cf38:	bf 13 3f 00 	jlt %d3,1,8000cfb6 <_dtoa_r+0x402>
8000cf3c:	91 00 00 f8 	movh.a %a15,32768
8000cf40:	8f f3 00 31 	and %d3,%d3,15
8000cf44:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000cf48:	19 ae 08 00 	ld.w %d14,[%sp]8 <8000100c <__mprec_tens>>
8000cf4c:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000cf50:	86 ce       	sha %d14,-4
8000cf52:	09 f8 40 09 	ld.d %e8,[%a15]
8000cf56:	82 2a       	mov %d10,2
8000cf58:	6f 4e 11 00 	jz.t %d14,4,8000cf7a <_dtoa_r+0x3c6>
8000cf5c:	91 00 00 f8 	movh.a %a15,32768
8000cf60:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf64:	d9 ff e4 f0 	lea %a15,[%a15]4068 <80000fe4 <__mprec_bigtens>>
8000cf68:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000cf6c:	6d ff 77 ee 	call 8000ac5a <__divdf3>
8000cf70:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf74:	8f fe 00 e1 	and %d14,%d14,15
8000cf78:	82 3a       	mov %d10,3
8000cf7a:	7b 00 00 b8 	movh %d11,32768
8000cf7e:	82 0f       	mov %d15,0
8000cf80:	1b 4b fe b0 	addi %d11,%d11,4068
8000cf84:	df 0e 12 00 	jeq %d14,0,8000cfa8 <_dtoa_r+0x3f4>
8000cf88:	6f 0e 0d 00 	jz.t %d14,0,8000cfa2 <_dtoa_r+0x3ee>
8000cf8c:	60 b2       	mov.a %a2,%d11
8000cf8e:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000cf90:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf94:	09 f6 40 09 	ld.d %e6,[%a15]
8000cf98:	6d ff 8f ed 	call 8000aab6 <__muldf3>
8000cf9c:	0b 23 10 88 	mov %e8,%d3,%d2
8000cfa0:	c2 1a       	add %d10,1
8000cfa2:	86 fe       	sha %d14,-1
8000cfa4:	c2 1f       	add %d15,1
8000cfa6:	3c ef       	j 8000cf84 <_dtoa_r+0x3d0>
8000cfa8:	0b cd 10 48 	mov %e4,%d13,%d12
8000cfac:	0b 89 10 68 	mov %e6,%d9,%d8
8000cfb0:	6d ff 55 ee 	call 8000ac5a <__divdf3>
8000cfb4:	3c 2c       	j 8000d00c <_dtoa_r+0x458>
8000cfb6:	19 a8 08 00 	ld.w %d8,[%sp]8
8000cfba:	82 2a       	mov %d10,2
8000cfbc:	32 58       	rsub %d8
8000cfbe:	df 08 29 00 	jeq %d8,0,8000d010 <_dtoa_r+0x45c>
8000cfc2:	91 00 00 f8 	movh.a %a15,32768
8000cfc6:	8f f8 00 31 	and %d3,%d8,15
8000cfca:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000cfce:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000cfd2:	09 a4 40 19 	ld.d %e4,[%sp]64
8000cfd6:	09 f6 40 09 	ld.d %e6,[%a15]
8000cfda:	7b 00 00 c8 	movh %d12,32768
8000cfde:	6d ff 6c ed 	call 8000aab6 <__muldf3>
8000cfe2:	82 09       	mov %d9,0
8000cfe4:	86 c8       	sha %d8,-4
8000cfe6:	1b 4c fe c0 	addi %d12,%d12,4068
8000cfea:	df 08 11 00 	jeq %d8,0,8000d00c <_dtoa_r+0x458>
8000cfee:	6f 08 0c 00 	jz.t %d8,0,8000d006 <_dtoa_r+0x452>
8000cff2:	60 c3       	mov.a %a3,%d12
8000cff4:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000cff8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cffc:	09 f6 40 09 	ld.d %e6,[%a15]
8000d000:	c2 1a       	add %d10,1
8000d002:	6d ff 5a ed 	call 8000aab6 <__muldf3>
8000d006:	86 f8       	sha %d8,-1
8000d008:	c2 19       	add %d9,1
8000d00a:	3c f0       	j 8000cfea <_dtoa_r+0x436>
8000d00c:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d010:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000d014:	df 02 23 00 	jeq %d2,0,8000d05a <_dtoa_r+0x4a6>
8000d018:	0b cd 10 48 	mov %e4,%d13,%d12
8000d01c:	b7 00 2a 6a 	imask %e6,0,20,10
8000d020:	6d 00 cc 0a 	call 8000e5b8 <__ltdf2>
8000d024:	ff 02 20 00 	jge %d2,0,8000d064 <_dtoa_r+0x4b0>
8000d028:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d02c:	df 03 21 00 	jeq %d3,0,8000d06e <_dtoa_r+0x4ba>
8000d030:	58 0b       	ld.w %d15,[%sp]44
8000d032:	bf 1f 12 01 	jlt %d15,1,8000d256 <_dtoa_r+0x6a2>
8000d036:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d03a:	0b cd 10 48 	mov %e4,%d13,%d12
8000d03e:	c2 f2       	add %d2,-1
8000d040:	82 06       	mov %d6,0
8000d042:	7b 40 02 74 	movh %d7,16420
8000d046:	59 a2 30 00 	st.w [%sp]48,%d2
8000d04a:	6d ff 36 ed 	call 8000aab6 <__muldf3>
8000d04e:	c2 1a       	add %d10,1
8000d050:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d054:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000d058:	3c 10       	j 8000d078 <_dtoa_r+0x4c4>
8000d05a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d05e:	59 a3 30 00 	st.w [%sp]48,%d3
8000d062:	3c 03       	j 8000d068 <_dtoa_r+0x4b4>
8000d064:	58 02       	ld.w %d15,[%sp]8
8000d066:	78 0c       	st.w [%sp]48,%d15
8000d068:	99 ac 10 00 	ld.a %a12,[%sp]16
8000d06c:	3c 06       	j 8000d078 <_dtoa_r+0x4c4>
8000d06e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d072:	a0 0c       	mov.a %a12,0
8000d074:	59 a2 30 00 	st.w [%sp]48,%d2
8000d078:	02 a4       	mov %d4,%d10
8000d07a:	6d ff 7c ee 	call 8000ad72 <__floatsidf>
8000d07e:	0b cd 10 68 	mov %e6,%d13,%d12
8000d082:	0b 23 10 48 	mov %e4,%d3,%d2
8000d086:	6d ff 18 ed 	call 8000aab6 <__muldf3>
8000d08a:	0b 23 10 48 	mov %e4,%d3,%d2
8000d08e:	82 06       	mov %d6,0
8000d090:	7b c0 01 74 	movh %d7,16412
8000d094:	6d ff d5 ec 	call 8000aa3e <__adddf3>
8000d098:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d09c:	0b 23 10 e8 	mov %e14,%d3,%d2
8000d0a0:	60 b2       	mov.a %a2,%d11
8000d0a2:	11 02 cc ff 	addih.a %a15,%a2,64704
8000d0a6:	80 ff       	mov.d %d15,%a15
8000d0a8:	bd 0c 1e 80 	jnz.a %a12,8000d0e4 <_dtoa_r+0x530>
8000d0ac:	0b cd 10 48 	mov %e4,%d13,%d12
8000d0b0:	82 06       	mov %d6,0
8000d0b2:	7b 40 01 74 	movh %d7,16404
8000d0b6:	6d ff e0 ec 	call 8000aa76 <__subdf3>
8000d0ba:	80 f7       	mov.d %d7,%a15
8000d0bc:	0b 23 10 48 	mov %e4,%d3,%d2
8000d0c0:	02 e6       	mov %d6,%d14
8000d0c2:	0b 23 10 88 	mov %e8,%d3,%d2
8000d0c6:	6d 00 39 0a 	call 8000e538 <__gtdf2>
8000d0ca:	ff 12 8e 02 	jge %d2,1,8000d5e6 <_dtoa_r+0xa32>
8000d0ce:	0b 89 10 48 	mov %e4,%d9,%d8
8000d0d2:	02 e6       	mov %d6,%d14
8000d0d4:	9b 0b cc 77 	addih %d7,%d11,31936
8000d0d8:	6d 00 70 0a 	call 8000e5b8 <__ltdf2>
8000d0dc:	bf 02 7d 02 	jlt %d2,0,8000d5d6 <_dtoa_r+0xa22>
8000d0e0:	1d 00 bb 00 	j 8000d256 <_dtoa_r+0x6a2>
8000d0e4:	80 c5       	mov.d %d5,%a12
8000d0e6:	91 00 00 f8 	movh.a %a15,32768
8000d0ea:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d0ee:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000d0f2:	c2 f5       	add %d5,-1
8000d0f4:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000d0f8:	df 02 57 00 	jeq %d2,0,8000d1a6 <_dtoa_r+0x5f2>
8000d0fc:	b7 00 a9 4a 	imask %e4,0,21,9
8000d100:	09 f6 40 09 	ld.d %e6,[%a15]
8000d104:	6d ff ab ed 	call 8000ac5a <__divdf3>
8000d108:	0b ef 10 68 	mov %e6,%d15,%d14
8000d10c:	0b 23 10 48 	mov %e4,%d3,%d2
8000d110:	6d ff b3 ec 	call 8000aa76 <__subdf3>
8000d114:	d8 03       	ld.a %a15,[%sp]12
8000d116:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d11a:	0b cd 10 48 	mov %e4,%d13,%d12
8000d11e:	80 fe       	mov.d %d14,%a15
8000d120:	6d 00 6c 0a 	call 8000e5f8 <__fixdfsi>
8000d124:	02 24       	mov %d4,%d2
8000d126:	02 2f       	mov %d15,%d2
8000d128:	6d ff 25 ee 	call 8000ad72 <__floatsidf>
8000d12c:	0b cd 10 48 	mov %e4,%d13,%d12
8000d130:	0b 23 10 68 	mov %e6,%d3,%d2
8000d134:	c2 1e       	add %d14,1
8000d136:	6d ff a0 ec 	call 8000aa76 <__subdf3>
8000d13a:	1b 0f 03 50 	addi %d5,%d15,48
8000d13e:	28 05       	st.b [%a15]0,%d5
8000d140:	0b ab 10 68 	mov %e6,%d11,%d10
8000d144:	0b 23 10 48 	mov %e4,%d3,%d2
8000d148:	0b 23 10 88 	mov %e8,%d3,%d2
8000d14c:	6d 00 36 0a 	call 8000e5b8 <__ltdf2>
8000d150:	bf 02 86 03 	jlt %d2,0,8000d85c <_dtoa_r+0xca8>
8000d154:	b7 00 2a 4a 	imask %e4,0,20,10
8000d158:	0b 89 10 68 	mov %e6,%d9,%d8
8000d15c:	6d ff 8d ec 	call 8000aa76 <__subdf3>
8000d160:	0b ab 10 68 	mov %e6,%d11,%d10
8000d164:	0b 23 10 48 	mov %e4,%d3,%d2
8000d168:	6d 00 28 0a 	call 8000e5b8 <__ltdf2>
8000d16c:	bf 02 ea 00 	jlt %d2,0,8000d340 <_dtoa_r+0x78c>
8000d170:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000d174:	02 e5       	mov %d5,%d14
8000d176:	80 cf       	mov.d %d15,%a12
8000d178:	a2 35       	sub %d5,%d3
8000d17a:	7f f5 6e 00 	jge %d5,%d15,8000d256 <_dtoa_r+0x6a2>
8000d17e:	0b ab 10 48 	mov %e4,%d11,%d10
8000d182:	82 06       	mov %d6,0
8000d184:	7b 40 02 74 	movh %d7,16420
8000d188:	6d ff 97 ec 	call 8000aab6 <__muldf3>
8000d18c:	0b 89 10 48 	mov %e4,%d9,%d8
8000d190:	82 06       	mov %d6,0
8000d192:	7b 40 02 74 	movh %d7,16420
8000d196:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d19a:	6d ff 8e ec 	call 8000aab6 <__muldf3>
8000d19e:	60 ef       	mov.a %a15,%d14
8000d1a0:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d1a4:	3c bb       	j 8000d11a <_dtoa_r+0x566>
8000d1a6:	0b ef 10 68 	mov %e6,%d15,%d14
8000d1aa:	09 f4 40 09 	ld.d %e4,[%a15]
8000d1ae:	6d ff 84 ec 	call 8000aab6 <__muldf3>
8000d1b2:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d1b6:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d1ba:	30 c3       	add.a %a3,%a12
8000d1bc:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000d1c0:	80 3e       	mov.d %d14,%a3
8000d1c2:	0b cd 10 48 	mov %e4,%d13,%d12
8000d1c6:	d9 cf 01 00 	lea %a15,[%a12]1
8000d1ca:	6d 00 17 0a 	call 8000e5f8 <__fixdfsi>
8000d1ce:	02 24       	mov %d4,%d2
8000d1d0:	02 2f       	mov %d15,%d2
8000d1d2:	6d ff d0 ed 	call 8000ad72 <__floatsidf>
8000d1d6:	0b cd 10 48 	mov %e4,%d13,%d12
8000d1da:	0b 23 10 68 	mov %e6,%d3,%d2
8000d1de:	6d ff 4c ec 	call 8000aa76 <__subdf3>
8000d1e2:	1b 0f 03 50 	addi %d5,%d15,48
8000d1e6:	0b 23 10 88 	mov %e8,%d3,%d2
8000d1ea:	80 f2       	mov.d %d2,%a15
8000d1ec:	34 c5       	st.b [%a12],%d5
8000d1ee:	5f e2 29 80 	jne %d2,%d14,8000d240 <_dtoa_r+0x68c>
8000d1f2:	0b ab 10 48 	mov %e4,%d11,%d10
8000d1f6:	b7 00 a9 6a 	imask %e6,0,21,9
8000d1fa:	6d ff 22 ec 	call 8000aa3e <__adddf3>
8000d1fe:	0b 89 10 48 	mov %e4,%d9,%d8
8000d202:	0b 23 10 68 	mov %e6,%d3,%d2
8000d206:	6d 00 99 09 	call 8000e538 <__gtdf2>
8000d20a:	ff 12 9b 00 	jge %d2,1,8000d340 <_dtoa_r+0x78c>
8000d20e:	b7 00 a9 4a 	imask %e4,0,21,9
8000d212:	0b ab 10 68 	mov %e6,%d11,%d10
8000d216:	6d ff 30 ec 	call 8000aa76 <__subdf3>
8000d21a:	0b 89 10 48 	mov %e4,%d9,%d8
8000d21e:	0b 23 10 68 	mov %e6,%d3,%d2
8000d222:	6d 00 cb 09 	call 8000e5b8 <__ltdf2>
8000d226:	ff 02 18 00 	jge %d2,0,8000d256 <_dtoa_r+0x6a2>
8000d22a:	60 e2       	mov.a %a2,%d14
8000d22c:	60 ef       	mov.a %a15,%d14
8000d22e:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d232:	b0 ff       	add.a %a15,-1
8000d234:	8b 0f 03 f2 	eq %d15,%d15,48
8000d238:	df 0f 12 03 	jeq %d15,0,8000d85c <_dtoa_r+0xca8>
8000d23c:	80 fe       	mov.d %d14,%a15
8000d23e:	3c f6       	j 8000d22a <_dtoa_r+0x676>
8000d240:	0b 89 10 48 	mov %e4,%d9,%d8
8000d244:	82 06       	mov %d6,0
8000d246:	7b 40 02 74 	movh %d7,16420
8000d24a:	6d ff 36 ec 	call 8000aab6 <__muldf3>
8000d24e:	40 fc       	mov.aa %a12,%a15
8000d250:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d254:	3c b7       	j 8000d1c2 <_dtoa_r+0x60e>
8000d256:	09 ac 40 19 	ld.d %e12,[%sp]64
8000d25a:	19 a3 14 10 	ld.w %d3,[%sp]84
8000d25e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d262:	8b 03 80 52 	ge %d5,%d3,0
8000d266:	8b f2 40 54 	and.lt %d5,%d2,15
8000d26a:	df 05 9e 00 	jeq %d5,0,8000d3a6 <_dtoa_r+0x7f2>
8000d26e:	91 00 00 f8 	movh.a %a15,32768
8000d272:	d9 ff 0c 01 	lea %a15,[%a15]4108 <8000100c <__mprec_tens>>
8000d276:	19 a3 10 00 	ld.w %d3,[%sp]16 <8000100c <__mprec_tens>>
8000d27a:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000d27e:	19 a2 28 00 	ld.w %d2,[%sp]40
8000d282:	fa 13       	lt %d15,%d3,1
8000d284:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000d288:	09 f8 40 09 	ld.d %e8,[%a15]
8000d28c:	6e 16       	jz %d15,8000d2b8 <_dtoa_r+0x704>
8000d28e:	df 03 a4 81 	jne %d3,0,8000d5d6 <_dtoa_r+0xa22>
8000d292:	0b 89 10 48 	mov %e4,%d9,%d8
8000d296:	82 06       	mov %d6,0
8000d298:	7b 40 01 74 	movh %d7,16404
8000d29c:	6d ff 0d ec 	call 8000aab6 <__muldf3>
8000d2a0:	0b cd 10 68 	mov %e6,%d13,%d12
8000d2a4:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2a8:	a0 0c       	mov.a %a12,0
8000d2aa:	6d 00 67 09 	call 8000e578 <__gedf2>
8000d2ae:	a0 0f       	mov.a %a15,0
8000d2b0:	ff 02 95 01 	jge %d2,0,8000d5da <_dtoa_r+0xa26>
8000d2b4:	1d 00 9d 01 	j 8000d5ee <_dtoa_r+0xa3a>
8000d2b8:	d8 03       	ld.a %a15,[%sp]12
8000d2ba:	0b cd 10 a8 	mov %e10,%d13,%d12
8000d2be:	0b 89 10 68 	mov %e6,%d9,%d8
8000d2c2:	0b ab 10 48 	mov %e4,%d11,%d10
8000d2c6:	80 fe       	mov.d %d14,%a15
8000d2c8:	6d ff c9 ec 	call 8000ac5a <__divdf3>
8000d2cc:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2d0:	c2 1e       	add %d14,1
8000d2d2:	6d 00 93 09 	call 8000e5f8 <__fixdfsi>
8000d2d6:	02 24       	mov %d4,%d2
8000d2d8:	02 2f       	mov %d15,%d2
8000d2da:	6d ff 4c ed 	call 8000ad72 <__floatsidf>
8000d2de:	0b 89 10 68 	mov %e6,%d9,%d8
8000d2e2:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2e6:	6d ff e8 eb 	call 8000aab6 <__muldf3>
8000d2ea:	0b ab 10 48 	mov %e4,%d11,%d10
8000d2ee:	0b 23 10 68 	mov %e6,%d3,%d2
8000d2f2:	6d ff c2 eb 	call 8000aa76 <__subdf3>
8000d2f6:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2fa:	1b 0f 03 30 	addi %d3,%d15,48
8000d2fe:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d302:	28 03       	st.b [%a15]0,%d3
8000d304:	02 e3       	mov %d3,%d14
8000d306:	a2 23       	sub %d3,%d2
8000d308:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d30c:	5f 23 3c 80 	jne %d3,%d2,8000d384 <_dtoa_r+0x7d0>
8000d310:	0b 45 10 68 	mov %e6,%d5,%d4
8000d314:	6d ff 95 eb 	call 8000aa3e <__adddf3>
8000d318:	0b 89 10 68 	mov %e6,%d9,%d8
8000d31c:	0b 23 10 48 	mov %e4,%d3,%d2
8000d320:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d324:	6d 00 0a 09 	call 8000e538 <__gtdf2>
8000d328:	4e 2e       	jgtz %d2,8000d344 <_dtoa_r+0x790>
8000d32a:	0b ab 10 48 	mov %e4,%d11,%d10
8000d32e:	0b 89 10 68 	mov %e6,%d9,%d8
8000d332:	6d 00 c3 08 	call 8000e4b8 <__eqdf2>
8000d336:	df 02 95 82 	jne %d2,0,8000d860 <_dtoa_r+0xcac>
8000d33a:	ae 05       	jnz.t %d15,0,8000d344 <_dtoa_r+0x790>
8000d33c:	1d 00 92 02 	j 8000d860 <_dtoa_r+0xcac>
8000d340:	58 0c       	ld.w %d15,[%sp]48
8000d342:	78 02       	st.w [%sp]8,%d15
8000d344:	58 03       	ld.w %d15,[%sp]12
8000d346:	a2 ef       	sub %d15,%d14
8000d348:	46 0f       	not %d15
8000d34a:	60 e2       	mov.a %a2,%d14
8000d34c:	60 ef       	mov.a %a15,%d14
8000d34e:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d352:	b0 ff       	add.a %a15,-1
8000d354:	8b 93 03 32 	eq %d3,%d3,57
8000d358:	df 03 11 00 	jeq %d3,0,8000d37a <_dtoa_r+0x7c6>
8000d35c:	9f 0f 0d 80 	jned %d15,0,8000d376 <_dtoa_r+0x7c2>
8000d360:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d364:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d368:	c2 13       	add %d3,1
8000d36a:	da 30       	mov %d15,48
8000d36c:	59 a3 08 00 	st.w [%sp]8,%d3
8000d370:	2c 30       	st.b [%a3]0,%d15
8000d372:	40 3f       	mov.aa %a15,%a3
8000d374:	3c 03       	j 8000d37a <_dtoa_r+0x7c6>
8000d376:	80 fe       	mov.d %d14,%a15
8000d378:	3c e9       	j 8000d34a <_dtoa_r+0x796>
8000d37a:	0c f0       	ld.bu %d15,[%a15]0
8000d37c:	c2 1f       	add %d15,1
8000d37e:	28 0f       	st.b [%a15]0,%d15
8000d380:	1d 00 70 02 	j 8000d860 <_dtoa_r+0xcac>
8000d384:	82 06       	mov %d6,0
8000d386:	7b 40 02 74 	movh %d7,16420
8000d38a:	6d ff 96 eb 	call 8000aab6 <__muldf3>
8000d38e:	d2 06       	mov %e6,0
8000d390:	0b 23 10 48 	mov %e4,%d3,%d2
8000d394:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d398:	60 ef       	mov.a %a15,%d14
8000d39a:	6d 00 8f 08 	call 8000e4b8 <__eqdf2>
8000d39e:	df 02 90 ff 	jne %d2,0,8000d2be <_dtoa_r+0x70a>
8000d3a2:	1d 00 5f 02 	j 8000d860 <_dtoa_r+0xcac>
8000d3a6:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d3aa:	58 08       	ld.w %d15,[%sp]32
8000d3ac:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d3b0:	a0 0f       	mov.a %a15,0
8000d3b2:	df 02 3b 00 	jeq %d2,0,8000d428 <_dtoa_r+0x874>
8000d3b6:	58 07       	ld.w %d15,[%sp]28
8000d3b8:	ff 2f 10 00 	jge %d15,2,8000d3d8 <_dtoa_r+0x824>
8000d3bc:	58 13       	ld.w %d15,[%sp]76
8000d3be:	6e 05       	jz %d15,8000d3c8 <_dtoa_r+0x814>
8000d3c0:	1b 33 43 30 	addi %d3,%d3,1075
8000d3c4:	58 08       	ld.w %d15,[%sp]32
8000d3c6:	3c 22       	j 8000d40a <_dtoa_r+0x856>
8000d3c8:	19 a3 10 10 	ld.w %d3,[%sp]80
8000d3cc:	58 08       	ld.w %d15,[%sp]32
8000d3ce:	8b 63 03 31 	rsub %d3,%d3,54
8000d3d2:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d3d6:	3c 1a       	j 8000d40a <_dtoa_r+0x856>
8000d3d8:	58 04       	ld.w %d15,[%sp]16
8000d3da:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d3de:	c2 ff       	add %d15,-1
8000d3e0:	3f f2 04 00 	jlt %d2,%d15,8000d3e8 <_dtoa_r+0x834>
8000d3e4:	5a f2       	sub %d15,%d2,%d15
8000d3e6:	3c 0b       	j 8000d3fc <_dtoa_r+0x848>
8000d3e8:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d3ec:	78 08       	st.w [%sp]32,%d15
8000d3ee:	52 32       	sub %d2,%d15,%d3
8000d3f0:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d3f4:	82 0f       	mov %d15,0
8000d3f6:	42 23       	add %d3,%d2
8000d3f8:	59 a3 34 00 	st.w [%sp]52,%d3
8000d3fc:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d400:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d404:	ce 33       	jgez %d3,8000d40a <_dtoa_r+0x856>
8000d406:	a2 38       	sub %d8,%d3
8000d408:	82 03       	mov %d3,0
8000d40a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d40e:	40 d4       	mov.aa %a4,%a13
8000d410:	42 32       	add %d2,%d3
8000d412:	59 a2 14 00 	st.w [%sp]20,%d2
8000d416:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d41a:	82 14       	mov %d4,1
8000d41c:	42 32       	add %d2,%d3
8000d41e:	59 a2 18 00 	st.w [%sp]24,%d2
8000d422:	6d 00 1b 03 	call 8000da58 <__i2b>
8000d426:	40 2f       	mov.aa %a15,%a2
8000d428:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d42c:	8b 18 80 32 	ge %d3,%d8,1
8000d430:	8b 12 80 34 	and.ge %d3,%d2,1
8000d434:	76 3e       	jz %d3,8000d450 <_dtoa_r+0x89c>
8000d436:	0b 82 80 31 	min %d3,%d2,%d8
8000d43a:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d43e:	a2 38       	sub %d8,%d3
8000d440:	a2 32       	sub %d2,%d3
8000d442:	59 a2 14 00 	st.w [%sp]20,%d2
8000d446:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d44a:	a2 32       	sub %d2,%d3
8000d44c:	59 a2 18 00 	st.w [%sp]24,%d2
8000d450:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d454:	bf 13 27 00 	jlt %d3,1,8000d4a2 <_dtoa_r+0x8ee>
8000d458:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d45c:	df 02 1c 00 	jeq %d2,0,8000d494 <_dtoa_r+0x8e0>
8000d460:	bf 1f 13 00 	jlt %d15,1,8000d486 <_dtoa_r+0x8d2>
8000d464:	40 f5       	mov.aa %a5,%a15
8000d466:	02 f4       	mov %d4,%d15
8000d468:	40 d4       	mov.aa %a4,%a13
8000d46a:	6d 00 8c 03 	call 8000db82 <__pow5mult>
8000d46e:	40 e6       	mov.aa %a6,%a14
8000d470:	40 d4       	mov.aa %a4,%a13
8000d472:	40 25       	mov.aa %a5,%a2
8000d474:	40 2f       	mov.aa %a15,%a2
8000d476:	6d 00 f9 02 	call 8000da68 <__multiply>
8000d47a:	40 e5       	mov.aa %a5,%a14
8000d47c:	40 2c       	mov.aa %a12,%a2
8000d47e:	40 d4       	mov.aa %a4,%a13
8000d480:	6d 00 4e 02 	call 8000d91c <_Bfree>
8000d484:	40 ce       	mov.aa %a14,%a12
8000d486:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d48a:	40 d4       	mov.aa %a4,%a13
8000d48c:	a2 f4       	sub %d4,%d15
8000d48e:	40 e5       	mov.aa %a5,%a14
8000d490:	76 49       	jz %d4,8000d4a2 <_dtoa_r+0x8ee>
8000d492:	3c 05       	j 8000d49c <_dtoa_r+0x8e8>
8000d494:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d498:	40 d4       	mov.aa %a4,%a13
8000d49a:	40 e5       	mov.aa %a5,%a14
8000d49c:	6d 00 73 03 	call 8000db82 <__pow5mult>
8000d4a0:	40 2e       	mov.aa %a14,%a2
8000d4a2:	40 d4       	mov.aa %a4,%a13
8000d4a4:	82 14       	mov %d4,1
8000d4a6:	6d 00 d9 02 	call 8000da58 <__i2b>
8000d4aa:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d4ae:	40 2c       	mov.aa %a12,%a2
8000d4b0:	8e 3c       	jlez %d3,8000d4c8 <_dtoa_r+0x914>
8000d4b2:	40 d4       	mov.aa %a4,%a13
8000d4b4:	40 25       	mov.aa %a5,%a2
8000d4b6:	02 34       	mov %d4,%d3
8000d4b8:	6d 00 65 03 	call 8000db82 <__pow5mult>
8000d4bc:	58 07       	ld.w %d15,[%sp]28
8000d4be:	40 2c       	mov.aa %a12,%a2
8000d4c0:	82 09       	mov %d9,0
8000d4c2:	ff 2f 1f 00 	jge %d15,2,8000d500 <_dtoa_r+0x94c>
8000d4c6:	3c 06       	j 8000d4d2 <_dtoa_r+0x91e>
8000d4c8:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d4cc:	82 09       	mov %d9,0
8000d4ce:	ff 22 15 00 	jge %d2,2,8000d4f8 <_dtoa_r+0x944>
8000d4d2:	82 09       	mov %d9,0
8000d4d4:	df 0c 12 80 	jne %d12,0,8000d4f8 <_dtoa_r+0x944>
8000d4d8:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000d4dc:	ee 0e       	jnz %d15,8000d4f8 <_dtoa_r+0x944>
8000d4de:	7b 00 ff f7 	movh %d15,32752
8000d4e2:	26 df       	and %d15,%d13
8000d4e4:	6e 0a       	jz %d15,8000d4f8 <_dtoa_r+0x944>
8000d4e6:	19 a3 14 00 	ld.w %d3,[%sp]20
8000d4ea:	58 06       	ld.w %d15,[%sp]24
8000d4ec:	c2 13       	add %d3,1
8000d4ee:	c2 1f       	add %d15,1
8000d4f0:	59 a3 14 00 	st.w [%sp]20,%d3
8000d4f4:	78 06       	st.w [%sp]24,%d15
8000d4f6:	82 19       	mov %d9,1
8000d4f8:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d4fc:	82 12       	mov %d2,1
8000d4fe:	76 39       	jz %d3,8000d510 <_dtoa_r+0x95c>
8000d500:	4c c4       	ld.w %d15,[%a12]16
8000d502:	90 c3       	addsc.a %a3,%a12,%d15,2
8000d504:	19 34 10 00 	ld.w %d4,[%a3]16
8000d508:	6d 00 54 02 	call 8000d9b0 <__hi0bits>
8000d50c:	8b 02 02 21 	rsub %d2,%d2,32
8000d510:	58 06       	ld.w %d15,[%sp]24
8000d512:	42 2f       	add %d15,%d2
8000d514:	16 1f       	and %d15,31
8000d516:	6e 0a       	jz %d15,8000d52a <_dtoa_r+0x976>
8000d518:	8b 0f 02 31 	rsub %d3,%d15,32
8000d51c:	8b cf 01 f1 	rsub %d15,%d15,28
8000d520:	ff 53 07 00 	jge %d3,5,8000d52e <_dtoa_r+0x97a>
8000d524:	df 43 10 00 	jeq %d3,4,8000d544 <_dtoa_r+0x990>
8000d528:	02 3f       	mov %d15,%d3
8000d52a:	1b cf 01 f0 	addi %d15,%d15,28
8000d52e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d532:	19 a3 18 00 	ld.w %d3,[%sp]24
8000d536:	42 f2       	add %d2,%d15
8000d538:	42 f3       	add %d3,%d15
8000d53a:	59 a2 14 00 	st.w [%sp]20,%d2
8000d53e:	42 f8       	add %d8,%d15
8000d540:	59 a3 18 00 	st.w [%sp]24,%d3
8000d544:	58 05       	ld.w %d15,[%sp]20
8000d546:	8e f7       	jlez %d15,8000d554 <_dtoa_r+0x9a0>
8000d548:	40 e5       	mov.aa %a5,%a14
8000d54a:	40 d4       	mov.aa %a4,%a13
8000d54c:	02 f4       	mov %d4,%d15
8000d54e:	6d 00 58 03 	call 8000dbfe <__lshift>
8000d552:	40 2e       	mov.aa %a14,%a2
8000d554:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d558:	8e 27       	jlez %d2,8000d566 <_dtoa_r+0x9b2>
8000d55a:	40 c5       	mov.aa %a5,%a12
8000d55c:	40 d4       	mov.aa %a4,%a13
8000d55e:	02 24       	mov %d4,%d2
8000d560:	6d 00 4f 03 	call 8000dbfe <__lshift>
8000d564:	40 2c       	mov.aa %a12,%a2
8000d566:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000d56a:	df 03 20 00 	jeq %d3,0,8000d5aa <_dtoa_r+0x9f6>
8000d56e:	40 e4       	mov.aa %a4,%a14
8000d570:	40 c5       	mov.aa %a5,%a12
8000d572:	6d 00 a3 03 	call 8000dcb8 <__mcmp>
8000d576:	ff 02 1a 00 	jge %d2,0,8000d5aa <_dtoa_r+0x9f6>
8000d57a:	58 02       	ld.w %d15,[%sp]8
8000d57c:	40 e5       	mov.aa %a5,%a14
8000d57e:	c2 ff       	add %d15,-1
8000d580:	40 d4       	mov.aa %a4,%a13
8000d582:	fb a0 00 40 	mov %e4,10
8000d586:	78 02       	st.w [%sp]8,%d15
8000d588:	6d 00 d3 01 	call 8000d92e <__multadd>
8000d58c:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000d590:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d594:	59 a2 10 00 	st.w [%sp]16,%d2
8000d598:	40 2e       	mov.aa %a14,%a2
8000d59a:	76 38       	jz %d3,8000d5aa <_dtoa_r+0x9f6>
8000d59c:	40 f5       	mov.aa %a5,%a15
8000d59e:	40 d4       	mov.aa %a4,%a13
8000d5a0:	fb a0 00 40 	mov %e4,10
8000d5a4:	6d 00 c5 01 	call 8000d92e <__multadd>
8000d5a8:	40 2f       	mov.aa %a15,%a2
8000d5aa:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d5ae:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d5b2:	8b 32 80 f2 	ge %d15,%d2,3
8000d5b6:	8b 13 40 f4 	and.lt %d15,%d3,1
8000d5ba:	6e 2a       	jz %d15,8000d60e <_dtoa_r+0xa5a>
8000d5bc:	f6 3f       	jnz %d3,8000d5da <_dtoa_r+0xa26>
8000d5be:	40 c5       	mov.aa %a5,%a12
8000d5c0:	40 d4       	mov.aa %a4,%a13
8000d5c2:	d2 54       	mov %e4,5
8000d5c4:	6d 00 b5 01 	call 8000d92e <__multadd>
8000d5c8:	40 e4       	mov.aa %a4,%a14
8000d5ca:	40 25       	mov.aa %a5,%a2
8000d5cc:	40 2c       	mov.aa %a12,%a2
8000d5ce:	6d 00 75 03 	call 8000dcb8 <__mcmp>
8000d5d2:	4e 2e       	jgtz %d2,8000d5ee <_dtoa_r+0xa3a>
8000d5d4:	3c 03       	j 8000d5da <_dtoa_r+0xa26>
8000d5d6:	a0 0c       	mov.a %a12,0
8000d5d8:	a0 0f       	mov.a %a15,0
8000d5da:	58 0a       	ld.w %d15,[%sp]40
8000d5dc:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d5e0:	46 0f       	not %d15
8000d5e2:	78 02       	st.w [%sp]8,%d15
8000d5e4:	3c 11       	j 8000d606 <_dtoa_r+0xa52>
8000d5e6:	58 0c       	ld.w %d15,[%sp]48
8000d5e8:	a0 0c       	mov.a %a12,0
8000d5ea:	78 02       	st.w [%sp]8,%d15
8000d5ec:	a0 0f       	mov.a %a15,0
8000d5ee:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d5f2:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d5f6:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d5fa:	da 31       	mov %d15,49
8000d5fc:	c2 12       	add %d2,1
8000d5fe:	c2 1e       	add %d14,1
8000d600:	2c 30       	st.b [%a3]0,%d15
8000d602:	59 a2 08 00 	st.w [%sp]8,%d2
8000d606:	80 f8       	mov.d %d8,%a15
8000d608:	a0 0f       	mov.a %a15,0
8000d60a:	1d 00 14 01 	j 8000d832 <_dtoa_r+0xc7e>
8000d60e:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d612:	f6 35       	jnz %d3,8000d61c <_dtoa_r+0xa68>
8000d614:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000d618:	1d 00 c2 00 	j 8000d79c <_dtoa_r+0xbe8>
8000d61c:	8e 87       	jlez %d8,8000d62a <_dtoa_r+0xa76>
8000d61e:	40 f5       	mov.aa %a5,%a15
8000d620:	40 d4       	mov.aa %a4,%a13
8000d622:	02 84       	mov %d4,%d8
8000d624:	6d 00 ed 02 	call 8000dbfe <__lshift>
8000d628:	40 2f       	mov.aa %a15,%a2
8000d62a:	80 f8       	mov.d %d8,%a15
8000d62c:	df 09 16 00 	jeq %d9,0,8000d658 <_dtoa_r+0xaa4>
8000d630:	40 d4       	mov.aa %a4,%a13
8000d632:	48 14       	ld.w %d4,[%a15]4
8000d634:	6d 00 49 01 	call 8000d8c6 <_Balloc>
8000d638:	48 44       	ld.w %d4,[%a15]16
8000d63a:	d9 24 0c 00 	lea %a4,[%a2]12
8000d63e:	c2 24       	add %d4,2
8000d640:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d644:	06 24       	sh %d4,2
8000d646:	80 2f       	mov.d %d15,%a2
8000d648:	6d 00 31 01 	call 8000d8aa <memcpy>
8000d64c:	60 f5       	mov.a %a5,%d15
8000d64e:	40 d4       	mov.aa %a4,%a13
8000d650:	82 14       	mov %d4,1
8000d652:	6d 00 d6 02 	call 8000dbfe <__lshift>
8000d656:	80 28       	mov.d %d8,%a2
8000d658:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000d65c:	8f 1c 00 a1 	and %d10,%d12,1
8000d660:	40 e4       	mov.aa %a4,%a14
8000d662:	40 c5       	mov.aa %a5,%a12
8000d664:	6d ff 1a fa 	call 8000ca98 <quorem>
8000d668:	40 e4       	mov.aa %a4,%a14
8000d66a:	40 f5       	mov.aa %a5,%a15
8000d66c:	02 2e       	mov %d14,%d2
8000d66e:	1b 02 03 f0 	addi %d15,%d2,48
8000d672:	6d 00 23 03 	call 8000dcb8 <__mcmp>
8000d676:	60 86       	mov.a %a6,%d8
8000d678:	40 d4       	mov.aa %a4,%a13
8000d67a:	40 c5       	mov.aa %a5,%a12
8000d67c:	02 2b       	mov %d11,%d2
8000d67e:	6d 00 3e 03 	call 8000dcfa <__mdiff>
8000d682:	19 22 0c 00 	ld.w %d2,[%a2]12
8000d686:	80 2d       	mov.d %d13,%a2
8000d688:	82 1c       	mov %d12,1
8000d68a:	f6 26       	jnz %d2,8000d696 <_dtoa_r+0xae2>
8000d68c:	40 e4       	mov.aa %a4,%a14
8000d68e:	40 25       	mov.aa %a5,%a2
8000d690:	6d 00 14 03 	call 8000dcb8 <__mcmp>
8000d694:	02 2c       	mov %d12,%d2
8000d696:	60 d5       	mov.a %a5,%d13
8000d698:	40 d4       	mov.aa %a4,%a13
8000d69a:	6d 00 41 01 	call 8000d91c <_Bfree>
8000d69e:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000d6a2:	1b 19 00 d0 	addi %d13,%d9,1
8000d6a6:	a6 c3       	or %d3,%d12
8000d6a8:	f6 3f       	jnz %d3,8000d6c6 <_dtoa_r+0xb12>
8000d6aa:	f6 ae       	jnz %d10,8000d6c6 <_dtoa_r+0xb12>
8000d6ac:	8b 9f 03 32 	eq %d3,%d15,57
8000d6b0:	40 e2       	mov.aa %a2,%a14
8000d6b2:	df 03 3a 80 	jne %d3,0,8000d726 <_dtoa_r+0xb72>
8000d6b6:	1b 1e 03 20 	addi %d2,%d14,49
8000d6ba:	8b 1b 80 b2 	ge %d11,%d11,1
8000d6be:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000d6c2:	02 de       	mov %d14,%d13
8000d6c4:	3c 37       	j 8000d732 <_dtoa_r+0xb7e>
8000d6c6:	ce b5       	jgez %d11,8000d6d0 <_dtoa_r+0xb1c>
8000d6c8:	02 fa       	mov %d10,%d15
8000d6ca:	40 e2       	mov.aa %a2,%a14
8000d6cc:	4e ca       	jgtz %d12,8000d6e0 <_dtoa_r+0xb2c>
8000d6ce:	3c 1e       	j 8000d70a <_dtoa_r+0xb56>
8000d6d0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d6d4:	a6 2b       	or %d11,%d2
8000d6d6:	df 0b 20 80 	jne %d11,0,8000d716 <_dtoa_r+0xb62>
8000d6da:	df 0a 1e 80 	jne %d10,0,8000d716 <_dtoa_r+0xb62>
8000d6de:	3c f5       	j 8000d6c8 <_dtoa_r+0xb14>
8000d6e0:	40 d4       	mov.aa %a4,%a13
8000d6e2:	40 e5       	mov.aa %a5,%a14
8000d6e4:	82 14       	mov %d4,1
8000d6e6:	6d 00 8c 02 	call 8000dbfe <__lshift>
8000d6ea:	40 c5       	mov.aa %a5,%a12
8000d6ec:	40 24       	mov.aa %a4,%a2
8000d6ee:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d6f2:	6d 00 e3 02 	call 8000dcb8 <__mcmp>
8000d6f6:	99 a2 04 00 	ld.a %a2,[%sp]4
8000d6fa:	4e 23       	jgtz %d2,8000d700 <_dtoa_r+0xb4c>
8000d6fc:	f6 27       	jnz %d2,8000d70a <_dtoa_r+0xb56>
8000d6fe:	2e 06       	jz.t %d15,0,8000d70a <_dtoa_r+0xb56>
8000d700:	8b 9f 03 32 	eq %d3,%d15,57
8000d704:	df 03 11 80 	jne %d3,0,8000d726 <_dtoa_r+0xb72>
8000d708:	92 1a       	add %d10,%d15,1
8000d70a:	60 93       	mov.a %a3,%d9
8000d70c:	02 de       	mov %d14,%d13
8000d70e:	34 3a       	st.b [%a3],%d10
8000d710:	40 2e       	mov.aa %a14,%a2
8000d712:	1d 00 90 00 	j 8000d832 <_dtoa_r+0xc7e>
8000d716:	bf 1c 11 00 	jlt %d12,1,8000d738 <_dtoa_r+0xb84>
8000d71a:	8b 9f 23 32 	ne %d3,%d15,57
8000d71e:	40 e2       	mov.aa %a2,%a14
8000d720:	02 de       	mov %d14,%d13
8000d722:	c2 1f       	add %d15,1
8000d724:	f6 37       	jnz %d3,8000d732 <_dtoa_r+0xb7e>
8000d726:	60 93       	mov.a %a3,%d9
8000d728:	da 39       	mov %d15,57
8000d72a:	02 de       	mov %d14,%d13
8000d72c:	2c 30       	st.b [%a3]0,%d15
8000d72e:	40 2e       	mov.aa %a14,%a2
8000d730:	3c 5d       	j 8000d7ea <_dtoa_r+0xc36>
8000d732:	60 92       	mov.a %a2,%d9
8000d734:	2c 20       	st.b [%a2]0,%d15
8000d736:	3c 7e       	j 8000d832 <_dtoa_r+0xc7e>
8000d738:	60 93       	mov.a %a3,%d9
8000d73a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d73e:	02 d5       	mov %d5,%d13
8000d740:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d744:	2c 30       	st.b [%a3]0,%d15
8000d746:	a2 25       	sub %d5,%d2
8000d748:	02 de       	mov %d14,%d13
8000d74a:	5f 35 41 00 	jeq %d5,%d3,8000d7cc <_dtoa_r+0xc18>
8000d74e:	40 e5       	mov.aa %a5,%a14
8000d750:	40 d4       	mov.aa %a4,%a13
8000d752:	fb a0 00 40 	mov %e4,10
8000d756:	6d 00 ec 00 	call 8000d92e <__multadd>
8000d75a:	80 ff       	mov.d %d15,%a15
8000d75c:	40 2e       	mov.aa %a14,%a2
8000d75e:	40 d4       	mov.aa %a4,%a13
8000d760:	40 f5       	mov.aa %a5,%a15
8000d762:	fb a0 00 40 	mov %e4,10
8000d766:	7e 86       	jne %d15,%d8,8000d772 <_dtoa_r+0xbbe>
8000d768:	6d 00 e3 00 	call 8000d92e <__multadd>
8000d76c:	40 2f       	mov.aa %a15,%a2
8000d76e:	80 28       	mov.d %d8,%a2
8000d770:	3c 0b       	j 8000d786 <_dtoa_r+0xbd2>
8000d772:	6d 00 de 00 	call 8000d92e <__multadd>
8000d776:	60 85       	mov.a %a5,%d8
8000d778:	40 d4       	mov.aa %a4,%a13
8000d77a:	fb a0 00 40 	mov %e4,10
8000d77e:	40 2f       	mov.aa %a15,%a2
8000d780:	6d 00 d7 00 	call 8000d92e <__multadd>
8000d784:	80 28       	mov.d %d8,%a2
8000d786:	02 d9       	mov %d9,%d13
8000d788:	1d ff 6c ff 	j 8000d660 <_dtoa_r+0xaac>
8000d78c:	40 e5       	mov.aa %a5,%a14
8000d78e:	40 d4       	mov.aa %a4,%a13
8000d790:	fb a0 00 40 	mov %e4,10
8000d794:	6d 00 cd 00 	call 8000d92e <__multadd>
8000d798:	02 98       	mov %d8,%d9
8000d79a:	40 2e       	mov.aa %a14,%a2
8000d79c:	40 e4       	mov.aa %a4,%a14
8000d79e:	40 c5       	mov.aa %a5,%a12
8000d7a0:	6d ff 7c f9 	call 8000ca98 <quorem>
8000d7a4:	1b 18 00 90 	addi %d9,%d8,1
8000d7a8:	1b 02 03 f0 	addi %d15,%d2,48
8000d7ac:	60 82       	mov.a %a2,%d8
8000d7ae:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d7b2:	02 95       	mov %d5,%d9
8000d7b4:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d7b8:	2c 20       	st.b [%a2]0,%d15
8000d7ba:	a2 25       	sub %d5,%d2
8000d7bc:	3f 35 e8 7f 	jlt %d5,%d3,8000d78c <_dtoa_r+0xbd8>
8000d7c0:	8b 13 40 33 	max %d3,%d3,1
8000d7c4:	02 2e       	mov %d14,%d2
8000d7c6:	80 f8       	mov.d %d8,%a15
8000d7c8:	42 3e       	add %d14,%d3
8000d7ca:	a0 0f       	mov.a %a15,0
8000d7cc:	40 e5       	mov.aa %a5,%a14
8000d7ce:	40 d4       	mov.aa %a4,%a13
8000d7d0:	82 14       	mov %d4,1
8000d7d2:	6d 00 16 02 	call 8000dbfe <__lshift>
8000d7d6:	40 c5       	mov.aa %a5,%a12
8000d7d8:	40 2e       	mov.aa %a14,%a2
8000d7da:	40 24       	mov.aa %a4,%a2
8000d7dc:	6d 00 6e 02 	call 8000dcb8 <__mcmp>
8000d7e0:	4e 25       	jgtz %d2,8000d7ea <_dtoa_r+0xc36>
8000d7e2:	df 02 1e 80 	jne %d2,0,8000d81e <_dtoa_r+0xc6a>
8000d7e6:	6f 0f 1c 00 	jz.t %d15,0,8000d81e <_dtoa_r+0xc6a>
8000d7ea:	58 03       	ld.w %d15,[%sp]12
8000d7ec:	a2 ef       	sub %d15,%d14
8000d7ee:	46 0f       	not %d15
8000d7f0:	60 e2       	mov.a %a2,%d14
8000d7f2:	60 e3       	mov.a %a3,%d14
8000d7f4:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d7f8:	b0 f3       	add.a %a3,-1
8000d7fa:	8b 93 03 52 	eq %d5,%d3,57
8000d7fe:	76 5d       	jz %d5,8000d818 <_dtoa_r+0xc64>
8000d800:	9f 0f 0a 80 	jned %d15,0,8000d814 <_dtoa_r+0xc60>
8000d804:	58 02       	ld.w %d15,[%sp]8
8000d806:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d80a:	c2 1f       	add %d15,1
8000d80c:	78 02       	st.w [%sp]8,%d15
8000d80e:	da 31       	mov %d15,49
8000d810:	2c 30       	st.b [%a3]0,%d15
8000d812:	3c 10       	j 8000d832 <_dtoa_r+0xc7e>
8000d814:	80 3e       	mov.d %d14,%a3
8000d816:	3c ed       	j 8000d7f0 <_dtoa_r+0xc3c>
8000d818:	c2 13       	add %d3,1
8000d81a:	34 33       	st.b [%a3],%d3
8000d81c:	3c 0b       	j 8000d832 <_dtoa_r+0xc7e>
8000d81e:	60 e2       	mov.a %a2,%d14
8000d820:	60 e3       	mov.a %a3,%d14
8000d822:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d826:	b0 f3       	add.a %a3,-1
8000d828:	8b 0f 03 f2 	eq %d15,%d15,48
8000d82c:	6e 03       	jz %d15,8000d832 <_dtoa_r+0xc7e>
8000d82e:	80 3e       	mov.d %d14,%a3
8000d830:	3c f7       	j 8000d81e <_dtoa_r+0xc6a>
8000d832:	40 d4       	mov.aa %a4,%a13
8000d834:	40 c5       	mov.aa %a5,%a12
8000d836:	6d 00 73 00 	call 8000d91c <_Bfree>
8000d83a:	df 08 13 00 	jeq %d8,0,8000d860 <_dtoa_r+0xcac>
8000d83e:	80 f2       	mov.d %d2,%a15
8000d840:	8b 02 20 f2 	ne %d15,%d2,0
8000d844:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000d848:	6e 05       	jz %d15,8000d852 <_dtoa_r+0xc9e>
8000d84a:	40 d4       	mov.aa %a4,%a13
8000d84c:	40 f5       	mov.aa %a5,%a15
8000d84e:	6d 00 67 00 	call 8000d91c <_Bfree>
8000d852:	60 85       	mov.a %a5,%d8
8000d854:	40 d4       	mov.aa %a4,%a13
8000d856:	6d 00 63 00 	call 8000d91c <_Bfree>
8000d85a:	3c 03       	j 8000d860 <_dtoa_r+0xcac>
8000d85c:	58 0c       	ld.w %d15,[%sp]48
8000d85e:	78 02       	st.w [%sp]8,%d15
8000d860:	40 d4       	mov.aa %a4,%a13
8000d862:	40 e5       	mov.aa %a5,%a14
8000d864:	6d 00 5c 00 	call 8000d91c <_Bfree>
8000d868:	60 e2       	mov.a %a2,%d14
8000d86a:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d86e:	99 a3 08 10 	ld.a %a3,[%sp]72
8000d872:	82 0f       	mov %d15,0
8000d874:	d8 0e       	ld.a %a15,[%sp]56
8000d876:	2c 20       	st.b [%a2]0,%d15
8000d878:	c2 12       	add %d2,1
8000d87a:	74 32       	st.w [%a3],%d2
8000d87c:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d880:	bc f2       	jz.a %a15,8000d884 <_dtoa_r+0xcd0>
8000d882:	68 0e       	st.w [%a15]0,%d14
8000d884:	00 90       	ret 
	...

8000d888 <_localeconv_r>:
8000d888:	91 00 00 28 	movh.a %a2,32768
8000d88c:	d9 22 f8 d0 	lea %a2,[%a2]3960 <80000f78 <lconv>>
8000d890:	00 90       	ret 

8000d892 <memchr>:
8000d892:	8f f4 0f 41 	and %d4,%d4,255
8000d896:	9f 05 04 80 	jned %d5,0,8000d89e <memchr+0xc>
8000d89a:	a0 02       	mov.a %a2,0
8000d89c:	00 90       	ret 
8000d89e:	0c 40       	ld.bu %d15,[%a4]0
8000d8a0:	3e 43       	jeq %d15,%d4,8000d8a6 <memchr+0x14>
8000d8a2:	b0 14       	add.a %a4,1
8000d8a4:	3c f9       	j 8000d896 <memchr+0x4>
8000d8a6:	40 42       	mov.aa %a2,%a4
8000d8a8:	00 90       	ret 

8000d8aa <memcpy>:
8000d8aa:	40 42       	mov.aa %a2,%a4
8000d8ac:	a0 0f       	mov.a %a15,0
8000d8ae:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d8b2:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d8b6:	9f 04 03 80 	jned %d4,0,8000d8bc <memcpy+0x12>
8000d8ba:	00 90       	ret 
8000d8bc:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d8c0:	b0 1f       	add.a %a15,1
8000d8c2:	2c 40       	st.b [%a4]0,%d15
8000d8c4:	3c f5       	j 8000d8ae <memcpy+0x4>

8000d8c6 <_Balloc>:
8000d8c6:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d8ca:	40 4f       	mov.aa %a15,%a4
8000d8cc:	02 4f       	mov %d15,%d4
8000d8ce:	76 29       	jz %d2,8000d8e0 <_Balloc+0x1a>
8000d8d0:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d8d4:	90 33       	addsc.a %a3,%a3,%d15,2
8000d8d6:	d4 32       	ld.a %a2,[%a3]
8000d8d8:	bc 2f       	jz.a %a2,8000d8f6 <_Balloc+0x30>
8000d8da:	4c 20       	ld.w %d15,[%a2]0
8000d8dc:	6c 30       	st.w [%a3]0,%d15
8000d8de:	3c 1b       	j 8000d914 <_Balloc+0x4e>
8000d8e0:	82 44       	mov %d4,4
8000d8e2:	3b 10 02 50 	mov %d5,33
8000d8e6:	6d 00 5c 03 	call 8000df9e <_calloc_r>
8000d8ea:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d8ee:	bd 02 f1 ff 	jnz.a %a2,8000d8d0 <_Balloc+0xa>
8000d8f2:	a0 02       	mov.a %a2,0
8000d8f4:	00 90       	ret 
8000d8f6:	82 18       	mov %d8,1
8000d8f8:	0f f8 00 80 	sh %d8,%d8,%d15
8000d8fc:	1b 58 00 50 	addi %d5,%d8,5
8000d900:	40 f4       	mov.aa %a4,%a15
8000d902:	82 14       	mov %d4,1
8000d904:	06 25       	sh %d5,2
8000d906:	6d 00 4c 03 	call 8000df9e <_calloc_r>
8000d90a:	bd 02 f4 7f 	jz.a %a2,8000d8f2 <_Balloc+0x2c>
8000d90e:	6c 21       	st.w [%a2]4,%d15
8000d910:	59 28 08 00 	st.w [%a2]8,%d8
8000d914:	82 0f       	mov %d15,0
8000d916:	6c 24       	st.w [%a2]16,%d15
8000d918:	6c 23       	st.w [%a2]12,%d15
8000d91a:	00 90       	ret 

8000d91c <_Bfree>:
8000d91c:	bc 58       	jz.a %a5,8000d92c <_Bfree+0x10>
8000d91e:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d922:	4c 51       	ld.w %d15,[%a5]4
8000d924:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d926:	4c f0       	ld.w %d15,[%a15]0
8000d928:	6c 50       	st.w [%a5]0,%d15
8000d92a:	e8 05       	st.a [%a15]0,%a5
8000d92c:	00 90       	ret 

8000d92e <__multadd>:
8000d92e:	19 59 10 00 	ld.w %d9,[%a5]16
8000d932:	40 4c       	mov.aa %a12,%a4
8000d934:	9a f9       	add %d15,%d9,-1
8000d936:	8b 19 80 22 	ge %d2,%d9,1
8000d93a:	40 5f       	mov.aa %a15,%a5
8000d93c:	02 58       	mov %d8,%d5
8000d93e:	d9 53 14 00 	lea %a3,[%a5]20
8000d942:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d946:	40 32       	mov.aa %a2,%a3
8000d948:	44 25       	ld.w %d5,[%a2+]
8000d94a:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d94e:	8f 05 1f f0 	sh %d15,%d5,-16
8000d952:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d956:	8f 03 1f 60 	sh %d6,%d3,-16
8000d95a:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d95e:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d962:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d966:	74 33       	st.w [%a3],%d3
8000d968:	40 23       	mov.aa %a3,%a2
8000d96a:	9f 02 ee ff 	jned %d2,0,8000d946 <__multadd+0x18>
8000d96e:	df 08 1f 00 	jeq %d8,0,8000d9ac <__multadd+0x7e>
8000d972:	4c f2       	ld.w %d15,[%a15]8
8000d974:	3f f9 16 00 	jlt %d9,%d15,8000d9a0 <__multadd+0x72>
8000d978:	48 14       	ld.w %d4,[%a15]4
8000d97a:	40 c4       	mov.aa %a4,%a12
8000d97c:	c2 14       	add %d4,1
8000d97e:	6d ff a4 ff 	call 8000d8c6 <_Balloc>
8000d982:	48 44       	ld.w %d4,[%a15]16
8000d984:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d988:	c2 24       	add %d4,2
8000d98a:	d9 24 0c 00 	lea %a4,[%a2]12
8000d98e:	06 24       	sh %d4,2
8000d990:	40 2d       	mov.aa %a13,%a2
8000d992:	6d ff 8c ff 	call 8000d8aa <memcpy>
8000d996:	40 f5       	mov.aa %a5,%a15
8000d998:	40 c4       	mov.aa %a4,%a12
8000d99a:	6d ff c1 ff 	call 8000d91c <_Bfree>
8000d99e:	40 df       	mov.aa %a15,%a13
8000d9a0:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d9a4:	c2 19       	add %d9,1
8000d9a6:	59 28 14 00 	st.w [%a2]20,%d8
8000d9aa:	68 49       	st.w [%a15]16,%d9
8000d9ac:	40 f2       	mov.aa %a2,%a15
8000d9ae:	00 90       	ret 

8000d9b0 <__hi0bits>:
8000d9b0:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d9b4:	82 02       	mov %d2,0
8000d9b6:	ee 05       	jnz %d15,8000d9c0 <__hi0bits+0x10>
8000d9b8:	8f 04 01 40 	sh %d4,%d4,16
8000d9bc:	3b 00 01 20 	mov %d2,16
8000d9c0:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d9c4:	ee 05       	jnz %d15,8000d9ce <__hi0bits+0x1e>
8000d9c6:	1b 82 00 20 	addi %d2,%d2,8
8000d9ca:	8f 84 00 40 	sh %d4,%d4,8
8000d9ce:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d9d2:	ee 03       	jnz %d15,8000d9d8 <__hi0bits+0x28>
8000d9d4:	c2 42       	add %d2,4
8000d9d6:	06 44       	sh %d4,4
8000d9d8:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d9dc:	ee 03       	jnz %d15,8000d9e2 <__hi0bits+0x32>
8000d9de:	c2 22       	add %d2,2
8000d9e0:	06 24       	sh %d4,2
8000d9e2:	0e 47       	jltz %d4,8000d9f0 <__hi0bits+0x40>
8000d9e4:	7b 00 00 f4 	movh %d15,16384
8000d9e8:	26 f4       	and %d4,%d15
8000d9ea:	c2 12       	add %d2,1
8000d9ec:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d9f0:	00 90       	ret 

8000d9f2 <__lo0bits>:
8000d9f2:	54 43       	ld.w %d3,[%a4]
8000d9f4:	8f 73 00 f1 	and %d15,%d3,7
8000d9f8:	6e 0e       	jz %d15,8000da14 <__lo0bits+0x22>
8000d9fa:	82 02       	mov %d2,0
8000d9fc:	6f 03 2d 80 	jnz.t %d3,0,8000da56 <__lo0bits+0x64>
8000da00:	6f 13 06 00 	jz.t %d3,1,8000da0c <__lo0bits+0x1a>
8000da04:	06 f3       	sh %d3,-1
8000da06:	74 43       	st.w [%a4],%d3
8000da08:	82 12       	mov %d2,1
8000da0a:	00 90       	ret 
8000da0c:	06 e3       	sh %d3,-2
8000da0e:	74 43       	st.w [%a4],%d3
8000da10:	82 22       	mov %d2,2
8000da12:	00 90       	ret 
8000da14:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000da18:	82 04       	mov %d4,0
8000da1a:	ee 05       	jnz %d15,8000da24 <__lo0bits+0x32>
8000da1c:	8f 03 1f 30 	sh %d3,%d3,-16
8000da20:	3b 00 01 40 	mov %d4,16
8000da24:	02 3f       	mov %d15,%d3
8000da26:	16 ff       	and %d15,255
8000da28:	ee 04       	jnz %d15,8000da30 <__lo0bits+0x3e>
8000da2a:	1b 84 00 40 	addi %d4,%d4,8
8000da2e:	06 83       	sh %d3,-8
8000da30:	8f f3 00 f1 	and %d15,%d3,15
8000da34:	ee 03       	jnz %d15,8000da3a <__lo0bits+0x48>
8000da36:	c2 44       	add %d4,4
8000da38:	06 c3       	sh %d3,-4
8000da3a:	8f 33 00 f1 	and %d15,%d3,3
8000da3e:	ee 03       	jnz %d15,8000da44 <__lo0bits+0x52>
8000da40:	c2 24       	add %d4,2
8000da42:	06 e3       	sh %d3,-2
8000da44:	6f 03 07 80 	jnz.t %d3,0,8000da52 <__lo0bits+0x60>
8000da48:	06 f3       	sh %d3,-1
8000da4a:	3b 00 02 20 	mov %d2,32
8000da4e:	76 34       	jz %d3,8000da56 <__lo0bits+0x64>
8000da50:	c2 14       	add %d4,1
8000da52:	74 43       	st.w [%a4],%d3
8000da54:	02 42       	mov %d2,%d4
8000da56:	00 90       	ret 

8000da58 <__i2b>:
8000da58:	02 4f       	mov %d15,%d4
8000da5a:	82 14       	mov %d4,1
8000da5c:	6d ff 35 ff 	call 8000d8c6 <_Balloc>
8000da60:	6c 25       	st.w [%a2]20,%d15
8000da62:	82 1f       	mov %d15,1
8000da64:	6c 24       	st.w [%a2]16,%d15
8000da66:	00 90       	ret 

8000da68 <__multiply>:
8000da68:	19 52 10 00 	ld.w %d2,[%a5]16
8000da6c:	4c 64       	ld.w %d15,[%a6]16
8000da6e:	40 5f       	mov.aa %a15,%a5
8000da70:	40 6c       	mov.aa %a12,%a6
8000da72:	7f f2 04 00 	jge %d2,%d15,8000da7a <__multiply+0x12>
8000da76:	40 6f       	mov.aa %a15,%a6
8000da78:	40 5c       	mov.aa %a12,%a5
8000da7a:	48 4a       	ld.w %d10,[%a15]16
8000da7c:	19 c9 10 00 	ld.w %d9,[%a12]16
8000da80:	4c f2       	ld.w %d15,[%a15]8
8000da82:	0b 9a 00 80 	add %d8,%d10,%d9
8000da86:	48 12       	ld.w %d2,[%a15]4
8000da88:	0b 8f 20 41 	lt %d4,%d15,%d8
8000da8c:	42 24       	add %d4,%d2
8000da8e:	6d ff 1c ff 	call 8000d8c6 <_Balloc>
8000da92:	d9 23 14 00 	lea %a3,[%a2]20
8000da96:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000da9a:	40 34       	mov.aa %a4,%a3
8000da9c:	82 0f       	mov %d15,0
8000da9e:	80 43       	mov.d %d3,%a4
8000daa0:	80 d2       	mov.d %d2,%a13
8000daa2:	7f 23 04 80 	jge.u %d3,%d2,8000daaa <__multiply+0x42>
8000daa6:	64 4f       	st.w [%a4+],%d15
8000daa8:	3c fb       	j 8000da9e <__multiply+0x36>
8000daaa:	d9 ff 14 00 	lea %a15,[%a15]20
8000daae:	d9 cc 14 00 	lea %a12,[%a12]20
8000dab2:	80 f3       	mov.d %d3,%a15
8000dab4:	80 cf       	mov.d %d15,%a12
8000dab6:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000daba:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000dabe:	80 c2       	mov.d %d2,%a12
8000dac0:	7f 02 54 80 	jge.u %d2,%d0,8000db68 <__multiply+0x100>
8000dac4:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000dac8:	40 34       	mov.aa %a4,%a3
8000daca:	40 f6       	mov.aa %a6,%a15
8000dacc:	82 03       	mov %d3,0
8000dace:	df 02 21 00 	jeq %d2,0,8000db10 <__multiply+0xa8>
8000dad2:	40 45       	mov.aa %a5,%a4
8000dad4:	44 67       	ld.w %d7,[%a6+]
8000dad6:	44 56       	ld.w %d6,[%a5+]
8000dad8:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000dadc:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000dae0:	8f 07 1f 70 	sh %d7,%d7,-16
8000dae4:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000dae8:	8f 06 1f 60 	sh %d6,%d6,-16
8000daec:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000daf0:	42 35       	add %d5,%d3
8000daf2:	8f 05 1f 30 	sh %d3,%d5,-16
8000daf6:	1a 36       	add %d15,%d6,%d3
8000daf8:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000dafc:	8f 0f 1f 30 	sh %d3,%d15,-16
8000db00:	80 6f       	mov.d %d15,%a6
8000db02:	74 45       	st.w [%a4],%d5
8000db04:	7f 4f 04 80 	jge.u %d15,%d4,8000db0c <__multiply+0xa4>
8000db08:	40 54       	mov.aa %a4,%a5
8000db0a:	3c e4       	j 8000dad2 <__multiply+0x6a>
8000db0c:	59 43 04 00 	st.w [%a4]4,%d3
8000db10:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000db14:	df 02 27 00 	jeq %d2,0,8000db62 <__multiply+0xfa>
8000db18:	54 33       	ld.w %d3,[%a3]
8000db1a:	40 34       	mov.aa %a4,%a3
8000db1c:	40 f5       	mov.aa %a5,%a15
8000db1e:	82 07       	mov %d7,0
8000db20:	40 56       	mov.aa %a6,%a5
8000db22:	44 66       	ld.w %d6,[%a6+]
8000db24:	40 47       	mov.aa %a7,%a4
8000db26:	44 75       	ld.w %d5,[%a7+]
8000db28:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000db2c:	8f 05 1f 50 	sh %d5,%d5,-16
8000db30:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000db34:	42 7f       	add %d15,%d7
8000db36:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000db3a:	8f 0f 1f f0 	sh %d15,%d15,-16
8000db3e:	74 43       	st.w [%a4],%d3
8000db40:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000db44:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000db48:	40 65       	mov.aa %a5,%a6
8000db4a:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000db4e:	42 f3       	add %d3,%d15
8000db50:	80 6f       	mov.d %d15,%a6
8000db52:	8f 03 1f 70 	sh %d7,%d3,-16
8000db56:	7f 4f 04 80 	jge.u %d15,%d4,8000db5e <__multiply+0xf6>
8000db5a:	40 74       	mov.aa %a4,%a7
8000db5c:	3c e2       	j 8000db20 <__multiply+0xb8>
8000db5e:	59 43 04 00 	st.w [%a4]4,%d3
8000db62:	b0 4c       	add.a %a12,4
8000db64:	b0 43       	add.a %a3,4
8000db66:	3c ac       	j 8000dabe <__multiply+0x56>
8000db68:	8b 08 40 f3 	max %d15,%d8,0
8000db6c:	9f 0f 05 80 	jned %d15,0,8000db76 <__multiply+0x10e>
8000db70:	59 28 10 00 	st.w [%a2]16,%d8
8000db74:	00 90       	ret 
8000db76:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000db7a:	df 02 fb ff 	jne %d2,0,8000db70 <__multiply+0x108>
8000db7e:	c2 f8       	add %d8,-1
8000db80:	3c f6       	j 8000db6c <__multiply+0x104>

8000db82 <__pow5mult>:
8000db82:	8f 34 00 21 	and %d2,%d4,3
8000db86:	40 4c       	mov.aa %a12,%a4
8000db88:	40 5d       	mov.aa %a13,%a5
8000db8a:	02 4f       	mov %d15,%d4
8000db8c:	76 2d       	jz %d2,8000dba6 <__pow5mult+0x24>
8000db8e:	91 00 00 f8 	movh.a %a15,32768
8000db92:	d9 ff f0 e0 	lea %a15,[%a15]4016 <80000fb0 <p05.2553>>
8000db96:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000db9a:	82 05       	mov %d5,0
8000db9c:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000dba0:	6d ff c7 fe 	call 8000d92e <__multadd>
8000dba4:	40 2d       	mov.aa %a13,%a2
8000dba6:	86 ef       	sha %d15,-2
8000dba8:	6e 29       	jz %d15,8000dbfa <__pow5mult+0x78>
8000dbaa:	99 cf 08 10 	ld.a %a15,[%a12]72
8000dbae:	7c fb       	jnz.a %a15,8000dbc4 <__pow5mult+0x42>
8000dbb0:	40 c4       	mov.aa %a4,%a12
8000dbb2:	3b 10 27 40 	mov %d4,625
8000dbb6:	6d ff 51 ff 	call 8000da58 <__i2b>
8000dbba:	82 02       	mov %d2,0
8000dbbc:	b5 c2 08 10 	st.a [%a12]72,%a2
8000dbc0:	40 2f       	mov.aa %a15,%a2
8000dbc2:	74 22       	st.w [%a2],%d2
8000dbc4:	82 08       	mov %d8,0
8000dbc6:	2e 0c       	jz.t %d15,0,8000dbde <__pow5mult+0x5c>
8000dbc8:	40 d5       	mov.aa %a5,%a13
8000dbca:	40 c4       	mov.aa %a4,%a12
8000dbcc:	40 f6       	mov.aa %a6,%a15
8000dbce:	6d ff 4d ff 	call 8000da68 <__multiply>
8000dbd2:	40 d5       	mov.aa %a5,%a13
8000dbd4:	40 2e       	mov.aa %a14,%a2
8000dbd6:	40 c4       	mov.aa %a4,%a12
8000dbd8:	6d ff a2 fe 	call 8000d91c <_Bfree>
8000dbdc:	40 ed       	mov.aa %a13,%a14
8000dbde:	86 ff       	sha %d15,-1
8000dbe0:	6e 0d       	jz %d15,8000dbfa <__pow5mult+0x78>
8000dbe2:	c8 02       	ld.a %a2,[%a15]0
8000dbe4:	bc 23       	jz.a %a2,8000dbea <__pow5mult+0x68>
8000dbe6:	40 2f       	mov.aa %a15,%a2
8000dbe8:	3c ef       	j 8000dbc6 <__pow5mult+0x44>
8000dbea:	40 c4       	mov.aa %a4,%a12
8000dbec:	40 f5       	mov.aa %a5,%a15
8000dbee:	40 f6       	mov.aa %a6,%a15
8000dbf0:	6d ff 3c ff 	call 8000da68 <__multiply>
8000dbf4:	e8 02       	st.a [%a15]0,%a2
8000dbf6:	74 28       	st.w [%a2],%d8
8000dbf8:	3c f7       	j 8000dbe6 <__pow5mult+0x64>
8000dbfa:	40 d2       	mov.aa %a2,%a13
8000dbfc:	00 90       	ret 

8000dbfe <__lshift>:
8000dbfe:	19 5b 10 00 	ld.w %d11,[%a5]16
8000dc02:	8f b4 3f 80 	sha %d8,%d4,-5
8000dc06:	02 4a       	mov %d10,%d4
8000dc08:	42 8b       	add %d11,%d8
8000dc0a:	19 54 04 00 	ld.w %d4,[%a5]4
8000dc0e:	4c 52       	ld.w %d15,[%a5]8
8000dc10:	40 4e       	mov.aa %a14,%a4
8000dc12:	40 5c       	mov.aa %a12,%a5
8000dc14:	1b 1b 00 90 	addi %d9,%d11,1
8000dc18:	7f 9f 05 00 	jge %d15,%d9,8000dc22 <__lshift+0x24>
8000dc1c:	c2 14       	add %d4,1
8000dc1e:	06 1f       	sh %d15,1
8000dc20:	3c fc       	j 8000dc18 <__lshift+0x1a>
8000dc22:	40 e4       	mov.aa %a4,%a14
8000dc24:	6d ff 51 fe 	call 8000d8c6 <_Balloc>
8000dc28:	8b 08 40 f3 	max %d15,%d8,0
8000dc2c:	40 2d       	mov.aa %a13,%a2
8000dc2e:	d9 2f 14 00 	lea %a15,[%a2]20
8000dc32:	d2 02       	mov %e2,0
8000dc34:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000dc38:	9f 0f 03 80 	jned %d15,0,8000dc3e <__lshift+0x40>
8000dc3c:	3c 04       	j 8000dc44 <__lshift+0x46>
8000dc3e:	74 23       	st.w [%a2],%d3
8000dc40:	c2 12       	add %d2,1
8000dc42:	3c f9       	j 8000dc34 <__lshift+0x36>
8000dc44:	8b 08 40 83 	max %d8,%d8,0
8000dc48:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000dc4c:	d9 cf 14 00 	lea %a15,[%a12]20
8000dc50:	19 c2 10 00 	ld.w %d2,[%a12]16
8000dc54:	80 f3       	mov.d %d3,%a15
8000dc56:	8f fa 01 41 	and %d4,%d10,31
8000dc5a:	13 42 20 23 	madd %d2,%d3,%d2,4
8000dc5e:	8b 04 02 51 	rsub %d5,%d4,32
8000dc62:	82 0f       	mov %d15,0
8000dc64:	df 04 1a 00 	jeq %d4,0,8000dc98 <__lshift+0x9a>
8000dc68:	40 f5       	mov.aa %a5,%a15
8000dc6a:	44 53       	ld.w %d3,[%a5+]
8000dc6c:	d9 32 04 00 	lea %a2,[%a3]4
8000dc70:	0f 43 00 30 	sh %d3,%d3,%d4
8000dc74:	a6 3f       	or %d15,%d3
8000dc76:	6c 30       	st.w [%a3]0,%d15
8000dc78:	4c f0       	ld.w %d15,[%a15]0
8000dc7a:	8b 05 00 31 	rsub %d3,%d5,0
8000dc7e:	0f 3f 00 30 	sh %d3,%d15,%d3
8000dc82:	02 3f       	mov %d15,%d3
8000dc84:	80 53       	mov.d %d3,%a5
8000dc86:	40 5f       	mov.aa %a15,%a5
8000dc88:	7f 23 04 80 	jge.u %d3,%d2,8000dc90 <__lshift+0x92>
8000dc8c:	40 23       	mov.aa %a3,%a2
8000dc8e:	3c ed       	j 8000dc68 <__lshift+0x6a>
8000dc90:	c2 2b       	add %d11,2
8000dc92:	6c 31       	st.w [%a3]4,%d15
8000dc94:	2a b9       	cmov %d9,%d15,%d11
8000dc96:	3c 08       	j 8000dca6 <__lshift+0xa8>
8000dc98:	4c f0       	ld.w %d15,[%a15]0
8000dc9a:	b0 4f       	add.a %a15,4
8000dc9c:	80 f3       	mov.d %d3,%a15
8000dc9e:	6c 30       	st.w [%a3]0,%d15
8000dca0:	b0 43       	add.a %a3,4
8000dca2:	3f 23 fb ff 	jlt.u %d3,%d2,8000dc98 <__lshift+0x9a>
8000dca6:	c2 f9       	add %d9,-1
8000dca8:	59 d9 10 00 	st.w [%a13]16,%d9
8000dcac:	40 e4       	mov.aa %a4,%a14
8000dcae:	40 c5       	mov.aa %a5,%a12
8000dcb0:	6d ff 36 fe 	call 8000d91c <_Bfree>
8000dcb4:	40 d2       	mov.aa %a2,%a13
8000dcb6:	00 90       	ret 

8000dcb8 <__mcmp>:
8000dcb8:	4c 54       	ld.w %d15,[%a5]16
8000dcba:	19 42 10 00 	ld.w %d2,[%a4]16
8000dcbe:	a2 f2       	sub %d2,%d15
8000dcc0:	df 02 1c 80 	jne %d2,0,8000dcf8 <__mcmp+0x40>
8000dcc4:	80 42       	mov.d %d2,%a4
8000dcc6:	06 2f       	sh %d15,2
8000dcc8:	60 f2       	mov.a %a2,%d15
8000dcca:	1b 42 01 30 	addi %d3,%d2,20
8000dcce:	d9 55 14 00 	lea %a5,[%a5]20
8000dcd2:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000dcd6:	30 25       	add.a %a5,%a2
8000dcd8:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000dcdc:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000dce0:	5f f2 08 00 	jeq %d2,%d15,8000dcf0 <__mcmp+0x38>
8000dce4:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000dce8:	82 f3       	mov %d3,-1
8000dcea:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000dcee:	00 90       	ret 
8000dcf0:	80 ff       	mov.d %d15,%a15
8000dcf2:	3f f3 f3 ff 	jlt.u %d3,%d15,8000dcd8 <__mcmp+0x20>
8000dcf6:	82 02       	mov %d2,0
8000dcf8:	00 90       	ret 

8000dcfa <__mdiff>:
8000dcfa:	40 4d       	mov.aa %a13,%a4
8000dcfc:	40 5f       	mov.aa %a15,%a5
8000dcfe:	40 54       	mov.aa %a4,%a5
8000dd00:	40 65       	mov.aa %a5,%a6
8000dd02:	40 6c       	mov.aa %a12,%a6
8000dd04:	6d ff da ff 	call 8000dcb8 <__mcmp>
8000dd08:	02 2f       	mov %d15,%d2
8000dd0a:	f6 2a       	jnz %d2,8000dd1e <__mdiff+0x24>
8000dd0c:	40 d4       	mov.aa %a4,%a13
8000dd0e:	82 04       	mov %d4,0
8000dd10:	6d ff db fd 	call 8000d8c6 <_Balloc>
8000dd14:	82 12       	mov %d2,1
8000dd16:	59 22 10 00 	st.w [%a2]16,%d2
8000dd1a:	6c 25       	st.w [%a2]20,%d15
8000dd1c:	00 90       	ret 
8000dd1e:	82 08       	mov %d8,0
8000dd20:	ce 25       	jgez %d2,8000dd2a <__mdiff+0x30>
8000dd22:	40 f2       	mov.aa %a2,%a15
8000dd24:	82 18       	mov %d8,1
8000dd26:	40 cf       	mov.aa %a15,%a12
8000dd28:	40 2c       	mov.aa %a12,%a2
8000dd2a:	40 d4       	mov.aa %a4,%a13
8000dd2c:	48 14       	ld.w %d4,[%a15]4
8000dd2e:	6d ff cc fd 	call 8000d8c6 <_Balloc>
8000dd32:	48 42       	ld.w %d2,[%a15]16
8000dd34:	d9 ff 14 00 	lea %a15,[%a15]20
8000dd38:	80 ff       	mov.d %d15,%a15
8000dd3a:	d9 c4 14 00 	lea %a4,[%a12]20
8000dd3e:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000dd42:	19 c0 10 00 	ld.w %d0,[%a12]16
8000dd46:	80 4f       	mov.d %d15,%a4
8000dd48:	59 28 0c 00 	st.w [%a2]12,%d8
8000dd4c:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000dd50:	d9 25 14 00 	lea %a5,[%a2]20
8000dd54:	82 03       	mov %d3,0
8000dd56:	44 f6       	ld.w %d6,[%a15+]
8000dd58:	44 45       	ld.w %d5,[%a4+]
8000dd5a:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000dd5e:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000dd62:	42 34       	add %d4,%d3
8000dd64:	a2 14       	sub %d4,%d1
8000dd66:	8f 06 1f 60 	sh %d6,%d6,-16
8000dd6a:	8f 05 1f 50 	sh %d5,%d5,-16
8000dd6e:	8f 04 3f 30 	sha %d3,%d4,-16
8000dd72:	0b 56 80 50 	sub %d5,%d6,%d5
8000dd76:	1a 35       	add %d15,%d5,%d3
8000dd78:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000dd7c:	8f 0f 3f 30 	sha %d3,%d15,-16
8000dd80:	80 4f       	mov.d %d15,%a4
8000dd82:	d9 53 04 00 	lea %a3,[%a5]4
8000dd86:	74 54       	st.w [%a5],%d4
8000dd88:	40 35       	mov.aa %a5,%a3
8000dd8a:	3f 0f e6 ff 	jlt.u %d15,%d0,8000dd56 <__mdiff+0x5c>
8000dd8e:	80 ff       	mov.d %d15,%a15
8000dd90:	7f 7f 12 80 	jge.u %d15,%d7,8000ddb4 <__mdiff+0xba>
8000dd94:	44 f5       	ld.w %d5,[%a15+]
8000dd96:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000dd9a:	8f 05 1f 50 	sh %d5,%d5,-16
8000dd9e:	42 34       	add %d4,%d3
8000dda0:	8f 04 3f f0 	sha %d15,%d4,-16
8000dda4:	42 5f       	add %d15,%d5
8000dda6:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000ddaa:	8f 0f 3f 30 	sha %d3,%d15,-16
8000ddae:	74 34       	st.w [%a3],%d4
8000ddb0:	b0 43       	add.a %a3,4
8000ddb2:	3c ee       	j 8000dd8e <__mdiff+0x94>
8000ddb4:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000ddb8:	ee 03       	jnz %d15,8000ddbe <__mdiff+0xc4>
8000ddba:	c2 f2       	add %d2,-1
8000ddbc:	3c fc       	j 8000ddb4 <__mdiff+0xba>
8000ddbe:	59 22 10 00 	st.w [%a2]16,%d2
8000ddc2:	00 90       	ret 

8000ddc4 <__d2b>:
8000ddc4:	20 08       	sub.a %sp,8
8000ddc6:	02 48       	mov %d8,%d4
8000ddc8:	82 14       	mov %d4,1
8000ddca:	02 59       	mov %d9,%d5
8000ddcc:	40 5d       	mov.aa %a13,%a5
8000ddce:	40 6c       	mov.aa %a12,%a6
8000ddd0:	6d ff 7b fd 	call 8000d8c6 <_Balloc>
8000ddd4:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000ddd8:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000dddc:	40 2f       	mov.aa %a15,%a2
8000ddde:	76 93       	jz %d9,8000dde4 <__d2b+0x20>
8000dde0:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000dde4:	59 a2 04 00 	st.w [%sp]4,%d2
8000dde8:	df 08 20 00 	jeq %d8,0,8000de28 <__d2b+0x64>
8000ddec:	d9 a4 08 00 	lea %a4,[%sp]8
8000ddf0:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000ddf4:	40 a4       	mov.aa %a4,%sp
8000ddf6:	6d ff fe fd 	call 8000d9f2 <__lo0bits>
8000ddfa:	58 00       	ld.w %d15,[%sp]0
8000ddfc:	76 2f       	jz %d2,8000de1a <__d2b+0x56>
8000ddfe:	19 a4 04 00 	ld.w %d4,[%sp]4
8000de02:	8b 02 02 31 	rsub %d3,%d2,32
8000de06:	0f 34 00 30 	sh %d3,%d4,%d3
8000de0a:	a6 3f       	or %d15,%d3
8000de0c:	68 5f       	st.w [%a15]20,%d15
8000de0e:	8b 02 00 f1 	rsub %d15,%d2,0
8000de12:	0f f4 00 f0 	sh %d15,%d4,%d15
8000de16:	78 01       	st.w [%sp]4,%d15
8000de18:	3c 02       	j 8000de1c <__d2b+0x58>
8000de1a:	68 5f       	st.w [%a15]20,%d15
8000de1c:	58 01       	ld.w %d15,[%sp]4
8000de1e:	82 28       	mov %d8,2
8000de20:	ea 18       	cmovn %d8,%d15,1
8000de22:	68 6f       	st.w [%a15]24,%d15
8000de24:	68 48       	st.w [%a15]16,%d8
8000de26:	3c 0c       	j 8000de3e <__d2b+0x7a>
8000de28:	d9 a4 04 00 	lea %a4,[%sp]4
8000de2c:	6d ff e3 fd 	call 8000d9f2 <__lo0bits>
8000de30:	58 01       	ld.w %d15,[%sp]4
8000de32:	1b 02 02 20 	addi %d2,%d2,32
8000de36:	68 5f       	st.w [%a15]20,%d15
8000de38:	82 1f       	mov %d15,1
8000de3a:	68 4f       	st.w [%a15]16,%d15
8000de3c:	82 18       	mov %d8,1
8000de3e:	76 98       	jz %d9,8000de4e <__d2b+0x8a>
8000de40:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000de44:	42 29       	add %d9,%d2
8000de46:	74 d9       	st.w [%a13],%d9
8000de48:	8b 52 03 21 	rsub %d2,%d2,53
8000de4c:	3c 0d       	j 8000de66 <__d2b+0xa2>
8000de4e:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000de52:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000de56:	74 d2       	st.w [%a13],%d2
8000de58:	19 24 10 00 	ld.w %d4,[%a2]16
8000de5c:	6d ff aa fd 	call 8000d9b0 <__hi0bits>
8000de60:	06 58       	sh %d8,5
8000de62:	0b 28 80 20 	sub %d2,%d8,%d2
8000de66:	74 c2       	st.w [%a12],%d2
8000de68:	40 f2       	mov.aa %a2,%a15
8000de6a:	00 90       	ret 

8000de6c <__fpclassifyd>:
8000de6c:	0f 45 a0 f0 	or %d15,%d5,%d4
8000de70:	82 22       	mov %d2,2
8000de72:	6e 1d       	jz %d15,8000deac <__fpclassifyd+0x40>
8000de74:	7b 00 00 38 	movh %d3,32768
8000de78:	3a 53       	eq %d15,%d3,%d5
8000de7a:	8b 04 00 f4 	and.eq %d15,%d4,0
8000de7e:	8b 04 00 62 	eq %d6,%d4,0
8000de82:	ee 15       	jnz %d15,8000deac <__fpclassifyd+0x40>
8000de84:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000de88:	7b 00 fe f7 	movh %d15,32736
8000de8c:	9b 05 ff 3f 	addih %d3,%d5,65520
8000de90:	82 42       	mov %d2,4
8000de92:	3f f3 0d 80 	jlt.u %d3,%d15,8000deac <__fpclassifyd+0x40>
8000de96:	7b 00 01 f0 	movh %d15,16
8000de9a:	82 32       	mov %d2,3
8000de9c:	3f f5 08 80 	jlt.u %d5,%d15,8000deac <__fpclassifyd+0x40>
8000dea0:	7b 00 ff 27 	movh %d2,32752
8000dea4:	0b 25 00 51 	eq %d5,%d5,%d2
8000dea8:	0f 56 80 20 	and %d2,%d6,%d5
8000deac:	00 90       	ret 

8000deae <__ssprint_r>:
8000deae:	4c 62       	ld.w %d15,[%a6]8
8000deb0:	20 08       	sub.a %sp,8
8000deb2:	40 4e       	mov.aa %a14,%a4
8000deb4:	40 5f       	mov.aa %a15,%a5
8000deb6:	40 6c       	mov.aa %a12,%a6
8000deb8:	54 6c       	ld.w %d12,[%a6]
8000deba:	6e 30       	jz %d15,8000df1a <__ssprint_r+0x6c>
8000debc:	a0 02       	mov.a %a2,0
8000debe:	b5 a2 04 00 	st.a [%sp]4,%a2
8000dec2:	82 09       	mov %d9,0
8000dec4:	3b 00 48 e0 	mov %d14,1152
8000dec8:	3b f0 b7 df 	mov %d13,-1153
8000decc:	3c 0a       	j 8000dee0 <__ssprint_r+0x32>
8000dece:	60 c2       	mov.a %a2,%d12
8000ded0:	d4 22       	ld.a %a2,[%a2]
8000ded2:	b5 a2 04 00 	st.a [%sp]4,%a2
8000ded6:	60 c2       	mov.a %a2,%d12
8000ded8:	1b 8c 00 c0 	addi %d12,%d12,8
8000dedc:	19 29 04 00 	ld.w %d9,[%a2]4
8000dee0:	df 09 f7 7f 	jeq %d9,0,8000dece <__ssprint_r+0x20>
8000dee4:	48 28       	ld.w %d8,[%a15]8
8000dee6:	3f 89 5a 80 	jlt.u %d9,%d8,8000df9a <__ssprint_r+0xec>
8000deea:	88 62       	ld.h %d2,[%a15]12
8000deec:	0f e2 80 f0 	and %d15,%d2,%d14
8000def0:	ee 19       	jnz %d15,8000df22 <__ssprint_r+0x74>
8000def2:	3f 89 54 80 	jlt.u %d9,%d8,8000df9a <__ssprint_r+0xec>
8000def6:	c8 04       	ld.a %a4,[%a15]0
8000def8:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000defc:	02 84       	mov %d4,%d8
8000defe:	6d 00 81 00 	call 8000e000 <memmove>
8000df02:	4c f2       	ld.w %d15,[%a15]8
8000df04:	a2 8f       	sub %d15,%d8
8000df06:	68 2f       	st.w [%a15]8,%d15
8000df08:	4c f0       	ld.w %d15,[%a15]0
8000df0a:	42 f8       	add %d8,%d15
8000df0c:	4c c2       	ld.w %d15,[%a12]8
8000df0e:	68 08       	st.w [%a15]0,%d8
8000df10:	52 99       	sub %d9,%d15,%d9
8000df12:	59 c9 08 00 	st.w [%a12]8,%d9
8000df16:	df 09 dc ff 	jne %d9,0,8000dece <__ssprint_r+0x20>
8000df1a:	82 0f       	mov %d15,0
8000df1c:	6c c1       	st.w [%a12]4,%d15
8000df1e:	82 02       	mov %d2,0
8000df20:	00 90       	ret 
8000df22:	c8 45       	ld.a %a5,[%a15]16
8000df24:	48 5a       	ld.w %d10,[%a15]20
8000df26:	4c f0       	ld.w %d15,[%a15]0
8000df28:	80 53       	mov.d %d3,%a5
8000df2a:	53 3a 20 a0 	mul %d10,%d10,3
8000df2e:	a2 3f       	sub %d15,%d3
8000df30:	82 23       	mov %d3,2
8000df32:	4b 3a 01 a2 	div %e10,%d10,%d3
8000df36:	92 13       	add %d3,%d15,1
8000df38:	42 93       	add %d3,%d9
8000df3a:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000df3e:	40 e4       	mov.aa %a4,%a14
8000df40:	02 a4       	mov %d4,%d10
8000df42:	6f a2 12 00 	jz.t %d2,10,8000df66 <__ssprint_r+0xb8>
8000df46:	6d ff 0b e9 	call 8000b15c <_malloc_r>
8000df4a:	40 2d       	mov.aa %a13,%a2
8000df4c:	bd 02 15 00 	jz.a %a2,8000df76 <__ssprint_r+0xc8>
8000df50:	c8 45       	ld.a %a5,[%a15]16
8000df52:	40 24       	mov.aa %a4,%a2
8000df54:	02 f4       	mov %d4,%d15
8000df56:	6d ff aa fc 	call 8000d8aa <memcpy>
8000df5a:	88 62       	ld.h %d2,[%a15]12
8000df5c:	26 d2       	and %d2,%d13
8000df5e:	8f 02 48 21 	or %d2,%d2,128
8000df62:	a8 62       	st.h [%a15]12,%d2
8000df64:	3c 13       	j 8000df8a <__ssprint_r+0xdc>
8000df66:	6d 00 7d 00 	call 8000e060 <_realloc_r>
8000df6a:	40 2d       	mov.aa %a13,%a2
8000df6c:	7c 2f       	jnz.a %a2,8000df8a <__ssprint_r+0xdc>
8000df6e:	c8 45       	ld.a %a5,[%a15]16
8000df70:	40 e4       	mov.aa %a4,%a14
8000df72:	6d ff ea eb 	call 8000b746 <_free_r>
8000df76:	da 0c       	mov %d15,12
8000df78:	6c e0       	st.w [%a14]0,%d15
8000df7a:	8c f6       	ld.h %d15,[%a15]12
8000df7c:	82 f2       	mov %d2,-1
8000df7e:	96 40       	or %d15,64
8000df80:	a8 6f       	st.h [%a15]12,%d15
8000df82:	82 0f       	mov %d15,0
8000df84:	6c c2       	st.w [%a12]8,%d15
8000df86:	6c c1       	st.w [%a12]4,%d15
8000df88:	00 90       	ret 
8000df8a:	e8 4d       	st.a [%a15]16,%a13
8000df8c:	10 dd       	addsc.a %a13,%a13,%d15,0
8000df8e:	68 5a       	st.w [%a15]20,%d10
8000df90:	a2 fa       	sub %d10,%d15
8000df92:	e8 0d       	st.a [%a15]0,%a13
8000df94:	02 98       	mov %d8,%d9
8000df96:	68 2a       	st.w [%a15]8,%d10
8000df98:	3c ad       	j 8000def2 <__ssprint_r+0x44>
8000df9a:	02 98       	mov %d8,%d9
8000df9c:	3c ad       	j 8000def6 <__ssprint_r+0x48>

8000df9e <_calloc_r>:
8000df9e:	e2 54       	mul %d4,%d5
8000dfa0:	6d ff de e8 	call 8000b15c <_malloc_r>
8000dfa4:	40 2f       	mov.aa %a15,%a2
8000dfa6:	a0 02       	mov.a %a2,0
8000dfa8:	bd 0f 2b 00 	jz.a %a15,8000dffe <_calloc_r+0x60>
8000dfac:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000dfb0:	8f 35 c0 51 	andn %d5,%d5,3
8000dfb4:	c2 c5       	add %d5,-4
8000dfb6:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000dfba:	ee 1d       	jnz %d15,8000dff4 <_calloc_r+0x56>
8000dfbc:	8b 45 61 f2 	lt.u %d15,%d5,20
8000dfc0:	40 f2       	mov.aa %a2,%a15
8000dfc2:	ee 14       	jnz %d15,8000dfea <_calloc_r+0x4c>
8000dfc4:	82 0f       	mov %d15,0
8000dfc6:	68 0f       	st.w [%a15]0,%d15
8000dfc8:	68 1f       	st.w [%a15]4,%d15
8000dfca:	8b c5 a1 22 	ge.u %d2,%d5,28
8000dfce:	d9 f2 08 00 	lea %a2,[%a15]8
8000dfd2:	76 2c       	jz %d2,8000dfea <_calloc_r+0x4c>
8000dfd4:	68 2f       	st.w [%a15]8,%d15
8000dfd6:	68 3f       	st.w [%a15]12,%d15
8000dfd8:	8b 45 02 52 	eq %d5,%d5,36
8000dfdc:	d9 f2 10 00 	lea %a2,[%a15]16
8000dfe0:	76 55       	jz %d5,8000dfea <_calloc_r+0x4c>
8000dfe2:	68 4f       	st.w [%a15]16,%d15
8000dfe4:	d9 f2 18 00 	lea %a2,[%a15]24
8000dfe8:	68 5f       	st.w [%a15]20,%d15
8000dfea:	82 0f       	mov %d15,0
8000dfec:	6c 20       	st.w [%a2]0,%d15
8000dfee:	6c 21       	st.w [%a2]4,%d15
8000dff0:	6c 22       	st.w [%a2]8,%d15
8000dff2:	3c 05       	j 8000dffc <_calloc_r+0x5e>
8000dff4:	40 f4       	mov.aa %a4,%a15
8000dff6:	82 04       	mov %d4,0
8000dff8:	6d 00 2c 00 	call 8000e050 <memset>
8000dffc:	40 f2       	mov.aa %a2,%a15
8000dffe:	00 90       	ret 

8000e000 <memmove>:
8000e000:	80 46       	mov.d %d6,%a4
8000e002:	80 52       	mov.d %d2,%a5
8000e004:	7f 62 16 80 	jge.u %d2,%d6,8000e030 <memmove+0x30>
8000e008:	0b 42 00 50 	add %d5,%d2,%d4
8000e00c:	7f 56 12 80 	jge.u %d6,%d5,8000e030 <memmove+0x30>
8000e010:	60 4f       	mov.a %a15,%d4
8000e012:	02 42       	mov %d2,%d4
8000e014:	c2 f2       	add %d2,-1
8000e016:	fd f0 03 00 	loop %a15,8000e01c <memmove+0x1c>
8000e01a:	3c 19       	j 8000e04c <memmove+0x4c>
8000e01c:	5a 42       	sub %d15,%d2,%d4
8000e01e:	60 f2       	mov.a %a2,%d15
8000e020:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000e024:	1a 62       	add %d15,%d2,%d6
8000e026:	79 23 00 00 	ld.b %d3,[%a2]0
8000e02a:	60 f2       	mov.a %a2,%d15
8000e02c:	34 23       	st.b [%a2],%d3
8000e02e:	3c f3       	j 8000e014 <memmove+0x14>
8000e030:	60 4f       	mov.a %a15,%d4
8000e032:	a0 02       	mov.a %a2,0
8000e034:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000e038:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000e03c:	fd f0 03 00 	loop %a15,8000e042 <memmove+0x42>
8000e040:	3c 06       	j 8000e04c <memmove+0x4c>
8000e042:	79 33 00 00 	ld.b %d3,[%a3]0
8000e046:	b0 12       	add.a %a2,1
8000e048:	34 43       	st.b [%a4],%d3
8000e04a:	3c f5       	j 8000e034 <memmove+0x34>
8000e04c:	60 62       	mov.a %a2,%d6
8000e04e:	00 90       	ret 

8000e050 <memset>:
8000e050:	40 42       	mov.aa %a2,%a4
8000e052:	40 4f       	mov.aa %a15,%a4
8000e054:	9f 05 03 80 	jned %d5,0,8000e05a <memset+0xa>
8000e058:	00 90       	ret 
8000e05a:	28 04       	st.b [%a15]0,%d4
8000e05c:	b0 1f       	add.a %a15,1
8000e05e:	3c fb       	j 8000e054 <memset+0x4>

8000e060 <_realloc_r>:
8000e060:	40 4d       	mov.aa %a13,%a4
8000e062:	40 5f       	mov.aa %a15,%a5
8000e064:	02 49       	mov %d9,%d4
8000e066:	7c 53       	jnz.a %a5,8000e06c <_realloc_r+0xc>
8000e068:	1d ff 7a e8 	j 8000b15c <_malloc_r>
8000e06c:	6d ff c5 ea 	call 8000b5f6 <__malloc_lock>
8000e070:	1b b9 00 20 	addi %d2,%d9,11
8000e074:	8b 72 61 f2 	lt.u %d15,%d2,23
8000e078:	8f 72 c0 21 	andn %d2,%d2,7
8000e07c:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000e080:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000e084:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000e088:	8b 0f 20 25 	or.lt %d2,%d15,0
8000e08c:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000e090:	8f 33 c0 81 	andn %d8,%d3,3
8000e094:	76 25       	jz %d2,8000e09e <_realloc_r+0x3e>
8000e096:	da 0c       	mov %d15,12
8000e098:	6c d0       	st.w [%a13]0,%d15
8000e09a:	1d 00 56 01 	j 8000e346 <_realloc_r+0x2e6>
8000e09e:	7f f8 ac 01 	jge %d8,%d15,8000e3f6 <_realloc_r+0x396>
8000e0a2:	7b 00 00 c7 	movh %d12,28672
8000e0a6:	60 c3       	mov.a %a3,%d12
8000e0a8:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000e0ac:	d9 34 20 40 	lea %a4,[%a3]288
8000e0b0:	99 43 08 00 	ld.a %a3,[%a4]8
8000e0b4:	80 4c       	mov.d %d12,%a4
8000e0b6:	19 2b 04 00 	ld.w %d11,[%a2]4
8000e0ba:	7d 32 0a 00 	jeq.a %a2,%a3,8000e0ce <_realloc_r+0x6e>
8000e0be:	8f 1b c0 21 	andn %d2,%d11,1
8000e0c2:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000e0c6:	19 42 04 00 	ld.w %d2,[%a4]4
8000e0ca:	6f 02 2b 80 	jnz.t %d2,0,8000e120 <_realloc_r+0xc0>
8000e0ce:	8f 3b c0 b1 	andn %d11,%d11,3
8000e0d2:	0b 8b 00 20 	add %d2,%d11,%d8
8000e0d6:	7d 32 1b 80 	jne.a %a2,%a3,8000e10c <_realloc_r+0xac>
8000e0da:	1b 0f 01 40 	addi %d4,%d15,16
8000e0de:	3f 42 23 00 	jlt %d2,%d4,8000e124 <_realloc_r+0xc4>
8000e0e2:	10 ee       	addsc.a %a14,%a14,%d15,0
8000e0e4:	60 c2       	mov.a %a2,%d12
8000e0e6:	a2 f2       	sub %d2,%d15
8000e0e8:	b5 2e 08 00 	st.a [%a2]8,%a14
8000e0ec:	8f 12 40 21 	or %d2,%d2,1
8000e0f0:	59 e2 04 00 	st.w [%a14]4,%d2
8000e0f4:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e0f8:	40 d4       	mov.aa %a4,%a13
8000e0fa:	8f 12 00 21 	and %d2,%d2,1
8000e0fe:	a6 2f       	or %d15,%d2
8000e100:	59 ff fc ff 	st.w [%a15]-4,%d15
8000e104:	6d ff 7a ea 	call 8000b5f8 <__malloc_unlock>
8000e108:	40 f2       	mov.aa %a2,%a15
8000e10a:	00 90       	ret 
8000e10c:	3f f2 0c 00 	jlt %d2,%d15,8000e124 <_realloc_r+0xc4>
8000e110:	cc 23       	ld.a %a15,[%a2]12
8000e112:	99 22 08 00 	ld.a %a2,[%a2]8
8000e116:	02 28       	mov %d8,%d2
8000e118:	ec 23       	st.a [%a2]12,%a15
8000e11a:	e8 22       	st.a [%a15]8,%a2
8000e11c:	1d 00 6d 01 	j 8000e3f6 <_realloc_r+0x396>
8000e120:	82 0b       	mov %d11,0
8000e122:	a0 02       	mov.a %a2,0
8000e124:	6f 03 08 81 	jnz.t %d3,0,8000e334 <_realloc_r+0x2d4>
8000e128:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000e12c:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000e130:	19 ca 04 00 	ld.w %d10,[%a12]4
8000e134:	8f 3a c0 a1 	andn %d10,%d10,3
8000e138:	42 8a       	add %d10,%d8
8000e13a:	bd 02 b3 00 	jz.a %a2,8000e2a0 <_realloc_r+0x240>
8000e13e:	42 ab       	add %d11,%d10
8000e140:	7d 32 5f 80 	jne.a %a2,%a3,8000e1fe <_realloc_r+0x19e>
8000e144:	1b 0f 01 20 	addi %d2,%d15,16
8000e148:	3f 2b ac 00 	jlt %d11,%d2,8000e2a0 <_realloc_r+0x240>
8000e14c:	40 ce       	mov.aa %a14,%a12
8000e14e:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e152:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000e156:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e15a:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e15e:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e162:	b5 23 08 00 	st.a [%a2]8,%a3
8000e166:	df 02 36 80 	jne %d2,0,8000e1d2 <_realloc_r+0x172>
8000e16a:	8b 44 61 22 	lt.u %d2,%d4,20
8000e16e:	40 e3       	mov.aa %a3,%a14
8000e170:	df 02 28 80 	jne %d2,0,8000e1c0 <_realloc_r+0x160>
8000e174:	48 02       	ld.w %d2,[%a15]0
8000e176:	59 c2 08 00 	st.w [%a12]8,%d2
8000e17a:	48 13       	ld.w %d3,[%a15]4
8000e17c:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e180:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e184:	f6 26       	jnz %d2,8000e190 <_realloc_r+0x130>
8000e186:	d9 c3 10 00 	lea %a3,[%a12]16
8000e18a:	d9 ff 08 00 	lea %a15,[%a15]8
8000e18e:	3c 19       	j 8000e1c0 <_realloc_r+0x160>
8000e190:	48 22       	ld.w %d2,[%a15]8
8000e192:	8b 44 02 82 	eq %d8,%d4,36
8000e196:	59 c2 10 00 	st.w [%a12]16,%d2
8000e19a:	48 33       	ld.w %d3,[%a15]12
8000e19c:	59 c3 14 00 	st.w [%a12]20,%d3
8000e1a0:	f6 86       	jnz %d8,8000e1ac <_realloc_r+0x14c>
8000e1a2:	d9 c3 18 00 	lea %a3,[%a12]24
8000e1a6:	d9 ff 10 00 	lea %a15,[%a15]16
8000e1aa:	3c 0b       	j 8000e1c0 <_realloc_r+0x160>
8000e1ac:	48 42       	ld.w %d2,[%a15]16
8000e1ae:	d9 c3 20 00 	lea %a3,[%a12]32
8000e1b2:	59 c2 18 00 	st.w [%a12]24,%d2
8000e1b6:	48 53       	ld.w %d3,[%a15]20
8000e1b8:	d9 ff 18 00 	lea %a15,[%a15]24
8000e1bc:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e1c0:	48 02       	ld.w %d2,[%a15]0
8000e1c2:	74 32       	st.w [%a3],%d2
8000e1c4:	48 13       	ld.w %d3,[%a15]4
8000e1c6:	59 33 04 00 	st.w [%a3]4,%d3
8000e1ca:	48 22       	ld.w %d2,[%a15]8
8000e1cc:	59 32 08 00 	st.w [%a3]8,%d2
8000e1d0:	3c 05       	j 8000e1da <_realloc_r+0x17a>
8000e1d2:	40 e4       	mov.aa %a4,%a14
8000e1d4:	40 f5       	mov.aa %a5,%a15
8000e1d6:	6d ff 15 ff 	call 8000e000 <memmove>
8000e1da:	10 cf       	addsc.a %a15,%a12,%d15,0
8000e1dc:	60 c2       	mov.a %a2,%d12
8000e1de:	a2 fb       	sub %d11,%d15
8000e1e0:	ec 22       	st.a [%a2]8,%a15
8000e1e2:	8f 1b 40 b1 	or %d11,%d11,1
8000e1e6:	68 1b       	st.w [%a15]4,%d11
8000e1e8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e1ec:	40 d4       	mov.aa %a4,%a13
8000e1ee:	8f 12 00 21 	and %d2,%d2,1
8000e1f2:	a6 2f       	or %d15,%d2
8000e1f4:	6c c1       	st.w [%a12]4,%d15
8000e1f6:	6d ff 01 ea 	call 8000b5f8 <__malloc_unlock>
8000e1fa:	40 e2       	mov.aa %a2,%a14
8000e1fc:	00 90       	ret 
8000e1fe:	3f fb 51 00 	jlt %d11,%d15,8000e2a0 <_realloc_r+0x240>
8000e202:	99 23 0c 00 	ld.a %a3,[%a2]12
8000e206:	99 22 08 00 	ld.a %a2,[%a2]8
8000e20a:	40 c4       	mov.aa %a4,%a12
8000e20c:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e210:	b5 23 0c 00 	st.a [%a2]12,%a3
8000e214:	b5 32 08 00 	st.a [%a3]8,%a2
8000e218:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e21c:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e220:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e224:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e228:	b5 23 08 00 	st.a [%a2]8,%a3
8000e22c:	df 02 35 80 	jne %d2,0,8000e296 <_realloc_r+0x236>
8000e230:	8b 44 61 22 	lt.u %d2,%d4,20
8000e234:	df 02 28 80 	jne %d2,0,8000e284 <_realloc_r+0x224>
8000e238:	48 02       	ld.w %d2,[%a15]0
8000e23a:	59 c2 08 00 	st.w [%a12]8,%d2
8000e23e:	48 13       	ld.w %d3,[%a15]4
8000e240:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e244:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e248:	f6 26       	jnz %d2,8000e254 <_realloc_r+0x1f4>
8000e24a:	d9 c4 10 00 	lea %a4,[%a12]16
8000e24e:	d9 ff 08 00 	lea %a15,[%a15]8
8000e252:	3c 19       	j 8000e284 <_realloc_r+0x224>
8000e254:	48 22       	ld.w %d2,[%a15]8
8000e256:	8b 44 02 82 	eq %d8,%d4,36
8000e25a:	59 c2 10 00 	st.w [%a12]16,%d2
8000e25e:	48 33       	ld.w %d3,[%a15]12
8000e260:	59 c3 14 00 	st.w [%a12]20,%d3
8000e264:	f6 86       	jnz %d8,8000e270 <_realloc_r+0x210>
8000e266:	d9 c4 18 00 	lea %a4,[%a12]24
8000e26a:	d9 ff 10 00 	lea %a15,[%a15]16
8000e26e:	3c 0b       	j 8000e284 <_realloc_r+0x224>
8000e270:	48 42       	ld.w %d2,[%a15]16
8000e272:	d9 c4 20 00 	lea %a4,[%a12]32
8000e276:	59 c2 18 00 	st.w [%a12]24,%d2
8000e27a:	48 53       	ld.w %d3,[%a15]20
8000e27c:	d9 ff 18 00 	lea %a15,[%a15]24
8000e280:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e284:	48 02       	ld.w %d2,[%a15]0
8000e286:	74 42       	st.w [%a4],%d2
8000e288:	48 13       	ld.w %d3,[%a15]4
8000e28a:	59 43 04 00 	st.w [%a4]4,%d3
8000e28e:	48 22       	ld.w %d2,[%a15]8
8000e290:	59 42 08 00 	st.w [%a4]8,%d2
8000e294:	3c 04       	j 8000e29c <_realloc_r+0x23c>
8000e296:	40 f5       	mov.aa %a5,%a15
8000e298:	6d ff b4 fe 	call 8000e000 <memmove>
8000e29c:	02 b8       	mov %d8,%d11
8000e29e:	3c 45       	j 8000e328 <_realloc_r+0x2c8>
8000e2a0:	3f fa 4a 00 	jlt %d10,%d15,8000e334 <_realloc_r+0x2d4>
8000e2a4:	40 c4       	mov.aa %a4,%a12
8000e2a6:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e2aa:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e2ae:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e2b2:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e2b6:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e2ba:	b5 23 08 00 	st.a [%a2]8,%a3
8000e2be:	df 02 37 80 	jne %d2,0,8000e32c <_realloc_r+0x2cc>
8000e2c2:	8b 44 61 22 	lt.u %d2,%d4,20
8000e2c6:	df 02 28 80 	jne %d2,0,8000e316 <_realloc_r+0x2b6>
8000e2ca:	48 03       	ld.w %d3,[%a15]0
8000e2cc:	59 c3 08 00 	st.w [%a12]8,%d3
8000e2d0:	48 12       	ld.w %d2,[%a15]4
8000e2d2:	59 c2 0c 00 	st.w [%a12]12,%d2
8000e2d6:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e2da:	f6 26       	jnz %d2,8000e2e6 <_realloc_r+0x286>
8000e2dc:	d9 c4 10 00 	lea %a4,[%a12]16
8000e2e0:	d9 ff 08 00 	lea %a15,[%a15]8
8000e2e4:	3c 19       	j 8000e316 <_realloc_r+0x2b6>
8000e2e6:	48 23       	ld.w %d3,[%a15]8
8000e2e8:	8b 44 02 82 	eq %d8,%d4,36
8000e2ec:	59 c3 10 00 	st.w [%a12]16,%d3
8000e2f0:	48 32       	ld.w %d2,[%a15]12
8000e2f2:	59 c2 14 00 	st.w [%a12]20,%d2
8000e2f6:	f6 86       	jnz %d8,8000e302 <_realloc_r+0x2a2>
8000e2f8:	d9 c4 18 00 	lea %a4,[%a12]24
8000e2fc:	d9 ff 10 00 	lea %a15,[%a15]16
8000e300:	3c 0b       	j 8000e316 <_realloc_r+0x2b6>
8000e302:	48 43       	ld.w %d3,[%a15]16
8000e304:	d9 c4 20 00 	lea %a4,[%a12]32
8000e308:	59 c3 18 00 	st.w [%a12]24,%d3
8000e30c:	48 52       	ld.w %d2,[%a15]20
8000e30e:	d9 ff 18 00 	lea %a15,[%a15]24
8000e312:	59 c2 1c 00 	st.w [%a12]28,%d2
8000e316:	48 03       	ld.w %d3,[%a15]0
8000e318:	74 43       	st.w [%a4],%d3
8000e31a:	48 12       	ld.w %d2,[%a15]4
8000e31c:	59 42 04 00 	st.w [%a4]4,%d2
8000e320:	48 23       	ld.w %d3,[%a15]8
8000e322:	59 43 08 00 	st.w [%a4]8,%d3
8000e326:	02 a8       	mov %d8,%d10
8000e328:	40 ce       	mov.aa %a14,%a12
8000e32a:	3c 66       	j 8000e3f6 <_realloc_r+0x396>
8000e32c:	40 f5       	mov.aa %a5,%a15
8000e32e:	6d ff 69 fe 	call 8000e000 <memmove>
8000e332:	3c fa       	j 8000e326 <_realloc_r+0x2c6>
8000e334:	40 d4       	mov.aa %a4,%a13
8000e336:	02 94       	mov %d4,%d9
8000e338:	6d ff 12 e7 	call 8000b15c <_malloc_r>
8000e33c:	40 2c       	mov.aa %a12,%a2
8000e33e:	7c 26       	jnz.a %a2,8000e34a <_realloc_r+0x2ea>
8000e340:	40 d4       	mov.aa %a4,%a13
8000e342:	6d ff 5b e9 	call 8000b5f8 <__malloc_unlock>
8000e346:	a0 02       	mov.a %a2,0
8000e348:	00 90       	ret 
8000e34a:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e34e:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000e352:	8f 12 c0 21 	andn %d2,%d2,1
8000e356:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000e35a:	80 32       	mov.d %d2,%a3
8000e35c:	80 23       	mov.d %d3,%a2
8000e35e:	5f 32 08 80 	jne %d2,%d3,8000e36e <_realloc_r+0x30e>
8000e362:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e366:	8f 32 c0 21 	andn %d2,%d2,3
8000e36a:	42 28       	add %d8,%d2
8000e36c:	3c 45       	j 8000e3f6 <_realloc_r+0x396>
8000e36e:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e372:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000e376:	ee 33       	jnz %d15,8000e3dc <_realloc_r+0x37c>
8000e378:	8b 44 61 f2 	lt.u %d15,%d4,20
8000e37c:	40 c3       	mov.aa %a3,%a12
8000e37e:	40 f2       	mov.aa %a2,%a15
8000e380:	ee 23       	jnz %d15,8000e3c6 <_realloc_r+0x366>
8000e382:	4c f0       	ld.w %d15,[%a15]0
8000e384:	d9 c3 08 00 	lea %a3,[%a12]8
8000e388:	6c c0       	st.w [%a12]0,%d15
8000e38a:	48 12       	ld.w %d2,[%a15]4
8000e38c:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000e390:	59 c2 04 00 	st.w [%a12]4,%d2
8000e394:	d9 f2 08 00 	lea %a2,[%a15]8
8000e398:	6e 17       	jz %d15,8000e3c6 <_realloc_r+0x366>
8000e39a:	48 23       	ld.w %d3,[%a15]8
8000e39c:	8b 44 02 82 	eq %d8,%d4,36
8000e3a0:	59 c3 08 00 	st.w [%a12]8,%d3
8000e3a4:	4c f3       	ld.w %d15,[%a15]12
8000e3a6:	d9 c3 10 00 	lea %a3,[%a12]16
8000e3aa:	6c c3       	st.w [%a12]12,%d15
8000e3ac:	d9 f2 10 00 	lea %a2,[%a15]16
8000e3b0:	76 8b       	jz %d8,8000e3c6 <_realloc_r+0x366>
8000e3b2:	48 42       	ld.w %d2,[%a15]16
8000e3b4:	d9 c3 18 00 	lea %a3,[%a12]24
8000e3b8:	59 c2 10 00 	st.w [%a12]16,%d2
8000e3bc:	48 53       	ld.w %d3,[%a15]20
8000e3be:	d9 f2 18 00 	lea %a2,[%a15]24
8000e3c2:	59 c3 14 00 	st.w [%a12]20,%d3
8000e3c6:	4c 20       	ld.w %d15,[%a2]0
8000e3c8:	6c 30       	st.w [%a3]0,%d15
8000e3ca:	19 22 04 00 	ld.w %d2,[%a2]4
8000e3ce:	59 32 04 00 	st.w [%a3]4,%d2
8000e3d2:	19 23 08 00 	ld.w %d3,[%a2]8
8000e3d6:	59 33 08 00 	st.w [%a3]8,%d3
8000e3da:	3c 05       	j 8000e3e4 <_realloc_r+0x384>
8000e3dc:	40 c4       	mov.aa %a4,%a12
8000e3de:	40 f5       	mov.aa %a5,%a15
8000e3e0:	6d ff 10 fe 	call 8000e000 <memmove>
8000e3e4:	40 d4       	mov.aa %a4,%a13
8000e3e6:	40 f5       	mov.aa %a5,%a15
8000e3e8:	6d ff af e9 	call 8000b746 <_free_r>
8000e3ec:	40 d4       	mov.aa %a4,%a13
8000e3ee:	6d ff 05 e9 	call 8000b5f8 <__malloc_unlock>
8000e3f2:	40 c2       	mov.aa %a2,%a12
8000e3f4:	00 90       	ret 
8000e3f6:	0b f8 80 20 	sub %d2,%d8,%d15
8000e3fa:	8b 02 61 42 	lt.u %d4,%d2,16
8000e3fe:	19 e3 04 00 	ld.w %d3,[%a14]4
8000e402:	df 04 16 80 	jne %d4,0,8000e42e <_realloc_r+0x3ce>
8000e406:	8f 13 00 31 	and %d3,%d3,1
8000e40a:	10 e5       	addsc.a %a5,%a14,%d15,0
8000e40c:	a6 3f       	or %d15,%d3
8000e40e:	6c e1       	st.w [%a14]4,%d15
8000e410:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000e414:	8f 12 40 f1 	or %d15,%d2,1
8000e418:	b7 10 21 20 	imask %e2,1,0,1
8000e41c:	6c 51       	st.w [%a5]4,%d15
8000e41e:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e422:	40 d4       	mov.aa %a4,%a13
8000e424:	d9 55 08 00 	lea %a5,[%a5]8
8000e428:	6d ff 8f e9 	call 8000b746 <_free_r>
8000e42c:	3c 0c       	j 8000e444 <_realloc_r+0x3e4>
8000e42e:	8f 13 00 31 	and %d3,%d3,1
8000e432:	a6 83       	or %d3,%d8
8000e434:	59 e3 04 00 	st.w [%a14]4,%d3
8000e438:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000e43c:	b7 10 21 20 	imask %e2,1,0,1
8000e440:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e444:	40 d4       	mov.aa %a4,%a13
8000e446:	6d ff d9 e8 	call 8000b5f8 <__malloc_unlock>
8000e44a:	d9 e2 08 00 	lea %a2,[%a14]8
8000e44e:	00 90       	ret 

8000e450 <_exit>:
8000e450:	76 43       	jz %d4,8000e456 <_exit+0x6>
8000e452:	60 4e       	mov.a %a14,%d4
8000e454:	3c 04       	j 8000e45c <_exit+0xc>
8000e456:	bb d0 00 f9 	mov.u %d15,36877
8000e45a:	60 fe       	mov.a %a14,%d15
8000e45c:	00 a0       	debug 
8000e45e:	3c 00       	j 8000e45e <_exit+0xe>

8000e460 <sbrk>:
8000e460:	91 00 00 f7 	movh.a %a15,28672
8000e464:	19 ff 90 50 	ld.w %d15,[%a15]2384 <70000950 <heap_top.2289>>
8000e468:	7b 00 00 27 	movh %d2,28672
8000e46c:	42 f4       	add %d4,%d15
8000e46e:	1b 02 f3 20 	addi %d2,%d2,3888
8000e472:	7f 42 09 80 	jge.u %d2,%d4,8000e484 <sbrk+0x24>
8000e476:	6d 00 13 00 	call 8000e49c <__errno>
8000e47a:	da 0c       	mov %d15,12
8000e47c:	6c 20       	st.w [%a2]0,%d15
8000e47e:	a0 02       	mov.a %a2,0
8000e480:	b0 f2       	add.a %a2,-1
8000e482:	00 90       	ret 
8000e484:	7b 00 00 27 	movh %d2,28672
8000e488:	1b 02 f3 20 	addi %d2,%d2,3888
8000e48c:	7f 24 04 80 	jge.u %d4,%d2,8000e494 <sbrk+0x34>
8000e490:	6d 00 0b 00 	call 8000e4a6 <abort>
8000e494:	59 f4 90 50 	st.w [%a15]2384,%d4
8000e498:	60 f2       	mov.a %a2,%d15
8000e49a:	00 90       	ret 

8000e49c <__errno>:
8000e49c:	91 00 00 27 	movh.a %a2,28672
8000e4a0:	d9 22 e8 c0 	lea %a2,[%a2]3880 <70000f28 <_my_errno>>
8000e4a4:	00 90       	ret 

8000e4a6 <abort>:
8000e4a6:	00 a0       	debug 
8000e4a8:	7b e0 ea fd 	movh %d15,57006
8000e4ac:	1b ff ee fb 	addi %d15,%d15,-16657
8000e4b0:	60 fe       	mov.a %a14,%d15
8000e4b2:	1d ff cf ff 	j 8000e450 <_exit>
8000e4b6:	3c 00       	j 8000e4b6 <abort+0x10>

8000e4b8 <__eqdf2>:
8000e4b8:	20 38       	sub.a %sp,56
8000e4ba:	40 a4       	mov.aa %a4,%sp
8000e4bc:	d9 a5 10 00 	lea %a5,[%sp]16
8000e4c0:	89 a4 40 09 	st.d [%sp],%e4
8000e4c4:	89 a6 48 09 	st.d [%sp]8,%e6
8000e4c8:	6d ff 84 e5 	call 8000afd0 <__unpack_d>
8000e4cc:	d9 a4 08 00 	lea %a4,[%sp]8
8000e4d0:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4d4:	6d ff 7e e5 	call 8000afd0 <__unpack_d>
8000e4d8:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e4dc:	82 12       	mov %d2,1
8000e4de:	bf 2f 0c 80 	jlt.u %d15,2,8000e4f6 <__eqdf2+0x3e>
8000e4e2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e4e6:	bf 2f 08 80 	jlt.u %d15,2,8000e4f6 <__eqdf2+0x3e>
8000e4ea:	d9 a4 10 00 	lea %a4,[%sp]16
8000e4ee:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4f2:	6d 00 26 01 	call 8000e73e <__fpcmp_parts_d>
8000e4f6:	00 90       	ret 

8000e4f8 <__nedf2>:
8000e4f8:	20 38       	sub.a %sp,56
8000e4fa:	40 a4       	mov.aa %a4,%sp
8000e4fc:	d9 a5 10 00 	lea %a5,[%sp]16
8000e500:	89 a4 40 09 	st.d [%sp],%e4
8000e504:	89 a6 48 09 	st.d [%sp]8,%e6
8000e508:	6d ff 64 e5 	call 8000afd0 <__unpack_d>
8000e50c:	d9 a4 08 00 	lea %a4,[%sp]8
8000e510:	d9 a5 24 00 	lea %a5,[%sp]36
8000e514:	6d ff 5e e5 	call 8000afd0 <__unpack_d>
8000e518:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e51c:	82 12       	mov %d2,1
8000e51e:	bf 2f 0c 80 	jlt.u %d15,2,8000e536 <__nedf2+0x3e>
8000e522:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e526:	bf 2f 08 80 	jlt.u %d15,2,8000e536 <__nedf2+0x3e>
8000e52a:	d9 a4 10 00 	lea %a4,[%sp]16
8000e52e:	d9 a5 24 00 	lea %a5,[%sp]36
8000e532:	6d 00 06 01 	call 8000e73e <__fpcmp_parts_d>
8000e536:	00 90       	ret 

8000e538 <__gtdf2>:
8000e538:	20 38       	sub.a %sp,56
8000e53a:	40 a4       	mov.aa %a4,%sp
8000e53c:	d9 a5 10 00 	lea %a5,[%sp]16
8000e540:	89 a4 40 09 	st.d [%sp],%e4
8000e544:	89 a6 48 09 	st.d [%sp]8,%e6
8000e548:	6d ff 44 e5 	call 8000afd0 <__unpack_d>
8000e54c:	d9 a4 08 00 	lea %a4,[%sp]8
8000e550:	d9 a5 24 00 	lea %a5,[%sp]36
8000e554:	6d ff 3e e5 	call 8000afd0 <__unpack_d>
8000e558:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e55c:	82 f2       	mov %d2,-1
8000e55e:	bf 2f 0c 80 	jlt.u %d15,2,8000e576 <__gtdf2+0x3e>
8000e562:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e566:	bf 2f 08 80 	jlt.u %d15,2,8000e576 <__gtdf2+0x3e>
8000e56a:	d9 a4 10 00 	lea %a4,[%sp]16
8000e56e:	d9 a5 24 00 	lea %a5,[%sp]36
8000e572:	6d 00 e6 00 	call 8000e73e <__fpcmp_parts_d>
8000e576:	00 90       	ret 

8000e578 <__gedf2>:
8000e578:	20 38       	sub.a %sp,56
8000e57a:	40 a4       	mov.aa %a4,%sp
8000e57c:	d9 a5 10 00 	lea %a5,[%sp]16
8000e580:	89 a4 40 09 	st.d [%sp],%e4
8000e584:	89 a6 48 09 	st.d [%sp]8,%e6
8000e588:	6d ff 24 e5 	call 8000afd0 <__unpack_d>
8000e58c:	d9 a4 08 00 	lea %a4,[%sp]8
8000e590:	d9 a5 24 00 	lea %a5,[%sp]36
8000e594:	6d ff 1e e5 	call 8000afd0 <__unpack_d>
8000e598:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e59c:	82 f2       	mov %d2,-1
8000e59e:	bf 2f 0c 80 	jlt.u %d15,2,8000e5b6 <__gedf2+0x3e>
8000e5a2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e5a6:	bf 2f 08 80 	jlt.u %d15,2,8000e5b6 <__gedf2+0x3e>
8000e5aa:	d9 a4 10 00 	lea %a4,[%sp]16
8000e5ae:	d9 a5 24 00 	lea %a5,[%sp]36
8000e5b2:	6d 00 c6 00 	call 8000e73e <__fpcmp_parts_d>
8000e5b6:	00 90       	ret 

8000e5b8 <__ltdf2>:
8000e5b8:	20 38       	sub.a %sp,56
8000e5ba:	40 a4       	mov.aa %a4,%sp
8000e5bc:	d9 a5 10 00 	lea %a5,[%sp]16
8000e5c0:	89 a4 40 09 	st.d [%sp],%e4
8000e5c4:	89 a6 48 09 	st.d [%sp]8,%e6
8000e5c8:	6d ff 04 e5 	call 8000afd0 <__unpack_d>
8000e5cc:	d9 a4 08 00 	lea %a4,[%sp]8
8000e5d0:	d9 a5 24 00 	lea %a5,[%sp]36
8000e5d4:	6d ff fe e4 	call 8000afd0 <__unpack_d>
8000e5d8:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e5dc:	82 12       	mov %d2,1
8000e5de:	bf 2f 0c 80 	jlt.u %d15,2,8000e5f6 <__ltdf2+0x3e>
8000e5e2:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e5e6:	bf 2f 08 80 	jlt.u %d15,2,8000e5f6 <__ltdf2+0x3e>
8000e5ea:	d9 a4 10 00 	lea %a4,[%sp]16
8000e5ee:	d9 a5 24 00 	lea %a5,[%sp]36
8000e5f2:	6d 00 a6 00 	call 8000e73e <__fpcmp_parts_d>
8000e5f6:	00 90       	ret 

8000e5f8 <__fixdfsi>:
8000e5f8:	20 20       	sub.a %sp,32
8000e5fa:	d9 a4 20 00 	lea %a4,[%sp]32
8000e5fe:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000e602:	d9 a5 0c 00 	lea %a5,[%sp]12
8000e606:	6d ff e5 e4 	call 8000afd0 <__unpack_d>
8000e60a:	0c ac       	ld.bu %d15,[%sp]12
8000e60c:	82 02       	mov %d2,0
8000e60e:	bf 3f 1b 80 	jlt.u %d15,3,8000e644 <__fixdfsi+0x4c>
8000e612:	5e 48       	jne %d15,4,8000e622 <__fixdfsi+0x2a>
8000e614:	7b 00 00 28 	movh %d2,32768
8000e618:	58 04       	ld.w %d15,[%sp]16
8000e61a:	1b f2 ff 3f 	addi %d3,%d2,-1
8000e61e:	6a 32       	cmovn %d2,%d15,%d3
8000e620:	00 90       	ret 
8000e622:	19 a6 14 00 	ld.w %d6,[%sp]20
8000e626:	82 02       	mov %d2,0
8000e628:	0e 6e       	jltz %d6,8000e644 <__fixdfsi+0x4c>
8000e62a:	8b f6 81 f2 	ge %d15,%d6,31
8000e62e:	ee f3       	jnz %d15,8000e614 <__fixdfsi+0x1c>
8000e630:	09 a4 58 09 	ld.d %e4,[%sp]24
8000e634:	8b c6 03 61 	rsub %d6,%d6,60
8000e638:	6d ff 09 e1 	call 8000a84a <__lshrdi3>
8000e63c:	58 04       	ld.w %d15,[%sp]16
8000e63e:	8b 02 00 41 	rsub %d4,%d2,0
8000e642:	2a 42       	cmov %d2,%d15,%d4
8000e644:	00 90       	ret 

8000e646 <__floatunsidf>:
8000e646:	20 18       	sub.a %sp,24
8000e648:	82 0f       	mov %d15,0
8000e64a:	78 02       	st.w [%sp]8,%d15
8000e64c:	f6 44       	jnz %d4,8000e654 <__floatunsidf+0xe>
8000e64e:	82 2f       	mov %d15,2
8000e650:	2c a4       	st.b [%sp]4,%d15
8000e652:	3c 0f       	j 8000e670 <__floatunsidf+0x2a>
8000e654:	82 3f       	mov %d15,3
8000e656:	2c a4       	st.b [%sp]4,%d15
8000e658:	0f 04 b0 f1 	clz %d15,%d4
8000e65c:	1b df 01 60 	addi %d6,%d15,29
8000e660:	82 05       	mov %d5,0
8000e662:	6d ff d9 e3 	call 8000ae14 <__ashldi3>
8000e666:	8b ff 01 f1 	rsub %d15,%d15,31
8000e66a:	89 a2 50 09 	st.d [%sp]16,%e2
8000e66e:	78 03       	st.w [%sp]12,%d15
8000e670:	d9 a4 04 00 	lea %a4,[%sp]4
8000e674:	1d ff 25 e4 	j 8000aebe <__pack_d>

8000e678 <__udivdi3>:
8000e678:	0f 67 a0 20 	or %d2,%d7,%d6
8000e67c:	0b 45 10 a8 	mov %e10,%d5,%d4
8000e680:	02 6f       	mov %d15,%d6
8000e682:	02 7c       	mov %d12,%d7
8000e684:	d2 f8       	mov %e8,-1
8000e686:	df 02 46 00 	jeq %d2,0,8000e712 <__udivdi3+0x9a>
8000e68a:	8f 07 40 21 	or %d2,%d7,0
8000e68e:	f6 2d       	jnz %d2,8000e6a8 <__udivdi3+0x30>
8000e690:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000e694:	d2 04       	mov %e4,0
8000e696:	02 a4       	mov %d4,%d10
8000e698:	42 95       	add %d5,%d9
8000e69a:	6d 00 a5 00 	call 8000e7e4 <__udiv6432>
8000e69e:	82 04       	mov %d4,0
8000e6a0:	02 85       	mov %d5,%d8
8000e6a2:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000e6a6:	3c 36       	j 8000e712 <__udivdi3+0x9a>
8000e6a8:	0b 7b 00 21 	eq %d2,%d11,%d7
8000e6ac:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000e6b0:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000e6b4:	d2 08       	mov %e8,0
8000e6b6:	df 02 2e 80 	jne %d2,0,8000e712 <__udivdi3+0x9a>
8000e6ba:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000e6be:	0f 07 b0 d1 	clz %d13,%d7
8000e6c2:	60 5f       	mov.a %a15,%d5
8000e6c4:	0b 67 10 48 	mov %e4,%d7,%d6
8000e6c8:	02 d6       	mov %d6,%d13
8000e6ca:	6d ff a5 e3 	call 8000ae14 <__ashldi3>
8000e6ce:	8f fb 1f e0 	sh %d14,%d11,-1
8000e6d2:	80 f4       	mov.d %d4,%a15
8000e6d4:	02 36       	mov %d6,%d3
8000e6d6:	02 e5       	mov %d5,%d14
8000e6d8:	6d 00 86 00 	call 8000e7e4 <__udiv6432>
8000e6dc:	8b fd 01 d1 	rsub %d13,%d13,31
8000e6e0:	8b 0d 00 31 	rsub %d3,%d13,0
8000e6e4:	0f 32 00 30 	sh %d3,%d2,%d3
8000e6e8:	02 32       	mov %d2,%d3
8000e6ea:	8b f2 9f 80 	addx %d8,%d2,-1
8000e6ee:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000e6f2:	82 03       	mov %d3,0
8000e6f4:	8b f3 bf 90 	addc %d9,%d3,-1
8000e6f8:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000e6fc:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000e700:	0b cb 00 41 	eq %d4,%d11,%d12
8000e704:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000e708:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000e70c:	f6 43       	jnz %d4,8000e712 <__udivdi3+0x9a>
8000e70e:	0b 23 10 88 	mov %e8,%d3,%d2
8000e712:	0b 89 10 28 	mov %e2,%d9,%d8
8000e716:	00 90       	ret 

<<<<<<< HEAD
8000e6f8 <__udiv6432>:
8000e6f8:	02 53       	mov %d3,%d5
8000e6fa:	82 f2       	mov %d2,-1
8000e6fc:	7f 65 4b 80 	jge.u %d5,%d6,8000e792 <__udiv6432+0x9a>
8000e700:	0f 06 b0 21 	clz %d2,%d6
8000e704:	0f 26 00 60 	sh %d6,%d6,%d2
8000e708:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e70c:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e710:	8f 06 1f 70 	sh %d7,%d6,-16
8000e714:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e718:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e71c:	0f 24 00 20 	sh %d2,%d4,%d2
8000e720:	02 05       	mov %d5,%d0
8000e722:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e726:	e2 80       	mul %d0,%d8
8000e728:	8f 02 1f b0 	sh %d11,%d2,-16
8000e72c:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e730:	82 0c       	mov %d12,0
8000e732:	7b 10 00 90 	movh %d9,1
8000e736:	7f 95 09 80 	jge.u %d5,%d9,8000e748 <__udiv6432+0x50>
8000e73a:	8f 01 01 f0 	sh %d15,%d1,16
8000e73e:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e742:	42 bf       	add %d15,%d11
8000e744:	7f af 07 80 	jge.u %d15,%d10,8000e752 <__udiv6432+0x5a>
8000e748:	42 71       	add %d1,%d7
8000e74a:	c2 f5       	add %d5,-1
8000e74c:	a2 8c       	sub %d12,%d8
8000e74e:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e736 <__udiv6432+0x3e>
8000e752:	8f 03 01 30 	sh %d3,%d3,16
8000e756:	42 3b       	add %d11,%d3
8000e758:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e75c:	82 0a       	mov %d10,0
8000e75e:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e762:	7b 10 00 10 	movh %d1,1
8000e766:	02 03       	mov %d3,%d0
8000e768:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e76c:	e2 80       	mul %d0,%d8
8000e76e:	7f 13 09 80 	jge.u %d3,%d1,8000e780 <__udiv6432+0x88>
8000e772:	8f 06 01 f0 	sh %d15,%d6,16
8000e776:	0b 0a 00 90 	add %d9,%d10,%d0
8000e77a:	42 2f       	add %d15,%d2
8000e77c:	7f 9f 07 80 	jge.u %d15,%d9,8000e78a <__udiv6432+0x92>
8000e780:	42 76       	add %d6,%d7
8000e782:	c2 f3       	add %d3,-1
8000e784:	a2 8a       	sub %d10,%d8
8000e786:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e76e <__udiv6432+0x76>
8000e78a:	8f 05 01 50 	sh %d5,%d5,16
8000e78e:	0b 53 00 20 	add %d2,%d3,%d5
8000e792:	00 90       	ret 
8000e794:	00 00       	nop 
=======
8000a53a:	40 24       	mov.aa %a4,%a2
8000a53c:	6d ff c1 ff 	call 8000a4be <osEE_tc_change_context_from_isr2_end>
8000a540:	3c fc       	j 8000a538 <osEE_hal_terminate_ctx+0x5c>

8000a542 <__lshrdi3>:
8000a542:	6f 56 0c 80 	jnz.t %d6,5,8000a55a <__lshrdi3+0x18>
8000a546:	8b 06 02 71 	rsub %d7,%d6,32
8000a54a:	32 56       	rsub %d6
8000a54c:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a550:	0f 65 00 30 	sh %d3,%d5,%d6
8000a554:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a558:	00 90       	ret 
8000a55a:	8b 06 02 60 	add %d6,%d6,32
8000a55e:	32 56       	rsub %d6
8000a560:	0f 65 00 20 	sh %d2,%d5,%d6
8000a564:	82 03       	mov %d3,0
8000a566:	00 90       	ret 

8000a568 <__floatundisf>:
8000a568:	7b 00 02 20 	movh %d2,32
8000a56c:	0b 25 30 f1 	lt.u %d15,%d5,%d2
8000a570:	02 4a       	mov %d10,%d4
8000a572:	02 54       	mov %d4,%d5
8000a574:	ee 08       	jnz %d15,8000a584 <__floatundisf+0x1c>
8000a576:	b7 0a 95 f5 	insert %d15,%d10,0,11,21
8000a57a:	6e 05       	jz %d15,8000a584 <__floatundisf+0x1c>
8000a57c:	b7 0a 0b a0 	insert %d10,%d10,0,0,11
8000a580:	b7 fa 81 a5 	insert %d10,%d10,15,11,1
8000a584:	6d 00 ea 02 	call 8000ab58 <__floatunsidf>
8000a588:	0b 23 10 48 	mov %e4,%d3,%d2
8000a58c:	82 06       	mov %d6,0
8000a58e:	7b 00 1f 74 	movh %d7,16880
8000a592:	6d 00 34 01 	call 8000a7fa <__muldf3>
8000a596:	02 a4       	mov %d4,%d10
8000a598:	0b 23 10 88 	mov %e8,%d3,%d2
8000a59c:	6d 00 de 02 	call 8000ab58 <__floatunsidf>
8000a5a0:	0b 89 10 48 	mov %e4,%d9,%d8
8000a5a4:	0b 23 10 68 	mov %e6,%d3,%d2
8000a5a8:	6d 00 ed 00 	call 8000a782 <__adddf3>
8000a5ac:	0b 23 10 48 	mov %e4,%d3,%d2
8000a5b0:	1d 00 b6 02 	j 8000ab1c <__truncdfsf2>

8000a5b4 <__extendsfdf2>:
8000a5b4:	20 20       	sub.a %sp,32
8000a5b6:	d9 a4 20 00 	lea %a4,[%sp]32
8000a5ba:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a5be:	d9 a5 10 00 	lea %a5,[%sp]16
8000a5c2:	6d 00 f1 02 	call 8000aba4 <__unpack_f>
8000a5c6:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a5ca:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a5ce:	8f e2 1f f0 	sh %d15,%d2,-2
8000a5d2:	8f e2 01 20 	sh %d2,%d2,30
8000a5d6:	74 a2       	st.w [%sp],%d2
8000a5d8:	78 01       	st.w [%sp]4,%d15
8000a5da:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a5de:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a5e2:	1d 00 8e 02 	j 8000aafe <__make_dp>

8000a5e6 <_fpadd_parts>:
8000a5e6:	0c 40       	ld.bu %d15,[%a4]0
8000a5e8:	40 42       	mov.aa %a2,%a4
8000a5ea:	bf 2f cb 80 	jlt.u %d15,2,8000a780 <_fpadd_parts+0x19a>
8000a5ee:	14 52       	ld.bu %d2,[%a5]
8000a5f0:	40 52       	mov.aa %a2,%a5
8000a5f2:	bf 22 c7 80 	jlt.u %d2,2,8000a780 <_fpadd_parts+0x19a>
8000a5f6:	5e 4e       	jne %d15,4,8000a612 <_fpadd_parts+0x2c>
8000a5f8:	40 42       	mov.aa %a2,%a4
8000a5fa:	df 42 c3 80 	jne %d2,4,8000a780 <_fpadd_parts+0x19a>
8000a5fe:	19 42 04 00 	ld.w %d2,[%a4]4
8000a602:	4c 51       	ld.w %d15,[%a5]4
8000a604:	5f f2 be 00 	jeq %d2,%d15,8000a780 <_fpadd_parts+0x19a>
8000a608:	91 00 00 f8 	movh.a %a15,32768
8000a60c:	d9 f2 d0 90 	lea %a2,[%a15]3664 <80000e50 <__thenan_df>>
8000a610:	00 90       	ret 
8000a612:	40 52       	mov.aa %a2,%a5
8000a614:	df 42 b6 00 	jeq %d2,4,8000a780 <_fpadd_parts+0x19a>
8000a618:	df 22 11 80 	jne %d2,2,8000a63a <_fpadd_parts+0x54>
8000a61c:	40 42       	mov.aa %a2,%a4
8000a61e:	df 2f b1 80 	jne %d15,2,8000a780 <_fpadd_parts+0x19a>
8000a622:	40 63       	mov.aa %a3,%a6
8000a624:	a0 4f       	mov.a %a15,4
8000a626:	44 4f       	ld.w %d15,[%a4+]
8000a628:	64 3f       	st.w [%a3+],%d15
8000a62a:	fc fe       	loop %a15,8000a626 <_fpadd_parts+0x40>
8000a62c:	4c 21       	ld.w %d15,[%a2]4
8000a62e:	19 52 04 00 	ld.w %d2,[%a5]4
8000a632:	40 62       	mov.aa %a2,%a6
8000a634:	26 2f       	and %d15,%d2
8000a636:	6c 61       	st.w [%a6]4,%d15
8000a638:	00 90       	ret 
8000a63a:	40 52       	mov.aa %a2,%a5
8000a63c:	df 2f a2 00 	jeq %d15,2,8000a780 <_fpadd_parts+0x19a>
8000a640:	4c 42       	ld.w %d15,[%a4]8
8000a642:	19 52 08 00 	ld.w %d2,[%a5]8
8000a646:	40 6f       	mov.aa %a15,%a6
8000a648:	52 23       	sub %d3,%d15,%d2
8000a64a:	0b 30 c0 c1 	abs %d12,%d3
8000a64e:	8b 0c 84 42 	ge %d4,%d12,64
8000a652:	40 5c       	mov.aa %a12,%a5
8000a654:	40 4d       	mov.aa %a13,%a4
8000a656:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a65a:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a65e:	df 04 35 80 	jne %d4,0,8000a6c8 <_fpadd_parts+0xe2>
8000a662:	bf 13 19 00 	jlt %d3,1,8000a694 <_fpadd_parts+0xae>
8000a666:	0b 89 10 48 	mov %e4,%d9,%d8
8000a66a:	02 c6       	mov %d6,%d12
8000a66c:	6d ff 6b ff 	call 8000a542 <__lshrdi3>
8000a670:	d2 14       	mov %e4,1
8000a672:	02 c6       	mov %d6,%d12
8000a674:	02 2e       	mov %d14,%d2
8000a676:	02 3d       	mov %d13,%d3
8000a678:	6d 00 89 02 	call 8000ab8a <__ashldi3>
8000a67c:	8b f2 9f 20 	addx %d2,%d2,-1
8000a680:	8b f3 bf 30 	addc %d3,%d3,-1
8000a684:	26 82       	and %d2,%d8
8000a686:	26 93       	and %d3,%d9
8000a688:	a6 23       	or %d3,%d2
8000a68a:	02 e8       	mov %d8,%d14
8000a68c:	8b 03 00 85 	or.ne %d8,%d3,0
8000a690:	02 d9       	mov %d9,%d13
8000a692:	3c 21       	j 8000a6d4 <_fpadd_parts+0xee>
8000a694:	df 03 20 00 	jeq %d3,0,8000a6d4 <_fpadd_parts+0xee>
8000a698:	0b ab 10 48 	mov %e4,%d11,%d10
8000a69c:	02 c6       	mov %d6,%d12
8000a69e:	6d ff 52 ff 	call 8000a542 <__lshrdi3>
8000a6a2:	d2 14       	mov %e4,1
8000a6a4:	02 c6       	mov %d6,%d12
8000a6a6:	02 2e       	mov %d14,%d2
8000a6a8:	02 3d       	mov %d13,%d3
8000a6aa:	6d 00 70 02 	call 8000ab8a <__ashldi3>
8000a6ae:	8b f2 9f 20 	addx %d2,%d2,-1
8000a6b2:	8b f3 bf 30 	addc %d3,%d3,-1
8000a6b6:	26 a2       	and %d2,%d10
8000a6b8:	26 b3       	and %d3,%d11
8000a6ba:	a6 23       	or %d3,%d2
8000a6bc:	02 ea       	mov %d10,%d14
8000a6be:	42 cf       	add %d15,%d12
8000a6c0:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a6c4:	02 db       	mov %d11,%d13
8000a6c6:	3c 07       	j 8000a6d4 <_fpadd_parts+0xee>
8000a6c8:	3f f2 05 00 	jlt %d2,%d15,8000a6d2 <_fpadd_parts+0xec>
8000a6cc:	02 2f       	mov %d15,%d2
8000a6ce:	d2 0a       	mov %e10,0
8000a6d0:	3c 02       	j 8000a6d4 <_fpadd_parts+0xee>
8000a6d2:	d2 08       	mov %e8,0
8000a6d4:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a6d8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a6dc:	5f 24 34 00 	jeq %d4,%d2,8000a744 <_fpadd_parts+0x15e>
8000a6e0:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a6e4:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a6e8:	76 45       	jz %d4,8000a6f2 <_fpadd_parts+0x10c>
8000a6ea:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a6ee:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a6f2:	0e 37       	jltz %d3,8000a700 <_fpadd_parts+0x11a>
8000a6f4:	82 04       	mov %d4,0
8000a6f6:	68 14       	st.w [%a15]4,%d4
8000a6f8:	68 2f       	st.w [%a15]8,%d15
8000a6fa:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a6fe:	3c 0c       	j 8000a716 <_fpadd_parts+0x130>
8000a700:	68 2f       	st.w [%a15]8,%d15
8000a702:	8b 03 00 f1 	rsub %d15,%d3,0
8000a706:	82 14       	mov %d4,1
8000a708:	8b 02 00 31 	rsub %d3,%d2,0
8000a70c:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a710:	68 14       	st.w [%a15]4,%d4
8000a712:	68 33       	st.w [%a15]12,%d3
8000a714:	68 4f       	st.w [%a15]16,%d15
8000a716:	82 f5       	mov %d5,-1
8000a718:	06 c5       	sh %d5,-4
8000a71a:	48 32       	ld.w %d2,[%a15]12
8000a71c:	48 43       	ld.w %d3,[%a15]16
8000a71e:	8b f2 9f 60 	addx %d6,%d2,-1
8000a722:	8b f3 bf 40 	addc %d4,%d3,-1
8000a726:	3a 54       	eq %d15,%d4,%d5
8000a728:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a72c:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a730:	6e 12       	jz %d15,8000a754 <_fpadd_parts+0x16e>
8000a732:	4c f2       	ld.w %d15,[%a15]8
8000a734:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a738:	c2 ff       	add %d15,-1
8000a73a:	06 12       	sh %d2,1
8000a73c:	68 32       	st.w [%a15]12,%d2
8000a73e:	68 43       	st.w [%a15]16,%d3
8000a740:	68 2f       	st.w [%a15]8,%d15
8000a742:	3c ec       	j 8000a71a <_fpadd_parts+0x134>
8000a744:	0b a8 40 20 	addx %d2,%d8,%d10
8000a748:	68 2f       	st.w [%a15]8,%d15
8000a74a:	0b b9 50 f0 	addc %d15,%d9,%d11
8000a74e:	68 14       	st.w [%a15]4,%d4
8000a750:	68 32       	st.w [%a15]12,%d2
8000a752:	68 4f       	st.w [%a15]16,%d15
8000a754:	82 3f       	mov %d15,3
8000a756:	28 0f       	st.b [%a15]0,%d15
8000a758:	4c f4       	ld.w %d15,[%a15]16
8000a75a:	7b 00 00 42 	movh %d4,8192
8000a75e:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000a762:	48 32       	ld.w %d2,[%a15]12
8000a764:	40 f2       	mov.aa %a2,%a15
8000a766:	f6 3d       	jnz %d3,8000a780 <_fpadd_parts+0x19a>
8000a768:	8f 12 00 31 	and %d3,%d2,1
8000a76c:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000a770:	06 ff       	sh %d15,-1
8000a772:	96 00       	or %d15,0
8000a774:	68 4f       	st.w [%a15]16,%d15
8000a776:	4c f2       	ld.w %d15,[%a15]8
8000a778:	a6 32       	or %d2,%d3
8000a77a:	c2 1f       	add %d15,1
8000a77c:	68 32       	st.w [%a15]12,%d2
8000a77e:	68 2f       	st.w [%a15]8,%d15
8000a780:	00 90       	ret 

8000a782 <__adddf3>:
8000a782:	20 50       	sub.a %sp,80
8000a784:	d9 a4 04 00 	lea %a4,[%sp]4
8000a788:	d9 a5 14 00 	lea %a5,[%sp]20
8000a78c:	89 a4 44 09 	st.d [%sp]4,%e4
8000a790:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a794:	6d 00 d9 02 	call 8000ad46 <__unpack_d>
8000a798:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a79c:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7a0:	6d 00 d3 02 	call 8000ad46 <__unpack_d>
8000a7a4:	d9 a4 14 00 	lea %a4,[%sp]20
8000a7a8:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7ac:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a7b0:	6d ff 1b ff 	call 8000a5e6 <_fpadd_parts>
8000a7b4:	40 24       	mov.aa %a4,%a2
8000a7b6:	1d 00 3f 02 	j 8000ac34 <__pack_d>

8000a7ba <__subdf3>:
8000a7ba:	20 50       	sub.a %sp,80
8000a7bc:	d9 a4 04 00 	lea %a4,[%sp]4
8000a7c0:	d9 a5 14 00 	lea %a5,[%sp]20
8000a7c4:	89 a4 44 09 	st.d [%sp]4,%e4
8000a7c8:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a7cc:	6d 00 bd 02 	call 8000ad46 <__unpack_d>
8000a7d0:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a7d4:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7d8:	6d 00 b7 02 	call 8000ad46 <__unpack_d>
8000a7dc:	58 0b       	ld.w %d15,[%sp]44
8000a7de:	d9 a4 14 00 	lea %a4,[%sp]20
8000a7e2:	8f 1f 80 f1 	xor %d15,%d15,1
8000a7e6:	d9 a5 28 00 	lea %a5,[%sp]40
8000a7ea:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a7ee:	78 0b       	st.w [%sp]44,%d15
8000a7f0:	6d ff fb fe 	call 8000a5e6 <_fpadd_parts>
8000a7f4:	40 24       	mov.aa %a4,%a2
8000a7f6:	1d 00 1f 02 	j 8000ac34 <__pack_d>

8000a7fa <__muldf3>:
8000a7fa:	20 50       	sub.a %sp,80
8000a7fc:	d9 a4 04 00 	lea %a4,[%sp]4
8000a800:	d9 a5 14 00 	lea %a5,[%sp]20
8000a804:	89 a4 44 09 	st.d [%sp]4,%e4
8000a808:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a80c:	6d 00 9d 02 	call 8000ad46 <__unpack_d>
8000a810:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a814:	d9 a5 28 00 	lea %a5,[%sp]40
8000a818:	6d 00 97 02 	call 8000ad46 <__unpack_d>
8000a81c:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000a820:	ff 23 0c 80 	jge.u %d3,2,8000a838 <__muldf3+0x3e>
8000a824:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a828:	58 0b       	ld.w %d15,[%sp]44
8000a82a:	d9 a4 14 00 	lea %a4,[%sp]20
8000a82e:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a832:	78 06       	st.w [%sp]24,%d15
8000a834:	1d 00 b3 00 	j 8000a99a <__muldf3+0x1a0>
8000a838:	39 af 28 00 	ld.bu %d15,[%sp]40
8000a83c:	ff 2f 0c 80 	jge.u %d15,2,8000a854 <__muldf3+0x5a>
8000a840:	58 0b       	ld.w %d15,[%sp]44
8000a842:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a846:	d9 a4 28 00 	lea %a4,[%sp]40
8000a84a:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a84e:	78 0b       	st.w [%sp]44,%d15
8000a850:	1d 00 a5 00 	j 8000a99a <__muldf3+0x1a0>
8000a854:	df 43 09 80 	jne %d3,4,8000a866 <__muldf3+0x6c>
8000a858:	91 00 00 48 	movh.a %a4,32768
8000a85c:	d9 44 d0 90 	lea %a4,[%a4]3664 <80000e50 <__thenan_df>>
8000a860:	df 2f 9d 00 	jeq %d15,2,8000a99a <__muldf3+0x1a0>
8000a864:	3c e0       	j 8000a824 <__muldf3+0x2a>
8000a866:	5e 48       	jne %d15,4,8000a876 <__muldf3+0x7c>
8000a868:	91 00 00 48 	movh.a %a4,32768
8000a86c:	d9 44 d0 90 	lea %a4,[%a4]3664 <80000e50 <__thenan_df>>
8000a870:	df 23 95 00 	jeq %d3,2,8000a99a <__muldf3+0x1a0>
8000a874:	3c e6       	j 8000a840 <__muldf3+0x46>
8000a876:	df 23 d7 7f 	jeq %d3,2,8000a824 <__muldf3+0x2a>
8000a87a:	df 2f e3 7f 	jeq %d15,2,8000a840 <__muldf3+0x46>
8000a87e:	58 08       	ld.w %d15,[%sp]32
8000a880:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000a884:	d2 00       	mov %e0,0
8000a886:	19 a0 34 00 	ld.w %d0,[%sp]52
8000a88a:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000a88e:	82 0c       	mov %d12,0
8000a890:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000a894:	19 aa 24 00 	ld.w %d10,[%sp]36
8000a898:	82 02       	mov %d2,0
8000a89a:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000a89e:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000a8a2:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000a8a6:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000a8aa:	82 0d       	mov %d13,0
8000a8ac:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000a8b0:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000a8b4:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000a8b8:	0b 54 10 08 	mov %e0,%d4,%d5
8000a8bc:	42 20       	add %d0,%d2
8000a8be:	3a 73       	eq %d15,%d3,%d7
8000a8c0:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000a8c4:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000a8c8:	8b 0f 00 62 	eq %d6,%d15,0
8000a8cc:	3a 50       	eq %d15,%d0,%d5
8000a8ce:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000a8d2:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000a8d6:	ba 0f       	eq %d15,%d15,0
8000a8d8:	53 1f 40 40 	mul.u %e4,%d15,1
8000a8dc:	02 38       	mov %d8,%d3
8000a8de:	82 09       	mov %d9,0
8000a8e0:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000a8e4:	02 5f       	mov %d15,%d5
8000a8e6:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000a8ea:	42 6f       	add %d15,%d6
8000a8ec:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000a8f0:	0b 4f 10 68 	mov %e6,%d15,%d4
8000a8f4:	0b 62 40 40 	addx %d4,%d2,%d6
8000a8f8:	0b 73 50 20 	addc %d2,%d3,%d7
8000a8fc:	58 07       	ld.w %d15,[%sp]28
8000a8fe:	19 a3 30 00 	ld.w %d3,[%sp]48
8000a902:	19 a5 18 00 	ld.w %d5,[%sp]24
8000a906:	42 3f       	add %d15,%d3
8000a908:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000a90c:	c2 4f       	add %d15,4
8000a90e:	0b 35 10 31 	ne %d3,%d5,%d3
8000a912:	59 a3 00 10 	st.w [%sp]64,%d3
8000a916:	7b 00 00 52 	movh %d5,8192
8000a91a:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000a91e:	df 03 1b 00 	jeq %d3,0,8000a954 <__muldf3+0x15a>
8000a922:	8f 14 00 31 	and %d3,%d4,1
8000a926:	76 37       	jz %d3,8000a934 <__muldf3+0x13a>
8000a928:	8f f0 1f 30 	sh %d3,%d0,-1
8000a92c:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000a930:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000a934:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000a938:	c2 1f       	add %d15,1
8000a93a:	06 f2       	sh %d2,-1
8000a93c:	3c ed       	j 8000a916 <__muldf3+0x11c>
8000a93e:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000a942:	06 14       	sh %d4,1
8000a944:	ce 04       	jgez %d0,8000a94c <__muldf3+0x152>
8000a946:	8f 14 40 51 	or %d5,%d4,1
8000a94a:	02 54       	mov %d4,%d5
8000a94c:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000a950:	c2 ff       	add %d15,-1
8000a952:	06 11       	sh %d1,1
8000a954:	7b 00 00 51 	movh %d5,4096
8000a958:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000a95c:	df 03 f1 ff 	jne %d3,0,8000a93e <__muldf3+0x144>
8000a960:	78 11       	st.w [%sp]68,%d15
8000a962:	02 4f       	mov %d15,%d4
8000a964:	16 ff       	and %d15,255
8000a966:	8b 0f 28 f2 	ne %d15,%d15,128
8000a96a:	ee 0f       	jnz %d15,8000a988 <__muldf3+0x18e>
8000a96c:	a6 10       	or %d0,%d1
8000a96e:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000a972:	8b 00 20 02 	ne %d0,%d0,0
8000a976:	0f f0 e0 00 	andn %d0,%d0,%d15
8000a97a:	76 07       	jz %d0,8000a988 <__muldf3+0x18e>
8000a97c:	8b 04 88 40 	addx %d4,%d4,128
8000a980:	8b 02 a0 20 	addc %d2,%d2,0
8000a984:	8f f4 cf 41 	andn %d4,%d4,255
8000a988:	d9 a4 10 10 	lea %a4,[%sp]80
8000a98c:	82 3f       	mov %d15,3
8000a98e:	59 a4 08 10 	st.w [%sp]72,%d4
8000a992:	59 a2 0c 10 	st.w [%sp]76,%d2
8000a996:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin1_TX_P33_12_OUT>>,%d15
8000a99a:	1d 00 4d 01 	j 8000ac34 <__pack_d>

8000a99e <__divdf3>:
8000a99e:	20 38       	sub.a %sp,56
8000a9a0:	40 a4       	mov.aa %a4,%sp
8000a9a2:	d9 a5 10 00 	lea %a5,[%sp]16
8000a9a6:	89 a4 40 09 	st.d [%sp],%e4
8000a9aa:	89 a6 48 09 	st.d [%sp]8,%e6
8000a9ae:	6d 00 cc 01 	call 8000ad46 <__unpack_d>
8000a9b2:	d9 a4 08 00 	lea %a4,[%sp]8
8000a9b6:	d9 a5 24 00 	lea %a5,[%sp]36
8000a9ba:	6d 00 c6 01 	call 8000ad46 <__unpack_d>
8000a9be:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000a9c2:	bf 22 76 80 	jlt.u %d2,2,8000aaae <__divdf3+0x110>
8000a9c6:	39 af 24 00 	ld.bu %d15,[%sp]36
8000a9ca:	d9 a4 24 00 	lea %a4,[%sp]36
8000a9ce:	bf 2f 72 80 	jlt.u %d15,2,8000aab2 <__divdf3+0x114>
8000a9d2:	19 a4 14 00 	ld.w %d4,[%sp]20
8000a9d6:	19 a3 28 00 	ld.w %d3,[%sp]40
8000a9da:	c6 43       	xor %d3,%d4
8000a9dc:	59 a3 14 00 	st.w [%sp]20,%d3
8000a9e0:	1b e2 ff 3f 	addi %d3,%d2,-2
8000a9e4:	8f d3 0f 31 	and %d3,%d3,253
8000a9e8:	f6 38       	jnz %d3,8000a9f8 <__divdf3+0x5a>
8000a9ea:	91 00 00 48 	movh.a %a4,32768
8000a9ee:	d9 44 d0 90 	lea %a4,[%a4]3664 <80000e50 <__thenan_df>>
8000a9f2:	5f f2 5e 80 	jne %d2,%d15,8000aaae <__divdf3+0x110>
8000a9f6:	3c 5e       	j 8000aab2 <__divdf3+0x114>
8000a9f8:	5e 47       	jne %d15,4,8000aa06 <__divdf3+0x68>
8000a9fa:	d2 02       	mov %e2,0
8000a9fc:	82 0f       	mov %d15,0
8000a9fe:	89 a2 5c 09 	st.d [%sp]28,%e2
8000aa02:	78 06       	st.w [%sp]24,%d15
8000aa04:	3c 55       	j 8000aaae <__divdf3+0x110>
8000aa06:	5e 25       	jne %d15,2,8000aa10 <__divdf3+0x72>
8000aa08:	82 4f       	mov %d15,4
8000aa0a:	e9 af 10 00 	st.b [%sp]16,%d15
8000aa0e:	3c 50       	j 8000aaae <__divdf3+0x110>
8000aa10:	58 06       	ld.w %d15,[%sp]24
8000aa12:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000aa16:	09 a4 70 09 	ld.d %e4,[%sp]48
8000aa1a:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000aa1e:	52 66       	sub %d6,%d15,%d6
8000aa20:	3a 53       	eq %d15,%d3,%d5
8000aa22:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000aa26:	59 a6 18 00 	st.w [%sp]24,%d6
8000aa2a:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000aa2e:	ee 07       	jnz %d15,8000aa3c <__divdf3+0x9e>
8000aa30:	c2 f6       	add %d6,-1
8000aa32:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000aa36:	59 a6 18 00 	st.w [%sp]24,%d6
8000aa3a:	06 12       	sh %d2,1
8000aa3c:	82 01       	mov %d1,0
8000aa3e:	7b 00 00 f1 	movh %d15,4096
8000aa42:	82 00       	mov %d0,0
8000aa44:	82 07       	mov %d7,0
8000aa46:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000aa4a:	0b 53 00 61 	eq %d6,%d3,%d5
8000aa4e:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000aa52:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000aa56:	f6 6b       	jnz %d6,8000aa6c <__divdf3+0xce>
8000aa58:	0f 10 a0 80 	or %d8,%d0,%d1
8000aa5c:	0f f7 a0 60 	or %d6,%d7,%d15
8000aa60:	0b 42 c0 20 	subx %d2,%d2,%d4
8000aa64:	02 80       	mov %d0,%d8
8000aa66:	02 67       	mov %d7,%d6
8000aa68:	0b 53 d0 30 	subc %d3,%d3,%d5
8000aa6c:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000aa70:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000aa74:	06 ff       	sh %d15,-1
8000aa76:	06 12       	sh %d2,1
8000aa78:	fd f0 e9 7f 	loop %a15,8000aa4a <__divdf3+0xac>
8000aa7c:	02 0f       	mov %d15,%d0
8000aa7e:	16 ff       	and %d15,255
8000aa80:	8b 0f 28 f2 	ne %d15,%d15,128
8000aa84:	0b 70 10 48 	mov %e4,%d0,%d7
8000aa88:	ee 0f       	jnz %d15,8000aaa6 <__divdf3+0x108>
8000aa8a:	a6 32       	or %d2,%d3
8000aa8c:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000aa90:	8b 02 20 22 	ne %d2,%d2,0
8000aa94:	0f f2 e0 20 	andn %d2,%d2,%d15
8000aa98:	76 27       	jz %d2,8000aaa6 <__divdf3+0x108>
8000aa9a:	8b 00 88 00 	addx %d0,%d0,128
8000aa9e:	8b 07 a0 40 	addc %d4,%d7,0
8000aaa2:	8f f0 cf 51 	andn %d5,%d0,255
8000aaa6:	59 a5 1c 00 	st.w [%sp]28,%d5
8000aaaa:	59 a4 20 00 	st.w [%sp]32,%d4
8000aaae:	d9 a4 10 00 	lea %a4,[%sp]16
8000aab2:	1d 00 c1 00 	j 8000ac34 <__pack_d>

8000aab6 <__floatsidf>:
8000aab6:	20 18       	sub.a %sp,24
8000aab8:	82 3f       	mov %d15,3
8000aaba:	2c a4       	st.b [%sp]4,%d15
8000aabc:	8f 14 1e f0 	sh %d15,%d4,-31
8000aac0:	78 02       	st.w [%sp]8,%d15
8000aac2:	f6 44       	jnz %d4,8000aaca <__floatsidf+0x14>
8000aac4:	82 2f       	mov %d15,2
8000aac6:	2c a4       	st.b [%sp]4,%d15
8000aac8:	3c 16       	j 8000aaf4 <__floatsidf+0x3e>
8000aaca:	6e 09       	jz %d15,8000aadc <__floatsidf+0x26>
8000aacc:	7b 00 00 f8 	movh %d15,32768
8000aad0:	82 02       	mov %d2,0
8000aad2:	7b 00 1e 3c 	movh %d3,49632
8000aad6:	5f f4 13 00 	jeq %d4,%d15,8000aafc <__floatsidf+0x46>
8000aada:	32 54       	rsub %d4
8000aadc:	0f 04 b0 f1 	clz %d15,%d4
8000aae0:	1b df 01 60 	addi %d6,%d15,29
8000aae4:	82 05       	mov %d5,0
8000aae6:	6d 00 52 00 	call 8000ab8a <__ashldi3>
8000aaea:	8b ff 01 f1 	rsub %d15,%d15,31
8000aaee:	89 a2 50 09 	st.d [%sp]16,%e2
8000aaf2:	78 03       	st.w [%sp]12,%d15
8000aaf4:	d9 a4 04 00 	lea %a4,[%sp]4
8000aaf8:	6d 00 9e 00 	call 8000ac34 <__pack_d>
8000aafc:	00 90       	ret 

8000aafe <__make_dp>:
8000aafe:	20 18       	sub.a %sp,24
8000ab00:	09 a2 58 09 	ld.d %e2,[%sp]24
8000ab04:	d9 a4 04 00 	lea %a4,[%sp]4
8000ab08:	e9 a4 04 00 	st.b [%sp]4,%d4
8000ab0c:	59 a5 08 00 	st.w [%sp]8,%d5
8000ab10:	59 a6 0c 00 	st.w [%sp]12,%d6
8000ab14:	89 a2 50 09 	st.d [%sp]16,%e2
8000ab18:	1d 00 8e 00 	j 8000ac34 <__pack_d>

8000ab1c <__truncdfsf2>:
8000ab1c:	20 20       	sub.a %sp,32
8000ab1e:	d9 a4 20 00 	lea %a4,[%sp]32
8000ab22:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000ab26:	d9 a5 0c 00 	lea %a5,[%sp]12
8000ab2a:	6d 00 0e 01 	call 8000ad46 <__unpack_d>
8000ab2e:	19 a7 18 00 	ld.w %d7,[%sp]24
8000ab32:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ab36:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000ab3a:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000ab3e:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000ab42:	02 23       	mov %d3,%d2
8000ab44:	8f 12 40 21 	or %d2,%d2,1
8000ab48:	19 a5 10 00 	ld.w %d5,[%sp]16
8000ab4c:	19 a6 14 00 	ld.w %d6,[%sp]20
8000ab50:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000ab54:	1d 00 65 00 	j 8000ac1e <__make_fp>

8000ab58 <__floatunsidf>:
8000ab58:	20 18       	sub.a %sp,24
8000ab5a:	82 0f       	mov %d15,0
8000ab5c:	78 02       	st.w [%sp]8,%d15
8000ab5e:	f6 44       	jnz %d4,8000ab66 <__floatunsidf+0xe>
8000ab60:	82 2f       	mov %d15,2
8000ab62:	2c a4       	st.b [%sp]4,%d15
8000ab64:	3c 0f       	j 8000ab82 <__floatunsidf+0x2a>
8000ab66:	82 3f       	mov %d15,3
8000ab68:	2c a4       	st.b [%sp]4,%d15
8000ab6a:	0f 04 b0 f1 	clz %d15,%d4
8000ab6e:	1b df 01 60 	addi %d6,%d15,29
8000ab72:	82 05       	mov %d5,0
8000ab74:	6d 00 0b 00 	call 8000ab8a <__ashldi3>
8000ab78:	8b ff 01 f1 	rsub %d15,%d15,31
8000ab7c:	89 a2 50 09 	st.d [%sp]16,%e2
8000ab80:	78 03       	st.w [%sp]12,%d15
8000ab82:	d9 a4 04 00 	lea %a4,[%sp]4
8000ab86:	1d 00 57 00 	j 8000ac34 <__pack_d>

8000ab8a <__ashldi3>:
8000ab8a:	6f 56 07 80 	jnz.t %d6,5,8000ab98 <__ashldi3+0xe>
8000ab8e:	0f 64 00 20 	sh %d2,%d4,%d6
8000ab92:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000ab96:	00 90       	ret 
8000ab98:	8b 06 1e 60 	add %d6,%d6,-32
8000ab9c:	82 02       	mov %d2,0
8000ab9e:	0f 64 00 30 	sh %d3,%d4,%d6
8000aba2:	00 90       	ret 

8000aba4 <__unpack_f>:
8000aba4:	54 43       	ld.w %d3,[%a4]
8000aba6:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000abaa:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000abae:	8f 13 1e 30 	sh %d3,%d3,-31
8000abb2:	59 53 04 00 	st.w [%a5]4,%d3
8000abb6:	df 02 18 80 	jne %d2,0,8000abe6 <__unpack_f+0x42>
8000abba:	ee 03       	jnz %d15,8000abc0 <__unpack_f+0x1c>
8000abbc:	82 2f       	mov %d15,2
8000abbe:	3c 19       	j 8000abf0 <__unpack_f+0x4c>
8000abc0:	3b 20 f8 2f 	mov %d2,-126
8000abc4:	59 52 08 00 	st.w [%a5]8,%d2
8000abc8:	82 32       	mov %d2,3
8000abca:	34 52       	st.b [%a5],%d2
8000abcc:	06 7f       	sh %d15,7
8000abce:	3b 10 f8 2f 	mov %d2,-127
8000abd2:	7b 00 00 44 	movh %d4,16384
8000abd6:	06 1f       	sh %d15,1
8000abd8:	02 23       	mov %d3,%d2
8000abda:	c2 f2       	add %d2,-1
8000abdc:	3f 4f fd ff 	jlt.u %d15,%d4,8000abd6 <__unpack_f+0x32>
8000abe0:	59 53 08 00 	st.w [%a5]8,%d3
8000abe4:	3c 1b       	j 8000ac1a <__unpack_f+0x76>
8000abe6:	8b f2 2f 32 	ne %d3,%d2,255
8000abea:	f6 3f       	jnz %d3,8000ac08 <__unpack_f+0x64>
8000abec:	ee 04       	jnz %d15,8000abf4 <__unpack_f+0x50>
8000abee:	82 4f       	mov %d15,4
8000abf0:	2c 50       	st.b [%a5]0,%d15
8000abf2:	00 90       	ret 
8000abf4:	7b 00 04 20 	movh %d2,64
8000abf8:	26 f2       	and %d2,%d15
8000abfa:	76 22       	jz %d2,8000abfe <__unpack_f+0x5a>
8000abfc:	82 12       	mov %d2,1
8000abfe:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000ac02:	34 52       	st.b [%a5],%d2
8000ac04:	06 7f       	sh %d15,7
8000ac06:	3c 0a       	j 8000ac1a <__unpack_f+0x76>
8000ac08:	1b 12 f8 2f 	addi %d2,%d2,-127
8000ac0c:	06 7f       	sh %d15,7
8000ac0e:	59 52 08 00 	st.w [%a5]8,%d2
8000ac12:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000ac16:	82 32       	mov %d2,3
8000ac18:	34 52       	st.b [%a5],%d2
8000ac1a:	6c 53       	st.w [%a5]12,%d15
8000ac1c:	00 90       	ret 

8000ac1e <__make_fp>:
8000ac1e:	20 10       	sub.a %sp,16
8000ac20:	40 a4       	mov.aa %a4,%sp
8000ac22:	34 a4       	st.b [%sp],%d4
8000ac24:	59 a5 04 00 	st.w [%sp]4,%d5
8000ac28:	59 a6 08 00 	st.w [%sp]8,%d6
8000ac2c:	59 a7 0c 00 	st.w [%sp]12,%d7
8000ac30:	1d 00 e1 00 	j 8000adf2 <__pack_f>

8000ac34 <__pack_d>:
8000ac34:	14 42       	ld.bu %d2,[%a4]
8000ac36:	19 49 0c 00 	ld.w %d9,[%a4]12
8000ac3a:	19 48 10 00 	ld.w %d8,[%a4]16
8000ac3e:	19 4c 04 00 	ld.w %d12,[%a4]4
8000ac42:	ff 22 0b 80 	jge.u %d2,2,8000ac58 <__pack_d+0x24>
8000ac46:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000ac4a:	06 88       	sh %d8,-8
8000ac4c:	02 95       	mov %d5,%d9
8000ac4e:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000ac52:	3b f0 7f f0 	mov %d15,2047
8000ac56:	3c 6f       	j 8000ad34 <__pack_d+0x100>
8000ac58:	3b f0 7f f0 	mov %d15,2047
8000ac5c:	d2 04       	mov %e4,0
8000ac5e:	df 42 6b 00 	jeq %d2,4,8000ad34 <__pack_d+0x100>
8000ac62:	0f 89 a0 f0 	or %d15,%d9,%d8
8000ac66:	8b 22 00 32 	eq %d3,%d2,2
8000ac6a:	8b 0f e0 34 	or.eq %d3,%d15,0
8000ac6e:	82 0f       	mov %d15,0
8000ac70:	df 03 62 80 	jne %d3,0,8000ad34 <__pack_d+0x100>
8000ac74:	19 42 08 00 	ld.w %d2,[%a4]8
8000ac78:	3b 20 c0 ff 	mov %d15,-1022
8000ac7c:	7f f2 36 00 	jge %d2,%d15,8000ace8 <__pack_d+0xb4>
8000ac80:	a2 2f       	sub %d15,%d2
8000ac82:	8b 9f 83 42 	ge %d4,%d15,57
8000ac86:	82 02       	mov %d2,0
8000ac88:	df 04 18 80 	jne %d4,0,8000acb8 <__pack_d+0x84>
8000ac8c:	0b 98 10 48 	mov %e4,%d8,%d9
8000ac90:	02 f6       	mov %d6,%d15
8000ac92:	6d ff 58 fc 	call 8000a542 <__lshrdi3>
8000ac96:	d2 14       	mov %e4,1
8000ac98:	02 f6       	mov %d6,%d15
8000ac9a:	0b 32 10 a8 	mov %e10,%d2,%d3
8000ac9e:	6d ff 76 ff 	call 8000ab8a <__ashldi3>
8000aca2:	8b f2 9f 20 	addx %d2,%d2,-1
8000aca6:	8b f3 bf 30 	addc %d3,%d3,-1
8000acaa:	26 29       	and %d9,%d2
8000acac:	26 38       	and %d8,%d3
8000acae:	a6 98       	or %d8,%d9
8000acb0:	02 b2       	mov %d2,%d11
8000acb2:	8b 08 00 25 	or.ne %d2,%d8,0
8000acb6:	02 a3       	mov %d3,%d10
8000acb8:	02 2f       	mov %d15,%d2
8000acba:	16 ff       	and %d15,255
8000acbc:	8b 0f 28 f2 	ne %d15,%d15,128
8000acc0:	ee 07       	jnz %d15,8000acce <__pack_d+0x9a>
8000acc2:	8f 02 10 f1 	and %d15,%d2,256
8000acc6:	6e 08       	jz %d15,8000acd6 <__pack_d+0xa2>
8000acc8:	8b 02 88 20 	addx %d2,%d2,128
8000accc:	3c 03       	j 8000acd2 <__pack_d+0x9e>
8000acce:	8b f2 87 20 	addx %d2,%d2,127
8000acd2:	8b 03 a0 30 	addc %d3,%d3,0
8000acd6:	7b 00 00 41 	movh %d4,4096
8000acda:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000acde:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000ace2:	8f 83 1f 40 	sh %d4,%d3,-8
8000ace6:	3c 27       	j 8000ad34 <__pack_d+0x100>
8000ace8:	3b 00 40 30 	mov %d3,1024
8000acec:	3b f0 7f f0 	mov %d15,2047
8000acf0:	7f 32 22 00 	jge %d2,%d3,8000ad34 <__pack_d+0x100>
8000acf4:	02 9f       	mov %d15,%d9
8000acf6:	16 ff       	and %d15,255
8000acf8:	8b 0f 28 f2 	ne %d15,%d15,128
8000acfc:	ee 07       	jnz %d15,8000ad0a <__pack_d+0xd6>
8000acfe:	8f 09 10 f1 	and %d15,%d9,256
8000ad02:	6e 08       	jz %d15,8000ad12 <__pack_d+0xde>
8000ad04:	8b 09 88 90 	addx %d9,%d9,128
8000ad08:	3c 03       	j 8000ad0e <__pack_d+0xda>
8000ad0a:	8b f9 87 90 	addx %d9,%d9,127
8000ad0e:	8b 08 a0 80 	addc %d8,%d8,0
8000ad12:	7b 00 00 32 	movh %d3,8192
8000ad16:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000ad1a:	ee 04       	jnz %d15,8000ad22 <__pack_d+0xee>
8000ad1c:	1b f2 3f f0 	addi %d15,%d2,1023
8000ad20:	3c 06       	j 8000ad2c <__pack_d+0xf8>
8000ad22:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000ad26:	1b 02 40 f0 	addi %d15,%d2,1024
8000ad2a:	06 f8       	sh %d8,-1
8000ad2c:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000ad30:	8f 88 1f 40 	sh %d4,%d8,-8
8000ad34:	d2 02       	mov %e2,0
8000ad36:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000ad3a:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000ad3e:	02 52       	mov %d2,%d5
8000ad40:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000ad44:	00 90       	ret 

8000ad46 <__unpack_d>:
8000ad46:	19 44 04 00 	ld.w %d4,[%a4]4
8000ad4a:	54 42       	ld.w %d2,[%a4]
8000ad4c:	37 04 74 50 	extr.u %d5,%d4,0,20
8000ad50:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000ad54:	8f 14 1e 40 	sh %d4,%d4,-31
8000ad58:	59 54 04 00 	st.w [%a5]4,%d4
8000ad5c:	02 53       	mov %d3,%d5
8000ad5e:	ee 21       	jnz %d15,8000ada0 <__unpack_d+0x5a>
8000ad60:	0f 25 a0 f0 	or %d15,%d5,%d2
8000ad64:	ee 03       	jnz %d15,8000ad6a <__unpack_d+0x24>
8000ad66:	82 2f       	mov %d15,2
8000ad68:	3c 23       	j 8000adae <__unpack_d+0x68>
8000ad6a:	3b 20 c0 ff 	mov %d15,-1022
8000ad6e:	6c 52       	st.w [%a5]8,%d15
8000ad70:	82 3f       	mov %d15,3
8000ad72:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000ad76:	2c 50       	st.b [%a5]0,%d15
8000ad78:	8f 82 00 20 	sh %d2,%d2,8
8000ad7c:	3b 10 c0 ff 	mov %d15,-1023
8000ad80:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000ad84:	7b 00 00 61 	movh %d6,4096
8000ad88:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000ad8c:	02 f4       	mov %d4,%d15
8000ad8e:	06 12       	sh %d2,1
8000ad90:	c2 ff       	add %d15,-1
8000ad92:	df 05 f7 ff 	jne %d5,0,8000ad80 <__unpack_d+0x3a>
8000ad96:	59 54 08 00 	st.w [%a5]8,%d4
8000ad9a:	59 52 0c 00 	st.w [%a5]12,%d2
8000ad9e:	3c 27       	j 8000adec <__unpack_d+0xa6>
8000ada0:	3b f0 7f 40 	mov %d4,2047
8000ada4:	fe 47       	jne %d15,%d4,8000add2 <__unpack_d+0x8c>
8000ada6:	0f 25 a0 f0 	or %d15,%d5,%d2
8000adaa:	ee 04       	jnz %d15,8000adb2 <__unpack_d+0x6c>
8000adac:	82 4f       	mov %d15,4
8000adae:	2c 50       	st.b [%a5]0,%d15
8000adb0:	00 90       	ret 
8000adb2:	7b 80 00 f0 	movh %d15,8
8000adb6:	26 5f       	and %d15,%d5
8000adb8:	6e 02       	jz %d15,8000adbc <__unpack_d+0x76>
8000adba:	82 1f       	mov %d15,1
8000adbc:	2c 50       	st.b [%a5]0,%d15
8000adbe:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000adc2:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000adc6:	8f 82 00 40 	sh %d4,%d2,8
8000adca:	59 54 0c 00 	st.w [%a5]12,%d4
8000adce:	6c 54       	st.w [%a5]16,%d15
8000add0:	00 90       	ret 
8000add2:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000add6:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000adda:	6c 52       	st.w [%a5]8,%d15
8000addc:	8f 82 00 20 	sh %d2,%d2,8
8000ade0:	82 3f       	mov %d15,3
8000ade2:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000ade6:	2c 50       	st.b [%a5]0,%d15
8000ade8:	59 52 0c 00 	st.w [%a5]12,%d2
8000adec:	59 53 10 00 	st.w [%a5]16,%d3
8000adf0:	00 90       	ret 

8000adf2 <__pack_f>:
8000adf2:	14 45       	ld.bu %d5,[%a4]
8000adf4:	4c 43       	ld.w %d15,[%a4]12
8000adf6:	19 47 04 00 	ld.w %d7,[%a4]4
8000adfa:	ff 25 09 80 	jge.u %d5,2,8000ae0c <__pack_f+0x1a>
8000adfe:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000ae02:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000ae06:	3b f0 0f 40 	mov %d4,255
8000ae0a:	3c 4f       	j 8000aea8 <__pack_f+0xb6>
8000ae0c:	3b f0 0f 40 	mov %d4,255
8000ae10:	82 03       	mov %d3,0
8000ae12:	df 45 4b 00 	jeq %d5,4,8000aea8 <__pack_f+0xb6>
8000ae16:	8b 25 00 62 	eq %d6,%d5,2
8000ae1a:	8b 0f e0 64 	or.eq %d6,%d15,0
8000ae1e:	82 04       	mov %d4,0
8000ae20:	df 06 44 80 	jne %d6,0,8000aea8 <__pack_f+0xb6>
8000ae24:	19 45 08 00 	ld.w %d5,[%a4]8
8000ae28:	8b 25 98 42 	ge %d4,%d5,-126
8000ae2c:	df 04 24 80 	jne %d4,0,8000ae74 <__pack_f+0x82>
8000ae30:	8b 25 18 51 	rsub %d5,%d5,-126
8000ae34:	8b a5 81 42 	ge %d4,%d5,26
8000ae38:	f6 4c       	jnz %d4,8000ae50 <__pack_f+0x5e>
8000ae3a:	82 12       	mov %d2,1
8000ae3c:	0f 52 00 20 	sh %d2,%d2,%d5
8000ae40:	8b 05 00 31 	rsub %d3,%d5,0
8000ae44:	c2 f2       	add %d2,-1
8000ae46:	0f 3f 00 30 	sh %d3,%d15,%d3
8000ae4a:	26 2f       	and %d15,%d2
8000ae4c:	8b 0f 00 35 	or.ne %d3,%d15,0
8000ae50:	8f f3 07 f1 	and %d15,%d3,127
8000ae54:	8b 0f 24 f2 	ne %d15,%d15,64
8000ae58:	ee 06       	jnz %d15,8000ae64 <__pack_f+0x72>
8000ae5a:	8f 03 08 f1 	and %d15,%d3,128
8000ae5e:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000ae62:	3c 03       	j 8000ae68 <__pack_f+0x76>
8000ae64:	1b f3 03 30 	addi %d3,%d3,63
8000ae68:	7b 00 00 f4 	movh %d15,16384
8000ae6c:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000ae70:	06 93       	sh %d3,-7
8000ae72:	3c 1b       	j 8000aea8 <__pack_f+0xb6>
8000ae74:	8b 05 88 62 	ge %d6,%d5,128
8000ae78:	3b f0 0f 40 	mov %d4,255
8000ae7c:	df 06 16 80 	jne %d6,0,8000aea8 <__pack_f+0xb6>
8000ae80:	8f ff 07 31 	and %d3,%d15,127
8000ae84:	8b 03 24 32 	ne %d3,%d3,64
8000ae88:	f6 36       	jnz %d3,8000ae94 <__pack_f+0xa2>
8000ae8a:	8f 0f 08 31 	and %d3,%d15,128
8000ae8e:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000ae92:	3c 03       	j 8000ae98 <__pack_f+0xa6>
8000ae94:	1b ff 03 f0 	addi %d15,%d15,63
8000ae98:	1b f5 07 40 	addi %d4,%d5,127
8000ae9c:	ce f4       	jgez %d15,8000aea4 <__pack_f+0xb2>
8000ae9e:	06 ff       	sh %d15,-1
8000aea0:	1b 05 08 40 	addi %d4,%d5,128
8000aea4:	8f 9f 1f 30 	sh %d3,%d15,-7
8000aea8:	82 02       	mov %d2,0
8000aeaa:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000aeae:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000aeb2:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000aeb6:	00 90       	ret 

8000aeb8 <malloc>:
8000aeb8:	91 00 00 f7 	movh.a %a15,28672
8000aebc:	99 f4 48 40 	ld.a %a4,[%a15]1288 <70000508 <_impure_ptr>>
8000aec0:	1d 00 09 00 	j 8000aed2 <_malloc_r>

8000aec4 <free>:
8000aec4:	91 00 00 f7 	movh.a %a15,28672
8000aec8:	40 45       	mov.aa %a5,%a4
8000aeca:	99 f4 48 40 	ld.a %a4,[%a15]1288 <70000508 <_impure_ptr>>
8000aece:	1d 00 f7 02 	j 8000b4bc <_free_r>

8000aed2 <_malloc_r>:
8000aed2:	1b b4 00 f0 	addi %d15,%d4,11
8000aed6:	8b 7f 61 82 	lt.u %d8,%d15,23
8000aeda:	8f 7f c0 f1 	andn %d15,%d15,7
8000aede:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000aee2:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000aee6:	8b 08 20 45 	or.lt %d4,%d8,0
8000aeea:	40 4d       	mov.aa %a13,%a4
8000aeec:	76 45       	jz %d4,8000aef6 <_malloc_r+0x24>
8000aeee:	da 0c       	mov %d15,12
8000aef0:	6c 40       	st.w [%a4]0,%d15
8000aef2:	1d 00 2a 02 	j 8000b346 <_malloc_r+0x474>
8000aef6:	91 00 00 f7 	movh.a %a15,28672
8000aefa:	8b 88 bf f2 	ge.u %d15,%d8,504
8000aefe:	6d 00 37 02 	call 8000b36c <__malloc_lock>
8000af02:	d9 ff 00 40 	lea %a15,[%a15]256 <70000100 <__malloc_av_>>
8000af06:	ee 19       	jnz %d15,8000af38 <_malloc_r+0x66>
8000af08:	8f d8 1f 20 	sh %d2,%d8,-3
8000af0c:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000af10:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000af14:	7d 2c 09 80 	jne.a %a12,%a2,8000af26 <_malloc_r+0x54>
8000af18:	d9 c2 08 00 	lea %a2,[%a12]8
8000af1c:	99 cc 14 00 	ld.a %a12,[%a12]20
8000af20:	c2 22       	add %d2,2
8000af22:	7d 2c 58 00 	jeq.a %a12,%a2,8000afd2 <_malloc_r+0x100>
8000af26:	cc c3       	ld.a %a15,[%a12]12
8000af28:	99 c2 08 00 	ld.a %a2,[%a12]8
8000af2c:	4c c1       	ld.w %d15,[%a12]4
8000af2e:	ec 23       	st.a [%a2]12,%a15
8000af30:	8f 3f c0 f1 	andn %d15,%d15,3
8000af34:	e8 22       	st.a [%a15]8,%a2
8000af36:	3c 74       	j 8000b01e <_malloc_r+0x14c>
8000af38:	8f 78 1f f0 	sh %d15,%d8,-9
8000af3c:	3b f0 03 20 	mov %d2,63
8000af40:	6e 27       	jz %d15,8000af8e <_malloc_r+0xbc>
8000af42:	8f a8 1f 20 	sh %d2,%d8,-6
8000af46:	1b 82 03 20 	addi %d2,%d2,56
8000af4a:	bf 5f 22 80 	jlt.u %d15,5,8000af8e <_malloc_r+0xbc>
8000af4e:	8b 5f a1 22 	ge.u %d2,%d15,21
8000af52:	f6 24       	jnz %d2,8000af5a <_malloc_r+0x88>
8000af54:	1b bf 05 20 	addi %d2,%d15,91
8000af58:	3c 1b       	j 8000af8e <_malloc_r+0xbc>
8000af5a:	8b 5f a5 22 	ge.u %d2,%d15,85
8000af5e:	f6 26       	jnz %d2,8000af6a <_malloc_r+0x98>
8000af60:	8f 48 1f 20 	sh %d2,%d8,-12
8000af64:	1b e2 06 20 	addi %d2,%d2,110
8000af68:	3c 13       	j 8000af8e <_malloc_r+0xbc>
8000af6a:	8b 5f b5 22 	ge.u %d2,%d15,341
8000af6e:	f6 26       	jnz %d2,8000af7a <_malloc_r+0xa8>
8000af70:	8f 18 1f 20 	sh %d2,%d8,-15
8000af74:	1b 72 07 20 	addi %d2,%d2,119
8000af78:	3c 0b       	j 8000af8e <_malloc_r+0xbc>
8000af7a:	3b 50 55 30 	mov %d3,1365
8000af7e:	3b e0 07 20 	mov %d2,126
8000af82:	7f 3f 06 80 	jge.u %d15,%d3,8000af8e <_malloc_r+0xbc>
8000af86:	8f e8 1e 20 	sh %d2,%d8,-18
8000af8a:	1b c2 07 20 	addi %d2,%d2,124
8000af8e:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000af92:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000af96:	7d 2c 1d 00 	jeq.a %a12,%a2,8000afd0 <_malloc_r+0xfe>
8000af9a:	19 c4 04 00 	ld.w %d4,[%a12]4
8000af9e:	8f 34 c0 41 	andn %d4,%d4,3
8000afa2:	5a 84       	sub %d15,%d4,%d8
8000afa4:	8b 0f 41 32 	lt %d3,%d15,16
8000afa8:	f6 33       	jnz %d3,8000afae <_malloc_r+0xdc>
8000afaa:	c2 f2       	add %d2,-1
8000afac:	3c 12       	j 8000afd0 <_malloc_r+0xfe>
8000afae:	0e fe       	jltz %d15,8000afca <_malloc_r+0xf8>
8000afb0:	cc c3       	ld.a %a15,[%a12]12
8000afb2:	99 c2 08 00 	ld.a %a2,[%a12]8
8000afb6:	ec 23       	st.a [%a2]12,%a15
8000afb8:	e8 22       	st.a [%a15]8,%a2
8000afba:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000afbe:	b7 10 21 20 	imask %e2,1,0,1
8000afc2:	49 f2 44 08 	ldmst [%a15]4,%e2
8000afc6:	1d 00 cc 01 	j 8000b35e <_malloc_r+0x48c>
8000afca:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000afce:	3c e4       	j 8000af96 <_malloc_r+0xc4>
8000afd0:	c2 12       	add %d2,1
8000afd2:	c8 4c       	ld.a %a12,[%a15]16
8000afd4:	91 00 00 37 	movh.a %a3,28672
8000afd8:	d9 33 08 40 	lea %a3,[%a3]264 <70000108 <__malloc_av_+0x8>>
8000afdc:	7d 3c 83 00 	jeq.a %a12,%a3,8000b0e2 <_malloc_r+0x210>
8000afe0:	4c c1       	ld.w %d15,[%a12]4
8000afe2:	8f 3f c0 f1 	andn %d15,%d15,3
8000afe6:	52 83       	sub %d3,%d15,%d8
8000afe8:	8b 03 41 42 	lt %d4,%d3,16
8000afec:	df 04 16 80 	jne %d4,0,8000b018 <_malloc_r+0x146>
8000aff0:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000aff4:	8f 18 40 81 	or %d8,%d8,1
8000aff8:	59 c8 04 00 	st.w [%a12]4,%d8
8000affc:	e8 52       	st.a [%a15]20,%a2
8000affe:	e8 42       	st.a [%a15]16,%a2
8000b000:	8f 13 40 f1 	or %d15,%d3,1
8000b004:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b008:	b5 23 08 00 	st.a [%a2]8,%a3
8000b00c:	6c 21       	st.w [%a2]4,%d15
8000b00e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b012:	74 23       	st.w [%a2],%d3
8000b014:	1d 00 a5 01 	j 8000b35e <_malloc_r+0x48c>
8000b018:	e8 53       	st.a [%a15]20,%a3
8000b01a:	e8 43       	st.a [%a15]16,%a3
8000b01c:	0e 33       	jltz %d3,8000b022 <_malloc_r+0x150>
8000b01e:	10 cf       	addsc.a %a15,%a12,%d15,0
8000b020:	3c cf       	j 8000afbe <_malloc_r+0xec>
8000b022:	3b 00 20 30 	mov %d3,512
8000b026:	7f 3f 15 80 	jge.u %d15,%d3,8000b050 <_malloc_r+0x17e>
8000b02a:	06 df       	sh %d15,-3
8000b02c:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000b02e:	48 14       	ld.w %d4,[%a15]4
8000b030:	99 24 08 00 	ld.a %a4,[%a2]8
8000b034:	8f ef 3f 30 	sha %d3,%d15,-2
8000b038:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000b03c:	b5 c4 08 00 	st.a [%a12]8,%a4
8000b040:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000b044:	b5 2c 08 00 	st.a [%a2]8,%a12
8000b048:	68 13       	st.w [%a15]4,%d3
8000b04a:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000b04e:	3c 4a       	j 8000b0e2 <_malloc_r+0x210>
8000b050:	8f af 1f 40 	sh %d4,%d15,-6
8000b054:	8f 7f 1f 30 	sh %d3,%d15,-9
8000b058:	1b 84 03 40 	addi %d4,%d4,56
8000b05c:	bf 53 22 80 	jlt.u %d3,5,8000b0a0 <_malloc_r+0x1ce>
8000b060:	8b 53 a1 42 	ge.u %d4,%d3,21
8000b064:	f6 44       	jnz %d4,8000b06c <_malloc_r+0x19a>
8000b066:	1b b3 05 40 	addi %d4,%d3,91
8000b06a:	3c 1b       	j 8000b0a0 <_malloc_r+0x1ce>
8000b06c:	8b 53 a5 42 	ge.u %d4,%d3,85
8000b070:	f6 46       	jnz %d4,8000b07c <_malloc_r+0x1aa>
8000b072:	8f 4f 1f 40 	sh %d4,%d15,-12
8000b076:	1b e4 06 40 	addi %d4,%d4,110
8000b07a:	3c 13       	j 8000b0a0 <_malloc_r+0x1ce>
8000b07c:	8b 53 b5 42 	ge.u %d4,%d3,341
8000b080:	f6 46       	jnz %d4,8000b08c <_malloc_r+0x1ba>
8000b082:	8f 1f 1f 40 	sh %d4,%d15,-15
8000b086:	1b 74 07 40 	addi %d4,%d4,119
8000b08a:	3c 0b       	j 8000b0a0 <_malloc_r+0x1ce>
8000b08c:	3b 50 55 50 	mov %d5,1365
8000b090:	3b e0 07 40 	mov %d4,126
8000b094:	7f 53 06 80 	jge.u %d3,%d5,8000b0a0 <_malloc_r+0x1ce>
8000b098:	8f ef 1e 40 	sh %d4,%d15,-18
8000b09c:	1b c4 07 40 	addi %d4,%d4,124
8000b0a0:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000b0a4:	99 42 08 00 	ld.a %a2,[%a4]8
8000b0a8:	7d 42 0d 80 	jne.a %a2,%a4,8000b0c2 <_malloc_r+0x1f0>
8000b0ac:	4c f1       	ld.w %d15,[%a15]4
8000b0ae:	86 e4       	sha %d4,-2
8000b0b0:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000b0b4:	40 24       	mov.aa %a4,%a2
8000b0b6:	68 14       	st.w [%a15]4,%d4
8000b0b8:	3c 0d       	j 8000b0d2 <_malloc_r+0x200>
8000b0ba:	99 22 08 00 	ld.a %a2,[%a2]8
8000b0be:	7d 42 08 00 	jeq.a %a2,%a4,8000b0ce <_malloc_r+0x1fc>
8000b0c2:	19 23 04 00 	ld.w %d3,[%a2]4
8000b0c6:	8f 33 c0 31 	andn %d3,%d3,3
8000b0ca:	3f 3f f8 ff 	jlt.u %d15,%d3,8000b0ba <_malloc_r+0x1e8>
8000b0ce:	99 24 0c 00 	ld.a %a4,[%a2]12
8000b0d2:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000b0d6:	b5 c2 08 00 	st.a [%a12]8,%a2
8000b0da:	b5 4c 08 00 	st.a [%a4]8,%a12
8000b0de:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000b0e2:	8f e2 3f 30 	sha %d3,%d2,-2
8000b0e6:	82 1f       	mov %d15,1
8000b0e8:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000b0ec:	48 13       	ld.w %d3,[%a15]4
8000b0ee:	3f f3 73 80 	jlt.u %d3,%d15,8000b1d4 <_malloc_r+0x302>
8000b0f2:	0f 3f 80 40 	and %d4,%d15,%d3
8000b0f6:	f6 49       	jnz %d4,8000b108 <_malloc_r+0x236>
8000b0f8:	8f 32 c0 21 	andn %d2,%d2,3
8000b0fc:	06 1f       	sh %d15,1
8000b0fe:	0f 3f 80 40 	and %d4,%d15,%d3
8000b102:	c2 42       	add %d2,4
8000b104:	df 04 fc 7f 	jeq %d4,0,8000b0fc <_malloc_r+0x22a>
8000b108:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b10c:	02 24       	mov %d4,%d2
8000b10e:	40 24       	mov.aa %a4,%a2
8000b110:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000b114:	7d 4c 3c 00 	jeq.a %a12,%a4,8000b18c <_malloc_r+0x2ba>
8000b118:	19 c6 04 00 	ld.w %d6,[%a12]4
8000b11c:	8f 36 c0 61 	andn %d6,%d6,3
8000b120:	0b 86 80 30 	sub %d3,%d6,%d8
8000b124:	8b 03 41 52 	lt %d5,%d3,16
8000b128:	df 05 1d 80 	jne %d5,0,8000b162 <_malloc_r+0x290>
8000b12c:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b130:	8f 18 40 81 	or %d8,%d8,1
8000b134:	59 c8 04 00 	st.w [%a12]4,%d8
8000b138:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b13c:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000b140:	8f 13 40 f1 	or %d15,%d3,1
8000b144:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b148:	b5 45 08 00 	st.a [%a4]8,%a5
8000b14c:	e8 52       	st.a [%a15]20,%a2
8000b14e:	e8 42       	st.a [%a15]16,%a2
8000b150:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b154:	b5 23 08 00 	st.a [%a2]8,%a3
8000b158:	6c 21       	st.w [%a2]4,%d15
8000b15a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b15e:	74 23       	st.w [%a2],%d3
8000b160:	3c 0e       	j 8000b17c <_malloc_r+0x2aa>
8000b162:	bf 03 12 00 	jlt %d3,0,8000b186 <_malloc_r+0x2b4>
8000b166:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000b16a:	b7 10 21 20 	imask %e2,1,0,1
8000b16e:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b172:	cc c3       	ld.a %a15,[%a12]12
8000b174:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000b178:	ec 23       	st.a [%a2]12,%a15
8000b17a:	e8 22       	st.a [%a15]8,%a2
8000b17c:	40 d4       	mov.aa %a4,%a13
8000b17e:	6d 00 f8 00 	call 8000b36e <__malloc_unlock>
8000b182:	1d 00 f3 00 	j 8000b368 <_malloc_r+0x496>
8000b186:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b18a:	3c c5       	j 8000b114 <_malloc_r+0x242>
8000b18c:	c2 14       	add %d4,1
8000b18e:	8f 34 00 31 	and %d3,%d4,3
8000b192:	d9 44 08 00 	lea %a4,[%a4]8
8000b196:	df 03 bd ff 	jne %d3,0,8000b110 <_malloc_r+0x23e>
8000b19a:	8f 32 00 31 	and %d3,%d2,3
8000b19e:	f6 36       	jnz %d3,8000b1aa <_malloc_r+0x2d8>
8000b1a0:	48 12       	ld.w %d2,[%a15]4
8000b1a2:	0f f2 e0 20 	andn %d2,%d2,%d15
8000b1a6:	68 12       	st.w [%a15]4,%d2
8000b1a8:	3c 07       	j 8000b1b6 <_malloc_r+0x2e4>
8000b1aa:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000b1ae:	d4 22       	ld.a %a2,[%a2]
8000b1b0:	c2 f2       	add %d2,-1
8000b1b2:	7d 42 f4 7f 	jeq.a %a2,%a4,8000b19a <_malloc_r+0x2c8>
8000b1b6:	06 1f       	sh %d15,1
8000b1b8:	48 12       	ld.w %d2,[%a15]4
8000b1ba:	8b 0f 20 32 	ne %d3,%d15,0
8000b1be:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000b1c2:	76 39       	jz %d3,8000b1d4 <_malloc_r+0x302>
8000b1c4:	0f 2f 80 30 	and %d3,%d15,%d2
8000b1c8:	f6 34       	jnz %d3,8000b1d0 <_malloc_r+0x2fe>
8000b1ca:	c2 44       	add %d4,4
8000b1cc:	06 1f       	sh %d15,1
8000b1ce:	3c fb       	j 8000b1c4 <_malloc_r+0x2f2>
8000b1d0:	02 42       	mov %d2,%d4
8000b1d2:	3c 9b       	j 8000b108 <_malloc_r+0x236>
8000b1d4:	c8 2c       	ld.a %a12,[%a15]8
8000b1d6:	19 ca 04 00 	ld.w %d10,[%a12]4
8000b1da:	8f 3a c0 a1 	andn %d10,%d10,3
8000b1de:	5a 8a       	sub %d15,%d10,%d8
8000b1e0:	8b 0f 41 22 	lt %d2,%d15,16
8000b1e4:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000b1e8:	df 02 b1 00 	jeq %d2,0,8000b34a <_malloc_r+0x478>
8000b1ec:	91 00 00 27 	movh.a %a2,28672
8000b1f0:	19 2b c0 20 	ld.w %d11,[%a2]3200 <70000c80 <__malloc_top_pad>>
8000b1f4:	91 00 00 27 	movh.a %a2,28672
8000b1f8:	42 8b       	add %d11,%d8
8000b1fa:	19 23 38 30 	ld.w %d3,[%a2]248 <700000f8 <__malloc_sbrk_base>>
8000b1fe:	1b fb 00 f1 	addi %d15,%d11,4111
8000b202:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b206:	1b 0b 01 20 	addi %d2,%d11,16
8000b20a:	8b f3 3f b2 	ne %d11,%d3,-1
8000b20e:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000b212:	40 d4       	mov.aa %a4,%a13
8000b214:	02 b4       	mov %d4,%d11
8000b216:	80 2c       	mov.d %d12,%a2
8000b218:	6d 00 ac 00 	call 8000b370 <_sbrk_r>
8000b21c:	80 29       	mov.d %d9,%a2
8000b21e:	df f9 86 00 	jeq %d9,-1,8000b32a <_malloc_r+0x458>
8000b222:	80 c2       	mov.d %d2,%a12
8000b224:	80 c3       	mov.d %d3,%a12
8000b226:	42 a2       	add %d2,%d10
8000b228:	80 f4       	mov.d %d4,%a15
8000b22a:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000b22e:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000b232:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000b236:	ee 7a       	jnz %d15,8000b32a <_malloc_r+0x458>
8000b238:	91 00 00 e7 	movh.a %a14,28672
8000b23c:	19 e3 d0 10 	ld.w %d3,[%a14]3152 <70000c50 <__malloc_current_mallinfo>>
8000b240:	42 b3       	add %d3,%d11
8000b242:	59 e3 d0 10 	st.w [%a14]3152 <70000c50 <__malloc_current_mallinfo>>,%d3
8000b246:	5f 29 0c 80 	jne %d9,%d2,8000b25e <_malloc_r+0x38c>
8000b24a:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000b24e:	ee 08       	jnz %d15,8000b25e <_malloc_r+0x38c>
8000b250:	c8 22       	ld.a %a2,[%a15]8
8000b252:	42 ba       	add %d10,%d11
8000b254:	8f 1a 40 a1 	or %d10,%d10,1
8000b258:	59 2a 04 00 	st.w [%a2]4,%d10
8000b25c:	3c 55       	j 8000b306 <_malloc_r+0x434>
8000b25e:	60 c2       	mov.a %a2,%d12
8000b260:	19 2f 38 30 	ld.w %d15,[%a2]248
8000b264:	5e f6       	jne %d15,-1,8000b270 <_malloc_r+0x39e>
8000b266:	91 00 00 27 	movh.a %a2,28672
8000b26a:	59 29 38 30 	st.w [%a2]248 <700000f8 <__malloc_sbrk_base>>,%d9
8000b26e:	3c 06       	j 8000b27a <_malloc_r+0x3a8>
8000b270:	0b 29 80 20 	sub %d2,%d9,%d2
8000b274:	42 23       	add %d3,%d2
8000b276:	59 e3 d0 10 	st.w [%a14]3152 <70000c50 <__malloc_current_mallinfo>>,%d3
8000b27a:	8f 79 00 21 	and %d2,%d9,7
8000b27e:	82 0f       	mov %d15,0
8000b280:	76 24       	jz %d2,8000b288 <_malloc_r+0x3b6>
8000b282:	8b 82 00 f1 	rsub %d15,%d2,8
8000b286:	42 f9       	add %d9,%d15
8000b288:	42 9b       	add %d11,%d9
8000b28a:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000b28e:	1b 0f 00 21 	addi %d2,%d15,4096
8000b292:	5a b2       	sub %d15,%d2,%d11
8000b294:	40 d4       	mov.aa %a4,%a13
8000b296:	02 f4       	mov %d4,%d15
8000b298:	6d 00 6c 00 	call 8000b370 <_sbrk_r>
8000b29c:	80 22       	mov.d %d2,%a2
8000b29e:	df f2 04 80 	jne %d2,-1,8000b2a6 <_malloc_r+0x3d4>
8000b2a2:	60 92       	mov.a %a2,%d9
8000b2a4:	82 0f       	mov %d15,0
8000b2a6:	80 2b       	mov.d %d11,%a2
8000b2a8:	19 e2 d0 10 	ld.w %d2,[%a14]3152 <70000c50 <__malloc_current_mallinfo>>
8000b2ac:	a2 9b       	sub %d11,%d9
8000b2ae:	42 f2       	add %d2,%d15
8000b2b0:	60 92       	mov.a %a2,%d9
8000b2b2:	42 bf       	add %d15,%d11
8000b2b4:	68 29       	st.w [%a15]8,%d9
8000b2b6:	8f 1f 40 31 	or %d3,%d15,1
8000b2ba:	59 e2 d0 10 	st.w [%a14]3152 <70000c50 <__malloc_current_mallinfo>>,%d2
8000b2be:	59 23 04 00 	st.w [%a2]4 <70000c50 <__malloc_current_mallinfo>>,%d3
8000b2c2:	df 0d 22 00 	jeq %d13,0,8000b306 <_malloc_r+0x434>
8000b2c6:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000b2ca:	ee 05       	jnz %d15,8000b2d4 <_malloc_r+0x402>
8000b2cc:	82 12       	mov %d2,1
8000b2ce:	59 22 04 00 	st.w [%a2]4,%d2
8000b2d2:	3c 2c       	j 8000b32a <_malloc_r+0x458>
8000b2d4:	1b 4a ff af 	addi %d10,%d10,-12
8000b2d8:	8f 7a c0 f1 	andn %d15,%d10,7
8000b2dc:	10 c2       	addsc.a %a2,%a12,%d15,0
8000b2de:	82 52       	mov %d2,5
8000b2e0:	59 22 04 00 	st.w [%a2]4,%d2
8000b2e4:	59 22 08 00 	st.w [%a2]8,%d2
8000b2e8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000b2ec:	8f 12 00 21 	and %d2,%d2,1
8000b2f0:	a6 f2       	or %d2,%d15
8000b2f2:	59 c2 04 00 	st.w [%a12]4,%d2
8000b2f6:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000b2fa:	ee 06       	jnz %d15,8000b306 <_malloc_r+0x434>
8000b2fc:	40 d4       	mov.aa %a4,%a13
8000b2fe:	d9 c5 08 00 	lea %a5,[%a12]8
8000b302:	6d 00 dd 00 	call 8000b4bc <_free_r>
8000b306:	91 00 00 27 	movh.a %a2,28672
8000b30a:	19 ef d0 10 	ld.w %d15,[%a14]3152 <70000c50 <__malloc_current_mallinfo>>
8000b30e:	19 22 fc 10 	ld.w %d2,[%a2]3196 <70000c7c <__malloc_max_sbrked_mem>>
8000b312:	7f f2 04 80 	jge.u %d2,%d15,8000b31a <_malloc_r+0x448>
8000b316:	59 2f fc 10 	st.w [%a2]3196 <70000c7c <__malloc_max_sbrked_mem>>,%d15
8000b31a:	91 00 00 27 	movh.a %a2,28672
8000b31e:	19 22 f8 10 	ld.w %d2,[%a2]3192 <70000c78 <__malloc_max_total_mem>>
8000b322:	7f f2 04 80 	jge.u %d2,%d15,8000b32a <_malloc_r+0x458>
8000b326:	59 2f f8 10 	st.w [%a2]3192 <70000c78 <__malloc_max_total_mem>>,%d15
8000b32a:	c8 22       	ld.a %a2,[%a15]8
8000b32c:	19 22 04 00 	ld.w %d2,[%a2]4 <70000c78 <__malloc_max_total_mem>>
8000b330:	8f 32 c0 21 	andn %d2,%d2,3
8000b334:	5a 82       	sub %d15,%d2,%d8
8000b336:	8b 0f 41 32 	lt %d3,%d15,16
8000b33a:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000b33e:	76 36       	jz %d3,8000b34a <_malloc_r+0x478>
8000b340:	40 d4       	mov.aa %a4,%a13
8000b342:	6d 00 16 00 	call 8000b36e <__malloc_unlock>
8000b346:	a0 0c       	mov.a %a12,0
8000b348:	3c 10       	j 8000b368 <_malloc_r+0x496>
8000b34a:	c8 2c       	ld.a %a12,[%a15]8
8000b34c:	8f 18 40 21 	or %d2,%d8,1
8000b350:	96 01       	or %d15,1
8000b352:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b356:	59 c2 04 00 	st.w [%a12]4,%d2
8000b35a:	e8 22       	st.a [%a15]8,%a2
8000b35c:	6c 21       	st.w [%a2]4,%d15
8000b35e:	40 d4       	mov.aa %a4,%a13
8000b360:	6d 00 07 00 	call 8000b36e <__malloc_unlock>
8000b364:	d9 cc 08 00 	lea %a12,[%a12]8
8000b368:	40 c2       	mov.aa %a2,%a12
8000b36a:	00 90       	ret 

8000b36c <__malloc_lock>:
8000b36c:	00 90       	ret 

8000b36e <__malloc_unlock>:
8000b36e:	00 90       	ret 

8000b370 <_sbrk_r>:
8000b370:	82 0f       	mov %d15,0
8000b372:	91 00 00 c7 	movh.a %a12,28672
8000b376:	59 cf c8 20 	st.w [%a12]3208 <70000c88 <errno>>,%d15
8000b37a:	40 4f       	mov.aa %a15,%a4
8000b37c:	6d 00 2c 17 	call 8000e1d4 <sbrk>
8000b380:	80 2f       	mov.d %d15,%a2
8000b382:	5e f5       	jne %d15,-1,8000b38c <_sbrk_r+0x1c>
8000b384:	19 cf c8 20 	ld.w %d15,[%a12]3208 <70000c88 <errno>>
8000b388:	6e 02       	jz %d15,8000b38c <_sbrk_r+0x1c>
8000b38a:	68 0f       	st.w [%a15]0,%d15
8000b38c:	00 90       	ret 

8000b38e <strlen>:
8000b38e:	80 42       	mov.d %d2,%a4
8000b390:	80 4f       	mov.d %d15,%a4
8000b392:	60 ff       	mov.a %a15,%d15
8000b394:	79 f3 00 00 	ld.b %d3,[%a15]0
8000b398:	76 33       	jz %d3,8000b39e <strlen+0x10>
8000b39a:	c2 1f       	add %d15,1
8000b39c:	3c fb       	j 8000b392 <strlen+0x4>
8000b39e:	52 22       	sub %d2,%d15,%d2
8000b3a0:	00 90       	ret 

8000b3a2 <_vsnprintf_r>:
8000b3a2:	20 68       	sub.a %sp,104
8000b3a4:	40 4f       	mov.aa %a15,%a4
8000b3a6:	ce 45       	jgez %d4,8000b3b0 <_vsnprintf_r+0xe>
8000b3a8:	da 8b       	mov %d15,139
8000b3aa:	6c 40       	st.w [%a4]0,%d15
8000b3ac:	82 f2       	mov %d2,-1
8000b3ae:	00 90       	ret 
8000b3b0:	02 4f       	mov %d15,%d4
8000b3b2:	3b 80 20 20 	mov %d2,520
8000b3b6:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000b3ba:	92 f2       	add %d2,%d15,-1
8000b3bc:	ea 02       	cmovn %d2,%d15,0
8000b3be:	f4 a5       	st.a [%sp],%a5
8000b3c0:	b5 a5 10 00 	st.a [%sp]16,%a5
8000b3c4:	59 a2 08 00 	st.w [%sp]8,%d2
8000b3c8:	59 a2 14 00 	st.w [%sp]20,%d2
8000b3cc:	40 a5       	mov.aa %a5,%sp
8000b3ce:	82 f2       	mov %d2,-1
8000b3d0:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000b3d4:	6d 00 4a 01 	call 8000b668 <_svfprintf_r>
8000b3d8:	ff f2 05 00 	jge %d2,-1,8000b3e2 <_vsnprintf_r+0x40>
8000b3dc:	3b b0 08 30 	mov %d3,139
8000b3e0:	68 03       	st.w [%a15]0,%d3
8000b3e2:	6e 04       	jz %d15,8000b3ea <_vsnprintf_r+0x48>
8000b3e4:	d8 00       	ld.a %a15,[%sp]0
8000b3e6:	82 0f       	mov %d15,0
8000b3e8:	28 0f       	st.b [%a15]0,%d15
8000b3ea:	00 90       	ret 

8000b3ec <vsnprintf>:
8000b3ec:	91 00 00 37 	movh.a %a3,28672
8000b3f0:	40 42       	mov.aa %a2,%a4
8000b3f2:	99 34 48 40 	ld.a %a4,[%a3]1288 <70000508 <_impure_ptr>>
8000b3f6:	40 5f       	mov.aa %a15,%a5
8000b3f8:	40 67       	mov.aa %a7,%a6
8000b3fa:	40 25       	mov.aa %a5,%a2
8000b3fc:	40 f6       	mov.aa %a6,%a15
8000b3fe:	1d ff d2 ff 	j 8000b3a2 <_vsnprintf_r>

8000b402 <_malloc_trim_r>:
8000b402:	02 4f       	mov %d15,%d4
8000b404:	40 4f       	mov.aa %a15,%a4
8000b406:	6d ff b3 ff 	call 8000b36c <__malloc_lock>
8000b40a:	91 00 00 c7 	movh.a %a12,28672
8000b40e:	d9 cc 00 40 	lea %a12,[%a12]256 <70000100 <__malloc_av_>>
8000b412:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <g_vadcChannelIDs>>
8000b416:	3b 00 00 21 	mov %d2,4096
8000b41a:	19 28 04 00 	ld.w %d8,[%a2]4
8000b41e:	8f 38 c0 81 	andn %d8,%d8,3
8000b422:	5a f8       	sub %d15,%d8,%d15
8000b424:	1b ff fe f0 	addi %d15,%d15,4079
8000b428:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b42c:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000b430:	7f 2f 07 00 	jge %d15,%d2,8000b43e <_malloc_trim_r+0x3c>
8000b434:	40 f4       	mov.aa %a4,%a15
8000b436:	6d ff 9c ff 	call 8000b36e <__malloc_unlock>
8000b43a:	82 02       	mov %d2,0
8000b43c:	00 90       	ret 
8000b43e:	40 f4       	mov.aa %a4,%a15
8000b440:	82 04       	mov %d4,0
8000b442:	6d ff 97 ff 	call 8000b370 <_sbrk_r>
8000b446:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b44a:	60 84       	mov.a %a4,%d8
8000b44c:	30 43       	add.a %a3,%a4
8000b44e:	7d 32 f3 ff 	jne.a %a2,%a3,8000b434 <_malloc_trim_r+0x32>
8000b452:	40 f4       	mov.aa %a4,%a15
8000b454:	8b 0f 00 41 	rsub %d4,%d15,0
8000b458:	6d ff 8c ff 	call 8000b370 <_sbrk_r>
8000b45c:	80 22       	mov.d %d2,%a2
8000b45e:	df f2 1c 80 	jne %d2,-1,8000b496 <_malloc_trim_r+0x94>
8000b462:	40 f4       	mov.aa %a4,%a15
8000b464:	82 04       	mov %d4,0
8000b466:	6d ff 85 ff 	call 8000b370 <_sbrk_r>
8000b46a:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b46e:	01 32 20 40 	sub.a %a4,%a2,%a3
8000b472:	80 4f       	mov.d %d15,%a4
8000b474:	8b 0f 41 22 	lt %d2,%d15,16
8000b478:	df 02 de ff 	jne %d2,0,8000b434 <_malloc_trim_r+0x32>
8000b47c:	91 00 00 47 	movh.a %a4,28672
8000b480:	99 44 38 30 	ld.a %a4,[%a4]248 <700000f8 <__malloc_sbrk_base>>
8000b484:	96 01       	or %d15,1
8000b486:	6c 31       	st.w [%a3]4,%d15
8000b488:	01 42 20 20 	sub.a %a2,%a2,%a4
8000b48c:	91 00 00 47 	movh.a %a4,28672
8000b490:	b5 42 d0 10 	st.a [%a4]3152 <70000c50 <__malloc_current_mallinfo>>,%a2
8000b494:	3c d0       	j 8000b434 <_malloc_trim_r+0x32>
8000b496:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b49a:	a2 f8       	sub %d8,%d15
8000b49c:	8f 18 40 81 	or %d8,%d8,1
8000b4a0:	59 28 04 00 	st.w [%a2]4,%d8
8000b4a4:	91 00 00 27 	movh.a %a2,28672
8000b4a8:	19 22 d0 10 	ld.w %d2,[%a2]3152 <70000c50 <__malloc_current_mallinfo>>
8000b4ac:	40 f4       	mov.aa %a4,%a15
8000b4ae:	5a f2       	sub %d15,%d2,%d15
8000b4b0:	59 2f d0 10 	st.w [%a2]3152 <70000c50 <__malloc_current_mallinfo>>,%d15
8000b4b4:	6d ff 5d ff 	call 8000b36e <__malloc_unlock>
8000b4b8:	82 12       	mov %d2,1
8000b4ba:	00 90       	ret 

8000b4bc <_free_r>:
8000b4bc:	40 4d       	mov.aa %a13,%a4
8000b4be:	bd 05 d4 00 	jz.a %a5,8000b666 <_free_r+0x1aa>
8000b4c2:	40 5c       	mov.aa %a12,%a5
8000b4c4:	6d ff 54 ff 	call 8000b36c <__malloc_lock>
8000b4c8:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000b4cc:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000b4d0:	8f 14 c0 f1 	andn %d15,%d4,1
8000b4d4:	91 00 00 27 	movh.a %a2,28672
8000b4d8:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b4da:	d9 22 00 40 	lea %a2,[%a2]256 <70000100 <__malloc_av_>>
8000b4de:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <g_vadcChannelIDs>>
8000b4e2:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <g_vadcChannelIDs>>
8000b4e6:	8f 14 00 41 	and %d4,%d4,1
8000b4ea:	8f 33 c0 31 	andn %d3,%d3,3
8000b4ee:	7d 43 24 80 	jne.a %a3,%a4,8000b536 <_free_r+0x7a>
8000b4f2:	42 3f       	add %d15,%d3
8000b4f4:	f6 4d       	jnz %d4,8000b50e <_free_r+0x52>
8000b4f6:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b4fa:	60 23       	mov.a %a3,%d2
8000b4fc:	42 2f       	add %d15,%d2
8000b4fe:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000b502:	c8 33       	ld.a %a3,[%a15]12
8000b504:	c8 24       	ld.a %a4,[%a15]8
8000b506:	b5 43 0c 00 	st.a [%a4]12,%a3
8000b50a:	b5 34 08 00 	st.a [%a3]8,%a4
8000b50e:	8f 1f 40 21 	or %d2,%d15,1
8000b512:	68 12       	st.w [%a15]4,%d2
8000b514:	ec 22       	st.a [%a2]8,%a15
8000b516:	91 00 00 f7 	movh.a %a15,28672
8000b51a:	19 f2 3c 30 	ld.w %d2,[%a15]252 <700000fc <__malloc_trim_threshold>>
8000b51e:	3f 2f 09 80 	jlt.u %d15,%d2,8000b530 <_free_r+0x74>
8000b522:	91 00 00 f7 	movh.a %a15,28672
8000b526:	40 d4       	mov.aa %a4,%a13
8000b528:	19 f4 c0 20 	ld.w %d4,[%a15]3200 <70000c80 <__malloc_top_pad>>
8000b52c:	6d ff 6b ff 	call 8000b402 <_malloc_trim_r>
8000b530:	40 d4       	mov.aa %a4,%a13
8000b532:	1d ff 1e ff 	j 8000b36e <__malloc_unlock>
8000b536:	59 33 04 00 	st.w [%a3]4,%d3
8000b53a:	82 02       	mov %d2,0
8000b53c:	df 04 16 80 	jne %d4,0,8000b568 <_free_r+0xac>
8000b540:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b544:	60 24       	mov.a %a4,%d2
8000b546:	42 2f       	add %d15,%d2
8000b548:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000b54c:	c8 25       	ld.a %a5,[%a15]8
8000b54e:	91 00 00 47 	movh.a %a4,28672
8000b552:	d9 44 08 40 	lea %a4,[%a4]264 <70000108 <__malloc_av_+0x8>>
8000b556:	82 12       	mov %d2,1
8000b558:	7d 45 08 00 	jeq.a %a5,%a4,8000b568 <_free_r+0xac>
8000b55c:	c8 34       	ld.a %a4,[%a15]12
8000b55e:	82 02       	mov %d2,0
8000b560:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b564:	b5 45 08 00 	st.a [%a4]8,%a5
8000b568:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000b56c:	19 44 04 00 	ld.w %d4,[%a4]4
8000b570:	6f 04 18 80 	jnz.t %d4,0,8000b5a0 <_free_r+0xe4>
8000b574:	42 3f       	add %d15,%d3
8000b576:	99 35 08 00 	ld.a %a5,[%a3]8
8000b57a:	f6 2d       	jnz %d2,8000b594 <_free_r+0xd8>
8000b57c:	91 00 00 47 	movh.a %a4,28672
8000b580:	d9 44 08 40 	lea %a4,[%a4]264 <70000108 <__malloc_av_+0x8>>
8000b584:	7d 45 08 80 	jne.a %a5,%a4,8000b594 <_free_r+0xd8>
8000b588:	ec 25       	st.a [%a2]20,%a15
8000b58a:	ec 24       	st.a [%a2]16,%a15
8000b58c:	e8 35       	st.a [%a15]12,%a5
8000b58e:	e8 25       	st.a [%a15]8,%a5
8000b590:	82 12       	mov %d2,1
8000b592:	3c 07       	j 8000b5a0 <_free_r+0xe4>
8000b594:	99 33 0c 00 	ld.a %a3,[%a3]12
8000b598:	b5 53 0c 00 	st.a [%a5]12,%a3
8000b59c:	b5 35 08 00 	st.a [%a3]8,%a5
8000b5a0:	8f 1f 40 31 	or %d3,%d15,1
8000b5a4:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b5a6:	68 13       	st.w [%a15]4,%d3
8000b5a8:	6c 30       	st.w [%a3]0,%d15
8000b5aa:	df 02 c3 ff 	jne %d2,0,8000b530 <_free_r+0x74>
8000b5ae:	3b 00 20 20 	mov %d2,512
8000b5b2:	7f 2f 12 80 	jge.u %d15,%d2,8000b5d6 <_free_r+0x11a>
8000b5b6:	19 23 04 00 	ld.w %d3,[%a2]4
8000b5ba:	06 df       	sh %d15,-3
8000b5bc:	8f ef 3f 20 	sha %d2,%d15,-2
8000b5c0:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000b5c4:	59 22 04 00 	st.w [%a2]4,%d2
8000b5c8:	d0 22       	addsc.a %a2,%a2,%d15,3
8000b5ca:	99 23 08 00 	ld.a %a3,[%a2]8
8000b5ce:	e8 32       	st.a [%a15]12,%a2
8000b5d0:	e8 23       	st.a [%a15]8,%a3
8000b5d2:	ec 22       	st.a [%a2]8,%a15
8000b5d4:	3c 46       	j 8000b660 <_free_r+0x1a4>
8000b5d6:	8f af 1f 30 	sh %d3,%d15,-6
8000b5da:	8f 7f 1f 20 	sh %d2,%d15,-9
8000b5de:	1b 83 03 30 	addi %d3,%d3,56
8000b5e2:	bf 52 22 80 	jlt.u %d2,5,8000b626 <_free_r+0x16a>
8000b5e6:	8b 52 a1 32 	ge.u %d3,%d2,21
8000b5ea:	f6 34       	jnz %d3,8000b5f2 <_free_r+0x136>
8000b5ec:	1b b2 05 30 	addi %d3,%d2,91
8000b5f0:	3c 1b       	j 8000b626 <_free_r+0x16a>
8000b5f2:	8b 52 a5 32 	ge.u %d3,%d2,85
8000b5f6:	f6 36       	jnz %d3,8000b602 <_free_r+0x146>
8000b5f8:	8f 4f 1f 30 	sh %d3,%d15,-12
8000b5fc:	1b e3 06 30 	addi %d3,%d3,110
8000b600:	3c 13       	j 8000b626 <_free_r+0x16a>
8000b602:	8b 52 b5 32 	ge.u %d3,%d2,341
8000b606:	f6 36       	jnz %d3,8000b612 <_free_r+0x156>
8000b608:	8f 1f 1f 30 	sh %d3,%d15,-15
8000b60c:	1b 73 07 30 	addi %d3,%d3,119
8000b610:	3c 0b       	j 8000b626 <_free_r+0x16a>
8000b612:	3b 50 55 40 	mov %d4,1365
8000b616:	3b e0 07 30 	mov %d3,126
8000b61a:	7f 42 06 80 	jge.u %d2,%d4,8000b626 <_free_r+0x16a>
8000b61e:	8f ef 1e 30 	sh %d3,%d15,-18
8000b622:	1b c3 07 30 	addi %d3,%d3,124
8000b626:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000b62a:	99 65 08 00 	ld.a %a5,[%a6]8
8000b62e:	40 53       	mov.aa %a3,%a5
8000b630:	7d 65 0d 80 	jne.a %a5,%a6,8000b64a <_free_r+0x18e>
8000b634:	4c 21       	ld.w %d15,[%a2]4
8000b636:	86 e3       	sha %d3,-2
8000b638:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000b63c:	59 23 04 00 	st.w [%a2]4,%d3
8000b640:	3c 0d       	j 8000b65a <_free_r+0x19e>
8000b642:	99 33 08 00 	ld.a %a3,[%a3]8
8000b646:	7d 63 08 00 	jeq.a %a3,%a6,8000b656 <_free_r+0x19a>
8000b64a:	19 32 04 00 	ld.w %d2,[%a3]4
8000b64e:	8f 32 c0 21 	andn %d2,%d2,3
8000b652:	3f 2f f8 ff 	jlt.u %d15,%d2,8000b642 <_free_r+0x186>
8000b656:	99 35 0c 00 	ld.a %a5,[%a3]12
8000b65a:	e8 35       	st.a [%a15]12,%a5
8000b65c:	e8 23       	st.a [%a15]8,%a3
8000b65e:	ec 52       	st.a [%a5]8,%a15
8000b660:	ec 33       	st.a [%a3]12,%a15
8000b662:	1d ff 67 ff 	j 8000b530 <_free_r+0x74>
8000b666:	00 90       	ret 

8000b668 <_svfprintf_r>:
8000b668:	20 d0       	sub.a %sp,208
8000b66a:	80 5b       	mov.d %d11,%a5
8000b66c:	80 4c       	mov.d %d12,%a4
8000b66e:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b672:	40 7f       	mov.aa %a15,%a7
8000b674:	6d 00 c4 0f 	call 8000d5fc <_localeconv_r>
8000b678:	d4 22       	ld.a %a2,[%a2]
8000b67a:	40 24       	mov.aa %a4,%a2
8000b67c:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b680:	6d ff 87 fe 	call 8000b38e <strlen>
8000b684:	60 b2       	mov.a %a2,%d11
8000b686:	59 a2 20 00 	st.w [%sp]32,%d2
8000b68a:	8c 26       	ld.h %d15,[%a2]12
8000b68c:	6f 7f 16 00 	jz.t %d15,7,8000b6b8 <_svfprintf_r+0x50>
8000b690:	4c 24       	ld.w %d15,[%a2]16
8000b692:	ee 13       	jnz %d15,8000b6b8 <_svfprintf_r+0x50>
8000b694:	60 c4       	mov.a %a4,%d12
8000b696:	3b 00 04 40 	mov %d4,64
8000b69a:	6d ff 1c fc 	call 8000aed2 <_malloc_r>
8000b69e:	60 b3       	mov.a %a3,%d11
8000b6a0:	f4 32       	st.a [%a3],%a2
8000b6a2:	b5 32 10 00 	st.a [%a3]16,%a2
8000b6a6:	7c 26       	jnz.a %a2,8000b6b2 <_svfprintf_r+0x4a>
8000b6a8:	60 cf       	mov.a %a15,%d12
8000b6aa:	da 0c       	mov %d15,12
8000b6ac:	68 0f       	st.w [%a15]0,%d15
8000b6ae:	82 f2       	mov %d2,-1
8000b6b0:	00 90       	ret 
8000b6b2:	60 b2       	mov.a %a2,%d11
8000b6b4:	da 40       	mov %d15,64
8000b6b6:	6c 25       	st.w [%a2]20,%d15
8000b6b8:	82 0f       	mov %d15,0
8000b6ba:	d9 a2 10 20 	lea %a2,[%sp]144
8000b6be:	a0 03       	mov.a %a3,0
8000b6c0:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b6c4:	78 19       	st.w [%sp]100,%d15
8000b6c6:	78 18       	st.w [%sp]96,%d15
8000b6c8:	78 05       	st.w [%sp]20,%d15
8000b6ca:	78 0b       	st.w [%sp]44,%d15
8000b6cc:	78 0c       	st.w [%sp]48,%d15
8000b6ce:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b6d2:	78 0e       	st.w [%sp]56,%d15
8000b6d4:	78 0a       	st.w [%sp]40,%d15
8000b6d6:	40 2e       	mov.aa %a14,%a2
8000b6d8:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b6dc:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b6e0:	8b 0f 20 32 	ne %d3,%d15,0
8000b6e4:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b6e8:	76 33       	jz %d3,8000b6ee <_svfprintf_r+0x86>
8000b6ea:	b0 1c       	add.a %a12,1
8000b6ec:	3c f8       	j 8000b6dc <_svfprintf_r+0x74>
8000b6ee:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b6f2:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b6f6:	80 3f       	mov.d %d15,%a3
8000b6f8:	6e 23       	jz %d15,8000b73e <_svfprintf_r+0xd6>
8000b6fa:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b6fe:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b702:	42 f3       	add %d3,%d15
8000b704:	59 a3 24 10 	st.w [%sp]100,%d3
8000b708:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b70c:	f4 e3       	st.a [%a14],%a3
8000b70e:	c2 13       	add %d3,1
8000b710:	6c e1       	st.w [%a14]4,%d15
8000b712:	59 a3 20 10 	st.w [%sp]96,%d3
8000b716:	8b 83 80 32 	ge %d3,%d3,8
8000b71a:	d9 ee 08 00 	lea %a14,[%a14]8
8000b71e:	76 3b       	jz %d3,8000b734 <_svfprintf_r+0xcc>
8000b720:	60 c4       	mov.a %a4,%d12
8000b722:	60 b5       	mov.a %a5,%d11
8000b724:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b728:	6d 00 7d 12 	call 8000dc22 <__ssprint_r>
8000b72c:	df 02 69 88 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000b730:	d9 ae 10 20 	lea %a14,[%sp]144
8000b734:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b738:	42 f2       	add %d2,%d15
8000b73a:	59 a2 28 00 	st.w [%sp]40,%d2
8000b73e:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b742:	df 0f 56 08 	jeq %d15,0,8000c7ee <_svfprintf_r+0x1186>
8000b746:	82 0f       	mov %d15,0
8000b748:	82 02       	mov %d2,0
8000b74a:	e9 af 01 10 	st.b [%sp]65,%d15
8000b74e:	d9 c2 01 00 	lea %a2,[%a12]1
8000b752:	82 0f       	mov %d15,0
8000b754:	82 fe       	mov %d14,-1
8000b756:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b75a:	82 0a       	mov %d10,0
8000b75c:	79 22 00 00 	ld.b %d2,[%a2]0
8000b760:	d9 23 01 00 	lea %a3,[%a2]1
8000b764:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b768:	59 a2 10 00 	st.w [%sp]16,%d2
8000b76c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b770:	1b 02 fe 3f 	addi %d3,%d2,-32
8000b774:	8b 93 a5 42 	ge.u %d4,%d3,89
8000b778:	df 04 19 84 	jne %d4,0,8000bfaa <_svfprintf_r+0x942>
8000b77c:	91 10 00 28 	movh.a %a2,32769
8000b780:	d9 22 4c eb 	lea %a2,[%a2]-18548 <8000b78c <_svfprintf_r+0x124>>
8000b784:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000b788:	dc 07       	ji %a7
8000b78a:	00 00       	nop 
8000b78c:	1d 00 c3 00 	j 8000b912 <_svfprintf_r+0x2aa>
8000b790:	1d 00 0d 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b794:	1d 00 0b 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b798:	1d 00 c0 00 	j 8000b918 <_svfprintf_r+0x2b0>
8000b79c:	1d 00 07 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7a0:	1d 00 05 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7a4:	1d 00 03 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7a8:	1d 00 01 04 	j 8000bfaa <_svfprintf_r+0x942>
8000b7ac:	1d 00 ff 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7b0:	1d 00 fd 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7b4:	1d 00 b5 00 	j 8000b91e <_svfprintf_r+0x2b6>
8000b7b8:	1d 00 9c 00 	j 8000b8f0 <_svfprintf_r+0x288>
8000b7bc:	1d 00 f7 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7c0:	1d 00 b8 00 	j 8000b930 <_svfprintf_r+0x2c8>
8000b7c4:	1d 00 b9 00 	j 8000b936 <_svfprintf_r+0x2ce>
8000b7c8:	1d 00 f1 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7cc:	1d 00 de 00 	j 8000b988 <_svfprintf_r+0x320>
8000b7d0:	1d 00 df 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7d4:	1d 00 dd 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7d8:	1d 00 db 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7dc:	1d 00 d9 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7e0:	1d 00 d7 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7e4:	1d 00 d5 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7e8:	1d 00 d3 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7ec:	1d 00 d1 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7f0:	1d 00 cf 00 	j 8000b98e <_svfprintf_r+0x326>
8000b7f4:	1d 00 db 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7f8:	1d 00 d9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b7fc:	1d 00 d7 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b800:	1d 00 d5 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b804:	1d 00 d3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b808:	1d 00 d1 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b80c:	1d 00 cf 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b810:	1d 00 cd 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b814:	1d 00 cb 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b818:	1d 00 c9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b81c:	1d 00 f9 00 	j 8000ba0e <_svfprintf_r+0x3a6>
8000b820:	1d 00 21 01 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b824:	1d 00 c3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b828:	1d 00 1d 01 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b82c:	1d 00 bf 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b830:	1d 00 bd 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b834:	1d 00 bb 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b838:	1d 00 b9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b83c:	1d 00 c6 00 	j 8000b9c8 <_svfprintf_r+0x360>
8000b840:	1d 00 b5 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b844:	1d 00 b3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b848:	1d 00 92 02 	j 8000bd6c <_svfprintf_r+0x704>
8000b84c:	1d 00 af 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b850:	1d 00 ad 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b854:	1d 00 ab 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b858:	1d 00 a9 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b85c:	1d 00 a7 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b860:	1d 00 d0 02 	j 8000be00 <_svfprintf_r+0x798>
8000b864:	1d 00 a3 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b868:	1d 00 a1 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b86c:	1d 00 4b 00 	j 8000b902 <_svfprintf_r+0x29a>
8000b870:	1d 00 9d 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b874:	1d 00 9b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b878:	1d 00 99 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b87c:	1d 00 97 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b880:	1d 00 95 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b884:	1d 00 93 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b888:	1d 00 91 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b88c:	1d 00 8f 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b890:	1d 00 8d 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b894:	1d 00 8b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b898:	1d 00 b0 00 	j 8000b9f8 <_svfprintf_r+0x390>
8000b89c:	1d 00 2f 00 	j 8000b8fa <_svfprintf_r+0x292>
8000b8a0:	1d 00 e1 00 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b8a4:	1d 00 df 00 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b8a8:	1d 00 dd 00 	j 8000ba62 <_svfprintf_r+0x3fa>
8000b8ac:	1d 00 91 00 	j 8000b9ce <_svfprintf_r+0x366>
8000b8b0:	1d 00 25 00 	j 8000b8fa <_svfprintf_r+0x292>
8000b8b4:	1d 00 7b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8b8:	1d 00 79 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8bc:	1d 00 8c 00 	j 8000b9d4 <_svfprintf_r+0x36c>
8000b8c0:	1d 00 75 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8c4:	1d 00 39 02 	j 8000bd36 <_svfprintf_r+0x6ce>
8000b8c8:	1d 00 54 02 	j 8000bd70 <_svfprintf_r+0x708>
8000b8cc:	1d 00 66 02 	j 8000bd98 <_svfprintf_r+0x730>
8000b8d0:	1d 00 90 00 	j 8000b9f0 <_svfprintf_r+0x388>
8000b8d4:	1d 00 6b 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8d8:	1d 00 77 02 	j 8000bdc6 <_svfprintf_r+0x75e>
8000b8dc:	1d 00 67 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8e0:	1d 00 92 02 	j 8000be04 <_svfprintf_r+0x79c>
8000b8e4:	1d 00 63 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8e8:	1d 00 61 03 	j 8000bfaa <_svfprintf_r+0x942>
8000b8ec:	1d 00 a0 02 	j 8000be2c <_svfprintf_r+0x7c4>
8000b8f0:	da 2b       	mov %d15,43
8000b8f2:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b8f6:	1d ff 33 ff 	j 8000b75c <_svfprintf_r+0xf4>
8000b8fa:	e9 af 01 10 	st.b [%sp]65,%d15
8000b8fe:	1d 00 8c 00 	j 8000ba16 <_svfprintf_r+0x3ae>
8000b902:	e9 af 01 10 	st.b [%sp]65,%d15
8000b906:	7b 00 00 f8 	movh %d15,32768
8000b90a:	1b cf e7 f0 	addi %d15,%d15,3708
8000b90e:	1d 00 95 02 	j 8000be38 <_svfprintf_r+0x7d0>
8000b912:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000b916:	3c ee       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b918:	8f 1a 40 a1 	or %d10,%d10,1
8000b91c:	3c eb       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b91e:	48 02       	ld.w %d2,[%a15]0
8000b920:	b0 4f       	add.a %a15,4
8000b922:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b926:	ff 02 e6 7f 	jge %d2,0,8000b8f2 <_svfprintf_r+0x28a>
8000b92a:	32 52       	rsub %d2
8000b92c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b930:	8f 4a 40 a1 	or %d10,%d10,4
8000b934:	3c df       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b936:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b93a:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b93e:	79 32 00 00 	ld.b %d2,[%a3]0
8000b942:	b0 12       	add.a %a2,1
8000b944:	59 a2 10 00 	st.w [%sp]16,%d2
8000b948:	8b a2 02 32 	eq %d3,%d2,42
8000b94c:	f6 33       	jnz %d3,8000b952 <_svfprintf_r+0x2ea>
8000b94e:	82 05       	mov %d5,0
8000b950:	3c 08       	j 8000b960 <_svfprintf_r+0x2f8>
8000b952:	48 0e       	ld.w %d14,[%a15]0
8000b954:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b958:	b0 4f       	add.a %a15,4
8000b95a:	8b fe 5f e3 	max %d14,%d14,-1
8000b95e:	3c ca       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b960:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b964:	1b 02 fd 3f 	addi %d3,%d2,-48
8000b968:	ff a3 0a 80 	jge.u %d3,10,8000b97c <_svfprintf_r+0x314>
8000b96c:	79 22 00 00 	ld.b %d2,[%a2]0
8000b970:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000b974:	59 a2 10 00 	st.w [%sp]16,%d2
8000b978:	b0 12       	add.a %a2,1
8000b97a:	3c f3       	j 8000b960 <_svfprintf_r+0x2f8>
8000b97c:	8b f5 5f e3 	max %d14,%d5,-1
8000b980:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b984:	1d ff f4 fe 	j 8000b76c <_svfprintf_r+0x104>
8000b988:	8f 0a 48 a1 	or %d10,%d10,128
8000b98c:	3c b3       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b98e:	82 02       	mov %d2,0
8000b990:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b994:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b998:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b99c:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b9a0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000b9a4:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b9a8:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000b9ac:	b0 12       	add.a %a2,1
8000b9ae:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b9b2:	79 32 00 00 	ld.b %d2,[%a3]0
8000b9b6:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b9ba:	59 a2 10 00 	st.w [%sp]16,%d2
8000b9be:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b9c2:	bf a4 e9 ff 	jlt.u %d4,10,8000b994 <_svfprintf_r+0x32c>
8000b9c6:	3c dd       	j 8000b980 <_svfprintf_r+0x318>
8000b9c8:	8f 8a 40 a1 	or %d10,%d10,8
8000b9cc:	3c 93       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9ce:	8f 0a 44 a1 	or %d10,%d10,64
8000b9d2:	3c 90       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9d4:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b9d8:	79 33 00 00 	ld.b %d3,[%a3]0
8000b9dc:	8b c3 26 32 	ne %d3,%d3,108
8000b9e0:	f6 35       	jnz %d3,8000b9ea <_svfprintf_r+0x382>
8000b9e2:	b0 13       	add.a %a3,1
8000b9e4:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b9e8:	3c 04       	j 8000b9f0 <_svfprintf_r+0x388>
8000b9ea:	8f 0a 41 a1 	or %d10,%d10,16
8000b9ee:	3c 82       	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9f0:	8f 0a 42 a1 	or %d10,%d10,32
8000b9f4:	1d ff 7f ff 	j 8000b8f2 <_svfprintf_r+0x28a>
8000b9f8:	48 03       	ld.w %d3,[%a15]0
8000b9fa:	d9 fc 04 00 	lea %a12,[%a15]4
8000b9fe:	e9 a3 28 10 	st.b [%sp]104,%d3
8000ba02:	82 03       	mov %d3,0
8000ba04:	e9 a3 01 10 	st.b [%sp]65,%d3
8000ba08:	60 ad       	mov.a %a13,%d10
8000ba0a:	1d 00 dc 02 	j 8000bfc2 <_svfprintf_r+0x95a>
8000ba0e:	e9 af 01 10 	st.b [%sp]65,%d15
8000ba12:	8f 0a 41 a1 	or %d10,%d10,16
8000ba16:	60 ad       	mov.a %a13,%d10
8000ba18:	6f 5a 07 00 	jz.t %d10,5,8000ba26 <_svfprintf_r+0x3be>
8000ba1c:	d9 fc 08 00 	lea %a12,[%a15]8
8000ba20:	09 f8 40 09 	ld.d %e8,[%a15]
8000ba24:	3c 12       	j 8000ba48 <_svfprintf_r+0x3e0>
8000ba26:	d9 f2 04 00 	lea %a2,[%a15]4
8000ba2a:	6f 4a 05 00 	jz.t %d10,4,8000ba34 <_svfprintf_r+0x3cc>
8000ba2e:	40 2c       	mov.aa %a12,%a2
8000ba30:	48 08       	ld.w %d8,[%a15]0
8000ba32:	3c 09       	j 8000ba44 <_svfprintf_r+0x3dc>
8000ba34:	48 03       	ld.w %d3,[%a15]0
8000ba36:	40 2c       	mov.aa %a12,%a2
8000ba38:	0b 30 00 88 	mov %e8,%d3
8000ba3c:	6f 6a 06 00 	jz.t %d10,6,8000ba48 <_svfprintf_r+0x3e0>
8000ba40:	37 03 50 80 	extr %d8,%d3,0,16
8000ba44:	0b 80 00 88 	mov %e8,%d8
8000ba48:	82 13       	mov %d3,1
8000ba4a:	ff 09 1d 02 	jge %d9,0,8000be84 <_svfprintf_r+0x81c>
8000ba4e:	32 59       	rsub %d9
8000ba50:	32 58       	rsub %d8
8000ba52:	3b d0 02 70 	mov %d7,45
8000ba56:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000ba5a:	e9 a7 01 10 	st.b [%sp]65,%d7
8000ba5e:	1d 00 13 02 	j 8000be84 <_svfprintf_r+0x81c>
8000ba62:	e9 af 01 10 	st.b [%sp]65,%d15
8000ba66:	4c f0       	ld.w %d15,[%a15]0
8000ba68:	d9 fc 08 00 	lea %a12,[%a15]8
8000ba6c:	78 0b       	st.w [%sp]44,%d15
8000ba6e:	4c f1       	ld.w %d15,[%a15]4
8000ba70:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ba74:	78 0c       	st.w [%sp]48,%d15
8000ba76:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ba7a:	6d 00 b3 10 	call 8000dbe0 <__fpclassifyd>
8000ba7e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000ba82:	19 a5 30 00 	ld.w %d5,[%sp]48
8000ba86:	df 12 18 80 	jne %d2,1,8000bab6 <_svfprintf_r+0x44e>
8000ba8a:	d2 06       	mov %e6,0
8000ba8c:	6d 00 50 14 	call 8000e32c <__ltdf2>
8000ba90:	ce 25       	jgez %d2,8000ba9a <_svfprintf_r+0x432>
8000ba92:	3b d0 02 30 	mov %d3,45
8000ba96:	e9 a3 01 10 	st.b [%sp]65,%d3
8000ba9a:	58 04       	ld.w %d15,[%sp]16
8000ba9c:	7b 00 00 78 	movh %d7,32768
8000baa0:	8b 8f 84 32 	ge %d3,%d15,72
8000baa4:	1b 07 e7 d0 	addi %d13,%d7,3696
8000baa8:	df 03 17 80 	jne %d3,0,8000bad6 <_svfprintf_r+0x46e>
8000baac:	7b 00 00 78 	movh %d7,32768
8000bab0:	1b c7 e6 d0 	addi %d13,%d7,3692
8000bab4:	3c 11       	j 8000bad6 <_svfprintf_r+0x46e>
8000bab6:	6d 00 95 10 	call 8000dbe0 <__fpclassifyd>
8000baba:	58 04       	ld.w %d15,[%sp]16
8000babc:	df 02 13 80 	jne %d2,0,8000bae2 <_svfprintf_r+0x47a>
8000bac0:	7b 00 00 78 	movh %d7,32768
8000bac4:	8b 8f 84 32 	ge %d3,%d15,72
8000bac8:	1b 87 e7 d0 	addi %d13,%d7,3704
8000bacc:	f6 35       	jnz %d3,8000bad6 <_svfprintf_r+0x46e>
8000bace:	7b 00 00 78 	movh %d7,32768
8000bad2:	1b 47 e7 d0 	addi %d13,%d7,3700
8000bad6:	8f 0a c8 a1 	andn %d10,%d10,128
8000bada:	60 ad       	mov.a %a13,%d10
8000badc:	82 39       	mov %d9,3
8000bade:	1d 00 78 02 	j 8000bfce <_svfprintf_r+0x966>
8000bae2:	8f 0f c2 f1 	andn %d15,%d15,32
8000bae6:	78 01       	st.w [%sp]4,%d15
8000bae8:	df fe 09 00 	jeq %d14,-1,8000bafa <_svfprintf_r+0x492>
8000baec:	8b 0e 00 72 	eq %d7,%d14,0
8000baf0:	8b 7f 04 74 	and.eq %d7,%d15,71
8000baf4:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000baf8:	3c 02       	j 8000bafc <_svfprintf_r+0x494>
8000bafa:	82 6e       	mov %d14,6
8000bafc:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bb00:	8f 0a 50 21 	or %d2,%d10,256
8000bb04:	60 2d       	mov.a %a13,%d2
8000bb06:	d8 0b       	ld.a %a15,[%sp]44
8000bb08:	82 0f       	mov %d15,0
8000bb0a:	ce 34       	jgez %d3,8000bb12 <_svfprintf_r+0x4aa>
8000bb0c:	9b 03 00 38 	addih %d3,%d3,32768
8000bb10:	da 2d       	mov %d15,45
8000bb12:	78 09       	st.w [%sp]36,%d15
8000bb14:	58 01       	ld.w %d15,[%sp]4
8000bb16:	02 e9       	mov %d9,%d14
8000bb18:	8b 6f 04 22 	eq %d2,%d15,70
8000bb1c:	82 36       	mov %d6,3
8000bb1e:	f6 28       	jnz %d2,8000bb2e <_svfprintf_r+0x4c6>
8000bb20:	8b 5f 24 12 	ne %d1,%d15,69
8000bb24:	1b 1e 00 50 	addi %d5,%d14,1
8000bb28:	82 26       	mov %d6,2
8000bb2a:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000bb2e:	60 c4       	mov.a %a4,%d12
8000bb30:	80 f4       	mov.d %d4,%a15
8000bb32:	02 35       	mov %d5,%d3
8000bb34:	02 97       	mov %d7,%d9
8000bb36:	d9 a5 04 10 	lea %a5,[%sp]68
8000bb3a:	d9 a6 08 10 	lea %a6,[%sp]72
8000bb3e:	d9 a7 14 10 	lea %a7,[%sp]84
8000bb42:	59 a2 0c 00 	st.w [%sp]12,%d2
8000bb46:	59 a3 08 00 	st.w [%sp]8,%d3
8000bb4a:	6d 00 ef 06 	call 8000c928 <_dtoa_r>
8000bb4e:	58 01       	ld.w %d15,[%sp]4
8000bb50:	80 2d       	mov.d %d13,%a2
8000bb52:	8b 7f 24 12 	ne %d1,%d15,71
8000bb56:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000bb5a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bb5e:	df 01 11 80 	jne %d1,0,8000bb80 <_svfprintf_r+0x518>
8000bb62:	6f 0a 0f 80 	jnz.t %d10,0,8000bb80 <_svfprintf_r+0x518>
8000bb66:	19 a2 14 10 	ld.w %d2,[%sp]84
8000bb6a:	58 01       	ld.w %d15,[%sp]4
8000bb6c:	a2 d2       	sub %d2,%d13
8000bb6e:	59 a2 14 00 	st.w [%sp]20,%d2
8000bb72:	8b 7f 04 42 	eq %d4,%d15,71
8000bb76:	19 a5 04 10 	ld.w %d5,[%sp]68
8000bb7a:	df 04 36 80 	jne %d4,0,8000bbe6 <_svfprintf_r+0x57e>
8000bb7e:	3c 3e       	j 8000bbfa <_svfprintf_r+0x592>
8000bb80:	0b 9d 00 80 	add %d8,%d13,%d9
8000bb84:	df 02 1c 00 	jeq %d2,0,8000bbbc <_svfprintf_r+0x554>
8000bb88:	60 d2       	mov.a %a2,%d13
8000bb8a:	80 f4       	mov.d %d4,%a15
8000bb8c:	79 20 00 00 	ld.b %d0,[%a2]0
8000bb90:	d2 06       	mov %e6,0
8000bb92:	02 35       	mov %d5,%d3
8000bb94:	8b 00 03 f2 	eq %d15,%d0,48
8000bb98:	59 a3 08 00 	st.w [%sp]8,%d3
8000bb9c:	6d 00 68 13 	call 8000e26c <__nedf2>
8000bba0:	8b 02 20 22 	ne %d2,%d2,0
8000bba4:	0f 2f 80 00 	and %d0,%d15,%d2
8000bba8:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bbac:	76 05       	jz %d0,8000bbb6 <_svfprintf_r+0x54e>
8000bbae:	8b 19 00 01 	rsub %d0,%d9,1
8000bbb2:	59 a0 04 10 	st.w [%sp]68,%d0
8000bbb6:	19 a2 04 10 	ld.w %d2,[%sp]68
8000bbba:	42 28       	add %d8,%d2
8000bbbc:	80 f4       	mov.d %d4,%a15
8000bbbe:	d2 06       	mov %e6,0
8000bbc0:	02 35       	mov %d5,%d3
8000bbc2:	6d 00 35 13 	call 8000e22c <__eqdf2>
8000bbc6:	f6 23       	jnz %d2,8000bbcc <_svfprintf_r+0x564>
8000bbc8:	59 a8 14 10 	st.w [%sp]84,%d8
8000bbcc:	3b 00 03 00 	mov %d0,48
8000bbd0:	19 a3 14 10 	ld.w %d3,[%sp]84
8000bbd4:	7f 83 c9 ff 	jge.u %d3,%d8,8000bb66 <_svfprintf_r+0x4fe>
8000bbd8:	1b 13 00 10 	addi %d1,%d3,1
8000bbdc:	60 32       	mov.a %a2,%d3
8000bbde:	59 a1 14 10 	st.w [%sp]84,%d1
8000bbe2:	34 20       	st.b [%a2],%d0
8000bbe4:	3c f6       	j 8000bbd0 <_svfprintf_r+0x568>
8000bbe6:	0b 5e 20 31 	lt %d3,%d14,%d5
8000bbea:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000bbee:	df 03 88 00 	jeq %d3,0,8000bcfe <_svfprintf_r+0x696>
8000bbf2:	58 04       	ld.w %d15,[%sp]16
8000bbf4:	c2 ef       	add %d15,-2
8000bbf6:	78 04       	st.w [%sp]16,%d15
8000bbf8:	3c 06       	j 8000bc04 <_svfprintf_r+0x59c>
8000bbfa:	58 04       	ld.w %d15,[%sp]16
8000bbfc:	8b 6f 86 32 	ge %d3,%d15,102
8000bc00:	df 03 69 80 	jne %d3,0,8000bcd2 <_svfprintf_r+0x66a>
8000bc04:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bc08:	9a f5       	add %d15,%d5,-1
8000bc0a:	78 11       	st.w [%sp]68,%d15
8000bc0c:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000bc10:	3b b0 02 30 	mov %d3,43
8000bc14:	ce f4       	jgez %d15,8000bc1c <_svfprintf_r+0x5b4>
8000bc16:	32 5f       	rsub %d15
8000bc18:	3b d0 02 30 	mov %d3,45
8000bc1c:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000bc20:	8b af 40 32 	lt %d3,%d15,10
8000bc24:	df 03 3e 80 	jne %d3,0,8000bca0 <_svfprintf_r+0x638>
8000bc28:	82 06       	mov %d6,0
8000bc2a:	3b a0 00 00 	mov %d0,10
8000bc2e:	4b 0f 01 42 	div %e4,%d15,%d0
8000bc32:	8b 66 00 71 	rsub %d7,%d6,6
8000bc36:	60 72       	mov.a %a2,%d7
8000bc38:	d9 af 14 10 	lea %a15,[%sp]84
8000bc3c:	1b 05 03 30 	addi %d3,%d5,48
8000bc40:	30 2f       	add.a %a15,%a2
8000bc42:	28 03       	st.b [%a15]0,%d3
8000bc44:	8b a4 80 32 	ge %d3,%d4,10
8000bc48:	02 4f       	mov %d15,%d4
8000bc4a:	c2 16       	add %d6,1
8000bc4c:	df 03 f1 ff 	jne %d3,0,8000bc2e <_svfprintf_r+0x5c6>
8000bc50:	60 74       	mov.a %a4,%d7
8000bc52:	d9 a2 10 30 	lea %a2,[%sp]208
8000bc56:	1b 04 03 f0 	addi %d15,%d4,48
8000bc5a:	30 42       	add.a %a2,%a4
8000bc5c:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000bc60:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000bc64:	80 22       	mov.d %d2,%a2
8000bc66:	d9 af 1b 10 	lea %a15,[%sp]91
8000bc6a:	80 ff       	mov.d %d15,%a15
8000bc6c:	1b 32 f8 4f 	addi %d4,%d2,-125
8000bc70:	82 03       	mov %d3,0
8000bc72:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000bc76:	3f 4f 08 80 	jlt.u %d15,%d4,8000bc86 <_svfprintf_r+0x61e>
8000bc7a:	80 a2       	mov.d %d2,%sp
8000bc7c:	1b 02 0d 20 	addi %d2,%d2,208
8000bc80:	8b 52 07 42 	eq %d4,%d2,117
8000bc84:	76 46       	jz %d4,8000bc90 <_svfprintf_r+0x628>
8000bc86:	a0 03       	mov.a %a3,0
8000bc88:	3c 04       	j 8000bc90 <_svfprintf_r+0x628>
8000bc8a:	0c 70       	ld.bu %d15,[%a7]0
8000bc8c:	b0 17       	add.a %a7,1
8000bc8e:	28 0f       	st.b [%a15]0,%d15
8000bc90:	60 3f       	mov.a %a15,%d3
8000bc92:	d9 a2 0d 10 	lea %a2,[%sp]77
8000bc96:	b0 2f       	add.a %a15,2
8000bc98:	30 2f       	add.a %a15,%a2
8000bc9a:	c2 13       	add %d3,1
8000bc9c:	fc 37       	loop %a3,8000bc8a <_svfprintf_r+0x622>
8000bc9e:	3c 0b       	j 8000bcb4 <_svfprintf_r+0x64c>
8000bca0:	3b 00 03 30 	mov %d3,48
8000bca4:	1b 0f 03 f0 	addi %d15,%d15,48
8000bca8:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000bcac:	e9 af 10 10 	st.b [%sp]80,%d15
8000bcb0:	d9 af 11 10 	lea %a15,[%sp]81
8000bcb4:	d9 a7 0d 10 	lea %a7,[%sp]77
8000bcb8:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000bcbc:	80 79       	mov.d %d9,%a7
8000bcbe:	58 05       	ld.w %d15,[%sp]20
8000bcc0:	b5 a7 38 00 	st.a [%sp]56,%a7
8000bcc4:	42 f9       	add %d9,%d15
8000bcc6:	ff 2f 04 00 	jge %d15,2,8000bcce <_svfprintf_r+0x666>
8000bcca:	6f 0a 2c 00 	jz.t %d10,0,8000bd22 <_svfprintf_r+0x6ba>
8000bcce:	c2 19       	add %d9,1
8000bcd0:	3c 29       	j 8000bd22 <_svfprintf_r+0x6ba>
8000bcd2:	58 04       	ld.w %d15,[%sp]16
8000bcd4:	8b 6f 26 42 	ne %d4,%d15,102
8000bcd8:	df 04 15 80 	jne %d4,0,8000bd02 <_svfprintf_r+0x69a>
8000bcdc:	02 59       	mov %d9,%d5
8000bcde:	8e 59       	jlez %d5,8000bcf0 <_svfprintf_r+0x688>
8000bce0:	f6 e3       	jnz %d14,8000bce6 <_svfprintf_r+0x67e>
8000bce2:	6f 0a 20 00 	jz.t %d10,0,8000bd22 <_svfprintf_r+0x6ba>
8000bce6:	1b 1e 00 30 	addi %d3,%d14,1
8000bcea:	0b 35 00 90 	add %d9,%d5,%d3
8000bcee:	3c 1a       	j 8000bd22 <_svfprintf_r+0x6ba>
8000bcf0:	f6 e4       	jnz %d14,8000bcf8 <_svfprintf_r+0x690>
8000bcf2:	82 19       	mov %d9,1
8000bcf4:	6f 0a 17 00 	jz.t %d10,0,8000bd22 <_svfprintf_r+0x6ba>
8000bcf8:	1b 2e 00 90 	addi %d9,%d14,2
8000bcfc:	3c 13       	j 8000bd22 <_svfprintf_r+0x6ba>
8000bcfe:	da 67       	mov %d15,103
8000bd00:	78 04       	st.w [%sp]16,%d15
8000bd02:	58 05       	ld.w %d15,[%sp]20
8000bd04:	8f 1a 00 a1 	and %d10,%d10,1
8000bd08:	0b a5 00 90 	add %d9,%d5,%d10
8000bd0c:	7f f5 0b 00 	jge %d5,%d15,8000bd22 <_svfprintf_r+0x6ba>
8000bd10:	8b 15 40 92 	lt %d9,%d5,1
8000bd14:	8b 25 00 31 	rsub %d3,%d5,2
8000bd18:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000bd1c:	19 a9 14 00 	ld.w %d9,[%sp]20
8000bd20:	42 39       	add %d9,%d3
8000bd22:	58 09       	ld.w %d15,[%sp]36
8000bd24:	82 0e       	mov %d14,0
8000bd26:	df 0f 55 01 	jeq %d15,0,8000bfd0 <_svfprintf_r+0x968>
8000bd2a:	3b d0 02 70 	mov %d7,45
8000bd2e:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bd32:	1d 00 4f 01 	j 8000bfd0 <_svfprintf_r+0x968>
8000bd36:	e9 af 01 10 	st.b [%sp]65,%d15
8000bd3a:	d9 f2 04 00 	lea %a2,[%a15]4
8000bd3e:	6f 5a 09 00 	jz.t %d10,5,8000bd50 <_svfprintf_r+0x6e8>
8000bd42:	58 0a       	ld.w %d15,[%sp]40
8000bd44:	c8 03       	ld.a %a3,[%a15]0
8000bd46:	0b f0 00 48 	mov %e4,%d15
8000bd4a:	89 34 40 09 	st.d [%a3],%e4
8000bd4e:	3c 0c       	j 8000bd66 <_svfprintf_r+0x6fe>
8000bd50:	6f 4a 08 80 	jnz.t %d10,4,8000bd60 <_svfprintf_r+0x6f8>
8000bd54:	6f 6a 06 00 	jz.t %d10,6,8000bd60 <_svfprintf_r+0x6f8>
8000bd58:	c8 03       	ld.a %a3,[%a15]0
8000bd5a:	58 0a       	ld.w %d15,[%sp]40
8000bd5c:	ac 30       	st.h [%a3]0,%d15
8000bd5e:	3c 04       	j 8000bd66 <_svfprintf_r+0x6fe>
8000bd60:	c8 03       	ld.a %a3,[%a15]0
8000bd62:	58 0a       	ld.w %d15,[%sp]40
8000bd64:	6c 30       	st.w [%a3]0,%d15
8000bd66:	40 2f       	mov.aa %a15,%a2
8000bd68:	1d ff b8 fc 	j 8000b6d8 <_svfprintf_r+0x70>
8000bd6c:	8f 0a 41 a1 	or %d10,%d10,16
8000bd70:	6f 5a 07 00 	jz.t %d10,5,8000bd7e <_svfprintf_r+0x716>
8000bd74:	d9 fc 08 00 	lea %a12,[%a15]8
8000bd78:	09 f8 40 09 	ld.d %e8,[%a15]
8000bd7c:	3c 0c       	j 8000bd94 <_svfprintf_r+0x72c>
8000bd7e:	d9 fc 04 00 	lea %a12,[%a15]4
8000bd82:	6f 4a 07 80 	jnz.t %d10,4,8000bd90 <_svfprintf_r+0x728>
8000bd86:	6f 6a 05 00 	jz.t %d10,6,8000bd90 <_svfprintf_r+0x728>
8000bd8a:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bd8e:	3c 02       	j 8000bd92 <_svfprintf_r+0x72a>
8000bd90:	48 08       	ld.w %d8,[%a15]0
8000bd92:	82 09       	mov %d9,0
8000bd94:	82 03       	mov %d3,0
8000bd96:	3c 73       	j 8000be7c <_svfprintf_r+0x814>
8000bd98:	3b 00 03 40 	mov %d4,48
8000bd9c:	7b 00 00 f8 	movh %d15,32768
8000bda0:	1b df e8 f0 	addi %d15,%d15,3725
8000bda4:	e9 a4 02 10 	st.b [%sp]66,%d4
8000bda8:	3b 80 07 40 	mov %d4,120
8000bdac:	78 0f       	st.w [%sp]60,%d15
8000bdae:	02 4f       	mov %d15,%d4
8000bdb0:	d9 fc 04 00 	lea %a12,[%a15]4
8000bdb4:	48 08       	ld.w %d8,[%a15]0
8000bdb6:	82 09       	mov %d9,0
8000bdb8:	8f 2a 40 a1 	or %d10,%d10,2
8000bdbc:	e9 a4 03 10 	st.b [%sp]67,%d4
8000bdc0:	82 23       	mov %d3,2
8000bdc2:	78 04       	st.w [%sp]16,%d15
8000bdc4:	3c 5c       	j 8000be7c <_svfprintf_r+0x814>
8000bdc6:	82 07       	mov %d7,0
8000bdc8:	48 0d       	ld.w %d13,[%a15]0
8000bdca:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bdce:	02 e9       	mov %d9,%d14
8000bdd0:	60 ad       	mov.a %a13,%d10
8000bdd2:	d9 fc 04 00 	lea %a12,[%a15]4
8000bdd6:	60 d4       	mov.a %a4,%d13
8000bdd8:	0e ef       	jltz %d14,8000bdf6 <_svfprintf_r+0x78e>
8000bdda:	82 04       	mov %d4,0
8000bddc:	02 e5       	mov %d5,%d14
8000bdde:	6d 00 14 0c 	call 8000d606 <memchr>
8000bde2:	bd 02 f6 00 	jz.a %a2,8000bfce <_svfprintf_r+0x966>
8000bde6:	60 d4       	mov.a %a4,%d13
8000bde8:	01 42 20 30 	sub.a %a3,%a2,%a4
8000bdec:	80 32       	mov.d %d2,%a3
8000bdee:	0b e2 80 91 	min %d9,%d2,%d14
8000bdf2:	1d 00 ee 00 	j 8000bfce <_svfprintf_r+0x966>
8000bdf6:	6d ff cc fa 	call 8000b38e <strlen>
8000bdfa:	02 29       	mov %d9,%d2
8000bdfc:	1d 00 e9 00 	j 8000bfce <_svfprintf_r+0x966>
8000be00:	8f 0a 41 a1 	or %d10,%d10,16
8000be04:	6f 5a 07 00 	jz.t %d10,5,8000be12 <_svfprintf_r+0x7aa>
8000be08:	d9 fc 08 00 	lea %a12,[%a15]8
8000be0c:	09 f8 40 09 	ld.d %e8,[%a15]
8000be10:	3c 0c       	j 8000be28 <_svfprintf_r+0x7c0>
8000be12:	d9 fc 04 00 	lea %a12,[%a15]4
8000be16:	6f 4a 07 80 	jnz.t %d10,4,8000be24 <_svfprintf_r+0x7bc>
8000be1a:	6f 6a 05 00 	jz.t %d10,6,8000be24 <_svfprintf_r+0x7bc>
8000be1e:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000be22:	3c 02       	j 8000be26 <_svfprintf_r+0x7be>
8000be24:	48 08       	ld.w %d8,[%a15]0
8000be26:	82 09       	mov %d9,0
8000be28:	82 13       	mov %d3,1
8000be2a:	3c 29       	j 8000be7c <_svfprintf_r+0x814>
8000be2c:	e9 af 01 10 	st.b [%sp]65,%d15
8000be30:	7b 00 00 f8 	movh %d15,32768
8000be34:	1b df e8 f0 	addi %d15,%d15,3725
8000be38:	78 0f       	st.w [%sp]60,%d15
8000be3a:	6f 5a 07 00 	jz.t %d10,5,8000be48 <_svfprintf_r+0x7e0>
8000be3e:	d9 fc 08 00 	lea %a12,[%a15]8
8000be42:	09 f8 40 09 	ld.d %e8,[%a15]
8000be46:	3c 0c       	j 8000be5e <_svfprintf_r+0x7f6>
8000be48:	d9 fc 04 00 	lea %a12,[%a15]4
8000be4c:	6f 4a 07 80 	jnz.t %d10,4,8000be5a <_svfprintf_r+0x7f2>
8000be50:	6f 6a 05 00 	jz.t %d10,6,8000be5a <_svfprintf_r+0x7f2>
8000be54:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000be58:	3c 02       	j 8000be5c <_svfprintf_r+0x7f4>
8000be5a:	48 08       	ld.w %d8,[%a15]0
8000be5c:	82 09       	mov %d9,0
8000be5e:	82 23       	mov %d3,2
8000be60:	6f 0a 0e 00 	jz.t %d10,0,8000be7c <_svfprintf_r+0x814>
8000be64:	0f 89 a0 40 	or %d4,%d9,%d8
8000be68:	76 4a       	jz %d4,8000be7c <_svfprintf_r+0x814>
8000be6a:	58 04       	ld.w %d15,[%sp]16
8000be6c:	3b 00 03 70 	mov %d7,48
8000be70:	e9 a7 02 10 	st.b [%sp]66,%d7
8000be74:	e9 af 03 10 	st.b [%sp]67,%d15
8000be78:	8f 2a 40 a1 	or %d10,%d10,2
8000be7c:	82 07       	mov %d7,0
8000be7e:	60 ad       	mov.a %a13,%d10
8000be80:	e9 a7 01 10 	st.b [%sp]65,%d7
8000be84:	80 d2       	mov.d %d2,%a13
8000be86:	8b 0e 80 72 	ge %d7,%d14,0
8000be8a:	8f 02 c8 41 	andn %d4,%d2,128
8000be8e:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000be92:	0f 98 a0 60 	or %d6,%d8,%d9
8000be96:	8b 0e 20 42 	ne %d4,%d14,0
8000be9a:	8b 06 00 45 	or.ne %d4,%d6,0
8000be9e:	60 2d       	mov.a %a13,%d2
8000bea0:	df 04 72 00 	jeq %d4,0,8000bf84 <_svfprintf_r+0x91c>
8000bea4:	df 13 06 00 	jeq %d3,1,8000beb0 <_svfprintf_r+0x848>
8000bea8:	df 23 57 00 	jeq %d3,2,8000bf56 <_svfprintf_r+0x8ee>
8000beac:	82 03       	mov %d3,0
8000beae:	3c 03       	j 8000beb4 <_svfprintf_r+0x84c>
8000beb0:	82 04       	mov %d4,0
8000beb2:	3c 22       	j 8000bef6 <_svfprintf_r+0x88e>
8000beb4:	8b 73 02 71 	rsub %d7,%d3,39
8000beb8:	60 72       	mov.a %a2,%d7
8000beba:	8f 78 00 41 	and %d4,%d8,7
8000bebe:	d9 a3 28 10 	lea %a3,[%sp]104
8000bec2:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000bec6:	30 23       	add.a %a3,%a2
8000bec8:	1b 04 03 40 	addi %d4,%d4,48
8000becc:	06 d9       	sh %d9,-3
8000bece:	34 34       	st.b [%a3],%d4
8000bed0:	0f 89 a0 60 	or %d6,%d9,%d8
8000bed4:	c2 13       	add %d3,1
8000bed6:	df 06 ef ff 	jne %d6,0,8000beb4 <_svfprintf_r+0x84c>
8000beda:	80 d2       	mov.d %d2,%a13
8000bedc:	80 3d       	mov.d %d13,%a3
8000bede:	6f 02 61 00 	jz.t %d2,0,8000bfa0 <_svfprintf_r+0x938>
8000bee2:	8b 04 03 42 	eq %d4,%d4,48
8000bee6:	df 04 5d 80 	jne %d4,0,8000bfa0 <_svfprintf_r+0x938>
8000beea:	3b 00 03 70 	mov %d7,48
8000beee:	c2 fd       	add %d13,-1
8000bef0:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000bef4:	3c 56       	j 8000bfa0 <_svfprintf_r+0x938>
8000bef6:	8b 84 02 71 	rsub %d7,%d4,40
8000befa:	8b 09 00 32 	eq %d3,%d9,0
8000befe:	60 73       	mov.a %a3,%d7
8000bf00:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000bf04:	d9 a7 28 10 	lea %a7,[%sp]104
8000bf08:	8b 09 00 35 	or.ne %d3,%d9,0
8000bf0c:	30 37       	add.a %a7,%a3
8000bf0e:	1b 14 00 d0 	addi %d13,%d4,1
8000bf12:	df 03 1b 00 	jeq %d3,0,8000bf48 <_svfprintf_r+0x8e0>
8000bf16:	8b 74 02 41 	rsub %d4,%d4,39
8000bf1a:	60 42       	mov.a %a2,%d4
8000bf1c:	fb a0 00 60 	mov %e6,10
8000bf20:	0b 89 10 48 	mov %e4,%d9,%d8
8000bf24:	d9 af 28 10 	lea %a15,[%sp]104
8000bf28:	30 2f       	add.a %a15,%a2
8000bf2a:	6d 00 98 12 	call 8000e45a <__umoddi3>
8000bf2e:	0b 89 10 48 	mov %e4,%d9,%d8
8000bf32:	1b 02 03 20 	addi %d2,%d2,48
8000bf36:	fb a0 00 60 	mov %e6,10
8000bf3a:	28 02       	st.b [%a15]0,%d2
8000bf3c:	6d 00 3f 12 	call 8000e3ba <__udivdi3>
8000bf40:	02 d4       	mov %d4,%d13
8000bf42:	0b 23 10 88 	mov %e8,%d3,%d2
8000bf46:	3c d8       	j 8000bef6 <_svfprintf_r+0x88e>
8000bf48:	80 7d       	mov.d %d13,%a7
8000bf4a:	1b 08 03 80 	addi %d8,%d8,48
8000bf4e:	c2 fd       	add %d13,-1
8000bf50:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000bf54:	3c 26       	j 8000bfa0 <_svfprintf_r+0x938>
8000bf56:	82 03       	mov %d3,0
8000bf58:	d8 0f       	ld.a %a15,[%sp]60
8000bf5a:	80 ad       	mov.d %d13,%sp
8000bf5c:	8f f8 00 f1 	and %d15,%d8,15
8000bf60:	8b 73 02 71 	rsub %d7,%d3,39
8000bf64:	1b 8d 06 d0 	addi %d13,%d13,104
8000bf68:	10 f7       	addsc.a %a7,%a15,%d15,0
8000bf6a:	42 7d       	add %d13,%d7
8000bf6c:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000bf70:	0c 70       	ld.bu %d15,[%a7]0
8000bf72:	60 d2       	mov.a %a2,%d13
8000bf74:	06 c9       	sh %d9,-4
8000bf76:	2c 20       	st.b [%a2]0,%d15
8000bf78:	0f 89 a0 40 	or %d4,%d9,%d8
8000bf7c:	c2 13       	add %d3,1
8000bf7e:	df 04 ed ff 	jne %d4,0,8000bf58 <_svfprintf_r+0x8f0>
8000bf82:	3c 0f       	j 8000bfa0 <_svfprintf_r+0x938>
8000bf84:	80 a2       	mov.d %d2,%sp
8000bf86:	1b 02 09 d0 	addi %d13,%d2,144
8000bf8a:	f6 3b       	jnz %d3,8000bfa0 <_svfprintf_r+0x938>
8000bf8c:	80 df       	mov.d %d15,%a13
8000bf8e:	2e 09       	jz.t %d15,0,8000bfa0 <_svfprintf_r+0x938>
8000bf90:	1b 02 0d d0 	addi %d13,%d2,208
8000bf94:	60 d2       	mov.a %a2,%d13
8000bf96:	3b 00 03 70 	mov %d7,48
8000bf9a:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000bf9e:	80 2d       	mov.d %d13,%a2
8000bfa0:	d9 a3 10 20 	lea %a3,[%sp]144
8000bfa4:	80 39       	mov.d %d9,%a3
8000bfa6:	a2 d9       	sub %d9,%d13
8000bfa8:	3c 14       	j 8000bfd0 <_svfprintf_r+0x968>
8000bfaa:	e9 af 01 10 	st.b [%sp]65,%d15
8000bfae:	58 04       	ld.w %d15,[%sp]16
8000bfb0:	df 0f 1f 04 	jeq %d15,0,8000c7ee <_svfprintf_r+0x1186>
8000bfb4:	82 03       	mov %d3,0
8000bfb6:	60 ad       	mov.a %a13,%d10
8000bfb8:	e9 af 28 10 	st.b [%sp]104,%d15
8000bfbc:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bfc0:	40 fc       	mov.aa %a12,%a15
8000bfc2:	80 a2       	mov.d %d2,%sp
8000bfc4:	82 19       	mov %d9,1
8000bfc6:	82 0e       	mov %d14,0
8000bfc8:	1b 82 06 d0 	addi %d13,%d2,104
8000bfcc:	3c 02       	j 8000bfd0 <_svfprintf_r+0x968>
8000bfce:	82 0e       	mov %d14,0
8000bfd0:	79 a7 01 10 	ld.b %d7,[%sp]65
8000bfd4:	80 df       	mov.d %d15,%a13
8000bfd6:	0b e9 a0 a1 	max %d10,%d9,%d14
8000bfda:	80 d2       	mov.d %d2,%a13
8000bfdc:	16 02       	and %d15,2
8000bfde:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000bfe2:	60 ff       	mov.a %a15,%d15
8000bfe4:	8a 2a       	cadd %d10,%d15,2
8000bfe6:	8f 42 08 f1 	and %d15,%d2,132
8000bfea:	ee 48       	jnz %d15,8000c07a <_svfprintf_r+0xa12>
8000bfec:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000bff0:	a2 a8       	sub %d8,%d10
8000bff2:	bf 18 44 00 	jlt %d8,1,8000c07a <_svfprintf_r+0xa12>
8000bff6:	91 00 00 28 	movh.a %a2,32768
8000bffa:	d9 22 f0 a0 	lea %a2,[%a2]3760 <80000eb0 <blanks.4035>>
8000bffe:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000eb0 <blanks.4035>>
8000c002:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000eb0 <blanks.4035>>
8000c006:	8b 18 81 72 	ge %d7,%d8,17
8000c00a:	f4 e2       	st.a [%a14],%a2
8000c00c:	df 07 20 00 	jeq %d7,0,8000c04c <_svfprintf_r+0x9e4>
8000c010:	1b 14 00 00 	addi %d0,%d4,1
8000c014:	3b 00 01 20 	mov %d2,16
8000c018:	1b 01 01 10 	addi %d1,%d1,16
8000c01c:	59 e2 04 00 	st.w [%a14]4,%d2
8000c020:	59 a0 20 10 	st.w [%sp]96,%d0
8000c024:	59 a1 24 10 	st.w [%sp]100,%d1
8000c028:	8b 80 80 02 	ge %d0,%d0,8
8000c02c:	d9 ee 08 00 	lea %a14,[%a14]8
8000c030:	76 0b       	jz %d0,8000c046 <_svfprintf_r+0x9de>
8000c032:	60 c4       	mov.a %a4,%d12
8000c034:	60 b5       	mov.a %a5,%d11
8000c036:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c03a:	6d 00 f4 0d 	call 8000dc22 <__ssprint_r>
8000c03e:	df 02 e0 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c042:	d9 ae 10 20 	lea %a14,[%sp]144
8000c046:	1b 08 ff 8f 	addi %d8,%d8,-16
8000c04a:	3c d6       	j 8000bff6 <_svfprintf_r+0x98e>
8000c04c:	c2 14       	add %d4,1
8000c04e:	42 81       	add %d1,%d8
8000c050:	59 e8 04 00 	st.w [%a14]4,%d8
8000c054:	59 a4 20 10 	st.w [%sp]96,%d4
8000c058:	59 a1 24 10 	st.w [%sp]100,%d1
8000c05c:	8b 84 80 42 	ge %d4,%d4,8
8000c060:	d9 ee 08 00 	lea %a14,[%a14]8
8000c064:	76 4b       	jz %d4,8000c07a <_svfprintf_r+0xa12>
8000c066:	60 c4       	mov.a %a4,%d12
8000c068:	60 b5       	mov.a %a5,%d11
8000c06a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c06e:	6d 00 da 0d 	call 8000dc22 <__ssprint_r>
8000c072:	df 02 c6 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c076:	d9 ae 10 20 	lea %a14,[%sp]144
8000c07a:	79 a4 01 10 	ld.b %d4,[%sp]65
8000c07e:	df 04 21 00 	jeq %d4,0,8000c0c0 <_svfprintf_r+0xa58>
8000c082:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c086:	d9 a7 01 10 	lea %a7,[%sp]65
8000c08a:	c2 14       	add %d4,1
8000c08c:	59 a4 24 10 	st.w [%sp]100,%d4
8000c090:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c094:	82 17       	mov %d7,1
8000c096:	c2 14       	add %d4,1
8000c098:	f4 e7       	st.a [%a14],%a7
8000c09a:	59 e7 04 00 	st.w [%a14]4,%d7
8000c09e:	59 a4 20 10 	st.w [%sp]96,%d4
8000c0a2:	8b 84 80 42 	ge %d4,%d4,8
8000c0a6:	d9 ee 08 00 	lea %a14,[%a14]8
8000c0aa:	76 4b       	jz %d4,8000c0c0 <_svfprintf_r+0xa58>
8000c0ac:	60 c4       	mov.a %a4,%d12
8000c0ae:	60 b5       	mov.a %a5,%d11
8000c0b0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c0b4:	6d 00 b7 0d 	call 8000dc22 <__ssprint_r>
8000c0b8:	df 02 a3 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c0bc:	d9 ae 10 20 	lea %a14,[%sp]144
8000c0c0:	bd 0f 21 00 	jz.a %a15,8000c102 <_svfprintf_r+0xa9a>
8000c0c4:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c0c8:	d9 a7 02 10 	lea %a7,[%sp]66
8000c0cc:	c2 24       	add %d4,2
8000c0ce:	59 a4 24 10 	st.w [%sp]100,%d4
8000c0d2:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c0d6:	82 27       	mov %d7,2
8000c0d8:	c2 14       	add %d4,1
8000c0da:	f4 e7       	st.a [%a14],%a7
8000c0dc:	59 e7 04 00 	st.w [%a14]4,%d7
8000c0e0:	59 a4 20 10 	st.w [%sp]96,%d4
8000c0e4:	8b 84 80 42 	ge %d4,%d4,8
8000c0e8:	d9 ee 08 00 	lea %a14,[%a14]8
8000c0ec:	76 4b       	jz %d4,8000c102 <_svfprintf_r+0xa9a>
8000c0ee:	60 c4       	mov.a %a4,%d12
8000c0f0:	60 b5       	mov.a %a5,%d11
8000c0f2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c0f6:	6d 00 96 0d 	call 8000dc22 <__ssprint_r>
8000c0fa:	df 02 82 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c0fe:	d9 ae 10 20 	lea %a14,[%sp]144
8000c102:	8b 0f 28 42 	ne %d4,%d15,128
8000c106:	df 04 48 80 	jne %d4,0,8000c196 <_svfprintf_r+0xb2e>
8000c10a:	58 07       	ld.w %d15,[%sp]28
8000c10c:	7b 00 00 28 	movh %d2,32768
8000c110:	60 23       	mov.a %a3,%d2
8000c112:	a2 af       	sub %d15,%d10
8000c114:	d9 3f e0 a0 	lea %a15,[%a3]3744
8000c118:	bf 1f 3f 00 	jlt %d15,1,8000c196 <_svfprintf_r+0xb2e>
8000c11c:	19 a7 24 10 	ld.w %d7,[%sp]100
8000c120:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c124:	8b 1f 81 82 	ge %d8,%d15,17
8000c128:	ec e0       	st.a [%a14]0,%a15
8000c12a:	df 08 20 00 	jeq %d8,0,8000c16a <_svfprintf_r+0xb02>
8000c12e:	1b 14 00 00 	addi %d0,%d4,1
8000c132:	3b 00 01 20 	mov %d2,16
8000c136:	1b 07 01 10 	addi %d1,%d7,16
8000c13a:	59 e2 04 00 	st.w [%a14]4,%d2
8000c13e:	59 a0 20 10 	st.w [%sp]96,%d0
8000c142:	59 a1 24 10 	st.w [%sp]100,%d1
8000c146:	8b 80 80 02 	ge %d0,%d0,8
8000c14a:	d9 ee 08 00 	lea %a14,[%a14]8
8000c14e:	76 0b       	jz %d0,8000c164 <_svfprintf_r+0xafc>
8000c150:	60 c4       	mov.a %a4,%d12
8000c152:	60 b5       	mov.a %a5,%d11
8000c154:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c158:	6d 00 65 0d 	call 8000dc22 <__ssprint_r>
8000c15c:	df 02 51 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c160:	d9 ae 10 20 	lea %a14,[%sp]144
8000c164:	1b 0f ff ff 	addi %d15,%d15,-16
8000c168:	3c da       	j 8000c11c <_svfprintf_r+0xab4>
8000c16a:	c2 14       	add %d4,1
8000c16c:	42 f7       	add %d7,%d15
8000c16e:	6c e1       	st.w [%a14]4,%d15
8000c170:	59 a4 20 10 	st.w [%sp]96,%d4
8000c174:	59 a7 24 10 	st.w [%sp]100,%d7
8000c178:	8b 84 80 42 	ge %d4,%d4,8
8000c17c:	d9 ee 08 00 	lea %a14,[%a14]8
8000c180:	76 4b       	jz %d4,8000c196 <_svfprintf_r+0xb2e>
8000c182:	60 c4       	mov.a %a4,%d12
8000c184:	60 b5       	mov.a %a5,%d11
8000c186:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c18a:	6d 00 4c 0d 	call 8000dc22 <__ssprint_r>
8000c18e:	df 02 38 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c192:	d9 ae 10 20 	lea %a14,[%sp]144
8000c196:	7b 00 00 88 	movh %d8,32768
8000c19a:	a2 9e       	sub %d14,%d9
8000c19c:	1b 08 ea 80 	addi %d8,%d8,3744
8000c1a0:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000c1a4:	bf 1e 3c 00 	jlt %d14,1,8000c21c <_svfprintf_r+0xbb4>
8000c1a8:	19 a6 24 10 	ld.w %d6,[%sp]100
8000c1ac:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c1b0:	8b 1e 81 02 	ge %d0,%d14,17
8000c1b4:	74 e8       	st.w [%a14],%d8
8000c1b6:	df 00 1c 00 	jeq %d0,0,8000c1ee <_svfprintf_r+0xb86>
8000c1ba:	c2 14       	add %d4,1
8000c1bc:	1b 06 01 00 	addi %d0,%d6,16
8000c1c0:	ec e1       	st.a [%a14]4,%a15
8000c1c2:	59 a4 20 10 	st.w [%sp]96,%d4
8000c1c6:	59 a0 24 10 	st.w [%sp]100,%d0
8000c1ca:	8b 84 80 42 	ge %d4,%d4,8
8000c1ce:	d9 ee 08 00 	lea %a14,[%a14]8
8000c1d2:	76 4b       	jz %d4,8000c1e8 <_svfprintf_r+0xb80>
8000c1d4:	60 c4       	mov.a %a4,%d12
8000c1d6:	60 b5       	mov.a %a5,%d11
8000c1d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1dc:	6d 00 23 0d 	call 8000dc22 <__ssprint_r>
8000c1e0:	df 02 0f 83 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c1e4:	d9 ae 10 20 	lea %a14,[%sp]144
8000c1e8:	1b 0e ff ef 	addi %d14,%d14,-16
8000c1ec:	3c de       	j 8000c1a8 <_svfprintf_r+0xb40>
8000c1ee:	c2 14       	add %d4,1
8000c1f0:	42 e6       	add %d6,%d14
8000c1f2:	59 ee 04 00 	st.w [%a14]4,%d14
8000c1f6:	59 a4 20 10 	st.w [%sp]96,%d4
8000c1fa:	59 a6 24 10 	st.w [%sp]100,%d6
8000c1fe:	8b 84 80 42 	ge %d4,%d4,8
8000c202:	d9 ee 08 00 	lea %a14,[%a14]8
8000c206:	76 4b       	jz %d4,8000c21c <_svfprintf_r+0xbb4>
8000c208:	60 c4       	mov.a %a4,%d12
8000c20a:	60 b5       	mov.a %a5,%d11
8000c20c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c210:	6d 00 09 0d 	call 8000dc22 <__ssprint_r>
8000c214:	df 02 f5 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c218:	d9 ae 10 20 	lea %a14,[%sp]144
8000c21c:	80 df       	mov.d %d15,%a13
8000c21e:	19 ae 24 10 	ld.w %d14,[%sp]100
8000c222:	19 a8 20 10 	ld.w %d8,[%sp]96
8000c226:	6f 8f 1d 80 	jnz.t %d15,8,8000c260 <_svfprintf_r+0xbf8>
8000c22a:	c2 18       	add %d8,1
8000c22c:	59 e9 04 00 	st.w [%a14]4,%d9
8000c230:	42 e9       	add %d9,%d14
8000c232:	59 a8 20 10 	st.w [%sp]96,%d8
8000c236:	74 ed       	st.w [%a14],%d13
8000c238:	59 a9 24 10 	st.w [%sp]100,%d9
8000c23c:	8b 88 80 82 	ge %d8,%d8,8
8000c240:	d9 ef 08 00 	lea %a15,[%a14]8
8000c244:	df 08 79 02 	jeq %d8,0,8000c736 <_svfprintf_r+0x10ce>
8000c248:	60 c4       	mov.a %a4,%d12
8000c24a:	60 b5       	mov.a %a5,%d11
8000c24c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c250:	6d 00 e9 0c 	call 8000dc22 <__ssprint_r>
8000c254:	df 02 d5 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c258:	d9 af 10 20 	lea %a15,[%sp]144
8000c25c:	1d 00 6d 02 	j 8000c736 <_svfprintf_r+0x10ce>
8000c260:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c264:	8b 62 46 f2 	lt %d15,%d2,102
8000c268:	df 0f be 81 	jne %d15,0,8000c5e4 <_svfprintf_r+0xf7c>
8000c26c:	d2 06       	mov %e6,0
8000c26e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c272:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c276:	6d 00 db 0f 	call 8000e22c <__eqdf2>
8000c27a:	df 02 78 80 	jne %d2,0,8000c36a <_svfprintf_r+0xd02>
8000c27e:	7b 00 00 38 	movh %d3,32768
8000c282:	1b e3 e9 30 	addi %d3,%d3,3742
8000c286:	c2 18       	add %d8,1
8000c288:	74 e3       	st.w [%a14],%d3
8000c28a:	1b 1e 00 90 	addi %d9,%d14,1
8000c28e:	82 13       	mov %d3,1
8000c290:	59 a8 20 10 	st.w [%sp]96,%d8
8000c294:	59 e3 04 00 	st.w [%a14]4,%d3
8000c298:	59 a9 24 10 	st.w [%sp]100,%d9
8000c29c:	8b 88 80 82 	ge %d8,%d8,8
8000c2a0:	d9 ef 08 00 	lea %a15,[%a14]8
8000c2a4:	76 8b       	jz %d8,8000c2ba <_svfprintf_r+0xc52>
8000c2a6:	60 c4       	mov.a %a4,%d12
8000c2a8:	60 b5       	mov.a %a5,%d11
8000c2aa:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2ae:	6d 00 ba 0c 	call 8000dc22 <__ssprint_r>
8000c2b2:	df 02 a6 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c2b6:	d9 af 10 20 	lea %a15,[%sp]144
8000c2ba:	58 11       	ld.w %d15,[%sp]68
8000c2bc:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c2c0:	3f 2f 05 00 	jlt %d15,%d2,8000c2ca <_svfprintf_r+0xc62>
8000c2c4:	80 df       	mov.d %d15,%a13
8000c2c6:	6f 0f 38 02 	jz.t %d15,0,8000c736 <_svfprintf_r+0x10ce>
8000c2ca:	58 08       	ld.w %d15,[%sp]32
8000c2cc:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c2d0:	68 1f       	st.w [%a15]4,%d15
8000c2d2:	58 19       	ld.w %d15,[%sp]100
8000c2d4:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c2d8:	42 2f       	add %d15,%d2
8000c2da:	78 19       	st.w [%sp]100,%d15
8000c2dc:	58 18       	ld.w %d15,[%sp]96
8000c2de:	e8 03       	st.a [%a15]0,%a3
8000c2e0:	c2 1f       	add %d15,1
8000c2e2:	78 18       	st.w [%sp]96,%d15
8000c2e4:	8b 8f 80 f2 	ge %d15,%d15,8
8000c2e8:	d9 ff 08 00 	lea %a15,[%a15]8
8000c2ec:	6e 0b       	jz %d15,8000c302 <_svfprintf_r+0xc9a>
8000c2ee:	60 c4       	mov.a %a4,%d12
8000c2f0:	60 b5       	mov.a %a5,%d11
8000c2f2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2f6:	6d 00 96 0c 	call 8000dc22 <__ssprint_r>
8000c2fa:	df 02 82 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c2fe:	d9 af 10 20 	lea %a15,[%sp]144
8000c302:	58 05       	ld.w %d15,[%sp]20
8000c304:	7b 00 00 88 	movh %d8,32768
8000c308:	c2 ff       	add %d15,-1
8000c30a:	1b 08 ea 80 	addi %d8,%d8,3744
8000c30e:	3b 00 01 90 	mov %d9,16
8000c312:	bf 1f 12 02 	jlt %d15,1,8000c736 <_svfprintf_r+0x10ce>
8000c316:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c31a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c31e:	8b 1f 81 42 	ge %d4,%d15,17
8000c322:	68 08       	st.w [%a15]0,%d8
8000c324:	df 04 1c 00 	jeq %d4,0,8000c35c <_svfprintf_r+0xcf4>
8000c328:	c2 13       	add %d3,1
8000c32a:	1b 05 01 40 	addi %d4,%d5,16
8000c32e:	68 19       	st.w [%a15]4,%d9
8000c330:	59 a3 20 10 	st.w [%sp]96,%d3
8000c334:	59 a4 24 10 	st.w [%sp]100,%d4
8000c338:	8b 83 80 32 	ge %d3,%d3,8
8000c33c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c340:	76 3b       	jz %d3,8000c356 <_svfprintf_r+0xcee>
8000c342:	60 c4       	mov.a %a4,%d12
8000c344:	60 b5       	mov.a %a5,%d11
8000c346:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c34a:	6d 00 6c 0c 	call 8000dc22 <__ssprint_r>
8000c34e:	df 02 58 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c352:	d9 af 10 20 	lea %a15,[%sp]144
8000c356:	1b 0f ff ff 	addi %d15,%d15,-16
8000c35a:	3c de       	j 8000c316 <_svfprintf_r+0xcae>
8000c35c:	12 54       	add %d4,%d15,%d5
8000c35e:	68 1f       	st.w [%a15]4,%d15
8000c360:	59 a4 24 10 	st.w [%sp]100,%d4
8000c364:	9a 13       	add %d15,%d3,1
8000c366:	1d 00 e1 01 	j 8000c728 <_svfprintf_r+0x10c0>
8000c36a:	19 a3 04 10 	ld.w %d3,[%sp]68
8000c36e:	ff 13 8e 00 	jge %d3,1,8000c48a <_svfprintf_r+0xe22>
8000c372:	7b 00 00 38 	movh %d3,32768
8000c376:	1b e3 e9 30 	addi %d3,%d3,3742
8000c37a:	c2 18       	add %d8,1
8000c37c:	74 e3       	st.w [%a14],%d3
8000c37e:	1b 1e 00 90 	addi %d9,%d14,1
8000c382:	82 13       	mov %d3,1
8000c384:	59 a8 20 10 	st.w [%sp]96,%d8
8000c388:	59 e3 04 00 	st.w [%a14]4,%d3
8000c38c:	59 a9 24 10 	st.w [%sp]100,%d9
8000c390:	8b 88 80 82 	ge %d8,%d8,8
8000c394:	d9 ef 08 00 	lea %a15,[%a14]8
8000c398:	76 8b       	jz %d8,8000c3ae <_svfprintf_r+0xd46>
8000c39a:	60 c4       	mov.a %a4,%d12
8000c39c:	60 b5       	mov.a %a5,%d11
8000c39e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3a2:	6d 00 40 0c 	call 8000dc22 <__ssprint_r>
8000c3a6:	df 02 2c 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c3aa:	d9 af 10 20 	lea %a15,[%sp]144
8000c3ae:	58 11       	ld.w %d15,[%sp]68
8000c3b0:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c3b4:	a6 2f       	or %d15,%d2
8000c3b6:	ee 04       	jnz %d15,8000c3be <_svfprintf_r+0xd56>
8000c3b8:	80 df       	mov.d %d15,%a13
8000c3ba:	6f 0f be 01 	jz.t %d15,0,8000c736 <_svfprintf_r+0x10ce>
8000c3be:	58 08       	ld.w %d15,[%sp]32
8000c3c0:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c3c4:	68 1f       	st.w [%a15]4,%d15
8000c3c6:	58 19       	ld.w %d15,[%sp]100
8000c3c8:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c3cc:	42 2f       	add %d15,%d2
8000c3ce:	78 19       	st.w [%sp]100,%d15
8000c3d0:	58 18       	ld.w %d15,[%sp]96
8000c3d2:	e8 03       	st.a [%a15]0,%a3
8000c3d4:	c2 1f       	add %d15,1
8000c3d6:	78 18       	st.w [%sp]96,%d15
8000c3d8:	8b 8f 80 f2 	ge %d15,%d15,8
8000c3dc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c3e0:	6e 0b       	jz %d15,8000c3f6 <_svfprintf_r+0xd8e>
8000c3e2:	60 c4       	mov.a %a4,%d12
8000c3e4:	60 b5       	mov.a %a5,%d11
8000c3e6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3ea:	6d 00 1c 0c 	call 8000dc22 <__ssprint_r>
8000c3ee:	df 02 08 82 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c3f2:	d9 af 10 20 	lea %a15,[%sp]144
8000c3f6:	58 11       	ld.w %d15,[%sp]68
8000c3f8:	7b 00 00 88 	movh %d8,32768
8000c3fc:	32 5f       	rsub %d15
8000c3fe:	1b 08 ea 80 	addi %d8,%d8,3744
8000c402:	3b 00 01 90 	mov %d9,16
8000c406:	bf 1f 3a 00 	jlt %d15,1,8000c47a <_svfprintf_r+0xe12>
8000c40a:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c40e:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c412:	8b 1f 81 42 	ge %d4,%d15,17
8000c416:	68 08       	st.w [%a15]0,%d8
8000c418:	df 04 1c 00 	jeq %d4,0,8000c450 <_svfprintf_r+0xde8>
8000c41c:	c2 13       	add %d3,1
8000c41e:	1b 05 01 40 	addi %d4,%d5,16
8000c422:	68 19       	st.w [%a15]4,%d9
8000c424:	59 a3 20 10 	st.w [%sp]96,%d3
8000c428:	59 a4 24 10 	st.w [%sp]100,%d4
8000c42c:	8b 83 80 32 	ge %d3,%d3,8
8000c430:	d9 ff 08 00 	lea %a15,[%a15]8
8000c434:	76 3b       	jz %d3,8000c44a <_svfprintf_r+0xde2>
8000c436:	60 c4       	mov.a %a4,%d12
8000c438:	60 b5       	mov.a %a5,%d11
8000c43a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c43e:	6d 00 f2 0b 	call 8000dc22 <__ssprint_r>
8000c442:	df 02 de 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c446:	d9 af 10 20 	lea %a15,[%sp]144
8000c44a:	1b 0f ff ff 	addi %d15,%d15,-16
8000c44e:	3c de       	j 8000c40a <_svfprintf_r+0xda2>
8000c450:	68 1f       	st.w [%a15]4,%d15
8000c452:	12 54       	add %d4,%d15,%d5
8000c454:	9a 13       	add %d15,%d3,1
8000c456:	78 18       	st.w [%sp]96,%d15
8000c458:	59 a4 24 10 	st.w [%sp]100,%d4
8000c45c:	8b 8f 80 f2 	ge %d15,%d15,8
8000c460:	d9 ff 08 00 	lea %a15,[%a15]8
8000c464:	6e 0b       	jz %d15,8000c47a <_svfprintf_r+0xe12>
8000c466:	60 c4       	mov.a %a4,%d12
8000c468:	60 b5       	mov.a %a5,%d11
8000c46a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c46e:	6d 00 da 0b 	call 8000dc22 <__ssprint_r>
8000c472:	df 02 c6 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c476:	d9 af 10 20 	lea %a15,[%sp]144
8000c47a:	58 05       	ld.w %d15,[%sp]20
8000c47c:	68 0d       	st.w [%a15]0,%d13
8000c47e:	68 1f       	st.w [%a15]4,%d15
8000c480:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c484:	58 19       	ld.w %d15,[%sp]100
8000c486:	1d 00 4d 01 	j 8000c720 <_svfprintf_r+0x10b8>
8000c48a:	58 05       	ld.w %d15,[%sp]20
8000c48c:	74 ed       	st.w [%a14],%d13
8000c48e:	3f f3 6a 00 	jlt %d3,%d15,8000c562 <_svfprintf_r+0xefa>
8000c492:	02 f9       	mov %d9,%d15
8000c494:	c2 18       	add %d8,1
8000c496:	42 e9       	add %d9,%d14
8000c498:	59 a8 20 10 	st.w [%sp]96,%d8
8000c49c:	6c e1       	st.w [%a14]4,%d15
8000c49e:	59 a9 24 10 	st.w [%sp]100,%d9
8000c4a2:	8b 88 80 82 	ge %d8,%d8,8
8000c4a6:	d9 ef 08 00 	lea %a15,[%a14]8
8000c4aa:	76 8b       	jz %d8,8000c4c0 <_svfprintf_r+0xe58>
8000c4ac:	60 c4       	mov.a %a4,%d12
8000c4ae:	60 b5       	mov.a %a5,%d11
8000c4b0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c4b4:	6d 00 b7 0b 	call 8000dc22 <__ssprint_r>
8000c4b8:	df 02 a3 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c4bc:	d9 af 10 20 	lea %a15,[%sp]144
8000c4c0:	58 11       	ld.w %d15,[%sp]68
8000c4c2:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c4c6:	7b 00 00 88 	movh %d8,32768
8000c4ca:	a2 2f       	sub %d15,%d2
8000c4cc:	1b 08 ea 80 	addi %d8,%d8,3744
8000c4d0:	3b 00 01 90 	mov %d9,16
8000c4d4:	bf 1f 3a 00 	jlt %d15,1,8000c548 <_svfprintf_r+0xee0>
8000c4d8:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c4dc:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c4e0:	8b 1f 81 42 	ge %d4,%d15,17
8000c4e4:	68 08       	st.w [%a15]0,%d8
8000c4e6:	df 04 1c 00 	jeq %d4,0,8000c51e <_svfprintf_r+0xeb6>
8000c4ea:	c2 13       	add %d3,1
8000c4ec:	1b 05 01 40 	addi %d4,%d5,16
8000c4f0:	68 19       	st.w [%a15]4,%d9
8000c4f2:	59 a3 20 10 	st.w [%sp]96,%d3
8000c4f6:	59 a4 24 10 	st.w [%sp]100,%d4
8000c4fa:	8b 83 80 32 	ge %d3,%d3,8
8000c4fe:	d9 ff 08 00 	lea %a15,[%a15]8
8000c502:	76 3b       	jz %d3,8000c518 <_svfprintf_r+0xeb0>
8000c504:	60 c4       	mov.a %a4,%d12
8000c506:	60 b5       	mov.a %a5,%d11
8000c508:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c50c:	6d 00 8b 0b 	call 8000dc22 <__ssprint_r>
8000c510:	df 02 77 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c514:	d9 af 10 20 	lea %a15,[%sp]144
8000c518:	1b 0f ff ff 	addi %d15,%d15,-16
8000c51c:	3c de       	j 8000c4d8 <_svfprintf_r+0xe70>
8000c51e:	68 1f       	st.w [%a15]4,%d15
8000c520:	12 54       	add %d4,%d15,%d5
8000c522:	9a 13       	add %d15,%d3,1
8000c524:	78 18       	st.w [%sp]96,%d15
8000c526:	59 a4 24 10 	st.w [%sp]100,%d4
8000c52a:	8b 8f 80 f2 	ge %d15,%d15,8
8000c52e:	d9 ff 08 00 	lea %a15,[%a15]8
8000c532:	6e 0b       	jz %d15,8000c548 <_svfprintf_r+0xee0>
8000c534:	60 c4       	mov.a %a4,%d12
8000c536:	60 b5       	mov.a %a5,%d11
8000c538:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c53c:	6d 00 73 0b 	call 8000dc22 <__ssprint_r>
8000c540:	df 02 5f 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c544:	d9 af 10 20 	lea %a15,[%sp]144
8000c548:	80 df       	mov.d %d15,%a13
8000c54a:	6f 0f f6 00 	jz.t %d15,0,8000c736 <_svfprintf_r+0x10ce>
8000c54e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c552:	58 08       	ld.w %d15,[%sp]32
8000c554:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c558:	68 1f       	st.w [%a15]4,%d15
8000c55a:	e8 03       	st.a [%a15]0,%a3
8000c55c:	58 19       	ld.w %d15,[%sp]100
8000c55e:	1d 00 e1 00 	j 8000c720 <_svfprintf_r+0x10b8>
8000c562:	c2 18       	add %d8,1
8000c564:	59 e3 04 00 	st.w [%a14]4,%d3
8000c568:	42 e3       	add %d3,%d14
8000c56a:	59 a8 20 10 	st.w [%sp]96,%d8
8000c56e:	59 a3 24 10 	st.w [%sp]100,%d3
8000c572:	8b 88 80 82 	ge %d8,%d8,8
8000c576:	d9 ef 08 00 	lea %a15,[%a14]8
8000c57a:	76 8b       	jz %d8,8000c590 <_svfprintf_r+0xf28>
8000c57c:	60 c4       	mov.a %a4,%d12
8000c57e:	60 b5       	mov.a %a5,%d11
8000c580:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c584:	6d 00 4f 0b 	call 8000dc22 <__ssprint_r>
8000c588:	df 02 3b 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c58c:	d9 af 10 20 	lea %a15,[%sp]144
8000c590:	58 08       	ld.w %d15,[%sp]32
8000c592:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c596:	68 1f       	st.w [%a15]4,%d15
8000c598:	58 19       	ld.w %d15,[%sp]100
8000c59a:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c59e:	42 2f       	add %d15,%d2
8000c5a0:	78 19       	st.w [%sp]100,%d15
8000c5a2:	58 18       	ld.w %d15,[%sp]96
8000c5a4:	99 ae 04 10 	ld.a %a14,[%sp]68
8000c5a8:	c2 1f       	add %d15,1
8000c5aa:	60 d2       	mov.a %a2,%d13
8000c5ac:	e8 03       	st.a [%a15]0,%a3
8000c5ae:	78 18       	st.w [%sp]96,%d15
8000c5b0:	8b 8f 80 f2 	ge %d15,%d15,8
8000c5b4:	30 2e       	add.a %a14,%a2
8000c5b6:	d9 ff 08 00 	lea %a15,[%a15]8
8000c5ba:	6e 0b       	jz %d15,8000c5d0 <_svfprintf_r+0xf68>
8000c5bc:	60 c4       	mov.a %a4,%d12
8000c5be:	60 b5       	mov.a %a5,%d11
8000c5c0:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c5c4:	6d 00 2f 0b 	call 8000dc22 <__ssprint_r>
8000c5c8:	df 02 1b 81 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c5cc:	d9 af 10 20 	lea %a15,[%sp]144
8000c5d0:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c5d4:	58 11       	ld.w %d15,[%sp]68
8000c5d6:	e8 0e       	st.a [%a15]0,%a14
8000c5d8:	5a f2       	sub %d15,%d2,%d15
8000c5da:	68 1f       	st.w [%a15]4,%d15
8000c5dc:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c5e0:	1d 00 a0 00 	j 8000c720 <_svfprintf_r+0x10b8>
8000c5e4:	c2 18       	add %d8,1
8000c5e6:	82 13       	mov %d3,1
8000c5e8:	1b 1e 00 90 	addi %d9,%d14,1
8000c5ec:	58 05       	ld.w %d15,[%sp]20
8000c5ee:	59 a8 20 10 	st.w [%sp]96,%d8
8000c5f2:	74 ed       	st.w [%a14],%d13
8000c5f4:	59 e3 04 00 	st.w [%a14]4,%d3
8000c5f8:	59 a9 24 10 	st.w [%sp]100,%d9
8000c5fc:	8b 88 80 82 	ge %d8,%d8,8
8000c600:	ff 2f 05 00 	jge %d15,2,8000c60a <_svfprintf_r+0xfa2>
8000c604:	80 d2       	mov.d %d2,%a13
8000c606:	6f 02 81 00 	jz.t %d2,0,8000c708 <_svfprintf_r+0x10a0>
8000c60a:	d9 ef 08 00 	lea %a15,[%a14]8
8000c60e:	76 8b       	jz %d8,8000c624 <_svfprintf_r+0xfbc>
8000c610:	60 c4       	mov.a %a4,%d12
8000c612:	60 b5       	mov.a %a5,%d11
8000c614:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c618:	6d 00 05 0b 	call 8000dc22 <__ssprint_r>
8000c61c:	df 02 f1 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c620:	d9 af 10 20 	lea %a15,[%sp]144
8000c624:	58 08       	ld.w %d15,[%sp]32
8000c626:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c62a:	68 1f       	st.w [%a15]4,%d15
8000c62c:	58 19       	ld.w %d15,[%sp]100
8000c62e:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c632:	42 2f       	add %d15,%d2
8000c634:	78 19       	st.w [%sp]100,%d15
8000c636:	58 18       	ld.w %d15,[%sp]96
8000c638:	e8 03       	st.a [%a15]0,%a3
8000c63a:	c2 1f       	add %d15,1
8000c63c:	78 18       	st.w [%sp]96,%d15
8000c63e:	8b 8f 80 f2 	ge %d15,%d15,8
8000c642:	d9 ff 08 00 	lea %a15,[%a15]8
8000c646:	6e 0b       	jz %d15,8000c65c <_svfprintf_r+0xff4>
8000c648:	60 c4       	mov.a %a4,%d12
8000c64a:	60 b5       	mov.a %a5,%d11
8000c64c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c650:	6d 00 e9 0a 	call 8000dc22 <__ssprint_r>
8000c654:	df 02 d5 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c658:	d9 af 10 20 	lea %a15,[%sp]144
8000c65c:	d2 06       	mov %e6,0
8000c65e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c662:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c666:	6d 00 03 0e 	call 8000e26c <__nedf2>
8000c66a:	58 05       	ld.w %d15,[%sp]20
8000c66c:	c2 ff       	add %d15,-1
8000c66e:	76 2c       	jz %d2,8000c686 <_svfprintf_r+0x101e>
8000c670:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c674:	60 de       	mov.a %a14,%d13
8000c676:	68 1f       	st.w [%a15]4,%d15
8000c678:	42 2f       	add %d15,%d2
8000c67a:	78 19       	st.w [%sp]100,%d15
8000c67c:	58 18       	ld.w %d15,[%sp]96
8000c67e:	b0 1e       	add.a %a14,1
8000c680:	e8 0e       	st.a [%a15]0,%a14
8000c682:	c2 1f       	add %d15,1
8000c684:	3c 31       	j 8000c6e6 <_svfprintf_r+0x107e>
8000c686:	7b 00 00 88 	movh %d8,32768
8000c68a:	1b 08 ea 80 	addi %d8,%d8,3744
8000c68e:	3b 00 01 90 	mov %d9,16
8000c692:	bf 1f 3f 00 	jlt %d15,1,8000c710 <_svfprintf_r+0x10a8>
8000c696:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c69a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c69e:	8b 1f 81 42 	ge %d4,%d15,17
8000c6a2:	68 08       	st.w [%a15]0,%d8
8000c6a4:	df 04 1c 00 	jeq %d4,0,8000c6dc <_svfprintf_r+0x1074>
8000c6a8:	c2 13       	add %d3,1
8000c6aa:	1b 05 01 40 	addi %d4,%d5,16
8000c6ae:	68 19       	st.w [%a15]4,%d9
8000c6b0:	59 a3 20 10 	st.w [%sp]96,%d3
8000c6b4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6b8:	8b 83 80 32 	ge %d3,%d3,8
8000c6bc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6c0:	76 3b       	jz %d3,8000c6d6 <_svfprintf_r+0x106e>
8000c6c2:	60 c4       	mov.a %a4,%d12
8000c6c4:	60 b5       	mov.a %a5,%d11
8000c6c6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6ca:	6d 00 ac 0a 	call 8000dc22 <__ssprint_r>
8000c6ce:	df 02 98 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c6d2:	d9 af 10 20 	lea %a15,[%sp]144
8000c6d6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c6da:	3c de       	j 8000c696 <_svfprintf_r+0x102e>
8000c6dc:	12 54       	add %d4,%d15,%d5
8000c6de:	68 1f       	st.w [%a15]4,%d15
8000c6e0:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6e4:	9a 13       	add %d15,%d3,1
8000c6e6:	78 18       	st.w [%sp]96,%d15
8000c6e8:	8b 8f 80 f2 	ge %d15,%d15,8
8000c6ec:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6f0:	6e 10       	jz %d15,8000c710 <_svfprintf_r+0x10a8>
8000c6f2:	60 c4       	mov.a %a4,%d12
8000c6f4:	60 b5       	mov.a %a5,%d11
8000c6f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6fa:	6d 00 94 0a 	call 8000dc22 <__ssprint_r>
8000c6fe:	df 02 80 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c702:	d9 af 10 20 	lea %a15,[%sp]144
8000c706:	3c 05       	j 8000c710 <_svfprintf_r+0x10a8>
8000c708:	df 08 f5 ff 	jne %d8,0,8000c6f2 <_svfprintf_r+0x108a>
8000c70c:	d9 ef 08 00 	lea %a15,[%a14]8
8000c710:	58 0e       	ld.w %d15,[%sp]56
8000c712:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c716:	68 1f       	st.w [%a15]4,%d15
8000c718:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c71c:	58 19       	ld.w %d15,[%sp]100
8000c71e:	e8 03       	st.a [%a15]0,%a3
8000c720:	42 2f       	add %d15,%d2
8000c722:	78 19       	st.w [%sp]100,%d15
8000c724:	58 18       	ld.w %d15,[%sp]96
8000c726:	c2 1f       	add %d15,1
8000c728:	78 18       	st.w [%sp]96,%d15
8000c72a:	8b 8f 80 f2 	ge %d15,%d15,8
8000c72e:	df 0f 8d fd 	jne %d15,0,8000c248 <_svfprintf_r+0xbe0>
8000c732:	d9 ff 08 00 	lea %a15,[%a15]8
8000c736:	80 df       	mov.d %d15,%a13
8000c738:	ae 2d       	jnz.t %d15,2,8000c752 <_svfprintf_r+0x10ea>
8000c73a:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c73e:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c742:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c746:	42 f2       	add %d2,%d15
8000c748:	58 19       	ld.w %d15,[%sp]100
8000c74a:	59 a2 28 00 	st.w [%sp]40,%d2
8000c74e:	6e 49       	jz %d15,8000c7e0 <_svfprintf_r+0x1178>
8000c750:	3c 40       	j 8000c7d0 <_svfprintf_r+0x1168>
8000c752:	58 07       	ld.w %d15,[%sp]28
8000c754:	3b 00 01 80 	mov %d8,16
8000c758:	a2 af       	sub %d15,%d10
8000c75a:	bf 1f f0 7f 	jlt %d15,1,8000c73a <_svfprintf_r+0x10d2>
8000c75e:	91 00 00 28 	movh.a %a2,32768
8000c762:	d9 22 f0 a0 	lea %a2,[%a2]3760 <80000eb0 <blanks.4035>>
8000c766:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000eb0 <blanks.4035>>
8000c76a:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000eb0 <blanks.4035>>
8000c76e:	8b 1f 81 42 	ge %d4,%d15,17
8000c772:	e8 02       	st.a [%a15]0,%a2
8000c774:	df 04 1c 00 	jeq %d4,0,8000c7ac <_svfprintf_r+0x1144>
8000c778:	c2 13       	add %d3,1
8000c77a:	1b 05 01 40 	addi %d4,%d5,16
8000c77e:	68 18       	st.w [%a15]4,%d8
8000c780:	59 a3 20 10 	st.w [%sp]96,%d3
8000c784:	59 a4 24 10 	st.w [%sp]100,%d4
8000c788:	8b 83 80 32 	ge %d3,%d3,8
8000c78c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c790:	76 3b       	jz %d3,8000c7a6 <_svfprintf_r+0x113e>
8000c792:	60 c4       	mov.a %a4,%d12
8000c794:	60 b5       	mov.a %a5,%d11
8000c796:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c79a:	6d 00 44 0a 	call 8000dc22 <__ssprint_r>
8000c79e:	df 02 30 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c7a2:	d9 af 10 20 	lea %a15,[%sp]144
8000c7a6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c7aa:	3c da       	j 8000c75e <_svfprintf_r+0x10f6>
8000c7ac:	12 54       	add %d4,%d15,%d5
8000c7ae:	68 1f       	st.w [%a15]4,%d15
8000c7b0:	9a 13       	add %d15,%d3,1
8000c7b2:	78 18       	st.w [%sp]96,%d15
8000c7b4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c7b8:	8b 8f 40 f2 	lt %d15,%d15,8
8000c7bc:	ee bf       	jnz %d15,8000c73a <_svfprintf_r+0x10d2>
8000c7be:	60 c4       	mov.a %a4,%d12
8000c7c0:	60 b5       	mov.a %a5,%d11
8000c7c2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7c6:	6d 00 2e 0a 	call 8000dc22 <__ssprint_r>
8000c7ca:	df 02 b8 7f 	jeq %d2,0,8000c73a <_svfprintf_r+0x10d2>
8000c7ce:	3c 18       	j 8000c7fe <_svfprintf_r+0x1196>
8000c7d0:	60 c4       	mov.a %a4,%d12
8000c7d2:	60 b5       	mov.a %a5,%d11
8000c7d4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7d8:	6d 00 25 0a 	call 8000dc22 <__ssprint_r>
8000c7dc:	df 02 11 80 	jne %d2,0,8000c7fe <_svfprintf_r+0x1196>
8000c7e0:	82 0f       	mov %d15,0
8000c7e2:	78 18       	st.w [%sp]96,%d15
8000c7e4:	40 cf       	mov.aa %a15,%a12
8000c7e6:	d9 ae 10 20 	lea %a14,[%sp]144
8000c7ea:	1d ff 77 f7 	j 8000b6d8 <_svfprintf_r+0x70>
8000c7ee:	58 19       	ld.w %d15,[%sp]100
8000c7f0:	6e 07       	jz %d15,8000c7fe <_svfprintf_r+0x1196>
8000c7f2:	60 c4       	mov.a %a4,%d12
8000c7f4:	60 b5       	mov.a %a5,%d11
8000c7f6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7fa:	6d 00 14 0a 	call 8000dc22 <__ssprint_r>
8000c7fe:	60 b3       	mov.a %a3,%d11
8000c800:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c804:	8c 36       	ld.h %d15,[%a3]12
8000c806:	16 40       	and %d15,64
8000c808:	aa f2       	cmov %d2,%d15,-1
8000c80a:	00 90       	ret 

8000c80c <quorem>:
8000c80c:	19 58 10 00 	ld.w %d8,[%a5]16
8000c810:	4c 44       	ld.w %d15,[%a4]16
8000c812:	82 02       	mov %d2,0
8000c814:	3f 8f 88 00 	jlt %d15,%d8,8000c924 <quorem+0x118>
8000c818:	c2 f8       	add %d8,-1
8000c81a:	80 4f       	mov.d %d15,%a4
8000c81c:	8f 28 00 20 	sh %d2,%d8,2
8000c820:	60 2f       	mov.a %a15,%d2
8000c822:	1b 4f 01 90 	addi %d9,%d15,20
8000c826:	d9 5c 14 00 	lea %a12,[%a5]20
8000c82a:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000c82e:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000c832:	54 dc       	ld.w %d12,[%a13]
8000c834:	4c f0       	ld.w %d15,[%a15]0
8000c836:	c2 1c       	add %d12,1
8000c838:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000c83c:	02 ca       	mov %d10,%d12
8000c83e:	df 0c 3d 00 	jeq %d12,0,8000c8b8 <quorem+0xac>
8000c842:	60 96       	mov.a %a6,%d9
8000c844:	40 c2       	mov.aa %a2,%a12
8000c846:	82 05       	mov %d5,0
8000c848:	82 06       	mov %d6,0
8000c84a:	54 22       	ld.w %d2,[%a2]
8000c84c:	40 63       	mov.aa %a3,%a6
8000c84e:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c852:	8f 02 1f 20 	sh %d2,%d2,-16
8000c856:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000c85a:	b0 42       	add.a %a2,4
8000c85c:	8f 03 1f 40 	sh %d4,%d3,-16
8000c860:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000c864:	44 34       	ld.w %d4,[%a3+]
8000c866:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000c86a:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000c86e:	8f 02 1f 50 	sh %d5,%d2,-16
8000c872:	42 f6       	add %d6,%d15
8000c874:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000c878:	0b 36 80 30 	sub %d3,%d6,%d3
8000c87c:	8f 04 1f 40 	sh %d4,%d4,-16
8000c880:	8f 03 3f f0 	sha %d15,%d3,-16
8000c884:	0b 24 80 20 	sub %d2,%d4,%d2
8000c888:	42 f2       	add %d2,%d15
8000c88a:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000c88e:	8f 02 3f 60 	sha %d6,%d2,-16
8000c892:	80 2f       	mov.d %d15,%a2
8000c894:	80 d2       	mov.d %d2,%a13
8000c896:	74 63       	st.w [%a6],%d3
8000c898:	40 36       	mov.aa %a6,%a3
8000c89a:	7f f2 d8 ff 	jge.u %d2,%d15,8000c84a <quorem+0x3e>
8000c89e:	4c f0       	ld.w %d15,[%a15]0
8000c8a0:	ee 0c       	jnz %d15,8000c8b8 <quorem+0xac>
8000c8a2:	b0 cf       	add.a %a15,-4
8000c8a4:	80 f2       	mov.d %d2,%a15
8000c8a6:	3f 29 05 80 	jlt.u %d9,%d2,8000c8b0 <quorem+0xa4>
8000c8aa:	59 48 10 00 	st.w [%a4]16,%d8
8000c8ae:	3c 05       	j 8000c8b8 <quorem+0xac>
8000c8b0:	4c f0       	ld.w %d15,[%a15]0
8000c8b2:	ee fc       	jnz %d15,8000c8aa <quorem+0x9e>
8000c8b4:	c2 f8       	add %d8,-1
8000c8b6:	3c f6       	j 8000c8a2 <quorem+0x96>
8000c8b8:	40 4e       	mov.aa %a14,%a4
8000c8ba:	6d 00 b9 08 	call 8000da2c <__mcmp>
8000c8be:	bf 02 32 00 	jlt %d2,0,8000c922 <quorem+0x116>
8000c8c2:	60 92       	mov.a %a2,%d9
8000c8c4:	1b 1c 00 a0 	addi %d10,%d12,1
8000c8c8:	82 04       	mov %d4,0
8000c8ca:	40 2f       	mov.aa %a15,%a2
8000c8cc:	44 f3       	ld.w %d3,[%a15+]
8000c8ce:	54 c5       	ld.w %d5,[%a12]
8000c8d0:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000c8d4:	8f 05 1f f0 	sh %d15,%d5,-16
8000c8d8:	42 42       	add %d2,%d4
8000c8da:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000c8de:	8f 03 1f 30 	sh %d3,%d3,-16
8000c8e2:	a2 42       	sub %d2,%d4
8000c8e4:	8f 02 3f 40 	sha %d4,%d2,-16
8000c8e8:	a2 f3       	sub %d3,%d15
8000c8ea:	42 43       	add %d3,%d4
8000c8ec:	8f 03 3f 40 	sha %d4,%d3,-16
8000c8f0:	b0 4c       	add.a %a12,4
8000c8f2:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000c8f6:	80 df       	mov.d %d15,%a13
8000c8f8:	80 c2       	mov.d %d2,%a12
8000c8fa:	74 23       	st.w [%a2],%d3
8000c8fc:	40 f2       	mov.aa %a2,%a15
8000c8fe:	7f 2f e6 ff 	jge.u %d15,%d2,8000c8ca <quorem+0xbe>
8000c902:	60 92       	mov.a %a2,%d9
8000c904:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000c908:	4c f0       	ld.w %d15,[%a15]0
8000c90a:	ee 0c       	jnz %d15,8000c922 <quorem+0x116>
8000c90c:	b0 cf       	add.a %a15,-4
8000c90e:	80 f2       	mov.d %d2,%a15
8000c910:	3f 29 05 80 	jlt.u %d9,%d2,8000c91a <quorem+0x10e>
8000c914:	59 e8 10 00 	st.w [%a14]16,%d8
8000c918:	3c 05       	j 8000c922 <quorem+0x116>
8000c91a:	4c f0       	ld.w %d15,[%a15]0
8000c91c:	ee fc       	jnz %d15,8000c914 <quorem+0x108>
8000c91e:	c2 f8       	add %d8,-1
8000c920:	3c f6       	j 8000c90c <quorem+0x100>
8000c922:	02 a2       	mov %d2,%d10
8000c924:	00 90       	ret 
	...

8000c928 <_dtoa_r>:
8000c928:	20 58       	sub.a %sp,88
8000c92a:	b5 a5 08 10 	st.a [%sp]72,%a5
8000c92e:	99 45 00 10 	ld.a %a5,[%a4]64
8000c932:	59 a6 1c 00 	st.w [%sp]28,%d6
8000c936:	59 a7 28 00 	st.w [%sp]40,%d7
8000c93a:	b5 a7 38 00 	st.a [%sp]56,%a7
8000c93e:	40 4d       	mov.aa %a13,%a4
8000c940:	0b 45 10 88 	mov %e8,%d5,%d4
8000c944:	40 6c       	mov.aa %a12,%a6
8000c946:	0b 45 10 c8 	mov %e12,%d5,%d4
8000c94a:	bc 5e       	jz.a %a5,8000c966 <_dtoa_r+0x3e>
8000c94c:	19 4f 04 10 	ld.w %d15,[%a4]68
8000c950:	82 12       	mov %d2,1
8000c952:	0f f2 00 20 	sh %d2,%d2,%d15
8000c956:	6c 51       	st.w [%a5]4,%d15
8000c958:	59 52 08 00 	st.w [%a5]8,%d2
8000c95c:	82 0f       	mov %d15,0
8000c95e:	6d 00 99 06 	call 8000d690 <_Bfree>
8000c962:	59 df 00 10 	st.w [%a13]64,%d15
8000c966:	ce 96       	jgez %d9,8000c972 <_dtoa_r+0x4a>
8000c968:	82 1f       	mov %d15,1
8000c96a:	6c c0       	st.w [%a12]0,%d15
8000c96c:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000c970:	3c 03       	j 8000c976 <_dtoa_r+0x4e>
8000c972:	82 0f       	mov %d15,0
8000c974:	6c c0       	st.w [%a12]0,%d15
8000c976:	7b 00 ff 27 	movh %d2,32752
8000c97a:	26 d2       	and %d2,%d13
8000c97c:	7b 00 ff 37 	movh %d3,32752
8000c980:	5f 32 22 80 	jne %d2,%d3,8000c9c4 <_dtoa_r+0x9c>
8000c984:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c988:	3b f0 70 22 	mov %d2,9999
8000c98c:	91 00 00 f8 	movh.a %a15,32768
8000c990:	74 32       	st.w [%a3],%d2
8000c992:	d9 ff c9 b0 	lea %a15,[%a15]3785 <80000ec9 <blanks.4035+0x19>>
8000c996:	f6 c8       	jnz %d12,8000c9a6 <_dtoa_r+0x7e>
8000c998:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000c99c:	ee 05       	jnz %d15,8000c9a6 <_dtoa_r+0x7e>
8000c99e:	91 00 00 f8 	movh.a %a15,32768
8000c9a2:	d9 ff c0 b0 	lea %a15,[%a15]3776 <80000ec0 <blanks.4035+0x10>>
8000c9a6:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000ec0 <blanks.4035+0x10>>
8000c9aa:	40 f2       	mov.aa %a2,%a15
8000c9ac:	bd 03 26 06 	jz.a %a3,8000d5f8 <_dtoa_r+0xcd0>
8000c9b0:	80 ff       	mov.d %d15,%a15
8000c9b2:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000c9b6:	1b 8f 00 20 	addi %d2,%d15,8
8000c9ba:	c2 3f       	add %d15,3
8000c9bc:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000c9c0:	6c 30       	st.w [%a3]0,%d15
8000c9c2:	00 90       	ret 
8000c9c4:	0b cd 10 48 	mov %e4,%d13,%d12
8000c9c8:	d2 06       	mov %e6,0
8000c9ca:	0b cd 10 88 	mov %e8,%d13,%d12
8000c9ce:	6d 00 2f 0c 	call 8000e22c <__eqdf2>
8000c9d2:	df 02 13 80 	jne %d2,0,8000c9f8 <_dtoa_r+0xd0>
8000c9d6:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c9da:	d8 0e       	ld.a %a15,[%sp]56
8000c9dc:	82 1f       	mov %d15,1
8000c9de:	91 00 00 28 	movh.a %a2,32768
8000c9e2:	6c 30       	st.w [%a3]0,%d15
8000c9e4:	d9 22 cd b0 	lea %a2,[%a2]3789 <80000ecd <blanks.4035+0x1d>>
8000c9e8:	bd 0f 08 06 	jz.a %a15,8000d5f8 <_dtoa_r+0xcd0>
8000c9ec:	7b 00 00 f8 	movh %d15,32768
8000c9f0:	1b ef ec f0 	addi %d15,%d15,3790
8000c9f4:	68 0f       	st.w [%a15]0,%d15
8000c9f6:	00 90       	ret 
8000c9f8:	0b cd 10 48 	mov %e4,%d13,%d12
8000c9fc:	40 d4       	mov.aa %a4,%a13
8000c9fe:	d9 a5 14 10 	lea %a5,[%sp]84
8000ca02:	d9 a6 10 10 	lea %a6,[%sp]80
8000ca06:	6d 00 99 08 	call 8000db38 <__d2b>
8000ca0a:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000ca0e:	40 2e       	mov.aa %a14,%a2
8000ca10:	19 aa 10 10 	ld.w %d10,[%sp]80
8000ca14:	76 bd       	jz %d11,8000ca2e <_dtoa_r+0x106>
8000ca16:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000ca1a:	0b cd 10 48 	mov %e4,%d13,%d12
8000ca1e:	7b 00 ff 23 	movh %d2,16368
8000ca22:	0f 2f a0 50 	or %d5,%d15,%d2
8000ca26:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000ca2a:	82 0f       	mov %d15,0
8000ca2c:	3c 22       	j 8000ca70 <_dtoa_r+0x148>
8000ca2e:	19 ab 14 10 	ld.w %d11,[%sp]84
8000ca32:	3b e0 be 4f 	mov %d4,-1042
8000ca36:	42 ab       	add %d11,%d10
8000ca38:	a2 b4       	sub %d4,%d11
8000ca3a:	3b f0 be 2f 	mov %d2,-1041
8000ca3e:	0f 4c 00 40 	sh %d4,%d12,%d4
8000ca42:	3f 2b 0f 00 	jlt %d11,%d2,8000ca60 <_dtoa_r+0x138>
8000ca46:	1b 2b 41 30 	addi %d3,%d11,1042
8000ca4a:	3b e0 c0 4f 	mov %d4,-1010
8000ca4e:	a2 b4       	sub %d4,%d11
8000ca50:	8b 03 00 21 	rsub %d2,%d3,0
8000ca54:	0f 2c 00 20 	sh %d2,%d12,%d2
8000ca58:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000ca5c:	0f f2 a0 40 	or %d4,%d2,%d15
8000ca60:	6d ff 7c f0 	call 8000ab58 <__floatunsidf>
8000ca64:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca68:	9b 03 e1 5f 	addih %d5,%d3,65040
8000ca6c:	c2 fb       	add %d11,-1
8000ca6e:	82 1f       	mov %d15,1
8000ca70:	b7 00 ab 69 	imask %e6,0,19,11
8000ca74:	78 13       	st.w [%sp]76,%d15
8000ca76:	6d ff a2 ee 	call 8000a7ba <__subdf3>
8000ca7a:	7b 30 fd 73 	movh %d7,16339
8000ca7e:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca82:	7b f0 36 66 	movh %d6,25455
8000ca86:	1b 77 7a 78 	addi %d7,%d7,-30809
8000ca8a:	1b 16 36 64 	addi %d6,%d6,17249
8000ca8e:	6d ff b6 ee 	call 8000a7fa <__muldf3>
8000ca92:	7b 70 fc 73 	movh %d7,16327
8000ca96:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca9a:	7b 10 b6 68 	movh %d6,35681
8000ca9e:	1b 87 a2 78 	addi %d7,%d7,-30168
8000caa2:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000caa6:	6d ff 6e ee 	call 8000a782 <__adddf3>
8000caaa:	02 b4       	mov %d4,%d11
8000caac:	0b 23 10 88 	mov %e8,%d3,%d2
8000cab0:	6d ff 03 f0 	call 8000aab6 <__floatsidf>
8000cab4:	7b 30 fd 73 	movh %d7,16339
8000cab8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cabc:	7b f0 09 65 	movh %d6,20639
8000cac0:	1b 37 41 74 	addi %d7,%d7,17427
8000cac4:	1b b6 9f 67 	addi %d6,%d6,31227
8000cac8:	6d ff 99 ee 	call 8000a7fa <__muldf3>
8000cacc:	0b 89 10 48 	mov %e4,%d9,%d8
8000cad0:	0b 23 10 68 	mov %e6,%d3,%d2
8000cad4:	6d ff 57 ee 	call 8000a782 <__adddf3>
8000cad8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cadc:	0b 23 10 88 	mov %e8,%d3,%d2
8000cae0:	6d 00 46 0c 	call 8000e36c <__fixdfsi>
8000cae4:	0b 89 10 48 	mov %e4,%d9,%d8
8000cae8:	d2 06       	mov %e6,0
8000caea:	59 a2 08 00 	st.w [%sp]8,%d2
8000caee:	6d 00 1f 0c 	call 8000e32c <__ltdf2>
8000caf2:	ff 02 12 00 	jge %d2,0,8000cb16 <_dtoa_r+0x1ee>
8000caf6:	19 a4 08 00 	ld.w %d4,[%sp]8
8000cafa:	6d ff de ef 	call 8000aab6 <__floatsidf>
8000cafe:	0b 89 10 48 	mov %e4,%d9,%d8
8000cb02:	0b 23 10 68 	mov %e6,%d3,%d2
8000cb06:	6d 00 b3 0b 	call 8000e26c <__nedf2>
8000cb0a:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cb0e:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000cb12:	59 a3 08 00 	st.w [%sp]8,%d3
8000cb16:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cb1a:	82 13       	mov %d3,1
8000cb1c:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000cb20:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cb24:	ee 18       	jnz %d15,8000cb54 <_dtoa_r+0x22c>
8000cb26:	91 00 00 f8 	movh.a %a15,32768
8000cb2a:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000cb2e:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000cb32:	0b cd 10 68 	mov %e6,%d13,%d12
8000cb36:	09 f4 40 09 	ld.d %e4,[%a15]
8000cb3a:	6d 00 b9 0b 	call 8000e2ac <__gtdf2>
8000cb3e:	8e 28       	jlez %d2,8000cb4e <_dtoa_r+0x226>
8000cb40:	58 02       	ld.w %d15,[%sp]8
8000cb42:	82 02       	mov %d2,0
8000cb44:	c2 ff       	add %d15,-1
8000cb46:	78 02       	st.w [%sp]8,%d15
8000cb48:	59 a2 3c 00 	st.w [%sp]60,%d2
8000cb4c:	3c 04       	j 8000cb54 <_dtoa_r+0x22c>
8000cb4e:	82 03       	mov %d3,0
8000cb50:	59 a3 3c 00 	st.w [%sp]60,%d3
8000cb54:	0b ba 80 b0 	sub %d11,%d10,%d11
8000cb58:	9a fb       	add %d15,%d11,-1
8000cb5a:	82 02       	mov %d2,0
8000cb5c:	78 06       	st.w [%sp]24,%d15
8000cb5e:	59 a2 14 00 	st.w [%sp]20,%d2
8000cb62:	ce f6       	jgez %d15,8000cb6e <_dtoa_r+0x246>
8000cb64:	32 5f       	rsub %d15
8000cb66:	82 03       	mov %d3,0
8000cb68:	78 05       	st.w [%sp]20,%d15
8000cb6a:	59 a3 18 00 	st.w [%sp]24,%d3
8000cb6e:	58 02       	ld.w %d15,[%sp]8
8000cb70:	0e fa       	jltz %d15,8000cb84 <_dtoa_r+0x25c>
8000cb72:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cb76:	78 0d       	st.w [%sp]52,%d15
8000cb78:	42 f2       	add %d2,%d15
8000cb7a:	82 0f       	mov %d15,0
8000cb7c:	59 a2 18 00 	st.w [%sp]24,%d2
8000cb80:	78 08       	st.w [%sp]32,%d15
8000cb82:	3c 0d       	j 8000cb9c <_dtoa_r+0x274>
8000cb84:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cb88:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cb8c:	82 0f       	mov %d15,0
8000cb8e:	a2 32       	sub %d2,%d3
8000cb90:	32 53       	rsub %d3
8000cb92:	59 a2 14 00 	st.w [%sp]20,%d2
8000cb96:	59 a3 20 00 	st.w [%sp]32,%d3
8000cb9a:	78 0d       	st.w [%sp]52,%d15
8000cb9c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cba0:	82 18       	mov %d8,1
8000cba2:	ff a2 46 80 	jge.u %d2,10,8000cc2e <_dtoa_r+0x306>
8000cba6:	bf 62 06 00 	jlt %d2,6,8000cbb2 <_dtoa_r+0x28a>
8000cbaa:	c2 c2       	add %d2,-4
8000cbac:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cbb0:	82 08       	mov %d8,0
8000cbb2:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000cbb6:	c2 e3       	add %d3,-2
8000cbb8:	ff 43 4b 80 	jge.u %d3,4,8000cc4e <_dtoa_r+0x326>
8000cbbc:	91 10 00 f8 	movh.a %a15,32769
8000cbc0:	d9 ff 8c fc 	lea %a15,[%a15]-13364 <8000cbcc <_dtoa_r+0x2a4>>
8000cbc4:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000cbc8:	dc 0f       	ji %a15
8000cbca:	00 00       	nop 
8000cbcc:	1d 00 08 00 	j 8000cbdc <_dtoa_r+0x2b4>
8000cbd0:	1d 00 1c 00 	j 8000cc08 <_dtoa_r+0x2e0>
8000cbd4:	1d 00 08 00 	j 8000cbe4 <_dtoa_r+0x2bc>
8000cbd8:	1d 00 1c 00 	j 8000cc10 <_dtoa_r+0x2e8>
8000cbdc:	82 03       	mov %d3,0
8000cbde:	59 a3 24 00 	st.w [%sp]36,%d3
8000cbe2:	3c 03       	j 8000cbe8 <_dtoa_r+0x2c0>
8000cbe4:	82 1f       	mov %d15,1
8000cbe6:	78 09       	st.w [%sp]36,%d15
8000cbe8:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cbec:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cbf0:	59 a2 10 00 	st.w [%sp]16,%d2
8000cbf4:	02 23       	mov %d3,%d2
8000cbf6:	ff 12 38 00 	jge %d2,1,8000cc66 <_dtoa_r+0x33e>
8000cbfa:	82 13       	mov %d3,1
8000cbfc:	82 1f       	mov %d15,1
8000cbfe:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cc02:	78 04       	st.w [%sp]16,%d15
8000cc04:	82 12       	mov %d2,1
8000cc06:	3c 21       	j 8000cc48 <_dtoa_r+0x320>
8000cc08:	82 03       	mov %d3,0
8000cc0a:	59 a3 24 00 	st.w [%sp]36,%d3
8000cc0e:	3c 03       	j 8000cc14 <_dtoa_r+0x2ec>
8000cc10:	82 1f       	mov %d15,1
8000cc12:	78 09       	st.w [%sp]36,%d15
8000cc14:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cc18:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cc1c:	42 32       	add %d2,%d3
8000cc1e:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cc22:	c2 12       	add %d2,1
8000cc24:	59 a2 10 00 	st.w [%sp]16,%d2
8000cc28:	8b 12 40 33 	max %d3,%d2,1
8000cc2c:	3c 1d       	j 8000cc66 <_dtoa_r+0x33e>
8000cc2e:	82 0f       	mov %d15,0
8000cc30:	82 12       	mov %d2,1
8000cc32:	82 f3       	mov %d3,-1
8000cc34:	78 07       	st.w [%sp]28,%d15
8000cc36:	82 ff       	mov %d15,-1
8000cc38:	59 a2 24 00 	st.w [%sp]36,%d2
8000cc3c:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cc40:	78 04       	st.w [%sp]16,%d15
8000cc42:	3b 20 01 30 	mov %d3,18
8000cc46:	82 02       	mov %d2,0
8000cc48:	59 a2 28 00 	st.w [%sp]40,%d2
8000cc4c:	3c 0d       	j 8000cc66 <_dtoa_r+0x33e>
8000cc4e:	82 ff       	mov %d15,-1
8000cc50:	82 13       	mov %d3,1
8000cc52:	78 0b       	st.w [%sp]44,%d15
8000cc54:	82 f2       	mov %d2,-1
8000cc56:	82 0f       	mov %d15,0
8000cc58:	59 a3 24 00 	st.w [%sp]36,%d3
8000cc5c:	59 a2 10 00 	st.w [%sp]16,%d2
8000cc60:	3b 20 01 30 	mov %d3,18
8000cc64:	78 0a       	st.w [%sp]40,%d15
8000cc66:	82 05       	mov %d5,0
8000cc68:	59 d5 04 10 	st.w [%a13]68,%d5
8000cc6c:	82 45       	mov %d5,4
8000cc6e:	1b 45 01 00 	addi %d0,%d5,20
8000cc72:	3f 03 09 80 	jlt.u %d3,%d0,8000cc84 <_dtoa_r+0x35c>
8000cc76:	19 d0 04 10 	ld.w %d0,[%a13]68
8000cc7a:	06 15       	sh %d5,1
8000cc7c:	c2 10       	add %d0,1
8000cc7e:	59 d0 04 10 	st.w [%a13]68,%d0
8000cc82:	3c f6       	j 8000cc6e <_dtoa_r+0x346>
8000cc84:	40 d4       	mov.aa %a4,%a13
8000cc86:	19 d4 04 10 	ld.w %d4,[%a13]68
8000cc8a:	6d 00 d8 04 	call 8000d63a <_Balloc>
8000cc8e:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cc92:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000cc96:	8b f2 60 32 	lt.u %d3,%d2,15
8000cc9a:	b5 d2 00 10 	st.a [%a13]64,%a2
8000cc9e:	26 38       	and %d8,%d3
8000cca0:	df 08 97 01 	jeq %d8,0,8000cfce <_dtoa_r+0x6a6>
8000cca4:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cca8:	89 ac 40 19 	st.d [%sp]64,%e12
8000ccac:	bf 13 3f 00 	jlt %d3,1,8000cd2a <_dtoa_r+0x402>
8000ccb0:	91 00 00 f8 	movh.a %a15,32768
8000ccb4:	8f f3 00 31 	and %d3,%d3,15
8000ccb8:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000ccbc:	19 ae 08 00 	ld.w %d14,[%sp]8 <80000f70 <__mprec_tens>>
8000ccc0:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000ccc4:	86 ce       	sha %d14,-4
8000ccc6:	09 f8 40 09 	ld.d %e8,[%a15]
8000ccca:	82 2a       	mov %d10,2
8000cccc:	6f 4e 11 00 	jz.t %d14,4,8000ccee <_dtoa_r+0x3c6>
8000ccd0:	91 00 00 f8 	movh.a %a15,32768
8000ccd4:	0b cd 10 48 	mov %e4,%d13,%d12
8000ccd8:	d9 ff c8 d0 	lea %a15,[%a15]3912 <80000f48 <__mprec_bigtens>>
8000ccdc:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000cce0:	6d ff 5f ee 	call 8000a99e <__divdf3>
8000cce4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cce8:	8f fe 00 e1 	and %d14,%d14,15
8000ccec:	82 3a       	mov %d10,3
8000ccee:	7b 00 00 b8 	movh %d11,32768
8000ccf2:	82 0f       	mov %d15,0
8000ccf4:	1b 8b f4 b0 	addi %d11,%d11,3912
8000ccf8:	df 0e 12 00 	jeq %d14,0,8000cd1c <_dtoa_r+0x3f4>
8000ccfc:	6f 0e 0d 00 	jz.t %d14,0,8000cd16 <_dtoa_r+0x3ee>
8000cd00:	60 b2       	mov.a %a2,%d11
8000cd02:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000cd04:	0b 89 10 48 	mov %e4,%d9,%d8
8000cd08:	09 f6 40 09 	ld.d %e6,[%a15]
8000cd0c:	6d ff 77 ed 	call 8000a7fa <__muldf3>
8000cd10:	0b 23 10 88 	mov %e8,%d3,%d2
8000cd14:	c2 1a       	add %d10,1
8000cd16:	86 fe       	sha %d14,-1
8000cd18:	c2 1f       	add %d15,1
8000cd1a:	3c ef       	j 8000ccf8 <_dtoa_r+0x3d0>
8000cd1c:	0b cd 10 48 	mov %e4,%d13,%d12
8000cd20:	0b 89 10 68 	mov %e6,%d9,%d8
8000cd24:	6d ff 3d ee 	call 8000a99e <__divdf3>
8000cd28:	3c 2c       	j 8000cd80 <_dtoa_r+0x458>
8000cd2a:	19 a8 08 00 	ld.w %d8,[%sp]8
8000cd2e:	82 2a       	mov %d10,2
8000cd30:	32 58       	rsub %d8
8000cd32:	df 08 29 00 	jeq %d8,0,8000cd84 <_dtoa_r+0x45c>
8000cd36:	91 00 00 f8 	movh.a %a15,32768
8000cd3a:	8f f8 00 31 	and %d3,%d8,15
8000cd3e:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000cd42:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000cd46:	09 a4 40 19 	ld.d %e4,[%sp]64
8000cd4a:	09 f6 40 09 	ld.d %e6,[%a15]
8000cd4e:	7b 00 00 c8 	movh %d12,32768
8000cd52:	6d ff 54 ed 	call 8000a7fa <__muldf3>
8000cd56:	82 09       	mov %d9,0
8000cd58:	86 c8       	sha %d8,-4
8000cd5a:	1b 8c f4 c0 	addi %d12,%d12,3912
8000cd5e:	df 08 11 00 	jeq %d8,0,8000cd80 <_dtoa_r+0x458>
8000cd62:	6f 08 0c 00 	jz.t %d8,0,8000cd7a <_dtoa_r+0x452>
8000cd66:	60 c3       	mov.a %a3,%d12
8000cd68:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000cd6c:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd70:	09 f6 40 09 	ld.d %e6,[%a15]
8000cd74:	c2 1a       	add %d10,1
8000cd76:	6d ff 42 ed 	call 8000a7fa <__muldf3>
8000cd7a:	86 f8       	sha %d8,-1
8000cd7c:	c2 19       	add %d9,1
8000cd7e:	3c f0       	j 8000cd5e <_dtoa_r+0x436>
8000cd80:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cd84:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000cd88:	df 02 23 00 	jeq %d2,0,8000cdce <_dtoa_r+0x4a6>
8000cd8c:	0b cd 10 48 	mov %e4,%d13,%d12
8000cd90:	b7 00 2a 6a 	imask %e6,0,20,10
8000cd94:	6d 00 cc 0a 	call 8000e32c <__ltdf2>
8000cd98:	ff 02 20 00 	jge %d2,0,8000cdd8 <_dtoa_r+0x4b0>
8000cd9c:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cda0:	df 03 21 00 	jeq %d3,0,8000cde2 <_dtoa_r+0x4ba>
8000cda4:	58 0b       	ld.w %d15,[%sp]44
8000cda6:	bf 1f 12 01 	jlt %d15,1,8000cfca <_dtoa_r+0x6a2>
8000cdaa:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cdae:	0b cd 10 48 	mov %e4,%d13,%d12
8000cdb2:	c2 f2       	add %d2,-1
8000cdb4:	82 06       	mov %d6,0
8000cdb6:	7b 40 02 74 	movh %d7,16420
8000cdba:	59 a2 30 00 	st.w [%sp]48,%d2
8000cdbe:	6d ff 1e ed 	call 8000a7fa <__muldf3>
8000cdc2:	c2 1a       	add %d10,1
8000cdc4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cdc8:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000cdcc:	3c 10       	j 8000cdec <_dtoa_r+0x4c4>
8000cdce:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cdd2:	59 a3 30 00 	st.w [%sp]48,%d3
8000cdd6:	3c 03       	j 8000cddc <_dtoa_r+0x4b4>
8000cdd8:	58 02       	ld.w %d15,[%sp]8
8000cdda:	78 0c       	st.w [%sp]48,%d15
8000cddc:	99 ac 10 00 	ld.a %a12,[%sp]16
8000cde0:	3c 06       	j 8000cdec <_dtoa_r+0x4c4>
8000cde2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cde6:	a0 0c       	mov.a %a12,0
8000cde8:	59 a2 30 00 	st.w [%sp]48,%d2
8000cdec:	02 a4       	mov %d4,%d10
8000cdee:	6d ff 64 ee 	call 8000aab6 <__floatsidf>
8000cdf2:	0b cd 10 68 	mov %e6,%d13,%d12
8000cdf6:	0b 23 10 48 	mov %e4,%d3,%d2
8000cdfa:	6d ff 00 ed 	call 8000a7fa <__muldf3>
8000cdfe:	0b 23 10 48 	mov %e4,%d3,%d2
8000ce02:	82 06       	mov %d6,0
8000ce04:	7b c0 01 74 	movh %d7,16412
8000ce08:	6d ff bd ec 	call 8000a782 <__adddf3>
8000ce0c:	0b 23 10 a8 	mov %e10,%d3,%d2
8000ce10:	0b 23 10 e8 	mov %e14,%d3,%d2
8000ce14:	60 b2       	mov.a %a2,%d11
8000ce16:	11 02 cc ff 	addih.a %a15,%a2,64704
8000ce1a:	80 ff       	mov.d %d15,%a15
8000ce1c:	bd 0c 1e 80 	jnz.a %a12,8000ce58 <_dtoa_r+0x530>
8000ce20:	0b cd 10 48 	mov %e4,%d13,%d12
8000ce24:	82 06       	mov %d6,0
8000ce26:	7b 40 01 74 	movh %d7,16404
8000ce2a:	6d ff c8 ec 	call 8000a7ba <__subdf3>
8000ce2e:	80 f7       	mov.d %d7,%a15
8000ce30:	0b 23 10 48 	mov %e4,%d3,%d2
8000ce34:	02 e6       	mov %d6,%d14
8000ce36:	0b 23 10 88 	mov %e8,%d3,%d2
8000ce3a:	6d 00 39 0a 	call 8000e2ac <__gtdf2>
8000ce3e:	ff 12 8e 02 	jge %d2,1,8000d35a <_dtoa_r+0xa32>
8000ce42:	0b 89 10 48 	mov %e4,%d9,%d8
8000ce46:	02 e6       	mov %d6,%d14
8000ce48:	9b 0b cc 77 	addih %d7,%d11,31936
8000ce4c:	6d 00 70 0a 	call 8000e32c <__ltdf2>
8000ce50:	bf 02 7d 02 	jlt %d2,0,8000d34a <_dtoa_r+0xa22>
8000ce54:	1d 00 bb 00 	j 8000cfca <_dtoa_r+0x6a2>
8000ce58:	80 c5       	mov.d %d5,%a12
8000ce5a:	91 00 00 f8 	movh.a %a15,32768
8000ce5e:	19 a2 24 00 	ld.w %d2,[%sp]36
8000ce62:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000ce66:	c2 f5       	add %d5,-1
8000ce68:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000ce6c:	df 02 57 00 	jeq %d2,0,8000cf1a <_dtoa_r+0x5f2>
8000ce70:	b7 00 a9 4a 	imask %e4,0,21,9
8000ce74:	09 f6 40 09 	ld.d %e6,[%a15]
8000ce78:	6d ff 93 ed 	call 8000a99e <__divdf3>
8000ce7c:	0b ef 10 68 	mov %e6,%d15,%d14
8000ce80:	0b 23 10 48 	mov %e4,%d3,%d2
8000ce84:	6d ff 9b ec 	call 8000a7ba <__subdf3>
8000ce88:	d8 03       	ld.a %a15,[%sp]12
8000ce8a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000ce8e:	0b cd 10 48 	mov %e4,%d13,%d12
8000ce92:	80 fe       	mov.d %d14,%a15
8000ce94:	6d 00 6c 0a 	call 8000e36c <__fixdfsi>
8000ce98:	02 24       	mov %d4,%d2
8000ce9a:	02 2f       	mov %d15,%d2
8000ce9c:	6d ff 0d ee 	call 8000aab6 <__floatsidf>
8000cea0:	0b cd 10 48 	mov %e4,%d13,%d12
8000cea4:	0b 23 10 68 	mov %e6,%d3,%d2
8000cea8:	c2 1e       	add %d14,1
8000ceaa:	6d ff 88 ec 	call 8000a7ba <__subdf3>
8000ceae:	1b 0f 03 50 	addi %d5,%d15,48
8000ceb2:	28 05       	st.b [%a15]0,%d5
8000ceb4:	0b ab 10 68 	mov %e6,%d11,%d10
8000ceb8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cebc:	0b 23 10 88 	mov %e8,%d3,%d2
8000cec0:	6d 00 36 0a 	call 8000e32c <__ltdf2>
8000cec4:	bf 02 86 03 	jlt %d2,0,8000d5d0 <_dtoa_r+0xca8>
8000cec8:	b7 00 2a 4a 	imask %e4,0,20,10
8000cecc:	0b 89 10 68 	mov %e6,%d9,%d8
8000ced0:	6d ff 75 ec 	call 8000a7ba <__subdf3>
8000ced4:	0b ab 10 68 	mov %e6,%d11,%d10
8000ced8:	0b 23 10 48 	mov %e4,%d3,%d2
8000cedc:	6d 00 28 0a 	call 8000e32c <__ltdf2>
8000cee0:	bf 02 ea 00 	jlt %d2,0,8000d0b4 <_dtoa_r+0x78c>
8000cee4:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000cee8:	02 e5       	mov %d5,%d14
8000ceea:	80 cf       	mov.d %d15,%a12
8000ceec:	a2 35       	sub %d5,%d3
8000ceee:	7f f5 6e 00 	jge %d5,%d15,8000cfca <_dtoa_r+0x6a2>
8000cef2:	0b ab 10 48 	mov %e4,%d11,%d10
8000cef6:	82 06       	mov %d6,0
8000cef8:	7b 40 02 74 	movh %d7,16420
8000cefc:	6d ff 7f ec 	call 8000a7fa <__muldf3>
8000cf00:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf04:	82 06       	mov %d6,0
8000cf06:	7b 40 02 74 	movh %d7,16420
8000cf0a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cf0e:	6d ff 76 ec 	call 8000a7fa <__muldf3>
8000cf12:	60 ef       	mov.a %a15,%d14
8000cf14:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf18:	3c bb       	j 8000ce8e <_dtoa_r+0x566>
8000cf1a:	0b ef 10 68 	mov %e6,%d15,%d14
8000cf1e:	09 f4 40 09 	ld.d %e4,[%a15]
8000cf22:	6d ff 6c ec 	call 8000a7fa <__muldf3>
8000cf26:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000cf2a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cf2e:	30 c3       	add.a %a3,%a12
8000cf30:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000cf34:	80 3e       	mov.d %d14,%a3
8000cf36:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf3a:	d9 cf 01 00 	lea %a15,[%a12]1
8000cf3e:	6d 00 17 0a 	call 8000e36c <__fixdfsi>
8000cf42:	02 24       	mov %d4,%d2
8000cf44:	02 2f       	mov %d15,%d2
8000cf46:	6d ff b8 ed 	call 8000aab6 <__floatsidf>
8000cf4a:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf4e:	0b 23 10 68 	mov %e6,%d3,%d2
8000cf52:	6d ff 34 ec 	call 8000a7ba <__subdf3>
8000cf56:	1b 0f 03 50 	addi %d5,%d15,48
8000cf5a:	0b 23 10 88 	mov %e8,%d3,%d2
8000cf5e:	80 f2       	mov.d %d2,%a15
8000cf60:	34 c5       	st.b [%a12],%d5
8000cf62:	5f e2 29 80 	jne %d2,%d14,8000cfb4 <_dtoa_r+0x68c>
8000cf66:	0b ab 10 48 	mov %e4,%d11,%d10
8000cf6a:	b7 00 a9 6a 	imask %e6,0,21,9
8000cf6e:	6d ff 0a ec 	call 8000a782 <__adddf3>
8000cf72:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf76:	0b 23 10 68 	mov %e6,%d3,%d2
8000cf7a:	6d 00 99 09 	call 8000e2ac <__gtdf2>
8000cf7e:	ff 12 9b 00 	jge %d2,1,8000d0b4 <_dtoa_r+0x78c>
8000cf82:	b7 00 a9 4a 	imask %e4,0,21,9
8000cf86:	0b ab 10 68 	mov %e6,%d11,%d10
8000cf8a:	6d ff 18 ec 	call 8000a7ba <__subdf3>
8000cf8e:	0b 89 10 48 	mov %e4,%d9,%d8
8000cf92:	0b 23 10 68 	mov %e6,%d3,%d2
8000cf96:	6d 00 cb 09 	call 8000e32c <__ltdf2>
8000cf9a:	ff 02 18 00 	jge %d2,0,8000cfca <_dtoa_r+0x6a2>
8000cf9e:	60 e2       	mov.a %a2,%d14
8000cfa0:	60 ef       	mov.a %a15,%d14
8000cfa2:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000cfa6:	b0 ff       	add.a %a15,-1
8000cfa8:	8b 0f 03 f2 	eq %d15,%d15,48
8000cfac:	df 0f 12 03 	jeq %d15,0,8000d5d0 <_dtoa_r+0xca8>
8000cfb0:	80 fe       	mov.d %d14,%a15
8000cfb2:	3c f6       	j 8000cf9e <_dtoa_r+0x676>
8000cfb4:	0b 89 10 48 	mov %e4,%d9,%d8
8000cfb8:	82 06       	mov %d6,0
8000cfba:	7b 40 02 74 	movh %d7,16420
8000cfbe:	6d ff 1e ec 	call 8000a7fa <__muldf3>
8000cfc2:	40 fc       	mov.aa %a12,%a15
8000cfc4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cfc8:	3c b7       	j 8000cf36 <_dtoa_r+0x60e>
8000cfca:	09 ac 40 19 	ld.d %e12,[%sp]64
8000cfce:	19 a3 14 10 	ld.w %d3,[%sp]84
8000cfd2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cfd6:	8b 03 80 52 	ge %d5,%d3,0
8000cfda:	8b f2 40 54 	and.lt %d5,%d2,15
8000cfde:	df 05 9e 00 	jeq %d5,0,8000d11a <_dtoa_r+0x7f2>
8000cfe2:	91 00 00 f8 	movh.a %a15,32768
8000cfe6:	d9 ff f0 d0 	lea %a15,[%a15]3952 <80000f70 <__mprec_tens>>
8000cfea:	19 a3 10 00 	ld.w %d3,[%sp]16 <80000f70 <__mprec_tens>>
8000cfee:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000cff2:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cff6:	fa 13       	lt %d15,%d3,1
8000cff8:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000cffc:	09 f8 40 09 	ld.d %e8,[%a15]
8000d000:	6e 16       	jz %d15,8000d02c <_dtoa_r+0x704>
8000d002:	df 03 a4 81 	jne %d3,0,8000d34a <_dtoa_r+0xa22>
8000d006:	0b 89 10 48 	mov %e4,%d9,%d8
8000d00a:	82 06       	mov %d6,0
8000d00c:	7b 40 01 74 	movh %d7,16404
8000d010:	6d ff f5 eb 	call 8000a7fa <__muldf3>
8000d014:	0b cd 10 68 	mov %e6,%d13,%d12
8000d018:	0b 23 10 48 	mov %e4,%d3,%d2
8000d01c:	a0 0c       	mov.a %a12,0
8000d01e:	6d 00 67 09 	call 8000e2ec <__gedf2>
8000d022:	a0 0f       	mov.a %a15,0
8000d024:	ff 02 95 01 	jge %d2,0,8000d34e <_dtoa_r+0xa26>
8000d028:	1d 00 9d 01 	j 8000d362 <_dtoa_r+0xa3a>
8000d02c:	d8 03       	ld.a %a15,[%sp]12
8000d02e:	0b cd 10 a8 	mov %e10,%d13,%d12
8000d032:	0b 89 10 68 	mov %e6,%d9,%d8
8000d036:	0b ab 10 48 	mov %e4,%d11,%d10
8000d03a:	80 fe       	mov.d %d14,%a15
8000d03c:	6d ff b1 ec 	call 8000a99e <__divdf3>
8000d040:	0b 23 10 48 	mov %e4,%d3,%d2
8000d044:	c2 1e       	add %d14,1
8000d046:	6d 00 93 09 	call 8000e36c <__fixdfsi>
8000d04a:	02 24       	mov %d4,%d2
8000d04c:	02 2f       	mov %d15,%d2
8000d04e:	6d ff 34 ed 	call 8000aab6 <__floatsidf>
8000d052:	0b 89 10 68 	mov %e6,%d9,%d8
8000d056:	0b 23 10 48 	mov %e4,%d3,%d2
8000d05a:	6d ff d0 eb 	call 8000a7fa <__muldf3>
8000d05e:	0b ab 10 48 	mov %e4,%d11,%d10
8000d062:	0b 23 10 68 	mov %e6,%d3,%d2
8000d066:	6d ff aa eb 	call 8000a7ba <__subdf3>
8000d06a:	0b 23 10 48 	mov %e4,%d3,%d2
8000d06e:	1b 0f 03 30 	addi %d3,%d15,48
8000d072:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d076:	28 03       	st.b [%a15]0,%d3
8000d078:	02 e3       	mov %d3,%d14
8000d07a:	a2 23       	sub %d3,%d2
8000d07c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d080:	5f 23 3c 80 	jne %d3,%d2,8000d0f8 <_dtoa_r+0x7d0>
8000d084:	0b 45 10 68 	mov %e6,%d5,%d4
8000d088:	6d ff 7d eb 	call 8000a782 <__adddf3>
8000d08c:	0b 89 10 68 	mov %e6,%d9,%d8
8000d090:	0b 23 10 48 	mov %e4,%d3,%d2
8000d094:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d098:	6d 00 0a 09 	call 8000e2ac <__gtdf2>
8000d09c:	4e 2e       	jgtz %d2,8000d0b8 <_dtoa_r+0x790>
8000d09e:	0b ab 10 48 	mov %e4,%d11,%d10
8000d0a2:	0b 89 10 68 	mov %e6,%d9,%d8
8000d0a6:	6d 00 c3 08 	call 8000e22c <__eqdf2>
8000d0aa:	df 02 95 82 	jne %d2,0,8000d5d4 <_dtoa_r+0xcac>
8000d0ae:	ae 05       	jnz.t %d15,0,8000d0b8 <_dtoa_r+0x790>
8000d0b0:	1d 00 92 02 	j 8000d5d4 <_dtoa_r+0xcac>
8000d0b4:	58 0c       	ld.w %d15,[%sp]48
8000d0b6:	78 02       	st.w [%sp]8,%d15
8000d0b8:	58 03       	ld.w %d15,[%sp]12
8000d0ba:	a2 ef       	sub %d15,%d14
8000d0bc:	46 0f       	not %d15
8000d0be:	60 e2       	mov.a %a2,%d14
8000d0c0:	60 ef       	mov.a %a15,%d14
8000d0c2:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d0c6:	b0 ff       	add.a %a15,-1
8000d0c8:	8b 93 03 32 	eq %d3,%d3,57
8000d0cc:	df 03 11 00 	jeq %d3,0,8000d0ee <_dtoa_r+0x7c6>
8000d0d0:	9f 0f 0d 80 	jned %d15,0,8000d0ea <_dtoa_r+0x7c2>
8000d0d4:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d0d8:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d0dc:	c2 13       	add %d3,1
8000d0de:	da 30       	mov %d15,48
8000d0e0:	59 a3 08 00 	st.w [%sp]8,%d3
8000d0e4:	2c 30       	st.b [%a3]0,%d15
8000d0e6:	40 3f       	mov.aa %a15,%a3
8000d0e8:	3c 03       	j 8000d0ee <_dtoa_r+0x7c6>
8000d0ea:	80 fe       	mov.d %d14,%a15
8000d0ec:	3c e9       	j 8000d0be <_dtoa_r+0x796>
8000d0ee:	0c f0       	ld.bu %d15,[%a15]0
8000d0f0:	c2 1f       	add %d15,1
8000d0f2:	28 0f       	st.b [%a15]0,%d15
8000d0f4:	1d 00 70 02 	j 8000d5d4 <_dtoa_r+0xcac>
8000d0f8:	82 06       	mov %d6,0
8000d0fa:	7b 40 02 74 	movh %d7,16420
8000d0fe:	6d ff 7e eb 	call 8000a7fa <__muldf3>
8000d102:	d2 06       	mov %e6,0
8000d104:	0b 23 10 48 	mov %e4,%d3,%d2
8000d108:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d10c:	60 ef       	mov.a %a15,%d14
8000d10e:	6d 00 8f 08 	call 8000e22c <__eqdf2>
8000d112:	df 02 90 ff 	jne %d2,0,8000d032 <_dtoa_r+0x70a>
8000d116:	1d 00 5f 02 	j 8000d5d4 <_dtoa_r+0xcac>
8000d11a:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d11e:	58 08       	ld.w %d15,[%sp]32
8000d120:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d124:	a0 0f       	mov.a %a15,0
8000d126:	df 02 3b 00 	jeq %d2,0,8000d19c <_dtoa_r+0x874>
8000d12a:	58 07       	ld.w %d15,[%sp]28
8000d12c:	ff 2f 10 00 	jge %d15,2,8000d14c <_dtoa_r+0x824>
8000d130:	58 13       	ld.w %d15,[%sp]76
8000d132:	6e 05       	jz %d15,8000d13c <_dtoa_r+0x814>
8000d134:	1b 33 43 30 	addi %d3,%d3,1075
8000d138:	58 08       	ld.w %d15,[%sp]32
8000d13a:	3c 22       	j 8000d17e <_dtoa_r+0x856>
8000d13c:	19 a3 10 10 	ld.w %d3,[%sp]80
8000d140:	58 08       	ld.w %d15,[%sp]32
8000d142:	8b 63 03 31 	rsub %d3,%d3,54
8000d146:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d14a:	3c 1a       	j 8000d17e <_dtoa_r+0x856>
8000d14c:	58 04       	ld.w %d15,[%sp]16
8000d14e:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d152:	c2 ff       	add %d15,-1
8000d154:	3f f2 04 00 	jlt %d2,%d15,8000d15c <_dtoa_r+0x834>
8000d158:	5a f2       	sub %d15,%d2,%d15
8000d15a:	3c 0b       	j 8000d170 <_dtoa_r+0x848>
8000d15c:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d160:	78 08       	st.w [%sp]32,%d15
8000d162:	52 32       	sub %d2,%d15,%d3
8000d164:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d168:	82 0f       	mov %d15,0
8000d16a:	42 23       	add %d3,%d2
8000d16c:	59 a3 34 00 	st.w [%sp]52,%d3
8000d170:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d174:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d178:	ce 33       	jgez %d3,8000d17e <_dtoa_r+0x856>
8000d17a:	a2 38       	sub %d8,%d3
8000d17c:	82 03       	mov %d3,0
8000d17e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d182:	40 d4       	mov.aa %a4,%a13
8000d184:	42 32       	add %d2,%d3
8000d186:	59 a2 14 00 	st.w [%sp]20,%d2
8000d18a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d18e:	82 14       	mov %d4,1
8000d190:	42 32       	add %d2,%d3
8000d192:	59 a2 18 00 	st.w [%sp]24,%d2
8000d196:	6d 00 1b 03 	call 8000d7cc <__i2b>
8000d19a:	40 2f       	mov.aa %a15,%a2
8000d19c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d1a0:	8b 18 80 32 	ge %d3,%d8,1
8000d1a4:	8b 12 80 34 	and.ge %d3,%d2,1
8000d1a8:	76 3e       	jz %d3,8000d1c4 <_dtoa_r+0x89c>
8000d1aa:	0b 82 80 31 	min %d3,%d2,%d8
8000d1ae:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d1b2:	a2 38       	sub %d8,%d3
8000d1b4:	a2 32       	sub %d2,%d3
8000d1b6:	59 a2 14 00 	st.w [%sp]20,%d2
8000d1ba:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d1be:	a2 32       	sub %d2,%d3
8000d1c0:	59 a2 18 00 	st.w [%sp]24,%d2
8000d1c4:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d1c8:	bf 13 27 00 	jlt %d3,1,8000d216 <_dtoa_r+0x8ee>
8000d1cc:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d1d0:	df 02 1c 00 	jeq %d2,0,8000d208 <_dtoa_r+0x8e0>
8000d1d4:	bf 1f 13 00 	jlt %d15,1,8000d1fa <_dtoa_r+0x8d2>
8000d1d8:	40 f5       	mov.aa %a5,%a15
8000d1da:	02 f4       	mov %d4,%d15
8000d1dc:	40 d4       	mov.aa %a4,%a13
8000d1de:	6d 00 8c 03 	call 8000d8f6 <__pow5mult>
8000d1e2:	40 e6       	mov.aa %a6,%a14
8000d1e4:	40 d4       	mov.aa %a4,%a13
8000d1e6:	40 25       	mov.aa %a5,%a2
8000d1e8:	40 2f       	mov.aa %a15,%a2
8000d1ea:	6d 00 f9 02 	call 8000d7dc <__multiply>
8000d1ee:	40 e5       	mov.aa %a5,%a14
8000d1f0:	40 2c       	mov.aa %a12,%a2
8000d1f2:	40 d4       	mov.aa %a4,%a13
8000d1f4:	6d 00 4e 02 	call 8000d690 <_Bfree>
8000d1f8:	40 ce       	mov.aa %a14,%a12
8000d1fa:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d1fe:	40 d4       	mov.aa %a4,%a13
8000d200:	a2 f4       	sub %d4,%d15
8000d202:	40 e5       	mov.aa %a5,%a14
8000d204:	76 49       	jz %d4,8000d216 <_dtoa_r+0x8ee>
8000d206:	3c 05       	j 8000d210 <_dtoa_r+0x8e8>
8000d208:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d20c:	40 d4       	mov.aa %a4,%a13
8000d20e:	40 e5       	mov.aa %a5,%a14
8000d210:	6d 00 73 03 	call 8000d8f6 <__pow5mult>
8000d214:	40 2e       	mov.aa %a14,%a2
8000d216:	40 d4       	mov.aa %a4,%a13
8000d218:	82 14       	mov %d4,1
8000d21a:	6d 00 d9 02 	call 8000d7cc <__i2b>
8000d21e:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d222:	40 2c       	mov.aa %a12,%a2
8000d224:	8e 3c       	jlez %d3,8000d23c <_dtoa_r+0x914>
8000d226:	40 d4       	mov.aa %a4,%a13
8000d228:	40 25       	mov.aa %a5,%a2
8000d22a:	02 34       	mov %d4,%d3
8000d22c:	6d 00 65 03 	call 8000d8f6 <__pow5mult>
8000d230:	58 07       	ld.w %d15,[%sp]28
8000d232:	40 2c       	mov.aa %a12,%a2
8000d234:	82 09       	mov %d9,0
8000d236:	ff 2f 1f 00 	jge %d15,2,8000d274 <_dtoa_r+0x94c>
8000d23a:	3c 06       	j 8000d246 <_dtoa_r+0x91e>
8000d23c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d240:	82 09       	mov %d9,0
8000d242:	ff 22 15 00 	jge %d2,2,8000d26c <_dtoa_r+0x944>
8000d246:	82 09       	mov %d9,0
8000d248:	df 0c 12 80 	jne %d12,0,8000d26c <_dtoa_r+0x944>
8000d24c:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000d250:	ee 0e       	jnz %d15,8000d26c <_dtoa_r+0x944>
8000d252:	7b 00 ff f7 	movh %d15,32752
8000d256:	26 df       	and %d15,%d13
8000d258:	6e 0a       	jz %d15,8000d26c <_dtoa_r+0x944>
8000d25a:	19 a3 14 00 	ld.w %d3,[%sp]20
8000d25e:	58 06       	ld.w %d15,[%sp]24
8000d260:	c2 13       	add %d3,1
8000d262:	c2 1f       	add %d15,1
8000d264:	59 a3 14 00 	st.w [%sp]20,%d3
8000d268:	78 06       	st.w [%sp]24,%d15
8000d26a:	82 19       	mov %d9,1
8000d26c:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d270:	82 12       	mov %d2,1
8000d272:	76 39       	jz %d3,8000d284 <_dtoa_r+0x95c>
8000d274:	4c c4       	ld.w %d15,[%a12]16
8000d276:	90 c3       	addsc.a %a3,%a12,%d15,2
8000d278:	19 34 10 00 	ld.w %d4,[%a3]16
8000d27c:	6d 00 54 02 	call 8000d724 <__hi0bits>
8000d280:	8b 02 02 21 	rsub %d2,%d2,32
8000d284:	58 06       	ld.w %d15,[%sp]24
8000d286:	42 2f       	add %d15,%d2
8000d288:	16 1f       	and %d15,31
8000d28a:	6e 0a       	jz %d15,8000d29e <_dtoa_r+0x976>
8000d28c:	8b 0f 02 31 	rsub %d3,%d15,32
8000d290:	8b cf 01 f1 	rsub %d15,%d15,28
8000d294:	ff 53 07 00 	jge %d3,5,8000d2a2 <_dtoa_r+0x97a>
8000d298:	df 43 10 00 	jeq %d3,4,8000d2b8 <_dtoa_r+0x990>
8000d29c:	02 3f       	mov %d15,%d3
8000d29e:	1b cf 01 f0 	addi %d15,%d15,28
8000d2a2:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d2a6:	19 a3 18 00 	ld.w %d3,[%sp]24
8000d2aa:	42 f2       	add %d2,%d15
8000d2ac:	42 f3       	add %d3,%d15
8000d2ae:	59 a2 14 00 	st.w [%sp]20,%d2
8000d2b2:	42 f8       	add %d8,%d15
8000d2b4:	59 a3 18 00 	st.w [%sp]24,%d3
8000d2b8:	58 05       	ld.w %d15,[%sp]20
8000d2ba:	8e f7       	jlez %d15,8000d2c8 <_dtoa_r+0x9a0>
8000d2bc:	40 e5       	mov.aa %a5,%a14
8000d2be:	40 d4       	mov.aa %a4,%a13
8000d2c0:	02 f4       	mov %d4,%d15
8000d2c2:	6d 00 58 03 	call 8000d972 <__lshift>
8000d2c6:	40 2e       	mov.aa %a14,%a2
8000d2c8:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d2cc:	8e 27       	jlez %d2,8000d2da <_dtoa_r+0x9b2>
8000d2ce:	40 c5       	mov.aa %a5,%a12
8000d2d0:	40 d4       	mov.aa %a4,%a13
8000d2d2:	02 24       	mov %d4,%d2
8000d2d4:	6d 00 4f 03 	call 8000d972 <__lshift>
8000d2d8:	40 2c       	mov.aa %a12,%a2
8000d2da:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000d2de:	df 03 20 00 	jeq %d3,0,8000d31e <_dtoa_r+0x9f6>
8000d2e2:	40 e4       	mov.aa %a4,%a14
8000d2e4:	40 c5       	mov.aa %a5,%a12
8000d2e6:	6d 00 a3 03 	call 8000da2c <__mcmp>
8000d2ea:	ff 02 1a 00 	jge %d2,0,8000d31e <_dtoa_r+0x9f6>
8000d2ee:	58 02       	ld.w %d15,[%sp]8
8000d2f0:	40 e5       	mov.aa %a5,%a14
8000d2f2:	c2 ff       	add %d15,-1
8000d2f4:	40 d4       	mov.aa %a4,%a13
8000d2f6:	fb a0 00 40 	mov %e4,10
8000d2fa:	78 02       	st.w [%sp]8,%d15
8000d2fc:	6d 00 d3 01 	call 8000d6a2 <__multadd>
8000d300:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000d304:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d308:	59 a2 10 00 	st.w [%sp]16,%d2
8000d30c:	40 2e       	mov.aa %a14,%a2
8000d30e:	76 38       	jz %d3,8000d31e <_dtoa_r+0x9f6>
8000d310:	40 f5       	mov.aa %a5,%a15
8000d312:	40 d4       	mov.aa %a4,%a13
8000d314:	fb a0 00 40 	mov %e4,10
8000d318:	6d 00 c5 01 	call 8000d6a2 <__multadd>
8000d31c:	40 2f       	mov.aa %a15,%a2
8000d31e:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d322:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d326:	8b 32 80 f2 	ge %d15,%d2,3
8000d32a:	8b 13 40 f4 	and.lt %d15,%d3,1
8000d32e:	6e 2a       	jz %d15,8000d382 <_dtoa_r+0xa5a>
8000d330:	f6 3f       	jnz %d3,8000d34e <_dtoa_r+0xa26>
8000d332:	40 c5       	mov.aa %a5,%a12
8000d334:	40 d4       	mov.aa %a4,%a13
8000d336:	d2 54       	mov %e4,5
8000d338:	6d 00 b5 01 	call 8000d6a2 <__multadd>
8000d33c:	40 e4       	mov.aa %a4,%a14
8000d33e:	40 25       	mov.aa %a5,%a2
8000d340:	40 2c       	mov.aa %a12,%a2
8000d342:	6d 00 75 03 	call 8000da2c <__mcmp>
8000d346:	4e 2e       	jgtz %d2,8000d362 <_dtoa_r+0xa3a>
8000d348:	3c 03       	j 8000d34e <_dtoa_r+0xa26>
8000d34a:	a0 0c       	mov.a %a12,0
8000d34c:	a0 0f       	mov.a %a15,0
8000d34e:	58 0a       	ld.w %d15,[%sp]40
8000d350:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d354:	46 0f       	not %d15
8000d356:	78 02       	st.w [%sp]8,%d15
8000d358:	3c 11       	j 8000d37a <_dtoa_r+0xa52>
8000d35a:	58 0c       	ld.w %d15,[%sp]48
8000d35c:	a0 0c       	mov.a %a12,0
8000d35e:	78 02       	st.w [%sp]8,%d15
8000d360:	a0 0f       	mov.a %a15,0
8000d362:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d366:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d36a:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d36e:	da 31       	mov %d15,49
8000d370:	c2 12       	add %d2,1
8000d372:	c2 1e       	add %d14,1
8000d374:	2c 30       	st.b [%a3]0,%d15
8000d376:	59 a2 08 00 	st.w [%sp]8,%d2
8000d37a:	80 f8       	mov.d %d8,%a15
8000d37c:	a0 0f       	mov.a %a15,0
8000d37e:	1d 00 14 01 	j 8000d5a6 <_dtoa_r+0xc7e>
8000d382:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d386:	f6 35       	jnz %d3,8000d390 <_dtoa_r+0xa68>
8000d388:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000d38c:	1d 00 c2 00 	j 8000d510 <_dtoa_r+0xbe8>
8000d390:	8e 87       	jlez %d8,8000d39e <_dtoa_r+0xa76>
8000d392:	40 f5       	mov.aa %a5,%a15
8000d394:	40 d4       	mov.aa %a4,%a13
8000d396:	02 84       	mov %d4,%d8
8000d398:	6d 00 ed 02 	call 8000d972 <__lshift>
8000d39c:	40 2f       	mov.aa %a15,%a2
8000d39e:	80 f8       	mov.d %d8,%a15
8000d3a0:	df 09 16 00 	jeq %d9,0,8000d3cc <_dtoa_r+0xaa4>
8000d3a4:	40 d4       	mov.aa %a4,%a13
8000d3a6:	48 14       	ld.w %d4,[%a15]4
8000d3a8:	6d 00 49 01 	call 8000d63a <_Balloc>
8000d3ac:	48 44       	ld.w %d4,[%a15]16
8000d3ae:	d9 24 0c 00 	lea %a4,[%a2]12
8000d3b2:	c2 24       	add %d4,2
8000d3b4:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d3b8:	06 24       	sh %d4,2
8000d3ba:	80 2f       	mov.d %d15,%a2
8000d3bc:	6d 00 31 01 	call 8000d61e <memcpy>
8000d3c0:	60 f5       	mov.a %a5,%d15
8000d3c2:	40 d4       	mov.aa %a4,%a13
8000d3c4:	82 14       	mov %d4,1
8000d3c6:	6d 00 d6 02 	call 8000d972 <__lshift>
8000d3ca:	80 28       	mov.d %d8,%a2
8000d3cc:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000d3d0:	8f 1c 00 a1 	and %d10,%d12,1
8000d3d4:	40 e4       	mov.aa %a4,%a14
8000d3d6:	40 c5       	mov.aa %a5,%a12
8000d3d8:	6d ff 1a fa 	call 8000c80c <quorem>
8000d3dc:	40 e4       	mov.aa %a4,%a14
8000d3de:	40 f5       	mov.aa %a5,%a15
8000d3e0:	02 2e       	mov %d14,%d2
8000d3e2:	1b 02 03 f0 	addi %d15,%d2,48
8000d3e6:	6d 00 23 03 	call 8000da2c <__mcmp>
8000d3ea:	60 86       	mov.a %a6,%d8
8000d3ec:	40 d4       	mov.aa %a4,%a13
8000d3ee:	40 c5       	mov.aa %a5,%a12
8000d3f0:	02 2b       	mov %d11,%d2
8000d3f2:	6d 00 3e 03 	call 8000da6e <__mdiff>
8000d3f6:	19 22 0c 00 	ld.w %d2,[%a2]12
8000d3fa:	80 2d       	mov.d %d13,%a2
8000d3fc:	82 1c       	mov %d12,1
8000d3fe:	f6 26       	jnz %d2,8000d40a <_dtoa_r+0xae2>
8000d400:	40 e4       	mov.aa %a4,%a14
8000d402:	40 25       	mov.aa %a5,%a2
8000d404:	6d 00 14 03 	call 8000da2c <__mcmp>
8000d408:	02 2c       	mov %d12,%d2
8000d40a:	60 d5       	mov.a %a5,%d13
8000d40c:	40 d4       	mov.aa %a4,%a13
8000d40e:	6d 00 41 01 	call 8000d690 <_Bfree>
8000d412:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000d416:	1b 19 00 d0 	addi %d13,%d9,1
8000d41a:	a6 c3       	or %d3,%d12
8000d41c:	f6 3f       	jnz %d3,8000d43a <_dtoa_r+0xb12>
8000d41e:	f6 ae       	jnz %d10,8000d43a <_dtoa_r+0xb12>
8000d420:	8b 9f 03 32 	eq %d3,%d15,57
8000d424:	40 e2       	mov.aa %a2,%a14
8000d426:	df 03 3a 80 	jne %d3,0,8000d49a <_dtoa_r+0xb72>
8000d42a:	1b 1e 03 20 	addi %d2,%d14,49
8000d42e:	8b 1b 80 b2 	ge %d11,%d11,1
8000d432:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000d436:	02 de       	mov %d14,%d13
8000d438:	3c 37       	j 8000d4a6 <_dtoa_r+0xb7e>
8000d43a:	ce b5       	jgez %d11,8000d444 <_dtoa_r+0xb1c>
8000d43c:	02 fa       	mov %d10,%d15
8000d43e:	40 e2       	mov.aa %a2,%a14
8000d440:	4e ca       	jgtz %d12,8000d454 <_dtoa_r+0xb2c>
8000d442:	3c 1e       	j 8000d47e <_dtoa_r+0xb56>
8000d444:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d448:	a6 2b       	or %d11,%d2
8000d44a:	df 0b 20 80 	jne %d11,0,8000d48a <_dtoa_r+0xb62>
8000d44e:	df 0a 1e 80 	jne %d10,0,8000d48a <_dtoa_r+0xb62>
8000d452:	3c f5       	j 8000d43c <_dtoa_r+0xb14>
8000d454:	40 d4       	mov.aa %a4,%a13
8000d456:	40 e5       	mov.aa %a5,%a14
8000d458:	82 14       	mov %d4,1
8000d45a:	6d 00 8c 02 	call 8000d972 <__lshift>
8000d45e:	40 c5       	mov.aa %a5,%a12
8000d460:	40 24       	mov.aa %a4,%a2
8000d462:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d466:	6d 00 e3 02 	call 8000da2c <__mcmp>
8000d46a:	99 a2 04 00 	ld.a %a2,[%sp]4
8000d46e:	4e 23       	jgtz %d2,8000d474 <_dtoa_r+0xb4c>
8000d470:	f6 27       	jnz %d2,8000d47e <_dtoa_r+0xb56>
8000d472:	2e 06       	jz.t %d15,0,8000d47e <_dtoa_r+0xb56>
8000d474:	8b 9f 03 32 	eq %d3,%d15,57
8000d478:	df 03 11 80 	jne %d3,0,8000d49a <_dtoa_r+0xb72>
8000d47c:	92 1a       	add %d10,%d15,1
8000d47e:	60 93       	mov.a %a3,%d9
8000d480:	02 de       	mov %d14,%d13
8000d482:	34 3a       	st.b [%a3],%d10
8000d484:	40 2e       	mov.aa %a14,%a2
8000d486:	1d 00 90 00 	j 8000d5a6 <_dtoa_r+0xc7e>
8000d48a:	bf 1c 11 00 	jlt %d12,1,8000d4ac <_dtoa_r+0xb84>
8000d48e:	8b 9f 23 32 	ne %d3,%d15,57
8000d492:	40 e2       	mov.aa %a2,%a14
8000d494:	02 de       	mov %d14,%d13
8000d496:	c2 1f       	add %d15,1
8000d498:	f6 37       	jnz %d3,8000d4a6 <_dtoa_r+0xb7e>
8000d49a:	60 93       	mov.a %a3,%d9
8000d49c:	da 39       	mov %d15,57
8000d49e:	02 de       	mov %d14,%d13
8000d4a0:	2c 30       	st.b [%a3]0,%d15
8000d4a2:	40 2e       	mov.aa %a14,%a2
8000d4a4:	3c 5d       	j 8000d55e <_dtoa_r+0xc36>
8000d4a6:	60 92       	mov.a %a2,%d9
8000d4a8:	2c 20       	st.b [%a2]0,%d15
8000d4aa:	3c 7e       	j 8000d5a6 <_dtoa_r+0xc7e>
8000d4ac:	60 93       	mov.a %a3,%d9
8000d4ae:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d4b2:	02 d5       	mov %d5,%d13
8000d4b4:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d4b8:	2c 30       	st.b [%a3]0,%d15
8000d4ba:	a2 25       	sub %d5,%d2
8000d4bc:	02 de       	mov %d14,%d13
8000d4be:	5f 35 41 00 	jeq %d5,%d3,8000d540 <_dtoa_r+0xc18>
8000d4c2:	40 e5       	mov.aa %a5,%a14
8000d4c4:	40 d4       	mov.aa %a4,%a13
8000d4c6:	fb a0 00 40 	mov %e4,10
8000d4ca:	6d 00 ec 00 	call 8000d6a2 <__multadd>
8000d4ce:	80 ff       	mov.d %d15,%a15
8000d4d0:	40 2e       	mov.aa %a14,%a2
8000d4d2:	40 d4       	mov.aa %a4,%a13
8000d4d4:	40 f5       	mov.aa %a5,%a15
8000d4d6:	fb a0 00 40 	mov %e4,10
8000d4da:	7e 86       	jne %d15,%d8,8000d4e6 <_dtoa_r+0xbbe>
8000d4dc:	6d 00 e3 00 	call 8000d6a2 <__multadd>
8000d4e0:	40 2f       	mov.aa %a15,%a2
8000d4e2:	80 28       	mov.d %d8,%a2
8000d4e4:	3c 0b       	j 8000d4fa <_dtoa_r+0xbd2>
8000d4e6:	6d 00 de 00 	call 8000d6a2 <__multadd>
8000d4ea:	60 85       	mov.a %a5,%d8
8000d4ec:	40 d4       	mov.aa %a4,%a13
8000d4ee:	fb a0 00 40 	mov %e4,10
8000d4f2:	40 2f       	mov.aa %a15,%a2
8000d4f4:	6d 00 d7 00 	call 8000d6a2 <__multadd>
8000d4f8:	80 28       	mov.d %d8,%a2
8000d4fa:	02 d9       	mov %d9,%d13
8000d4fc:	1d ff 6c ff 	j 8000d3d4 <_dtoa_r+0xaac>
8000d500:	40 e5       	mov.aa %a5,%a14
8000d502:	40 d4       	mov.aa %a4,%a13
8000d504:	fb a0 00 40 	mov %e4,10
8000d508:	6d 00 cd 00 	call 8000d6a2 <__multadd>
8000d50c:	02 98       	mov %d8,%d9
8000d50e:	40 2e       	mov.aa %a14,%a2
8000d510:	40 e4       	mov.aa %a4,%a14
8000d512:	40 c5       	mov.aa %a5,%a12
8000d514:	6d ff 7c f9 	call 8000c80c <quorem>
8000d518:	1b 18 00 90 	addi %d9,%d8,1
8000d51c:	1b 02 03 f0 	addi %d15,%d2,48
8000d520:	60 82       	mov.a %a2,%d8
8000d522:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d526:	02 95       	mov %d5,%d9
8000d528:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d52c:	2c 20       	st.b [%a2]0,%d15
8000d52e:	a2 25       	sub %d5,%d2
8000d530:	3f 35 e8 7f 	jlt %d5,%d3,8000d500 <_dtoa_r+0xbd8>
8000d534:	8b 13 40 33 	max %d3,%d3,1
8000d538:	02 2e       	mov %d14,%d2
8000d53a:	80 f8       	mov.d %d8,%a15
8000d53c:	42 3e       	add %d14,%d3
8000d53e:	a0 0f       	mov.a %a15,0
8000d540:	40 e5       	mov.aa %a5,%a14
8000d542:	40 d4       	mov.aa %a4,%a13
8000d544:	82 14       	mov %d4,1
8000d546:	6d 00 16 02 	call 8000d972 <__lshift>
8000d54a:	40 c5       	mov.aa %a5,%a12
8000d54c:	40 2e       	mov.aa %a14,%a2
8000d54e:	40 24       	mov.aa %a4,%a2
8000d550:	6d 00 6e 02 	call 8000da2c <__mcmp>
8000d554:	4e 25       	jgtz %d2,8000d55e <_dtoa_r+0xc36>
8000d556:	df 02 1e 80 	jne %d2,0,8000d592 <_dtoa_r+0xc6a>
8000d55a:	6f 0f 1c 00 	jz.t %d15,0,8000d592 <_dtoa_r+0xc6a>
8000d55e:	58 03       	ld.w %d15,[%sp]12
8000d560:	a2 ef       	sub %d15,%d14
8000d562:	46 0f       	not %d15
8000d564:	60 e2       	mov.a %a2,%d14
8000d566:	60 e3       	mov.a %a3,%d14
8000d568:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d56c:	b0 f3       	add.a %a3,-1
8000d56e:	8b 93 03 52 	eq %d5,%d3,57
8000d572:	76 5d       	jz %d5,8000d58c <_dtoa_r+0xc64>
8000d574:	9f 0f 0a 80 	jned %d15,0,8000d588 <_dtoa_r+0xc60>
8000d578:	58 02       	ld.w %d15,[%sp]8
8000d57a:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d57e:	c2 1f       	add %d15,1
8000d580:	78 02       	st.w [%sp]8,%d15
8000d582:	da 31       	mov %d15,49
8000d584:	2c 30       	st.b [%a3]0,%d15
8000d586:	3c 10       	j 8000d5a6 <_dtoa_r+0xc7e>
8000d588:	80 3e       	mov.d %d14,%a3
8000d58a:	3c ed       	j 8000d564 <_dtoa_r+0xc3c>
8000d58c:	c2 13       	add %d3,1
8000d58e:	34 33       	st.b [%a3],%d3
8000d590:	3c 0b       	j 8000d5a6 <_dtoa_r+0xc7e>
8000d592:	60 e2       	mov.a %a2,%d14
8000d594:	60 e3       	mov.a %a3,%d14
8000d596:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d59a:	b0 f3       	add.a %a3,-1
8000d59c:	8b 0f 03 f2 	eq %d15,%d15,48
8000d5a0:	6e 03       	jz %d15,8000d5a6 <_dtoa_r+0xc7e>
8000d5a2:	80 3e       	mov.d %d14,%a3
8000d5a4:	3c f7       	j 8000d592 <_dtoa_r+0xc6a>
8000d5a6:	40 d4       	mov.aa %a4,%a13
8000d5a8:	40 c5       	mov.aa %a5,%a12
8000d5aa:	6d 00 73 00 	call 8000d690 <_Bfree>
8000d5ae:	df 08 13 00 	jeq %d8,0,8000d5d4 <_dtoa_r+0xcac>
8000d5b2:	80 f2       	mov.d %d2,%a15
8000d5b4:	8b 02 20 f2 	ne %d15,%d2,0
8000d5b8:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000d5bc:	6e 05       	jz %d15,8000d5c6 <_dtoa_r+0xc9e>
8000d5be:	40 d4       	mov.aa %a4,%a13
8000d5c0:	40 f5       	mov.aa %a5,%a15
8000d5c2:	6d 00 67 00 	call 8000d690 <_Bfree>
8000d5c6:	60 85       	mov.a %a5,%d8
8000d5c8:	40 d4       	mov.aa %a4,%a13
8000d5ca:	6d 00 63 00 	call 8000d690 <_Bfree>
8000d5ce:	3c 03       	j 8000d5d4 <_dtoa_r+0xcac>
8000d5d0:	58 0c       	ld.w %d15,[%sp]48
8000d5d2:	78 02       	st.w [%sp]8,%d15
8000d5d4:	40 d4       	mov.aa %a4,%a13
8000d5d6:	40 e5       	mov.aa %a5,%a14
8000d5d8:	6d 00 5c 00 	call 8000d690 <_Bfree>
8000d5dc:	60 e2       	mov.a %a2,%d14
8000d5de:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d5e2:	99 a3 08 10 	ld.a %a3,[%sp]72
8000d5e6:	82 0f       	mov %d15,0
8000d5e8:	d8 0e       	ld.a %a15,[%sp]56
8000d5ea:	2c 20       	st.b [%a2]0,%d15
8000d5ec:	c2 12       	add %d2,1
8000d5ee:	74 32       	st.w [%a3],%d2
8000d5f0:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d5f4:	bc f2       	jz.a %a15,8000d5f8 <_dtoa_r+0xcd0>
8000d5f6:	68 0e       	st.w [%a15]0,%d14
8000d5f8:	00 90       	ret 
	...

8000d5fc <_localeconv_r>:
8000d5fc:	91 00 00 28 	movh.a %a2,32768
8000d600:	d9 22 dc b0 	lea %a2,[%a2]3804 <80000edc <lconv>>
8000d604:	00 90       	ret 

8000d606 <memchr>:
8000d606:	8f f4 0f 41 	and %d4,%d4,255
8000d60a:	9f 05 04 80 	jned %d5,0,8000d612 <memchr+0xc>
8000d60e:	a0 02       	mov.a %a2,0
8000d610:	00 90       	ret 
8000d612:	0c 40       	ld.bu %d15,[%a4]0
8000d614:	3e 43       	jeq %d15,%d4,8000d61a <memchr+0x14>
8000d616:	b0 14       	add.a %a4,1
8000d618:	3c f9       	j 8000d60a <memchr+0x4>
8000d61a:	40 42       	mov.aa %a2,%a4
8000d61c:	00 90       	ret 

8000d61e <memcpy>:
8000d61e:	40 42       	mov.aa %a2,%a4
8000d620:	a0 0f       	mov.a %a15,0
8000d622:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d626:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d62a:	9f 04 03 80 	jned %d4,0,8000d630 <memcpy+0x12>
8000d62e:	00 90       	ret 
8000d630:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d634:	b0 1f       	add.a %a15,1
8000d636:	2c 40       	st.b [%a4]0,%d15
8000d638:	3c f5       	j 8000d622 <memcpy+0x4>

8000d63a <_Balloc>:
8000d63a:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d63e:	40 4f       	mov.aa %a15,%a4
8000d640:	02 4f       	mov %d15,%d4
8000d642:	76 29       	jz %d2,8000d654 <_Balloc+0x1a>
8000d644:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d648:	90 33       	addsc.a %a3,%a3,%d15,2
8000d64a:	d4 32       	ld.a %a2,[%a3]
8000d64c:	bc 2f       	jz.a %a2,8000d66a <_Balloc+0x30>
8000d64e:	4c 20       	ld.w %d15,[%a2]0
8000d650:	6c 30       	st.w [%a3]0,%d15
8000d652:	3c 1b       	j 8000d688 <_Balloc+0x4e>
8000d654:	82 44       	mov %d4,4
8000d656:	3b 10 02 50 	mov %d5,33
8000d65a:	6d 00 5c 03 	call 8000dd12 <_calloc_r>
8000d65e:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d662:	bd 02 f1 ff 	jnz.a %a2,8000d644 <_Balloc+0xa>
8000d666:	a0 02       	mov.a %a2,0
8000d668:	00 90       	ret 
8000d66a:	82 18       	mov %d8,1
8000d66c:	0f f8 00 80 	sh %d8,%d8,%d15
8000d670:	1b 58 00 50 	addi %d5,%d8,5
8000d674:	40 f4       	mov.aa %a4,%a15
8000d676:	82 14       	mov %d4,1
8000d678:	06 25       	sh %d5,2
8000d67a:	6d 00 4c 03 	call 8000dd12 <_calloc_r>
8000d67e:	bd 02 f4 7f 	jz.a %a2,8000d666 <_Balloc+0x2c>
8000d682:	6c 21       	st.w [%a2]4,%d15
8000d684:	59 28 08 00 	st.w [%a2]8,%d8
8000d688:	82 0f       	mov %d15,0
8000d68a:	6c 24       	st.w [%a2]16,%d15
8000d68c:	6c 23       	st.w [%a2]12,%d15
8000d68e:	00 90       	ret 

8000d690 <_Bfree>:
8000d690:	bc 58       	jz.a %a5,8000d6a0 <_Bfree+0x10>
8000d692:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d696:	4c 51       	ld.w %d15,[%a5]4
8000d698:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d69a:	4c f0       	ld.w %d15,[%a15]0
8000d69c:	6c 50       	st.w [%a5]0,%d15
8000d69e:	e8 05       	st.a [%a15]0,%a5
8000d6a0:	00 90       	ret 

8000d6a2 <__multadd>:
8000d6a2:	19 59 10 00 	ld.w %d9,[%a5]16
8000d6a6:	40 4c       	mov.aa %a12,%a4
8000d6a8:	9a f9       	add %d15,%d9,-1
8000d6aa:	8b 19 80 22 	ge %d2,%d9,1
8000d6ae:	40 5f       	mov.aa %a15,%a5
8000d6b0:	02 58       	mov %d8,%d5
8000d6b2:	d9 53 14 00 	lea %a3,[%a5]20
8000d6b6:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d6ba:	40 32       	mov.aa %a2,%a3
8000d6bc:	44 25       	ld.w %d5,[%a2+]
8000d6be:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d6c2:	8f 05 1f f0 	sh %d15,%d5,-16
8000d6c6:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d6ca:	8f 03 1f 60 	sh %d6,%d3,-16
8000d6ce:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d6d2:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d6d6:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d6da:	74 33       	st.w [%a3],%d3
8000d6dc:	40 23       	mov.aa %a3,%a2
8000d6de:	9f 02 ee ff 	jned %d2,0,8000d6ba <__multadd+0x18>
8000d6e2:	df 08 1f 00 	jeq %d8,0,8000d720 <__multadd+0x7e>
8000d6e6:	4c f2       	ld.w %d15,[%a15]8
8000d6e8:	3f f9 16 00 	jlt %d9,%d15,8000d714 <__multadd+0x72>
8000d6ec:	48 14       	ld.w %d4,[%a15]4
8000d6ee:	40 c4       	mov.aa %a4,%a12
8000d6f0:	c2 14       	add %d4,1
8000d6f2:	6d ff a4 ff 	call 8000d63a <_Balloc>
8000d6f6:	48 44       	ld.w %d4,[%a15]16
8000d6f8:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d6fc:	c2 24       	add %d4,2
8000d6fe:	d9 24 0c 00 	lea %a4,[%a2]12
8000d702:	06 24       	sh %d4,2
8000d704:	40 2d       	mov.aa %a13,%a2
8000d706:	6d ff 8c ff 	call 8000d61e <memcpy>
8000d70a:	40 f5       	mov.aa %a5,%a15
8000d70c:	40 c4       	mov.aa %a4,%a12
8000d70e:	6d ff c1 ff 	call 8000d690 <_Bfree>
8000d712:	40 df       	mov.aa %a15,%a13
8000d714:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d718:	c2 19       	add %d9,1
8000d71a:	59 28 14 00 	st.w [%a2]20,%d8
8000d71e:	68 49       	st.w [%a15]16,%d9
8000d720:	40 f2       	mov.aa %a2,%a15
8000d722:	00 90       	ret 

8000d724 <__hi0bits>:
8000d724:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d728:	82 02       	mov %d2,0
8000d72a:	ee 05       	jnz %d15,8000d734 <__hi0bits+0x10>
8000d72c:	8f 04 01 40 	sh %d4,%d4,16
8000d730:	3b 00 01 20 	mov %d2,16
8000d734:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d738:	ee 05       	jnz %d15,8000d742 <__hi0bits+0x1e>
8000d73a:	1b 82 00 20 	addi %d2,%d2,8
8000d73e:	8f 84 00 40 	sh %d4,%d4,8
8000d742:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d746:	ee 03       	jnz %d15,8000d74c <__hi0bits+0x28>
8000d748:	c2 42       	add %d2,4
8000d74a:	06 44       	sh %d4,4
8000d74c:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d750:	ee 03       	jnz %d15,8000d756 <__hi0bits+0x32>
8000d752:	c2 22       	add %d2,2
8000d754:	06 24       	sh %d4,2
8000d756:	0e 47       	jltz %d4,8000d764 <__hi0bits+0x40>
8000d758:	7b 00 00 f4 	movh %d15,16384
8000d75c:	26 f4       	and %d4,%d15
8000d75e:	c2 12       	add %d2,1
8000d760:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d764:	00 90       	ret 

8000d766 <__lo0bits>:
8000d766:	54 43       	ld.w %d3,[%a4]
8000d768:	8f 73 00 f1 	and %d15,%d3,7
8000d76c:	6e 0e       	jz %d15,8000d788 <__lo0bits+0x22>
8000d76e:	82 02       	mov %d2,0
8000d770:	6f 03 2d 80 	jnz.t %d3,0,8000d7ca <__lo0bits+0x64>
8000d774:	6f 13 06 00 	jz.t %d3,1,8000d780 <__lo0bits+0x1a>
8000d778:	06 f3       	sh %d3,-1
8000d77a:	74 43       	st.w [%a4],%d3
8000d77c:	82 12       	mov %d2,1
8000d77e:	00 90       	ret 
8000d780:	06 e3       	sh %d3,-2
8000d782:	74 43       	st.w [%a4],%d3
8000d784:	82 22       	mov %d2,2
8000d786:	00 90       	ret 
8000d788:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000d78c:	82 04       	mov %d4,0
8000d78e:	ee 05       	jnz %d15,8000d798 <__lo0bits+0x32>
8000d790:	8f 03 1f 30 	sh %d3,%d3,-16
8000d794:	3b 00 01 40 	mov %d4,16
8000d798:	02 3f       	mov %d15,%d3
8000d79a:	16 ff       	and %d15,255
8000d79c:	ee 04       	jnz %d15,8000d7a4 <__lo0bits+0x3e>
8000d79e:	1b 84 00 40 	addi %d4,%d4,8
8000d7a2:	06 83       	sh %d3,-8
8000d7a4:	8f f3 00 f1 	and %d15,%d3,15
8000d7a8:	ee 03       	jnz %d15,8000d7ae <__lo0bits+0x48>
8000d7aa:	c2 44       	add %d4,4
8000d7ac:	06 c3       	sh %d3,-4
8000d7ae:	8f 33 00 f1 	and %d15,%d3,3
8000d7b2:	ee 03       	jnz %d15,8000d7b8 <__lo0bits+0x52>
8000d7b4:	c2 24       	add %d4,2
8000d7b6:	06 e3       	sh %d3,-2
8000d7b8:	6f 03 07 80 	jnz.t %d3,0,8000d7c6 <__lo0bits+0x60>
8000d7bc:	06 f3       	sh %d3,-1
8000d7be:	3b 00 02 20 	mov %d2,32
8000d7c2:	76 34       	jz %d3,8000d7ca <__lo0bits+0x64>
8000d7c4:	c2 14       	add %d4,1
8000d7c6:	74 43       	st.w [%a4],%d3
8000d7c8:	02 42       	mov %d2,%d4
8000d7ca:	00 90       	ret 

8000d7cc <__i2b>:
8000d7cc:	02 4f       	mov %d15,%d4
8000d7ce:	82 14       	mov %d4,1
8000d7d0:	6d ff 35 ff 	call 8000d63a <_Balloc>
8000d7d4:	6c 25       	st.w [%a2]20,%d15
8000d7d6:	82 1f       	mov %d15,1
8000d7d8:	6c 24       	st.w [%a2]16,%d15
8000d7da:	00 90       	ret 

8000d7dc <__multiply>:
8000d7dc:	19 52 10 00 	ld.w %d2,[%a5]16
8000d7e0:	4c 64       	ld.w %d15,[%a6]16
8000d7e2:	40 5f       	mov.aa %a15,%a5
8000d7e4:	40 6c       	mov.aa %a12,%a6
8000d7e6:	7f f2 04 00 	jge %d2,%d15,8000d7ee <__multiply+0x12>
8000d7ea:	40 6f       	mov.aa %a15,%a6
8000d7ec:	40 5c       	mov.aa %a12,%a5
8000d7ee:	48 4a       	ld.w %d10,[%a15]16
8000d7f0:	19 c9 10 00 	ld.w %d9,[%a12]16
8000d7f4:	4c f2       	ld.w %d15,[%a15]8
8000d7f6:	0b 9a 00 80 	add %d8,%d10,%d9
8000d7fa:	48 12       	ld.w %d2,[%a15]4
8000d7fc:	0b 8f 20 41 	lt %d4,%d15,%d8
8000d800:	42 24       	add %d4,%d2
8000d802:	6d ff 1c ff 	call 8000d63a <_Balloc>
8000d806:	d9 23 14 00 	lea %a3,[%a2]20
8000d80a:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000d80e:	40 34       	mov.aa %a4,%a3
8000d810:	82 0f       	mov %d15,0
8000d812:	80 43       	mov.d %d3,%a4
8000d814:	80 d2       	mov.d %d2,%a13
8000d816:	7f 23 04 80 	jge.u %d3,%d2,8000d81e <__multiply+0x42>
8000d81a:	64 4f       	st.w [%a4+],%d15
8000d81c:	3c fb       	j 8000d812 <__multiply+0x36>
8000d81e:	d9 ff 14 00 	lea %a15,[%a15]20
8000d822:	d9 cc 14 00 	lea %a12,[%a12]20
8000d826:	80 f3       	mov.d %d3,%a15
8000d828:	80 cf       	mov.d %d15,%a12
8000d82a:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000d82e:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000d832:	80 c2       	mov.d %d2,%a12
8000d834:	7f 02 54 80 	jge.u %d2,%d0,8000d8dc <__multiply+0x100>
8000d838:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000d83c:	40 34       	mov.aa %a4,%a3
8000d83e:	40 f6       	mov.aa %a6,%a15
8000d840:	82 03       	mov %d3,0
8000d842:	df 02 21 00 	jeq %d2,0,8000d884 <__multiply+0xa8>
8000d846:	40 45       	mov.aa %a5,%a4
8000d848:	44 67       	ld.w %d7,[%a6+]
8000d84a:	44 56       	ld.w %d6,[%a5+]
8000d84c:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000d850:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000d854:	8f 07 1f 70 	sh %d7,%d7,-16
8000d858:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000d85c:	8f 06 1f 60 	sh %d6,%d6,-16
8000d860:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000d864:	42 35       	add %d5,%d3
8000d866:	8f 05 1f 30 	sh %d3,%d5,-16
8000d86a:	1a 36       	add %d15,%d6,%d3
8000d86c:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000d870:	8f 0f 1f 30 	sh %d3,%d15,-16
8000d874:	80 6f       	mov.d %d15,%a6
8000d876:	74 45       	st.w [%a4],%d5
8000d878:	7f 4f 04 80 	jge.u %d15,%d4,8000d880 <__multiply+0xa4>
8000d87c:	40 54       	mov.aa %a4,%a5
8000d87e:	3c e4       	j 8000d846 <__multiply+0x6a>
8000d880:	59 43 04 00 	st.w [%a4]4,%d3
8000d884:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000d888:	df 02 27 00 	jeq %d2,0,8000d8d6 <__multiply+0xfa>
8000d88c:	54 33       	ld.w %d3,[%a3]
8000d88e:	40 34       	mov.aa %a4,%a3
8000d890:	40 f5       	mov.aa %a5,%a15
8000d892:	82 07       	mov %d7,0
8000d894:	40 56       	mov.aa %a6,%a5
8000d896:	44 66       	ld.w %d6,[%a6+]
8000d898:	40 47       	mov.aa %a7,%a4
8000d89a:	44 75       	ld.w %d5,[%a7+]
8000d89c:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000d8a0:	8f 05 1f 50 	sh %d5,%d5,-16
8000d8a4:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000d8a8:	42 7f       	add %d15,%d7
8000d8aa:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d8ae:	8f 0f 1f f0 	sh %d15,%d15,-16
8000d8b2:	74 43       	st.w [%a4],%d3
8000d8b4:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000d8b8:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000d8bc:	40 65       	mov.aa %a5,%a6
8000d8be:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000d8c2:	42 f3       	add %d3,%d15
8000d8c4:	80 6f       	mov.d %d15,%a6
8000d8c6:	8f 03 1f 70 	sh %d7,%d3,-16
8000d8ca:	7f 4f 04 80 	jge.u %d15,%d4,8000d8d2 <__multiply+0xf6>
8000d8ce:	40 74       	mov.aa %a4,%a7
8000d8d0:	3c e2       	j 8000d894 <__multiply+0xb8>
8000d8d2:	59 43 04 00 	st.w [%a4]4,%d3
8000d8d6:	b0 4c       	add.a %a12,4
8000d8d8:	b0 43       	add.a %a3,4
8000d8da:	3c ac       	j 8000d832 <__multiply+0x56>
8000d8dc:	8b 08 40 f3 	max %d15,%d8,0
8000d8e0:	9f 0f 05 80 	jned %d15,0,8000d8ea <__multiply+0x10e>
8000d8e4:	59 28 10 00 	st.w [%a2]16,%d8
8000d8e8:	00 90       	ret 
8000d8ea:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000d8ee:	df 02 fb ff 	jne %d2,0,8000d8e4 <__multiply+0x108>
8000d8f2:	c2 f8       	add %d8,-1
8000d8f4:	3c f6       	j 8000d8e0 <__multiply+0x104>

8000d8f6 <__pow5mult>:
8000d8f6:	8f 34 00 21 	and %d2,%d4,3
8000d8fa:	40 4c       	mov.aa %a12,%a4
8000d8fc:	40 5d       	mov.aa %a13,%a5
8000d8fe:	02 4f       	mov %d15,%d4
8000d900:	76 2d       	jz %d2,8000d91a <__pow5mult+0x24>
8000d902:	91 00 00 f8 	movh.a %a15,32768
8000d906:	d9 ff d4 c0 	lea %a15,[%a15]3860 <80000f14 <p05.2553>>
8000d90a:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000d90e:	82 05       	mov %d5,0
8000d910:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000d914:	6d ff c7 fe 	call 8000d6a2 <__multadd>
8000d918:	40 2d       	mov.aa %a13,%a2
8000d91a:	86 ef       	sha %d15,-2
8000d91c:	6e 29       	jz %d15,8000d96e <__pow5mult+0x78>
8000d91e:	99 cf 08 10 	ld.a %a15,[%a12]72
8000d922:	7c fb       	jnz.a %a15,8000d938 <__pow5mult+0x42>
8000d924:	40 c4       	mov.aa %a4,%a12
8000d926:	3b 10 27 40 	mov %d4,625
8000d92a:	6d ff 51 ff 	call 8000d7cc <__i2b>
8000d92e:	82 02       	mov %d2,0
8000d930:	b5 c2 08 10 	st.a [%a12]72,%a2
8000d934:	40 2f       	mov.aa %a15,%a2
8000d936:	74 22       	st.w [%a2],%d2
8000d938:	82 08       	mov %d8,0
8000d93a:	2e 0c       	jz.t %d15,0,8000d952 <__pow5mult+0x5c>
8000d93c:	40 d5       	mov.aa %a5,%a13
8000d93e:	40 c4       	mov.aa %a4,%a12
8000d940:	40 f6       	mov.aa %a6,%a15
8000d942:	6d ff 4d ff 	call 8000d7dc <__multiply>
8000d946:	40 d5       	mov.aa %a5,%a13
8000d948:	40 2e       	mov.aa %a14,%a2
8000d94a:	40 c4       	mov.aa %a4,%a12
8000d94c:	6d ff a2 fe 	call 8000d690 <_Bfree>
8000d950:	40 ed       	mov.aa %a13,%a14
8000d952:	86 ff       	sha %d15,-1
8000d954:	6e 0d       	jz %d15,8000d96e <__pow5mult+0x78>
8000d956:	c8 02       	ld.a %a2,[%a15]0
8000d958:	bc 23       	jz.a %a2,8000d95e <__pow5mult+0x68>
8000d95a:	40 2f       	mov.aa %a15,%a2
8000d95c:	3c ef       	j 8000d93a <__pow5mult+0x44>
8000d95e:	40 c4       	mov.aa %a4,%a12
8000d960:	40 f5       	mov.aa %a5,%a15
8000d962:	40 f6       	mov.aa %a6,%a15
8000d964:	6d ff 3c ff 	call 8000d7dc <__multiply>
8000d968:	e8 02       	st.a [%a15]0,%a2
8000d96a:	74 28       	st.w [%a2],%d8
8000d96c:	3c f7       	j 8000d95a <__pow5mult+0x64>
8000d96e:	40 d2       	mov.aa %a2,%a13
8000d970:	00 90       	ret 

8000d972 <__lshift>:
8000d972:	19 5b 10 00 	ld.w %d11,[%a5]16
8000d976:	8f b4 3f 80 	sha %d8,%d4,-5
8000d97a:	02 4a       	mov %d10,%d4
8000d97c:	42 8b       	add %d11,%d8
8000d97e:	19 54 04 00 	ld.w %d4,[%a5]4
8000d982:	4c 52       	ld.w %d15,[%a5]8
8000d984:	40 4e       	mov.aa %a14,%a4
8000d986:	40 5c       	mov.aa %a12,%a5
8000d988:	1b 1b 00 90 	addi %d9,%d11,1
8000d98c:	7f 9f 05 00 	jge %d15,%d9,8000d996 <__lshift+0x24>
8000d990:	c2 14       	add %d4,1
8000d992:	06 1f       	sh %d15,1
8000d994:	3c fc       	j 8000d98c <__lshift+0x1a>
8000d996:	40 e4       	mov.aa %a4,%a14
8000d998:	6d ff 51 fe 	call 8000d63a <_Balloc>
8000d99c:	8b 08 40 f3 	max %d15,%d8,0
8000d9a0:	40 2d       	mov.aa %a13,%a2
8000d9a2:	d9 2f 14 00 	lea %a15,[%a2]20
8000d9a6:	d2 02       	mov %e2,0
8000d9a8:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000d9ac:	9f 0f 03 80 	jned %d15,0,8000d9b2 <__lshift+0x40>
8000d9b0:	3c 04       	j 8000d9b8 <__lshift+0x46>
8000d9b2:	74 23       	st.w [%a2],%d3
8000d9b4:	c2 12       	add %d2,1
8000d9b6:	3c f9       	j 8000d9a8 <__lshift+0x36>
8000d9b8:	8b 08 40 83 	max %d8,%d8,0
8000d9bc:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000d9c0:	d9 cf 14 00 	lea %a15,[%a12]20
8000d9c4:	19 c2 10 00 	ld.w %d2,[%a12]16
8000d9c8:	80 f3       	mov.d %d3,%a15
8000d9ca:	8f fa 01 41 	and %d4,%d10,31
8000d9ce:	13 42 20 23 	madd %d2,%d3,%d2,4
8000d9d2:	8b 04 02 51 	rsub %d5,%d4,32
8000d9d6:	82 0f       	mov %d15,0
8000d9d8:	df 04 1a 00 	jeq %d4,0,8000da0c <__lshift+0x9a>
8000d9dc:	40 f5       	mov.aa %a5,%a15
8000d9de:	44 53       	ld.w %d3,[%a5+]
8000d9e0:	d9 32 04 00 	lea %a2,[%a3]4
8000d9e4:	0f 43 00 30 	sh %d3,%d3,%d4
8000d9e8:	a6 3f       	or %d15,%d3
8000d9ea:	6c 30       	st.w [%a3]0,%d15
8000d9ec:	4c f0       	ld.w %d15,[%a15]0
8000d9ee:	8b 05 00 31 	rsub %d3,%d5,0
8000d9f2:	0f 3f 00 30 	sh %d3,%d15,%d3
8000d9f6:	02 3f       	mov %d15,%d3
8000d9f8:	80 53       	mov.d %d3,%a5
8000d9fa:	40 5f       	mov.aa %a15,%a5
8000d9fc:	7f 23 04 80 	jge.u %d3,%d2,8000da04 <__lshift+0x92>
8000da00:	40 23       	mov.aa %a3,%a2
8000da02:	3c ed       	j 8000d9dc <__lshift+0x6a>
8000da04:	c2 2b       	add %d11,2
8000da06:	6c 31       	st.w [%a3]4,%d15
8000da08:	2a b9       	cmov %d9,%d15,%d11
8000da0a:	3c 08       	j 8000da1a <__lshift+0xa8>
8000da0c:	4c f0       	ld.w %d15,[%a15]0
8000da0e:	b0 4f       	add.a %a15,4
8000da10:	80 f3       	mov.d %d3,%a15
8000da12:	6c 30       	st.w [%a3]0,%d15
8000da14:	b0 43       	add.a %a3,4
8000da16:	3f 23 fb ff 	jlt.u %d3,%d2,8000da0c <__lshift+0x9a>
8000da1a:	c2 f9       	add %d9,-1
8000da1c:	59 d9 10 00 	st.w [%a13]16,%d9
8000da20:	40 e4       	mov.aa %a4,%a14
8000da22:	40 c5       	mov.aa %a5,%a12
8000da24:	6d ff 36 fe 	call 8000d690 <_Bfree>
8000da28:	40 d2       	mov.aa %a2,%a13
8000da2a:	00 90       	ret 

8000da2c <__mcmp>:
8000da2c:	4c 54       	ld.w %d15,[%a5]16
8000da2e:	19 42 10 00 	ld.w %d2,[%a4]16
8000da32:	a2 f2       	sub %d2,%d15
8000da34:	df 02 1c 80 	jne %d2,0,8000da6c <__mcmp+0x40>
8000da38:	80 42       	mov.d %d2,%a4
8000da3a:	06 2f       	sh %d15,2
8000da3c:	60 f2       	mov.a %a2,%d15
8000da3e:	1b 42 01 30 	addi %d3,%d2,20
8000da42:	d9 55 14 00 	lea %a5,[%a5]20
8000da46:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000da4a:	30 25       	add.a %a5,%a2
8000da4c:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000da50:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000da54:	5f f2 08 00 	jeq %d2,%d15,8000da64 <__mcmp+0x38>
8000da58:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000da5c:	82 f3       	mov %d3,-1
8000da5e:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000da62:	00 90       	ret 
8000da64:	80 ff       	mov.d %d15,%a15
8000da66:	3f f3 f3 ff 	jlt.u %d3,%d15,8000da4c <__mcmp+0x20>
8000da6a:	82 02       	mov %d2,0
8000da6c:	00 90       	ret 

8000da6e <__mdiff>:
8000da6e:	40 4d       	mov.aa %a13,%a4
8000da70:	40 5f       	mov.aa %a15,%a5
8000da72:	40 54       	mov.aa %a4,%a5
8000da74:	40 65       	mov.aa %a5,%a6
8000da76:	40 6c       	mov.aa %a12,%a6
8000da78:	6d ff da ff 	call 8000da2c <__mcmp>
8000da7c:	02 2f       	mov %d15,%d2
8000da7e:	f6 2a       	jnz %d2,8000da92 <__mdiff+0x24>
8000da80:	40 d4       	mov.aa %a4,%a13
8000da82:	82 04       	mov %d4,0
8000da84:	6d ff db fd 	call 8000d63a <_Balloc>
8000da88:	82 12       	mov %d2,1
8000da8a:	59 22 10 00 	st.w [%a2]16,%d2
8000da8e:	6c 25       	st.w [%a2]20,%d15
8000da90:	00 90       	ret 
8000da92:	82 08       	mov %d8,0
8000da94:	ce 25       	jgez %d2,8000da9e <__mdiff+0x30>
8000da96:	40 f2       	mov.aa %a2,%a15
8000da98:	82 18       	mov %d8,1
8000da9a:	40 cf       	mov.aa %a15,%a12
8000da9c:	40 2c       	mov.aa %a12,%a2
8000da9e:	40 d4       	mov.aa %a4,%a13
8000daa0:	48 14       	ld.w %d4,[%a15]4
8000daa2:	6d ff cc fd 	call 8000d63a <_Balloc>
8000daa6:	48 42       	ld.w %d2,[%a15]16
8000daa8:	d9 ff 14 00 	lea %a15,[%a15]20
8000daac:	80 ff       	mov.d %d15,%a15
8000daae:	d9 c4 14 00 	lea %a4,[%a12]20
8000dab2:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000dab6:	19 c0 10 00 	ld.w %d0,[%a12]16
8000daba:	80 4f       	mov.d %d15,%a4
8000dabc:	59 28 0c 00 	st.w [%a2]12,%d8
8000dac0:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000dac4:	d9 25 14 00 	lea %a5,[%a2]20
8000dac8:	82 03       	mov %d3,0
8000daca:	44 f6       	ld.w %d6,[%a15+]
8000dacc:	44 45       	ld.w %d5,[%a4+]
8000dace:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000dad2:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000dad6:	42 34       	add %d4,%d3
8000dad8:	a2 14       	sub %d4,%d1
8000dada:	8f 06 1f 60 	sh %d6,%d6,-16
8000dade:	8f 05 1f 50 	sh %d5,%d5,-16
8000dae2:	8f 04 3f 30 	sha %d3,%d4,-16
8000dae6:	0b 56 80 50 	sub %d5,%d6,%d5
8000daea:	1a 35       	add %d15,%d5,%d3
8000daec:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000daf0:	8f 0f 3f 30 	sha %d3,%d15,-16
8000daf4:	80 4f       	mov.d %d15,%a4
8000daf6:	d9 53 04 00 	lea %a3,[%a5]4
8000dafa:	74 54       	st.w [%a5],%d4
8000dafc:	40 35       	mov.aa %a5,%a3
8000dafe:	3f 0f e6 ff 	jlt.u %d15,%d0,8000daca <__mdiff+0x5c>
8000db02:	80 ff       	mov.d %d15,%a15
8000db04:	7f 7f 12 80 	jge.u %d15,%d7,8000db28 <__mdiff+0xba>
8000db08:	44 f5       	ld.w %d5,[%a15+]
8000db0a:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000db0e:	8f 05 1f 50 	sh %d5,%d5,-16
8000db12:	42 34       	add %d4,%d3
8000db14:	8f 04 3f f0 	sha %d15,%d4,-16
8000db18:	42 5f       	add %d15,%d5
8000db1a:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000db1e:	8f 0f 3f 30 	sha %d3,%d15,-16
8000db22:	74 34       	st.w [%a3],%d4
8000db24:	b0 43       	add.a %a3,4
8000db26:	3c ee       	j 8000db02 <__mdiff+0x94>
8000db28:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000db2c:	ee 03       	jnz %d15,8000db32 <__mdiff+0xc4>
8000db2e:	c2 f2       	add %d2,-1
8000db30:	3c fc       	j 8000db28 <__mdiff+0xba>
8000db32:	59 22 10 00 	st.w [%a2]16,%d2
8000db36:	00 90       	ret 

8000db38 <__d2b>:
8000db38:	20 08       	sub.a %sp,8
8000db3a:	02 48       	mov %d8,%d4
8000db3c:	82 14       	mov %d4,1
8000db3e:	02 59       	mov %d9,%d5
8000db40:	40 5d       	mov.aa %a13,%a5
8000db42:	40 6c       	mov.aa %a12,%a6
8000db44:	6d ff 7b fd 	call 8000d63a <_Balloc>
8000db48:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000db4c:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000db50:	40 2f       	mov.aa %a15,%a2
8000db52:	76 93       	jz %d9,8000db58 <__d2b+0x20>
8000db54:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000db58:	59 a2 04 00 	st.w [%sp]4,%d2
8000db5c:	df 08 20 00 	jeq %d8,0,8000db9c <__d2b+0x64>
8000db60:	d9 a4 08 00 	lea %a4,[%sp]8
8000db64:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000db68:	40 a4       	mov.aa %a4,%sp
8000db6a:	6d ff fe fd 	call 8000d766 <__lo0bits>
8000db6e:	58 00       	ld.w %d15,[%sp]0
8000db70:	76 2f       	jz %d2,8000db8e <__d2b+0x56>
8000db72:	19 a4 04 00 	ld.w %d4,[%sp]4
8000db76:	8b 02 02 31 	rsub %d3,%d2,32
8000db7a:	0f 34 00 30 	sh %d3,%d4,%d3
8000db7e:	a6 3f       	or %d15,%d3
8000db80:	68 5f       	st.w [%a15]20,%d15
8000db82:	8b 02 00 f1 	rsub %d15,%d2,0
8000db86:	0f f4 00 f0 	sh %d15,%d4,%d15
8000db8a:	78 01       	st.w [%sp]4,%d15
8000db8c:	3c 02       	j 8000db90 <__d2b+0x58>
8000db8e:	68 5f       	st.w [%a15]20,%d15
8000db90:	58 01       	ld.w %d15,[%sp]4
8000db92:	82 28       	mov %d8,2
8000db94:	ea 18       	cmovn %d8,%d15,1
8000db96:	68 6f       	st.w [%a15]24,%d15
8000db98:	68 48       	st.w [%a15]16,%d8
8000db9a:	3c 0c       	j 8000dbb2 <__d2b+0x7a>
8000db9c:	d9 a4 04 00 	lea %a4,[%sp]4
8000dba0:	6d ff e3 fd 	call 8000d766 <__lo0bits>
8000dba4:	58 01       	ld.w %d15,[%sp]4
8000dba6:	1b 02 02 20 	addi %d2,%d2,32
8000dbaa:	68 5f       	st.w [%a15]20,%d15
8000dbac:	82 1f       	mov %d15,1
8000dbae:	68 4f       	st.w [%a15]16,%d15
8000dbb0:	82 18       	mov %d8,1
8000dbb2:	76 98       	jz %d9,8000dbc2 <__d2b+0x8a>
8000dbb4:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000dbb8:	42 29       	add %d9,%d2
8000dbba:	74 d9       	st.w [%a13],%d9
8000dbbc:	8b 52 03 21 	rsub %d2,%d2,53
8000dbc0:	3c 0d       	j 8000dbda <__d2b+0xa2>
8000dbc2:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000dbc6:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000dbca:	74 d2       	st.w [%a13],%d2
8000dbcc:	19 24 10 00 	ld.w %d4,[%a2]16
8000dbd0:	6d ff aa fd 	call 8000d724 <__hi0bits>
8000dbd4:	06 58       	sh %d8,5
8000dbd6:	0b 28 80 20 	sub %d2,%d8,%d2
8000dbda:	74 c2       	st.w [%a12],%d2
8000dbdc:	40 f2       	mov.aa %a2,%a15
8000dbde:	00 90       	ret 

8000dbe0 <__fpclassifyd>:
8000dbe0:	0f 45 a0 f0 	or %d15,%d5,%d4
8000dbe4:	82 22       	mov %d2,2
8000dbe6:	6e 1d       	jz %d15,8000dc20 <__fpclassifyd+0x40>
8000dbe8:	7b 00 00 38 	movh %d3,32768
8000dbec:	3a 53       	eq %d15,%d3,%d5
8000dbee:	8b 04 00 f4 	and.eq %d15,%d4,0
8000dbf2:	8b 04 00 62 	eq %d6,%d4,0
8000dbf6:	ee 15       	jnz %d15,8000dc20 <__fpclassifyd+0x40>
8000dbf8:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000dbfc:	7b 00 fe f7 	movh %d15,32736
8000dc00:	9b 05 ff 3f 	addih %d3,%d5,65520
8000dc04:	82 42       	mov %d2,4
8000dc06:	3f f3 0d 80 	jlt.u %d3,%d15,8000dc20 <__fpclassifyd+0x40>
8000dc0a:	7b 00 01 f0 	movh %d15,16
8000dc0e:	82 32       	mov %d2,3
8000dc10:	3f f5 08 80 	jlt.u %d5,%d15,8000dc20 <__fpclassifyd+0x40>
8000dc14:	7b 00 ff 27 	movh %d2,32752
8000dc18:	0b 25 00 51 	eq %d5,%d5,%d2
8000dc1c:	0f 56 80 20 	and %d2,%d6,%d5
8000dc20:	00 90       	ret 

8000dc22 <__ssprint_r>:
8000dc22:	4c 62       	ld.w %d15,[%a6]8
8000dc24:	20 08       	sub.a %sp,8
8000dc26:	40 4e       	mov.aa %a14,%a4
8000dc28:	40 5f       	mov.aa %a15,%a5
8000dc2a:	40 6c       	mov.aa %a12,%a6
8000dc2c:	54 6c       	ld.w %d12,[%a6]
8000dc2e:	6e 30       	jz %d15,8000dc8e <__ssprint_r+0x6c>
8000dc30:	a0 02       	mov.a %a2,0
8000dc32:	b5 a2 04 00 	st.a [%sp]4,%a2
8000dc36:	82 09       	mov %d9,0
8000dc38:	3b 00 48 e0 	mov %d14,1152
8000dc3c:	3b f0 b7 df 	mov %d13,-1153
8000dc40:	3c 0a       	j 8000dc54 <__ssprint_r+0x32>
8000dc42:	60 c2       	mov.a %a2,%d12
8000dc44:	d4 22       	ld.a %a2,[%a2]
8000dc46:	b5 a2 04 00 	st.a [%sp]4,%a2
8000dc4a:	60 c2       	mov.a %a2,%d12
8000dc4c:	1b 8c 00 c0 	addi %d12,%d12,8
8000dc50:	19 29 04 00 	ld.w %d9,[%a2]4
8000dc54:	df 09 f7 7f 	jeq %d9,0,8000dc42 <__ssprint_r+0x20>
8000dc58:	48 28       	ld.w %d8,[%a15]8
8000dc5a:	3f 89 5a 80 	jlt.u %d9,%d8,8000dd0e <__ssprint_r+0xec>
8000dc5e:	88 62       	ld.h %d2,[%a15]12
8000dc60:	0f e2 80 f0 	and %d15,%d2,%d14
8000dc64:	ee 19       	jnz %d15,8000dc96 <__ssprint_r+0x74>
8000dc66:	3f 89 54 80 	jlt.u %d9,%d8,8000dd0e <__ssprint_r+0xec>
8000dc6a:	c8 04       	ld.a %a4,[%a15]0
8000dc6c:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000dc70:	02 84       	mov %d4,%d8
8000dc72:	6d 00 81 00 	call 8000dd74 <memmove>
8000dc76:	4c f2       	ld.w %d15,[%a15]8
8000dc78:	a2 8f       	sub %d15,%d8
8000dc7a:	68 2f       	st.w [%a15]8,%d15
8000dc7c:	4c f0       	ld.w %d15,[%a15]0
8000dc7e:	42 f8       	add %d8,%d15
8000dc80:	4c c2       	ld.w %d15,[%a12]8
8000dc82:	68 08       	st.w [%a15]0,%d8
8000dc84:	52 99       	sub %d9,%d15,%d9
8000dc86:	59 c9 08 00 	st.w [%a12]8,%d9
8000dc8a:	df 09 dc ff 	jne %d9,0,8000dc42 <__ssprint_r+0x20>
8000dc8e:	82 0f       	mov %d15,0
8000dc90:	6c c1       	st.w [%a12]4,%d15
8000dc92:	82 02       	mov %d2,0
8000dc94:	00 90       	ret 
8000dc96:	c8 45       	ld.a %a5,[%a15]16
8000dc98:	48 5a       	ld.w %d10,[%a15]20
8000dc9a:	4c f0       	ld.w %d15,[%a15]0
8000dc9c:	80 53       	mov.d %d3,%a5
8000dc9e:	53 3a 20 a0 	mul %d10,%d10,3
8000dca2:	a2 3f       	sub %d15,%d3
8000dca4:	82 23       	mov %d3,2
8000dca6:	4b 3a 01 a2 	div %e10,%d10,%d3
8000dcaa:	92 13       	add %d3,%d15,1
8000dcac:	42 93       	add %d3,%d9
8000dcae:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000dcb2:	40 e4       	mov.aa %a4,%a14
8000dcb4:	02 a4       	mov %d4,%d10
8000dcb6:	6f a2 12 00 	jz.t %d2,10,8000dcda <__ssprint_r+0xb8>
8000dcba:	6d ff 0c e9 	call 8000aed2 <_malloc_r>
8000dcbe:	40 2d       	mov.aa %a13,%a2
8000dcc0:	bd 02 15 00 	jz.a %a2,8000dcea <__ssprint_r+0xc8>
8000dcc4:	c8 45       	ld.a %a5,[%a15]16
8000dcc6:	40 24       	mov.aa %a4,%a2
8000dcc8:	02 f4       	mov %d4,%d15
8000dcca:	6d ff aa fc 	call 8000d61e <memcpy>
8000dcce:	88 62       	ld.h %d2,[%a15]12
8000dcd0:	26 d2       	and %d2,%d13
8000dcd2:	8f 02 48 21 	or %d2,%d2,128
8000dcd6:	a8 62       	st.h [%a15]12,%d2
8000dcd8:	3c 13       	j 8000dcfe <__ssprint_r+0xdc>
8000dcda:	6d 00 7d 00 	call 8000ddd4 <_realloc_r>
8000dcde:	40 2d       	mov.aa %a13,%a2
8000dce0:	7c 2f       	jnz.a %a2,8000dcfe <__ssprint_r+0xdc>
8000dce2:	c8 45       	ld.a %a5,[%a15]16
8000dce4:	40 e4       	mov.aa %a4,%a14
8000dce6:	6d ff eb eb 	call 8000b4bc <_free_r>
8000dcea:	da 0c       	mov %d15,12
8000dcec:	6c e0       	st.w [%a14]0,%d15
8000dcee:	8c f6       	ld.h %d15,[%a15]12
8000dcf0:	82 f2       	mov %d2,-1
8000dcf2:	96 40       	or %d15,64
8000dcf4:	a8 6f       	st.h [%a15]12,%d15
8000dcf6:	82 0f       	mov %d15,0
8000dcf8:	6c c2       	st.w [%a12]8,%d15
8000dcfa:	6c c1       	st.w [%a12]4,%d15
8000dcfc:	00 90       	ret 
8000dcfe:	e8 4d       	st.a [%a15]16,%a13
8000dd00:	10 dd       	addsc.a %a13,%a13,%d15,0
8000dd02:	68 5a       	st.w [%a15]20,%d10
8000dd04:	a2 fa       	sub %d10,%d15
8000dd06:	e8 0d       	st.a [%a15]0,%a13
8000dd08:	02 98       	mov %d8,%d9
8000dd0a:	68 2a       	st.w [%a15]8,%d10
8000dd0c:	3c ad       	j 8000dc66 <__ssprint_r+0x44>
8000dd0e:	02 98       	mov %d8,%d9
8000dd10:	3c ad       	j 8000dc6a <__ssprint_r+0x48>

8000dd12 <_calloc_r>:
8000dd12:	e2 54       	mul %d4,%d5
8000dd14:	6d ff df e8 	call 8000aed2 <_malloc_r>
8000dd18:	40 2f       	mov.aa %a15,%a2
8000dd1a:	a0 02       	mov.a %a2,0
8000dd1c:	bd 0f 2b 00 	jz.a %a15,8000dd72 <_calloc_r+0x60>
8000dd20:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000dd24:	8f 35 c0 51 	andn %d5,%d5,3
8000dd28:	c2 c5       	add %d5,-4
8000dd2a:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000dd2e:	ee 1d       	jnz %d15,8000dd68 <_calloc_r+0x56>
8000dd30:	8b 45 61 f2 	lt.u %d15,%d5,20
8000dd34:	40 f2       	mov.aa %a2,%a15
8000dd36:	ee 14       	jnz %d15,8000dd5e <_calloc_r+0x4c>
8000dd38:	82 0f       	mov %d15,0
8000dd3a:	68 0f       	st.w [%a15]0,%d15
8000dd3c:	68 1f       	st.w [%a15]4,%d15
8000dd3e:	8b c5 a1 22 	ge.u %d2,%d5,28
8000dd42:	d9 f2 08 00 	lea %a2,[%a15]8
8000dd46:	76 2c       	jz %d2,8000dd5e <_calloc_r+0x4c>
8000dd48:	68 2f       	st.w [%a15]8,%d15
8000dd4a:	68 3f       	st.w [%a15]12,%d15
8000dd4c:	8b 45 02 52 	eq %d5,%d5,36
8000dd50:	d9 f2 10 00 	lea %a2,[%a15]16
8000dd54:	76 55       	jz %d5,8000dd5e <_calloc_r+0x4c>
8000dd56:	68 4f       	st.w [%a15]16,%d15
8000dd58:	d9 f2 18 00 	lea %a2,[%a15]24
8000dd5c:	68 5f       	st.w [%a15]20,%d15
8000dd5e:	82 0f       	mov %d15,0
8000dd60:	6c 20       	st.w [%a2]0,%d15
8000dd62:	6c 21       	st.w [%a2]4,%d15
8000dd64:	6c 22       	st.w [%a2]8,%d15
8000dd66:	3c 05       	j 8000dd70 <_calloc_r+0x5e>
8000dd68:	40 f4       	mov.aa %a4,%a15
8000dd6a:	82 04       	mov %d4,0
8000dd6c:	6d 00 2c 00 	call 8000ddc4 <memset>
8000dd70:	40 f2       	mov.aa %a2,%a15
8000dd72:	00 90       	ret 

8000dd74 <memmove>:
8000dd74:	80 46       	mov.d %d6,%a4
8000dd76:	80 52       	mov.d %d2,%a5
8000dd78:	7f 62 16 80 	jge.u %d2,%d6,8000dda4 <memmove+0x30>
8000dd7c:	0b 42 00 50 	add %d5,%d2,%d4
8000dd80:	7f 56 12 80 	jge.u %d6,%d5,8000dda4 <memmove+0x30>
8000dd84:	60 4f       	mov.a %a15,%d4
8000dd86:	02 42       	mov %d2,%d4
8000dd88:	c2 f2       	add %d2,-1
8000dd8a:	fd f0 03 00 	loop %a15,8000dd90 <memmove+0x1c>
8000dd8e:	3c 19       	j 8000ddc0 <memmove+0x4c>
8000dd90:	5a 42       	sub %d15,%d2,%d4
8000dd92:	60 f2       	mov.a %a2,%d15
8000dd94:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000dd98:	1a 62       	add %d15,%d2,%d6
8000dd9a:	79 23 00 00 	ld.b %d3,[%a2]0
8000dd9e:	60 f2       	mov.a %a2,%d15
8000dda0:	34 23       	st.b [%a2],%d3
8000dda2:	3c f3       	j 8000dd88 <memmove+0x14>
8000dda4:	60 4f       	mov.a %a15,%d4
8000dda6:	a0 02       	mov.a %a2,0
8000dda8:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000ddac:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000ddb0:	fd f0 03 00 	loop %a15,8000ddb6 <memmove+0x42>
8000ddb4:	3c 06       	j 8000ddc0 <memmove+0x4c>
8000ddb6:	79 33 00 00 	ld.b %d3,[%a3]0
8000ddba:	b0 12       	add.a %a2,1
8000ddbc:	34 43       	st.b [%a4],%d3
8000ddbe:	3c f5       	j 8000dda8 <memmove+0x34>
8000ddc0:	60 62       	mov.a %a2,%d6
8000ddc2:	00 90       	ret 

8000ddc4 <memset>:
8000ddc4:	40 42       	mov.aa %a2,%a4
8000ddc6:	40 4f       	mov.aa %a15,%a4
8000ddc8:	9f 05 03 80 	jned %d5,0,8000ddce <memset+0xa>
8000ddcc:	00 90       	ret 
8000ddce:	28 04       	st.b [%a15]0,%d4
8000ddd0:	b0 1f       	add.a %a15,1
8000ddd2:	3c fb       	j 8000ddc8 <memset+0x4>

8000ddd4 <_realloc_r>:
8000ddd4:	40 4d       	mov.aa %a13,%a4
8000ddd6:	40 5f       	mov.aa %a15,%a5
8000ddd8:	02 49       	mov %d9,%d4
8000ddda:	7c 53       	jnz.a %a5,8000dde0 <_realloc_r+0xc>
8000dddc:	1d ff 7b e8 	j 8000aed2 <_malloc_r>
8000dde0:	6d ff c6 ea 	call 8000b36c <__malloc_lock>
8000dde4:	1b b9 00 20 	addi %d2,%d9,11
8000dde8:	8b 72 61 f2 	lt.u %d15,%d2,23
8000ddec:	8f 72 c0 21 	andn %d2,%d2,7
8000ddf0:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000ddf4:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000ddf8:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000ddfc:	8b 0f 20 25 	or.lt %d2,%d15,0
8000de00:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000de04:	8f 33 c0 81 	andn %d8,%d3,3
8000de08:	76 25       	jz %d2,8000de12 <_realloc_r+0x3e>
8000de0a:	da 0c       	mov %d15,12
8000de0c:	6c d0       	st.w [%a13]0,%d15
8000de0e:	1d 00 56 01 	j 8000e0ba <_realloc_r+0x2e6>
8000de12:	7f f8 ac 01 	jge %d8,%d15,8000e16a <_realloc_r+0x396>
8000de16:	7b 00 00 c7 	movh %d12,28672
8000de1a:	60 c3       	mov.a %a3,%d12
8000de1c:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000de20:	d9 34 00 40 	lea %a4,[%a3]256
8000de24:	99 43 08 00 	ld.a %a3,[%a4]8
8000de28:	80 4c       	mov.d %d12,%a4
8000de2a:	19 2b 04 00 	ld.w %d11,[%a2]4
8000de2e:	7d 32 0a 00 	jeq.a %a2,%a3,8000de42 <_realloc_r+0x6e>
8000de32:	8f 1b c0 21 	andn %d2,%d11,1
8000de36:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000de3a:	19 42 04 00 	ld.w %d2,[%a4]4
8000de3e:	6f 02 2b 80 	jnz.t %d2,0,8000de94 <_realloc_r+0xc0>
8000de42:	8f 3b c0 b1 	andn %d11,%d11,3
8000de46:	0b 8b 00 20 	add %d2,%d11,%d8
8000de4a:	7d 32 1b 80 	jne.a %a2,%a3,8000de80 <_realloc_r+0xac>
8000de4e:	1b 0f 01 40 	addi %d4,%d15,16
8000de52:	3f 42 23 00 	jlt %d2,%d4,8000de98 <_realloc_r+0xc4>
8000de56:	10 ee       	addsc.a %a14,%a14,%d15,0
8000de58:	60 c2       	mov.a %a2,%d12
8000de5a:	a2 f2       	sub %d2,%d15
8000de5c:	b5 2e 08 00 	st.a [%a2]8,%a14
8000de60:	8f 12 40 21 	or %d2,%d2,1
8000de64:	59 e2 04 00 	st.w [%a14]4,%d2
8000de68:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000de6c:	40 d4       	mov.aa %a4,%a13
8000de6e:	8f 12 00 21 	and %d2,%d2,1
8000de72:	a6 2f       	or %d15,%d2
8000de74:	59 ff fc ff 	st.w [%a15]-4,%d15
8000de78:	6d ff 7b ea 	call 8000b36e <__malloc_unlock>
8000de7c:	40 f2       	mov.aa %a2,%a15
8000de7e:	00 90       	ret 
8000de80:	3f f2 0c 00 	jlt %d2,%d15,8000de98 <_realloc_r+0xc4>
8000de84:	cc 23       	ld.a %a15,[%a2]12
8000de86:	99 22 08 00 	ld.a %a2,[%a2]8
8000de8a:	02 28       	mov %d8,%d2
8000de8c:	ec 23       	st.a [%a2]12,%a15
8000de8e:	e8 22       	st.a [%a15]8,%a2
8000de90:	1d 00 6d 01 	j 8000e16a <_realloc_r+0x396>
8000de94:	82 0b       	mov %d11,0
8000de96:	a0 02       	mov.a %a2,0
8000de98:	6f 03 08 81 	jnz.t %d3,0,8000e0a8 <_realloc_r+0x2d4>
8000de9c:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000dea0:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000dea4:	19 ca 04 00 	ld.w %d10,[%a12]4
8000dea8:	8f 3a c0 a1 	andn %d10,%d10,3
8000deac:	42 8a       	add %d10,%d8
8000deae:	bd 02 b3 00 	jz.a %a2,8000e014 <_realloc_r+0x240>
8000deb2:	42 ab       	add %d11,%d10
8000deb4:	7d 32 5f 80 	jne.a %a2,%a3,8000df72 <_realloc_r+0x19e>
8000deb8:	1b 0f 01 20 	addi %d2,%d15,16
8000debc:	3f 2b ac 00 	jlt %d11,%d2,8000e014 <_realloc_r+0x240>
8000dec0:	40 ce       	mov.aa %a14,%a12
8000dec2:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000dec6:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000deca:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dece:	8b 54 a2 22 	ge.u %d2,%d4,37
8000ded2:	b5 32 0c 00 	st.a [%a3]12,%a2
8000ded6:	b5 23 08 00 	st.a [%a2]8,%a3
8000deda:	df 02 36 80 	jne %d2,0,8000df46 <_realloc_r+0x172>
8000dede:	8b 44 61 22 	lt.u %d2,%d4,20
8000dee2:	40 e3       	mov.aa %a3,%a14
8000dee4:	df 02 28 80 	jne %d2,0,8000df34 <_realloc_r+0x160>
8000dee8:	48 02       	ld.w %d2,[%a15]0
8000deea:	59 c2 08 00 	st.w [%a12]8,%d2
8000deee:	48 13       	ld.w %d3,[%a15]4
8000def0:	8b c4 a1 22 	ge.u %d2,%d4,28
8000def4:	59 c3 0c 00 	st.w [%a12]12,%d3
8000def8:	f6 26       	jnz %d2,8000df04 <_realloc_r+0x130>
8000defa:	d9 c3 10 00 	lea %a3,[%a12]16
8000defe:	d9 ff 08 00 	lea %a15,[%a15]8
8000df02:	3c 19       	j 8000df34 <_realloc_r+0x160>
8000df04:	48 22       	ld.w %d2,[%a15]8
8000df06:	8b 44 02 82 	eq %d8,%d4,36
8000df0a:	59 c2 10 00 	st.w [%a12]16,%d2
8000df0e:	48 33       	ld.w %d3,[%a15]12
8000df10:	59 c3 14 00 	st.w [%a12]20,%d3
8000df14:	f6 86       	jnz %d8,8000df20 <_realloc_r+0x14c>
8000df16:	d9 c3 18 00 	lea %a3,[%a12]24
8000df1a:	d9 ff 10 00 	lea %a15,[%a15]16
8000df1e:	3c 0b       	j 8000df34 <_realloc_r+0x160>
8000df20:	48 42       	ld.w %d2,[%a15]16
8000df22:	d9 c3 20 00 	lea %a3,[%a12]32
8000df26:	59 c2 18 00 	st.w [%a12]24,%d2
8000df2a:	48 53       	ld.w %d3,[%a15]20
8000df2c:	d9 ff 18 00 	lea %a15,[%a15]24
8000df30:	59 c3 1c 00 	st.w [%a12]28,%d3
8000df34:	48 02       	ld.w %d2,[%a15]0
8000df36:	74 32       	st.w [%a3],%d2
8000df38:	48 13       	ld.w %d3,[%a15]4
8000df3a:	59 33 04 00 	st.w [%a3]4,%d3
8000df3e:	48 22       	ld.w %d2,[%a15]8
8000df40:	59 32 08 00 	st.w [%a3]8,%d2
8000df44:	3c 05       	j 8000df4e <_realloc_r+0x17a>
8000df46:	40 e4       	mov.aa %a4,%a14
8000df48:	40 f5       	mov.aa %a5,%a15
8000df4a:	6d ff 15 ff 	call 8000dd74 <memmove>
8000df4e:	10 cf       	addsc.a %a15,%a12,%d15,0
8000df50:	60 c2       	mov.a %a2,%d12
8000df52:	a2 fb       	sub %d11,%d15
8000df54:	ec 22       	st.a [%a2]8,%a15
8000df56:	8f 1b 40 b1 	or %d11,%d11,1
8000df5a:	68 1b       	st.w [%a15]4,%d11
8000df5c:	19 c2 04 00 	ld.w %d2,[%a12]4
8000df60:	40 d4       	mov.aa %a4,%a13
8000df62:	8f 12 00 21 	and %d2,%d2,1
8000df66:	a6 2f       	or %d15,%d2
8000df68:	6c c1       	st.w [%a12]4,%d15
8000df6a:	6d ff 02 ea 	call 8000b36e <__malloc_unlock>
8000df6e:	40 e2       	mov.aa %a2,%a14
8000df70:	00 90       	ret 
8000df72:	3f fb 51 00 	jlt %d11,%d15,8000e014 <_realloc_r+0x240>
8000df76:	99 23 0c 00 	ld.a %a3,[%a2]12
8000df7a:	99 22 08 00 	ld.a %a2,[%a2]8
8000df7e:	40 c4       	mov.aa %a4,%a12
8000df80:	1b c8 ff 4f 	addi %d4,%d8,-4
8000df84:	b5 23 0c 00 	st.a [%a2]12,%a3
8000df88:	b5 32 08 00 	st.a [%a3]8,%a2
8000df8c:	09 43 88 05 	ld.a %a3,[+%a4]8
8000df90:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000df94:	8b 54 a2 22 	ge.u %d2,%d4,37
8000df98:	b5 32 0c 00 	st.a [%a3]12,%a2
8000df9c:	b5 23 08 00 	st.a [%a2]8,%a3
8000dfa0:	df 02 35 80 	jne %d2,0,8000e00a <_realloc_r+0x236>
8000dfa4:	8b 44 61 22 	lt.u %d2,%d4,20
8000dfa8:	df 02 28 80 	jne %d2,0,8000dff8 <_realloc_r+0x224>
8000dfac:	48 02       	ld.w %d2,[%a15]0
8000dfae:	59 c2 08 00 	st.w [%a12]8,%d2
8000dfb2:	48 13       	ld.w %d3,[%a15]4
8000dfb4:	8b c4 a1 22 	ge.u %d2,%d4,28
8000dfb8:	59 c3 0c 00 	st.w [%a12]12,%d3
8000dfbc:	f6 26       	jnz %d2,8000dfc8 <_realloc_r+0x1f4>
8000dfbe:	d9 c4 10 00 	lea %a4,[%a12]16
8000dfc2:	d9 ff 08 00 	lea %a15,[%a15]8
8000dfc6:	3c 19       	j 8000dff8 <_realloc_r+0x224>
8000dfc8:	48 22       	ld.w %d2,[%a15]8
8000dfca:	8b 44 02 82 	eq %d8,%d4,36
8000dfce:	59 c2 10 00 	st.w [%a12]16,%d2
8000dfd2:	48 33       	ld.w %d3,[%a15]12
8000dfd4:	59 c3 14 00 	st.w [%a12]20,%d3
8000dfd8:	f6 86       	jnz %d8,8000dfe4 <_realloc_r+0x210>
8000dfda:	d9 c4 18 00 	lea %a4,[%a12]24
8000dfde:	d9 ff 10 00 	lea %a15,[%a15]16
8000dfe2:	3c 0b       	j 8000dff8 <_realloc_r+0x224>
8000dfe4:	48 42       	ld.w %d2,[%a15]16
8000dfe6:	d9 c4 20 00 	lea %a4,[%a12]32
8000dfea:	59 c2 18 00 	st.w [%a12]24,%d2
8000dfee:	48 53       	ld.w %d3,[%a15]20
8000dff0:	d9 ff 18 00 	lea %a15,[%a15]24
8000dff4:	59 c3 1c 00 	st.w [%a12]28,%d3
8000dff8:	48 02       	ld.w %d2,[%a15]0
8000dffa:	74 42       	st.w [%a4],%d2
8000dffc:	48 13       	ld.w %d3,[%a15]4
8000dffe:	59 43 04 00 	st.w [%a4]4,%d3
8000e002:	48 22       	ld.w %d2,[%a15]8
8000e004:	59 42 08 00 	st.w [%a4]8,%d2
8000e008:	3c 04       	j 8000e010 <_realloc_r+0x23c>
8000e00a:	40 f5       	mov.aa %a5,%a15
8000e00c:	6d ff b4 fe 	call 8000dd74 <memmove>
8000e010:	02 b8       	mov %d8,%d11
8000e012:	3c 45       	j 8000e09c <_realloc_r+0x2c8>
8000e014:	3f fa 4a 00 	jlt %d10,%d15,8000e0a8 <_realloc_r+0x2d4>
8000e018:	40 c4       	mov.aa %a4,%a12
8000e01a:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e01e:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e022:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e026:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e02a:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e02e:	b5 23 08 00 	st.a [%a2]8,%a3
8000e032:	df 02 37 80 	jne %d2,0,8000e0a0 <_realloc_r+0x2cc>
8000e036:	8b 44 61 22 	lt.u %d2,%d4,20
8000e03a:	df 02 28 80 	jne %d2,0,8000e08a <_realloc_r+0x2b6>
8000e03e:	48 03       	ld.w %d3,[%a15]0
8000e040:	59 c3 08 00 	st.w [%a12]8,%d3
8000e044:	48 12       	ld.w %d2,[%a15]4
8000e046:	59 c2 0c 00 	st.w [%a12]12,%d2
8000e04a:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e04e:	f6 26       	jnz %d2,8000e05a <_realloc_r+0x286>
8000e050:	d9 c4 10 00 	lea %a4,[%a12]16
8000e054:	d9 ff 08 00 	lea %a15,[%a15]8
8000e058:	3c 19       	j 8000e08a <_realloc_r+0x2b6>
8000e05a:	48 23       	ld.w %d3,[%a15]8
8000e05c:	8b 44 02 82 	eq %d8,%d4,36
8000e060:	59 c3 10 00 	st.w [%a12]16,%d3
8000e064:	48 32       	ld.w %d2,[%a15]12
8000e066:	59 c2 14 00 	st.w [%a12]20,%d2
8000e06a:	f6 86       	jnz %d8,8000e076 <_realloc_r+0x2a2>
8000e06c:	d9 c4 18 00 	lea %a4,[%a12]24
8000e070:	d9 ff 10 00 	lea %a15,[%a15]16
8000e074:	3c 0b       	j 8000e08a <_realloc_r+0x2b6>
8000e076:	48 43       	ld.w %d3,[%a15]16
8000e078:	d9 c4 20 00 	lea %a4,[%a12]32
8000e07c:	59 c3 18 00 	st.w [%a12]24,%d3
8000e080:	48 52       	ld.w %d2,[%a15]20
8000e082:	d9 ff 18 00 	lea %a15,[%a15]24
8000e086:	59 c2 1c 00 	st.w [%a12]28,%d2
8000e08a:	48 03       	ld.w %d3,[%a15]0
8000e08c:	74 43       	st.w [%a4],%d3
8000e08e:	48 12       	ld.w %d2,[%a15]4
8000e090:	59 42 04 00 	st.w [%a4]4,%d2
8000e094:	48 23       	ld.w %d3,[%a15]8
8000e096:	59 43 08 00 	st.w [%a4]8,%d3
8000e09a:	02 a8       	mov %d8,%d10
8000e09c:	40 ce       	mov.aa %a14,%a12
8000e09e:	3c 66       	j 8000e16a <_realloc_r+0x396>
8000e0a0:	40 f5       	mov.aa %a5,%a15
8000e0a2:	6d ff 69 fe 	call 8000dd74 <memmove>
8000e0a6:	3c fa       	j 8000e09a <_realloc_r+0x2c6>
8000e0a8:	40 d4       	mov.aa %a4,%a13
8000e0aa:	02 94       	mov %d4,%d9
8000e0ac:	6d ff 13 e7 	call 8000aed2 <_malloc_r>
8000e0b0:	40 2c       	mov.aa %a12,%a2
8000e0b2:	7c 26       	jnz.a %a2,8000e0be <_realloc_r+0x2ea>
8000e0b4:	40 d4       	mov.aa %a4,%a13
8000e0b6:	6d ff 5c e9 	call 8000b36e <__malloc_unlock>
8000e0ba:	a0 02       	mov.a %a2,0
8000e0bc:	00 90       	ret 
8000e0be:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e0c2:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000e0c6:	8f 12 c0 21 	andn %d2,%d2,1
8000e0ca:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000e0ce:	80 32       	mov.d %d2,%a3
8000e0d0:	80 23       	mov.d %d3,%a2
8000e0d2:	5f 32 08 80 	jne %d2,%d3,8000e0e2 <_realloc_r+0x30e>
8000e0d6:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e0da:	8f 32 c0 21 	andn %d2,%d2,3
8000e0de:	42 28       	add %d8,%d2
8000e0e0:	3c 45       	j 8000e16a <_realloc_r+0x396>
8000e0e2:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e0e6:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000e0ea:	ee 33       	jnz %d15,8000e150 <_realloc_r+0x37c>
8000e0ec:	8b 44 61 f2 	lt.u %d15,%d4,20
8000e0f0:	40 c3       	mov.aa %a3,%a12
8000e0f2:	40 f2       	mov.aa %a2,%a15
8000e0f4:	ee 23       	jnz %d15,8000e13a <_realloc_r+0x366>
8000e0f6:	4c f0       	ld.w %d15,[%a15]0
8000e0f8:	d9 c3 08 00 	lea %a3,[%a12]8
8000e0fc:	6c c0       	st.w [%a12]0,%d15
8000e0fe:	48 12       	ld.w %d2,[%a15]4
8000e100:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000e104:	59 c2 04 00 	st.w [%a12]4,%d2
8000e108:	d9 f2 08 00 	lea %a2,[%a15]8
8000e10c:	6e 17       	jz %d15,8000e13a <_realloc_r+0x366>
8000e10e:	48 23       	ld.w %d3,[%a15]8
8000e110:	8b 44 02 82 	eq %d8,%d4,36
8000e114:	59 c3 08 00 	st.w [%a12]8,%d3
8000e118:	4c f3       	ld.w %d15,[%a15]12
8000e11a:	d9 c3 10 00 	lea %a3,[%a12]16
8000e11e:	6c c3       	st.w [%a12]12,%d15
8000e120:	d9 f2 10 00 	lea %a2,[%a15]16
8000e124:	76 8b       	jz %d8,8000e13a <_realloc_r+0x366>
8000e126:	48 42       	ld.w %d2,[%a15]16
8000e128:	d9 c3 18 00 	lea %a3,[%a12]24
8000e12c:	59 c2 10 00 	st.w [%a12]16,%d2
8000e130:	48 53       	ld.w %d3,[%a15]20
8000e132:	d9 f2 18 00 	lea %a2,[%a15]24
8000e136:	59 c3 14 00 	st.w [%a12]20,%d3
8000e13a:	4c 20       	ld.w %d15,[%a2]0
8000e13c:	6c 30       	st.w [%a3]0,%d15
8000e13e:	19 22 04 00 	ld.w %d2,[%a2]4
8000e142:	59 32 04 00 	st.w [%a3]4,%d2
8000e146:	19 23 08 00 	ld.w %d3,[%a2]8
8000e14a:	59 33 08 00 	st.w [%a3]8,%d3
8000e14e:	3c 05       	j 8000e158 <_realloc_r+0x384>
8000e150:	40 c4       	mov.aa %a4,%a12
8000e152:	40 f5       	mov.aa %a5,%a15
8000e154:	6d ff 10 fe 	call 8000dd74 <memmove>
8000e158:	40 d4       	mov.aa %a4,%a13
8000e15a:	40 f5       	mov.aa %a5,%a15
8000e15c:	6d ff b0 e9 	call 8000b4bc <_free_r>
8000e160:	40 d4       	mov.aa %a4,%a13
8000e162:	6d ff 06 e9 	call 8000b36e <__malloc_unlock>
8000e166:	40 c2       	mov.aa %a2,%a12
8000e168:	00 90       	ret 
8000e16a:	0b f8 80 20 	sub %d2,%d8,%d15
8000e16e:	8b 02 61 42 	lt.u %d4,%d2,16
8000e172:	19 e3 04 00 	ld.w %d3,[%a14]4
8000e176:	df 04 16 80 	jne %d4,0,8000e1a2 <_realloc_r+0x3ce>
8000e17a:	8f 13 00 31 	and %d3,%d3,1
8000e17e:	10 e5       	addsc.a %a5,%a14,%d15,0
8000e180:	a6 3f       	or %d15,%d3
8000e182:	6c e1       	st.w [%a14]4,%d15
8000e184:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000e188:	8f 12 40 f1 	or %d15,%d2,1
8000e18c:	b7 10 21 20 	imask %e2,1,0,1
8000e190:	6c 51       	st.w [%a5]4,%d15
8000e192:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e196:	40 d4       	mov.aa %a4,%a13
8000e198:	d9 55 08 00 	lea %a5,[%a5]8
8000e19c:	6d ff 90 e9 	call 8000b4bc <_free_r>
8000e1a0:	3c 0c       	j 8000e1b8 <_realloc_r+0x3e4>
8000e1a2:	8f 13 00 31 	and %d3,%d3,1
8000e1a6:	a6 83       	or %d3,%d8
8000e1a8:	59 e3 04 00 	st.w [%a14]4,%d3
8000e1ac:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000e1b0:	b7 10 21 20 	imask %e2,1,0,1
8000e1b4:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e1b8:	40 d4       	mov.aa %a4,%a13
8000e1ba:	6d ff da e8 	call 8000b36e <__malloc_unlock>
8000e1be:	d9 e2 08 00 	lea %a2,[%a14]8
8000e1c2:	00 90       	ret 

8000e1c4 <_exit>:
8000e1c4:	76 43       	jz %d4,8000e1ca <_exit+0x6>
8000e1c6:	60 4e       	mov.a %a14,%d4
8000e1c8:	3c 04       	j 8000e1d0 <_exit+0xc>
8000e1ca:	bb d0 00 f9 	mov.u %d15,36877
8000e1ce:	60 fe       	mov.a %a14,%d15
8000e1d0:	00 a0       	debug 
8000e1d2:	3c 00       	j 8000e1d2 <_exit+0xe>

8000e1d4 <sbrk>:
8000e1d4:	91 00 00 f7 	movh.a %a15,28672
8000e1d8:	19 ff b0 40 	ld.w %d15,[%a15]2352 <70000930 <heap_top.2289>>
8000e1dc:	7b 00 00 27 	movh %d2,28672
8000e1e0:	42 f4       	add %d4,%d15
8000e1e2:	1b 82 c9 20 	addi %d2,%d2,3224
8000e1e6:	7f 42 09 80 	jge.u %d2,%d4,8000e1f8 <sbrk+0x24>
8000e1ea:	6d 00 13 00 	call 8000e210 <__errno>
8000e1ee:	da 0c       	mov %d15,12
8000e1f0:	6c 20       	st.w [%a2]0,%d15
8000e1f2:	a0 02       	mov.a %a2,0
8000e1f4:	b0 f2       	add.a %a2,-1
8000e1f6:	00 90       	ret 
8000e1f8:	7b 00 00 27 	movh %d2,28672
8000e1fc:	1b 82 c9 20 	addi %d2,%d2,3224
8000e200:	7f 24 04 80 	jge.u %d4,%d2,8000e208 <sbrk+0x34>
8000e204:	6d 00 0b 00 	call 8000e21a <abort>
8000e208:	59 f4 b0 40 	st.w [%a15]2352,%d4
8000e20c:	60 f2       	mov.a %a2,%d15
8000e20e:	00 90       	ret 

8000e210 <__errno>:
8000e210:	91 00 00 27 	movh.a %a2,28672
8000e214:	d9 22 d0 20 	lea %a2,[%a2]3216 <70000c90 <_my_errno>>
8000e218:	00 90       	ret 

8000e21a <abort>:
8000e21a:	00 a0       	debug 
8000e21c:	7b e0 ea fd 	movh %d15,57006
8000e220:	1b ff ee fb 	addi %d15,%d15,-16657
8000e224:	60 fe       	mov.a %a14,%d15
8000e226:	1d ff cf ff 	j 8000e1c4 <_exit>
8000e22a:	3c 00       	j 8000e22a <abort+0x10>

8000e22c <__eqdf2>:
8000e22c:	20 38       	sub.a %sp,56
8000e22e:	40 a4       	mov.aa %a4,%sp
8000e230:	d9 a5 10 00 	lea %a5,[%sp]16
8000e234:	89 a4 40 09 	st.d [%sp],%e4
8000e238:	89 a6 48 09 	st.d [%sp]8,%e6
8000e23c:	6d ff 85 e5 	call 8000ad46 <__unpack_d>
8000e240:	d9 a4 08 00 	lea %a4,[%sp]8
8000e244:	d9 a5 24 00 	lea %a5,[%sp]36
8000e248:	6d ff 7f e5 	call 8000ad46 <__unpack_d>
8000e24c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e250:	82 12       	mov %d2,1
8000e252:	bf 2f 0c 80 	jlt.u %d15,2,8000e26a <__eqdf2+0x3e>
8000e256:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e25a:	bf 2f 08 80 	jlt.u %d15,2,8000e26a <__eqdf2+0x3e>
8000e25e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e262:	d9 a5 24 00 	lea %a5,[%sp]36
8000e266:	6d 00 0d 01 	call 8000e480 <__fpcmp_parts_d>
8000e26a:	00 90       	ret 

8000e26c <__nedf2>:
8000e26c:	20 38       	sub.a %sp,56
8000e26e:	40 a4       	mov.aa %a4,%sp
8000e270:	d9 a5 10 00 	lea %a5,[%sp]16
8000e274:	89 a4 40 09 	st.d [%sp],%e4
8000e278:	89 a6 48 09 	st.d [%sp]8,%e6
8000e27c:	6d ff 65 e5 	call 8000ad46 <__unpack_d>
8000e280:	d9 a4 08 00 	lea %a4,[%sp]8
8000e284:	d9 a5 24 00 	lea %a5,[%sp]36
8000e288:	6d ff 5f e5 	call 8000ad46 <__unpack_d>
8000e28c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e290:	82 12       	mov %d2,1
8000e292:	bf 2f 0c 80 	jlt.u %d15,2,8000e2aa <__nedf2+0x3e>
8000e296:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e29a:	bf 2f 08 80 	jlt.u %d15,2,8000e2aa <__nedf2+0x3e>
8000e29e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e2a2:	d9 a5 24 00 	lea %a5,[%sp]36
8000e2a6:	6d 00 ed 00 	call 8000e480 <__fpcmp_parts_d>
8000e2aa:	00 90       	ret 

8000e2ac <__gtdf2>:
8000e2ac:	20 38       	sub.a %sp,56
8000e2ae:	40 a4       	mov.aa %a4,%sp
8000e2b0:	d9 a5 10 00 	lea %a5,[%sp]16
8000e2b4:	89 a4 40 09 	st.d [%sp],%e4
8000e2b8:	89 a6 48 09 	st.d [%sp]8,%e6
8000e2bc:	6d ff 45 e5 	call 8000ad46 <__unpack_d>
8000e2c0:	d9 a4 08 00 	lea %a4,[%sp]8
8000e2c4:	d9 a5 24 00 	lea %a5,[%sp]36
8000e2c8:	6d ff 3f e5 	call 8000ad46 <__unpack_d>
8000e2cc:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e2d0:	82 f2       	mov %d2,-1
8000e2d2:	bf 2f 0c 80 	jlt.u %d15,2,8000e2ea <__gtdf2+0x3e>
8000e2d6:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e2da:	bf 2f 08 80 	jlt.u %d15,2,8000e2ea <__gtdf2+0x3e>
8000e2de:	d9 a4 10 00 	lea %a4,[%sp]16
8000e2e2:	d9 a5 24 00 	lea %a5,[%sp]36
8000e2e6:	6d 00 cd 00 	call 8000e480 <__fpcmp_parts_d>
8000e2ea:	00 90       	ret 

8000e2ec <__gedf2>:
8000e2ec:	20 38       	sub.a %sp,56
8000e2ee:	40 a4       	mov.aa %a4,%sp
8000e2f0:	d9 a5 10 00 	lea %a5,[%sp]16
8000e2f4:	89 a4 40 09 	st.d [%sp],%e4
8000e2f8:	89 a6 48 09 	st.d [%sp]8,%e6
8000e2fc:	6d ff 25 e5 	call 8000ad46 <__unpack_d>
8000e300:	d9 a4 08 00 	lea %a4,[%sp]8
8000e304:	d9 a5 24 00 	lea %a5,[%sp]36
8000e308:	6d ff 1f e5 	call 8000ad46 <__unpack_d>
8000e30c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e310:	82 f2       	mov %d2,-1
8000e312:	bf 2f 0c 80 	jlt.u %d15,2,8000e32a <__gedf2+0x3e>
8000e316:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e31a:	bf 2f 08 80 	jlt.u %d15,2,8000e32a <__gedf2+0x3e>
8000e31e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e322:	d9 a5 24 00 	lea %a5,[%sp]36
8000e326:	6d 00 ad 00 	call 8000e480 <__fpcmp_parts_d>
8000e32a:	00 90       	ret 

8000e32c <__ltdf2>:
8000e32c:	20 38       	sub.a %sp,56
8000e32e:	40 a4       	mov.aa %a4,%sp
8000e330:	d9 a5 10 00 	lea %a5,[%sp]16
8000e334:	89 a4 40 09 	st.d [%sp],%e4
8000e338:	89 a6 48 09 	st.d [%sp]8,%e6
8000e33c:	6d ff 05 e5 	call 8000ad46 <__unpack_d>
8000e340:	d9 a4 08 00 	lea %a4,[%sp]8
8000e344:	d9 a5 24 00 	lea %a5,[%sp]36
8000e348:	6d ff ff e4 	call 8000ad46 <__unpack_d>
8000e34c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e350:	82 12       	mov %d2,1
8000e352:	bf 2f 0c 80 	jlt.u %d15,2,8000e36a <__ltdf2+0x3e>
8000e356:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e35a:	bf 2f 08 80 	jlt.u %d15,2,8000e36a <__ltdf2+0x3e>
8000e35e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e362:	d9 a5 24 00 	lea %a5,[%sp]36
8000e366:	6d 00 8d 00 	call 8000e480 <__fpcmp_parts_d>
8000e36a:	00 90       	ret 

8000e36c <__fixdfsi>:
8000e36c:	20 20       	sub.a %sp,32
8000e36e:	d9 a4 20 00 	lea %a4,[%sp]32
8000e372:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000e376:	d9 a5 0c 00 	lea %a5,[%sp]12
8000e37a:	6d ff e6 e4 	call 8000ad46 <__unpack_d>
8000e37e:	0c ac       	ld.bu %d15,[%sp]12
8000e380:	82 02       	mov %d2,0
8000e382:	bf 3f 1b 80 	jlt.u %d15,3,8000e3b8 <__fixdfsi+0x4c>
8000e386:	5e 48       	jne %d15,4,8000e396 <__fixdfsi+0x2a>
8000e388:	7b 00 00 28 	movh %d2,32768
8000e38c:	58 04       	ld.w %d15,[%sp]16
8000e38e:	1b f2 ff 3f 	addi %d3,%d2,-1
8000e392:	6a 32       	cmovn %d2,%d15,%d3
8000e394:	00 90       	ret 
8000e396:	19 a6 14 00 	ld.w %d6,[%sp]20
8000e39a:	82 02       	mov %d2,0
8000e39c:	0e 6e       	jltz %d6,8000e3b8 <__fixdfsi+0x4c>
8000e39e:	8b f6 81 f2 	ge %d15,%d6,31
8000e3a2:	ee f3       	jnz %d15,8000e388 <__fixdfsi+0x1c>
8000e3a4:	09 a4 58 09 	ld.d %e4,[%sp]24
8000e3a8:	8b c6 03 61 	rsub %d6,%d6,60
8000e3ac:	6d ff cb e0 	call 8000a542 <__lshrdi3>
8000e3b0:	58 04       	ld.w %d15,[%sp]16
8000e3b2:	8b 02 00 41 	rsub %d4,%d2,0
8000e3b6:	2a 42       	cmov %d2,%d15,%d4
8000e3b8:	00 90       	ret 

8000e3ba <__udivdi3>:
8000e3ba:	0f 67 a0 20 	or %d2,%d7,%d6
8000e3be:	0b 45 10 a8 	mov %e10,%d5,%d4
8000e3c2:	02 6f       	mov %d15,%d6
8000e3c4:	02 7c       	mov %d12,%d7
8000e3c6:	d2 f8       	mov %e8,-1
8000e3c8:	df 02 46 00 	jeq %d2,0,8000e454 <__udivdi3+0x9a>
8000e3cc:	8f 07 40 21 	or %d2,%d7,0
8000e3d0:	f6 2d       	jnz %d2,8000e3ea <__udivdi3+0x30>
8000e3d2:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000e3d6:	d2 04       	mov %e4,0
8000e3d8:	02 a4       	mov %d4,%d10
8000e3da:	42 95       	add %d5,%d9
8000e3dc:	6d 00 a5 00 	call 8000e526 <__udiv6432>
8000e3e0:	82 04       	mov %d4,0
8000e3e2:	02 85       	mov %d5,%d8
8000e3e4:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000e3e8:	3c 36       	j 8000e454 <__udivdi3+0x9a>
8000e3ea:	0b 7b 00 21 	eq %d2,%d11,%d7
8000e3ee:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000e3f2:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000e3f6:	d2 08       	mov %e8,0
8000e3f8:	df 02 2e 80 	jne %d2,0,8000e454 <__udivdi3+0x9a>
8000e3fc:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000e400:	0f 07 b0 d1 	clz %d13,%d7
8000e404:	60 5f       	mov.a %a15,%d5
8000e406:	0b 67 10 48 	mov %e4,%d7,%d6
8000e40a:	02 d6       	mov %d6,%d13
8000e40c:	6d ff bf e3 	call 8000ab8a <__ashldi3>
8000e410:	8f fb 1f e0 	sh %d14,%d11,-1
8000e414:	80 f4       	mov.d %d4,%a15
8000e416:	02 36       	mov %d6,%d3
8000e418:	02 e5       	mov %d5,%d14
8000e41a:	6d 00 86 00 	call 8000e526 <__udiv6432>
8000e41e:	8b fd 01 d1 	rsub %d13,%d13,31
8000e422:	8b 0d 00 31 	rsub %d3,%d13,0
8000e426:	0f 32 00 30 	sh %d3,%d2,%d3
8000e42a:	02 32       	mov %d2,%d3
8000e42c:	8b f2 9f 80 	addx %d8,%d2,-1
8000e430:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000e434:	82 03       	mov %d3,0
8000e436:	8b f3 bf 90 	addc %d9,%d3,-1
8000e43a:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000e43e:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000e442:	0b cb 00 41 	eq %d4,%d11,%d12
8000e446:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000e44a:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000e44e:	f6 43       	jnz %d4,8000e454 <__udivdi3+0x9a>
8000e450:	0b 23 10 88 	mov %e8,%d3,%d2
8000e454:	0b 89 10 28 	mov %e2,%d9,%d8
8000e458:	00 90       	ret 

8000e45a <__umoddi3>:
8000e45a:	0f 67 a0 90 	or %d9,%d7,%d6
8000e45e:	02 6f       	mov %d15,%d6
8000e460:	d2 00       	mov %e0,0
8000e462:	76 9c       	jz %d9,8000e47a <__umoddi3+0x20>
8000e464:	02 7a       	mov %d10,%d7
8000e466:	0b 45 10 88 	mov %e8,%d5,%d4
8000e46a:	6d ff a8 ff 	call 8000e3ba <__udivdi3>
8000e46e:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000e472:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000e476:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000e47a:	0b 01 10 28 	mov %e2,%d1,%d0
8000e47e:	00 90       	ret 

8000e480 <__fpcmp_parts_d>:
8000e480:	14 43       	ld.bu %d3,[%a4]
8000e482:	82 12       	mov %d2,1
8000e484:	bf 23 50 80 	jlt.u %d3,2,8000e524 <__fpcmp_parts_d+0xa4>
8000e488:	0c 50       	ld.bu %d15,[%a5]0
8000e48a:	bf 2f 4d 80 	jlt.u %d15,2,8000e524 <__fpcmp_parts_d+0xa4>
8000e48e:	8b 43 00 42 	eq %d4,%d3,4
8000e492:	8b 4f 00 22 	eq %d2,%d15,4
8000e496:	0f 24 80 50 	and %d5,%d4,%d2
8000e49a:	76 56       	jz %d5,8000e4a6 <__fpcmp_parts_d+0x26>
8000e49c:	19 52 04 00 	ld.w %d2,[%a5]4
8000e4a0:	4c 41       	ld.w %d15,[%a4]4
8000e4a2:	a2 f2       	sub %d2,%d15
8000e4a4:	00 90       	ret 
8000e4a6:	76 47       	jz %d4,8000e4b4 <__fpcmp_parts_d+0x34>
8000e4a8:	19 42 04 00 	ld.w %d2,[%a4]4
8000e4ac:	82 1f       	mov %d15,1
8000e4ae:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e4b2:	00 90       	ret 
8000e4b4:	76 27       	jz %d2,8000e4c2 <__fpcmp_parts_d+0x42>
8000e4b6:	19 52 04 00 	ld.w %d2,[%a5]4
8000e4ba:	82 ff       	mov %d15,-1
8000e4bc:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e4c0:	00 90       	ret 
8000e4c2:	df 23 06 80 	jne %d3,2,8000e4ce <__fpcmp_parts_d+0x4e>
8000e4c6:	82 02       	mov %d2,0
8000e4c8:	df 2f f7 ff 	jne %d15,2,8000e4b6 <__fpcmp_parts_d+0x36>
8000e4cc:	00 90       	ret 
8000e4ce:	df 2f ed 7f 	jeq %d15,2,8000e4a8 <__fpcmp_parts_d+0x28>
8000e4d2:	19 45 04 00 	ld.w %d5,[%a4]4
8000e4d6:	4c 51       	ld.w %d15,[%a5]4
8000e4d8:	5f f5 19 80 	jne %d5,%d15,8000e50a <__fpcmp_parts_d+0x8a>
8000e4dc:	19 42 08 00 	ld.w %d2,[%a4]8
8000e4e0:	4c 52       	ld.w %d15,[%a5]8
8000e4e2:	3f 2f 14 00 	jlt %d15,%d2,8000e50a <__fpcmp_parts_d+0x8a>
8000e4e6:	3f f2 1c 00 	jlt %d2,%d15,8000e51e <__fpcmp_parts_d+0x9e>
8000e4ea:	19 43 10 00 	ld.w %d3,[%a4]16
8000e4ee:	19 54 10 00 	ld.w %d4,[%a5]16
8000e4f2:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e4f6:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e4fa:	0b 43 00 21 	eq %d2,%d3,%d4
8000e4fe:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e502:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e506:	3a 43       	eq %d15,%d3,%d4
8000e508:	f6 25       	jnz %d2,8000e512 <__fpcmp_parts_d+0x92>
8000e50a:	82 12       	mov %d2,1
8000e50c:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e510:	00 90       	ret 
8000e512:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e516:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e51a:	82 02       	mov %d2,0
8000e51c:	ee 04       	jnz %d15,8000e524 <__fpcmp_parts_d+0xa4>
8000e51e:	82 f2       	mov %d2,-1
8000e520:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e524:	00 90       	ret 

8000e526 <__udiv6432>:
8000e526:	02 53       	mov %d3,%d5
8000e528:	82 f2       	mov %d2,-1
8000e52a:	7f 65 4b 80 	jge.u %d5,%d6,8000e5c0 <__udiv6432+0x9a>
8000e52e:	0f 06 b0 21 	clz %d2,%d6
8000e532:	0f 26 00 60 	sh %d6,%d6,%d2
8000e536:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e53a:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e53e:	8f 06 1f 70 	sh %d7,%d6,-16
8000e542:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e546:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e54a:	0f 24 00 20 	sh %d2,%d4,%d2
8000e54e:	02 05       	mov %d5,%d0
8000e550:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e554:	e2 80       	mul %d0,%d8
8000e556:	8f 02 1f b0 	sh %d11,%d2,-16
8000e55a:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e55e:	82 0c       	mov %d12,0
8000e560:	7b 10 00 90 	movh %d9,1
8000e564:	7f 95 09 80 	jge.u %d5,%d9,8000e576 <__udiv6432+0x50>
8000e568:	8f 01 01 f0 	sh %d15,%d1,16
8000e56c:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e570:	42 bf       	add %d15,%d11
8000e572:	7f af 07 80 	jge.u %d15,%d10,8000e580 <__udiv6432+0x5a>
8000e576:	42 71       	add %d1,%d7
8000e578:	c2 f5       	add %d5,-1
8000e57a:	a2 8c       	sub %d12,%d8
8000e57c:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e564 <__udiv6432+0x3e>
8000e580:	8f 03 01 30 	sh %d3,%d3,16
8000e584:	42 3b       	add %d11,%d3
8000e586:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e58a:	82 0a       	mov %d10,0
8000e58c:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e590:	7b 10 00 10 	movh %d1,1
8000e594:	02 03       	mov %d3,%d0
8000e596:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e59a:	e2 80       	mul %d0,%d8
8000e59c:	7f 13 09 80 	jge.u %d3,%d1,8000e5ae <__udiv6432+0x88>
8000e5a0:	8f 06 01 f0 	sh %d15,%d6,16
8000e5a4:	0b 0a 00 90 	add %d9,%d10,%d0
8000e5a8:	42 2f       	add %d15,%d2
8000e5aa:	7f 9f 07 80 	jge.u %d15,%d9,8000e5b8 <__udiv6432+0x92>
8000e5ae:	42 76       	add %d6,%d7
8000e5b0:	c2 f3       	add %d3,-1
8000e5b2:	a2 8a       	sub %d10,%d8
8000e5b4:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e59c <__udiv6432+0x76>
8000e5b8:	8f 05 01 50 	sh %d5,%d5,16
8000e5bc:	0b 53 00 20 	add %d2,%d3,%d5
8000e5c0:	00 90       	ret 
8000e5c2:	00 00       	nop 
8000e5c4:	00 00       	nop 
>>>>>>> 34ff1ec54be522b04d47c3352108486a1876d3f5
	...
=======
8000e718 <__umoddi3>:
8000e718:	0f 67 a0 90 	or %d9,%d7,%d6
8000e71c:	02 6f       	mov %d15,%d6
8000e71e:	d2 00       	mov %e0,0
8000e720:	76 9c       	jz %d9,8000e738 <__umoddi3+0x20>
8000e722:	02 7a       	mov %d10,%d7
8000e724:	0b 45 10 88 	mov %e8,%d5,%d4
8000e728:	6d ff a8 ff 	call 8000e678 <__udivdi3>
8000e72c:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000e730:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000e734:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000e738:	0b 01 10 28 	mov %e2,%d1,%d0
8000e73c:	00 90       	ret 

8000e73e <__fpcmp_parts_d>:
8000e73e:	14 43       	ld.bu %d3,[%a4]
8000e740:	82 12       	mov %d2,1
8000e742:	bf 23 50 80 	jlt.u %d3,2,8000e7e2 <__fpcmp_parts_d+0xa4>
8000e746:	0c 50       	ld.bu %d15,[%a5]0
8000e748:	bf 2f 4d 80 	jlt.u %d15,2,8000e7e2 <__fpcmp_parts_d+0xa4>
8000e74c:	8b 43 00 42 	eq %d4,%d3,4
8000e750:	8b 4f 00 22 	eq %d2,%d15,4
8000e754:	0f 24 80 50 	and %d5,%d4,%d2
8000e758:	76 56       	jz %d5,8000e764 <__fpcmp_parts_d+0x26>
8000e75a:	19 52 04 00 	ld.w %d2,[%a5]4
8000e75e:	4c 41       	ld.w %d15,[%a4]4
8000e760:	a2 f2       	sub %d2,%d15
8000e762:	00 90       	ret 
8000e764:	76 47       	jz %d4,8000e772 <__fpcmp_parts_d+0x34>
8000e766:	19 42 04 00 	ld.w %d2,[%a4]4
8000e76a:	82 1f       	mov %d15,1
8000e76c:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e770:	00 90       	ret 
8000e772:	76 27       	jz %d2,8000e780 <__fpcmp_parts_d+0x42>
8000e774:	19 52 04 00 	ld.w %d2,[%a5]4
8000e778:	82 ff       	mov %d15,-1
8000e77a:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e77e:	00 90       	ret 
8000e780:	df 23 06 80 	jne %d3,2,8000e78c <__fpcmp_parts_d+0x4e>
8000e784:	82 02       	mov %d2,0
8000e786:	df 2f f7 ff 	jne %d15,2,8000e774 <__fpcmp_parts_d+0x36>
8000e78a:	00 90       	ret 
8000e78c:	df 2f ed 7f 	jeq %d15,2,8000e766 <__fpcmp_parts_d+0x28>
8000e790:	19 45 04 00 	ld.w %d5,[%a4]4
8000e794:	4c 51       	ld.w %d15,[%a5]4
8000e796:	5f f5 19 80 	jne %d5,%d15,8000e7c8 <__fpcmp_parts_d+0x8a>
8000e79a:	19 42 08 00 	ld.w %d2,[%a4]8
8000e79e:	4c 52       	ld.w %d15,[%a5]8
8000e7a0:	3f 2f 14 00 	jlt %d15,%d2,8000e7c8 <__fpcmp_parts_d+0x8a>
8000e7a4:	3f f2 1c 00 	jlt %d2,%d15,8000e7dc <__fpcmp_parts_d+0x9e>
8000e7a8:	19 43 10 00 	ld.w %d3,[%a4]16
8000e7ac:	19 54 10 00 	ld.w %d4,[%a5]16
8000e7b0:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e7b4:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e7b8:	0b 43 00 21 	eq %d2,%d3,%d4
8000e7bc:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e7c0:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e7c4:	3a 43       	eq %d15,%d3,%d4
8000e7c6:	f6 25       	jnz %d2,8000e7d0 <__fpcmp_parts_d+0x92>
8000e7c8:	82 12       	mov %d2,1
8000e7ca:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e7ce:	00 90       	ret 
8000e7d0:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e7d4:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e7d8:	82 02       	mov %d2,0
8000e7da:	ee 04       	jnz %d15,8000e7e2 <__fpcmp_parts_d+0xa4>
8000e7dc:	82 f2       	mov %d2,-1
8000e7de:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e7e2:	00 90       	ret 

8000e7e4 <__udiv6432>:
8000e7e4:	02 53       	mov %d3,%d5
8000e7e6:	82 f2       	mov %d2,-1
8000e7e8:	7f 65 4b 80 	jge.u %d5,%d6,8000e87e <__udiv6432+0x9a>
8000e7ec:	0f 06 b0 21 	clz %d2,%d6
8000e7f0:	0f 26 00 60 	sh %d6,%d6,%d2
8000e7f4:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e7f8:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e7fc:	8f 06 1f 70 	sh %d7,%d6,-16
8000e800:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e804:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e808:	0f 24 00 20 	sh %d2,%d4,%d2
8000e80c:	02 05       	mov %d5,%d0
8000e80e:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e812:	e2 80       	mul %d0,%d8
8000e814:	8f 02 1f b0 	sh %d11,%d2,-16
8000e818:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e81c:	82 0c       	mov %d12,0
8000e81e:	7b 10 00 90 	movh %d9,1
8000e822:	7f 95 09 80 	jge.u %d5,%d9,8000e834 <__udiv6432+0x50>
8000e826:	8f 01 01 f0 	sh %d15,%d1,16
8000e82a:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e82e:	42 bf       	add %d15,%d11
8000e830:	7f af 07 80 	jge.u %d15,%d10,8000e83e <__udiv6432+0x5a>
8000e834:	42 71       	add %d1,%d7
8000e836:	c2 f5       	add %d5,-1
8000e838:	a2 8c       	sub %d12,%d8
8000e83a:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e822 <__udiv6432+0x3e>
8000e83e:	8f 03 01 30 	sh %d3,%d3,16
8000e842:	42 3b       	add %d11,%d3
8000e844:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e848:	82 0a       	mov %d10,0
8000e84a:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e84e:	7b 10 00 10 	movh %d1,1
8000e852:	02 03       	mov %d3,%d0
8000e854:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e858:	e2 80       	mul %d0,%d8
8000e85a:	7f 13 09 80 	jge.u %d3,%d1,8000e86c <__udiv6432+0x88>
8000e85e:	8f 06 01 f0 	sh %d15,%d6,16
8000e862:	0b 0a 00 90 	add %d9,%d10,%d0
8000e866:	42 2f       	add %d15,%d2
8000e868:	7f 9f 07 80 	jge.u %d15,%d9,8000e876 <__udiv6432+0x92>
8000e86c:	42 76       	add %d6,%d7
8000e86e:	c2 f3       	add %d3,-1
8000e870:	a2 8a       	sub %d10,%d8
8000e872:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e85a <__udiv6432+0x76>
8000e876:	8f 05 01 50 	sh %d5,%d5,16
8000e87a:	0b 53 00 20 	add %d2,%d3,%d5
8000e87e:	00 90       	ret 
>>>>>>> eec15db892c0c8e91106f2a8287a670b8a9fe311
