
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x0000e778 memsz 0x0000e778 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000e798 align 2**14
         filesz 0x00000940 memsz 0x00000940 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000f0d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000f0d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000f0d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000f0d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00014940 vaddr 0x70000940 paddr 0x8000f0d8 align 2**14
         filesz 0x00000000 memsz 0x000005d8 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000f0d8 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000f0d8 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000f100 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000f100 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000f100 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000011c0  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          000005d8  70000940  8000f0d8  00014940  2**3
                  ALLOC
  3 .data         00000940  70000000  8000e798  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001200  80001200  00005200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001300  80001300  00005300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001308  80001308  00005308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text         0000a798  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000f0d8  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000f0d8  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000f100  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000f0d8  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000f0d8  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000f100  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000f0d8  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000f0d8  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000f100  00015c00  2**6
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014940  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000d28  00000000  00000000  00014998  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000c9383  00000000  00000000  000156c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000c2b1  00000000  00000000  000dea43  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000cf74  00000000  00000000  000eacf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  00002390  00000000  00000000  000f7c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00002142  00000000  00000000  000f9ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    00013f58  00000000  00000000  000fc13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 00001330  00000000  00000000  00110092  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004ad67  00000000  00000000  001113c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000940 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001200 l    d  .traptab	00000000 .traptab
80001300 l    d  .ctors	00000000 .ctors
80001308 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 Button_Driver.c
00000000 l    df *ABS*	00000000 asw.c
70000000 l     O .data	00000004 c.16144
00000000 l    df *ABS*	00000000 bsw.c
00000000 l    df *ABS*	00000000 ee_applcfg.c
80000144 l     O .rodata	0000001c osEE_tdb_ptr_array
80000138 l     O .rodata	00000004 osEE_res_db_ptr_array
80000160 l     O .rodata	000000e0 osEE_tdb_array
70000038 l     O .data	00000030 osEE_sn_array
8000013c l     O .rodata	00000008 osEE_res_db_array
70000bf4 l     O .bss	0000000c osEE_res_cb_array
80000240 l     O .rodata	00000008 osEE_sdb_array
70000c00 l     O .bss	00000004 osEE_scb_array
70000068 l     O .data	0000008c osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
80000248 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
700000f8 l     O .data	00000004 IfxScuCcu_xtalFrequency
8000609c l     F .text	00000034 IfxScuCcu_wait
80000b1c l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000db8 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 infotainment_System.c
70000c08 l     O .bss	00000020 buf
70000c28 l     O .bss	00000004 infoState
70000c2c l     O .bss	0000001c infotainmentArr
80000e98 l     O .rodata	0000001c stateMaxArr
00000000 l    df *ABS*	00000000 uart_Driver.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
70000514 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000f34 l     O .rodata	00000010 blanks.4035
80000f24 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000c9ac l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 locale.c
80000f60 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000f98 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000938 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
80009862 l     F .text	0000000e osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 Lcd_Driver.c
8000404e l     F .text	00000060 lcd_write4bits
800040ae l     F .text	00000020 lcd_command
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ultrasonic_Driver.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
80009392 l     F .text	00000054 osEE_tc_stm_us_ticks
70000ec8 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
80009870 l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
8000a134 l     F .text	00000022 osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
8000a62a l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
8000a7b6 l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
80000450 g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
80008954 g     F .text	0000001c printStateBlue
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000018 g     O .data	00000020 osEE_ccb_var
70000f18 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
80005890 g     F .text	00000062 IfxAsclin_Asc_write
80008e58 g     F .text	00000094 measureEchoTick
8000512e g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
800071b8 g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
800073ec g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000fa4 g     O .rodata	00000028 __mprec_tinytens
80000b60 g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
8000ad28 g     F .text	0000001a .hidden __ashldi3
8000714e g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
80009be0 g     F .text	0000005a TerminateTask
800051aa g     F .text	00000006 IfxAsclin_Asc_resetSendCount
80000250 g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000bf0 g     O .bss	00000004 osEE_kcb_var
80000400 g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
80008196 g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004c5a g     F .text	00000014 IfxVadc_setScan
8000e3cc g     F .text	00000040 .hidden __eqdf2
800057c0 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
800070e2 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
800048cc g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
8000844c g     F .text	00000176 Ifx_Fifo_read
80004cb4 g     F .text	0000001c IfxAsclin_disableModule
800007a0 g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
8000a20a g     F .text	00000022 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80008bfa g     F .text	0000006e myprintfSerial
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
80008f26 g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
80008312 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
80007626 g     F .text	00000108 IfxVadc_Adc_getChannelConfig
8000487c g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
8000a68a g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
80006958 g     F .text	00000012 IfxScuCcu_initErayPllConfig
8000a552 g     F .text	00000028 osEE_change_context_from_running
80005120 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
800007c0 g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
80007078 g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
8000526c g     F .text	00000014 IfxAsclin_Asc_clearTx
8000590e g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000b50c g     F .text	00000002 __malloc_unlock
8000510a g     F .text	0000000a IfxAsclin_Asc_getReadEvent
8000422e g     F .text	000000dc TimerISR
800085f8 g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007f5e g     F .text	000000e8 IfxVadc_Adc_initModule
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
70000c48 g     O .bss	0000000b g_RecievedActuatorPacket
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
80004796 g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
8000497a g     F .text	00000028 IfxVadc_getSrcAddress
800049c6 g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004dde g     F .text	00000024 IfxAsclin_getOvsFrequency
80009ffa g     F .text	00000096 SetEvent
8000772e g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
8000703a g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
8000a156 g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000d68 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
80000570 g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000df14 g     F .text	00000050 memmove
80008870 g     F .text	00000002 syncInfoState
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d7da g     F .text	00000056 _Balloc
80000d48 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
80000860 g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
80000640 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80006272 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
800063e4 g     F .text	000003be IfxScuCcu_init
8000e44c g     F .text	00000040 .hidden __gtdf2
8000e3b0  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800098c0 g     F .text	00000042 SuspendAllInterrupts
800051b0 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
80000840 g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
8000a6f8 g     F .text	00000066 osEE_hal_terminate_ctx
800002f0 g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
8000a29c g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009f08 g     F .text	00000078 GetTaskState
80008154 g     F .text	00000020 Ifx_CircularBuffer_get32
8000a34e g     F .text	00000022 osEE_task_event_set_mask
80000380 g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
800007b0 g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
80007422 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005b74 g     F .text	00000092 IfxPort_setGroupModeOutput
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005fc2 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000f08 g     O .bss	00000004 errno
8000acce g     F .text	0000001e .hidden __make_dp
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001260 g       .traptab	00000000 osEE_tc_trap_context
800075a4 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
80000750 g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
800008f0 g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
800005b0 g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
8000adbc g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
80004512 g     F .text	0000007e initVADCChannels
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
80000320 g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000c48 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000cc0 g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
800070aa g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
8000a0c2 g     F .text	00000058 ClearEvent
80006336 g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
8000a160 g     F .text	000000aa osEE_scheduler_task_wrapper_run
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
80000690 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
800009c0 g     O .rodata	00000080 IfxPort_cfg_indexMap
80005412 g     F .text	000003ae IfxAsclin_Asc_initModule
8000a4ee g     F .text	00000026 osEE_scheduler_task_preemption_point
8000421a g     F .text	00000014 FuncTaskUltrasonic
8000d7be g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
8000b808 g     F .text	000011a4 _svfprintf_r
8000ac86 g     F .text	00000048 .hidden __floatsidf
80007766 g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006f0c g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
8000a2e4 g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000e4cc g     F .text	00000040 .hidden __ltdf2
80004970 g     F .text	0000000a IfxVadc_getScanStatus
80001310 g       .dtors	00000000 __DTOR_END__
8000696a g     F .text	00000076 IfxScuCcu_setCpuFrequency
8000704c g     F .text	0000002c IfxScuEru_setFlagPatternDetection
8000a59a g     F .text	00000026 osEE_idle_task_terminate
80000cac g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
80008872 g     F .text	00000002 updatePacket
800008e0 g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
80000710 g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000dd80 g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
8000711a g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
800072b4 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
8000a428 g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000b056 g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006d7c g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
80000770 g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
80009770 g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001240 g       .traptab	00000000 osEE_tc_trap_instruction
80000ff4 g     O .rodata	000000c8 __mprec_tens
70000010 g     O .data	00000004 g_vadcChannelIDs
80005254 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
800041ec g     F .text	0000002e ButtonISR
80009cae g     F .text	000000b2 GetResource
80000410 g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
80000500 g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000b58a g     F .text	00000016 vsnprintf
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
80000940 g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
70000f00 g     O .bss	00000004 __malloc_top_pad
800045b2 g     F .text	00000026 readADCValue
800088e4 g     F .text	0000001c printStateOn
800069e0 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005d00 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
8000a6ae g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000c20 g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
800082c2 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d79c g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004da4 g     F .text	00000022 IfxAsclin_getIndex
8000d96c g     F .text	00000010 __i2b
80009c3a g     F .text	00000074 Schedule
80004e02 g     F .text	00000016 IfxAsclin_getShiftFrequency
800079a4 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
80000310 g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006c42 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
80000730 g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
80007310 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000b50e g     F .text	0000001e _sbrk_r
800004c0 g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000ce0 g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
800004d0 g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
80008938 g     F .text	0000001c printStateGreen
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000960 g     O .bss	0000000c g_vadcGroup
80006ec0 g     F .text	00000026 IfxScuEru_enableAutoClear
80000720 g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
80008d64 g     F .text	0000001a serialize_sensor_packet
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000aee4 g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005da6 g     F .text	0000003c IfxPort_setPinPadDriver
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
80000480 g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000efc g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800012a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
8000a784 g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80008cf4 g     F .text	00000048 readActuatorPacket
80004d1a g     F .text	00000016 IfxAsclin_getAddress
8000a952 g     F .text	00000038 .hidden __adddf3
800041a8 g     F .text	0000000e lcd_goto
80009a6c g     F .text	0000001a GetActiveApplicationMode
800062bc g     F .text	0000007a IfxScuCcu_getSriFrequency
80008e3c g     F .text	0000001c sendTrigger
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
80009902 g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006bc2 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000e62c g     F .text	00000026 .hidden __umoddi3
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
80000910 g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000ee8 g     O .rodata	00000004 _global_impure_ptr
80006dcc g     F .text	00000036 IfxScuEru_connectTrigger
70000940 g     O .bss	00000020 g_vadcChannel
80006378 g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000df74 g     F .text	000003f0 _realloc_r
800006f0 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004e54 g     F .text	00000012 IfxAsclin_read16
80008874 g     F .text	0000001c printStateLv1
80005aa8 g     F .text	0000003c IfxPort_enableEmergencyStop
80000340 g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000e58c g     F .text	000000a0 .hidden __udivdi3
800008c0 g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
80000350 g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
8000a22c g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
80000510 g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
800040ce g     F .text	0000000a lcd_clear
80000fcc g     O .rodata	00000028 __mprec_bigtens
8000e3ba g     F .text	00000012 abort
8000e55a g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000dbcc g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
80005280 g     F .text	0000001c IfxAsclin_Asc_read
80009a86 g     F .text	00000084 ActivateTask
80000c5c g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006e28 g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
80008316 g     F .text	0000003a Ifx_Fifo_init
8000891c g     F .text	0000001c printStateRed
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000f10  w    O .bss	00000004 _my_errno
80000550 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
800059d4 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
80000970 g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
80009eb0 g     F .text	00000058 GetTaskID
800067b6 g     F .text	000001a2 IfxScuCcu_initErayPll
800003f0 g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
80000390 g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000ac8 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
80006f7e g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000d04 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
80009928 g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
800071ea g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
80008d3c g     F .text	00000028 asclin0RxISR
8000ad42 g     F .text	0000007a .hidden __unpack_f
800096b8 g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
80004590 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
8000a514 g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
8000978e g     F .text	0000008e osEE_tc_stm_set_sr1
80000790 g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
80008c68 g     F .text	0000000c asclin0TxISR
80000670 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
80007244 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
800075a0 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
800007f0 g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800006a0 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d8c4 g     F .text	00000042 __hi0bits
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
80000890 g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
80000460 g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
80000470 g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000e50c g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
8000a392 g     F .text	00000068 osEE_scheduler_task_activated
800060d0 g     F .text	00000078 IfxScuCcu_getBbbFrequency
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
800003a0 g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
80000520 g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
8000467a g     F .text	0000000c asclin3TxISR
800063ae g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b70 g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
80007182 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80008eec g     F .text	00000024 getUltrasonic
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
800006c0 g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004f4a g     F .text	00000182 IfxAsclin_setBitTiming
80000d28 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
80000530 g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
80000360 g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
80008890 g     F .text	0000001c printStateLv2
80000870 g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000cec g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80008d7e g     F .text	00000048 sendSensorPacket
800075e4 g     F .text	00000026 IfxVadc_Adc_deInitGroup
8000a75e g     F .text	00000026 .hidden __lshrdi3
80000780 g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
80008ad2 g     F .text	00000008 initInfotainment
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
800008b0 g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
80000610 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007ba6 g     F .text	0000038a IfxVadc_Adc_initGroup
8000da96 g     F .text	0000007c __pow5mult
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_10
70000970 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
80006e74 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
800005d0 g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
8000a464 g     F .text	0000008a osEE_scheduler_task_terminated
800003b0 g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000af90 g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
800081b6 g     F .text	0000005e Ifx_CircularBuffer_read8
80000900 g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
800073d2 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
80009614 g     F .text	000000a4 osEE_tc_get_fsource
80004e66 g     F .text	00000012 IfxAsclin_read32
80000c84 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
800074c0 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
80000930 g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
80000800 g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
800096ec g     F .text	00000084 osEE_tc_stm_set_sr0
80000b80 g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800006d0 g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
8000a6da g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d7a6 g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000b65a g     F .text	000001ac _free_r
80005848 g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
8000a11a g     F .text	00000018 GetISRID
800088ac g     F .text	0000001c printStateLv3
8000a64c g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_5
80001280 g       .traptab	00000000 osEE_tc_trap_bus
80005de4 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
80000950 g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
70000100 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008ada g     F .text	0000009c updateInfoState
80008350 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
800073a2 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800012e0 g       .traptab	00000000 osEE_tc_trap_nmi
8000db12 g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
800006b0 g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
8000760a g     F .text	0000001c IfxVadc_Adc_disableModule
80008dd0 g     F .text	00000048 readSensorPacket
00002000 g       *ABS*	00000000 __CSA_SIZE
8000ddc2 g     F .text	000000f0 __ssprint_r
80004894 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
80004718 g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000d97c g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006f8c g     F .text	00000012 IfxScuEru_getEventFlagStatus
800041b6 g     F .text	00000036 lcd_print
80000590 g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800003e0 g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004be0 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006e4e g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000ed0 g     O .bss	00000028 __malloc_current_mallinfo
8000dcd8 g     F .text	000000a8 __d2b
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
80008900 g     F .text	0000001c printStateOff
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000bbc g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80008174 g     F .text	00000022 Ifx_CircularBuffer_get16
800004b0 g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005f7e g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001300 g       .ctors	00000000 __EH_FRAME_END__
80006e02 g     F .text	00000026 IfxScuEru_disableAutoClear
80006a6e g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
800061d8 g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
80000650 g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000e652 g     F .text	000000a6 .hidden __fpcmp_parts_d
80004cfe g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
8000a2f2 g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
8000a5c0 g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
80006f32 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
80000830 g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
80005a04 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
8000a090 g     F .text	00000032 GetEvent
800053f6 g     F .text	0000001c IfxAsclin_Asc_disableModule
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004e78 g     F .text	00000012 IfxAsclin_read8
8000a3fa g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000ab6e g     F .text	00000118 .hidden __divdf3
80000d88 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000d38 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
800058f2 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80008046 g     F .text	0000003a IfxVadc_Adc_initModuleConfig
70000108 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009e4c g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000b540 g     F .text	0000004a _vsnprintf_r
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
8000a9ca g     F .text	000001a4 .hidden __muldf3
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
80000740 g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
80004374 g     F .text	0000006e delay_us
80000d78 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000b50a g     F .text	00000002 __malloc_lock
8000e374 g     F .text	0000003c sbrk
80005edc g     F .text	0000000e IfxScuCcu_getOsc0Frequency
800046e0 g     F .text	00000038 IfxVadc_disableAccess
80008b78 g     F .text	00000082 initUartDriver
80000000 g       .startup	00000000 BootModeHeader0
800012c0 g       .traptab	00000000 osEE_tc_trap_system
80000cf8 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004e40 g     F .text	00000014 IfxAsclin_getSrcPointerTx
800048dc g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000deb2 g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
800061fa g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
80000820 g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
800047d2 g     F .text	000000aa IfxVadc_enableGroupSync
80006fe6 g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
8000529c g     F .text	0000009e IfxAsclin_Asc_isrTransmit
800003d0 g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000df64 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
800040d8 g     F .text	000000d0 lcd_init
80004686 g     F .text	00000058 main
80007382 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
8000430a g     F .text	0000006a delay_ms
80006f58 g     F .text	00000026 IfxScuEru_enableTriggerPulse
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000ef8 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
80004cd0 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000e6f8 g     F .text	0000009c .hidden __udiv6432
80008ca2 g     F .text	00000048 sendActuatorPacket
00000400 g       *ABS*	00000000 __ISTACK_SIZE
800061b8 g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
800080c2 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000c34 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
7000097c g     O .bss	00000274 g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000cd4 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
8000a318 g     F .text	00000018 osEE_task_activated
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
8000011c g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
800073be g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000acec g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000cac8 g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000b070 g     F .text	0000049a _malloc_r
80000540 g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005d64 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
80000810 g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
800053d0 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
80000600 g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80005104 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
800005f0 g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
800050e0 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
80004454 g     F .text	0000006e printfSerial
80000ed4 g     O .rodata	00000014 .hidden __thenan_df
8000b5a0 g     F .text	000000ba _malloc_trim_r
80001308 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
80000420 g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004ae4 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
80004750 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80009d60 g     F .text	000000ec ReleaseResource
80008080 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004dc6 g     F .text	00000018 IfxAsclin_getPdFrequency
800048b2 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001308 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
80004b8e g     F .text	00000052 IfxVadc_resetKernel
80000920 g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80008cea g     F .text	0000000a deserialize_actuator_packet
80000d1c g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000e40c g     F .text	00000040 .hidden __nedf2
80004ef8 g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80006034 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
80006b0e g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80006fc2 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000b50 g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80000a40 g     O .rodata	00000080 IfxPort_cfg_esrMasks
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
80000760 g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
8000525c g     F .text	00000010 IfxAsclin_Asc_clearRx
80000990 g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000da8 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
80005a7e g     F .text	0000002a IfxPort_setESR
80000560 g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
800004a0 g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
80008c88 g     F .text	0000001a serialize_actuator_packet
80000980 g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000bf8 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
80000490 g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
70000510 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
80005a26 g     F .text	00000028 IfxPort_resetESR
80005138 g     F .text	00000072 IfxAsclin_Asc_isrError
800049a2 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80008c74 g     F .text	00000014 calculate_checksum
80004e2c g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
800004f0 g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80008e18 g     F .text	00000024 initUltrasonic
70000c54 g     O .bss	00000274 g_AsclinStm
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004e18 g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
80000440 g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
80000880 g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
8000988e g     F .text	00000016 DisableAllInterrupts
80008264 g     F .text	0000005e Ifx_CircularBuffer_write8
8000533a g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005ae4 g     F .text	00000090 IfxPort_setGroupModeInput
80008372 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
80009b0a g     F .text	000000d6 ChainTask
80007006 g     F .text	00000034 IfxScuEru_selectExternalInput
80006ee6 g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
70000004 g     O .data	0000000b sendActuatorPkt
80000960 g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
800007e0 g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
80000660 g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
800067a2 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
80000330 g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
80004a14 g     F .text	00000066 IfxVadc_initializeFAdcI
800005a0 g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000b94 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
80000300 g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001200 g       .traptab	00000000 osEE_tc_trap_mmu
80008214 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
800051b8 g     F .text	0000009c IfxAsclin_Asc_flushTx
8000983a g     F .text	00000028 osEE_tc_delay
80000680 g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
800010bc g     O .rodata	00000000 __clear_table
80005f1a g     F .text	00000064 IfxScuCcu_getPllErayFrequency
80000850 g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
8000a330 g     F .text	0000001e osEE_task_end
80000630 g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
800008a0 g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001300 g       .ctors	00000000 __EH_FRAME_BEGIN__
80000580 g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
80006078 g     F .text	00000024 IfxScuCcu_getSourceFrequency
800004e0 g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000d98 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c70 g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
8000a57a g     F .text	00000020 osEE_change_context_from_task_end
80009f80 g     F .text	0000007a WaitEvent
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_4
80005a4e g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
80008f10 g     F .text	00000016 calculateDistanceCm
80000370 g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007f30 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
8000981c g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
70000104 g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
800048ae g     F .text	00000004 IfxVadc_getAdcModuleFrequency
800086e8 g     F .text	00000186 Ifx_Fifo_write
8000dc0e g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
8000a370 g     F .text	00000022 osEE_activate_isr2
80007b90 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004d30 g     F .text	00000074 IfxAsclin_getFaFrequency
80006abe g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
800093e6 g     F .text	0000022e osEE_tc_set_pll_fsource
800049ea g     F .text	0000002a IfxVadc_initializeFAdcD
800043e2 g     F .text	00000072 UART_init
80005c06 g     F .text	000000a4 IfxPort_setGroupPadDriver
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
80000d58 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
800008d0 g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
800088c8 g     F .text	0000001c printStateLv4
800050f2 g     F .text	00000012 IfxAsclin_write8
80006ff8 g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
80001124 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
800050cc g     F .text	00000014 IfxAsclin_write16
800085c2 g     F .text	00000036 Ifx_Fifo_clear
80000c0c g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000e364 g     F .text	00000010 _exit
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001220 g       .traptab	00000000 osEE_tc_trap_protection
80001200 g     F .traptab	00000000 __TRAPTAB
80000c98 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006da4 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006e9a g     F .text	00000026 IfxScuEru_disableTriggerPulse
800074f6 g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
80005114 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000b52c g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004ed6 g     F .text	00000022 IfxAsclin_setClockSource
8000e48c g     F .text	00000040 .hidden __gedf2
80000ac0 g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
800045d8 g     F .text	000000a2 initPeripheralsAndERU
800007d0 g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
80000430 g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
80000bd0 g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004c04 g     F .text	00000056 IfxVadc_setArbiterPriority
70000f18 g     O .text	00000001 __HEAP_END
800005c0 g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
80006148 g     F .text	00000070 IfxScuCcu_getMaxFrequency
800098a4 g     F .text	0000001c EnableAllInterrupts
800005e0 g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004c6e g     F .text	00000044 IfxVadc_startupCalibration
7000096c g     O .bss	00000004 g_vadc
80005caa g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000ba8 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
8000a670 g     F .text	0000001a osEE_hal_restore_ctx
800044e0 g     F .text	00000032 initVADCGroup
80000620 g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000a98a g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
8000511a g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
80004a7a g     F .text	0000006a IfxVadc_isPostCalibration
800044c2 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006d66 g     F .text	00000016 IfxScuEru_clearEventFlag
800074c4 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d906 g     F .text	00000066 __lo0bits
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
800003c0 g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
80005eea g     F .text	00000030 IfxScuCcu_getOscFrequency
80009984 g     F .text	0000003c ResumeOSInterrupts
80004000 g     F .text	0000004e readLcdButtons
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004e8a g     F .text	0000004c IfxAsclin_resetModule
80008dc6 g     F .text	0000000a deserialize_sensor_packet
80006f9e g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
800006e0 g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006d54 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
80000130 g     O .rodata	00000008 osEE_cdb_var
8000add2 g     F .text	00000112 .hidden __pack_d
800009a0 g     O .rodata	00000020 IfxAsclin_cfg_indexMap
800099c0 g     F .text	000000ac StartOS
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000d10 g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000be4 g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
8000b062 g     F .text	0000000e free
80000b40 g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d842 g     F .text	00000082 __multadd
8000d830 g     F .text	00000012 _Bfree
80000700 g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
80008970 g     F .text	00000162 printInfoDisplay
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 93 47 	ja 80008f26 <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001200 <__TRAPTAB>:
80001200:	00 a0       	debug 
80001202:	1d ff ff ff 	j 80001200 <__TRAPTAB>
	...

80001220 <osEE_tc_trap_protection>:
80001220:	00 a0       	debug 
80001222:	1d ff ff ff 	j 80001220 <osEE_tc_trap_protection>
	...

80001240 <osEE_tc_trap_instruction>:
80001240:	00 a0       	debug 
80001242:	1d ff ff ff 	j 80001240 <osEE_tc_trap_instruction>
	...

80001260 <osEE_tc_trap_context>:
80001260:	00 a0       	debug 
80001262:	1d ff ff ff 	j 80001260 <osEE_tc_trap_context>
	...

80001280 <osEE_tc_trap_bus>:
80001280:	00 a0       	debug 
80001282:	1d ff ff ff 	j 80001280 <osEE_tc_trap_bus>
	...

800012a0 <osEE_tc_trap_assertion>:
800012a0:	00 a0       	debug 
800012a2:	1d ff ff ff 	j 800012a0 <osEE_tc_trap_assertion>
	...

800012c0 <osEE_tc_trap_system>:
800012c0:	00 a0       	debug 
800012c2:	1d ff ff ff 	j 800012c0 <osEE_tc_trap_system>
	...

800012e0 <osEE_tc_trap_nmi>:
800012e0:	00 a0       	debug 
800012e2:	1d ff ff ff 	j 800012e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001300 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001308 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 44       	mov %d4,4
80002046:	1d 00 0e 3c 	j 80009862 <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr2_entry_4>:
80002080:	0d 00 00 02 	svlcx 
80002084:	82 14       	mov %d4,1
80002086:	1d 00 ee 3b 	j 80009862 <osEE_tc_isr2_wrapper>
	...

800020a0 <osEE_tc_isr2_entry_5>:
800020a0:	0d 00 00 02 	svlcx 
800020a4:	82 24       	mov %d4,2
800020a6:	1d 00 de 3b 	j 80009862 <osEE_tc_isr2_wrapper>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr2_entry_10>:
80002140:	0d 00 00 02 	svlcx 
80002144:	82 34       	mov %d4,3
80002146:	1d 00 8e 3b 	j 80009862 <osEE_tc_isr2_wrapper>
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
80002266:	1d 00 fe 3a 	j 80009862 <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <readLcdButtons>:
#include "bsw.h"



int readLcdButtons(void)
{
80004000:	20 08       	sub.a %sp,8
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004002:	82 34       	mov %d4,3
80004004:	6d 00 d7 02 	call 800045b2 <readADCValue>
    printfSerial("%d",adc_key_in);
80004008:	91 00 00 48 	movh.a %a4,32768
8000400c:	74 a2       	st.w [%sp],%d2
8000400e:	d9 44 28 00 	lea %a4,[%a4]40 <80000028 <_start+0x8>>

int readLcdButtons(void)
{
    unsigned adc_key_in;
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
80004012:	02 2f       	mov %d15,%d2
    printfSerial("%d",adc_key_in);
80004014:	6d 00 20 02 	call 80004454 <printfSerial>

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
80004018:	8b 4f 66 32 	lt.u %d3,%d15,100
        button_state = btnUP;
8000401c:	82 02       	mov %d2,0
    int button_state;
    adc_key_in = readADCValue(BUTTON_CH);
    printfSerial("%d",adc_key_in);

    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
8000401e:	df 03 17 80 	jne %d3,0,8000404c <readLcdButtons+0x4c>
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004022:	3b 80 3e 30 	mov %d3,1000
        button_state = btnRIGHT; 
80004026:	82 32       	mov %d2,3
    //adc_key_in = readADCValue(BUTTON_CH);
    if (adc_key_in < 100) {
        button_state = btnUP;
     
    } 
    else if (adc_key_in < 1000){
80004028:	3f 3f 12 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
8000402c:	3b 40 9c 30 	mov %d3,2500
        button_state = btnLEFT; 
80004030:	82 22       	mov %d2,2
     
    } 
    else if (adc_key_in < 1000){
        button_state = btnRIGHT; 
    }     
    else if (adc_key_in < 2500){ 
80004032:	3f 3f 0d 80 	jlt.u %d15,%d3,8000404c <readLcdButtons+0x4c>
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
80004036:	3b c0 da 30 	mov %d3,3500
8000403a:	3f 3f 08 80 	jlt.u %d15,%d3,8000404a <readLcdButtons+0x4a>
        button_state = btnDOWN; 
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
8000403e:	3b 00 fa 30 	mov %d3,4000
80004042:	0b 3f 30 f1 	lt.u %d15,%d15,%d3
80004046:	ea 42       	cmovn %d2,%d15,4
80004048:	00 90       	ret 
    }     
    else if (adc_key_in < 2500){ 
        button_state = btnLEFT; 
    } 
    else if (adc_key_in < 3500){ 
        button_state = btnDOWN; 
8000404a:	82 12       	mov %d2,1
    }  
    else if (adc_key_in >= 4000){ 
        button_state = btnNONE;  
    } 
    return button_state;
8000404c:	00 90       	ret 

8000404e <lcd_write4bits>:
    delay_ms(2);       
}

static void lcd_write4bits(uint8 data)
{
    IfxPort_setPinState(LCD_D4, (data & 0x01) ? IfxPort_State_high : IfxPort_State_low);
8000404e:	8f 14 00 21 	and %d2,%d4,1
80004052:	7b 10 00 f0 	movh %d15,1
80004056:	ab 1f a0 f2 	seln %d15,%d2,%d15,1
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000405a:	91 40 00 ff 	movh.a %a15,61444
8000405e:	06 4f       	sh %d15,4
80004060:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004064:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D5, (data & 0x02) ? IfxPort_State_high : IfxPort_State_low);
80004066:	8f 24 00 21 	and %d2,%d4,2
8000406a:	7b 80 00 f0 	movh %d15,8
8000406e:	91 40 00 ff 	movh.a %a15,61444
80004072:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004076:	ab 8f a0 f2 	seln %d15,%d2,%d15,8
8000407a:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D6, (data & 0x04) ? IfxPort_State_high : IfxPort_State_low);
8000407c:	8f 44 00 21 	and %d2,%d4,4
80004080:	7b 00 01 f0 	movh %d15,16
80004084:	ab 0f a1 f2 	seln %d15,%d2,%d15,16
80004088:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinState(LCD_D7, (data & 0x08) ? IfxPort_State_high : IfxPort_State_low);
8000408a:	8f 84 00 41 	and %d4,%d4,8
8000408e:	7b 00 02 f0 	movh %d15,32
80004092:	ab 0f a2 44 	seln %d4,%d4,%d15,32
80004096:	68 14       	st.w [%a15]4,%d4
80004098:	da 80       	mov %d15,128
8000409a:	68 1f       	st.w [%a15]4,%d15
#include "bsw.h"

static void lcd_pulse_enable(void)
{
    IfxPort_setPinHigh(LCD_E);
    delay_ms(2);       
8000409c:	82 24       	mov %d4,2
8000409e:	6d 00 36 01 	call 8000430a <delay_ms>
800040a2:	7b 00 08 f0 	movh %d15,128
800040a6:	68 1f       	st.w [%a15]4,%d15
    IfxPort_setPinLow(LCD_E);
    delay_ms(2);       
800040a8:	82 24       	mov %d4,2
800040aa:	1d 00 30 01 	j 8000430a <delay_ms>

800040ae <lcd_command>:
800040ae:	91 40 00 ff 	movh.a %a15,61444
800040b2:	7b 00 04 20 	movh %d2,64
800040b6:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
    lcd_pulse_enable();
}


static void lcd_command(uint8 cmd)
{
800040ba:	02 4f       	mov %d15,%d4
800040bc:	68 12       	st.w [%a15]4,%d2
    IfxPort_setPinLow(LCD_RS);
    lcd_write4bits(cmd >> 4);
800040be:	06 c4       	sh %d4,-4
800040c0:	5c c7       	call 8000404e <lcd_write4bits>
    lcd_write4bits(cmd & 0x0F);
800040c2:	8f ff 00 41 	and %d4,%d15,15
800040c6:	5c c4       	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800040c8:	82 54       	mov %d4,5
800040ca:	1d 00 20 01 	j 8000430a <delay_ms>

800040ce <lcd_clear>:
}


void lcd_clear(void)
{
    lcd_command(0x01);
800040ce:	82 14       	mov %d4,1
800040d0:	5c ef       	call 800040ae <lcd_command>
    delay_ms(5);       
800040d2:	82 54       	mov %d4,5
800040d4:	1d 00 1b 01 	j 8000430a <delay_ms>

800040d8 <lcd_init>:
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800040d8:	91 40 00 4f 	movh.a %a4,61444
800040dc:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040e0:	82 64       	mov %d4,6
800040e2:	3b 00 08 50 	mov %d5,128
800040e6:	6d 00 e2 0d 	call 80005caa <IfxPort_setPinMode>
800040ea:	91 40 00 4f 	movh.a %a4,61444
800040ee:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800040f2:	82 74       	mov %d4,7
800040f4:	3b 00 08 50 	mov %d5,128
800040f8:	6d 00 d9 0d 	call 80005caa <IfxPort_setPinMode>
800040fc:	91 40 00 4f 	movh.a %a4,61444
80004100:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80004104:	82 44       	mov %d4,4
80004106:	3b 00 08 50 	mov %d5,128
8000410a:	6d 00 d0 0d 	call 80005caa <IfxPort_setPinMode>
8000410e:	91 40 00 4f 	movh.a %a4,61444
80004112:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004116:	82 34       	mov %d4,3
80004118:	3b 00 08 50 	mov %d5,128
8000411c:	6d 00 c7 0d 	call 80005caa <IfxPort_setPinMode>
80004120:	91 40 00 4f 	movh.a %a4,61444
80004124:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004128:	82 44       	mov %d4,4
8000412a:	3b 00 08 50 	mov %d5,128
8000412e:	6d 00 be 0d 	call 80005caa <IfxPort_setPinMode>
80004132:	91 40 00 4f 	movh.a %a4,61444
80004136:	d9 44 00 8a 	lea %a4,[%a4]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
8000413a:	3b 00 08 50 	mov %d5,128
8000413e:	82 54       	mov %d4,5
80004140:	6d 00 b5 0d 	call 80005caa <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(LCD_D4, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D5, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D6, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(LCD_D7, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    delay_ms(100);  
80004144:	3b 40 06 40 	mov %d4,100
80004148:	6d 00 e1 00 	call 8000430a <delay_ms>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
8000414c:	91 40 00 ff 	movh.a %a15,61444
80004150:	d9 ff 00 8a 	lea %a15,[%a15]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
80004154:	7b 00 04 f0 	movh %d15,64
80004158:	68 1f       	st.w [%a15]4,%d15
8000415a:	7b 00 08 f0 	movh %d15,128
8000415e:	68 1f       	st.w [%a15]4,%d15

    IfxPort_setPinLow(LCD_RS);
    IfxPort_setPinLow(LCD_E);

    lcd_write4bits(0x03); delay_ms(10);  
80004160:	82 34       	mov %d4,3
80004162:	6d ff 76 ff 	call 8000404e <lcd_write4bits>
80004166:	3b a0 00 40 	mov %d4,10
8000416a:	6d 00 d0 00 	call 8000430a <delay_ms>
    lcd_write4bits(0x03); delay_ms(10);  
8000416e:	82 34       	mov %d4,3
80004170:	6d ff 6f ff 	call 8000404e <lcd_write4bits>
80004174:	3b a0 00 40 	mov %d4,10
80004178:	6d 00 c9 00 	call 8000430a <delay_ms>
    lcd_write4bits(0x03); delay_ms(5);   
8000417c:	82 34       	mov %d4,3
8000417e:	6d ff 68 ff 	call 8000404e <lcd_write4bits>
80004182:	82 54       	mov %d4,5
80004184:	6d 00 c3 00 	call 8000430a <delay_ms>
    lcd_write4bits(0x02); delay_ms(5);   
80004188:	82 24       	mov %d4,2
8000418a:	6d ff 62 ff 	call 8000404e <lcd_write4bits>
8000418e:	82 54       	mov %d4,5
80004190:	6d 00 bd 00 	call 8000430a <delay_ms>

    lcd_command(0x28);
80004194:	3b 80 02 40 	mov %d4,40
80004198:	5c 8b       	call 800040ae <lcd_command>
    lcd_command(0x0C);
8000419a:	3b c0 00 40 	mov %d4,12
8000419e:	5c 88       	call 800040ae <lcd_command>
    lcd_command(0x06);
800041a0:	82 64       	mov %d4,6
800041a2:	5c 86       	call 800040ae <lcd_command>
    lcd_clear();
800041a4:	1d ff 95 ff 	j 800040ce <lcd_clear>

800041a8 <lcd_goto>:
}


void lcd_goto(uint8 row, uint8 col)
{
    uint8 address = (row == 0) ? 0x00 : 0x40;
800041a8:	ab 04 a4 44 	seln %d4,%d4,%d4,64
    address += col;
800041ac:	42 54       	add %d4,%d5
    lcd_command(0x80 | address);
800041ae:	b7 14 99 43 	insert %d4,%d4,1,7,25
800041b2:	1d ff 7e ff 	j 800040ae <lcd_command>

800041b6 <lcd_print>:
800041b6:	91 40 00 cf 	movh.a %a12,61444
}


void lcd_print(const char *str)
{
800041ba:	40 4f       	mov.aa %a15,%a4
800041bc:	d9 cc 00 8a 	lea %a12,[%a12]-24064 <f003a200 <_SMALL_DATA4_+0x40032200>>
800041c0:	3b 00 04 80 	mov %d8,64
    while (*str)
800041c4:	79 ff 00 00 	ld.b %d15,[%a15]0
800041c8:	6e 11       	jz %d15,800041ea <lcd_print+0x34>
        lcd_data(*str++);
800041ca:	16 ff       	and %d15,255


static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
800041cc:	8f cf 1f 40 	sh %d4,%d15,-4
800041d0:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x40038004>>,%d8
800041d4:	6d ff 3d ff 	call 8000404e <lcd_write4bits>
    lcd_write4bits(data & 0x0F);
800041d8:	8f ff 00 41 	and %d4,%d15,15
800041dc:	6d ff 39 ff 	call 8000404e <lcd_write4bits>
    delay_ms(5);       
800041e0:	82 54       	mov %d4,5


void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
800041e2:	b0 1f       	add.a %a15,1
static void lcd_data(uint8 data)
{
    IfxPort_setPinHigh(LCD_RS);
    lcd_write4bits(data >> 4);
    lcd_write4bits(data & 0x0F);
    delay_ms(5);       
800041e4:	6d 00 93 00 	call 8000430a <delay_ms>
800041e8:	3c ee       	j 800041c4 <lcd_print+0xe>

void lcd_print(const char *str)
{
    while (*str)
        lcd_data(*str++);
}
800041ea:	00 90       	ret 

800041ec <ButtonISR>:


ISR2(ButtonISR)
{
    unsigned int buttonState;
    DisableAllInterrupts();
800041ec:	6d 00 51 2b 	call 8000988e <DisableAllInterrupts>
    osEE_tc_delay(5000);
800041f0:	3b 80 38 41 	mov %d4,5000
800041f4:	6d 00 23 2b 	call 8000983a <osEE_tc_delay>
    printfSerial("interuppt");
800041f8:	91 00 00 48 	movh.a %a4,32768
800041fc:	d9 44 2b 00 	lea %a4,[%a4]43 <8000002b <_start+0xb>>
80004200:	6d 00 2a 01 	call 80004454 <printfSerial>
    buttonState = readLcdButtons();
80004204:	6d ff fe fe 	call 80004000 <readLcdButtons>
    updateInfoState(buttonState);
80004208:	02 24       	mov %d4,%d2
8000420a:	6d 00 68 24 	call 80008ada <updateInfoState>

    osEE_tc_delay(3000);
8000420e:	3b 80 bb 40 	mov %d4,3000
80004212:	6d 00 14 2b 	call 8000983a <osEE_tc_delay>
    EnableAllInterrupts();
80004216:	1d 00 47 2b 	j 800098a4 <EnableAllInterrupts>

8000421a <FuncTaskUltrasonic>:
}

TASK(TaskUltrasonic)
{
8000421a:	20 08       	sub.a %sp,8
    printfSerial("ultrasonic:(%d)", getUltrasonic());
8000421c:	6d 00 68 26 	call 80008eec <getUltrasonic>
80004220:	91 00 00 48 	movh.a %a4,32768
80004224:	74 a2       	st.w [%sp],%d2
80004226:	d9 44 35 00 	lea %a4,[%a4]53 <80000035 <_start+0x15>>
8000422a:	1d 00 15 01 	j 80004454 <printfSerial>

8000422e <TimerISR>:
}

ISR2(TimerISR)
{
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000422e:	7b f0 00 40 	movh %d4,15
{
    printfSerial("ultrasonic:(%d)", getUltrasonic());
}

ISR2(TimerISR)
{
80004232:	20 28       	sub.a %sp,40
    static long c = -4;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004234:	1b 04 24 44 	addi %d4,%d4,16960
80004238:	6d 00 9c 2a 	call 80009770 <osEE_tc_stm_set_sr0_next_match>

    /************** ONE-TIME-TASK ********************/

    // code for packet uart send test//
    if (c % 2 == 1)
8000423c:	91 00 00 c7 	movh.a %a12,28672
80004240:	19 cf 00 00 	ld.w %d15,[%a12]0 <70000000 <__DSPR0_START>>
80004244:	82 22       	mov %d2,2
80004246:	4b 2f 01 22 	div %e2,%d15,%d2
8000424a:	df 13 4f 80 	jne %d3,1,800042e8 <TimerISR+0xba>
    {
        sendActuatorPacket(&sendActuatorPkt);
8000424e:	91 00 00 f7 	movh.a %a15,28672
80004252:	d9 ff 04 00 	lea %a15,[%a15]4 <70000004 <sendActuatorPkt>>
80004256:	40 f4       	mov.aa %a4,%a15
80004258:	6d 00 25 25 	call 80008ca2 <sendActuatorPacket>
        printfSerial("ActuatorPacket sent, chair=%d...",sendActuatorPkt.servo_chair++);
8000425c:	08 52       	ld.bu %d2,[%a15]5
8000425e:	0c f4       	ld.bu %d15,[%a15]4
80004260:	8f 82 00 20 	sh %d2,%d2,8
80004264:	a6 f2       	or %d2,%d15
80004266:	9a 12       	add %d15,%d2,1
80004268:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000426c:	91 00 00 48 	movh.a %a4,32768
80004270:	28 4f       	st.b [%a15]4,%d15
80004272:	06 8f       	sh %d15,-8
80004274:	28 5f       	st.b [%a15]5,%d15
80004276:	74 a2       	st.w [%sp],%d2
80004278:	d9 44 05 10 	lea %a4,[%a4]69 <80000045 <_start+0x25>>
8000427c:	6d 00 ec 00 	call 80004454 <printfSerial>
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
            g_RecievedActuatorPacket.start_byte,
80004280:	91 00 00 27 	movh.a %a2,28672
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
80004284:	39 2f c8 10 	ld.bu %d15,[%a2]3144 <70000c48 <g_RecievedActuatorPacket>>
            g_RecievedActuatorPacket.start_byte,
80004288:	d9 2f c8 10 	lea %a15,[%a2]3144 <70000c48 <g_RecievedActuatorPacket>>
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
8000428c:	78 00       	st.w [%sp]0,%d15
8000428e:	0c f1       	ld.bu %d15,[%a15]1
80004290:	91 00 00 48 	movh.a %a4,32768
80004294:	78 01       	st.w [%sp]4,%d15
            g_RecievedActuatorPacket.start_byte,
            g_RecievedActuatorPacket.packet_id,
            g_RecievedActuatorPacket.led_rgb,
80004296:	0c f2       	ld.bu %d15,[%a15]2
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
80004298:	d9 44 26 10 	lea %a4,[%a4]102 <80000066 <_start+0x46>>
8000429c:	16 07       	and %d15,7
8000429e:	78 02       	st.w [%sp]8,%d15
            g_RecievedActuatorPacket.start_byte,
            g_RecievedActuatorPacket.packet_id,
            g_RecievedActuatorPacket.led_rgb,
            g_RecievedActuatorPacket.fan,
800042a0:	0c f3       	ld.bu %d15,[%a15]3
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042a2:	8f 3f 00 21 	and %d2,%d15,3
800042a6:	59 a2 0c 00 	st.w [%sp]12,%d2
800042aa:	37 0f 61 21 	extr.u %d2,%d15,2,1
800042ae:	59 a2 10 00 	st.w [%sp]16,%d2
800042b2:	37 0f e1 21 	extr.u %d2,%d15,3,1
800042b6:	37 0f 64 f2 	extr.u %d15,%d15,4,4
800042ba:	59 a2 14 00 	st.w [%sp]20,%d2
800042be:	78 06       	st.w [%sp]24,%d15
            g_RecievedActuatorPacket.led_rgb,
            g_RecievedActuatorPacket.fan,
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
800042c0:	0c f5       	ld.bu %d15,[%a15]5
800042c2:	08 42       	ld.bu %d2,[%a15]4
800042c4:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042c8:	a6 2f       	or %d15,%d2
800042ca:	78 07       	st.w [%sp]28,%d15
            g_RecievedActuatorPacket.fan,
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
            g_RecievedActuatorPacket.servo_window,
800042cc:	0c f7       	ld.bu %d15,[%a15]7
800042ce:	08 62       	ld.bu %d2,[%a15]6
800042d0:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042d4:	a6 2f       	or %d15,%d2
800042d6:	78 08       	st.w [%sp]32,%d15
            g_RecievedActuatorPacket.led,
            g_RecievedActuatorPacket.buzzer,
            g_RecievedActuatorPacket.driving_mode,
            g_RecievedActuatorPacket.servo_chair,
            g_RecievedActuatorPacket.servo_window,
            g_RecievedActuatorPacket.servo_air);   
800042d8:	0c f9       	ld.bu %d15,[%a15]9
800042da:	08 82       	ld.bu %d2,[%a15]8
800042dc:	8f 8f 00 f0 	sh %d15,%d15,8
        //     .packet_id = 0x02,
        //     .photo = 2048,
        //     .ultra_sonic1 = 33333,
        //     .ultra_sonic2 = 44444};

        printfSerial("\n[ start:%02x id:%02x led:%d fan:%d buzz:%d led:%d mode:%d chair:%d window:%d air:%d ]",
800042e0:	a6 2f       	or %d15,%d2
800042e2:	78 09       	st.w [%sp]36,%d15
800042e4:	6d 00 b8 00 	call 80004454 <printfSerial>
            g_RecievedActuatorPacket.servo_air);   
    }
    // code for packet uart send test end//

    /************** basic-TASK (every 1s) ********************/
    printfSerial("\n%4ld: ", c++);
800042e8:	19 cf 00 00 	ld.w %d15,[%a12]0 <70000000 <__DSPR0_START>>
800042ec:	91 00 00 48 	movh.a %a4,32768
800042f0:	78 00       	st.w [%sp]0,%d15
800042f2:	d9 44 3d 20 	lea %a4,[%a4]189 <800000bd <_start+0x9d>>
800042f6:	c2 1f       	add %d15,1
800042f8:	59 cf 00 00 	st.w [%a12]0 <70000000 <__DSPR0_START>>,%d15
800042fc:	6d 00 ac 00 	call 80004454 <printfSerial>
    ActivateTask(TaskUltrasonic);
80004300:	82 54       	mov %d4,5

    
80004302:	d9 aa 28 00 	lea %sp,[%sp]40
    }
    // code for packet uart send test end//

    /************** basic-TASK (every 1s) ********************/
    printfSerial("\n%4ld: ", c++);
    ActivateTask(TaskUltrasonic);
80004306:	1d 00 c0 2b 	j 80009a86 <ActivateTask>

8000430a <delay_ms>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
8000430a:	02 4a       	mov %d10,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
8000430c:	6d 00 b6 0e 	call 80006078 <IfxScuCcu_getSourceFrequency>
80004310:	91 30 00 ff 	movh.a %a15,61443
80004314:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80004318:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000431a:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
8000431e:	37 04 64 44 	extr.u %d4,%d4,8,4
80004322:	53 1f 40 00 	mul.u %e0,%d15,1
80004326:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
8000432a:	8f 0f 40 61 	or %d6,%d15,0
8000432e:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_ms = freq / 1000;
80004332:	3b 80 3e 40 	mov %d4,1000
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void delay_ms(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
80004336:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_ms = freq / 1000;
8000433a:	4b 42 11 22 	div.u %e2,%d2,%d4
8000433e:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_ms;
80004342:	73 a2 68 40 	mul.u %e4,%d2,%d10
80004346:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000434a:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
8000434e:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80004352:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80004356:	8f 0f 40 81 	or %d8,%d15,0
8000435a:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
8000435e:	0b 68 c0 20 	subx %d2,%d8,%d6
80004362:	0b 79 d0 30 	subc %d3,%d9,%d7
80004366:	3a 53       	eq %d15,%d3,%d5
80004368:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
8000436c:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
80004370:	ee ed       	jnz %d15,8000434a <delay_ms+0x40>
}
80004372:	00 90       	ret 

80004374 <delay_us>:

void delay_us(unsigned long delay)
{
80004374:	02 4a       	mov %d10,%d4
80004376:	6d 00 81 0e 	call 80006078 <IfxScuCcu_getSourceFrequency>
8000437a:	91 30 00 ff 	movh.a %a15,61443
8000437e:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80004382:	48 04       	ld.w %d4,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004384:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80004388:	37 04 64 44 	extr.u %d4,%d4,8,4
8000438c:	53 1f 40 00 	mul.u %e0,%d15,1
80004390:	4b 04 41 41 	itof %d4,%d4
    result |= ((uint64)stm->CAP.U) << 32;
80004394:	8f 0f 40 61 	or %d6,%d15,0
80004398:	4b 42 51 20 	div.f %d2,%d2,%d4
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
    uint64 ticks_per_us = freq / 1000000;
8000439c:	7b f0 00 40 	movh %d4,15
800043a0:	1b 04 24 44 	addi %d4,%d4,16960
    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
}

void delay_us(unsigned long delay)
{
    uint32 freq = IfxStm_getFrequency(&MODULE_STM0);
800043a4:	4b 02 71 21 	ftouz %d2,%d2
    uint64 ticks_per_us = freq / 1000000;
800043a8:	4b 42 11 22 	div.u %e2,%d2,%d4
800043ac:	85 f3 2c 00 	ld.w %d3,f000002c <_SMALL_DATA4_+0x3fff802c>
    uint64 start = IfxStm_get(&MODULE_STM0);
    uint64 wait_ticks = delay * ticks_per_us;
800043b0:	73 a2 68 40 	mul.u %e4,%d2,%d10
800043b4:	0f 13 a0 70 	or %d7,%d3,%d1

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800043b8:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800043bc:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
800043c0:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
800043c4:	8f 0f 40 81 	or %d8,%d15,0
800043c8:	0f 32 a0 90 	or %d9,%d2,%d3

    while ((IfxStm_get(&MODULE_STM0) - start) < wait_ticks);
800043cc:	0b 68 c0 20 	subx %d2,%d8,%d6
800043d0:	0b 79 d0 30 	subc %d3,%d9,%d7
800043d4:	3a 53       	eq %d15,%d3,%d5
800043d6:	0b 42 30 f2 	and.lt.u %d15,%d2,%d4
800043da:	0b 53 a0 f2 	or.lt.u %d15,%d3,%d5
800043de:	ee ed       	jnz %d15,800043b8 <delay_us+0x44>
}
800043e0:	00 90       	ret 

800043e2 <UART_init>:

void UART_init(void)
{
800043e2:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800043e4:	d9 a4 24 00 	lea %a4,[%sp]36
800043e8:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
800043ec:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
800043ee:	6d 00 e9 09 	call 800057c0 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
800043f2:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
800043f6:	7b 10 7e f4 	movh %d15,18401
800043fa:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
800043fc:	82 3f       	mov %d15,3
800043fe:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
80004402:	da 13       	mov %d15,19
80004404:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80004408:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
8000440c:	7b 00 00 28 	movh %d2,32768
80004410:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004412:	37 0f 63 f0 	extr.u %d15,%d15,0,3
80004416:	d9 af 04 00 	lea %a15,[%sp]4
8000441a:	40 f4       	mov.aa %a4,%a15
8000441c:	d9 32 08 30 	lea %a2,[%a3]200
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
80004420:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
80004424:	a0 33       	mov.a %a3,3
80004426:	09 22 48 01 	ld.d %e2,[%a2+]8
8000442a:	89 42 48 01 	st.d [%a4+]8,%e2
8000442e:	fc 3c       	loop %a3,80004426 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
80004430:	7b 00 00 f7 	movh %d15,28672
80004434:	1b cf 97 f0 	addi %d15,%d15,2428
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004438:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
8000443c:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000443e:	d9 44 90 f0 	lea %a4,[%a4]3024 <70000bd0 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004442:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004446:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
8000444a:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
8000444e:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004450:	1d 00 e1 07 	j 80005412 <IfxAsclin_Asc_initModule>

80004454 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004454:	20 e8       	sub.a %sp,232
80004456:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80004458:	6d 00 26 2a 	call 800098a4 <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
8000445c:	40 f5       	mov.aa %a5,%a15
8000445e:	d9 a4 28 10 	lea %a4,[%sp]104
80004462:	3b 00 08 40 	mov %d4,128
80004466:	d9 a6 28 30 	lea %a6,[%sp]232
8000446a:	6d 00 90 38 	call 8000b58a <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
8000446e:	d9 a4 28 10 	lea %a4,[%sp]104
80004472:	6d 00 5d 38 	call 8000b52c <strlen>
80004476:	91 00 00 f7 	movh.a %a15,28672
8000447a:	d9 ff bc 50 	lea %a15,[%a15]2428 <7000097c <g_AsclinAsc>>
8000447e:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x168>>,%d2
    unsigned int i =0;
80004482:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80004484:	d9 a4 28 10 	lea %a4,[%sp]104
80004488:	6d 00 52 38 	call 8000b52c <strlen>
8000448c:	7f 2f 0c 80 	jge.u %d15,%d2,800044a4 <printfSerial+0x50>
        txData[i] = buf[i];
80004490:	d9 a3 04 00 	lea %a3,[%sp]4
80004494:	10 32       	addsc.a %a2,%a3,%d15,0
80004496:	d9 a3 28 10 	lea %a3,[%sp]104
8000449a:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
8000449c:	c2 1f       	add %d15,1
        txData[i] = buf[i];
8000449e:	08 02       	ld.bu %d2,[%a15]0
800044a0:	34 22       	st.b [%a2],%d2
800044a2:	3c f1       	j 80004484 <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
800044a4:	91 00 00 47 	movh.a %a4,28672
800044a8:	91 00 00 67 	movh.a %a6,28672
800044ac:	82 f4       	mov %d4,-1
800044ae:	d9 44 90 f0 	lea %a4,[%a4]3024 <70000bd0 <g_AsclinAsc+0x254>>
800044b2:	d9 a5 04 00 	lea %a5,[%sp]4 <70000bd0 <g_AsclinAsc+0x254>>
800044b6:	d9 66 ac f0 	lea %a6,[%a6]3052 <70000bec <g_AsclinAsc+0x270>>
800044ba:	9b 04 00 58 	addih %d5,%d4,32768
800044be:	1d 00 e9 09 	j 80005890 <IfxAsclin_Asc_write>

800044c2 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
800044c2:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
800044c4:	d9 a4 04 00 	lea %a4,[%sp]4
800044c8:	91 20 00 5f 	movh.a %a5,61442
800044cc:	6d 00 bd 1d 	call 80008046 <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
800044d0:	91 00 00 47 	movh.a %a4,28672
800044d4:	d9 44 ac 50 	lea %a4,[%a4]2412 <7000096c <g_vadc>>
800044d8:	d9 a5 04 00 	lea %a5,[%sp]4 <7000096c <g_vadc>>
800044dc:	1d 00 41 1d 	j 80007f5e <IfxVadc_Adc_initModule>

800044e0 <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
800044e0:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
800044e2:	91 00 00 57 	movh.a %a5,28672
800044e6:	40 a4       	mov.aa %a4,%sp
800044e8:	d9 55 ac 50 	lea %a5,[%a5]2412 <7000096c <g_vadc>>
800044ec:	6d 00 22 1d 	call 80007f30 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800044f0:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044f2:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
800044f6:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
800044f8:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
800044fa:	d9 44 a0 50 	lea %a4,[%a4]2400 <70000960 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
800044fe:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004500:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
80004502:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
80004506:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
8000450a:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
8000450e:	1d 00 4c 1b 	j 80007ba6 <IfxVadc_Adc_initGroup>

80004512 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004512:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004516:	7b 00 00 b7 	movh %d11,28672
8000451a:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
8000451e:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
80004522:	20 60       	sub.a %sp,96
80004524:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004526:	d9 ee a0 50 	lea %a14,[%a14]2400 <70000960 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000452a:	1b 0b 01 b0 	addi %d11,%d11,16
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
8000452e:	82 19       	mov %d9,1
80004530:	1b 0a 94 a0 	addi %d10,%d10,2368
80004534:	d9 dd ac 50 	lea %a13,[%a13]2412
80004538:	53 8f 21 80 	mul %d8,%d15,24
8000453c:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
8000453e:	40 e5       	mov.aa %a5,%a14
80004540:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004542:	d9 af 20 10 	lea %a15,[%sp]96
80004546:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004548:	40 c4       	mov.aa %a4,%a12
8000454a:	6d 00 23 1b 	call 80007b90 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000454e:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
80004550:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004552:	30 3f       	add.a %a15,%a3
80004554:	60 b3       	mov.a %a3,%d11
80004556:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
80004558:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000455c:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000455e:	60 a2       	mov.a %a2,%d10
80004560:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
80004562:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
80004566:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
8000456a:	6d 00 1d 1a 	call 800079a4 <IfxVadc_Adc_initChannel>
8000456e:	d4 d2       	ld.a %a2,[%a13]
80004570:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <sendActuatorPkt+0x4>>
80004574:	c2 1f       	add %d15,1
80004576:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
8000457a:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
8000457e:	19 23 00 60 	ld.w %d3,[%a2]384
80004582:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
80004586:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
8000458a:	df 4f d7 ff 	jne %d15,4,80004538 <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
8000458e:	00 90       	ret 

80004590 <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
80004590:	91 00 00 f7 	movh.a %a15,28672
}

/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
80004594:	6d ff 97 ff 	call 800044c2 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
80004598:	6d ff a4 ff 	call 800044e0 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
8000459c:	6d ff bb ff 	call 80004512 <initVADCChannels>
800045a0:	99 ff ac 50 	ld.a %a15,[%a15]2412 <7000096c <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
800045a4:	19 ff 04 80 	ld.w %d15,[%a15]516 <7000096c <g_vadc>>
800045a8:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
800045ac:	59 ff 04 80 	st.w [%a15]516,%d15
800045b0:	00 90       	ret 

800045b2 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
800045b2:	91 00 00 f7 	movh.a %a15,28672
800045b6:	d9 ff 80 50 	lea %a15,[%a15]2368 <70000940 <g_vadcChannel>>
800045ba:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
800045be:	c8 12       	ld.a %a2,[%a15]4
800045c0:	0c f1       	ld.bu %d15,[%a15]1
800045c2:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
800045c6:	1b 0f 0a f0 	addi %d15,%d15,160
800045ca:	90 2f       	addsc.a %a15,%a2,%d15,2
800045cc:	4c f0       	ld.w %d15,[%a15]0
800045ce:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
800045d2:	ff 0f fd 7f 	jge %d15,0,800045cc <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
800045d6:	00 90       	ret 

800045d8 <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
800045d8:	91 40 00 4f 	movh.a %a4,61444
800045dc:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
800045e0:	82 74       	mov %d4,7
800045e2:	3b 00 01 50 	mov %d5,16
800045e6:	6d 00 62 0b 	call 80005caa <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
800045ea:	91 00 00 f8 	movh.a %a15,32768
800045ee:	d9 ff bc e0 	lea %a15,[%a15]3004 <80000bbc <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
800045f2:	c8 24       	ld.a %a4,[%a15]8
800045f4:	91 00 00 d7 	movh.a %a13,28672
800045f8:	08 c4       	ld.bu %d4,[%a15]12
800045fa:	3b 80 00 50 	mov %d5,8
800045fe:	b5 df b0 50 	st.a [%a13]2416 <70000970 <g_ERUconfig>>,%a15
80004602:	6d 00 54 0b 	call 80005caa <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
80004606:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
8000460a:	08 44       	ld.bu %d4,[%a15]4
8000460c:	6d 00 fd 14 	call 80007006 <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
80004610:	99 df b0 50 	ld.a %a15,[%a13]2416 <70000970 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
80004614:	d9 dc b0 50 	lea %a12,[%a13]2416 <70000970 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
80004618:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
8000461a:	08 44       	ld.bu %d4,[%a15]4
8000461c:	e9 c4 04 00 	st.b [%a12]4 <70000004 <sendActuatorPkt>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
80004620:	6d 00 63 14 	call 80006ee6 <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
80004624:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
80004628:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
8000462a:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
8000462c:	6d 00 96 14 	call 80006f58 <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
80004630:	39 c4 04 00 	ld.bu %d4,[%a12]4
80004634:	39 c5 05 00 	ld.bu %d5,[%a12]5
80004638:	6d 00 ca 13 	call 80006dcc <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
8000463c:	39 c4 06 00 	ld.bu %d4,[%a12]6
80004640:	82 15       	mov %d5,1
80004642:	6d 00 1b 15 	call 80007078 <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
80004646:	0c c6       	ld.bu %d15,[%a12]6
80004648:	16 03       	and %d15,3
8000464a:	06 2f       	sh %d15,2
8000464c:	60 f2       	mov.a %a2,%d15
8000464e:	d9 2f d4 38 	lea %a15,[%a2]-29484
80004652:	11 4f 00 ff 	addih.a %a15,%a15,61444
80004656:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80004658:	4c f0       	ld.w %d15,[%a15]0
8000465a:	b7 af 08 f0 	insert %d15,%d15,10,0,8
8000465e:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
80004660:	4c f0       	ld.w %d15,[%a15]0
80004662:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
80004666:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80004668:	4c f0       	ld.w %d15,[%a15]0
8000466a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000466e:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80004670:	4c f0       	ld.w %d15,[%a15]0
80004672:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80004676:	68 0f       	st.w [%a15]0,%d15
80004678:	00 90       	ret 

8000467a <asclin3TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin3TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
8000467a:	91 00 00 47 	movh.a %a4,28672
8000467e:	d9 44 90 f0 	lea %a4,[%a4]3024 <70000bd0 <g_AsclinAsc+0x254>>
80004682:	1d 00 0d 06 	j 8000529c <IfxAsclin_Asc_isrTransmit>

80004686 <main>:
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
80004686:	6d 00 19 28 	call 800096b8 <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
8000468a:	7b f0 00 40 	movh %d4,15
8000468e:	82 15       	mov %d5,1
80004690:	1b 04 24 44 	addi %d4,%d4,16960
80004694:	6d 00 2c 28 	call 800096ec <osEE_tc_stm_set_sr0>

    UART_init();
80004698:	6d ff a5 fe 	call 800043e2 <UART_init>
    initADC();
8000469c:	6d ff 7a ff 	call 80004590 <initADC>
    initPeripheralsAndERU();
800046a0:	6d ff 9c ff 	call 800045d8 <initPeripheralsAndERU>
    
    /* custom driver init() added start*/
    lcd_init();
800046a4:	6d ff 1a fd 	call 800040d8 <lcd_init>
    initUltrasonic();
800046a8:	6d 00 b8 23 	call 80008e18 <initUltrasonic>
    initUartDriver();
800046ac:	6d 00 66 22 	call 80008b78 <initUartDriver>
    /* custom driver added end*/

    printfSerial("\n...............\n");
800046b0:	91 00 00 48 	movh.a %a4,32768
800046b4:	d9 44 28 30 	lea %a4,[%a4]232 <800000e8 <_start+0xc8>>
800046b8:	6d ff ce fe 	call 80004454 <printfSerial>
    printfSerial("...OS Starts...\n");
800046bc:	91 00 00 48 	movh.a %a4,32768
800046c0:	d9 44 3a 30 	lea %a4,[%a4]250 <800000fa <_start+0xda>>
800046c4:	6d ff c8 fe 	call 80004454 <printfSerial>
    printfSerial("...............\n");
800046c8:	91 00 00 48 	movh.a %a4,32768
800046cc:	d9 44 0b 40 	lea %a4,[%a4]267 <8000010b <_start+0xeb>>
800046d0:	6d ff c2 fe 	call 80004454 <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
800046d4:	82 04       	mov %d4,0
800046d6:	6d 00 75 29 	call 800099c0 <StartOS>
    return 0;
}
800046da:	82 02       	mov %d2,0
800046dc:	00 90       	ret 
	...

800046e0 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800046e0:	02 4f       	mov %d15,%d4
800046e2:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046e4:	6d 00 6d 16 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800046e8:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800046ea:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800046ec:	6d 00 66 15 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800046f0:	8b 0f a2 22 	ge.u %d2,%d15,32
800046f4:	f6 28       	jnz %d2,80004704 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
800046f6:	19 f2 08 20 	ld.w %d2,[%a15]136
800046fa:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800046fe:	59 ff 08 20 	st.w [%a15]136,%d15
80004702:	3c 08       	j 80004712 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
80004704:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004708:	16 1f       	and %d15,31
8000470a:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
8000470e:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
80004712:	02 84       	mov %d4,%d8
80004714:	1d 00 d8 16 	j 800074c4 <IfxScuWdt_setSafetyEndinit>

80004718 <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004718:	02 4f       	mov %d15,%d4
8000471a:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000471c:	6d 00 51 16 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
80004720:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004722:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
80004724:	6d 00 4a 15 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
80004728:	8b 0f a2 22 	ge.u %d2,%d15,32
8000472c:	f6 28       	jnz %d2,8000473c <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
8000472e:	19 f2 08 20 	ld.w %d2,[%a15]136
80004732:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80004736:	59 ff 08 20 	st.w [%a15]136,%d15
8000473a:	3c 08       	j 8000474a <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
8000473c:	19 f2 0c 20 	ld.w %d2,[%a15]140
80004740:	16 1f       	and %d15,31
80004742:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80004746:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
8000474a:	02 84       	mov %d4,%d8
8000474c:	1d 00 bc 16 	j 800074c4 <IfxScuWdt_setSafetyEndinit>

80004750 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
80004750:	82 0f       	mov %d15,0
80004752:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004756:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
8000475a:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000475e:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
80004760:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004764:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
80004768:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000476c:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
80004770:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004774:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
80004776:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000477a:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000477c:	6d ff ce ff 	call 80004718 <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
80004780:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004784:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004788:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
8000478a:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000478e:	3b f0 00 40 	mov %d4,15
80004792:	1d ff a7 ff 	j 800046e0 <IfxVadc_disableAccess>

80004796 <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
80004796:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
80004798:	ff 84 1c 80 	jge.u %d4,8,800047d0 <IfxVadc_disablePostCalibration+0x3a>
8000479c:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000479e:	3b f0 01 40 	mov %d4,31
800047a2:	02 58       	mov %d8,%d5
800047a4:	6d ff ba ff 	call 80004718 <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
800047a8:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
800047ac:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
800047b0:	82 1f       	mov %d15,1
800047b2:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
800047b6:	df 18 04 80 	jne %d8,1,800047be <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
800047ba:	a6 2f       	or %d15,%d2
800047bc:	3c 03       	j 800047c2 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
800047be:	0f f2 e0 f0 	andn %d15,%d2,%d15
800047c2:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047c6:	40 f4       	mov.aa %a4,%a15
800047c8:	3b f0 01 40 	mov %d4,31
800047cc:	1d ff 8a ff 	j 800046e0 <IfxVadc_disableAccess>
800047d0:	00 90       	ret 

800047d2 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
800047d2:	40 4f       	mov.aa %a15,%a4
800047d4:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800047d6:	6d 00 d6 15 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800047da:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800047dc:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800047de:	6d 00 d2 14 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047e2:	40 f4       	mov.aa %a4,%a15
800047e4:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
800047e8:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800047ec:	6d ff 96 ff 	call 80004718 <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
800047f0:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
800047f4:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047f8:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
800047fa:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800047fe:	3b f0 01 40 	mov %d4,31
80004802:	6d ff 6f ff 	call 800046e0 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
80004806:	df 08 1a 80 	jne %d8,0,8000483a <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
8000480a:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
8000480e:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
80004812:	82 4f       	mov %d15,4
80004814:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004818:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
8000481c:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
80004820:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
80004824:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004828:	3b 00 20 f4 	mov %d15,16896
8000482c:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
80004830:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
80004834:	8f 8f c3 f1 	andn %d15,%d15,56
80004838:	3c 1d       	j 80004872 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
8000483a:	df 18 1e 80 	jne %d8,1,80004876 <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
8000483e:	82 0f       	mov %d15,0
80004840:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
80004844:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
80004848:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
8000484c:	82 4f       	mov %d15,4
8000484e:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004852:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
80004856:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
8000485a:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
8000485e:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004862:	3b 00 20 f4 	mov %d15,16896
80004866:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000486a:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
8000486e:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
80004872:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80004876:	02 94       	mov %d4,%d9
80004878:	1d 00 ba 15 	j 800073ec <IfxScuWdt_setCpuEndinit>

8000487c <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
8000487c:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
8000487e:	6d 00 be 0c 	call 800061fa <IfxScuCcu_getSpbFrequency>
80004882:	19 ff 00 20 	ld.w %d15,[%a15]128
80004886:	16 1f       	and %d15,31
80004888:	c2 1f       	add %d15,1
8000488a:	4b 0f 41 f1 	itof %d15,%d15
}
8000488e:	4b f2 51 20 	div.f %d2,%d2,%d15
80004892:	00 90       	ret 

80004894 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80004894:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
80004896:	6d 00 b2 0c 	call 800061fa <IfxScuCcu_getSpbFrequency>
8000489a:	19 ff 00 20 	ld.w %d15,[%a15]128
8000489e:	37 0f 62 f4 	extr.u %d15,%d15,8,2
800048a2:	c2 1f       	add %d15,1
800048a4:	4b 0f 41 f1 	itof %d15,%d15
}
800048a8:	4b f2 51 20 	div.f %d2,%d2,%d15
800048ac:	00 90       	ret 

800048ae <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
800048ae:	1d 00 a6 0c 	j 800061fa <IfxScuCcu_getSpbFrequency>

800048b2 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
800048b2:	82 0f       	mov %d15,0
800048b4:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
800048b6:	1b 0f 07 20 	addi %d2,%d15,112
800048ba:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
800048be:	54 22       	ld.w %d2,[%a2]
800048c0:	f6 24       	jnz %d2,800048c8 <IfxVadc_getBackgroundScanStatus+0x16>
800048c2:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
800048c4:	fc f9       	loop %a15,800048b6 <IfxVadc_getBackgroundScanStatus+0x4>
800048c6:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
800048c8:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
800048ca:	00 90       	ret 

800048cc <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
800048cc:	19 42 08 20 	ld.w %d2,[%a4]136
800048d0:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
800048d4:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
800048d8:	06 22       	sh %d2,2
800048da:	00 90       	ret 

800048dc <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
800048dc:	df 15 09 00 	jeq %d5,1,800048ee <IfxVadc_getResultBasedOnRequestSource+0x12>
800048e0:	76 54       	jz %d5,800048e8 <IfxVadc_getResultBasedOnRequestSource+0xc>
800048e2:	df 25 0b 00 	jeq %d5,2,800048f8 <IfxVadc_getResultBasedOnRequestSource+0x1c>
800048e6:	3c 39       	j 80004958 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
800048e8:	19 5f 00 20 	ld.w %d15,[%a5]128
800048ec:	3c 03       	j 800048f2 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
800048ee:	19 5f 20 20 	ld.w %d15,[%a5]160
800048f2:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
800048f4:	ee 39       	jnz %d15,80004966 <IfxVadc_getResultBasedOnRequestSource+0x8a>
800048f6:	3c 31       	j 80004958 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
800048f8:	19 4f 00 80 	ld.w %d15,[%a4]512
800048fc:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
800048fe:	ee 34       	jnz %d15,80004966 <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
80004900:	1b 04 06 f0 	addi %d15,%d4,96
80004904:	90 5f       	addsc.a %a15,%a5,%d15,2
80004906:	4c f0       	ld.w %d15,[%a15]0
80004908:	ef 4f 28 00 	jz.t %d15,20,80004958 <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
8000490c:	19 42 00 c0 	ld.w %d2,[%a4]768
80004910:	82 0f       	mov %d15,0
80004912:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
80004916:	19 42 00 c0 	ld.w %d2,[%a4]768
8000491a:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
8000491e:	19 42 00 c0 	ld.w %d2,[%a4]768
80004922:	37 02 62 2e 	extr.u %d2,%d2,28,2
80004926:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
8000492a:	19 42 00 c0 	ld.w %d2,[%a4]768
8000492e:	37 02 e3 2c 	extr.u %d2,%d2,25,3
80004932:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
80004936:	19 42 00 c0 	ld.w %d2,[%a4]768
8000493a:	37 02 65 2a 	extr.u %d2,%d2,20,5
8000493e:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
80004942:	19 42 00 c0 	ld.w %d2,[%a4]768
80004946:	37 02 64 28 	extr.u %d2,%d2,16,4
8000494a:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
8000494e:	19 42 00 c0 	ld.w %d2,[%a4]768
80004952:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
80004956:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
80004958:	1b 04 06 40 	addi %d4,%d4,96
8000495c:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004960:	4c f0       	ld.w %d15,[%a15]0
80004962:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004966:	1b 0f 0a f0 	addi %d15,%d15,160
8000496a:	90 55       	addsc.a %a5,%a5,%d15,2
8000496c:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
8000496e:	00 90       	ret 

80004970 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
80004970:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
80004974:	ab 62 a0 22 	seln %d2,%d2,%d2,6
80004978:	00 90       	ret 

8000497a <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
8000497a:	bf 45 0a 80 	jlt.u %d5,4,8000498e <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
8000497e:	9a c5       	add %d15,%d5,-4
80004980:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004984:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
80004988:	da 08       	mov %d15,8
8000498a:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
8000498e:	13 44 20 45 	madd %d4,%d5,%d4,4
80004992:	91 00 00 f8 	movh.a %a15,32768
80004996:	d9 ff 10 90 	lea %a15,[%a15]592 <80000250 <IfxVadc_cfg_srcAddresses>>
8000499a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
8000499e:	c8 02       	ld.a %a2,[%a15]0
800049a0:	00 90       	ret 

800049a2 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800049a2:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
800049a6:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
800049a8:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800049ac:	3b f0 01 40 	mov %d4,31
800049b0:	6d ff b4 fe 	call 80004718 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
800049b4:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049b8:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800049ba:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049be:	3b f0 01 40 	mov %d4,31
800049c2:	1d ff 8f fe 	j 800046e0 <IfxVadc_disableAccess>

800049c6 <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
800049c6:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
800049ca:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
800049cc:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
800049d0:	3b f0 01 40 	mov %d4,31
800049d4:	6d ff a2 fe 	call 80004718 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
800049d8:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049dc:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
800049de:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800049e2:	3b f0 01 40 	mov %d4,31
800049e6:	1d ff 7d fe 	j 800046e0 <IfxVadc_disableAccess>

800049ea <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
800049ea:	02 4f       	mov %d15,%d4
800049ec:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800049ee:	6d 00 06 0c 	call 800061fa <IfxScuCcu_getSpbFrequency>
800049f2:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
800049f6:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800049fa:	82 3f       	mov %d15,3
800049fc:	c2 f4       	add %d4,-1
800049fe:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80004a02:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a06:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
80004a08:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
80004a0c:	6d ff cb ff 	call 800049a2 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
80004a10:	02 82       	mov %d2,%d8
80004a12:	00 90       	ret 

80004a14 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
80004a14:	02 4f       	mov %d15,%d4
80004a16:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
80004a18:	6d 00 f1 0b 	call 800061fa <IfxScuCcu_getSpbFrequency>
80004a1c:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
80004a20:	8f 22 00 40 	sh %d4,%d2,2
80004a24:	4b f4 11 42 	div.u %e4,%d4,%d15
80004a28:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
80004a2c:	c2 24       	add %d4,2
80004a2e:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
80004a30:	c2 f4       	add %d4,-1
80004a32:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
80004a36:	1b 14 00 30 	addi %d3,%d4,1
80004a3a:	4b 32 11 62 	div.u %e6,%d2,%d3
80004a3e:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
80004a40:	7b 10 13 60 	movh %d6,305
80004a44:	1b 16 d0 62 	addi %d6,%d6,11521
80004a48:	3f 6f 08 80 	jlt.u %d15,%d6,80004a58 <IfxVadc_initializeFAdcI+0x44>
80004a4c:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80004a50:	9a 14       	add %d15,%d4,1
80004a52:	4b f2 11 22 	div.u %e2,%d2,%d15
80004a56:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80004a58:	1b 0f ee 25 	addi %d2,%d15,24288
80004a5c:	7b a0 12 30 	movh %d3,298
80004a60:	9b 82 ff 2f 	addih %d2,%d2,65528
80004a64:	1b 13 be 38 	addi %d3,%d3,-29727
80004a68:	7f 32 06 80 	jge.u %d2,%d3,80004a74 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
80004a6c:	40 f4       	mov.aa %a4,%a15
80004a6e:	6d ff ac ff 	call 800049c6 <IfxVadc_initialiseAdcConverterClock>
80004a72:	3c 02       	j 80004a76 <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004a74:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004a76:	02 f2       	mov %d2,%d15
80004a78:	00 90       	ret 

80004a7a <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
80004a7a:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a7c:	ff 84 33 80 	jge.u %d4,8,80004ae2 <IfxVadc_isPostCalibration+0x68>
80004a80:	91 00 00 f8 	movh.a %a15,32768
80004a84:	d9 ff 94 a4 	lea %a15,[%a15]19092 <80004a94 <IfxVadc_isPostCalibration+0x1a>>
80004a88:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004a8c:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004a90:	dc 0f       	ji %a15
80004a92:	00 00       	nop 
80004a94:	1d 00 10 00 	j 80004ab4 <IfxVadc_isPostCalibration+0x3a>
80004a98:	1d 00 11 00 	j 80004aba <IfxVadc_isPostCalibration+0x40>
80004a9c:	1d 00 12 00 	j 80004ac0 <IfxVadc_isPostCalibration+0x46>
80004aa0:	1d 00 13 00 	j 80004ac6 <IfxVadc_isPostCalibration+0x4c>
80004aa4:	1d 00 14 00 	j 80004acc <IfxVadc_isPostCalibration+0x52>
80004aa8:	1d 00 15 00 	j 80004ad2 <IfxVadc_isPostCalibration+0x58>
80004aac:	1d 00 16 00 	j 80004ad8 <IfxVadc_isPostCalibration+0x5e>
80004ab0:	1d 00 17 00 	j 80004ade <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004ab4:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004ab8:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
80004aba:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
80004abe:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004ac0:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004ac4:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004ac6:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
80004aca:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
80004acc:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004ad0:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004ad2:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004ad6:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004ad8:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
80004adc:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
80004ade:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
80004ae2:	00 90       	ret 

80004ae4 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
80004ae4:	02 40       	mov %d0,%d4
80004ae6:	02 68       	mov %d8,%d6
80004ae8:	02 7a       	mov %d10,%d7
80004aea:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
80004aec:	ff 25 08 80 	jge.u %d5,2,80004afc <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
80004af0:	8f 80 00 f0 	sh %d15,%d0,8
80004af4:	42 f5       	add %d5,%d15
80004af6:	1b 85 12 50 	addi %d5,%d5,296
80004afa:	3c 03       	j 80004b00 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004afc:	1b 65 02 50 	addi %d5,%d5,38
80004b00:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
80004b04:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b06:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
80004b08:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
80004b0a:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
80004b0e:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
80004b12:	f6 24       	jnz %d2,80004b1a <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
80004b14:	1b 1f ff ff 	addi %d15,%d15,-15
80004b18:	06 4f       	sh %d15,4
80004b1a:	ff 63 35 80 	jge.u %d3,6,80004b84 <IfxVadc_getChannelConversionTime+0xa0>
80004b1e:	91 00 00 f8 	movh.a %a15,32768
80004b22:	d9 ff 08 90 	lea %a15,[%a15]584 <80000248 <CSWTCH.25>>
80004b26:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004b2a:	82 02       	mov %d2,0
80004b2c:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004b2e:	df 04 2f 80 	jne %d4,0,80004b8c <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
80004b32:	df 53 0d 00 	jeq %d3,5,80004b4c <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
80004b36:	02 04       	mov %d4,%d0
80004b38:	6d ff a1 ff 	call 80004a7a <IfxVadc_isPostCalibration>
80004b3c:	92 24       	add %d4,%d15,2
80004b3e:	ab 22 a0 22 	seln %d2,%d2,%d2,2
80004b42:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
80004b44:	42 24       	add %d4,%d2
80004b46:	4b 04 41 41 	itof %d4,%d4
80004b4a:	3c 04       	j 80004b52 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
80004b4c:	c2 4f       	add %d15,4
80004b4e:	4b 0f 41 41 	itof %d4,%d15
80004b52:	4b 84 51 40 	div.f %d4,%d4,%d8
80004b56:	6d 00 17 2e 	call 8000a784 <__extendsfdf2>
80004b5a:	02 a4       	mov %d4,%d10
80004b5c:	0b 23 10 88 	mov %e8,%d3,%d2
80004b60:	6d 00 12 2e 	call 8000a784 <__extendsfdf2>
80004b64:	b7 00 21 4f 	imask %e4,0,30,1
80004b68:	0b 23 10 68 	mov %e6,%d3,%d2
80004b6c:	6d 00 01 30 	call 8000ab6e <__divdf3>
80004b70:	0b 89 10 48 	mov %e4,%d9,%d8
80004b74:	0b 23 10 68 	mov %e6,%d3,%d2
80004b78:	6d 00 ed 2e 	call 8000a952 <__adddf3>
80004b7c:	0b 23 10 48 	mov %e4,%d3,%d2
80004b80:	1d 00 b6 30 	j 8000acec <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004b84:	82 09       	mov %d9,0
80004b86:	df 04 d8 7f 	jeq %d4,0,80004b36 <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004b8a:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004b8c:	00 90       	ret 

80004b8e <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004b8e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b90:	6d 00 f9 13 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004b94:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004b96:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004b98:	6d 00 f5 12 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b9c:	3b f0 01 40 	mov %d4,31
80004ba0:	40 f4       	mov.aa %a4,%a15
80004ba2:	6d ff bb fd 	call 80004718 <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004ba6:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004ba8:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004baa:	8f 12 40 21 	or %d2,%d2,1
80004bae:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004bb0:	48 d2       	ld.w %d2,[%a15]52
80004bb2:	8f 12 40 21 	or %d2,%d2,1
80004bb6:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004bb8:	6d 00 1a 14 	call 800073ec <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004bbc:	48 d2       	ld.w %d2,[%a15]52
80004bbe:	6f 12 ff 7f 	jz.t %d2,1,80004bbc <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004bc2:	02 f4       	mov %d4,%d15
80004bc4:	6d 00 df 12 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004bc8:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bca:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004bce:	8f 12 40 21 	or %d2,%d2,1
80004bd2:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bd4:	40 f4       	mov.aa %a4,%a15
80004bd6:	6d ff 85 fd 	call 800046e0 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004bda:	02 f4       	mov %d4,%d15
80004bdc:	1d 00 08 14 	j 800073ec <IfxScuWdt_setCpuEndinit>

80004be0 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004be0:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80004be4:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004be6:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bea:	3b f0 01 40 	mov %d4,31
80004bee:	6d ff 95 fd 	call 80004718 <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
80004bf2:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bf6:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004bf8:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004bfc:	3b f0 01 40 	mov %d4,31
80004c00:	1d ff 70 fd 	j 800046e0 <IfxVadc_disableAccess>

80004c04 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80004c04:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004c08:	df 04 23 00 	jeq %d4,0,80004c4e <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004c0c:	19 42 04 00 	ld.w %d2,[%a4]4
80004c10:	0f f4 00 40 	sh %d4,%d4,%d15
80004c14:	a6 24       	or %d4,%d2
80004c16:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004c1a:	19 42 04 00 	ld.w %d2,[%a4]4
80004c1e:	06 27       	sh %d7,2
80004c20:	82 3f       	mov %d15,3
80004c22:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004c26:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004c2a:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004c2c:	4c 41       	ld.w %d15,[%a4]4
80004c2e:	0f 75 00 50 	sh %d5,%d5,%d7
80004c32:	a6 f5       	or %d5,%d15
80004c34:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c38:	4c 41       	ld.w %d15,[%a4]4
80004c3a:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004c3c:	76 64       	jz %d6,80004c44 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004c3e:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004c42:	3c 03       	j 80004c48 <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004c44:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004c48:	59 47 04 00 	st.w [%a4]4,%d7
80004c4c:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004c4e:	19 44 04 00 	ld.w %d4,[%a4]4
80004c52:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004c56:	6c 41       	st.w [%a4]4,%d15
80004c58:	00 90       	ret 

80004c5a <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004c5a:	19 4f 28 20 	ld.w %d15,[%a4]168
80004c5e:	26 54       	and %d4,%d5
80004c60:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004c64:	0f 4f a0 50 	or %d5,%d15,%d4
80004c68:	59 45 28 20 	st.w [%a4]168,%d5
80004c6c:	00 90       	ret 

80004c6e <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c6e:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c72:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c74:	6d ff 52 fd 	call 80004718 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004c78:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004c7c:	40 f4       	mov.aa %a4,%a15
80004c7e:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004c82:	3b f0 01 40 	mov %d4,31
80004c86:	59 ff 00 20 	st.w [%a15]128,%d15
80004c8a:	6d ff 2b fd 	call 800046e0 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004c8e:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004c90:	82 0f       	mov %d15,0
80004c92:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004c94:	8f a2 00 30 	sh %d3,%d2,10
80004c98:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004c9c:	c2 12       	add %d2,1
80004c9e:	19 33 40 20 	ld.w %d3,[%a3]1152
80004ca2:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004ca6:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004caa:	fc 25       	loop %a2,80004c94 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004cac:	df 1f f1 7f 	jeq %d15,1,80004c8e <IfxVadc_startupCalibration+0x20>
}
80004cb0:	00 90       	ret 
	...

80004cb4 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004cb4:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004cb6:	6d 00 66 13 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004cba:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004cbc:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004cbe:	6d 00 62 12 	call 80007182 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004cc2:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004cc4:	02 f4       	mov %d4,%d15
80004cc6:	8f 12 40 21 	or %d2,%d2,1
80004cca:	68 02       	st.w [%a15]0,%d2
80004ccc:	1d 00 90 13 	j 800073ec <IfxScuWdt_setCpuEndinit>

80004cd0 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004cd0:	7b 10 00 f0 	movh %d15,1
80004cd4:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004cd8:	19 4f 00 10 	ld.w %d15,[%a4]64
80004cdc:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004ce0:	a6 f4       	or %d4,%d15
80004ce2:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004ce6:	7b 00 40 f0 	movh %d15,1024
80004cea:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004cee:	19 4f 00 10 	ld.w %d15,[%a4]64
80004cf2:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004cf6:	a6 f5       	or %d5,%d15
80004cf8:	59 45 00 10 	st.w [%a4]64,%d5
80004cfc:	00 90       	ret 

80004cfe <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004cfe:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d00:	6d 00 41 13 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d04:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004d06:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004d08:	6d 00 3d 12 	call 80007182 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004d0c:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004d0e:	02 f4       	mov %d4,%d15
80004d10:	8f 12 c0 21 	andn %d2,%d2,1
80004d14:	68 02       	st.w [%a15]0,%d2
80004d16:	1d 00 6b 13 	j 800073ec <IfxScuWdt_setCpuEndinit>

80004d1a <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004d1a:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004d1c:	ff 44 09 00 	jge %d4,4,80004d2e <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004d20:	91 00 00 f8 	movh.a %a15,32768
80004d24:	d9 ff a0 60 	lea %a15,[%a15]2464 <800009a0 <IfxAsclin_cfg_indexMap>>
80004d28:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004d2c:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004d2e:	00 90       	ret 

80004d30 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004d30:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004d34:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004d36:	c2 ff       	add %d15,-1
80004d38:	8b 0f a1 22 	ge.u %d2,%d15,16
80004d3c:	df 02 32 80 	jne %d2,0,80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d40:	91 00 00 f8 	movh.a %a15,32768
80004d44:	d9 ff cc 54 	lea %a15,[%a15]19788 <80004d4c <IfxAsclin_getFaFrequency+0x1c>>
80004d48:	90 ff       	addsc.a %a15,%a15,%d15,2
80004d4a:	dc 0f       	ji %a15
80004d4c:	1d 00 20 00 	j 80004d8c <IfxAsclin_getFaFrequency+0x5c>
80004d50:	1d 00 20 00 	j 80004d90 <IfxAsclin_getFaFrequency+0x60>
80004d54:	1d 00 26 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d58:	1d 00 1e 00 	j 80004d94 <IfxAsclin_getFaFrequency+0x64>
80004d5c:	1d 00 22 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d60:	1d 00 20 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d64:	1d 00 1e 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d68:	1d 00 18 00 	j 80004d98 <IfxAsclin_getFaFrequency+0x68>
80004d6c:	1d 00 1a 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d70:	1d 00 18 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d74:	1d 00 16 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d78:	1d 00 14 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d7c:	1d 00 12 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d80:	1d 00 10 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d84:	1d 00 0e 00 	j 80004da0 <IfxAsclin_getFaFrequency+0x70>
80004d88:	1d 00 0a 00 	j 80004d9c <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004d8c:	1d 00 37 0a 	j 800061fa <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004d90:	1d 00 a6 08 	j 80005edc <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004d94:	1d 00 c3 08 	j 80005f1a <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004d98:	1d 00 20 0a 	j 800061d8 <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004d9c:	1d 00 0e 0a 	j 800061b8 <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004da0:	82 02       	mov %d2,0
80004da2:	00 90       	ret 

80004da4 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004da4:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004da8:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004daa:	d9 33 a0 60 	lea %a3,[%a3]2464 <800009a0 <IfxAsclin_cfg_indexMap>>
80004dae:	a0 3f       	mov.a %a15,3
80004db0:	d0 32       	addsc.a %a2,%a3,%d15,3
80004db2:	d4 25       	ld.a %a5,[%a2]
80004db4:	7d 45 05 80 	jne.a %a5,%a4,80004dbe <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004db8:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004dbc:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004dbe:	c2 1f       	add %d15,1
80004dc0:	fc f8       	loop %a15,80004db0 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004dc2:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004dc4:	00 90       	ret 

80004dc6 <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004dc6:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004dc8:	6d ff b4 ff 	call 80004d30 <IfxAsclin_getFaFrequency>
80004dcc:	4c f5       	ld.w %d15,[%a15]20
80004dce:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004dd2:	c2 1f       	add %d15,1
80004dd4:	4b 0f 41 f1 	itof %d15,%d15
}
80004dd8:	4b f2 51 20 	div.f %d2,%d2,%d15
80004ddc:	00 90       	ret 

80004dde <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004dde:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004de0:	6d ff f3 ff 	call 80004dc6 <IfxAsclin_getPdFrequency>
80004de4:	48 83       	ld.w %d3,[%a15]32
80004de6:	4c f8       	ld.w %d15,[%a15]32
80004de8:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004dec:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004df0:	4b 03 41 31 	itof %d3,%d3
80004df4:	4b 0f 41 f1 	itof %d15,%d15
80004df8:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004dfc:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e00:	00 90       	ret 

80004e02 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004e02:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004e04:	6d ff ed ff 	call 80004dde <IfxAsclin_getOvsFrequency>
80004e08:	4c f5       	ld.w %d15,[%a15]20
80004e0a:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004e0e:	4b 0f 41 f1 	itof %d15,%d15
}
80004e12:	4b f2 51 20 	div.f %d2,%d2,%d15
80004e16:	00 90       	ret 

80004e18 <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004e18:	6d ff c6 ff 	call 80004da4 <IfxAsclin_getIndex>
80004e1c:	53 c2 20 f0 	mul %d15,%d2,12
80004e20:	60 ff       	mov.a %a15,%d15
80004e22:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004e26:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e2a:	00 90       	ret 

80004e2c <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004e2c:	6d ff bc ff 	call 80004da4 <IfxAsclin_getIndex>
80004e30:	53 c2 20 f0 	mul %d15,%d2,12
80004e34:	60 ff       	mov.a %a15,%d15
80004e36:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004e3a:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e3e:	00 90       	ret 

80004e40 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004e40:	6d ff b2 ff 	call 80004da4 <IfxAsclin_getIndex>
80004e44:	53 c2 20 f0 	mul %d15,%d2,12
80004e48:	60 ff       	mov.a %a15,%d15
80004e4a:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004e4e:	11 42 00 2f 	addih.a %a2,%a2,61444
80004e52:	00 90       	ret 

80004e54 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004e54:	9f 04 04 80 	jned %d4,0,80004e5c <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004e58:	82 02       	mov %d2,0
80004e5a:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004e5c:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e60:	ac 50       	st.h [%a5]0,%d15
80004e62:	b0 25       	add.a %a5,2
80004e64:	3c f8       	j 80004e54 <IfxAsclin_read16>

80004e66 <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004e66:	9f 04 04 80 	jned %d4,0,80004e6e <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004e6a:	82 02       	mov %d2,0
80004e6c:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004e6e:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e72:	6c 50       	st.w [%a5]0,%d15
80004e74:	b0 45       	add.a %a5,4
80004e76:	3c f8       	j 80004e66 <IfxAsclin_read32>

80004e78 <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004e78:	9f 04 04 80 	jned %d4,0,80004e80 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004e7c:	82 02       	mov %d2,0
80004e7e:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004e80:	19 4f 08 10 	ld.w %d15,[%a4]72
80004e84:	2c 50       	st.b [%a5]0,%d15
80004e86:	b0 15       	add.a %a5,1
80004e88:	3c f8       	j 80004e78 <IfxAsclin_read8>

80004e8a <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004e8a:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e8c:	6d 00 7b 12 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004e90:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004e92:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004e94:	6d 00 77 11 	call 80007182 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e98:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004e9c:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004e9e:	8f 12 40 21 	or %d2,%d2,1
80004ea2:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004ea6:	19 f2 30 30 	ld.w %d2,[%a15]240
80004eaa:	8f 12 40 21 	or %d2,%d2,1
80004eae:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004eb2:	6d 00 9d 12 	call 800073ec <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004eb6:	19 f2 34 30 	ld.w %d2,[%a15]244
80004eba:	6f 12 fe 7f 	jz.t %d2,1,80004eb6 <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004ebe:	02 f4       	mov %d4,%d15
80004ec0:	6d 00 61 11 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004ec4:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004ec8:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004eca:	8f 12 40 21 	or %d2,%d2,1
80004ece:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004ed2:	1d 00 8d 12 	j 800073ec <IfxScuWdt_setCpuEndinit>

80004ed6 <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004ed6:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004eda:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004ede:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004ee2:	f6 46       	jnz %d4,80004eee <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004ee4:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004ee8:	bf 0f fe 7f 	jlt %d15,0,80004ee4 <IfxAsclin_setClockSource+0xe>
80004eec:	00 90       	ret 
80004eee:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004ef2:	ff 0f fe 7f 	jge %d15,0,80004eee <IfxAsclin_setClockSource+0x18>
80004ef6:	00 90       	ret 

80004ef8 <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004ef8:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004efc:	19 42 0c 10 	ld.w %d2,[%a4]76
80004f00:	16 1f       	and %d15,31
80004f02:	8f f2 c1 21 	andn %d2,%d2,31
80004f06:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004f0a:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004f0e:	bf 02 fe 7f 	jlt %d2,0,80004f0a <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004f12:	19 42 14 00 	ld.w %d2,[%a4]20
80004f16:	c2 f4       	add %d4,-1
80004f18:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004f1c:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004f20:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004f24:	02 f4       	mov %d4,%d15
80004f26:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004f2a:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004f2e:	19 42 20 00 	ld.w %d2,[%a4]32
80004f32:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004f36:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004f3a:	19 42 14 00 	ld.w %d2,[%a4]20
80004f3e:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004f42:	59 47 14 00 	st.w [%a4]20,%d7
80004f46:	1d ff c8 ff 	j 80004ed6 <IfxAsclin_setClockSource>

80004f4a <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004f4a:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004f4e:	20 08       	sub.a %sp,8
80004f50:	8f f2 01 21 	and %d2,%d2,31
80004f54:	02 5f       	mov %d15,%d5
80004f56:	40 4f       	mov.aa %a15,%a4
80004f58:	02 48       	mov %d8,%d4
80004f5a:	02 6a       	mov %d10,%d6
80004f5c:	60 7d       	mov.a %a13,%d7
80004f5e:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f60:	6d ff 33 ff 	call 80004dc6 <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f64:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004f66:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004f68:	82 4f       	mov %d15,4
80004f6a:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004f6e:	8f ff 0f 21 	and %d2,%d15,255
80004f72:	59 a2 04 00 	st.w [%sp]4,%d2
80004f76:	82 16       	mov %d6,1
80004f78:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004f7c:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004f7e:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f82:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004f86:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004f8a:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004f8c:	02 f4       	mov %d4,%d15
80004f8e:	6d 00 fb 2b 	call 8000a784 <__extendsfdf2>
80004f92:	7b 00 f5 73 	movh %d7,16208
80004f96:	0b 23 10 48 	mov %e4,%d3,%d2
80004f9a:	7b 20 2f 6d 	movh %d6,54002
80004f9e:	1b d7 24 76 	addi %d7,%d7,25165
80004fa2:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004fa6:	6d 00 12 2d 	call 8000a9ca <__muldf3>
80004faa:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004fae:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004fb0:	6d 00 9e 2e 	call 8000acec <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004fb4:	4b f9 51 50 	div.f %d5,%d9,%d15
80004fb8:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004fbc:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004fbe:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004fc2:	4b 05 61 31 	utof %d3,%d5
80004fc6:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004fca:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004fce:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004fd2:	37 00 61 00 	extr.u %d0,%d0,0,1
80004fd6:	9b 03 00 48 	addih %d4,%d3,32768
80004fda:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004fde:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004fe2:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004fe6:	df 00 45 80 	jne %d0,0,80005070 <IfxAsclin_setBitTiming+0x126>
80004fea:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80004fee:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004ff0:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004ff2:	82 28       	mov %d8,2
80004ff4:	3b 00 00 71 	mov %d7,4096
80004ff8:	7f 76 3b 80 	jge.u %d6,%d7,8000506e <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80004ffc:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80004ffe:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80005000:	df 28 09 00 	jeq %d8,2,80005012 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80005004:	73 8e 0a a0 	mul %d10,%d14,%d8
80005008:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
8000500c:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
8000500e:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80005010:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80005012:	80 34       	mov.d %d4,%a3
80005014:	3f b4 25 80 	jlt.u %d4,%d11,8000505e <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80005018:	4b 08 61 01 	utof %d0,%d8
8000501c:	0b 6b 00 40 	add %d4,%d11,%d6
80005020:	4b 04 61 d1 	utof %d13,%d4
80005024:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80005028:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
8000502a:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
8000502e:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80005032:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80005036:	37 0d 61 d0 	extr.u %d13,%d13,0,1
8000503a:	9b 00 00 a8 	addih %d10,%d0,32768
8000503e:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80005042:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80005046:	37 0d 61 d1 	extr.u %d13,%d13,2,1
8000504a:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
8000504e:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80005052:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80005056:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
8000505a:	c2 1b       	add %d11,1
8000505c:	3c db       	j 80005012 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
8000505e:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80005062:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80005066:	f6 04       	jnz %d0,8000506e <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80005068:	c2 18       	add %d8,1
8000506a:	42 56       	add %d6,%d5
8000506c:	3c c6       	j 80004ff8 <IfxAsclin_setBitTiming+0xae>
8000506e:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80005070:	19 f3 0c 10 	ld.w %d3,[%a15]76
80005074:	8f f3 c1 31 	andn %d3,%d3,31
80005078:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
8000507c:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80005080:	bf 0f fe 7f 	jlt %d15,0,8000507c <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005084:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80005086:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
8000508a:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000508e:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80005090:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80005092:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80005094:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80005096:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
8000509a:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
8000509c:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
8000509e:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
800050a0:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
800050a2:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
800050a6:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050a8:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050aa:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050ac:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050b0:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
800050b4:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
800050b6:	ab 0f 80 72 	sel %d7,%d2,%d15,0
800050ba:	4c f5       	ld.w %d15,[%a15]20
800050bc:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
800050c0:	a6 7f       	or %d15,%d7
800050c2:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
800050c4:	6d ff 09 ff 	call 80004ed6 <IfxAsclin_setClockSource>

    return TRUE;
}
800050c8:	82 12       	mov %d2,1
800050ca:	00 90       	ret 

800050cc <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
800050cc:	9f 04 04 80 	jned %d4,0,800050d4 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
800050d0:	82 02       	mov %d2,0
800050d2:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
800050d4:	b9 5f 00 00 	ld.hu %d15,[%a5]0
800050d8:	b0 25       	add.a %a5,2
800050da:	59 4f 04 10 	st.w [%a4]68,%d15
800050de:	3c f7       	j 800050cc <IfxAsclin_write16>

800050e0 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
800050e0:	9f 04 04 80 	jned %d4,0,800050e8 <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
800050e4:	82 02       	mov %d2,0
800050e6:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
800050e8:	4c 50       	ld.w %d15,[%a5]0
800050ea:	b0 45       	add.a %a5,4
800050ec:	59 4f 04 10 	st.w [%a4]68,%d15
800050f0:	3c f8       	j 800050e0 <IfxAsclin_write32>

800050f2 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
800050f2:	9f 04 04 80 	jned %d4,0,800050fa <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
800050f6:	82 02       	mov %d2,0
800050f8:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
800050fa:	0c 50       	ld.bu %d15,[%a5]0
800050fc:	b0 15       	add.a %a5,1
800050fe:	59 4f 04 10 	st.w [%a4]68,%d15
80005102:	3c f8       	j 800050f2 <IfxAsclin_write8>

80005104 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80005104:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
80005106:	88 22       	ld.h %d2,[%a15]4
80005108:	00 90       	ret 

8000510a <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
8000510a:	99 42 08 00 	ld.a %a2,[%a4]8
}
8000510e:	d9 22 1d 00 	lea %a2,[%a2]29
80005112:	00 90       	ret 

80005114 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
80005114:	19 42 10 00 	ld.w %d2,[%a4]16
}
80005118:	00 90       	ret 

8000511a <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
8000511a:	09 42 54 09 	ld.d %e2,[%a4]20
}
8000511e:	00 90       	ret 

80005120 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
80005120:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
80005122:	88 c2       	ld.h %d2,[%a15]24
80005124:	8c f2       	ld.h %d15,[%a15]4
80005126:	a2 f2       	sub %d2,%d15
}
80005128:	37 02 50 20 	extr %d2,%d2,0,16
8000512c:	00 90       	ret 

8000512e <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
8000512e:	99 42 04 00 	ld.a %a2,[%a4]4
}
80005132:	d9 22 1d 00 	lea %a2,[%a2]29
80005136:	00 90       	ret 

80005138 <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
80005138:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
8000513a:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
8000513c:	ef 0f 0a 00 	jz.t %d15,16,80005150 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
80005140:	4c ff       	ld.w %d15,[%a15]60
80005142:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005146:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
80005148:	0c 4e       	ld.bu %d15,[%a4]14
8000514a:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
8000514e:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
80005150:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80005152:	ef 2f 0a 00 	jz.t %d15,18,80005166 <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
80005156:	4c ff       	ld.w %d15,[%a15]60
80005158:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000515c:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
8000515e:	0c 4e       	ld.bu %d15,[%a4]14
80005160:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005164:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
80005166:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
80005168:	ef af 0a 00 	jz.t %d15,26,8000517c <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
8000516c:	4c ff       	ld.w %d15,[%a15]60
8000516e:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005172:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80005174:	0c 4e       	ld.bu %d15,[%a4]14
80005176:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000517a:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
8000517c:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
8000517e:	ef bf 0a 00 	jz.t %d15,27,80005192 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
80005182:	4c ff       	ld.w %d15,[%a15]60
80005184:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005188:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000518a:	0c 4e       	ld.bu %d15,[%a4]14
8000518c:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80005190:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80005192:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80005194:	ef ef 0a 00 	jz.t %d15,30,800051a8 <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
80005198:	4c ff       	ld.w %d15,[%a15]60
8000519a:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000519e:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
800051a0:	0c 4e       	ld.bu %d15,[%a4]14
800051a2:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
800051a6:	2c 4e       	st.b [%a4]14,%d15
800051a8:	00 90       	ret 

800051aa <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
800051aa:	82 0f       	mov %d15,0
800051ac:	6c 44       	st.w [%a4]16,%d15
800051ae:	00 90       	ret 

800051b0 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
800051b0:	99 44 08 00 	ld.a %a4,[%a4]8
800051b4:	1d 00 df 18 	j 80008372 <Ifx_Fifo_canReadCount>

800051b8 <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800051b8:	82 f2       	mov %d2,-1
800051ba:	06 f2       	sh %d2,-1
800051bc:	ba f4       	eq %d15,%d4,-1
800051be:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
800051c2:	40 4f       	mov.aa %a15,%a4
800051c4:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
800051c6:	82 f9       	mov %d9,-1
800051c8:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800051ca:	ee 16       	jnz %d15,800051f6 <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800051cc:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800051d0:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800051d4:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800051d8:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800051da:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800051de:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800051e2:	02 39       	mov %d9,%d3
800051e4:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800051e8:	76 23       	jz %d2,800051ee <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
800051ea:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800051ee:	0b 69 40 90 	addx %d9,%d9,%d6
800051f2:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
800051f6:	c8 14       	ld.a %a4,[%a15]4
800051f8:	02 57       	mov %d7,%d5
800051fa:	c9 44 18 00 	ld.h %d4,[%a4]24
800051fe:	6d 00 fd 19 	call 800085f8 <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80005202:	82 f4       	mov %d4,-1
80005204:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
80005206:	f6 23       	jnz %d2,8000520c <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
80005208:	82 02       	mov %d2,0
8000520a:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
8000520c:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
8000520e:	4c 23       	ld.w %d15,[%a2]12
80005210:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
80005214:	6e 1e       	jz %d15,80005250 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80005216:	ba f9       	eq %d15,%d9,-1
80005218:	0b 84 00 f2 	and.eq %d15,%d4,%d8
8000521c:	ee f9       	jnz %d15,8000520e <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000521e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005222:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005226:	0d 00 40 03 	disable 
8000522a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000522c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005230:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005234:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005238:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000523c:	76 23       	jz %d2,80005242 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
8000523e:	0d 00 00 03 	enable 
80005242:	0b 8f 00 21 	eq %d2,%d15,%d8
80005246:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
8000524a:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000524e:	3c dc       	j 80005206 <IfxAsclin_Asc_flushTx+0x4e>
80005250:	82 12       	mov %d2,1
    }

    return result;
}
80005252:	00 90       	ret 

80005254 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
80005254:	99 44 04 00 	ld.a %a4,[%a4]4
80005258:	1d 00 d0 19 	j 800085f8 <Ifx_Fifo_canWriteCount>

8000525c <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
8000525c:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
8000525e:	4c f4       	ld.w %d15,[%a15]16
80005260:	96 01       	or %d15,1
80005262:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005264:	99 44 08 00 	ld.a %a4,[%a4]8
80005268:	1d 00 ad 19 	j 800085c2 <Ifx_Fifo_clear>

8000526c <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
8000526c:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
8000526e:	99 44 04 00 	ld.a %a4,[%a4]4
80005272:	6d 00 a8 19 	call 800085c2 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
80005276:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
80005278:	4c f3       	ld.w %d15,[%a15]12
8000527a:	96 01       	or %d15,1
8000527c:	68 3f       	st.w [%a15]12,%d15
8000527e:	00 90       	ret 

80005280 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005280:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005284:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005288:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000528a:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000528c:	6d 00 e0 18 	call 8000844c <Ifx_Fifo_read>

    *count -= left;
80005290:	8c f0       	ld.h %d15,[%a15]0
80005292:	a2 2f       	sub %d15,%d2
80005294:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
80005296:	8b 02 00 22 	eq %d2,%d2,0
8000529a:	00 90       	ret 

8000529c <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
8000529c:	20 18       	sub.a %sp,24
8000529e:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800052a0:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800052a4:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800052a8:	0d 00 40 03 	disable 
800052ac:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800052ae:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800052b2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800052b6:	02 52       	mov %d2,%d5
800052b8:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800052bc:	76 43       	jz %d4,800052c2 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
800052be:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
800052c2:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800052c6:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
800052c8:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
800052ca:	c9 44 04 00 	ld.h %d4,[%a4]4
800052ce:	c2 1f       	add %d15,1
800052d0:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
800052d2:	df 04 32 00 	jeq %d4,0,80005336 <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
800052d6:	0c ff       	ld.bu %d15,[%a15]15
800052d8:	6e 03       	jz %d15,800052de <IfxAsclin_Asc_isrTransmit+0x42>
800052da:	9e 1d       	jeq %d15,1,80005314 <IfxAsclin_Asc_isrTransmit+0x78>
800052dc:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800052de:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
800052e0:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
800052e2:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
800052e6:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800052e8:	d2 06       	mov %e6,0
800052ea:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800052ee:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800052f2:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
800052f4:	0c a7       	ld.bu %d15,[%sp]7
800052f6:	8b 0f 01 f1 	rsub %d15,%d15,16
800052fa:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800052fe:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
80005302:	37 0f 50 40 	extr %d4,%d15,0,16
80005306:	6d 00 a3 18 	call 8000844c <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
8000530a:	c8 04       	ld.a %a4,[%a15]0
8000530c:	d9 a5 08 00 	lea %a5,[%sp]8
80005310:	02 f4       	mov %d4,%d15
80005312:	3c 10       	j 80005332 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005314:	d2 06       	mov %e6,0
80005316:	d9 a5 08 00 	lea %a5,[%sp]8
8000531a:	3b c0 00 40 	mov %d4,12
8000531e:	6d 00 97 18 	call 8000844c <Ifx_Fifo_read>

            ascData = packedData.data;
80005322:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005326:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
80005328:	d9 a5 18 00 	lea %a5,[%sp]24
8000532c:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
80005330:	82 14       	mov %d4,1
        }
        break;
80005332:	1d ff e0 fe 	j 800050f2 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
80005336:	28 c4       	st.b [%a15]12,%d4
80005338:	00 90       	ret 

8000533a <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
8000533a:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
8000533c:	20 20       	sub.a %sp,32
8000533e:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005340:	6e 34       	jz %d15,800053a8 <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005342:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
80005344:	df 1f 45 80 	jne %d15,1,800053ce <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
80005348:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
8000534a:	4c 24       	ld.w %d15,[%a2]16
8000534c:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005350:	6e 2b       	jz %d15,800053a6 <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005352:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80005356:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000535a:	0d 00 40 03 	disable 
8000535e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005360:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005364:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005368:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000536c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005370:	76 33       	jz %d3,80005376 <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
80005372:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005376:	c8 04       	ld.a %a4,[%a15]0
80005378:	d9 a5 10 00 	lea %a5,[%sp]16
8000537c:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
8000537e:	78 02       	st.w [%sp]8,%d15
80005380:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005384:	6d ff 7a fd 	call 80004e78 <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005388:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000538a:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000538e:	d2 06       	mov %e6,0
80005390:	d9 a5 04 00 	lea %a5,[%sp]4
80005394:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
80005398:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000539a:	6d 00 a7 19 	call 800086e8 <Ifx_Fifo_write>
8000539e:	df 02 d5 7f 	jeq %d2,0,80005348 <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
800053a2:	28 d8       	st.b [%a15]13,%d8
800053a4:	3c d2       	j 80005348 <IfxAsclin_Asc_isrReceive+0xe>
800053a6:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
800053a8:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
800053aa:	d9 a5 10 00 	lea %a5,[%sp]16
800053ae:	4c 44       	ld.w %d15,[%a4]16
800053b0:	37 0f 65 f8 	extr.u %d15,%d15,16,5
800053b4:	02 f4       	mov %d4,%d15
800053b6:	6d ff 61 fd 	call 80004e78 <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
800053ba:	c8 24       	ld.a %a4,[%a15]8
800053bc:	d2 06       	mov %e6,0
800053be:	d9 a5 10 00 	lea %a5,[%sp]16
800053c2:	02 f4       	mov %d4,%d15
800053c4:	6d 00 92 19 	call 800086e8 <Ifx_Fifo_write>
800053c8:	76 23       	jz %d2,800053ce <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
800053ca:	82 1f       	mov %d15,1
800053cc:	28 df       	st.b [%a15]13,%d15
800053ce:	00 90       	ret 

800053d0 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
800053d0:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
800053d2:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
800053d4:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
800053d6:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
800053d8:	82 f4       	mov %d4,-1
800053da:	40 f4       	mov.aa %a4,%a15
800053dc:	d9 a5 05 00 	lea %a5,[%sp]5
800053e0:	d9 a6 06 00 	lea %a6,[%sp]6
800053e4:	9b 04 00 58 	addih %d5,%d4,32768
800053e8:	6d ff 4c ff 	call 80005280 <IfxAsclin_Asc_read>
800053ec:	df 12 f6 ff 	jne %d2,1,800053d8 <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
800053f0:	39 a2 05 00 	ld.bu %d2,[%sp]5
800053f4:	00 90       	ret 

800053f6 <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
800053f6:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800053f8:	6d 00 c5 0f 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800053fc:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800053fe:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
80005400:	6d 00 c1 0e 	call 80007182 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80005404:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
80005406:	02 f4       	mov %d4,%d15
80005408:	8f 12 40 21 	or %d2,%d2,1
8000540c:	68 02       	st.w [%a15]0,%d2
8000540e:	1d 00 ef 0f 	j 800073ec <IfxScuWdt_setCpuEndinit>

80005412 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
80005412:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
80005414:	40 4e       	mov.aa %a14,%a4
80005416:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
80005418:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
8000541a:	40 f4       	mov.aa %a4,%a15
8000541c:	6d ff 71 fc 	call 80004cfe <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
80005420:	40 f4       	mov.aa %a4,%a15
80005422:	82 04       	mov %d4,0
80005424:	6d ff 59 fd 	call 80004ed6 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
80005428:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
8000542a:	40 f4       	mov.aa %a4,%a15
8000542c:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
80005430:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80005432:	8c c4       	ld.h %d15,[%a12]8
80005434:	48 52       	ld.w %d2,[%a15]20
80005436:	c2 ff       	add %d15,-1
80005438:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
8000543c:	68 5f       	st.w [%a15]20,%d15
8000543e:	39 c4 28 00 	ld.bu %d4,[%a12]40
80005442:	6d ff 4a fd 	call 80004ed6 <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005446:	40 f4       	mov.aa %a4,%a15
80005448:	19 c4 04 00 	ld.w %d4,[%a12]4
8000544c:	39 c5 0a 00 	ld.bu %d5,[%a12]10
80005450:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005454:	39 c7 0c 00 	ld.bu %d7,[%a12]12
80005458:	6d ff 79 fd 	call 80004f4a <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
8000545c:	40 f4       	mov.aa %a4,%a15
8000545e:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005460:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005462:	6d ff 3a fd 	call 80004ed6 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
80005466:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000546a:	7b 00 00 f1 	movh %d15,4096
8000546e:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005472:	4c f1       	ld.w %d15,[%a15]4
80005474:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
80005478:	a6 2f       	or %d15,%d2
8000547a:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
8000547c:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005480:	7b 00 00 f4 	movh %d15,16384
80005484:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005488:	4c f6       	ld.w %d15,[%a15]24
8000548a:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
8000548e:	a6 2f       	or %d15,%d2
80005490:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
80005492:	48 62       	ld.w %d2,[%a15]24
80005494:	39 cf 12 00 	ld.bu %d15,[%a12]18
80005498:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
8000549c:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
8000549e:	48 62       	ld.w %d2,[%a15]24
800054a0:	0c cf       	ld.bu %d15,[%a12]15
800054a2:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
800054a6:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
800054a8:	48 62       	ld.w %d2,[%a15]24
800054aa:	39 cf 11 00 	ld.bu %d15,[%a12]17
800054ae:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
800054b2:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
800054b4:	48 72       	ld.w %d2,[%a15]28
800054b6:	39 cf 13 00 	ld.bu %d15,[%a12]19
800054ba:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
800054be:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
800054c0:	48 32       	ld.w %d2,[%a15]12
800054c2:	39 cf 16 00 	ld.bu %d15,[%a12]22
800054c6:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800054ca:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
800054cc:	48 42       	ld.w %d2,[%a15]16
800054ce:	39 cf 17 00 	ld.bu %d15,[%a12]23
800054d2:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800054d6:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
800054d8:	48 62       	ld.w %d2,[%a15]24
800054da:	0c ce       	ld.bu %d15,[%a12]14
800054dc:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
800054e0:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
800054e2:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800054e6:	da 0f       	mov %d15,15
800054e8:	0b f2 90 21 	min.u %d2,%d2,%d15
800054ec:	48 33       	ld.w %d3,[%a15]12
800054ee:	37 23 04 24 	insert %d2,%d3,%d2,8,4
800054f2:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
800054f4:	39 c2 19 00 	ld.bu %d2,[%a12]25
800054f8:	0b f2 90 f1 	min.u %d15,%d2,%d15
800054fc:	48 42       	ld.w %d2,[%a15]16
800054fe:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
80005502:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
80005504:	39 cf 10 00 	ld.bu %d15,[%a12]16
80005508:	48 62       	ld.w %d2,[%a15]24
8000550a:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
8000550e:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
80005510:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
80005514:	bd 0d 81 00 	jz.a %a13,80005616 <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
80005518:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
8000551a:	6e 27       	jz %d15,80005568 <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
8000551c:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
8000551e:	79 d5 04 00 	ld.b %d5,[%a13]4
80005522:	99 24 04 00 	ld.a %a4,[%a2]4
80005526:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000552a:	bd 04 1f 00 	jz.a %a4,80005568 <IfxAsclin_Asc_initModule+0x156>
8000552e:	39 24 08 00 	ld.bu %d4,[%a2]8
80005532:	8f f5 0f 51 	and %d5,%d5,255
80005536:	6d 00 ba 03 	call 80005caa <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
8000553a:	60 f3       	mov.a %a3,%d15
8000553c:	02 85       	mov %d5,%d8
8000553e:	99 34 04 00 	ld.a %a4,[%a3]4
80005542:	39 34 08 00 	ld.bu %d4,[%a3]8
80005546:	6d 00 30 04 	call 80005da6 <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
8000554a:	60 f3       	mov.a %a3,%d15
8000554c:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
8000554e:	19 22 04 00 	ld.w %d2,[%a2]4
80005552:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
80005556:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
8000555a:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
8000555c:	0c 3c       	ld.bu %d15,[%a3]12
8000555e:	19 22 04 00 	ld.w %d2,[%a2]4
80005562:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005566:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
80005568:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000556a:	6e 20       	jz %d15,800055aa <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
8000556c:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
8000556e:	79 d5 0c 00 	ld.b %d5,[%a13]12
80005572:	99 24 04 00 	ld.a %a4,[%a2]4
80005576:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000557a:	bd 04 18 00 	jz.a %a4,800055aa <IfxAsclin_Asc_initModule+0x198>
8000557e:	39 24 08 00 	ld.bu %d4,[%a2]8
80005582:	8f f5 0f 51 	and %d5,%d5,255
80005586:	6d 00 92 03 	call 80005caa <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000558a:	60 f3       	mov.a %a3,%d15
8000558c:	02 85       	mov %d5,%d8
8000558e:	99 34 04 00 	ld.a %a4,[%a3]4
80005592:	39 34 08 00 	ld.bu %d4,[%a3]8
80005596:	6d 00 08 04 	call 80005da6 <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000559a:	60 f3       	mov.a %a3,%d15
8000559c:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
8000559e:	0c 3c       	ld.bu %d15,[%a3]12
800055a0:	19 22 04 00 	ld.w %d2,[%a2]4
800055a4:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
800055a8:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
800055aa:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
800055ac:	6e 1a       	jz %d15,800055e0 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800055ae:	60 f2       	mov.a %a2,%d15
800055b0:	39 d2 14 00 	ld.bu %d2,[%a13]20
800055b4:	39 23 0c 00 	ld.bu %d3,[%a2]12
800055b8:	99 24 04 00 	ld.a %a4,[%a2]4
800055bc:	0f 23 a0 50 	or %d5,%d3,%d2
800055c0:	39 24 08 00 	ld.bu %d4,[%a2]8
800055c4:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
800055c8:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800055cc:	6d 00 6f 03 	call 80005caa <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
800055d0:	60 f3       	mov.a %a3,%d15
800055d2:	02 85       	mov %d5,%d8
800055d4:	99 34 04 00 	ld.a %a4,[%a3]4
800055d8:	39 34 08 00 	ld.bu %d4,[%a3]8
800055dc:	6d 00 e5 03 	call 80005da6 <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
800055e0:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
800055e2:	6e 1a       	jz %d15,80005616 <IfxAsclin_Asc_initModule+0x204>
800055e4:	60 f2       	mov.a %a2,%d15
800055e6:	39 d2 1c 00 	ld.bu %d2,[%a13]28
800055ea:	39 23 0c 00 	ld.bu %d3,[%a2]12
800055ee:	99 24 04 00 	ld.a %a4,[%a2]4
800055f2:	0f 23 a0 50 	or %d5,%d3,%d2
800055f6:	39 24 08 00 	ld.bu %d4,[%a2]8
800055fa:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800055fe:	39 d8 1d 00 	ld.bu %d8,[%a13]29
80005602:	6d 00 54 03 	call 80005caa <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
80005606:	60 f3       	mov.a %a3,%d15
80005608:	02 85       	mov %d5,%d8
8000560a:	99 34 04 00 	ld.a %a4,[%a3]4
8000560e:	39 34 08 00 	ld.bu %d4,[%a3]8
80005612:	6d 00 ca 03 	call 80005da6 <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
80005616:	40 f4       	mov.aa %a4,%a15
80005618:	39 c4 28 00 	ld.bu %d4,[%a12]40
8000561c:	6d ff 5d fc 	call 80004ed6 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
80005620:	82 0f       	mov %d15,0
80005622:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
80005626:	82 f2       	mov %d2,-1
80005628:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
8000562a:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
8000562c:	4c ca       	ld.w %d15,[%a12]40
8000562e:	2e 87       	jz.t %d15,8,8000563c <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005630:	19 ff 00 10 	ld.w %d15,[%a15]64
80005634:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005638:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
8000563c:	4c ca       	ld.w %d15,[%a12]40
8000563e:	2e 97       	jz.t %d15,9,8000564c <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
80005640:	19 ff 00 10 	ld.w %d15,[%a15]64
80005644:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80005648:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
8000564c:	4c ca       	ld.w %d15,[%a12]40
8000564e:	2e a7       	jz.t %d15,10,8000565c <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80005650:	19 ff 00 10 	ld.w %d15,[%a15]64
80005654:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005658:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
8000565c:	4c ca       	ld.w %d15,[%a12]40
8000565e:	2e b7       	jz.t %d15,11,8000566c <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005660:	19 ff 00 10 	ld.w %d15,[%a15]64
80005664:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005668:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
8000566c:	4c ca       	ld.w %d15,[%a12]40
8000566e:	2e c7       	jz.t %d15,12,8000567c <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80005670:	19 ff 00 10 	ld.w %d15,[%a15]64
80005674:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005678:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
8000567c:	82 0f       	mov %d15,0
8000567e:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005680:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
80005682:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005684:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
80005688:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
8000568a:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
8000568e:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005690:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
80005694:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
80005696:	76 34       	jz %d3,8000569e <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
80005698:	ba 13       	eq %d15,%d3,1
8000569a:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
8000569e:	99 c4 2c 00 	ld.a %a4,[%a12]44
800056a2:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056a6:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
800056a8:	bc 44       	jz.a %a4,800056b0 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800056aa:	6d 00 36 16 	call 80008316 <Ifx_Fifo_init>
800056ae:	3c 03       	j 800056b4 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
800056b0:	6d 00 50 16 	call 80008350 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
800056b4:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
800056b8:	b5 e2 04 00 	st.a [%a14]4,%a2
800056bc:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800056c0:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
800056c2:	bc 44       	jz.a %a4,800056ca <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800056c4:	6d 00 29 16 	call 80008316 <Ifx_Fifo_init>
800056c8:	3c 03       	j 800056ce <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800056ca:	6d 00 43 16 	call 80008350 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
800056ce:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800056d2:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
800056d6:	8b 3f 00 82 	eq %d8,%d15,3
800056da:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800056dc:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800056e0:	8b 02 00 35 	or.ne %d3,%d2,0
800056e4:	df 03 1e 00 	jeq %d3,0,80005720 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
800056e8:	40 f4       	mov.aa %a4,%a15
800056ea:	6d ff a1 fb 	call 80004e2c <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800056ee:	54 22       	ld.w %d2,[%a2]
800056f0:	39 c3 1e 00 	ld.bu %d3,[%a12]30
800056f4:	8f f2 cf 21 	andn %d2,%d2,255
800056f8:	a6 32       	or %d2,%d3
800056fa:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800056fc:	54 22       	ld.w %d2,[%a2]
800056fe:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
80005702:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005704:	54 22       	ld.w %d2,[%a2]
80005706:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
8000570a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
8000570c:	19 f2 00 10 	ld.w %d2,[%a15]64
80005710:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80005714:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80005718:	54 22       	ld.w %d2,[%a2]
8000571a:	b7 f2 01 25 	insert %d2,%d2,15,10,1
8000571e:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
80005720:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
80005724:	8b 02 00 85 	or.ne %d8,%d2,0
80005728:	df 08 1e 00 	jeq %d8,0,80005764 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
8000572c:	40 f4       	mov.aa %a4,%a15
8000572e:	6d ff 89 fb 	call 80004e40 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005732:	54 22       	ld.w %d2,[%a2]
80005734:	39 c3 1c 00 	ld.bu %d3,[%a12]28
80005738:	8f f2 cf 21 	andn %d2,%d2,255
8000573c:	a6 32       	or %d2,%d3
8000573e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005740:	54 22       	ld.w %d2,[%a2]
80005742:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
80005746:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005748:	54 22       	ld.w %d2,[%a2]
8000574a:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
8000574e:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
80005750:	19 f2 00 10 	ld.w %d2,[%a15]64
80005754:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
80005758:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000575c:	54 22       	ld.w %d2,[%a2]
8000575e:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005762:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005764:	b9 c2 20 00 	ld.hu %d2,[%a12]32
80005768:	df 02 1e 00 	jeq %d2,0,800057a4 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
8000576c:	40 f4       	mov.aa %a4,%a15
8000576e:	6d ff 55 fb 	call 80004e18 <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005772:	54 22       	ld.w %d2,[%a2]
80005774:	39 c3 20 00 	ld.bu %d3,[%a12]32
80005778:	8f f2 cf 21 	andn %d2,%d2,255
8000577c:	a6 32       	or %d2,%d3
8000577e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005780:	54 22       	ld.w %d2,[%a2]
80005782:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80005786:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005788:	4c 20       	ld.w %d15,[%a2]0
8000578a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000578e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005790:	19 ff 00 10 	ld.w %d15,[%a15]64
80005794:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005798:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000579c:	4c 20       	ld.w %d15,[%a2]0
8000579e:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800057a2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
800057a4:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
800057a6:	02 92       	mov %d2,%d9
800057a8:	96 02       	or %d15,2
800057aa:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
800057ac:	4c f3       	ld.w %d15,[%a15]12
800057ae:	96 02       	or %d15,2
800057b0:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
800057b2:	4c f4       	ld.w %d15,[%a15]16
800057b4:	96 01       	or %d15,1
800057b6:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
800057b8:	4c f3       	ld.w %d15,[%a15]12
800057ba:	96 01       	or %d15,1
800057bc:	68 3f       	st.w [%a15]12,%d15
800057be:	00 90       	ret 

800057c0 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
800057c0:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800057c2:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
800057c6:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800057ca:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
800057cc:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
800057ce:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
800057d2:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
800057d6:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
800057da:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
800057dc:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
800057e0:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
800057e4:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800057e8:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
800057ea:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
800057ee:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
800057f2:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
800057f4:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
800057f8:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
800057fa:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
800057fe:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
80005802:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
80005806:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
80005808:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
8000580c:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
80005810:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80005814:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
80005818:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
8000581a:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
8000581c:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
8000581e:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
80005822:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
80005824:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
80005826:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
8000582a:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
8000582e:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
80005832:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
80005836:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000583a:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
8000583e:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
80005842:	e9 4f 39 00 	st.b [%a4]57,%d15
80005846:	00 90       	ret 

80005848 <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
80005848:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
8000584a:	20 10       	sub.a %sp,16
8000584c:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
8000584e:	ee 20       	jnz %d15,8000588e <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005850:	99 44 04 00 	ld.a %a4,[%a4]4
80005854:	8c 42       	ld.h %d15,[%a4]4
80005856:	6e 1c       	jz %d15,8000588e <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
80005858:	82 1f       	mov %d15,1
8000585a:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
8000585c:	0c ff       	ld.bu %d15,[%a15]15
8000585e:	6e 0c       	jz %d15,80005876 <IfxAsclin_Asc_initiateTransmission+0x2e>
80005860:	de 11       	jne %d15,1,80005882 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005862:	d2 06       	mov %e6,0
80005864:	d9 a5 04 00 	lea %a5,[%sp]4
80005868:	3b c0 00 40 	mov %d4,12
8000586c:	6d 00 f0 15 	call 8000844c <Ifx_Fifo_read>
                data = packedData.data;
80005870:	0c ac       	ld.bu %d15,[%sp]12
80005872:	2c a3       	st.b [%sp]3,%d15
80005874:	3c 07       	j 80005882 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
80005876:	d2 06       	mov %e6,0
80005878:	d9 a5 03 00 	lea %a5,[%sp]3
8000587c:	82 14       	mov %d4,1
8000587e:	6d 00 e7 15 	call 8000844c <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
80005882:	c8 04       	ld.a %a4,[%a15]0
80005884:	d9 a5 03 00 	lea %a5,[%sp]3
80005888:	82 14       	mov %d4,1
8000588a:	6d ff 34 fc 	call 800050f2 <IfxAsclin_write8>
8000588e:	00 90       	ret 

80005890 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005890:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
80005892:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005894:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
80005898:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000589a:	0b 45 10 88 	mov %e8,%d5,%d4
8000589e:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058a0:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
800058a4:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
800058a6:	df 03 25 00 	jeq %d3,0,800058f0 <IfxAsclin_Asc_write+0x60>
800058aa:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
800058ac:	ee 13       	jnz %d15,800058d2 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
800058ae:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
800058b2:	7f 3f 10 00 	jge %d15,%d3,800058d2 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
800058b6:	0b 89 10 68 	mov %e6,%d9,%d8
800058ba:	6d 00 17 17 	call 800086e8 <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
800058be:	40 f4       	mov.aa %a4,%a15
800058c0:	6d ff c4 ff 	call 80005848 <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
800058c4:	94 c4       	ld.h %d4,[%a12]
800058c6:	c8 14       	ld.a %a4,[%a15]4
800058c8:	a2 f4       	sub %d4,%d15
800058ca:	10 d5       	addsc.a %a5,%a13,%d15,0
800058cc:	37 04 50 40 	extr %d4,%d4,0,16
800058d0:	3c 03       	j 800058d6 <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
800058d2:	40 d5       	mov.aa %a5,%a13
800058d4:	02 34       	mov %d4,%d3
800058d6:	0b 89 10 68 	mov %e6,%d9,%d8
800058da:	6d 00 07 17 	call 800086e8 <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
800058de:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
800058e0:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
800058e2:	6d ff b3 ff 	call 80005848 <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
800058e6:	94 c2       	ld.h %d2,[%a12]
800058e8:	a2 f2       	sub %d2,%d15
800058ea:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
800058ec:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
800058f0:	00 90       	ret 

800058f2 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
800058f2:	20 10       	sub.a %sp,16
800058f4:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058f8:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800058fa:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800058fc:	d9 a5 07 00 	lea %a5,[%sp]7
80005900:	d9 a6 0e 00 	lea %a6,[%sp]14
80005904:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
80005908:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
8000590a:	1d ff c3 ff 	j 80005890 <IfxAsclin_Asc_write>

8000590e <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
8000590e:	40 42       	mov.aa %a2,%a4
80005910:	82 0f       	mov %d15,0
80005912:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
80005916:	24 2f       	st.b [%a2+],%d15
80005918:	fc ff       	loop %a15,80005916 <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
8000591a:	7b 00 00 f8 	movh %d15,32768
8000591e:	1b 0f 89 f5 	addi %d15,%d15,22672
80005922:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
80005924:	7b 00 00 f8 	movh %d15,32768
80005928:	1b 0f 28 f5 	addi %d15,%d15,21120
8000592c:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
8000592e:	7b 00 00 f8 	movh %d15,32768
80005932:	1b 4f 10 f5 	addi %d15,%d15,20740
80005936:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
80005938:	7b 00 00 f8 	movh %d15,32768
8000593c:	1b af 10 f5 	addi %d15,%d15,20746
80005940:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
80005942:	7b 00 00 f8 	movh %d15,32768
80005946:	1b 0f 12 f5 	addi %d15,%d15,20768
8000594a:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
8000594c:	7b 00 00 f8 	movh %d15,32768
80005950:	1b ef 12 f5 	addi %d15,%d15,20782
80005954:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
80005956:	7b 00 00 f8 	movh %d15,32768
8000595a:	1b 0f 1b f5 	addi %d15,%d15,20912
8000595e:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005960:	7b 00 00 f8 	movh %d15,32768
80005964:	1b 4f 25 f5 	addi %d15,%d15,21076
80005968:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000596a:	7b 00 00 f8 	movh %d15,32768
8000596e:	1b 8f 1b f5 	addi %d15,%d15,20920
80005972:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005974:	7b 00 00 f8 	movh %d15,32768
80005978:	1b cf 26 f5 	addi %d15,%d15,21100
8000597c:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
8000597e:	7b 00 00 f8 	movh %d15,32768
80005982:	1b cf 25 f5 	addi %d15,%d15,21084
80005986:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
80005988:	7b 00 00 f8 	movh %d15,32768
8000598c:	1b af 33 f5 	addi %d15,%d15,21306
80005990:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80005992:	7b 00 00 f8 	movh %d15,32768
80005996:	1b cf 29 f5 	addi %d15,%d15,21148
8000599a:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
8000599c:	7b 00 00 f8 	movh %d15,32768
800059a0:	1b 8f 13 f5 	addi %d15,%d15,20792
800059a4:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
800059a6:	7b 00 00 f8 	movh %d15,32768
800059aa:	1b 4f 11 f5 	addi %d15,%d15,20756
800059ae:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
800059b2:	7b 00 00 f8 	movh %d15,32768
800059b6:	1b af 11 f5 	addi %d15,%d15,20762
800059ba:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
800059be:	7b 00 00 f8 	movh %d15,32768
800059c2:	1b af 1a f5 	addi %d15,%d15,20906
800059c6:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
800059ca:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
800059cc:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
800059ce:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
800059d0:	82 12       	mov %d2,1
800059d2:	00 90       	ret 

800059d4 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800059d4:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
800059d8:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
800059da:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800059dc:	d9 22 80 70 	lea %a2,[%a2]2496 <800009c0 <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
800059e0:	8f f5 0f f1 	and %d15,%d5,255
800059e4:	8b 02 00 32 	eq %d3,%d2,0
800059e8:	8b 0f 61 34 	and.lt.u %d3,%d15,16
800059ec:	76 3a       	jz %d3,80005a00 <IfxPort_getAddress+0x2c>
800059ee:	02 5f       	mov %d15,%d5
800059f0:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800059f2:	d0 2f       	addsc.a %a15,%a2,%d15,3
800059f4:	82 02       	mov %d2,0
800059f6:	4c f1       	ld.w %d15,[%a15]4
800059f8:	7e 42       	jne %d15,%d4,800059fc <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
800059fa:	48 02       	ld.w %d2,[%a15]0
800059fc:	c2 15       	add %d5,1
800059fe:	3c f1       	j 800059e0 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
80005a00:	60 22       	mov.a %a2,%d2
80005a02:	00 90       	ret 

80005a04 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
80005a04:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
80005a08:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
80005a0a:	d9 33 80 70 	lea %a3,[%a3]2496 <800009c0 <IfxPort_cfg_indexMap>>
80005a0e:	a0 ff       	mov.a %a15,15
80005a10:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a12:	d4 25       	ld.a %a5,[%a2]
80005a14:	7d 45 05 80 	jne.a %a5,%a4,80005a1e <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
80005a18:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80005a1c:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
80005a1e:	c2 1f       	add %d15,1
80005a20:	fc f8       	loop %a15,80005a10 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
80005a22:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80005a24:	00 90       	ret 

80005a26 <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
80005a26:	40 4f       	mov.aa %a15,%a4
80005a28:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a2a:	6d 00 ac 0c 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a2e:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a30:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a32:	6d 00 a8 0b 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
80005a36:	82 12       	mov %d2,1
80005a38:	d9 f4 10 10 	lea %a4,[%a15]80
80005a3c:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a40:	d2 06       	mov %e6,0
80005a42:	02 27       	mov %d7,%d2
80005a44:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005a48:	02 f4       	mov %d4,%d15
80005a4a:	1d 00 d1 0c 	j 800073ec <IfxScuWdt_setCpuEndinit>

80005a4e <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a4e:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a52:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005a54:	d9 33 80 90 	lea %a3,[%a3]2624 <80000a40 <IfxPort_cfg_esrMasks>>
80005a58:	a0 ff       	mov.a %a15,15
80005a5a:	d0 32       	addsc.a %a2,%a3,%d15,3
80005a5c:	d4 25       	ld.a %a5,[%a2]
80005a5e:	7d 54 0c 80 	jne.a %a4,%a5,80005a76 <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a62:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a66:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005a68:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
80005a6c:	6e 08       	jz %d15,80005a7c <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
80005a6e:	6d ff dc ff 	call 80005a26 <IfxPort_resetESR>
                result = TRUE;
80005a72:	82 12       	mov %d2,1
80005a74:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005a76:	c2 1f       	add %d15,1
80005a78:	fc f1       	loop %a15,80005a5a <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005a7a:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
80005a7c:	00 90       	ret 

80005a7e <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
80005a7e:	40 4f       	mov.aa %a15,%a4
80005a80:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a82:	6d 00 80 0c 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005a86:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005a88:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005a8a:	6d 00 7c 0b 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
80005a8e:	82 12       	mov %d2,1
80005a90:	0f 82 00 20 	sh %d2,%d2,%d8
80005a94:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a98:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a9c:	02 27       	mov %d7,%d2
80005a9e:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005aa2:	02 f4       	mov %d4,%d15
80005aa4:	1d 00 a4 0c 	j 800073ec <IfxScuWdt_setCpuEndinit>

80005aa8 <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005aa8:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005aaa:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005aae:	40 4c       	mov.aa %a12,%a4
80005ab0:	02 48       	mov %d8,%d4
80005ab2:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005ab6:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005ab8:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005aba:	d9 dd 80 90 	lea %a13,[%a13]2624 <80000a40 <IfxPort_cfg_esrMasks>>
80005abe:	d0 df       	addsc.a %a15,%a13,%d15,3
80005ac0:	c8 02       	ld.a %a2,[%a15]0
80005ac2:	7d 2c 0b 80 	jne.a %a12,%a2,80005ad8 <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005ac6:	b9 f3 04 00 	ld.hu %d3,[%a15]4
80005aca:	26 93       	and %d3,%d9
80005acc:	76 36       	jz %d3,80005ad8 <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
80005ace:	40 c4       	mov.aa %a4,%a12
80005ad0:	02 84       	mov %d4,%d8
80005ad2:	6d ff d6 ff 	call 80005a7e <IfxPort_setESR>
                result = TRUE;
80005ad6:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005ad8:	c2 1f       	add %d15,1
80005ada:	8b 0f 21 32 	ne %d3,%d15,16
80005ade:	df 03 f0 ff 	jne %d3,0,80005abe <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
80005ae2:	00 90       	ret 

80005ae4 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005ae4:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
80005ae6:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005ae8:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005aea:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005aec:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005aee:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005af0:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005af2:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005af4:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005af6:	78 07       	st.w [%sp]28,%d15
80005af8:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005afc:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005b00:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b04:	3b 80 0f 70 	mov %d7,248
80005b08:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b0c:	9f 0f 07 80 	jned %d15,0,80005b1a <IfxPort_setGroupModeInput+0x36>
80005b10:	d9 44 10 00 	lea %a4,[%a4]16
80005b14:	82 0f       	mov %d15,0
80005b16:	a0 3f       	mov.a %a15,3
80005b18:	3c 1e       	j 80005b54 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
80005b1a:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005b1e:	df 02 19 00 	jeq %d2,0,80005b50 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b22:	8f 34 c0 31 	andn %d3,%d4,3
80005b26:	60 32       	mov.a %a2,%d3
80005b28:	d9 af 20 00 	lea %a15,[%sp]32
80005b2c:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005b2e:	8f 34 00 21 	and %d2,%d4,3
80005b32:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b34:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
80005b38:	0f 27 00 30 	sh %d3,%d7,%d2
80005b3c:	a6 03       	or %d3,%d0
80005b3e:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
80005b42:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
80005b46:	0f 26 00 20 	sh %d2,%d6,%d2
80005b4a:	a6 32       	or %d2,%d3
80005b4c:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b50:	c2 14       	add %d4,1
80005b52:	3c dd       	j 80005b0c <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005b54:	d9 a3 20 00 	lea %a3,[%sp]32
80005b58:	90 32       	addsc.a %a2,%a3,%d15,2
80005b5a:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005b5e:	76 47       	jz %d4,80005b6c <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b60:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005b64:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b66:	02 43       	mov %d3,%d4
80005b68:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005b6c:	c2 1f       	add %d15,1
80005b6e:	b0 44       	add.a %a4,4
80005b70:	fc f2       	loop %a15,80005b54 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005b72:	00 90       	ret 

80005b74 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b74:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005b76:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b78:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005b7a:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b7c:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005b7e:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b80:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005b82:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005b84:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005b86:	78 07       	st.w [%sp]28,%d15
80005b88:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b8c:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005b90:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005b94:	3b 80 0f 00 	mov %d0,248
80005b98:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005b9c:	9f 0f 07 80 	jned %d15,0,80005baa <IfxPort_setGroupModeOutput+0x36>
80005ba0:	d9 44 10 00 	lea %a4,[%a4]16
80005ba4:	82 0f       	mov %d15,0
80005ba6:	a0 3f       	mov.a %a15,3
80005ba8:	3c 1f       	j 80005be6 <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005baa:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005bae:	df 02 1a 00 	jeq %d2,0,80005be2 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005bb2:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bb6:	d9 a2 20 00 	lea %a2,[%sp]32
80005bba:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005bbe:	8f 34 00 21 	and %d2,%d4,3
80005bc2:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005bc4:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bc6:	0f 20 00 70 	sh %d7,%d0,%d2
80005bca:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005bce:	0f 23 00 20 	sh %d2,%d3,%d2
80005bd2:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bd6:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005bd8:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005bda:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005bde:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005be2:	c2 14       	add %d4,1
80005be4:	3c dc       	j 80005b9c <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005be6:	d9 a3 20 00 	lea %a3,[%sp]32
80005bea:	90 32       	addsc.a %a2,%a3,%d15,2
80005bec:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005bf0:	76 47       	jz %d4,80005bfe <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005bf2:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005bf6:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005bf8:	02 43       	mov %d3,%d4
80005bfa:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005bfe:	c2 1f       	add %d15,1
80005c00:	b0 44       	add.a %a4,4
80005c02:	fc f2       	loop %a15,80005be6 <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005c04:	00 90       	ret 

80005c06 <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
80005c06:	20 10       	sub.a %sp,16
80005c08:	02 4f       	mov %d15,%d4
80005c0a:	02 5a       	mov %d10,%d5
80005c0c:	40 4c       	mov.aa %a12,%a4
80005c0e:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c10:	6d 00 b9 0b 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005c14:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c16:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005c18:	6d 00 b5 0a 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005c1c:	82 03       	mov %d3,0
80005c1e:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005c20:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005c24:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005c28:	59 a3 0c 00 	st.w [%sp]12,%d3
80005c2c:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c30:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005c34:	0f fa 00 50 	sh %d5,%d10,%d15
80005c38:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005c3c:	9f 03 03 80 	jned %d3,0,80005c42 <IfxPort_setGroupPadDriver+0x3c>
80005c40:	3c 1d       	j 80005c7a <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005c42:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005c46:	df 02 18 00 	jeq %d2,0,80005c76 <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005c4a:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c4e:	d9 a2 10 00 	lea %a2,[%sp]16
80005c52:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005c56:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005c5a:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005c5e:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005c60:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005c64:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005c68:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005c6c:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005c70:	a6 42       	or %d2,%d4
80005c72:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005c76:	c2 1f       	add %d15,1
80005c78:	3c e2       	j 80005c3c <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c7a:	58 02       	ld.w %d15,[%sp]8
80005c7c:	6e 08       	jz %d15,80005c8c <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c7e:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c82:	54 a6       	ld.w %d6,[%sp]
80005c84:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c86:	02 f7       	mov %d7,%d15
80005c88:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005c8c:	58 03       	ld.w %d15,[%sp]12
80005c8e:	6e 09       	jz %d15,80005ca0 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005c90:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c94:	19 a6 04 00 	ld.w %d6,[%sp]4
80005c98:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c9a:	02 f7       	mov %d7,%d15
80005c9c:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005ca0:	02 84       	mov %d4,%d8
}
80005ca2:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005ca6:	1d 00 a3 0b 	j 800073ec <IfxScuWdt_setCpuEndinit>

80005caa <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005caa:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005cae:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005cb2:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005cb6:	40 4f       	mov.aa %a15,%a4
80005cb8:	02 4f       	mov %d15,%d4
80005cba:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005cbc:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005cc0:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005cc4:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005cc6:	7d 24 11 80 	jne.a %a4,%a2,80005ce8 <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cca:	6d 00 5c 0b 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005cce:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005cd0:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005cd2:	6d 00 58 0a 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005cd6:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005cda:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005cdc:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005ce0:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005ce4:	6d 00 84 0b 	call 800073ec <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005ce8:	da ff       	mov %d15,255
80005cea:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005cee:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005cf2:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005cf6:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005cf8:	02 f3       	mov %d3,%d15
80005cfa:	49 f2 40 08 	ldmst [%a15]0,%e2
80005cfe:	00 90       	ret 

80005d00 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005d00:	02 5a       	mov %d10,%d5
80005d02:	40 4f       	mov.aa %a15,%a4
80005d04:	02 49       	mov %d9,%d4
80005d06:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d08:	6d 00 3d 0b 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d0c:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005d0e:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d10:	6d 00 39 0a 	call 80007182 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005d14:	37 0a 48 50 	extr %d5,%d10,0,8
80005d18:	bf 05 11 00 	jlt %d5,0,80005d3a <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005d1c:	bf 29 21 80 	jlt.u %d9,2,80005d5e <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005d20:	19 f2 24 20 	ld.w %d2,[%a15]164
80005d24:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005d28:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005d2c:	19 ff 24 20 	ld.w %d15,[%a15]164
80005d30:	8f 2f c0 f1 	andn %d15,%d15,2
80005d34:	59 ff 24 20 	st.w [%a15]164,%d15
80005d38:	3c 13       	j 80005d5e <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005d3a:	19 f2 28 20 	ld.w %d2,[%a15]168
80005d3e:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005d42:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005d46:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d4a:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005d4e:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005d52:	19 ff 28 20 	ld.w %d15,[%a15]168
80005d56:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005d5a:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005d5e:	02 84       	mov %d4,%d8
80005d60:	1d 00 46 0b 	j 800073ec <IfxScuWdt_setCpuEndinit>

80005d64 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d64:	0b 65 10 a8 	mov %e10,%d5,%d6
80005d68:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d6a:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005d6e:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d70:	6d 00 09 0b 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005d74:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005d76:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005d78:	6d 00 05 0a 	call 80007182 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005d7c:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005d7e:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d82:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005d86:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005d8a:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d8e:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005d92:	0f 2b 00 50 	sh %d5,%d11,%d2
80005d96:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d98:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005d9a:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005d9c:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005da0:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005da2:	1d 00 25 0b 	j 800073ec <IfxScuWdt_setCpuEndinit>

80005da6 <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005da6:	0b 45 10 88 	mov %e8,%d5,%d4
80005daa:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005dac:	6d 00 eb 0a 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005db0:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005db2:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005db4:	6d 00 e7 09 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005db8:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005dbc:	06 22       	sh %d2,2
80005dbe:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005dc0:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005dc4:	3b f0 00 30 	mov %d3,15
80005dc8:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005dcc:	0f 23 00 30 	sh %d3,%d3,%d2
80005dd0:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005dd4:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005dd6:	02 37       	mov %d7,%d3
80005dd8:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005ddc:	02 f4       	mov %d4,%d15
80005dde:	1d 00 07 0b 	j 800073ec <IfxScuWdt_setCpuEndinit>
	...

80005de4 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005de4:	7b e0 e4 30 	movh %d3,3662
80005de8:	1b 13 c0 31 	addi %d3,%d3,7169
80005dec:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005df0:	82 2f       	mov %d15,2
80005df2:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005df6:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005dfa:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005dfe:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e02:	7b 80 82 6e 	movh %d6,59432
80005e06:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005e0a:	19 4e 10 10 	ld.w %d14,[%a4]80
80005e0e:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005e10:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005e14:	d2 0a       	mov %e10,0
80005e16:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005e18:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e1c:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e20:	82 f7       	mov %d7,-1
80005e22:	1b 06 c0 67 	addi %d6,%d6,31744
80005e26:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005e2a:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005e2c:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e30:	7b 60 f8 1f 	movh %d1,65414
80005e34:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005e38:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005e3a:	0b 12 40 10 	addx %d1,%d2,%d1
80005e3e:	8b f3 bf 20 	addc %d2,%d3,-1
80005e42:	80 53       	mov.d %d3,%a5
80005e44:	ba 02       	eq %d15,%d2,0
80005e46:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005e4a:	8b 02 00 f5 	or.ne %d15,%d2,0
80005e4e:	ee 24       	jnz %d15,80005e96 <IfxScuCcu_calculateSysPllDividers+0xb2>
80005e50:	02 5d       	mov %d13,%d5
80005e52:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005e54:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005e58:	80 68       	mov.d %d8,%a6
80005e5a:	ba 03       	eq %d15,%d3,0
80005e5c:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005e60:	8b 03 00 f5 	or.ne %d15,%d3,0
80005e64:	ee 13       	jnz %d15,80005e8a <IfxScuCcu_calculateSysPllDividers+0xa6>
80005e66:	82 18       	mov %d8,1
80005e68:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005e6c:	4b d8 11 22 	div.u %e2,%d8,%d13
80005e70:	e2 e2       	mul %d2,%d14
80005e72:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005e74:	df 02 18 00 	jeq %d2,0,80005ea4 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005e78:	82 1f       	mov %d15,1
80005e7a:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005e7e:	6a 8b       	cmovn %d11,%d15,%d8
80005e80:	6a 20       	cmovn %d0,%d15,%d2
80005e82:	6a 5a       	cmovn %d10,%d15,%d5
80005e84:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005e86:	c2 18       	add %d8,1
80005e88:	fc 22       	loop %a2,80005e6c <IfxScuCcu_calculateSysPllDividers+0x88>
80005e8a:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005e8c:	42 c1       	add %d1,%d12
80005e8e:	42 fd       	add %d13,%d15
80005e90:	8b 11 68 f2 	lt.u %d15,%d1,129
80005e94:	ee e0       	jnz %d15,80005e54 <IfxScuCcu_calculateSysPllDividers+0x70>
80005e96:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005e98:	c2 f5       	add %d5,-1
80005e9a:	01 23 20 30 	sub.a %a3,%a3,%a2
80005e9e:	fd f0 c7 7f 	loop %a15,80005e2c <IfxScuCcu_calculateSysPllDividers+0x48>
80005ea2:	3c 05       	j 80005eac <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005ea4:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005ea8:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005eaa:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005eac:	da 64       	mov %d15,100
80005eae:	06 14       	sh %d4,1
80005eb0:	4b f4 11 42 	div.u %e4,%d4,%d15
80005eb4:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005eb6:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005eb8:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005ebc:	ee 0f       	jnz %d15,80005eda <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005ebe:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005ec0:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005ec2:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005ec4:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005ec6:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005eca:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005ece:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005ed2:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005ed6:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005ed8:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005eda:	00 90       	ret 

80005edc <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005edc:	91 00 00 f7 	movh.a %a15,28672
80005ee0:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
}
80005ee4:	4b 02 61 21 	utof %d2,%d2
80005ee8:	00 90       	ret 

80005eea <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005eea:	91 30 00 ff 	movh.a %a15,61443
80005eee:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005ef2:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005ef4:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005ef8:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005efc:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005f00:	6e 0c       	jz %d15,80005f18 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005f02:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005f04:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005f06:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005f0a:	5e 17       	jne %d15,1,80005f18 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005f0c:	91 00 00 f7 	movh.a %a15,28672
80005f10:	19 f2 38 30 	ld.w %d2,[%a15]248 <700000f8 <IfxScuCcu_xtalFrequency>>
80005f14:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005f18:	00 90       	ret 

80005f1a <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005f1a:	91 30 00 ff 	movh.a %a15,61443
80005f1e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005f22:	6d ff e4 ff 	call 80005eea <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005f26:	4c f9       	ld.w %d15,[%a15]36
80005f28:	2e 05       	jz.t %d15,0,80005f32 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005f2a:	4c fb       	ld.w %d15,[%a15]44
80005f2c:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005f30:	3c 21       	j 80005f72 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005f32:	4c f9       	ld.w %d15,[%a15]36
80005f34:	6f 3f 15 00 	jz.t %d15,3,80005f5e <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005f38:	48 b4       	ld.w %d4,[%a15]44
80005f3a:	8f f4 07 41 	and %d4,%d4,127
80005f3e:	c2 14       	add %d4,1
80005f40:	6d 00 a3 26 	call 8000ac86 <__floatsidf>
80005f44:	7b 80 19 54 	movh %d5,16792
80005f48:	0b 23 10 68 	mov %e6,%d3,%d2
80005f4c:	82 04       	mov %d4,0
80005f4e:	1b 45 78 5d 	addi %d5,%d5,-10364
80005f52:	6d 00 0e 26 	call 8000ab6e <__divdf3>
80005f56:	0b 23 10 48 	mov %e4,%d3,%d2
80005f5a:	1d 00 c9 26 	j 8000acec <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005f5e:	48 a3       	ld.w %d3,[%a15]40
80005f60:	4c fb       	ld.w %d15,[%a15]44
80005f62:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005f66:	16 7f       	and %d15,127
80005f68:	c2 13       	add %d3,1
80005f6a:	4b 03 41 31 	itof %d3,%d3
80005f6e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f72:	c2 1f       	add %d15,1
80005f74:	4b 0f 41 f1 	itof %d15,%d15
80005f78:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005f7c:	00 90       	ret 

80005f7e <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f7e:	91 30 00 ff 	movh.a %a15,61443
80005f82:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005f86:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005f88:	7b f0 cb 24 	movh %d2,19647
80005f8c:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005f90:	6f 3f 18 80 	jnz.t %d15,3,80005fc0 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005f94:	6d ff ab ff 	call 80005eea <IfxScuCcu_getOscFrequency>
80005f98:	91 30 00 ff 	movh.a %a15,61443
80005f9c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005fa0:	48 03       	ld.w %d3,[%a15]0
80005fa2:	4c f0       	ld.w %d15,[%a15]0
80005fa4:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005fa8:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005fac:	c2 13       	add %d3,1
80005fae:	4b 03 41 31 	itof %d3,%d3
80005fb2:	c2 1f       	add %d15,1
80005fb4:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005fb8:	4b 0f 41 f1 	itof %d15,%d15
80005fbc:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005fc0:	00 90       	ret 

80005fc2 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005fc2:	91 30 00 ff 	movh.a %a15,61443
80005fc6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005fca:	6d ff 90 ff 	call 80005eea <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005fce:	4c f5       	ld.w %d15,[%a15]20
80005fd0:	2e 06       	jz.t %d15,0,80005fdc <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005fd2:	4c f7       	ld.w %d15,[%a15]28
80005fd4:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005fd8:	c2 1f       	add %d15,1
80005fda:	3c 28       	j 8000602a <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005fdc:	4c f5       	ld.w %d15,[%a15]20
80005fde:	6f 3f 15 00 	jz.t %d15,3,80006008 <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005fe2:	48 74       	ld.w %d4,[%a15]28
80005fe4:	8f f4 07 41 	and %d4,%d4,127
80005fe8:	c2 14       	add %d4,1
80005fea:	6d 00 4e 26 	call 8000ac86 <__floatsidf>
80005fee:	7b 80 19 54 	movh %d5,16792
80005ff2:	0b 23 10 68 	mov %e6,%d3,%d2
80005ff6:	82 04       	mov %d4,0
80005ff8:	1b 45 78 5d 	addi %d5,%d5,-10364
80005ffc:	6d 00 b9 25 	call 8000ab6e <__divdf3>
80006000:	0b 23 10 48 	mov %e4,%d3,%d2
80006004:	1d 00 74 26 	j 8000acec <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80006008:	48 64       	ld.w %d4,[%a15]24
8000600a:	4c f7       	ld.w %d15,[%a15]28
8000600c:	37 04 e7 44 	extr.u %d4,%d4,9,7
80006010:	8f ff 07 31 	and %d3,%d15,127
80006014:	4c f6       	ld.w %d15,[%a15]24
80006016:	c2 14       	add %d4,1
80006018:	37 0f 64 fc 	extr.u %d15,%d15,24,4
8000601c:	4b 04 41 41 	itof %d4,%d4
80006020:	c2 1f       	add %d15,1
80006022:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80006026:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000602a:	4b 0f 41 f1 	itof %d15,%d15
8000602e:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80006032:	00 90       	ret 

80006034 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80006034:	91 30 00 ff 	movh.a %a15,61443
80006038:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
8000603c:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
8000603e:	7b f0 cb 24 	movh %d2,19647
80006042:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80006046:	6f 3f 18 80 	jnz.t %d15,3,80006076 <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
8000604a:	6d ff 50 ff 	call 80005eea <IfxScuCcu_getOscFrequency>
8000604e:	91 30 00 ff 	movh.a %a15,61443
80006052:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006056:	48 03       	ld.w %d3,[%a15]0
80006058:	4c f0       	ld.w %d15,[%a15]0
8000605a:	37 03 e7 34 	extr.u %d3,%d3,9,7
8000605e:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80006062:	c2 13       	add %d3,1
80006064:	4b 03 41 31 	itof %d3,%d3
80006068:	c2 1f       	add %d15,1
8000606a:	4b 32 41 20 	mul.f %d2,%d2,%d3
8000606e:	4b 0f 41 f1 	itof %d15,%d15
80006072:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80006076:	00 90       	ret 

80006078 <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80006078:	91 30 00 ff 	movh.a %a15,61443
8000607c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006080:	4c f0       	ld.w %d15,[%a15]0
80006082:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006086:	6e 06       	jz %d15,80006092 <IfxScuCcu_getSourceFrequency+0x1a>
80006088:	1e 13       	jeq %d15,1,8000608e <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
8000608a:	82 02       	mov %d2,0
8000608c:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
8000608e:	1d ff 9a ff 	j 80005fc2 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80006092:	7b f0 cb 24 	movh %d2,19647
80006096:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
8000609a:	00 90       	ret 

8000609c <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
8000609c:	02 4f       	mov %d15,%d4
8000609e:	6d ff ed ff 	call 80006078 <IfxScuCcu_getSourceFrequency>
800060a2:	91 30 00 ff 	movh.a %a15,61443
800060a6:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800060aa:	48 03       	ld.w %d3,[%a15]0
800060ac:	37 03 64 34 	extr.u %d3,%d3,8,4
800060b0:	4b 03 41 31 	itof %d3,%d3
800060b4:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
800060b8:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
800060bc:	4b f2 41 20 	mul.f %d2,%d2,%d15
800060c0:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
800060c4:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
800060c8:	a2 3f       	sub %d15,%d3
800060ca:	3f 2f fd ff 	jlt.u %d15,%d2,800060c4 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
800060ce:	00 90       	ret 

800060d0 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
800060d0:	6d ff d4 ff 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800060d4:	91 30 00 ff 	movh.a %a15,61443
800060d8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060dc:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
800060de:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800060e0:	37 03 64 36 	extr.u %d3,%d3,12,4
800060e4:	ff 53 30 80 	jge.u %d3,5,80006144 <IfxScuCcu_getBbbFrequency+0x74>
800060e8:	91 00 00 f8 	movh.a %a15,32768
800060ec:	d9 ff 38 36 	lea %a15,[%a15]24824 <800060f8 <IfxScuCcu_getBbbFrequency+0x28>>
800060f0:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800060f4:	dc 0f       	ji %a15
800060f6:	00 00       	nop 
800060f8:	1d 00 0a 00 	j 8000610c <IfxScuCcu_getBbbFrequency+0x3c>
800060fc:	1d 00 17 00 	j 8000612a <IfxScuCcu_getBbbFrequency+0x5a>
80006100:	1d 00 18 00 	j 80006130 <IfxScuCcu_getBbbFrequency+0x60>
80006104:	1d 00 19 00 	j 80006136 <IfxScuCcu_getBbbFrequency+0x66>
80006108:	1d 00 1a 00 	j 8000613c <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
8000610c:	91 30 00 ff 	movh.a %a15,61443
80006110:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006114:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
80006116:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80006118:	8f f3 00 31 	and %d3,%d3,15
8000611c:	df 03 14 00 	jeq %d3,0,80006144 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
80006120:	4c f0       	ld.w %d15,[%a15]0
80006122:	16 0f       	and %d15,15
80006124:	4b 0f 41 f1 	itof %d15,%d15
80006128:	3c 0c       	j 80006140 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
8000612a:	7b 00 1f f4 	movh %d15,16880
8000612e:	3c 09       	j 80006140 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
80006130:	7b 00 27 f4 	movh %d15,17008
80006134:	3c 06       	j 80006140 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
80006136:	7b 00 2f f4 	movh %d15,17136
8000613a:	3c 03       	j 80006140 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
8000613c:	7b 00 37 f4 	movh %d15,17264
80006140:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
80006144:	02 f2       	mov %d2,%d15
80006146:	00 90       	ret 

80006148 <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80006148:	91 30 00 ff 	movh.a %a15,61443
8000614c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006150:	6d ff 94 ff 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006154:	4c f0       	ld.w %d15,[%a15]0
80006156:	37 0f 64 f6 	extr.u %d15,%d15,12,4
8000615a:	ff 5f 2d 80 	jge.u %d15,5,800061b4 <IfxScuCcu_getMaxFrequency+0x6c>
8000615e:	91 00 00 f8 	movh.a %a15,32768
80006162:	d9 ff 2c 56 	lea %a15,[%a15]24940 <8000616c <IfxScuCcu_getMaxFrequency+0x24>>
80006166:	90 ff       	addsc.a %a15,%a15,%d15,2
80006168:	dc 0f       	ji %a15
8000616a:	00 00       	nop 
8000616c:	1d 00 0a 00 	j 80006180 <IfxScuCcu_getMaxFrequency+0x38>
80006170:	1d 00 14 00 	j 80006198 <IfxScuCcu_getMaxFrequency+0x50>
80006174:	1d 00 15 00 	j 8000619e <IfxScuCcu_getMaxFrequency+0x56>
80006178:	1d 00 16 00 	j 800061a4 <IfxScuCcu_getMaxFrequency+0x5c>
8000617c:	1d 00 17 00 	j 800061aa <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
80006180:	91 30 00 ff 	movh.a %a15,61443
80006184:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006188:	4c f0       	ld.w %d15,[%a15]0
8000618a:	16 0f       	and %d15,15
8000618c:	6e 15       	jz %d15,800061b6 <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
8000618e:	4c f0       	ld.w %d15,[%a15]0
80006190:	16 0f       	and %d15,15
80006192:	4b 0f 41 f1 	itof %d15,%d15
80006196:	3c 0c       	j 800061ae <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
80006198:	7b 00 17 f4 	movh %d15,16752
8000619c:	3c 09       	j 800061ae <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
8000619e:	7b 00 1f f4 	movh %d15,16880
800061a2:	3c 06       	j 800061ae <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
800061a4:	7b 00 27 f4 	movh %d15,17008
800061a8:	3c 03       	j 800061ae <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
800061aa:	7b 00 2f f4 	movh %d15,17136
800061ae:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
800061b2:	00 90       	ret 
    default:
        maxFrequency = 0.0;
800061b4:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
800061b6:	00 90       	ret 

800061b8 <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800061b8:	91 30 00 ff 	movh.a %a15,61443
800061bc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061c0:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
800061c2:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800061c4:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
800061c8:	76 87       	jz %d8,800061d6 <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
800061ca:	6d ff bf ff 	call 80006148 <IfxScuCcu_getMaxFrequency>
800061ce:	4b 08 41 f1 	itof %d15,%d8
800061d2:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
800061d6:	00 90       	ret 

800061d8 <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800061d8:	91 30 00 ff 	movh.a %a15,61443
800061dc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061e0:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
800061e2:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800061e4:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
800061e8:	16 f0       	and %d15,240
800061ea:	6e 07       	jz %d15,800061f8 <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
800061ec:	6d ff ae ff 	call 80006148 <IfxScuCcu_getMaxFrequency>
800061f0:	4b 08 41 f1 	itof %d15,%d8
800061f4:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
800061f8:	00 90       	ret 

800061fa <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
800061fa:	6d ff 3f ff 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800061fe:	91 30 00 ff 	movh.a %a15,61443
80006202:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006206:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
80006208:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
8000620a:	37 03 64 36 	extr.u %d3,%d3,12,4
8000620e:	ff 53 30 80 	jge.u %d3,5,8000626e <IfxScuCcu_getSpbFrequency+0x74>
80006212:	91 00 00 f8 	movh.a %a15,32768
80006216:	d9 ff 20 86 	lea %a15,[%a15]25120 <80006220 <IfxScuCcu_getSpbFrequency+0x26>>
8000621a:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000621e:	dc 0f       	ji %a15
80006220:	1d 00 0a 00 	j 80006234 <IfxScuCcu_getSpbFrequency+0x3a>
80006224:	1d 00 18 00 	j 80006254 <IfxScuCcu_getSpbFrequency+0x5a>
80006228:	1d 00 19 00 	j 8000625a <IfxScuCcu_getSpbFrequency+0x60>
8000622c:	1d 00 1a 00 	j 80006260 <IfxScuCcu_getSpbFrequency+0x66>
80006230:	1d 00 1b 00 	j 80006266 <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006234:	91 30 00 ff 	movh.a %a15,61443
80006238:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000623c:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
8000623e:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
80006240:	37 03 64 38 	extr.u %d3,%d3,16,4
80006244:	df 03 15 00 	jeq %d3,0,8000626e <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
80006248:	4c f0       	ld.w %d15,[%a15]0
8000624a:	37 0f 64 f8 	extr.u %d15,%d15,16,4
8000624e:	4b 0f 41 f1 	itof %d15,%d15
80006252:	3c 0c       	j 8000626a <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
80006254:	7b 00 1f f4 	movh %d15,16880
80006258:	3c 09       	j 8000626a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
8000625a:	7b 00 27 f4 	movh %d15,17008
8000625e:	3c 06       	j 8000626a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006260:	7b 00 2f f4 	movh %d15,17136
80006264:	3c 03       	j 8000626a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
80006266:	7b 00 37 f4 	movh %d15,17264
8000626a:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
8000626e:	02 f2       	mov %d2,%d15
80006270:	00 90       	ret 

80006272 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006272:	91 30 00 ff 	movh.a %a15,61443
80006276:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000627a:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
8000627c:	6d ff bf ff 	call 800061fa <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
80006280:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
80006284:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
80006286:	26 9f       	and %d15,%d9
80006288:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
8000628c:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
80006290:	7e 29       	jne %d15,%d2,800062a2 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
80006292:	3b 00 40 20 	mov %d2,1024
80006296:	a2 82       	sub %d2,%d8
80006298:	4b 02 41 21 	itof %d2,%d2
8000629c:	4b 23 51 20 	div.f %d2,%d3,%d2
800062a0:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
800062a2:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
800062a6:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
800062a8:	7e 49       	jne %d15,%d4,800062ba <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
800062aa:	4b 08 41 21 	itof %d2,%d8
800062ae:	7b 00 a8 f3 	movh %d15,14976
800062b2:	4b 23 41 20 	mul.f %d2,%d3,%d2
800062b6:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
800062ba:	00 90       	ret 

800062bc <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
800062bc:	6d ff de fe 	call 80006078 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800062c0:	91 30 00 ff 	movh.a %a15,61443
800062c4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062c8:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
800062ca:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800062cc:	37 03 64 36 	extr.u %d3,%d3,12,4
800062d0:	ff 53 31 80 	jge.u %d3,5,80006332 <IfxScuCcu_getSriFrequency+0x76>
800062d4:	91 00 00 f8 	movh.a %a15,32768
800062d8:	d9 ff 24 b6 	lea %a15,[%a15]25316 <800062e4 <IfxScuCcu_getSriFrequency+0x28>>
800062dc:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800062e0:	dc 0f       	ji %a15
800062e2:	00 00       	nop 
800062e4:	1d 00 0a 00 	j 800062f8 <IfxScuCcu_getSriFrequency+0x3c>
800062e8:	1d 00 18 00 	j 80006318 <IfxScuCcu_getSriFrequency+0x5c>
800062ec:	1d 00 19 00 	j 8000631e <IfxScuCcu_getSriFrequency+0x62>
800062f0:	1d 00 1a 00 	j 80006324 <IfxScuCcu_getSriFrequency+0x68>
800062f4:	1d 00 1b 00 	j 8000632a <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800062f8:	91 30 00 ff 	movh.a %a15,61443
800062fc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006300:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
80006302:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
80006304:	37 03 64 34 	extr.u %d3,%d3,8,4
80006308:	df 03 15 00 	jeq %d3,0,80006332 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
8000630c:	4c f0       	ld.w %d15,[%a15]0
8000630e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006312:	4b 0f 41 f1 	itof %d15,%d15
80006316:	3c 0c       	j 8000632e <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
80006318:	7b 00 1f f4 	movh %d15,16880
8000631c:	3c 09       	j 8000632e <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
8000631e:	7b 00 27 f4 	movh %d15,17008
80006322:	3c 06       	j 8000632e <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
80006324:	7b 00 2f f4 	movh %d15,17136
80006328:	3c 03       	j 8000632e <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
8000632a:	7b 00 37 f4 	movh %d15,17264
8000632e:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
80006332:	02 f2       	mov %d2,%d15
80006334:	00 90       	ret 

80006336 <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
80006336:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
80006338:	6d ff c2 ff 	call 800062bc <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
8000633c:	1e 1d       	jeq %d15,1,80006356 <IfxScuCcu_getCpuFrequency+0x20>
8000633e:	6e 07       	jz %d15,8000634c <IfxScuCcu_getCpuFrequency+0x16>
80006340:	de 2a       	jne %d15,2,80006374 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
80006342:	91 30 00 ff 	movh.a %a15,61443
80006346:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000634a:	3c 0a       	j 8000635e <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
8000634c:	91 30 00 ff 	movh.a %a15,61443
80006350:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006354:	3c 05       	j 8000635e <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
80006356:	91 30 00 ff 	movh.a %a15,61443
8000635a:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
8000635e:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
80006360:	6e 0b       	jz %d15,80006376 <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006362:	4b 0f 61 f1 	utof %d15,%d15
80006366:	7b 00 c8 33 	movh %d3,15488
8000636a:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
8000636e:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006372:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
80006374:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
80006376:	00 90       	ret 

80006378 <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006378:	91 30 00 ff 	movh.a %a15,61443
8000637c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006380:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006382:	7b 00 03 30 	movh %d3,48
80006386:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006388:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
8000638c:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
8000638e:	76 3f       	jz %d3,800063ac <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006390:	6d ff 96 ff 	call 800062bc <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006394:	3b 00 f0 30 	mov %d3,3840
80006398:	26 3f       	and %d15,%d3
8000639a:	1b 0f f0 ff 	addi %d15,%d15,-256
8000639e:	8f 0f d0 f1 	andn %d15,%d15,256
800063a2:	ee 05       	jnz %d15,800063ac <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
800063a4:	4b 08 41 f1 	itof %d15,%d8
800063a8:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
800063ac:	00 90       	ret 

800063ae <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063ae:	91 30 00 ff 	movh.a %a15,61443
800063b2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800063b6:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
800063b8:	7b 00 30 30 	movh %d3,768
800063bc:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
800063be:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
800063c2:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
800063c4:	76 3f       	jz %d3,800063e2 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
800063c6:	6d ff 7b ff 	call 800062bc <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
800063ca:	3b 00 f0 30 	mov %d3,3840
800063ce:	26 3f       	and %d15,%d3
800063d0:	1b 0f f0 ff 	addi %d15,%d15,-256
800063d4:	8f 0f d0 f1 	andn %d15,%d15,256
800063d8:	ee 05       	jnz %d15,800063e2 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
800063da:	4b 08 41 f1 	itof %d15,%d8
800063de:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
800063e2:	00 90       	ret 

800063e4 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
800063e4:	19 4f 10 10 	ld.w %d15,[%a4]80
800063e8:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
800063ec:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
800063ee:	59 cf 38 30 	st.w [%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
800063f2:	6d 00 c8 07 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
800063f6:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800063f8:	6d 00 e3 07 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800063fc:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800063fe:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006400:	6d 00 c1 06 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006404:	91 30 00 2f 	movh.a %a2,61443
80006408:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
8000640c:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
8000640e:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006410:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006412:	96 08       	or %d15,8
80006414:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006416:	6d 00 eb 07 	call 800073ec <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000641a:	02 84       	mov %d4,%d8
8000641c:	6d 00 ce 06 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006420:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
80006424:	91 30 00 3f 	movh.a %a3,61443
80006428:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000642c:	4c 30       	ld.w %d15,[%a3]0
8000642e:	91 30 00 2f 	movh.a %a2,61443
80006432:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006436:	bf 0f fb 7f 	jlt %d15,0,8000642c <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
8000643a:	4c 20       	ld.w %d15,[%a2]0
8000643c:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006440:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006442:	4c 20       	ld.w %d15,[%a2]0
80006444:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006448:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
8000644a:	91 30 00 2f 	movh.a %a2,61443
8000644e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006452:	4c 20       	ld.w %d15,[%a2]0
80006454:	96 10       	or %d15,16
80006456:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
80006458:	91 30 00 2f 	movh.a %a2,61443
8000645c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006460:	4c 20       	ld.w %d15,[%a2]0
80006462:	bf 0f ff 7f 	jlt %d15,0,80006460 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80006466:	91 30 00 2f 	movh.a %a2,61443
8000646a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000646e:	4c 20       	ld.w %d15,[%a2]0
80006470:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006474:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80006476:	4c 20       	ld.w %d15,[%a2]0
80006478:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000647c:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000647e:	6d 00 82 07 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006482:	91 30 00 2f 	movh.a %a2,61443
80006486:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000648a:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
8000648c:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000648e:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006490:	8f 02 c6 21 	andn %d2,%d2,96
80006494:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
80006496:	19 c6 38 30 	ld.w %d6,[%a12]248 <700000f8 <IfxScuCcu_xtalFrequency>>
8000649a:	7b 60 02 20 	movh %d2,38
8000649e:	1b 02 5a 22 	addi %d2,%d2,9632
800064a2:	4b 26 11 62 	div.u %e6,%d6,%d2
800064a6:	54 22       	ld.w %d2,[%a2]
800064a8:	c2 f6       	add %d6,-1
800064aa:	37 62 05 68 	insert %d6,%d2,%d6,16,5
800064ae:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
800064b0:	54 22       	ld.w %d2,[%a2]
800064b2:	8f 42 40 21 	or %d2,%d2,4
800064b6:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800064b8:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
800064bc:	54 32       	ld.w %d2,[%a3]
800064be:	6f 12 05 80 	jnz.t %d2,1,800064c8 <IfxScuCcu_init+0xe4>
800064c2:	fc 2d       	loop %a2,800064bc <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
800064c4:	82 1b       	mov %d11,1
800064c6:	3c 05       	j 800064d0 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800064c8:	54 32       	ld.w %d2,[%a3]
800064ca:	6f 82 fc 7f 	jz.t %d2,8,800064c2 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
800064ce:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
800064d0:	02 f4       	mov %d4,%d15
800064d2:	6d 00 58 06 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
800064d6:	91 30 00 2f 	movh.a %a2,61443
800064da:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800064de:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
800064e0:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
800064e2:	8f 82 40 21 	or %d2,%d2,8
800064e6:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
800064e8:	91 30 00 2f 	movh.a %a2,61443
800064ec:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800064f0:	54 22       	ld.w %d2,[%a2]
800064f2:	8f 82 40 21 	or %d2,%d2,8
800064f6:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
800064f8:	6d 00 7a 07 	call 800073ec <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800064fc:	02 84       	mov %d4,%d8
800064fe:	6d 00 e3 07 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
80006502:	df 0b 29 81 	jne %d11,0,80006754 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006506:	02 84       	mov %d4,%d8
80006508:	6d 00 58 06 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000650c:	91 30 00 2f 	movh.a %a2,61443
80006510:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006514:	4c 20       	ld.w %d15,[%a2]0
80006516:	6f 5f ff 7f 	jz.t %d15,5,80006514 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000651a:	91 30 00 2f 	movh.a %a2,61443
8000651e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006522:	54 22       	ld.w %d2,[%a2]
80006524:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006526:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
8000652a:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
8000652e:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80006532:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80006534:	91 30 00 2f 	movh.a %a2,61443
80006538:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000653c:	54 22       	ld.w %d2,[%a2]
8000653e:	0c f8       	ld.bu %d15,[%a15]8
80006540:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
80006544:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
80006546:	54 22       	ld.w %d2,[%a2]
80006548:	0c f9       	ld.bu %d15,[%a15]9
8000654a:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
8000654e:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80006550:	4c 20       	ld.w %d15,[%a2]0
80006552:	96 40       	or %d15,64
80006554:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80006556:	4c 20       	ld.w %d15,[%a2]0
80006558:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
8000655c:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
8000655e:	4c 20       	ld.w %d15,[%a2]0
80006560:	96 20       	or %d15,32
80006562:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006564:	4c 20       	ld.w %d15,[%a2]0
80006566:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000656a:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
8000656c:	4c 20       	ld.w %d15,[%a2]0
8000656e:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80006572:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006574:	6d ff 94 fd 	call 8000609c <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80006578:	91 30 00 2f 	movh.a %a2,61443
8000657c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006580:	4c 20       	ld.w %d15,[%a2]0
80006582:	6f 2f ff 7f 	jz.t %d15,2,80006580 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006586:	91 30 00 2f 	movh.a %a2,61443
8000658a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000658e:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006590:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006594:	8f 1f c0 f1 	andn %d15,%d15,1
80006598:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000659a:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000659e:	4c 30       	ld.w %d15,[%a3]0
800065a0:	91 30 00 2f 	movh.a %a2,61443
800065a4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065a8:	bf 0f fb 7f 	jlt %d15,0,8000659e <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
800065ac:	4c 20       	ld.w %d15,[%a2]0
800065ae:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
800065b2:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
800065b4:	4c 20       	ld.w %d15,[%a2]0
800065b6:	91 30 00 cf 	movh.a %a12,61443
800065ba:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800065be:	bf 0f fb 7f 	jlt %d15,0,800065b4 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
800065c2:	48 34       	ld.w %d4,[%a15]12
800065c4:	6d ff 6c fd 	call 8000609c <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
800065c8:	4c f5       	ld.w %d15,[%a15]20
800065ca:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
800065cc:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
800065ce:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
800065d2:	26 f2       	and %d2,%d15
800065d4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
800065d8:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
800065dc:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
800065e0:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
800065e4:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
800065e6:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800065ea:	4c 30       	ld.w %d15,[%a3]0
800065ec:	91 30 00 2f 	movh.a %a2,61443
800065f0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800065f4:	bf 0f fb 7f 	jlt %d15,0,800065ea <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800065f8:	4c f7       	ld.w %d15,[%a15]28
800065fa:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800065fc:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800065fe:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80006602:	26 f2       	and %d2,%d15
80006604:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
80006608:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
8000660c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
80006610:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
80006614:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
80006616:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
8000661a:	4c 30       	ld.w %d15,[%a3]0
8000661c:	91 30 00 2f 	movh.a %a2,61443
80006620:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80006624:	bf 0f fb 7f 	jlt %d15,0,8000661a <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80006628:	4c f9       	ld.w %d15,[%a15]36
8000662a:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
8000662c:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
8000662e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80006632:	26 f2       	and %d2,%d15
80006634:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
80006638:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
8000663c:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
80006640:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
80006642:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006646:	4c 30       	ld.w %d15,[%a3]0
80006648:	91 30 00 2f 	movh.a %a2,61443
8000664c:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006650:	bf 0f fb 7f 	jlt %d15,0,80006646 <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006654:	54 23       	ld.w %d3,[%a2]
80006656:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006658:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
8000665a:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
8000665e:	26 f2       	and %d2,%d15
80006660:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006664:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006668:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000666a:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000666c:	91 30 00 2f 	movh.a %a2,61443
80006670:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006674:	54 23       	ld.w %d3,[%a2]
80006676:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006678:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000667a:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000667e:	26 f2       	and %d2,%d15
80006680:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006684:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006686:	91 30 00 2f 	movh.a %a2,61443
8000668a:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
8000668e:	54 23       	ld.w %d3,[%a2]
80006690:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006692:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006694:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006698:	26 f2       	and %d2,%d15
8000669a:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
8000669e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800066a0:	91 30 00 2f 	movh.a %a2,61443
800066a4:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800066a8:	54 23       	ld.w %d3,[%a2]
800066aa:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800066ae:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
800066b2:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
800066b6:	26 f2       	and %d2,%d15
800066b8:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
800066bc:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800066be:	6d 00 03 07 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
800066c2:	91 00 80 cf 	movh.a %a12,63488
800066c6:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800066ca:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
800066ce:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800066d0:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
800066d4:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800066d8:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
800066da:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
800066dc:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
800066e0:	6d 00 51 05 	call 80007182 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
800066e4:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
800066e6:	02 94       	mov %d4,%d9
800066e8:	6d 00 82 06 	call 800073ec <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066ec:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066f0:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800066f4:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800066f6:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800066fa:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800066fe:	0c f0       	ld.bu %d15,[%a15]0
80006700:	8f fd 0f 21 	and %d2,%d13,255
80006704:	7f f2 28 80 	jge.u %d2,%d15,80006754 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006708:	02 84       	mov %d4,%d8
8000670a:	6d 00 57 05 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000670e:	4c d0       	ld.w %d15,[%a13]0
80006710:	6f 5f ff 7f 	jz.t %d15,5,8000670e <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006714:	02 df       	mov %d15,%d13
80006716:	16 ff       	and %d15,255
80006718:	53 cf 20 a0 	mul %d10,%d15,12
8000671c:	c8 12       	ld.a %a2,[%a15]4
8000671e:	4c c0       	ld.w %d15,[%a12]0
80006720:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006722:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
80006724:	30 32       	add.a %a2,%a3
80006726:	14 22       	ld.bu %d2,[%a2]
80006728:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
8000672c:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000672e:	6d 00 cb 06 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
80006732:	c8 12       	ld.a %a2,[%a15]4
80006734:	60 a3       	mov.a %a3,%d10
80006736:	30 32       	add.a %a2,%a3
80006738:	99 22 08 00 	ld.a %a2,[%a2]8
8000673c:	bc 23       	jz.a %a2,80006742 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
8000673e:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80006742:	c8 12       	ld.a %a2,[%a15]4
80006744:	60 a3       	mov.a %a3,%d10
80006746:	c2 1d       	add %d13,1
80006748:	30 32       	add.a %a2,%a3
8000674a:	19 24 04 00 	ld.w %d4,[%a2]4
8000674e:	6d ff a7 fc 	call 8000609c <IfxScuCcu_wait>
80006752:	3c d6       	j 800066fe <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006754:	02 84       	mov %d4,%d8
80006756:	6d 00 31 05 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000675a:	91 30 00 ff 	movh.a %a15,61443
8000675e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006762:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006764:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006766:	8f 0f c4 f1 	andn %d15,%d15,64
8000676a:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000676c:	6d 00 ac 06 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006770:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006774:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
80006776:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000677a:	6d 00 04 05 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
8000677e:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006780:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006782:	96 08       	or %d15,8
80006784:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006786:	91 30 00 ff 	movh.a %a15,61443
8000678a:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
8000678e:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006790:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006792:	8f 8f c0 f1 	andn %d15,%d15,8
80006796:	a6 fc       	or %d12,%d15
80006798:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000679a:	6d 00 29 06 	call 800073ec <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
8000679e:	02 b2       	mov %d2,%d11
800067a0:	00 90       	ret 

800067a2 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
800067a2:	91 00 00 f8 	movh.a %a15,32768
800067a6:	d9 ff 88 b0 	lea %a15,[%a15]2760 <80000ac8 <IfxScuCcu_defaultClockConfig>>
800067aa:	c5 02 14 00 	lea %a2,14 <_.+0x13>
800067ae:	44 ff       	ld.w %d15,[%a15+]
800067b0:	64 4f       	st.w [%a4+],%d15
800067b2:	fc 2e       	loop %a2,800067ae <IfxScuCcu_initConfig+0xc>
800067b4:	00 90       	ret 

800067b6 <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
800067b6:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
800067b8:	6d 00 e5 05 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
800067bc:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800067be:	6d 00 00 06 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067c2:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
800067c4:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067c6:	6d 00 de 04 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800067ca:	91 30 00 ff 	movh.a %a15,61443
800067ce:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800067d2:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
800067d4:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067d6:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800067d8:	8f 82 40 21 	or %d2,%d2,8
800067dc:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800067de:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067e2:	6d 00 05 06 	call 800073ec <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800067e6:	02 84       	mov %d4,%d8
800067e8:	6d 00 e8 04 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
800067ec:	91 30 00 ff 	movh.a %a15,61443
800067f0:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800067f4:	48 02       	ld.w %d2,[%a15]0
800067f6:	ef 02 0c 00 	jz.t %d2,16,8000680e <IfxScuCcu_initErayPll+0x58>
800067fa:	48 02       	ld.w %d2,[%a15]0
800067fc:	6f 12 09 80 	jnz.t %d2,1,8000680e <IfxScuCcu_initErayPll+0x58>
80006800:	91 30 00 ff 	movh.a %a15,61443
80006804:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006808:	48 02       	ld.w %d2,[%a15]0
8000680a:	6f 12 19 00 	jz.t %d2,1,8000683c <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
8000680e:	91 30 00 ff 	movh.a %a15,61443
80006812:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006816:	48 02       	ld.w %d2,[%a15]0
80006818:	b7 f2 01 28 	insert %d2,%d2,15,16,1
8000681c:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
8000681e:	48 02       	ld.w %d2,[%a15]0
80006820:	8f 22 c0 21 	andn %d2,%d2,2
80006824:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
80006826:	91 30 00 ff 	movh.a %a15,61443
8000682a:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
8000682e:	48 02       	ld.w %d2,[%a15]0
80006830:	6f 12 ff ff 	jnz.t %d2,1,8000682e <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
80006834:	19 c4 04 00 	ld.w %d4,[%a12]4
80006838:	6d ff 32 fc 	call 8000609c <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
8000683c:	91 30 00 ff 	movh.a %a15,61443
80006840:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006844:	48 02       	ld.w %d2,[%a15]0
80006846:	6f 02 15 80 	jnz.t %d2,0,80006870 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
8000684a:	48 02       	ld.w %d2,[%a15]0
8000684c:	6f 42 ff 7f 	jz.t %d2,4,8000684a <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
80006850:	91 30 00 ff 	movh.a %a15,61443
80006854:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006858:	48 02       	ld.w %d2,[%a15]0
8000685a:	b7 32 07 28 	insert %d2,%d2,3,16,7
8000685e:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006860:	91 30 00 ff 	movh.a %a15,61443
80006864:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006868:	48 02       	ld.w %d2,[%a15]0
8000686a:	8f 12 40 21 	or %d2,%d2,1
8000686e:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
80006870:	91 30 00 ff 	movh.a %a15,61443
80006874:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006878:	48 02       	ld.w %d2,[%a15]0
8000687a:	6f 52 ff 7f 	jz.t %d2,5,80006878 <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000687e:	91 30 00 ff 	movh.a %a15,61443
80006882:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006886:	48 03       	ld.w %d3,[%a15]0
80006888:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000688c:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000688e:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006892:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006894:	91 30 00 ff 	movh.a %a15,61443
80006898:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000689c:	48 03       	ld.w %d3,[%a15]0
8000689e:	14 c2       	ld.bu %d2,[%a12]
800068a0:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
800068a4:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
800068a6:	48 03       	ld.w %d3,[%a15]0
800068a8:	39 c2 01 00 	ld.bu %d2,[%a12]1
800068ac:	37 23 85 24 	insert %d2,%d3,%d2,9,5
800068b0:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
800068b2:	48 02       	ld.w %d2,[%a15]0
800068b4:	b7 f2 01 29 	insert %d2,%d2,15,18,1
800068b8:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
800068ba:	48 02       	ld.w %d2,[%a15]0
800068bc:	8f 02 42 21 	or %d2,%d2,32
800068c0:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800068c2:	6d 00 01 06 	call 800074c4 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
800068c6:	91 10 00 f0 	movh.a %a15,1
800068ca:	91 30 00 2f 	movh.a %a2,61443
800068ce:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800068d2:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
800068d6:	fd f0 04 00 	loop %a15,800068de <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
800068da:	82 19       	mov %d9,1
800068dc:	3c 05       	j 800068e6 <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
800068de:	54 22       	ld.w %d2,[%a2]
800068e0:	6f 22 fb 7f 	jz.t %d2,2,800068d6 <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
800068e4:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800068e6:	02 84       	mov %d4,%d8
800068e8:	6d 00 68 04 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
800068ec:	91 30 00 ff 	movh.a %a15,61443
800068f0:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800068f4:	48 02       	ld.w %d2,[%a15]0
800068f6:	8f 12 c0 21 	andn %d2,%d2,1
800068fa:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
800068fc:	91 30 00 ff 	movh.a %a15,61443
80006900:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006904:	48 02       	ld.w %d2,[%a15]0
80006906:	6f 02 ff ff 	jnz.t %d2,0,80006904 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
8000690a:	91 30 00 ff 	movh.a %a15,61443
8000690e:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006912:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006914:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
80006916:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
8000691a:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
8000691e:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006922:	6d 00 d1 05 	call 800074c4 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006926:	02 f4       	mov %d4,%d15
80006928:	6d 00 2d 04 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
8000692c:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
80006930:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006932:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006936:	8f 82 40 21 	or %d2,%d2,8
8000693a:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
8000693c:	91 30 00 ff 	movh.a %a15,61443
80006940:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006944:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006946:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006948:	8f 82 c0 21 	andn %d2,%d2,8
8000694c:	a6 32       	or %d2,%d3
8000694e:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006950:	6d 00 4e 05 	call 800073ec <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006954:	02 92       	mov %d2,%d9
80006956:	00 90       	ret 

80006958 <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
80006958:	91 00 00 f8 	movh.a %a15,32768
8000695c:	d9 ff 80 b0 	lea %a15,[%a15]2752 <80000ac0 <IfxScuCcu_defaultErayPllConfig>>
80006960:	09 f2 40 09 	ld.d %e2,[%a15]
80006964:	89 42 40 09 	st.d [%a4],%e2
80006968:	00 90       	ret 

8000696a <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
8000696a:	02 5a       	mov %d10,%d5
8000696c:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
8000696e:	6d ff a7 fc 	call 800062bc <IfxScuCcu_getSriFrequency>
80006972:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006974:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
80006978:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
8000697c:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
8000697e:	f6 29       	jnz %d2,80006990 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
80006980:	7b 00 28 84 	movh %d8,17024
80006984:	4b 8a 41 80 	mul.f %d8,%d10,%d8
80006988:	4b f8 51 80 	div.f %d8,%d8,%d15
8000698c:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006990:	6d 00 17 05 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006994:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006996:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006998:	6d 00 10 04 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
8000699c:	df 19 0f 00 	jeq %d9,1,800069ba <IfxScuCcu_setCpuFrequency+0x50>
800069a0:	76 98       	jz %d9,800069b0 <IfxScuCcu_setCpuFrequency+0x46>
800069a2:	df 29 11 80 	jne %d9,2,800069c4 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
800069a6:	91 30 00 ff 	movh.a %a15,61443
800069aa:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800069ae:	3c 0a       	j 800069c2 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
800069b0:	91 30 00 ff 	movh.a %a15,61443
800069b4:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
800069b8:	3c 05       	j 800069c2 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
800069ba:	91 30 00 ff 	movh.a %a15,61443
800069be:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
800069c2:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800069c4:	02 a4       	mov %d4,%d10
800069c6:	6d 00 7f 05 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
800069ca:	76 89       	jz %d8,800069dc <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
800069cc:	4b 08 61 81 	utof %d8,%d8
800069d0:	7b 00 c8 23 	movh %d2,15488
800069d4:	4b 28 41 80 	mul.f %d8,%d8,%d2
800069d8:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
800069dc:	02 f2       	mov %d2,%d15
800069de:	00 90       	ret 

800069e0 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
800069e0:	91 30 00 ff 	movh.a %a15,61443
800069e4:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
800069e8:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
800069ea:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
800069ec:	6d ff 46 fb 	call 80006078 <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
800069f0:	4b 82 51 20 	div.f %d2,%d2,%d8
800069f4:	4b 02 31 31 	ftoiz %d3,%d2
800069f8:	4b 03 41 41 	itof %d4,%d3
800069fc:	6b 04 31 22 	sub.f %d2,%d2,%d4
80006a00:	7b 00 f0 43 	movh %d4,16128
80006a04:	4b 42 01 20 	cmp.f %d2,%d2,%d4
80006a08:	37 02 61 21 	extr.u %d2,%d2,2,1
80006a0c:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80006a0e:	82 13       	mov %d3,1
80006a10:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
80006a14:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
80006a18:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
80006a1c:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
80006a20:	8f 12 c0 31 	andn %d3,%d2,1
80006a24:	02 92       	mov %d2,%d9
80006a26:	8b 74 a0 92 	ge.u %d9,%d4,7
80006a2a:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006a2e:	6d 00 c8 04 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a32:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006a34:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a36:	6d 00 c1 03 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
80006a3a:	40 f2       	mov.aa %a2,%a15
80006a3c:	54 22       	ld.w %d2,[%a2]
80006a3e:	91 30 00 ff 	movh.a %a15,61443
80006a42:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80006a46:	bf 02 fb 7f 	jlt %d2,0,80006a3c <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
80006a4a:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
80006a4e:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a52:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
80006a54:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a56:	6d 00 37 05 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
80006a5a:	6d ff 0f fb 	call 80006078 <IfxScuCcu_getSourceFrequency>
80006a5e:	4c f0       	ld.w %d15,[%a15]0
80006a60:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006a64:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006a68:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a6c:	00 90       	ret 

80006a6e <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
80006a6e:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006a70:	6d 00 a7 04 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
80006a74:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a76:	6d ff 84 fa 	call 80005f7e <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a7a:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a7c:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
80006a7e:	6d 00 9d 03 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a82:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a86:	91 30 00 ff 	movh.a %a15,61443
80006a8a:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006a8e:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a90:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006a94:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006a96:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006a9a:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006a9e:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006aa2:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006aa4:	6d 00 10 05 	call 800074c4 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006aa8:	6d ff 6b fa 	call 80005f7e <IfxScuCcu_getPllErayVcoFrequency>
80006aac:	4c f0       	ld.w %d15,[%a15]0
80006aae:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006ab2:	c2 1f       	add %d15,1
80006ab4:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006ab8:	4b f2 51 20 	div.f %d2,%d2,%d15
80006abc:	00 90       	ret 

80006abe <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
80006abe:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006ac0:	6d 00 7f 04 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
80006ac4:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006ac6:	6d ff b7 fa 	call 80006034 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006aca:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006acc:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006ace:	6d 00 75 03 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006ad2:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006ad6:	91 30 00 ff 	movh.a %a15,61443
80006ada:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80006ade:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006ae0:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006ae4:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006ae6:	6b 03 31 88 	sub.f %d8,%d8,%d3
80006aea:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006aee:	37 82 07 84 	insert %d8,%d2,%d8,8,7
80006af2:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006af4:	6d 00 e8 04 	call 800074c4 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
80006af8:	6d ff 9e fa 	call 80006034 <IfxScuCcu_getPllVcoFrequency>
80006afc:	4c f0       	ld.w %d15,[%a15]0
80006afe:	37 0f 67 f4 	extr.u %d15,%d15,8,7
80006b02:	c2 1f       	add %d15,1
80006b04:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
80006b08:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b0c:	00 90       	ret 

80006b0e <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
80006b0e:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
80006b10:	6d ff b4 fa 	call 80006078 <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
80006b14:	4b f2 51 20 	div.f %d2,%d2,%d15
80006b18:	82 24       	mov %d4,2
80006b1a:	4b 02 71 21 	ftouz %d2,%d2
80006b1e:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
80006b22:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
80006b26:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
80006b2a:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
80006b2e:	8f 14 c0 f1 	andn %d15,%d4,1
80006b32:	02 a4       	mov %d4,%d10
80006b34:	8b 72 a0 a2 	ge.u %d10,%d2,7
80006b38:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
80006b3c:	6d 00 23 04 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
80006b40:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006b42:	6d 00 3e 04 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b46:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006b48:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b4a:	6d 00 1c 03 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b4e:	91 30 00 ff 	movh.a %a15,61443
80006b52:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b56:	48 02       	ld.w %d2,[%a15]0
80006b58:	3b 00 3e f0 	mov %d15,992
80006b5c:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b5e:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006b60:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006b62:	6d 00 45 04 	call 800073ec <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006b66:	02 94       	mov %d4,%d9
80006b68:	6d 00 28 03 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006b6c:	91 30 00 2f 	movh.a %a2,61443
80006b70:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b74:	4c 20       	ld.w %d15,[%a2]0
80006b76:	91 30 00 ff 	movh.a %a15,61443
80006b7a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b7e:	bf 0f fb 7f 	jlt %d15,0,80006b74 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006b82:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b84:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006b86:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006b8a:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006b8e:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006b90:	6d 00 9a 04 	call 800074c4 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006b94:	02 84       	mov %d4,%d8
80006b96:	6d 00 f6 02 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006b9a:	91 30 00 ff 	movh.a %a15,61443
80006b9e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006ba2:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006ba4:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006ba6:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006baa:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006bac:	6d 00 20 04 	call 800073ec <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006bb0:	91 30 00 ff 	movh.a %a15,61443
80006bb4:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006bb8:	4c f0       	ld.w %d15,[%a15]0
80006bba:	bf 0f ff 7f 	jlt %d15,0,80006bb8 <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006bbe:	1d ff 1e fb 	j 800061fa <IfxScuCcu_getSpbFrequency>

80006bc2 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006bc2:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006bc4:	6d ff 5a fa 	call 80006078 <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006bc8:	4b f2 51 20 	div.f %d2,%d2,%d15
80006bcc:	4b 02 31 31 	ftoiz %d3,%d2
80006bd0:	4b 03 41 f1 	itof %d15,%d3
80006bd4:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006bd8:	7b 00 f0 f3 	movh %d15,16128
80006bdc:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006be0:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006be4:	82 12       	mov %d2,1
80006be6:	42 3f       	add %d15,%d3
80006be8:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
80006bec:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
80006bf0:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
80006bf2:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
80006bf6:	8f 1f c0 21 	andn %d2,%d15,1
80006bfa:	02 9f       	mov %d15,%d9
80006bfc:	8b 73 a0 92 	ge.u %d9,%d3,7
80006c00:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006c04:	6d 00 dd 03 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c08:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006c0a:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006c0c:	6d 00 d6 02 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c10:	91 30 00 2f 	movh.a %a2,61443
80006c14:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c18:	4c 20       	ld.w %d15,[%a2]0
80006c1a:	91 30 00 ff 	movh.a %a15,61443
80006c1e:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c22:	bf 0f fb 7f 	jlt %d15,0,80006c18 <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006c26:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006c28:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006c2a:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006c2e:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006c32:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006c34:	6d 00 48 04 	call 800074c4 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006c38:	4c f0       	ld.w %d15,[%a15]0
80006c3a:	bf 0f ff 7f 	jlt %d15,0,80006c38 <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006c3e:	1d ff 3f fb 	j 800062bc <IfxScuCcu_getSriFrequency>

80006c42 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006c42:	91 30 00 ff 	movh.a %a15,61443
80006c46:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006c4a:	4c f0       	ld.w %d15,[%a15]0
80006c4c:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006c50:	df 0f 81 00 	jeq %d15,0,80006d52 <IfxScuCcu_switchToBackupClock+0x110>
80006c54:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006c56:	6d 00 b4 03 	call 800073be <IfxScuWdt_getSafetyWatchdogPassword>
80006c5a:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c5c:	6d 00 93 03 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c60:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006c62:	02 28       	mov %d8,%d2
80006c64:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c68:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c6c:	91 30 00 df 	movh.a %a13,61443
80006c70:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c72:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006c76:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c7a:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c7e:	6e 1b       	jz %d15,80006cb4 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006c80:	02 94       	mov %d4,%d9
80006c82:	6d 00 9b 02 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006c86:	54 e2       	ld.w %d2,[%a14]
80006c88:	6f 52 ff 7f 	jz.t %d2,5,80006c86 <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c8c:	c8 12       	ld.a %a2,[%a15]4
80006c8e:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c90:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c92:	30 c2       	add.a %a2,%a12
80006c94:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006c96:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006c98:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006c9c:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006c9e:	6d 00 13 04 	call 800074c4 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006ca2:	c8 12       	ld.a %a2,[%a15]4
80006ca4:	30 c2       	add.a %a2,%a12
80006ca6:	19 24 04 00 	ld.w %d4,[%a2]4
80006caa:	6d ff f9 f9 	call 8000609c <IfxScuCcu_wait>
80006cae:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006cb2:	3c e6       	j 80006c7e <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006cb4:	02 84       	mov %d4,%d8
80006cb6:	6d 00 66 02 	call 80007182 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006cba:	91 30 00 ff 	movh.a %a15,61443
80006cbe:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006cc2:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006cc4:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cc6:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006cc8:	96 08       	or %d15,8
80006cca:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006ccc:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006cd0:	6d 00 8e 03 	call 800073ec <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006cd4:	02 94       	mov %d4,%d9
80006cd6:	6d 00 71 02 	call 800071b8 <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006cda:	91 30 00 2f 	movh.a %a2,61443
80006cde:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ce2:	4c 20       	ld.w %d15,[%a2]0
80006ce4:	91 30 00 ff 	movh.a %a15,61443
80006ce8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006cec:	bf 0f fb 7f 	jlt %d15,0,80006ce2 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006cf0:	4c f0       	ld.w %d15,[%a15]0
80006cf2:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006cf6:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006cf8:	4c f0       	ld.w %d15,[%a15]0
80006cfa:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006cfe:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006d00:	4c f0       	ld.w %d15,[%a15]0
80006d02:	bf 0f ff 7f 	jlt %d15,0,80006d00 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006d06:	91 30 00 ff 	movh.a %a15,61443
80006d0a:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006d0e:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d10:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006d12:	96 10       	or %d15,16
80006d14:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006d16:	4c f0       	ld.w %d15,[%a15]0
80006d18:	8f 0f c4 f1 	andn %d15,%d15,64
80006d1c:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006d1e:	6d 00 d3 03 	call 800074c4 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d22:	91 30 00 ff 	movh.a %a15,61443
80006d26:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006d2a:	02 84       	mov %d4,%d8
80006d2c:	6d 00 2b 02 	call 80007182 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006d30:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d32:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006d36:	96 08       	or %d15,8
80006d38:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d3a:	91 30 00 ff 	movh.a %a15,61443
80006d3e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006d42:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d44:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006d46:	8f 8f c0 f1 	andn %d15,%d15,8
80006d4a:	a6 2f       	or %d15,%d2
80006d4c:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006d4e:	1d 00 4f 03 	j 800073ec <IfxScuWdt_setCpuEndinit>
80006d52:	00 90       	ret 

80006d54 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006d54:	91 30 00 ff 	movh.a %a15,61443
80006d58:	7b f0 0f f0 	movh %d15,255
80006d5c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d60:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006d64:	00 90       	ret 

80006d66 <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d66:	1b 04 01 40 	addi %d4,%d4,16
80006d6a:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006d6c:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006d70:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006d74:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006d78:	68 0f       	st.w [%a15]0,%d15
80006d7a:	00 90       	ret 

80006d7c <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d7c:	8f f4 1f f0 	sh %d15,%d4,-1
80006d80:	06 2f       	sh %d15,2
80006d82:	60 ff       	mov.a %a15,%d15
80006d84:	d9 ff 00 06 	lea %a15,[%a15]24576
80006d88:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d8c:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d90:	6f 04 05 00 	jz.t %d4,0,80006d9a <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d94:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006d98:	3c 03       	j 80006d9e <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006d9a:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006d9e:	59 ff 10 80 	st.w [%a15]528,%d15
80006da2:	00 90       	ret 

80006da4 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006da4:	8f f4 1f f0 	sh %d15,%d4,-1
80006da8:	06 2f       	sh %d15,2
80006daa:	60 ff       	mov.a %a15,%d15
80006dac:	d9 ff 00 06 	lea %a15,[%a15]24576
80006db0:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006db4:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006db8:	6f 04 05 00 	jz.t %d4,0,80006dc2 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006dbc:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006dc0:	3c 03       	j 80006dc6 <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006dc2:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006dc6:	59 ff 2c 80 	st.w [%a15]556,%d15
80006dca:	00 90       	ret 

80006dcc <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dcc:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006dd0:	91 30 00 ff 	movh.a %a15,61443
80006dd4:	1b 4f 08 f0 	addi %d15,%d15,132
80006dd8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ddc:	8f 75 00 51 	and %d5,%d5,7
80006de0:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006de2:	6f 04 08 00 	jz.t %d4,0,80006df2 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006de6:	4c f0       	ld.w %d15,[%a15]0
80006de8:	8f c5 01 50 	sh %d5,%d5,28
80006dec:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006df0:	3c 06       	j 80006dfc <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006df2:	4c f0       	ld.w %d15,[%a15]0
80006df4:	8f c5 00 50 	sh %d5,%d5,12
80006df8:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006dfc:	a6 f5       	or %d5,%d15
80006dfe:	68 05       	st.w [%a15]0,%d5
80006e00:	00 90       	ret 

80006e02 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e02:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e06:	91 30 00 ff 	movh.a %a15,61443
80006e0a:	1b 4f 08 f0 	addi %d15,%d15,132
80006e0e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e12:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e14:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e16:	6f 04 05 00 	jz.t %d4,0,80006e20 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006e1a:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006e1e:	3c 03       	j 80006e24 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006e20:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006e24:	68 0f       	st.w [%a15]0,%d15
80006e26:	00 90       	ret 

80006e28 <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e28:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e2c:	91 30 00 ff 	movh.a %a15,61443
80006e30:	1b 4f 08 f0 	addi %d15,%d15,132
80006e34:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e38:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e3a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e3c:	6f 04 05 00 	jz.t %d4,0,80006e46 <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006e40:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006e44:	3c 03       	j 80006e4a <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006e46:	8f 0f d0 f1 	andn %d15,%d15,256
80006e4a:	68 0f       	st.w [%a15]0,%d15
80006e4c:	00 90       	ret 

80006e4e <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e4e:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e52:	91 30 00 ff 	movh.a %a15,61443
80006e56:	1b bf 08 f0 	addi %d15,%d15,139
80006e5a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e5e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e60:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e62:	6f 04 05 00 	jz.t %d4,0,80006e6c <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006e66:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006e6a:	3c 03       	j 80006e70 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006e6c:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006e70:	68 0f       	st.w [%a15]0,%d15
80006e72:	00 90       	ret 

80006e74 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e74:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e78:	91 30 00 ff 	movh.a %a15,61443
80006e7c:	1b 4f 08 f0 	addi %d15,%d15,132
80006e80:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e84:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e86:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e88:	6f 04 05 00 	jz.t %d4,0,80006e92 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006e8c:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006e90:	3c 03       	j 80006e96 <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006e92:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006e96:	68 0f       	st.w [%a15]0,%d15
80006e98:	00 90       	ret 

80006e9a <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e9a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006e9e:	91 30 00 ff 	movh.a %a15,61443
80006ea2:	1b 4f 08 f0 	addi %d15,%d15,132
80006ea6:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006eaa:	90 ff       	addsc.a %a15,%a15,%d15,2
80006eac:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006eae:	6f 04 05 00 	jz.t %d4,0,80006eb8 <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006eb2:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006eb6:	3c 03       	j 80006ebc <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006eb8:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006ebc:	68 0f       	st.w [%a15]0,%d15
80006ebe:	00 90       	ret 

80006ec0 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ec0:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006ec4:	91 30 00 ff 	movh.a %a15,61443
80006ec8:	1b 4f 08 f0 	addi %d15,%d15,132
80006ecc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ed0:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ed2:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006ed4:	6f 04 05 00 	jz.t %d4,0,80006ede <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006ed8:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006edc:	3c 03       	j 80006ee2 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006ede:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006ee2:	68 0f       	st.w [%a15]0,%d15
80006ee4:	00 90       	ret 

80006ee6 <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006ee6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006eea:	91 30 00 ff 	movh.a %a15,61443
80006eee:	1b 4f 08 f0 	addi %d15,%d15,132
80006ef2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ef6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006ef8:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006efa:	6f 04 05 00 	jz.t %d4,0,80006f04 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006efe:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006f02:	3c 03       	j 80006f08 <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006f04:	8f 0f 50 f1 	or %d15,%d15,256
80006f08:	68 0f       	st.w [%a15]0,%d15
80006f0a:	00 90       	ret 

80006f0c <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f0c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f10:	91 30 00 ff 	movh.a %a15,61443
80006f14:	1b bf 08 f0 	addi %d15,%d15,139
80006f18:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f1c:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f1e:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f20:	6f 04 05 00 	jz.t %d4,0,80006f2a <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006f24:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006f28:	3c 03       	j 80006f2e <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006f2a:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006f2e:	68 0f       	st.w [%a15]0,%d15
80006f30:	00 90       	ret 

80006f32 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f32:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f36:	91 30 00 ff 	movh.a %a15,61443
80006f3a:	1b 4f 08 f0 	addi %d15,%d15,132
80006f3e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f42:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f44:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f46:	6f 04 05 00 	jz.t %d4,0,80006f50 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006f4a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006f4e:	3c 03       	j 80006f54 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006f50:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006f54:	68 0f       	st.w [%a15]0,%d15
80006f56:	00 90       	ret 

80006f58 <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f58:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f5c:	91 30 00 ff 	movh.a %a15,61443
80006f60:	1b 4f 08 f0 	addi %d15,%d15,132
80006f64:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f68:	90 ff       	addsc.a %a15,%a15,%d15,2
80006f6a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006f6c:	6f 04 05 00 	jz.t %d4,0,80006f76 <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006f70:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006f74:	3c 03       	j 80006f7a <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006f76:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006f7a:	68 0f       	st.w [%a15]0,%d15
80006f7c:	00 90       	ret 

80006f7e <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006f7e:	91 30 00 ff 	movh.a %a15,61443
80006f82:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f86:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f8a:	00 90       	ret 

80006f8c <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006f8c:	91 30 00 ff 	movh.a %a15,61443
80006f90:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f94:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006f98:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006f9c:	00 90       	ret 

80006f9e <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f9e:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006fa2:	91 30 00 ff 	movh.a %a15,61443
80006fa6:	1b 4f 08 f0 	addi %d15,%d15,132
80006faa:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fae:	90 ff       	addsc.a %a15,%a15,%d15,2
80006fb0:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006fb2:	6f 04 05 00 	jz.t %d4,0,80006fbc <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006fb6:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006fba:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006fbc:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006fc0:	00 90       	ret 

80006fc2 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006fc2:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006fc6:	91 30 00 ff 	movh.a %a15,61443
80006fca:	1b bf 08 f0 	addi %d15,%d15,139
80006fce:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fd2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006fd4:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006fd6:	6f 04 05 00 	jz.t %d4,0,80006fe0 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006fda:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006fde:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80006fe0:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006fe4:	00 90       	ret 

80006fe6 <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
80006fe6:	91 30 00 ff 	movh.a %a15,61443
80006fea:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006fee:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006ff2:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006ff6:	00 90       	ret 

80006ff8 <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
80006ff8:	91 30 00 ff 	movh.a %a15,61443
80006ffc:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007000:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80007004:	00 90       	ret 

80007006 <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80007006:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
8000700a:	91 30 00 ff 	movh.a %a15,61443
8000700e:	1b 4f 08 f0 	addi %d15,%d15,132
80007012:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007016:	8f 75 00 51 	and %d5,%d5,7
8000701a:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
8000701c:	6f 04 08 00 	jz.t %d4,0,8000702c <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80007020:	4c f0       	ld.w %d15,[%a15]0
80007022:	8f 45 01 50 	sh %d5,%d5,20
80007026:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
8000702a:	3c 05       	j 80007034 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
8000702c:	4c f0       	ld.w %d15,[%a15]0
8000702e:	06 45       	sh %d5,4
80007030:	8f 0f c7 f1 	andn %d15,%d15,112
80007034:	a6 f5       	or %d5,%d15
80007036:	68 05       	st.w [%a15]0,%d5
80007038:	00 90       	ret 

8000703a <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
8000703a:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
8000703c:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80007040:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80007044:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80007048:	68 04       	st.w [%a15]0,%d4
8000704a:	00 90       	ret 

8000704c <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
8000704c:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80007050:	6f 04 04 00 	jz.t %d4,0,80007058 <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80007054:	1b 05 01 50 	addi %d5,%d5,16
80007058:	06 2f       	sh %d15,2
8000705a:	60 f2       	mov.a %a2,%d15
8000705c:	d9 2f 00 06 	lea %a15,[%a2]24576
80007060:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80007064:	19 ff 2c 80 	ld.w %d15,[%a15]556
80007068:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
8000706c:	0f 56 00 50 	sh %d5,%d6,%d5
80007070:	a6 f5       	or %d5,%d15
80007072:	59 f5 2c 80 	st.w [%a15]556,%d5
80007076:	00 90       	ret 

80007078 <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80007078:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
8000707c:	91 30 00 ff 	movh.a %a15,61443
80007080:	1b bf 08 f0 	addi %d15,%d15,139
80007084:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80007088:	8f 35 00 51 	and %d5,%d5,3
8000708c:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
8000708e:	6f 04 06 00 	jz.t %d4,0,8000709a <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80007092:	4c f0       	ld.w %d15,[%a15]0
80007094:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
80007098:	3c 07       	j 800070a6 <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
8000709a:	4c f0       	ld.w %d15,[%a15]0
8000709c:	8f e5 00 50 	sh %d5,%d5,14
800070a0:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
800070a4:	a6 f5       	or %d5,%d15
800070a6:	68 05       	st.w [%a15]0,%d5
800070a8:	00 90       	ret 

800070aa <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800070aa:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800070ae:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
800070b0:	53 cf 20 f0 	mul %d15,%d15,12
800070b4:	60 f2       	mov.a %a2,%d15
800070b6:	d9 2f 00 46 	lea %a15,[%a2]24832
800070ba:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
800070be:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070c0:	2e 16       	jz.t %d15,1,800070cc <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070c2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070c6:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
800070ca:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
800070cc:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
800070d0:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
800070d4:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
800070d8:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070da:	4c f0       	ld.w %d15,[%a15]0
800070dc:	6f 0f ff 7f 	jz.t %d15,0,800070da <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
800070e0:	00 90       	ret 

800070e2 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800070e2:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800070e6:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
800070e8:	53 cf 20 f0 	mul %d15,%d15,12
800070ec:	60 f2       	mov.a %a2,%d15
800070ee:	d9 2f 00 46 	lea %a15,[%a2]24832
800070f2:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
800070f6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
800070f8:	2e 16       	jz.t %d15,1,80007104 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800070fa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
800070fe:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007102:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007104:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007108:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
8000710c:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007110:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80007112:	4c f0       	ld.w %d15,[%a15]0
80007114:	6f 0f ff 7f 	jz.t %d15,0,80007112 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
80007118:	00 90       	ret 

8000711a <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
8000711a:	91 30 00 ff 	movh.a %a15,61443
8000711e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007122:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007124:	2e 16       	jz.t %d15,1,80007130 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80007126:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000712a:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
8000712e:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007130:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007134:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80007138:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
8000713c:	91 30 00 ff 	movh.a %a15,61443
80007140:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007144:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007146:	4c f0       	ld.w %d15,[%a15]0
80007148:	6f 0f ff 7f 	jz.t %d15,0,80007146 <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
8000714c:	00 90       	ret 

8000714e <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
8000714e:	91 30 00 ff 	movh.a %a15,61443
80007152:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007156:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007158:	2e 16       	jz.t %d15,1,80007164 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000715a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000715e:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007162:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007164:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007168:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
8000716c:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007170:	91 30 00 ff 	movh.a %a15,61443
80007174:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007178:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
8000717a:	4c f0       	ld.w %d15,[%a15]0
8000717c:	6f 0f ff 7f 	jz.t %d15,0,8000717a <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80007180:	00 90       	ret 

80007182 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007182:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007186:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80007188:	53 cf 20 f0 	mul %d15,%d15,12
8000718c:	06 24       	sh %d4,2
8000718e:	60 f2       	mov.a %a2,%d15
80007190:	d9 2f 00 46 	lea %a15,[%a2]24832
80007194:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007198:	4c f0       	ld.w %d15,[%a15]0
8000719a:	2e 16       	jz.t %d15,1,800071a6 <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000719c:	4c f0       	ld.w %d15,[%a15]0
8000719e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071a2:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071a4:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071a6:	4c f0       	ld.w %d15,[%a15]0
800071a8:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071ac:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071ae:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800071b0:	4c f0       	ld.w %d15,[%a15]0
800071b2:	6f 0f ff ff 	jnz.t %d15,0,800071b0 <IfxScuWdt_clearCpuEndinit+0x2e>
}
800071b6:	00 90       	ret 

800071b8 <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800071b8:	91 30 00 ff 	movh.a %a15,61443
800071bc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071c0:	4c f0       	ld.w %d15,[%a15]0
800071c2:	06 24       	sh %d4,2
800071c4:	2e 16       	jz.t %d15,1,800071d0 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071c6:	4c f0       	ld.w %d15,[%a15]0
800071c8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800071cc:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800071ce:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071d0:	91 30 00 ff 	movh.a %a15,61443
800071d4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071d8:	4c f0       	ld.w %d15,[%a15]0
800071da:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800071de:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800071e0:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800071e2:	4c f0       	ld.w %d15,[%a15]0
800071e4:	6f 0f ff ff 	jnz.t %d15,0,800071e2 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
800071e8:	00 90       	ret 

800071ea <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800071ea:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800071ee:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800071f0:	53 cf 20 f0 	mul %d15,%d15,12
800071f4:	06 24       	sh %d4,2
800071f6:	60 f2       	mov.a %a2,%d15
800071f8:	d9 2f 00 46 	lea %a15,[%a2]24832
800071fc:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007200:	4c f0       	ld.w %d15,[%a15]0
80007202:	2e 16       	jz.t %d15,1,8000720e <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007204:	4c f0       	ld.w %d15,[%a15]0
80007206:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000720a:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000720c:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000720e:	4c f0       	ld.w %d15,[%a15]0
80007210:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007214:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007216:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007218:	4c f0       	ld.w %d15,[%a15]0
8000721a:	6f 0f ff ff 	jnz.t %d15,0,80007218 <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
8000721e:	4c f1       	ld.w %d15,[%a15]4
80007220:	96 08       	or %d15,8
80007222:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007224:	4c f0       	ld.w %d15,[%a15]0
80007226:	2e 16       	jz.t %d15,1,80007232 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007228:	4c f0       	ld.w %d15,[%a15]0
8000722a:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000722e:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007230:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007232:	4c f0       	ld.w %d15,[%a15]0
80007234:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007238:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000723a:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000723c:	4c f0       	ld.w %d15,[%a15]0
8000723e:	6f 0f ff 7f 	jz.t %d15,0,8000723c <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80007242:	00 90       	ret 

80007244 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007244:	91 30 00 ff 	movh.a %a15,61443
80007248:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000724c:	4c f0       	ld.w %d15,[%a15]0
8000724e:	06 24       	sh %d4,2
80007250:	2e 16       	jz.t %d15,1,8000725c <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007252:	4c f0       	ld.w %d15,[%a15]0
80007254:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007258:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000725a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000725c:	91 30 00 ff 	movh.a %a15,61443
80007260:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007264:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007266:	40 f2       	mov.aa %a2,%a15
80007268:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000726c:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000726e:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007270:	4c 20       	ld.w %d15,[%a2]0
80007272:	91 30 00 ff 	movh.a %a15,61443
80007276:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000727a:	6f 0f fb ff 	jnz.t %d15,0,80007270 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
8000727e:	91 30 00 2f 	movh.a %a2,61443
80007282:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007286:	4c 20       	ld.w %d15,[%a2]0
80007288:	96 08       	or %d15,8
8000728a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000728c:	4c f0       	ld.w %d15,[%a15]0
8000728e:	2e 16       	jz.t %d15,1,8000729a <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007290:	4c f0       	ld.w %d15,[%a15]0
80007292:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007296:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007298:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000729a:	91 30 00 ff 	movh.a %a15,61443
8000729e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800072a2:	4c f0       	ld.w %d15,[%a15]0
800072a4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800072a8:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800072aa:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800072ac:	4c f0       	ld.w %d15,[%a15]0
800072ae:	6f 0f ff 7f 	jz.t %d15,0,800072ac <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800072b2:	00 90       	ret 

800072b4 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800072b4:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800072b8:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800072ba:	53 cf 20 f0 	mul %d15,%d15,12
800072be:	06 24       	sh %d4,2
800072c0:	60 f2       	mov.a %a2,%d15
800072c2:	d9 2f 00 46 	lea %a15,[%a2]24832
800072c6:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800072ca:	4c f0       	ld.w %d15,[%a15]0
800072cc:	2e 16       	jz.t %d15,1,800072d8 <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072ce:	4c f0       	ld.w %d15,[%a15]0
800072d0:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072d4:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072d6:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072d8:	4c f0       	ld.w %d15,[%a15]0
800072da:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072de:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072e0:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800072e2:	4c f0       	ld.w %d15,[%a15]0
800072e4:	6f 0f ff ff 	jnz.t %d15,0,800072e2 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
800072e8:	4c f1       	ld.w %d15,[%a15]4
800072ea:	8f 8f c0 f1 	andn %d15,%d15,8
800072ee:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800072f0:	4c f0       	ld.w %d15,[%a15]0
800072f2:	2e 16       	jz.t %d15,1,800072fe <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072f4:	4c f0       	ld.w %d15,[%a15]0
800072f6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072fa:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072fc:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072fe:	4c f0       	ld.w %d15,[%a15]0
80007300:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007304:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007306:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80007308:	4c f0       	ld.w %d15,[%a15]0
8000730a:	6f 0f ff 7f 	jz.t %d15,0,80007308 <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
8000730e:	00 90       	ret 

80007310 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007310:	91 30 00 ff 	movh.a %a15,61443
80007314:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007318:	4c f0       	ld.w %d15,[%a15]0
8000731a:	06 24       	sh %d4,2
8000731c:	2e 16       	jz.t %d15,1,80007328 <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000731e:	4c f0       	ld.w %d15,[%a15]0
80007320:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007324:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007326:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007328:	91 30 00 ff 	movh.a %a15,61443
8000732c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007330:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007332:	40 f2       	mov.aa %a2,%a15
80007334:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007338:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000733a:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000733c:	4c 20       	ld.w %d15,[%a2]0
8000733e:	91 30 00 ff 	movh.a %a15,61443
80007342:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007346:	6f 0f fb ff 	jnz.t %d15,0,8000733c <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
8000734a:	91 30 00 2f 	movh.a %a2,61443
8000734e:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007352:	4c 20       	ld.w %d15,[%a2]0
80007354:	8f 8f c0 f1 	andn %d15,%d15,8
80007358:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000735a:	4c f0       	ld.w %d15,[%a15]0
8000735c:	2e 16       	jz.t %d15,1,80007368 <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000735e:	4c f0       	ld.w %d15,[%a15]0
80007360:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007364:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007366:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007368:	91 30 00 ff 	movh.a %a15,61443
8000736c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007370:	4c f0       	ld.w %d15,[%a15]0
80007372:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007376:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007378:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000737a:	4c f0       	ld.w %d15,[%a15]0
8000737c:	6f 0f ff 7f 	jz.t %d15,0,8000737a <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007380:	00 90       	ret 

80007382 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007382:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007386:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80007388:	53 cf 20 f0 	mul %d15,%d15,12
8000738c:	60 f2       	mov.a %a2,%d15
8000738e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007392:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007396:	48 02       	ld.w %d2,[%a15]0
80007398:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
8000739c:	8f f2 83 21 	xor %d2,%d2,63
800073a0:	00 90       	ret 

800073a2 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800073a2:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073a6:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800073a8:	53 cf 20 f0 	mul %d15,%d15,12
800073ac:	60 f2       	mov.a %a2,%d15
800073ae:	d9 2f 00 46 	lea %a15,[%a2]24832
800073b2:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
800073b6:	48 02       	ld.w %d2,[%a15]0
}
800073b8:	8f 12 00 21 	and %d2,%d2,1
800073bc:	00 90       	ret 

800073be <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
800073be:	91 30 00 ff 	movh.a %a15,61443
800073c2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800073c6:	48 02       	ld.w %d2,[%a15]0
800073c8:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
800073cc:	8f f2 83 21 	xor %d2,%d2,63
800073d0:	00 90       	ret 

800073d2 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
800073d2:	da 3c       	mov %d15,60
800073d4:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
800073d6:	82 cf       	mov %d15,-4
800073d8:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
800073da:	82 0f       	mov %d15,0
800073dc:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
800073de:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
800073e0:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
800073e2:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
800073e4:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
800073e6:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
800073e8:	2c 4a       	st.b [%a4]10,%d15
800073ea:	00 90       	ret 

800073ec <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
800073ec:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800073f0:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800073f2:	53 cf 20 f0 	mul %d15,%d15,12
800073f6:	06 24       	sh %d4,2
800073f8:	60 f2       	mov.a %a2,%d15
800073fa:	d9 2f 00 46 	lea %a15,[%a2]24832
800073fe:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007402:	4c f0       	ld.w %d15,[%a15]0
80007404:	2e 16       	jz.t %d15,1,80007410 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007406:	4c f0       	ld.w %d15,[%a15]0
80007408:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000740c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000740e:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007410:	4c f0       	ld.w %d15,[%a15]0
80007412:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007416:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007418:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000741a:	4c f0       	ld.w %d15,[%a15]0
8000741c:	6f 0f ff 7f 	jz.t %d15,0,8000741a <IfxScuWdt_setCpuEndinit+0x2e>
}
80007420:	00 90       	ret 

80007422 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
80007422:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
80007424:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
80007426:	6f 12 0b 00 	jz.t %d2,1,8000743c <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000742a:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
8000742e:	37 02 6e 31 	extr.u %d3,%d2,2,14
80007432:	8f f3 83 31 	xor %d3,%d3,63
80007436:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
8000743a:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
8000743c:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
8000743e:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
80007442:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
80007446:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
8000744a:	b9 53 02 00 	ld.hu %d3,[%a5]2
8000744e:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007452:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007454:	54 42       	ld.w %d2,[%a4]
80007456:	6f 02 ff ff 	jnz.t %d2,0,80007454 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
8000745a:	39 52 04 00 	ld.bu %d2,[%a5]4
8000745e:	df 12 0a 00 	jeq %d2,1,80007472 <IfxScuWdt_initCpuWatchdog+0x50>
80007462:	76 26       	jz %d2,8000746e <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007464:	8b 22 20 22 	ne %d2,%d2,2
80007468:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
8000746c:	3c 07       	j 8000747a <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
8000746e:	82 0f       	mov %d15,0
        break;
80007470:	3c 05       	j 8000747a <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007472:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
80007476:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
8000747a:	39 52 05 00 	ld.bu %d2,[%a5]5
8000747e:	8b 02 20 22 	ne %d2,%d2,0
80007482:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
80007486:	39 52 06 00 	ld.bu %d2,[%a5]6
8000748a:	8b 02 20 22 	ne %d2,%d2,0
8000748e:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
80007492:	39 52 07 00 	ld.bu %d2,[%a5]7
80007496:	8b 02 20 22 	ne %d2,%d2,0
8000749a:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
8000749e:	39 52 08 00 	ld.bu %d2,[%a5]8
800074a2:	8b 02 20 22 	ne %d2,%d2,0
800074a6:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
800074aa:	39 52 09 00 	ld.bu %d2,[%a5]9
800074ae:	8b 02 20 22 	ne %d2,%d2,0
800074b2:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
800074b6:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
800074b8:	b9 54 00 00 	ld.hu %d4,[%a5]0
800074bc:	1d ff 98 ff 	j 800073ec <IfxScuWdt_setCpuEndinit>

800074c0 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
800074c0:	1d ff 96 ff 	j 800073ec <IfxScuWdt_setCpuEndinit>

800074c4 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800074c4:	91 30 00 ff 	movh.a %a15,61443
800074c8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800074cc:	4c f0       	ld.w %d15,[%a15]0
800074ce:	06 24       	sh %d4,2
800074d0:	2e 16       	jz.t %d15,1,800074dc <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800074d2:	4c f0       	ld.w %d15,[%a15]0
800074d4:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800074d8:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800074da:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800074dc:	91 30 00 ff 	movh.a %a15,61443
800074e0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800074e4:	4c f0       	ld.w %d15,[%a15]0
800074e6:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800074ea:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800074ec:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800074ee:	4c f0       	ld.w %d15,[%a15]0
800074f0:	6f 0f ff 7f 	jz.t %d15,0,800074ee <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
800074f4:	00 90       	ret 

800074f6 <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800074f6:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800074f8:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800074fa:	6f 12 0b 00 	jz.t %d2,1,80007510 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800074fe:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
80007502:	37 02 6e 31 	extr.u %d3,%d2,2,14
80007506:	8f f3 83 31 	xor %d3,%d3,63
8000750a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
8000750e:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
80007510:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
80007512:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
80007516:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
8000751a:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
8000751e:	b9 53 02 00 	ld.hu %d3,[%a5]2
80007522:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007526:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007528:	54 42       	ld.w %d2,[%a4]
8000752a:	6f 02 ff ff 	jnz.t %d2,0,80007528 <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
8000752e:	39 52 04 00 	ld.bu %d2,[%a5]4
80007532:	df 12 0a 00 	jeq %d2,1,80007546 <IfxScuWdt_initSafetyWatchdog+0x50>
80007536:	76 26       	jz %d2,80007542 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007538:	8b 22 20 22 	ne %d2,%d2,2
8000753c:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
80007540:	3c 07       	j 8000754e <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
80007542:	82 0f       	mov %d15,0
        break;
80007544:	3c 05       	j 8000754e <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007546:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
8000754a:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
8000754e:	39 52 05 00 	ld.bu %d2,[%a5]5
80007552:	8b 02 20 22 	ne %d2,%d2,0
80007556:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
8000755a:	39 52 06 00 	ld.bu %d2,[%a5]6
8000755e:	8b 02 20 22 	ne %d2,%d2,0
80007562:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
80007566:	39 52 07 00 	ld.bu %d2,[%a5]7
8000756a:	8b 02 20 22 	ne %d2,%d2,0
8000756e:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
80007572:	39 52 08 00 	ld.bu %d2,[%a5]8
80007576:	8b 02 20 22 	ne %d2,%d2,0
8000757a:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
8000757e:	39 52 09 00 	ld.bu %d2,[%a5]9
80007582:	8b 02 20 22 	ne %d2,%d2,0
80007586:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
8000758a:	39 52 0a 00 	ld.bu %d2,[%a5]10
8000758e:	8b 02 00 22 	eq %d2,%d2,0
80007592:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
80007596:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
80007598:	b9 54 00 00 	ld.hu %d4,[%a5]0
8000759c:	1d ff 94 ff 	j 800074c4 <IfxScuWdt_setSafetyEndinit>

800075a0 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
800075a0:	1d ff 92 ff 	j 800074c4 <IfxScuWdt_setSafetyEndinit>

800075a4 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
800075a4:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
800075a8:	2e 07       	jz.t %d15,0,800075b6 <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
800075aa:	3b 00 00 f3 	mov %d15,12288
800075ae:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
800075b2:	82 0f       	mov %d15,0
800075b4:	3c 11       	j 800075d6 <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
800075b6:	3b 10 0a 20 	mov %d2,161
800075ba:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
800075be:	da 5e       	mov %d15,94
800075c0:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
800075c4:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
800075c8:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
800075cc:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
800075d0:	6f 0f ed ff 	jnz.t %d15,0,800075aa <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
800075d4:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
800075d6:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
800075da:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
800075de:	ab 1f 80 22 	sel %d2,%d2,%d15,1
800075e2:	00 90       	ret 

800075e4 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800075e4:	0c 48       	ld.bu %d15,[%a4]8
800075e6:	d4 4c       	ld.a %a12,[%a4]
800075e8:	1b 0f 01 f0 	addi %d15,%d15,16
800075ec:	16 ff       	and %d15,255
800075ee:	99 4d 04 00 	ld.a %a13,[%a4]4
800075f2:	02 f4       	mov %d4,%d15
800075f4:	40 c4       	mov.aa %a4,%a12
800075f6:	6d ff 91 e8 	call 80004718 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
800075fa:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800075fc:	40 c4       	mov.aa %a4,%a12
800075fe:	8f 32 c0 21 	andn %d2,%d2,3
80007602:	74 d2       	st.w [%a13],%d2
80007604:	02 f4       	mov %d4,%d15
80007606:	1d ff 6d e8 	j 800046e0 <IfxVadc_disableAccess>

8000760a <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
8000760a:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000760c:	6d ff bb fe 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80007610:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007612:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80007614:	6d ff b7 fd 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
80007618:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
8000761a:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
8000761c:	8f 12 40 21 	or %d2,%d2,1
80007620:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007622:	1d ff e5 fe 	j 800073ec <IfxScuWdt_setCpuEndinit>

80007626 <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
80007626:	99 42 04 00 	ld.a %a2,[%a4]4
8000762a:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
8000762e:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
80007632:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
80007636:	1b 02 06 f0 	addi %d15,%d2,96
8000763a:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
8000763c:	e9 52 0c 00 	st.b [%a5]12,%d2
80007640:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
80007642:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
80007644:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
80007648:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
8000764a:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
8000764e:	37 0f e1 35 	extr.u %d3,%d15,11,1
80007652:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
80007656:	37 0f 64 38 	extr.u %d3,%d15,16,4
8000765a:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
8000765e:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007662:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007664:	37 0f 62 32 	extr.u %d3,%d15,4,2
80007668:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
8000766c:	37 0f 62 33 	extr.u %d3,%d15,6,2
80007670:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007674:	37 0f 64 36 	extr.u %d3,%d15,12,4
80007678:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
8000767c:	37 0f 62 34 	extr.u %d3,%d15,8,2
80007680:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007684:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007688:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
8000768c:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007690:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
80007692:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007694:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
80007698:	8f 12 80 21 	xor %d2,%d2,1
8000769c:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
800076a0:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800076a4:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
800076a8:	19 d2 20 40 	ld.w %d2,[%a13]288
800076ac:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800076ae:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
800076b2:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
800076b6:	0b 8f 10 48 	mov %e4,%d15,%d8
800076ba:	6d ff 60 e9 	call 8000497a <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800076be:	54 22       	ld.w %d2,[%a2]
800076c0:	6f a2 0a 00 	jz.t %d2,10,800076d4 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
800076c4:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
800076c6:	4c 20       	ld.w %d15,[%a2]0
800076c8:	16 ff       	and %d15,255
800076ca:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
800076cc:	4c 20       	ld.w %d15,[%a2]0
800076ce:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800076d2:	3c 05       	j 800076dc <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
800076d4:	82 0f       	mov %d15,0
800076d6:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
800076d8:	82 0f       	mov %d15,0
800076da:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
800076dc:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
800076de:	0c ff       	ld.bu %d15,[%a15]15
800076e0:	79 c2 00 00 	ld.b %d2,[%a12]0
800076e4:	ff 8f 08 80 	jge.u %d15,8,800076f4 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
800076e8:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
800076ec:	06 22       	sh %d2,2
800076ee:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
800076f2:	3c 08       	j 80007702 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
800076f4:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
800076f6:	19 d3 34 40 	ld.w %d3,[%a13]308
800076fa:	8f 2f 00 20 	sh %d2,%d15,2
800076fe:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
80007702:	16 ff       	and %d15,255
80007704:	0b 8f 10 48 	mov %e4,%d15,%d8
80007708:	6d ff 39 e9 	call 8000497a <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
8000770c:	54 22       	ld.w %d2,[%a2]
8000770e:	6f a2 0a 00 	jz.t %d2,10,80007722 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
80007712:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
80007714:	4c 20       	ld.w %d15,[%a2]0
80007716:	16 ff       	and %d15,255
80007718:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
8000771a:	4c 20       	ld.w %d15,[%a2]0
8000771c:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007720:	3c 05       	j 8000772a <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
80007722:	82 0f       	mov %d15,0
80007724:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
80007726:	82 0f       	mov %d15,0
80007728:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
8000772a:	28 8f       	st.b [%a15]8,%d15
8000772c:	00 90       	ret 

8000772e <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
8000772e:	cc 41       	ld.a %a15,[%a4]4
80007730:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
80007732:	79 4f 00 00 	ld.b %d15,[%a4]0
80007736:	08 8a       	ld.bu %d10,[%a15]8
80007738:	c8 0f       	ld.a %a15,[%a15]0
8000773a:	1b 0f 06 f0 	addi %d15,%d15,96
8000773e:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007740:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007742:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
80007744:	02 49       	mov %d9,%d4
80007746:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
80007748:	6d ff 9a e8 	call 8000487c <IfxVadc_getAdcAnalogFrequency>
8000774c:	02 2f       	mov %d15,%d2
8000774e:	6d ff b0 e8 	call 800048ae <IfxVadc_getAdcModuleFrequency>
80007752:	8f 38 00 81 	and %d8,%d8,3
80007756:	74 a9       	st.w [%sp],%d9
80007758:	40 f4       	mov.aa %a4,%a15
8000775a:	0b a8 10 48 	mov %e4,%d8,%d10
8000775e:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007762:	1d ff c1 e9 	j 80004ae4 <IfxVadc_getChannelConversionTime>

80007766 <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
80007766:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007768:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000776a:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
8000776e:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007770:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007772:	6d ff 85 e8 	call 8000487c <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
80007776:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
80007778:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
8000777a:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
8000777c:	4c c0       	ld.w %d15,[%a12]0
8000777e:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007782:	e9 ff 32 00 	st.b [%a15]50,%d15
80007786:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
80007788:	1b 8f 00 30 	addi %d3,%d15,8
8000778c:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
80007790:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007792:	54 23       	ld.w %d3,[%a2]
80007794:	37 03 63 34 	extr.u %d3,%d3,8,3
80007798:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
8000779c:	54 23       	ld.w %d3,[%a2]
8000779e:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
800077a2:	8b 13 61 42 	lt.u %d4,%d3,17
800077a6:	f6 44       	jnz %d4,800077ae <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
800077a8:	1b 13 ff 3f 	addi %d3,%d3,-15
800077ac:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
800077ae:	c2 23       	add %d3,2
800077b0:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
800077b4:	92 14       	add %d4,%d15,1
800077b6:	4b 23 51 30 	div.f %d3,%d3,%d2
800077ba:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
800077be:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
800077c0:	1e 13       	jeq %d15,1,800077c6 <IfxVadc_Adc_getGroupConfig+0x60>
800077c2:	82 1f       	mov %d15,1
800077c4:	3c e2       	j 80007788 <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
800077c6:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
800077ca:	ef 92 33 00 	jz.t %d2,25,80007830 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
800077ce:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
800077d2:	19 c2 04 00 	ld.w %d2,[%a12]4
800077d6:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
800077da:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
800077de:	19 c2 04 00 	ld.w %d2,[%a12]4
800077e2:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
800077e6:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
800077ea:	19 c3 20 20 	ld.w %d3,[%a12]160
800077ee:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
800077f2:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
800077f6:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077fa:	8b f3 00 32 	eq %d3,%d3,15
800077fe:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
80007802:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007806:	f6 35       	jnz %d3,80007810 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
80007808:	19 cf 24 20 	ld.w %d15,[%a12]164
8000780c:	16 03       	and %d15,3
8000780e:	3c 02       	j 80007812 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007810:	76 23       	jz %d2,80007816 <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007812:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
80007816:	19 cf 20 20 	ld.w %d15,[%a12]160
8000781a:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
8000781e:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
80007822:	19 cf 24 20 	ld.w %d15,[%a12]164
80007826:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
8000782a:	e9 ff 18 00 	st.b [%a15]24,%d15
8000782e:	3c 0c       	j 80007846 <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
80007830:	82 0f       	mov %d15,0
80007832:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007836:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
8000783a:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000783e:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
80007842:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
80007846:	4c c1       	ld.w %d15,[%a12]4
80007848:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
8000784c:	df 1f 30 80 	jne %d15,1,800078ac <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
80007850:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
80007854:	19 c2 04 00 	ld.w %d2,[%a12]4
80007858:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
8000785c:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
80007860:	19 c2 04 00 	ld.w %d2,[%a12]4
80007864:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
80007868:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
8000786c:	19 c3 00 20 	ld.w %d3,[%a12]128
80007870:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007874:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
80007878:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000787c:	8b f3 00 32 	eq %d3,%d3,15
80007880:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
80007884:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007888:	f6 35       	jnz %d3,80007892 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
8000788a:	19 cf 04 20 	ld.w %d15,[%a12]132
8000788e:	16 03       	and %d15,3
80007890:	3c 02       	j 80007894 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007892:	76 23       	jz %d2,80007898 <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007894:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
80007898:	19 cf 00 20 	ld.w %d15,[%a12]128
8000789c:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
800078a0:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
800078a4:	82 0f       	mov %d15,0
800078a6:	e9 ff 20 00 	st.b [%a15]32,%d15
800078aa:	3c 0c       	j 800078c2 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
800078ac:	82 0f       	mov %d15,0
800078ae:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800078b2:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
800078b6:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800078ba:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
800078be:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
800078c2:	4c c1       	ld.w %d15,[%a12]4
800078c4:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
800078c8:	df 1f 33 80 	jne %d15,1,8000792e <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
800078cc:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
800078d0:	19 c2 04 00 	ld.w %d2,[%a12]4
800078d4:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
800078d8:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
800078dc:	19 c2 04 00 	ld.w %d2,[%a12]4
800078e0:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
800078e4:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
800078e8:	19 d3 00 80 	ld.w %d3,[%a13]512
800078ec:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
800078f0:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
800078f4:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800078f8:	8b f3 00 32 	eq %d3,%d3,15
800078fc:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
80007900:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007904:	f6 35       	jnz %d3,8000790e <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
80007906:	19 df 04 80 	ld.w %d15,[%a13]516
8000790a:	16 03       	and %d15,3
8000790c:	3c 02       	j 80007910 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
8000790e:	76 23       	jz %d2,80007914 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007910:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
80007914:	19 df 00 80 	ld.w %d15,[%a13]512
80007918:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
8000791c:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
80007920:	19 df 04 80 	ld.w %d15,[%a13]516
80007924:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
80007928:	e9 ff 28 00 	st.b [%a15]40,%d15
8000792c:	3c 0c       	j 80007944 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
8000792e:	82 0f       	mov %d15,0
80007930:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007934:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
80007938:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000793c:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
80007940:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
80007944:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
80007948:	39 e7 08 00 	ld.bu %d7,[%a14]8
8000794c:	8f 33 00 31 	and %d3,%d3,3
80007950:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
80007952:	df 03 1f 00 	jeq %d3,0,80007990 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007956:	7b 00 00 58 	movh %d5,32768
8000795a:	1b 85 db 50 	addi %d5,%d5,3512
8000795e:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007962:	8b 47 60 42 	lt.u %d4,%d7,4
80007966:	82 02       	mov %d2,0
80007968:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
8000796c:	1a 25       	add %d15,%d5,%d2
8000796e:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007970:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007972:	a0 32       	mov.a %a2,3
80007974:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
80007978:	8f f4 0f 61 	and %d6,%d4,255
8000797c:	14 35       	ld.bu %d5,[%a3]
8000797e:	5f 35 06 80 	jne %d5,%d3,8000798a <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007982:	42 62       	add %d2,%d6
80007984:	8f f2 0f 21 	and %d2,%d2,255
80007988:	3c 04       	j 80007990 <IfxVadc_Adc_getGroupConfig+0x22a>
8000798a:	c2 14       	add %d4,1
8000798c:	fc 24       	loop %a2,80007974 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000798e:	02 72       	mov %d2,%d7
80007990:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
80007992:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
80007996:	1b 07 01 f0 	addi %d15,%d7,16
8000799a:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
8000799e:	e9 ff 30 00 	st.b [%a15]48,%d15
800079a2:	00 90       	ret 

800079a4 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
800079a4:	99 52 14 00 	ld.a %a2,[%a5]20
800079a8:	d4 2e       	ld.a %a14,[%a2]
800079aa:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
800079ae:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
800079b2:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079b6:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
800079b8:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079ba:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
800079bc:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
800079be:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
800079c2:	6d ff ab e6 	call 80004718 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
800079c6:	1b 09 06 20 	addi %d2,%d9,96
800079ca:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
800079ce:	0c fe       	ld.bu %d15,[%a15]14
800079d0:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800079d2:	40 e4       	mov.aa %a4,%a14
800079d4:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
800079d8:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
800079da:	54 22       	ld.w %d2,[%a2]
800079dc:	0c ff       	ld.bu %d15,[%a15]15
800079de:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
800079e2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
800079e4:	54 22       	ld.w %d2,[%a2]
800079e6:	39 ff 10 00 	ld.bu %d15,[%a15]16
800079ea:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
800079ee:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
800079f0:	54 22       	ld.w %d2,[%a2]
800079f2:	39 ff 11 00 	ld.bu %d15,[%a15]17
800079f6:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800079fa:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
800079fc:	54 22       	ld.w %d2,[%a2]
800079fe:	0c f1       	ld.bu %d15,[%a15]1
80007a00:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
80007a04:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
80007a06:	54 22       	ld.w %d2,[%a2]
80007a08:	0c fd       	ld.bu %d15,[%a15]13
80007a0a:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007a0e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
80007a10:	54 22       	ld.w %d2,[%a2]
80007a12:	39 ff 13 00 	ld.bu %d15,[%a15]19
80007a16:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
80007a1a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
80007a1c:	54 22       	ld.w %d2,[%a2]
80007a1e:	0c f3       	ld.bu %d15,[%a15]3
80007a20:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
80007a24:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
80007a26:	54 22       	ld.w %d2,[%a2]
80007a28:	0c f0       	ld.bu %d15,[%a15]0
80007a2a:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
80007a2e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
80007a30:	54 22       	ld.w %d2,[%a2]
80007a32:	39 ff 12 00 	ld.bu %d15,[%a15]18
80007a36:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
80007a3a:	6c 20       	st.w [%a2]0,%d15
80007a3c:	1b 08 01 f0 	addi %d15,%d8,16
80007a40:	16 ff       	and %d15,255
80007a42:	02 f4       	mov %d4,%d15
80007a44:	6d ff 6a e6 	call 80004718 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
80007a48:	08 23       	ld.bu %d3,[%a15]2
80007a4a:	82 12       	mov %d2,1
80007a4c:	0f 92 00 20 	sh %d2,%d2,%d9
80007a50:	f6 35       	jnz %d3,80007a5a <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
80007a52:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a56:	a6 32       	or %d2,%d3
80007a58:	3c 05       	j 80007a62 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
80007a5a:	19 c3 08 00 	ld.w %d3,[%a12]8
80007a5e:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a62:	02 f4       	mov %d4,%d15
80007a64:	59 c2 08 00 	st.w [%a12]8,%d2
80007a68:	40 e4       	mov.aa %a4,%a14
80007a6a:	6d ff 3b e6 	call 800046e0 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
80007a6e:	79 d3 00 00 	ld.b %d3,[%a13]0
80007a72:	19 c5 20 40 	ld.w %d5,[%a12]288
80007a76:	8f 23 00 f0 	sh %d15,%d3,2
80007a7a:	3b f0 00 20 	mov %d2,15
80007a7e:	0f f2 00 20 	sh %d2,%d2,%d15
80007a82:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007a86:	08 b4       	ld.bu %d4,[%a15]11
80007a88:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
80007a8c:	19 c2 20 40 	ld.w %d2,[%a12]288
80007a90:	0f f4 00 f0 	sh %d15,%d4,%d15
80007a94:	a6 2f       	or %d15,%d2
80007a96:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
80007a9a:	b9 ff 06 00 	ld.hu %d15,[%a15]6
80007a9e:	6e 1f       	jz %d15,80007adc <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007aa0:	02 84       	mov %d4,%d8
80007aa2:	08 b5       	ld.bu %d5,[%a15]11
80007aa4:	6d ff 6b e7 	call 8000497a <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007aa8:	79 f2 0c 00 	ld.b %d2,[%a15]12
80007aac:	82 1f       	mov %d15,1
80007aae:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007ab2:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007ab6:	54 22       	ld.w %d2,[%a2]
80007ab8:	08 63       	ld.bu %d3,[%a15]6
80007aba:	8f f2 cf 21 	andn %d2,%d2,255
80007abe:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007ac0:	0c f9       	ld.bu %d15,[%a15]9
80007ac2:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007ac4:	54 22       	ld.w %d2,[%a2]
80007ac6:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007aca:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007acc:	4c 20       	ld.w %d15,[%a2]0
80007ace:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007ad2:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007ad4:	4c 20       	ld.w %d15,[%a2]0
80007ad6:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007ada:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
80007adc:	0c ff       	ld.bu %d15,[%a15]15
80007ade:	08 a2       	ld.bu %d2,[%a15]10
80007ae0:	ff 8f 15 80 	jge.u %d15,8,80007b0a <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80007ae4:	19 c4 30 40 	ld.w %d4,[%a12]304
80007ae8:	06 2f       	sh %d15,2
80007aea:	3b f0 00 30 	mov %d3,15
80007aee:	0f f3 00 30 	sh %d3,%d3,%d15
80007af2:	0f 34 e0 30 	andn %d3,%d4,%d3
80007af6:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
80007afa:	19 c3 30 40 	ld.w %d3,[%a12]304
80007afe:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b02:	a6 3f       	or %d15,%d3
80007b04:	59 cf 30 40 	st.w [%a12]304,%d15
80007b08:	3c 14       	j 80007b30 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b0a:	c2 8f       	add %d15,-8
80007b0c:	19 c4 34 40 	ld.w %d4,[%a12]308
80007b10:	06 2f       	sh %d15,2
80007b12:	3b f0 00 30 	mov %d3,15
80007b16:	0f f3 00 30 	sh %d3,%d3,%d15
80007b1a:	0f 34 e0 30 	andn %d3,%d4,%d3
80007b1e:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
80007b22:	19 c3 34 40 	ld.w %d3,[%a12]308
80007b26:	0f f2 00 f0 	sh %d15,%d2,%d15
80007b2a:	a6 3f       	or %d15,%d3
80007b2c:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
80007b30:	b9 ff 04 00 	ld.hu %d15,[%a15]4
80007b34:	6e 24       	jz %d15,80007b7c <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
80007b36:	02 84       	mov %d4,%d8
80007b38:	08 a5       	ld.bu %d5,[%a15]10
80007b3a:	6d ff 20 e7 	call 8000497a <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
80007b3e:	0c ff       	ld.bu %d15,[%a15]15
80007b40:	1b 0f 08 f0 	addi %d15,%d15,128
80007b44:	90 c3       	addsc.a %a3,%a12,%d15,2
80007b46:	4c 30       	ld.w %d15,[%a3]0
80007b48:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80007b4c:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
80007b4e:	bb f0 ff ff 	mov.u %d15,65535
80007b52:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007b56:	54 22       	ld.w %d2,[%a2]
80007b58:	08 43       	ld.bu %d3,[%a15]4
80007b5a:	8f f2 cf 21 	andn %d2,%d2,255
80007b5e:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007b60:	0c f8       	ld.bu %d15,[%a15]8
80007b62:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007b64:	54 22       	ld.w %d2,[%a2]
80007b66:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007b6a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007b6c:	4c 20       	ld.w %d15,[%a2]0
80007b6e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007b72:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007b74:	4c 20       	ld.w %d15,[%a2]0
80007b76:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007b7a:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007b7c:	40 e4       	mov.aa %a4,%a14
80007b7e:	02 84       	mov %d4,%d8
80007b80:	6d ff b0 e5 	call 800046e0 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b84:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007b86:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007b88:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007b8a:	0c fc       	ld.bu %d15,[%a15]12
80007b8c:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007b8e:	00 90       	ret 

80007b90 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007b90:	40 42       	mov.aa %a2,%a4
80007b92:	d2 02       	mov %e2,0
80007b94:	89 22 48 01 	st.d [%a2+]8,%e2
80007b98:	89 22 48 01 	st.d [%a2+]8,%e2
80007b9c:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007ba0:	b5 45 14 00 	st.a [%a4]20,%a5
80007ba4:	00 90       	ret 

80007ba6 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007ba6:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007ba8:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007bac:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007bae:	8f a8 00 90 	sh %d9,%d8,10
80007bb2:	1b 09 48 f0 	addi %d15,%d9,1152
80007bb6:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
80007bb8:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
80007bba:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007bbe:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007bc0:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007bc4:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80007bc6:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007bc8:	6d ff 5a e6 	call 8000487c <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007bcc:	1b 08 01 f0 	addi %d15,%d8,16
80007bd0:	8f ff 0f a1 	and %d10,%d15,255
80007bd4:	40 c4       	mov.aa %a4,%a12
80007bd6:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007bd8:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007bda:	6d ff 9f e5 	call 80004718 <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007bde:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007be2:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007be4:	5e 17       	jne %d15,1,80007bf2 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007be6:	82 14       	mov %d4,1
80007be8:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007bec:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007bf0:	3c 03       	j 80007bf6 <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80007bf2:	d2 04       	mov %e4,0
80007bf4:	82 06       	mov %d6,0
80007bf6:	82 07       	mov %d7,0
80007bf8:	6d ff 06 e8 	call 80004c04 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007bfc:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007c00:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007c02:	5e 17       	jne %d15,1,80007c10 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007c04:	82 14       	mov %d4,1
80007c06:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007c0a:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007c0e:	3c 03       	j 80007c14 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80007c10:	d2 04       	mov %e4,0
80007c12:	82 06       	mov %d6,0
80007c14:	82 17       	mov %d7,1
80007c16:	6d ff f7 e7 	call 80004c04 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c1a:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007c1e:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007c20:	5e 17       	jne %d15,1,80007c2e <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007c22:	82 14       	mov %d4,1
80007c24:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007c28:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007c2c:	3c 03       	j 80007c32 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007c2e:	d2 04       	mov %e4,0
80007c30:	82 06       	mov %d6,0
80007c32:	82 27       	mov %d7,2
80007c34:	6d ff e8 e7 	call 80004c04 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007c38:	0c f5       	ld.bu %d15,[%a15]5
80007c3a:	be 8b       	jeq %d15,%d8,80007c70 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007c3c:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007c40:	91 00 00 28 	movh.a %a2,32768
80007c44:	d9 22 f8 60 	lea %a2,[%a2]3512 <80000db8 <IfxVadc_Adc_masterIndex>>
80007c48:	10 22       	addsc.a %a2,%a2,%d15,0
80007c4a:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007c4c:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c50:	8f 3f 00 21 	and %d2,%d15,3
80007c54:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c58:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007c5c:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007c60:	19 23 40 30 	ld.w %d3,[%a2]1216
80007c64:	da 08       	mov %d15,8
80007c66:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007c6a:	a6 3f       	or %d15,%d3
80007c6c:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007c70:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c74:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007c78:	8f 3f c0 f1 	andn %d15,%d15,3
80007c7c:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007c80:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007c84:	19 22 40 20 	ld.w %d2,[%a2]1152
80007c88:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007c8c:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007c90:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007c94:	df 1f 5a 80 	jne %d15,1,80007d48 <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007c98:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007c9c:	6e 28       	jz %d15,80007cec <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007c9e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ca2:	96 04       	or %d15,4
80007ca4:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007ca8:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007cac:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007cb0:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007cb4:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007cb8:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007cbc:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007cc0:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007cc4:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007cc8:	8b ff 20 f2 	ne %d15,%d15,15
80007ccc:	ee 16       	jnz %d15,80007cf8 <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007cce:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007cd2:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007cd6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007cda:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007cde:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007ce2:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ce6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007cea:	3c 05       	j 80007cf4 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007cec:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007cf0:	8f 4f c0 f1 	andn %d15,%d15,4
80007cf4:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007cf8:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007cfc:	8b ff 00 f2 	eq %d15,%d15,15
80007d00:	ee 15       	jnz %d15,80007d2a <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007d02:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007d06:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007d0a:	19 23 40 40 	ld.w %d3,[%a2]1280
80007d0e:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007d12:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007d16:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007d1a:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007d1e:	19 22 44 40 	ld.w %d2,[%a2]1284
80007d22:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d26:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007d2a:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007d2e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d32:	3b 00 40 f0 	mov %d15,1024
80007d36:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007d3a:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007d3e:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007d42:	a6 2f       	or %d15,%d2
80007d44:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007d48:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007d4c:	df 1f 5a 80 	jne %d15,1,80007e00 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007d50:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007d54:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d58:	6e 28       	jz %d15,80007da8 <IfxVadc_Adc_initGroup+0x202>
80007d5a:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007d5e:	96 04       	or %d15,4
80007d60:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007d64:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007d68:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007d6c:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007d70:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007d74:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007d78:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007d7c:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007d80:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007d84:	8b ff 20 f2 	ne %d15,%d15,15
80007d88:	ee 16       	jnz %d15,80007db4 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007d8a:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007d8e:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007d92:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007d96:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007d9a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007d9e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007da2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007da6:	3c 05       	j 80007db0 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007da8:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007dac:	8f 4f c0 f1 	andn %d15,%d15,4
80007db0:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007db4:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007db8:	8b ff 00 f2 	eq %d15,%d15,15
80007dbc:	ee 15       	jnz %d15,80007de6 <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007dbe:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007dc2:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007dc6:	19 23 60 40 	ld.w %d3,[%a2]1312
80007dca:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007dce:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007dd2:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007dd6:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007dda:	19 22 64 40 	ld.w %d2,[%a2]1316
80007dde:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007de2:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007de6:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007dea:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007dee:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007df2:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007df6:	8f 0f c1 f1 	andn %d15,%d15,16
80007dfa:	a6 2f       	or %d15,%d2
80007dfc:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007e00:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007e04:	df 1f 4f 80 	jne %d15,1,80007ea2 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007e08:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007e0c:	6e 29       	jz %d15,80007e5e <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007e0e:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e12:	96 04       	or %d15,4
80007e14:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007e18:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007e1c:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007e20:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007e24:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007e28:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007e2c:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007e30:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007e34:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e38:	8b ff 20 f2 	ne %d15,%d15,15
80007e3c:	ee 11       	jnz %d15,80007e5e <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e3e:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007e42:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e46:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e4a:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007e4e:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e52:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e56:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007e5a:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007e5e:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007e62:	8b ff 00 f2 	eq %d15,%d15,15
80007e66:	ee 13       	jnz %d15,80007e8c <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007e68:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007e6c:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007e70:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007e74:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007e78:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007e7c:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007e80:	19 c2 04 80 	ld.w %d2,[%a12]516
80007e84:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007e88:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007e8c:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007e90:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007e94:	19 cf 04 80 	ld.w %d15,[%a12]516
80007e98:	8f 0f c1 f1 	andn %d15,%d15,16
80007e9c:	a6 2f       	or %d15,%d2
80007e9e:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007ea2:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007ea4:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007ea8:	3a 8f       	eq %d15,%d15,%d8
80007eaa:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007eae:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007eb2:	02 84       	mov %d4,%d8
80007eb4:	8f 3f c0 f1 	andn %d15,%d15,3
80007eb8:	a6 2f       	or %d15,%d2
80007eba:	59 2f 40 20 	st.w [%a2]1152,%d15
80007ebe:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007ec2:	40 c4       	mov.aa %a4,%a12
80007ec4:	6d ff 69 e4 	call 80004796 <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007ec8:	8f 88 00 80 	sh %d8,%d8,8
80007ecc:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007ece:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007ed2:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007ed6:	0b 58 00 20 	add %d2,%d8,%d5
80007eda:	1b 82 12 20 	addi %d2,%d2,296
80007ede:	0c 2c       	ld.bu %d15,[%a2]12
80007ee0:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007ee4:	54 22       	ld.w %d2,[%a2]
80007ee6:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007eea:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007eec:	9a 15       	add %d15,%d5,1
80007eee:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007ef0:	54 23       	ld.w %d3,[%a2]
80007ef2:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007ef6:	4b 03 71 31 	ftouz %d3,%d3
80007efa:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007efc:	8b 03 62 f2 	lt.u %d15,%d3,32
80007f00:	ee 04       	jnz %d15,80007f08 <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007f02:	06 c3       	sh %d3,-4
80007f04:	1b f3 00 30 	addi %d3,%d3,15
80007f08:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007f0c:	1a 58       	add %d15,%d8,%d5
80007f0e:	1b 8f 12 f0 	addi %d15,%d15,296
80007f12:	90 c2       	addsc.a %a2,%a12,%d15,2
80007f14:	4c 20       	ld.w %d15,[%a2]0
80007f16:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007f1a:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007f1c:	df 15 04 00 	jeq %d5,1,80007f24 <IfxVadc_Adc_initGroup+0x37e>
80007f20:	82 15       	mov %d5,1
80007f22:	3c d8       	j 80007ed2 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007f24:	40 c4       	mov.aa %a4,%a12
80007f26:	02 a4       	mov %d4,%d10
80007f28:	6d ff dc e3 	call 800046e0 <IfxVadc_disableAccess>

    return status;
}
80007f2c:	82 02       	mov %d2,0
80007f2e:	00 90       	ret 

80007f30 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007f30:	40 42       	mov.aa %a2,%a4
80007f32:	7b 60 58 f3 	movh %d15,13702
80007f36:	d2 02       	mov %e2,0
80007f38:	a0 6f       	mov.a %a15,6
80007f3a:	89 22 48 01 	st.d [%a2+]8,%e2
80007f3e:	fc fe       	loop %a15,80007f3a <IfxVadc_Adc_initGroupConfig+0xa>
80007f40:	1b df 7b f3 	addi %d15,%d15,14269
80007f44:	6c 42       	st.w [%a4]8,%d15
80007f46:	6c 44       	st.w [%a4]16,%d15
80007f48:	82 1f       	mov %d15,1
80007f4a:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007f4e:	e9 4f 20 00 	st.b [%a4]32,%d15
80007f52:	e9 4f 26 00 	st.b [%a4]38,%d15
80007f56:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007f5a:	f4 45       	st.a [%a4],%a5
80007f5c:	00 90       	ret 

80007f5e <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007f5e:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007f60:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007f62:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f64:	6d ff 0f fa 	call 80007382 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007f68:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007f6a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007f6c:	6d ff 0b f9 	call 80007182 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007f70:	82 02       	mov %d2,0
80007f72:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007f74:	02 f4       	mov %d4,%d15
80007f76:	6d ff 3b fa 	call 800073ec <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007f7a:	40 f4       	mov.aa %a4,%a15
80007f7c:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007f80:	6d ff 30 e6 	call 80004be0 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f84:	19 c4 18 00 	ld.w %d4,[%a12]24
80007f88:	40 f4       	mov.aa %a4,%a15
80007f8a:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007f8e:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007f90:	6d ff 42 e5 	call 80004a14 <IfxVadc_initializeFAdcI>
80007f94:	df 02 57 00 	jeq %d2,0,80008042 <_SMALL_DATA2_+0x42>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007f98:	19 c4 14 00 	ld.w %d4,[%a12]20
80007f9c:	40 f4       	mov.aa %a4,%a15
80007f9e:	4b 04 71 41 	ftouz %d4,%d4
80007fa2:	6d ff 24 e5 	call 800049ea <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007fa6:	40 f4       	mov.aa %a4,%a15
80007fa8:	6d ff 6a e4 	call 8000487c <IfxVadc_getAdcAnalogFrequency>
80007fac:	82 03       	mov %d3,0
80007fae:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007fb2:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007fb4:	1b 83 02 40 	addi %d4,%d3,40
80007fb8:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007fba:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007fbe:	0c 20       	ld.bu %d15,[%a2]0
80007fc0:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007fc2:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007fc6:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007fca:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007fcc:	4c 21       	ld.w %d15,[%a2]4
80007fce:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007fd2:	4b 0f 71 f1 	ftouz %d15,%d15
80007fd6:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007fd8:	8b 0f 62 52 	lt.u %d5,%d15,32
80007fdc:	f6 54       	jnz %d5,80007fe4 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007fde:	06 cf       	sh %d15,-4
80007fe0:	1b ff 00 f0 	addi %d15,%d15,15
80007fe4:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007fe8:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007fec:	54 24       	ld.w %d4,[%a2]
80007fee:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007ff2:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80007ff4:	df 13 04 00 	jeq %d3,1,80007ffc <IfxVadc_Adc_initModule+0x9e>
80007ff8:	82 13       	mov %d3,1
80007ffa:	3c dc       	j 80007fb2 <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007ffc:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80008000:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80008002:	df 12 20 80 	jne %d2,1,80008042 <_SMALL_DATA2_+0x42>
80008006:	82 08       	mov %d8,0
80008008:	1b 08 01 f0 	addi %d15,%d8,16
8000800c:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
8000800e:	02 f4       	mov %d4,%d15
80008010:	40 f4       	mov.aa %a4,%a15
80008012:	6d ff 83 e3 	call 80004718 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80008016:	8f a8 00 20 	sh %d2,%d8,10
8000801a:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
8000801e:	c2 18       	add %d8,1
80008020:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008024:	02 f4       	mov %d4,%d15
80008026:	8f 32 40 21 	or %d2,%d2,3
8000802a:	59 22 40 20 	st.w [%a2]1152,%d2
8000802e:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80008030:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80008034:	6d ff 56 e3 	call 800046e0 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80008038:	ee e8       	jnz %d15,80008008 <_SMALL_DATA2_+0x8>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
8000803a:	40 f4       	mov.aa %a4,%a15
8000803c:	6d ff 19 e6 	call 80004c6e <IfxVadc_startupCalibration>
    }

    return status;
80008040:	82 0f       	mov %d15,0
}
80008042:	02 f2       	mov %d2,%d15
80008044:	00 90       	ret 

80008046 <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008046:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
8000804a:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
8000804c:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80008050:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80008052:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80008054:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80008056:	6d ff 1f e4 	call 80004894 <IfxVadc_getAdcDigitalFrequency>
8000805a:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
8000805c:	6d ff cf f0 	call 800061fa <IfxScuCcu_getSpbFrequency>
80008060:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008062:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80008066:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
80008068:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
8000806c:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
8000806e:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80008070:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80008074:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
80008076:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
8000807a:	e9 ff 21 00 	st.b [%a15]33,%d15
8000807e:	00 90       	ret 

80008080 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
80008080:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008082:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80008084:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80008086:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
80008088:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
8000808a:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
8000808c:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
8000808e:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80008090:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80008092:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80008094:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80008098:	d2 02       	mov %e2,0
8000809a:	89 22 48 01 	st.d [%a2+]8,%e2
8000809e:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
800080a2:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
800080a6:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
800080a8:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
800080aa:	2c ac       	st.b [%sp]12,%d15
800080ac:	d9 44 0c 00 	lea %a4,[%a4]12
800080b0:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080b4:	89 42 48 01 	st.d [%a4+]8,%e2
800080b8:	09 f2 48 01 	ld.d %e2,[%a15+]8
800080bc:	89 42 48 01 	st.d [%a4+]8,%e2
800080c0:	00 90       	ret 

800080c2 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
800080c2:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
800080c4:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
800080c6:	8f af 00 20 	sh %d2,%d15,10
800080ca:	1b 02 48 20 	addi %d2,%d2,1152
800080ce:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
800080d2:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
800080d6:	40 4c       	mov.aa %a12,%a4
800080d8:	40 5f       	mov.aa %a15,%a5
800080da:	16 0f       	and %d15,15
800080dc:	f6 2a       	jnz %d2,800080f0 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
800080de:	19 42 30 f0 	ld.w %d2,[%a4]1008
800080e2:	8f f2 c0 21 	andn %d2,%d2,15
800080e6:	a6 2f       	or %d15,%d2
800080e8:	59 cf 30 f0 	st.w [%a12]1008,%d15
800080ec:	82 0f       	mov %d15,0
800080ee:	3c 07       	j 800080fc <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
800080f0:	19 42 30 f0 	ld.w %d2,[%a4]1008
800080f4:	06 4f       	sh %d15,4
800080f6:	8f 02 cf 21 	andn %d2,%d2,240
800080fa:	3c f6       	j 800080e6 <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
800080fc:	90 f2       	addsc.a %a2,%a15,%d15,2
800080fe:	99 2d 0c 00 	ld.a %a13,[%a2]12
80008102:	bd 0d 19 00 	jz.a %a13,80008134 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
80008106:	39 d3 0c 00 	ld.bu %d3,[%a13]12
8000810a:	39 f2 18 00 	ld.bu %d2,[%a15]24
8000810e:	99 d4 04 00 	ld.a %a4,[%a13]4
80008112:	0f 23 a0 50 	or %d5,%d3,%d2
80008116:	39 d4 08 00 	ld.bu %d4,[%a13]8
8000811a:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
8000811e:	39 f8 19 00 	ld.bu %d8,[%a15]25
80008122:	6d ff c4 ed 	call 80005caa <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
80008126:	99 d4 04 00 	ld.a %a4,[%a13]4
8000812a:	39 d4 08 00 	ld.bu %d4,[%a13]8
8000812e:	02 85       	mov %d5,%d8
80008130:	6d ff 3b ee 	call 80005da6 <IfxPort_setPinPadDriver>
80008134:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
80008136:	df 3f e3 ff 	jne %d15,3,800080fc <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
8000813a:	0c f7       	ld.bu %d15,[%a15]7
8000813c:	08 44       	ld.bu %d4,[%a15]4
8000813e:	78 00       	st.w [%sp]0,%d15
80008140:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008144:	08 95       	ld.bu %d5,[%a15]9
80008146:	08 56       	ld.bu %d6,[%a15]5
80008148:	08 67       	ld.bu %d7,[%a15]6
8000814a:	78 01       	st.w [%sp]4,%d15
8000814c:	40 c4       	mov.aa %a4,%a12
8000814e:	40 e5       	mov.aa %a5,%a14
80008150:	1d ff 00 e3 	j 80004750 <IfxVadc_configExternalMultiplexerMode>

80008154 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008154:	cc 40       	ld.a %a15,[%a4]0
80008156:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
8000815a:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
8000815e:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008160:	c2 4f       	add %d15,4
80008162:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008166:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
80008168:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000816a:	3f 3f 04 80 	jlt.u %d15,%d3,80008172 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
8000816e:	82 0f       	mov %d15,0
80008170:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008172:	00 90       	ret 

80008174 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008174:	cc 40       	ld.a %a15,[%a4]0
80008176:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
8000817a:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
8000817e:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80008180:	c2 2f       	add %d15,2
80008182:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008186:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
8000818a:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000818c:	3f 3f 04 80 	jlt.u %d15,%d3,80008194 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80008190:	82 0f       	mov %d15,0
80008192:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008194:	00 90       	ret 

80008196 <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008196:	cc 40       	ld.a %a15,[%a4]0
80008198:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
8000819c:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081a0:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
800081a2:	c2 4f       	add %d15,4
800081a4:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
800081a8:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
800081aa:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
800081ac:	3f 2f 04 80 	jlt.u %d15,%d2,800081b4 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
800081b0:	82 0f       	mov %d15,0
800081b2:	ac 42       	st.h [%a4]4,%d15
800081b4:	00 90       	ret 

800081b6 <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
800081b6:	80 52       	mov.d %d2,%a5
800081b8:	37 04 70 40 	extr.u %d4,%d4,0,16
800081bc:	8f 02 60 31 	nor %d3,%d2,0
800081c0:	1a 42       	add %d15,%d2,%d4
800081c2:	42 3f       	add %d15,%d3
800081c4:	42 23       	add %d3,%d2
800081c6:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
800081c8:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800081ca:	82 06       	mov %d6,0
800081cc:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800081d0:	6f f3 03 00 	jz.t %d3,15,800081d6 <Ifx_CircularBuffer_read8+0x20>
800081d4:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
800081d6:	b9 43 04 00 	ld.hu %d3,[%a4]4
800081da:	d4 42       	ld.a %a2,[%a4]
800081dc:	60 33       	mov.a %a3,%d3
800081de:	30 32       	add.a %a2,%a3
800081e0:	14 23       	ld.bu %d3,[%a2]
800081e2:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
800081e4:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
800081e8:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
800081ec:	c2 13       	add %d3,1
800081ee:	37 03 70 30 	extr.u %d3,%d3,0,16
800081f2:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
800081f6:	3f 53 04 80 	jlt.u %d3,%d5,800081fe <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
800081fa:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800081fe:	9f 0f ec ff 	jned %d15,0,800081d6 <Ifx_CircularBuffer_read8+0x20>
80008202:	c2 f4       	add %d4,-1
80008204:	37 04 50 40 	extr %d4,%d4,0,16
80008208:	8b 04 40 43 	max %d4,%d4,0
8000820c:	c2 14       	add %d4,1

    return Dest;
}
8000820e:	1a 42       	add %d15,%d2,%d4
80008210:	60 f2       	mov.a %a2,%d15
80008212:	00 90       	ret 

80008214 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80008214:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
80008218:	d4 42       	ld.a %a2,[%a4]
8000821a:	1b f4 ff 5f 	addi %d5,%d4,-1
8000821e:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008222:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008226:	82 03       	mov %d3,0
80008228:	37 05 70 20 	extr.u %d2,%d5,0,16
8000822c:	6f f5 03 00 	jz.t %d5,15,80008232 <Ifx_CircularBuffer_read32+0x1e>
80008230:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008232:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008234:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
80008236:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
80008238:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
8000823c:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008240:	c2 13       	add %d3,1
80008242:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008244:	0b 6f 30 51 	lt.u %d5,%d15,%d6
80008248:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
8000824c:	9f 02 f3 ff 	jned %d2,0,80008232 <Ifx_CircularBuffer_read32+0x1e>
80008250:	c2 f4       	add %d4,-1
80008252:	37 04 50 40 	extr %d4,%d4,0,16
80008256:	ac 42       	st.h [%a4]4,%d15
80008258:	8b 04 40 43 	max %d4,%d4,0
8000825c:	c2 14       	add %d4,1

    return Dest;
}
8000825e:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008262:	00 90       	ret 

80008264 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008264:	80 52       	mov.d %d2,%a5
80008266:	37 04 70 40 	extr.u %d4,%d4,0,16
8000826a:	8f 02 60 31 	nor %d3,%d2,0
8000826e:	1a 42       	add %d15,%d2,%d4
80008270:	42 3f       	add %d15,%d3
80008272:	42 23       	add %d3,%d2
80008274:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
80008276:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008278:	82 06       	mov %d6,0
8000827a:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000827e:	6f f3 03 00 	jz.t %d3,15,80008284 <Ifx_CircularBuffer_write8+0x20>
80008282:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
80008284:	b9 43 04 00 	ld.hu %d3,[%a4]4
80008288:	d4 42       	ld.a %a2,[%a4]
8000828a:	60 33       	mov.a %a3,%d3
8000828c:	04 f5       	ld.bu %d5,[%a15+]
8000828e:	30 32       	add.a %a2,%a3
80008290:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
80008292:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80008296:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
8000829a:	c2 13       	add %d3,1
8000829c:	37 03 70 30 	extr.u %d3,%d3,0,16
800082a0:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
800082a4:	3f 53 04 80 	jlt.u %d3,%d5,800082ac <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
800082a8:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800082ac:	9f 0f ec ff 	jned %d15,0,80008284 <Ifx_CircularBuffer_write8+0x20>
800082b0:	c2 f4       	add %d4,-1
800082b2:	37 04 50 40 	extr %d4,%d4,0,16
800082b6:	8b 04 40 43 	max %d4,%d4,0
800082ba:	c2 14       	add %d4,1

    return source;
}
800082bc:	1a 42       	add %d15,%d2,%d4
800082be:	60 f2       	mov.a %a2,%d15
800082c0:	00 90       	ret 

800082c2 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
800082c2:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
800082c6:	d4 42       	ld.a %a2,[%a4]
800082c8:	1b f4 ff 5f 	addi %d5,%d4,-1
800082cc:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
800082d0:	b9 46 06 00 	ld.hu %d6,[%a4]6
800082d4:	82 03       	mov %d3,0
800082d6:	37 05 70 20 	extr.u %d2,%d5,0,16
800082da:	6f f5 03 00 	jz.t %d5,15,800082e0 <Ifx_CircularBuffer_write32+0x1e>
800082de:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800082e0:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800082e4:	c2 13       	add %d3,1
800082e6:	48 05       	ld.w %d5,[%a15]0
800082e8:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
800082ea:	c2 4f       	add %d15,4
800082ec:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800082f0:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800082f2:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800082f6:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800082fa:	9f 02 f3 ff 	jned %d2,0,800082e0 <Ifx_CircularBuffer_write32+0x1e>
800082fe:	c2 f4       	add %d4,-1
80008300:	37 04 50 40 	extr %d4,%d4,0,16
80008304:	ac 42       	st.h [%a4]4,%d15
80008306:	8b 04 40 43 	max %d4,%d4,0
8000830a:	c2 14       	add %d4,1

    return source;
}
8000830c:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008310:	00 90       	ret 

80008312 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
80008312:	1d 00 a8 16 	j 8000b062 <free>

80008316 <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
80008316:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80008318:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
8000831a:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
8000831e:	82 1f       	mov %d15,1
80008320:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
80008324:	1b 72 02 f0 	addi %d15,%d2,39
80008328:	8f 7f c0 f1 	andn %d15,%d15,7
8000832c:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
8000832e:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
80008330:	82 0f       	mov %d15,0
80008332:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
80008334:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
80008336:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
8000833a:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
8000833c:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
8000833e:	6c 43       	st.w [%a4]12,%d15
80008340:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
80008342:	ac 4b       	st.h [%a4]22,%d15
80008344:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
80008346:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
8000834a:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
8000834e:	00 90       	ret 

80008350 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008350:	c2 34       	add %d4,3
80008352:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
80008356:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008358:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
8000835c:	1b 8f 02 40 	addi %d4,%d15,40
80008360:	6d 00 7b 16 	call 8000b056 <malloc>
80008364:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
80008366:	bc 25       	jz.a %a2,80008370 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
80008368:	0b f8 10 48 	mov %e4,%d8,%d15
8000836c:	1d ff d5 ff 	j 80008316 <Ifx_Fifo_init>
    }

    return fifo;
}
80008370:	00 90       	ret 

80008372 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008372:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008374:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008376:	3f f4 6a 00 	jlt %d4,%d15,8000844a <Ifx_Fifo_canReadCount+0xd8>
8000837a:	8c 4c       	ld.h %d15,[%a4]24
8000837c:	3f 4f 67 00 	jlt %d15,%d4,8000844a <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008380:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008384:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008388:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000838c:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
8000838e:	8c 42       	ld.h %d15,[%a4]4
80008390:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
80008392:	4e 4c       	jgtz %d4,800083aa <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008394:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008396:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
8000839a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
8000839e:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083a0:	df 00 55 00 	jeq %d0,0,8000844a <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
800083a4:	0d 00 00 03 	enable 
800083a8:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800083aa:	82 f2       	mov %d2,-1
800083ac:	06 f2       	sh %d2,-1
800083ae:	ba f6       	eq %d15,%d6,-1
800083b0:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800083b4:	82 f5       	mov %d5,-1
800083b6:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800083b8:	ee 16       	jnz %d15,800083e4 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083ba:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083be:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083c2:	0d 00 40 03 	disable 
800083c6:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800083c8:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800083cc:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800083d0:	02 15       	mov %d5,%d1
800083d2:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083d6:	76 23       	jz %d2,800083dc <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
800083d8:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800083dc:	0b 65 40 50 	addx %d5,%d5,%d6
800083e0:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
800083e4:	82 0f       	mov %d15,0
800083e6:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
800083ea:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083ee:	76 03       	jz %d0,800083f4 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
800083f0:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800083f4:	82 f6       	mov %d6,-1
800083f6:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800083f8:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800083fc:	6e 08       	jz %d15,8000840c <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
800083fe:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
80008402:	82 0f       	mov %d15,0
80008404:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
80008406:	8b 12 00 22 	eq %d2,%d2,1
8000840a:	00 90       	ret 
8000840c:	ba f5       	eq %d15,%d5,-1
8000840e:	0b 36 00 f2 	and.eq %d15,%d6,%d3
80008412:	ee f3       	jnz %d15,800083f8 <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008414:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008418:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000841c:	0d 00 40 03 	disable 
80008420:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008422:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008426:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000842a:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000842e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008432:	76 23       	jz %d2,80008438 <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
80008434:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008438:	0b 3f 00 21 	eq %d2,%d15,%d3
8000843c:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
80008440:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008444:	df 02 da ff 	jne %d2,0,800083f8 <Ifx_Fifo_canReadCount+0x86>
80008448:	3c db       	j 800083fe <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
8000844a:	00 90       	ret 

8000844c <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
8000844c:	20 08       	sub.a %sp,8
8000844e:	40 4f       	mov.aa %a15,%a4
80008450:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008452:	df 04 b6 00 	jeq %d4,0,800085be <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
80008456:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008458:	82 f2       	mov %d2,-1
8000845a:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
8000845c:	8c 4c       	ld.h %d15,[%a4]24
8000845e:	06 f2       	sh %d2,-1
80008460:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008462:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008464:	82 fa       	mov %d10,-1
80008466:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008468:	ba f6       	eq %d15,%d6,-1
8000846a:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000846e:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008470:	ee 16       	jnz %d15,8000849c <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008472:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008476:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000847a:	0d 00 40 03 	disable 
8000847e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008480:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008484:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008488:	02 3a       	mov %d10,%d3
8000848a:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000848e:	76 23       	jz %d2,80008494 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008490:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008494:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008498:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000849c:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000849e:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
800084a0:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800084a2:	a0 0c       	mov.a %a12,0
800084a4:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084a6:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800084aa:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084ae:	0d 00 40 03 	disable 
800084b2:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
800084b4:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800084b6:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
800084ba:	8c fd       	ld.h %d15,[%a15]26
800084bc:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
800084c0:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
800084c4:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800084c8:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
800084ca:	a2 3b       	sub %d11,%d3
800084cc:	37 0b 70 b0 	extr.u %d11,%d11,0,16
800084d0:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
800084d4:	0b f9 80 30 	sub %d3,%d9,%d15
800084d8:	0b 23 80 21 	min %d2,%d3,%d2
800084dc:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084de:	76 43       	jz %d4,800084e4 <Ifx_Fifo_read+0x98>
    {
        __enable();
800084e0:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
800084e4:	6e 20       	jz %d15,80008524 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
800084e6:	40 a4       	mov.aa %a4,%sp
800084e8:	02 f4       	mov %d4,%d15
800084ea:	6d ff 66 fe 	call 800081b6 <Ifx_CircularBuffer_read8>
800084ee:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084f0:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084f4:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084f8:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800084fc:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800084fe:	88 23       	ld.h %d3,[%a15]4
80008500:	a2 b3       	sub %d3,%d11
80008502:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
80008504:	48 33       	ld.w %d3,[%a15]12
80008506:	76 39       	jz %d3,80008518 <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
80008508:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
8000850a:	8e f3       	jlez %d15,80008510 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
8000850c:	68 3f       	st.w [%a15]12,%d15
8000850e:	3c 05       	j 80008518 <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008510:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008512:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
80008514:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008518:	76 23       	jz %d2,8000851e <Ifx_Fifo_read+0xd2>
    {
        __enable();
8000851a:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000851e:	a2 b9       	sub %d9,%d11
80008520:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008524:	76 d4       	jz %d13,8000852c <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
80008526:	82 0f       	mov %d15,0
80008528:	68 2f       	st.w [%a15]8,%d15
                break;
8000852a:	3c 48       	j 800085ba <Ifx_Fifo_read+0x16e>
8000852c:	ba fa       	eq %d15,%d10,-1
8000852e:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008532:	ee 1b       	jnz %d15,80008568 <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008534:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008538:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000853c:	0d 00 40 03 	disable 
80008540:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008542:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008546:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000854a:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000854e:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008552:	76 23       	jz %d2,80008558 <Ifx_Fifo_read+0x10c>
    {
        __enable();
80008554:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008558:	0b 8f 00 21 	eq %d2,%d15,%d8
8000855c:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008560:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008564:	df 02 e1 ff 	jne %d2,0,80008526 <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
80008568:	df 09 29 00 	jeq %d9,0,800085ba <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000856c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008570:	ee 1f       	jnz %d15,800085ae <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008572:	ba fa       	eq %d15,%d10,-1
80008574:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008578:	ee fa       	jnz %d15,8000856c <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000857a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000857e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008582:	0d 00 40 03 	disable 
80008586:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008588:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000858c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008590:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008594:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008598:	76 23       	jz %d2,8000859e <Ifx_Fifo_read+0x152>
    {
        __enable();
8000859a:	0d 00 00 03 	enable 
8000859e:	0b 8f 00 21 	eq %d2,%d15,%d8
800085a2:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
800085a6:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800085aa:	df 02 e1 ff 	jne %d2,0,8000856c <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
800085ae:	39 fd 1c 00 	ld.bu %d13,[%a15]28
800085b2:	8b 0d 00 d2 	eq %d13,%d13,0
800085b6:	1d ff 78 ff 	j 800084a6 <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
800085ba:	8c a2       	ld.h %d15,[%sp]4
800085bc:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
800085be:	02 92       	mov %d2,%d9
800085c0:	00 90       	ret 

800085c2 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085c2:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085c6:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085ca:	0d 00 40 03 	disable 
800085ce:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
800085d0:	4c 43       	ld.w %d15,[%a4]12
800085d2:	6e 06       	jz %d15,800085de <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
800085d4:	82 0f       	mov %d15,0
800085d6:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
800085d8:	82 1f       	mov %d15,1
800085da:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
800085de:	82 0f       	mov %d15,0
800085e0:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
800085e4:	82 0f       	mov %d15,0
800085e6:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
800085e8:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
800085ea:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
800085ec:	8c 4b       	ld.h %d15,[%a4]22
800085ee:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085f0:	76 23       	jz %d2,800085f6 <Ifx_Fifo_clear+0x34>
    {
        __enable();
800085f2:	0d 00 00 03 	enable 
800085f6:	00 90       	ret 

800085f8 <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800085f8:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
800085fa:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800085fc:	3f f4 75 00 	jlt %d4,%d15,800086e6 <Ifx_Fifo_canWriteCount+0xee>
80008600:	8c 4c       	ld.h %d15,[%a4]24
80008602:	3f 4f 72 00 	jlt %d15,%d4,800086e6 <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008606:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
8000860a:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000860e:	0d 00 40 03 	disable 
80008612:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
80008614:	c9 43 18 00 	ld.h %d3,[%a4]24
80008618:	8c 42       	ld.h %d15,[%a4]4
8000861a:	5a f3       	sub %d15,%d3,%d15
8000861c:	3f 4f 0d 00 	jlt %d15,%d4,80008636 <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
80008620:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
80008622:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
80008626:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
8000862a:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000862c:	df 00 5d 00 	jeq %d0,0,800086e6 <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
80008630:	0d 00 00 03 	enable 
80008634:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008636:	82 f2       	mov %d2,-1
80008638:	06 f2       	sh %d2,-1
8000863a:	ba f6       	eq %d15,%d6,-1
8000863c:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008640:	82 f5       	mov %d5,-1
80008642:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008644:	ee 16       	jnz %d15,80008670 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008646:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000864a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000864e:	0d 00 40 03 	disable 
80008652:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008654:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008658:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000865c:	02 15       	mov %d5,%d1
8000865e:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008662:	76 23       	jz %d2,80008668 <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008664:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008668:	0b 65 40 50 	addx %d5,%d5,%d6
8000866c:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008670:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008672:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008676:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000867a:	8c 4c       	ld.h %d15,[%a4]24
8000867c:	5a f2       	sub %d15,%d2,%d15
8000867e:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008680:	82 02       	mov %d2,0
80008682:	0b 42 a0 41 	max %d4,%d2,%d4
80008686:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000868a:	76 03       	jz %d0,80008690 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
8000868c:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008690:	82 f6       	mov %d6,-1
80008692:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008694:	39 4f 1d 00 	ld.bu %d15,[%a4]29
80008698:	6e 08       	jz %d15,800086a8 <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
8000869a:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
8000869e:	82 0f       	mov %d15,0
800086a0:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
800086a2:	8b 12 00 22 	eq %d2,%d2,1
800086a6:	00 90       	ret 
800086a8:	ba f5       	eq %d15,%d5,-1
800086aa:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800086ae:	ee f3       	jnz %d15,80008694 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086b0:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086b4:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086b8:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800086bc:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800086be:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086c2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800086c6:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086ca:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086ce:	76 23       	jz %d2,800086d4 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
800086d0:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800086d4:	0b 3f 00 21 	eq %d2,%d15,%d3
800086d8:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800086dc:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800086e0:	df 02 da ff 	jne %d2,0,80008694 <Ifx_Fifo_canWriteCount+0x9c>
800086e4:	3c db       	j 8000869a <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
800086e6:	00 90       	ret 

800086e8 <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
800086e8:	20 08       	sub.a %sp,8
800086ea:	40 4f       	mov.aa %a15,%a4
800086ec:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
800086ee:	df 04 be 00 	jeq %d4,0,8000886a <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
800086f2:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800086f4:	82 f2       	mov %d2,-1
800086f6:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
800086f8:	8c 4c       	ld.h %d15,[%a4]24
800086fa:	06 f2       	sh %d2,-1
800086fc:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
800086fe:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
80008700:	82 fa       	mov %d10,-1
80008702:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008704:	ba f6       	eq %d15,%d6,-1
80008706:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000870a:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000870c:	ee 16       	jnz %d15,80008738 <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000870e:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008712:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008716:	0d 00 40 03 	disable 
8000871a:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000871c:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008720:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008724:	02 3a       	mov %d10,%d3
80008726:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000872a:	76 23       	jz %d2,80008730 <Ifx_Fifo_write+0x48>
    {
        __enable();
8000872c:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008730:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008734:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008738:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000873a:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
8000873c:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
8000873e:	a0 0c       	mov.a %a12,0
80008740:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008742:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80008746:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000874a:	0d 00 40 03 	disable 
8000874e:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80008750:	88 c4       	ld.h %d4,[%a15]24
80008752:	88 2b       	ld.h %d11,[%a15]4
80008754:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008758:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000875c:	8c fd       	ld.h %d15,[%a15]26
8000875e:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008762:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008766:	4b f2 01 22 	div %e2,%d2,%d15
8000876a:	a2 3b       	sub %d11,%d3
8000876c:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008770:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008774:	0b f9 80 20 	sub %d2,%d9,%d15
80008778:	0b 42 80 41 	min %d4,%d2,%d4
8000877c:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000877e:	76 53       	jz %d5,80008784 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008780:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
80008784:	6e 26       	jz %d15,800087d0 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
80008786:	40 a4       	mov.aa %a4,%sp
80008788:	02 f4       	mov %d4,%d15
8000878a:	6d ff 6d fd 	call 80008264 <Ifx_CircularBuffer_write8>
8000878e:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008790:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008794:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008798:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000879c:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
8000879e:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087a0:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
800087a2:	42 b2       	add %d2,%d11
800087a4:	37 02 50 20 	extr %d2,%d2,0,16
800087a8:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800087aa:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
800087ae:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
800087b0:	48 22       	ld.w %d2,[%a15]8
800087b2:	76 29       	jz %d2,800087c4 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
800087b4:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
800087b6:	8e f3       	jlez %d15,800087bc <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
800087b8:	68 2f       	st.w [%a15]8,%d15
800087ba:	3c 05       	j 800087c4 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800087bc:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800087be:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
800087c0:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087c4:	76 33       	jz %d3,800087ca <Ifx_Fifo_write+0xe2>
    {
        __enable();
800087c6:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800087ca:	a2 b9       	sub %d9,%d11
800087cc:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800087d0:	76 d4       	jz %d13,800087d8 <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
800087d2:	82 0f       	mov %d15,0
800087d4:	68 3f       	st.w [%a15]12,%d15
                break;
800087d6:	3c 48       	j 80008866 <Ifx_Fifo_write+0x17e>
800087d8:	ba fa       	eq %d15,%d10,-1
800087da:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800087de:	ee 1b       	jnz %d15,80008814 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800087e0:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800087e4:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800087e8:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800087ec:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800087ee:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800087f2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800087f6:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800087fa:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800087fe:	76 23       	jz %d2,80008804 <Ifx_Fifo_write+0x11c>
    {
        __enable();
80008800:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008804:	0b 8f 00 21 	eq %d2,%d15,%d8
80008808:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
8000880c:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008810:	df 02 e1 ff 	jne %d2,0,800087d2 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
80008814:	df 09 29 00 	jeq %d9,0,80008866 <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008818:	39 ff 1d 00 	ld.bu %d15,[%a15]29
8000881c:	ee 1f       	jnz %d15,8000885a <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000881e:	ba fa       	eq %d15,%d10,-1
80008820:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008824:	ee fa       	jnz %d15,80008818 <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008826:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000882a:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000882e:	0d 00 40 03 	disable 
80008832:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008834:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008838:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
8000883c:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008840:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008844:	76 23       	jz %d2,8000884a <Ifx_Fifo_write+0x162>
    {
        __enable();
80008846:	0d 00 00 03 	enable 
8000884a:	0b 8f 00 21 	eq %d2,%d15,%d8
8000884e:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008852:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80008856:	df 02 e1 ff 	jne %d2,0,80008818 <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
8000885a:	39 fd 1d 00 	ld.bu %d13,[%a15]29
8000885e:	8b 0d 00 d2 	eq %d13,%d13,0
80008862:	1d ff 70 ff 	j 80008742 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
80008866:	8c a2       	ld.h %d15,[%sp]4
80008868:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
8000886a:	02 92       	mov %d2,%d9
8000886c:	00 90       	ret 
	...

80008870 <syncInfoState>:
void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
    printInfoDisplay(); 
}

void syncInfoState(void){
80008870:	00 90       	ret 

80008872 <updatePacket>:


}

void updatePacket(void){
80008872:	00 90       	ret 

80008874 <printStateLv1>:
    }

}

void printStateLv1(){
    sprintf(buf, "\xDB\xDB");
80008874:	91 00 00 f7 	movh.a %a15,28672
80008878:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
8000887c:	91 00 00 28 	movh.a %a2,32768
80008880:	d9 22 f8 70 	lea %a2,[%a2]3576 <80000df8 <IfxVadc_Adc_masterIndex+0x40>>
80008884:	40 f4       	mov.aa %a4,%a15
80008886:	04 2f       	ld.bu %d15,[%a2+]
80008888:	24 ff       	st.b [%a15+],%d15
8000888a:	ee fe       	jnz %d15,80008886 <printStateLv1+0x12>
    lcd_print(buf);
8000888c:	1d ff 95 dc 	j 800041b6 <lcd_print>

80008890 <printStateLv2>:
}
void printStateLv2(){
    sprintf(buf, "\xDB\xDB\xDB\xDB");
80008890:	91 00 00 f7 	movh.a %a15,28672
80008894:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008898:	91 00 00 28 	movh.a %a2,32768
8000889c:	d9 22 fb 70 	lea %a2,[%a2]3579 <80000dfb <IfxVadc_Adc_masterIndex+0x43>>
800088a0:	40 f4       	mov.aa %a4,%a15
800088a2:	04 2f       	ld.bu %d15,[%a2+]
800088a4:	24 ff       	st.b [%a15+],%d15
800088a6:	ee fe       	jnz %d15,800088a2 <printStateLv2+0x12>
    lcd_print(buf);
800088a8:	1d ff 87 dc 	j 800041b6 <lcd_print>

800088ac <printStateLv3>:
}
void printStateLv3(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB");
800088ac:	91 00 00 f7 	movh.a %a15,28672
800088b0:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088b4:	91 00 00 28 	movh.a %a2,32768
800088b8:	d9 22 c0 80 	lea %a2,[%a2]3584 <80000e00 <IfxVadc_Adc_masterIndex+0x48>>
800088bc:	40 f4       	mov.aa %a4,%a15
800088be:	04 2f       	ld.bu %d15,[%a2+]
800088c0:	24 ff       	st.b [%a15+],%d15
800088c2:	ee fe       	jnz %d15,800088be <printStateLv3+0x12>
    lcd_print(buf);
800088c4:	1d ff 79 dc 	j 800041b6 <lcd_print>

800088c8 <printStateLv4>:
}
void printStateLv4(){
    sprintf(buf, "\xDB\xDB\xDB\xDB\xDB\xDB\xDB\xDB");
800088c8:	91 00 00 f7 	movh.a %a15,28672
800088cc:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088d0:	91 00 00 28 	movh.a %a2,32768
800088d4:	d9 22 c7 80 	lea %a2,[%a2]3591 <80000e07 <IfxVadc_Adc_masterIndex+0x4f>>
800088d8:	40 f4       	mov.aa %a4,%a15
800088da:	04 2f       	ld.bu %d15,[%a2+]
800088dc:	24 ff       	st.b [%a15+],%d15
800088de:	ee fe       	jnz %d15,800088da <printStateLv4+0x12>
    lcd_print(buf);
800088e0:	1d ff 6b dc 	j 800041b6 <lcd_print>

800088e4 <printStateOn>:
}
void printStateOn(){
    sprintf(buf, "mode on");
800088e4:	91 00 00 f7 	movh.a %a15,28672
800088e8:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
800088ec:	91 00 00 28 	movh.a %a2,32768
800088f0:	d9 22 d0 80 	lea %a2,[%a2]3600 <80000e10 <IfxVadc_Adc_masterIndex+0x58>>
800088f4:	40 f4       	mov.aa %a4,%a15
800088f6:	04 2f       	ld.bu %d15,[%a2+]
800088f8:	24 ff       	st.b [%a15+],%d15
800088fa:	ee fe       	jnz %d15,800088f6 <printStateOn+0x12>
    lcd_print(buf);
800088fc:	1d ff 5d dc 	j 800041b6 <lcd_print>

80008900 <printStateOff>:
}
void printStateOff(){
    sprintf(buf, "mode off");
80008900:	91 00 00 f7 	movh.a %a15,28672
80008904:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008908:	91 00 00 28 	movh.a %a2,32768
8000890c:	d9 22 d8 80 	lea %a2,[%a2]3608 <80000e18 <IfxVadc_Adc_masterIndex+0x60>>
80008910:	40 f4       	mov.aa %a4,%a15
80008912:	04 2f       	ld.bu %d15,[%a2+]
80008914:	24 ff       	st.b [%a15+],%d15
80008916:	ee fe       	jnz %d15,80008912 <printStateOff+0x12>
    lcd_print(buf);
80008918:	1d ff 4f dc 	j 800041b6 <lcd_print>

8000891c <printStateRed>:
}
void printStateRed(){
    sprintf(buf, "light red");
8000891c:	91 00 00 f7 	movh.a %a15,28672
80008920:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008924:	91 00 00 28 	movh.a %a2,32768
80008928:	d9 22 e1 80 	lea %a2,[%a2]3617 <80000e21 <IfxVadc_Adc_masterIndex+0x69>>
8000892c:	40 f4       	mov.aa %a4,%a15
8000892e:	04 2f       	ld.bu %d15,[%a2+]
80008930:	24 ff       	st.b [%a15+],%d15
80008932:	ee fe       	jnz %d15,8000892e <printStateRed+0x12>
    lcd_print(buf);
80008934:	1d ff 41 dc 	j 800041b6 <lcd_print>

80008938 <printStateGreen>:
}
void printStateGreen(){
    sprintf(buf, "light green");
80008938:	91 00 00 f7 	movh.a %a15,28672
8000893c:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
80008940:	91 00 00 28 	movh.a %a2,32768
80008944:	d9 22 eb 80 	lea %a2,[%a2]3627 <80000e2b <IfxVadc_Adc_masterIndex+0x73>>
80008948:	40 f4       	mov.aa %a4,%a15
8000894a:	04 2f       	ld.bu %d15,[%a2+]
8000894c:	24 ff       	st.b [%a15+],%d15
8000894e:	ee fe       	jnz %d15,8000894a <printStateGreen+0x12>
    lcd_print(buf);
80008950:	1d ff 33 dc 	j 800041b6 <lcd_print>

80008954 <printStateBlue>:
}
void printStateBlue(){
    sprintf(buf, "light blue");
80008954:	91 00 00 f7 	movh.a %a15,28672
80008958:	d9 ff c8 00 	lea %a15,[%a15]3080 <70000c08 <buf>>
8000895c:	91 00 00 28 	movh.a %a2,32768
80008960:	d9 22 f7 80 	lea %a2,[%a2]3639 <80000e37 <IfxVadc_Adc_masterIndex+0x7f>>
80008964:	40 f4       	mov.aa %a4,%a15
80008966:	04 2f       	ld.bu %d15,[%a2+]
80008968:	24 ff       	st.b [%a15+],%d15
8000896a:	ee fe       	jnz %d15,80008966 <printStateBlue+0x12>
    lcd_print(buf);
8000896c:	1d ff 25 dc 	j 800041b6 <lcd_print>

80008970 <printInfoDisplay>:
    printInfoDisplay(); 
}


void printInfoDisplay(){
    lcd_goto(0,0);
80008970:	d2 04       	mov %e4,0
80008972:	6d ff 1b dc 	call 800041a8 <lcd_goto>
    switch (infoState) {
80008976:	91 00 00 c7 	movh.a %a12,28672
8000897a:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <infoState>>
8000897e:	91 00 00 47 	movh.a %a4,28672
80008982:	d9 44 c8 00 	lea %a4,[%a4]3080 <70000c08 <buf>>
80008986:	ff 7f 55 80 	jge.u %d15,7,80008a30 <printInfoDisplay+0xc0>
8000898a:	91 10 00 f8 	movh.a %a15,32769
8000898e:	d9 ff 98 68 	lea %a15,[%a15]-30312 <80008998 <printInfoDisplay+0x28>>
80008992:	90 ff       	addsc.a %a15,%a15,%d15,2
80008994:	dc 0f       	ji %a15
80008996:	00 00       	nop 
80008998:	1d 00 0e 00 	j 800089b4 <printInfoDisplay+0x44>
8000899c:	1d 00 15 00 	j 800089c6 <printInfoDisplay+0x56>
800089a0:	1d 00 1c 00 	j 800089d8 <printInfoDisplay+0x68>
800089a4:	1d 00 23 00 	j 800089ea <printInfoDisplay+0x7a>
800089a8:	1d 00 2a 00 	j 800089fc <printInfoDisplay+0x8c>
800089ac:	1d 00 31 00 	j 80008a0e <printInfoDisplay+0x9e>
800089b0:	1d 00 38 00 	j 80008a20 <printInfoDisplay+0xb0>
        case tunnelMode:
            sprintf(buf, "Tunnel Mode");
800089b4:	91 00 00 28 	movh.a %a2,32768
800089b8:	40 4f       	mov.aa %a15,%a4
800089ba:	d9 22 c2 90 	lea %a2,[%a2]3650 <80000e42 <IfxVadc_Adc_masterIndex+0x8a>>
800089be:	04 2f       	ld.bu %d15,[%a2+]
800089c0:	24 ff       	st.b [%a15+],%d15
800089c2:	ee fe       	jnz %d15,800089be <printInfoDisplay+0x4e>
800089c4:	3c 36       	j 80008a30 <printInfoDisplay+0xc0>
            break;
        case airConditionMode:
            sprintf(buf,"Air Conditional");
800089c6:	91 00 00 28 	movh.a %a2,32768
800089ca:	40 4f       	mov.aa %a15,%a4
800089cc:	d9 22 ce 90 	lea %a2,[%a2]3662 <80000e4e <IfxVadc_Adc_masterIndex+0x96>>
800089d0:	04 2f       	ld.bu %d15,[%a2+]
800089d2:	24 ff       	st.b [%a15+],%d15
800089d4:	ee fe       	jnz %d15,800089d0 <printInfoDisplay+0x60>
800089d6:	3c 2d       	j 80008a30 <printInfoDisplay+0xc0>
            break;
        case chairDegree:
            sprintf(buf,"Chair Degree");
800089d8:	91 00 00 28 	movh.a %a2,32768
800089dc:	40 4f       	mov.aa %a15,%a4
800089de:	d9 22 de 90 	lea %a2,[%a2]3678 <80000e5e <IfxVadc_Adc_masterIndex+0xa6>>
800089e2:	04 2f       	ld.bu %d15,[%a2+]
800089e4:	24 ff       	st.b [%a15+],%d15
800089e6:	ee fe       	jnz %d15,800089e2 <printInfoDisplay+0x72>
800089e8:	3c 24       	j 80008a30 <printInfoDisplay+0xc0>
            break;
        case window:
            sprintf(buf,"window");
800089ea:	91 00 00 28 	movh.a %a2,32768
800089ee:	40 4f       	mov.aa %a15,%a4
800089f0:	d9 22 eb 90 	lea %a2,[%a2]3691 <80000e6b <IfxVadc_Adc_masterIndex+0xb3>>
800089f4:	04 2f       	ld.bu %d15,[%a2+]
800089f6:	24 ff       	st.b [%a15+],%d15
800089f8:	ee fe       	jnz %d15,800089f4 <printInfoDisplay+0x84>
800089fa:	3c 1b       	j 80008a30 <printInfoDisplay+0xc0>
            break;
        case embientLight:
            sprintf(buf,"embient light");
800089fc:	91 00 00 28 	movh.a %a2,32768
80008a00:	40 4f       	mov.aa %a15,%a4
80008a02:	d9 22 f2 90 	lea %a2,[%a2]3698 <80000e72 <IfxVadc_Adc_masterIndex+0xba>>
80008a06:	04 2f       	ld.bu %d15,[%a2+]
80008a08:	24 ff       	st.b [%a15+],%d15
80008a0a:	ee fe       	jnz %d15,80008a06 <printInfoDisplay+0x96>
80008a0c:	3c 12       	j 80008a30 <printInfoDisplay+0xc0>
            break;
        case adasSensor:
            sprintf(buf,"adas sensor");
80008a0e:	91 00 00 28 	movh.a %a2,32768
80008a12:	40 4f       	mov.aa %a15,%a4
80008a14:	d9 22 c0 a0 	lea %a2,[%a2]3712 <80000e80 <IfxVadc_Adc_masterIndex+0xc8>>
80008a18:	04 2f       	ld.bu %d15,[%a2+]
80008a1a:	24 ff       	st.b [%a15+],%d15
80008a1c:	ee fe       	jnz %d15,80008a18 <printInfoDisplay+0xa8>
80008a1e:	3c 09       	j 80008a30 <printInfoDisplay+0xc0>
            break;
        case driveLight:
            sprintf(buf,"Drive Light");
80008a20:	91 00 00 28 	movh.a %a2,32768
80008a24:	40 4f       	mov.aa %a15,%a4
80008a26:	d9 22 cc a0 	lea %a2,[%a2]3724 <80000e8c <IfxVadc_Adc_masterIndex+0xd4>>
80008a2a:	04 2f       	ld.bu %d15,[%a2+]
80008a2c:	24 ff       	st.b [%a15+],%d15
80008a2e:	ee fe       	jnz %d15,80008a2a <printInfoDisplay+0xba>
            break;
    }
    lcd_print(buf); 
80008a30:	6d ff c3 db 	call 800041b6 <lcd_print>
    lcd_goto(1,0);
80008a34:	d2 14       	mov %e4,1
80008a36:	6d ff b9 db 	call 800041a8 <lcd_goto>
    // sprintf(buf, "state = %u", infotainmentArr[infoState]); 
    // lcd_print(buf); 

    if(infoState == tunnelMode || infoState == driveLight ){
80008a3a:	19 cf e8 00 	ld.w %d15,[%a12]3112 <70000c28 <infoState>>
80008a3e:	91 00 00 f7 	movh.a %a15,28672
80008a42:	8b 6f 00 22 	eq %d2,%d15,6
80008a46:	8b 0f e0 24 	or.eq %d2,%d15,0
80008a4a:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008a4e:	76 26       	jz %d2,80008a5a <printInfoDisplay+0xea>
        if (infotainmentArr[infoState] == 0) { //mode on
80008a50:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a52:	4c f0       	ld.w %d15,[%a15]0
80008a54:	6e 36       	jz %d15,80008ac0 <printInfoDisplay+0x150>
            printStateOff();
        }
        else{ //mode off
            printStateOn();
80008a56:	1d ff 47 ff 	j 800088e4 <printStateOn>
        } 
    }
    else if(infoState == embientLight){
80008a5a:	5e 4b       	jne %d15,4,80008a70 <printInfoDisplay+0x100>
        switch(infotainmentArr[infoState]){
80008a5c:	4c f4       	ld.w %d15,[%a15]16
80008a5e:	1e 15       	jeq %d15,1,80008a68 <printInfoDisplay+0xf8>
80008a60:	1e 26       	jeq %d15,2,80008a6c <printInfoDisplay+0xfc>
80008a62:	ee 37       	jnz %d15,80008ad0 <printInfoDisplay+0x160>
            case 0:
                printStateRed();
80008a64:	1d ff 5c ff 	j 8000891c <printStateRed>
                break;
            case 1:
                printStateGreen();
80008a68:	1d ff 68 ff 	j 80008938 <printStateGreen>
                break;  
            case 2:
                printStateBlue();
80008a6c:	1d ff 74 ff 	j 80008954 <printStateBlue>
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008a70:	92 e2       	add %d2,%d15,-2
80008a72:	06 2f       	sh %d15,2
        switch(infotainmentArr[infoState]){
80008a74:	10 ff       	addsc.a %a15,%a15,%d15,0
80008a76:	4c f0       	ld.w %d15,[%a15]0
            case 2:
                printStateBlue();
                break;
        }
    }
    else if(infoState == chairDegree || infoState == window){
80008a78:	ff 22 14 80 	jge.u %d2,2,80008aa0 <printInfoDisplay+0x130>
        switch(infotainmentArr[infoState]){
80008a7c:	ff 4f 2a 80 	jge.u %d15,4,80008ad0 <printInfoDisplay+0x160>
80008a80:	91 10 00 f8 	movh.a %a15,32769
80008a84:	d9 ff 8c a8 	lea %a15,[%a15]-30068 <80008a8c <printInfoDisplay+0x11c>>
80008a88:	90 ff       	addsc.a %a15,%a15,%d15,2
80008a8a:	dc 0f       	ji %a15
80008a8c:	1d 00 1c 00 	j 80008ac4 <printInfoDisplay+0x154>
80008a90:	1d 00 1c 00 	j 80008ac8 <printInfoDisplay+0x158>
80008a94:	1d 00 1c 00 	j 80008acc <printInfoDisplay+0x15c>
80008a98:	1d 00 02 00 	j 80008a9c <printInfoDisplay+0x12c>
                break;  
            case 2:
                printStateLv3();
                break;
            case 3:
                printStateLv4();
80008a9c:	1d ff 16 ff 	j 800088c8 <printStateLv4>
                break;
        }
    }
    else{
        switch(infotainmentArr[infoState]){
80008aa0:	ff 4f 18 80 	jge.u %d15,4,80008ad0 <printInfoDisplay+0x160>
80008aa4:	91 10 00 f8 	movh.a %a15,32769
80008aa8:	d9 ff b0 a8 	lea %a15,[%a15]-30032 <80008ab0 <printInfoDisplay+0x140>>
80008aac:	90 ff       	addsc.a %a15,%a15,%d15,2
80008aae:	dc 0f       	ji %a15
80008ab0:	1d 00 08 00 	j 80008ac0 <printInfoDisplay+0x150>
80008ab4:	1d 00 08 00 	j 80008ac4 <printInfoDisplay+0x154>
80008ab8:	1d 00 08 00 	j 80008ac8 <printInfoDisplay+0x158>
80008abc:	1d 00 08 00 	j 80008acc <printInfoDisplay+0x15c>
            case 0:
                printStateOff();
80008ac0:	1d ff 20 ff 	j 80008900 <printStateOff>
                break;
            case 1:
                printStateLv1();
80008ac4:	1d ff d8 fe 	j 80008874 <printStateLv1>
                break;  
            case 2:
                printStateLv2();
80008ac8:	1d ff e4 fe 	j 80008890 <printStateLv2>
                break;
            case 3:
                printStateLv3();
80008acc:	1d ff f0 fe 	j 800088ac <printStateLv3>
80008ad0:	00 90       	ret 

80008ad2 <initInfotainment>:
#include "infotainment_System.h"
#include "bsw.h"


void initInfotainment(void){
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008ad2:	6d ff fe da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008ad6:	1d ff 4d ff 	j 80008970 <printInfoDisplay>

80008ada <updateInfoState>:


}

void updateInfoState(unsigned int buttonState){
    switch (buttonState) {
80008ada:	ff 44 4a 80 	jge.u %d4,4,80008b6e <updateInfoState+0x94>
80008ade:	91 10 00 28 	movh.a %a2,32769
80008ae2:	d9 22 b0 b8 	lea %a2,[%a2]-29968 <80008af0 <updateInfoState+0x16>>
80008ae6:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80008aea:	91 00 00 f7 	movh.a %a15,28672
80008aee:	dc 02       	ji %a2
80008af0:	1d 00 08 00 	j 80008b00 <updateInfoState+0x26>
80008af4:	1d 00 10 00 	j 80008b14 <updateInfoState+0x3a>
80008af8:	1d 00 19 00 	j 80008b2a <updateInfoState+0x50>
80008afc:	1d 00 24 00 	j 80008b44 <updateInfoState+0x6a>
        case btnUP:
            if (infoState + 1 <= driveLight) {
80008b00:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008b04:	91 00 00 27 	movh.a %a2,28672
80008b08:	ff 6f 04 00 	jge %d15,6,80008b10 <updateInfoState+0x36>
                infoState = infoState + 1;
80008b0c:	c2 1f       	add %d15,1
80008b0e:	3c 09       	j 80008b20 <updateInfoState+0x46>
            }
            else {
                infoState = tunnelMode;
80008b10:	82 0f       	mov %d15,0
80008b12:	3c 07       	j 80008b20 <updateInfoState+0x46>
            }
            break;
        case btnDOWN:
            if (infoState - 1 >= tunnelMode) {
80008b14:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008b18:	91 00 00 27 	movh.a %a2,28672
80008b1c:	8e f5       	jlez %d15,80008b26 <updateInfoState+0x4c>
                infoState = infoState - 1;
80008b1e:	c2 ff       	add %d15,-1
80008b20:	59 2f e8 00 	st.w [%a2]3112 <70000c28 <infoState>>,%d15
80008b24:	3c 25       	j 80008b6e <updateInfoState+0x94>
            }
            else {
                infoState = driveLight;
80008b26:	82 6f       	mov %d15,6
80008b28:	3c fc       	j 80008b20 <updateInfoState+0x46>
            }
            break;
        case btnLEFT:
            if(infotainmentArr[infoState] -1 >= 0){
80008b2a:	19 ff e8 00 	ld.w %d15,[%a15]3112 <70000c28 <infoState>>
80008b2e:	91 00 00 f7 	movh.a %a15,28672
80008b32:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008b36:	90 ff       	addsc.a %a15,%a15,%d15,2
80008b38:	4c f0       	ld.w %d15,[%a15]0
80008b3a:	8e f3       	jlez %d15,80008b40 <updateInfoState+0x66>
                infotainmentArr[infoState] = infotainmentArr[infoState] - 1;
80008b3c:	c2 ff       	add %d15,-1
80008b3e:	3c 17       	j 80008b6c <updateInfoState+0x92>
            }
            else{
                infotainmentArr[infoState] = 0;
80008b40:	82 0f       	mov %d15,0
80008b42:	3c 15       	j 80008b6c <updateInfoState+0x92>
            }
            break;
        case btnRIGHT:
            if(infotainmentArr[infoState] +1 <=  stateMaxArr[infoState]){
80008b44:	19 ff e8 00 	ld.w %d15,[%a15]3112
80008b48:	91 00 00 28 	movh.a %a2,32768
80008b4c:	91 00 00 f7 	movh.a %a15,28672
80008b50:	06 2f       	sh %d15,2
80008b52:	d9 ff ec 00 	lea %a15,[%a15]3116 <70000c2c <infotainmentArr>>
80008b56:	d9 22 d8 a0 	lea %a2,[%a2]3736 <80000e98 <stateMaxArr>>
80008b5a:	10 ff       	addsc.a %a15,%a15,%d15,0
80008b5c:	10 22       	addsc.a %a2,%a2,%d15,0
80008b5e:	48 02       	ld.w %d2,[%a15]0
80008b60:	4c 20       	ld.w %d15,[%a2]0
80008b62:	7f f2 05 00 	jge %d2,%d15,80008b6c <updateInfoState+0x92>
                infotainmentArr[infoState] = infotainmentArr[infoState] +1;
80008b66:	c2 12       	add %d2,1
80008b68:	68 02       	st.w [%a15]0,%d2
80008b6a:	3c 02       	j 80008b6e <updateInfoState+0x94>
            }
            else{
                infotainmentArr[infoState] = stateMaxArr[infoState];
80008b6c:	68 0f       	st.w [%a15]0,%d15
            }
            break;
        
    }
    lcd_clear(); // LCD 출력 내용 초기화 함수
80008b6e:	6d ff b0 da 	call 800040ce <lcd_clear>
    printInfoDisplay(); 
80008b72:	1d ff ff fe 	j 80008970 <printInfoDisplay>
	...

80008b78 <initUartDriver>:

App_AsclinAsc g_AsclinStm;
struct ActuatorPacket g_RecievedActuatorPacket = {};

void initUartDriver(void)
{
80008b78:	20 60       	sub.a %sp,96
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);
80008b7a:	d9 a4 24 00 	lea %a4,[%sp]36
80008b7e:	c5 f5 40 80 	lea %a5,f0000600 <_SMALL_DATA4_+0x3fff8600>
80008b82:	6d ff 1f e6 	call 800057c0 <IfxAsclin_Asc_initModuleConfig>

    ascConfig.baudrate.prescaler    = 1;
80008b86:	82 1f       	mov %d15,1
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008b88:	7b 00 00 27 	movh %d2,28672
80008b8c:	1b e2 d7 20 	addi %d2,%d2,3454
void initUartDriver(void)
{
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
80008b90:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
80008b94:	7b 10 7e f4 	movh %d15,18401
80008b98:	78 0a       	st.w [%sp]40,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
80008b9a:	59 a2 18 10 	st.w [%sp]88,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008b9e:	82 3f       	mov %d15,3
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008ba0:	7b 00 00 28 	movh %d2,32768
80008ba4:	60 23       	mov.a %a3,%d2
    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN0);

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
80008ba6:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008baa:	82 4f       	mov %d15,4
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bac:	d9 af 04 00 	lea %a15,[%sp]4

    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
80008bb0:	f9 af 02 10 	st.h [%sp]66,%d15
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008bb4:	82 5f       	mov %d15,5
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bb6:	40 f4       	mov.aa %a4,%a15
    ascConfig.baudrate.prescaler    = 1;
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
80008bb8:	f9 af 00 10 	st.h [%sp]64,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bbc:	d9 32 f4 a0 	lea %a2,[%a3]3764
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;
80008bc0:	82 0f       	mov %d15,0
80008bc2:	e9 af 06 10 	st.b [%sp]70,%d15
    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;

    const IfxAsclin_Asc_Pins pins = {
80008bc6:	a0 33       	mov.a %a3,3
80008bc8:	09 22 48 01 	ld.d %e2,[%a2+]8
80008bcc:	89 42 48 01 	st.d [%a4+]8,%e2
80008bd0:	fc 3c       	loop %a3,80008bc8 <initUartDriver+0x50>

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008bd2:	7b 00 00 f7 	movh %d15,28672
80008bd6:	1b 4f c5 f0 	addi %d15,%d15,3156
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008bda:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
80008bde:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008be0:	d9 44 e8 a0 	lea %a4,[%a4]3752 <70000ea8 <g_AsclinStm+0x254>>
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008be4:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008be8:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.rxPriority = ISR_PRIORITY_ASC_0_RX;
    ascConfig.interrupt.txPriority = ISR_PRIORITY_ASC_0_TX;
    ascConfig.interrupt.typeOfService = IfxSrc_Tos_cpu0;

    ascConfig.txBuffer     = g_AsclinStm.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80008bec:	f9 af 0e 10 	st.h [%sp]78,%d15
    ascConfig.rxBuffer     = g_AsclinStm.ascBuffer.rx;
    ascConfig.rxBufferSize = ASC_RX_BUFFER_SIZE;
80008bf0:	f9 af 14 10 	st.h [%sp]84,%d15
        &IfxAsclin0_RXB_P15_3_IN,      IfxPort_InputMode_pullUp,
        NULL_PTR,                      IfxPort_OutputMode_pushPull,
        &IfxAsclin0_TX_P15_2_OUT,      IfxPort_OutputMode_pushPull,
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
80008bf4:	f8 12       	st.a [%sp]72,%a15

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
80008bf6:	1d ff 0e e4 	j 80005412 <IfxAsclin_Asc_initModule>

80008bfa <myprintfSerial>:
    }
    deserialize_sensor_packet(buffer,packet);
}

void myprintfSerial(const char *fmt,...)
{
80008bfa:	20 e8       	sub.a %sp,232
80008bfc:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80008bfe:	6d 00 53 06 	call 800098a4 <EnableAllInterrupts>
    char buf[128];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, 128, fmt, args);
80008c02:	40 f5       	mov.aa %a5,%a15
80008c04:	d9 a4 28 10 	lea %a4,[%sp]104
80008c08:	3b 00 08 40 	mov %d4,128
80008c0c:	d9 a6 28 30 	lea %a6,[%sp]232
80008c10:	6d 00 bd 14 	call 8000b58a <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
80008c14:	d9 a4 28 10 	lea %a4,[%sp]104
80008c18:	6d 00 8a 14 	call 8000b52c <strlen>
80008c1c:	91 00 00 f7 	movh.a %a15,28672
80008c20:	d9 ff d4 10 	lea %a15,[%a15]3156 <70000c54 <g_AsclinStm>>
80008c24:	f9 f2 30 90 	st.h [%a15]624 <70000270 <__malloc_av_+0x168>>,%d2
    unsigned int i =0;
80008c28:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
80008c2a:	d9 a4 28 10 	lea %a4,[%sp]104
80008c2e:	6d 00 7f 14 	call 8000b52c <strlen>
80008c32:	7f 2f 0c 80 	jge.u %d15,%d2,80008c4a <myprintfSerial+0x50>
        txData[i] = buf[i];
80008c36:	d9 a3 04 00 	lea %a3,[%sp]4
80008c3a:	10 32       	addsc.a %a2,%a3,%d15,0
80008c3c:	d9 a3 28 10 	lea %a3,[%sp]104
80008c40:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinStm.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
80008c42:	c2 1f       	add %d15,1
        txData[i] = buf[i];
80008c44:	08 02       	ld.bu %d2,[%a15]0
80008c46:	34 22       	st.b [%a2],%d2
80008c48:	3c f1       	j 80008c2a <myprintfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &txData, &g_AsclinStm.count, TIME_INFINITE);
80008c4a:	91 00 00 47 	movh.a %a4,28672
80008c4e:	91 00 00 67 	movh.a %a6,28672
80008c52:	82 f4       	mov %d4,-1
80008c54:	d9 44 e8 a0 	lea %a4,[%a4]3752 <70000ea8 <g_AsclinStm+0x254>>
80008c58:	d9 a5 04 00 	lea %a5,[%sp]4 <70000ea8 <g_AsclinStm+0x254>>
80008c5c:	d9 66 c4 b0 	lea %a6,[%a6]3780 <70000ec4 <g_AsclinStm+0x270>>
80008c60:	9b 04 00 58 	addih %d5,%d4,32768
80008c64:	1d ff 16 e6 	j 80005890 <IfxAsclin_Asc_write>

80008c68 <asclin0TxISR>:
}

ISR(asclin0TxISR)
{
    // printfSerial("onTransmit(%d) ",++sendStamp);
    IfxAsclin_Asc_isrTransmit(&g_AsclinStm.drivers.asc);
80008c68:	91 00 00 47 	movh.a %a4,28672
80008c6c:	d9 44 e8 a0 	lea %a4,[%a4]3752 <70000ea8 <g_AsclinStm+0x254>>
80008c70:	1d ff 16 e3 	j 8000529c <IfxAsclin_Asc_isrTransmit>

80008c74 <calculate_checksum>:

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008c74:	82 0f       	mov %d15,0

//from uart_packet

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
80008c76:	82 02       	mov %d2,0
80008c78:	9f 04 03 80 	jned %d4,0,80008c7e <calculate_checksum+0xa>
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
    }
    return checksumResult;
}
80008c7c:	00 90       	ret 
/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
        checksumResult ^= data[i];
80008c7e:	10 4f       	addsc.a %a15,%a4,%d15,0

/* Calculate 8-bit XOR checksum */
uint8 calculate_checksum(const uint8* data, size_t length) {
    uint8 checksumResult = 0;
    size_t i = 0;
    for (i = 0; i < length; ++i) {
80008c80:	c2 1f       	add %d15,1
        checksumResult ^= data[i];
80008c82:	08 03       	ld.bu %d3,[%a15]0
80008c84:	c6 32       	xor %d2,%d3
80008c86:	3c f9       	j 80008c78 <calculate_checksum+0x4>

80008c88 <serialize_actuator_packet>:
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
80008c88:	40 52       	mov.aa %a2,%a5
80008c8a:	a0 93       	mov.a %a3,9
80008c8c:	04 4f       	ld.bu %d15,[%a4+]
80008c8e:	24 2f       	st.b [%a2+],%d15
80008c90:	fc 3e       	loop %a3,80008c8c <serialize_actuator_packet+0x4>
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008c92:	40 54       	mov.aa %a4,%a5
80008c94:	3b a0 00 40 	mov %d4,10
    }
    return checksumResult;
}

/* Serialize ActuatorPacket into buffer (ACTUATOR_PACKET_SIZE bytes) */
void serialize_actuator_packet(const struct ActuatorPacket* packet, uint8* buffer) {
80008c98:	40 5f       	mov.aa %a15,%a5
    /* Copy all fields except CRC */
    memcpy(buffer, packet, ACTUATOR_PACKET_SIZE - 1);
    /* Compute and append CRC */
    buffer[ACTUATOR_PACKET_SIZE - 1] = calculate_checksum(buffer, ACTUATOR_PACKET_SIZE - 1);
80008c9a:	6d ff ed ff 	call 80008c74 <calculate_checksum>
80008c9e:	28 a2       	st.b [%a15]10,%d2
80008ca0:	00 90       	ret 

80008ca2 <sendActuatorPacket>:

    IfxAsclin_Asc_initModule(&g_AsclinStm.drivers.asc, &ascConfig);
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
80008ca2:	20 10       	sub.a %sp,16
80008ca4:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008ca6:	6d 00 ff 05 	call 800098a4 <EnableAllInterrupts>
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008caa:	d9 af 05 00 	lea %a15,[%sp]5
80008cae:	40 f2       	mov.aa %a2,%a15
    serialize_actuator_packet(packet,buf);
80008cb0:	40 c4       	mov.aa %a4,%a12
80008cb2:	40 f5       	mov.aa %a5,%a15
}

void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
80008cb4:	82 0f       	mov %d15,0
80008cb6:	a0 a3       	mov.a %a3,10
80008cb8:	24 2f       	st.b [%a2+],%d15
80008cba:	fc 3f       	loop %a3,80008cb8 <sendActuatorPacket+0x16>
    serialize_actuator_packet(packet,buf);
80008cbc:	6d ff e6 ff 	call 80008c88 <serialize_actuator_packet>
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008cc0:	91 00 00 27 	movh.a %a2,28672
80008cc4:	da 0b       	mov %d15,11
80008cc6:	d9 22 d4 10 	lea %a2,[%a2]3156 <70000c54 <g_AsclinStm>>
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008cca:	91 00 00 47 	movh.a %a4,28672
80008cce:	91 00 00 67 	movh.a %a6,28672
80008cd2:	82 f4       	mov %d4,-1
void sendActuatorPacket(const struct ActuatorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[ACTUATOR_PACKET_SIZE]={};
    serialize_actuator_packet(packet,buf);
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
80008cd4:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x168>>,%d15
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008cd8:	d9 44 e8 a0 	lea %a4,[%a4]3752 <70000ea8 <g_AsclinStm+0x254>>
80008cdc:	40 f5       	mov.aa %a5,%a15
80008cde:	d9 66 c4 b0 	lea %a6,[%a6]3780 <70000ec4 <g_AsclinStm+0x270>>
80008ce2:	9b 04 00 58 	addih %d5,%d4,32768
80008ce6:	1d ff d5 e5 	j 80005890 <IfxAsclin_Asc_write>

80008cea <deserialize_actuator_packet>:
}

/* Deserialize buffer into ActuatorPacket */
void deserialize_actuator_packet(const uint8* buffer, struct ActuatorPacket* packet) {
    /* Copy entire packet */
    memcpy(packet, buffer, ACTUATOR_PACKET_SIZE);
80008cea:	a0 af       	mov.a %a15,10
80008cec:	04 4f       	ld.bu %d15,[%a4+]
80008cee:	24 5f       	st.b [%a5+],%d15
80008cf0:	fc fe       	loop %a15,80008cec <deserialize_actuator_packet+0x2>
80008cf2:	00 90       	ret 

80008cf4 <readActuatorPacket>:
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008cf4:	20 10       	sub.a %sp,16
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008cf6:	91 00 00 d7 	movh.a %a13,28672
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008cfa:	d9 af 05 00 	lea %a15,[%sp]5
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008cfe:	d9 dd e8 a0 	lea %a13,[%a13]3752 <70000ea8 <g_AsclinStm+0x254>>
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d02:	40 f2       	mov.aa %a2,%a15
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
80008d04:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d06:	40 d4       	mov.aa %a4,%a13
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
80008d08:	82 0f       	mov %d15,0
80008d0a:	a0 a3       	mov.a %a3,10
80008d0c:	24 2f       	st.b [%a2+],%d15
80008d0e:	fc 3f       	loop %a3,80008d0c <readActuatorPacket+0x18>
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
80008d10:	6d ff fa e1 	call 80005104 <IfxAsclin_Asc_getReadCount>
80008d14:	8b b2 40 22 	lt %d2,%d2,11
80008d18:	df 02 11 80 	jne %d2,0,80008d3a <readActuatorPacket+0x46>
80008d1c:	82 0f       	mov %d15,0
    while (sendCnt--)
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008d1e:	40 d4       	mov.aa %a4,%a13
80008d20:	6d ff 58 e3 	call 800053d0 <IfxAsclin_Asc_blockingRead>
80008d24:	10 f2       	addsc.a %a2,%a15,%d15,0
80008d26:	c2 1f       	add %d15,1
80008d28:	34 22       	st.b [%a2],%d2
void readActuatorPacket(struct ActuatorPacket* packet){
    uint8 buffer[ACTUATOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = ACTUATOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<ACTUATOR_PACKET_SIZE) return;
    while (sendCnt--)
80008d2a:	8b bf 20 22 	ne %d2,%d15,11
80008d2e:	df 02 f8 ff 	jne %d2,0,80008d1e <readActuatorPacket+0x2a>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
80008d32:	40 f4       	mov.aa %a4,%a15
80008d34:	40 c5       	mov.aa %a5,%a12
80008d36:	6d ff da ff 	call 80008cea <deserialize_actuator_packet>
80008d3a:	00 90       	ret 

80008d3c <asclin0RxISR>:
}

ISR(asclin0RxISR)
{
    // printfSerial("onReceive(%d) ",++recieveStamp);
    IfxAsclin_Asc_isrReceive(&g_AsclinStm.drivers.asc);
80008d3c:	91 00 00 f7 	movh.a %a15,28672
80008d40:	d9 ff e8 a0 	lea %a15,[%a15]3752 <70000ea8 <g_AsclinStm+0x254>>
80008d44:	40 f4       	mov.aa %a4,%a15
80008d46:	6d ff fa e2 	call 8000533a <IfxAsclin_Asc_isrReceive>
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)>=ACTUATOR_PACKET_SIZE){
80008d4a:	40 f4       	mov.aa %a4,%a15
80008d4c:	6d ff dc e1 	call 80005104 <IfxAsclin_Asc_getReadCount>
80008d50:	8b b2 40 22 	lt %d2,%d2,11
80008d54:	f6 27       	jnz %d2,80008d62 <asclin0RxISR+0x26>
        readActuatorPacket(&g_RecievedActuatorPacket);
80008d56:	91 00 00 47 	movh.a %a4,28672
80008d5a:	d9 44 c8 10 	lea %a4,[%a4]3144 <70000c48 <g_RecievedActuatorPacket>>
80008d5e:	1d ff cb ff 	j 80008cf4 <readActuatorPacket>
80008d62:	00 90       	ret 

80008d64 <serialize_sensor_packet>:
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
80008d64:	40 52       	mov.aa %a2,%a5
80008d66:	a0 73       	mov.a %a3,7
80008d68:	04 4f       	ld.bu %d15,[%a4+]
80008d6a:	24 2f       	st.b [%a2+],%d15
80008d6c:	fc 3e       	loop %a3,80008d68 <serialize_sensor_packet+0x4>
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008d6e:	40 54       	mov.aa %a4,%a5
80008d70:	3b 80 00 40 	mov %d4,8
         // handle CRC mismatch
       } */
}

/* Serialize SensorPacket into buffer (SENSOR_PACKET_SIZE bytes) */
void serialize_sensor_packet(const struct SensorPacket* packet, uint8* buffer) {
80008d74:	40 5f       	mov.aa %a15,%a5
    memcpy(buffer, packet, SENSOR_PACKET_SIZE - 1);
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
80008d76:	6d ff 7f ff 	call 80008c74 <calculate_checksum>
80008d7a:	28 82       	st.b [%a15]8,%d2
80008d7c:	00 90       	ret 

80008d7e <sendSensorPacket>:
    g_AsclinStm.count = ACTUATOR_PACKET_SIZE;
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
}

void sendSensorPacket(const struct SensorPacket* packet)
{
80008d7e:	20 10       	sub.a %sp,16
80008d80:	40 4c       	mov.aa %a12,%a4
    EnableAllInterrupts();
80008d82:	6d 00 91 05 	call 800098a4 <EnableAllInterrupts>
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008d86:	d9 af 07 00 	lea %a15,[%sp]7
80008d8a:	40 f2       	mov.aa %a2,%a15
    serialize_sensor_packet(packet,buf);
80008d8c:	40 c4       	mov.aa %a4,%a12
80008d8e:	40 f5       	mov.aa %a5,%a15
}

void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
80008d90:	82 0f       	mov %d15,0
80008d92:	a0 83       	mov.a %a3,8
80008d94:	24 2f       	st.b [%a2+],%d15
80008d96:	fc 3f       	loop %a3,80008d94 <sendSensorPacket+0x16>
    serialize_sensor_packet(packet,buf);
80008d98:	6d ff e6 ff 	call 80008d64 <serialize_sensor_packet>
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008d9c:	91 00 00 27 	movh.a %a2,28672
80008da0:	da 09       	mov %d15,9
80008da2:	d9 22 d4 10 	lea %a2,[%a2]3156 <70000c54 <g_AsclinStm>>
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008da6:	91 00 00 47 	movh.a %a4,28672
80008daa:	91 00 00 67 	movh.a %a6,28672
80008dae:	82 f4       	mov %d4,-1
void sendSensorPacket(const struct SensorPacket* packet)
{
    EnableAllInterrupts();
    uint8 buf[SENSOR_PACKET_SIZE]={};
    serialize_sensor_packet(packet,buf);
    g_AsclinStm.count = SENSOR_PACKET_SIZE;
80008db0:	f9 2f 30 90 	st.h [%a2]624 <70000270 <__malloc_av_+0x168>>,%d15
    IfxAsclin_Asc_write(&g_AsclinStm.drivers.asc, &buf, &g_AsclinStm.count, TIME_INFINITE);
80008db4:	d9 44 e8 a0 	lea %a4,[%a4]3752 <70000ea8 <g_AsclinStm+0x254>>
80008db8:	40 f5       	mov.aa %a5,%a15
80008dba:	d9 66 c4 b0 	lea %a6,[%a6]3780 <70000ec4 <g_AsclinStm+0x270>>
80008dbe:	9b 04 00 58 	addih %d5,%d4,32768
80008dc2:	1d ff 67 e5 	j 80005890 <IfxAsclin_Asc_write>

80008dc6 <deserialize_sensor_packet>:
    buffer[SENSOR_PACKET_SIZE - 1] = calculate_checksum(buffer, SENSOR_PACKET_SIZE - 1);
}

/* Deserialize buffer into SensorPacket */
void deserialize_sensor_packet(const uint8* buffer, struct SensorPacket* packet) {
    memcpy(packet, buffer, SENSOR_PACKET_SIZE);
80008dc6:	a0 8f       	mov.a %a15,8
80008dc8:	04 4f       	ld.bu %d15,[%a4+]
80008dca:	24 5f       	st.b [%a5+],%d15
80008dcc:	fc fe       	loop %a15,80008dc8 <deserialize_sensor_packet+0x2>
80008dce:	00 90       	ret 

80008dd0 <readSensorPacket>:
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
80008dd0:	20 10       	sub.a %sp,16
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008dd2:	91 00 00 d7 	movh.a %a13,28672
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008dd6:	d9 af 07 00 	lea %a15,[%sp]7
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008dda:	d9 dd e8 a0 	lea %a13,[%a13]3752 <70000ea8 <g_AsclinStm+0x254>>
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008dde:	40 f2       	mov.aa %a2,%a15
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
80008de0:	40 4c       	mov.aa %a12,%a4
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008de2:	40 d4       	mov.aa %a4,%a13
    }
    deserialize_actuator_packet(buffer,packet);
}

void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
80008de4:	82 0f       	mov %d15,0
80008de6:	a0 83       	mov.a %a3,8
80008de8:	24 2f       	st.b [%a2+],%d15
80008dea:	fc 3f       	loop %a3,80008de8 <readSensorPacket+0x18>
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
80008dec:	6d ff 8c e1 	call 80005104 <IfxAsclin_Asc_getReadCount>
80008df0:	8b 92 40 22 	lt %d2,%d2,9
80008df4:	df 02 11 80 	jne %d2,0,80008e16 <readSensorPacket+0x46>
80008df8:	82 0f       	mov %d15,0
    while (sendCnt--)
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
80008dfa:	40 d4       	mov.aa %a4,%a13
80008dfc:	6d ff ea e2 	call 800053d0 <IfxAsclin_Asc_blockingRead>
80008e00:	10 f2       	addsc.a %a2,%a15,%d15,0
80008e02:	c2 1f       	add %d15,1
80008e04:	34 22       	st.b [%a2],%d2
void readSensorPacket(struct SensorPacket* packet){
    uint8 buffer[SENSOR_PACKET_SIZE]={};
    uint8 pos = 0;
    uint8 sendCnt = SENSOR_PACKET_SIZE;
    if(IfxAsclin_Asc_getReadCount(&g_AsclinStm.drivers.asc)<SENSOR_PACKET_SIZE) return;
    while (sendCnt--)
80008e06:	8b 9f 20 22 	ne %d2,%d15,9
80008e0a:	df 02 f8 ff 	jne %d2,0,80008dfa <readSensorPacket+0x2a>
    {
        buffer[pos++]=IfxAsclin_Asc_blockingRead(&g_AsclinStm.drivers.asc);
    }
    deserialize_sensor_packet(buffer,packet);
80008e0e:	40 f4       	mov.aa %a4,%a15
80008e10:	40 c5       	mov.aa %a5,%a12
80008e12:	6d ff da ff 	call 80008dc6 <deserialize_sensor_packet>
80008e16:	00 90       	ret 

80008e18 <initUltrasonic>:
80008e18:	91 40 00 4f 	movh.a %a4,61444
80008e1c:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e20:	82 14       	mov %d4,1
80008e22:	3b 00 08 50 	mov %d5,128
80008e26:	6d ff 42 e7 	call 80005caa <IfxPort_setPinMode>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80008e2a:	91 40 00 4f 	movh.a %a4,61444
80008e2e:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e32:	82 24       	mov %d4,2
80008e34:	3b 80 00 50 	mov %d5,8
80008e38:	1d ff 39 e7 	j 80005caa <IfxPort_setPinMode>

80008e3c <sendTrigger>:
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80008e3c:	91 40 00 ff 	movh.a %a15,61444
80008e40:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008e44:	82 2f       	mov %d15,2
80008e46:	68 1f       	st.w [%a15]4,%d15
}

void sendTrigger()
{
    IfxPort_setPinHigh(TRIG_PIN);
    delay_us(10);
80008e48:	3b a0 00 40 	mov %d4,10
80008e4c:	7b 20 00 f0 	movh %d15,2
80008e50:	6d ff 92 da 	call 80004374 <delay_us>
80008e54:	68 1f       	st.w [%a15]4,%d15
80008e56:	00 90       	ret 

80008e58 <measureEchoTick>:
}


IFX_INLINE boolean IfxPort_getPinState(Ifx_P *port, uint8 pinIndex)
{
    return (__getbit(&port->IN.U, pinIndex) != 0) ? TRUE : FALSE;
80008e58:	91 40 00 ff 	movh.a %a15,61444
long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008e5c:	7b 40 07 10 	movh %d1,116
    IfxPort_setPinLow(TRIG_PIN);
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
80008e60:	d2 02       	mov %e2,0
80008e62:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008e66:	1b 01 78 1f 	addi %d1,%d1,-2176
80008e6a:	4c f9       	ld.w %d15,[%a15]36
}

long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0){
80008e6c:	6f 2f 13 80 	jnz.t %d15,2,80008e92 <measureEchoTick+0x3a>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008e70:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008e74:	85 f0 2c 00 	ld.w %d0,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008e78:	53 1f 40 40 	mul.u %e4,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008e7c:	8f 0f 40 21 	or %d2,%d15,0
80008e80:	0f 50 a0 30 	or %d3,%d0,%d5
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008e84:	ba 03       	eq %d15,%d3,0
80008e86:	0b 12 50 f2 	and.ge.u %d15,%d2,%d1
80008e8a:	8b 03 00 f5 	or.ne %d15,%d3,0
80008e8e:	6e ee       	jz %d15,80008e6a <measureEchoTick+0x12>
80008e90:	3c 2c       	j 80008ee8 <measureEchoTick+0x90>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008e92:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008e96:	85 f8 2c 00 	ld.w %d8,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008e9a:	53 1f 40 00 	mul.u %e0,%d15,1
80008e9e:	91 40 00 ff 	movh.a %a15,61444
    };
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008ea2:	7b 40 07 00 	movh %d0,116
    result |= ((uint64)stm->CAP.U) << 32;
80008ea6:	8f 0f 40 41 	or %d4,%d15,0
80008eaa:	0f 18 a0 50 	or %d5,%d8,%d1
80008eae:	d9 ff 00 0b 	lea %a15,[%a15]-20480 <f003b000 <_SMALL_DATA4_+0x40033000>>
80008eb2:	1b 00 78 0f 	addi %d0,%d0,-2176
80008eb6:	4c f9       	ld.w %d15,[%a15]36
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    startTick = IfxStm_get(&MODULE_STM0);
    while (IfxPort_getPinState(ECHO_PIN) == 1){
80008eb8:	6f 2f 17 00 	jz.t %d15,2,80008ee6 <measureEchoTick+0x8e>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008ebc:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80008ec0:	53 1f 40 20 	mul.u %e2,%d15,1
    result |= ((uint64)stm->CAP.U) << 32;
80008ec4:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80008ec8:	8f 0f 40 61 	or %d6,%d15,0
80008ecc:	0f 32 a0 70 	or %d7,%d2,%d3
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
80008ed0:	0b 46 c0 20 	subx %d2,%d6,%d4
80008ed4:	0b 57 d0 30 	subc %d3,%d7,%d5
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008ed8:	ba 03       	eq %d15,%d3,0
80008eda:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80008ede:	8b 03 00 f5 	or.ne %d15,%d3,0
80008ee2:	6e ea       	jz %d15,80008eb6 <measureEchoTick+0x5e>
80008ee4:	3c 02       	j 80008ee8 <measureEchoTick+0x90>
    };
    return (long)elapsedTick;
80008ee6:	00 90       	ret 
long measureEchoTick()
{
    uint64 startTick = 0, elapsedTick = 0;
    while (IfxPort_getPinState(ECHO_PIN) == 0){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
80008ee8:	82 f2       	mov %d2,-1
    while (IfxPort_getPinState(ECHO_PIN) == 1){
        elapsedTick = IfxStm_get(&MODULE_STM0)-startTick;
        if(elapsedTick >= (uint64) ECHO_TIMEOUT_TICK)return -1;
    };
    return (long)elapsedTick;
}
80008eea:	00 90       	ret 

80008eec <getUltrasonic>:
    IfxPort_setPinModeOutput(TRIG_PIN, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeInput(ECHO_PIN, IfxPort_InputMode_pullDown);
}

int getUltrasonic(){
    sendTrigger();
80008eec:	6d ff a8 ff 	call 80008e3c <sendTrigger>
    long echoTicks = measureEchoTick();
80008ef0:	6d ff b4 ff 	call 80008e58 <measureEchoTick>
80008ef4:	02 2f       	mov %d15,%d2
    if(echoTicks==-1)return -1;
80008ef6:	82 f2       	mov %d2,-1
80008ef8:	1e fb       	jeq %d15,-1,80008f0e <getUltrasonic+0x22>
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008efa:	3b 80 0c 20 	mov %d2,200
80008efe:	4b 2f 01 22 	div %e2,%d15,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008f02:	3b 80 3e f0 	mov %d15,1000
80008f06:	53 12 21 20 	mul %d2,%d2,17
80008f0a:	4b f2 01 22 	div %e2,%d2,%d15
    sendTrigger();
    long echoTicks = measureEchoTick();
    if(echoTicks==-1)return -1;
    int distanceCm = calculateDistanceCm(echoTicks);
    return distanceCm;
}
80008f0e:	00 90       	ret 

80008f10 <calculateDistanceCm>:
    return (long)elapsedTick;
}

int calculateDistanceCm(long elapsedTicks)
{
    long timeUs = elapsedTicks / 200;
80008f10:	3b 80 0c 20 	mov %d2,200
80008f14:	4b 24 01 42 	div %e4,%d4,%d2
    long distanceCm = timeUs * 34 / 1000 / 2;
80008f18:	3b 80 3e 20 	mov %d2,1000
80008f1c:	53 14 21 40 	mul %d4,%d4,17
80008f20:	4b 24 01 22 	div %e2,%d4,%d2
    return (int) distanceCm;
}
80008f24:	00 90       	ret 

80008f26 <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f26:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f2a:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f2e:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f32:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f36:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f38:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f3a:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008f3e:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80008f42:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008f46:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008f4a:	8f f8 83 81 	xor %d8,%d8,63
80008f4e:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
80008f52:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
80008f54:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008f58:	3b 00 b8 f0 	mov %d15,2944
80008f5c:	cd 4f e0 0f 	mtcr $psw,%d15
80008f60:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80008f64:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008f68:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008f6c:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008f70:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008f74:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008f78:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008f7a:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008f7e:	cd 42 20 09 	mtcr $pcon1,%d2
80008f82:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f86:	53 cf 20 f0 	mul %d15,%d15,12
80008f8a:	10 22       	addsc.a %a2,%a2,%d15,0
80008f8c:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008f8e:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008f90:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008f94:	d9 2f 00 46 	lea %a15,[%a2]24832
80008f98:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008f9c:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008f9e:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008fa2:	2e 16       	jz.t %d15,1,80008fae <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008fa4:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008fa8:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008fac:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008fae:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008fb2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008fb6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008fb8:	4c f0       	ld.w %d15,[%a15]0
80008fba:	6f 0f ff ff 	jnz.t %d15,0,80008fb8 <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
80008fbe:	82 0f       	mov %d15,0
80008fc0:	cd cf 20 09 	mtcr $pcon0,%d15
80008fc4:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008fc8:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008fca:	2e 16       	jz.t %d15,1,80008fd6 <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008fcc:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008fd0:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008fd4:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008fd6:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008fda:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008fde:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008fe0:	4c f0       	ld.w %d15,[%a15]0
80008fe2:	6f 0f ff 7f 	jz.t %d15,0,80008fe0 <osEE_tc_core0_start+0xba>
80008fe6:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008fea:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008fee:	91 30 00 ff 	movh.a %a15,61443
80008ff2:	53 cf 20 f0 	mul %d15,%d15,12
80008ff6:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008ffa:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008ffc:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008ffe:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80009000:	d9 2f 00 46 	lea %a15,[%a2]24832
80009004:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80009008:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000900c:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000900e:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009012:	2e 16       	jz.t %d15,1,8000901e <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009014:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009018:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000901c:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000901e:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80009022:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009026:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80009028:	4c f0       	ld.w %d15,[%a15]0
8000902a:	6f 0f ff ff 	jnz.t %d15,0,80009028 <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
8000902e:	82 0f       	mov %d15,0
80009030:	cd 0f 04 09 	mtcr $dcon0,%d15
80009034:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009038:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000903a:	2e 16       	jz.t %d15,1,80009046 <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000903c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009040:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009044:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80009046:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
8000904a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000904e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80009050:	4c f0       	ld.w %d15,[%a15]0
80009052:	6f 0f ff 7f 	jz.t %d15,0,80009050 <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009056:	91 30 00 ff 	movh.a %a15,61443
8000905a:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000905e:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009060:	2e 16       	jz.t %d15,1,8000906c <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009062:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009066:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000906a:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000906c:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80009070:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009074:	91 30 00 ff 	movh.a %a15,61443
80009078:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000907c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000907e:	4c f0       	ld.w %d15,[%a15]0
80009080:	91 30 00 2f 	movh.a %a2,61443
80009084:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009088:	6f 0f fb ff 	jnz.t %d15,0,8000907e <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
8000908c:	7b 00 00 f8 	movh %d15,32768
80009090:	1b 0f 20 f1 	addi %d15,%d15,4608
80009094:	cd 4f e2 0f 	mtcr $btv,%d15
80009098:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
8000909c:	7b 00 00 f8 	movh %d15,32768
800090a0:	1b 0f 00 f2 	addi %d15,%d15,8192
800090a4:	cd 0f e2 0f 	mtcr $biv,%d15
800090a8:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
800090ac:	7b 20 00 f7 	movh %d15,28674
800090b0:	1b 0f b0 f9 	addi %d15,%d15,-25856
800090b4:	cd 8f e2 0f 	mtcr $isp,%d15
800090b8:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800090bc:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800090be:	2e 16       	jz.t %d15,1,800090ca <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800090c0:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800090c4:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800090c8:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800090ca:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800090ce:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800090d2:	91 30 00 ff 	movh.a %a15,61443
800090d6:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800090da:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800090dc:	4c f0       	ld.w %d15,[%a15]0
800090de:	6f 0f ff 7f 	jz.t %d15,0,800090dc <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
800090e2:	91 10 00 f7 	movh.a %a15,28673
800090e6:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
800090ea:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
800090ec:	91 10 00 f8 	movh.a %a15,32769
800090f0:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800090f4:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
800090f6:	91 10 00 f8 	movh.a %a15,32769
800090fa:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800090fe:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
80009100:	91 10 00 fb 	movh.a %a15,45057
80009104:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
80009108:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
8000910a:	7b 20 00 f7 	movh %d15,28674
8000910e:	7b 20 00 47 	movh %d4,28674
80009112:	1b 0f c0 69 	addi %d6,%d15,-25600
80009116:	1b 04 c0 4b 	addi %d4,%d4,-17408
8000911a:	a2 64       	sub %d4,%d6
8000911c:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
8000911e:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80009120:	df 04 16 00 	jeq %d4,0,8000914c <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
80009124:	9a f4       	add %d15,%d4,-1
80009126:	06 6f       	sh %d15,6
80009128:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000912a:	60 3f       	mov.a %a15,%d3
8000912c:	82 00       	mov %d0,0
8000912e:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009130:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80009132:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009136:	37 03 70 73 	extr.u %d7,%d3,6,16
8000913a:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000913e:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009140:	37 27 10 28 	insert %d2,%d7,%d2,16,16
80009144:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009146:	82 53       	mov %d3,5
80009148:	fd f0 11 01 	loop %a15,8000936a <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
8000914c:	cd 82 e3 0f 	mtcr $fcx,%d2
80009150:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009154:	91 30 00 ff 	movh.a %a15,61443
80009158:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000915c:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000915e:	2e 16       	jz.t %d15,1,8000916a <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009160:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80009164:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80009168:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
8000916a:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000916e:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80009172:	91 30 00 ff 	movh.a %a15,61443
80009176:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
8000917a:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
8000917c:	40 f2       	mov.aa %a2,%a15
8000917e:	4c 20       	ld.w %d15,[%a2]0
80009180:	91 30 00 ff 	movh.a %a15,61443
80009184:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80009188:	6f 0f fb ff 	jnz.t %d15,0,8000917e <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
8000918c:	4c f1       	ld.w %d15,[%a15]4
8000918e:	96 08       	or %d15,8
80009190:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80009192:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80009194:	2e 16       	jz.t %d15,1,800091a0 <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80009196:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000919a:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000919e:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800091a0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800091a4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800091a8:	91 30 00 ff 	movh.a %a15,61443
800091ac:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800091b0:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800091b2:	4c f0       	ld.w %d15,[%a15]0
800091b4:	6f 0f ff 7f 	jz.t %d15,0,800091b2 <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800091b8:	91 30 00 ff 	movh.a %a15,61443
800091bc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091c0:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800091c2:	2e 16       	jz.t %d15,1,800091ce <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800091c4:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800091c8:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800091cc:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800091ce:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800091d2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800091d6:	91 30 00 ff 	movh.a %a15,61443
800091da:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091de:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800091e0:	40 f2       	mov.aa %a2,%a15
800091e2:	4c 20       	ld.w %d15,[%a2]0
800091e4:	91 30 00 ff 	movh.a %a15,61443
800091e8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800091ec:	6f 0f fb ff 	jnz.t %d15,0,800091e2 <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
800091f0:	4c f1       	ld.w %d15,[%a15]4
800091f2:	96 08       	or %d15,8
800091f4:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800091f6:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800091f8:	2e 16       	jz.t %d15,1,80009204 <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800091fa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800091fe:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80009202:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80009204:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80009208:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
8000920c:	91 30 00 ff 	movh.a %a15,61443
80009210:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009214:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80009216:	4c f0       	ld.w %d15,[%a15]0
80009218:	6f 0f ff 7f 	jz.t %d15,0,80009216 <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
8000921c:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
80009220:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80009222:	d9 44 3c 21 	lea %a4,[%a4]4284 <800010bc <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
80009226:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
80009228:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
8000922a:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
8000922c:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
8000922e:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80009230:	9e f6       	jeq %d15,-1,8000925c <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009232:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009236:	76 49       	jz %d4,80009248 <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
80009238:	60 4f       	mov.a %a15,%d4
8000923a:	40 32       	mov.aa %a2,%a3
8000923c:	b0 ff       	add.a %a15,-1
8000923e:	89 22 48 01 	st.d [%a2+]8,%e2
80009242:	fc fe       	loop %a15,8000923e <osEE_tc_core0_start+0x318>
80009244:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80009248:	2e 22       	jz.t %d15,2,8000924c <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
8000924a:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
8000924c:	2e 12       	jz.t %d15,1,80009250 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
8000924e:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80009250:	2e 02       	jz.t %d15,0,80009254 <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80009252:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80009254:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
80009258:	bd 04 ea ff 	jnz.a %a4,8000922c <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
8000925c:	91 00 00 68 	movh.a %a6,32768
80009260:	d9 66 24 41 	lea %a6,[%a6]4388 <80001124 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80009264:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
80009266:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80009268:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
8000926c:	df ff 21 00 	jeq %d15,-1,800092ae <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80009270:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80009274:	76 4f       	jz %d4,80009292 <osEE_tc_core0_start+0x36c>
80009276:	60 4f       	mov.a %a15,%d4
80009278:	40 43       	mov.aa %a3,%a4
8000927a:	40 52       	mov.aa %a2,%a5
8000927c:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
8000927e:	09 22 48 01 	ld.d %e2,[%a2+]8
80009282:	89 32 48 01 	st.d [%a3+]8,%e2
80009286:	fc fc       	loop %a15,8000927e <osEE_tc_core0_start+0x358>
80009288:	06 34       	sh %d4,3
8000928a:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
8000928e:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80009292:	2e 23       	jz.t %d15,2,80009298 <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80009294:	44 52       	ld.w %d2,[%a5+]
80009296:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80009298:	2e 14       	jz.t %d15,1,800092a0 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
8000929a:	09 52 c2 00 	ld.hu %d2,[%a5+]2
8000929e:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
800092a0:	2e 03       	jz.t %d15,0,800092a6 <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
800092a2:	0c 50       	ld.bu %d15,[%a5]0
800092a4:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
800092a6:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
800092aa:	bd 06 dd ff 	jnz.a %a6,80009264 <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800092ae:	91 30 00 ff 	movh.a %a15,61443
800092b2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092b6:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800092b8:	2e 16       	jz.t %d15,1,800092c4 <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800092ba:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800092be:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800092c2:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800092c4:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800092c8:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800092cc:	91 30 00 ff 	movh.a %a15,61443
800092d0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800092d4:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800092d6:	4c f0       	ld.w %d15,[%a15]0
800092d8:	6f 0f ff ff 	jnz.t %d15,0,800092d6 <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
800092dc:	7b 20 22 f1 	movh %d15,4642
800092e0:	91 30 00 ff 	movh.a %a15,61443
800092e4:	1b 1f 10 f0 	addi %d15,%d15,257
800092e8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800092ec:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
800092ee:	7b 00 00 f5 	movh %d15,20480
800092f2:	91 30 00 ff 	movh.a %a15,61443
800092f6:	1b 0f 10 f1 	addi %d15,%d15,4352
800092fa:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800092fe:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
80009300:	7b 70 00 f0 	movh %d15,7
80009304:	91 30 00 ff 	movh.a %a15,61443
80009308:	1b cf 01 f0 	addi %d15,%d15,28
8000930c:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009310:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
80009312:	4c f0       	ld.w %d15,[%a15]0
80009314:	6f 1f ff 7f 	jz.t %d15,1,80009312 <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
80009318:	91 30 00 ff 	movh.a %a15,61443
8000931c:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80009320:	4c f0       	ld.w %d15,[%a15]0
80009322:	6f 8f ff 7f 	jz.t %d15,8,80009320 <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80009326:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
8000932a:	91 30 00 ff 	movh.a %a15,61443
8000932e:	1b 04 20 4c 	addi %d4,%d4,-15872
80009332:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009336:	6d 00 58 00 	call 800093e6 <osEE_tc_set_pll_fsource>
8000933a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
8000933c:	2e 16       	jz.t %d15,1,80009348 <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
8000933e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80009342:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80009346:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80009348:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
8000934c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80009350:	91 30 00 ff 	movh.a %a15,61443
80009354:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80009358:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
8000935a:	4c f0       	ld.w %d15,[%a15]0
8000935c:	6f 0f ff 7f 	jz.t %d15,0,8000935a <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80009360:	6d ff 93 d9 	call 80004686 <main>
80009364:	02 24       	mov %d4,%d2
80009366:	6d 00 ff 27 	call 8000e364 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
8000936a:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
8000936c:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80009370:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80009372:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80009374:	37 0f 70 23 	extr.u %d2,%d15,6,16
80009378:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
8000937c:	76 36       	jz %d3,80009388 <osEE_tc_core0_start+0x462>
8000937e:	1b 0f fc ff 	addi %d15,%d15,-64
80009382:	fc f4       	loop %a15,8000936a <osEE_tc_core0_start+0x444>
80009384:	1d ff e4 fe 	j 8000914c <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80009388:	cd c2 e3 0f 	mtcr $lcx,%d2
8000938c:	0d 00 c0 04 	isync 
80009390:	3c f7       	j 8000937e <osEE_tc_core0_start+0x458>

80009392 <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
80009392:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80009394:	91 00 00 f7 	movh.a %a15,28672
80009398:	19 ff c8 b0 	ld.w %d15,[%a15]3784 <70000ec8 <osEE_tc_stm_freq_khz>>
8000939c:	3b 80 3e 20 	mov %d2,1000
800093a0:	3f 2f 0c 80 	jlt.u %d15,%d2,800093b8 <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
800093a4:	7b 20 06 21 	movh %d2,4194
800093a8:	1b 32 dd 24 	addi %d2,%d2,19923
800093ac:	73 2f 68 20 	mul.u %e2,%d15,%d2
800093b0:	8f a3 1f 20 	sh %d2,%d3,-6
800093b4:	e2 42       	mul %d2,%d4
800093b6:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
800093b8:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
800093ba:	73 f4 0a 20 	mul %d2,%d4,%d15
800093be:	7b 20 06 31 	movh %d3,4194
800093c2:	1b 33 dd 34 	addi %d3,%d3,19923
800093c6:	73 32 68 20 	mul.u %e2,%d2,%d3
800093ca:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
800093ce:	3f 54 0b 80 	jlt.u %d4,%d5,800093e4 <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
800093d2:	7b 20 06 21 	movh %d2,4194
800093d6:	1b 32 dd 24 	addi %d2,%d2,19923
800093da:	73 24 68 40 	mul.u %e4,%d4,%d2
800093de:	8f a5 1f 20 	sh %d2,%d5,-6
800093e2:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
800093e4:	00 90       	ret 

800093e6 <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
800093e6:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
800093e8:	7b e0 e4 20 	movh %d2,3662
800093ec:	1b 12 c0 21 	addi %d2,%d2,7169
800093f0:	0b 24 30 f1 	lt.u %d15,%d4,%d2
800093f4:	82 22       	mov %d2,2
800093f6:	ab 12 80 ff 	sel %d15,%d15,%d2,1
800093fa:	60 f4       	mov.a %a4,%d15
800093fc:	53 ff 20 f0 	mul %d15,%d15,15
80009400:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80009402:	3b 00 01 e0 	mov %d14,16
80009406:	82 03       	mov %d3,0
80009408:	7b c0 be 20 	movh %d2,3052
8000940c:	1b 02 20 2c 	addi %d2,%d2,-15872
80009410:	02 28       	mov %d8,%d2
80009412:	82 01       	mov %d1,0
80009414:	82 0b       	mov %d11,0
80009416:	82 0d       	mov %d13,0
80009418:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
8000941a:	7b 10 13 a0 	movh %d10,305
8000941e:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009422:	91 40 0f 60 	movh.a %a6,244
80009426:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
8000942a:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
8000942c:	53 14 40 60 	mul.u %e6,%d4,1
80009430:	60 62       	mov.a %a2,%d6
80009432:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80009434:	91 80 7d f1 	movh.a %a15,6104
80009438:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
8000943c:	a0 1c       	mov.a %a12,1
8000943e:	3c 5e       	j 800094fa <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80009440:	4b ea 11 62 	div.u %e6,%d10,%d14
80009444:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80009446:	7b 60 f8 ff 	movh %d15,65414
8000944a:	1b 0f e0 fe 	addi %d15,%d15,-4608
8000944e:	0b f6 40 60 	addx %d6,%d6,%d15
80009452:	8b f7 bf 50 	addc %d5,%d7,-1
80009456:	ba 05       	eq %d15,%d5,0
80009458:	80 67       	mov.d %d7,%a6
8000945a:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
8000945e:	8b 05 00 f5 	or.ne %d15,%d5,0
80009462:	ee 4a       	jnz %d15,800094f6 <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80009464:	df 00 56 00 	jeq %d0,0,80009510 <osEE_tc_set_pll_fsource+0x12a>
80009468:	02 e9       	mov %d9,%d14
8000946a:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
8000946c:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
8000946e:	80 2f       	mov.d %d15,%a2
80009470:	73 f0 68 60 	mul.u %e6,%d0,%d15
80009474:	80 3f       	mov.d %d15,%a3
80009476:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
8000947a:	7b 80 82 fe 	movh %d15,59432
8000947e:	1b 0f c0 f7 	addi %d15,%d15,31744
80009482:	0b f6 40 60 	addx %d6,%d6,%d15
80009486:	8b f7 bf 50 	addc %d5,%d7,-1
8000948a:	ba 05       	eq %d15,%d5,0
8000948c:	80 f7       	mov.d %d7,%a15
8000948e:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80009492:	8b 05 00 f5 	or.ne %d15,%d5,0
80009496:	ee 25       	jnz %d15,800094e0 <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
80009498:	0f 23 a0 f0 	or %d15,%d3,%d2
8000949c:	6e 2d       	jz %d15,800094f6 <osEE_tc_set_pll_fsource+0x110>
8000949e:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
800094a0:	4b 96 11 22 	div.u %e2,%d6,%d9
800094a4:	02 2f       	mov %d15,%d2
800094a6:	e2 af       	mul %d15,%d10
800094a8:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
800094aa:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800094ae:	df 0f ac 00 	jeq %d15,0,80009606 <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
800094b2:	0b 13 00 51 	eq %d5,%d3,%d1
800094b6:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
800094ba:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
800094be:	ab 01 80 15 	sel %d1,%d5,%d1,0
800094c2:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
800094c6:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
800094ca:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
800094ce:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
800094d0:	8b 16 68 52 	lt.u %d5,%d6,129
800094d4:	8b 0f 20 54 	and.ne %d5,%d15,0
800094d8:	df 05 e4 ff 	jne %d5,0,800094a0 <osEE_tc_set_pll_fsource+0xba>
800094dc:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
800094de:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
800094e0:	80 4f       	mov.d %d15,%a4
800094e2:	42 f0       	add %d0,%d15
800094e4:	80 56       	mov.d %d6,%a5
800094e6:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
800094e8:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
800094ec:	8b d0 61 f2 	lt.u %d15,%d0,29
800094f0:	8b 05 20 f4 	and.ne %d15,%d5,0
800094f4:	ee bd       	jnz %d15,8000946e <osEE_tc_set_pll_fsource+0x88>
800094f6:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
800094fa:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
800094fc:	0f 32 a0 f0 	or %d15,%d2,%d3
80009500:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
80009504:	8b 0e 20 52 	ne %d5,%d14,0
80009508:	8b 0f 20 54 	and.ne %d5,%d15,0
8000950c:	df 05 9a ff 	jne %d5,0,80009440 <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
80009510:	06 14       	sh %d4,1
80009512:	7b c0 1e f5 	movh %d15,20972
80009516:	1b ff 51 f8 	addi %d15,%d15,-31457
8000951a:	73 f4 68 40 	mul.u %e4,%d4,%d15
8000951e:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
80009522:	ba 01       	eq %d15,%d1,0
80009524:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
80009528:	8b 01 00 f5 	or.ne %d15,%d1,0
8000952c:	ee 73       	jnz %d15,80009612 <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
8000952e:	c2 fc       	add %d12,-1
80009530:	91 30 00 ff 	movh.a %a15,61443
80009534:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009538:	4c f0       	ld.w %d15,[%a15]0
8000953a:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
8000953e:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
80009540:	91 30 00 ff 	movh.a %a15,61443
80009544:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009548:	4c f0       	ld.w %d15,[%a15]0
8000954a:	6f 5f ff 7f 	jz.t %d15,5,80009548 <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
8000954e:	91 30 00 ff 	movh.a %a15,61443
80009552:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009556:	4c f0       	ld.w %d15,[%a15]0
80009558:	96 01       	or %d15,1
8000955a:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
8000955c:	91 30 00 ff 	movh.a %a15,61443
80009560:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009564:	4c f0       	ld.w %d15,[%a15]0
80009566:	6f 0f ff 7f 	jz.t %d15,0,80009564 <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
8000956a:	9a fb       	add %d15,%d11,-1
8000956c:	91 30 00 ff 	movh.a %a15,61443
80009570:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009574:	16 0f       	and %d15,15
80009576:	8f 8f 01 f0 	sh %d15,%d15,24
8000957a:	48 02       	ld.w %d2,[%a15]0
8000957c:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80009580:	a6 2f       	or %d15,%d2
80009582:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80009584:	9a fd       	add %d15,%d13,-1
80009586:	16 7f       	and %d15,127
80009588:	8f 9f 00 f0 	sh %d15,%d15,9
8000958c:	48 02       	ld.w %d2,[%a15]0
8000958e:	b7 02 87 24 	insert %d2,%d2,0,9,7
80009592:	a6 2f       	or %d15,%d2
80009594:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80009596:	4c f0       	ld.w %d15,[%a15]0
80009598:	8f 2f c0 f1 	andn %d15,%d15,2
8000959c:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
8000959e:	4c f0       	ld.w %d15,[%a15]0
800095a0:	96 40       	or %d15,64
800095a2:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
800095a4:	4c f0       	ld.w %d15,[%a15]0
800095a6:	96 20       	or %d15,32
800095a8:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
800095aa:	91 30 00 ff 	movh.a %a15,61443
800095ae:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095b2:	4c f0       	ld.w %d15,[%a15]0
800095b4:	6f 3f ff ff 	jnz.t %d15,3,800095b2 <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
800095b8:	91 30 00 ff 	movh.a %a15,61443
800095bc:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095c0:	4c f0       	ld.w %d15,[%a15]0
800095c2:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800095c6:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
800095c8:	91 30 00 ff 	movh.a %a15,61443
800095cc:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095d0:	4c f0       	ld.w %d15,[%a15]0
800095d2:	6f 2f ff 7f 	jz.t %d15,2,800095d0 <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
800095d6:	91 30 00 ff 	movh.a %a15,61443
800095da:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095de:	4c f0       	ld.w %d15,[%a15]0
800095e0:	8f 1f c0 f1 	andn %d15,%d15,1
800095e4:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
800095e6:	91 30 00 ff 	movh.a %a15,61443
800095ea:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800095ee:	4c f0       	ld.w %d15,[%a15]0
800095f0:	6f 0f ff ff 	jnz.t %d15,0,800095ee <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
800095f4:	91 30 00 ff 	movh.a %a15,61443
800095f8:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800095fc:	4c f0       	ld.w %d15,[%a15]0
800095fe:	8f 0f c4 f1 	andn %d15,%d15,64
80009602:	68 0f       	st.w [%a15]0,%d15
80009604:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
80009606:	02 28       	mov %d8,%d2
80009608:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
8000960a:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
8000960c:	02 0c       	mov %d12,%d0
8000960e:	1d ff 68 ff 	j 800094de <osEE_tc_set_pll_fsource+0xf8>
80009612:	00 90       	ret 

80009614 <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
80009614:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80009616:	91 30 00 ff 	movh.a %a15,61443
8000961a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000961e:	4c f0       	ld.w %d15,[%a15]0
80009620:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
80009624:	7b 60 5f 20 	movh %d2,1526
80009628:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
8000962c:	6e 45       	jz %d15,800096b6 <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
8000962e:	91 30 00 ff 	movh.a %a15,61443
80009632:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80009636:	4c f0       	ld.w %d15,[%a15]0
80009638:	6f 0f 11 00 	jz.t %d15,0,8000965a <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
8000963c:	91 30 00 ff 	movh.a %a15,61443
80009640:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009644:	48 02       	ld.w %d2,[%a15]0
80009646:	37 02 67 28 	extr.u %d2,%d2,16,7
8000964a:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
8000964c:	7b 10 13 f0 	movh %d15,305
80009650:	1b 0f d0 f2 	addi %d15,%d15,11520
80009654:	4b 2f 11 22 	div.u %e2,%d15,%d2
80009658:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
8000965a:	4c f0       	ld.w %d15,[%a15]0
8000965c:	6f 3f 11 00 	jz.t %d15,3,8000967e <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80009660:	91 30 00 ff 	movh.a %a15,61443
80009664:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009668:	48 02       	ld.w %d2,[%a15]0
8000966a:	8f f2 07 21 	and %d2,%d2,127
8000966e:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80009670:	7b 10 13 20 	movh %d2,305
80009674:	1b 02 d0 22 	addi %d2,%d2,11520
80009678:	4b f2 11 22 	div.u %e2,%d2,%d15
8000967c:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
8000967e:	91 30 00 ff 	movh.a %a15,61443
80009682:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80009686:	4c f0       	ld.w %d15,[%a15]0
80009688:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
8000968c:	91 30 00 ff 	movh.a %a15,61443
80009690:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80009694:	4c f0       	ld.w %d15,[%a15]0
80009696:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
8000969a:	48 02       	ld.w %d2,[%a15]0
8000969c:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
800096a0:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
800096a2:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
800096a6:	7b 10 13 20 	movh %d2,305
800096aa:	1b 02 d0 22 	addi %d2,%d2,11520
800096ae:	4b f2 11 22 	div.u %e2,%d2,%d15
800096b2:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
800096b6:	00 90       	ret 

800096b8 <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
800096b8:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
800096ba:	6d ff ad ff 	call 80009614 <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
800096be:	91 30 00 ff 	movh.a %a15,61443
800096c2:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800096c6:	4c f0       	ld.w %d15,[%a15]0
800096c8:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800096cc:	c2 12       	add %d2,1
800096ce:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
800096d2:	7b 20 06 f1 	movh %d15,4194
800096d6:	1b 3f dd f4 	addi %d15,%d15,19923
800096da:	73 f2 68 20 	mul.u %e2,%d2,%d15
800096de:	8f a3 1f f0 	sh %d15,%d3,-6
800096e2:	91 00 00 f7 	movh.a %a15,28672
800096e6:	59 ff c8 b0 	st.w [%a15]3784 <70000ec8 <osEE_tc_stm_freq_khz>>,%d15
800096ea:	00 90       	ret 

800096ec <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
800096ec:	40 ae       	mov.aa %a14,%sp
800096ee:	02 59       	mov %d9,%d5
800096f0:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
800096f4:	6d ff 4f fe 	call 80009392 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
800096f8:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
800096fc:	8f 38 00 f1 	and %d15,%d8,3
80009700:	9b 0f 0f 40 	addih %d4,%d15,240
80009704:	8f 84 00 40 	sh %d4,%d4,8
80009708:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
8000970a:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
8000970c:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
8000970e:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80009710:	df 09 23 00 	jeq %d9,0,80009756 <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
80009714:	48 e2       	ld.w %d2,[%a15]56
80009716:	b7 02 05 24 	insert %d2,%d2,0,8,5
8000971a:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
8000971c:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
80009720:	48 e2       	ld.w %d2,[%a15]56
80009722:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80009726:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
80009728:	48 f2       	ld.w %d2,[%a15]60
8000972a:	8f 42 c0 21 	andn %d2,%d2,4
8000972e:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
80009730:	48 f2       	ld.w %d2,[%a15]60
80009732:	8f 12 40 21 	or %d2,%d2,1
80009736:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
80009738:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000973a:	60 f2       	mov.a %a2,%d15
8000973c:	d9 2f 50 28 	lea %a15,[%a2]-31600
80009740:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009744:	b7 89 99 93 	insert %d9,%d9,8,7,25
80009748:	8f 38 00 81 	and %d8,%d8,3
8000974c:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009750:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009752:	68 09       	st.w [%a15]0,%d9
80009754:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
80009756:	48 f2       	ld.w %d2,[%a15]60
80009758:	8f 12 c0 21 	andn %d2,%d2,1
8000975c:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
8000975e:	1b 2f 09 f7 	addi %d15,%d15,28818
80009762:	9b 0f e0 f1 	addih %d15,%d15,7680
80009766:	06 3f       	sh %d15,3
80009768:	82 02       	mov %d2,0
8000976a:	60 ff       	mov.a %a15,%d15
8000976c:	68 02       	st.w [%a15]0,%d2
8000976e:	00 90       	ret 

80009770 <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
80009770:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009772:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
80009776:	6d ff 0e fe 	call 80009392 <osEE_tc_stm_us_ticks>
8000977a:	16 03       	and %d15,3
8000977c:	9b 0f 0f f0 	addih %d15,%d15,240
80009780:	8f 8f 00 f0 	sh %d15,%d15,8
80009784:	60 ff       	mov.a %a15,%d15
80009786:	4c fc       	ld.w %d15,[%a15]48
80009788:	42 f2       	add %d2,%d15
8000978a:	68 c2       	st.w [%a15]48,%d2
8000978c:	00 90       	ret 

8000978e <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
8000978e:	40 ae       	mov.aa %a14,%sp
80009790:	02 59       	mov %d9,%d5
80009792:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80009796:	6d ff fe fd 	call 80009392 <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
8000979a:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
8000979e:	8f 38 00 f1 	and %d15,%d8,3
800097a2:	9b 0f 0f 40 	addih %d4,%d15,240
800097a6:	8f 84 00 40 	sh %d4,%d4,8
800097aa:	60 4f       	mov.a %a15,%d4
800097ac:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
800097ae:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
800097b0:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
800097b2:	df 09 28 00 	jeq %d9,0,80009802 <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
800097b6:	48 e2       	ld.w %d2,[%a15]56
800097b8:	b7 02 05 2c 	insert %d2,%d2,0,24,5
800097bc:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
800097be:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
800097c2:	8f f3 01 31 	and %d3,%d3,31
800097c6:	8f 03 01 30 	sh %d3,%d3,16
800097ca:	48 e2       	ld.w %d2,[%a15]56
800097cc:	b7 02 05 28 	insert %d2,%d2,0,16,5
800097d0:	a6 23       	or %d3,%d2
800097d2:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
800097d4:	48 f2       	ld.w %d2,[%a15]60
800097d6:	8f 02 44 21 	or %d2,%d2,64
800097da:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
800097dc:	48 f2       	ld.w %d2,[%a15]60
800097de:	8f 02 41 21 	or %d2,%d2,16
800097e2:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
800097e4:	06 3f       	sh %d15,3
800097e6:	60 f2       	mov.a %a2,%d15
800097e8:	d9 2f 54 28 	lea %a15,[%a2]-31596
800097ec:	11 4f 00 ff 	addih.a %a15,%a15,61444
800097f0:	b7 89 99 93 	insert %d9,%d9,8,7,25
800097f4:	8f 38 00 81 	and %d8,%d8,3
800097f8:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
800097fc:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
800097fe:	68 09       	st.w [%a15]0,%d9
80009800:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
80009802:	48 f2       	ld.w %d2,[%a15]60
80009804:	8f 02 c1 21 	andn %d2,%d2,16
80009808:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
8000980a:	06 3f       	sh %d15,3
8000980c:	60 f2       	mov.a %a2,%d15
8000980e:	d9 2f 54 28 	lea %a15,[%a2]-31596
80009812:	11 4f 00 ff 	addih.a %a15,%a15,61444
80009816:	82 0f       	mov %d15,0
80009818:	68 0f       	st.w [%a15]0,%d15
8000981a:	00 90       	ret 

8000981c <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
8000981c:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000981e:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
80009822:	6d ff b8 fd 	call 80009392 <osEE_tc_stm_us_ticks>
80009826:	16 03       	and %d15,3
80009828:	9b 0f 0f f0 	addih %d15,%d15,240
8000982c:	8f 8f 00 f0 	sh %d15,%d15,8
80009830:	60 ff       	mov.a %a15,%d15
80009832:	4c fd       	ld.w %d15,[%a15]52
80009834:	42 f2       	add %d2,%d15
80009836:	68 d2       	st.w [%a15]52,%d2
80009838:	00 90       	ret 

8000983a <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
8000983a:	40 ae       	mov.aa %a14,%sp
8000983c:	4d c0 e1 ff 	mfcr %d15,$core_id
80009840:	16 03       	and %d15,3
80009842:	9b 0f 0f f0 	addih %d15,%d15,240
80009846:	8f 8f 00 f0 	sh %d15,%d15,8
8000984a:	60 f2       	mov.a %a2,%d15
8000984c:	d9 2f 10 00 	lea %a15,[%a2]16
80009850:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
80009854:	6d ff 9f fd 	call 80009392 <osEE_tc_stm_us_ticks>
80009858:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
8000985a:	a2 8f       	sub %d15,%d8
8000985c:	3f 2f fe ff 	jlt.u %d15,%d2,80009858 <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
80009860:	00 90       	ret 

80009862 <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
80009862:	40 ae       	mov.aa %a14,%sp
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
80009864:	6d 00 86 05 	call 8000a370 <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
80009868:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000986c:	00 80       	rfe 
8000986e:	00 90       	ret 

80009870 <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
80009870:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009872:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009874:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
80009878:	82 32       	mov %d2,3
8000987a:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
8000987e:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
80009882:	5e 25       	jne %d15,2,8000988c <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
80009884:	99 44 04 00 	ld.a %a4,[%a4]4
80009888:	6d 00 89 06 	call 8000a59a <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
8000988c:	3c 00       	j 8000988c <osEE_shutdown_os+0x1c>

8000988e <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
8000988e:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009890:	91 00 00 f8 	movh.a %a15,32768
80009894:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009898:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
8000989c:	82 1f       	mov %d15,1
8000989e:	e9 ff 1e 00 	st.b [%a15]30,%d15
800098a2:	00 90       	ret 

800098a4 <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
800098a4:	40 ae       	mov.aa %a14,%sp
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800098a6:	91 00 00 f8 	movh.a %a15,32768
800098aa:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
800098ae:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <80000130 <osEE_cdb_var>>
800098b2:	6e 06       	jz %d15,800098be <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
800098b4:	82 0f       	mov %d15,0
800098b6:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800098ba:	0d 00 00 03 	enable 
800098be:	00 90       	ret 

800098c0 <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
800098c0:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800098c2:	91 00 00 f8 	movh.a %a15,32768
800098c6:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
800098ca:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000130 <osEE_cdb_var>>
800098ce:	ee 0c       	jnz %d15,800098e6 <SuspendAllInterrupts+0x26>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098d0:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800098d4:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800098d8:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800098da:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800098de:	c2 1f       	add %d15,1
800098e0:	e9 ff 1c 00 	st.b [%a15]28,%d15
800098e4:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800098e6:	8b ff 0f 22 	eq %d2,%d15,255
800098ea:	f6 25       	jnz %d2,800098f4 <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
800098ec:	c2 1f       	add %d15,1
800098ee:	e9 ff 1c 00 	st.b [%a15]28,%d15
800098f2:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
800098f4:	91 00 00 48 	movh.a %a4,32768
800098f8:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
800098fc:	3b 90 01 40 	mov %d4,25
80009900:	3c b8       	j 80009870 <osEE_shutdown_os>

80009902 <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
80009902:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009904:	91 00 00 f8 	movh.a %a15,32768
80009908:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
8000990c:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000130 <osEE_cdb_var>>
80009910:	6e 0b       	jz %d15,80009926 <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
80009912:	c2 ff       	add %d15,-1
80009914:	16 ff       	and %d15,255
80009916:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
8000991a:	ee 06       	jnz %d15,80009926 <ResumeAllInterrupts+0x24>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000991c:	4c f5       	ld.w %d15,[%a15]20
8000991e:	cd cf e2 0f 	mtcr $icr,%d15
80009922:	0d 00 c0 04 	isync 
80009926:	00 90       	ret 

80009928 <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
80009928:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000992a:	91 00 00 f8 	movh.a %a15,32768
8000992e:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
80009932:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000130 <osEE_cdb_var>>
80009936:	ee 18       	jnz %d15,80009966 <SuspendOSInterrupts+0x3e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009938:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000993c:	8f f2 0f f1 	and %d15,%d2,255
80009940:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009944:	ee 0a       	jnz %d15,80009958 <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
80009946:	02 2f       	mov %d15,%d2
80009948:	3b 30 01 30 	mov %d3,19
8000994c:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009950:	cd cf e2 0f 	mtcr $icr,%d15
80009954:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
80009958:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
8000995a:	39 ff 1d 00 	ld.bu %d15,[%a15]29
8000995e:	c2 1f       	add %d15,1
80009960:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009964:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
80009966:	8b ff 0f 22 	eq %d2,%d15,255
8000996a:	f6 25       	jnz %d2,80009974 <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
8000996c:	c2 1f       	add %d15,1
8000996e:	e9 ff 1d 00 	st.b [%a15]29,%d15
80009972:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
80009974:	91 00 00 48 	movh.a %a4,32768
80009978:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
8000997c:	3b 90 01 40 	mov %d4,25
80009980:	1d ff 78 ff 	j 80009870 <osEE_shutdown_os>

80009984 <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
80009984:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009986:	91 00 00 f8 	movh.a %a15,32768
8000998a:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
8000998e:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000130 <osEE_cdb_var>>
80009992:	6e 16       	jz %d15,800099be <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
80009994:	c2 ff       	add %d15,-1
80009996:	16 ff       	and %d15,255
80009998:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
8000999c:	ee 11       	jnz %d15,800099be <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
8000999e:	48 62       	ld.w %d2,[%a15]24
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099a0:	4d c0 e2 3f 	mfcr %d3,$icr
800099a4:	02 3f       	mov %d15,%d3
800099a6:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800099aa:	8f f2 0f 21 	and %d2,%d2,255
800099ae:	5f 23 08 00 	jeq %d3,%d2,800099be <ResumeOSInterrupts+0x3a>
800099b2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099b6:	cd cf e2 0f 	mtcr $icr,%d15
800099ba:	0d 00 c0 04 	isync 
800099be:	00 90       	ret 

800099c0 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
800099c0:	40 ae       	mov.aa %a14,%sp
800099c2:	02 49       	mov %d9,%d4
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800099c4:	91 00 00 f8 	movh.a %a15,32768
800099c8:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099cc:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800099d0:	8f f8 0f f1 	and %d15,%d8,255
800099d4:	8b 3f a1 f2 	ge.u %d15,%d15,19
800099d8:	ee 0a       	jnz %d15,800099ec <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
800099da:	02 8f       	mov %d15,%d8
800099dc:	3b 30 01 20 	mov %d2,19
800099e0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099e4:	cd cf e2 0f 	mtcr $icr,%d15
800099e8:	0d 00 c0 04 	isync 
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800099ec:	39 ff 10 00 	ld.bu %d15,[%a15]16
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
800099f0:	82 15       	mov %d5,1
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800099f2:	ee 21       	jnz %d15,80009a34 <StartOS+0x74>
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800099f4:	6d 00 e6 05 	call 8000a5c0 <osEE_cpu_startos>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
800099f8:	3b 80 01 50 	mov %d5,24
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800099fc:	df 02 1c 00 	jeq %d2,0,80009a34 <StartOS+0x74>
80009a00:	3c 24       	j 80009a48 <StartOS+0x88>
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
80009a02:	82 2f       	mov %d15,2
80009a04:	e9 ff 10 00 	st.b [%a15]16,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009a08:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009a0c:	5e 2a       	jne %d15,2,80009a20 <StartOS+0x60>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
80009a0e:	40 c4       	mov.aa %a4,%a12
80009a10:	99 c5 04 00 	ld.a %a5,[%a12]4
80009a14:	40 56       	mov.aa %a6,%a5
80009a16:	6d 00 3a 06 	call 8000a68a <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009a1a:	40 c4       	mov.aa %a4,%a12
80009a1c:	6d 00 8a 04 	call 8000a330 <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009a20:	0d 00 40 03 	disable 
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
80009a24:	3c 00       	j 80009a24 <StartOS+0x64>
80009a26:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009a2a:	cd cf e2 0f 	mtcr $icr,%d15
80009a2e:	0d 00 c0 04 	isync 
80009a32:	3c 1b       	j 80009a68 <StartOS+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009a34:	4d c0 e2 4f 	mfcr %d4,$icr
80009a38:	02 4f       	mov %d15,%d4
80009a3a:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009a3e:	8f f8 0f 31 	and %d3,%d8,255
80009a42:	5f 34 f2 ff 	jne %d4,%d3,80009a26 <StartOS+0x66>
80009a46:	3c 11       	j 80009a68 <StartOS+0xa8>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009a48:	91 00 00 28 	movh.a %a2,32768
80009a4c:	d9 22 30 40 	lea %a2,[%a2]304 <80000130 <osEE_cdb_var>>
80009a50:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
80009a54:	82 1f       	mov %d15,1
80009a56:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009a5a:	e9 f9 11 00 	st.b [%a15]17,%d9
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
80009a5e:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009a62:	df 1f d3 ff 	jne %d15,1,80009a08 <StartOS+0x48>
80009a66:	3c ce       	j 80009a02 <StartOS+0x42>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
80009a68:	02 52       	mov %d2,%d5
80009a6a:	00 90       	ret 

80009a6c <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009a6c:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009a6e:	91 00 00 f8 	movh.a %a15,32768
80009a72:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009a76:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000130 <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009a7a:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009a7e:	6e 03       	jz %d15,80009a84 <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009a80:	39 f2 11 00 	ld.bu %d2,[%a15]17
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
80009a84:	00 90       	ret 

80009a86 <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009a86:	40 ae       	mov.aa %a14,%sp
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009a88:	91 00 00 f8 	movh.a %a15,32768
80009a8c:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009a90:	4c f2       	ld.w %d15,[%a15]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009a92:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009a94:	7f f4 39 80 	jge.u %d4,%d15,80009b06 <ActivateTask+0x80>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009a98:	91 00 00 f8 	movh.a %a15,32768
80009a9c:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009aa0:	c8 1f       	ld.a %a15,[%a15]4
80009aa2:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009aa6:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009aa8:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009aac:	ff 2f 2d 80 	jge.u %d15,2,80009b06 <ActivateTask+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ab0:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009ab4:	8f f9 0f f1 	and %d15,%d9,255
80009ab8:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009abc:	ee 0a       	jnz %d15,80009ad0 <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
80009abe:	02 9f       	mov %d15,%d9
80009ac0:	3b 30 01 20 	mov %d2,19
80009ac4:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ac8:	cd cf e2 0f 	mtcr $icr,%d15
80009acc:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
80009ad0:	40 f4       	mov.aa %a4,%a15
80009ad2:	6d 00 23 04 	call 8000a318 <osEE_task_activated>
80009ad6:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
80009ad8:	f6 28       	jnz %d2,80009ae8 <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
80009ada:	91 00 00 48 	movh.a %a4,32768
80009ade:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
80009ae2:	40 f5       	mov.aa %a5,%a15
80009ae4:	6d 00 57 04 	call 8000a392 <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ae8:	4d c0 e2 3f 	mfcr %d3,$icr
80009aec:	02 3f       	mov %d15,%d3
80009aee:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009af2:	8f f9 0f 21 	and %d2,%d9,255
80009af6:	5f 23 08 00 	jeq %d3,%d2,80009b06 <ActivateTask+0x80>
80009afa:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009afe:	cd cf e2 0f 	mtcr $icr,%d15
80009b02:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009b06:	02 82       	mov %d2,%d8
80009b08:	00 90       	ret 

80009b0a <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009b0a:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
80009b0c:	91 00 00 f8 	movh.a %a15,32768
80009b10:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009b14:	48 03       	ld.w %d3,[%a15]0
80009b16:	91 00 00 28 	movh.a %a2,32768
80009b1a:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
80009b1e:	4c 22       	ld.w %d15,[%a2]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009b20:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009b22:	7f f4 5e 80 	jge.u %d4,%d15,80009bde <ChainTask+0xd4>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009b26:	91 00 00 28 	movh.a %a2,32768
80009b2a:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
80009b2e:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
80009b32:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
80009b36:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009b38:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009b3c:	ff 2f 51 80 	jge.u %d15,2,80009bde <ChainTask+0xd4>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009b40:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009b44:	6e 09       	jz %d15,80009b56 <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
80009b46:	82 0f       	mov %d15,0
80009b48:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009b4c:	4c f5       	ld.w %d15,[%a15]20
80009b4e:	cd cf e2 0f 	mtcr $icr,%d15
80009b52:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009b56:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009b5a:	6e 06       	jz %d15,80009b66 <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009b5c:	82 0f       	mov %d15,0
80009b5e:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009b62:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009b66:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009b6a:	8f f8 0f f1 	and %d15,%d8,255
80009b6e:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009b72:	ee 0a       	jnz %d15,80009b86 <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
80009b74:	02 8f       	mov %d15,%d8
80009b76:	3b 30 01 20 	mov %d2,19
80009b7a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009b7e:	cd cf e2 0f 	mtcr $icr,%d15
80009b82:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
80009b86:	80 cf       	mov.d %d15,%a12
80009b88:	7e 35       	jne %d15,%d3,80009b92 <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009b8a:	cc c3       	ld.a %a15,[%a12]12
80009b8c:	82 5f       	mov %d15,5
80009b8e:	28 2f       	st.b [%a15]2,%d15
80009b90:	3c 15       	j 80009bba <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
80009b92:	40 c4       	mov.aa %a4,%a12
80009b94:	6d 00 c2 03 	call 8000a318 <osEE_task_activated>
        if (ev == E_OK) {
80009b98:	df 02 1a 80 	jne %d2,0,80009bcc <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009b9c:	91 00 00 48 	movh.a %a4,32768
80009ba0:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
80009ba4:	40 c5       	mov.aa %a5,%a12
80009ba6:	6d 00 2a 04 	call 8000a3fa <osEE_scheduler_task_insert>
80009baa:	3c 08       	j 80009bba <ChainTask+0xb0>
80009bac:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
80009bb0:	cd cf e2 0f 	mtcr $icr,%d15
80009bb4:	0d 00 c0 04 	isync 
80009bb8:	00 90       	ret 
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009bba:	91 00 00 f8 	movh.a %a15,32768
80009bbe:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
80009bc2:	c8 0f       	ld.a %a15,[%a15]0
80009bc4:	c8 14       	ld.a %a4,[%a15]4
80009bc6:	a0 05       	mov.a %a5,0
80009bc8:	1d 00 98 05 	j 8000a6f8 <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009bcc:	4d c0 e2 3f 	mfcr %d3,$icr
80009bd0:	02 3f       	mov %d15,%d3
80009bd2:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009bd6:	8f f8 0f 81 	and %d8,%d8,255
80009bda:	5f 83 e9 ff 	jne %d3,%d8,80009bac <ChainTask+0xa2>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
80009bde:	00 90       	ret 

80009be0 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
80009be0:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
80009be2:	91 00 00 f8 	movh.a %a15,32768
80009be6:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009bea:	c8 02       	ld.a %a2,[%a15]0
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009bec:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <80000130 <osEE_cdb_var>>
80009bf0:	6e 09       	jz %d15,80009c02 <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
80009bf2:	82 0f       	mov %d15,0
80009bf4:	e9 ff 1c 00 	st.b [%a15]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009bf8:	4c f5       	ld.w %d15,[%a15]20
80009bfa:	cd cf e2 0f 	mtcr $icr,%d15
80009bfe:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
80009c02:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009c06:	6e 06       	jz %d15,80009c12 <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
80009c08:	82 0f       	mov %d15,0
80009c0a:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009c0e:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c12:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c16:	8f ff 0f 21 	and %d2,%d15,255
80009c1a:	8b 32 a1 22 	ge.u %d2,%d2,19
80009c1e:	f6 29       	jnz %d2,80009c30 <TerminateTask+0x50>
80009c20:	3b 30 01 20 	mov %d2,19
80009c24:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c28:	cd cf e2 0f 	mtcr $icr,%d15
80009c2c:	0d 00 c0 04 	isync 
80009c30:	99 24 04 00 	ld.a %a4,[%a2]4
80009c34:	a0 05       	mov.a %a5,0
80009c36:	1d 00 61 05 	j 8000a6f8 <osEE_hal_terminate_ctx>

80009c3a <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009c3a:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009c3c:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009c40:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
80009c44:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
80009c46:	c8 3c       	ld.a %a12,[%a15]12
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009c48:	39 c2 01 00 	ld.bu %d2,[%a12]1 <80000130 <osEE_cdb_var>>
80009c4c:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <80000130 <osEE_cdb_var>>
80009c50:	5f f2 2d 80 	jne %d2,%d15,80009caa <Schedule+0x70>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c54:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009c58:	8f f8 0f f1 	and %d15,%d8,255
80009c5c:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009c60:	ee 0a       	jnz %d15,80009c74 <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
80009c62:	02 8f       	mov %d15,%d8
80009c64:	3b 30 01 20 	mov %d2,19
80009c68:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009c6c:	cd cf e2 0f 	mtcr $icr,%d15
80009c70:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
80009c74:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009c78:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009c7a:	91 00 00 48 	movh.a %a4,32768
80009c7e:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
80009c82:	6d 00 36 04 	call 8000a4ee <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
80009c86:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009c8a:	2c c1       	st.b [%a12]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009c8c:	4d c0 e2 3f 	mfcr %d3,$icr
80009c90:	02 3f       	mov %d15,%d3
80009c92:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009c96:	8f f8 0f 21 	and %d2,%d8,255
80009c9a:	5f 23 08 00 	jeq %d3,%d2,80009caa <Schedule+0x70>
80009c9e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ca2:	cd cf e2 0f 	mtcr $icr,%d15
80009ca6:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
80009caa:	82 02       	mov %d2,0
80009cac:	00 90       	ret 

80009cae <GetResource>:
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009cae:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009cb0:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
80009cb4:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
80009cb8:	c8 04       	ld.a %a4,[%a15]0
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
80009cba:	91 00 00 f8 	movh.a %a15,32768
80009cbe:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009cc2:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009cc4:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009cc6:	7f f4 4c 80 	jge.u %d4,%d15,80009d5e <GetResource+0xb0>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
80009cca:	91 00 00 f8 	movh.a %a15,32768
80009cce:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009cd2:	c8 3f       	ld.a %a15,[%a15]12
80009cd4:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009cd8:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
80009cda:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
80009cdc:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
80009cde:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
80009ce0:	08 14       	ld.bu %d4,[%a15]1
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009ce2:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009ce6:	8f f2 0f 31 	and %d3,%d2,255
80009cea:	8b 33 a1 32 	ge.u %d3,%d3,19
80009cee:	f6 3a       	jnz %d3,80009d02 <GetResource+0x54>
    OsEE_icr icr_temp = icr;
80009cf0:	02 23       	mov %d3,%d2
80009cf2:	3b 30 01 50 	mov %d5,19
80009cf6:	37 53 08 30 	insert %d3,%d3,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009cfa:	cd c3 e2 0f 	mtcr $icr,%d3
80009cfe:	0d 00 c0 04 	isync 
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
80009d02:	02 23       	mov %d3,%d2
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
80009d04:	7f f4 16 80 	jge.u %d4,%d15,80009d30 <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009d08:	28 1f       	st.b [%a15]1,%d15

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009d0a:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009d0e:	8b ff 2f 72 	ne %d7,%d15,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009d12:	16 7f       	and %d15,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009d14:	c2 1f       	add %d15,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009d16:	8f 02 d0 61 	andn %d6,%d2,256
80009d1a:	8f f2 cf 31 	andn %d3,%d2,255
80009d1e:	a6 f3       	or %d3,%d15
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009d20:	8f f2 cf 21 	andn %d2,%d2,255
80009d24:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009d28:	8b 05 40 52 	lt %d5,%d5,0
80009d2c:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
80009d30:	b5 24 08 00 	st.a [%a2]8,%a4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d34:	4d c0 e2 5f 	mfcr %d5,$icr
80009d38:	02 5f       	mov %d15,%d5
80009d3a:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009d3e:	8f f3 0f 21 	and %d2,%d3,255
80009d42:	5f 25 08 00 	jeq %d5,%d2,80009d52 <GetResource+0xa4>
80009d46:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009d4a:	cd cf e2 0f 	mtcr $icr,%d15
80009d4e:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
80009d52:	4c f1       	ld.w %d15,[%a15]4
80009d54:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
80009d56:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009d5a:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009d5c:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
80009d5e:	00 90       	ret 

80009d60 <ReleaseResource>:
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009d60:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009d62:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
80009d66:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
80009d6a:	c8 03       	ld.a %a3,[%a15]0
80009d6c:	91 00 00 f8 	movh.a %a15,32768
80009d70:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009d74:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
80009d76:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009d78:	7f f4 69 80 	jge.u %d4,%d15,80009e4a <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009d7c:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009d7e:	91 00 00 28 	movh.a %a2,32768
80009d82:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
80009d86:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009d8a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009d8e:	d4 22       	ld.a %a2,[%a2]
80009d90:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009d92:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009d96:	8f ff 0f 21 	and %d2,%d15,255
80009d9a:	8b 32 a1 22 	ge.u %d2,%d2,19
80009d9e:	f6 2a       	jnz %d2,80009db2 <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009da0:	02 f2       	mov %d2,%d15
80009da2:	3b 30 01 30 	mov %d3,19
80009da6:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009daa:	cd c2 e2 0f 	mtcr $icr,%d2
80009dae:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
80009db2:	c8 14       	ld.a %a4,[%a15]4
80009db4:	d4 44       	ld.a %a4,[%a4]
80009db6:	54 42       	ld.w %d2,[%a4]
80009db8:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
80009dba:	df 02 1a 00 	jeq %d2,0,80009dee <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
80009dbe:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
80009dc2:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009dc4:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009dc8:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009dcc:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009dd0:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009dd2:	8f 0f d0 51 	andn %d5,%d15,256
80009dd6:	8f ff cf 21 	andn %d2,%d15,255
80009dda:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009ddc:	8f ff cf f1 	andn %d15,%d15,255
80009de0:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
80009de4:	8b 04 40 42 	lt %d4,%d4,0
80009de8:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
80009dec:	3c 17       	j 80009e1a <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
80009dee:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
80009df2:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009df4:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009df8:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
80009dfc:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
80009e00:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
80009e02:	8f 0f d0 21 	andn %d2,%d15,256
80009e06:	8f ff cf 31 	andn %d3,%d15,255
80009e0a:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009e0c:	8f ff cf 51 	andn %d5,%d15,255
80009e10:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
80009e14:	fa 06       	lt %d15,%d6,0
80009e16:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
80009e1a:	82 02       	mov %d2,0
80009e1c:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009e20:	91 00 00 48 	movh.a %a4,32768
80009e24:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
80009e28:	6d 00 63 03 	call 8000a4ee <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e2c:	4d c0 e2 5f 	mfcr %d5,$icr
80009e30:	02 53       	mov %d3,%d5
80009e32:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e36:	16 ff       	and %d15,255
80009e38:	5f f5 08 00 	jeq %d5,%d15,80009e48 <ReleaseResource+0xe8>
80009e3c:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e40:	cd c3 e2 0f 	mtcr $icr,%d3
80009e44:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
80009e48:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
80009e4a:	00 90       	ret 

80009e4c <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009e4c:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009e4e:	91 00 00 f8 	movh.a %a15,32768
80009e52:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e56:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009e5a:	8f f2 0f f1 	and %d15,%d2,255
80009e5e:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009e62:	ee 0a       	jnz %d15,80009e76 <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
80009e64:	02 2f       	mov %d15,%d2
80009e66:	3b 30 01 30 	mov %d3,19
80009e6a:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009e6e:	cd cf e2 0f 	mtcr $icr,%d15
80009e72:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
80009e76:	39 ff 10 00 	ld.bu %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009e7a:	c2 ff       	add %d15,-1
80009e7c:	16 ff       	and %d15,255
80009e7e:	ff 2f 08 80 	jge.u %d15,2,80009e8e <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
80009e82:	91 00 00 48 	movh.a %a4,32768
80009e86:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
80009e8a:	1d ff f3 fc 	j 80009870 <osEE_shutdown_os>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009e8e:	4d c0 e2 3f 	mfcr %d3,$icr
80009e92:	02 3f       	mov %d15,%d3
80009e94:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009e98:	8f f2 0f 21 	and %d2,%d2,255
80009e9c:	5f 23 08 00 	jeq %d3,%d2,80009eac <ShutdownOS+0x60>
80009ea0:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009ea4:	cd cf e2 0f 	mtcr $icr,%d15
80009ea8:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
80009eac:	82 72       	mov %d2,7
80009eae:	00 90       	ret 

80009eb0 <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
80009eb0:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009eb2:	91 00 00 f8 	movh.a %a15,32768
80009eb6:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
80009eba:	3b e0 00 20 	mov %d2,14
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
80009ebe:	bd 04 24 00 	jz.a %a4,80009f06 <GetTaskID+0x56>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
80009ec2:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ec4:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ec8:	ff 2f 05 80 	jge.u %d15,2,80009ed2 <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
80009ecc:	19 22 10 00 	ld.w %d2,[%a2]16
80009ed0:	3c 19       	j 80009f02 <GetTaskID+0x52>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009ed2:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009ed4:	de 27       	jne %d15,2,80009f02 <GetTaskID+0x52>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
80009ed6:	c8 3f       	ld.a %a15,[%a15]12
80009ed8:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
80009eda:	bd 0f 14 00 	jz.a %a15,80009f02 <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009ede:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009ee0:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ee4:	ff 2f 0b 80 	jge.u %d15,2,80009efa <GetTaskID+0x4a>
80009ee8:	3c 06       	j 80009ef4 <GetTaskID+0x44>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
80009eea:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009eec:	39 2f 14 00 	ld.bu %d15,[%a2]20
80009ef0:	ff 2f 05 80 	jge.u %d15,2,80009efa <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
80009ef4:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
80009ef8:	3c 05       	j 80009f02 <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
80009efa:	c8 0f       	ld.a %a15,[%a15]0
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
80009efc:	bd 0f f7 ff 	jnz.a %a15,80009eea <GetTaskID+0x3a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
80009f00:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
80009f02:	74 42       	st.w [%a4],%d2
    ev = E_OK;
80009f04:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
80009f06:	00 90       	ret 

80009f08 <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009f08:	40 ae       	mov.aa %a14,%sp
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009f0a:	3b e0 00 20 	mov %d2,14
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
80009f0e:	bd 04 38 00 	jz.a %a4,80009f7e <GetTaskState+0x76>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009f12:	91 00 00 f8 	movh.a %a15,32768
80009f16:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009f1a:	4c f2       	ld.w %d15,[%a15]8
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009f1c:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009f1e:	7f f4 30 80 	jge.u %d4,%d15,80009f7e <GetTaskState+0x76>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009f22:	91 00 00 f8 	movh.a %a15,32768
80009f26:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
80009f2a:	c8 1f       	ld.a %a15,[%a15]4
80009f2c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
80009f30:	c8 0f       	ld.a %a15,[%a15]0
80009f32:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
80009f34:	0c f2       	ld.bu %d15,[%a15]2
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f36:	82 02       	mov %d2,0
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
80009f38:	ff 6f 23 80 	jge.u %d15,6,80009f7e <GetTaskState+0x76>
80009f3c:	91 10 00 f8 	movh.a %a15,32769
80009f40:	d9 ff c8 d9 	lea %a15,[%a15]-24760 <80009f48 <GetTaskState+0x40>>
80009f44:	90 ff       	addsc.a %a15,%a15,%d15,2
80009f46:	dc 0f       	ji %a15
80009f48:	1d 00 0c 00 	j 80009f60 <GetTaskState+0x58>
80009f4c:	1d 00 0e 00 	j 80009f68 <GetTaskState+0x60>
80009f50:	1d 00 0c 00 	j 80009f68 <GetTaskState+0x60>
80009f54:	1d 00 0e 00 	j 80009f70 <GetTaskState+0x68>
80009f58:	1d 00 10 00 	j 80009f78 <GetTaskState+0x70>
80009f5c:	1d 00 0e 00 	j 80009f78 <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009f60:	82 0f       	mov %d15,0
80009f62:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f64:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
80009f66:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009f68:	82 1f       	mov %d15,1
80009f6a:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f6c:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
80009f6e:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009f70:	82 3f       	mov %d15,3
80009f72:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f74:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
80009f76:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009f78:	82 4f       	mov %d15,4
80009f7a:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009f7c:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
80009f7e:	00 90       	ret 

80009f80 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009f80:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
80009f82:	91 00 00 f8 	movh.a %a15,32768
80009f86:	99 fc 30 40 	ld.a %a12,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009f8a:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009f8c:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009f8e:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009f92:	8f f8 0f f1 	and %d15,%d8,255
80009f96:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009f9a:	ee 0a       	jnz %d15,80009fae <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009f9c:	02 8f       	mov %d15,%d8
80009f9e:	3b 30 01 20 	mov %d2,19
80009fa2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009fa6:	cd cf e2 0f 	mtcr $icr,%d15
80009faa:	0d 00 c0 04 	isync 
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
80009fae:	4c f3       	ld.w %d15,[%a15]12
80009fb0:	26 4f       	and %d15,%d4
80009fb2:	ee 13       	jnz %d15,80009fd8 <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
80009fb4:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009fb6:	91 00 00 48 	movh.a %a4,32768
80009fba:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
80009fbe:	d9 c5 04 00 	lea %a5,[%a12]4 <80000130 <osEE_cdb_var>>
80009fc2:	6d 00 98 01 	call 8000a2f2 <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
80009fc6:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
80009fc8:	82 3f       	mov %d15,3
80009fca:	28 2f       	st.b [%a15]2,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
80009fcc:	40 d4       	mov.aa %a4,%a13
80009fce:	d4 c5       	ld.a %a5,[%a12]
80009fd0:	6d 00 c1 02 	call 8000a552 <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
80009fd4:	82 0f       	mov %d15,0
80009fd6:	68 2f       	st.w [%a15]8,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009fd8:	4d c0 e2 3f 	mfcr %d3,$icr
80009fdc:	02 3f       	mov %d15,%d3
80009fde:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009fe2:	8f f8 0f 21 	and %d2,%d8,255
80009fe6:	5f 23 08 00 	jeq %d3,%d2,80009ff6 <WaitEvent+0x76>
80009fea:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009fee:	cd cf e2 0f 	mtcr $icr,%d15
80009ff2:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
80009ff6:	82 02       	mov %d2,0
80009ff8:	00 90       	ret 

80009ffa <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009ffa:	40 ae       	mov.aa %a14,%sp
80009ffc:	20 08       	sub.a %sp,8
80009ffe:	91 00 00 f8 	movh.a %a15,32768
8000a002:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a006:	4c f2       	ld.w %d15,[%a15]8
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a008:	3f f4 06 80 	jlt.u %d4,%d15,8000a014 <SetEvent+0x1a>
    ev = E_OS_ID;
8000a00c:	82 3f       	mov %d15,3
8000a00e:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000a012:	3c 3c       	j 8000a08a <SetEvent+0x90>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a014:	91 00 00 f8 	movh.a %a15,32768
8000a018:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a01c:	c8 1f       	ld.a %a15,[%a15]4
8000a01e:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a022:	c8 04       	ld.a %a4,[%a15]0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a024:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a028:	8f f8 0f f1 	and %d15,%d8,255
8000a02c:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a030:	ee 0a       	jnz %d15,8000a044 <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
8000a032:	02 8f       	mov %d15,%d8
8000a034:	3b 30 01 20 	mov %d2,19
8000a038:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a03c:	cd cf e2 0f 	mtcr $icr,%d15
8000a040:	0d 00 c0 04 	isync 
8000a044:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
8000a046:	d9 e5 ff ff 	lea %a5,[%a14]-1
8000a04a:	6d 00 82 01 	call 8000a34e <osEE_task_event_set_mask>

    if (p_sn != NULL) {
8000a04e:	bc 2f       	jz.a %a2,8000a06c <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
8000a050:	91 00 00 48 	movh.a %a4,32768
8000a054:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
8000a058:	40 25       	mov.aa %a5,%a2
8000a05a:	6d 00 e7 01 	call 8000a428 <osEE_scheduler_task_unblocked>
8000a05e:	76 27       	jz %d2,8000a06c <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
8000a060:	91 00 00 48 	movh.a %a4,32768
8000a064:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
8000a068:	6d 00 43 02 	call 8000a4ee <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a06c:	4d c0 e2 3f 	mfcr %d3,$icr
8000a070:	02 3f       	mov %d15,%d3
8000a072:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a076:	8f f8 0f 21 	and %d2,%d8,255
8000a07a:	5f 23 08 00 	jeq %d3,%d2,8000a08a <SetEvent+0x90>
8000a07e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a082:	cd cf e2 0f 	mtcr $icr,%d15
8000a086:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a08a:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
8000a08e:	00 90       	ret 

8000a090 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
8000a090:	40 ae       	mov.aa %a14,%sp
8000a092:	91 00 00 f8 	movh.a %a15,32768
8000a096:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a09a:	4c f2       	ld.w %d15,[%a15]8
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000a09c:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000a09e:	7f f4 11 80 	jge.u %d4,%d15,8000a0c0 <GetEvent+0x30>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000a0a2:	91 00 00 f8 	movh.a %a15,32768
8000a0a6:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a0aa:	c8 1f       	ld.a %a15,[%a15]4
8000a0ac:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
8000a0b0:	c8 0f       	ld.a %a15,[%a15]0
8000a0b2:	c8 3f       	ld.a %a15,[%a15]12
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
8000a0b4:	3b e0 00 20 	mov %d2,14
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
8000a0b8:	bc 44       	jz.a %a4,8000a0c0 <GetEvent+0x30>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
8000a0ba:	4c f3       	ld.w %d15,[%a15]12
8000a0bc:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
8000a0be:	82 02       	mov %d2,0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
8000a0c0:	00 90       	ret 

8000a0c2 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
8000a0c2:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
8000a0c4:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
8000a0c8:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
8000a0cc:	c8 0f       	ld.a %a15,[%a15]0
8000a0ce:	c8 3f       	ld.a %a15,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a0d0:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a0d4:	8f f2 0f f1 	and %d15,%d2,255
8000a0d8:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000a0dc:	ee 0a       	jnz %d15,8000a0f0 <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
8000a0de:	02 2f       	mov %d15,%d2
8000a0e0:	3b 30 01 30 	mov %d3,19
8000a0e4:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a0e8:	cd cf e2 0f 	mtcr $icr,%d15
8000a0ec:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
8000a0f0:	4c f3       	ld.w %d15,[%a15]12
8000a0f2:	0f 4f e0 40 	andn %d4,%d15,%d4
8000a0f6:	68 34       	st.w [%a15]12,%d4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a0f8:	4d c0 e2 3f 	mfcr %d3,$icr
8000a0fc:	02 3f       	mov %d15,%d3
8000a0fe:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000a102:	8f f2 0f 21 	and %d2,%d2,255
8000a106:	5f 23 08 00 	jeq %d3,%d2,8000a116 <ClearEvent+0x54>
8000a10a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a10e:	cd cf e2 0f 	mtcr $icr,%d15
8000a112:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
8000a116:	82 02       	mov %d2,0
8000a118:	00 90       	ret 

8000a11a <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
8000a11a:	40 ae       	mov.aa %a14,%sp
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
8000a11c:	91 00 00 f8 	movh.a %a15,32768
8000a120:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
8000a124:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a126:	39 ff 14 00 	ld.bu %d15,[%a15]20 <80000130 <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
8000a12a:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a12c:	5e 22       	jne %d15,2,8000a130 <GetISRID+0x16>
    isr_id = p_tdb->tid;
8000a12e:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
8000a130:	00 90       	ret 
	...

8000a134 <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
8000a134:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a136:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
8000a13a:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
8000a13c:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a13e:	bc fb       	jz.a %a15,8000a154 <osEE_release_all_m+0x20>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000a140:	82 0f       	mov %d15,0
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
8000a142:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000a144:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
8000a146:	7c 23       	jnz.a %a2,8000a14c <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
8000a148:	99 32 04 00 	ld.a %a2,[%a3]4
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
8000a14c:	c8 0f       	ld.a %a15,[%a15]0
8000a14e:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
8000a150:	bd 0f f9 ff 	jnz.a %a15,8000a142 <osEE_release_all_m+0xe>
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
8000a154:	00 90       	ret 

8000a156 <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000a156:	40 ae       	mov.aa %a14,%sp
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000a158:	cc 43       	ld.a %a15,[%a4]12
8000a15a:	82 4f       	mov %d15,4
8000a15c:	28 2f       	st.b [%a15]2,%d15
8000a15e:	00 90       	ret 

8000a160 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000a160:	40 ae       	mov.aa %a14,%sp
8000a162:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000a164:	99 42 0c 00 	ld.a %a2,[%a4]12
8000a168:	39 22 01 00 	ld.bu %d2,[%a2]1
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
8000a16c:	82 4f       	mov %d15,4
8000a16e:	2c 22       	st.b [%a2]2,%d15
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
8000a170:	8b f2 0f f2 	eq %d15,%d2,255
8000a174:	ee 13       	jnz %d15,8000a19a <osEE_scheduler_task_wrapper_run+0x3a>
8000a176:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
8000a17a:	37 02 48 40 	extr %d4,%d2,0,8
8000a17e:	82 03       	mov %d3,0
8000a180:	ce 45       	jgez %d4,8000a18a <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a182:	8f f2 07 21 	and %d2,%d2,127
8000a186:	1b 12 00 30 	addi %d3,%d2,1
8000a18a:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a18e:	cd cf e2 0f 	mtcr $icr,%d15
8000a192:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000a196:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
8000a19a:	c8 62       	ld.a %a2,[%a15]24
8000a19c:	2d 02 00 00 	calli %a2
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a1a0:	91 00 00 28 	movh.a %a2,32768
8000a1a4:	99 22 30 40 	ld.a %a2,[%a2]304 <80000130 <osEE_cdb_var>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
8000a1a8:	82 0f       	mov %d15,0
8000a1aa:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
8000a1ae:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a1b2:	6e 09       	jz %d15,8000a1c4 <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
8000a1b4:	82 0f       	mov %d15,0
8000a1b6:	e9 2f 1c 00 	st.b [%a2]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1ba:	4c 25       	ld.w %d15,[%a2]20
8000a1bc:	cd cf e2 0f 	mtcr $icr,%d15
8000a1c0:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
8000a1c4:	39 2f 1e 00 	ld.bu %d15,[%a2]30
8000a1c8:	6e 06       	jz %d15,8000a1d4 <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
8000a1ca:	82 0f       	mov %d15,0
8000a1cc:	e9 2f 1e 00 	st.b [%a2]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000a1d0:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000a1d4:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000a1d8:	8f ff 0f 21 	and %d2,%d15,255
8000a1dc:	8b 32 a1 22 	ge.u %d2,%d2,19
8000a1e0:	f6 29       	jnz %d2,8000a1f2 <osEE_scheduler_task_wrapper_run+0x92>
8000a1e2:	3b 30 01 20 	mov %d2,19
8000a1e6:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000a1ea:	cd cf e2 0f 	mtcr $icr,%d15
8000a1ee:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
8000a1f2:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a1f6:	5e 24       	jne %d15,2,8000a1fe <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
8000a1f8:	40 f4       	mov.aa %a4,%a15
8000a1fa:	5c 9d       	call 8000a134 <osEE_release_all_m>
8000a1fc:	3c 03       	j 8000a202 <osEE_scheduler_task_wrapper_run+0xa2>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
8000a1fe:	40 f4       	mov.aa %a4,%a15
8000a200:	5c 9a       	call 8000a134 <osEE_release_all_m>
8000a202:	c8 14       	ld.a %a4,[%a15]4
8000a204:	a0 05       	mov.a %a5,0
8000a206:	1d 00 79 02 	j 8000a6f8 <osEE_hal_terminate_ctx>

8000a20a <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
8000a20a:	40 ae       	mov.aa %a14,%sp
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
8000a20c:	91 00 00 f8 	movh.a %a15,32768
8000a210:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
8000a214:	39 ff 10 00 	ld.bu %d15,[%a15]16 <80000130 <osEE_cdb_var>>
8000a218:	df 2f fe 7f 	jeq %d15,2,8000a214 <osEE_idle_hook_wrapper+0xa>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
8000a21c:	91 00 00 f8 	movh.a %a15,32768
8000a220:	d9 ff 30 40 	lea %a15,[%a15]304 <80000130 <osEE_cdb_var>>
8000a224:	c8 14       	ld.a %a4,[%a15]4
8000a226:	6d 00 ba 01 	call 8000a59a <osEE_idle_task_terminate>
8000a22a:	00 90       	ret 

8000a22c <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a22c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a22e:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
8000a230:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
8000a232:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
8000a236:	bd 02 13 00 	jz.a %a2,8000a25c <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
8000a23a:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
8000a23e:	bd 0f 1b 00 	jz.a %a15,8000a274 <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
8000a242:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
8000a246:	c8 16       	ld.a %a6,[%a15]4
8000a248:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
8000a24c:	39 42 01 00 	ld.bu %d2,[%a4]1
8000a250:	0c 61       	ld.bu %d15,[%a6]1
8000a252:	7f f2 13 80 	jge.u %d2,%d15,8000a278 <osEE_scheduler_core_rq_preempt_stk+0x4c>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
8000a256:	82 2f       	mov %d15,2
8000a258:	2c 42       	st.b [%a4]2,%d15
8000a25a:	3c 11       	j 8000a27c <osEE_scheduler_core_rq_preempt_stk+0x50>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a25c:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
8000a25e:	bd 0f 1e 00 	jz.a %a15,8000a29a <osEE_scheduler_core_rq_preempt_stk+0x6e>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
8000a262:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a266:	99 24 0c 00 	ld.a %a4,[%a2]12
8000a26a:	82 2f       	mov %d15,2
8000a26c:	2c 42       	st.b [%a4]2,%d15
8000a26e:	3c 07       	j 8000a27c <osEE_scheduler_core_rq_preempt_stk+0x50>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
8000a270:	2c 51       	st.b [%a5]1,%d15
8000a272:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
8000a274:	a0 02       	mov.a %a2,0
8000a276:	00 90       	ret 
8000a278:	a0 02       	mov.a %a2,0
8000a27a:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
8000a27c:	4c f0       	ld.w %d15,[%a15]0
8000a27e:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
8000a280:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a282:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
8000a286:	4c 33       	ld.w %d15,[%a3]12
8000a288:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
8000a28a:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
8000a28c:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
8000a28e:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
8000a292:	39 52 01 00 	ld.bu %d2,[%a5]1
8000a296:	3f f2 ed ff 	jlt.u %d2,%d15,8000a270 <osEE_scheduler_core_rq_preempt_stk+0x44>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
8000a29a:	00 90       	ret 

8000a29c <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
8000a29c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
8000a29e:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
8000a2a0:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
8000a2a2:	76 44       	jz %d4,8000a2aa <osEE_sn_priority_insert+0xe>
8000a2a4:	39 f2 1c 00 	ld.bu %d2,[%a15]28
8000a2a8:	3c 03       	j 8000a2ae <osEE_sn_priority_insert+0x12>
8000a2aa:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
8000a2ae:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a2b0:	a0 06       	mov.a %a6,0
8000a2b2:	7c f3       	jnz.a %a15,8000a2b8 <osEE_sn_priority_insert+0x1c>
8000a2b4:	3c 14       	j 8000a2dc <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a2b6:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
8000a2b8:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
8000a2ba:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
8000a2be:	76 44       	jz %d4,8000a2c6 <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
8000a2c0:	39 2f 1c 00 	ld.bu %d15,[%a2]28
8000a2c4:	3c 02       	j 8000a2c8 <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
8000a2c6:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
8000a2c8:	3f 2f 06 80 	jlt.u %d15,%d2,8000a2d4 <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a2cc:	4c f0       	ld.w %d15,[%a15]0
8000a2ce:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
8000a2d0:	ee f3       	jnz %d15,8000a2b6 <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
8000a2d2:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
8000a2d4:	bc 64       	jz.a %a6,8000a2dc <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
8000a2d6:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
8000a2d8:	82 02       	mov %d2,0
8000a2da:	3c 03       	j 8000a2e0 <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
8000a2dc:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
8000a2de:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
8000a2e0:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
8000a2e2:	00 90       	ret 

8000a2e4 <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
8000a2e4:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
8000a2e6:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
8000a2ea:	82 14       	mov %d4,1
8000a2ec:	6d ff d8 ff 	call 8000a29c <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
8000a2f0:	00 90       	ret 

8000a2f2 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
8000a2f2:	40 ae       	mov.aa %a14,%sp
8000a2f4:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
8000a2f6:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
8000a2f8:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
8000a2fa:	4c c0       	ld.w %d15,[%a12]0
8000a2fc:	68 3f       	st.w [%a15]12,%d15
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
8000a2fe:	6d ff 97 ff 	call 8000a22c <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
8000a302:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
8000a304:	7c 28       	jnz.a %a2,8000a314 <osEE_scheduler_core_pop_running+0x22>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
8000a306:	80 d3       	mov.d %d3,%a13
8000a308:	c2 43       	add %d3,4
8000a30a:	92 42       	add %d2,%d15,4
8000a30c:	6a 32       	cmovn %d2,%d15,%d3
8000a30e:	60 2d       	mov.a %a13,%d2
8000a310:	4c d0       	ld.w %d15,[%a13]0
8000a312:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
8000a314:	40 c2       	mov.aa %a2,%a12
8000a316:	00 90       	ret 

8000a318 <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a318:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
8000a31a:	cc 43       	ld.a %a15,[%a4]12
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a31c:	0c f0       	ld.bu %d15,[%a15]0
8000a31e:	39 43 1e 00 	ld.bu %d3,[%a4]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
8000a322:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
8000a324:	7f 3f 05 80 	jge.u %d15,%d3,8000a32e <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
8000a328:	c2 1f       	add %d15,1
8000a32a:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
8000a32c:	82 02       	mov %d2,0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
8000a32e:	00 90       	ret 

8000a330 <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
8000a330:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000a332:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
8000a334:	39 4f 1c 00 	ld.bu %d15,[%a4]28
8000a338:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
8000a33a:	0c f0       	ld.bu %d15,[%a15]0
8000a33c:	c2 ff       	add %d15,-1
8000a33e:	16 ff       	and %d15,255
8000a340:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
8000a342:	ee 03       	jnz %d15,8000a348 <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
8000a344:	28 2f       	st.b [%a15]2,%d15
8000a346:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
8000a348:	82 1f       	mov %d15,1
8000a34a:	28 2f       	st.b [%a15]2,%d15
8000a34c:	00 90       	ret 

8000a34e <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
8000a34e:	40 ae       	mov.aa %a14,%sp
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
8000a350:	cc 43       	ld.a %a15,[%a4]12
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
8000a352:	02 42       	mov %d2,%d4
8000a354:	02 43       	mov %d3,%d4
8000a356:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
8000a35a:	82 0f       	mov %d15,0
8000a35c:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a35e:	4c f2       	ld.w %d15,[%a15]8
8000a360:	26 f4       	and %d4,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
8000a362:	a0 02       	mov.a %a2,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
8000a364:	76 45       	jz %d4,8000a36e <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
8000a366:	c8 42       	ld.a %a2,[%a15]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
8000a368:	bc 23       	jz.a %a2,8000a36e <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
8000a36a:	82 0f       	mov %d15,0
8000a36c:	68 4f       	st.w [%a15]16,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
8000a36e:	00 90       	ret 

8000a370 <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
8000a370:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
8000a372:	91 00 00 48 	movh.a %a4,32768
8000a376:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
8000a37a:	cc 41       	ld.a %a15,[%a4]4
8000a37c:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000a380:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
8000a382:	cc 53       	ld.a %a15,[%a5]12
8000a384:	0c f0       	ld.bu %d15,[%a15]0
8000a386:	c2 1f       	add %d15,1
8000a388:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
8000a38a:	a0 06       	mov.a %a6,0
8000a38c:	6d 00 c4 00 	call 8000a514 <osEE_scheduler_task_set_running>
8000a390:	00 90       	ret 

8000a392 <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a392:	40 ae       	mov.aa %a14,%sp
8000a394:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
8000a396:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
8000a39a:	91 00 00 f8 	movh.a %a15,32768
8000a39e:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
8000a3a2:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
8000a3a4:	99 43 0c 00 	ld.a %a3,[%a4]12 <80000130 <osEE_cdb_var>>
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
8000a3a8:	39 32 01 00 	ld.bu %d2,[%a3]1 <80000130 <osEE_cdb_var>>
8000a3ac:	0c 21       	ld.bu %d15,[%a2]1
8000a3ae:	7f f2 15 80 	jge.u %d2,%d15,8000a3d8 <osEE_scheduler_task_activated+0x46>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a3b2:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a3b4:	4c 20       	ld.w %d15,[%a2]0
8000a3b6:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a3b8:	82 02       	mov %d2,0
8000a3ba:	74 22       	st.w [%a2],%d2
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
8000a3bc:	82 2f       	mov %d15,2
8000a3be:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
8000a3c0:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
8000a3c4:	4c f3       	ld.w %d15,[%a15]12
8000a3c6:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
8000a3c8:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
8000a3ca:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
8000a3cc:	cc 53       	ld.a %a15,[%a5]12
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
8000a3ce:	68 32       	st.w [%a15]12,%d2

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
8000a3d0:	6d 00 c1 00 	call 8000a552 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a3d4:	82 12       	mov %d2,1
8000a3d6:	00 90       	ret 
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a3d8:	0c 22       	ld.bu %d15,[%a2]2
8000a3da:	ee 05       	jnz %d15,8000a3e4 <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
8000a3dc:	82 1f       	mov %d15,1
8000a3de:	2c 22       	st.b [%a2]2,%d15
8000a3e0:	82 0f       	mov %d15,0
8000a3e2:	6c 23       	st.w [%a2]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a3e4:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a3e6:	4c 50       	ld.w %d15,[%a5]0
8000a3e8:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a3ea:	82 0f       	mov %d15,0
8000a3ec:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a3ee:	d9 f4 04 00 	lea %a4,[%a15]4
8000a3f2:	6d ff 79 ff 	call 8000a2e4 <osEE_scheduler_rq_insert>
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
8000a3f6:	82 02       	mov %d2,0
  }

  return is_preemption;
}
8000a3f8:	00 90       	ret 

8000a3fa <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
8000a3fa:	40 ae       	mov.aa %a14,%sp
8000a3fc:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
8000a3fe:	cc 53       	ld.a %a15,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
8000a400:	91 00 00 28 	movh.a %a2,32768
8000a404:	99 24 30 40 	ld.a %a4,[%a2]304 <80000130 <osEE_cdb_var>>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
8000a408:	0c f2       	ld.bu %d15,[%a15]2
8000a40a:	ee 05       	jnz %d15,8000a414 <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
8000a40c:	82 1f       	mov %d15,1
8000a40e:	28 2f       	st.b [%a15]2,%d15
8000a410:	82 0f       	mov %d15,0
8000a412:	68 3f       	st.w [%a15]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a414:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a418:	4c 50       	ld.w %d15,[%a5]0
8000a41a:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a41c:	82 0f       	mov %d15,0
8000a41e:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a420:	b0 44       	add.a %a4,4
8000a422:	6d ff 61 ff 	call 8000a2e4 <osEE_scheduler_rq_insert>

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
8000a426:	00 90       	ret 

8000a428 <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
8000a428:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
8000a42a:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
8000a42e:	cc 63       	ld.a %a15,[%a6]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
8000a430:	91 00 00 28 	movh.a %a2,32768
8000a434:	99 2c 30 40 	ld.a %a12,[%a2]304 <80000130 <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
8000a438:	82 2f       	mov %d15,2
8000a43a:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
8000a43c:	39 6f 1c 00 	ld.bu %d15,[%a6]28
8000a440:	28 1f       	st.b [%a15]1,%d15
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
8000a442:	d9 c4 04 00 	lea %a4,[%a12]4
8000a446:	6d ff 4f ff 	call 8000a2e4 <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
8000a44a:	82 0f       	mov %d15,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
8000a44c:	df 12 0a 80 	jne %d2,1,8000a460 <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
8000a450:	d4 c2       	ld.a %a2,[%a12]
8000a452:	99 22 0c 00 	ld.a %a2,[%a2]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
8000a456:	0c f1       	ld.bu %d15,[%a15]1
8000a458:	39 22 01 00 	ld.bu %d2,[%a2]1
8000a45c:	0b f2 30 f1 	lt.u %d15,%d2,%d15
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
8000a460:	02 f2       	mov %d2,%d15
8000a462:	00 90       	ret 

8000a464 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
8000a464:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a466:	91 00 00 f8 	movh.a %a15,32768
8000a46a:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
8000a46e:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
8000a470:	99 dc 0c 00 	ld.a %a12,[%a13]12 <80000130 <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
8000a474:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
8000a476:	0c c2       	ld.bu %d15,[%a12]2
8000a478:	de 4a       	jne %d15,4,8000a4ac <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
8000a47a:	91 00 00 48 	movh.a %a4,32768
8000a47e:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
8000a482:	d9 f5 04 00 	lea %a5,[%a15]4 <80000130 <osEE_cdb_var>>
8000a486:	6d ff 36 ff 	call 8000a2f2 <osEE_scheduler_core_pop_running>
8000a48a:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
8000a48c:	4c f0       	ld.w %d15,[%a15]0

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
8000a48e:	80 d2       	mov.d %d2,%a13
8000a490:	5f f2 06 00 	jeq %d2,%d15,8000a49c <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
8000a494:	40 d4       	mov.aa %a4,%a13
8000a496:	6d ff 4d ff 	call 8000a330 <osEE_task_end>
8000a49a:	3c 04       	j 8000a4a2 <osEE_scheduler_task_terminated+0x3e>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
8000a49c:	14 c2       	ld.bu %d2,[%a12]
8000a49e:	c2 f2       	add %d2,-1
8000a4a0:	34 c2       	st.b [%a12],%d2
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
8000a4a2:	48 22       	ld.w %d2,[%a15]8
8000a4a4:	60 82       	mov.a %a2,%d8
8000a4a6:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
8000a4a8:	68 28       	st.w [%a15]8,%d8
8000a4aa:	3c 20       	j 8000a4ea <osEE_scheduler_task_terminated+0x86>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
8000a4ac:	c8 35       	ld.a %a5,[%a15]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
8000a4ae:	54 52       	ld.w %d2,[%a5]
8000a4b0:	68 32       	st.w [%a15]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
8000a4b2:	39 df 1c 00 	ld.bu %d15,[%a13]28
8000a4b6:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
8000a4b8:	82 1f       	mov %d15,1
8000a4ba:	2c c2       	st.b [%a12]2,%d15
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
8000a4bc:	0c c0       	ld.bu %d15,[%a12]0
8000a4be:	5e 13       	jne %d15,1,8000a4c4 <osEE_scheduler_task_terminated+0x60>
8000a4c0:	82 0f       	mov %d15,0
8000a4c2:	6c c3       	st.w [%a12]12,%d15
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
8000a4c4:	d9 fc 04 00 	lea %a12,[%a15]4
8000a4c8:	40 c4       	mov.aa %a4,%a12
8000a4ca:	40 d6       	mov.aa %a6,%a13
8000a4cc:	6d ff 0c ff 	call 8000a2e4 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a4d0:	91 00 00 48 	movh.a %a4,32768
8000a4d4:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
8000a4d8:	40 c5       	mov.aa %a5,%a12
8000a4da:	6d ff a9 fe 	call 8000a22c <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
8000a4de:	7c 25       	jnz.a %a2,8000a4e8 <osEE_scheduler_task_terminated+0x84>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
8000a4e0:	c8 32       	ld.a %a2,[%a15]12
8000a4e2:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
8000a4e4:	68 0f       	st.w [%a15]0,%d15
8000a4e6:	3c 02       	j 8000a4ea <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
8000a4e8:	4c f0       	ld.w %d15,[%a15]0
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
8000a4ea:	60 f2       	mov.a %a2,%d15
8000a4ec:	00 90       	ret 

8000a4ee <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
8000a4ee:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a4f0:	91 00 00 48 	movh.a %a4,32768
8000a4f4:	99 4f 30 40 	ld.a %a15,[%a4]304 <80000130 <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
8000a4f8:	d9 44 30 40 	lea %a4,[%a4]304 <80000130 <osEE_cdb_var>>
8000a4fc:	d9 f5 04 00 	lea %a5,[%a15]4 <80000130 <osEE_cdb_var>>
8000a500:	6d ff 96 fe 	call 8000a22c <osEE_scheduler_core_rq_preempt_stk>

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
8000a504:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
8000a506:	bc 26       	jz.a %a2,8000a512 <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
8000a508:	40 24       	mov.aa %a4,%a2
8000a50a:	c8 05       	ld.a %a5,[%a15]0
8000a50c:	6d 00 23 00 	call 8000a552 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
8000a510:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
8000a512:	00 90       	ret 

8000a514 <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
8000a514:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000a516:	91 00 00 f8 	movh.a %a15,32768
8000a51a:	99 ff 30 40 	ld.a %a15,[%a15]304 <80000130 <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
8000a51e:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
8000a520:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
8000a522:	99 42 0c 00 	ld.a %a2,[%a4]12 <80000130 <osEE_cdb_var>>
8000a526:	0c 22       	ld.bu %d15,[%a2]2
8000a528:	5e 43       	jne %d15,4,8000a52e <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
8000a52a:	82 2f       	mov %d15,2
8000a52c:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
8000a52e:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
8000a530:	7c 68       	jnz.a %a6,8000a540 <osEE_scheduler_task_set_running+0x2c>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
8000a532:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
8000a534:	4c 20       	ld.w %d15,[%a2]0
8000a536:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
8000a538:	82 0f       	mov %d15,0
8000a53a:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
8000a53c:	e8 32       	st.a [%a15]12,%a2
8000a53e:	3c 02       	j 8000a542 <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
8000a540:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
8000a542:	c8 32       	ld.a %a2,[%a15]12
8000a544:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
8000a548:	c8 3f       	ld.a %a15,[%a15]12
8000a54a:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
8000a54c:	6d 00 03 00 	call 8000a552 <osEE_change_context_from_running>
8000a550:	00 90       	ret 

8000a552 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a552:	40 ae       	mov.aa %a14,%sp
8000a554:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a556:	99 52 0c 00 	ld.a %a2,[%a5]12
8000a55a:	0c 22       	ld.bu %d15,[%a2]2
8000a55c:	5e 28       	jne %d15,2,8000a56c <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
8000a55e:	40 54       	mov.aa %a4,%a5
8000a560:	99 55 04 00 	ld.a %a5,[%a5]4
8000a564:	c8 16       	ld.a %a6,[%a15]4
8000a566:	6d 00 73 00 	call 8000a64c <osEE_hal_save_ctx_and_restore_ctx>
8000a56a:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
8000a56c:	40 54       	mov.aa %a4,%a5
8000a56e:	99 55 04 00 	ld.a %a5,[%a5]4
8000a572:	c8 16       	ld.a %a6,[%a15]4
8000a574:	6d 00 8b 00 	call 8000a68a <osEE_hal_save_ctx_and_ready2stacked>
8000a578:	00 90       	ret 

8000a57a <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a57a:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a57c:	cc 53       	ld.a %a15,[%a5]12
8000a57e:	0c f2       	ld.bu %d15,[%a15]2
8000a580:	5e 27       	jne %d15,2,8000a58e <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
8000a582:	40 54       	mov.aa %a4,%a5
8000a584:	99 55 04 00 	ld.a %a5,[%a5]4
8000a588:	6d 00 74 00 	call 8000a670 <osEE_hal_restore_ctx>
8000a58c:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
8000a58e:	40 54       	mov.aa %a4,%a5
8000a590:	99 55 04 00 	ld.a %a5,[%a5]4
8000a594:	6d 00 8d 00 	call 8000a6ae <osEE_hal_ready2stacked>
8000a598:	00 90       	ret 

8000a59a <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
8000a59a:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
8000a59c:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
8000a5a0:	cc 40       	ld.a %a15,[%a4]0
8000a5a2:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
8000a5a4:	cc 50       	ld.a %a15,[%a5]0
8000a5a6:	3c 02       	j 8000a5aa <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
8000a5a8:	60 ff       	mov.a %a15,%d15
8000a5aa:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
8000a5ac:	8b 0f 20 22 	ne %d2,%d15,0
8000a5b0:	0b 3f 10 22 	and.ne %d2,%d15,%d3
8000a5b4:	df 02 fa ff 	jne %d2,0,8000a5a8 <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
8000a5b8:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
8000a5ba:	6d 00 5b 00 	call 8000a670 <osEE_hal_restore_ctx>
8000a5be:	00 90       	ret 

8000a5c0 <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
8000a5c0:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000a5c2:	4d c0 e1 5f 	mfcr %d5,$core_id
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
8000a5c6:	91 00 00 f8 	movh.a %a15,32768
8000a5ca:	d9 ff 1c 40 	lea %a15,[%a15]284 <8000011c <osEE_kdb_var>>
8000a5ce:	c8 2f       	ld.a %a15,[%a15]8
8000a5d0:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
8000a5d2:	bd 0f 2a 00 	jz.a %a15,8000a626 <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a5d6:	91 00 00 28 	movh.a %a2,32768
8000a5da:	d9 22 1c 40 	lea %a2,[%a2]284 <8000011c <osEE_kdb_var>>
8000a5de:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a5e2:	8f 35 00 51 	and %d5,%d5,3
8000a5e6:	8f b5 00 50 	sh %d5,%d5,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a5ea:	bb f0 ff 4f 	mov.u %d4,65535
8000a5ee:	82 0f       	mov %d15,0
8000a5f0:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
8000a5f2:	60 33       	mov.a %a3,%d3
8000a5f4:	90 32       	addsc.a %a2,%a3,%d15,2
8000a5f6:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000a5f8:	39 22 14 00 	ld.bu %d2,[%a2]20
8000a5fc:	df 22 12 80 	jne %d2,2,8000a620 <osEE_cpu_startos+0x60>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
8000a600:	b9 22 08 00 	ld.hu %d2,[%a2]8
8000a604:	5f 42 0e 00 	jeq %d2,%d4,8000a620 <osEE_cpu_startos+0x60>
8000a608:	60 24       	mov.a %a4,%d2
8000a60a:	d9 43 00 08 	lea %a3,[%a4]-32768
8000a60e:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000a612:	39 22 1c 00 	ld.bu %d2,[%a2]28
8000a616:	c2 12       	add %d2,1
8000a618:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
8000a61c:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
8000a61e:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
8000a620:	c2 1f       	add %d15,1
8000a622:	fd f0 e8 7f 	loop %a15,8000a5f2 <osEE_cpu_startos+0x32>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
8000a626:	82 12       	mov %d2,1
8000a628:	00 90       	ret 

8000a62a <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a62a:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
8000a62e:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
8000a630:	0c 22       	ld.bu %d15,[%a2]2
8000a632:	1e 27       	jeq %d15,2,8000a640 <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
8000a634:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a636:	c8 1f       	ld.a %a15,[%a15]4
8000a638:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
8000a63a:	1d 00 3a 00 	j 8000a6ae <osEE_hal_ready2stacked>
8000a63e:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
8000a640:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
8000a642:	c8 1f       	ld.a %a15,[%a15]4
8000a644:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
8000a646:	1d 00 15 00 	j 8000a670 <osEE_hal_restore_ctx>
8000a64a:	00 90       	ret 

8000a64c <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a64c:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a64e:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a652:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a654:	4c 60       	ld.w %d15,[%a6]0
8000a656:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a65a:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a65e:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a662:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a664:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a668:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
8000a66a:	1d 00 03 00 	j 8000a670 <osEE_hal_restore_ctx>
8000a66e:	00 90       	ret 

8000a670 <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
8000a670:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a672:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
8000a674:	4c f2       	ld.w %d15,[%a15]8
8000a676:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a678:	cd 0f e0 0f 	mtcr $pcxi,%d15
8000a67c:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
8000a680:	4c f0       	ld.w %d15,[%a15]0
8000a682:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
8000a684:	1d ff 69 fd 	j 8000a156 <osEE_scheduler_task_wrapper_restore>
8000a688:	00 90       	ret 

8000a68a <osEE_hal_save_ctx_and_ready2stacked>:
8000a68a:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a68c:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a690:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a692:	4c 60       	ld.w %d15,[%a6]0
8000a694:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a698:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a69c:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a6a0:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a6a2:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a6a6:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
8000a6a8:	1d 00 03 00 	j 8000a6ae <osEE_hal_ready2stacked>
8000a6ac:	00 90       	ret 

8000a6ae <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000a6ae:	cc 50       	ld.a %a15,[%a5]0
8000a6b0:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
8000a6b2:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
8000a6b6:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
8000a6b8:	d9 f2 f0 ff 	lea %a2,[%a15]-16
8000a6bc:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
8000a6be:	4c 50       	ld.w %d15,[%a5]0
8000a6c0:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a6c4:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
8000a6c8:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
8000a6cc:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
8000a6ce:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
8000a6d2:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
8000a6d4:	1d ff 46 fd 	j 8000a160 <osEE_scheduler_task_wrapper_run>
8000a6d8:	00 90       	ret 

8000a6da <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
8000a6da:	4d 40 e0 ff 	mfcr %d15,$psw
8000a6de:	8f ff c7 f1 	andn %d15,%d15,127
8000a6e2:	cd 4f e0 0f 	mtcr $psw,%d15
8000a6e6:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
8000a6ea:	91 10 00 f8 	movh.a %a15,32769
8000a6ee:	d9 ff 6a 8a 	lea %a15,[%a15]-22998 <8000a62a <osEE_tc_change_context_from_task_end>>
8000a6f2:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
8000a6f4:	00 80       	rfe 
8000a6f6:	00 90       	ret 

8000a6f8 <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
8000a6f8:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
8000a6fa:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000a6fe:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
8000a702:	cc 40       	ld.a %a15,[%a4]0
8000a704:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a706:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a70a:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
8000a70e:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
8000a710:	8f c3 01 30 	sh %d3,%d3,28
8000a714:	a6 43       	or %d3,%d4
8000a716:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
8000a718:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
8000a71a:	bc f3       	jz.a %a15,8000a720 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
8000a71c:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
8000a71e:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
8000a720:	cd 8f e3 0f 	mtcr $fcx,%d15
8000a724:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
8000a728:	cd 03 e0 0f 	mtcr $pcxi,%d3
8000a72c:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
8000a730:	cc 40       	ld.a %a15,[%a4]0
8000a732:	4c f0       	ld.w %d15,[%a15]0
8000a734:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
8000a736:	91 00 00 48 	movh.a %a4,32768
8000a73a:	d9 44 1c 40 	lea %a4,[%a4]284 <8000011c <osEE_kdb_var>>
8000a73e:	d9 a5 04 00 	lea %a5,[%sp]4 <8000011c <osEE_kdb_var>>
8000a742:	6d ff 91 fe 	call 8000a464 <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
8000a746:	d8 01       	ld.a %a15,[%sp]4
8000a748:	39 ff 14 00 	ld.bu %d15,[%a15]20
8000a74c:	1e 25       	jeq %d15,2,8000a756 <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
8000a74e:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
8000a750:	1d ff 6d ff 	j 8000a62a <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
8000a754:	3c 00       	j 8000a754 <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
8000a756:	40 24       	mov.aa %a4,%a2
8000a758:	6d ff c1 ff 	call 8000a6da <osEE_tc_change_context_from_isr2_end>
8000a75c:	3c fc       	j 8000a754 <osEE_hal_terminate_ctx+0x5c>

8000a75e <__lshrdi3>:
8000a75e:	6f 56 0c 80 	jnz.t %d6,5,8000a776 <__lshrdi3+0x18>
8000a762:	8b 06 02 71 	rsub %d7,%d6,32
8000a766:	32 56       	rsub %d6
8000a768:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
8000a76c:	0f 65 00 30 	sh %d3,%d5,%d6
8000a770:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
8000a774:	00 90       	ret 
8000a776:	8b 06 02 60 	add %d6,%d6,32
8000a77a:	32 56       	rsub %d6
8000a77c:	0f 65 00 20 	sh %d2,%d5,%d6
8000a780:	82 03       	mov %d3,0
8000a782:	00 90       	ret 

8000a784 <__extendsfdf2>:
8000a784:	20 20       	sub.a %sp,32
8000a786:	d9 a4 20 00 	lea %a4,[%sp]32
8000a78a:	89 44 2c f5 	st.w [+%a4]-20,%d4
8000a78e:	d9 a5 10 00 	lea %a5,[%sp]16
8000a792:	6d 00 d8 02 	call 8000ad42 <__unpack_f>
8000a796:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a79a:	39 a4 10 00 	ld.bu %d4,[%sp]16
8000a79e:	8f e2 1f f0 	sh %d15,%d2,-2
8000a7a2:	8f e2 01 20 	sh %d2,%d2,30
8000a7a6:	74 a2       	st.w [%sp],%d2
8000a7a8:	78 01       	st.w [%sp]4,%d15
8000a7aa:	19 a5 14 00 	ld.w %d5,[%sp]20
8000a7ae:	19 a6 18 00 	ld.w %d6,[%sp]24
8000a7b2:	1d 00 8e 02 	j 8000acce <__make_dp>

8000a7b6 <_fpadd_parts>:
8000a7b6:	0c 40       	ld.bu %d15,[%a4]0
8000a7b8:	40 42       	mov.aa %a2,%a4
8000a7ba:	bf 2f cb 80 	jlt.u %d15,2,8000a950 <_fpadd_parts+0x19a>
8000a7be:	14 52       	ld.bu %d2,[%a5]
8000a7c0:	40 52       	mov.aa %a2,%a5
8000a7c2:	bf 22 c7 80 	jlt.u %d2,2,8000a950 <_fpadd_parts+0x19a>
8000a7c6:	5e 4e       	jne %d15,4,8000a7e2 <_fpadd_parts+0x2c>
8000a7c8:	40 42       	mov.aa %a2,%a4
8000a7ca:	df 42 c3 80 	jne %d2,4,8000a950 <_fpadd_parts+0x19a>
8000a7ce:	19 42 04 00 	ld.w %d2,[%a4]4
8000a7d2:	4c 51       	ld.w %d15,[%a5]4
8000a7d4:	5f f2 be 00 	jeq %d2,%d15,8000a950 <_fpadd_parts+0x19a>
8000a7d8:	91 00 00 f8 	movh.a %a15,32768
8000a7dc:	d9 f2 d4 b0 	lea %a2,[%a15]3796 <80000ed4 <__thenan_df>>
8000a7e0:	00 90       	ret 
8000a7e2:	40 52       	mov.aa %a2,%a5
8000a7e4:	df 42 b6 00 	jeq %d2,4,8000a950 <_fpadd_parts+0x19a>
8000a7e8:	df 22 11 80 	jne %d2,2,8000a80a <_fpadd_parts+0x54>
8000a7ec:	40 42       	mov.aa %a2,%a4
8000a7ee:	df 2f b1 80 	jne %d15,2,8000a950 <_fpadd_parts+0x19a>
8000a7f2:	40 63       	mov.aa %a3,%a6
8000a7f4:	a0 4f       	mov.a %a15,4
8000a7f6:	44 4f       	ld.w %d15,[%a4+]
8000a7f8:	64 3f       	st.w [%a3+],%d15
8000a7fa:	fc fe       	loop %a15,8000a7f6 <_fpadd_parts+0x40>
8000a7fc:	4c 21       	ld.w %d15,[%a2]4
8000a7fe:	19 52 04 00 	ld.w %d2,[%a5]4
8000a802:	40 62       	mov.aa %a2,%a6
8000a804:	26 2f       	and %d15,%d2
8000a806:	6c 61       	st.w [%a6]4,%d15
8000a808:	00 90       	ret 
8000a80a:	40 52       	mov.aa %a2,%a5
8000a80c:	df 2f a2 00 	jeq %d15,2,8000a950 <_fpadd_parts+0x19a>
8000a810:	4c 42       	ld.w %d15,[%a4]8
8000a812:	19 52 08 00 	ld.w %d2,[%a5]8
8000a816:	40 6f       	mov.aa %a15,%a6
8000a818:	52 23       	sub %d3,%d15,%d2
8000a81a:	0b 30 c0 c1 	abs %d12,%d3
8000a81e:	8b 0c 84 42 	ge %d4,%d12,64
8000a822:	40 5c       	mov.aa %a12,%a5
8000a824:	40 4d       	mov.aa %a13,%a4
8000a826:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a82a:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a82e:	df 04 35 80 	jne %d4,0,8000a898 <_fpadd_parts+0xe2>
8000a832:	bf 13 19 00 	jlt %d3,1,8000a864 <_fpadd_parts+0xae>
8000a836:	0b 89 10 48 	mov %e4,%d9,%d8
8000a83a:	02 c6       	mov %d6,%d12
8000a83c:	6d ff 91 ff 	call 8000a75e <__lshrdi3>
8000a840:	d2 14       	mov %e4,1
8000a842:	02 c6       	mov %d6,%d12
8000a844:	02 2e       	mov %d14,%d2
8000a846:	02 3d       	mov %d13,%d3
8000a848:	6d 00 70 02 	call 8000ad28 <__ashldi3>
8000a84c:	8b f2 9f 20 	addx %d2,%d2,-1
8000a850:	8b f3 bf 30 	addc %d3,%d3,-1
8000a854:	26 82       	and %d2,%d8
8000a856:	26 93       	and %d3,%d9
8000a858:	a6 23       	or %d3,%d2
8000a85a:	02 e8       	mov %d8,%d14
8000a85c:	8b 03 00 85 	or.ne %d8,%d3,0
8000a860:	02 d9       	mov %d9,%d13
8000a862:	3c 21       	j 8000a8a4 <_fpadd_parts+0xee>
8000a864:	df 03 20 00 	jeq %d3,0,8000a8a4 <_fpadd_parts+0xee>
8000a868:	0b ab 10 48 	mov %e4,%d11,%d10
8000a86c:	02 c6       	mov %d6,%d12
8000a86e:	6d ff 78 ff 	call 8000a75e <__lshrdi3>
8000a872:	d2 14       	mov %e4,1
8000a874:	02 c6       	mov %d6,%d12
8000a876:	02 2e       	mov %d14,%d2
8000a878:	02 3d       	mov %d13,%d3
8000a87a:	6d 00 57 02 	call 8000ad28 <__ashldi3>
8000a87e:	8b f2 9f 20 	addx %d2,%d2,-1
8000a882:	8b f3 bf 30 	addc %d3,%d3,-1
8000a886:	26 a2       	and %d2,%d10
8000a888:	26 b3       	and %d3,%d11
8000a88a:	a6 23       	or %d3,%d2
8000a88c:	02 ea       	mov %d10,%d14
8000a88e:	42 cf       	add %d15,%d12
8000a890:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a894:	02 db       	mov %d11,%d13
8000a896:	3c 07       	j 8000a8a4 <_fpadd_parts+0xee>
8000a898:	3f f2 05 00 	jlt %d2,%d15,8000a8a2 <_fpadd_parts+0xec>
8000a89c:	02 2f       	mov %d15,%d2
8000a89e:	d2 0a       	mov %e10,0
8000a8a0:	3c 02       	j 8000a8a4 <_fpadd_parts+0xee>
8000a8a2:	d2 08       	mov %e8,0
8000a8a4:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a8a8:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a8ac:	5f 24 34 00 	jeq %d4,%d2,8000a914 <_fpadd_parts+0x15e>
8000a8b0:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a8b4:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a8b8:	76 45       	jz %d4,8000a8c2 <_fpadd_parts+0x10c>
8000a8ba:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a8be:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a8c2:	0e 37       	jltz %d3,8000a8d0 <_fpadd_parts+0x11a>
8000a8c4:	82 04       	mov %d4,0
8000a8c6:	68 14       	st.w [%a15]4,%d4
8000a8c8:	68 2f       	st.w [%a15]8,%d15
8000a8ca:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a8ce:	3c 0c       	j 8000a8e6 <_fpadd_parts+0x130>
8000a8d0:	68 2f       	st.w [%a15]8,%d15
8000a8d2:	8b 03 00 f1 	rsub %d15,%d3,0
8000a8d6:	82 14       	mov %d4,1
8000a8d8:	8b 02 00 31 	rsub %d3,%d2,0
8000a8dc:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a8e0:	68 14       	st.w [%a15]4,%d4
8000a8e2:	68 33       	st.w [%a15]12,%d3
8000a8e4:	68 4f       	st.w [%a15]16,%d15
8000a8e6:	82 f5       	mov %d5,-1
8000a8e8:	06 c5       	sh %d5,-4
8000a8ea:	48 32       	ld.w %d2,[%a15]12
8000a8ec:	48 43       	ld.w %d3,[%a15]16
8000a8ee:	8b f2 9f 60 	addx %d6,%d2,-1
8000a8f2:	8b f3 bf 40 	addc %d4,%d3,-1
8000a8f6:	3a 54       	eq %d15,%d4,%d5
8000a8f8:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a8fc:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a900:	6e 12       	jz %d15,8000a924 <_fpadd_parts+0x16e>
8000a902:	4c f2       	ld.w %d15,[%a15]8
8000a904:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a908:	c2 ff       	add %d15,-1
8000a90a:	06 12       	sh %d2,1
8000a90c:	68 32       	st.w [%a15]12,%d2
8000a90e:	68 43       	st.w [%a15]16,%d3
8000a910:	68 2f       	st.w [%a15]8,%d15
8000a912:	3c ec       	j 8000a8ea <_fpadd_parts+0x134>
8000a914:	0b a8 40 20 	addx %d2,%d8,%d10
8000a918:	68 2f       	st.w [%a15]8,%d15
8000a91a:	0b b9 50 f0 	addc %d15,%d9,%d11
8000a91e:	68 14       	st.w [%a15]4,%d4
8000a920:	68 32       	st.w [%a15]12,%d2
8000a922:	68 4f       	st.w [%a15]16,%d15
8000a924:	82 3f       	mov %d15,3
8000a926:	28 0f       	st.b [%a15]0,%d15
8000a928:	4c f4       	ld.w %d15,[%a15]16
8000a92a:	7b 00 00 42 	movh %d4,8192
8000a92e:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000a932:	48 32       	ld.w %d2,[%a15]12
8000a934:	40 f2       	mov.aa %a2,%a15
8000a936:	f6 3d       	jnz %d3,8000a950 <_fpadd_parts+0x19a>
8000a938:	8f 12 00 31 	and %d3,%d2,1
8000a93c:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000a940:	06 ff       	sh %d15,-1
8000a942:	96 00       	or %d15,0
8000a944:	68 4f       	st.w [%a15]16,%d15
8000a946:	4c f2       	ld.w %d15,[%a15]8
8000a948:	a6 32       	or %d2,%d3
8000a94a:	c2 1f       	add %d15,1
8000a94c:	68 32       	st.w [%a15]12,%d2
8000a94e:	68 2f       	st.w [%a15]8,%d15
8000a950:	00 90       	ret 

8000a952 <__adddf3>:
8000a952:	20 50       	sub.a %sp,80
8000a954:	d9 a4 04 00 	lea %a4,[%sp]4
8000a958:	d9 a5 14 00 	lea %a5,[%sp]20
8000a95c:	89 a4 44 09 	st.d [%sp]4,%e4
8000a960:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a964:	6d 00 c0 02 	call 8000aee4 <__unpack_d>
8000a968:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a96c:	d9 a5 28 00 	lea %a5,[%sp]40
8000a970:	6d 00 ba 02 	call 8000aee4 <__unpack_d>
8000a974:	d9 a4 14 00 	lea %a4,[%sp]20
8000a978:	d9 a5 28 00 	lea %a5,[%sp]40
8000a97c:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a980:	6d ff 1b ff 	call 8000a7b6 <_fpadd_parts>
8000a984:	40 24       	mov.aa %a4,%a2
8000a986:	1d 00 26 02 	j 8000add2 <__pack_d>

8000a98a <__subdf3>:
8000a98a:	20 50       	sub.a %sp,80
8000a98c:	d9 a4 04 00 	lea %a4,[%sp]4
8000a990:	d9 a5 14 00 	lea %a5,[%sp]20
8000a994:	89 a4 44 09 	st.d [%sp]4,%e4
8000a998:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a99c:	6d 00 a4 02 	call 8000aee4 <__unpack_d>
8000a9a0:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a9a4:	d9 a5 28 00 	lea %a5,[%sp]40
8000a9a8:	6d 00 9e 02 	call 8000aee4 <__unpack_d>
8000a9ac:	58 0b       	ld.w %d15,[%sp]44
8000a9ae:	d9 a4 14 00 	lea %a4,[%sp]20
8000a9b2:	8f 1f 80 f1 	xor %d15,%d15,1
8000a9b6:	d9 a5 28 00 	lea %a5,[%sp]40
8000a9ba:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a9be:	78 0b       	st.w [%sp]44,%d15
8000a9c0:	6d ff fb fe 	call 8000a7b6 <_fpadd_parts>
8000a9c4:	40 24       	mov.aa %a4,%a2
8000a9c6:	1d 00 06 02 	j 8000add2 <__pack_d>

8000a9ca <__muldf3>:
8000a9ca:	20 50       	sub.a %sp,80
8000a9cc:	d9 a4 04 00 	lea %a4,[%sp]4
8000a9d0:	d9 a5 14 00 	lea %a5,[%sp]20
8000a9d4:	89 a4 44 09 	st.d [%sp]4,%e4
8000a9d8:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a9dc:	6d 00 84 02 	call 8000aee4 <__unpack_d>
8000a9e0:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a9e4:	d9 a5 28 00 	lea %a5,[%sp]40
8000a9e8:	6d 00 7e 02 	call 8000aee4 <__unpack_d>
8000a9ec:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000a9f0:	ff 23 0c 80 	jge.u %d3,2,8000aa08 <__muldf3+0x3e>
8000a9f4:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a9f8:	58 0b       	ld.w %d15,[%sp]44
8000a9fa:	d9 a4 14 00 	lea %a4,[%sp]20
8000a9fe:	0b f2 10 f1 	ne %d15,%d2,%d15
8000aa02:	78 06       	st.w [%sp]24,%d15
8000aa04:	1d 00 b3 00 	j 8000ab6a <__muldf3+0x1a0>
8000aa08:	39 af 28 00 	ld.bu %d15,[%sp]40
8000aa0c:	ff 2f 0c 80 	jge.u %d15,2,8000aa24 <__muldf3+0x5a>
8000aa10:	58 0b       	ld.w %d15,[%sp]44
8000aa12:	19 a2 18 00 	ld.w %d2,[%sp]24
8000aa16:	d9 a4 28 00 	lea %a4,[%sp]40
8000aa1a:	0b f2 10 f1 	ne %d15,%d2,%d15
8000aa1e:	78 0b       	st.w [%sp]44,%d15
8000aa20:	1d 00 a5 00 	j 8000ab6a <__muldf3+0x1a0>
8000aa24:	df 43 09 80 	jne %d3,4,8000aa36 <__muldf3+0x6c>
8000aa28:	91 00 00 48 	movh.a %a4,32768
8000aa2c:	d9 44 d4 b0 	lea %a4,[%a4]3796 <80000ed4 <__thenan_df>>
8000aa30:	df 2f 9d 00 	jeq %d15,2,8000ab6a <__muldf3+0x1a0>
8000aa34:	3c e0       	j 8000a9f4 <__muldf3+0x2a>
8000aa36:	5e 48       	jne %d15,4,8000aa46 <__muldf3+0x7c>
8000aa38:	91 00 00 48 	movh.a %a4,32768
8000aa3c:	d9 44 d4 b0 	lea %a4,[%a4]3796 <80000ed4 <__thenan_df>>
8000aa40:	df 23 95 00 	jeq %d3,2,8000ab6a <__muldf3+0x1a0>
8000aa44:	3c e6       	j 8000aa10 <__muldf3+0x46>
8000aa46:	df 23 d7 7f 	jeq %d3,2,8000a9f4 <__muldf3+0x2a>
8000aa4a:	df 2f e3 7f 	jeq %d15,2,8000aa10 <__muldf3+0x46>
8000aa4e:	58 08       	ld.w %d15,[%sp]32
8000aa50:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000aa54:	d2 00       	mov %e0,0
8000aa56:	19 a0 34 00 	ld.w %d0,[%sp]52
8000aa5a:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000aa5e:	82 0c       	mov %d12,0
8000aa60:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000aa64:	19 aa 24 00 	ld.w %d10,[%sp]36
8000aa68:	82 02       	mov %d2,0
8000aa6a:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000aa6e:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000aa72:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000aa76:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000aa7a:	82 0d       	mov %d13,0
8000aa7c:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000aa80:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000aa84:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000aa88:	0b 54 10 08 	mov %e0,%d4,%d5
8000aa8c:	42 20       	add %d0,%d2
8000aa8e:	3a 73       	eq %d15,%d3,%d7
8000aa90:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000aa94:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000aa98:	8b 0f 00 62 	eq %d6,%d15,0
8000aa9c:	3a 50       	eq %d15,%d0,%d5
8000aa9e:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000aaa2:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000aaa6:	ba 0f       	eq %d15,%d15,0
8000aaa8:	53 1f 40 40 	mul.u %e4,%d15,1
8000aaac:	02 38       	mov %d8,%d3
8000aaae:	82 09       	mov %d9,0
8000aab0:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000aab4:	02 5f       	mov %d15,%d5
8000aab6:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000aaba:	42 6f       	add %d15,%d6
8000aabc:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000aac0:	0b 4f 10 68 	mov %e6,%d15,%d4
8000aac4:	0b 62 40 40 	addx %d4,%d2,%d6
8000aac8:	0b 73 50 20 	addc %d2,%d3,%d7
8000aacc:	58 07       	ld.w %d15,[%sp]28
8000aace:	19 a3 30 00 	ld.w %d3,[%sp]48
8000aad2:	19 a5 18 00 	ld.w %d5,[%sp]24
8000aad6:	42 3f       	add %d15,%d3
8000aad8:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000aadc:	c2 4f       	add %d15,4
8000aade:	0b 35 10 31 	ne %d3,%d5,%d3
8000aae2:	59 a3 00 10 	st.w [%sp]64,%d3
8000aae6:	7b 00 00 52 	movh %d5,8192
8000aaea:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000aaee:	df 03 1b 00 	jeq %d3,0,8000ab24 <__muldf3+0x15a>
8000aaf2:	8f 14 00 31 	and %d3,%d4,1
8000aaf6:	76 37       	jz %d3,8000ab04 <__muldf3+0x13a>
8000aaf8:	8f f0 1f 30 	sh %d3,%d0,-1
8000aafc:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000ab00:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000ab04:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000ab08:	c2 1f       	add %d15,1
8000ab0a:	06 f2       	sh %d2,-1
8000ab0c:	3c ed       	j 8000aae6 <__muldf3+0x11c>
8000ab0e:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000ab12:	06 14       	sh %d4,1
8000ab14:	ce 04       	jgez %d0,8000ab1c <__muldf3+0x152>
8000ab16:	8f 14 40 51 	or %d5,%d4,1
8000ab1a:	02 54       	mov %d4,%d5
8000ab1c:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000ab20:	c2 ff       	add %d15,-1
8000ab22:	06 11       	sh %d1,1
8000ab24:	7b 00 00 51 	movh %d5,4096
8000ab28:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000ab2c:	df 03 f1 ff 	jne %d3,0,8000ab0e <__muldf3+0x144>
8000ab30:	78 11       	st.w [%sp]68,%d15
8000ab32:	02 4f       	mov %d15,%d4
8000ab34:	16 ff       	and %d15,255
8000ab36:	8b 0f 28 f2 	ne %d15,%d15,128
8000ab3a:	ee 0f       	jnz %d15,8000ab58 <__muldf3+0x18e>
8000ab3c:	a6 10       	or %d0,%d1
8000ab3e:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000ab42:	8b 00 20 02 	ne %d0,%d0,0
8000ab46:	0f f0 e0 00 	andn %d0,%d0,%d15
8000ab4a:	76 07       	jz %d0,8000ab58 <__muldf3+0x18e>
8000ab4c:	8b 04 88 40 	addx %d4,%d4,128
8000ab50:	8b 02 a0 20 	addc %d2,%d2,0
8000ab54:	8f f4 cf 41 	andn %d4,%d4,255
8000ab58:	d9 a4 10 10 	lea %a4,[%sp]80
8000ab5c:	82 3f       	mov %d15,3
8000ab5e:	59 a4 08 10 	st.w [%sp]72,%d4
8000ab62:	59 a2 0c 10 	st.w [%sp]76,%d2
8000ab66:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin2_TX_P32_5_OUT+0xc>>,%d15
8000ab6a:	1d 00 34 01 	j 8000add2 <__pack_d>

8000ab6e <__divdf3>:
8000ab6e:	20 38       	sub.a %sp,56
8000ab70:	40 a4       	mov.aa %a4,%sp
8000ab72:	d9 a5 10 00 	lea %a5,[%sp]16
8000ab76:	89 a4 40 09 	st.d [%sp],%e4
8000ab7a:	89 a6 48 09 	st.d [%sp]8,%e6
8000ab7e:	6d 00 b3 01 	call 8000aee4 <__unpack_d>
8000ab82:	d9 a4 08 00 	lea %a4,[%sp]8
8000ab86:	d9 a5 24 00 	lea %a5,[%sp]36
8000ab8a:	6d 00 ad 01 	call 8000aee4 <__unpack_d>
8000ab8e:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000ab92:	bf 22 76 80 	jlt.u %d2,2,8000ac7e <__divdf3+0x110>
8000ab96:	39 af 24 00 	ld.bu %d15,[%sp]36
8000ab9a:	d9 a4 24 00 	lea %a4,[%sp]36
8000ab9e:	bf 2f 72 80 	jlt.u %d15,2,8000ac82 <__divdf3+0x114>
8000aba2:	19 a4 14 00 	ld.w %d4,[%sp]20
8000aba6:	19 a3 28 00 	ld.w %d3,[%sp]40
8000abaa:	c6 43       	xor %d3,%d4
8000abac:	59 a3 14 00 	st.w [%sp]20,%d3
8000abb0:	1b e2 ff 3f 	addi %d3,%d2,-2
8000abb4:	8f d3 0f 31 	and %d3,%d3,253
8000abb8:	f6 38       	jnz %d3,8000abc8 <__divdf3+0x5a>
8000abba:	91 00 00 48 	movh.a %a4,32768
8000abbe:	d9 44 d4 b0 	lea %a4,[%a4]3796 <80000ed4 <__thenan_df>>
8000abc2:	5f f2 5e 80 	jne %d2,%d15,8000ac7e <__divdf3+0x110>
8000abc6:	3c 5e       	j 8000ac82 <__divdf3+0x114>
8000abc8:	5e 47       	jne %d15,4,8000abd6 <__divdf3+0x68>
8000abca:	d2 02       	mov %e2,0
8000abcc:	82 0f       	mov %d15,0
8000abce:	89 a2 5c 09 	st.d [%sp]28,%e2
8000abd2:	78 06       	st.w [%sp]24,%d15
8000abd4:	3c 55       	j 8000ac7e <__divdf3+0x110>
8000abd6:	5e 25       	jne %d15,2,8000abe0 <__divdf3+0x72>
8000abd8:	82 4f       	mov %d15,4
8000abda:	e9 af 10 00 	st.b [%sp]16,%d15
8000abde:	3c 50       	j 8000ac7e <__divdf3+0x110>
8000abe0:	58 06       	ld.w %d15,[%sp]24
8000abe2:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000abe6:	09 a4 70 09 	ld.d %e4,[%sp]48
8000abea:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000abee:	52 66       	sub %d6,%d15,%d6
8000abf0:	3a 53       	eq %d15,%d3,%d5
8000abf2:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000abf6:	59 a6 18 00 	st.w [%sp]24,%d6
8000abfa:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000abfe:	ee 07       	jnz %d15,8000ac0c <__divdf3+0x9e>
8000ac00:	c2 f6       	add %d6,-1
8000ac02:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000ac06:	59 a6 18 00 	st.w [%sp]24,%d6
8000ac0a:	06 12       	sh %d2,1
8000ac0c:	82 01       	mov %d1,0
8000ac0e:	7b 00 00 f1 	movh %d15,4096
8000ac12:	82 00       	mov %d0,0
8000ac14:	82 07       	mov %d7,0
8000ac16:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000ac1a:	0b 53 00 61 	eq %d6,%d3,%d5
8000ac1e:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000ac22:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000ac26:	f6 6b       	jnz %d6,8000ac3c <__divdf3+0xce>
8000ac28:	0f 10 a0 80 	or %d8,%d0,%d1
8000ac2c:	0f f7 a0 60 	or %d6,%d7,%d15
8000ac30:	0b 42 c0 20 	subx %d2,%d2,%d4
8000ac34:	02 80       	mov %d0,%d8
8000ac36:	02 67       	mov %d7,%d6
8000ac38:	0b 53 d0 30 	subc %d3,%d3,%d5
8000ac3c:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000ac40:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000ac44:	06 ff       	sh %d15,-1
8000ac46:	06 12       	sh %d2,1
8000ac48:	fd f0 e9 7f 	loop %a15,8000ac1a <__divdf3+0xac>
8000ac4c:	02 0f       	mov %d15,%d0
8000ac4e:	16 ff       	and %d15,255
8000ac50:	8b 0f 28 f2 	ne %d15,%d15,128
8000ac54:	0b 70 10 48 	mov %e4,%d0,%d7
8000ac58:	ee 0f       	jnz %d15,8000ac76 <__divdf3+0x108>
8000ac5a:	a6 32       	or %d2,%d3
8000ac5c:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000ac60:	8b 02 20 22 	ne %d2,%d2,0
8000ac64:	0f f2 e0 20 	andn %d2,%d2,%d15
8000ac68:	76 27       	jz %d2,8000ac76 <__divdf3+0x108>
8000ac6a:	8b 00 88 00 	addx %d0,%d0,128
8000ac6e:	8b 07 a0 40 	addc %d4,%d7,0
8000ac72:	8f f0 cf 51 	andn %d5,%d0,255
8000ac76:	59 a5 1c 00 	st.w [%sp]28,%d5
8000ac7a:	59 a4 20 00 	st.w [%sp]32,%d4
8000ac7e:	d9 a4 10 00 	lea %a4,[%sp]16
8000ac82:	1d 00 a8 00 	j 8000add2 <__pack_d>

8000ac86 <__floatsidf>:
8000ac86:	20 18       	sub.a %sp,24
8000ac88:	82 3f       	mov %d15,3
8000ac8a:	2c a4       	st.b [%sp]4,%d15
8000ac8c:	8f 14 1e f0 	sh %d15,%d4,-31
8000ac90:	78 02       	st.w [%sp]8,%d15
8000ac92:	f6 44       	jnz %d4,8000ac9a <__floatsidf+0x14>
8000ac94:	82 2f       	mov %d15,2
8000ac96:	2c a4       	st.b [%sp]4,%d15
8000ac98:	3c 16       	j 8000acc4 <__floatsidf+0x3e>
8000ac9a:	6e 09       	jz %d15,8000acac <__floatsidf+0x26>
8000ac9c:	7b 00 00 f8 	movh %d15,32768
8000aca0:	82 02       	mov %d2,0
8000aca2:	7b 00 1e 3c 	movh %d3,49632
8000aca6:	5f f4 13 00 	jeq %d4,%d15,8000accc <__floatsidf+0x46>
8000acaa:	32 54       	rsub %d4
8000acac:	0f 04 b0 f1 	clz %d15,%d4
8000acb0:	1b df 01 60 	addi %d6,%d15,29
8000acb4:	82 05       	mov %d5,0
8000acb6:	6d 00 39 00 	call 8000ad28 <__ashldi3>
8000acba:	8b ff 01 f1 	rsub %d15,%d15,31
8000acbe:	89 a2 50 09 	st.d [%sp]16,%e2
8000acc2:	78 03       	st.w [%sp]12,%d15
8000acc4:	d9 a4 04 00 	lea %a4,[%sp]4
8000acc8:	6d 00 85 00 	call 8000add2 <__pack_d>
8000accc:	00 90       	ret 

8000acce <__make_dp>:
8000acce:	20 18       	sub.a %sp,24
8000acd0:	09 a2 58 09 	ld.d %e2,[%sp]24
8000acd4:	d9 a4 04 00 	lea %a4,[%sp]4
8000acd8:	e9 a4 04 00 	st.b [%sp]4,%d4
8000acdc:	59 a5 08 00 	st.w [%sp]8,%d5
8000ace0:	59 a6 0c 00 	st.w [%sp]12,%d6
8000ace4:	89 a2 50 09 	st.d [%sp]16,%e2
8000ace8:	1d 00 75 00 	j 8000add2 <__pack_d>

8000acec <__truncdfsf2>:
8000acec:	20 20       	sub.a %sp,32
8000acee:	d9 a4 20 00 	lea %a4,[%sp]32
8000acf2:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000acf6:	d9 a5 0c 00 	lea %a5,[%sp]12
8000acfa:	6d 00 f5 00 	call 8000aee4 <__unpack_d>
8000acfe:	19 a7 18 00 	ld.w %d7,[%sp]24
8000ad02:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ad06:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000ad0a:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000ad0e:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000ad12:	02 23       	mov %d3,%d2
8000ad14:	8f 12 40 21 	or %d2,%d2,1
8000ad18:	19 a5 10 00 	ld.w %d5,[%sp]16
8000ad1c:	19 a6 14 00 	ld.w %d6,[%sp]20
8000ad20:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000ad24:	1d 00 4c 00 	j 8000adbc <__make_fp>

8000ad28 <__ashldi3>:
8000ad28:	6f 56 07 80 	jnz.t %d6,5,8000ad36 <__ashldi3+0xe>
8000ad2c:	0f 64 00 20 	sh %d2,%d4,%d6
8000ad30:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000ad34:	00 90       	ret 
8000ad36:	8b 06 1e 60 	add %d6,%d6,-32
8000ad3a:	82 02       	mov %d2,0
8000ad3c:	0f 64 00 30 	sh %d3,%d4,%d6
8000ad40:	00 90       	ret 

8000ad42 <__unpack_f>:
8000ad42:	54 43       	ld.w %d3,[%a4]
8000ad44:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000ad48:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000ad4c:	8f 13 1e 30 	sh %d3,%d3,-31
8000ad50:	59 53 04 00 	st.w [%a5]4,%d3
8000ad54:	df 02 18 80 	jne %d2,0,8000ad84 <__unpack_f+0x42>
8000ad58:	ee 03       	jnz %d15,8000ad5e <__unpack_f+0x1c>
8000ad5a:	82 2f       	mov %d15,2
8000ad5c:	3c 19       	j 8000ad8e <__unpack_f+0x4c>
8000ad5e:	3b 20 f8 2f 	mov %d2,-126
8000ad62:	59 52 08 00 	st.w [%a5]8,%d2
8000ad66:	82 32       	mov %d2,3
8000ad68:	34 52       	st.b [%a5],%d2
8000ad6a:	06 7f       	sh %d15,7
8000ad6c:	3b 10 f8 2f 	mov %d2,-127
8000ad70:	7b 00 00 44 	movh %d4,16384
8000ad74:	06 1f       	sh %d15,1
8000ad76:	02 23       	mov %d3,%d2
8000ad78:	c2 f2       	add %d2,-1
8000ad7a:	3f 4f fd ff 	jlt.u %d15,%d4,8000ad74 <__unpack_f+0x32>
8000ad7e:	59 53 08 00 	st.w [%a5]8,%d3
8000ad82:	3c 1b       	j 8000adb8 <__unpack_f+0x76>
8000ad84:	8b f2 2f 32 	ne %d3,%d2,255
8000ad88:	f6 3f       	jnz %d3,8000ada6 <__unpack_f+0x64>
8000ad8a:	ee 04       	jnz %d15,8000ad92 <__unpack_f+0x50>
8000ad8c:	82 4f       	mov %d15,4
8000ad8e:	2c 50       	st.b [%a5]0,%d15
8000ad90:	00 90       	ret 
8000ad92:	7b 00 04 20 	movh %d2,64
8000ad96:	26 f2       	and %d2,%d15
8000ad98:	76 22       	jz %d2,8000ad9c <__unpack_f+0x5a>
8000ad9a:	82 12       	mov %d2,1
8000ad9c:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000ada0:	34 52       	st.b [%a5],%d2
8000ada2:	06 7f       	sh %d15,7
8000ada4:	3c 0a       	j 8000adb8 <__unpack_f+0x76>
8000ada6:	1b 12 f8 2f 	addi %d2,%d2,-127
8000adaa:	06 7f       	sh %d15,7
8000adac:	59 52 08 00 	st.w [%a5]8,%d2
8000adb0:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000adb4:	82 32       	mov %d2,3
8000adb6:	34 52       	st.b [%a5],%d2
8000adb8:	6c 53       	st.w [%a5]12,%d15
8000adba:	00 90       	ret 

8000adbc <__make_fp>:
8000adbc:	20 10       	sub.a %sp,16
8000adbe:	40 a4       	mov.aa %a4,%sp
8000adc0:	34 a4       	st.b [%sp],%d4
8000adc2:	59 a5 04 00 	st.w [%sp]4,%d5
8000adc6:	59 a6 08 00 	st.w [%sp]8,%d6
8000adca:	59 a7 0c 00 	st.w [%sp]12,%d7
8000adce:	1d 00 e1 00 	j 8000af90 <__pack_f>

8000add2 <__pack_d>:
8000add2:	14 42       	ld.bu %d2,[%a4]
8000add4:	19 49 0c 00 	ld.w %d9,[%a4]12
8000add8:	19 48 10 00 	ld.w %d8,[%a4]16
8000addc:	19 4c 04 00 	ld.w %d12,[%a4]4
8000ade0:	ff 22 0b 80 	jge.u %d2,2,8000adf6 <__pack_d+0x24>
8000ade4:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000ade8:	06 88       	sh %d8,-8
8000adea:	02 95       	mov %d5,%d9
8000adec:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000adf0:	3b f0 7f f0 	mov %d15,2047
8000adf4:	3c 6f       	j 8000aed2 <__pack_d+0x100>
8000adf6:	3b f0 7f f0 	mov %d15,2047
8000adfa:	d2 04       	mov %e4,0
8000adfc:	df 42 6b 00 	jeq %d2,4,8000aed2 <__pack_d+0x100>
8000ae00:	0f 89 a0 f0 	or %d15,%d9,%d8
8000ae04:	8b 22 00 32 	eq %d3,%d2,2
8000ae08:	8b 0f e0 34 	or.eq %d3,%d15,0
8000ae0c:	82 0f       	mov %d15,0
8000ae0e:	df 03 62 80 	jne %d3,0,8000aed2 <__pack_d+0x100>
8000ae12:	19 42 08 00 	ld.w %d2,[%a4]8
8000ae16:	3b 20 c0 ff 	mov %d15,-1022
8000ae1a:	7f f2 36 00 	jge %d2,%d15,8000ae86 <__pack_d+0xb4>
8000ae1e:	a2 2f       	sub %d15,%d2
8000ae20:	8b 9f 83 42 	ge %d4,%d15,57
8000ae24:	82 02       	mov %d2,0
8000ae26:	df 04 18 80 	jne %d4,0,8000ae56 <__pack_d+0x84>
8000ae2a:	0b 98 10 48 	mov %e4,%d8,%d9
8000ae2e:	02 f6       	mov %d6,%d15
8000ae30:	6d ff 97 fc 	call 8000a75e <__lshrdi3>
8000ae34:	d2 14       	mov %e4,1
8000ae36:	02 f6       	mov %d6,%d15
8000ae38:	0b 32 10 a8 	mov %e10,%d2,%d3
8000ae3c:	6d ff 76 ff 	call 8000ad28 <__ashldi3>
8000ae40:	8b f2 9f 20 	addx %d2,%d2,-1
8000ae44:	8b f3 bf 30 	addc %d3,%d3,-1
8000ae48:	26 29       	and %d9,%d2
8000ae4a:	26 38       	and %d8,%d3
8000ae4c:	a6 98       	or %d8,%d9
8000ae4e:	02 b2       	mov %d2,%d11
8000ae50:	8b 08 00 25 	or.ne %d2,%d8,0
8000ae54:	02 a3       	mov %d3,%d10
8000ae56:	02 2f       	mov %d15,%d2
8000ae58:	16 ff       	and %d15,255
8000ae5a:	8b 0f 28 f2 	ne %d15,%d15,128
8000ae5e:	ee 07       	jnz %d15,8000ae6c <__pack_d+0x9a>
8000ae60:	8f 02 10 f1 	and %d15,%d2,256
8000ae64:	6e 08       	jz %d15,8000ae74 <__pack_d+0xa2>
8000ae66:	8b 02 88 20 	addx %d2,%d2,128
8000ae6a:	3c 03       	j 8000ae70 <__pack_d+0x9e>
8000ae6c:	8b f2 87 20 	addx %d2,%d2,127
8000ae70:	8b 03 a0 30 	addc %d3,%d3,0
8000ae74:	7b 00 00 41 	movh %d4,4096
8000ae78:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000ae7c:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000ae80:	8f 83 1f 40 	sh %d4,%d3,-8
8000ae84:	3c 27       	j 8000aed2 <__pack_d+0x100>
8000ae86:	3b 00 40 30 	mov %d3,1024
8000ae8a:	3b f0 7f f0 	mov %d15,2047
8000ae8e:	7f 32 22 00 	jge %d2,%d3,8000aed2 <__pack_d+0x100>
8000ae92:	02 9f       	mov %d15,%d9
8000ae94:	16 ff       	and %d15,255
8000ae96:	8b 0f 28 f2 	ne %d15,%d15,128
8000ae9a:	ee 07       	jnz %d15,8000aea8 <__pack_d+0xd6>
8000ae9c:	8f 09 10 f1 	and %d15,%d9,256
8000aea0:	6e 08       	jz %d15,8000aeb0 <__pack_d+0xde>
8000aea2:	8b 09 88 90 	addx %d9,%d9,128
8000aea6:	3c 03       	j 8000aeac <__pack_d+0xda>
8000aea8:	8b f9 87 90 	addx %d9,%d9,127
8000aeac:	8b 08 a0 80 	addc %d8,%d8,0
8000aeb0:	7b 00 00 32 	movh %d3,8192
8000aeb4:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000aeb8:	ee 04       	jnz %d15,8000aec0 <__pack_d+0xee>
8000aeba:	1b f2 3f f0 	addi %d15,%d2,1023
8000aebe:	3c 06       	j 8000aeca <__pack_d+0xf8>
8000aec0:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000aec4:	1b 02 40 f0 	addi %d15,%d2,1024
8000aec8:	06 f8       	sh %d8,-1
8000aeca:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000aece:	8f 88 1f 40 	sh %d4,%d8,-8
8000aed2:	d2 02       	mov %e2,0
8000aed4:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000aed8:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000aedc:	02 52       	mov %d2,%d5
8000aede:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000aee2:	00 90       	ret 

8000aee4 <__unpack_d>:
8000aee4:	19 44 04 00 	ld.w %d4,[%a4]4
8000aee8:	54 42       	ld.w %d2,[%a4]
8000aeea:	37 04 74 50 	extr.u %d5,%d4,0,20
8000aeee:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000aef2:	8f 14 1e 40 	sh %d4,%d4,-31
8000aef6:	59 54 04 00 	st.w [%a5]4,%d4
8000aefa:	02 53       	mov %d3,%d5
8000aefc:	ee 21       	jnz %d15,8000af3e <__unpack_d+0x5a>
8000aefe:	0f 25 a0 f0 	or %d15,%d5,%d2
8000af02:	ee 03       	jnz %d15,8000af08 <__unpack_d+0x24>
8000af04:	82 2f       	mov %d15,2
8000af06:	3c 23       	j 8000af4c <__unpack_d+0x68>
8000af08:	3b 20 c0 ff 	mov %d15,-1022
8000af0c:	6c 52       	st.w [%a5]8,%d15
8000af0e:	82 3f       	mov %d15,3
8000af10:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000af14:	2c 50       	st.b [%a5]0,%d15
8000af16:	8f 82 00 20 	sh %d2,%d2,8
8000af1a:	3b 10 c0 ff 	mov %d15,-1023
8000af1e:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000af22:	7b 00 00 61 	movh %d6,4096
8000af26:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000af2a:	02 f4       	mov %d4,%d15
8000af2c:	06 12       	sh %d2,1
8000af2e:	c2 ff       	add %d15,-1
8000af30:	df 05 f7 ff 	jne %d5,0,8000af1e <__unpack_d+0x3a>
8000af34:	59 54 08 00 	st.w [%a5]8,%d4
8000af38:	59 52 0c 00 	st.w [%a5]12,%d2
8000af3c:	3c 27       	j 8000af8a <__unpack_d+0xa6>
8000af3e:	3b f0 7f 40 	mov %d4,2047
8000af42:	fe 47       	jne %d15,%d4,8000af70 <__unpack_d+0x8c>
8000af44:	0f 25 a0 f0 	or %d15,%d5,%d2
8000af48:	ee 04       	jnz %d15,8000af50 <__unpack_d+0x6c>
8000af4a:	82 4f       	mov %d15,4
8000af4c:	2c 50       	st.b [%a5]0,%d15
8000af4e:	00 90       	ret 
8000af50:	7b 80 00 f0 	movh %d15,8
8000af54:	26 5f       	and %d15,%d5
8000af56:	6e 02       	jz %d15,8000af5a <__unpack_d+0x76>
8000af58:	82 1f       	mov %d15,1
8000af5a:	2c 50       	st.b [%a5]0,%d15
8000af5c:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000af60:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000af64:	8f 82 00 40 	sh %d4,%d2,8
8000af68:	59 54 0c 00 	st.w [%a5]12,%d4
8000af6c:	6c 54       	st.w [%a5]16,%d15
8000af6e:	00 90       	ret 
8000af70:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000af74:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000af78:	6c 52       	st.w [%a5]8,%d15
8000af7a:	8f 82 00 20 	sh %d2,%d2,8
8000af7e:	82 3f       	mov %d15,3
8000af80:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000af84:	2c 50       	st.b [%a5]0,%d15
8000af86:	59 52 0c 00 	st.w [%a5]12,%d2
8000af8a:	59 53 10 00 	st.w [%a5]16,%d3
8000af8e:	00 90       	ret 

8000af90 <__pack_f>:
8000af90:	14 45       	ld.bu %d5,[%a4]
8000af92:	4c 43       	ld.w %d15,[%a4]12
8000af94:	19 47 04 00 	ld.w %d7,[%a4]4
8000af98:	ff 25 09 80 	jge.u %d5,2,8000afaa <__pack_f+0x1a>
8000af9c:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000afa0:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000afa4:	3b f0 0f 40 	mov %d4,255
8000afa8:	3c 4f       	j 8000b046 <__pack_f+0xb6>
8000afaa:	3b f0 0f 40 	mov %d4,255
8000afae:	82 03       	mov %d3,0
8000afb0:	df 45 4b 00 	jeq %d5,4,8000b046 <__pack_f+0xb6>
8000afb4:	8b 25 00 62 	eq %d6,%d5,2
8000afb8:	8b 0f e0 64 	or.eq %d6,%d15,0
8000afbc:	82 04       	mov %d4,0
8000afbe:	df 06 44 80 	jne %d6,0,8000b046 <__pack_f+0xb6>
8000afc2:	19 45 08 00 	ld.w %d5,[%a4]8
8000afc6:	8b 25 98 42 	ge %d4,%d5,-126
8000afca:	df 04 24 80 	jne %d4,0,8000b012 <__pack_f+0x82>
8000afce:	8b 25 18 51 	rsub %d5,%d5,-126
8000afd2:	8b a5 81 42 	ge %d4,%d5,26
8000afd6:	f6 4c       	jnz %d4,8000afee <__pack_f+0x5e>
8000afd8:	82 12       	mov %d2,1
8000afda:	0f 52 00 20 	sh %d2,%d2,%d5
8000afde:	8b 05 00 31 	rsub %d3,%d5,0
8000afe2:	c2 f2       	add %d2,-1
8000afe4:	0f 3f 00 30 	sh %d3,%d15,%d3
8000afe8:	26 2f       	and %d15,%d2
8000afea:	8b 0f 00 35 	or.ne %d3,%d15,0
8000afee:	8f f3 07 f1 	and %d15,%d3,127
8000aff2:	8b 0f 24 f2 	ne %d15,%d15,64
8000aff6:	ee 06       	jnz %d15,8000b002 <__pack_f+0x72>
8000aff8:	8f 03 08 f1 	and %d15,%d3,128
8000affc:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000b000:	3c 03       	j 8000b006 <__pack_f+0x76>
8000b002:	1b f3 03 30 	addi %d3,%d3,63
8000b006:	7b 00 00 f4 	movh %d15,16384
8000b00a:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000b00e:	06 93       	sh %d3,-7
8000b010:	3c 1b       	j 8000b046 <__pack_f+0xb6>
8000b012:	8b 05 88 62 	ge %d6,%d5,128
8000b016:	3b f0 0f 40 	mov %d4,255
8000b01a:	df 06 16 80 	jne %d6,0,8000b046 <__pack_f+0xb6>
8000b01e:	8f ff 07 31 	and %d3,%d15,127
8000b022:	8b 03 24 32 	ne %d3,%d3,64
8000b026:	f6 36       	jnz %d3,8000b032 <__pack_f+0xa2>
8000b028:	8f 0f 08 31 	and %d3,%d15,128
8000b02c:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000b030:	3c 03       	j 8000b036 <__pack_f+0xa6>
8000b032:	1b ff 03 f0 	addi %d15,%d15,63
8000b036:	1b f5 07 40 	addi %d4,%d5,127
8000b03a:	ce f4       	jgez %d15,8000b042 <__pack_f+0xb2>
8000b03c:	06 ff       	sh %d15,-1
8000b03e:	1b 05 08 40 	addi %d4,%d5,128
8000b042:	8f 9f 1f 30 	sh %d3,%d15,-7
8000b046:	82 02       	mov %d2,0
8000b048:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000b04c:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000b050:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000b054:	00 90       	ret 

8000b056 <malloc>:
8000b056:	91 00 00 f7 	movh.a %a15,28672
8000b05a:	99 f4 50 40 	ld.a %a4,[%a15]1296 <70000510 <_impure_ptr>>
8000b05e:	1d 00 09 00 	j 8000b070 <_malloc_r>

8000b062 <free>:
8000b062:	91 00 00 f7 	movh.a %a15,28672
8000b066:	40 45       	mov.aa %a5,%a4
8000b068:	99 f4 50 40 	ld.a %a4,[%a15]1296 <70000510 <_impure_ptr>>
8000b06c:	1d 00 f7 02 	j 8000b65a <_free_r>

8000b070 <_malloc_r>:
8000b070:	1b b4 00 f0 	addi %d15,%d4,11
8000b074:	8b 7f 61 82 	lt.u %d8,%d15,23
8000b078:	8f 7f c0 f1 	andn %d15,%d15,7
8000b07c:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000b080:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000b084:	8b 08 20 45 	or.lt %d4,%d8,0
8000b088:	40 4d       	mov.aa %a13,%a4
8000b08a:	76 45       	jz %d4,8000b094 <_malloc_r+0x24>
8000b08c:	da 0c       	mov %d15,12
8000b08e:	6c 40       	st.w [%a4]0,%d15
8000b090:	1d 00 2a 02 	j 8000b4e4 <_malloc_r+0x474>
8000b094:	91 00 00 f7 	movh.a %a15,28672
8000b098:	8b 88 bf f2 	ge.u %d15,%d8,504
8000b09c:	6d 00 37 02 	call 8000b50a <__malloc_lock>
8000b0a0:	d9 ff 08 40 	lea %a15,[%a15]264 <70000108 <__malloc_av_>>
8000b0a4:	ee 19       	jnz %d15,8000b0d6 <_malloc_r+0x66>
8000b0a6:	8f d8 1f 20 	sh %d2,%d8,-3
8000b0aa:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b0ae:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b0b2:	7d 2c 09 80 	jne.a %a12,%a2,8000b0c4 <_malloc_r+0x54>
8000b0b6:	d9 c2 08 00 	lea %a2,[%a12]8
8000b0ba:	99 cc 14 00 	ld.a %a12,[%a12]20
8000b0be:	c2 22       	add %d2,2
8000b0c0:	7d 2c 58 00 	jeq.a %a12,%a2,8000b170 <_malloc_r+0x100>
8000b0c4:	cc c3       	ld.a %a15,[%a12]12
8000b0c6:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b0ca:	4c c1       	ld.w %d15,[%a12]4
8000b0cc:	ec 23       	st.a [%a2]12,%a15
8000b0ce:	8f 3f c0 f1 	andn %d15,%d15,3
8000b0d2:	e8 22       	st.a [%a15]8,%a2
8000b0d4:	3c 74       	j 8000b1bc <_malloc_r+0x14c>
8000b0d6:	8f 78 1f f0 	sh %d15,%d8,-9
8000b0da:	3b f0 03 20 	mov %d2,63
8000b0de:	6e 27       	jz %d15,8000b12c <_malloc_r+0xbc>
8000b0e0:	8f a8 1f 20 	sh %d2,%d8,-6
8000b0e4:	1b 82 03 20 	addi %d2,%d2,56
8000b0e8:	bf 5f 22 80 	jlt.u %d15,5,8000b12c <_malloc_r+0xbc>
8000b0ec:	8b 5f a1 22 	ge.u %d2,%d15,21
8000b0f0:	f6 24       	jnz %d2,8000b0f8 <_malloc_r+0x88>
8000b0f2:	1b bf 05 20 	addi %d2,%d15,91
8000b0f6:	3c 1b       	j 8000b12c <_malloc_r+0xbc>
8000b0f8:	8b 5f a5 22 	ge.u %d2,%d15,85
8000b0fc:	f6 26       	jnz %d2,8000b108 <_malloc_r+0x98>
8000b0fe:	8f 48 1f 20 	sh %d2,%d8,-12
8000b102:	1b e2 06 20 	addi %d2,%d2,110
8000b106:	3c 13       	j 8000b12c <_malloc_r+0xbc>
8000b108:	8b 5f b5 22 	ge.u %d2,%d15,341
8000b10c:	f6 26       	jnz %d2,8000b118 <_malloc_r+0xa8>
8000b10e:	8f 18 1f 20 	sh %d2,%d8,-15
8000b112:	1b 72 07 20 	addi %d2,%d2,119
8000b116:	3c 0b       	j 8000b12c <_malloc_r+0xbc>
8000b118:	3b 50 55 30 	mov %d3,1365
8000b11c:	3b e0 07 20 	mov %d2,126
8000b120:	7f 3f 06 80 	jge.u %d15,%d3,8000b12c <_malloc_r+0xbc>
8000b124:	8f e8 1e 20 	sh %d2,%d8,-18
8000b128:	1b c2 07 20 	addi %d2,%d2,124
8000b12c:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b130:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000b134:	7d 2c 1d 00 	jeq.a %a12,%a2,8000b16e <_malloc_r+0xfe>
8000b138:	19 c4 04 00 	ld.w %d4,[%a12]4
8000b13c:	8f 34 c0 41 	andn %d4,%d4,3
8000b140:	5a 84       	sub %d15,%d4,%d8
8000b142:	8b 0f 41 32 	lt %d3,%d15,16
8000b146:	f6 33       	jnz %d3,8000b14c <_malloc_r+0xdc>
8000b148:	c2 f2       	add %d2,-1
8000b14a:	3c 12       	j 8000b16e <_malloc_r+0xfe>
8000b14c:	0e fe       	jltz %d15,8000b168 <_malloc_r+0xf8>
8000b14e:	cc c3       	ld.a %a15,[%a12]12
8000b150:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b154:	ec 23       	st.a [%a2]12,%a15
8000b156:	e8 22       	st.a [%a15]8,%a2
8000b158:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000b15c:	b7 10 21 20 	imask %e2,1,0,1
8000b160:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b164:	1d 00 cc 01 	j 8000b4fc <_malloc_r+0x48c>
8000b168:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b16c:	3c e4       	j 8000b134 <_malloc_r+0xc4>
8000b16e:	c2 12       	add %d2,1
8000b170:	c8 4c       	ld.a %a12,[%a15]16
8000b172:	91 00 00 37 	movh.a %a3,28672
8000b176:	d9 33 10 40 	lea %a3,[%a3]272 <70000110 <__malloc_av_+0x8>>
8000b17a:	7d 3c 83 00 	jeq.a %a12,%a3,8000b280 <_malloc_r+0x210>
8000b17e:	4c c1       	ld.w %d15,[%a12]4
8000b180:	8f 3f c0 f1 	andn %d15,%d15,3
8000b184:	52 83       	sub %d3,%d15,%d8
8000b186:	8b 03 41 42 	lt %d4,%d3,16
8000b18a:	df 04 16 80 	jne %d4,0,8000b1b6 <_malloc_r+0x146>
8000b18e:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b192:	8f 18 40 81 	or %d8,%d8,1
8000b196:	59 c8 04 00 	st.w [%a12]4,%d8
8000b19a:	e8 52       	st.a [%a15]20,%a2
8000b19c:	e8 42       	st.a [%a15]16,%a2
8000b19e:	8f 13 40 f1 	or %d15,%d3,1
8000b1a2:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b1a6:	b5 23 08 00 	st.a [%a2]8,%a3
8000b1aa:	6c 21       	st.w [%a2]4,%d15
8000b1ac:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b1b0:	74 23       	st.w [%a2],%d3
8000b1b2:	1d 00 a5 01 	j 8000b4fc <_malloc_r+0x48c>
8000b1b6:	e8 53       	st.a [%a15]20,%a3
8000b1b8:	e8 43       	st.a [%a15]16,%a3
8000b1ba:	0e 33       	jltz %d3,8000b1c0 <_malloc_r+0x150>
8000b1bc:	10 cf       	addsc.a %a15,%a12,%d15,0
8000b1be:	3c cf       	j 8000b15c <_malloc_r+0xec>
8000b1c0:	3b 00 20 30 	mov %d3,512
8000b1c4:	7f 3f 15 80 	jge.u %d15,%d3,8000b1ee <_malloc_r+0x17e>
8000b1c8:	06 df       	sh %d15,-3
8000b1ca:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000b1cc:	48 14       	ld.w %d4,[%a15]4
8000b1ce:	99 24 08 00 	ld.a %a4,[%a2]8
8000b1d2:	8f ef 3f 30 	sha %d3,%d15,-2
8000b1d6:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000b1da:	b5 c4 08 00 	st.a [%a12]8,%a4
8000b1de:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000b1e2:	b5 2c 08 00 	st.a [%a2]8,%a12
8000b1e6:	68 13       	st.w [%a15]4,%d3
8000b1e8:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000b1ec:	3c 4a       	j 8000b280 <_malloc_r+0x210>
8000b1ee:	8f af 1f 40 	sh %d4,%d15,-6
8000b1f2:	8f 7f 1f 30 	sh %d3,%d15,-9
8000b1f6:	1b 84 03 40 	addi %d4,%d4,56
8000b1fa:	bf 53 22 80 	jlt.u %d3,5,8000b23e <_malloc_r+0x1ce>
8000b1fe:	8b 53 a1 42 	ge.u %d4,%d3,21
8000b202:	f6 44       	jnz %d4,8000b20a <_malloc_r+0x19a>
8000b204:	1b b3 05 40 	addi %d4,%d3,91
8000b208:	3c 1b       	j 8000b23e <_malloc_r+0x1ce>
8000b20a:	8b 53 a5 42 	ge.u %d4,%d3,85
8000b20e:	f6 46       	jnz %d4,8000b21a <_malloc_r+0x1aa>
8000b210:	8f 4f 1f 40 	sh %d4,%d15,-12
8000b214:	1b e4 06 40 	addi %d4,%d4,110
8000b218:	3c 13       	j 8000b23e <_malloc_r+0x1ce>
8000b21a:	8b 53 b5 42 	ge.u %d4,%d3,341
8000b21e:	f6 46       	jnz %d4,8000b22a <_malloc_r+0x1ba>
8000b220:	8f 1f 1f 40 	sh %d4,%d15,-15
8000b224:	1b 74 07 40 	addi %d4,%d4,119
8000b228:	3c 0b       	j 8000b23e <_malloc_r+0x1ce>
8000b22a:	3b 50 55 50 	mov %d5,1365
8000b22e:	3b e0 07 40 	mov %d4,126
8000b232:	7f 53 06 80 	jge.u %d3,%d5,8000b23e <_malloc_r+0x1ce>
8000b236:	8f ef 1e 40 	sh %d4,%d15,-18
8000b23a:	1b c4 07 40 	addi %d4,%d4,124
8000b23e:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000b242:	99 42 08 00 	ld.a %a2,[%a4]8
8000b246:	7d 42 0d 80 	jne.a %a2,%a4,8000b260 <_malloc_r+0x1f0>
8000b24a:	4c f1       	ld.w %d15,[%a15]4
8000b24c:	86 e4       	sha %d4,-2
8000b24e:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000b252:	40 24       	mov.aa %a4,%a2
8000b254:	68 14       	st.w [%a15]4,%d4
8000b256:	3c 0d       	j 8000b270 <_malloc_r+0x200>
8000b258:	99 22 08 00 	ld.a %a2,[%a2]8
8000b25c:	7d 42 08 00 	jeq.a %a2,%a4,8000b26c <_malloc_r+0x1fc>
8000b260:	19 23 04 00 	ld.w %d3,[%a2]4
8000b264:	8f 33 c0 31 	andn %d3,%d3,3
8000b268:	3f 3f f8 ff 	jlt.u %d15,%d3,8000b258 <_malloc_r+0x1e8>
8000b26c:	99 24 0c 00 	ld.a %a4,[%a2]12
8000b270:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000b274:	b5 c2 08 00 	st.a [%a12]8,%a2
8000b278:	b5 4c 08 00 	st.a [%a4]8,%a12
8000b27c:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000b280:	8f e2 3f 30 	sha %d3,%d2,-2
8000b284:	82 1f       	mov %d15,1
8000b286:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000b28a:	48 13       	ld.w %d3,[%a15]4
8000b28c:	3f f3 73 80 	jlt.u %d3,%d15,8000b372 <_malloc_r+0x302>
8000b290:	0f 3f 80 40 	and %d4,%d15,%d3
8000b294:	f6 49       	jnz %d4,8000b2a6 <_malloc_r+0x236>
8000b296:	8f 32 c0 21 	andn %d2,%d2,3
8000b29a:	06 1f       	sh %d15,1
8000b29c:	0f 3f 80 40 	and %d4,%d15,%d3
8000b2a0:	c2 42       	add %d2,4
8000b2a2:	df 04 fc 7f 	jeq %d4,0,8000b29a <_malloc_r+0x22a>
8000b2a6:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000b2aa:	02 24       	mov %d4,%d2
8000b2ac:	40 24       	mov.aa %a4,%a2
8000b2ae:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000b2b2:	7d 4c 3c 00 	jeq.a %a12,%a4,8000b32a <_malloc_r+0x2ba>
8000b2b6:	19 c6 04 00 	ld.w %d6,[%a12]4
8000b2ba:	8f 36 c0 61 	andn %d6,%d6,3
8000b2be:	0b 86 80 30 	sub %d3,%d6,%d8
8000b2c2:	8b 03 41 52 	lt %d5,%d3,16
8000b2c6:	df 05 1d 80 	jne %d5,0,8000b300 <_malloc_r+0x290>
8000b2ca:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b2ce:	8f 18 40 81 	or %d8,%d8,1
8000b2d2:	59 c8 04 00 	st.w [%a12]4,%d8
8000b2d6:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000b2da:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000b2de:	8f 13 40 f1 	or %d15,%d3,1
8000b2e2:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b2e6:	b5 45 08 00 	st.a [%a4]8,%a5
8000b2ea:	e8 52       	st.a [%a15]20,%a2
8000b2ec:	e8 42       	st.a [%a15]16,%a2
8000b2ee:	b5 23 0c 00 	st.a [%a2]12,%a3
8000b2f2:	b5 23 08 00 	st.a [%a2]8,%a3
8000b2f6:	6c 21       	st.w [%a2]4,%d15
8000b2f8:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000b2fc:	74 23       	st.w [%a2],%d3
8000b2fe:	3c 0e       	j 8000b31a <_malloc_r+0x2aa>
8000b300:	bf 03 12 00 	jlt %d3,0,8000b324 <_malloc_r+0x2b4>
8000b304:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000b308:	b7 10 21 20 	imask %e2,1,0,1
8000b30c:	49 f2 44 08 	ldmst [%a15]4,%e2
8000b310:	cc c3       	ld.a %a15,[%a12]12
8000b312:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000b316:	ec 23       	st.a [%a2]12,%a15
8000b318:	e8 22       	st.a [%a15]8,%a2
8000b31a:	40 d4       	mov.aa %a4,%a13
8000b31c:	6d 00 f8 00 	call 8000b50c <__malloc_unlock>
8000b320:	1d 00 f3 00 	j 8000b506 <_malloc_r+0x496>
8000b324:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000b328:	3c c5       	j 8000b2b2 <_malloc_r+0x242>
8000b32a:	c2 14       	add %d4,1
8000b32c:	8f 34 00 31 	and %d3,%d4,3
8000b330:	d9 44 08 00 	lea %a4,[%a4]8
8000b334:	df 03 bd ff 	jne %d3,0,8000b2ae <_malloc_r+0x23e>
8000b338:	8f 32 00 31 	and %d3,%d2,3
8000b33c:	f6 36       	jnz %d3,8000b348 <_malloc_r+0x2d8>
8000b33e:	48 12       	ld.w %d2,[%a15]4
8000b340:	0f f2 e0 20 	andn %d2,%d2,%d15
8000b344:	68 12       	st.w [%a15]4,%d2
8000b346:	3c 07       	j 8000b354 <_malloc_r+0x2e4>
8000b348:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000b34c:	d4 22       	ld.a %a2,[%a2]
8000b34e:	c2 f2       	add %d2,-1
8000b350:	7d 42 f4 7f 	jeq.a %a2,%a4,8000b338 <_malloc_r+0x2c8>
8000b354:	06 1f       	sh %d15,1
8000b356:	48 12       	ld.w %d2,[%a15]4
8000b358:	8b 0f 20 32 	ne %d3,%d15,0
8000b35c:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000b360:	76 39       	jz %d3,8000b372 <_malloc_r+0x302>
8000b362:	0f 2f 80 30 	and %d3,%d15,%d2
8000b366:	f6 34       	jnz %d3,8000b36e <_malloc_r+0x2fe>
8000b368:	c2 44       	add %d4,4
8000b36a:	06 1f       	sh %d15,1
8000b36c:	3c fb       	j 8000b362 <_malloc_r+0x2f2>
8000b36e:	02 42       	mov %d2,%d4
8000b370:	3c 9b       	j 8000b2a6 <_malloc_r+0x236>
8000b372:	c8 2c       	ld.a %a12,[%a15]8
8000b374:	19 ca 04 00 	ld.w %d10,[%a12]4
8000b378:	8f 3a c0 a1 	andn %d10,%d10,3
8000b37c:	5a 8a       	sub %d15,%d10,%d8
8000b37e:	8b 0f 41 22 	lt %d2,%d15,16
8000b382:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000b386:	df 02 b1 00 	jeq %d2,0,8000b4e8 <_malloc_r+0x478>
8000b38a:	91 00 00 27 	movh.a %a2,28672
8000b38e:	19 2b c0 c0 	ld.w %d11,[%a2]3840 <70000f00 <__malloc_top_pad>>
8000b392:	91 00 00 27 	movh.a %a2,28672
8000b396:	42 8b       	add %d11,%d8
8000b398:	19 23 00 40 	ld.w %d3,[%a2]256 <70000100 <__malloc_sbrk_base>>
8000b39c:	1b fb 00 f1 	addi %d15,%d11,4111
8000b3a0:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b3a4:	1b 0b 01 20 	addi %d2,%d11,16
8000b3a8:	8b f3 3f b2 	ne %d11,%d3,-1
8000b3ac:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000b3b0:	40 d4       	mov.aa %a4,%a13
8000b3b2:	02 b4       	mov %d4,%d11
8000b3b4:	80 2c       	mov.d %d12,%a2
8000b3b6:	6d 00 ac 00 	call 8000b50e <_sbrk_r>
8000b3ba:	80 29       	mov.d %d9,%a2
8000b3bc:	df f9 86 00 	jeq %d9,-1,8000b4c8 <_malloc_r+0x458>
8000b3c0:	80 c2       	mov.d %d2,%a12
8000b3c2:	80 c3       	mov.d %d3,%a12
8000b3c4:	42 a2       	add %d2,%d10
8000b3c6:	80 f4       	mov.d %d4,%a15
8000b3c8:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000b3cc:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000b3d0:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000b3d4:	ee 7a       	jnz %d15,8000b4c8 <_malloc_r+0x458>
8000b3d6:	91 00 00 e7 	movh.a %a14,28672
8000b3da:	19 e3 d0 b0 	ld.w %d3,[%a14]3792 <70000ed0 <__malloc_current_mallinfo>>
8000b3de:	42 b3       	add %d3,%d11
8000b3e0:	59 e3 d0 b0 	st.w [%a14]3792 <70000ed0 <__malloc_current_mallinfo>>,%d3
8000b3e4:	5f 29 0c 80 	jne %d9,%d2,8000b3fc <_malloc_r+0x38c>
8000b3e8:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000b3ec:	ee 08       	jnz %d15,8000b3fc <_malloc_r+0x38c>
8000b3ee:	c8 22       	ld.a %a2,[%a15]8
8000b3f0:	42 ba       	add %d10,%d11
8000b3f2:	8f 1a 40 a1 	or %d10,%d10,1
8000b3f6:	59 2a 04 00 	st.w [%a2]4,%d10
8000b3fa:	3c 55       	j 8000b4a4 <_malloc_r+0x434>
8000b3fc:	60 c2       	mov.a %a2,%d12
8000b3fe:	19 2f 00 40 	ld.w %d15,[%a2]256
8000b402:	5e f6       	jne %d15,-1,8000b40e <_malloc_r+0x39e>
8000b404:	91 00 00 27 	movh.a %a2,28672
8000b408:	59 29 00 40 	st.w [%a2]256 <70000100 <__malloc_sbrk_base>>,%d9
8000b40c:	3c 06       	j 8000b418 <_malloc_r+0x3a8>
8000b40e:	0b 29 80 20 	sub %d2,%d9,%d2
8000b412:	42 23       	add %d3,%d2
8000b414:	59 e3 d0 b0 	st.w [%a14]3792 <70000ed0 <__malloc_current_mallinfo>>,%d3
8000b418:	8f 79 00 21 	and %d2,%d9,7
8000b41c:	82 0f       	mov %d15,0
8000b41e:	76 24       	jz %d2,8000b426 <_malloc_r+0x3b6>
8000b420:	8b 82 00 f1 	rsub %d15,%d2,8
8000b424:	42 f9       	add %d9,%d15
8000b426:	42 9b       	add %d11,%d9
8000b428:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000b42c:	1b 0f 00 21 	addi %d2,%d15,4096
8000b430:	5a b2       	sub %d15,%d2,%d11
8000b432:	40 d4       	mov.aa %a4,%a13
8000b434:	02 f4       	mov %d4,%d15
8000b436:	6d 00 6c 00 	call 8000b50e <_sbrk_r>
8000b43a:	80 22       	mov.d %d2,%a2
8000b43c:	df f2 04 80 	jne %d2,-1,8000b444 <_malloc_r+0x3d4>
8000b440:	60 92       	mov.a %a2,%d9
8000b442:	82 0f       	mov %d15,0
8000b444:	80 2b       	mov.d %d11,%a2
8000b446:	19 e2 d0 b0 	ld.w %d2,[%a14]3792 <70000ed0 <__malloc_current_mallinfo>>
8000b44a:	a2 9b       	sub %d11,%d9
8000b44c:	42 f2       	add %d2,%d15
8000b44e:	60 92       	mov.a %a2,%d9
8000b450:	42 bf       	add %d15,%d11
8000b452:	68 29       	st.w [%a15]8,%d9
8000b454:	8f 1f 40 31 	or %d3,%d15,1
8000b458:	59 e2 d0 b0 	st.w [%a14]3792 <70000ed0 <__malloc_current_mallinfo>>,%d2
8000b45c:	59 23 04 00 	st.w [%a2]4 <70000ed0 <__malloc_current_mallinfo>>,%d3
8000b460:	df 0d 22 00 	jeq %d13,0,8000b4a4 <_malloc_r+0x434>
8000b464:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000b468:	ee 05       	jnz %d15,8000b472 <_malloc_r+0x402>
8000b46a:	82 12       	mov %d2,1
8000b46c:	59 22 04 00 	st.w [%a2]4,%d2
8000b470:	3c 2c       	j 8000b4c8 <_malloc_r+0x458>
8000b472:	1b 4a ff af 	addi %d10,%d10,-12
8000b476:	8f 7a c0 f1 	andn %d15,%d10,7
8000b47a:	10 c2       	addsc.a %a2,%a12,%d15,0
8000b47c:	82 52       	mov %d2,5
8000b47e:	59 22 04 00 	st.w [%a2]4,%d2
8000b482:	59 22 08 00 	st.w [%a2]8,%d2
8000b486:	19 c2 04 00 	ld.w %d2,[%a12]4
8000b48a:	8f 12 00 21 	and %d2,%d2,1
8000b48e:	a6 f2       	or %d2,%d15
8000b490:	59 c2 04 00 	st.w [%a12]4,%d2
8000b494:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000b498:	ee 06       	jnz %d15,8000b4a4 <_malloc_r+0x434>
8000b49a:	40 d4       	mov.aa %a4,%a13
8000b49c:	d9 c5 08 00 	lea %a5,[%a12]8
8000b4a0:	6d 00 dd 00 	call 8000b65a <_free_r>
8000b4a4:	91 00 00 27 	movh.a %a2,28672
8000b4a8:	19 ef d0 b0 	ld.w %d15,[%a14]3792 <70000ed0 <__malloc_current_mallinfo>>
8000b4ac:	19 22 fc b0 	ld.w %d2,[%a2]3836 <70000efc <__malloc_max_sbrked_mem>>
8000b4b0:	7f f2 04 80 	jge.u %d2,%d15,8000b4b8 <_malloc_r+0x448>
8000b4b4:	59 2f fc b0 	st.w [%a2]3836 <70000efc <__malloc_max_sbrked_mem>>,%d15
8000b4b8:	91 00 00 27 	movh.a %a2,28672
8000b4bc:	19 22 f8 b0 	ld.w %d2,[%a2]3832 <70000ef8 <__malloc_max_total_mem>>
8000b4c0:	7f f2 04 80 	jge.u %d2,%d15,8000b4c8 <_malloc_r+0x458>
8000b4c4:	59 2f f8 b0 	st.w [%a2]3832 <70000ef8 <__malloc_max_total_mem>>,%d15
8000b4c8:	c8 22       	ld.a %a2,[%a15]8
8000b4ca:	19 22 04 00 	ld.w %d2,[%a2]4 <70000ef8 <__malloc_max_total_mem>>
8000b4ce:	8f 32 c0 21 	andn %d2,%d2,3
8000b4d2:	5a 82       	sub %d15,%d2,%d8
8000b4d4:	8b 0f 41 32 	lt %d3,%d15,16
8000b4d8:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000b4dc:	76 36       	jz %d3,8000b4e8 <_malloc_r+0x478>
8000b4de:	40 d4       	mov.aa %a4,%a13
8000b4e0:	6d 00 16 00 	call 8000b50c <__malloc_unlock>
8000b4e4:	a0 0c       	mov.a %a12,0
8000b4e6:	3c 10       	j 8000b506 <_malloc_r+0x496>
8000b4e8:	c8 2c       	ld.a %a12,[%a15]8
8000b4ea:	8f 18 40 21 	or %d2,%d8,1
8000b4ee:	96 01       	or %d15,1
8000b4f0:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000b4f4:	59 c2 04 00 	st.w [%a12]4,%d2
8000b4f8:	e8 22       	st.a [%a15]8,%a2
8000b4fa:	6c 21       	st.w [%a2]4,%d15
8000b4fc:	40 d4       	mov.aa %a4,%a13
8000b4fe:	6d 00 07 00 	call 8000b50c <__malloc_unlock>
8000b502:	d9 cc 08 00 	lea %a12,[%a12]8
8000b506:	40 c2       	mov.aa %a2,%a12
8000b508:	00 90       	ret 

8000b50a <__malloc_lock>:
8000b50a:	00 90       	ret 

8000b50c <__malloc_unlock>:
8000b50c:	00 90       	ret 

8000b50e <_sbrk_r>:
8000b50e:	82 0f       	mov %d15,0
8000b510:	91 00 00 c7 	movh.a %a12,28672
8000b514:	59 cf c8 c0 	st.w [%a12]3848 <70000f08 <errno>>,%d15
8000b518:	40 4f       	mov.aa %a15,%a4
8000b51a:	6d 00 2d 17 	call 8000e374 <sbrk>
8000b51e:	80 2f       	mov.d %d15,%a2
8000b520:	5e f5       	jne %d15,-1,8000b52a <_sbrk_r+0x1c>
8000b522:	19 cf c8 c0 	ld.w %d15,[%a12]3848 <70000f08 <errno>>
8000b526:	6e 02       	jz %d15,8000b52a <_sbrk_r+0x1c>
8000b528:	68 0f       	st.w [%a15]0,%d15
8000b52a:	00 90       	ret 

8000b52c <strlen>:
8000b52c:	80 42       	mov.d %d2,%a4
8000b52e:	80 4f       	mov.d %d15,%a4
8000b530:	60 ff       	mov.a %a15,%d15
8000b532:	79 f3 00 00 	ld.b %d3,[%a15]0
8000b536:	76 33       	jz %d3,8000b53c <strlen+0x10>
8000b538:	c2 1f       	add %d15,1
8000b53a:	3c fb       	j 8000b530 <strlen+0x4>
8000b53c:	52 22       	sub %d2,%d15,%d2
8000b53e:	00 90       	ret 

8000b540 <_vsnprintf_r>:
8000b540:	20 68       	sub.a %sp,104
8000b542:	40 4f       	mov.aa %a15,%a4
8000b544:	ce 45       	jgez %d4,8000b54e <_vsnprintf_r+0xe>
8000b546:	da 8b       	mov %d15,139
8000b548:	6c 40       	st.w [%a4]0,%d15
8000b54a:	82 f2       	mov %d2,-1
8000b54c:	00 90       	ret 
8000b54e:	02 4f       	mov %d15,%d4
8000b550:	3b 80 20 20 	mov %d2,520
8000b554:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000b558:	92 f2       	add %d2,%d15,-1
8000b55a:	ea 02       	cmovn %d2,%d15,0
8000b55c:	f4 a5       	st.a [%sp],%a5
8000b55e:	b5 a5 10 00 	st.a [%sp]16,%a5
8000b562:	59 a2 08 00 	st.w [%sp]8,%d2
8000b566:	59 a2 14 00 	st.w [%sp]20,%d2
8000b56a:	40 a5       	mov.aa %a5,%sp
8000b56c:	82 f2       	mov %d2,-1
8000b56e:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000b572:	6d 00 4b 01 	call 8000b808 <_svfprintf_r>
8000b576:	ff f2 05 00 	jge %d2,-1,8000b580 <_vsnprintf_r+0x40>
8000b57a:	3b b0 08 30 	mov %d3,139
8000b57e:	68 03       	st.w [%a15]0,%d3
8000b580:	6e 04       	jz %d15,8000b588 <_vsnprintf_r+0x48>
8000b582:	d8 00       	ld.a %a15,[%sp]0
8000b584:	82 0f       	mov %d15,0
8000b586:	28 0f       	st.b [%a15]0,%d15
8000b588:	00 90       	ret 

8000b58a <vsnprintf>:
8000b58a:	91 00 00 37 	movh.a %a3,28672
8000b58e:	40 42       	mov.aa %a2,%a4
8000b590:	99 34 50 40 	ld.a %a4,[%a3]1296 <70000510 <_impure_ptr>>
8000b594:	40 5f       	mov.aa %a15,%a5
8000b596:	40 67       	mov.aa %a7,%a6
8000b598:	40 25       	mov.aa %a5,%a2
8000b59a:	40 f6       	mov.aa %a6,%a15
8000b59c:	1d ff d2 ff 	j 8000b540 <_vsnprintf_r>

8000b5a0 <_malloc_trim_r>:
8000b5a0:	02 4f       	mov %d15,%d4
8000b5a2:	40 4f       	mov.aa %a15,%a4
8000b5a4:	6d ff b3 ff 	call 8000b50a <__malloc_lock>
8000b5a8:	91 00 00 c7 	movh.a %a12,28672
8000b5ac:	d9 cc 08 40 	lea %a12,[%a12]264 <70000108 <__malloc_av_>>
8000b5b0:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <sendActuatorPkt+0x4>>
8000b5b4:	3b 00 00 21 	mov %d2,4096
8000b5b8:	19 28 04 00 	ld.w %d8,[%a2]4
8000b5bc:	8f 38 c0 81 	andn %d8,%d8,3
8000b5c0:	5a f8       	sub %d15,%d8,%d15
8000b5c2:	1b ff fe f0 	addi %d15,%d15,4079
8000b5c6:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000b5ca:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000b5ce:	7f 2f 07 00 	jge %d15,%d2,8000b5dc <_malloc_trim_r+0x3c>
8000b5d2:	40 f4       	mov.aa %a4,%a15
8000b5d4:	6d ff 9c ff 	call 8000b50c <__malloc_unlock>
8000b5d8:	82 02       	mov %d2,0
8000b5da:	00 90       	ret 
8000b5dc:	40 f4       	mov.aa %a4,%a15
8000b5de:	82 04       	mov %d4,0
8000b5e0:	6d ff 97 ff 	call 8000b50e <_sbrk_r>
8000b5e4:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b5e8:	60 84       	mov.a %a4,%d8
8000b5ea:	30 43       	add.a %a3,%a4
8000b5ec:	7d 32 f3 ff 	jne.a %a2,%a3,8000b5d2 <_malloc_trim_r+0x32>
8000b5f0:	40 f4       	mov.aa %a4,%a15
8000b5f2:	8b 0f 00 41 	rsub %d4,%d15,0
8000b5f6:	6d ff 8c ff 	call 8000b50e <_sbrk_r>
8000b5fa:	80 22       	mov.d %d2,%a2
8000b5fc:	df f2 1c 80 	jne %d2,-1,8000b634 <_malloc_trim_r+0x94>
8000b600:	40 f4       	mov.aa %a4,%a15
8000b602:	82 04       	mov %d4,0
8000b604:	6d ff 85 ff 	call 8000b50e <_sbrk_r>
8000b608:	99 c3 08 00 	ld.a %a3,[%a12]8
8000b60c:	01 32 20 40 	sub.a %a4,%a2,%a3
8000b610:	80 4f       	mov.d %d15,%a4
8000b612:	8b 0f 41 22 	lt %d2,%d15,16
8000b616:	df 02 de ff 	jne %d2,0,8000b5d2 <_malloc_trim_r+0x32>
8000b61a:	91 00 00 47 	movh.a %a4,28672
8000b61e:	99 44 00 40 	ld.a %a4,[%a4]256 <70000100 <__malloc_sbrk_base>>
8000b622:	96 01       	or %d15,1
8000b624:	6c 31       	st.w [%a3]4,%d15
8000b626:	01 42 20 20 	sub.a %a2,%a2,%a4
8000b62a:	91 00 00 47 	movh.a %a4,28672
8000b62e:	b5 42 d0 b0 	st.a [%a4]3792 <70000ed0 <__malloc_current_mallinfo>>,%a2
8000b632:	3c d0       	j 8000b5d2 <_malloc_trim_r+0x32>
8000b634:	99 c2 08 00 	ld.a %a2,[%a12]8
8000b638:	a2 f8       	sub %d8,%d15
8000b63a:	8f 18 40 81 	or %d8,%d8,1
8000b63e:	59 28 04 00 	st.w [%a2]4,%d8
8000b642:	91 00 00 27 	movh.a %a2,28672
8000b646:	19 22 d0 b0 	ld.w %d2,[%a2]3792 <70000ed0 <__malloc_current_mallinfo>>
8000b64a:	40 f4       	mov.aa %a4,%a15
8000b64c:	5a f2       	sub %d15,%d2,%d15
8000b64e:	59 2f d0 b0 	st.w [%a2]3792 <70000ed0 <__malloc_current_mallinfo>>,%d15
8000b652:	6d ff 5d ff 	call 8000b50c <__malloc_unlock>
8000b656:	82 12       	mov %d2,1
8000b658:	00 90       	ret 

8000b65a <_free_r>:
8000b65a:	40 4d       	mov.aa %a13,%a4
8000b65c:	bd 05 d4 00 	jz.a %a5,8000b804 <_free_r+0x1aa>
8000b660:	40 5c       	mov.aa %a12,%a5
8000b662:	6d ff 54 ff 	call 8000b50a <__malloc_lock>
8000b666:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000b66a:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000b66e:	8f 14 c0 f1 	andn %d15,%d4,1
8000b672:	91 00 00 27 	movh.a %a2,28672
8000b676:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b678:	d9 22 08 40 	lea %a2,[%a2]264 <70000108 <__malloc_av_>>
8000b67c:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <sendActuatorPkt+0x4>>
8000b680:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <sendActuatorPkt+0x4>>
8000b684:	8f 14 00 41 	and %d4,%d4,1
8000b688:	8f 33 c0 31 	andn %d3,%d3,3
8000b68c:	7d 43 24 80 	jne.a %a3,%a4,8000b6d4 <_free_r+0x7a>
8000b690:	42 3f       	add %d15,%d3
8000b692:	f6 4d       	jnz %d4,8000b6ac <_free_r+0x52>
8000b694:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b698:	60 23       	mov.a %a3,%d2
8000b69a:	42 2f       	add %d15,%d2
8000b69c:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000b6a0:	c8 33       	ld.a %a3,[%a15]12
8000b6a2:	c8 24       	ld.a %a4,[%a15]8
8000b6a4:	b5 43 0c 00 	st.a [%a4]12,%a3
8000b6a8:	b5 34 08 00 	st.a [%a3]8,%a4
8000b6ac:	8f 1f 40 21 	or %d2,%d15,1
8000b6b0:	68 12       	st.w [%a15]4,%d2
8000b6b2:	ec 22       	st.a [%a2]8,%a15
8000b6b4:	91 00 00 f7 	movh.a %a15,28672
8000b6b8:	19 f2 04 40 	ld.w %d2,[%a15]260 <70000104 <__malloc_trim_threshold>>
8000b6bc:	3f 2f 09 80 	jlt.u %d15,%d2,8000b6ce <_free_r+0x74>
8000b6c0:	91 00 00 f7 	movh.a %a15,28672
8000b6c4:	40 d4       	mov.aa %a4,%a13
8000b6c6:	19 f4 c0 c0 	ld.w %d4,[%a15]3840 <70000f00 <__malloc_top_pad>>
8000b6ca:	6d ff 6b ff 	call 8000b5a0 <_malloc_trim_r>
8000b6ce:	40 d4       	mov.aa %a4,%a13
8000b6d0:	1d ff 1e ff 	j 8000b50c <__malloc_unlock>
8000b6d4:	59 33 04 00 	st.w [%a3]4,%d3
8000b6d8:	82 02       	mov %d2,0
8000b6da:	df 04 16 80 	jne %d4,0,8000b706 <_free_r+0xac>
8000b6de:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000b6e2:	60 24       	mov.a %a4,%d2
8000b6e4:	42 2f       	add %d15,%d2
8000b6e6:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000b6ea:	c8 25       	ld.a %a5,[%a15]8
8000b6ec:	91 00 00 47 	movh.a %a4,28672
8000b6f0:	d9 44 10 40 	lea %a4,[%a4]272 <70000110 <__malloc_av_+0x8>>
8000b6f4:	82 12       	mov %d2,1
8000b6f6:	7d 45 08 00 	jeq.a %a5,%a4,8000b706 <_free_r+0xac>
8000b6fa:	c8 34       	ld.a %a4,[%a15]12
8000b6fc:	82 02       	mov %d2,0
8000b6fe:	b5 54 0c 00 	st.a [%a5]12,%a4
8000b702:	b5 45 08 00 	st.a [%a4]8,%a5
8000b706:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000b70a:	19 44 04 00 	ld.w %d4,[%a4]4
8000b70e:	6f 04 18 80 	jnz.t %d4,0,8000b73e <_free_r+0xe4>
8000b712:	42 3f       	add %d15,%d3
8000b714:	99 35 08 00 	ld.a %a5,[%a3]8
8000b718:	f6 2d       	jnz %d2,8000b732 <_free_r+0xd8>
8000b71a:	91 00 00 47 	movh.a %a4,28672
8000b71e:	d9 44 10 40 	lea %a4,[%a4]272 <70000110 <__malloc_av_+0x8>>
8000b722:	7d 45 08 80 	jne.a %a5,%a4,8000b732 <_free_r+0xd8>
8000b726:	ec 25       	st.a [%a2]20,%a15
8000b728:	ec 24       	st.a [%a2]16,%a15
8000b72a:	e8 35       	st.a [%a15]12,%a5
8000b72c:	e8 25       	st.a [%a15]8,%a5
8000b72e:	82 12       	mov %d2,1
8000b730:	3c 07       	j 8000b73e <_free_r+0xe4>
8000b732:	99 33 0c 00 	ld.a %a3,[%a3]12
8000b736:	b5 53 0c 00 	st.a [%a5]12,%a3
8000b73a:	b5 35 08 00 	st.a [%a3]8,%a5
8000b73e:	8f 1f 40 31 	or %d3,%d15,1
8000b742:	10 f3       	addsc.a %a3,%a15,%d15,0
8000b744:	68 13       	st.w [%a15]4,%d3
8000b746:	6c 30       	st.w [%a3]0,%d15
8000b748:	df 02 c3 ff 	jne %d2,0,8000b6ce <_free_r+0x74>
8000b74c:	3b 00 20 20 	mov %d2,512
8000b750:	7f 2f 12 80 	jge.u %d15,%d2,8000b774 <_free_r+0x11a>
8000b754:	19 23 04 00 	ld.w %d3,[%a2]4
8000b758:	06 df       	sh %d15,-3
8000b75a:	8f ef 3f 20 	sha %d2,%d15,-2
8000b75e:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000b762:	59 22 04 00 	st.w [%a2]4,%d2
8000b766:	d0 22       	addsc.a %a2,%a2,%d15,3
8000b768:	99 23 08 00 	ld.a %a3,[%a2]8
8000b76c:	e8 32       	st.a [%a15]12,%a2
8000b76e:	e8 23       	st.a [%a15]8,%a3
8000b770:	ec 22       	st.a [%a2]8,%a15
8000b772:	3c 46       	j 8000b7fe <_free_r+0x1a4>
8000b774:	8f af 1f 30 	sh %d3,%d15,-6
8000b778:	8f 7f 1f 20 	sh %d2,%d15,-9
8000b77c:	1b 83 03 30 	addi %d3,%d3,56
8000b780:	bf 52 22 80 	jlt.u %d2,5,8000b7c4 <_free_r+0x16a>
8000b784:	8b 52 a1 32 	ge.u %d3,%d2,21
8000b788:	f6 34       	jnz %d3,8000b790 <_free_r+0x136>
8000b78a:	1b b2 05 30 	addi %d3,%d2,91
8000b78e:	3c 1b       	j 8000b7c4 <_free_r+0x16a>
8000b790:	8b 52 a5 32 	ge.u %d3,%d2,85
8000b794:	f6 36       	jnz %d3,8000b7a0 <_free_r+0x146>
8000b796:	8f 4f 1f 30 	sh %d3,%d15,-12
8000b79a:	1b e3 06 30 	addi %d3,%d3,110
8000b79e:	3c 13       	j 8000b7c4 <_free_r+0x16a>
8000b7a0:	8b 52 b5 32 	ge.u %d3,%d2,341
8000b7a4:	f6 36       	jnz %d3,8000b7b0 <_free_r+0x156>
8000b7a6:	8f 1f 1f 30 	sh %d3,%d15,-15
8000b7aa:	1b 73 07 30 	addi %d3,%d3,119
8000b7ae:	3c 0b       	j 8000b7c4 <_free_r+0x16a>
8000b7b0:	3b 50 55 40 	mov %d4,1365
8000b7b4:	3b e0 07 30 	mov %d3,126
8000b7b8:	7f 42 06 80 	jge.u %d2,%d4,8000b7c4 <_free_r+0x16a>
8000b7bc:	8f ef 1e 30 	sh %d3,%d15,-18
8000b7c0:	1b c3 07 30 	addi %d3,%d3,124
8000b7c4:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000b7c8:	99 65 08 00 	ld.a %a5,[%a6]8
8000b7cc:	40 53       	mov.aa %a3,%a5
8000b7ce:	7d 65 0d 80 	jne.a %a5,%a6,8000b7e8 <_free_r+0x18e>
8000b7d2:	4c 21       	ld.w %d15,[%a2]4
8000b7d4:	86 e3       	sha %d3,-2
8000b7d6:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000b7da:	59 23 04 00 	st.w [%a2]4,%d3
8000b7de:	3c 0d       	j 8000b7f8 <_free_r+0x19e>
8000b7e0:	99 33 08 00 	ld.a %a3,[%a3]8
8000b7e4:	7d 63 08 00 	jeq.a %a3,%a6,8000b7f4 <_free_r+0x19a>
8000b7e8:	19 32 04 00 	ld.w %d2,[%a3]4
8000b7ec:	8f 32 c0 21 	andn %d2,%d2,3
8000b7f0:	3f 2f f8 ff 	jlt.u %d15,%d2,8000b7e0 <_free_r+0x186>
8000b7f4:	99 35 0c 00 	ld.a %a5,[%a3]12
8000b7f8:	e8 35       	st.a [%a15]12,%a5
8000b7fa:	e8 23       	st.a [%a15]8,%a3
8000b7fc:	ec 52       	st.a [%a5]8,%a15
8000b7fe:	ec 33       	st.a [%a3]12,%a15
8000b800:	1d ff 67 ff 	j 8000b6ce <_free_r+0x74>
8000b804:	00 90       	ret 
	...

8000b808 <_svfprintf_r>:
8000b808:	20 d0       	sub.a %sp,208
8000b80a:	80 5b       	mov.d %d11,%a5
8000b80c:	80 4c       	mov.d %d12,%a4
8000b80e:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b812:	40 7f       	mov.aa %a15,%a7
8000b814:	6d 00 c4 0f 	call 8000d79c <_localeconv_r>
8000b818:	d4 22       	ld.a %a2,[%a2]
8000b81a:	40 24       	mov.aa %a4,%a2
8000b81c:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b820:	6d ff 86 fe 	call 8000b52c <strlen>
8000b824:	60 b2       	mov.a %a2,%d11
8000b826:	59 a2 20 00 	st.w [%sp]32,%d2
8000b82a:	8c 26       	ld.h %d15,[%a2]12
8000b82c:	6f 7f 16 00 	jz.t %d15,7,8000b858 <_svfprintf_r+0x50>
8000b830:	4c 24       	ld.w %d15,[%a2]16
8000b832:	ee 13       	jnz %d15,8000b858 <_svfprintf_r+0x50>
8000b834:	60 c4       	mov.a %a4,%d12
8000b836:	3b 00 04 40 	mov %d4,64
8000b83a:	6d ff 1b fc 	call 8000b070 <_malloc_r>
8000b83e:	60 b3       	mov.a %a3,%d11
8000b840:	f4 32       	st.a [%a3],%a2
8000b842:	b5 32 10 00 	st.a [%a3]16,%a2
8000b846:	7c 26       	jnz.a %a2,8000b852 <_svfprintf_r+0x4a>
8000b848:	60 cf       	mov.a %a15,%d12
8000b84a:	da 0c       	mov %d15,12
8000b84c:	68 0f       	st.w [%a15]0,%d15
8000b84e:	82 f2       	mov %d2,-1
8000b850:	00 90       	ret 
8000b852:	60 b2       	mov.a %a2,%d11
8000b854:	da 40       	mov %d15,64
8000b856:	6c 25       	st.w [%a2]20,%d15
8000b858:	82 0f       	mov %d15,0
8000b85a:	d9 a2 10 20 	lea %a2,[%sp]144
8000b85e:	a0 03       	mov.a %a3,0
8000b860:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b864:	78 19       	st.w [%sp]100,%d15
8000b866:	78 18       	st.w [%sp]96,%d15
8000b868:	78 05       	st.w [%sp]20,%d15
8000b86a:	78 0b       	st.w [%sp]44,%d15
8000b86c:	78 0c       	st.w [%sp]48,%d15
8000b86e:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b872:	78 0e       	st.w [%sp]56,%d15
8000b874:	78 0a       	st.w [%sp]40,%d15
8000b876:	40 2e       	mov.aa %a14,%a2
8000b878:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b87c:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b880:	8b 0f 20 32 	ne %d3,%d15,0
8000b884:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b888:	76 33       	jz %d3,8000b88e <_svfprintf_r+0x86>
8000b88a:	b0 1c       	add.a %a12,1
8000b88c:	3c f8       	j 8000b87c <_svfprintf_r+0x74>
8000b88e:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b892:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b896:	80 3f       	mov.d %d15,%a3
8000b898:	6e 23       	jz %d15,8000b8de <_svfprintf_r+0xd6>
8000b89a:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b89e:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b8a2:	42 f3       	add %d3,%d15
8000b8a4:	59 a3 24 10 	st.w [%sp]100,%d3
8000b8a8:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b8ac:	f4 e3       	st.a [%a14],%a3
8000b8ae:	c2 13       	add %d3,1
8000b8b0:	6c e1       	st.w [%a14]4,%d15
8000b8b2:	59 a3 20 10 	st.w [%sp]96,%d3
8000b8b6:	8b 83 80 32 	ge %d3,%d3,8
8000b8ba:	d9 ee 08 00 	lea %a14,[%a14]8
8000b8be:	76 3b       	jz %d3,8000b8d4 <_svfprintf_r+0xcc>
8000b8c0:	60 c4       	mov.a %a4,%d12
8000b8c2:	60 b5       	mov.a %a5,%d11
8000b8c4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b8c8:	6d 00 7d 12 	call 8000ddc2 <__ssprint_r>
8000b8cc:	df 02 69 88 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000b8d0:	d9 ae 10 20 	lea %a14,[%sp]144
8000b8d4:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b8d8:	42 f2       	add %d2,%d15
8000b8da:	59 a2 28 00 	st.w [%sp]40,%d2
8000b8de:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b8e2:	df 0f 56 08 	jeq %d15,0,8000c98e <_svfprintf_r+0x1186>
8000b8e6:	82 0f       	mov %d15,0
8000b8e8:	82 02       	mov %d2,0
8000b8ea:	e9 af 01 10 	st.b [%sp]65,%d15
8000b8ee:	d9 c2 01 00 	lea %a2,[%a12]1
8000b8f2:	82 0f       	mov %d15,0
8000b8f4:	82 fe       	mov %d14,-1
8000b8f6:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b8fa:	82 0a       	mov %d10,0
8000b8fc:	79 22 00 00 	ld.b %d2,[%a2]0
8000b900:	d9 23 01 00 	lea %a3,[%a2]1
8000b904:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b908:	59 a2 10 00 	st.w [%sp]16,%d2
8000b90c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b910:	1b 02 fe 3f 	addi %d3,%d2,-32
8000b914:	8b 93 a5 42 	ge.u %d4,%d3,89
8000b918:	df 04 19 84 	jne %d4,0,8000c14a <_svfprintf_r+0x942>
8000b91c:	91 10 00 28 	movh.a %a2,32769
8000b920:	d9 22 ac 4b 	lea %a2,[%a2]-18132 <8000b92c <_svfprintf_r+0x124>>
8000b924:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000b928:	dc 07       	ji %a7
8000b92a:	00 00       	nop 
8000b92c:	1d 00 c3 00 	j 8000bab2 <_svfprintf_r+0x2aa>
8000b930:	1d 00 0d 04 	j 8000c14a <_svfprintf_r+0x942>
8000b934:	1d 00 0b 04 	j 8000c14a <_svfprintf_r+0x942>
8000b938:	1d 00 c0 00 	j 8000bab8 <_svfprintf_r+0x2b0>
8000b93c:	1d 00 07 04 	j 8000c14a <_svfprintf_r+0x942>
8000b940:	1d 00 05 04 	j 8000c14a <_svfprintf_r+0x942>
8000b944:	1d 00 03 04 	j 8000c14a <_svfprintf_r+0x942>
8000b948:	1d 00 01 04 	j 8000c14a <_svfprintf_r+0x942>
8000b94c:	1d 00 ff 03 	j 8000c14a <_svfprintf_r+0x942>
8000b950:	1d 00 fd 03 	j 8000c14a <_svfprintf_r+0x942>
8000b954:	1d 00 b5 00 	j 8000babe <_svfprintf_r+0x2b6>
8000b958:	1d 00 9c 00 	j 8000ba90 <_svfprintf_r+0x288>
8000b95c:	1d 00 f7 03 	j 8000c14a <_svfprintf_r+0x942>
8000b960:	1d 00 b8 00 	j 8000bad0 <_svfprintf_r+0x2c8>
8000b964:	1d 00 b9 00 	j 8000bad6 <_svfprintf_r+0x2ce>
8000b968:	1d 00 f1 03 	j 8000c14a <_svfprintf_r+0x942>
8000b96c:	1d 00 de 00 	j 8000bb28 <_svfprintf_r+0x320>
8000b970:	1d 00 df 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b974:	1d 00 dd 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b978:	1d 00 db 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b97c:	1d 00 d9 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b980:	1d 00 d7 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b984:	1d 00 d5 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b988:	1d 00 d3 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b98c:	1d 00 d1 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b990:	1d 00 cf 00 	j 8000bb2e <_svfprintf_r+0x326>
8000b994:	1d 00 db 03 	j 8000c14a <_svfprintf_r+0x942>
8000b998:	1d 00 d9 03 	j 8000c14a <_svfprintf_r+0x942>
8000b99c:	1d 00 d7 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9a0:	1d 00 d5 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9a4:	1d 00 d3 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9a8:	1d 00 d1 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9ac:	1d 00 cf 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9b0:	1d 00 cd 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9b4:	1d 00 cb 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9b8:	1d 00 c9 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9bc:	1d 00 f9 00 	j 8000bbae <_svfprintf_r+0x3a6>
8000b9c0:	1d 00 21 01 	j 8000bc02 <_svfprintf_r+0x3fa>
8000b9c4:	1d 00 c3 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9c8:	1d 00 1d 01 	j 8000bc02 <_svfprintf_r+0x3fa>
8000b9cc:	1d 00 bf 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9d0:	1d 00 bd 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9d4:	1d 00 bb 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9d8:	1d 00 b9 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9dc:	1d 00 c6 00 	j 8000bb68 <_svfprintf_r+0x360>
8000b9e0:	1d 00 b5 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9e4:	1d 00 b3 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9e8:	1d 00 92 02 	j 8000bf0c <_svfprintf_r+0x704>
8000b9ec:	1d 00 af 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9f0:	1d 00 ad 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9f4:	1d 00 ab 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9f8:	1d 00 a9 03 	j 8000c14a <_svfprintf_r+0x942>
8000b9fc:	1d 00 a7 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba00:	1d 00 d0 02 	j 8000bfa0 <_svfprintf_r+0x798>
8000ba04:	1d 00 a3 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba08:	1d 00 a1 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba0c:	1d 00 4b 00 	j 8000baa2 <_svfprintf_r+0x29a>
8000ba10:	1d 00 9d 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba14:	1d 00 9b 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba18:	1d 00 99 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba1c:	1d 00 97 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba20:	1d 00 95 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba24:	1d 00 93 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba28:	1d 00 91 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba2c:	1d 00 8f 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba30:	1d 00 8d 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba34:	1d 00 8b 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba38:	1d 00 b0 00 	j 8000bb98 <_svfprintf_r+0x390>
8000ba3c:	1d 00 2f 00 	j 8000ba9a <_svfprintf_r+0x292>
8000ba40:	1d 00 e1 00 	j 8000bc02 <_svfprintf_r+0x3fa>
8000ba44:	1d 00 df 00 	j 8000bc02 <_svfprintf_r+0x3fa>
8000ba48:	1d 00 dd 00 	j 8000bc02 <_svfprintf_r+0x3fa>
8000ba4c:	1d 00 91 00 	j 8000bb6e <_svfprintf_r+0x366>
8000ba50:	1d 00 25 00 	j 8000ba9a <_svfprintf_r+0x292>
8000ba54:	1d 00 7b 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba58:	1d 00 79 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba5c:	1d 00 8c 00 	j 8000bb74 <_svfprintf_r+0x36c>
8000ba60:	1d 00 75 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba64:	1d 00 39 02 	j 8000bed6 <_svfprintf_r+0x6ce>
8000ba68:	1d 00 54 02 	j 8000bf10 <_svfprintf_r+0x708>
8000ba6c:	1d 00 66 02 	j 8000bf38 <_svfprintf_r+0x730>
8000ba70:	1d 00 90 00 	j 8000bb90 <_svfprintf_r+0x388>
8000ba74:	1d 00 6b 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba78:	1d 00 77 02 	j 8000bf66 <_svfprintf_r+0x75e>
8000ba7c:	1d 00 67 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba80:	1d 00 92 02 	j 8000bfa4 <_svfprintf_r+0x79c>
8000ba84:	1d 00 63 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba88:	1d 00 61 03 	j 8000c14a <_svfprintf_r+0x942>
8000ba8c:	1d 00 a0 02 	j 8000bfcc <_svfprintf_r+0x7c4>
8000ba90:	da 2b       	mov %d15,43
8000ba92:	99 a2 18 00 	ld.a %a2,[%sp]24
8000ba96:	1d ff 33 ff 	j 8000b8fc <_svfprintf_r+0xf4>
8000ba9a:	e9 af 01 10 	st.b [%sp]65,%d15
8000ba9e:	1d 00 8c 00 	j 8000bbb6 <_svfprintf_r+0x3ae>
8000baa2:	e9 af 01 10 	st.b [%sp]65,%d15
8000baa6:	7b 00 00 f8 	movh %d15,32768
8000baaa:	1b 0f f0 f0 	addi %d15,%d15,3840
8000baae:	1d 00 95 02 	j 8000bfd8 <_svfprintf_r+0x7d0>
8000bab2:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000bab6:	3c ee       	j 8000ba92 <_svfprintf_r+0x28a>
8000bab8:	8f 1a 40 a1 	or %d10,%d10,1
8000babc:	3c eb       	j 8000ba92 <_svfprintf_r+0x28a>
8000babe:	48 02       	ld.w %d2,[%a15]0
8000bac0:	b0 4f       	add.a %a15,4
8000bac2:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bac6:	ff 02 e6 7f 	jge %d2,0,8000ba92 <_svfprintf_r+0x28a>
8000baca:	32 52       	rsub %d2
8000bacc:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bad0:	8f 4a 40 a1 	or %d10,%d10,4
8000bad4:	3c df       	j 8000ba92 <_svfprintf_r+0x28a>
8000bad6:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bada:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bade:	79 32 00 00 	ld.b %d2,[%a3]0
8000bae2:	b0 12       	add.a %a2,1
8000bae4:	59 a2 10 00 	st.w [%sp]16,%d2
8000bae8:	8b a2 02 32 	eq %d3,%d2,42
8000baec:	f6 33       	jnz %d3,8000baf2 <_svfprintf_r+0x2ea>
8000baee:	82 05       	mov %d5,0
8000baf0:	3c 08       	j 8000bb00 <_svfprintf_r+0x2f8>
8000baf2:	48 0e       	ld.w %d14,[%a15]0
8000baf4:	b5 a2 18 00 	st.a [%sp]24,%a2
8000baf8:	b0 4f       	add.a %a15,4
8000bafa:	8b fe 5f e3 	max %d14,%d14,-1
8000bafe:	3c ca       	j 8000ba92 <_svfprintf_r+0x28a>
8000bb00:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bb04:	1b 02 fd 3f 	addi %d3,%d2,-48
8000bb08:	ff a3 0a 80 	jge.u %d3,10,8000bb1c <_svfprintf_r+0x314>
8000bb0c:	79 22 00 00 	ld.b %d2,[%a2]0
8000bb10:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000bb14:	59 a2 10 00 	st.w [%sp]16,%d2
8000bb18:	b0 12       	add.a %a2,1
8000bb1a:	3c f3       	j 8000bb00 <_svfprintf_r+0x2f8>
8000bb1c:	8b f5 5f e3 	max %d14,%d5,-1
8000bb20:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bb24:	1d ff f4 fe 	j 8000b90c <_svfprintf_r+0x104>
8000bb28:	8f 0a 48 a1 	or %d10,%d10,128
8000bb2c:	3c b3       	j 8000ba92 <_svfprintf_r+0x28a>
8000bb2e:	82 02       	mov %d2,0
8000bb30:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bb34:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bb38:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bb3c:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bb40:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000bb44:	99 a2 18 00 	ld.a %a2,[%sp]24
8000bb48:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000bb4c:	b0 12       	add.a %a2,1
8000bb4e:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bb52:	79 32 00 00 	ld.b %d2,[%a3]0
8000bb56:	b5 a2 18 00 	st.a [%sp]24,%a2
8000bb5a:	59 a2 10 00 	st.w [%sp]16,%d2
8000bb5e:	1b 02 fd 4f 	addi %d4,%d2,-48
8000bb62:	bf a4 e9 ff 	jlt.u %d4,10,8000bb34 <_svfprintf_r+0x32c>
8000bb66:	3c dd       	j 8000bb20 <_svfprintf_r+0x318>
8000bb68:	8f 8a 40 a1 	or %d10,%d10,8
8000bb6c:	3c 93       	j 8000ba92 <_svfprintf_r+0x28a>
8000bb6e:	8f 0a 44 a1 	or %d10,%d10,64
8000bb72:	3c 90       	j 8000ba92 <_svfprintf_r+0x28a>
8000bb74:	99 a3 18 00 	ld.a %a3,[%sp]24
8000bb78:	79 33 00 00 	ld.b %d3,[%a3]0
8000bb7c:	8b c3 26 32 	ne %d3,%d3,108
8000bb80:	f6 35       	jnz %d3,8000bb8a <_svfprintf_r+0x382>
8000bb82:	b0 13       	add.a %a3,1
8000bb84:	b5 a3 18 00 	st.a [%sp]24,%a3
8000bb88:	3c 04       	j 8000bb90 <_svfprintf_r+0x388>
8000bb8a:	8f 0a 41 a1 	or %d10,%d10,16
8000bb8e:	3c 82       	j 8000ba92 <_svfprintf_r+0x28a>
8000bb90:	8f 0a 42 a1 	or %d10,%d10,32
8000bb94:	1d ff 7f ff 	j 8000ba92 <_svfprintf_r+0x28a>
8000bb98:	48 03       	ld.w %d3,[%a15]0
8000bb9a:	d9 fc 04 00 	lea %a12,[%a15]4
8000bb9e:	e9 a3 28 10 	st.b [%sp]104,%d3
8000bba2:	82 03       	mov %d3,0
8000bba4:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bba8:	60 ad       	mov.a %a13,%d10
8000bbaa:	1d 00 dc 02 	j 8000c162 <_svfprintf_r+0x95a>
8000bbae:	e9 af 01 10 	st.b [%sp]65,%d15
8000bbb2:	8f 0a 41 a1 	or %d10,%d10,16
8000bbb6:	60 ad       	mov.a %a13,%d10
8000bbb8:	6f 5a 07 00 	jz.t %d10,5,8000bbc6 <_svfprintf_r+0x3be>
8000bbbc:	d9 fc 08 00 	lea %a12,[%a15]8
8000bbc0:	09 f8 40 09 	ld.d %e8,[%a15]
8000bbc4:	3c 12       	j 8000bbe8 <_svfprintf_r+0x3e0>
8000bbc6:	d9 f2 04 00 	lea %a2,[%a15]4
8000bbca:	6f 4a 05 00 	jz.t %d10,4,8000bbd4 <_svfprintf_r+0x3cc>
8000bbce:	40 2c       	mov.aa %a12,%a2
8000bbd0:	48 08       	ld.w %d8,[%a15]0
8000bbd2:	3c 09       	j 8000bbe4 <_svfprintf_r+0x3dc>
8000bbd4:	48 03       	ld.w %d3,[%a15]0
8000bbd6:	40 2c       	mov.aa %a12,%a2
8000bbd8:	0b 30 00 88 	mov %e8,%d3
8000bbdc:	6f 6a 06 00 	jz.t %d10,6,8000bbe8 <_svfprintf_r+0x3e0>
8000bbe0:	37 03 50 80 	extr %d8,%d3,0,16
8000bbe4:	0b 80 00 88 	mov %e8,%d8
8000bbe8:	82 13       	mov %d3,1
8000bbea:	ff 09 1d 02 	jge %d9,0,8000c024 <_svfprintf_r+0x81c>
8000bbee:	32 59       	rsub %d9
8000bbf0:	32 58       	rsub %d8
8000bbf2:	3b d0 02 70 	mov %d7,45
8000bbf6:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000bbfa:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bbfe:	1d 00 13 02 	j 8000c024 <_svfprintf_r+0x81c>
8000bc02:	e9 af 01 10 	st.b [%sp]65,%d15
8000bc06:	4c f0       	ld.w %d15,[%a15]0
8000bc08:	d9 fc 08 00 	lea %a12,[%a15]8
8000bc0c:	78 0b       	st.w [%sp]44,%d15
8000bc0e:	4c f1       	ld.w %d15,[%a15]4
8000bc10:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bc14:	78 0c       	st.w [%sp]48,%d15
8000bc16:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bc1a:	6d 00 b3 10 	call 8000dd80 <__fpclassifyd>
8000bc1e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bc22:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bc26:	df 12 18 80 	jne %d2,1,8000bc56 <_svfprintf_r+0x44e>
8000bc2a:	d2 06       	mov %e6,0
8000bc2c:	6d 00 50 14 	call 8000e4cc <__ltdf2>
8000bc30:	ce 25       	jgez %d2,8000bc3a <_svfprintf_r+0x432>
8000bc32:	3b d0 02 30 	mov %d3,45
8000bc36:	e9 a3 01 10 	st.b [%sp]65,%d3
8000bc3a:	58 04       	ld.w %d15,[%sp]16
8000bc3c:	7b 00 00 78 	movh %d7,32768
8000bc40:	8b 8f 84 32 	ge %d3,%d15,72
8000bc44:	1b 47 ef d0 	addi %d13,%d7,3828
8000bc48:	df 03 17 80 	jne %d3,0,8000bc76 <_svfprintf_r+0x46e>
8000bc4c:	7b 00 00 78 	movh %d7,32768
8000bc50:	1b 07 ef d0 	addi %d13,%d7,3824
8000bc54:	3c 11       	j 8000bc76 <_svfprintf_r+0x46e>
8000bc56:	6d 00 95 10 	call 8000dd80 <__fpclassifyd>
8000bc5a:	58 04       	ld.w %d15,[%sp]16
8000bc5c:	df 02 13 80 	jne %d2,0,8000bc82 <_svfprintf_r+0x47a>
8000bc60:	7b 00 00 78 	movh %d7,32768
8000bc64:	8b 8f 84 32 	ge %d3,%d15,72
8000bc68:	1b c7 ef d0 	addi %d13,%d7,3836
8000bc6c:	f6 35       	jnz %d3,8000bc76 <_svfprintf_r+0x46e>
8000bc6e:	7b 00 00 78 	movh %d7,32768
8000bc72:	1b 87 ef d0 	addi %d13,%d7,3832
8000bc76:	8f 0a c8 a1 	andn %d10,%d10,128
8000bc7a:	60 ad       	mov.a %a13,%d10
8000bc7c:	82 39       	mov %d9,3
8000bc7e:	1d 00 78 02 	j 8000c16e <_svfprintf_r+0x966>
8000bc82:	8f 0f c2 f1 	andn %d15,%d15,32
8000bc86:	78 01       	st.w [%sp]4,%d15
8000bc88:	df fe 09 00 	jeq %d14,-1,8000bc9a <_svfprintf_r+0x492>
8000bc8c:	8b 0e 00 72 	eq %d7,%d14,0
8000bc90:	8b 7f 04 74 	and.eq %d7,%d15,71
8000bc94:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000bc98:	3c 02       	j 8000bc9c <_svfprintf_r+0x494>
8000bc9a:	82 6e       	mov %d14,6
8000bc9c:	19 a3 30 00 	ld.w %d3,[%sp]48
8000bca0:	8f 0a 50 21 	or %d2,%d10,256
8000bca4:	60 2d       	mov.a %a13,%d2
8000bca6:	d8 0b       	ld.a %a15,[%sp]44
8000bca8:	82 0f       	mov %d15,0
8000bcaa:	ce 34       	jgez %d3,8000bcb2 <_svfprintf_r+0x4aa>
8000bcac:	9b 03 00 38 	addih %d3,%d3,32768
8000bcb0:	da 2d       	mov %d15,45
8000bcb2:	78 09       	st.w [%sp]36,%d15
8000bcb4:	58 01       	ld.w %d15,[%sp]4
8000bcb6:	02 e9       	mov %d9,%d14
8000bcb8:	8b 6f 04 22 	eq %d2,%d15,70
8000bcbc:	82 36       	mov %d6,3
8000bcbe:	f6 28       	jnz %d2,8000bcce <_svfprintf_r+0x4c6>
8000bcc0:	8b 5f 24 12 	ne %d1,%d15,69
8000bcc4:	1b 1e 00 50 	addi %d5,%d14,1
8000bcc8:	82 26       	mov %d6,2
8000bcca:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000bcce:	60 c4       	mov.a %a4,%d12
8000bcd0:	80 f4       	mov.d %d4,%a15
8000bcd2:	02 35       	mov %d5,%d3
8000bcd4:	02 97       	mov %d7,%d9
8000bcd6:	d9 a5 04 10 	lea %a5,[%sp]68
8000bcda:	d9 a6 08 10 	lea %a6,[%sp]72
8000bcde:	d9 a7 14 10 	lea %a7,[%sp]84
8000bce2:	59 a2 0c 00 	st.w [%sp]12,%d2
8000bce6:	59 a3 08 00 	st.w [%sp]8,%d3
8000bcea:	6d 00 ef 06 	call 8000cac8 <_dtoa_r>
8000bcee:	58 01       	ld.w %d15,[%sp]4
8000bcf0:	80 2d       	mov.d %d13,%a2
8000bcf2:	8b 7f 24 12 	ne %d1,%d15,71
8000bcf6:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000bcfa:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bcfe:	df 01 11 80 	jne %d1,0,8000bd20 <_svfprintf_r+0x518>
8000bd02:	6f 0a 0f 80 	jnz.t %d10,0,8000bd20 <_svfprintf_r+0x518>
8000bd06:	19 a2 14 10 	ld.w %d2,[%sp]84
8000bd0a:	58 01       	ld.w %d15,[%sp]4
8000bd0c:	a2 d2       	sub %d2,%d13
8000bd0e:	59 a2 14 00 	st.w [%sp]20,%d2
8000bd12:	8b 7f 04 42 	eq %d4,%d15,71
8000bd16:	19 a5 04 10 	ld.w %d5,[%sp]68
8000bd1a:	df 04 36 80 	jne %d4,0,8000bd86 <_svfprintf_r+0x57e>
8000bd1e:	3c 3e       	j 8000bd9a <_svfprintf_r+0x592>
8000bd20:	0b 9d 00 80 	add %d8,%d13,%d9
8000bd24:	df 02 1c 00 	jeq %d2,0,8000bd5c <_svfprintf_r+0x554>
8000bd28:	60 d2       	mov.a %a2,%d13
8000bd2a:	80 f4       	mov.d %d4,%a15
8000bd2c:	79 20 00 00 	ld.b %d0,[%a2]0
8000bd30:	d2 06       	mov %e6,0
8000bd32:	02 35       	mov %d5,%d3
8000bd34:	8b 00 03 f2 	eq %d15,%d0,48
8000bd38:	59 a3 08 00 	st.w [%sp]8,%d3
8000bd3c:	6d 00 68 13 	call 8000e40c <__nedf2>
8000bd40:	8b 02 20 22 	ne %d2,%d2,0
8000bd44:	0f 2f 80 00 	and %d0,%d15,%d2
8000bd48:	19 a3 08 00 	ld.w %d3,[%sp]8
8000bd4c:	76 05       	jz %d0,8000bd56 <_svfprintf_r+0x54e>
8000bd4e:	8b 19 00 01 	rsub %d0,%d9,1
8000bd52:	59 a0 04 10 	st.w [%sp]68,%d0
8000bd56:	19 a2 04 10 	ld.w %d2,[%sp]68
8000bd5a:	42 28       	add %d8,%d2
8000bd5c:	80 f4       	mov.d %d4,%a15
8000bd5e:	d2 06       	mov %e6,0
8000bd60:	02 35       	mov %d5,%d3
8000bd62:	6d 00 35 13 	call 8000e3cc <__eqdf2>
8000bd66:	f6 23       	jnz %d2,8000bd6c <_svfprintf_r+0x564>
8000bd68:	59 a8 14 10 	st.w [%sp]84,%d8
8000bd6c:	3b 00 03 00 	mov %d0,48
8000bd70:	19 a3 14 10 	ld.w %d3,[%sp]84
8000bd74:	7f 83 c9 ff 	jge.u %d3,%d8,8000bd06 <_svfprintf_r+0x4fe>
8000bd78:	1b 13 00 10 	addi %d1,%d3,1
8000bd7c:	60 32       	mov.a %a2,%d3
8000bd7e:	59 a1 14 10 	st.w [%sp]84,%d1
8000bd82:	34 20       	st.b [%a2],%d0
8000bd84:	3c f6       	j 8000bd70 <_svfprintf_r+0x568>
8000bd86:	0b 5e 20 31 	lt %d3,%d14,%d5
8000bd8a:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000bd8e:	df 03 88 00 	jeq %d3,0,8000be9e <_svfprintf_r+0x696>
8000bd92:	58 04       	ld.w %d15,[%sp]16
8000bd94:	c2 ef       	add %d15,-2
8000bd96:	78 04       	st.w [%sp]16,%d15
8000bd98:	3c 06       	j 8000bda4 <_svfprintf_r+0x59c>
8000bd9a:	58 04       	ld.w %d15,[%sp]16
8000bd9c:	8b 6f 86 32 	ge %d3,%d15,102
8000bda0:	df 03 69 80 	jne %d3,0,8000be72 <_svfprintf_r+0x66a>
8000bda4:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bda8:	9a f5       	add %d15,%d5,-1
8000bdaa:	78 11       	st.w [%sp]68,%d15
8000bdac:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000bdb0:	3b b0 02 30 	mov %d3,43
8000bdb4:	ce f4       	jgez %d15,8000bdbc <_svfprintf_r+0x5b4>
8000bdb6:	32 5f       	rsub %d15
8000bdb8:	3b d0 02 30 	mov %d3,45
8000bdbc:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000bdc0:	8b af 40 32 	lt %d3,%d15,10
8000bdc4:	df 03 3e 80 	jne %d3,0,8000be40 <_svfprintf_r+0x638>
8000bdc8:	82 06       	mov %d6,0
8000bdca:	3b a0 00 00 	mov %d0,10
8000bdce:	4b 0f 01 42 	div %e4,%d15,%d0
8000bdd2:	8b 66 00 71 	rsub %d7,%d6,6
8000bdd6:	60 72       	mov.a %a2,%d7
8000bdd8:	d9 af 14 10 	lea %a15,[%sp]84
8000bddc:	1b 05 03 30 	addi %d3,%d5,48
8000bde0:	30 2f       	add.a %a15,%a2
8000bde2:	28 03       	st.b [%a15]0,%d3
8000bde4:	8b a4 80 32 	ge %d3,%d4,10
8000bde8:	02 4f       	mov %d15,%d4
8000bdea:	c2 16       	add %d6,1
8000bdec:	df 03 f1 ff 	jne %d3,0,8000bdce <_svfprintf_r+0x5c6>
8000bdf0:	60 74       	mov.a %a4,%d7
8000bdf2:	d9 a2 10 30 	lea %a2,[%sp]208
8000bdf6:	1b 04 03 f0 	addi %d15,%d4,48
8000bdfa:	30 42       	add.a %a2,%a4
8000bdfc:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000be00:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000be04:	80 22       	mov.d %d2,%a2
8000be06:	d9 af 1b 10 	lea %a15,[%sp]91
8000be0a:	80 ff       	mov.d %d15,%a15
8000be0c:	1b 32 f8 4f 	addi %d4,%d2,-125
8000be10:	82 03       	mov %d3,0
8000be12:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000be16:	3f 4f 08 80 	jlt.u %d15,%d4,8000be26 <_svfprintf_r+0x61e>
8000be1a:	80 a2       	mov.d %d2,%sp
8000be1c:	1b 02 0d 20 	addi %d2,%d2,208
8000be20:	8b 52 07 42 	eq %d4,%d2,117
8000be24:	76 46       	jz %d4,8000be30 <_svfprintf_r+0x628>
8000be26:	a0 03       	mov.a %a3,0
8000be28:	3c 04       	j 8000be30 <_svfprintf_r+0x628>
8000be2a:	0c 70       	ld.bu %d15,[%a7]0
8000be2c:	b0 17       	add.a %a7,1
8000be2e:	28 0f       	st.b [%a15]0,%d15
8000be30:	60 3f       	mov.a %a15,%d3
8000be32:	d9 a2 0d 10 	lea %a2,[%sp]77
8000be36:	b0 2f       	add.a %a15,2
8000be38:	30 2f       	add.a %a15,%a2
8000be3a:	c2 13       	add %d3,1
8000be3c:	fc 37       	loop %a3,8000be2a <_svfprintf_r+0x622>
8000be3e:	3c 0b       	j 8000be54 <_svfprintf_r+0x64c>
8000be40:	3b 00 03 30 	mov %d3,48
8000be44:	1b 0f 03 f0 	addi %d15,%d15,48
8000be48:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000be4c:	e9 af 10 10 	st.b [%sp]80,%d15
8000be50:	d9 af 11 10 	lea %a15,[%sp]81
8000be54:	d9 a7 0d 10 	lea %a7,[%sp]77
8000be58:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000be5c:	80 79       	mov.d %d9,%a7
8000be5e:	58 05       	ld.w %d15,[%sp]20
8000be60:	b5 a7 38 00 	st.a [%sp]56,%a7
8000be64:	42 f9       	add %d9,%d15
8000be66:	ff 2f 04 00 	jge %d15,2,8000be6e <_svfprintf_r+0x666>
8000be6a:	6f 0a 2c 00 	jz.t %d10,0,8000bec2 <_svfprintf_r+0x6ba>
8000be6e:	c2 19       	add %d9,1
8000be70:	3c 29       	j 8000bec2 <_svfprintf_r+0x6ba>
8000be72:	58 04       	ld.w %d15,[%sp]16
8000be74:	8b 6f 26 42 	ne %d4,%d15,102
8000be78:	df 04 15 80 	jne %d4,0,8000bea2 <_svfprintf_r+0x69a>
8000be7c:	02 59       	mov %d9,%d5
8000be7e:	8e 59       	jlez %d5,8000be90 <_svfprintf_r+0x688>
8000be80:	f6 e3       	jnz %d14,8000be86 <_svfprintf_r+0x67e>
8000be82:	6f 0a 20 00 	jz.t %d10,0,8000bec2 <_svfprintf_r+0x6ba>
8000be86:	1b 1e 00 30 	addi %d3,%d14,1
8000be8a:	0b 35 00 90 	add %d9,%d5,%d3
8000be8e:	3c 1a       	j 8000bec2 <_svfprintf_r+0x6ba>
8000be90:	f6 e4       	jnz %d14,8000be98 <_svfprintf_r+0x690>
8000be92:	82 19       	mov %d9,1
8000be94:	6f 0a 17 00 	jz.t %d10,0,8000bec2 <_svfprintf_r+0x6ba>
8000be98:	1b 2e 00 90 	addi %d9,%d14,2
8000be9c:	3c 13       	j 8000bec2 <_svfprintf_r+0x6ba>
8000be9e:	da 67       	mov %d15,103
8000bea0:	78 04       	st.w [%sp]16,%d15
8000bea2:	58 05       	ld.w %d15,[%sp]20
8000bea4:	8f 1a 00 a1 	and %d10,%d10,1
8000bea8:	0b a5 00 90 	add %d9,%d5,%d10
8000beac:	7f f5 0b 00 	jge %d5,%d15,8000bec2 <_svfprintf_r+0x6ba>
8000beb0:	8b 15 40 92 	lt %d9,%d5,1
8000beb4:	8b 25 00 31 	rsub %d3,%d5,2
8000beb8:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000bebc:	19 a9 14 00 	ld.w %d9,[%sp]20
8000bec0:	42 39       	add %d9,%d3
8000bec2:	58 09       	ld.w %d15,[%sp]36
8000bec4:	82 0e       	mov %d14,0
8000bec6:	df 0f 55 01 	jeq %d15,0,8000c170 <_svfprintf_r+0x968>
8000beca:	3b d0 02 70 	mov %d7,45
8000bece:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bed2:	1d 00 4f 01 	j 8000c170 <_svfprintf_r+0x968>
8000bed6:	e9 af 01 10 	st.b [%sp]65,%d15
8000beda:	d9 f2 04 00 	lea %a2,[%a15]4
8000bede:	6f 5a 09 00 	jz.t %d10,5,8000bef0 <_svfprintf_r+0x6e8>
8000bee2:	58 0a       	ld.w %d15,[%sp]40
8000bee4:	c8 03       	ld.a %a3,[%a15]0
8000bee6:	0b f0 00 48 	mov %e4,%d15
8000beea:	89 34 40 09 	st.d [%a3],%e4
8000beee:	3c 0c       	j 8000bf06 <_svfprintf_r+0x6fe>
8000bef0:	6f 4a 08 80 	jnz.t %d10,4,8000bf00 <_svfprintf_r+0x6f8>
8000bef4:	6f 6a 06 00 	jz.t %d10,6,8000bf00 <_svfprintf_r+0x6f8>
8000bef8:	c8 03       	ld.a %a3,[%a15]0
8000befa:	58 0a       	ld.w %d15,[%sp]40
8000befc:	ac 30       	st.h [%a3]0,%d15
8000befe:	3c 04       	j 8000bf06 <_svfprintf_r+0x6fe>
8000bf00:	c8 03       	ld.a %a3,[%a15]0
8000bf02:	58 0a       	ld.w %d15,[%sp]40
8000bf04:	6c 30       	st.w [%a3]0,%d15
8000bf06:	40 2f       	mov.aa %a15,%a2
8000bf08:	1d ff b8 fc 	j 8000b878 <_svfprintf_r+0x70>
8000bf0c:	8f 0a 41 a1 	or %d10,%d10,16
8000bf10:	6f 5a 07 00 	jz.t %d10,5,8000bf1e <_svfprintf_r+0x716>
8000bf14:	d9 fc 08 00 	lea %a12,[%a15]8
8000bf18:	09 f8 40 09 	ld.d %e8,[%a15]
8000bf1c:	3c 0c       	j 8000bf34 <_svfprintf_r+0x72c>
8000bf1e:	d9 fc 04 00 	lea %a12,[%a15]4
8000bf22:	6f 4a 07 80 	jnz.t %d10,4,8000bf30 <_svfprintf_r+0x728>
8000bf26:	6f 6a 05 00 	jz.t %d10,6,8000bf30 <_svfprintf_r+0x728>
8000bf2a:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bf2e:	3c 02       	j 8000bf32 <_svfprintf_r+0x72a>
8000bf30:	48 08       	ld.w %d8,[%a15]0
8000bf32:	82 09       	mov %d9,0
8000bf34:	82 03       	mov %d3,0
8000bf36:	3c 73       	j 8000c01c <_svfprintf_r+0x814>
8000bf38:	3b 00 03 40 	mov %d4,48
8000bf3c:	7b 00 00 f8 	movh %d15,32768
8000bf40:	1b 1f f1 f0 	addi %d15,%d15,3857
8000bf44:	e9 a4 02 10 	st.b [%sp]66,%d4
8000bf48:	3b 80 07 40 	mov %d4,120
8000bf4c:	78 0f       	st.w [%sp]60,%d15
8000bf4e:	02 4f       	mov %d15,%d4
8000bf50:	d9 fc 04 00 	lea %a12,[%a15]4
8000bf54:	48 08       	ld.w %d8,[%a15]0
8000bf56:	82 09       	mov %d9,0
8000bf58:	8f 2a 40 a1 	or %d10,%d10,2
8000bf5c:	e9 a4 03 10 	st.b [%sp]67,%d4
8000bf60:	82 23       	mov %d3,2
8000bf62:	78 04       	st.w [%sp]16,%d15
8000bf64:	3c 5c       	j 8000c01c <_svfprintf_r+0x814>
8000bf66:	82 07       	mov %d7,0
8000bf68:	48 0d       	ld.w %d13,[%a15]0
8000bf6a:	e9 a7 01 10 	st.b [%sp]65,%d7
8000bf6e:	02 e9       	mov %d9,%d14
8000bf70:	60 ad       	mov.a %a13,%d10
8000bf72:	d9 fc 04 00 	lea %a12,[%a15]4
8000bf76:	60 d4       	mov.a %a4,%d13
8000bf78:	0e ef       	jltz %d14,8000bf96 <_svfprintf_r+0x78e>
8000bf7a:	82 04       	mov %d4,0
8000bf7c:	02 e5       	mov %d5,%d14
8000bf7e:	6d 00 14 0c 	call 8000d7a6 <memchr>
8000bf82:	bd 02 f6 00 	jz.a %a2,8000c16e <_svfprintf_r+0x966>
8000bf86:	60 d4       	mov.a %a4,%d13
8000bf88:	01 42 20 30 	sub.a %a3,%a2,%a4
8000bf8c:	80 32       	mov.d %d2,%a3
8000bf8e:	0b e2 80 91 	min %d9,%d2,%d14
8000bf92:	1d 00 ee 00 	j 8000c16e <_svfprintf_r+0x966>
8000bf96:	6d ff cb fa 	call 8000b52c <strlen>
8000bf9a:	02 29       	mov %d9,%d2
8000bf9c:	1d 00 e9 00 	j 8000c16e <_svfprintf_r+0x966>
8000bfa0:	8f 0a 41 a1 	or %d10,%d10,16
8000bfa4:	6f 5a 07 00 	jz.t %d10,5,8000bfb2 <_svfprintf_r+0x7aa>
8000bfa8:	d9 fc 08 00 	lea %a12,[%a15]8
8000bfac:	09 f8 40 09 	ld.d %e8,[%a15]
8000bfb0:	3c 0c       	j 8000bfc8 <_svfprintf_r+0x7c0>
8000bfb2:	d9 fc 04 00 	lea %a12,[%a15]4
8000bfb6:	6f 4a 07 80 	jnz.t %d10,4,8000bfc4 <_svfprintf_r+0x7bc>
8000bfba:	6f 6a 05 00 	jz.t %d10,6,8000bfc4 <_svfprintf_r+0x7bc>
8000bfbe:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bfc2:	3c 02       	j 8000bfc6 <_svfprintf_r+0x7be>
8000bfc4:	48 08       	ld.w %d8,[%a15]0
8000bfc6:	82 09       	mov %d9,0
8000bfc8:	82 13       	mov %d3,1
8000bfca:	3c 29       	j 8000c01c <_svfprintf_r+0x814>
8000bfcc:	e9 af 01 10 	st.b [%sp]65,%d15
8000bfd0:	7b 00 00 f8 	movh %d15,32768
8000bfd4:	1b 1f f1 f0 	addi %d15,%d15,3857
8000bfd8:	78 0f       	st.w [%sp]60,%d15
8000bfda:	6f 5a 07 00 	jz.t %d10,5,8000bfe8 <_svfprintf_r+0x7e0>
8000bfde:	d9 fc 08 00 	lea %a12,[%a15]8
8000bfe2:	09 f8 40 09 	ld.d %e8,[%a15]
8000bfe6:	3c 0c       	j 8000bffe <_svfprintf_r+0x7f6>
8000bfe8:	d9 fc 04 00 	lea %a12,[%a15]4
8000bfec:	6f 4a 07 80 	jnz.t %d10,4,8000bffa <_svfprintf_r+0x7f2>
8000bff0:	6f 6a 05 00 	jz.t %d10,6,8000bffa <_svfprintf_r+0x7f2>
8000bff4:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000bff8:	3c 02       	j 8000bffc <_svfprintf_r+0x7f4>
8000bffa:	48 08       	ld.w %d8,[%a15]0
8000bffc:	82 09       	mov %d9,0
8000bffe:	82 23       	mov %d3,2
8000c000:	6f 0a 0e 00 	jz.t %d10,0,8000c01c <_svfprintf_r+0x814>
8000c004:	0f 89 a0 40 	or %d4,%d9,%d8
8000c008:	76 4a       	jz %d4,8000c01c <_svfprintf_r+0x814>
8000c00a:	58 04       	ld.w %d15,[%sp]16
8000c00c:	3b 00 03 70 	mov %d7,48
8000c010:	e9 a7 02 10 	st.b [%sp]66,%d7
8000c014:	e9 af 03 10 	st.b [%sp]67,%d15
8000c018:	8f 2a 40 a1 	or %d10,%d10,2
8000c01c:	82 07       	mov %d7,0
8000c01e:	60 ad       	mov.a %a13,%d10
8000c020:	e9 a7 01 10 	st.b [%sp]65,%d7
8000c024:	80 d2       	mov.d %d2,%a13
8000c026:	8b 0e 80 72 	ge %d7,%d14,0
8000c02a:	8f 02 c8 41 	andn %d4,%d2,128
8000c02e:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000c032:	0f 98 a0 60 	or %d6,%d8,%d9
8000c036:	8b 0e 20 42 	ne %d4,%d14,0
8000c03a:	8b 06 00 45 	or.ne %d4,%d6,0
8000c03e:	60 2d       	mov.a %a13,%d2
8000c040:	df 04 72 00 	jeq %d4,0,8000c124 <_svfprintf_r+0x91c>
8000c044:	df 13 06 00 	jeq %d3,1,8000c050 <_svfprintf_r+0x848>
8000c048:	df 23 57 00 	jeq %d3,2,8000c0f6 <_svfprintf_r+0x8ee>
8000c04c:	82 03       	mov %d3,0
8000c04e:	3c 03       	j 8000c054 <_svfprintf_r+0x84c>
8000c050:	82 04       	mov %d4,0
8000c052:	3c 22       	j 8000c096 <_svfprintf_r+0x88e>
8000c054:	8b 73 02 71 	rsub %d7,%d3,39
8000c058:	60 72       	mov.a %a2,%d7
8000c05a:	8f 78 00 41 	and %d4,%d8,7
8000c05e:	d9 a3 28 10 	lea %a3,[%sp]104
8000c062:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000c066:	30 23       	add.a %a3,%a2
8000c068:	1b 04 03 40 	addi %d4,%d4,48
8000c06c:	06 d9       	sh %d9,-3
8000c06e:	34 34       	st.b [%a3],%d4
8000c070:	0f 89 a0 60 	or %d6,%d9,%d8
8000c074:	c2 13       	add %d3,1
8000c076:	df 06 ef ff 	jne %d6,0,8000c054 <_svfprintf_r+0x84c>
8000c07a:	80 d2       	mov.d %d2,%a13
8000c07c:	80 3d       	mov.d %d13,%a3
8000c07e:	6f 02 61 00 	jz.t %d2,0,8000c140 <_svfprintf_r+0x938>
8000c082:	8b 04 03 42 	eq %d4,%d4,48
8000c086:	df 04 5d 80 	jne %d4,0,8000c140 <_svfprintf_r+0x938>
8000c08a:	3b 00 03 70 	mov %d7,48
8000c08e:	c2 fd       	add %d13,-1
8000c090:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000c094:	3c 56       	j 8000c140 <_svfprintf_r+0x938>
8000c096:	8b 84 02 71 	rsub %d7,%d4,40
8000c09a:	8b 09 00 32 	eq %d3,%d9,0
8000c09e:	60 73       	mov.a %a3,%d7
8000c0a0:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000c0a4:	d9 a7 28 10 	lea %a7,[%sp]104
8000c0a8:	8b 09 00 35 	or.ne %d3,%d9,0
8000c0ac:	30 37       	add.a %a7,%a3
8000c0ae:	1b 14 00 d0 	addi %d13,%d4,1
8000c0b2:	df 03 1b 00 	jeq %d3,0,8000c0e8 <_svfprintf_r+0x8e0>
8000c0b6:	8b 74 02 41 	rsub %d4,%d4,39
8000c0ba:	60 42       	mov.a %a2,%d4
8000c0bc:	fb a0 00 60 	mov %e6,10
8000c0c0:	0b 89 10 48 	mov %e4,%d9,%d8
8000c0c4:	d9 af 28 10 	lea %a15,[%sp]104
8000c0c8:	30 2f       	add.a %a15,%a2
8000c0ca:	6d 00 b1 12 	call 8000e62c <__umoddi3>
8000c0ce:	0b 89 10 48 	mov %e4,%d9,%d8
8000c0d2:	1b 02 03 20 	addi %d2,%d2,48
8000c0d6:	fb a0 00 60 	mov %e6,10
8000c0da:	28 02       	st.b [%a15]0,%d2
8000c0dc:	6d 00 58 12 	call 8000e58c <__udivdi3>
8000c0e0:	02 d4       	mov %d4,%d13
8000c0e2:	0b 23 10 88 	mov %e8,%d3,%d2
8000c0e6:	3c d8       	j 8000c096 <_svfprintf_r+0x88e>
8000c0e8:	80 7d       	mov.d %d13,%a7
8000c0ea:	1b 08 03 80 	addi %d8,%d8,48
8000c0ee:	c2 fd       	add %d13,-1
8000c0f0:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000c0f4:	3c 26       	j 8000c140 <_svfprintf_r+0x938>
8000c0f6:	82 03       	mov %d3,0
8000c0f8:	d8 0f       	ld.a %a15,[%sp]60
8000c0fa:	80 ad       	mov.d %d13,%sp
8000c0fc:	8f f8 00 f1 	and %d15,%d8,15
8000c100:	8b 73 02 71 	rsub %d7,%d3,39
8000c104:	1b 8d 06 d0 	addi %d13,%d13,104
8000c108:	10 f7       	addsc.a %a7,%a15,%d15,0
8000c10a:	42 7d       	add %d13,%d7
8000c10c:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000c110:	0c 70       	ld.bu %d15,[%a7]0
8000c112:	60 d2       	mov.a %a2,%d13
8000c114:	06 c9       	sh %d9,-4
8000c116:	2c 20       	st.b [%a2]0,%d15
8000c118:	0f 89 a0 40 	or %d4,%d9,%d8
8000c11c:	c2 13       	add %d3,1
8000c11e:	df 04 ed ff 	jne %d4,0,8000c0f8 <_svfprintf_r+0x8f0>
8000c122:	3c 0f       	j 8000c140 <_svfprintf_r+0x938>
8000c124:	80 a2       	mov.d %d2,%sp
8000c126:	1b 02 09 d0 	addi %d13,%d2,144
8000c12a:	f6 3b       	jnz %d3,8000c140 <_svfprintf_r+0x938>
8000c12c:	80 df       	mov.d %d15,%a13
8000c12e:	2e 09       	jz.t %d15,0,8000c140 <_svfprintf_r+0x938>
8000c130:	1b 02 0d d0 	addi %d13,%d2,208
8000c134:	60 d2       	mov.a %a2,%d13
8000c136:	3b 00 03 70 	mov %d7,48
8000c13a:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000c13e:	80 2d       	mov.d %d13,%a2
8000c140:	d9 a3 10 20 	lea %a3,[%sp]144
8000c144:	80 39       	mov.d %d9,%a3
8000c146:	a2 d9       	sub %d9,%d13
8000c148:	3c 14       	j 8000c170 <_svfprintf_r+0x968>
8000c14a:	e9 af 01 10 	st.b [%sp]65,%d15
8000c14e:	58 04       	ld.w %d15,[%sp]16
8000c150:	df 0f 1f 04 	jeq %d15,0,8000c98e <_svfprintf_r+0x1186>
8000c154:	82 03       	mov %d3,0
8000c156:	60 ad       	mov.a %a13,%d10
8000c158:	e9 af 28 10 	st.b [%sp]104,%d15
8000c15c:	e9 a3 01 10 	st.b [%sp]65,%d3
8000c160:	40 fc       	mov.aa %a12,%a15
8000c162:	80 a2       	mov.d %d2,%sp
8000c164:	82 19       	mov %d9,1
8000c166:	82 0e       	mov %d14,0
8000c168:	1b 82 06 d0 	addi %d13,%d2,104
8000c16c:	3c 02       	j 8000c170 <_svfprintf_r+0x968>
8000c16e:	82 0e       	mov %d14,0
8000c170:	79 a7 01 10 	ld.b %d7,[%sp]65
8000c174:	80 df       	mov.d %d15,%a13
8000c176:	0b e9 a0 a1 	max %d10,%d9,%d14
8000c17a:	80 d2       	mov.d %d2,%a13
8000c17c:	16 02       	and %d15,2
8000c17e:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000c182:	60 ff       	mov.a %a15,%d15
8000c184:	8a 2a       	cadd %d10,%d15,2
8000c186:	8f 42 08 f1 	and %d15,%d2,132
8000c18a:	ee 48       	jnz %d15,8000c21a <_svfprintf_r+0xa12>
8000c18c:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000c190:	a2 a8       	sub %d8,%d10
8000c192:	bf 18 44 00 	jlt %d8,1,8000c21a <_svfprintf_r+0xa12>
8000c196:	91 00 00 28 	movh.a %a2,32768
8000c19a:	d9 22 f4 c0 	lea %a2,[%a2]3892 <80000f34 <blanks.4035>>
8000c19e:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000f34 <blanks.4035>>
8000c1a2:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000f34 <blanks.4035>>
8000c1a6:	8b 18 81 72 	ge %d7,%d8,17
8000c1aa:	f4 e2       	st.a [%a14],%a2
8000c1ac:	df 07 20 00 	jeq %d7,0,8000c1ec <_svfprintf_r+0x9e4>
8000c1b0:	1b 14 00 00 	addi %d0,%d4,1
8000c1b4:	3b 00 01 20 	mov %d2,16
8000c1b8:	1b 01 01 10 	addi %d1,%d1,16
8000c1bc:	59 e2 04 00 	st.w [%a14]4,%d2
8000c1c0:	59 a0 20 10 	st.w [%sp]96,%d0
8000c1c4:	59 a1 24 10 	st.w [%sp]100,%d1
8000c1c8:	8b 80 80 02 	ge %d0,%d0,8
8000c1cc:	d9 ee 08 00 	lea %a14,[%a14]8
8000c1d0:	76 0b       	jz %d0,8000c1e6 <_svfprintf_r+0x9de>
8000c1d2:	60 c4       	mov.a %a4,%d12
8000c1d4:	60 b5       	mov.a %a5,%d11
8000c1d6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1da:	6d 00 f4 0d 	call 8000ddc2 <__ssprint_r>
8000c1de:	df 02 e0 83 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c1e2:	d9 ae 10 20 	lea %a14,[%sp]144
8000c1e6:	1b 08 ff 8f 	addi %d8,%d8,-16
8000c1ea:	3c d6       	j 8000c196 <_svfprintf_r+0x98e>
8000c1ec:	c2 14       	add %d4,1
8000c1ee:	42 81       	add %d1,%d8
8000c1f0:	59 e8 04 00 	st.w [%a14]4,%d8
8000c1f4:	59 a4 20 10 	st.w [%sp]96,%d4
8000c1f8:	59 a1 24 10 	st.w [%sp]100,%d1
8000c1fc:	8b 84 80 42 	ge %d4,%d4,8
8000c200:	d9 ee 08 00 	lea %a14,[%a14]8
8000c204:	76 4b       	jz %d4,8000c21a <_svfprintf_r+0xa12>
8000c206:	60 c4       	mov.a %a4,%d12
8000c208:	60 b5       	mov.a %a5,%d11
8000c20a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c20e:	6d 00 da 0d 	call 8000ddc2 <__ssprint_r>
8000c212:	df 02 c6 83 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c216:	d9 ae 10 20 	lea %a14,[%sp]144
8000c21a:	79 a4 01 10 	ld.b %d4,[%sp]65
8000c21e:	df 04 21 00 	jeq %d4,0,8000c260 <_svfprintf_r+0xa58>
8000c222:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c226:	d9 a7 01 10 	lea %a7,[%sp]65
8000c22a:	c2 14       	add %d4,1
8000c22c:	59 a4 24 10 	st.w [%sp]100,%d4
8000c230:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c234:	82 17       	mov %d7,1
8000c236:	c2 14       	add %d4,1
8000c238:	f4 e7       	st.a [%a14],%a7
8000c23a:	59 e7 04 00 	st.w [%a14]4,%d7
8000c23e:	59 a4 20 10 	st.w [%sp]96,%d4
8000c242:	8b 84 80 42 	ge %d4,%d4,8
8000c246:	d9 ee 08 00 	lea %a14,[%a14]8
8000c24a:	76 4b       	jz %d4,8000c260 <_svfprintf_r+0xa58>
8000c24c:	60 c4       	mov.a %a4,%d12
8000c24e:	60 b5       	mov.a %a5,%d11
8000c250:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c254:	6d 00 b7 0d 	call 8000ddc2 <__ssprint_r>
8000c258:	df 02 a3 83 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c25c:	d9 ae 10 20 	lea %a14,[%sp]144
8000c260:	bd 0f 21 00 	jz.a %a15,8000c2a2 <_svfprintf_r+0xa9a>
8000c264:	19 a4 24 10 	ld.w %d4,[%sp]100
8000c268:	d9 a7 02 10 	lea %a7,[%sp]66
8000c26c:	c2 24       	add %d4,2
8000c26e:	59 a4 24 10 	st.w [%sp]100,%d4
8000c272:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c276:	82 27       	mov %d7,2
8000c278:	c2 14       	add %d4,1
8000c27a:	f4 e7       	st.a [%a14],%a7
8000c27c:	59 e7 04 00 	st.w [%a14]4,%d7
8000c280:	59 a4 20 10 	st.w [%sp]96,%d4
8000c284:	8b 84 80 42 	ge %d4,%d4,8
8000c288:	d9 ee 08 00 	lea %a14,[%a14]8
8000c28c:	76 4b       	jz %d4,8000c2a2 <_svfprintf_r+0xa9a>
8000c28e:	60 c4       	mov.a %a4,%d12
8000c290:	60 b5       	mov.a %a5,%d11
8000c292:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c296:	6d 00 96 0d 	call 8000ddc2 <__ssprint_r>
8000c29a:	df 02 82 83 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c29e:	d9 ae 10 20 	lea %a14,[%sp]144
8000c2a2:	8b 0f 28 42 	ne %d4,%d15,128
8000c2a6:	df 04 48 80 	jne %d4,0,8000c336 <_svfprintf_r+0xb2e>
8000c2aa:	58 07       	ld.w %d15,[%sp]28
8000c2ac:	7b 00 00 28 	movh %d2,32768
8000c2b0:	60 23       	mov.a %a3,%d2
8000c2b2:	a2 af       	sub %d15,%d10
8000c2b4:	d9 3f e4 c0 	lea %a15,[%a3]3876
8000c2b8:	bf 1f 3f 00 	jlt %d15,1,8000c336 <_svfprintf_r+0xb2e>
8000c2bc:	19 a7 24 10 	ld.w %d7,[%sp]100
8000c2c0:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c2c4:	8b 1f 81 82 	ge %d8,%d15,17
8000c2c8:	ec e0       	st.a [%a14]0,%a15
8000c2ca:	df 08 20 00 	jeq %d8,0,8000c30a <_svfprintf_r+0xb02>
8000c2ce:	1b 14 00 00 	addi %d0,%d4,1
8000c2d2:	3b 00 01 20 	mov %d2,16
8000c2d6:	1b 07 01 10 	addi %d1,%d7,16
8000c2da:	59 e2 04 00 	st.w [%a14]4,%d2
8000c2de:	59 a0 20 10 	st.w [%sp]96,%d0
8000c2e2:	59 a1 24 10 	st.w [%sp]100,%d1
8000c2e6:	8b 80 80 02 	ge %d0,%d0,8
8000c2ea:	d9 ee 08 00 	lea %a14,[%a14]8
8000c2ee:	76 0b       	jz %d0,8000c304 <_svfprintf_r+0xafc>
8000c2f0:	60 c4       	mov.a %a4,%d12
8000c2f2:	60 b5       	mov.a %a5,%d11
8000c2f4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c2f8:	6d 00 65 0d 	call 8000ddc2 <__ssprint_r>
8000c2fc:	df 02 51 83 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c300:	d9 ae 10 20 	lea %a14,[%sp]144
8000c304:	1b 0f ff ff 	addi %d15,%d15,-16
8000c308:	3c da       	j 8000c2bc <_svfprintf_r+0xab4>
8000c30a:	c2 14       	add %d4,1
8000c30c:	42 f7       	add %d7,%d15
8000c30e:	6c e1       	st.w [%a14]4,%d15
8000c310:	59 a4 20 10 	st.w [%sp]96,%d4
8000c314:	59 a7 24 10 	st.w [%sp]100,%d7
8000c318:	8b 84 80 42 	ge %d4,%d4,8
8000c31c:	d9 ee 08 00 	lea %a14,[%a14]8
8000c320:	76 4b       	jz %d4,8000c336 <_svfprintf_r+0xb2e>
8000c322:	60 c4       	mov.a %a4,%d12
8000c324:	60 b5       	mov.a %a5,%d11
8000c326:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c32a:	6d 00 4c 0d 	call 8000ddc2 <__ssprint_r>
8000c32e:	df 02 38 83 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c332:	d9 ae 10 20 	lea %a14,[%sp]144
8000c336:	7b 00 00 88 	movh %d8,32768
8000c33a:	a2 9e       	sub %d14,%d9
8000c33c:	1b 48 f2 80 	addi %d8,%d8,3876
8000c340:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000c344:	bf 1e 3c 00 	jlt %d14,1,8000c3bc <_svfprintf_r+0xbb4>
8000c348:	19 a6 24 10 	ld.w %d6,[%sp]100
8000c34c:	19 a4 20 10 	ld.w %d4,[%sp]96
8000c350:	8b 1e 81 02 	ge %d0,%d14,17
8000c354:	74 e8       	st.w [%a14],%d8
8000c356:	df 00 1c 00 	jeq %d0,0,8000c38e <_svfprintf_r+0xb86>
8000c35a:	c2 14       	add %d4,1
8000c35c:	1b 06 01 00 	addi %d0,%d6,16
8000c360:	ec e1       	st.a [%a14]4,%a15
8000c362:	59 a4 20 10 	st.w [%sp]96,%d4
8000c366:	59 a0 24 10 	st.w [%sp]100,%d0
8000c36a:	8b 84 80 42 	ge %d4,%d4,8
8000c36e:	d9 ee 08 00 	lea %a14,[%a14]8
8000c372:	76 4b       	jz %d4,8000c388 <_svfprintf_r+0xb80>
8000c374:	60 c4       	mov.a %a4,%d12
8000c376:	60 b5       	mov.a %a5,%d11
8000c378:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c37c:	6d 00 23 0d 	call 8000ddc2 <__ssprint_r>
8000c380:	df 02 0f 83 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c384:	d9 ae 10 20 	lea %a14,[%sp]144
8000c388:	1b 0e ff ef 	addi %d14,%d14,-16
8000c38c:	3c de       	j 8000c348 <_svfprintf_r+0xb40>
8000c38e:	c2 14       	add %d4,1
8000c390:	42 e6       	add %d6,%d14
8000c392:	59 ee 04 00 	st.w [%a14]4,%d14
8000c396:	59 a4 20 10 	st.w [%sp]96,%d4
8000c39a:	59 a6 24 10 	st.w [%sp]100,%d6
8000c39e:	8b 84 80 42 	ge %d4,%d4,8
8000c3a2:	d9 ee 08 00 	lea %a14,[%a14]8
8000c3a6:	76 4b       	jz %d4,8000c3bc <_svfprintf_r+0xbb4>
8000c3a8:	60 c4       	mov.a %a4,%d12
8000c3aa:	60 b5       	mov.a %a5,%d11
8000c3ac:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3b0:	6d 00 09 0d 	call 8000ddc2 <__ssprint_r>
8000c3b4:	df 02 f5 82 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c3b8:	d9 ae 10 20 	lea %a14,[%sp]144
8000c3bc:	80 df       	mov.d %d15,%a13
8000c3be:	19 ae 24 10 	ld.w %d14,[%sp]100
8000c3c2:	19 a8 20 10 	ld.w %d8,[%sp]96
8000c3c6:	6f 8f 1d 80 	jnz.t %d15,8,8000c400 <_svfprintf_r+0xbf8>
8000c3ca:	c2 18       	add %d8,1
8000c3cc:	59 e9 04 00 	st.w [%a14]4,%d9
8000c3d0:	42 e9       	add %d9,%d14
8000c3d2:	59 a8 20 10 	st.w [%sp]96,%d8
8000c3d6:	74 ed       	st.w [%a14],%d13
8000c3d8:	59 a9 24 10 	st.w [%sp]100,%d9
8000c3dc:	8b 88 80 82 	ge %d8,%d8,8
8000c3e0:	d9 ef 08 00 	lea %a15,[%a14]8
8000c3e4:	df 08 79 02 	jeq %d8,0,8000c8d6 <_svfprintf_r+0x10ce>
8000c3e8:	60 c4       	mov.a %a4,%d12
8000c3ea:	60 b5       	mov.a %a5,%d11
8000c3ec:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c3f0:	6d 00 e9 0c 	call 8000ddc2 <__ssprint_r>
8000c3f4:	df 02 d5 82 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c3f8:	d9 af 10 20 	lea %a15,[%sp]144
8000c3fc:	1d 00 6d 02 	j 8000c8d6 <_svfprintf_r+0x10ce>
8000c400:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c404:	8b 62 46 f2 	lt %d15,%d2,102
8000c408:	df 0f be 81 	jne %d15,0,8000c784 <_svfprintf_r+0xf7c>
8000c40c:	d2 06       	mov %e6,0
8000c40e:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c412:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c416:	6d 00 db 0f 	call 8000e3cc <__eqdf2>
8000c41a:	df 02 78 80 	jne %d2,0,8000c50a <_svfprintf_r+0xd02>
8000c41e:	7b 00 00 38 	movh %d3,32768
8000c422:	1b 23 f2 30 	addi %d3,%d3,3874
8000c426:	c2 18       	add %d8,1
8000c428:	74 e3       	st.w [%a14],%d3
8000c42a:	1b 1e 00 90 	addi %d9,%d14,1
8000c42e:	82 13       	mov %d3,1
8000c430:	59 a8 20 10 	st.w [%sp]96,%d8
8000c434:	59 e3 04 00 	st.w [%a14]4,%d3
8000c438:	59 a9 24 10 	st.w [%sp]100,%d9
8000c43c:	8b 88 80 82 	ge %d8,%d8,8
8000c440:	d9 ef 08 00 	lea %a15,[%a14]8
8000c444:	76 8b       	jz %d8,8000c45a <_svfprintf_r+0xc52>
8000c446:	60 c4       	mov.a %a4,%d12
8000c448:	60 b5       	mov.a %a5,%d11
8000c44a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c44e:	6d 00 ba 0c 	call 8000ddc2 <__ssprint_r>
8000c452:	df 02 a6 82 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c456:	d9 af 10 20 	lea %a15,[%sp]144
8000c45a:	58 11       	ld.w %d15,[%sp]68
8000c45c:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c460:	3f 2f 05 00 	jlt %d15,%d2,8000c46a <_svfprintf_r+0xc62>
8000c464:	80 df       	mov.d %d15,%a13
8000c466:	6f 0f 38 02 	jz.t %d15,0,8000c8d6 <_svfprintf_r+0x10ce>
8000c46a:	58 08       	ld.w %d15,[%sp]32
8000c46c:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c470:	68 1f       	st.w [%a15]4,%d15
8000c472:	58 19       	ld.w %d15,[%sp]100
8000c474:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c478:	42 2f       	add %d15,%d2
8000c47a:	78 19       	st.w [%sp]100,%d15
8000c47c:	58 18       	ld.w %d15,[%sp]96
8000c47e:	e8 03       	st.a [%a15]0,%a3
8000c480:	c2 1f       	add %d15,1
8000c482:	78 18       	st.w [%sp]96,%d15
8000c484:	8b 8f 80 f2 	ge %d15,%d15,8
8000c488:	d9 ff 08 00 	lea %a15,[%a15]8
8000c48c:	6e 0b       	jz %d15,8000c4a2 <_svfprintf_r+0xc9a>
8000c48e:	60 c4       	mov.a %a4,%d12
8000c490:	60 b5       	mov.a %a5,%d11
8000c492:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c496:	6d 00 96 0c 	call 8000ddc2 <__ssprint_r>
8000c49a:	df 02 82 82 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c49e:	d9 af 10 20 	lea %a15,[%sp]144
8000c4a2:	58 05       	ld.w %d15,[%sp]20
8000c4a4:	7b 00 00 88 	movh %d8,32768
8000c4a8:	c2 ff       	add %d15,-1
8000c4aa:	1b 48 f2 80 	addi %d8,%d8,3876
8000c4ae:	3b 00 01 90 	mov %d9,16
8000c4b2:	bf 1f 12 02 	jlt %d15,1,8000c8d6 <_svfprintf_r+0x10ce>
8000c4b6:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c4ba:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c4be:	8b 1f 81 42 	ge %d4,%d15,17
8000c4c2:	68 08       	st.w [%a15]0,%d8
8000c4c4:	df 04 1c 00 	jeq %d4,0,8000c4fc <_svfprintf_r+0xcf4>
8000c4c8:	c2 13       	add %d3,1
8000c4ca:	1b 05 01 40 	addi %d4,%d5,16
8000c4ce:	68 19       	st.w [%a15]4,%d9
8000c4d0:	59 a3 20 10 	st.w [%sp]96,%d3
8000c4d4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c4d8:	8b 83 80 32 	ge %d3,%d3,8
8000c4dc:	d9 ff 08 00 	lea %a15,[%a15]8
8000c4e0:	76 3b       	jz %d3,8000c4f6 <_svfprintf_r+0xcee>
8000c4e2:	60 c4       	mov.a %a4,%d12
8000c4e4:	60 b5       	mov.a %a5,%d11
8000c4e6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c4ea:	6d 00 6c 0c 	call 8000ddc2 <__ssprint_r>
8000c4ee:	df 02 58 82 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c4f2:	d9 af 10 20 	lea %a15,[%sp]144
8000c4f6:	1b 0f ff ff 	addi %d15,%d15,-16
8000c4fa:	3c de       	j 8000c4b6 <_svfprintf_r+0xcae>
8000c4fc:	12 54       	add %d4,%d15,%d5
8000c4fe:	68 1f       	st.w [%a15]4,%d15
8000c500:	59 a4 24 10 	st.w [%sp]100,%d4
8000c504:	9a 13       	add %d15,%d3,1
8000c506:	1d 00 e1 01 	j 8000c8c8 <_svfprintf_r+0x10c0>
8000c50a:	19 a3 04 10 	ld.w %d3,[%sp]68
8000c50e:	ff 13 8e 00 	jge %d3,1,8000c62a <_svfprintf_r+0xe22>
8000c512:	7b 00 00 38 	movh %d3,32768
8000c516:	1b 23 f2 30 	addi %d3,%d3,3874
8000c51a:	c2 18       	add %d8,1
8000c51c:	74 e3       	st.w [%a14],%d3
8000c51e:	1b 1e 00 90 	addi %d9,%d14,1
8000c522:	82 13       	mov %d3,1
8000c524:	59 a8 20 10 	st.w [%sp]96,%d8
8000c528:	59 e3 04 00 	st.w [%a14]4,%d3
8000c52c:	59 a9 24 10 	st.w [%sp]100,%d9
8000c530:	8b 88 80 82 	ge %d8,%d8,8
8000c534:	d9 ef 08 00 	lea %a15,[%a14]8
8000c538:	76 8b       	jz %d8,8000c54e <_svfprintf_r+0xd46>
8000c53a:	60 c4       	mov.a %a4,%d12
8000c53c:	60 b5       	mov.a %a5,%d11
8000c53e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c542:	6d 00 40 0c 	call 8000ddc2 <__ssprint_r>
8000c546:	df 02 2c 82 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c54a:	d9 af 10 20 	lea %a15,[%sp]144
8000c54e:	58 11       	ld.w %d15,[%sp]68
8000c550:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c554:	a6 2f       	or %d15,%d2
8000c556:	ee 04       	jnz %d15,8000c55e <_svfprintf_r+0xd56>
8000c558:	80 df       	mov.d %d15,%a13
8000c55a:	6f 0f be 01 	jz.t %d15,0,8000c8d6 <_svfprintf_r+0x10ce>
8000c55e:	58 08       	ld.w %d15,[%sp]32
8000c560:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c564:	68 1f       	st.w [%a15]4,%d15
8000c566:	58 19       	ld.w %d15,[%sp]100
8000c568:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c56c:	42 2f       	add %d15,%d2
8000c56e:	78 19       	st.w [%sp]100,%d15
8000c570:	58 18       	ld.w %d15,[%sp]96
8000c572:	e8 03       	st.a [%a15]0,%a3
8000c574:	c2 1f       	add %d15,1
8000c576:	78 18       	st.w [%sp]96,%d15
8000c578:	8b 8f 80 f2 	ge %d15,%d15,8
8000c57c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c580:	6e 0b       	jz %d15,8000c596 <_svfprintf_r+0xd8e>
8000c582:	60 c4       	mov.a %a4,%d12
8000c584:	60 b5       	mov.a %a5,%d11
8000c586:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c58a:	6d 00 1c 0c 	call 8000ddc2 <__ssprint_r>
8000c58e:	df 02 08 82 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c592:	d9 af 10 20 	lea %a15,[%sp]144
8000c596:	58 11       	ld.w %d15,[%sp]68
8000c598:	7b 00 00 88 	movh %d8,32768
8000c59c:	32 5f       	rsub %d15
8000c59e:	1b 48 f2 80 	addi %d8,%d8,3876
8000c5a2:	3b 00 01 90 	mov %d9,16
8000c5a6:	bf 1f 3a 00 	jlt %d15,1,8000c61a <_svfprintf_r+0xe12>
8000c5aa:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c5ae:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c5b2:	8b 1f 81 42 	ge %d4,%d15,17
8000c5b6:	68 08       	st.w [%a15]0,%d8
8000c5b8:	df 04 1c 00 	jeq %d4,0,8000c5f0 <_svfprintf_r+0xde8>
8000c5bc:	c2 13       	add %d3,1
8000c5be:	1b 05 01 40 	addi %d4,%d5,16
8000c5c2:	68 19       	st.w [%a15]4,%d9
8000c5c4:	59 a3 20 10 	st.w [%sp]96,%d3
8000c5c8:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5cc:	8b 83 80 32 	ge %d3,%d3,8
8000c5d0:	d9 ff 08 00 	lea %a15,[%a15]8
8000c5d4:	76 3b       	jz %d3,8000c5ea <_svfprintf_r+0xde2>
8000c5d6:	60 c4       	mov.a %a4,%d12
8000c5d8:	60 b5       	mov.a %a5,%d11
8000c5da:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c5de:	6d 00 f2 0b 	call 8000ddc2 <__ssprint_r>
8000c5e2:	df 02 de 81 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c5e6:	d9 af 10 20 	lea %a15,[%sp]144
8000c5ea:	1b 0f ff ff 	addi %d15,%d15,-16
8000c5ee:	3c de       	j 8000c5aa <_svfprintf_r+0xda2>
8000c5f0:	68 1f       	st.w [%a15]4,%d15
8000c5f2:	12 54       	add %d4,%d15,%d5
8000c5f4:	9a 13       	add %d15,%d3,1
8000c5f6:	78 18       	st.w [%sp]96,%d15
8000c5f8:	59 a4 24 10 	st.w [%sp]100,%d4
8000c5fc:	8b 8f 80 f2 	ge %d15,%d15,8
8000c600:	d9 ff 08 00 	lea %a15,[%a15]8
8000c604:	6e 0b       	jz %d15,8000c61a <_svfprintf_r+0xe12>
8000c606:	60 c4       	mov.a %a4,%d12
8000c608:	60 b5       	mov.a %a5,%d11
8000c60a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c60e:	6d 00 da 0b 	call 8000ddc2 <__ssprint_r>
8000c612:	df 02 c6 81 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c616:	d9 af 10 20 	lea %a15,[%sp]144
8000c61a:	58 05       	ld.w %d15,[%sp]20
8000c61c:	68 0d       	st.w [%a15]0,%d13
8000c61e:	68 1f       	st.w [%a15]4,%d15
8000c620:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c624:	58 19       	ld.w %d15,[%sp]100
8000c626:	1d 00 4d 01 	j 8000c8c0 <_svfprintf_r+0x10b8>
8000c62a:	58 05       	ld.w %d15,[%sp]20
8000c62c:	74 ed       	st.w [%a14],%d13
8000c62e:	3f f3 6a 00 	jlt %d3,%d15,8000c702 <_svfprintf_r+0xefa>
8000c632:	02 f9       	mov %d9,%d15
8000c634:	c2 18       	add %d8,1
8000c636:	42 e9       	add %d9,%d14
8000c638:	59 a8 20 10 	st.w [%sp]96,%d8
8000c63c:	6c e1       	st.w [%a14]4,%d15
8000c63e:	59 a9 24 10 	st.w [%sp]100,%d9
8000c642:	8b 88 80 82 	ge %d8,%d8,8
8000c646:	d9 ef 08 00 	lea %a15,[%a14]8
8000c64a:	76 8b       	jz %d8,8000c660 <_svfprintf_r+0xe58>
8000c64c:	60 c4       	mov.a %a4,%d12
8000c64e:	60 b5       	mov.a %a5,%d11
8000c650:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c654:	6d 00 b7 0b 	call 8000ddc2 <__ssprint_r>
8000c658:	df 02 a3 81 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c65c:	d9 af 10 20 	lea %a15,[%sp]144
8000c660:	58 11       	ld.w %d15,[%sp]68
8000c662:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c666:	7b 00 00 88 	movh %d8,32768
8000c66a:	a2 2f       	sub %d15,%d2
8000c66c:	1b 48 f2 80 	addi %d8,%d8,3876
8000c670:	3b 00 01 90 	mov %d9,16
8000c674:	bf 1f 3a 00 	jlt %d15,1,8000c6e8 <_svfprintf_r+0xee0>
8000c678:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c67c:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c680:	8b 1f 81 42 	ge %d4,%d15,17
8000c684:	68 08       	st.w [%a15]0,%d8
8000c686:	df 04 1c 00 	jeq %d4,0,8000c6be <_svfprintf_r+0xeb6>
8000c68a:	c2 13       	add %d3,1
8000c68c:	1b 05 01 40 	addi %d4,%d5,16
8000c690:	68 19       	st.w [%a15]4,%d9
8000c692:	59 a3 20 10 	st.w [%sp]96,%d3
8000c696:	59 a4 24 10 	st.w [%sp]100,%d4
8000c69a:	8b 83 80 32 	ge %d3,%d3,8
8000c69e:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6a2:	76 3b       	jz %d3,8000c6b8 <_svfprintf_r+0xeb0>
8000c6a4:	60 c4       	mov.a %a4,%d12
8000c6a6:	60 b5       	mov.a %a5,%d11
8000c6a8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6ac:	6d 00 8b 0b 	call 8000ddc2 <__ssprint_r>
8000c6b0:	df 02 77 81 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c6b4:	d9 af 10 20 	lea %a15,[%sp]144
8000c6b8:	1b 0f ff ff 	addi %d15,%d15,-16
8000c6bc:	3c de       	j 8000c678 <_svfprintf_r+0xe70>
8000c6be:	68 1f       	st.w [%a15]4,%d15
8000c6c0:	12 54       	add %d4,%d15,%d5
8000c6c2:	9a 13       	add %d15,%d3,1
8000c6c4:	78 18       	st.w [%sp]96,%d15
8000c6c6:	59 a4 24 10 	st.w [%sp]100,%d4
8000c6ca:	8b 8f 80 f2 	ge %d15,%d15,8
8000c6ce:	d9 ff 08 00 	lea %a15,[%a15]8
8000c6d2:	6e 0b       	jz %d15,8000c6e8 <_svfprintf_r+0xee0>
8000c6d4:	60 c4       	mov.a %a4,%d12
8000c6d6:	60 b5       	mov.a %a5,%d11
8000c6d8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c6dc:	6d 00 73 0b 	call 8000ddc2 <__ssprint_r>
8000c6e0:	df 02 5f 81 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c6e4:	d9 af 10 20 	lea %a15,[%sp]144
8000c6e8:	80 df       	mov.d %d15,%a13
8000c6ea:	6f 0f f6 00 	jz.t %d15,0,8000c8d6 <_svfprintf_r+0x10ce>
8000c6ee:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c6f2:	58 08       	ld.w %d15,[%sp]32
8000c6f4:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c6f8:	68 1f       	st.w [%a15]4,%d15
8000c6fa:	e8 03       	st.a [%a15]0,%a3
8000c6fc:	58 19       	ld.w %d15,[%sp]100
8000c6fe:	1d 00 e1 00 	j 8000c8c0 <_svfprintf_r+0x10b8>
8000c702:	c2 18       	add %d8,1
8000c704:	59 e3 04 00 	st.w [%a14]4,%d3
8000c708:	42 e3       	add %d3,%d14
8000c70a:	59 a8 20 10 	st.w [%sp]96,%d8
8000c70e:	59 a3 24 10 	st.w [%sp]100,%d3
8000c712:	8b 88 80 82 	ge %d8,%d8,8
8000c716:	d9 ef 08 00 	lea %a15,[%a14]8
8000c71a:	76 8b       	jz %d8,8000c730 <_svfprintf_r+0xf28>
8000c71c:	60 c4       	mov.a %a4,%d12
8000c71e:	60 b5       	mov.a %a5,%d11
8000c720:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c724:	6d 00 4f 0b 	call 8000ddc2 <__ssprint_r>
8000c728:	df 02 3b 81 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c72c:	d9 af 10 20 	lea %a15,[%sp]144
8000c730:	58 08       	ld.w %d15,[%sp]32
8000c732:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c736:	68 1f       	st.w [%a15]4,%d15
8000c738:	58 19       	ld.w %d15,[%sp]100
8000c73a:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c73e:	42 2f       	add %d15,%d2
8000c740:	78 19       	st.w [%sp]100,%d15
8000c742:	58 18       	ld.w %d15,[%sp]96
8000c744:	99 ae 04 10 	ld.a %a14,[%sp]68
8000c748:	c2 1f       	add %d15,1
8000c74a:	60 d2       	mov.a %a2,%d13
8000c74c:	e8 03       	st.a [%a15]0,%a3
8000c74e:	78 18       	st.w [%sp]96,%d15
8000c750:	8b 8f 80 f2 	ge %d15,%d15,8
8000c754:	30 2e       	add.a %a14,%a2
8000c756:	d9 ff 08 00 	lea %a15,[%a15]8
8000c75a:	6e 0b       	jz %d15,8000c770 <_svfprintf_r+0xf68>
8000c75c:	60 c4       	mov.a %a4,%d12
8000c75e:	60 b5       	mov.a %a5,%d11
8000c760:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c764:	6d 00 2f 0b 	call 8000ddc2 <__ssprint_r>
8000c768:	df 02 1b 81 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c76c:	d9 af 10 20 	lea %a15,[%sp]144
8000c770:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c774:	58 11       	ld.w %d15,[%sp]68
8000c776:	e8 0e       	st.a [%a15]0,%a14
8000c778:	5a f2       	sub %d15,%d2,%d15
8000c77a:	68 1f       	st.w [%a15]4,%d15
8000c77c:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c780:	1d 00 a0 00 	j 8000c8c0 <_svfprintf_r+0x10b8>
8000c784:	c2 18       	add %d8,1
8000c786:	82 13       	mov %d3,1
8000c788:	1b 1e 00 90 	addi %d9,%d14,1
8000c78c:	58 05       	ld.w %d15,[%sp]20
8000c78e:	59 a8 20 10 	st.w [%sp]96,%d8
8000c792:	74 ed       	st.w [%a14],%d13
8000c794:	59 e3 04 00 	st.w [%a14]4,%d3
8000c798:	59 a9 24 10 	st.w [%sp]100,%d9
8000c79c:	8b 88 80 82 	ge %d8,%d8,8
8000c7a0:	ff 2f 05 00 	jge %d15,2,8000c7aa <_svfprintf_r+0xfa2>
8000c7a4:	80 d2       	mov.d %d2,%a13
8000c7a6:	6f 02 81 00 	jz.t %d2,0,8000c8a8 <_svfprintf_r+0x10a0>
8000c7aa:	d9 ef 08 00 	lea %a15,[%a14]8
8000c7ae:	76 8b       	jz %d8,8000c7c4 <_svfprintf_r+0xfbc>
8000c7b0:	60 c4       	mov.a %a4,%d12
8000c7b2:	60 b5       	mov.a %a5,%d11
8000c7b4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7b8:	6d 00 05 0b 	call 8000ddc2 <__ssprint_r>
8000c7bc:	df 02 f1 80 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c7c0:	d9 af 10 20 	lea %a15,[%sp]144
8000c7c4:	58 08       	ld.w %d15,[%sp]32
8000c7c6:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c7ca:	68 1f       	st.w [%a15]4,%d15
8000c7cc:	58 19       	ld.w %d15,[%sp]100
8000c7ce:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c7d2:	42 2f       	add %d15,%d2
8000c7d4:	78 19       	st.w [%sp]100,%d15
8000c7d6:	58 18       	ld.w %d15,[%sp]96
8000c7d8:	e8 03       	st.a [%a15]0,%a3
8000c7da:	c2 1f       	add %d15,1
8000c7dc:	78 18       	st.w [%sp]96,%d15
8000c7de:	8b 8f 80 f2 	ge %d15,%d15,8
8000c7e2:	d9 ff 08 00 	lea %a15,[%a15]8
8000c7e6:	6e 0b       	jz %d15,8000c7fc <_svfprintf_r+0xff4>
8000c7e8:	60 c4       	mov.a %a4,%d12
8000c7ea:	60 b5       	mov.a %a5,%d11
8000c7ec:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c7f0:	6d 00 e9 0a 	call 8000ddc2 <__ssprint_r>
8000c7f4:	df 02 d5 80 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c7f8:	d9 af 10 20 	lea %a15,[%sp]144
8000c7fc:	d2 06       	mov %e6,0
8000c7fe:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c802:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c806:	6d 00 03 0e 	call 8000e40c <__nedf2>
8000c80a:	58 05       	ld.w %d15,[%sp]20
8000c80c:	c2 ff       	add %d15,-1
8000c80e:	76 2c       	jz %d2,8000c826 <_svfprintf_r+0x101e>
8000c810:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c814:	60 de       	mov.a %a14,%d13
8000c816:	68 1f       	st.w [%a15]4,%d15
8000c818:	42 2f       	add %d15,%d2
8000c81a:	78 19       	st.w [%sp]100,%d15
8000c81c:	58 18       	ld.w %d15,[%sp]96
8000c81e:	b0 1e       	add.a %a14,1
8000c820:	e8 0e       	st.a [%a15]0,%a14
8000c822:	c2 1f       	add %d15,1
8000c824:	3c 31       	j 8000c886 <_svfprintf_r+0x107e>
8000c826:	7b 00 00 88 	movh %d8,32768
8000c82a:	1b 48 f2 80 	addi %d8,%d8,3876
8000c82e:	3b 00 01 90 	mov %d9,16
8000c832:	bf 1f 3f 00 	jlt %d15,1,8000c8b0 <_svfprintf_r+0x10a8>
8000c836:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c83a:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c83e:	8b 1f 81 42 	ge %d4,%d15,17
8000c842:	68 08       	st.w [%a15]0,%d8
8000c844:	df 04 1c 00 	jeq %d4,0,8000c87c <_svfprintf_r+0x1074>
8000c848:	c2 13       	add %d3,1
8000c84a:	1b 05 01 40 	addi %d4,%d5,16
8000c84e:	68 19       	st.w [%a15]4,%d9
8000c850:	59 a3 20 10 	st.w [%sp]96,%d3
8000c854:	59 a4 24 10 	st.w [%sp]100,%d4
8000c858:	8b 83 80 32 	ge %d3,%d3,8
8000c85c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c860:	76 3b       	jz %d3,8000c876 <_svfprintf_r+0x106e>
8000c862:	60 c4       	mov.a %a4,%d12
8000c864:	60 b5       	mov.a %a5,%d11
8000c866:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c86a:	6d 00 ac 0a 	call 8000ddc2 <__ssprint_r>
8000c86e:	df 02 98 80 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c872:	d9 af 10 20 	lea %a15,[%sp]144
8000c876:	1b 0f ff ff 	addi %d15,%d15,-16
8000c87a:	3c de       	j 8000c836 <_svfprintf_r+0x102e>
8000c87c:	12 54       	add %d4,%d15,%d5
8000c87e:	68 1f       	st.w [%a15]4,%d15
8000c880:	59 a4 24 10 	st.w [%sp]100,%d4
8000c884:	9a 13       	add %d15,%d3,1
8000c886:	78 18       	st.w [%sp]96,%d15
8000c888:	8b 8f 80 f2 	ge %d15,%d15,8
8000c88c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c890:	6e 10       	jz %d15,8000c8b0 <_svfprintf_r+0x10a8>
8000c892:	60 c4       	mov.a %a4,%d12
8000c894:	60 b5       	mov.a %a5,%d11
8000c896:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c89a:	6d 00 94 0a 	call 8000ddc2 <__ssprint_r>
8000c89e:	df 02 80 80 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c8a2:	d9 af 10 20 	lea %a15,[%sp]144
8000c8a6:	3c 05       	j 8000c8b0 <_svfprintf_r+0x10a8>
8000c8a8:	df 08 f5 ff 	jne %d8,0,8000c892 <_svfprintf_r+0x108a>
8000c8ac:	d9 ef 08 00 	lea %a15,[%a14]8
8000c8b0:	58 0e       	ld.w %d15,[%sp]56
8000c8b2:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c8b6:	68 1f       	st.w [%a15]4,%d15
8000c8b8:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c8bc:	58 19       	ld.w %d15,[%sp]100
8000c8be:	e8 03       	st.a [%a15]0,%a3
8000c8c0:	42 2f       	add %d15,%d2
8000c8c2:	78 19       	st.w [%sp]100,%d15
8000c8c4:	58 18       	ld.w %d15,[%sp]96
8000c8c6:	c2 1f       	add %d15,1
8000c8c8:	78 18       	st.w [%sp]96,%d15
8000c8ca:	8b 8f 80 f2 	ge %d15,%d15,8
8000c8ce:	df 0f 8d fd 	jne %d15,0,8000c3e8 <_svfprintf_r+0xbe0>
8000c8d2:	d9 ff 08 00 	lea %a15,[%a15]8
8000c8d6:	80 df       	mov.d %d15,%a13
8000c8d8:	ae 2d       	jnz.t %d15,2,8000c8f2 <_svfprintf_r+0x10ea>
8000c8da:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c8de:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c8e2:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c8e6:	42 f2       	add %d2,%d15
8000c8e8:	58 19       	ld.w %d15,[%sp]100
8000c8ea:	59 a2 28 00 	st.w [%sp]40,%d2
8000c8ee:	6e 49       	jz %d15,8000c980 <_svfprintf_r+0x1178>
8000c8f0:	3c 40       	j 8000c970 <_svfprintf_r+0x1168>
8000c8f2:	58 07       	ld.w %d15,[%sp]28
8000c8f4:	3b 00 01 80 	mov %d8,16
8000c8f8:	a2 af       	sub %d15,%d10
8000c8fa:	bf 1f f0 7f 	jlt %d15,1,8000c8da <_svfprintf_r+0x10d2>
8000c8fe:	91 00 00 28 	movh.a %a2,32768
8000c902:	d9 22 f4 c0 	lea %a2,[%a2]3892 <80000f34 <blanks.4035>>
8000c906:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000f34 <blanks.4035>>
8000c90a:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000f34 <blanks.4035>>
8000c90e:	8b 1f 81 42 	ge %d4,%d15,17
8000c912:	e8 02       	st.a [%a15]0,%a2
8000c914:	df 04 1c 00 	jeq %d4,0,8000c94c <_svfprintf_r+0x1144>
8000c918:	c2 13       	add %d3,1
8000c91a:	1b 05 01 40 	addi %d4,%d5,16
8000c91e:	68 18       	st.w [%a15]4,%d8
8000c920:	59 a3 20 10 	st.w [%sp]96,%d3
8000c924:	59 a4 24 10 	st.w [%sp]100,%d4
8000c928:	8b 83 80 32 	ge %d3,%d3,8
8000c92c:	d9 ff 08 00 	lea %a15,[%a15]8
8000c930:	76 3b       	jz %d3,8000c946 <_svfprintf_r+0x113e>
8000c932:	60 c4       	mov.a %a4,%d12
8000c934:	60 b5       	mov.a %a5,%d11
8000c936:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c93a:	6d 00 44 0a 	call 8000ddc2 <__ssprint_r>
8000c93e:	df 02 30 80 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c942:	d9 af 10 20 	lea %a15,[%sp]144
8000c946:	1b 0f ff ff 	addi %d15,%d15,-16
8000c94a:	3c da       	j 8000c8fe <_svfprintf_r+0x10f6>
8000c94c:	12 54       	add %d4,%d15,%d5
8000c94e:	68 1f       	st.w [%a15]4,%d15
8000c950:	9a 13       	add %d15,%d3,1
8000c952:	78 18       	st.w [%sp]96,%d15
8000c954:	59 a4 24 10 	st.w [%sp]100,%d4
8000c958:	8b 8f 40 f2 	lt %d15,%d15,8
8000c95c:	ee bf       	jnz %d15,8000c8da <_svfprintf_r+0x10d2>
8000c95e:	60 c4       	mov.a %a4,%d12
8000c960:	60 b5       	mov.a %a5,%d11
8000c962:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c966:	6d 00 2e 0a 	call 8000ddc2 <__ssprint_r>
8000c96a:	df 02 b8 7f 	jeq %d2,0,8000c8da <_svfprintf_r+0x10d2>
8000c96e:	3c 18       	j 8000c99e <_svfprintf_r+0x1196>
8000c970:	60 c4       	mov.a %a4,%d12
8000c972:	60 b5       	mov.a %a5,%d11
8000c974:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c978:	6d 00 25 0a 	call 8000ddc2 <__ssprint_r>
8000c97c:	df 02 11 80 	jne %d2,0,8000c99e <_svfprintf_r+0x1196>
8000c980:	82 0f       	mov %d15,0
8000c982:	78 18       	st.w [%sp]96,%d15
8000c984:	40 cf       	mov.aa %a15,%a12
8000c986:	d9 ae 10 20 	lea %a14,[%sp]144
8000c98a:	1d ff 77 f7 	j 8000b878 <_svfprintf_r+0x70>
8000c98e:	58 19       	ld.w %d15,[%sp]100
8000c990:	6e 07       	jz %d15,8000c99e <_svfprintf_r+0x1196>
8000c992:	60 c4       	mov.a %a4,%d12
8000c994:	60 b5       	mov.a %a5,%d11
8000c996:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c99a:	6d 00 14 0a 	call 8000ddc2 <__ssprint_r>
8000c99e:	60 b3       	mov.a %a3,%d11
8000c9a0:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c9a4:	8c 36       	ld.h %d15,[%a3]12
8000c9a6:	16 40       	and %d15,64
8000c9a8:	aa f2       	cmov %d2,%d15,-1
8000c9aa:	00 90       	ret 

8000c9ac <quorem>:
8000c9ac:	19 58 10 00 	ld.w %d8,[%a5]16
8000c9b0:	4c 44       	ld.w %d15,[%a4]16
8000c9b2:	82 02       	mov %d2,0
8000c9b4:	3f 8f 88 00 	jlt %d15,%d8,8000cac4 <quorem+0x118>
8000c9b8:	c2 f8       	add %d8,-1
8000c9ba:	80 4f       	mov.d %d15,%a4
8000c9bc:	8f 28 00 20 	sh %d2,%d8,2
8000c9c0:	60 2f       	mov.a %a15,%d2
8000c9c2:	1b 4f 01 90 	addi %d9,%d15,20
8000c9c6:	d9 5c 14 00 	lea %a12,[%a5]20
8000c9ca:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000c9ce:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000c9d2:	54 dc       	ld.w %d12,[%a13]
8000c9d4:	4c f0       	ld.w %d15,[%a15]0
8000c9d6:	c2 1c       	add %d12,1
8000c9d8:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000c9dc:	02 ca       	mov %d10,%d12
8000c9de:	df 0c 3d 00 	jeq %d12,0,8000ca58 <quorem+0xac>
8000c9e2:	60 96       	mov.a %a6,%d9
8000c9e4:	40 c2       	mov.aa %a2,%a12
8000c9e6:	82 05       	mov %d5,0
8000c9e8:	82 06       	mov %d6,0
8000c9ea:	54 22       	ld.w %d2,[%a2]
8000c9ec:	40 63       	mov.aa %a3,%a6
8000c9ee:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c9f2:	8f 02 1f 20 	sh %d2,%d2,-16
8000c9f6:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000c9fa:	b0 42       	add.a %a2,4
8000c9fc:	8f 03 1f 40 	sh %d4,%d3,-16
8000ca00:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000ca04:	44 34       	ld.w %d4,[%a3+]
8000ca06:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000ca0a:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000ca0e:	8f 02 1f 50 	sh %d5,%d2,-16
8000ca12:	42 f6       	add %d6,%d15
8000ca14:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000ca18:	0b 36 80 30 	sub %d3,%d6,%d3
8000ca1c:	8f 04 1f 40 	sh %d4,%d4,-16
8000ca20:	8f 03 3f f0 	sha %d15,%d3,-16
8000ca24:	0b 24 80 20 	sub %d2,%d4,%d2
8000ca28:	42 f2       	add %d2,%d15
8000ca2a:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000ca2e:	8f 02 3f 60 	sha %d6,%d2,-16
8000ca32:	80 2f       	mov.d %d15,%a2
8000ca34:	80 d2       	mov.d %d2,%a13
8000ca36:	74 63       	st.w [%a6],%d3
8000ca38:	40 36       	mov.aa %a6,%a3
8000ca3a:	7f f2 d8 ff 	jge.u %d2,%d15,8000c9ea <quorem+0x3e>
8000ca3e:	4c f0       	ld.w %d15,[%a15]0
8000ca40:	ee 0c       	jnz %d15,8000ca58 <quorem+0xac>
8000ca42:	b0 cf       	add.a %a15,-4
8000ca44:	80 f2       	mov.d %d2,%a15
8000ca46:	3f 29 05 80 	jlt.u %d9,%d2,8000ca50 <quorem+0xa4>
8000ca4a:	59 48 10 00 	st.w [%a4]16,%d8
8000ca4e:	3c 05       	j 8000ca58 <quorem+0xac>
8000ca50:	4c f0       	ld.w %d15,[%a15]0
8000ca52:	ee fc       	jnz %d15,8000ca4a <quorem+0x9e>
8000ca54:	c2 f8       	add %d8,-1
8000ca56:	3c f6       	j 8000ca42 <quorem+0x96>
8000ca58:	40 4e       	mov.aa %a14,%a4
8000ca5a:	6d 00 b9 08 	call 8000dbcc <__mcmp>
8000ca5e:	bf 02 32 00 	jlt %d2,0,8000cac2 <quorem+0x116>
8000ca62:	60 92       	mov.a %a2,%d9
8000ca64:	1b 1c 00 a0 	addi %d10,%d12,1
8000ca68:	82 04       	mov %d4,0
8000ca6a:	40 2f       	mov.aa %a15,%a2
8000ca6c:	44 f3       	ld.w %d3,[%a15+]
8000ca6e:	54 c5       	ld.w %d5,[%a12]
8000ca70:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000ca74:	8f 05 1f f0 	sh %d15,%d5,-16
8000ca78:	42 42       	add %d2,%d4
8000ca7a:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000ca7e:	8f 03 1f 30 	sh %d3,%d3,-16
8000ca82:	a2 42       	sub %d2,%d4
8000ca84:	8f 02 3f 40 	sha %d4,%d2,-16
8000ca88:	a2 f3       	sub %d3,%d15
8000ca8a:	42 43       	add %d3,%d4
8000ca8c:	8f 03 3f 40 	sha %d4,%d3,-16
8000ca90:	b0 4c       	add.a %a12,4
8000ca92:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000ca96:	80 df       	mov.d %d15,%a13
8000ca98:	80 c2       	mov.d %d2,%a12
8000ca9a:	74 23       	st.w [%a2],%d3
8000ca9c:	40 f2       	mov.aa %a2,%a15
8000ca9e:	7f 2f e6 ff 	jge.u %d15,%d2,8000ca6a <quorem+0xbe>
8000caa2:	60 92       	mov.a %a2,%d9
8000caa4:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000caa8:	4c f0       	ld.w %d15,[%a15]0
8000caaa:	ee 0c       	jnz %d15,8000cac2 <quorem+0x116>
8000caac:	b0 cf       	add.a %a15,-4
8000caae:	80 f2       	mov.d %d2,%a15
8000cab0:	3f 29 05 80 	jlt.u %d9,%d2,8000caba <quorem+0x10e>
8000cab4:	59 e8 10 00 	st.w [%a14]16,%d8
8000cab8:	3c 05       	j 8000cac2 <quorem+0x116>
8000caba:	4c f0       	ld.w %d15,[%a15]0
8000cabc:	ee fc       	jnz %d15,8000cab4 <quorem+0x108>
8000cabe:	c2 f8       	add %d8,-1
8000cac0:	3c f6       	j 8000caac <quorem+0x100>
8000cac2:	02 a2       	mov %d2,%d10
8000cac4:	00 90       	ret 
	...

8000cac8 <_dtoa_r>:
8000cac8:	20 58       	sub.a %sp,88
8000caca:	b5 a5 08 10 	st.a [%sp]72,%a5
8000cace:	99 45 00 10 	ld.a %a5,[%a4]64
8000cad2:	59 a6 1c 00 	st.w [%sp]28,%d6
8000cad6:	59 a7 28 00 	st.w [%sp]40,%d7
8000cada:	b5 a7 38 00 	st.a [%sp]56,%a7
8000cade:	40 4d       	mov.aa %a13,%a4
8000cae0:	0b 45 10 88 	mov %e8,%d5,%d4
8000cae4:	40 6c       	mov.aa %a12,%a6
8000cae6:	0b 45 10 c8 	mov %e12,%d5,%d4
8000caea:	bc 5e       	jz.a %a5,8000cb06 <_dtoa_r+0x3e>
8000caec:	19 4f 04 10 	ld.w %d15,[%a4]68
8000caf0:	82 12       	mov %d2,1
8000caf2:	0f f2 00 20 	sh %d2,%d2,%d15
8000caf6:	6c 51       	st.w [%a5]4,%d15
8000caf8:	59 52 08 00 	st.w [%a5]8,%d2
8000cafc:	82 0f       	mov %d15,0
8000cafe:	6d 00 99 06 	call 8000d830 <_Bfree>
8000cb02:	59 df 00 10 	st.w [%a13]64,%d15
8000cb06:	ce 96       	jgez %d9,8000cb12 <_dtoa_r+0x4a>
8000cb08:	82 1f       	mov %d15,1
8000cb0a:	6c c0       	st.w [%a12]0,%d15
8000cb0c:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000cb10:	3c 03       	j 8000cb16 <_dtoa_r+0x4e>
8000cb12:	82 0f       	mov %d15,0
8000cb14:	6c c0       	st.w [%a12]0,%d15
8000cb16:	7b 00 ff 27 	movh %d2,32752
8000cb1a:	26 d2       	and %d2,%d13
8000cb1c:	7b 00 ff 37 	movh %d3,32752
8000cb20:	5f 32 22 80 	jne %d2,%d3,8000cb64 <_dtoa_r+0x9c>
8000cb24:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cb28:	3b f0 70 22 	mov %d2,9999
8000cb2c:	91 00 00 f8 	movh.a %a15,32768
8000cb30:	74 32       	st.w [%a3],%d2
8000cb32:	d9 ff cd d0 	lea %a15,[%a15]3917 <80000f4d <blanks.4035+0x19>>
8000cb36:	f6 c8       	jnz %d12,8000cb46 <_dtoa_r+0x7e>
8000cb38:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000cb3c:	ee 05       	jnz %d15,8000cb46 <_dtoa_r+0x7e>
8000cb3e:	91 00 00 f8 	movh.a %a15,32768
8000cb42:	d9 ff c4 d0 	lea %a15,[%a15]3908 <80000f44 <blanks.4035+0x10>>
8000cb46:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000f44 <blanks.4035+0x10>>
8000cb4a:	40 f2       	mov.aa %a2,%a15
8000cb4c:	bd 03 26 06 	jz.a %a3,8000d798 <_dtoa_r+0xcd0>
8000cb50:	80 ff       	mov.d %d15,%a15
8000cb52:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000cb56:	1b 8f 00 20 	addi %d2,%d15,8
8000cb5a:	c2 3f       	add %d15,3
8000cb5c:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000cb60:	6c 30       	st.w [%a3]0,%d15
8000cb62:	00 90       	ret 
8000cb64:	0b cd 10 48 	mov %e4,%d13,%d12
8000cb68:	d2 06       	mov %e6,0
8000cb6a:	0b cd 10 88 	mov %e8,%d13,%d12
8000cb6e:	6d 00 2f 0c 	call 8000e3cc <__eqdf2>
8000cb72:	df 02 13 80 	jne %d2,0,8000cb98 <_dtoa_r+0xd0>
8000cb76:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cb7a:	d8 0e       	ld.a %a15,[%sp]56
8000cb7c:	82 1f       	mov %d15,1
8000cb7e:	91 00 00 28 	movh.a %a2,32768
8000cb82:	6c 30       	st.w [%a3]0,%d15
8000cb84:	d9 22 d1 d0 	lea %a2,[%a2]3921 <80000f51 <blanks.4035+0x1d>>
8000cb88:	bd 0f 08 06 	jz.a %a15,8000d798 <_dtoa_r+0xcd0>
8000cb8c:	7b 00 00 f8 	movh %d15,32768
8000cb90:	1b 2f f5 f0 	addi %d15,%d15,3922
8000cb94:	68 0f       	st.w [%a15]0,%d15
8000cb96:	00 90       	ret 
8000cb98:	0b cd 10 48 	mov %e4,%d13,%d12
8000cb9c:	40 d4       	mov.aa %a4,%a13
8000cb9e:	d9 a5 14 10 	lea %a5,[%sp]84
8000cba2:	d9 a6 10 10 	lea %a6,[%sp]80
8000cba6:	6d 00 99 08 	call 8000dcd8 <__d2b>
8000cbaa:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000cbae:	40 2e       	mov.aa %a14,%a2
8000cbb0:	19 aa 10 10 	ld.w %d10,[%sp]80
8000cbb4:	76 bd       	jz %d11,8000cbce <_dtoa_r+0x106>
8000cbb6:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000cbba:	0b cd 10 48 	mov %e4,%d13,%d12
8000cbbe:	7b 00 ff 23 	movh %d2,16368
8000cbc2:	0f 2f a0 50 	or %d5,%d15,%d2
8000cbc6:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000cbca:	82 0f       	mov %d15,0
8000cbcc:	3c 22       	j 8000cc10 <_dtoa_r+0x148>
8000cbce:	19 ab 14 10 	ld.w %d11,[%sp]84
8000cbd2:	3b e0 be 4f 	mov %d4,-1042
8000cbd6:	42 ab       	add %d11,%d10
8000cbd8:	a2 b4       	sub %d4,%d11
8000cbda:	3b f0 be 2f 	mov %d2,-1041
8000cbde:	0f 4c 00 40 	sh %d4,%d12,%d4
8000cbe2:	3f 2b 0f 00 	jlt %d11,%d2,8000cc00 <_dtoa_r+0x138>
8000cbe6:	1b 2b 41 30 	addi %d3,%d11,1042
8000cbea:	3b e0 c0 4f 	mov %d4,-1010
8000cbee:	a2 b4       	sub %d4,%d11
8000cbf0:	8b 03 00 21 	rsub %d2,%d3,0
8000cbf4:	0f 2c 00 20 	sh %d2,%d12,%d2
8000cbf8:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000cbfc:	0f f2 a0 40 	or %d4,%d2,%d15
8000cc00:	6d 00 ad 0c 	call 8000e55a <__floatunsidf>
8000cc04:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc08:	9b 03 e1 5f 	addih %d5,%d3,65040
8000cc0c:	c2 fb       	add %d11,-1
8000cc0e:	82 1f       	mov %d15,1
8000cc10:	b7 00 ab 69 	imask %e6,0,19,11
8000cc14:	78 13       	st.w [%sp]76,%d15
8000cc16:	6d ff ba ee 	call 8000a98a <__subdf3>
8000cc1a:	7b 30 fd 73 	movh %d7,16339
8000cc1e:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc22:	7b f0 36 66 	movh %d6,25455
8000cc26:	1b 77 7a 78 	addi %d7,%d7,-30809
8000cc2a:	1b 16 36 64 	addi %d6,%d6,17249
8000cc2e:	6d ff ce ee 	call 8000a9ca <__muldf3>
8000cc32:	7b 70 fc 73 	movh %d7,16327
8000cc36:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc3a:	7b 10 b6 68 	movh %d6,35681
8000cc3e:	1b 87 a2 78 	addi %d7,%d7,-30168
8000cc42:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000cc46:	6d ff 86 ee 	call 8000a952 <__adddf3>
8000cc4a:	02 b4       	mov %d4,%d11
8000cc4c:	0b 23 10 88 	mov %e8,%d3,%d2
8000cc50:	6d ff 1b f0 	call 8000ac86 <__floatsidf>
8000cc54:	7b 30 fd 73 	movh %d7,16339
8000cc58:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc5c:	7b f0 09 65 	movh %d6,20639
8000cc60:	1b 37 41 74 	addi %d7,%d7,17427
8000cc64:	1b b6 9f 67 	addi %d6,%d6,31227
8000cc68:	6d ff b1 ee 	call 8000a9ca <__muldf3>
8000cc6c:	0b 89 10 48 	mov %e4,%d9,%d8
8000cc70:	0b 23 10 68 	mov %e6,%d3,%d2
8000cc74:	6d ff 6f ee 	call 8000a952 <__adddf3>
8000cc78:	0b 23 10 48 	mov %e4,%d3,%d2
8000cc7c:	0b 23 10 88 	mov %e8,%d3,%d2
8000cc80:	6d 00 46 0c 	call 8000e50c <__fixdfsi>
8000cc84:	0b 89 10 48 	mov %e4,%d9,%d8
8000cc88:	d2 06       	mov %e6,0
8000cc8a:	59 a2 08 00 	st.w [%sp]8,%d2
8000cc8e:	6d 00 1f 0c 	call 8000e4cc <__ltdf2>
8000cc92:	ff 02 12 00 	jge %d2,0,8000ccb6 <_dtoa_r+0x1ee>
8000cc96:	19 a4 08 00 	ld.w %d4,[%sp]8
8000cc9a:	6d ff f6 ef 	call 8000ac86 <__floatsidf>
8000cc9e:	0b 89 10 48 	mov %e4,%d9,%d8
8000cca2:	0b 23 10 68 	mov %e6,%d3,%d2
8000cca6:	6d 00 b3 0b 	call 8000e40c <__nedf2>
8000ccaa:	19 a3 08 00 	ld.w %d3,[%sp]8
8000ccae:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000ccb2:	59 a3 08 00 	st.w [%sp]8,%d3
8000ccb6:	19 a2 08 00 	ld.w %d2,[%sp]8
8000ccba:	82 13       	mov %d3,1
8000ccbc:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000ccc0:	59 a3 3c 00 	st.w [%sp]60,%d3
8000ccc4:	ee 18       	jnz %d15,8000ccf4 <_dtoa_r+0x22c>
8000ccc6:	91 00 00 f8 	movh.a %a15,32768
8000ccca:	d9 ff f4 f0 	lea %a15,[%a15]4084 <80000ff4 <__mprec_tens>>
8000ccce:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000ccd2:	0b cd 10 68 	mov %e6,%d13,%d12
8000ccd6:	09 f4 40 09 	ld.d %e4,[%a15]
8000ccda:	6d 00 b9 0b 	call 8000e44c <__gtdf2>
8000ccde:	8e 28       	jlez %d2,8000ccee <_dtoa_r+0x226>
8000cce0:	58 02       	ld.w %d15,[%sp]8
8000cce2:	82 02       	mov %d2,0
8000cce4:	c2 ff       	add %d15,-1
8000cce6:	78 02       	st.w [%sp]8,%d15
8000cce8:	59 a2 3c 00 	st.w [%sp]60,%d2
8000ccec:	3c 04       	j 8000ccf4 <_dtoa_r+0x22c>
8000ccee:	82 03       	mov %d3,0
8000ccf0:	59 a3 3c 00 	st.w [%sp]60,%d3
8000ccf4:	0b ba 80 b0 	sub %d11,%d10,%d11
8000ccf8:	9a fb       	add %d15,%d11,-1
8000ccfa:	82 02       	mov %d2,0
8000ccfc:	78 06       	st.w [%sp]24,%d15
8000ccfe:	59 a2 14 00 	st.w [%sp]20,%d2
8000cd02:	ce f6       	jgez %d15,8000cd0e <_dtoa_r+0x246>
8000cd04:	32 5f       	rsub %d15
8000cd06:	82 03       	mov %d3,0
8000cd08:	78 05       	st.w [%sp]20,%d15
8000cd0a:	59 a3 18 00 	st.w [%sp]24,%d3
8000cd0e:	58 02       	ld.w %d15,[%sp]8
8000cd10:	0e fa       	jltz %d15,8000cd24 <_dtoa_r+0x25c>
8000cd12:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cd16:	78 0d       	st.w [%sp]52,%d15
8000cd18:	42 f2       	add %d2,%d15
8000cd1a:	82 0f       	mov %d15,0
8000cd1c:	59 a2 18 00 	st.w [%sp]24,%d2
8000cd20:	78 08       	st.w [%sp]32,%d15
8000cd22:	3c 0d       	j 8000cd3c <_dtoa_r+0x274>
8000cd24:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cd28:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cd2c:	82 0f       	mov %d15,0
8000cd2e:	a2 32       	sub %d2,%d3
8000cd30:	32 53       	rsub %d3
8000cd32:	59 a2 14 00 	st.w [%sp]20,%d2
8000cd36:	59 a3 20 00 	st.w [%sp]32,%d3
8000cd3a:	78 0d       	st.w [%sp]52,%d15
8000cd3c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cd40:	82 18       	mov %d8,1
8000cd42:	ff a2 46 80 	jge.u %d2,10,8000cdce <_dtoa_r+0x306>
8000cd46:	bf 62 06 00 	jlt %d2,6,8000cd52 <_dtoa_r+0x28a>
8000cd4a:	c2 c2       	add %d2,-4
8000cd4c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000cd50:	82 08       	mov %d8,0
8000cd52:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000cd56:	c2 e3       	add %d3,-2
8000cd58:	ff 43 4b 80 	jge.u %d3,4,8000cdee <_dtoa_r+0x326>
8000cd5c:	91 10 00 f8 	movh.a %a15,32769
8000cd60:	d9 ff ec 5c 	lea %a15,[%a15]-12948 <8000cd6c <_dtoa_r+0x2a4>>
8000cd64:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000cd68:	dc 0f       	ji %a15
8000cd6a:	00 00       	nop 
8000cd6c:	1d 00 08 00 	j 8000cd7c <_dtoa_r+0x2b4>
8000cd70:	1d 00 1c 00 	j 8000cda8 <_dtoa_r+0x2e0>
8000cd74:	1d 00 08 00 	j 8000cd84 <_dtoa_r+0x2bc>
8000cd78:	1d 00 1c 00 	j 8000cdb0 <_dtoa_r+0x2e8>
8000cd7c:	82 03       	mov %d3,0
8000cd7e:	59 a3 24 00 	st.w [%sp]36,%d3
8000cd82:	3c 03       	j 8000cd88 <_dtoa_r+0x2c0>
8000cd84:	82 1f       	mov %d15,1
8000cd86:	78 09       	st.w [%sp]36,%d15
8000cd88:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cd8c:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cd90:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd94:	02 23       	mov %d3,%d2
8000cd96:	ff 12 38 00 	jge %d2,1,8000ce06 <_dtoa_r+0x33e>
8000cd9a:	82 13       	mov %d3,1
8000cd9c:	82 1f       	mov %d15,1
8000cd9e:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cda2:	78 04       	st.w [%sp]16,%d15
8000cda4:	82 12       	mov %d2,1
8000cda6:	3c 21       	j 8000cde8 <_dtoa_r+0x320>
8000cda8:	82 03       	mov %d3,0
8000cdaa:	59 a3 24 00 	st.w [%sp]36,%d3
8000cdae:	3c 03       	j 8000cdb4 <_dtoa_r+0x2ec>
8000cdb0:	82 1f       	mov %d15,1
8000cdb2:	78 09       	st.w [%sp]36,%d15
8000cdb4:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cdb8:	19 a2 28 00 	ld.w %d2,[%sp]40
8000cdbc:	42 32       	add %d2,%d3
8000cdbe:	59 a2 2c 00 	st.w [%sp]44,%d2
8000cdc2:	c2 12       	add %d2,1
8000cdc4:	59 a2 10 00 	st.w [%sp]16,%d2
8000cdc8:	8b 12 40 33 	max %d3,%d2,1
8000cdcc:	3c 1d       	j 8000ce06 <_dtoa_r+0x33e>
8000cdce:	82 0f       	mov %d15,0
8000cdd0:	82 12       	mov %d2,1
8000cdd2:	82 f3       	mov %d3,-1
8000cdd4:	78 07       	st.w [%sp]28,%d15
8000cdd6:	82 ff       	mov %d15,-1
8000cdd8:	59 a2 24 00 	st.w [%sp]36,%d2
8000cddc:	59 a3 2c 00 	st.w [%sp]44,%d3
8000cde0:	78 04       	st.w [%sp]16,%d15
8000cde2:	3b 20 01 30 	mov %d3,18
8000cde6:	82 02       	mov %d2,0
8000cde8:	59 a2 28 00 	st.w [%sp]40,%d2
8000cdec:	3c 0d       	j 8000ce06 <_dtoa_r+0x33e>
8000cdee:	82 ff       	mov %d15,-1
8000cdf0:	82 13       	mov %d3,1
8000cdf2:	78 0b       	st.w [%sp]44,%d15
8000cdf4:	82 f2       	mov %d2,-1
8000cdf6:	82 0f       	mov %d15,0
8000cdf8:	59 a3 24 00 	st.w [%sp]36,%d3
8000cdfc:	59 a2 10 00 	st.w [%sp]16,%d2
8000ce00:	3b 20 01 30 	mov %d3,18
8000ce04:	78 0a       	st.w [%sp]40,%d15
8000ce06:	82 05       	mov %d5,0
8000ce08:	59 d5 04 10 	st.w [%a13]68,%d5
8000ce0c:	82 45       	mov %d5,4
8000ce0e:	1b 45 01 00 	addi %d0,%d5,20
8000ce12:	3f 03 09 80 	jlt.u %d3,%d0,8000ce24 <_dtoa_r+0x35c>
8000ce16:	19 d0 04 10 	ld.w %d0,[%a13]68
8000ce1a:	06 15       	sh %d5,1
8000ce1c:	c2 10       	add %d0,1
8000ce1e:	59 d0 04 10 	st.w [%a13]68,%d0
8000ce22:	3c f6       	j 8000ce0e <_dtoa_r+0x346>
8000ce24:	40 d4       	mov.aa %a4,%a13
8000ce26:	19 d4 04 10 	ld.w %d4,[%a13]68
8000ce2a:	6d 00 d8 04 	call 8000d7da <_Balloc>
8000ce2e:	19 a2 10 00 	ld.w %d2,[%sp]16
8000ce32:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000ce36:	8b f2 60 32 	lt.u %d3,%d2,15
8000ce3a:	b5 d2 00 10 	st.a [%a13]64,%a2
8000ce3e:	26 38       	and %d8,%d3
8000ce40:	df 08 97 01 	jeq %d8,0,8000d16e <_dtoa_r+0x6a6>
8000ce44:	19 a3 08 00 	ld.w %d3,[%sp]8
8000ce48:	89 ac 40 19 	st.d [%sp]64,%e12
8000ce4c:	bf 13 3f 00 	jlt %d3,1,8000ceca <_dtoa_r+0x402>
8000ce50:	91 00 00 f8 	movh.a %a15,32768
8000ce54:	8f f3 00 31 	and %d3,%d3,15
8000ce58:	d9 ff f4 f0 	lea %a15,[%a15]4084 <80000ff4 <__mprec_tens>>
8000ce5c:	19 ae 08 00 	ld.w %d14,[%sp]8 <80000ff4 <__mprec_tens>>
8000ce60:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000ce64:	86 ce       	sha %d14,-4
8000ce66:	09 f8 40 09 	ld.d %e8,[%a15]
8000ce6a:	82 2a       	mov %d10,2
8000ce6c:	6f 4e 11 00 	jz.t %d14,4,8000ce8e <_dtoa_r+0x3c6>
8000ce70:	91 00 00 f8 	movh.a %a15,32768
8000ce74:	0b cd 10 48 	mov %e4,%d13,%d12
8000ce78:	d9 ff cc f0 	lea %a15,[%a15]4044 <80000fcc <__mprec_bigtens>>
8000ce7c:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000ce80:	6d ff 77 ee 	call 8000ab6e <__divdf3>
8000ce84:	0b 23 10 c8 	mov %e12,%d3,%d2
8000ce88:	8f fe 00 e1 	and %d14,%d14,15
8000ce8c:	82 3a       	mov %d10,3
8000ce8e:	7b 00 00 b8 	movh %d11,32768
8000ce92:	82 0f       	mov %d15,0
8000ce94:	1b cb fc b0 	addi %d11,%d11,4044
8000ce98:	df 0e 12 00 	jeq %d14,0,8000cebc <_dtoa_r+0x3f4>
8000ce9c:	6f 0e 0d 00 	jz.t %d14,0,8000ceb6 <_dtoa_r+0x3ee>
8000cea0:	60 b2       	mov.a %a2,%d11
8000cea2:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000cea4:	0b 89 10 48 	mov %e4,%d9,%d8
8000cea8:	09 f6 40 09 	ld.d %e6,[%a15]
8000ceac:	6d ff 8f ed 	call 8000a9ca <__muldf3>
8000ceb0:	0b 23 10 88 	mov %e8,%d3,%d2
8000ceb4:	c2 1a       	add %d10,1
8000ceb6:	86 fe       	sha %d14,-1
8000ceb8:	c2 1f       	add %d15,1
8000ceba:	3c ef       	j 8000ce98 <_dtoa_r+0x3d0>
8000cebc:	0b cd 10 48 	mov %e4,%d13,%d12
8000cec0:	0b 89 10 68 	mov %e6,%d9,%d8
8000cec4:	6d ff 55 ee 	call 8000ab6e <__divdf3>
8000cec8:	3c 2c       	j 8000cf20 <_dtoa_r+0x458>
8000ceca:	19 a8 08 00 	ld.w %d8,[%sp]8
8000cece:	82 2a       	mov %d10,2
8000ced0:	32 58       	rsub %d8
8000ced2:	df 08 29 00 	jeq %d8,0,8000cf24 <_dtoa_r+0x45c>
8000ced6:	91 00 00 f8 	movh.a %a15,32768
8000ceda:	8f f8 00 31 	and %d3,%d8,15
8000cede:	d9 ff f4 f0 	lea %a15,[%a15]4084 <80000ff4 <__mprec_tens>>
8000cee2:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000cee6:	09 a4 40 19 	ld.d %e4,[%sp]64
8000ceea:	09 f6 40 09 	ld.d %e6,[%a15]
8000ceee:	7b 00 00 c8 	movh %d12,32768
8000cef2:	6d ff 6c ed 	call 8000a9ca <__muldf3>
8000cef6:	82 09       	mov %d9,0
8000cef8:	86 c8       	sha %d8,-4
8000cefa:	1b cc fc c0 	addi %d12,%d12,4044
8000cefe:	df 08 11 00 	jeq %d8,0,8000cf20 <_dtoa_r+0x458>
8000cf02:	6f 08 0c 00 	jz.t %d8,0,8000cf1a <_dtoa_r+0x452>
8000cf06:	60 c3       	mov.a %a3,%d12
8000cf08:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000cf0c:	0b 23 10 48 	mov %e4,%d3,%d2
8000cf10:	09 f6 40 09 	ld.d %e6,[%a15]
8000cf14:	c2 1a       	add %d10,1
8000cf16:	6d ff 5a ed 	call 8000a9ca <__muldf3>
8000cf1a:	86 f8       	sha %d8,-1
8000cf1c:	c2 19       	add %d9,1
8000cf1e:	3c f0       	j 8000cefe <_dtoa_r+0x436>
8000cf20:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf24:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000cf28:	df 02 23 00 	jeq %d2,0,8000cf6e <_dtoa_r+0x4a6>
8000cf2c:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf30:	b7 00 2a 6a 	imask %e6,0,20,10
8000cf34:	6d 00 cc 0a 	call 8000e4cc <__ltdf2>
8000cf38:	ff 02 20 00 	jge %d2,0,8000cf78 <_dtoa_r+0x4b0>
8000cf3c:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cf40:	df 03 21 00 	jeq %d3,0,8000cf82 <_dtoa_r+0x4ba>
8000cf44:	58 0b       	ld.w %d15,[%sp]44
8000cf46:	bf 1f 12 01 	jlt %d15,1,8000d16a <_dtoa_r+0x6a2>
8000cf4a:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cf4e:	0b cd 10 48 	mov %e4,%d13,%d12
8000cf52:	c2 f2       	add %d2,-1
8000cf54:	82 06       	mov %d6,0
8000cf56:	7b 40 02 74 	movh %d7,16420
8000cf5a:	59 a2 30 00 	st.w [%sp]48,%d2
8000cf5e:	6d ff 36 ed 	call 8000a9ca <__muldf3>
8000cf62:	c2 1a       	add %d10,1
8000cf64:	0b 23 10 c8 	mov %e12,%d3,%d2
8000cf68:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000cf6c:	3c 10       	j 8000cf8c <_dtoa_r+0x4c4>
8000cf6e:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cf72:	59 a3 30 00 	st.w [%sp]48,%d3
8000cf76:	3c 03       	j 8000cf7c <_dtoa_r+0x4b4>
8000cf78:	58 02       	ld.w %d15,[%sp]8
8000cf7a:	78 0c       	st.w [%sp]48,%d15
8000cf7c:	99 ac 10 00 	ld.a %a12,[%sp]16
8000cf80:	3c 06       	j 8000cf8c <_dtoa_r+0x4c4>
8000cf82:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cf86:	a0 0c       	mov.a %a12,0
8000cf88:	59 a2 30 00 	st.w [%sp]48,%d2
8000cf8c:	02 a4       	mov %d4,%d10
8000cf8e:	6d ff 7c ee 	call 8000ac86 <__floatsidf>
8000cf92:	0b cd 10 68 	mov %e6,%d13,%d12
8000cf96:	0b 23 10 48 	mov %e4,%d3,%d2
8000cf9a:	6d ff 18 ed 	call 8000a9ca <__muldf3>
8000cf9e:	0b 23 10 48 	mov %e4,%d3,%d2
8000cfa2:	82 06       	mov %d6,0
8000cfa4:	7b c0 01 74 	movh %d7,16412
8000cfa8:	6d ff d5 ec 	call 8000a952 <__adddf3>
8000cfac:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cfb0:	0b 23 10 e8 	mov %e14,%d3,%d2
8000cfb4:	60 b2       	mov.a %a2,%d11
8000cfb6:	11 02 cc ff 	addih.a %a15,%a2,64704
8000cfba:	80 ff       	mov.d %d15,%a15
8000cfbc:	bd 0c 1e 80 	jnz.a %a12,8000cff8 <_dtoa_r+0x530>
8000cfc0:	0b cd 10 48 	mov %e4,%d13,%d12
8000cfc4:	82 06       	mov %d6,0
8000cfc6:	7b 40 01 74 	movh %d7,16404
8000cfca:	6d ff e0 ec 	call 8000a98a <__subdf3>
8000cfce:	80 f7       	mov.d %d7,%a15
8000cfd0:	0b 23 10 48 	mov %e4,%d3,%d2
8000cfd4:	02 e6       	mov %d6,%d14
8000cfd6:	0b 23 10 88 	mov %e8,%d3,%d2
8000cfda:	6d 00 39 0a 	call 8000e44c <__gtdf2>
8000cfde:	ff 12 8e 02 	jge %d2,1,8000d4fa <_dtoa_r+0xa32>
8000cfe2:	0b 89 10 48 	mov %e4,%d9,%d8
8000cfe6:	02 e6       	mov %d6,%d14
8000cfe8:	9b 0b cc 77 	addih %d7,%d11,31936
8000cfec:	6d 00 70 0a 	call 8000e4cc <__ltdf2>
8000cff0:	bf 02 7d 02 	jlt %d2,0,8000d4ea <_dtoa_r+0xa22>
8000cff4:	1d 00 bb 00 	j 8000d16a <_dtoa_r+0x6a2>
8000cff8:	80 c5       	mov.d %d5,%a12
8000cffa:	91 00 00 f8 	movh.a %a15,32768
8000cffe:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d002:	d9 ff f4 f0 	lea %a15,[%a15]4084 <80000ff4 <__mprec_tens>>
8000d006:	c2 f5       	add %d5,-1
8000d008:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000d00c:	df 02 57 00 	jeq %d2,0,8000d0ba <_dtoa_r+0x5f2>
8000d010:	b7 00 a9 4a 	imask %e4,0,21,9
8000d014:	09 f6 40 09 	ld.d %e6,[%a15]
8000d018:	6d ff ab ed 	call 8000ab6e <__divdf3>
8000d01c:	0b ef 10 68 	mov %e6,%d15,%d14
8000d020:	0b 23 10 48 	mov %e4,%d3,%d2
8000d024:	6d ff b3 ec 	call 8000a98a <__subdf3>
8000d028:	d8 03       	ld.a %a15,[%sp]12
8000d02a:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d02e:	0b cd 10 48 	mov %e4,%d13,%d12
8000d032:	80 fe       	mov.d %d14,%a15
8000d034:	6d 00 6c 0a 	call 8000e50c <__fixdfsi>
8000d038:	02 24       	mov %d4,%d2
8000d03a:	02 2f       	mov %d15,%d2
8000d03c:	6d ff 25 ee 	call 8000ac86 <__floatsidf>
8000d040:	0b cd 10 48 	mov %e4,%d13,%d12
8000d044:	0b 23 10 68 	mov %e6,%d3,%d2
8000d048:	c2 1e       	add %d14,1
8000d04a:	6d ff a0 ec 	call 8000a98a <__subdf3>
8000d04e:	1b 0f 03 50 	addi %d5,%d15,48
8000d052:	28 05       	st.b [%a15]0,%d5
8000d054:	0b ab 10 68 	mov %e6,%d11,%d10
8000d058:	0b 23 10 48 	mov %e4,%d3,%d2
8000d05c:	0b 23 10 88 	mov %e8,%d3,%d2
8000d060:	6d 00 36 0a 	call 8000e4cc <__ltdf2>
8000d064:	bf 02 86 03 	jlt %d2,0,8000d770 <_dtoa_r+0xca8>
8000d068:	b7 00 2a 4a 	imask %e4,0,20,10
8000d06c:	0b 89 10 68 	mov %e6,%d9,%d8
8000d070:	6d ff 8d ec 	call 8000a98a <__subdf3>
8000d074:	0b ab 10 68 	mov %e6,%d11,%d10
8000d078:	0b 23 10 48 	mov %e4,%d3,%d2
8000d07c:	6d 00 28 0a 	call 8000e4cc <__ltdf2>
8000d080:	bf 02 ea 00 	jlt %d2,0,8000d254 <_dtoa_r+0x78c>
8000d084:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000d088:	02 e5       	mov %d5,%d14
8000d08a:	80 cf       	mov.d %d15,%a12
8000d08c:	a2 35       	sub %d5,%d3
8000d08e:	7f f5 6e 00 	jge %d5,%d15,8000d16a <_dtoa_r+0x6a2>
8000d092:	0b ab 10 48 	mov %e4,%d11,%d10
8000d096:	82 06       	mov %d6,0
8000d098:	7b 40 02 74 	movh %d7,16420
8000d09c:	6d ff 97 ec 	call 8000a9ca <__muldf3>
8000d0a0:	0b 89 10 48 	mov %e4,%d9,%d8
8000d0a4:	82 06       	mov %d6,0
8000d0a6:	7b 40 02 74 	movh %d7,16420
8000d0aa:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d0ae:	6d ff 8e ec 	call 8000a9ca <__muldf3>
8000d0b2:	60 ef       	mov.a %a15,%d14
8000d0b4:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d0b8:	3c bb       	j 8000d02e <_dtoa_r+0x566>
8000d0ba:	0b ef 10 68 	mov %e6,%d15,%d14
8000d0be:	09 f4 40 09 	ld.d %e4,[%a15]
8000d0c2:	6d ff 84 ec 	call 8000a9ca <__muldf3>
8000d0c6:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d0ca:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d0ce:	30 c3       	add.a %a3,%a12
8000d0d0:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000d0d4:	80 3e       	mov.d %d14,%a3
8000d0d6:	0b cd 10 48 	mov %e4,%d13,%d12
8000d0da:	d9 cf 01 00 	lea %a15,[%a12]1
8000d0de:	6d 00 17 0a 	call 8000e50c <__fixdfsi>
8000d0e2:	02 24       	mov %d4,%d2
8000d0e4:	02 2f       	mov %d15,%d2
8000d0e6:	6d ff d0 ed 	call 8000ac86 <__floatsidf>
8000d0ea:	0b cd 10 48 	mov %e4,%d13,%d12
8000d0ee:	0b 23 10 68 	mov %e6,%d3,%d2
8000d0f2:	6d ff 4c ec 	call 8000a98a <__subdf3>
8000d0f6:	1b 0f 03 50 	addi %d5,%d15,48
8000d0fa:	0b 23 10 88 	mov %e8,%d3,%d2
8000d0fe:	80 f2       	mov.d %d2,%a15
8000d100:	34 c5       	st.b [%a12],%d5
8000d102:	5f e2 29 80 	jne %d2,%d14,8000d154 <_dtoa_r+0x68c>
8000d106:	0b ab 10 48 	mov %e4,%d11,%d10
8000d10a:	b7 00 a9 6a 	imask %e6,0,21,9
8000d10e:	6d ff 22 ec 	call 8000a952 <__adddf3>
8000d112:	0b 89 10 48 	mov %e4,%d9,%d8
8000d116:	0b 23 10 68 	mov %e6,%d3,%d2
8000d11a:	6d 00 99 09 	call 8000e44c <__gtdf2>
8000d11e:	ff 12 9b 00 	jge %d2,1,8000d254 <_dtoa_r+0x78c>
8000d122:	b7 00 a9 4a 	imask %e4,0,21,9
8000d126:	0b ab 10 68 	mov %e6,%d11,%d10
8000d12a:	6d ff 30 ec 	call 8000a98a <__subdf3>
8000d12e:	0b 89 10 48 	mov %e4,%d9,%d8
8000d132:	0b 23 10 68 	mov %e6,%d3,%d2
8000d136:	6d 00 cb 09 	call 8000e4cc <__ltdf2>
8000d13a:	ff 02 18 00 	jge %d2,0,8000d16a <_dtoa_r+0x6a2>
8000d13e:	60 e2       	mov.a %a2,%d14
8000d140:	60 ef       	mov.a %a15,%d14
8000d142:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d146:	b0 ff       	add.a %a15,-1
8000d148:	8b 0f 03 f2 	eq %d15,%d15,48
8000d14c:	df 0f 12 03 	jeq %d15,0,8000d770 <_dtoa_r+0xca8>
8000d150:	80 fe       	mov.d %d14,%a15
8000d152:	3c f6       	j 8000d13e <_dtoa_r+0x676>
8000d154:	0b 89 10 48 	mov %e4,%d9,%d8
8000d158:	82 06       	mov %d6,0
8000d15a:	7b 40 02 74 	movh %d7,16420
8000d15e:	6d ff 36 ec 	call 8000a9ca <__muldf3>
8000d162:	40 fc       	mov.aa %a12,%a15
8000d164:	0b 23 10 c8 	mov %e12,%d3,%d2
8000d168:	3c b7       	j 8000d0d6 <_dtoa_r+0x60e>
8000d16a:	09 ac 40 19 	ld.d %e12,[%sp]64
8000d16e:	19 a3 14 10 	ld.w %d3,[%sp]84
8000d172:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d176:	8b 03 80 52 	ge %d5,%d3,0
8000d17a:	8b f2 40 54 	and.lt %d5,%d2,15
8000d17e:	df 05 9e 00 	jeq %d5,0,8000d2ba <_dtoa_r+0x7f2>
8000d182:	91 00 00 f8 	movh.a %a15,32768
8000d186:	d9 ff f4 f0 	lea %a15,[%a15]4084 <80000ff4 <__mprec_tens>>
8000d18a:	19 a3 10 00 	ld.w %d3,[%sp]16 <80000ff4 <__mprec_tens>>
8000d18e:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000d192:	19 a2 28 00 	ld.w %d2,[%sp]40
8000d196:	fa 13       	lt %d15,%d3,1
8000d198:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000d19c:	09 f8 40 09 	ld.d %e8,[%a15]
8000d1a0:	6e 16       	jz %d15,8000d1cc <_dtoa_r+0x704>
8000d1a2:	df 03 a4 81 	jne %d3,0,8000d4ea <_dtoa_r+0xa22>
8000d1a6:	0b 89 10 48 	mov %e4,%d9,%d8
8000d1aa:	82 06       	mov %d6,0
8000d1ac:	7b 40 01 74 	movh %d7,16404
8000d1b0:	6d ff 0d ec 	call 8000a9ca <__muldf3>
8000d1b4:	0b cd 10 68 	mov %e6,%d13,%d12
8000d1b8:	0b 23 10 48 	mov %e4,%d3,%d2
8000d1bc:	a0 0c       	mov.a %a12,0
8000d1be:	6d 00 67 09 	call 8000e48c <__gedf2>
8000d1c2:	a0 0f       	mov.a %a15,0
8000d1c4:	ff 02 95 01 	jge %d2,0,8000d4ee <_dtoa_r+0xa26>
8000d1c8:	1d 00 9d 01 	j 8000d502 <_dtoa_r+0xa3a>
8000d1cc:	d8 03       	ld.a %a15,[%sp]12
8000d1ce:	0b cd 10 a8 	mov %e10,%d13,%d12
8000d1d2:	0b 89 10 68 	mov %e6,%d9,%d8
8000d1d6:	0b ab 10 48 	mov %e4,%d11,%d10
8000d1da:	80 fe       	mov.d %d14,%a15
8000d1dc:	6d ff c9 ec 	call 8000ab6e <__divdf3>
8000d1e0:	0b 23 10 48 	mov %e4,%d3,%d2
8000d1e4:	c2 1e       	add %d14,1
8000d1e6:	6d 00 93 09 	call 8000e50c <__fixdfsi>
8000d1ea:	02 24       	mov %d4,%d2
8000d1ec:	02 2f       	mov %d15,%d2
8000d1ee:	6d ff 4c ed 	call 8000ac86 <__floatsidf>
8000d1f2:	0b 89 10 68 	mov %e6,%d9,%d8
8000d1f6:	0b 23 10 48 	mov %e4,%d3,%d2
8000d1fa:	6d ff e8 eb 	call 8000a9ca <__muldf3>
8000d1fe:	0b ab 10 48 	mov %e4,%d11,%d10
8000d202:	0b 23 10 68 	mov %e6,%d3,%d2
8000d206:	6d ff c2 eb 	call 8000a98a <__subdf3>
8000d20a:	0b 23 10 48 	mov %e4,%d3,%d2
8000d20e:	1b 0f 03 30 	addi %d3,%d15,48
8000d212:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d216:	28 03       	st.b [%a15]0,%d3
8000d218:	02 e3       	mov %d3,%d14
8000d21a:	a2 23       	sub %d3,%d2
8000d21c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d220:	5f 23 3c 80 	jne %d3,%d2,8000d298 <_dtoa_r+0x7d0>
8000d224:	0b 45 10 68 	mov %e6,%d5,%d4
8000d228:	6d ff 95 eb 	call 8000a952 <__adddf3>
8000d22c:	0b 89 10 68 	mov %e6,%d9,%d8
8000d230:	0b 23 10 48 	mov %e4,%d3,%d2
8000d234:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d238:	6d 00 0a 09 	call 8000e44c <__gtdf2>
8000d23c:	4e 2e       	jgtz %d2,8000d258 <_dtoa_r+0x790>
8000d23e:	0b ab 10 48 	mov %e4,%d11,%d10
8000d242:	0b 89 10 68 	mov %e6,%d9,%d8
8000d246:	6d 00 c3 08 	call 8000e3cc <__eqdf2>
8000d24a:	df 02 95 82 	jne %d2,0,8000d774 <_dtoa_r+0xcac>
8000d24e:	ae 05       	jnz.t %d15,0,8000d258 <_dtoa_r+0x790>
8000d250:	1d 00 92 02 	j 8000d774 <_dtoa_r+0xcac>
8000d254:	58 0c       	ld.w %d15,[%sp]48
8000d256:	78 02       	st.w [%sp]8,%d15
8000d258:	58 03       	ld.w %d15,[%sp]12
8000d25a:	a2 ef       	sub %d15,%d14
8000d25c:	46 0f       	not %d15
8000d25e:	60 e2       	mov.a %a2,%d14
8000d260:	60 ef       	mov.a %a15,%d14
8000d262:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d266:	b0 ff       	add.a %a15,-1
8000d268:	8b 93 03 32 	eq %d3,%d3,57
8000d26c:	df 03 11 00 	jeq %d3,0,8000d28e <_dtoa_r+0x7c6>
8000d270:	9f 0f 0d 80 	jned %d15,0,8000d28a <_dtoa_r+0x7c2>
8000d274:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d278:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d27c:	c2 13       	add %d3,1
8000d27e:	da 30       	mov %d15,48
8000d280:	59 a3 08 00 	st.w [%sp]8,%d3
8000d284:	2c 30       	st.b [%a3]0,%d15
8000d286:	40 3f       	mov.aa %a15,%a3
8000d288:	3c 03       	j 8000d28e <_dtoa_r+0x7c6>
8000d28a:	80 fe       	mov.d %d14,%a15
8000d28c:	3c e9       	j 8000d25e <_dtoa_r+0x796>
8000d28e:	0c f0       	ld.bu %d15,[%a15]0
8000d290:	c2 1f       	add %d15,1
8000d292:	28 0f       	st.b [%a15]0,%d15
8000d294:	1d 00 70 02 	j 8000d774 <_dtoa_r+0xcac>
8000d298:	82 06       	mov %d6,0
8000d29a:	7b 40 02 74 	movh %d7,16420
8000d29e:	6d ff 96 eb 	call 8000a9ca <__muldf3>
8000d2a2:	d2 06       	mov %e6,0
8000d2a4:	0b 23 10 48 	mov %e4,%d3,%d2
8000d2a8:	0b 23 10 a8 	mov %e10,%d3,%d2
8000d2ac:	60 ef       	mov.a %a15,%d14
8000d2ae:	6d 00 8f 08 	call 8000e3cc <__eqdf2>
8000d2b2:	df 02 90 ff 	jne %d2,0,8000d1d2 <_dtoa_r+0x70a>
8000d2b6:	1d 00 5f 02 	j 8000d774 <_dtoa_r+0xcac>
8000d2ba:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d2be:	58 08       	ld.w %d15,[%sp]32
8000d2c0:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d2c4:	a0 0f       	mov.a %a15,0
8000d2c6:	df 02 3b 00 	jeq %d2,0,8000d33c <_dtoa_r+0x874>
8000d2ca:	58 07       	ld.w %d15,[%sp]28
8000d2cc:	ff 2f 10 00 	jge %d15,2,8000d2ec <_dtoa_r+0x824>
8000d2d0:	58 13       	ld.w %d15,[%sp]76
8000d2d2:	6e 05       	jz %d15,8000d2dc <_dtoa_r+0x814>
8000d2d4:	1b 33 43 30 	addi %d3,%d3,1075
8000d2d8:	58 08       	ld.w %d15,[%sp]32
8000d2da:	3c 22       	j 8000d31e <_dtoa_r+0x856>
8000d2dc:	19 a3 10 10 	ld.w %d3,[%sp]80
8000d2e0:	58 08       	ld.w %d15,[%sp]32
8000d2e2:	8b 63 03 31 	rsub %d3,%d3,54
8000d2e6:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d2ea:	3c 1a       	j 8000d31e <_dtoa_r+0x856>
8000d2ec:	58 04       	ld.w %d15,[%sp]16
8000d2ee:	19 a2 20 00 	ld.w %d2,[%sp]32
8000d2f2:	c2 ff       	add %d15,-1
8000d2f4:	3f f2 04 00 	jlt %d2,%d15,8000d2fc <_dtoa_r+0x834>
8000d2f8:	5a f2       	sub %d15,%d2,%d15
8000d2fa:	3c 0b       	j 8000d310 <_dtoa_r+0x848>
8000d2fc:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d300:	78 08       	st.w [%sp]32,%d15
8000d302:	52 32       	sub %d2,%d15,%d3
8000d304:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d308:	82 0f       	mov %d15,0
8000d30a:	42 23       	add %d3,%d2
8000d30c:	59 a3 34 00 	st.w [%sp]52,%d3
8000d310:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d314:	19 a8 14 00 	ld.w %d8,[%sp]20
8000d318:	ce 33       	jgez %d3,8000d31e <_dtoa_r+0x856>
8000d31a:	a2 38       	sub %d8,%d3
8000d31c:	82 03       	mov %d3,0
8000d31e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d322:	40 d4       	mov.aa %a4,%a13
8000d324:	42 32       	add %d2,%d3
8000d326:	59 a2 14 00 	st.w [%sp]20,%d2
8000d32a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d32e:	82 14       	mov %d4,1
8000d330:	42 32       	add %d2,%d3
8000d332:	59 a2 18 00 	st.w [%sp]24,%d2
8000d336:	6d 00 1b 03 	call 8000d96c <__i2b>
8000d33a:	40 2f       	mov.aa %a15,%a2
8000d33c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d340:	8b 18 80 32 	ge %d3,%d8,1
8000d344:	8b 12 80 34 	and.ge %d3,%d2,1
8000d348:	76 3e       	jz %d3,8000d364 <_dtoa_r+0x89c>
8000d34a:	0b 82 80 31 	min %d3,%d2,%d8
8000d34e:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d352:	a2 38       	sub %d8,%d3
8000d354:	a2 32       	sub %d2,%d3
8000d356:	59 a2 14 00 	st.w [%sp]20,%d2
8000d35a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d35e:	a2 32       	sub %d2,%d3
8000d360:	59 a2 18 00 	st.w [%sp]24,%d2
8000d364:	19 a3 20 00 	ld.w %d3,[%sp]32
8000d368:	bf 13 27 00 	jlt %d3,1,8000d3b6 <_dtoa_r+0x8ee>
8000d36c:	19 a2 24 00 	ld.w %d2,[%sp]36
8000d370:	df 02 1c 00 	jeq %d2,0,8000d3a8 <_dtoa_r+0x8e0>
8000d374:	bf 1f 13 00 	jlt %d15,1,8000d39a <_dtoa_r+0x8d2>
8000d378:	40 f5       	mov.aa %a5,%a15
8000d37a:	02 f4       	mov %d4,%d15
8000d37c:	40 d4       	mov.aa %a4,%a13
8000d37e:	6d 00 8c 03 	call 8000da96 <__pow5mult>
8000d382:	40 e6       	mov.aa %a6,%a14
8000d384:	40 d4       	mov.aa %a4,%a13
8000d386:	40 25       	mov.aa %a5,%a2
8000d388:	40 2f       	mov.aa %a15,%a2
8000d38a:	6d 00 f9 02 	call 8000d97c <__multiply>
8000d38e:	40 e5       	mov.aa %a5,%a14
8000d390:	40 2c       	mov.aa %a12,%a2
8000d392:	40 d4       	mov.aa %a4,%a13
8000d394:	6d 00 4e 02 	call 8000d830 <_Bfree>
8000d398:	40 ce       	mov.aa %a14,%a12
8000d39a:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d39e:	40 d4       	mov.aa %a4,%a13
8000d3a0:	a2 f4       	sub %d4,%d15
8000d3a2:	40 e5       	mov.aa %a5,%a14
8000d3a4:	76 49       	jz %d4,8000d3b6 <_dtoa_r+0x8ee>
8000d3a6:	3c 05       	j 8000d3b0 <_dtoa_r+0x8e8>
8000d3a8:	19 a4 20 00 	ld.w %d4,[%sp]32
8000d3ac:	40 d4       	mov.aa %a4,%a13
8000d3ae:	40 e5       	mov.aa %a5,%a14
8000d3b0:	6d 00 73 03 	call 8000da96 <__pow5mult>
8000d3b4:	40 2e       	mov.aa %a14,%a2
8000d3b6:	40 d4       	mov.aa %a4,%a13
8000d3b8:	82 14       	mov %d4,1
8000d3ba:	6d 00 d9 02 	call 8000d96c <__i2b>
8000d3be:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d3c2:	40 2c       	mov.aa %a12,%a2
8000d3c4:	8e 3c       	jlez %d3,8000d3dc <_dtoa_r+0x914>
8000d3c6:	40 d4       	mov.aa %a4,%a13
8000d3c8:	40 25       	mov.aa %a5,%a2
8000d3ca:	02 34       	mov %d4,%d3
8000d3cc:	6d 00 65 03 	call 8000da96 <__pow5mult>
8000d3d0:	58 07       	ld.w %d15,[%sp]28
8000d3d2:	40 2c       	mov.aa %a12,%a2
8000d3d4:	82 09       	mov %d9,0
8000d3d6:	ff 2f 1f 00 	jge %d15,2,8000d414 <_dtoa_r+0x94c>
8000d3da:	3c 06       	j 8000d3e6 <_dtoa_r+0x91e>
8000d3dc:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d3e0:	82 09       	mov %d9,0
8000d3e2:	ff 22 15 00 	jge %d2,2,8000d40c <_dtoa_r+0x944>
8000d3e6:	82 09       	mov %d9,0
8000d3e8:	df 0c 12 80 	jne %d12,0,8000d40c <_dtoa_r+0x944>
8000d3ec:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000d3f0:	ee 0e       	jnz %d15,8000d40c <_dtoa_r+0x944>
8000d3f2:	7b 00 ff f7 	movh %d15,32752
8000d3f6:	26 df       	and %d15,%d13
8000d3f8:	6e 0a       	jz %d15,8000d40c <_dtoa_r+0x944>
8000d3fa:	19 a3 14 00 	ld.w %d3,[%sp]20
8000d3fe:	58 06       	ld.w %d15,[%sp]24
8000d400:	c2 13       	add %d3,1
8000d402:	c2 1f       	add %d15,1
8000d404:	59 a3 14 00 	st.w [%sp]20,%d3
8000d408:	78 06       	st.w [%sp]24,%d15
8000d40a:	82 19       	mov %d9,1
8000d40c:	19 a3 34 00 	ld.w %d3,[%sp]52
8000d410:	82 12       	mov %d2,1
8000d412:	76 39       	jz %d3,8000d424 <_dtoa_r+0x95c>
8000d414:	4c c4       	ld.w %d15,[%a12]16
8000d416:	90 c3       	addsc.a %a3,%a12,%d15,2
8000d418:	19 34 10 00 	ld.w %d4,[%a3]16
8000d41c:	6d 00 54 02 	call 8000d8c4 <__hi0bits>
8000d420:	8b 02 02 21 	rsub %d2,%d2,32
8000d424:	58 06       	ld.w %d15,[%sp]24
8000d426:	42 2f       	add %d15,%d2
8000d428:	16 1f       	and %d15,31
8000d42a:	6e 0a       	jz %d15,8000d43e <_dtoa_r+0x976>
8000d42c:	8b 0f 02 31 	rsub %d3,%d15,32
8000d430:	8b cf 01 f1 	rsub %d15,%d15,28
8000d434:	ff 53 07 00 	jge %d3,5,8000d442 <_dtoa_r+0x97a>
8000d438:	df 43 10 00 	jeq %d3,4,8000d458 <_dtoa_r+0x990>
8000d43c:	02 3f       	mov %d15,%d3
8000d43e:	1b cf 01 f0 	addi %d15,%d15,28
8000d442:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d446:	19 a3 18 00 	ld.w %d3,[%sp]24
8000d44a:	42 f2       	add %d2,%d15
8000d44c:	42 f3       	add %d3,%d15
8000d44e:	59 a2 14 00 	st.w [%sp]20,%d2
8000d452:	42 f8       	add %d8,%d15
8000d454:	59 a3 18 00 	st.w [%sp]24,%d3
8000d458:	58 05       	ld.w %d15,[%sp]20
8000d45a:	8e f7       	jlez %d15,8000d468 <_dtoa_r+0x9a0>
8000d45c:	40 e5       	mov.aa %a5,%a14
8000d45e:	40 d4       	mov.aa %a4,%a13
8000d460:	02 f4       	mov %d4,%d15
8000d462:	6d 00 58 03 	call 8000db12 <__lshift>
8000d466:	40 2e       	mov.aa %a14,%a2
8000d468:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d46c:	8e 27       	jlez %d2,8000d47a <_dtoa_r+0x9b2>
8000d46e:	40 c5       	mov.aa %a5,%a12
8000d470:	40 d4       	mov.aa %a4,%a13
8000d472:	02 24       	mov %d4,%d2
8000d474:	6d 00 4f 03 	call 8000db12 <__lshift>
8000d478:	40 2c       	mov.aa %a12,%a2
8000d47a:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000d47e:	df 03 20 00 	jeq %d3,0,8000d4be <_dtoa_r+0x9f6>
8000d482:	40 e4       	mov.aa %a4,%a14
8000d484:	40 c5       	mov.aa %a5,%a12
8000d486:	6d 00 a3 03 	call 8000dbcc <__mcmp>
8000d48a:	ff 02 1a 00 	jge %d2,0,8000d4be <_dtoa_r+0x9f6>
8000d48e:	58 02       	ld.w %d15,[%sp]8
8000d490:	40 e5       	mov.aa %a5,%a14
8000d492:	c2 ff       	add %d15,-1
8000d494:	40 d4       	mov.aa %a4,%a13
8000d496:	fb a0 00 40 	mov %e4,10
8000d49a:	78 02       	st.w [%sp]8,%d15
8000d49c:	6d 00 d3 01 	call 8000d842 <__multadd>
8000d4a0:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000d4a4:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d4a8:	59 a2 10 00 	st.w [%sp]16,%d2
8000d4ac:	40 2e       	mov.aa %a14,%a2
8000d4ae:	76 38       	jz %d3,8000d4be <_dtoa_r+0x9f6>
8000d4b0:	40 f5       	mov.aa %a5,%a15
8000d4b2:	40 d4       	mov.aa %a4,%a13
8000d4b4:	fb a0 00 40 	mov %e4,10
8000d4b8:	6d 00 c5 01 	call 8000d842 <__multadd>
8000d4bc:	40 2f       	mov.aa %a15,%a2
8000d4be:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d4c2:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d4c6:	8b 32 80 f2 	ge %d15,%d2,3
8000d4ca:	8b 13 40 f4 	and.lt %d15,%d3,1
8000d4ce:	6e 2a       	jz %d15,8000d522 <_dtoa_r+0xa5a>
8000d4d0:	f6 3f       	jnz %d3,8000d4ee <_dtoa_r+0xa26>
8000d4d2:	40 c5       	mov.aa %a5,%a12
8000d4d4:	40 d4       	mov.aa %a4,%a13
8000d4d6:	d2 54       	mov %e4,5
8000d4d8:	6d 00 b5 01 	call 8000d842 <__multadd>
8000d4dc:	40 e4       	mov.aa %a4,%a14
8000d4de:	40 25       	mov.aa %a5,%a2
8000d4e0:	40 2c       	mov.aa %a12,%a2
8000d4e2:	6d 00 75 03 	call 8000dbcc <__mcmp>
8000d4e6:	4e 2e       	jgtz %d2,8000d502 <_dtoa_r+0xa3a>
8000d4e8:	3c 03       	j 8000d4ee <_dtoa_r+0xa26>
8000d4ea:	a0 0c       	mov.a %a12,0
8000d4ec:	a0 0f       	mov.a %a15,0
8000d4ee:	58 0a       	ld.w %d15,[%sp]40
8000d4f0:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d4f4:	46 0f       	not %d15
8000d4f6:	78 02       	st.w [%sp]8,%d15
8000d4f8:	3c 11       	j 8000d51a <_dtoa_r+0xa52>
8000d4fa:	58 0c       	ld.w %d15,[%sp]48
8000d4fc:	a0 0c       	mov.a %a12,0
8000d4fe:	78 02       	st.w [%sp]8,%d15
8000d500:	a0 0f       	mov.a %a15,0
8000d502:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d506:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d50a:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000d50e:	da 31       	mov %d15,49
8000d510:	c2 12       	add %d2,1
8000d512:	c2 1e       	add %d14,1
8000d514:	2c 30       	st.b [%a3]0,%d15
8000d516:	59 a2 08 00 	st.w [%sp]8,%d2
8000d51a:	80 f8       	mov.d %d8,%a15
8000d51c:	a0 0f       	mov.a %a15,0
8000d51e:	1d 00 14 01 	j 8000d746 <_dtoa_r+0xc7e>
8000d522:	19 a3 24 00 	ld.w %d3,[%sp]36
8000d526:	f6 35       	jnz %d3,8000d530 <_dtoa_r+0xa68>
8000d528:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000d52c:	1d 00 c2 00 	j 8000d6b0 <_dtoa_r+0xbe8>
8000d530:	8e 87       	jlez %d8,8000d53e <_dtoa_r+0xa76>
8000d532:	40 f5       	mov.aa %a5,%a15
8000d534:	40 d4       	mov.aa %a4,%a13
8000d536:	02 84       	mov %d4,%d8
8000d538:	6d 00 ed 02 	call 8000db12 <__lshift>
8000d53c:	40 2f       	mov.aa %a15,%a2
8000d53e:	80 f8       	mov.d %d8,%a15
8000d540:	df 09 16 00 	jeq %d9,0,8000d56c <_dtoa_r+0xaa4>
8000d544:	40 d4       	mov.aa %a4,%a13
8000d546:	48 14       	ld.w %d4,[%a15]4
8000d548:	6d 00 49 01 	call 8000d7da <_Balloc>
8000d54c:	48 44       	ld.w %d4,[%a15]16
8000d54e:	d9 24 0c 00 	lea %a4,[%a2]12
8000d552:	c2 24       	add %d4,2
8000d554:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d558:	06 24       	sh %d4,2
8000d55a:	80 2f       	mov.d %d15,%a2
8000d55c:	6d 00 31 01 	call 8000d7be <memcpy>
8000d560:	60 f5       	mov.a %a5,%d15
8000d562:	40 d4       	mov.aa %a4,%a13
8000d564:	82 14       	mov %d4,1
8000d566:	6d 00 d6 02 	call 8000db12 <__lshift>
8000d56a:	80 28       	mov.d %d8,%a2
8000d56c:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000d570:	8f 1c 00 a1 	and %d10,%d12,1
8000d574:	40 e4       	mov.aa %a4,%a14
8000d576:	40 c5       	mov.aa %a5,%a12
8000d578:	6d ff 1a fa 	call 8000c9ac <quorem>
8000d57c:	40 e4       	mov.aa %a4,%a14
8000d57e:	40 f5       	mov.aa %a5,%a15
8000d580:	02 2e       	mov %d14,%d2
8000d582:	1b 02 03 f0 	addi %d15,%d2,48
8000d586:	6d 00 23 03 	call 8000dbcc <__mcmp>
8000d58a:	60 86       	mov.a %a6,%d8
8000d58c:	40 d4       	mov.aa %a4,%a13
8000d58e:	40 c5       	mov.aa %a5,%a12
8000d590:	02 2b       	mov %d11,%d2
8000d592:	6d 00 3e 03 	call 8000dc0e <__mdiff>
8000d596:	19 22 0c 00 	ld.w %d2,[%a2]12
8000d59a:	80 2d       	mov.d %d13,%a2
8000d59c:	82 1c       	mov %d12,1
8000d59e:	f6 26       	jnz %d2,8000d5aa <_dtoa_r+0xae2>
8000d5a0:	40 e4       	mov.aa %a4,%a14
8000d5a2:	40 25       	mov.aa %a5,%a2
8000d5a4:	6d 00 14 03 	call 8000dbcc <__mcmp>
8000d5a8:	02 2c       	mov %d12,%d2
8000d5aa:	60 d5       	mov.a %a5,%d13
8000d5ac:	40 d4       	mov.aa %a4,%a13
8000d5ae:	6d 00 41 01 	call 8000d830 <_Bfree>
8000d5b2:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000d5b6:	1b 19 00 d0 	addi %d13,%d9,1
8000d5ba:	a6 c3       	or %d3,%d12
8000d5bc:	f6 3f       	jnz %d3,8000d5da <_dtoa_r+0xb12>
8000d5be:	f6 ae       	jnz %d10,8000d5da <_dtoa_r+0xb12>
8000d5c0:	8b 9f 03 32 	eq %d3,%d15,57
8000d5c4:	40 e2       	mov.aa %a2,%a14
8000d5c6:	df 03 3a 80 	jne %d3,0,8000d63a <_dtoa_r+0xb72>
8000d5ca:	1b 1e 03 20 	addi %d2,%d14,49
8000d5ce:	8b 1b 80 b2 	ge %d11,%d11,1
8000d5d2:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000d5d6:	02 de       	mov %d14,%d13
8000d5d8:	3c 37       	j 8000d646 <_dtoa_r+0xb7e>
8000d5da:	ce b5       	jgez %d11,8000d5e4 <_dtoa_r+0xb1c>
8000d5dc:	02 fa       	mov %d10,%d15
8000d5de:	40 e2       	mov.aa %a2,%a14
8000d5e0:	4e ca       	jgtz %d12,8000d5f4 <_dtoa_r+0xb2c>
8000d5e2:	3c 1e       	j 8000d61e <_dtoa_r+0xb56>
8000d5e4:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d5e8:	a6 2b       	or %d11,%d2
8000d5ea:	df 0b 20 80 	jne %d11,0,8000d62a <_dtoa_r+0xb62>
8000d5ee:	df 0a 1e 80 	jne %d10,0,8000d62a <_dtoa_r+0xb62>
8000d5f2:	3c f5       	j 8000d5dc <_dtoa_r+0xb14>
8000d5f4:	40 d4       	mov.aa %a4,%a13
8000d5f6:	40 e5       	mov.aa %a5,%a14
8000d5f8:	82 14       	mov %d4,1
8000d5fa:	6d 00 8c 02 	call 8000db12 <__lshift>
8000d5fe:	40 c5       	mov.aa %a5,%a12
8000d600:	40 24       	mov.aa %a4,%a2
8000d602:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d606:	6d 00 e3 02 	call 8000dbcc <__mcmp>
8000d60a:	99 a2 04 00 	ld.a %a2,[%sp]4
8000d60e:	4e 23       	jgtz %d2,8000d614 <_dtoa_r+0xb4c>
8000d610:	f6 27       	jnz %d2,8000d61e <_dtoa_r+0xb56>
8000d612:	2e 06       	jz.t %d15,0,8000d61e <_dtoa_r+0xb56>
8000d614:	8b 9f 03 32 	eq %d3,%d15,57
8000d618:	df 03 11 80 	jne %d3,0,8000d63a <_dtoa_r+0xb72>
8000d61c:	92 1a       	add %d10,%d15,1
8000d61e:	60 93       	mov.a %a3,%d9
8000d620:	02 de       	mov %d14,%d13
8000d622:	34 3a       	st.b [%a3],%d10
8000d624:	40 2e       	mov.aa %a14,%a2
8000d626:	1d 00 90 00 	j 8000d746 <_dtoa_r+0xc7e>
8000d62a:	bf 1c 11 00 	jlt %d12,1,8000d64c <_dtoa_r+0xb84>
8000d62e:	8b 9f 23 32 	ne %d3,%d15,57
8000d632:	40 e2       	mov.aa %a2,%a14
8000d634:	02 de       	mov %d14,%d13
8000d636:	c2 1f       	add %d15,1
8000d638:	f6 37       	jnz %d3,8000d646 <_dtoa_r+0xb7e>
8000d63a:	60 93       	mov.a %a3,%d9
8000d63c:	da 39       	mov %d15,57
8000d63e:	02 de       	mov %d14,%d13
8000d640:	2c 30       	st.b [%a3]0,%d15
8000d642:	40 2e       	mov.aa %a14,%a2
8000d644:	3c 5d       	j 8000d6fe <_dtoa_r+0xc36>
8000d646:	60 92       	mov.a %a2,%d9
8000d648:	2c 20       	st.b [%a2]0,%d15
8000d64a:	3c 7e       	j 8000d746 <_dtoa_r+0xc7e>
8000d64c:	60 93       	mov.a %a3,%d9
8000d64e:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d652:	02 d5       	mov %d5,%d13
8000d654:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d658:	2c 30       	st.b [%a3]0,%d15
8000d65a:	a2 25       	sub %d5,%d2
8000d65c:	02 de       	mov %d14,%d13
8000d65e:	5f 35 41 00 	jeq %d5,%d3,8000d6e0 <_dtoa_r+0xc18>
8000d662:	40 e5       	mov.aa %a5,%a14
8000d664:	40 d4       	mov.aa %a4,%a13
8000d666:	fb a0 00 40 	mov %e4,10
8000d66a:	6d 00 ec 00 	call 8000d842 <__multadd>
8000d66e:	80 ff       	mov.d %d15,%a15
8000d670:	40 2e       	mov.aa %a14,%a2
8000d672:	40 d4       	mov.aa %a4,%a13
8000d674:	40 f5       	mov.aa %a5,%a15
8000d676:	fb a0 00 40 	mov %e4,10
8000d67a:	7e 86       	jne %d15,%d8,8000d686 <_dtoa_r+0xbbe>
8000d67c:	6d 00 e3 00 	call 8000d842 <__multadd>
8000d680:	40 2f       	mov.aa %a15,%a2
8000d682:	80 28       	mov.d %d8,%a2
8000d684:	3c 0b       	j 8000d69a <_dtoa_r+0xbd2>
8000d686:	6d 00 de 00 	call 8000d842 <__multadd>
8000d68a:	60 85       	mov.a %a5,%d8
8000d68c:	40 d4       	mov.aa %a4,%a13
8000d68e:	fb a0 00 40 	mov %e4,10
8000d692:	40 2f       	mov.aa %a15,%a2
8000d694:	6d 00 d7 00 	call 8000d842 <__multadd>
8000d698:	80 28       	mov.d %d8,%a2
8000d69a:	02 d9       	mov %d9,%d13
8000d69c:	1d ff 6c ff 	j 8000d574 <_dtoa_r+0xaac>
8000d6a0:	40 e5       	mov.aa %a5,%a14
8000d6a2:	40 d4       	mov.aa %a4,%a13
8000d6a4:	fb a0 00 40 	mov %e4,10
8000d6a8:	6d 00 cd 00 	call 8000d842 <__multadd>
8000d6ac:	02 98       	mov %d8,%d9
8000d6ae:	40 2e       	mov.aa %a14,%a2
8000d6b0:	40 e4       	mov.aa %a4,%a14
8000d6b2:	40 c5       	mov.aa %a5,%a12
8000d6b4:	6d ff 7c f9 	call 8000c9ac <quorem>
8000d6b8:	1b 18 00 90 	addi %d9,%d8,1
8000d6bc:	1b 02 03 f0 	addi %d15,%d2,48
8000d6c0:	60 82       	mov.a %a2,%d8
8000d6c2:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000d6c6:	02 95       	mov %d5,%d9
8000d6c8:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d6cc:	2c 20       	st.b [%a2]0,%d15
8000d6ce:	a2 25       	sub %d5,%d2
8000d6d0:	3f 35 e8 7f 	jlt %d5,%d3,8000d6a0 <_dtoa_r+0xbd8>
8000d6d4:	8b 13 40 33 	max %d3,%d3,1
8000d6d8:	02 2e       	mov %d14,%d2
8000d6da:	80 f8       	mov.d %d8,%a15
8000d6dc:	42 3e       	add %d14,%d3
8000d6de:	a0 0f       	mov.a %a15,0
8000d6e0:	40 e5       	mov.aa %a5,%a14
8000d6e2:	40 d4       	mov.aa %a4,%a13
8000d6e4:	82 14       	mov %d4,1
8000d6e6:	6d 00 16 02 	call 8000db12 <__lshift>
8000d6ea:	40 c5       	mov.aa %a5,%a12
8000d6ec:	40 2e       	mov.aa %a14,%a2
8000d6ee:	40 24       	mov.aa %a4,%a2
8000d6f0:	6d 00 6e 02 	call 8000dbcc <__mcmp>
8000d6f4:	4e 25       	jgtz %d2,8000d6fe <_dtoa_r+0xc36>
8000d6f6:	df 02 1e 80 	jne %d2,0,8000d732 <_dtoa_r+0xc6a>
8000d6fa:	6f 0f 1c 00 	jz.t %d15,0,8000d732 <_dtoa_r+0xc6a>
8000d6fe:	58 03       	ld.w %d15,[%sp]12
8000d700:	a2 ef       	sub %d15,%d14
8000d702:	46 0f       	not %d15
8000d704:	60 e2       	mov.a %a2,%d14
8000d706:	60 e3       	mov.a %a3,%d14
8000d708:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000d70c:	b0 f3       	add.a %a3,-1
8000d70e:	8b 93 03 52 	eq %d5,%d3,57
8000d712:	76 5d       	jz %d5,8000d72c <_dtoa_r+0xc64>
8000d714:	9f 0f 0a 80 	jned %d15,0,8000d728 <_dtoa_r+0xc60>
8000d718:	58 02       	ld.w %d15,[%sp]8
8000d71a:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000d71e:	c2 1f       	add %d15,1
8000d720:	78 02       	st.w [%sp]8,%d15
8000d722:	da 31       	mov %d15,49
8000d724:	2c 30       	st.b [%a3]0,%d15
8000d726:	3c 10       	j 8000d746 <_dtoa_r+0xc7e>
8000d728:	80 3e       	mov.d %d14,%a3
8000d72a:	3c ed       	j 8000d704 <_dtoa_r+0xc3c>
8000d72c:	c2 13       	add %d3,1
8000d72e:	34 33       	st.b [%a3],%d3
8000d730:	3c 0b       	j 8000d746 <_dtoa_r+0xc7e>
8000d732:	60 e2       	mov.a %a2,%d14
8000d734:	60 e3       	mov.a %a3,%d14
8000d736:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000d73a:	b0 f3       	add.a %a3,-1
8000d73c:	8b 0f 03 f2 	eq %d15,%d15,48
8000d740:	6e 03       	jz %d15,8000d746 <_dtoa_r+0xc7e>
8000d742:	80 3e       	mov.d %d14,%a3
8000d744:	3c f7       	j 8000d732 <_dtoa_r+0xc6a>
8000d746:	40 d4       	mov.aa %a4,%a13
8000d748:	40 c5       	mov.aa %a5,%a12
8000d74a:	6d 00 73 00 	call 8000d830 <_Bfree>
8000d74e:	df 08 13 00 	jeq %d8,0,8000d774 <_dtoa_r+0xcac>
8000d752:	80 f2       	mov.d %d2,%a15
8000d754:	8b 02 20 f2 	ne %d15,%d2,0
8000d758:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000d75c:	6e 05       	jz %d15,8000d766 <_dtoa_r+0xc9e>
8000d75e:	40 d4       	mov.aa %a4,%a13
8000d760:	40 f5       	mov.aa %a5,%a15
8000d762:	6d 00 67 00 	call 8000d830 <_Bfree>
8000d766:	60 85       	mov.a %a5,%d8
8000d768:	40 d4       	mov.aa %a4,%a13
8000d76a:	6d 00 63 00 	call 8000d830 <_Bfree>
8000d76e:	3c 03       	j 8000d774 <_dtoa_r+0xcac>
8000d770:	58 0c       	ld.w %d15,[%sp]48
8000d772:	78 02       	st.w [%sp]8,%d15
8000d774:	40 d4       	mov.aa %a4,%a13
8000d776:	40 e5       	mov.aa %a5,%a14
8000d778:	6d 00 5c 00 	call 8000d830 <_Bfree>
8000d77c:	60 e2       	mov.a %a2,%d14
8000d77e:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d782:	99 a3 08 10 	ld.a %a3,[%sp]72
8000d786:	82 0f       	mov %d15,0
8000d788:	d8 0e       	ld.a %a15,[%sp]56
8000d78a:	2c 20       	st.b [%a2]0,%d15
8000d78c:	c2 12       	add %d2,1
8000d78e:	74 32       	st.w [%a3],%d2
8000d790:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d794:	bc f2       	jz.a %a15,8000d798 <_dtoa_r+0xcd0>
8000d796:	68 0e       	st.w [%a15]0,%d14
8000d798:	00 90       	ret 
	...

8000d79c <_localeconv_r>:
8000d79c:	91 00 00 28 	movh.a %a2,32768
8000d7a0:	d9 22 e0 d0 	lea %a2,[%a2]3936 <80000f60 <lconv>>
8000d7a4:	00 90       	ret 

8000d7a6 <memchr>:
8000d7a6:	8f f4 0f 41 	and %d4,%d4,255
8000d7aa:	9f 05 04 80 	jned %d5,0,8000d7b2 <memchr+0xc>
8000d7ae:	a0 02       	mov.a %a2,0
8000d7b0:	00 90       	ret 
8000d7b2:	0c 40       	ld.bu %d15,[%a4]0
8000d7b4:	3e 43       	jeq %d15,%d4,8000d7ba <memchr+0x14>
8000d7b6:	b0 14       	add.a %a4,1
8000d7b8:	3c f9       	j 8000d7aa <memchr+0x4>
8000d7ba:	40 42       	mov.aa %a2,%a4
8000d7bc:	00 90       	ret 

8000d7be <memcpy>:
8000d7be:	40 42       	mov.aa %a2,%a4
8000d7c0:	a0 0f       	mov.a %a15,0
8000d7c2:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d7c6:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d7ca:	9f 04 03 80 	jned %d4,0,8000d7d0 <memcpy+0x12>
8000d7ce:	00 90       	ret 
8000d7d0:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d7d4:	b0 1f       	add.a %a15,1
8000d7d6:	2c 40       	st.b [%a4]0,%d15
8000d7d8:	3c f5       	j 8000d7c2 <memcpy+0x4>

8000d7da <_Balloc>:
8000d7da:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d7de:	40 4f       	mov.aa %a15,%a4
8000d7e0:	02 4f       	mov %d15,%d4
8000d7e2:	76 29       	jz %d2,8000d7f4 <_Balloc+0x1a>
8000d7e4:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d7e8:	90 33       	addsc.a %a3,%a3,%d15,2
8000d7ea:	d4 32       	ld.a %a2,[%a3]
8000d7ec:	bc 2f       	jz.a %a2,8000d80a <_Balloc+0x30>
8000d7ee:	4c 20       	ld.w %d15,[%a2]0
8000d7f0:	6c 30       	st.w [%a3]0,%d15
8000d7f2:	3c 1b       	j 8000d828 <_Balloc+0x4e>
8000d7f4:	82 44       	mov %d4,4
8000d7f6:	3b 10 02 50 	mov %d5,33
8000d7fa:	6d 00 5c 03 	call 8000deb2 <_calloc_r>
8000d7fe:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d802:	bd 02 f1 ff 	jnz.a %a2,8000d7e4 <_Balloc+0xa>
8000d806:	a0 02       	mov.a %a2,0
8000d808:	00 90       	ret 
8000d80a:	82 18       	mov %d8,1
8000d80c:	0f f8 00 80 	sh %d8,%d8,%d15
8000d810:	1b 58 00 50 	addi %d5,%d8,5
8000d814:	40 f4       	mov.aa %a4,%a15
8000d816:	82 14       	mov %d4,1
8000d818:	06 25       	sh %d5,2
8000d81a:	6d 00 4c 03 	call 8000deb2 <_calloc_r>
8000d81e:	bd 02 f4 7f 	jz.a %a2,8000d806 <_Balloc+0x2c>
8000d822:	6c 21       	st.w [%a2]4,%d15
8000d824:	59 28 08 00 	st.w [%a2]8,%d8
8000d828:	82 0f       	mov %d15,0
8000d82a:	6c 24       	st.w [%a2]16,%d15
8000d82c:	6c 23       	st.w [%a2]12,%d15
8000d82e:	00 90       	ret 

8000d830 <_Bfree>:
8000d830:	bc 58       	jz.a %a5,8000d840 <_Bfree+0x10>
8000d832:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d836:	4c 51       	ld.w %d15,[%a5]4
8000d838:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d83a:	4c f0       	ld.w %d15,[%a15]0
8000d83c:	6c 50       	st.w [%a5]0,%d15
8000d83e:	e8 05       	st.a [%a15]0,%a5
8000d840:	00 90       	ret 

8000d842 <__multadd>:
8000d842:	19 59 10 00 	ld.w %d9,[%a5]16
8000d846:	40 4c       	mov.aa %a12,%a4
8000d848:	9a f9       	add %d15,%d9,-1
8000d84a:	8b 19 80 22 	ge %d2,%d9,1
8000d84e:	40 5f       	mov.aa %a15,%a5
8000d850:	02 58       	mov %d8,%d5
8000d852:	d9 53 14 00 	lea %a3,[%a5]20
8000d856:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d85a:	40 32       	mov.aa %a2,%a3
8000d85c:	44 25       	ld.w %d5,[%a2+]
8000d85e:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d862:	8f 05 1f f0 	sh %d15,%d5,-16
8000d866:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d86a:	8f 03 1f 60 	sh %d6,%d3,-16
8000d86e:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d872:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d876:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d87a:	74 33       	st.w [%a3],%d3
8000d87c:	40 23       	mov.aa %a3,%a2
8000d87e:	9f 02 ee ff 	jned %d2,0,8000d85a <__multadd+0x18>
8000d882:	df 08 1f 00 	jeq %d8,0,8000d8c0 <__multadd+0x7e>
8000d886:	4c f2       	ld.w %d15,[%a15]8
8000d888:	3f f9 16 00 	jlt %d9,%d15,8000d8b4 <__multadd+0x72>
8000d88c:	48 14       	ld.w %d4,[%a15]4
8000d88e:	40 c4       	mov.aa %a4,%a12
8000d890:	c2 14       	add %d4,1
8000d892:	6d ff a4 ff 	call 8000d7da <_Balloc>
8000d896:	48 44       	ld.w %d4,[%a15]16
8000d898:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d89c:	c2 24       	add %d4,2
8000d89e:	d9 24 0c 00 	lea %a4,[%a2]12
8000d8a2:	06 24       	sh %d4,2
8000d8a4:	40 2d       	mov.aa %a13,%a2
8000d8a6:	6d ff 8c ff 	call 8000d7be <memcpy>
8000d8aa:	40 f5       	mov.aa %a5,%a15
8000d8ac:	40 c4       	mov.aa %a4,%a12
8000d8ae:	6d ff c1 ff 	call 8000d830 <_Bfree>
8000d8b2:	40 df       	mov.aa %a15,%a13
8000d8b4:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d8b8:	c2 19       	add %d9,1
8000d8ba:	59 28 14 00 	st.w [%a2]20,%d8
8000d8be:	68 49       	st.w [%a15]16,%d9
8000d8c0:	40 f2       	mov.aa %a2,%a15
8000d8c2:	00 90       	ret 

8000d8c4 <__hi0bits>:
8000d8c4:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d8c8:	82 02       	mov %d2,0
8000d8ca:	ee 05       	jnz %d15,8000d8d4 <__hi0bits+0x10>
8000d8cc:	8f 04 01 40 	sh %d4,%d4,16
8000d8d0:	3b 00 01 20 	mov %d2,16
8000d8d4:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d8d8:	ee 05       	jnz %d15,8000d8e2 <__hi0bits+0x1e>
8000d8da:	1b 82 00 20 	addi %d2,%d2,8
8000d8de:	8f 84 00 40 	sh %d4,%d4,8
8000d8e2:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d8e6:	ee 03       	jnz %d15,8000d8ec <__hi0bits+0x28>
8000d8e8:	c2 42       	add %d2,4
8000d8ea:	06 44       	sh %d4,4
8000d8ec:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d8f0:	ee 03       	jnz %d15,8000d8f6 <__hi0bits+0x32>
8000d8f2:	c2 22       	add %d2,2
8000d8f4:	06 24       	sh %d4,2
8000d8f6:	0e 47       	jltz %d4,8000d904 <__hi0bits+0x40>
8000d8f8:	7b 00 00 f4 	movh %d15,16384
8000d8fc:	26 f4       	and %d4,%d15
8000d8fe:	c2 12       	add %d2,1
8000d900:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d904:	00 90       	ret 

8000d906 <__lo0bits>:
8000d906:	54 43       	ld.w %d3,[%a4]
8000d908:	8f 73 00 f1 	and %d15,%d3,7
8000d90c:	6e 0e       	jz %d15,8000d928 <__lo0bits+0x22>
8000d90e:	82 02       	mov %d2,0
8000d910:	6f 03 2d 80 	jnz.t %d3,0,8000d96a <__lo0bits+0x64>
8000d914:	6f 13 06 00 	jz.t %d3,1,8000d920 <__lo0bits+0x1a>
8000d918:	06 f3       	sh %d3,-1
8000d91a:	74 43       	st.w [%a4],%d3
8000d91c:	82 12       	mov %d2,1
8000d91e:	00 90       	ret 
8000d920:	06 e3       	sh %d3,-2
8000d922:	74 43       	st.w [%a4],%d3
8000d924:	82 22       	mov %d2,2
8000d926:	00 90       	ret 
8000d928:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000d92c:	82 04       	mov %d4,0
8000d92e:	ee 05       	jnz %d15,8000d938 <__lo0bits+0x32>
8000d930:	8f 03 1f 30 	sh %d3,%d3,-16
8000d934:	3b 00 01 40 	mov %d4,16
8000d938:	02 3f       	mov %d15,%d3
8000d93a:	16 ff       	and %d15,255
8000d93c:	ee 04       	jnz %d15,8000d944 <__lo0bits+0x3e>
8000d93e:	1b 84 00 40 	addi %d4,%d4,8
8000d942:	06 83       	sh %d3,-8
8000d944:	8f f3 00 f1 	and %d15,%d3,15
8000d948:	ee 03       	jnz %d15,8000d94e <__lo0bits+0x48>
8000d94a:	c2 44       	add %d4,4
8000d94c:	06 c3       	sh %d3,-4
8000d94e:	8f 33 00 f1 	and %d15,%d3,3
8000d952:	ee 03       	jnz %d15,8000d958 <__lo0bits+0x52>
8000d954:	c2 24       	add %d4,2
8000d956:	06 e3       	sh %d3,-2
8000d958:	6f 03 07 80 	jnz.t %d3,0,8000d966 <__lo0bits+0x60>
8000d95c:	06 f3       	sh %d3,-1
8000d95e:	3b 00 02 20 	mov %d2,32
8000d962:	76 34       	jz %d3,8000d96a <__lo0bits+0x64>
8000d964:	c2 14       	add %d4,1
8000d966:	74 43       	st.w [%a4],%d3
8000d968:	02 42       	mov %d2,%d4
8000d96a:	00 90       	ret 

8000d96c <__i2b>:
8000d96c:	02 4f       	mov %d15,%d4
8000d96e:	82 14       	mov %d4,1
8000d970:	6d ff 35 ff 	call 8000d7da <_Balloc>
8000d974:	6c 25       	st.w [%a2]20,%d15
8000d976:	82 1f       	mov %d15,1
8000d978:	6c 24       	st.w [%a2]16,%d15
8000d97a:	00 90       	ret 

8000d97c <__multiply>:
8000d97c:	19 52 10 00 	ld.w %d2,[%a5]16
8000d980:	4c 64       	ld.w %d15,[%a6]16
8000d982:	40 5f       	mov.aa %a15,%a5
8000d984:	40 6c       	mov.aa %a12,%a6
8000d986:	7f f2 04 00 	jge %d2,%d15,8000d98e <__multiply+0x12>
8000d98a:	40 6f       	mov.aa %a15,%a6
8000d98c:	40 5c       	mov.aa %a12,%a5
8000d98e:	48 4a       	ld.w %d10,[%a15]16
8000d990:	19 c9 10 00 	ld.w %d9,[%a12]16
8000d994:	4c f2       	ld.w %d15,[%a15]8
8000d996:	0b 9a 00 80 	add %d8,%d10,%d9
8000d99a:	48 12       	ld.w %d2,[%a15]4
8000d99c:	0b 8f 20 41 	lt %d4,%d15,%d8
8000d9a0:	42 24       	add %d4,%d2
8000d9a2:	6d ff 1c ff 	call 8000d7da <_Balloc>
8000d9a6:	d9 23 14 00 	lea %a3,[%a2]20
8000d9aa:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000d9ae:	40 34       	mov.aa %a4,%a3
8000d9b0:	82 0f       	mov %d15,0
8000d9b2:	80 43       	mov.d %d3,%a4
8000d9b4:	80 d2       	mov.d %d2,%a13
8000d9b6:	7f 23 04 80 	jge.u %d3,%d2,8000d9be <__multiply+0x42>
8000d9ba:	64 4f       	st.w [%a4+],%d15
8000d9bc:	3c fb       	j 8000d9b2 <__multiply+0x36>
8000d9be:	d9 ff 14 00 	lea %a15,[%a15]20
8000d9c2:	d9 cc 14 00 	lea %a12,[%a12]20
8000d9c6:	80 f3       	mov.d %d3,%a15
8000d9c8:	80 cf       	mov.d %d15,%a12
8000d9ca:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000d9ce:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000d9d2:	80 c2       	mov.d %d2,%a12
8000d9d4:	7f 02 54 80 	jge.u %d2,%d0,8000da7c <__multiply+0x100>
8000d9d8:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000d9dc:	40 34       	mov.aa %a4,%a3
8000d9de:	40 f6       	mov.aa %a6,%a15
8000d9e0:	82 03       	mov %d3,0
8000d9e2:	df 02 21 00 	jeq %d2,0,8000da24 <__multiply+0xa8>
8000d9e6:	40 45       	mov.aa %a5,%a4
8000d9e8:	44 67       	ld.w %d7,[%a6+]
8000d9ea:	44 56       	ld.w %d6,[%a5+]
8000d9ec:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000d9f0:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000d9f4:	8f 07 1f 70 	sh %d7,%d7,-16
8000d9f8:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000d9fc:	8f 06 1f 60 	sh %d6,%d6,-16
8000da00:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000da04:	42 35       	add %d5,%d3
8000da06:	8f 05 1f 30 	sh %d3,%d5,-16
8000da0a:	1a 36       	add %d15,%d6,%d3
8000da0c:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000da10:	8f 0f 1f 30 	sh %d3,%d15,-16
8000da14:	80 6f       	mov.d %d15,%a6
8000da16:	74 45       	st.w [%a4],%d5
8000da18:	7f 4f 04 80 	jge.u %d15,%d4,8000da20 <__multiply+0xa4>
8000da1c:	40 54       	mov.aa %a4,%a5
8000da1e:	3c e4       	j 8000d9e6 <__multiply+0x6a>
8000da20:	59 43 04 00 	st.w [%a4]4,%d3
8000da24:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000da28:	df 02 27 00 	jeq %d2,0,8000da76 <__multiply+0xfa>
8000da2c:	54 33       	ld.w %d3,[%a3]
8000da2e:	40 34       	mov.aa %a4,%a3
8000da30:	40 f5       	mov.aa %a5,%a15
8000da32:	82 07       	mov %d7,0
8000da34:	40 56       	mov.aa %a6,%a5
8000da36:	44 66       	ld.w %d6,[%a6+]
8000da38:	40 47       	mov.aa %a7,%a4
8000da3a:	44 75       	ld.w %d5,[%a7+]
8000da3c:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000da40:	8f 05 1f 50 	sh %d5,%d5,-16
8000da44:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000da48:	42 7f       	add %d15,%d7
8000da4a:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000da4e:	8f 0f 1f f0 	sh %d15,%d15,-16
8000da52:	74 43       	st.w [%a4],%d3
8000da54:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000da58:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000da5c:	40 65       	mov.aa %a5,%a6
8000da5e:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000da62:	42 f3       	add %d3,%d15
8000da64:	80 6f       	mov.d %d15,%a6
8000da66:	8f 03 1f 70 	sh %d7,%d3,-16
8000da6a:	7f 4f 04 80 	jge.u %d15,%d4,8000da72 <__multiply+0xf6>
8000da6e:	40 74       	mov.aa %a4,%a7
8000da70:	3c e2       	j 8000da34 <__multiply+0xb8>
8000da72:	59 43 04 00 	st.w [%a4]4,%d3
8000da76:	b0 4c       	add.a %a12,4
8000da78:	b0 43       	add.a %a3,4
8000da7a:	3c ac       	j 8000d9d2 <__multiply+0x56>
8000da7c:	8b 08 40 f3 	max %d15,%d8,0
8000da80:	9f 0f 05 80 	jned %d15,0,8000da8a <__multiply+0x10e>
8000da84:	59 28 10 00 	st.w [%a2]16,%d8
8000da88:	00 90       	ret 
8000da8a:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000da8e:	df 02 fb ff 	jne %d2,0,8000da84 <__multiply+0x108>
8000da92:	c2 f8       	add %d8,-1
8000da94:	3c f6       	j 8000da80 <__multiply+0x104>

8000da96 <__pow5mult>:
8000da96:	8f 34 00 21 	and %d2,%d4,3
8000da9a:	40 4c       	mov.aa %a12,%a4
8000da9c:	40 5d       	mov.aa %a13,%a5
8000da9e:	02 4f       	mov %d15,%d4
8000daa0:	76 2d       	jz %d2,8000daba <__pow5mult+0x24>
8000daa2:	91 00 00 f8 	movh.a %a15,32768
8000daa6:	d9 ff d8 e0 	lea %a15,[%a15]3992 <80000f98 <p05.2553>>
8000daaa:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000daae:	82 05       	mov %d5,0
8000dab0:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000dab4:	6d ff c7 fe 	call 8000d842 <__multadd>
8000dab8:	40 2d       	mov.aa %a13,%a2
8000daba:	86 ef       	sha %d15,-2
8000dabc:	6e 29       	jz %d15,8000db0e <__pow5mult+0x78>
8000dabe:	99 cf 08 10 	ld.a %a15,[%a12]72
8000dac2:	7c fb       	jnz.a %a15,8000dad8 <__pow5mult+0x42>
8000dac4:	40 c4       	mov.aa %a4,%a12
8000dac6:	3b 10 27 40 	mov %d4,625
8000daca:	6d ff 51 ff 	call 8000d96c <__i2b>
8000dace:	82 02       	mov %d2,0
8000dad0:	b5 c2 08 10 	st.a [%a12]72,%a2
8000dad4:	40 2f       	mov.aa %a15,%a2
8000dad6:	74 22       	st.w [%a2],%d2
8000dad8:	82 08       	mov %d8,0
8000dada:	2e 0c       	jz.t %d15,0,8000daf2 <__pow5mult+0x5c>
8000dadc:	40 d5       	mov.aa %a5,%a13
8000dade:	40 c4       	mov.aa %a4,%a12
8000dae0:	40 f6       	mov.aa %a6,%a15
8000dae2:	6d ff 4d ff 	call 8000d97c <__multiply>
8000dae6:	40 d5       	mov.aa %a5,%a13
8000dae8:	40 2e       	mov.aa %a14,%a2
8000daea:	40 c4       	mov.aa %a4,%a12
8000daec:	6d ff a2 fe 	call 8000d830 <_Bfree>
8000daf0:	40 ed       	mov.aa %a13,%a14
8000daf2:	86 ff       	sha %d15,-1
8000daf4:	6e 0d       	jz %d15,8000db0e <__pow5mult+0x78>
8000daf6:	c8 02       	ld.a %a2,[%a15]0
8000daf8:	bc 23       	jz.a %a2,8000dafe <__pow5mult+0x68>
8000dafa:	40 2f       	mov.aa %a15,%a2
8000dafc:	3c ef       	j 8000dada <__pow5mult+0x44>
8000dafe:	40 c4       	mov.aa %a4,%a12
8000db00:	40 f5       	mov.aa %a5,%a15
8000db02:	40 f6       	mov.aa %a6,%a15
8000db04:	6d ff 3c ff 	call 8000d97c <__multiply>
8000db08:	e8 02       	st.a [%a15]0,%a2
8000db0a:	74 28       	st.w [%a2],%d8
8000db0c:	3c f7       	j 8000dafa <__pow5mult+0x64>
8000db0e:	40 d2       	mov.aa %a2,%a13
8000db10:	00 90       	ret 

8000db12 <__lshift>:
8000db12:	19 5b 10 00 	ld.w %d11,[%a5]16
8000db16:	8f b4 3f 80 	sha %d8,%d4,-5
8000db1a:	02 4a       	mov %d10,%d4
8000db1c:	42 8b       	add %d11,%d8
8000db1e:	19 54 04 00 	ld.w %d4,[%a5]4
8000db22:	4c 52       	ld.w %d15,[%a5]8
8000db24:	40 4e       	mov.aa %a14,%a4
8000db26:	40 5c       	mov.aa %a12,%a5
8000db28:	1b 1b 00 90 	addi %d9,%d11,1
8000db2c:	7f 9f 05 00 	jge %d15,%d9,8000db36 <__lshift+0x24>
8000db30:	c2 14       	add %d4,1
8000db32:	06 1f       	sh %d15,1
8000db34:	3c fc       	j 8000db2c <__lshift+0x1a>
8000db36:	40 e4       	mov.aa %a4,%a14
8000db38:	6d ff 51 fe 	call 8000d7da <_Balloc>
8000db3c:	8b 08 40 f3 	max %d15,%d8,0
8000db40:	40 2d       	mov.aa %a13,%a2
8000db42:	d9 2f 14 00 	lea %a15,[%a2]20
8000db46:	d2 02       	mov %e2,0
8000db48:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000db4c:	9f 0f 03 80 	jned %d15,0,8000db52 <__lshift+0x40>
8000db50:	3c 04       	j 8000db58 <__lshift+0x46>
8000db52:	74 23       	st.w [%a2],%d3
8000db54:	c2 12       	add %d2,1
8000db56:	3c f9       	j 8000db48 <__lshift+0x36>
8000db58:	8b 08 40 83 	max %d8,%d8,0
8000db5c:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000db60:	d9 cf 14 00 	lea %a15,[%a12]20
8000db64:	19 c2 10 00 	ld.w %d2,[%a12]16
8000db68:	80 f3       	mov.d %d3,%a15
8000db6a:	8f fa 01 41 	and %d4,%d10,31
8000db6e:	13 42 20 23 	madd %d2,%d3,%d2,4
8000db72:	8b 04 02 51 	rsub %d5,%d4,32
8000db76:	82 0f       	mov %d15,0
8000db78:	df 04 1a 00 	jeq %d4,0,8000dbac <__lshift+0x9a>
8000db7c:	40 f5       	mov.aa %a5,%a15
8000db7e:	44 53       	ld.w %d3,[%a5+]
8000db80:	d9 32 04 00 	lea %a2,[%a3]4
8000db84:	0f 43 00 30 	sh %d3,%d3,%d4
8000db88:	a6 3f       	or %d15,%d3
8000db8a:	6c 30       	st.w [%a3]0,%d15
8000db8c:	4c f0       	ld.w %d15,[%a15]0
8000db8e:	8b 05 00 31 	rsub %d3,%d5,0
8000db92:	0f 3f 00 30 	sh %d3,%d15,%d3
8000db96:	02 3f       	mov %d15,%d3
8000db98:	80 53       	mov.d %d3,%a5
8000db9a:	40 5f       	mov.aa %a15,%a5
8000db9c:	7f 23 04 80 	jge.u %d3,%d2,8000dba4 <__lshift+0x92>
8000dba0:	40 23       	mov.aa %a3,%a2
8000dba2:	3c ed       	j 8000db7c <__lshift+0x6a>
8000dba4:	c2 2b       	add %d11,2
8000dba6:	6c 31       	st.w [%a3]4,%d15
8000dba8:	2a b9       	cmov %d9,%d15,%d11
8000dbaa:	3c 08       	j 8000dbba <__lshift+0xa8>
8000dbac:	4c f0       	ld.w %d15,[%a15]0
8000dbae:	b0 4f       	add.a %a15,4
8000dbb0:	80 f3       	mov.d %d3,%a15
8000dbb2:	6c 30       	st.w [%a3]0,%d15
8000dbb4:	b0 43       	add.a %a3,4
8000dbb6:	3f 23 fb ff 	jlt.u %d3,%d2,8000dbac <__lshift+0x9a>
8000dbba:	c2 f9       	add %d9,-1
8000dbbc:	59 d9 10 00 	st.w [%a13]16,%d9
8000dbc0:	40 e4       	mov.aa %a4,%a14
8000dbc2:	40 c5       	mov.aa %a5,%a12
8000dbc4:	6d ff 36 fe 	call 8000d830 <_Bfree>
8000dbc8:	40 d2       	mov.aa %a2,%a13
8000dbca:	00 90       	ret 

8000dbcc <__mcmp>:
8000dbcc:	4c 54       	ld.w %d15,[%a5]16
8000dbce:	19 42 10 00 	ld.w %d2,[%a4]16
8000dbd2:	a2 f2       	sub %d2,%d15
8000dbd4:	df 02 1c 80 	jne %d2,0,8000dc0c <__mcmp+0x40>
8000dbd8:	80 42       	mov.d %d2,%a4
8000dbda:	06 2f       	sh %d15,2
8000dbdc:	60 f2       	mov.a %a2,%d15
8000dbde:	1b 42 01 30 	addi %d3,%d2,20
8000dbe2:	d9 55 14 00 	lea %a5,[%a5]20
8000dbe6:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000dbea:	30 25       	add.a %a5,%a2
8000dbec:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000dbf0:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000dbf4:	5f f2 08 00 	jeq %d2,%d15,8000dc04 <__mcmp+0x38>
8000dbf8:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000dbfc:	82 f3       	mov %d3,-1
8000dbfe:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000dc02:	00 90       	ret 
8000dc04:	80 ff       	mov.d %d15,%a15
8000dc06:	3f f3 f3 ff 	jlt.u %d3,%d15,8000dbec <__mcmp+0x20>
8000dc0a:	82 02       	mov %d2,0
8000dc0c:	00 90       	ret 

8000dc0e <__mdiff>:
8000dc0e:	40 4d       	mov.aa %a13,%a4
8000dc10:	40 5f       	mov.aa %a15,%a5
8000dc12:	40 54       	mov.aa %a4,%a5
8000dc14:	40 65       	mov.aa %a5,%a6
8000dc16:	40 6c       	mov.aa %a12,%a6
8000dc18:	6d ff da ff 	call 8000dbcc <__mcmp>
8000dc1c:	02 2f       	mov %d15,%d2
8000dc1e:	f6 2a       	jnz %d2,8000dc32 <__mdiff+0x24>
8000dc20:	40 d4       	mov.aa %a4,%a13
8000dc22:	82 04       	mov %d4,0
8000dc24:	6d ff db fd 	call 8000d7da <_Balloc>
8000dc28:	82 12       	mov %d2,1
8000dc2a:	59 22 10 00 	st.w [%a2]16,%d2
8000dc2e:	6c 25       	st.w [%a2]20,%d15
8000dc30:	00 90       	ret 
8000dc32:	82 08       	mov %d8,0
8000dc34:	ce 25       	jgez %d2,8000dc3e <__mdiff+0x30>
8000dc36:	40 f2       	mov.aa %a2,%a15
8000dc38:	82 18       	mov %d8,1
8000dc3a:	40 cf       	mov.aa %a15,%a12
8000dc3c:	40 2c       	mov.aa %a12,%a2
8000dc3e:	40 d4       	mov.aa %a4,%a13
8000dc40:	48 14       	ld.w %d4,[%a15]4
8000dc42:	6d ff cc fd 	call 8000d7da <_Balloc>
8000dc46:	48 42       	ld.w %d2,[%a15]16
8000dc48:	d9 ff 14 00 	lea %a15,[%a15]20
8000dc4c:	80 ff       	mov.d %d15,%a15
8000dc4e:	d9 c4 14 00 	lea %a4,[%a12]20
8000dc52:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000dc56:	19 c0 10 00 	ld.w %d0,[%a12]16
8000dc5a:	80 4f       	mov.d %d15,%a4
8000dc5c:	59 28 0c 00 	st.w [%a2]12,%d8
8000dc60:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000dc64:	d9 25 14 00 	lea %a5,[%a2]20
8000dc68:	82 03       	mov %d3,0
8000dc6a:	44 f6       	ld.w %d6,[%a15+]
8000dc6c:	44 45       	ld.w %d5,[%a4+]
8000dc6e:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000dc72:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000dc76:	42 34       	add %d4,%d3
8000dc78:	a2 14       	sub %d4,%d1
8000dc7a:	8f 06 1f 60 	sh %d6,%d6,-16
8000dc7e:	8f 05 1f 50 	sh %d5,%d5,-16
8000dc82:	8f 04 3f 30 	sha %d3,%d4,-16
8000dc86:	0b 56 80 50 	sub %d5,%d6,%d5
8000dc8a:	1a 35       	add %d15,%d5,%d3
8000dc8c:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000dc90:	8f 0f 3f 30 	sha %d3,%d15,-16
8000dc94:	80 4f       	mov.d %d15,%a4
8000dc96:	d9 53 04 00 	lea %a3,[%a5]4
8000dc9a:	74 54       	st.w [%a5],%d4
8000dc9c:	40 35       	mov.aa %a5,%a3
8000dc9e:	3f 0f e6 ff 	jlt.u %d15,%d0,8000dc6a <__mdiff+0x5c>
8000dca2:	80 ff       	mov.d %d15,%a15
8000dca4:	7f 7f 12 80 	jge.u %d15,%d7,8000dcc8 <__mdiff+0xba>
8000dca8:	44 f5       	ld.w %d5,[%a15+]
8000dcaa:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000dcae:	8f 05 1f 50 	sh %d5,%d5,-16
8000dcb2:	42 34       	add %d4,%d3
8000dcb4:	8f 04 3f f0 	sha %d15,%d4,-16
8000dcb8:	42 5f       	add %d15,%d5
8000dcba:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000dcbe:	8f 0f 3f 30 	sha %d3,%d15,-16
8000dcc2:	74 34       	st.w [%a3],%d4
8000dcc4:	b0 43       	add.a %a3,4
8000dcc6:	3c ee       	j 8000dca2 <__mdiff+0x94>
8000dcc8:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000dccc:	ee 03       	jnz %d15,8000dcd2 <__mdiff+0xc4>
8000dcce:	c2 f2       	add %d2,-1
8000dcd0:	3c fc       	j 8000dcc8 <__mdiff+0xba>
8000dcd2:	59 22 10 00 	st.w [%a2]16,%d2
8000dcd6:	00 90       	ret 

8000dcd8 <__d2b>:
8000dcd8:	20 08       	sub.a %sp,8
8000dcda:	02 48       	mov %d8,%d4
8000dcdc:	82 14       	mov %d4,1
8000dcde:	02 59       	mov %d9,%d5
8000dce0:	40 5d       	mov.aa %a13,%a5
8000dce2:	40 6c       	mov.aa %a12,%a6
8000dce4:	6d ff 7b fd 	call 8000d7da <_Balloc>
8000dce8:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000dcec:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000dcf0:	40 2f       	mov.aa %a15,%a2
8000dcf2:	76 93       	jz %d9,8000dcf8 <__d2b+0x20>
8000dcf4:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000dcf8:	59 a2 04 00 	st.w [%sp]4,%d2
8000dcfc:	df 08 20 00 	jeq %d8,0,8000dd3c <__d2b+0x64>
8000dd00:	d9 a4 08 00 	lea %a4,[%sp]8
8000dd04:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000dd08:	40 a4       	mov.aa %a4,%sp
8000dd0a:	6d ff fe fd 	call 8000d906 <__lo0bits>
8000dd0e:	58 00       	ld.w %d15,[%sp]0
8000dd10:	76 2f       	jz %d2,8000dd2e <__d2b+0x56>
8000dd12:	19 a4 04 00 	ld.w %d4,[%sp]4
8000dd16:	8b 02 02 31 	rsub %d3,%d2,32
8000dd1a:	0f 34 00 30 	sh %d3,%d4,%d3
8000dd1e:	a6 3f       	or %d15,%d3
8000dd20:	68 5f       	st.w [%a15]20,%d15
8000dd22:	8b 02 00 f1 	rsub %d15,%d2,0
8000dd26:	0f f4 00 f0 	sh %d15,%d4,%d15
8000dd2a:	78 01       	st.w [%sp]4,%d15
8000dd2c:	3c 02       	j 8000dd30 <__d2b+0x58>
8000dd2e:	68 5f       	st.w [%a15]20,%d15
8000dd30:	58 01       	ld.w %d15,[%sp]4
8000dd32:	82 28       	mov %d8,2
8000dd34:	ea 18       	cmovn %d8,%d15,1
8000dd36:	68 6f       	st.w [%a15]24,%d15
8000dd38:	68 48       	st.w [%a15]16,%d8
8000dd3a:	3c 0c       	j 8000dd52 <__d2b+0x7a>
8000dd3c:	d9 a4 04 00 	lea %a4,[%sp]4
8000dd40:	6d ff e3 fd 	call 8000d906 <__lo0bits>
8000dd44:	58 01       	ld.w %d15,[%sp]4
8000dd46:	1b 02 02 20 	addi %d2,%d2,32
8000dd4a:	68 5f       	st.w [%a15]20,%d15
8000dd4c:	82 1f       	mov %d15,1
8000dd4e:	68 4f       	st.w [%a15]16,%d15
8000dd50:	82 18       	mov %d8,1
8000dd52:	76 98       	jz %d9,8000dd62 <__d2b+0x8a>
8000dd54:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000dd58:	42 29       	add %d9,%d2
8000dd5a:	74 d9       	st.w [%a13],%d9
8000dd5c:	8b 52 03 21 	rsub %d2,%d2,53
8000dd60:	3c 0d       	j 8000dd7a <__d2b+0xa2>
8000dd62:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000dd66:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000dd6a:	74 d2       	st.w [%a13],%d2
8000dd6c:	19 24 10 00 	ld.w %d4,[%a2]16
8000dd70:	6d ff aa fd 	call 8000d8c4 <__hi0bits>
8000dd74:	06 58       	sh %d8,5
8000dd76:	0b 28 80 20 	sub %d2,%d8,%d2
8000dd7a:	74 c2       	st.w [%a12],%d2
8000dd7c:	40 f2       	mov.aa %a2,%a15
8000dd7e:	00 90       	ret 

8000dd80 <__fpclassifyd>:
8000dd80:	0f 45 a0 f0 	or %d15,%d5,%d4
8000dd84:	82 22       	mov %d2,2
8000dd86:	6e 1d       	jz %d15,8000ddc0 <__fpclassifyd+0x40>
8000dd88:	7b 00 00 38 	movh %d3,32768
8000dd8c:	3a 53       	eq %d15,%d3,%d5
8000dd8e:	8b 04 00 f4 	and.eq %d15,%d4,0
8000dd92:	8b 04 00 62 	eq %d6,%d4,0
8000dd96:	ee 15       	jnz %d15,8000ddc0 <__fpclassifyd+0x40>
8000dd98:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000dd9c:	7b 00 fe f7 	movh %d15,32736
8000dda0:	9b 05 ff 3f 	addih %d3,%d5,65520
8000dda4:	82 42       	mov %d2,4
8000dda6:	3f f3 0d 80 	jlt.u %d3,%d15,8000ddc0 <__fpclassifyd+0x40>
8000ddaa:	7b 00 01 f0 	movh %d15,16
8000ddae:	82 32       	mov %d2,3
8000ddb0:	3f f5 08 80 	jlt.u %d5,%d15,8000ddc0 <__fpclassifyd+0x40>
8000ddb4:	7b 00 ff 27 	movh %d2,32752
8000ddb8:	0b 25 00 51 	eq %d5,%d5,%d2
8000ddbc:	0f 56 80 20 	and %d2,%d6,%d5
8000ddc0:	00 90       	ret 

8000ddc2 <__ssprint_r>:
8000ddc2:	4c 62       	ld.w %d15,[%a6]8
8000ddc4:	20 08       	sub.a %sp,8
8000ddc6:	40 4e       	mov.aa %a14,%a4
8000ddc8:	40 5f       	mov.aa %a15,%a5
8000ddca:	40 6c       	mov.aa %a12,%a6
8000ddcc:	54 6c       	ld.w %d12,[%a6]
8000ddce:	6e 30       	jz %d15,8000de2e <__ssprint_r+0x6c>
8000ddd0:	a0 02       	mov.a %a2,0
8000ddd2:	b5 a2 04 00 	st.a [%sp]4,%a2
8000ddd6:	82 09       	mov %d9,0
8000ddd8:	3b 00 48 e0 	mov %d14,1152
8000dddc:	3b f0 b7 df 	mov %d13,-1153
8000dde0:	3c 0a       	j 8000ddf4 <__ssprint_r+0x32>
8000dde2:	60 c2       	mov.a %a2,%d12
8000dde4:	d4 22       	ld.a %a2,[%a2]
8000dde6:	b5 a2 04 00 	st.a [%sp]4,%a2
8000ddea:	60 c2       	mov.a %a2,%d12
8000ddec:	1b 8c 00 c0 	addi %d12,%d12,8
8000ddf0:	19 29 04 00 	ld.w %d9,[%a2]4
8000ddf4:	df 09 f7 7f 	jeq %d9,0,8000dde2 <__ssprint_r+0x20>
8000ddf8:	48 28       	ld.w %d8,[%a15]8
8000ddfa:	3f 89 5a 80 	jlt.u %d9,%d8,8000deae <__ssprint_r+0xec>
8000ddfe:	88 62       	ld.h %d2,[%a15]12
8000de00:	0f e2 80 f0 	and %d15,%d2,%d14
8000de04:	ee 19       	jnz %d15,8000de36 <__ssprint_r+0x74>
8000de06:	3f 89 54 80 	jlt.u %d9,%d8,8000deae <__ssprint_r+0xec>
8000de0a:	c8 04       	ld.a %a4,[%a15]0
8000de0c:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000de10:	02 84       	mov %d4,%d8
8000de12:	6d 00 81 00 	call 8000df14 <memmove>
8000de16:	4c f2       	ld.w %d15,[%a15]8
8000de18:	a2 8f       	sub %d15,%d8
8000de1a:	68 2f       	st.w [%a15]8,%d15
8000de1c:	4c f0       	ld.w %d15,[%a15]0
8000de1e:	42 f8       	add %d8,%d15
8000de20:	4c c2       	ld.w %d15,[%a12]8
8000de22:	68 08       	st.w [%a15]0,%d8
8000de24:	52 99       	sub %d9,%d15,%d9
8000de26:	59 c9 08 00 	st.w [%a12]8,%d9
8000de2a:	df 09 dc ff 	jne %d9,0,8000dde2 <__ssprint_r+0x20>
8000de2e:	82 0f       	mov %d15,0
8000de30:	6c c1       	st.w [%a12]4,%d15
8000de32:	82 02       	mov %d2,0
8000de34:	00 90       	ret 
8000de36:	c8 45       	ld.a %a5,[%a15]16
8000de38:	48 5a       	ld.w %d10,[%a15]20
8000de3a:	4c f0       	ld.w %d15,[%a15]0
8000de3c:	80 53       	mov.d %d3,%a5
8000de3e:	53 3a 20 a0 	mul %d10,%d10,3
8000de42:	a2 3f       	sub %d15,%d3
8000de44:	82 23       	mov %d3,2
8000de46:	4b 3a 01 a2 	div %e10,%d10,%d3
8000de4a:	92 13       	add %d3,%d15,1
8000de4c:	42 93       	add %d3,%d9
8000de4e:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000de52:	40 e4       	mov.aa %a4,%a14
8000de54:	02 a4       	mov %d4,%d10
8000de56:	6f a2 12 00 	jz.t %d2,10,8000de7a <__ssprint_r+0xb8>
8000de5a:	6d ff 0b e9 	call 8000b070 <_malloc_r>
8000de5e:	40 2d       	mov.aa %a13,%a2
8000de60:	bd 02 15 00 	jz.a %a2,8000de8a <__ssprint_r+0xc8>
8000de64:	c8 45       	ld.a %a5,[%a15]16
8000de66:	40 24       	mov.aa %a4,%a2
8000de68:	02 f4       	mov %d4,%d15
8000de6a:	6d ff aa fc 	call 8000d7be <memcpy>
8000de6e:	88 62       	ld.h %d2,[%a15]12
8000de70:	26 d2       	and %d2,%d13
8000de72:	8f 02 48 21 	or %d2,%d2,128
8000de76:	a8 62       	st.h [%a15]12,%d2
8000de78:	3c 13       	j 8000de9e <__ssprint_r+0xdc>
8000de7a:	6d 00 7d 00 	call 8000df74 <_realloc_r>
8000de7e:	40 2d       	mov.aa %a13,%a2
8000de80:	7c 2f       	jnz.a %a2,8000de9e <__ssprint_r+0xdc>
8000de82:	c8 45       	ld.a %a5,[%a15]16
8000de84:	40 e4       	mov.aa %a4,%a14
8000de86:	6d ff ea eb 	call 8000b65a <_free_r>
8000de8a:	da 0c       	mov %d15,12
8000de8c:	6c e0       	st.w [%a14]0,%d15
8000de8e:	8c f6       	ld.h %d15,[%a15]12
8000de90:	82 f2       	mov %d2,-1
8000de92:	96 40       	or %d15,64
8000de94:	a8 6f       	st.h [%a15]12,%d15
8000de96:	82 0f       	mov %d15,0
8000de98:	6c c2       	st.w [%a12]8,%d15
8000de9a:	6c c1       	st.w [%a12]4,%d15
8000de9c:	00 90       	ret 
8000de9e:	e8 4d       	st.a [%a15]16,%a13
8000dea0:	10 dd       	addsc.a %a13,%a13,%d15,0
8000dea2:	68 5a       	st.w [%a15]20,%d10
8000dea4:	a2 fa       	sub %d10,%d15
8000dea6:	e8 0d       	st.a [%a15]0,%a13
8000dea8:	02 98       	mov %d8,%d9
8000deaa:	68 2a       	st.w [%a15]8,%d10
8000deac:	3c ad       	j 8000de06 <__ssprint_r+0x44>
8000deae:	02 98       	mov %d8,%d9
8000deb0:	3c ad       	j 8000de0a <__ssprint_r+0x48>

8000deb2 <_calloc_r>:
8000deb2:	e2 54       	mul %d4,%d5
8000deb4:	6d ff de e8 	call 8000b070 <_malloc_r>
8000deb8:	40 2f       	mov.aa %a15,%a2
8000deba:	a0 02       	mov.a %a2,0
8000debc:	bd 0f 2b 00 	jz.a %a15,8000df12 <_calloc_r+0x60>
8000dec0:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000dec4:	8f 35 c0 51 	andn %d5,%d5,3
8000dec8:	c2 c5       	add %d5,-4
8000deca:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000dece:	ee 1d       	jnz %d15,8000df08 <_calloc_r+0x56>
8000ded0:	8b 45 61 f2 	lt.u %d15,%d5,20
8000ded4:	40 f2       	mov.aa %a2,%a15
8000ded6:	ee 14       	jnz %d15,8000defe <_calloc_r+0x4c>
8000ded8:	82 0f       	mov %d15,0
8000deda:	68 0f       	st.w [%a15]0,%d15
8000dedc:	68 1f       	st.w [%a15]4,%d15
8000dede:	8b c5 a1 22 	ge.u %d2,%d5,28
8000dee2:	d9 f2 08 00 	lea %a2,[%a15]8
8000dee6:	76 2c       	jz %d2,8000defe <_calloc_r+0x4c>
8000dee8:	68 2f       	st.w [%a15]8,%d15
8000deea:	68 3f       	st.w [%a15]12,%d15
8000deec:	8b 45 02 52 	eq %d5,%d5,36
8000def0:	d9 f2 10 00 	lea %a2,[%a15]16
8000def4:	76 55       	jz %d5,8000defe <_calloc_r+0x4c>
8000def6:	68 4f       	st.w [%a15]16,%d15
8000def8:	d9 f2 18 00 	lea %a2,[%a15]24
8000defc:	68 5f       	st.w [%a15]20,%d15
8000defe:	82 0f       	mov %d15,0
8000df00:	6c 20       	st.w [%a2]0,%d15
8000df02:	6c 21       	st.w [%a2]4,%d15
8000df04:	6c 22       	st.w [%a2]8,%d15
8000df06:	3c 05       	j 8000df10 <_calloc_r+0x5e>
8000df08:	40 f4       	mov.aa %a4,%a15
8000df0a:	82 04       	mov %d4,0
8000df0c:	6d 00 2c 00 	call 8000df64 <memset>
8000df10:	40 f2       	mov.aa %a2,%a15
8000df12:	00 90       	ret 

8000df14 <memmove>:
8000df14:	80 46       	mov.d %d6,%a4
8000df16:	80 52       	mov.d %d2,%a5
8000df18:	7f 62 16 80 	jge.u %d2,%d6,8000df44 <memmove+0x30>
8000df1c:	0b 42 00 50 	add %d5,%d2,%d4
8000df20:	7f 56 12 80 	jge.u %d6,%d5,8000df44 <memmove+0x30>
8000df24:	60 4f       	mov.a %a15,%d4
8000df26:	02 42       	mov %d2,%d4
8000df28:	c2 f2       	add %d2,-1
8000df2a:	fd f0 03 00 	loop %a15,8000df30 <memmove+0x1c>
8000df2e:	3c 19       	j 8000df60 <memmove+0x4c>
8000df30:	5a 42       	sub %d15,%d2,%d4
8000df32:	60 f2       	mov.a %a2,%d15
8000df34:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000df38:	1a 62       	add %d15,%d2,%d6
8000df3a:	79 23 00 00 	ld.b %d3,[%a2]0
8000df3e:	60 f2       	mov.a %a2,%d15
8000df40:	34 23       	st.b [%a2],%d3
8000df42:	3c f3       	j 8000df28 <memmove+0x14>
8000df44:	60 4f       	mov.a %a15,%d4
8000df46:	a0 02       	mov.a %a2,0
8000df48:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000df4c:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000df50:	fd f0 03 00 	loop %a15,8000df56 <memmove+0x42>
8000df54:	3c 06       	j 8000df60 <memmove+0x4c>
8000df56:	79 33 00 00 	ld.b %d3,[%a3]0
8000df5a:	b0 12       	add.a %a2,1
8000df5c:	34 43       	st.b [%a4],%d3
8000df5e:	3c f5       	j 8000df48 <memmove+0x34>
8000df60:	60 62       	mov.a %a2,%d6
8000df62:	00 90       	ret 

8000df64 <memset>:
8000df64:	40 42       	mov.aa %a2,%a4
8000df66:	40 4f       	mov.aa %a15,%a4
8000df68:	9f 05 03 80 	jned %d5,0,8000df6e <memset+0xa>
8000df6c:	00 90       	ret 
8000df6e:	28 04       	st.b [%a15]0,%d4
8000df70:	b0 1f       	add.a %a15,1
8000df72:	3c fb       	j 8000df68 <memset+0x4>

8000df74 <_realloc_r>:
8000df74:	40 4d       	mov.aa %a13,%a4
8000df76:	40 5f       	mov.aa %a15,%a5
8000df78:	02 49       	mov %d9,%d4
8000df7a:	7c 53       	jnz.a %a5,8000df80 <_realloc_r+0xc>
8000df7c:	1d ff 7a e8 	j 8000b070 <_malloc_r>
8000df80:	6d ff c5 ea 	call 8000b50a <__malloc_lock>
8000df84:	1b b9 00 20 	addi %d2,%d9,11
8000df88:	8b 72 61 f2 	lt.u %d15,%d2,23
8000df8c:	8f 72 c0 21 	andn %d2,%d2,7
8000df90:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000df94:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000df98:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000df9c:	8b 0f 20 25 	or.lt %d2,%d15,0
8000dfa0:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000dfa4:	8f 33 c0 81 	andn %d8,%d3,3
8000dfa8:	76 25       	jz %d2,8000dfb2 <_realloc_r+0x3e>
8000dfaa:	da 0c       	mov %d15,12
8000dfac:	6c d0       	st.w [%a13]0,%d15
8000dfae:	1d 00 56 01 	j 8000e25a <_realloc_r+0x2e6>
8000dfb2:	7f f8 ac 01 	jge %d8,%d15,8000e30a <_realloc_r+0x396>
8000dfb6:	7b 00 00 c7 	movh %d12,28672
8000dfba:	60 c3       	mov.a %a3,%d12
8000dfbc:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000dfc0:	d9 34 08 40 	lea %a4,[%a3]264
8000dfc4:	99 43 08 00 	ld.a %a3,[%a4]8
8000dfc8:	80 4c       	mov.d %d12,%a4
8000dfca:	19 2b 04 00 	ld.w %d11,[%a2]4
8000dfce:	7d 32 0a 00 	jeq.a %a2,%a3,8000dfe2 <_realloc_r+0x6e>
8000dfd2:	8f 1b c0 21 	andn %d2,%d11,1
8000dfd6:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000dfda:	19 42 04 00 	ld.w %d2,[%a4]4
8000dfde:	6f 02 2b 80 	jnz.t %d2,0,8000e034 <_realloc_r+0xc0>
8000dfe2:	8f 3b c0 b1 	andn %d11,%d11,3
8000dfe6:	0b 8b 00 20 	add %d2,%d11,%d8
8000dfea:	7d 32 1b 80 	jne.a %a2,%a3,8000e020 <_realloc_r+0xac>
8000dfee:	1b 0f 01 40 	addi %d4,%d15,16
8000dff2:	3f 42 23 00 	jlt %d2,%d4,8000e038 <_realloc_r+0xc4>
8000dff6:	10 ee       	addsc.a %a14,%a14,%d15,0
8000dff8:	60 c2       	mov.a %a2,%d12
8000dffa:	a2 f2       	sub %d2,%d15
8000dffc:	b5 2e 08 00 	st.a [%a2]8,%a14
8000e000:	8f 12 40 21 	or %d2,%d2,1
8000e004:	59 e2 04 00 	st.w [%a14]4,%d2
8000e008:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e00c:	40 d4       	mov.aa %a4,%a13
8000e00e:	8f 12 00 21 	and %d2,%d2,1
8000e012:	a6 2f       	or %d15,%d2
8000e014:	59 ff fc ff 	st.w [%a15]-4,%d15
8000e018:	6d ff 7a ea 	call 8000b50c <__malloc_unlock>
8000e01c:	40 f2       	mov.aa %a2,%a15
8000e01e:	00 90       	ret 
8000e020:	3f f2 0c 00 	jlt %d2,%d15,8000e038 <_realloc_r+0xc4>
8000e024:	cc 23       	ld.a %a15,[%a2]12
8000e026:	99 22 08 00 	ld.a %a2,[%a2]8
8000e02a:	02 28       	mov %d8,%d2
8000e02c:	ec 23       	st.a [%a2]12,%a15
8000e02e:	e8 22       	st.a [%a15]8,%a2
8000e030:	1d 00 6d 01 	j 8000e30a <_realloc_r+0x396>
8000e034:	82 0b       	mov %d11,0
8000e036:	a0 02       	mov.a %a2,0
8000e038:	6f 03 08 81 	jnz.t %d3,0,8000e248 <_realloc_r+0x2d4>
8000e03c:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000e040:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000e044:	19 ca 04 00 	ld.w %d10,[%a12]4
8000e048:	8f 3a c0 a1 	andn %d10,%d10,3
8000e04c:	42 8a       	add %d10,%d8
8000e04e:	bd 02 b3 00 	jz.a %a2,8000e1b4 <_realloc_r+0x240>
8000e052:	42 ab       	add %d11,%d10
8000e054:	7d 32 5f 80 	jne.a %a2,%a3,8000e112 <_realloc_r+0x19e>
8000e058:	1b 0f 01 20 	addi %d2,%d15,16
8000e05c:	3f 2b ac 00 	jlt %d11,%d2,8000e1b4 <_realloc_r+0x240>
8000e060:	40 ce       	mov.aa %a14,%a12
8000e062:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e066:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000e06a:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e06e:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e072:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e076:	b5 23 08 00 	st.a [%a2]8,%a3
8000e07a:	df 02 36 80 	jne %d2,0,8000e0e6 <_realloc_r+0x172>
8000e07e:	8b 44 61 22 	lt.u %d2,%d4,20
8000e082:	40 e3       	mov.aa %a3,%a14
8000e084:	df 02 28 80 	jne %d2,0,8000e0d4 <_realloc_r+0x160>
8000e088:	48 02       	ld.w %d2,[%a15]0
8000e08a:	59 c2 08 00 	st.w [%a12]8,%d2
8000e08e:	48 13       	ld.w %d3,[%a15]4
8000e090:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e094:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e098:	f6 26       	jnz %d2,8000e0a4 <_realloc_r+0x130>
8000e09a:	d9 c3 10 00 	lea %a3,[%a12]16
8000e09e:	d9 ff 08 00 	lea %a15,[%a15]8
8000e0a2:	3c 19       	j 8000e0d4 <_realloc_r+0x160>
8000e0a4:	48 22       	ld.w %d2,[%a15]8
8000e0a6:	8b 44 02 82 	eq %d8,%d4,36
8000e0aa:	59 c2 10 00 	st.w [%a12]16,%d2
8000e0ae:	48 33       	ld.w %d3,[%a15]12
8000e0b0:	59 c3 14 00 	st.w [%a12]20,%d3
8000e0b4:	f6 86       	jnz %d8,8000e0c0 <_realloc_r+0x14c>
8000e0b6:	d9 c3 18 00 	lea %a3,[%a12]24
8000e0ba:	d9 ff 10 00 	lea %a15,[%a15]16
8000e0be:	3c 0b       	j 8000e0d4 <_realloc_r+0x160>
8000e0c0:	48 42       	ld.w %d2,[%a15]16
8000e0c2:	d9 c3 20 00 	lea %a3,[%a12]32
8000e0c6:	59 c2 18 00 	st.w [%a12]24,%d2
8000e0ca:	48 53       	ld.w %d3,[%a15]20
8000e0cc:	d9 ff 18 00 	lea %a15,[%a15]24
8000e0d0:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e0d4:	48 02       	ld.w %d2,[%a15]0
8000e0d6:	74 32       	st.w [%a3],%d2
8000e0d8:	48 13       	ld.w %d3,[%a15]4
8000e0da:	59 33 04 00 	st.w [%a3]4,%d3
8000e0de:	48 22       	ld.w %d2,[%a15]8
8000e0e0:	59 32 08 00 	st.w [%a3]8,%d2
8000e0e4:	3c 05       	j 8000e0ee <_realloc_r+0x17a>
8000e0e6:	40 e4       	mov.aa %a4,%a14
8000e0e8:	40 f5       	mov.aa %a5,%a15
8000e0ea:	6d ff 15 ff 	call 8000df14 <memmove>
8000e0ee:	10 cf       	addsc.a %a15,%a12,%d15,0
8000e0f0:	60 c2       	mov.a %a2,%d12
8000e0f2:	a2 fb       	sub %d11,%d15
8000e0f4:	ec 22       	st.a [%a2]8,%a15
8000e0f6:	8f 1b 40 b1 	or %d11,%d11,1
8000e0fa:	68 1b       	st.w [%a15]4,%d11
8000e0fc:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e100:	40 d4       	mov.aa %a4,%a13
8000e102:	8f 12 00 21 	and %d2,%d2,1
8000e106:	a6 2f       	or %d15,%d2
8000e108:	6c c1       	st.w [%a12]4,%d15
8000e10a:	6d ff 01 ea 	call 8000b50c <__malloc_unlock>
8000e10e:	40 e2       	mov.aa %a2,%a14
8000e110:	00 90       	ret 
8000e112:	3f fb 51 00 	jlt %d11,%d15,8000e1b4 <_realloc_r+0x240>
8000e116:	99 23 0c 00 	ld.a %a3,[%a2]12
8000e11a:	99 22 08 00 	ld.a %a2,[%a2]8
8000e11e:	40 c4       	mov.aa %a4,%a12
8000e120:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e124:	b5 23 0c 00 	st.a [%a2]12,%a3
8000e128:	b5 32 08 00 	st.a [%a3]8,%a2
8000e12c:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e130:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e134:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e138:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e13c:	b5 23 08 00 	st.a [%a2]8,%a3
8000e140:	df 02 35 80 	jne %d2,0,8000e1aa <_realloc_r+0x236>
8000e144:	8b 44 61 22 	lt.u %d2,%d4,20
8000e148:	df 02 28 80 	jne %d2,0,8000e198 <_realloc_r+0x224>
8000e14c:	48 02       	ld.w %d2,[%a15]0
8000e14e:	59 c2 08 00 	st.w [%a12]8,%d2
8000e152:	48 13       	ld.w %d3,[%a15]4
8000e154:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e158:	59 c3 0c 00 	st.w [%a12]12,%d3
8000e15c:	f6 26       	jnz %d2,8000e168 <_realloc_r+0x1f4>
8000e15e:	d9 c4 10 00 	lea %a4,[%a12]16
8000e162:	d9 ff 08 00 	lea %a15,[%a15]8
8000e166:	3c 19       	j 8000e198 <_realloc_r+0x224>
8000e168:	48 22       	ld.w %d2,[%a15]8
8000e16a:	8b 44 02 82 	eq %d8,%d4,36
8000e16e:	59 c2 10 00 	st.w [%a12]16,%d2
8000e172:	48 33       	ld.w %d3,[%a15]12
8000e174:	59 c3 14 00 	st.w [%a12]20,%d3
8000e178:	f6 86       	jnz %d8,8000e184 <_realloc_r+0x210>
8000e17a:	d9 c4 18 00 	lea %a4,[%a12]24
8000e17e:	d9 ff 10 00 	lea %a15,[%a15]16
8000e182:	3c 0b       	j 8000e198 <_realloc_r+0x224>
8000e184:	48 42       	ld.w %d2,[%a15]16
8000e186:	d9 c4 20 00 	lea %a4,[%a12]32
8000e18a:	59 c2 18 00 	st.w [%a12]24,%d2
8000e18e:	48 53       	ld.w %d3,[%a15]20
8000e190:	d9 ff 18 00 	lea %a15,[%a15]24
8000e194:	59 c3 1c 00 	st.w [%a12]28,%d3
8000e198:	48 02       	ld.w %d2,[%a15]0
8000e19a:	74 42       	st.w [%a4],%d2
8000e19c:	48 13       	ld.w %d3,[%a15]4
8000e19e:	59 43 04 00 	st.w [%a4]4,%d3
8000e1a2:	48 22       	ld.w %d2,[%a15]8
8000e1a4:	59 42 08 00 	st.w [%a4]8,%d2
8000e1a8:	3c 04       	j 8000e1b0 <_realloc_r+0x23c>
8000e1aa:	40 f5       	mov.aa %a5,%a15
8000e1ac:	6d ff b4 fe 	call 8000df14 <memmove>
8000e1b0:	02 b8       	mov %d8,%d11
8000e1b2:	3c 45       	j 8000e23c <_realloc_r+0x2c8>
8000e1b4:	3f fa 4a 00 	jlt %d10,%d15,8000e248 <_realloc_r+0x2d4>
8000e1b8:	40 c4       	mov.aa %a4,%a12
8000e1ba:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000e1be:	09 43 88 05 	ld.a %a3,[+%a4]8
8000e1c2:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e1c6:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e1ca:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e1ce:	b5 23 08 00 	st.a [%a2]8,%a3
8000e1d2:	df 02 37 80 	jne %d2,0,8000e240 <_realloc_r+0x2cc>
8000e1d6:	8b 44 61 22 	lt.u %d2,%d4,20
8000e1da:	df 02 28 80 	jne %d2,0,8000e22a <_realloc_r+0x2b6>
8000e1de:	48 03       	ld.w %d3,[%a15]0
8000e1e0:	59 c3 08 00 	st.w [%a12]8,%d3
8000e1e4:	48 12       	ld.w %d2,[%a15]4
8000e1e6:	59 c2 0c 00 	st.w [%a12]12,%d2
8000e1ea:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e1ee:	f6 26       	jnz %d2,8000e1fa <_realloc_r+0x286>
8000e1f0:	d9 c4 10 00 	lea %a4,[%a12]16
8000e1f4:	d9 ff 08 00 	lea %a15,[%a15]8
8000e1f8:	3c 19       	j 8000e22a <_realloc_r+0x2b6>
8000e1fa:	48 23       	ld.w %d3,[%a15]8
8000e1fc:	8b 44 02 82 	eq %d8,%d4,36
8000e200:	59 c3 10 00 	st.w [%a12]16,%d3
8000e204:	48 32       	ld.w %d2,[%a15]12
8000e206:	59 c2 14 00 	st.w [%a12]20,%d2
8000e20a:	f6 86       	jnz %d8,8000e216 <_realloc_r+0x2a2>
8000e20c:	d9 c4 18 00 	lea %a4,[%a12]24
8000e210:	d9 ff 10 00 	lea %a15,[%a15]16
8000e214:	3c 0b       	j 8000e22a <_realloc_r+0x2b6>
8000e216:	48 43       	ld.w %d3,[%a15]16
8000e218:	d9 c4 20 00 	lea %a4,[%a12]32
8000e21c:	59 c3 18 00 	st.w [%a12]24,%d3
8000e220:	48 52       	ld.w %d2,[%a15]20
8000e222:	d9 ff 18 00 	lea %a15,[%a15]24
8000e226:	59 c2 1c 00 	st.w [%a12]28,%d2
8000e22a:	48 03       	ld.w %d3,[%a15]0
8000e22c:	74 43       	st.w [%a4],%d3
8000e22e:	48 12       	ld.w %d2,[%a15]4
8000e230:	59 42 04 00 	st.w [%a4]4,%d2
8000e234:	48 23       	ld.w %d3,[%a15]8
8000e236:	59 43 08 00 	st.w [%a4]8,%d3
8000e23a:	02 a8       	mov %d8,%d10
8000e23c:	40 ce       	mov.aa %a14,%a12
8000e23e:	3c 66       	j 8000e30a <_realloc_r+0x396>
8000e240:	40 f5       	mov.aa %a5,%a15
8000e242:	6d ff 69 fe 	call 8000df14 <memmove>
8000e246:	3c fa       	j 8000e23a <_realloc_r+0x2c6>
8000e248:	40 d4       	mov.aa %a4,%a13
8000e24a:	02 94       	mov %d4,%d9
8000e24c:	6d ff 12 e7 	call 8000b070 <_malloc_r>
8000e250:	40 2c       	mov.aa %a12,%a2
8000e252:	7c 26       	jnz.a %a2,8000e25e <_realloc_r+0x2ea>
8000e254:	40 d4       	mov.aa %a4,%a13
8000e256:	6d ff 5b e9 	call 8000b50c <__malloc_unlock>
8000e25a:	a0 02       	mov.a %a2,0
8000e25c:	00 90       	ret 
8000e25e:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000e262:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000e266:	8f 12 c0 21 	andn %d2,%d2,1
8000e26a:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000e26e:	80 32       	mov.d %d2,%a3
8000e270:	80 23       	mov.d %d3,%a2
8000e272:	5f 32 08 80 	jne %d2,%d3,8000e282 <_realloc_r+0x30e>
8000e276:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e27a:	8f 32 c0 21 	andn %d2,%d2,3
8000e27e:	42 28       	add %d8,%d2
8000e280:	3c 45       	j 8000e30a <_realloc_r+0x396>
8000e282:	1b c8 ff 4f 	addi %d4,%d8,-4
8000e286:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000e28a:	ee 33       	jnz %d15,8000e2f0 <_realloc_r+0x37c>
8000e28c:	8b 44 61 f2 	lt.u %d15,%d4,20
8000e290:	40 c3       	mov.aa %a3,%a12
8000e292:	40 f2       	mov.aa %a2,%a15
8000e294:	ee 23       	jnz %d15,8000e2da <_realloc_r+0x366>
8000e296:	4c f0       	ld.w %d15,[%a15]0
8000e298:	d9 c3 08 00 	lea %a3,[%a12]8
8000e29c:	6c c0       	st.w [%a12]0,%d15
8000e29e:	48 12       	ld.w %d2,[%a15]4
8000e2a0:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000e2a4:	59 c2 04 00 	st.w [%a12]4,%d2
8000e2a8:	d9 f2 08 00 	lea %a2,[%a15]8
8000e2ac:	6e 17       	jz %d15,8000e2da <_realloc_r+0x366>
8000e2ae:	48 23       	ld.w %d3,[%a15]8
8000e2b0:	8b 44 02 82 	eq %d8,%d4,36
8000e2b4:	59 c3 08 00 	st.w [%a12]8,%d3
8000e2b8:	4c f3       	ld.w %d15,[%a15]12
8000e2ba:	d9 c3 10 00 	lea %a3,[%a12]16
8000e2be:	6c c3       	st.w [%a12]12,%d15
8000e2c0:	d9 f2 10 00 	lea %a2,[%a15]16
8000e2c4:	76 8b       	jz %d8,8000e2da <_realloc_r+0x366>
8000e2c6:	48 42       	ld.w %d2,[%a15]16
8000e2c8:	d9 c3 18 00 	lea %a3,[%a12]24
8000e2cc:	59 c2 10 00 	st.w [%a12]16,%d2
8000e2d0:	48 53       	ld.w %d3,[%a15]20
8000e2d2:	d9 f2 18 00 	lea %a2,[%a15]24
8000e2d6:	59 c3 14 00 	st.w [%a12]20,%d3
8000e2da:	4c 20       	ld.w %d15,[%a2]0
8000e2dc:	6c 30       	st.w [%a3]0,%d15
8000e2de:	19 22 04 00 	ld.w %d2,[%a2]4
8000e2e2:	59 32 04 00 	st.w [%a3]4,%d2
8000e2e6:	19 23 08 00 	ld.w %d3,[%a2]8
8000e2ea:	59 33 08 00 	st.w [%a3]8,%d3
8000e2ee:	3c 05       	j 8000e2f8 <_realloc_r+0x384>
8000e2f0:	40 c4       	mov.aa %a4,%a12
8000e2f2:	40 f5       	mov.aa %a5,%a15
8000e2f4:	6d ff 10 fe 	call 8000df14 <memmove>
8000e2f8:	40 d4       	mov.aa %a4,%a13
8000e2fa:	40 f5       	mov.aa %a5,%a15
8000e2fc:	6d ff af e9 	call 8000b65a <_free_r>
8000e300:	40 d4       	mov.aa %a4,%a13
8000e302:	6d ff 05 e9 	call 8000b50c <__malloc_unlock>
8000e306:	40 c2       	mov.aa %a2,%a12
8000e308:	00 90       	ret 
8000e30a:	0b f8 80 20 	sub %d2,%d8,%d15
8000e30e:	8b 02 61 42 	lt.u %d4,%d2,16
8000e312:	19 e3 04 00 	ld.w %d3,[%a14]4
8000e316:	df 04 16 80 	jne %d4,0,8000e342 <_realloc_r+0x3ce>
8000e31a:	8f 13 00 31 	and %d3,%d3,1
8000e31e:	10 e5       	addsc.a %a5,%a14,%d15,0
8000e320:	a6 3f       	or %d15,%d3
8000e322:	6c e1       	st.w [%a14]4,%d15
8000e324:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000e328:	8f 12 40 f1 	or %d15,%d2,1
8000e32c:	b7 10 21 20 	imask %e2,1,0,1
8000e330:	6c 51       	st.w [%a5]4,%d15
8000e332:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e336:	40 d4       	mov.aa %a4,%a13
8000e338:	d9 55 08 00 	lea %a5,[%a5]8
8000e33c:	6d ff 8f e9 	call 8000b65a <_free_r>
8000e340:	3c 0c       	j 8000e358 <_realloc_r+0x3e4>
8000e342:	8f 13 00 31 	and %d3,%d3,1
8000e346:	a6 83       	or %d3,%d8
8000e348:	59 e3 04 00 	st.w [%a14]4,%d3
8000e34c:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000e350:	b7 10 21 20 	imask %e2,1,0,1
8000e354:	49 f2 44 08 	ldmst [%a15]4,%e2
8000e358:	40 d4       	mov.aa %a4,%a13
8000e35a:	6d ff d9 e8 	call 8000b50c <__malloc_unlock>
8000e35e:	d9 e2 08 00 	lea %a2,[%a14]8
8000e362:	00 90       	ret 

8000e364 <_exit>:
8000e364:	76 43       	jz %d4,8000e36a <_exit+0x6>
8000e366:	60 4e       	mov.a %a14,%d4
8000e368:	3c 04       	j 8000e370 <_exit+0xc>
8000e36a:	bb d0 00 f9 	mov.u %d15,36877
8000e36e:	60 fe       	mov.a %a14,%d15
8000e370:	00 a0       	debug 
8000e372:	3c 00       	j 8000e372 <_exit+0xe>

8000e374 <sbrk>:
8000e374:	91 00 00 f7 	movh.a %a15,28672
8000e378:	19 ff b8 40 	ld.w %d15,[%a15]2360 <70000938 <heap_top.2289>>
8000e37c:	7b 00 00 27 	movh %d2,28672
8000e380:	42 f4       	add %d4,%d15
8000e382:	1b 82 f1 20 	addi %d2,%d2,3864
8000e386:	7f 42 09 80 	jge.u %d2,%d4,8000e398 <sbrk+0x24>
8000e38a:	6d 00 13 00 	call 8000e3b0 <__errno>
8000e38e:	da 0c       	mov %d15,12
8000e390:	6c 20       	st.w [%a2]0,%d15
8000e392:	a0 02       	mov.a %a2,0
8000e394:	b0 f2       	add.a %a2,-1
8000e396:	00 90       	ret 
8000e398:	7b 00 00 27 	movh %d2,28672
8000e39c:	1b 82 f1 20 	addi %d2,%d2,3864
8000e3a0:	7f 24 04 80 	jge.u %d4,%d2,8000e3a8 <sbrk+0x34>
8000e3a4:	6d 00 0b 00 	call 8000e3ba <abort>
8000e3a8:	59 f4 b8 40 	st.w [%a15]2360,%d4
8000e3ac:	60 f2       	mov.a %a2,%d15
8000e3ae:	00 90       	ret 

8000e3b0 <__errno>:
8000e3b0:	91 00 00 27 	movh.a %a2,28672
8000e3b4:	d9 22 d0 c0 	lea %a2,[%a2]3856 <70000f10 <_my_errno>>
8000e3b8:	00 90       	ret 

8000e3ba <abort>:
8000e3ba:	00 a0       	debug 
8000e3bc:	7b e0 ea fd 	movh %d15,57006
8000e3c0:	1b ff ee fb 	addi %d15,%d15,-16657
8000e3c4:	60 fe       	mov.a %a14,%d15
8000e3c6:	1d ff cf ff 	j 8000e364 <_exit>
8000e3ca:	3c 00       	j 8000e3ca <abort+0x10>

8000e3cc <__eqdf2>:
8000e3cc:	20 38       	sub.a %sp,56
8000e3ce:	40 a4       	mov.aa %a4,%sp
8000e3d0:	d9 a5 10 00 	lea %a5,[%sp]16
8000e3d4:	89 a4 40 09 	st.d [%sp],%e4
8000e3d8:	89 a6 48 09 	st.d [%sp]8,%e6
8000e3dc:	6d ff 84 e5 	call 8000aee4 <__unpack_d>
8000e3e0:	d9 a4 08 00 	lea %a4,[%sp]8
8000e3e4:	d9 a5 24 00 	lea %a5,[%sp]36
8000e3e8:	6d ff 7e e5 	call 8000aee4 <__unpack_d>
8000e3ec:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e3f0:	82 12       	mov %d2,1
8000e3f2:	bf 2f 0c 80 	jlt.u %d15,2,8000e40a <__eqdf2+0x3e>
8000e3f6:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e3fa:	bf 2f 08 80 	jlt.u %d15,2,8000e40a <__eqdf2+0x3e>
8000e3fe:	d9 a4 10 00 	lea %a4,[%sp]16
8000e402:	d9 a5 24 00 	lea %a5,[%sp]36
8000e406:	6d 00 26 01 	call 8000e652 <__fpcmp_parts_d>
8000e40a:	00 90       	ret 

8000e40c <__nedf2>:
8000e40c:	20 38       	sub.a %sp,56
8000e40e:	40 a4       	mov.aa %a4,%sp
8000e410:	d9 a5 10 00 	lea %a5,[%sp]16
8000e414:	89 a4 40 09 	st.d [%sp],%e4
8000e418:	89 a6 48 09 	st.d [%sp]8,%e6
8000e41c:	6d ff 64 e5 	call 8000aee4 <__unpack_d>
8000e420:	d9 a4 08 00 	lea %a4,[%sp]8
8000e424:	d9 a5 24 00 	lea %a5,[%sp]36
8000e428:	6d ff 5e e5 	call 8000aee4 <__unpack_d>
8000e42c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e430:	82 12       	mov %d2,1
8000e432:	bf 2f 0c 80 	jlt.u %d15,2,8000e44a <__nedf2+0x3e>
8000e436:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e43a:	bf 2f 08 80 	jlt.u %d15,2,8000e44a <__nedf2+0x3e>
8000e43e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e442:	d9 a5 24 00 	lea %a5,[%sp]36
8000e446:	6d 00 06 01 	call 8000e652 <__fpcmp_parts_d>
8000e44a:	00 90       	ret 

8000e44c <__gtdf2>:
8000e44c:	20 38       	sub.a %sp,56
8000e44e:	40 a4       	mov.aa %a4,%sp
8000e450:	d9 a5 10 00 	lea %a5,[%sp]16
8000e454:	89 a4 40 09 	st.d [%sp],%e4
8000e458:	89 a6 48 09 	st.d [%sp]8,%e6
8000e45c:	6d ff 44 e5 	call 8000aee4 <__unpack_d>
8000e460:	d9 a4 08 00 	lea %a4,[%sp]8
8000e464:	d9 a5 24 00 	lea %a5,[%sp]36
8000e468:	6d ff 3e e5 	call 8000aee4 <__unpack_d>
8000e46c:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e470:	82 f2       	mov %d2,-1
8000e472:	bf 2f 0c 80 	jlt.u %d15,2,8000e48a <__gtdf2+0x3e>
8000e476:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e47a:	bf 2f 08 80 	jlt.u %d15,2,8000e48a <__gtdf2+0x3e>
8000e47e:	d9 a4 10 00 	lea %a4,[%sp]16
8000e482:	d9 a5 24 00 	lea %a5,[%sp]36
8000e486:	6d 00 e6 00 	call 8000e652 <__fpcmp_parts_d>
8000e48a:	00 90       	ret 

8000e48c <__gedf2>:
8000e48c:	20 38       	sub.a %sp,56
8000e48e:	40 a4       	mov.aa %a4,%sp
8000e490:	d9 a5 10 00 	lea %a5,[%sp]16
8000e494:	89 a4 40 09 	st.d [%sp],%e4
8000e498:	89 a6 48 09 	st.d [%sp]8,%e6
8000e49c:	6d ff 24 e5 	call 8000aee4 <__unpack_d>
8000e4a0:	d9 a4 08 00 	lea %a4,[%sp]8
8000e4a4:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4a8:	6d ff 1e e5 	call 8000aee4 <__unpack_d>
8000e4ac:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e4b0:	82 f2       	mov %d2,-1
8000e4b2:	bf 2f 0c 80 	jlt.u %d15,2,8000e4ca <__gedf2+0x3e>
8000e4b6:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e4ba:	bf 2f 08 80 	jlt.u %d15,2,8000e4ca <__gedf2+0x3e>
8000e4be:	d9 a4 10 00 	lea %a4,[%sp]16
8000e4c2:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4c6:	6d 00 c6 00 	call 8000e652 <__fpcmp_parts_d>
8000e4ca:	00 90       	ret 

8000e4cc <__ltdf2>:
8000e4cc:	20 38       	sub.a %sp,56
8000e4ce:	40 a4       	mov.aa %a4,%sp
8000e4d0:	d9 a5 10 00 	lea %a5,[%sp]16
8000e4d4:	89 a4 40 09 	st.d [%sp],%e4
8000e4d8:	89 a6 48 09 	st.d [%sp]8,%e6
8000e4dc:	6d ff 04 e5 	call 8000aee4 <__unpack_d>
8000e4e0:	d9 a4 08 00 	lea %a4,[%sp]8
8000e4e4:	d9 a5 24 00 	lea %a5,[%sp]36
8000e4e8:	6d ff fe e4 	call 8000aee4 <__unpack_d>
8000e4ec:	39 af 10 00 	ld.bu %d15,[%sp]16
8000e4f0:	82 12       	mov %d2,1
8000e4f2:	bf 2f 0c 80 	jlt.u %d15,2,8000e50a <__ltdf2+0x3e>
8000e4f6:	39 af 24 00 	ld.bu %d15,[%sp]36
8000e4fa:	bf 2f 08 80 	jlt.u %d15,2,8000e50a <__ltdf2+0x3e>
8000e4fe:	d9 a4 10 00 	lea %a4,[%sp]16
8000e502:	d9 a5 24 00 	lea %a5,[%sp]36
8000e506:	6d 00 a6 00 	call 8000e652 <__fpcmp_parts_d>
8000e50a:	00 90       	ret 

8000e50c <__fixdfsi>:
8000e50c:	20 20       	sub.a %sp,32
8000e50e:	d9 a4 20 00 	lea %a4,[%sp]32
8000e512:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000e516:	d9 a5 0c 00 	lea %a5,[%sp]12
8000e51a:	6d ff e5 e4 	call 8000aee4 <__unpack_d>
8000e51e:	0c ac       	ld.bu %d15,[%sp]12
8000e520:	82 02       	mov %d2,0
8000e522:	bf 3f 1b 80 	jlt.u %d15,3,8000e558 <__fixdfsi+0x4c>
8000e526:	5e 48       	jne %d15,4,8000e536 <__fixdfsi+0x2a>
8000e528:	7b 00 00 28 	movh %d2,32768
8000e52c:	58 04       	ld.w %d15,[%sp]16
8000e52e:	1b f2 ff 3f 	addi %d3,%d2,-1
8000e532:	6a 32       	cmovn %d2,%d15,%d3
8000e534:	00 90       	ret 
8000e536:	19 a6 14 00 	ld.w %d6,[%sp]20
8000e53a:	82 02       	mov %d2,0
8000e53c:	0e 6e       	jltz %d6,8000e558 <__fixdfsi+0x4c>
8000e53e:	8b f6 81 f2 	ge %d15,%d6,31
8000e542:	ee f3       	jnz %d15,8000e528 <__fixdfsi+0x1c>
8000e544:	09 a4 58 09 	ld.d %e4,[%sp]24
8000e548:	8b c6 03 61 	rsub %d6,%d6,60
8000e54c:	6d ff 09 e1 	call 8000a75e <__lshrdi3>
8000e550:	58 04       	ld.w %d15,[%sp]16
8000e552:	8b 02 00 41 	rsub %d4,%d2,0
8000e556:	2a 42       	cmov %d2,%d15,%d4
8000e558:	00 90       	ret 

8000e55a <__floatunsidf>:
8000e55a:	20 18       	sub.a %sp,24
8000e55c:	82 0f       	mov %d15,0
8000e55e:	78 02       	st.w [%sp]8,%d15
8000e560:	f6 44       	jnz %d4,8000e568 <__floatunsidf+0xe>
8000e562:	82 2f       	mov %d15,2
8000e564:	2c a4       	st.b [%sp]4,%d15
8000e566:	3c 0f       	j 8000e584 <__floatunsidf+0x2a>
8000e568:	82 3f       	mov %d15,3
8000e56a:	2c a4       	st.b [%sp]4,%d15
8000e56c:	0f 04 b0 f1 	clz %d15,%d4
8000e570:	1b df 01 60 	addi %d6,%d15,29
8000e574:	82 05       	mov %d5,0
8000e576:	6d ff d9 e3 	call 8000ad28 <__ashldi3>
8000e57a:	8b ff 01 f1 	rsub %d15,%d15,31
8000e57e:	89 a2 50 09 	st.d [%sp]16,%e2
8000e582:	78 03       	st.w [%sp]12,%d15
8000e584:	d9 a4 04 00 	lea %a4,[%sp]4
8000e588:	1d ff 25 e4 	j 8000add2 <__pack_d>

8000e58c <__udivdi3>:
8000e58c:	0f 67 a0 20 	or %d2,%d7,%d6
8000e590:	0b 45 10 a8 	mov %e10,%d5,%d4
8000e594:	02 6f       	mov %d15,%d6
8000e596:	02 7c       	mov %d12,%d7
8000e598:	d2 f8       	mov %e8,-1
8000e59a:	df 02 46 00 	jeq %d2,0,8000e626 <__udivdi3+0x9a>
8000e59e:	8f 07 40 21 	or %d2,%d7,0
8000e5a2:	f6 2d       	jnz %d2,8000e5bc <__udivdi3+0x30>
8000e5a4:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000e5a8:	d2 04       	mov %e4,0
8000e5aa:	02 a4       	mov %d4,%d10
8000e5ac:	42 95       	add %d5,%d9
8000e5ae:	6d 00 a5 00 	call 8000e6f8 <__udiv6432>
8000e5b2:	82 04       	mov %d4,0
8000e5b4:	02 85       	mov %d5,%d8
8000e5b6:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000e5ba:	3c 36       	j 8000e626 <__udivdi3+0x9a>
8000e5bc:	0b 7b 00 21 	eq %d2,%d11,%d7
8000e5c0:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000e5c4:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000e5c8:	d2 08       	mov %e8,0
8000e5ca:	df 02 2e 80 	jne %d2,0,8000e626 <__udivdi3+0x9a>
8000e5ce:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000e5d2:	0f 07 b0 d1 	clz %d13,%d7
8000e5d6:	60 5f       	mov.a %a15,%d5
8000e5d8:	0b 67 10 48 	mov %e4,%d7,%d6
8000e5dc:	02 d6       	mov %d6,%d13
8000e5de:	6d ff a5 e3 	call 8000ad28 <__ashldi3>
8000e5e2:	8f fb 1f e0 	sh %d14,%d11,-1
8000e5e6:	80 f4       	mov.d %d4,%a15
8000e5e8:	02 36       	mov %d6,%d3
8000e5ea:	02 e5       	mov %d5,%d14
8000e5ec:	6d 00 86 00 	call 8000e6f8 <__udiv6432>
8000e5f0:	8b fd 01 d1 	rsub %d13,%d13,31
8000e5f4:	8b 0d 00 31 	rsub %d3,%d13,0
8000e5f8:	0f 32 00 30 	sh %d3,%d2,%d3
8000e5fc:	02 32       	mov %d2,%d3
8000e5fe:	8b f2 9f 80 	addx %d8,%d2,-1
8000e602:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000e606:	82 03       	mov %d3,0
8000e608:	8b f3 bf 90 	addc %d9,%d3,-1
8000e60c:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000e610:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000e614:	0b cb 00 41 	eq %d4,%d11,%d12
8000e618:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000e61c:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000e620:	f6 43       	jnz %d4,8000e626 <__udivdi3+0x9a>
8000e622:	0b 23 10 88 	mov %e8,%d3,%d2
8000e626:	0b 89 10 28 	mov %e2,%d9,%d8
8000e62a:	00 90       	ret 

8000e62c <__umoddi3>:
8000e62c:	0f 67 a0 90 	or %d9,%d7,%d6
8000e630:	02 6f       	mov %d15,%d6
8000e632:	d2 00       	mov %e0,0
8000e634:	76 9c       	jz %d9,8000e64c <__umoddi3+0x20>
8000e636:	02 7a       	mov %d10,%d7
8000e638:	0b 45 10 88 	mov %e8,%d5,%d4
8000e63c:	6d ff a8 ff 	call 8000e58c <__udivdi3>
8000e640:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000e644:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000e648:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000e64c:	0b 01 10 28 	mov %e2,%d1,%d0
8000e650:	00 90       	ret 

8000e652 <__fpcmp_parts_d>:
8000e652:	14 43       	ld.bu %d3,[%a4]
8000e654:	82 12       	mov %d2,1
8000e656:	bf 23 50 80 	jlt.u %d3,2,8000e6f6 <__fpcmp_parts_d+0xa4>
8000e65a:	0c 50       	ld.bu %d15,[%a5]0
8000e65c:	bf 2f 4d 80 	jlt.u %d15,2,8000e6f6 <__fpcmp_parts_d+0xa4>
8000e660:	8b 43 00 42 	eq %d4,%d3,4
8000e664:	8b 4f 00 22 	eq %d2,%d15,4
8000e668:	0f 24 80 50 	and %d5,%d4,%d2
8000e66c:	76 56       	jz %d5,8000e678 <__fpcmp_parts_d+0x26>
8000e66e:	19 52 04 00 	ld.w %d2,[%a5]4
8000e672:	4c 41       	ld.w %d15,[%a4]4
8000e674:	a2 f2       	sub %d2,%d15
8000e676:	00 90       	ret 
8000e678:	76 47       	jz %d4,8000e686 <__fpcmp_parts_d+0x34>
8000e67a:	19 42 04 00 	ld.w %d2,[%a4]4
8000e67e:	82 1f       	mov %d15,1
8000e680:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000e684:	00 90       	ret 
8000e686:	76 27       	jz %d2,8000e694 <__fpcmp_parts_d+0x42>
8000e688:	19 52 04 00 	ld.w %d2,[%a5]4
8000e68c:	82 ff       	mov %d15,-1
8000e68e:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000e692:	00 90       	ret 
8000e694:	df 23 06 80 	jne %d3,2,8000e6a0 <__fpcmp_parts_d+0x4e>
8000e698:	82 02       	mov %d2,0
8000e69a:	df 2f f7 ff 	jne %d15,2,8000e688 <__fpcmp_parts_d+0x36>
8000e69e:	00 90       	ret 
8000e6a0:	df 2f ed 7f 	jeq %d15,2,8000e67a <__fpcmp_parts_d+0x28>
8000e6a4:	19 45 04 00 	ld.w %d5,[%a4]4
8000e6a8:	4c 51       	ld.w %d15,[%a5]4
8000e6aa:	5f f5 19 80 	jne %d5,%d15,8000e6dc <__fpcmp_parts_d+0x8a>
8000e6ae:	19 42 08 00 	ld.w %d2,[%a4]8
8000e6b2:	4c 52       	ld.w %d15,[%a5]8
8000e6b4:	3f 2f 14 00 	jlt %d15,%d2,8000e6dc <__fpcmp_parts_d+0x8a>
8000e6b8:	3f f2 1c 00 	jlt %d2,%d15,8000e6f0 <__fpcmp_parts_d+0x9e>
8000e6bc:	19 43 10 00 	ld.w %d3,[%a4]16
8000e6c0:	19 54 10 00 	ld.w %d4,[%a5]16
8000e6c4:	19 47 0c 00 	ld.w %d7,[%a4]12
8000e6c8:	19 56 0c 00 	ld.w %d6,[%a5]12
8000e6cc:	0b 43 00 21 	eq %d2,%d3,%d4
8000e6d0:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000e6d4:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000e6d8:	3a 43       	eq %d15,%d3,%d4
8000e6da:	f6 25       	jnz %d2,8000e6e4 <__fpcmp_parts_d+0x92>
8000e6dc:	82 12       	mov %d2,1
8000e6de:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000e6e2:	00 90       	ret 
8000e6e4:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000e6e8:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000e6ec:	82 02       	mov %d2,0
8000e6ee:	ee 04       	jnz %d15,8000e6f6 <__fpcmp_parts_d+0xa4>
8000e6f0:	82 f2       	mov %d2,-1
8000e6f2:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000e6f6:	00 90       	ret 

8000e6f8 <__udiv6432>:
8000e6f8:	02 53       	mov %d3,%d5
8000e6fa:	82 f2       	mov %d2,-1
8000e6fc:	7f 65 4b 80 	jge.u %d5,%d6,8000e792 <__udiv6432+0x9a>
8000e700:	0f 06 b0 21 	clz %d2,%d6
8000e704:	0f 26 00 60 	sh %d6,%d6,%d2
8000e708:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000e70c:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000e710:	8f 06 1f 70 	sh %d7,%d6,-16
8000e714:	4b 73 11 02 	div.u %e0,%d3,%d7
8000e718:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000e71c:	0f 24 00 20 	sh %d2,%d4,%d2
8000e720:	02 05       	mov %d5,%d0
8000e722:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000e726:	e2 80       	mul %d0,%d8
8000e728:	8f 02 1f b0 	sh %d11,%d2,-16
8000e72c:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000e730:	82 0c       	mov %d12,0
8000e732:	7b 10 00 90 	movh %d9,1
8000e736:	7f 95 09 80 	jge.u %d5,%d9,8000e748 <__udiv6432+0x50>
8000e73a:	8f 01 01 f0 	sh %d15,%d1,16
8000e73e:	0b 0c 00 a0 	add %d10,%d12,%d0
8000e742:	42 bf       	add %d15,%d11
8000e744:	7f af 07 80 	jge.u %d15,%d10,8000e752 <__udiv6432+0x5a>
8000e748:	42 71       	add %d1,%d7
8000e74a:	c2 f5       	add %d5,-1
8000e74c:	a2 8c       	sub %d12,%d8
8000e74e:	3f 91 f4 ff 	jlt.u %d1,%d9,8000e736 <__udiv6432+0x3e>
8000e752:	8f 03 01 30 	sh %d3,%d3,16
8000e756:	42 3b       	add %d11,%d3
8000e758:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000e75c:	82 0a       	mov %d10,0
8000e75e:	4b 76 11 02 	div.u %e0,%d6,%d7
8000e762:	7b 10 00 10 	movh %d1,1
8000e766:	02 03       	mov %d3,%d0
8000e768:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000e76c:	e2 80       	mul %d0,%d8
8000e76e:	7f 13 09 80 	jge.u %d3,%d1,8000e780 <__udiv6432+0x88>
8000e772:	8f 06 01 f0 	sh %d15,%d6,16
8000e776:	0b 0a 00 90 	add %d9,%d10,%d0
8000e77a:	42 2f       	add %d15,%d2
8000e77c:	7f 9f 07 80 	jge.u %d15,%d9,8000e78a <__udiv6432+0x92>
8000e780:	42 76       	add %d6,%d7
8000e782:	c2 f3       	add %d3,-1
8000e784:	a2 8a       	sub %d10,%d8
8000e786:	3f 16 f4 ff 	jlt.u %d6,%d1,8000e76e <__udiv6432+0x76>
8000e78a:	8f 05 01 50 	sh %d5,%d5,16
8000e78e:	0b 53 00 20 	add %d2,%d3,%d5
8000e792:	00 90       	ret 
8000e794:	00 00       	nop 
	...
